
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00002596  0000262a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002596  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800102  00800102  0000262c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000262c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000265c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  0000269c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000760e  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001bb6  00000000  00000000  0000a27a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002e18  00000000  00000000  0000be30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001404  00000000  00000000  0000ec48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000020e8  00000000  00000000  0001004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000042f0  00000000  00000000  00012134  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  00016424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	1f c1       	rjmp	.+574    	; 0x244 <__vector_1>
       6:	00 00       	nop
       8:	27 c1       	rjmp	.+590    	; 0x258 <__vector_2>
       a:	00 00       	nop
       c:	2f c1       	rjmp	.+606    	; 0x26c <__vector_3>
       e:	00 00       	nop
      10:	f1 c0       	rjmp	.+482    	; 0x1f4 <__vector_4>
      12:	00 00       	nop
      14:	f9 c0       	rjmp	.+498    	; 0x208 <__vector_5>
      16:	00 00       	nop
      18:	01 c1       	rjmp	.+514    	; 0x21c <__vector_6>
      1a:	00 00       	nop
      1c:	09 c1       	rjmp	.+530    	; 0x230 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__vector_8>
      24:	41 c6       	rjmp	.+3202   	; 0xca8 <__vector_9>
      26:	00 00       	nop
      28:	7b c6       	rjmp	.+3318   	; 0xd20 <__vector_10>
      2a:	00 00       	nop
      2c:	12 c6       	rjmp	.+3108   	; 0xc52 <__vector_11>
      2e:	00 00       	nop
      30:	b3 c5       	rjmp	.+2918   	; 0xb98 <__vector_12>
      32:	00 00       	nop
      34:	26 c5       	rjmp	.+2636   	; 0xa82 <__vector_13>
      36:	00 00       	nop
      38:	84 c5       	rjmp	.+2824   	; 0xb42 <__vector_14>
      3a:	00 00       	nop
      3c:	f7 c4       	rjmp	.+2542   	; 0xa2c <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	30 c3       	rjmp	.+1632   	; 0x6ae <__vector_19>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	98 07       	cpc	r25, r24
      8e:	a1 07       	cpc	r26, r17
      90:	aa 07       	cpc	r26, r26
      92:	b3 07       	cpc	r27, r19
      94:	bc 07       	cpc	r27, r28
      96:	c5 07       	cpc	r28, r21
      98:	ce 07       	cpc	r28, r30

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e6 e9       	ldi	r30, 0x96	; 150
      ae:	f5 e2       	ldi	r31, 0x25	; 37
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a2 30       	cpi	r26, 0x02	; 2
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a2 e0       	ldi	r26, 0x02	; 2
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ab 35       	cpi	r26, 0x5B	; 91
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 c9 12 	jmp	0x2592	; 0x2592 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:
surface_struct_t sensor;
motor_struct_t motor;

int main()
{
	device_disableJTAG();
      d8:	69 d0       	rcall	.+210    	; 0x1ac <device_disableJTAG>
	debug_init();
      da:	0e 94 ab 0a 	call	0x1556	; 0x1556 <debug_init>
	distanceSensor_init();

	distanceSensor_defaultTest();
      de:	16 d0       	rcall	.+44     	; 0x10c <distanceSensor_init>
      e0:	56 d0       	rcall	.+172    	; 0x18e <distanceSensor_defaultTest>
      e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0xa>

000000e4 <incrementMillis>:
	vl53l0x_init();
}

void distanceSensor_stop()
{
	vl53l0x_stop();
      e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
      e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
      ec:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
      f0:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
      f4:	01 96       	adiw	r24, 0x01	; 1
      f6:	a1 1d       	adc	r26, r1
      f8:	b1 1d       	adc	r27, r1
      fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
      fe:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
     102:	a0 93 04 01 	sts	0x0104, r26	; 0x800104 <__data_end+0x2>
     106:	b0 93 05 01 	sts	0x0105, r27	; 0x800105 <__data_end+0x3>
     10a:	08 95       	ret

0000010c <distanceSensor_init>:
     10c:	0f 93       	push	r16
     10e:	1f 93       	push	r17
     110:	e8 e0       	ldi	r30, 0x08	; 8
     112:	f1 e0       	ldi	r31, 0x01	; 1
     114:	88 ee       	ldi	r24, 0xE8	; 232
     116:	58 2f       	mov	r21, r24
     118:	81 83       	std	Z+1, r24	; 0x01
     11a:	83 e0       	ldi	r24, 0x03	; 3
     11c:	82 83       	std	Z+2, r24	; 0x02
     11e:	13 82       	std	Z+3, r1	; 0x03
     120:	14 82       	std	Z+4, r1	; 0x04
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	48 2f       	mov	r20, r24
     126:	80 83       	st	Z, r24
     128:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <s_timeoutTimer+0x2>
     12c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <s_timeoutTimer+0x3>
     130:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <s_timeoutTimer+0x4>
     134:	20 d6       	rcall	.+3136   	; 0xd76 <timer_init>
     136:	02 e7       	ldi	r16, 0x72	; 114
     138:	10 e0       	ldi	r17, 0x00	; 0
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <s_timeoutTimer>
     140:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <s_timeoutTimer+0x1>
     144:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <s_timeoutTimer+0x2>
     148:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <s_timeoutTimer+0x3>
     14c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <s_timeoutTimer+0x4>
     150:	0e 94 08 09 	call	0x1210	; 0x1210 <timer_attachInterrupt>
     154:	20 e0       	ldi	r18, 0x00	; 0
     156:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <s_timeoutTimer>
     15a:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <s_timeoutTimer+0x1>
     15e:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <s_timeoutTimer+0x2>
     162:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <s_timeoutTimer+0x3>
     166:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <s_timeoutTimer+0x4>
     16a:	96 d7       	rcall	.+3884   	; 0x1098 <timer_enableInterrupt>
     16c:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <s_timeoutTimer>
     170:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <s_timeoutTimer+0x1>
     174:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <s_timeoutTimer+0x2>
     178:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <s_timeoutTimer+0x3>
     17c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <s_timeoutTimer+0x4>
     180:	46 d7       	rcall	.+3724   	; 0x100e <timer_start>
     182:	78 94       	sei
     184:	0e 94 ac 10 	call	0x2158	; 0x2158 <vl53l0x_init>
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	08 95       	ret

0000018e <distanceSensor_defaultTest>:


void distanceSensor_defaultTest()
{
	u16 distance;
	vl53l0x_startContinuous(30);
     18e:	6e e1       	ldi	r22, 0x1E	; 30
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	80 e0       	ldi	r24, 0x00	; 0
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <vl53l0x_startContinuous>

	while (1)
	{
		/* This can be put in a scheduler if no GPIO pin from the sensor is available */
		distance = vl53l0x_readRangeContinuousMillimeters();
     19a:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <vl53l0x_readRangeContinuousMillimeters>
		if (distance != 0xffff)
     19e:	8f 3f       	cpi	r24, 0xFF	; 255
     1a0:	2f ef       	ldi	r18, 0xFF	; 255
     1a2:	92 07       	cpc	r25, r18
     1a4:	d1 f3       	breq	.-12     	; 0x19a <distanceSensor_defaultTest+0xc>
			debug_writeDecimal(distance);
     1a6:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <debug_writeDecimal>
     1aa:	f7 cf       	rjmp	.-18     	; 0x19a <distanceSensor_defaultTest+0xc>

000001ac <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
     1ac:	80 e8       	ldi	r24, 0x80	; 128
     1ae:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     1b0:	85 bf       	out	0x35, r24	; 53
     1b2:	08 95       	ret

000001b4 <gpio_changeDirection>:
/* Internal functions                                                   */
/************************************************************************/

void gpio_changeDirection(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     1b4:	61 30       	cpi	r22, 0x01	; 1
     1b6:	61 f0       	breq	.+24     	; 0x1d0 <gpio_changeDirection+0x1c>
     1b8:	28 f0       	brcs	.+10     	; 0x1c4 <gpio_changeDirection+0x10>
     1ba:	62 30       	cpi	r22, 0x02	; 2
     1bc:	79 f0       	breq	.+30     	; 0x1dc <gpio_changeDirection+0x28>
     1be:	63 30       	cpi	r22, 0x03	; 3
     1c0:	99 f0       	breq	.+38     	; 0x1e8 <gpio_changeDirection+0x34>
     1c2:	08 95       	ret
	{
		case PA:
			updateBit(&DDRA, s_gpio.number, s_gpio.direction);
     1c4:	48 2f       	mov	r20, r24
     1c6:	67 2f       	mov	r22, r23
     1c8:	81 e2       	ldi	r24, 0x21	; 33
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	17 c2       	rjmp	.+1070   	; 0x5fc <updateBit>
			break;
     1ce:	08 95       	ret
		case PB:
			updateBit(&DDRB, s_gpio.number, s_gpio.direction);
     1d0:	48 2f       	mov	r20, r24
     1d2:	67 2f       	mov	r22, r23
     1d4:	84 e2       	ldi	r24, 0x24	; 36
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	11 c2       	rjmp	.+1058   	; 0x5fc <updateBit>
			break;
     1da:	08 95       	ret
		case PC:
			updateBit(&DDRC, s_gpio.number, s_gpio.direction);
     1dc:	48 2f       	mov	r20, r24
     1de:	67 2f       	mov	r22, r23
     1e0:	87 e2       	ldi	r24, 0x27	; 39
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0b c2       	rjmp	.+1046   	; 0x5fc <updateBit>
			break;
     1e6:	08 95       	ret
		case PD:
			updateBit(&DDRD, s_gpio.number, s_gpio.direction);
     1e8:	48 2f       	mov	r20, r24
     1ea:	67 2f       	mov	r22, r23
     1ec:	8a e2       	ldi	r24, 0x2A	; 42
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	05 c2       	rjmp	.+1034   	; 0x5fc <updateBit>
     1f2:	08 95       	ret

000001f4 <__vector_4>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(PCINT0_vect)
{
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
#ifdef USING_PCINT0
	p_pcInt0Callback();
#endif
}
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_5>:

ISR(PCINT1_vect)
{
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
#ifdef USING_PCINT1
	p_pcInt1Callback();
#endif
}
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <__vector_6>:

ISR(PCINT2_vect)
{
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
#ifdef USING_PCINT2
	p_pcInt2Callback();
#endif
}
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <__vector_7>:

ISR(PCINT3_vect)
{
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
#ifdef USING_PCINT3
	p_pcInt3Callback();
#endif
}
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_1>:

ISR(INT0_vect)
{
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[0]();
#endif
}
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <__vector_2>:

ISR(INT1_vect)
{
     258:	1f 92       	push	r1
     25a:	0f 92       	push	r0
     25c:	0f b6       	in	r0, 0x3f	; 63
     25e:	0f 92       	push	r0
     260:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[1]();
#endif
}
     262:	0f 90       	pop	r0
     264:	0f be       	out	0x3f, r0	; 63
     266:	0f 90       	pop	r0
     268:	1f 90       	pop	r1
     26a:	18 95       	reti

0000026c <__vector_3>:

ISR(INT2_vect)
{
     26c:	1f 92       	push	r1
     26e:	0f 92       	push	r0
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	0f 92       	push	r0
     274:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[2]();
#endif
}
     276:	0f 90       	pop	r0
     278:	0f be       	out	0x3f, r0	; 63
     27a:	0f 90       	pop	r0
     27c:	1f 90       	pop	r1
     27e:	18 95       	reti

00000280 <gpio_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void gpio_init(gpio_struct_t s_gpio)
{
     280:	0f 93       	push	r16
     282:	1f 93       	push	r17
     284:	cf 93       	push	r28
     286:	df 93       	push	r29
     288:	c6 2f       	mov	r28, r22
     28a:	17 2f       	mov	r17, r23
     28c:	d8 2f       	mov	r29, r24
     28e:	09 2f       	mov	r16, r25
	/* Configure pin direction */
	gpio_changeDirection(s_gpio);
     290:	91 df       	rcall	.-222    	; 0x1b4 <gpio_changeDirection>

	/* Configure pin pull-up */
	if (s_gpio.direction == INPUT)
     292:	d1 11       	cpse	r29, r1
     294:	23 c0       	rjmp	.+70     	; 0x2dc <gpio_init+0x5c>
	{
		switch (s_gpio.port)
     296:	c1 30       	cpi	r28, 0x01	; 1
     298:	81 f0       	breq	.+32     	; 0x2ba <gpio_init+0x3a>
     29a:	28 f0       	brcs	.+10     	; 0x2a6 <gpio_init+0x26>
     29c:	c2 30       	cpi	r28, 0x02	; 2
     29e:	99 f0       	breq	.+38     	; 0x2c6 <gpio_init+0x46>
     2a0:	c3 30       	cpi	r28, 0x03	; 3
     2a2:	b9 f0       	breq	.+46     	; 0x2d2 <gpio_init+0x52>
     2a4:	1b c0       	rjmp	.+54     	; 0x2dc <gpio_init+0x5c>
		{
			case PA:
				updateBit(&PORTA, s_gpio.number, s_gpio.pullUp);
     2a6:	40 2f       	mov	r20, r16
     2a8:	61 2f       	mov	r22, r17
     2aa:	82 e2       	ldi	r24, 0x22	; 34
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	a6 d1       	rcall	.+844    	; 0x5fc <updateBit>
				clearBit(&DIDR0, s_gpio.number);
     2b0:	61 2f       	mov	r22, r17
     2b2:	8e e7       	ldi	r24, 0x7E	; 126
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	c6 d1       	rcall	.+908    	; 0x644 <clearBit>
				break;
     2b8:	11 c0       	rjmp	.+34     	; 0x2dc <gpio_init+0x5c>
			case PB:
				updateBit(&PORTB, s_gpio.number, s_gpio.pullUp);
     2ba:	40 2f       	mov	r20, r16
     2bc:	61 2f       	mov	r22, r17
     2be:	85 e2       	ldi	r24, 0x25	; 37
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	9c d1       	rcall	.+824    	; 0x5fc <updateBit>
				break;
     2c4:	0b c0       	rjmp	.+22     	; 0x2dc <gpio_init+0x5c>
			case PC:
				updateBit(&PORTC, s_gpio.number, s_gpio.pullUp);
     2c6:	40 2f       	mov	r20, r16
     2c8:	61 2f       	mov	r22, r17
     2ca:	88 e2       	ldi	r24, 0x28	; 40
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	96 d1       	rcall	.+812    	; 0x5fc <updateBit>
				break;
			case PD:
				updateBit(&PORTD, s_gpio.number, s_gpio.pullUp);
     2d0:	05 c0       	rjmp	.+10     	; 0x2dc <gpio_init+0x5c>
     2d2:	40 2f       	mov	r20, r16
     2d4:	61 2f       	mov	r22, r17
     2d6:	8b e2       	ldi	r24, 0x2B	; 43
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	90 d1       	rcall	.+800    	; 0x5fc <updateBit>
				break;
		}
	}
}
     2dc:	df 91       	pop	r29
     2de:	cf 91       	pop	r28
     2e0:	1f 91       	pop	r17
     2e2:	0f 91       	pop	r16
     2e4:	08 95       	ret

000002e6 <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     2e6:	0f 93       	push	r16
     2e8:	1f 93       	push	r17
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	8b 01       	movw	r16, r22
     2f0:	9c 01       	movw	r18, r24
     2f2:	ea 01       	movw	r28, r20
     2f4:	60 e0       	ldi	r22, 0x00	; 0
     2f6:	72 e1       	ldi	r23, 0x12	; 18
     2f8:	8a e7       	ldi	r24, 0x7A	; 122
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	a9 01       	movw	r20, r18
     2fe:	98 01       	movw	r18, r16
     300:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     304:	ba 01       	movw	r22, r20
     306:	a9 01       	movw	r20, r18
     308:	40 51       	subi	r20, 0x10	; 16
     30a:	51 09       	sbc	r21, r1
     30c:	61 09       	sbc	r22, r1
     30e:	71 09       	sbc	r23, r1
     310:	db 01       	movw	r26, r22
     312:	ca 01       	movw	r24, r20
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	8f 3f       	cpi	r24, 0xFF	; 255
     31e:	91 05       	cpc	r25, r1
     320:	a1 05       	cpc	r26, r1
     322:	b1 05       	cpc	r27, r1
     324:	09 f0       	breq	.+2      	; 0x328 <calculateTWBR+0x42>
     326:	10 f4       	brcc	.+4      	; 0x32c <calculateTWBR+0x46>
     328:	18 82       	st	Y, r1
     32a:	32 c0       	rjmp	.+100    	; 0x390 <calculateTWBR+0xaa>
     32c:	db 01       	movw	r26, r22
     32e:	ca 01       	movw	r24, r20
     330:	68 94       	set
     332:	12 f8       	bld	r1, 2
     334:	b6 95       	lsr	r27
     336:	a7 95       	ror	r26
     338:	97 95       	ror	r25
     33a:	87 95       	ror	r24
     33c:	16 94       	lsr	r1
     33e:	d1 f7       	brne	.-12     	; 0x334 <calculateTWBR+0x4e>
     340:	8f 3f       	cpi	r24, 0xFF	; 255
     342:	91 05       	cpc	r25, r1
     344:	a1 05       	cpc	r26, r1
     346:	b1 05       	cpc	r27, r1
     348:	09 f0       	breq	.+2      	; 0x34c <calculateTWBR+0x66>
     34a:	18 f4       	brcc	.+6      	; 0x352 <calculateTWBR+0x6c>
     34c:	21 e0       	ldi	r18, 0x01	; 1
     34e:	28 83       	st	Y, r18
     350:	1f c0       	rjmp	.+62     	; 0x390 <calculateTWBR+0xaa>
     352:	db 01       	movw	r26, r22
     354:	ca 01       	movw	r24, r20
     356:	68 94       	set
     358:	14 f8       	bld	r1, 4
     35a:	b6 95       	lsr	r27
     35c:	a7 95       	ror	r26
     35e:	97 95       	ror	r25
     360:	87 95       	ror	r24
     362:	16 94       	lsr	r1
     364:	d1 f7       	brne	.-12     	; 0x35a <calculateTWBR+0x74>
     366:	8f 3f       	cpi	r24, 0xFF	; 255
     368:	91 05       	cpc	r25, r1
     36a:	a1 05       	cpc	r26, r1
     36c:	b1 05       	cpc	r27, r1
     36e:	09 f0       	breq	.+2      	; 0x372 <calculateTWBR+0x8c>
     370:	18 f4       	brcc	.+6      	; 0x378 <calculateTWBR+0x92>
     372:	22 e0       	ldi	r18, 0x02	; 2
     374:	28 83       	st	Y, r18
     376:	0c c0       	rjmp	.+24     	; 0x390 <calculateTWBR+0xaa>
     378:	83 e0       	ldi	r24, 0x03	; 3
     37a:	88 83       	st	Y, r24
     37c:	db 01       	movw	r26, r22
     37e:	ca 01       	movw	r24, r20
     380:	68 94       	set
     382:	16 f8       	bld	r1, 6
     384:	b6 95       	lsr	r27
     386:	a7 95       	ror	r26
     388:	97 95       	ror	r25
     38a:	87 95       	ror	r24
     38c:	16 94       	lsr	r1
     38e:	d1 f7       	brne	.-12     	; 0x384 <calculateTWBR+0x9e>
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	1f 91       	pop	r17
     396:	0f 91       	pop	r16
     398:	08 95       	ret

0000039a <i2c_init>:
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	1f 92       	push	r1
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	ae 01       	movw	r20, r28
     3a6:	4f 5f       	subi	r20, 0xFF	; 255
     3a8:	5f 4f       	sbci	r21, 0xFF	; 255
     3aa:	9d df       	rcall	.-198    	; 0x2e6 <calculateTWBR>
     3ac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	89 81       	ldd	r24, Y+1	; 0x01
     3b4:	54 d1       	rcall	.+680    	; 0x65e <checkBit>
     3b6:	48 2f       	mov	r20, r24
     3b8:	60 e0       	ldi	r22, 0x00	; 0
     3ba:	89 eb       	ldi	r24, 0xB9	; 185
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	1e d1       	rcall	.+572    	; 0x5fc <updateBit>
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	4c d1       	rcall	.+664    	; 0x65e <checkBit>
     3c6:	48 2f       	mov	r20, r24
     3c8:	61 e0       	ldi	r22, 0x01	; 1
     3ca:	89 eb       	ldi	r24, 0xB9	; 185
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	16 d1       	rcall	.+556    	; 0x5fc <updateBit>
     3d0:	62 e0       	ldi	r22, 0x02	; 2
     3d2:	71 e0       	ldi	r23, 0x01	; 1
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	91 e0       	ldi	r25, 0x01	; 1
     3d8:	53 df       	rcall	.-346    	; 0x280 <gpio_init>
     3da:	62 e0       	ldi	r22, 0x02	; 2
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	80 e0       	ldi	r24, 0x00	; 0
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	4e df       	rcall	.-356    	; 0x280 <gpio_init>
     3e4:	0f 90       	pop	r0
     3e6:	df 91       	pop	r29
     3e8:	cf 91       	pop	r28
     3ea:	08 95       	ret

000003ec <i2c_start>:
     3ec:	62 e0       	ldi	r22, 0x02	; 2
     3ee:	8c eb       	ldi	r24, 0xBC	; 188
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	1c c1       	rjmp	.+568    	; 0x62c <setBit>
     3f4:	08 95       	ret

000003f6 <i2c_sendStart>:
}

u8 i2c_sendStart(u8 u8_address)
{
     3f6:	ff 92       	push	r15
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	f8 2e       	mov	r15, r24
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);
     402:	cc eb       	ldi	r28, 0xBC	; 188
     404:	d0 e0       	ldi	r29, 0x00	; 0
     406:	88 81       	ld	r24, Y
     408:	62 e0       	ldi	r22, 0x02	; 2
     40a:	29 d1       	rcall	.+594    	; 0x65e <checkBit>
     40c:	28 81       	ld	r18, Y
     40e:	34 e0       	ldi	r19, 0x04	; 4
     410:	83 9f       	mul	r24, r19
     412:	c0 01       	movw	r24, r0
     414:	11 24       	eor	r1, r1
     416:	80 6a       	ori	r24, 0xA0	; 160
     418:	82 2b       	or	r24, r18
     41a:	88 83       	st	Y, r24
     41c:	ce ef       	ldi	r28, 0xFE	; 254
     41e:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until start condition has been sent */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     420:	0c eb       	ldi	r16, 0xBC	; 188
     422:	10 e0       	ldi	r17, 0x00	; 0
     424:	f8 01       	movw	r30, r16
     426:	80 81       	ld	r24, Z
     428:	67 e0       	ldi	r22, 0x07	; 7
     42a:	19 d1       	rcall	.+562    	; 0x65e <checkBit>
     42c:	81 11       	cpse	r24, r1
     42e:	33 c0       	rjmp	.+102    	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     430:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until start condition has been sent */
	while(--timeout > 0)
     432:	c1 f7       	brne	.-16     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	3b c0       	rjmp	.+118    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     438:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     43c:	88 7f       	andi	r24, 0xF8	; 248
     43e:	80 31       	cpi	r24, 0x10	; 16
     440:	21 f0       	breq	.+8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
		return (TW_STATUS & 0xF8);
     442:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     446:	88 7f       	andi	r24, 0xF8	; 248
     448:	32 c0       	rjmp	.+100    	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

	/* Send device address */
	TWDR = u8_address;
     44a:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     44e:	cc eb       	ldi	r28, 0xBC	; 188
     450:	d0 e0       	ldi	r29, 0x00	; 0
     452:	88 81       	ld	r24, Y
     454:	62 e0       	ldi	r22, 0x02	; 2
     456:	03 d1       	rcall	.+518    	; 0x65e <checkBit>
     458:	f4 e0       	ldi	r31, 0x04	; 4
     45a:	8f 9f       	mul	r24, r31
     45c:	c0 01       	movw	r24, r0
     45e:	11 24       	eor	r1, r1
     460:	80 68       	ori	r24, 0x80	; 128
     462:	88 83       	st	Y, r24
     464:	ce ef       	ldi	r28, 0xFE	; 254
     466:	df ef       	ldi	r29, 0xFF	; 255

	/* Wail until address has been sent */
	while( --timeout > 0 )
		if(checkBit(TWCR, TWINT))
     468:	0c eb       	ldi	r16, 0xBC	; 188
     46a:	10 e0       	ldi	r17, 0x00	; 0
     46c:	f8 01       	movw	r30, r16
     46e:	80 81       	ld	r24, Z
     470:	67 e0       	ldi	r22, 0x07	; 7
     472:	f5 d0       	rcall	.+490    	; 0x65e <checkBit>
     474:	81 11       	cpse	r24, r1
     476:	15 c0       	rjmp	.+42     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     478:	21 97       	sbiw	r28, 0x01	; 1
	/* Send device address */
	TWDR = u8_address;
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wail until address has been sent */
	while( --timeout > 0 )
     47a:	c1 f7       	brne	.-16     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     47c:	8f ef       	ldi	r24, 0xFF	; 255
     47e:	17 c0       	rjmp	.+46     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     480:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     484:	88 7f       	andi	r24, 0xF8	; 248
     486:	80 34       	cpi	r24, 0x40	; 64
     488:	21 f0       	breq	.+8      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
		return (TW_STATUS & 0xF8);
     48a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     48e:	88 7f       	andi	r24, 0xF8	; 248
     490:	0e c0       	rjmp	.+28     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>

	return I2C_NO_ERROR;
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	0c c0       	rjmp	.+24     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     496:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	88 30       	cpi	r24, 0x08	; 8
     49e:	61 f6       	brne	.-104    	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     4a0:	d4 cf       	rjmp	.-88     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     4a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4a6:	88 7f       	andi	r24, 0xF8	; 248
     4a8:	88 31       	cpi	r24, 0x18	; 24
     4aa:	51 f7       	brne	.-44     	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
}
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	1f 91       	pop	r17
     4b4:	0f 91       	pop	r16
     4b6:	ff 90       	pop	r15
     4b8:	08 95       	ret

000004ba <i2c_sendRepStart>:

u8 i2c_sendRepStart(u8 u8_address)
{
	return i2c_sendStart(u8_address);
     4ba:	9d cf       	rjmp	.-198    	; 0x3f6 <i2c_sendStart>
}
     4bc:	08 95       	ret

000004be <i2c_sendStop>:

void i2c_sendStop(void)
{
     4be:	0f 93       	push	r16
     4c0:	1f 93       	push	r17
     4c2:	cf 93       	push	r28
     4c4:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
     4c6:	cc eb       	ldi	r28, 0xBC	; 188
     4c8:	d0 e0       	ldi	r29, 0x00	; 0
     4ca:	88 81       	ld	r24, Y
     4cc:	62 e0       	ldi	r22, 0x02	; 2
     4ce:	c7 d0       	rcall	.+398    	; 0x65e <checkBit>
     4d0:	28 81       	ld	r18, Y
     4d2:	34 e0       	ldi	r19, 0x04	; 4
     4d4:	83 9f       	mul	r24, r19
     4d6:	c0 01       	movw	r24, r0
     4d8:	11 24       	eor	r1, r1
     4da:	80 69       	ori	r24, 0x90	; 144
     4dc:	82 2b       	or	r24, r18
     4de:	88 83       	st	Y, r24
     4e0:	ce ef       	ldi	r28, 0xFE	; 254
     4e2:	df ef       	ldi	r29, 0xFF	; 255
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
		if(!checkBit(TWCR, TWSTO))
     4e4:	0c eb       	ldi	r16, 0xBC	; 188
     4e6:	10 e0       	ldi	r17, 0x00	; 0
     4e8:	f8 01       	movw	r30, r16
     4ea:	80 81       	ld	r24, Z
     4ec:	64 e0       	ldi	r22, 0x04	; 4
     4ee:	b7 d0       	rcall	.+366    	; 0x65e <checkBit>
     4f0:	88 23       	and	r24, r24
     4f2:	11 f0       	breq	.+4      	; 0x4f8 <i2c_sendStop+0x3a>
     4f4:	21 97       	sbiw	r28, 0x01	; 1
{
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
     4f6:	c1 f7       	brne	.-16     	; 0x4e8 <i2c_sendStop+0x2a>
		if(!checkBit(TWCR, TWSTO))
			return;
}
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	1f 91       	pop	r17
     4fe:	0f 91       	pop	r16
     500:	08 95       	ret

00000502 <i2c_write>:

u8 i2c_write(u8 u8_data)
{
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
     506:	cf 93       	push	r28
     508:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send byte */
	TWDR = u8_data;
     50a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     50e:	cc eb       	ldi	r28, 0xBC	; 188
     510:	d0 e0       	ldi	r29, 0x00	; 0
     512:	88 81       	ld	r24, Y
     514:	62 e0       	ldi	r22, 0x02	; 2
     516:	a3 d0       	rcall	.+326    	; 0x65e <checkBit>
     518:	24 e0       	ldi	r18, 0x04	; 4
     51a:	82 9f       	mul	r24, r18
     51c:	c0 01       	movw	r24, r0
     51e:	11 24       	eor	r1, r1
     520:	80 68       	ori	r24, 0x80	; 128
     522:	88 83       	st	Y, r24
     524:	ce ef       	ldi	r28, 0xFE	; 254
     526:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     528:	0c eb       	ldi	r16, 0xBC	; 188
     52a:	10 e0       	ldi	r17, 0x00	; 0
     52c:	f8 01       	movw	r30, r16
     52e:	80 81       	ld	r24, Z
     530:	67 e0       	ldi	r22, 0x07	; 7
     532:	95 d0       	rcall	.+298    	; 0x65e <checkBit>
     534:	81 11       	cpse	r24, r1
     536:	0f c0       	rjmp	.+30     	; 0x556 <i2c_write+0x54>
     538:	21 97       	sbiw	r28, 0x01	; 1
	/* Send byte */
	TWDR = u8_data;
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     53a:	c1 f7       	brne	.-16     	; 0x52c <i2c_write+0x2a>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     53c:	8f ef       	ldi	r24, 0xFF	; 255
     53e:	11 c0       	rjmp	.+34     	; 0x562 <i2c_write+0x60>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     540:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     544:	88 7f       	andi	r24, 0xF8	; 248
     546:	80 34       	cpi	r24, 0x40	; 64
     548:	21 f0       	breq	.+8      	; 0x552 <i2c_write+0x50>
		return (TW_STATUS & 0xF8);
     54a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     54e:	88 7f       	andi	r24, 0xF8	; 248
     550:	08 c0       	rjmp	.+16     	; 0x562 <i2c_write+0x60>

	return I2C_NO_ERROR;
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	06 c0       	rjmp	.+12     	; 0x562 <i2c_write+0x60>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     556:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     55a:	88 7f       	andi	r24, 0xF8	; 248
     55c:	88 31       	cpi	r24, 0x18	; 24
     55e:	81 f7       	brne	.-32     	; 0x540 <i2c_write+0x3e>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     560:	80 e0       	ldi	r24, 0x00	; 0
}
     562:	df 91       	pop	r29
     564:	cf 91       	pop	r28
     566:	1f 91       	pop	r17
     568:	0f 91       	pop	r16
     56a:	08 95       	ret

0000056c <i2c_readAck>:

u8 i2c_readAck(void)
{
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);
     574:	cc eb       	ldi	r28, 0xBC	; 188
     576:	d0 e0       	ldi	r29, 0x00	; 0
     578:	88 81       	ld	r24, Y
     57a:	62 e0       	ldi	r22, 0x02	; 2
     57c:	70 d0       	rcall	.+224    	; 0x65e <checkBit>
     57e:	24 e0       	ldi	r18, 0x04	; 4
     580:	82 9f       	mul	r24, r18
     582:	c0 01       	movw	r24, r0
     584:	11 24       	eor	r1, r1
     586:	80 6c       	ori	r24, 0xC0	; 192
     588:	88 83       	st	Y, r24
     58a:	ce ef       	ldi	r28, 0xFE	; 254
     58c:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     58e:	0c eb       	ldi	r16, 0xBC	; 188
     590:	10 e0       	ldi	r17, 0x00	; 0
     592:	f8 01       	movw	r30, r16
     594:	80 81       	ld	r24, Z
     596:	67 e0       	ldi	r22, 0x07	; 7
     598:	62 d0       	rcall	.+196    	; 0x65e <checkBit>
     59a:	88 23       	and	r24, r24
     59c:	19 f0       	breq	.+6      	; 0x5a4 <i2c_readAck+0x38>
		return TWDR;
     59e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5a2:	03 c0       	rjmp	.+6      	; 0x5aa <i2c_readAck+0x3e>
     5a4:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     5a6:	a9 f7       	brne	.-22     	; 0x592 <i2c_readAck+0x26>
		if(checkBit(TWCR, TWINT))
		return TWDR;

	return I2C_BUS_LOCKED;
     5a8:	8f ef       	ldi	r24, 0xFF	; 255
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	08 95       	ret

000005b4 <i2c_readNak>:

u8 i2c_readNak(void)
{
     5b4:	0f 93       	push	r16
     5b6:	1f 93       	push	r17
     5b8:	cf 93       	push	r28
     5ba:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     5bc:	cc eb       	ldi	r28, 0xBC	; 188
     5be:	d0 e0       	ldi	r29, 0x00	; 0
     5c0:	88 81       	ld	r24, Y
     5c2:	62 e0       	ldi	r22, 0x02	; 2
     5c4:	4c d0       	rcall	.+152    	; 0x65e <checkBit>
     5c6:	24 e0       	ldi	r18, 0x04	; 4
     5c8:	82 9f       	mul	r24, r18
     5ca:	c0 01       	movw	r24, r0
     5cc:	11 24       	eor	r1, r1
     5ce:	80 68       	ori	r24, 0x80	; 128
     5d0:	88 83       	st	Y, r24
     5d2:	ce ef       	ldi	r28, 0xFE	; 254
     5d4:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     5d6:	0c eb       	ldi	r16, 0xBC	; 188
     5d8:	10 e0       	ldi	r17, 0x00	; 0
     5da:	f8 01       	movw	r30, r16
     5dc:	80 81       	ld	r24, Z
     5de:	67 e0       	ldi	r22, 0x07	; 7
     5e0:	3e d0       	rcall	.+124    	; 0x65e <checkBit>
     5e2:	88 23       	and	r24, r24
     5e4:	19 f0       	breq	.+6      	; 0x5ec <i2c_readNak+0x38>
			return TWDR;
     5e6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5ea:	03 c0       	rjmp	.+6      	; 0x5f2 <i2c_readNak+0x3e>
     5ec:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     5ee:	a9 f7       	brne	.-22     	; 0x5da <i2c_readNak+0x26>
		if(checkBit(TWCR, TWINT))
			return TWDR;

	return I2C_BUS_LOCKED;
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
}
     5f2:	df 91       	pop	r29
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	08 95       	ret

000005fc <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     5fc:	fc 01       	movw	r30, r24
     5fe:	94 2f       	mov	r25, r20
     600:	20 81       	ld	r18, Z
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	06 2e       	mov	r0, r22
     608:	02 c0       	rjmp	.+4      	; 0x60e <updateBit+0x12>
     60a:	44 0f       	add	r20, r20
     60c:	55 1f       	adc	r21, r21
     60e:	0a 94       	dec	r0
     610:	e2 f7       	brpl	.-8      	; 0x60a <updateBit+0xe>
     612:	40 95       	com	r20
     614:	50 95       	com	r21
     616:	24 23       	and	r18, r20
     618:	49 2f       	mov	r20, r25
     61a:	50 e0       	ldi	r21, 0x00	; 0
     61c:	02 c0       	rjmp	.+4      	; 0x622 <updateBit+0x26>
     61e:	44 0f       	add	r20, r20
     620:	55 1f       	adc	r21, r21
     622:	6a 95       	dec	r22
     624:	e2 f7       	brpl	.-8      	; 0x61e <updateBit+0x22>
     626:	42 2b       	or	r20, r18
     628:	40 83       	st	Z, r20
     62a:	08 95       	ret

0000062c <setBit>:
     62c:	fc 01       	movw	r30, r24
     62e:	40 81       	ld	r20, Z
     630:	21 e0       	ldi	r18, 0x01	; 1
     632:	30 e0       	ldi	r19, 0x00	; 0
     634:	02 c0       	rjmp	.+4      	; 0x63a <setBit+0xe>
     636:	22 0f       	add	r18, r18
     638:	33 1f       	adc	r19, r19
     63a:	6a 95       	dec	r22
     63c:	e2 f7       	brpl	.-8      	; 0x636 <setBit+0xa>
     63e:	24 2b       	or	r18, r20
     640:	20 83       	st	Z, r18
     642:	08 95       	ret

00000644 <clearBit>:
     644:	fc 01       	movw	r30, r24
     646:	90 81       	ld	r25, Z
     648:	21 e0       	ldi	r18, 0x01	; 1
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <clearBit+0xe>
     64e:	22 0f       	add	r18, r18
     650:	33 1f       	adc	r19, r19
     652:	6a 95       	dec	r22
     654:	e2 f7       	brpl	.-8      	; 0x64e <clearBit+0xa>
     656:	20 95       	com	r18
     658:	29 23       	and	r18, r25
     65a:	20 83       	st	Z, r18
     65c:	08 95       	ret

0000065e <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <checkBit+0x8>
     662:	95 95       	asr	r25
     664:	87 95       	ror	r24
     666:	6a 95       	dec	r22
     668:	e2 f7       	brpl	.-8      	; 0x662 <checkBit+0x4>
}
     66a:	81 70       	andi	r24, 0x01	; 1
     66c:	08 95       	ret

0000066e <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	69 01       	movw	r12, r18
     678:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     67a:	9b 01       	movw	r18, r22
     67c:	ac 01       	movw	r20, r24
     67e:	2c 19       	sub	r18, r12
     680:	3d 09       	sbc	r19, r13
     682:	4e 09       	sbc	r20, r14
     684:	5f 09       	sbc	r21, r15
     686:	a8 ee       	ldi	r26, 0xE8	; 232
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	0e 94 bf 12 	call	0x257e	; 0x257e <__muluhisi3>
     68e:	a7 01       	movw	r20, r14
     690:	96 01       	movw	r18, r12
     692:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     696:	c9 01       	movw	r24, r18
     698:	99 23       	and	r25, r25
     69a:	24 f4       	brge	.+8      	; 0x6a4 <calculateError+0x36>
     69c:	88 27       	eor	r24, r24
     69e:	99 27       	eor	r25, r25
     6a0:	82 1b       	sub	r24, r18
     6a2:	93 0b       	sbc	r25, r19
}
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	df 90       	pop	r13
     6aa:	cf 90       	pop	r12
     6ac:	08 95       	ret

000006ae <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     6ae:	1f 92       	push	r1
     6b0:	0f 92       	push	r0
     6b2:	0f b6       	in	r0, 0x3f	; 63
     6b4:	0f 92       	push	r0
     6b6:	11 24       	eor	r1, r1
     6b8:	0b b6       	in	r0, 0x3b	; 59
     6ba:	0f 92       	push	r0
     6bc:	8f 93       	push	r24
     6be:	9f 93       	push	r25
     6c0:	ef 93       	push	r30
     6c2:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     6c4:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <u8_RLastReceivedIndex>
     6c8:	f0 e0       	ldi	r31, 0x00	; 0
     6ca:	8e b5       	in	r24, 0x2e	; 46
     6cc:	e2 5e       	subi	r30, 0xE2	; 226
     6ce:	fe 4f       	sbci	r31, 0xFE	; 254
     6d0:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     6d2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <u8_RLastReceivedIndex>
     6d6:	89 30       	cpi	r24, 0x09	; 9
     6d8:	30 f4       	brcc	.+12     	; 0x6e6 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     6da:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <u8_RLastReceivedIndex>
     6de:	8f 5f       	subi	r24, 0xFF	; 255
     6e0:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <u8_RLastReceivedIndex>
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     6e6:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     6f0:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
     6f4:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <u8_TLastRequestedIndex>
     6f8:	98 17       	cp	r25, r24
     6fa:	a1 f0       	breq	.+40     	; 0x724 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     6fc:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	e8 5d       	subi	r30, 0xD8	; 216
     704:	fe 4f       	sbci	r31, 0xFE	; 254
     706:	80 81       	ld	r24, Z
     708:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     70a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
     70e:	89 30       	cpi	r24, 0x09	; 9
     710:	30 f4       	brcc	.+12     	; 0x71e <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     712:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
     716:	8f 5f       	subi	r24, 0xFF	; 255
     718:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <u8_TLastTransmittedIndex>
     71c:	06 c0       	rjmp	.+12     	; 0x72a <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     71e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <u8_TLastTransmittedIndex>
     722:	03 c0       	rjmp	.+6      	; 0x72a <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <b_TAvailable>
	}
}
     72a:	ff 91       	pop	r31
     72c:	ef 91       	pop	r30
     72e:	9f 91       	pop	r25
     730:	8f 91       	pop	r24
     732:	0f 90       	pop	r0
     734:	0b be       	out	0x3b, r0	; 59
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     740:	8f 92       	push	r8
     742:	9f 92       	push	r9
     744:	af 92       	push	r10
     746:	bf 92       	push	r11
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	00 d0       	rcall	.+0      	; 0x756 <calculateTopRegister+0x16>
     756:	00 d0       	rcall	.+0      	; 0x758 <calculateTopRegister+0x18>
     758:	1f 92       	push	r1
     75a:	cd b7       	in	r28, 0x3d	; 61
     75c:	de b7       	in	r29, 0x3e	; 62
     75e:	48 01       	movw	r8, r16
     760:	59 01       	movw	r10, r18
     762:	41 30       	cpi	r20, 0x01	; 1
     764:	21 f0       	breq	.+8      	; 0x76e <calculateTopRegister+0x2e>
     766:	42 30       	cpi	r20, 0x02	; 2
     768:	09 f4       	brne	.+2      	; 0x76c <calculateTopRegister+0x2c>
     76a:	88 c0       	rjmp	.+272    	; 0x87c <calculateTopRegister+0x13c>
     76c:	4c c1       	rjmp	.+664    	; 0xa06 <calculateTopRegister+0x2c6>
     76e:	60 e0       	ldi	r22, 0x00	; 0
     770:	72 e1       	ldi	r23, 0x12	; 18
     772:	8a e7       	ldi	r24, 0x7A	; 122
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	a9 01       	movw	r20, r18
     778:	98 01       	movw	r18, r16
     77a:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     77e:	da 01       	movw	r26, r20
     780:	c9 01       	movw	r24, r18
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	a1 09       	sbc	r26, r1
     786:	b1 09       	sbc	r27, r1
     788:	00 97       	sbiw	r24, 0x00	; 0
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	a2 07       	cpc	r26, r18
     78e:	b1 05       	cpc	r27, r1
     790:	50 f4       	brcc	.+20     	; 0x7a6 <calculateTopRegister+0x66>
     792:	49 ef       	ldi	r20, 0xF9	; 249
     794:	5f ef       	ldi	r21, 0xFF	; 255
     796:	6f ef       	ldi	r22, 0xFF	; 255
     798:	70 e0       	ldi	r23, 0x00	; 0
     79a:	f7 01       	movw	r30, r14
     79c:	40 83       	st	Z, r20
     79e:	51 83       	std	Z+1, r21	; 0x01
     7a0:	62 83       	std	Z+2, r22	; 0x02
     7a2:	73 83       	std	Z+3, r23	; 0x03
     7a4:	33 c1       	rjmp	.+614    	; 0xa0c <calculateTopRegister+0x2cc>
     7a6:	60 e4       	ldi	r22, 0x40	; 64
     7a8:	72 e4       	ldi	r23, 0x42	; 66
     7aa:	8f e0       	ldi	r24, 0x0F	; 15
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	a5 01       	movw	r20, r10
     7b0:	94 01       	movw	r18, r8
     7b2:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	af 07       	cpc	r26, r31
     7c6:	b1 05       	cpc	r27, r1
     7c8:	50 f4       	brcc	.+20     	; 0x7de <calculateTopRegister+0x9e>
     7ca:	4a ef       	ldi	r20, 0xFA	; 250
     7cc:	5f ef       	ldi	r21, 0xFF	; 255
     7ce:	6f ef       	ldi	r22, 0xFF	; 255
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	f7 01       	movw	r30, r14
     7d4:	40 83       	st	Z, r20
     7d6:	51 83       	std	Z+1, r21	; 0x01
     7d8:	62 83       	std	Z+2, r22	; 0x02
     7da:	73 83       	std	Z+3, r23	; 0x03
     7dc:	17 c1       	rjmp	.+558    	; 0xa0c <calculateTopRegister+0x2cc>
     7de:	68 e4       	ldi	r22, 0x48	; 72
     7e0:	78 ee       	ldi	r23, 0xE8	; 232
     7e2:	81 e0       	ldi	r24, 0x01	; 1
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a5 01       	movw	r20, r10
     7e8:	94 01       	movw	r18, r8
     7ea:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     7ee:	da 01       	movw	r26, r20
     7f0:	c9 01       	movw	r24, r18
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	a1 09       	sbc	r26, r1
     7f6:	b1 09       	sbc	r27, r1
     7f8:	00 97       	sbiw	r24, 0x00	; 0
     7fa:	f1 e0       	ldi	r31, 0x01	; 1
     7fc:	af 07       	cpc	r26, r31
     7fe:	b1 05       	cpc	r27, r1
     800:	50 f4       	brcc	.+20     	; 0x816 <calculateTopRegister+0xd6>
     802:	4c ef       	ldi	r20, 0xFC	; 252
     804:	5f ef       	ldi	r21, 0xFF	; 255
     806:	6f ef       	ldi	r22, 0xFF	; 255
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	f7 01       	movw	r30, r14
     80c:	40 83       	st	Z, r20
     80e:	51 83       	std	Z+1, r21	; 0x01
     810:	62 83       	std	Z+2, r22	; 0x02
     812:	73 83       	std	Z+3, r23	; 0x03
     814:	fb c0       	rjmp	.+502    	; 0xa0c <calculateTopRegister+0x2cc>
     816:	62 e1       	ldi	r22, 0x12	; 18
     818:	7a e7       	ldi	r23, 0x7A	; 122
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	a5 01       	movw	r20, r10
     820:	94 01       	movw	r18, r8
     822:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     826:	da 01       	movw	r26, r20
     828:	c9 01       	movw	r24, r18
     82a:	01 97       	sbiw	r24, 0x01	; 1
     82c:	a1 09       	sbc	r26, r1
     82e:	b1 09       	sbc	r27, r1
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	f1 e0       	ldi	r31, 0x01	; 1
     834:	af 07       	cpc	r26, r31
     836:	b1 05       	cpc	r27, r1
     838:	50 f4       	brcc	.+20     	; 0x84e <calculateTopRegister+0x10e>
     83a:	4e ef       	ldi	r20, 0xFE	; 254
     83c:	5f ef       	ldi	r21, 0xFF	; 255
     83e:	6f ef       	ldi	r22, 0xFF	; 255
     840:	70 e0       	ldi	r23, 0x00	; 0
     842:	f7 01       	movw	r30, r14
     844:	40 83       	st	Z, r20
     846:	51 83       	std	Z+1, r21	; 0x01
     848:	62 83       	std	Z+2, r22	; 0x02
     84a:	73 83       	std	Z+3, r23	; 0x03
     84c:	df c0       	rjmp	.+446    	; 0xa0c <calculateTopRegister+0x2cc>
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	9f ef       	ldi	r25, 0xFF	; 255
     852:	af ef       	ldi	r26, 0xFF	; 255
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	f7 01       	movw	r30, r14
     858:	80 83       	st	Z, r24
     85a:	91 83       	std	Z+1, r25	; 0x01
     85c:	a2 83       	std	Z+2, r26	; 0x02
     85e:	b3 83       	std	Z+3, r27	; 0x03
     860:	64 e8       	ldi	r22, 0x84	; 132
     862:	7e e1       	ldi	r23, 0x1E	; 30
     864:	80 e0       	ldi	r24, 0x00	; 0
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a5 01       	movw	r20, r10
     86a:	94 01       	movw	r18, r8
     86c:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     870:	da 01       	movw	r26, r20
     872:	c9 01       	movw	r24, r18
     874:	01 97       	sbiw	r24, 0x01	; 1
     876:	a1 09       	sbc	r26, r1
     878:	b1 09       	sbc	r27, r1
     87a:	c8 c0       	rjmp	.+400    	; 0xa0c <calculateTopRegister+0x2cc>
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	72 e1       	ldi	r23, 0x12	; 18
     880:	8a e7       	ldi	r24, 0x7A	; 122
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	98 01       	movw	r18, r16
     888:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     88c:	da 01       	movw	r26, r20
     88e:	c9 01       	movw	r24, r18
     890:	01 97       	sbiw	r24, 0x01	; 1
     892:	a1 09       	sbc	r26, r1
     894:	b1 09       	sbc	r27, r1
     896:	8f 3f       	cpi	r24, 0xFF	; 255
     898:	91 05       	cpc	r25, r1
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	09 f0       	breq	.+2      	; 0x8a2 <calculateTopRegister+0x162>
     8a0:	50 f4       	brcc	.+20     	; 0x8b6 <calculateTopRegister+0x176>
     8a2:	49 ef       	ldi	r20, 0xF9	; 249
     8a4:	5f ef       	ldi	r21, 0xFF	; 255
     8a6:	6f ef       	ldi	r22, 0xFF	; 255
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	f7 01       	movw	r30, r14
     8ac:	40 83       	st	Z, r20
     8ae:	51 83       	std	Z+1, r21	; 0x01
     8b0:	62 83       	std	Z+2, r22	; 0x02
     8b2:	73 83       	std	Z+3, r23	; 0x03
     8b4:	ab c0       	rjmp	.+342    	; 0xa0c <calculateTopRegister+0x2cc>
     8b6:	60 e4       	ldi	r22, 0x40	; 64
     8b8:	72 e4       	ldi	r23, 0x42	; 66
     8ba:	8f e0       	ldi	r24, 0x0F	; 15
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	a5 01       	movw	r20, r10
     8c0:	94 01       	movw	r18, r8
     8c2:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     8c6:	da 01       	movw	r26, r20
     8c8:	c9 01       	movw	r24, r18
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	a1 09       	sbc	r26, r1
     8ce:	b1 09       	sbc	r27, r1
     8d0:	8f 3f       	cpi	r24, 0xFF	; 255
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	09 f0       	breq	.+2      	; 0x8dc <calculateTopRegister+0x19c>
     8da:	50 f4       	brcc	.+20     	; 0x8f0 <calculateTopRegister+0x1b0>
     8dc:	4a ef       	ldi	r20, 0xFA	; 250
     8de:	5f ef       	ldi	r21, 0xFF	; 255
     8e0:	6f ef       	ldi	r22, 0xFF	; 255
     8e2:	70 e0       	ldi	r23, 0x00	; 0
     8e4:	f7 01       	movw	r30, r14
     8e6:	40 83       	st	Z, r20
     8e8:	51 83       	std	Z+1, r21	; 0x01
     8ea:	62 83       	std	Z+2, r22	; 0x02
     8ec:	73 83       	std	Z+3, r23	; 0x03
     8ee:	8e c0       	rjmp	.+284    	; 0xa0c <calculateTopRegister+0x2cc>
     8f0:	60 e9       	ldi	r22, 0x90	; 144
     8f2:	70 ed       	ldi	r23, 0xD0	; 208
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	a5 01       	movw	r20, r10
     8fa:	94 01       	movw	r18, r8
     8fc:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     900:	da 01       	movw	r26, r20
     902:	c9 01       	movw	r24, r18
     904:	01 97       	sbiw	r24, 0x01	; 1
     906:	a1 09       	sbc	r26, r1
     908:	b1 09       	sbc	r27, r1
     90a:	8f 3f       	cpi	r24, 0xFF	; 255
     90c:	91 05       	cpc	r25, r1
     90e:	a1 05       	cpc	r26, r1
     910:	b1 05       	cpc	r27, r1
     912:	09 f0       	breq	.+2      	; 0x916 <calculateTopRegister+0x1d6>
     914:	50 f4       	brcc	.+20     	; 0x92a <calculateTopRegister+0x1ea>
     916:	4b ef       	ldi	r20, 0xFB	; 251
     918:	5f ef       	ldi	r21, 0xFF	; 255
     91a:	6f ef       	ldi	r22, 0xFF	; 255
     91c:	70 e0       	ldi	r23, 0x00	; 0
     91e:	f7 01       	movw	r30, r14
     920:	40 83       	st	Z, r20
     922:	51 83       	std	Z+1, r21	; 0x01
     924:	62 83       	std	Z+2, r22	; 0x02
     926:	73 83       	std	Z+3, r23	; 0x03
     928:	71 c0       	rjmp	.+226    	; 0xa0c <calculateTopRegister+0x2cc>
     92a:	68 e4       	ldi	r22, 0x48	; 72
     92c:	78 ee       	ldi	r23, 0xE8	; 232
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a5 01       	movw	r20, r10
     934:	94 01       	movw	r18, r8
     936:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     93a:	da 01       	movw	r26, r20
     93c:	c9 01       	movw	r24, r18
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	a1 09       	sbc	r26, r1
     942:	b1 09       	sbc	r27, r1
     944:	8f 3f       	cpi	r24, 0xFF	; 255
     946:	91 05       	cpc	r25, r1
     948:	a1 05       	cpc	r26, r1
     94a:	b1 05       	cpc	r27, r1
     94c:	09 f0       	breq	.+2      	; 0x950 <calculateTopRegister+0x210>
     94e:	50 f4       	brcc	.+20     	; 0x964 <calculateTopRegister+0x224>
     950:	4c ef       	ldi	r20, 0xFC	; 252
     952:	5f ef       	ldi	r21, 0xFF	; 255
     954:	6f ef       	ldi	r22, 0xFF	; 255
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	f7 01       	movw	r30, r14
     95a:	40 83       	st	Z, r20
     95c:	51 83       	std	Z+1, r21	; 0x01
     95e:	62 83       	std	Z+2, r22	; 0x02
     960:	73 83       	std	Z+3, r23	; 0x03
     962:	54 c0       	rjmp	.+168    	; 0xa0c <calculateTopRegister+0x2cc>
     964:	64 e2       	ldi	r22, 0x24	; 36
     966:	74 ef       	ldi	r23, 0xF4	; 244
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	a5 01       	movw	r20, r10
     96e:	94 01       	movw	r18, r8
     970:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     974:	da 01       	movw	r26, r20
     976:	c9 01       	movw	r24, r18
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	a1 09       	sbc	r26, r1
     97c:	b1 09       	sbc	r27, r1
     97e:	8f 3f       	cpi	r24, 0xFF	; 255
     980:	91 05       	cpc	r25, r1
     982:	a1 05       	cpc	r26, r1
     984:	b1 05       	cpc	r27, r1
     986:	09 f0       	breq	.+2      	; 0x98a <calculateTopRegister+0x24a>
     988:	50 f4       	brcc	.+20     	; 0x99e <calculateTopRegister+0x25e>
     98a:	4d ef       	ldi	r20, 0xFD	; 253
     98c:	5f ef       	ldi	r21, 0xFF	; 255
     98e:	6f ef       	ldi	r22, 0xFF	; 255
     990:	70 e0       	ldi	r23, 0x00	; 0
     992:	f7 01       	movw	r30, r14
     994:	40 83       	st	Z, r20
     996:	51 83       	std	Z+1, r21	; 0x01
     998:	62 83       	std	Z+2, r22	; 0x02
     99a:	73 83       	std	Z+3, r23	; 0x03
     99c:	37 c0       	rjmp	.+110    	; 0xa0c <calculateTopRegister+0x2cc>
     99e:	62 e1       	ldi	r22, 0x12	; 18
     9a0:	7a e7       	ldi	r23, 0x7A	; 122
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	a5 01       	movw	r20, r10
     9a8:	94 01       	movw	r18, r8
     9aa:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     9ae:	da 01       	movw	r26, r20
     9b0:	c9 01       	movw	r24, r18
     9b2:	01 97       	sbiw	r24, 0x01	; 1
     9b4:	a1 09       	sbc	r26, r1
     9b6:	b1 09       	sbc	r27, r1
     9b8:	8f 3f       	cpi	r24, 0xFF	; 255
     9ba:	91 05       	cpc	r25, r1
     9bc:	a1 05       	cpc	r26, r1
     9be:	b1 05       	cpc	r27, r1
     9c0:	09 f0       	breq	.+2      	; 0x9c4 <calculateTopRegister+0x284>
     9c2:	50 f4       	brcc	.+20     	; 0x9d8 <calculateTopRegister+0x298>
     9c4:	4e ef       	ldi	r20, 0xFE	; 254
     9c6:	5f ef       	ldi	r21, 0xFF	; 255
     9c8:	6f ef       	ldi	r22, 0xFF	; 255
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	f7 01       	movw	r30, r14
     9ce:	40 83       	st	Z, r20
     9d0:	51 83       	std	Z+1, r21	; 0x01
     9d2:	62 83       	std	Z+2, r22	; 0x02
     9d4:	73 83       	std	Z+3, r23	; 0x03
     9d6:	1a c0       	rjmp	.+52     	; 0xa0c <calculateTopRegister+0x2cc>
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	af ef       	ldi	r26, 0xFF	; 255
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	f7 01       	movw	r30, r14
     9e2:	80 83       	st	Z, r24
     9e4:	91 83       	std	Z+1, r25	; 0x01
     9e6:	a2 83       	std	Z+2, r26	; 0x02
     9e8:	b3 83       	std	Z+3, r27	; 0x03
     9ea:	64 e8       	ldi	r22, 0x84	; 132
     9ec:	7e e1       	ldi	r23, 0x1E	; 30
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	a5 01       	movw	r20, r10
     9f4:	94 01       	movw	r18, r8
     9f6:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
     9fa:	da 01       	movw	r26, r20
     9fc:	c9 01       	movw	r24, r18
     9fe:	01 97       	sbiw	r24, 0x01	; 1
     a00:	a1 09       	sbc	r26, r1
     a02:	b1 09       	sbc	r27, r1
     a04:	03 c0       	rjmp	.+6      	; 0xa0c <calculateTopRegister+0x2cc>
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	dc 01       	movw	r26, r24
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	0f 90       	pop	r0
     a14:	0f 90       	pop	r0
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	1f 91       	pop	r17
     a1c:	0f 91       	pop	r16
     a1e:	ff 90       	pop	r15
     a20:	ef 90       	pop	r14
     a22:	bf 90       	pop	r11
     a24:	af 90       	pop	r10
     a26:	9f 90       	pop	r9
     a28:	8f 90       	pop	r8
     a2a:	08 95       	ret

00000a2c <__vector_15>:
     a2c:	1f 92       	push	r1
     a2e:	0f 92       	push	r0
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	0f 92       	push	r0
     a34:	11 24       	eor	r1, r1
     a36:	0b b6       	in	r0, 0x3b	; 59
     a38:	0f 92       	push	r0
     a3a:	2f 93       	push	r18
     a3c:	3f 93       	push	r19
     a3e:	4f 93       	push	r20
     a40:	5f 93       	push	r21
     a42:	6f 93       	push	r22
     a44:	7f 93       	push	r23
     a46:	8f 93       	push	r24
     a48:	9f 93       	push	r25
     a4a:	af 93       	push	r26
     a4c:	bf 93       	push	r27
     a4e:	ef 93       	push	r30
     a50:	ff 93       	push	r31
     a52:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks>
     a56:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x1>
     a5a:	09 95       	icall
     a5c:	ff 91       	pop	r31
     a5e:	ef 91       	pop	r30
     a60:	bf 91       	pop	r27
     a62:	af 91       	pop	r26
     a64:	9f 91       	pop	r25
     a66:	8f 91       	pop	r24
     a68:	7f 91       	pop	r23
     a6a:	6f 91       	pop	r22
     a6c:	5f 91       	pop	r21
     a6e:	4f 91       	pop	r20
     a70:	3f 91       	pop	r19
     a72:	2f 91       	pop	r18
     a74:	0f 90       	pop	r0
     a76:	0b be       	out	0x3b, r0	; 59
     a78:	0f 90       	pop	r0
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	0f 90       	pop	r0
     a7e:	1f 90       	pop	r1
     a80:	18 95       	reti

00000a82 <__vector_13>:
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	0b b6       	in	r0, 0x3b	; 59
     a8e:	0f 92       	push	r0
     a90:	0f 93       	push	r16
     a92:	1f 93       	push	r17
     a94:	2f 93       	push	r18
     a96:	3f 93       	push	r19
     a98:	4f 93       	push	r20
     a9a:	5f 93       	push	r21
     a9c:	6f 93       	push	r22
     a9e:	7f 93       	push	r23
     aa0:	8f 93       	push	r24
     aa2:	9f 93       	push	r25
     aa4:	af 93       	push	r26
     aa6:	bf 93       	push	r27
     aa8:	cf 93       	push	r28
     aaa:	df 93       	push	r29
     aac:	ef 93       	push	r30
     aae:	ff 93       	push	r31
     ab0:	c1 e8       	ldi	r28, 0x81	; 129
     ab2:	d0 e0       	ldi	r29, 0x00	; 0
     ab4:	88 81       	ld	r24, Y
     ab6:	64 e0       	ldi	r22, 0x04	; 4
     ab8:	d2 dd       	rcall	.-1116   	; 0x65e <checkBit>
     aba:	18 2f       	mov	r17, r24
     abc:	88 81       	ld	r24, Y
     abe:	63 e0       	ldi	r22, 0x03	; 3
     ac0:	ce dd       	rcall	.-1124   	; 0x65e <checkBit>
     ac2:	c1 2f       	mov	r28, r17
     ac4:	cc 0f       	add	r28, r28
     ac6:	cc 0f       	add	r28, r28
     ac8:	cc 0f       	add	r28, r28
     aca:	24 e0       	ldi	r18, 0x04	; 4
     acc:	82 9f       	mul	r24, r18
     ace:	c0 01       	movw	r24, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	c8 2b       	or	r28, r24
     ad4:	00 e8       	ldi	r16, 0x80	; 128
     ad6:	10 e0       	ldi	r17, 0x00	; 0
     ad8:	f8 01       	movw	r30, r16
     ada:	80 81       	ld	r24, Z
     adc:	61 e0       	ldi	r22, 0x01	; 1
     ade:	bf dd       	rcall	.-1154   	; 0x65e <checkBit>
     ae0:	d8 2f       	mov	r29, r24
     ae2:	f8 01       	movw	r30, r16
     ae4:	80 81       	ld	r24, Z
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	ba dd       	rcall	.-1164   	; 0x65e <checkBit>
     aea:	dd 0f       	add	r29, r29
     aec:	8c 2b       	or	r24, r28
     aee:	8d 2b       	or	r24, r29
     af0:	88 30       	cpi	r24, 0x08	; 8
     af2:	18 f4       	brcc	.+6      	; 0xafa <__vector_13+0x78>
     af4:	84 30       	cpi	r24, 0x04	; 4
     af6:	19 f4       	brne	.+6      	; 0xafe <__vector_13+0x7c>
     af8:	08 c0       	rjmp	.+16     	; 0xb0a <__vector_13+0x88>
     afa:	80 fd       	sbrc	r24, 0
     afc:	06 c0       	rjmp	.+12     	; 0xb0a <__vector_13+0x88>
     afe:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p_timer1Callbacks+0x2>
     b02:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p_timer1Callbacks+0x3>
     b06:	09 95       	icall
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__vector_13+0x92>
     b0a:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks>
     b0e:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x1>
     b12:	09 95       	icall
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	0f 90       	pop	r0
     b36:	0b be       	out	0x3b, r0	; 59
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <__vector_14>:
     b42:	1f 92       	push	r1
     b44:	0f 92       	push	r0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	0f 92       	push	r0
     b4a:	11 24       	eor	r1, r1
     b4c:	0b b6       	in	r0, 0x3b	; 59
     b4e:	0f 92       	push	r0
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <p_timer1Callbacks+0x4>
     b6c:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <p_timer1Callbacks+0x5>
     b70:	09 95       	icall
     b72:	ff 91       	pop	r31
     b74:	ef 91       	pop	r30
     b76:	bf 91       	pop	r27
     b78:	af 91       	pop	r26
     b7a:	9f 91       	pop	r25
     b7c:	8f 91       	pop	r24
     b7e:	7f 91       	pop	r23
     b80:	6f 91       	pop	r22
     b82:	5f 91       	pop	r21
     b84:	4f 91       	pop	r20
     b86:	3f 91       	pop	r19
     b88:	2f 91       	pop	r18
     b8a:	0f 90       	pop	r0
     b8c:	0b be       	out	0x3b, r0	; 59
     b8e:	0f 90       	pop	r0
     b90:	0f be       	out	0x3f, r0	; 63
     b92:	0f 90       	pop	r0
     b94:	1f 90       	pop	r1
     b96:	18 95       	reti

00000b98 <__vector_12>:
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	0b b6       	in	r0, 0x3b	; 59
     ba4:	0f 92       	push	r0
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ef 93       	push	r30
     bc4:	ff 93       	push	r31
     bc6:	c1 e8       	ldi	r28, 0x81	; 129
     bc8:	d0 e0       	ldi	r29, 0x00	; 0
     bca:	88 81       	ld	r24, Y
     bcc:	64 e0       	ldi	r22, 0x04	; 4
     bce:	47 dd       	rcall	.-1394   	; 0x65e <checkBit>
     bd0:	18 2f       	mov	r17, r24
     bd2:	88 81       	ld	r24, Y
     bd4:	63 e0       	ldi	r22, 0x03	; 3
     bd6:	43 dd       	rcall	.-1402   	; 0x65e <checkBit>
     bd8:	c1 2f       	mov	r28, r17
     bda:	cc 0f       	add	r28, r28
     bdc:	cc 0f       	add	r28, r28
     bde:	cc 0f       	add	r28, r28
     be0:	24 e0       	ldi	r18, 0x04	; 4
     be2:	82 9f       	mul	r24, r18
     be4:	c0 01       	movw	r24, r0
     be6:	11 24       	eor	r1, r1
     be8:	c8 2b       	or	r28, r24
     bea:	00 e8       	ldi	r16, 0x80	; 128
     bec:	10 e0       	ldi	r17, 0x00	; 0
     bee:	f8 01       	movw	r30, r16
     bf0:	80 81       	ld	r24, Z
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	34 dd       	rcall	.-1432   	; 0x65e <checkBit>
     bf6:	d8 2f       	mov	r29, r24
     bf8:	f8 01       	movw	r30, r16
     bfa:	80 81       	ld	r24, Z
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	2f dd       	rcall	.-1442   	; 0x65e <checkBit>
     c00:	dd 0f       	add	r29, r29
     c02:	8c 2b       	or	r24, r28
     c04:	8d 2b       	or	r24, r29
     c06:	88 30       	cpi	r24, 0x08	; 8
     c08:	10 f0       	brcs	.+4      	; 0xc0e <__vector_12+0x76>
     c0a:	80 ff       	sbrs	r24, 0
     c0c:	06 c0       	rjmp	.+12     	; 0xc1a <__vector_12+0x82>
     c0e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p_timer1Callbacks+0x6>
     c12:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <p_timer1Callbacks+0x7>
     c16:	09 95       	icall
     c18:	05 c0       	rjmp	.+10     	; 0xc24 <__vector_12+0x8c>
     c1a:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks>
     c1e:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x1>
     c22:	09 95       	icall
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	bf 91       	pop	r27
     c2e:	af 91       	pop	r26
     c30:	9f 91       	pop	r25
     c32:	8f 91       	pop	r24
     c34:	7f 91       	pop	r23
     c36:	6f 91       	pop	r22
     c38:	5f 91       	pop	r21
     c3a:	4f 91       	pop	r20
     c3c:	3f 91       	pop	r19
     c3e:	2f 91       	pop	r18
     c40:	1f 91       	pop	r17
     c42:	0f 91       	pop	r16
     c44:	0f 90       	pop	r0
     c46:	0b be       	out	0x3b, r0	; 59
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
     c4e:	1f 90       	pop	r1
     c50:	18 95       	reti

00000c52 <__vector_11>:
     c52:	1f 92       	push	r1
     c54:	0f 92       	push	r0
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	0f 92       	push	r0
     c5a:	11 24       	eor	r1, r1
     c5c:	0b b6       	in	r0, 0x3b	; 59
     c5e:	0f 92       	push	r0
     c60:	2f 93       	push	r18
     c62:	3f 93       	push	r19
     c64:	4f 93       	push	r20
     c66:	5f 93       	push	r21
     c68:	6f 93       	push	r22
     c6a:	7f 93       	push	r23
     c6c:	8f 93       	push	r24
     c6e:	9f 93       	push	r25
     c70:	af 93       	push	r26
     c72:	bf 93       	push	r27
     c74:	ef 93       	push	r30
     c76:	ff 93       	push	r31
     c78:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <p_timer2Callbacks>
     c7c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <p_timer2Callbacks+0x1>
     c80:	09 95       	icall
     c82:	ff 91       	pop	r31
     c84:	ef 91       	pop	r30
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	0f 90       	pop	r0
     c9c:	0b be       	out	0x3b, r0	; 59
     c9e:	0f 90       	pop	r0
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	0f 90       	pop	r0
     ca4:	1f 90       	pop	r1
     ca6:	18 95       	reti

00000ca8 <__vector_9>:
     ca8:	1f 92       	push	r1
     caa:	0f 92       	push	r0
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	0f 92       	push	r0
     cb0:	11 24       	eor	r1, r1
     cb2:	0b b6       	in	r0, 0x3b	; 59
     cb4:	0f 92       	push	r0
     cb6:	2f 93       	push	r18
     cb8:	3f 93       	push	r19
     cba:	4f 93       	push	r20
     cbc:	5f 93       	push	r21
     cbe:	6f 93       	push	r22
     cc0:	7f 93       	push	r23
     cc2:	8f 93       	push	r24
     cc4:	9f 93       	push	r25
     cc6:	af 93       	push	r26
     cc8:	bf 93       	push	r27
     cca:	ef 93       	push	r30
     ccc:	ff 93       	push	r31
     cce:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     cd2:	63 e0       	ldi	r22, 0x03	; 3
     cd4:	c4 dc       	rcall	.-1656   	; 0x65e <checkBit>
     cd6:	81 11       	cpse	r24, r1
     cd8:	0b c0       	rjmp	.+22     	; 0xcf0 <__vector_9+0x48>
     cda:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     cde:	83 70       	andi	r24, 0x03	; 3
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	31 f0       	breq	.+12     	; 0xcf0 <__vector_9+0x48>
     ce4:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <p_timer2Callbacks+0x2>
     ce8:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <p_timer2Callbacks+0x3>
     cec:	09 95       	icall
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__vector_9+0x52>
     cf0:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <p_timer2Callbacks>
     cf4:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <p_timer2Callbacks+0x1>
     cf8:	09 95       	icall
     cfa:	ff 91       	pop	r31
     cfc:	ef 91       	pop	r30
     cfe:	bf 91       	pop	r27
     d00:	af 91       	pop	r26
     d02:	9f 91       	pop	r25
     d04:	8f 91       	pop	r24
     d06:	7f 91       	pop	r23
     d08:	6f 91       	pop	r22
     d0a:	5f 91       	pop	r21
     d0c:	4f 91       	pop	r20
     d0e:	3f 91       	pop	r19
     d10:	2f 91       	pop	r18
     d12:	0f 90       	pop	r0
     d14:	0b be       	out	0x3b, r0	; 59
     d16:	0f 90       	pop	r0
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__vector_10>:
     d20:	1f 92       	push	r1
     d22:	0f 92       	push	r0
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	0f 92       	push	r0
     d28:	11 24       	eor	r1, r1
     d2a:	0b b6       	in	r0, 0x3b	; 59
     d2c:	0f 92       	push	r0
     d2e:	2f 93       	push	r18
     d30:	3f 93       	push	r19
     d32:	4f 93       	push	r20
     d34:	5f 93       	push	r21
     d36:	6f 93       	push	r22
     d38:	7f 93       	push	r23
     d3a:	8f 93       	push	r24
     d3c:	9f 93       	push	r25
     d3e:	af 93       	push	r26
     d40:	bf 93       	push	r27
     d42:	ef 93       	push	r30
     d44:	ff 93       	push	r31
     d46:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <p_timer2Callbacks+0x4>
     d4a:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <p_timer2Callbacks+0x5>
     d4e:	09 95       	icall
     d50:	ff 91       	pop	r31
     d52:	ef 91       	pop	r30
     d54:	bf 91       	pop	r27
     d56:	af 91       	pop	r26
     d58:	9f 91       	pop	r25
     d5a:	8f 91       	pop	r24
     d5c:	7f 91       	pop	r23
     d5e:	6f 91       	pop	r22
     d60:	5f 91       	pop	r21
     d62:	4f 91       	pop	r20
     d64:	3f 91       	pop	r19
     d66:	2f 91       	pop	r18
     d68:	0f 90       	pop	r0
     d6a:	0b be       	out	0x3b, r0	; 59
     d6c:	0f 90       	pop	r0
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	0f 90       	pop	r0
     d72:	1f 90       	pop	r1
     d74:	18 95       	reti

00000d76 <timer_init>:
     d76:	ef 92       	push	r14
     d78:	ff 92       	push	r15
     d7a:	0f 93       	push	r16
     d7c:	1f 93       	push	r17
     d7e:	cf 93       	push	r28
     d80:	df 93       	push	r29
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	29 97       	sbiw	r28, 0x09	; 9
     d88:	0f b6       	in	r0, 0x3f	; 63
     d8a:	f8 94       	cli
     d8c:	de bf       	out	0x3e, r29	; 62
     d8e:	0f be       	out	0x3f, r0	; 63
     d90:	cd bf       	out	0x3d, r28	; 61
     d92:	4d 83       	std	Y+5, r20	; 0x05
     d94:	5e 83       	std	Y+6, r21	; 0x06
     d96:	6f 83       	std	Y+7, r22	; 0x07
     d98:	78 87       	std	Y+8, r23	; 0x08
     d9a:	89 87       	std	Y+9, r24	; 0x09
     d9c:	0e 81       	ldd	r16, Y+6	; 0x06
     d9e:	1f 81       	ldd	r17, Y+7	; 0x07
     da0:	28 85       	ldd	r18, Y+8	; 0x08
     da2:	39 85       	ldd	r19, Y+9	; 0x09
     da4:	19 82       	std	Y+1, r1	; 0x01
     da6:	1a 82       	std	Y+2, r1	; 0x02
     da8:	1b 82       	std	Y+3, r1	; 0x03
     daa:	1c 82       	std	Y+4, r1	; 0x04
     dac:	41 30       	cpi	r20, 0x01	; 1
     dae:	21 f0       	breq	.+8      	; 0xdb8 <timer_init+0x42>
     db0:	42 30       	cpi	r20, 0x02	; 2
     db2:	09 f4       	brne	.+2      	; 0xdb6 <timer_init+0x40>
     db4:	95 c0       	rjmp	.+298    	; 0xee0 <timer_init+0x16a>
     db6:	1e c1       	rjmp	.+572    	; 0xff4 <timer_init+0x27e>
     db8:	09 3f       	cpi	r16, 0xF9	; 249
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	18 07       	cpc	r17, r24
     dbe:	28 07       	cpc	r18, r24
     dc0:	31 05       	cpc	r19, r1
     dc2:	28 f0       	brcs	.+10     	; 0xdce <timer_init+0x58>
     dc4:	09 83       	std	Y+1, r16	; 0x01
     dc6:	1a 83       	std	Y+2, r17	; 0x02
     dc8:	2b 83       	std	Y+3, r18	; 0x03
     dca:	3c 83       	std	Y+4, r19	; 0x04
     dcc:	15 c0       	rjmp	.+42     	; 0xdf8 <timer_init+0x82>
     dce:	ce 01       	movw	r24, r28
     dd0:	01 96       	adiw	r24, 0x01	; 1
     dd2:	7c 01       	movw	r14, r24
     dd4:	4d 81       	ldd	r20, Y+5	; 0x05
     dd6:	5e 81       	ldd	r21, Y+6	; 0x06
     dd8:	6f 81       	ldd	r22, Y+7	; 0x07
     dda:	78 85       	ldd	r23, Y+8	; 0x08
     ddc:	89 85       	ldd	r24, Y+9	; 0x09
     dde:	b0 dc       	rcall	.-1696   	; 0x740 <calculateTopRegister>
     de0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     de4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     de8:	64 e0       	ldi	r22, 0x04	; 4
     dea:	81 e8       	ldi	r24, 0x81	; 129
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	1e dc       	rcall	.-1988   	; 0x62c <setBit>
     df0:	63 e0       	ldi	r22, 0x03	; 3
     df2:	81 e8       	ldi	r24, 0x81	; 129
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	1a dc       	rcall	.-1996   	; 0x62c <setBit>
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	9a 81       	ldd	r25, Y+2	; 0x02
     dfc:	ab 81       	ldd	r26, Y+3	; 0x03
     dfe:	bc 81       	ldd	r27, Y+4	; 0x04
     e00:	8c 3f       	cpi	r24, 0xFC	; 252
     e02:	2f ef       	ldi	r18, 0xFF	; 255
     e04:	92 07       	cpc	r25, r18
     e06:	a2 07       	cpc	r26, r18
     e08:	b1 05       	cpc	r27, r1
     e0a:	59 f1       	breq	.+86     	; 0xe62 <timer_init+0xec>
     e0c:	60 f4       	brcc	.+24     	; 0xe26 <timer_init+0xb0>
     e0e:	89 3f       	cpi	r24, 0xF9	; 249
     e10:	2f ef       	ldi	r18, 0xFF	; 255
     e12:	92 07       	cpc	r25, r18
     e14:	a2 07       	cpc	r26, r18
     e16:	b1 05       	cpc	r27, r1
     e18:	91 f0       	breq	.+36     	; 0xe3e <timer_init+0xc8>
     e1a:	8a 3f       	cpi	r24, 0xFA	; 250
     e1c:	9f 4f       	sbci	r25, 0xFF	; 255
     e1e:	af 4f       	sbci	r26, 0xFF	; 255
     e20:	b1 05       	cpc	r27, r1
     e22:	b1 f0       	breq	.+44     	; 0xe50 <timer_init+0xda>
     e24:	38 c0       	rjmp	.+112    	; 0xe96 <timer_init+0x120>
     e26:	8e 3f       	cpi	r24, 0xFE	; 254
     e28:	2f ef       	ldi	r18, 0xFF	; 255
     e2a:	92 07       	cpc	r25, r18
     e2c:	a2 07       	cpc	r26, r18
     e2e:	b1 05       	cpc	r27, r1
     e30:	09 f1       	breq	.+66     	; 0xe74 <timer_init+0xfe>
     e32:	8f 3f       	cpi	r24, 0xFF	; 255
     e34:	9f 4f       	sbci	r25, 0xFF	; 255
     e36:	af 4f       	sbci	r26, 0xFF	; 255
     e38:	b1 05       	cpc	r27, r1
     e3a:	29 f1       	breq	.+74     	; 0xe86 <timer_init+0x110>
     e3c:	2c c0       	rjmp	.+88     	; 0xe96 <timer_init+0x120>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a0 e0       	ldi	r26, 0x00	; 0
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	89 83       	std	Y+1, r24	; 0x01
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	ab 83       	std	Y+3, r26	; 0x03
     e4c:	bc 83       	std	Y+4, r27	; 0x04
     e4e:	23 c0       	rjmp	.+70     	; 0xe96 <timer_init+0x120>
     e50:	82 e0       	ldi	r24, 0x02	; 2
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	a0 e0       	ldi	r26, 0x00	; 0
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	89 83       	std	Y+1, r24	; 0x01
     e5a:	9a 83       	std	Y+2, r25	; 0x02
     e5c:	ab 83       	std	Y+3, r26	; 0x03
     e5e:	bc 83       	std	Y+4, r27	; 0x04
     e60:	1a c0       	rjmp	.+52     	; 0xe96 <timer_init+0x120>
     e62:	83 e0       	ldi	r24, 0x03	; 3
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	a0 e0       	ldi	r26, 0x00	; 0
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	89 83       	std	Y+1, r24	; 0x01
     e6c:	9a 83       	std	Y+2, r25	; 0x02
     e6e:	ab 83       	std	Y+3, r26	; 0x03
     e70:	bc 83       	std	Y+4, r27	; 0x04
     e72:	11 c0       	rjmp	.+34     	; 0xe96 <timer_init+0x120>
     e74:	84 e0       	ldi	r24, 0x04	; 4
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	a0 e0       	ldi	r26, 0x00	; 0
     e7a:	b0 e0       	ldi	r27, 0x00	; 0
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	ab 83       	std	Y+3, r26	; 0x03
     e82:	bc 83       	std	Y+4, r27	; 0x04
     e84:	08 c0       	rjmp	.+16     	; 0xe96 <timer_init+0x120>
     e86:	85 e0       	ldi	r24, 0x05	; 5
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	a0 e0       	ldi	r26, 0x00	; 0
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	ab 83       	std	Y+3, r26	; 0x03
     e94:	bc 83       	std	Y+4, r27	; 0x04
     e96:	49 81       	ldd	r20, Y+1	; 0x01
     e98:	5a 81       	ldd	r21, Y+2	; 0x02
     e9a:	6b 81       	ldd	r22, Y+3	; 0x03
     e9c:	7c 81       	ldd	r23, Y+4	; 0x04
     e9e:	76 95       	lsr	r23
     ea0:	67 95       	ror	r22
     ea2:	57 95       	ror	r21
     ea4:	47 95       	ror	r20
     ea6:	76 95       	lsr	r23
     ea8:	67 95       	ror	r22
     eaa:	57 95       	ror	r21
     eac:	47 95       	ror	r20
     eae:	41 70       	andi	r20, 0x01	; 1
     eb0:	62 e0       	ldi	r22, 0x02	; 2
     eb2:	8c e3       	ldi	r24, 0x3C	; 60
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	a2 db       	rcall	.-2236   	; 0x5fc <updateBit>
     eb8:	49 81       	ldd	r20, Y+1	; 0x01
     eba:	5a 81       	ldd	r21, Y+2	; 0x02
     ebc:	6b 81       	ldd	r22, Y+3	; 0x03
     ebe:	7c 81       	ldd	r23, Y+4	; 0x04
     ec0:	76 95       	lsr	r23
     ec2:	67 95       	ror	r22
     ec4:	57 95       	ror	r21
     ec6:	47 95       	ror	r20
     ec8:	41 70       	andi	r20, 0x01	; 1
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	8c e3       	ldi	r24, 0x3C	; 60
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	95 db       	rcall	.-2262   	; 0x5fc <updateBit>
     ed2:	49 81       	ldd	r20, Y+1	; 0x01
     ed4:	41 70       	andi	r20, 0x01	; 1
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	8c e3       	ldi	r24, 0x3C	; 60
     eda:	91 e0       	ldi	r25, 0x01	; 1
     edc:	8f db       	rcall	.-2274   	; 0x5fc <updateBit>
     ede:	8a c0       	rjmp	.+276    	; 0xff4 <timer_init+0x27e>
     ee0:	09 3f       	cpi	r16, 0xF9	; 249
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	18 07       	cpc	r17, r24
     ee6:	28 07       	cpc	r18, r24
     ee8:	31 05       	cpc	r19, r1
     eea:	28 f0       	brcs	.+10     	; 0xef6 <timer_init+0x180>
     eec:	09 83       	std	Y+1, r16	; 0x01
     eee:	1a 83       	std	Y+2, r17	; 0x02
     ef0:	2b 83       	std	Y+3, r18	; 0x03
     ef2:	3c 83       	std	Y+4, r19	; 0x04
     ef4:	0f c0       	rjmp	.+30     	; 0xf14 <timer_init+0x19e>
     ef6:	ce 01       	movw	r24, r28
     ef8:	01 96       	adiw	r24, 0x01	; 1
     efa:	7c 01       	movw	r14, r24
     efc:	4d 81       	ldd	r20, Y+5	; 0x05
     efe:	5e 81       	ldd	r21, Y+6	; 0x06
     f00:	6f 81       	ldd	r22, Y+7	; 0x07
     f02:	78 85       	ldd	r23, Y+8	; 0x08
     f04:	89 85       	ldd	r24, Y+9	; 0x09
     f06:	1c dc       	rcall	.-1992   	; 0x740 <calculateTopRegister>
     f08:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	80 eb       	ldi	r24, 0xB0	; 176
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	8c db       	rcall	.-2280   	; 0x62c <setBit>
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02
     f18:	ab 81       	ldd	r26, Y+3	; 0x03
     f1a:	bc 81       	ldd	r27, Y+4	; 0x04
     f1c:	fc 01       	movw	r30, r24
     f1e:	37 96       	adiw	r30, 0x07	; 7
     f20:	e7 30       	cpi	r30, 0x07	; 7
     f22:	f1 05       	cpc	r31, r1
     f24:	08 f0       	brcs	.+2      	; 0xf28 <timer_init+0x1b2>
     f26:	42 c0       	rjmp	.+132    	; 0xfac <timer_init+0x236>
     f28:	ea 5b       	subi	r30, 0xBA	; 186
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	0c 94 a7 12 	jmp	0x254e	; 0x254e <__tablejump2__>
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	a0 e0       	ldi	r26, 0x00	; 0
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	89 83       	std	Y+1, r24	; 0x01
     f3a:	9a 83       	std	Y+2, r25	; 0x02
     f3c:	ab 83       	std	Y+3, r26	; 0x03
     f3e:	bc 83       	std	Y+4, r27	; 0x04
     f40:	35 c0       	rjmp	.+106    	; 0xfac <timer_init+0x236>
     f42:	82 e0       	ldi	r24, 0x02	; 2
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a0 e0       	ldi	r26, 0x00	; 0
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	ab 83       	std	Y+3, r26	; 0x03
     f50:	bc 83       	std	Y+4, r27	; 0x04
     f52:	2c c0       	rjmp	.+88     	; 0xfac <timer_init+0x236>
     f54:	83 e0       	ldi	r24, 0x03	; 3
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	89 83       	std	Y+1, r24	; 0x01
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	ab 83       	std	Y+3, r26	; 0x03
     f62:	bc 83       	std	Y+4, r27	; 0x04
     f64:	23 c0       	rjmp	.+70     	; 0xfac <timer_init+0x236>
     f66:	84 e0       	ldi	r24, 0x04	; 4
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a0 e0       	ldi	r26, 0x00	; 0
     f6c:	b0 e0       	ldi	r27, 0x00	; 0
     f6e:	89 83       	std	Y+1, r24	; 0x01
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	ab 83       	std	Y+3, r26	; 0x03
     f74:	bc 83       	std	Y+4, r27	; 0x04
     f76:	1a c0       	rjmp	.+52     	; 0xfac <timer_init+0x236>
     f78:	85 e0       	ldi	r24, 0x05	; 5
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a0 e0       	ldi	r26, 0x00	; 0
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	9a 83       	std	Y+2, r25	; 0x02
     f84:	ab 83       	std	Y+3, r26	; 0x03
     f86:	bc 83       	std	Y+4, r27	; 0x04
     f88:	11 c0       	rjmp	.+34     	; 0xfac <timer_init+0x236>
     f8a:	86 e0       	ldi	r24, 0x06	; 6
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	a0 e0       	ldi	r26, 0x00	; 0
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	89 83       	std	Y+1, r24	; 0x01
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	ab 83       	std	Y+3, r26	; 0x03
     f98:	bc 83       	std	Y+4, r27	; 0x04
     f9a:	08 c0       	rjmp	.+16     	; 0xfac <timer_init+0x236>
     f9c:	87 e0       	ldi	r24, 0x07	; 7
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	ab 83       	std	Y+3, r26	; 0x03
     faa:	bc 83       	std	Y+4, r27	; 0x04
     fac:	49 81       	ldd	r20, Y+1	; 0x01
     fae:	5a 81       	ldd	r21, Y+2	; 0x02
     fb0:	6b 81       	ldd	r22, Y+3	; 0x03
     fb2:	7c 81       	ldd	r23, Y+4	; 0x04
     fb4:	76 95       	lsr	r23
     fb6:	67 95       	ror	r22
     fb8:	57 95       	ror	r21
     fba:	47 95       	ror	r20
     fbc:	76 95       	lsr	r23
     fbe:	67 95       	ror	r22
     fc0:	57 95       	ror	r21
     fc2:	47 95       	ror	r20
     fc4:	41 70       	andi	r20, 0x01	; 1
     fc6:	62 e0       	ldi	r22, 0x02	; 2
     fc8:	8d e3       	ldi	r24, 0x3D	; 61
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	17 db       	rcall	.-2514   	; 0x5fc <updateBit>
     fce:	49 81       	ldd	r20, Y+1	; 0x01
     fd0:	5a 81       	ldd	r21, Y+2	; 0x02
     fd2:	6b 81       	ldd	r22, Y+3	; 0x03
     fd4:	7c 81       	ldd	r23, Y+4	; 0x04
     fd6:	76 95       	lsr	r23
     fd8:	67 95       	ror	r22
     fda:	57 95       	ror	r21
     fdc:	47 95       	ror	r20
     fde:	41 70       	andi	r20, 0x01	; 1
     fe0:	61 e0       	ldi	r22, 0x01	; 1
     fe2:	8d e3       	ldi	r24, 0x3D	; 61
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0a db       	rcall	.-2540   	; 0x5fc <updateBit>
     fe8:	49 81       	ldd	r20, Y+1	; 0x01
     fea:	41 70       	andi	r20, 0x01	; 1
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	8d e3       	ldi	r24, 0x3D	; 61
     ff0:	91 e0       	ldi	r25, 0x01	; 1
     ff2:	04 db       	rcall	.-2552   	; 0x5fc <updateBit>
     ff4:	29 96       	adiw	r28, 0x09	; 9
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	de bf       	out	0x3e, r29	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	cd bf       	out	0x3d, r28	; 61
    1000:	df 91       	pop	r29
    1002:	cf 91       	pop	r28
    1004:	1f 91       	pop	r17
    1006:	0f 91       	pop	r16
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	08 95       	ret

0000100e <timer_start>:
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	00 d0       	rcall	.+0      	; 0x1014 <timer_start+0x6>
    1014:	00 d0       	rcall	.+0      	; 0x1016 <timer_start+0x8>
    1016:	1f 92       	push	r1
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	41 30       	cpi	r20, 0x01	; 1
    101e:	19 f0       	breq	.+6      	; 0x1026 <timer_start+0x18>
    1020:	42 30       	cpi	r20, 0x02	; 2
    1022:	d1 f0       	breq	.+52     	; 0x1058 <timer_start+0x4a>
    1024:	31 c0       	rjmp	.+98     	; 0x1088 <timer_start+0x7a>
    1026:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <u8_timer1ClockSource>
    102a:	42 fb       	bst	r20, 2
    102c:	44 27       	eor	r20, r20
    102e:	40 f9       	bld	r20, 0
    1030:	62 e0       	ldi	r22, 0x02	; 2
    1032:	81 e8       	ldi	r24, 0x81	; 129
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	e2 da       	rcall	.-2620   	; 0x5fc <updateBit>
    1038:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <u8_timer1ClockSource>
    103c:	46 95       	lsr	r20
    103e:	41 70       	andi	r20, 0x01	; 1
    1040:	61 e0       	ldi	r22, 0x01	; 1
    1042:	81 e8       	ldi	r24, 0x81	; 129
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	da da       	rcall	.-2636   	; 0x5fc <updateBit>
    1048:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <u8_timer1ClockSource>
    104c:	41 70       	andi	r20, 0x01	; 1
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	81 e8       	ldi	r24, 0x81	; 129
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	d3 da       	rcall	.-2650   	; 0x5fc <updateBit>
    1056:	18 c0       	rjmp	.+48     	; 0x1088 <timer_start+0x7a>
    1058:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <u8_timer2ClockSource>
    105c:	42 fb       	bst	r20, 2
    105e:	44 27       	eor	r20, r20
    1060:	40 f9       	bld	r20, 0
    1062:	62 e0       	ldi	r22, 0x02	; 2
    1064:	81 eb       	ldi	r24, 0xB1	; 177
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	c9 da       	rcall	.-2670   	; 0x5fc <updateBit>
    106a:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <u8_timer2ClockSource>
    106e:	46 95       	lsr	r20
    1070:	41 70       	andi	r20, 0x01	; 1
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	81 eb       	ldi	r24, 0xB1	; 177
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	c1 da       	rcall	.-2686   	; 0x5fc <updateBit>
    107a:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <u8_timer2ClockSource>
    107e:	41 70       	andi	r20, 0x01	; 1
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	81 eb       	ldi	r24, 0xB1	; 177
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	ba da       	rcall	.-2700   	; 0x5fc <updateBit>
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	0f 90       	pop	r0
    1092:	df 91       	pop	r29
    1094:	cf 91       	pop	r28
    1096:	08 95       	ret

00001098 <timer_enableInterrupt>:
    1098:	cf 92       	push	r12
    109a:	df 92       	push	r13
    109c:	ef 92       	push	r14
    109e:	ff 92       	push	r15
    10a0:	0f 93       	push	r16
    10a2:	1f 93       	push	r17
    10a4:	cf 93       	push	r28
    10a6:	df 93       	push	r29
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <timer_enableInterrupt+0x12>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <timer_enableInterrupt+0x14>
    10ac:	1f 92       	push	r1
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	49 83       	std	Y+1, r20	; 0x01
    10b4:	5a 83       	std	Y+2, r21	; 0x02
    10b6:	6b 83       	std	Y+3, r22	; 0x03
    10b8:	7c 83       	std	Y+4, r23	; 0x04
    10ba:	8d 83       	std	Y+5, r24	; 0x05
    10bc:	02 2f       	mov	r16, r18
    10be:	41 30       	cpi	r20, 0x01	; 1
    10c0:	21 f0       	breq	.+8      	; 0x10ca <timer_enableInterrupt+0x32>
    10c2:	42 30       	cpi	r20, 0x02	; 2
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <timer_enableInterrupt+0x30>
    10c6:	5e c0       	rjmp	.+188    	; 0x1184 <timer_enableInterrupt+0xec>
    10c8:	95 c0       	rjmp	.+298    	; 0x11f4 <timer_enableInterrupt+0x15c>
    10ca:	0f 2e       	mov	r0, r31
    10cc:	f1 e8       	ldi	r31, 0x81	; 129
    10ce:	ef 2e       	mov	r14, r31
    10d0:	f1 2c       	mov	r15, r1
    10d2:	f0 2d       	mov	r31, r0
    10d4:	f7 01       	movw	r30, r14
    10d6:	80 81       	ld	r24, Z
    10d8:	64 e0       	ldi	r22, 0x04	; 4
    10da:	c1 da       	rcall	.-2686   	; 0x65e <checkBit>
    10dc:	18 2f       	mov	r17, r24
    10de:	f7 01       	movw	r30, r14
    10e0:	80 81       	ld	r24, Z
    10e2:	63 e0       	ldi	r22, 0x03	; 3
    10e4:	bc da       	rcall	.-2696   	; 0x65e <checkBit>
    10e6:	11 0f       	add	r17, r17
    10e8:	11 0f       	add	r17, r17
    10ea:	11 0f       	add	r17, r17
    10ec:	f4 e0       	ldi	r31, 0x04	; 4
    10ee:	8f 9f       	mul	r24, r31
    10f0:	c0 01       	movw	r24, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	18 2b       	or	r17, r24
    10f6:	68 94       	set
    10f8:	cc 24       	eor	r12, r12
    10fa:	c7 f8       	bld	r12, 7
    10fc:	d1 2c       	mov	r13, r1
    10fe:	f6 01       	movw	r30, r12
    1100:	80 81       	ld	r24, Z
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	ac da       	rcall	.-2728   	; 0x65e <checkBit>
    1106:	f8 2e       	mov	r15, r24
    1108:	f6 01       	movw	r30, r12
    110a:	80 81       	ld	r24, Z
    110c:	60 e0       	ldi	r22, 0x00	; 0
    110e:	a7 da       	rcall	.-2738   	; 0x65e <checkBit>
    1110:	ff 0c       	add	r15, r15
    1112:	81 2b       	or	r24, r17
    1114:	8f 29       	or	r24, r15
    1116:	01 30       	cpi	r16, 0x01	; 1
    1118:	d9 f0       	breq	.+54     	; 0x1150 <timer_enableInterrupt+0xb8>
    111a:	28 f0       	brcs	.+10     	; 0x1126 <timer_enableInterrupt+0x8e>
    111c:	02 30       	cpi	r16, 0x02	; 2
    111e:	21 f1       	breq	.+72     	; 0x1168 <timer_enableInterrupt+0xd0>
    1120:	03 30       	cpi	r16, 0x03	; 3
    1122:	39 f1       	breq	.+78     	; 0x1172 <timer_enableInterrupt+0xda>
    1124:	67 c0       	rjmp	.+206    	; 0x11f4 <timer_enableInterrupt+0x15c>
    1126:	88 30       	cpi	r24, 0x08	; 8
    1128:	38 f4       	brcc	.+14     	; 0x1138 <timer_enableInterrupt+0xa0>
    112a:	84 30       	cpi	r24, 0x04	; 4
    112c:	61 f0       	breq	.+24     	; 0x1146 <timer_enableInterrupt+0xae>
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	8f e6       	ldi	r24, 0x6F	; 111
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	7b da       	rcall	.-2826   	; 0x62c <setBit>
    1136:	5e c0       	rjmp	.+188    	; 0x11f4 <timer_enableInterrupt+0x15c>
    1138:	80 fd       	sbrc	r24, 0
    113a:	05 c0       	rjmp	.+10     	; 0x1146 <timer_enableInterrupt+0xae>
    113c:	65 e0       	ldi	r22, 0x05	; 5
    113e:	8f e6       	ldi	r24, 0x6F	; 111
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	74 da       	rcall	.-2840   	; 0x62c <setBit>
    1144:	57 c0       	rjmp	.+174    	; 0x11f4 <timer_enableInterrupt+0x15c>
    1146:	61 e0       	ldi	r22, 0x01	; 1
    1148:	8f e6       	ldi	r24, 0x6F	; 111
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	6f da       	rcall	.-2850   	; 0x62c <setBit>
    114e:	52 c0       	rjmp	.+164    	; 0x11f4 <timer_enableInterrupt+0x15c>
    1150:	88 30       	cpi	r24, 0x08	; 8
    1152:	18 f4       	brcc	.+6      	; 0x115a <timer_enableInterrupt+0xc2>
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	19 f4       	brne	.+6      	; 0x115e <timer_enableInterrupt+0xc6>
    1158:	4d c0       	rjmp	.+154    	; 0x11f4 <timer_enableInterrupt+0x15c>
    115a:	80 fd       	sbrc	r24, 0
    115c:	4b c0       	rjmp	.+150    	; 0x11f4 <timer_enableInterrupt+0x15c>
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	8f e6       	ldi	r24, 0x6F	; 111
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	63 da       	rcall	.-2874   	; 0x62c <setBit>
    1166:	46 c0       	rjmp	.+140    	; 0x11f4 <timer_enableInterrupt+0x15c>
    1168:	62 e0       	ldi	r22, 0x02	; 2
    116a:	8f e6       	ldi	r24, 0x6F	; 111
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	5e da       	rcall	.-2884   	; 0x62c <setBit>
    1170:	41 c0       	rjmp	.+130    	; 0x11f4 <timer_enableInterrupt+0x15c>
    1172:	88 30       	cpi	r24, 0x08	; 8
    1174:	10 f0       	brcs	.+4      	; 0x117a <timer_enableInterrupt+0xe2>
    1176:	80 ff       	sbrs	r24, 0
    1178:	3d c0       	rjmp	.+122    	; 0x11f4 <timer_enableInterrupt+0x15c>
    117a:	65 e0       	ldi	r22, 0x05	; 5
    117c:	8f e6       	ldi	r24, 0x6F	; 111
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	55 da       	rcall	.-2902   	; 0x62c <setBit>
    1182:	38 c0       	rjmp	.+112    	; 0x11f4 <timer_enableInterrupt+0x15c>
    1184:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1188:	63 e0       	ldi	r22, 0x03	; 3
    118a:	69 da       	rcall	.-2862   	; 0x65e <checkBit>
    118c:	18 2f       	mov	r17, r24
    118e:	0f 2e       	mov	r0, r31
    1190:	f0 eb       	ldi	r31, 0xB0	; 176
    1192:	ef 2e       	mov	r14, r31
    1194:	f1 2c       	mov	r15, r1
    1196:	f0 2d       	mov	r31, r0
    1198:	f7 01       	movw	r30, r14
    119a:	80 81       	ld	r24, Z
    119c:	61 e0       	ldi	r22, 0x01	; 1
    119e:	5f da       	rcall	.-2882   	; 0x65e <checkBit>
    11a0:	11 0f       	add	r17, r17
    11a2:	11 0f       	add	r17, r17
    11a4:	88 0f       	add	r24, r24
    11a6:	18 2b       	or	r17, r24
    11a8:	f7 01       	movw	r30, r14
    11aa:	80 81       	ld	r24, Z
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	57 da       	rcall	.-2898   	; 0x65e <checkBit>
    11b0:	81 2b       	or	r24, r17
    11b2:	01 30       	cpi	r16, 0x01	; 1
    11b4:	91 f0       	breq	.+36     	; 0x11da <timer_enableInterrupt+0x142>
    11b6:	18 f0       	brcs	.+6      	; 0x11be <timer_enableInterrupt+0x126>
    11b8:	02 30       	cpi	r16, 0x02	; 2
    11ba:	c1 f0       	breq	.+48     	; 0x11ec <timer_enableInterrupt+0x154>
    11bc:	1b c0       	rjmp	.+54     	; 0x11f4 <timer_enableInterrupt+0x15c>
    11be:	84 30       	cpi	r24, 0x04	; 4
    11c0:	38 f4       	brcc	.+14     	; 0x11d0 <timer_enableInterrupt+0x138>
    11c2:	82 30       	cpi	r24, 0x02	; 2
    11c4:	29 f0       	breq	.+10     	; 0x11d0 <timer_enableInterrupt+0x138>
    11c6:	60 e0       	ldi	r22, 0x00	; 0
    11c8:	80 e7       	ldi	r24, 0x70	; 112
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	2f da       	rcall	.-2978   	; 0x62c <setBit>
    11ce:	12 c0       	rjmp	.+36     	; 0x11f4 <timer_enableInterrupt+0x15c>
    11d0:	61 e0       	ldi	r22, 0x01	; 1
    11d2:	80 e7       	ldi	r24, 0x70	; 112
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	2a da       	rcall	.-2988   	; 0x62c <setBit>
    11d8:	0d c0       	rjmp	.+26     	; 0x11f4 <timer_enableInterrupt+0x15c>
    11da:	84 30       	cpi	r24, 0x04	; 4
    11dc:	58 f4       	brcc	.+22     	; 0x11f4 <timer_enableInterrupt+0x15c>
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	49 f0       	breq	.+18     	; 0x11f4 <timer_enableInterrupt+0x15c>
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	80 e7       	ldi	r24, 0x70	; 112
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	21 da       	rcall	.-3006   	; 0x62c <setBit>
    11ea:	04 c0       	rjmp	.+8      	; 0x11f4 <timer_enableInterrupt+0x15c>
    11ec:	62 e0       	ldi	r22, 0x02	; 2
    11ee:	80 e7       	ldi	r24, 0x70	; 112
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	1c da       	rcall	.-3016   	; 0x62c <setBit>
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	ff 90       	pop	r15
    1208:	ef 90       	pop	r14
    120a:	df 90       	pop	r13
    120c:	cf 90       	pop	r12
    120e:	08 95       	ret

00001210 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    1210:	0f 93       	push	r16
    1212:	1f 93       	push	r17
    1214:	cf 93       	push	r28
    1216:	df 93       	push	r29
    1218:	00 d0       	rcall	.+0      	; 0x121a <timer_attachInterrupt+0xa>
    121a:	00 d0       	rcall	.+0      	; 0x121c <timer_attachInterrupt+0xc>
    121c:	1f 92       	push	r1
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    1222:	41 30       	cpi	r20, 0x01	; 1
    1224:	19 f0       	breq	.+6      	; 0x122c <timer_attachInterrupt+0x1c>
    1226:	42 30       	cpi	r20, 0x02	; 2
    1228:	51 f0       	breq	.+20     	; 0x123e <timer_attachInterrupt+0x2e>
    122a:	11 c0       	rjmp	.+34     	; 0x124e <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    122c:	e2 2f       	mov	r30, r18
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	ee 0f       	add	r30, r30
    1232:	ff 1f       	adc	r31, r31
    1234:	ec 5c       	subi	r30, 0xCC	; 204
    1236:	fe 4f       	sbci	r31, 0xFE	; 254
    1238:	11 83       	std	Z+1, r17	; 0x01
    123a:	00 83       	st	Z, r16
		#endif
			break;
    123c:	08 c0       	rjmp	.+16     	; 0x124e <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    123e:	e2 2f       	mov	r30, r18
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	ee 0f       	add	r30, r30
    1244:	ff 1f       	adc	r31, r31
    1246:	e2 5c       	subi	r30, 0xC2	; 194
    1248:	fe 4f       	sbci	r31, 0xFE	; 254
    124a:	11 83       	std	Z+1, r17	; 0x01
    124c:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	08 95       	ret

00001262 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    1262:	4f 92       	push	r4
    1264:	5f 92       	push	r5
    1266:	6f 92       	push	r6
    1268:	7f 92       	push	r7
    126a:	8f 92       	push	r8
    126c:	9f 92       	push	r9
    126e:	af 92       	push	r10
    1270:	bf 92       	push	r11
    1272:	cf 92       	push	r12
    1274:	df 92       	push	r13
    1276:	ef 92       	push	r14
    1278:	ff 92       	push	r15
    127a:	cf 93       	push	r28
    127c:	df 93       	push	r29
    127e:	4b 01       	movw	r8, r22
    1280:	5c 01       	movw	r10, r24
    1282:	ea 01       	movw	r28, r20
    1284:	0f 2e       	mov	r0, r31
    1286:	f0 e2       	ldi	r31, 0x20	; 32
    1288:	4f 2e       	mov	r4, r31
    128a:	f1 ea       	ldi	r31, 0xA1	; 161
    128c:	5f 2e       	mov	r5, r31
    128e:	f7 e0       	ldi	r31, 0x07	; 7
    1290:	6f 2e       	mov	r6, r31
    1292:	71 2c       	mov	r7, r1
    1294:	f0 2d       	mov	r31, r0
    1296:	c3 01       	movw	r24, r6
    1298:	b2 01       	movw	r22, r4
    129a:	a5 01       	movw	r20, r10
    129c:	94 01       	movw	r18, r8
    129e:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
    12a2:	69 01       	movw	r12, r18
    12a4:	7a 01       	movw	r14, r20
    12a6:	c3 01       	movw	r24, r6
    12a8:	b2 01       	movw	r22, r4
    12aa:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
    12ae:	ca 01       	movw	r24, r20
    12b0:	b9 01       	movw	r22, r18
    12b2:	a5 01       	movw	r20, r10
    12b4:	94 01       	movw	r18, r8
    12b6:	db d9       	rcall	.-3146   	; 0x66e <calculateError>
    12b8:	44 97       	sbiw	r24, 0x14	; 20
    12ba:	30 f4       	brcc	.+12     	; 0x12c8 <calculateUBRR+0x66>
    12bc:	d7 01       	movw	r26, r14
    12be:	c6 01       	movw	r24, r12
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	a1 09       	sbc	r26, r1
    12c4:	b1 09       	sbc	r27, r1
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <calculateUBRR+0x84>
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	88 83       	st	Y, r24
    12cc:	60 e4       	ldi	r22, 0x40	; 64
    12ce:	72 e4       	ldi	r23, 0x42	; 66
    12d0:	8f e0       	ldi	r24, 0x0F	; 15
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a5 01       	movw	r20, r10
    12d6:	94 01       	movw	r18, r8
    12d8:	0e 94 85 12 	call	0x250a	; 0x250a <__udivmodsi4>
    12dc:	da 01       	movw	r26, r20
    12de:	c9 01       	movw	r24, r18
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	a1 09       	sbc	r26, r1
    12e4:	b1 09       	sbc	r27, r1
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	ff 90       	pop	r15
    12ec:	ef 90       	pop	r14
    12ee:	df 90       	pop	r13
    12f0:	cf 90       	pop	r12
    12f2:	bf 90       	pop	r11
    12f4:	af 90       	pop	r10
    12f6:	9f 90       	pop	r9
    12f8:	8f 90       	pop	r8
    12fa:	7f 90       	pop	r7
    12fc:	6f 90       	pop	r6
    12fe:	5f 90       	pop	r5
    1300:	4f 90       	pop	r4
    1302:	08 95       	ret

00001304 <uart_init>:
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	cd b7       	in	r28, 0x3d	; 61
    130e:	de b7       	in	r29, 0x3e	; 62
    1310:	2b 97       	sbiw	r28, 0x0b	; 11
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    131c:	0a 83       	std	Y+2, r16	; 0x02
    131e:	1b 83       	std	Y+3, r17	; 0x03
    1320:	2c 83       	std	Y+4, r18	; 0x04
    1322:	3d 83       	std	Y+5, r19	; 0x05
    1324:	4e 83       	std	Y+6, r20	; 0x06
    1326:	5f 83       	std	Y+7, r21	; 0x07
    1328:	68 87       	std	Y+8, r22	; 0x08
    132a:	79 87       	std	Y+9, r23	; 0x09
    132c:	8a 87       	std	Y+10, r24	; 0x0a
    132e:	9b 87       	std	Y+11, r25	; 0x0b
    1330:	19 82       	std	Y+1, r1	; 0x01
    1332:	01 11       	cpse	r16, r1
    1334:	7c c0       	rjmp	.+248    	; 0x142e <uart_init+0x12a>
    1336:	19 2f       	mov	r17, r25
    1338:	e2 ec       	ldi	r30, 0xC2	; 194
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 73       	andi	r24, 0x3F	; 63
    1340:	80 83       	st	Z, r24
    1342:	6b 81       	ldd	r22, Y+3	; 0x03
    1344:	7c 81       	ldd	r23, Y+4	; 0x04
    1346:	8d 81       	ldd	r24, Y+5	; 0x05
    1348:	9e 81       	ldd	r25, Y+6	; 0x06
    134a:	ae 01       	movw	r20, r28
    134c:	4f 5f       	subi	r20, 0xFF	; 255
    134e:	5f 4f       	sbci	r21, 0xFF	; 255
    1350:	88 df       	rcall	.-240    	; 0x1262 <calculateUBRR>
    1352:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1356:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    135a:	49 81       	ldd	r20, Y+1	; 0x01
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	80 ec       	ldi	r24, 0xC0	; 192
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	4c d9       	rcall	.-3432   	; 0x5fc <updateBit>
    1364:	89 85       	ldd	r24, Y+9	; 0x09
    1366:	82 30       	cpi	r24, 0x02	; 2
    1368:	31 f1       	breq	.+76     	; 0x13b6 <uart_init+0xb2>
    136a:	28 f4       	brcc	.+10     	; 0x1376 <uart_init+0x72>
    136c:	88 23       	and	r24, r24
    136e:	49 f0       	breq	.+18     	; 0x1382 <uart_init+0x7e>
    1370:	81 30       	cpi	r24, 0x01	; 1
    1372:	a1 f0       	breq	.+40     	; 0x139c <uart_init+0x98>
    1374:	46 c0       	rjmp	.+140    	; 0x1402 <uart_init+0xfe>
    1376:	83 30       	cpi	r24, 0x03	; 3
    1378:	59 f1       	breq	.+86     	; 0x13d0 <uart_init+0xcc>
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	09 f4       	brne	.+2      	; 0x1380 <uart_init+0x7c>
    137e:	35 c0       	rjmp	.+106    	; 0x13ea <uart_init+0xe6>
    1380:	40 c0       	rjmp	.+128    	; 0x1402 <uart_init+0xfe>
    1382:	61 e0       	ldi	r22, 0x01	; 1
    1384:	82 ec       	ldi	r24, 0xC2	; 194
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	5d d9       	rcall	.-3398   	; 0x644 <clearBit>
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	82 ec       	ldi	r24, 0xC2	; 194
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	59 d9       	rcall	.-3406   	; 0x644 <clearBit>
    1392:	62 e0       	ldi	r22, 0x02	; 2
    1394:	81 ec       	ldi	r24, 0xC1	; 193
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	55 d9       	rcall	.-3414   	; 0x644 <clearBit>
    139a:	33 c0       	rjmp	.+102    	; 0x1402 <uart_init+0xfe>
    139c:	61 e0       	ldi	r22, 0x01	; 1
    139e:	82 ec       	ldi	r24, 0xC2	; 194
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	44 d9       	rcall	.-3448   	; 0x62c <setBit>
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	82 ec       	ldi	r24, 0xC2	; 194
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	4c d9       	rcall	.-3432   	; 0x644 <clearBit>
    13ac:	62 e0       	ldi	r22, 0x02	; 2
    13ae:	81 ec       	ldi	r24, 0xC1	; 193
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	48 d9       	rcall	.-3440   	; 0x644 <clearBit>
    13b4:	26 c0       	rjmp	.+76     	; 0x1402 <uart_init+0xfe>
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	82 ec       	ldi	r24, 0xC2	; 194
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	43 d9       	rcall	.-3450   	; 0x644 <clearBit>
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	82 ec       	ldi	r24, 0xC2	; 194
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	33 d9       	rcall	.-3482   	; 0x62c <setBit>
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	81 ec       	ldi	r24, 0xC1	; 193
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	3b d9       	rcall	.-3466   	; 0x644 <clearBit>
    13ce:	19 c0       	rjmp	.+50     	; 0x1402 <uart_init+0xfe>
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	82 ec       	ldi	r24, 0xC2	; 194
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	2a d9       	rcall	.-3500   	; 0x62c <setBit>
    13d8:	62 e0       	ldi	r22, 0x02	; 2
    13da:	82 ec       	ldi	r24, 0xC2	; 194
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	26 d9       	rcall	.-3508   	; 0x62c <setBit>
    13e0:	62 e0       	ldi	r22, 0x02	; 2
    13e2:	81 ec       	ldi	r24, 0xC1	; 193
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	2e d9       	rcall	.-3492   	; 0x644 <clearBit>
    13e8:	0c c0       	rjmp	.+24     	; 0x1402 <uart_init+0xfe>
    13ea:	61 e0       	ldi	r22, 0x01	; 1
    13ec:	82 ec       	ldi	r24, 0xC2	; 194
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	1d d9       	rcall	.-3526   	; 0x62c <setBit>
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	82 ec       	ldi	r24, 0xC2	; 194
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	19 d9       	rcall	.-3534   	; 0x62c <setBit>
    13fa:	62 e0       	ldi	r22, 0x02	; 2
    13fc:	81 ec       	ldi	r24, 0xC1	; 193
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	15 d9       	rcall	.-3542   	; 0x62c <setBit>
    1402:	4a 85       	ldd	r20, Y+10	; 0x0a
    1404:	63 e0       	ldi	r22, 0x03	; 3
    1406:	82 ec       	ldi	r24, 0xC2	; 194
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	f8 d8       	rcall	.-3600   	; 0x5fc <updateBit>
    140c:	12 30       	cpi	r17, 0x02	; 2
    140e:	31 f4       	brne	.+12     	; 0x141c <uart_init+0x118>
    1410:	e2 ec       	ldi	r30, 0xC2	; 194
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7c       	andi	r24, 0xCF	; 207
    1418:	80 83       	st	Z, r24
    141a:	09 c0       	rjmp	.+18     	; 0x142e <uart_init+0x12a>
    141c:	65 e0       	ldi	r22, 0x05	; 5
    141e:	82 ec       	ldi	r24, 0xC2	; 194
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	04 d9       	rcall	.-3576   	; 0x62c <setBit>
    1424:	41 2f       	mov	r20, r17
    1426:	64 e0       	ldi	r22, 0x04	; 4
    1428:	82 ec       	ldi	r24, 0xC2	; 194
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	e7 d8       	rcall	.-3634   	; 0x5fc <updateBit>
    142e:	2b 96       	adiw	r28, 0x0b	; 11
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	de bf       	out	0x3e, r29	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	cd bf       	out	0x3d, r28	; 61
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	08 95       	ret

00001444 <uart_start>:
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	2a 97       	sbiw	r28, 0x0a	; 10
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	6f 83       	std	Y+7, r22	; 0x07
    145e:	01 11       	cpse	r16, r1
    1460:	0a c0       	rjmp	.+20     	; 0x1476 <uart_start+0x32>
    1462:	45 2f       	mov	r20, r21
    1464:	64 e0       	ldi	r22, 0x04	; 4
    1466:	81 ec       	ldi	r24, 0xC1	; 193
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	c8 d8       	rcall	.-3696   	; 0x5fc <updateBit>
    146c:	4f 81       	ldd	r20, Y+7	; 0x07
    146e:	63 e0       	ldi	r22, 0x03	; 3
    1470:	81 ec       	ldi	r24, 0xC1	; 193
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	c3 d8       	rcall	.-3706   	; 0x5fc <updateBit>
    1476:	2a 96       	adiw	r28, 0x0a	; 10
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	1f 91       	pop	r17
    1488:	0f 91       	pop	r16
    148a:	08 95       	ret

0000148c <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    148c:	ef 92       	push	r14
    148e:	ff 92       	push	r15
    1490:	0f 93       	push	r16
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	2a 97       	sbiw	r28, 0x0a	; 10
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	09 83       	std	Y+1, r16	; 0x01
    14aa:	1a 83       	std	Y+2, r17	; 0x02
    14ac:	2b 83       	std	Y+3, r18	; 0x03
    14ae:	3c 83       	std	Y+4, r19	; 0x04
    14b0:	4d 83       	std	Y+5, r20	; 0x05
    14b2:	5e 83       	std	Y+6, r21	; 0x06
    14b4:	6f 83       	std	Y+7, r22	; 0x07
    14b6:	78 87       	std	Y+8, r23	; 0x08
    14b8:	89 87       	std	Y+9, r24	; 0x09
    14ba:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    14bc:	01 11       	cpse	r16, r1
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    14c0:	00 ec       	ldi	r16, 0xC0	; 192
    14c2:	10 e0       	ldi	r17, 0x00	; 0
    14c4:	f8 01       	movw	r30, r16
    14c6:	80 81       	ld	r24, Z
    14c8:	65 e0       	ldi	r22, 0x05	; 5
    14ca:	c9 d8       	rcall	.-3694   	; 0x65e <checkBit>
    14cc:	88 23       	and	r24, r24
    14ce:	d1 f3       	breq	.-12     	; 0x14c4 <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
    14d0:	88 85       	ldd	r24, Y+8	; 0x08
    14d2:	84 30       	cpi	r24, 0x04	; 4
    14d4:	31 f4       	brne	.+12     	; 0x14e2 <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
    14d6:	4f 2d       	mov	r20, r15
    14d8:	41 70       	andi	r20, 0x01	; 1
    14da:	60 e0       	ldi	r22, 0x00	; 0
    14dc:	81 ec       	ldi	r24, 0xC1	; 193
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	8d d8       	rcall	.-3814   	; 0x5fc <updateBit>
			UDR0 = (u8) u16_data;
    14e2:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    14e6:	2a 96       	adiw	r28, 0x0a	; 10
    14e8:	0f b6       	in	r0, 0x3f	; 63
    14ea:	f8 94       	cli
    14ec:	de bf       	out	0x3e, r29	; 62
    14ee:	0f be       	out	0x3f, r0	; 63
    14f0:	cd bf       	out	0x3d, r28	; 61
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	08 95       	ret

00001500 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    1500:	1f 92       	push	r1
    1502:	0f 92       	push	r0
    1504:	0f b6       	in	r0, 0x3f	; 63
    1506:	0f 92       	push	r0
    1508:	11 24       	eor	r1, r1
    150a:	0b b6       	in	r0, 0x3b	; 59
    150c:	0f 92       	push	r0
    150e:	2f 93       	push	r18
    1510:	3f 93       	push	r19
    1512:	4f 93       	push	r20
    1514:	5f 93       	push	r21
    1516:	6f 93       	push	r22
    1518:	7f 93       	push	r23
    151a:	8f 93       	push	r24
    151c:	9f 93       	push	r25
    151e:	af 93       	push	r26
    1520:	bf 93       	push	r27
    1522:	ef 93       	push	r30
    1524:	ff 93       	push	r31
	p_wdgCallback();
    1526:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <p_wdgCallback>
    152a:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <p_wdgCallback+0x1>
    152e:	09 95       	icall
}
    1530:	ff 91       	pop	r31
    1532:	ef 91       	pop	r30
    1534:	bf 91       	pop	r27
    1536:	af 91       	pop	r26
    1538:	9f 91       	pop	r25
    153a:	8f 91       	pop	r24
    153c:	7f 91       	pop	r23
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0b be       	out	0x3b, r0	; 59
    154c:	0f 90       	pop	r0
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	0f 90       	pop	r0
    1552:	1f 90       	pop	r1
    1554:	18 95       	reti

00001556 <debug_init>:
	byteToASCIIHex(u8_ASCIIData + 4, u32_data >> 8);
	byteToASCIIHex(u8_ASCIIData + 6, u32_data);
	for (u8 i = 0; i < 8; i++)
		uart_transmit(s_debugUart, u8_ASCIIData[i]);
	uart_transmit(s_debugUart, '\n');
}
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	e6 e4       	ldi	r30, 0x46	; 70
    155c:	f1 e0       	ldi	r31, 0x01	; 1
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	18 2f       	mov	r17, r24
    1562:	81 83       	std	Z+1, r24	; 0x01
    1564:	81 ee       	ldi	r24, 0xE1	; 225
    1566:	82 83       	std	Z+2, r24	; 0x02
    1568:	13 82       	std	Z+3, r1	; 0x03
    156a:	14 82       	std	Z+4, r1	; 0x04
    156c:	83 e0       	ldi	r24, 0x03	; 3
    156e:	78 2f       	mov	r23, r24
    1570:	87 83       	std	Z+7, r24	; 0x07
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	91 87       	std	Z+9, r25	; 0x09
    1576:	10 82       	st	Z, r1
    1578:	10 86       	std	Z+8, r1	; 0x08
    157a:	15 82       	std	Z+5, r1	; 0x05
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	68 2f       	mov	r22, r24
    1580:	86 83       	std	Z+6, r24	; 0x06
    1582:	00 e0       	ldi	r16, 0x00	; 0
    1584:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    1588:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    158c:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    1590:	50 e0       	ldi	r21, 0x00	; 0
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	b7 de       	rcall	.-658    	; 0x1304 <uart_init>
    1596:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
    159a:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
    159e:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    15a2:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    15a6:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    15aa:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
    15ae:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
    15b2:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
    15b6:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
    15ba:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
    15be:	42 df       	rcall	.-380    	; 0x1444 <uart_start>
    15c0:	1f 91       	pop	r17
    15c2:	0f 91       	pop	r16
    15c4:	08 95       	ret

000015c6 <debug_writeDecimal>:

void debug_writeDecimal(u16 u16_data)
{
    15c6:	cf 92       	push	r12
    15c8:	df 92       	push	r13
    15ca:	ef 92       	push	r14
    15cc:	ff 92       	push	r15
    15ce:	0f 93       	push	r16
    15d0:	1f 93       	push	r17
    15d2:	cf 93       	push	r28
    15d4:	df 93       	push	r29
    15d6:	ec 01       	movw	r28, r24
	uart_transmit(s_debugUart, u16_data / 10000 % 10 + '0');
    15d8:	9c 01       	movw	r18, r24
    15da:	32 95       	swap	r19
    15dc:	22 95       	swap	r18
    15de:	2f 70       	andi	r18, 0x0F	; 15
    15e0:	23 27       	eor	r18, r19
    15e2:	3f 70       	andi	r19, 0x0F	; 15
    15e4:	23 27       	eor	r18, r19
    15e6:	a7 e4       	ldi	r26, 0x47	; 71
    15e8:	b3 e0       	ldi	r27, 0x03	; 3
    15ea:	ba d7       	rcall	.+3956   	; 0x2560 <__umulhisi3>
    15ec:	7c 01       	movw	r14, r24
    15ee:	f6 94       	lsr	r15
    15f0:	e7 94       	ror	r14
    15f2:	f6 94       	lsr	r15
    15f4:	e7 94       	ror	r14
    15f6:	f6 94       	lsr	r15
    15f8:	e7 94       	ror	r14
    15fa:	97 01       	movw	r18, r14
    15fc:	ad ec       	ldi	r26, 0xCD	; 205
    15fe:	bc ec       	ldi	r27, 0xCC	; 204
    1600:	af d7       	rcall	.+3934   	; 0x2560 <__umulhisi3>
    1602:	96 95       	lsr	r25
    1604:	87 95       	ror	r24
    1606:	96 95       	lsr	r25
    1608:	87 95       	ror	r24
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	9c 01       	movw	r18, r24
    1610:	22 0f       	add	r18, r18
    1612:	33 1f       	adc	r19, r19
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	82 0f       	add	r24, r18
    1622:	93 1f       	adc	r25, r19
    1624:	e8 1a       	sub	r14, r24
    1626:	f9 0a       	sbc	r15, r25
    1628:	80 e3       	ldi	r24, 0x30	; 48
    162a:	e8 0e       	add	r14, r24
    162c:	f1 1c       	adc	r15, r1
    162e:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
    1632:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
    1636:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    163a:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    163e:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    1642:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
    1646:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
    164a:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
    164e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
    1652:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
    1656:	1a df       	rcall	.-460    	; 0x148c <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 1000 % 10 + '0');
    1658:	9e 01       	movw	r18, r28
    165a:	36 95       	lsr	r19
    165c:	27 95       	ror	r18
    165e:	36 95       	lsr	r19
    1660:	27 95       	ror	r18
    1662:	36 95       	lsr	r19
    1664:	27 95       	ror	r18
    1666:	a5 ec       	ldi	r26, 0xC5	; 197
    1668:	b0 e2       	ldi	r27, 0x20	; 32
    166a:	7a d7       	rcall	.+3828   	; 0x2560 <__umulhisi3>
    166c:	7c 01       	movw	r14, r24
    166e:	f6 94       	lsr	r15
    1670:	e7 94       	ror	r14
    1672:	f6 94       	lsr	r15
    1674:	e7 94       	ror	r14
    1676:	f6 94       	lsr	r15
    1678:	e7 94       	ror	r14
    167a:	f6 94       	lsr	r15
    167c:	e7 94       	ror	r14
    167e:	97 01       	movw	r18, r14
    1680:	ad ec       	ldi	r26, 0xCD	; 205
    1682:	bc ec       	ldi	r27, 0xCC	; 204
    1684:	6d d7       	rcall	.+3802   	; 0x2560 <__umulhisi3>
    1686:	96 95       	lsr	r25
    1688:	87 95       	ror	r24
    168a:	96 95       	lsr	r25
    168c:	87 95       	ror	r24
    168e:	96 95       	lsr	r25
    1690:	87 95       	ror	r24
    1692:	9c 01       	movw	r18, r24
    1694:	22 0f       	add	r18, r18
    1696:	33 1f       	adc	r19, r19
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	82 0f       	add	r24, r18
    16a6:	93 1f       	adc	r25, r19
    16a8:	e8 1a       	sub	r14, r24
    16aa:	f9 0a       	sbc	r15, r25
    16ac:	80 e3       	ldi	r24, 0x30	; 48
    16ae:	e8 0e       	add	r14, r24
    16b0:	f1 1c       	adc	r15, r1
    16b2:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
    16b6:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
    16ba:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    16be:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    16c2:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    16c6:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
    16ca:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
    16ce:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
    16d2:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
    16d6:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
    16da:	d8 de       	rcall	.-592    	; 0x148c <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 100 % 10 + '0');
    16dc:	9e 01       	movw	r18, r28
    16de:	36 95       	lsr	r19
    16e0:	27 95       	ror	r18
    16e2:	36 95       	lsr	r19
    16e4:	27 95       	ror	r18
    16e6:	ab e7       	ldi	r26, 0x7B	; 123
    16e8:	b4 e1       	ldi	r27, 0x14	; 20
    16ea:	3a d7       	rcall	.+3700   	; 0x2560 <__umulhisi3>
    16ec:	7c 01       	movw	r14, r24
    16ee:	f6 94       	lsr	r15
    16f0:	e7 94       	ror	r14
    16f2:	97 01       	movw	r18, r14
    16f4:	ad ec       	ldi	r26, 0xCD	; 205
    16f6:	bc ec       	ldi	r27, 0xCC	; 204
    16f8:	33 d7       	rcall	.+3686   	; 0x2560 <__umulhisi3>
    16fa:	96 95       	lsr	r25
    16fc:	87 95       	ror	r24
    16fe:	96 95       	lsr	r25
    1700:	87 95       	ror	r24
    1702:	96 95       	lsr	r25
    1704:	87 95       	ror	r24
    1706:	9c 01       	movw	r18, r24
    1708:	22 0f       	add	r18, r18
    170a:	33 1f       	adc	r19, r19
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	88 0f       	add	r24, r24
    1712:	99 1f       	adc	r25, r25
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	82 0f       	add	r24, r18
    171a:	93 1f       	adc	r25, r19
    171c:	e8 1a       	sub	r14, r24
    171e:	f9 0a       	sbc	r15, r25
    1720:	80 e3       	ldi	r24, 0x30	; 48
    1722:	e8 0e       	add	r14, r24
    1724:	f1 1c       	adc	r15, r1
    1726:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
    172a:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
    172e:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    1732:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    1736:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    173a:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
    173e:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
    1742:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
    1746:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
    174a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
    174e:	9e de       	rcall	.-708    	; 0x148c <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 10 % 10 + '0');
    1750:	9e 01       	movw	r18, r28
    1752:	ad ec       	ldi	r26, 0xCD	; 205
    1754:	bc ec       	ldi	r27, 0xCC	; 204
    1756:	04 d7       	rcall	.+3592   	; 0x2560 <__umulhisi3>
    1758:	6c 01       	movw	r12, r24
    175a:	d6 94       	lsr	r13
    175c:	c7 94       	ror	r12
    175e:	d6 94       	lsr	r13
    1760:	c7 94       	ror	r12
    1762:	d6 94       	lsr	r13
    1764:	c7 94       	ror	r12
    1766:	96 01       	movw	r18, r12
    1768:	fb d6       	rcall	.+3574   	; 0x2560 <__umulhisi3>
    176a:	96 95       	lsr	r25
    176c:	87 95       	ror	r24
    176e:	96 95       	lsr	r25
    1770:	87 95       	ror	r24
    1772:	96 95       	lsr	r25
    1774:	87 95       	ror	r24
    1776:	9c 01       	movw	r18, r24
    1778:	22 0f       	add	r18, r18
    177a:	33 1f       	adc	r19, r19
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	88 0f       	add	r24, r24
    1782:	99 1f       	adc	r25, r25
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	82 0f       	add	r24, r18
    178a:	93 1f       	adc	r25, r19
    178c:	76 01       	movw	r14, r12
    178e:	e8 1a       	sub	r14, r24
    1790:	f9 0a       	sbc	r15, r25
    1792:	80 e3       	ldi	r24, 0x30	; 48
    1794:	e8 0e       	add	r14, r24
    1796:	f1 1c       	adc	r15, r1
    1798:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
    179c:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
    17a0:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    17a4:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    17a8:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    17ac:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
    17b0:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
    17b4:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
    17b8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
    17bc:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
    17c0:	65 de       	rcall	.-822    	; 0x148c <uart_transmit>
    17c2:	c6 01       	movw	r24, r12
	uart_transmit(s_debugUart, u16_data % 10 + '0');
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	cc 0c       	add	r12, r12
    17ca:	dd 1c       	adc	r13, r13
    17cc:	cc 0c       	add	r12, r12
    17ce:	dd 1c       	adc	r13, r13
    17d0:	cc 0c       	add	r12, r12
    17d2:	dd 1c       	adc	r13, r13
    17d4:	c8 0e       	add	r12, r24
    17d6:	d9 1e       	adc	r13, r25
    17d8:	7e 01       	movw	r14, r28
    17da:	ec 18       	sub	r14, r12
    17dc:	fd 08       	sbc	r15, r13
    17de:	80 e3       	ldi	r24, 0x30	; 48
    17e0:	e8 0e       	add	r14, r24
    17e2:	f1 1c       	adc	r15, r1
    17e4:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
    17e8:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
    17ec:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    17f0:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    17f4:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    17f8:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
    17fc:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
    1800:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
    1804:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
    1808:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
    180c:	3f de       	rcall	.-898    	; 0x148c <uart_transmit>
    180e:	0f 2e       	mov	r0, r31
	uart_transmit(s_debugUart, '\n');
    1810:	fa e0       	ldi	r31, 0x0A	; 10
    1812:	ef 2e       	mov	r14, r31
    1814:	f1 2c       	mov	r15, r1
    1816:	f0 2d       	mov	r31, r0
    1818:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
    181c:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
    1820:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
    1824:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
    1828:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
    182c:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
    1830:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
    1834:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
    1838:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
    183c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
    1840:	25 de       	rcall	.-950    	; 0x148c <uart_transmit>
    1842:	df 91       	pop	r29
}
    1844:	cf 91       	pop	r28
    1846:	1f 91       	pop	r17
    1848:	0f 91       	pop	r16
    184a:	ff 90       	pop	r15
    184c:	ef 90       	pop	r14
    184e:	df 90       	pop	r13
    1850:	cf 90       	pop	r12
    1852:	08 95       	ret

00001854 <encodeTimeout>:
    1854:	0f 93       	push	r16
	g_ioTimeout = u16_timeout;
}

u16 vl53l0x_getTimeout(void){
	return g_ioTimeout;
}
    1856:	1f 93       	push	r17
    1858:	00 97       	sbiw	r24, 0x00	; 0
    185a:	19 f1       	breq	.+70     	; 0x18a2 <encodeTimeout+0x4e>
    185c:	ac 01       	movw	r20, r24
    185e:	41 50       	subi	r20, 0x01	; 1
    1860:	51 09       	sbc	r21, r1
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	70 e0       	ldi	r23, 0x00	; 0
    1866:	db 01       	movw	r26, r22
    1868:	ca 01       	movw	r24, r20
    186a:	88 27       	eor	r24, r24
    186c:	89 2b       	or	r24, r25
    186e:	8a 2b       	or	r24, r26
    1870:	8b 2b       	or	r24, r27
    1872:	79 f0       	breq	.+30     	; 0x1892 <encodeTimeout+0x3e>
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	76 95       	lsr	r23
    187a:	67 95       	ror	r22
    187c:	57 95       	ror	r21
    187e:	47 95       	ror	r20
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	8a 01       	movw	r16, r20
    1884:	9b 01       	movw	r18, r22
    1886:	00 27       	eor	r16, r16
    1888:	01 2b       	or	r16, r17
    188a:	02 2b       	or	r16, r18
    188c:	03 2b       	or	r16, r19
    188e:	a1 f7       	brne	.-24     	; 0x1878 <encodeTimeout+0x24>
    1890:	02 c0       	rjmp	.+4      	; 0x1896 <encodeTimeout+0x42>
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	98 2f       	mov	r25, r24
    1898:	88 27       	eor	r24, r24
    189a:	55 27       	eor	r21, r21
    189c:	84 2b       	or	r24, r20
    189e:	95 2b       	or	r25, r21
    18a0:	02 c0       	rjmp	.+4      	; 0x18a6 <encodeTimeout+0x52>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	1f 91       	pop	r17
    18a8:	0f 91       	pop	r16
    18aa:	08 95       	ret

000018ac <startTimeout>:
    18ac:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    18b0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
    18b4:	a0 91 04 01 	lds	r26, 0x0104	; 0x800104 <__data_end+0x2>
    18b8:	b0 91 05 01 	lds	r27, 0x0105	; 0x800105 <__data_end+0x3>
    18bc:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <g_timeoutStartMs+0x1>
    18c0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <g_timeoutStartMs>
    18c4:	08 95       	ret

000018c6 <checkTimeoutExpired>:
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <g_ioTimeout>
    18ce:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <g_ioTimeout+0x1>
    18d2:	41 15       	cp	r20, r1
    18d4:	51 05       	cpc	r21, r1
    18d6:	d1 f0       	breq	.+52     	; 0x190c <checkTimeoutExpired+0x46>
    18d8:	00 91 02 01 	lds	r16, 0x0102	; 0x800102 <__data_end>
    18dc:	10 91 03 01 	lds	r17, 0x0103	; 0x800103 <__data_end+0x1>
    18e0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__data_end+0x2>
    18e4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__data_end+0x3>
    18e8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <g_timeoutStartMs>
    18ec:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <g_timeoutStartMs+0x1>
    18f0:	08 1b       	sub	r16, r24
    18f2:	19 0b       	sbc	r17, r25
    18f4:	21 09       	sbc	r18, r1
    18f6:	31 09       	sbc	r19, r1
    18f8:	60 e0       	ldi	r22, 0x00	; 0
    18fa:	70 e0       	ldi	r23, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	40 17       	cp	r20, r16
    1900:	51 07       	cpc	r21, r17
    1902:	62 07       	cpc	r22, r18
    1904:	73 07       	cpc	r23, r19
    1906:	18 f0       	brcs	.+6      	; 0x190e <checkTimeoutExpired+0x48>
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	01 c0       	rjmp	.+2      	; 0x190e <checkTimeoutExpired+0x48>
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	1f 91       	pop	r17
    1910:	0f 91       	pop	r16
    1912:	08 95       	ret

00001914 <writeReg>:
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	d8 2f       	mov	r29, r24
    191a:	c6 2f       	mov	r28, r22
    191c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1920:	88 0f       	add	r24, r24
    1922:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_sendStart>
    1926:	8d 2f       	mov	r24, r29
    1928:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    192c:	8c 2f       	mov	r24, r28
    192e:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1932:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_sendStop>
    1936:	df 91       	pop	r29
    1938:	cf 91       	pop	r28
    193a:	08 95       	ret

0000193c <writeReg16Bit>:
    193c:	1f 93       	push	r17
    193e:	cf 93       	push	r28
    1940:	df 93       	push	r29
    1942:	18 2f       	mov	r17, r24
    1944:	c6 2f       	mov	r28, r22
    1946:	d7 2f       	mov	r29, r23
    1948:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    194c:	88 0f       	add	r24, r24
    194e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_sendStart>
    1952:	81 2f       	mov	r24, r17
    1954:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1958:	8d 2f       	mov	r24, r29
    195a:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    195e:	8c 2f       	mov	r24, r28
    1960:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1964:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_sendStop>
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	08 95       	ret

00001970 <writeReg32Bit>:
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	f8 2e       	mov	r15, r24
    197c:	c4 2f       	mov	r28, r20
    197e:	d5 2f       	mov	r29, r21
    1980:	16 2f       	mov	r17, r22
    1982:	07 2f       	mov	r16, r23
    1984:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1988:	88 0f       	add	r24, r24
    198a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_sendStart>
    198e:	8f 2d       	mov	r24, r15
    1990:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1994:	80 2f       	mov	r24, r16
    1996:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    199a:	81 2f       	mov	r24, r17
    199c:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    19a0:	8d 2f       	mov	r24, r29
    19a2:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    19a6:	8c 2f       	mov	r24, r28
    19a8:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    19ac:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_sendStop>
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	0f 91       	pop	r16
    19b8:	ff 90       	pop	r15
    19ba:	08 95       	ret

000019bc <readReg>:
    19bc:	cf 93       	push	r28
    19be:	c8 2f       	mov	r28, r24
    19c0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    19c4:	88 0f       	add	r24, r24
    19c6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_sendStart>
    19ca:	8c 2f       	mov	r24, r28
    19cc:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    19d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    19d4:	88 0f       	add	r24, r24
    19d6:	81 60       	ori	r24, 0x01	; 1
    19d8:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_sendRepStart>
    19dc:	0e 94 da 02 	call	0x5b4	; 0x5b4 <i2c_readNak>
    19e0:	c8 2f       	mov	r28, r24
    19e2:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_sendStop>
    19e6:	8c 2f       	mov	r24, r28
    19e8:	cf 91       	pop	r28
    19ea:	08 95       	ret

000019ec <readReg16Bit>:
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	c8 2f       	mov	r28, r24
    19f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    19f6:	88 0f       	add	r24, r24
    19f8:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_sendStart>
    19fc:	8c 2f       	mov	r24, r28
    19fe:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1a02:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a06:	88 0f       	add	r24, r24
    1a08:	81 60       	ori	r24, 0x01	; 1
    1a0a:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_sendRepStart>
    1a0e:	0e 94 b6 02 	call	0x56c	; 0x56c <i2c_readAck>
    1a12:	c8 2f       	mov	r28, r24
    1a14:	d0 e0       	ldi	r29, 0x00	; 0
    1a16:	dc 2f       	mov	r29, r28
    1a18:	cc 27       	eor	r28, r28
    1a1a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <i2c_readNak>
    1a1e:	c8 2b       	or	r28, r24
    1a20:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_sendStop>
    1a24:	ce 01       	movw	r24, r28
    1a26:	df 91       	pop	r29
    1a28:	cf 91       	pop	r28
    1a2a:	08 95       	ret

00001a2c <writeMulti>:
    1a2c:	ef 92       	push	r14
    1a2e:	ff 92       	push	r15
    1a30:	0f 93       	push	r16
    1a32:	1f 93       	push	r17
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	d8 2f       	mov	r29, r24
    1a3a:	7b 01       	movw	r14, r22
    1a3c:	c4 2f       	mov	r28, r20
    1a3e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a42:	88 0f       	add	r24, r24
    1a44:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_sendStart>
    1a48:	8d 2f       	mov	r24, r29
    1a4a:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1a4e:	8f ef       	ldi	r24, 0xFF	; 255
    1a50:	8c 0f       	add	r24, r28
    1a52:	cc 23       	and	r28, r28
    1a54:	69 f0       	breq	.+26     	; 0x1a70 <writeMulti+0x44>
    1a56:	e7 01       	movw	r28, r14
    1a58:	08 2f       	mov	r16, r24
    1a5a:	10 e0       	ldi	r17, 0x00	; 0
    1a5c:	0f 5f       	subi	r16, 0xFF	; 255
    1a5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a60:	0e 0d       	add	r16, r14
    1a62:	1f 1d       	adc	r17, r15
    1a64:	89 91       	ld	r24, Y+
    1a66:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1a6a:	c0 17       	cp	r28, r16
    1a6c:	d1 07       	cpc	r29, r17
    1a6e:	d1 f7       	brne	.-12     	; 0x1a64 <writeMulti+0x38>
    1a70:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_sendStop>
    1a74:	df 91       	pop	r29
    1a76:	cf 91       	pop	r28
    1a78:	1f 91       	pop	r17
    1a7a:	0f 91       	pop	r16
    1a7c:	ff 90       	pop	r15
    1a7e:	ef 90       	pop	r14
    1a80:	08 95       	ret

00001a82 <readMulti>:
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	18 2f       	mov	r17, r24
    1a8e:	f6 2e       	mov	r15, r22
    1a90:	d7 2f       	mov	r29, r23
    1a92:	c4 2f       	mov	r28, r20
    1a94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1a98:	88 0f       	add	r24, r24
    1a9a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <i2c_sendStart>
    1a9e:	81 2f       	mov	r24, r17
    1aa0:	0e 94 81 02 	call	0x502	; 0x502 <i2c_write>
    1aa4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	81 60       	ori	r24, 0x01	; 1
    1aac:	0e 94 5d 02 	call	0x4ba	; 0x4ba <i2c_sendRepStart>
    1ab0:	cc 23       	and	r28, r28
    1ab2:	91 f0       	breq	.+36     	; 0x1ad8 <readMulti+0x56>
    1ab4:	0f 2d       	mov	r16, r15
    1ab6:	1d 2f       	mov	r17, r29
    1ab8:	c2 30       	cpi	r28, 0x02	; 2
    1aba:	28 f0       	brcs	.+10     	; 0x1ac6 <readMulti+0x44>
    1abc:	0e 94 b6 02 	call	0x56c	; 0x56c <i2c_readAck>
    1ac0:	f8 01       	movw	r30, r16
    1ac2:	80 83       	st	Z, r24
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <readMulti+0x4c>
    1ac6:	0e 94 da 02 	call	0x5b4	; 0x5b4 <i2c_readNak>
    1aca:	f8 01       	movw	r30, r16
    1acc:	80 83       	st	Z, r24
    1ace:	c1 50       	subi	r28, 0x01	; 1
    1ad0:	0f 5f       	subi	r16, 0xFF	; 255
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	c1 11       	cpse	r28, r1
    1ad6:	f0 cf       	rjmp	.-32     	; 0x1ab8 <readMulti+0x36>
    1ad8:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_sendStop>
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	ff 90       	pop	r15
    1ae6:	08 95       	ret

00001ae8 <vl53l0x_getVcselPulsePeriod>:
    1ae8:	81 11       	cpse	r24, r1
    1aea:	05 c0       	rjmp	.+10     	; 0x1af6 <vl53l0x_getVcselPulsePeriod+0xe>
    1aec:	80 e5       	ldi	r24, 0x50	; 80
    1aee:	66 df       	rcall	.-308    	; 0x19bc <readReg>
    1af0:	8f 5f       	subi	r24, 0xFF	; 255
    1af2:	88 0f       	add	r24, r24
    1af4:	08 95       	ret
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	29 f4       	brne	.+10     	; 0x1b04 <vl53l0x_getVcselPulsePeriod+0x1c>
    1afa:	80 e7       	ldi	r24, 0x70	; 112
    1afc:	5f df       	rcall	.-322    	; 0x19bc <readReg>
    1afe:	8f 5f       	subi	r24, 0xFF	; 255
    1b00:	88 0f       	add	r24, r24
    1b02:	08 95       	ret
    1b04:	8f ef       	ldi	r24, 0xFF	; 255
    1b06:	08 95       	ret

00001b08 <vl53l0x_startContinuous>:
    1b08:	cf 92       	push	r12
    1b0a:	df 92       	push	r13
    1b0c:	ef 92       	push	r14
    1b0e:	ff 92       	push	r15
    1b10:	6b 01       	movw	r12, r22
    1b12:	7c 01       	movw	r14, r24
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	80 e8       	ldi	r24, 0x80	; 128
    1b18:	fd de       	rcall	.-518    	; 0x1914 <writeReg>
    1b1a:	61 e0       	ldi	r22, 0x01	; 1
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	fa de       	rcall	.-524    	; 0x1914 <writeReg>
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	f7 de       	rcall	.-530    	; 0x1914 <writeReg>
    1b26:	60 91 52 01 	lds	r22, 0x0152	; 0x800152 <g_stopVariable>
    1b2a:	81 e9       	ldi	r24, 0x91	; 145
    1b2c:	f3 de       	rcall	.-538    	; 0x1914 <writeReg>
    1b2e:	61 e0       	ldi	r22, 0x01	; 1
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	f0 de       	rcall	.-544    	; 0x1914 <writeReg>
    1b34:	60 e0       	ldi	r22, 0x00	; 0
    1b36:	8f ef       	ldi	r24, 0xFF	; 255
    1b38:	ed de       	rcall	.-550    	; 0x1914 <writeReg>
    1b3a:	60 e0       	ldi	r22, 0x00	; 0
    1b3c:	80 e8       	ldi	r24, 0x80	; 128
    1b3e:	ea de       	rcall	.-556    	; 0x1914 <writeReg>
    1b40:	c1 14       	cp	r12, r1
    1b42:	d1 04       	cpc	r13, r1
    1b44:	e1 04       	cpc	r14, r1
    1b46:	f1 04       	cpc	r15, r1
    1b48:	91 f0       	breq	.+36     	; 0x1b6e <vl53l0x_startContinuous+0x66>
    1b4a:	88 ef       	ldi	r24, 0xF8	; 248
    1b4c:	4f df       	rcall	.-354    	; 0x19ec <readReg16Bit>
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	31 f0       	breq	.+12     	; 0x1b5e <vl53l0x_startContinuous+0x56>
    1b52:	dc 01       	movw	r26, r24
    1b54:	a7 01       	movw	r20, r14
    1b56:	96 01       	movw	r18, r12
    1b58:	12 d5       	rcall	.+2596   	; 0x257e <__muluhisi3>
    1b5a:	6b 01       	movw	r12, r22
    1b5c:	7c 01       	movw	r14, r24
    1b5e:	b7 01       	movw	r22, r14
    1b60:	a6 01       	movw	r20, r12
    1b62:	84 e0       	ldi	r24, 0x04	; 4
    1b64:	05 df       	rcall	.-502    	; 0x1970 <writeReg32Bit>
    1b66:	64 e0       	ldi	r22, 0x04	; 4
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	d4 de       	rcall	.-600    	; 0x1914 <writeReg>
    1b6c:	03 c0       	rjmp	.+6      	; 0x1b74 <vl53l0x_startContinuous+0x6c>
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	d0 de       	rcall	.-608    	; 0x1914 <writeReg>
    1b74:	ff 90       	pop	r15
    1b76:	ef 90       	pop	r14
    1b78:	df 90       	pop	r13
    1b7a:	cf 90       	pop	r12
    1b7c:	08 95       	ret

00001b7e <vl53l0x_readRangeContinuousMillimeters>:
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	83 e1       	ldi	r24, 0x13	; 19
    1b84:	1b df       	rcall	.-458    	; 0x19bc <readReg>
    1b86:	87 70       	andi	r24, 0x07	; 7
    1b88:	39 f0       	breq	.+14     	; 0x1b98 <vl53l0x_readRangeContinuousMillimeters+0x1a>
    1b8a:	8e e1       	ldi	r24, 0x1E	; 30
    1b8c:	2f df       	rcall	.-418    	; 0x19ec <readReg16Bit>
    1b8e:	ec 01       	movw	r28, r24
    1b90:	61 e0       	ldi	r22, 0x01	; 1
    1b92:	8b e0       	ldi	r24, 0x0B	; 11
    1b94:	bf de       	rcall	.-642    	; 0x1914 <writeReg>
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <vl53l0x_readRangeContinuousMillimeters+0x1e>
    1b98:	cf ef       	ldi	r28, 0xFF	; 255
    1b9a:	df ef       	ldi	r29, 0xFF	; 255
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	08 95       	ret

00001ba4 <getSpadInfo>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool getSpadInfo(u8 * count, bool * type_is_aperture)
{
    1ba4:	0f 93       	push	r16
    1ba6:	1f 93       	push	r17
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	8c 01       	movw	r16, r24
    1bae:	eb 01       	movw	r28, r22
	u8 tmp;

	writeReg(0x80, 0x01);
    1bb0:	61 e0       	ldi	r22, 0x01	; 1
    1bb2:	80 e8       	ldi	r24, 0x80	; 128
    1bb4:	af de       	rcall	.-674    	; 0x1914 <writeReg>
	writeReg(0xFF, 0x01);
    1bb6:	61 e0       	ldi	r22, 0x01	; 1
    1bb8:	8f ef       	ldi	r24, 0xFF	; 255
    1bba:	ac de       	rcall	.-680    	; 0x1914 <writeReg>
	writeReg(0x00, 0x00);
    1bbc:	60 e0       	ldi	r22, 0x00	; 0
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	a9 de       	rcall	.-686    	; 0x1914 <writeReg>

	writeReg(0xFF, 0x06);
    1bc2:	66 e0       	ldi	r22, 0x06	; 6
    1bc4:	8f ef       	ldi	r24, 0xFF	; 255
    1bc6:	a6 de       	rcall	.-692    	; 0x1914 <writeReg>
	writeReg(0x83, readReg(0x83) | 0x04);
    1bc8:	83 e8       	ldi	r24, 0x83	; 131
    1bca:	f8 de       	rcall	.-528    	; 0x19bc <readReg>
    1bcc:	68 2f       	mov	r22, r24
    1bce:	64 60       	ori	r22, 0x04	; 4
    1bd0:	83 e8       	ldi	r24, 0x83	; 131
    1bd2:	a0 de       	rcall	.-704    	; 0x1914 <writeReg>
	writeReg(0xFF, 0x07);
    1bd4:	67 e0       	ldi	r22, 0x07	; 7
    1bd6:	8f ef       	ldi	r24, 0xFF	; 255
    1bd8:	9d de       	rcall	.-710    	; 0x1914 <writeReg>
	writeReg(0x81, 0x01);
    1bda:	61 e0       	ldi	r22, 0x01	; 1
    1bdc:	81 e8       	ldi	r24, 0x81	; 129
    1bde:	9a de       	rcall	.-716    	; 0x1914 <writeReg>

	writeReg(0x80, 0x01);
    1be0:	61 e0       	ldi	r22, 0x01	; 1
    1be2:	80 e8       	ldi	r24, 0x80	; 128

	writeReg(0x94, 0x6b);
    1be4:	97 de       	rcall	.-722    	; 0x1914 <writeReg>
    1be6:	6b e6       	ldi	r22, 0x6B	; 107
    1be8:	84 e9       	ldi	r24, 0x94	; 148
	writeReg(0x83, 0x00);
    1bea:	94 de       	rcall	.-728    	; 0x1914 <writeReg>
    1bec:	60 e0       	ldi	r22, 0x00	; 0
    1bee:	83 e8       	ldi	r24, 0x83	; 131
    1bf0:	91 de       	rcall	.-734    	; 0x1914 <writeReg>
	startTimeout();
    1bf2:	5c de       	rcall	.-840    	; 0x18ac <startTimeout>
	while (readReg(0x83) == 0x00)
	{
		if (checkTimeoutExpired()) { return FALSE; }
    1bf4:	03 c0       	rjmp	.+6      	; 0x1bfc <getSpadInfo+0x58>
    1bf6:	67 de       	rcall	.-818    	; 0x18c6 <checkTimeoutExpired>
    1bf8:	81 11       	cpse	r24, r1
    1bfa:	2b c0       	rjmp	.+86     	; 0x1c52 <getSpadInfo+0xae>
	writeReg(0x80, 0x01);

	writeReg(0x94, 0x6b);
	writeReg(0x83, 0x00);
	startTimeout();
	while (readReg(0x83) == 0x00)
    1bfc:	83 e8       	ldi	r24, 0x83	; 131
    1bfe:	de de       	rcall	.-580    	; 0x19bc <readReg>
    1c00:	88 23       	and	r24, r24
    1c02:	c9 f3       	breq	.-14     	; 0x1bf6 <getSpadInfo+0x52>
    1c04:	61 e0       	ldi	r22, 0x01	; 1
	{
		if (checkTimeoutExpired()) { return FALSE; }
	}
	writeReg(0x83, 0x01);
    1c06:	83 e8       	ldi	r24, 0x83	; 131
    1c08:	85 de       	rcall	.-758    	; 0x1914 <writeReg>
    1c0a:	82 e9       	ldi	r24, 0x92	; 146
	tmp = readReg(0x92);
    1c0c:	d7 de       	rcall	.-594    	; 0x19bc <readReg>
    1c0e:	98 2f       	mov	r25, r24

	*count = tmp & 0x7f;
    1c10:	9f 77       	andi	r25, 0x7F	; 127
    1c12:	f8 01       	movw	r30, r16
    1c14:	90 83       	st	Z, r25
	*type_is_aperture = (tmp >> 7) & 0x01;
    1c16:	88 1f       	adc	r24, r24
    1c18:	88 27       	eor	r24, r24
    1c1a:	88 1f       	adc	r24, r24

	writeReg(0x81, 0x00);
    1c1c:	88 83       	st	Y, r24
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	81 e8       	ldi	r24, 0x81	; 129
	writeReg(0xFF, 0x06);
    1c22:	78 de       	rcall	.-784    	; 0x1914 <writeReg>
    1c24:	66 e0       	ldi	r22, 0x06	; 6
    1c26:	8f ef       	ldi	r24, 0xFF	; 255
	writeReg(0x83, readReg(0x83)  & ~0x04);
    1c28:	75 de       	rcall	.-790    	; 0x1914 <writeReg>
    1c2a:	83 e8       	ldi	r24, 0x83	; 131
    1c2c:	c7 de       	rcall	.-626    	; 0x19bc <readReg>
    1c2e:	68 2f       	mov	r22, r24
    1c30:	6b 7f       	andi	r22, 0xFB	; 251
    1c32:	83 e8       	ldi	r24, 0x83	; 131
    1c34:	6f de       	rcall	.-802    	; 0x1914 <writeReg>
    1c36:	61 e0       	ldi	r22, 0x01	; 1
	writeReg(0xFF, 0x01);
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    1c3a:	6c de       	rcall	.-808    	; 0x1914 <writeReg>
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
	writeReg(0x00, 0x01);
    1c40:	69 de       	rcall	.-814    	; 0x1914 <writeReg>
    1c42:	60 e0       	ldi	r22, 0x00	; 0
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	66 de       	rcall	.-820    	; 0x1914 <writeReg>

	writeReg(0xFF, 0x00);
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	80 e8       	ldi	r24, 0x80	; 128
    1c4c:	63 de       	rcall	.-826    	; 0x1914 <writeReg>
    1c4e:	81 e0       	ldi	r24, 0x01	; 1
	writeReg(0x80, 0x00);
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <getSpadInfo+0xb0>
    1c52:	80 e0       	ldi	r24, 0x00	; 0
    1c54:	df 91       	pop	r29
    1c56:	cf 91       	pop	r28

	return TRUE;
    1c58:	1f 91       	pop	r17
    1c5a:	0f 91       	pop	r16
	writeReg(0x94, 0x6b);
	writeReg(0x83, 0x00);
	startTimeout();
	while (readReg(0x83) == 0x00)
	{
		if (checkTimeoutExpired()) { return FALSE; }
    1c5c:	08 95       	ret

00001c5e <getSequenceStepEnables>:

	writeReg(0xFF, 0x00);
	writeReg(0x80, 0x00);

	return TRUE;
}
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	ec 01       	movw	r28, r24
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	aa de       	rcall	.-684    	; 0x19bc <readReg>
// based on VL53L0X_GetSequenceStepEnables()
void getSequenceStepEnables(sequenceStepEnables_t * enables)
{
	u8 sequence_config = readReg(SYSTEM_SEQUENCE_CONFIG);

	enables->tcc          = (sequence_config >> 4) & 0x1;
    1c68:	84 fb       	bst	r24, 4
    1c6a:	99 27       	eor	r25, r25
    1c6c:	90 f9       	bld	r25, 0
    1c6e:	98 83       	st	Y, r25
	enables->dss          = (sequence_config >> 3) & 0x1;
    1c70:	83 fb       	bst	r24, 3
    1c72:	99 27       	eor	r25, r25
    1c74:	90 f9       	bld	r25, 0
    1c76:	9a 83       	std	Y+2, r25	; 0x02
	enables->msrc         = (sequence_config >> 2) & 0x1;
    1c78:	82 fb       	bst	r24, 2
    1c7a:	99 27       	eor	r25, r25
    1c7c:	90 f9       	bld	r25, 0
    1c7e:	99 83       	std	Y+1, r25	; 0x01
	enables->pre_range    = (sequence_config >> 6) & 0x1;
    1c80:	86 fb       	bst	r24, 6
    1c82:	99 27       	eor	r25, r25
    1c84:	90 f9       	bld	r25, 0
    1c86:	9b 83       	std	Y+3, r25	; 0x03
	enables->final_range  = (sequence_config >> 7) & 0x1;
    1c88:	88 1f       	adc	r24, r24
    1c8a:	88 27       	eor	r24, r24
    1c8c:	88 1f       	adc	r24, r24
    1c8e:	8c 83       	std	Y+4, r24	; 0x04
}
    1c90:	df 91       	pop	r29
    1c92:	cf 91       	pop	r28
    1c94:	08 95       	ret

00001c96 <getSequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void getSequenceStepTimeouts(sequenceStepEnables_t const * enables, sequenceStepTimeouts_t * timeouts)
{
    1c96:	2f 92       	push	r2
    1c98:	3f 92       	push	r3
    1c9a:	4f 92       	push	r4
    1c9c:	5f 92       	push	r5
    1c9e:	6f 92       	push	r6
    1ca0:	7f 92       	push	r7
    1ca2:	8f 92       	push	r8
    1ca4:	9f 92       	push	r9
    1ca6:	af 92       	push	r10
    1ca8:	bf 92       	push	r11
    1caa:	cf 92       	push	r12
    1cac:	df 92       	push	r13
    1cae:	ef 92       	push	r14
    1cb0:	ff 92       	push	r15
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	cf 93       	push	r28
    1cb8:	df 93       	push	r29
    1cba:	1c 01       	movw	r2, r24
    1cbc:	eb 01       	movw	r28, r22
	timeouts->pre_range_vcsel_period_pclks = vl53l0x_getVcselPulsePeriod(VcselPeriodPreRange);
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	13 df       	rcall	.-474    	; 0x1ae8 <vl53l0x_getVcselPulsePeriod>
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	99 83       	std	Y+1, r25	; 0x01
    1cc6:	88 83       	st	Y, r24

	timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
    1cc8:	86 e4       	ldi	r24, 0x46	; 70
    1cca:	78 de       	rcall	.-784    	; 0x19bc <readReg>
    1ccc:	68 2e       	mov	r6, r24
    1cce:	71 2c       	mov	r7, r1
    1cd0:	2f ef       	ldi	r18, 0xFF	; 255
    1cd2:	62 1a       	sub	r6, r18
    1cd4:	72 0a       	sbc	r7, r18
    1cd6:	7d 82       	std	Y+5, r7	; 0x05
    1cd8:	6c 82       	std	Y+4, r6	; 0x04
// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
u32 calcMacroPeriod(u8 vcsel_period_pclks)
{
	return (((u32) 2304 * (vcsel_period_pclks) * 1655) + 500) / 1000;
    1cda:	a8 81       	ld	r26, Y
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f e2       	ldi	r19, 0x2F	; 47
    1ce2:	4a e3       	ldi	r20, 0x3A	; 58
    1ce4:	50 e0       	ldi	r21, 0x00	; 0
    1ce6:	4b d4       	rcall	.+2198   	; 0x257e <__muluhisi3>
    1ce8:	4b 01       	movw	r8, r22
    1cea:	5c 01       	movw	r10, r24
    1cec:	e4 ef       	ldi	r30, 0xF4	; 244
    1cee:	8e 0e       	add	r8, r30
    1cf0:	e1 e0       	ldi	r30, 0x01	; 1
    1cf2:	9e 1e       	adc	r9, r30
    1cf4:	a1 1c       	adc	r10, r1
    1cf6:	b1 1c       	adc	r11, r1
void getSequenceStepTimeouts(sequenceStepEnables_t const * enables, sequenceStepTimeouts_t * timeouts)
{
	timeouts->pre_range_vcsel_period_pclks = vl53l0x_getVcselPulsePeriod(VcselPeriodPreRange);

	timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
	timeouts->msrc_dss_tcc_us =
    1cf8:	0f 2e       	mov	r0, r31
    1cfa:	f8 ee       	ldi	r31, 0xE8	; 232
    1cfc:	cf 2e       	mov	r12, r31
    1cfe:	f3 e0       	ldi	r31, 0x03	; 3
    1d00:	df 2e       	mov	r13, r31
    1d02:	e1 2c       	mov	r14, r1
    1d04:	f1 2c       	mov	r15, r1
    1d06:	f0 2d       	mov	r31, r0
    1d08:	c5 01       	movw	r24, r10
    1d0a:	b4 01       	movw	r22, r8
    1d0c:	a7 01       	movw	r20, r14
    1d0e:	96 01       	movw	r18, r12
    1d10:	fc d3       	rcall	.+2040   	; 0x250a <__udivmodsi4>
    1d12:	d3 01       	movw	r26, r6
    1d14:	34 d4       	rcall	.+2152   	; 0x257e <__muluhisi3>
    1d16:	2b 01       	movw	r4, r22
    1d18:	3c 01       	movw	r6, r24
    1d1a:	c5 01       	movw	r24, r10
    1d1c:	b4 01       	movw	r22, r8
    1d1e:	20 ed       	ldi	r18, 0xD0	; 208
    1d20:	37 e0       	ldi	r19, 0x07	; 7
    1d22:	40 e0       	ldi	r20, 0x00	; 0
    1d24:	50 e0       	ldi	r21, 0x00	; 0
    1d26:	f1 d3       	rcall	.+2018   	; 0x250a <__udivmodsi4>
    1d28:	c3 01       	movw	r24, r6
    1d2a:	b2 01       	movw	r22, r4
    1d2c:	62 0f       	add	r22, r18
    1d2e:	73 1f       	adc	r23, r19
    1d30:	84 1f       	adc	r24, r20
    1d32:	95 1f       	adc	r25, r21
    1d34:	a7 01       	movw	r20, r14
    1d36:	96 01       	movw	r18, r12
    1d38:	e8 d3       	rcall	.+2000   	; 0x250a <__udivmodsi4>
    1d3a:	2a 87       	std	Y+10, r18	; 0x0a
    1d3c:	3b 87       	std	Y+11, r19	; 0x0b
    1d3e:	4c 87       	std	Y+12, r20	; 0x0c
	timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
	timeouts->pre_range_vcsel_period_pclks);

	timeouts->pre_range_mclks =
	decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
    1d40:	5d 87       	std	Y+13, r21	; 0x0d
    1d42:	81 e5       	ldi	r24, 0x51	; 81
    1d44:	53 de       	rcall	.-858    	; 0x19ec <readReg16Bit>
// Note: the original function returned a u32, but the return value is
// always stored in a u16.
u16 decodeTimeout(u16 reg_val)
{
	// format: "(LSByte * 2^MSByte) + 1"
	return (u16)((reg_val & 0x00FF) <<
    1d46:	8c 01       	movw	r16, r24
    1d48:	11 27       	eor	r17, r17
    1d4a:	02 c0       	rjmp	.+4      	; 0x1d50 <getSequenceStepTimeouts+0xba>
    1d4c:	00 0f       	add	r16, r16
    1d4e:	11 1f       	adc	r17, r17
    1d50:	9a 95       	dec	r25
    1d52:	e2 f7       	brpl	.-8      	; 0x1d4c <getSequenceStepTimeouts+0xb6>
    1d54:	0f 5f       	subi	r16, 0xFF	; 255
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
	timeouts->msrc_dss_tcc_mclks = readReg(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
	timeouts->msrc_dss_tcc_us =
	timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
	timeouts->pre_range_vcsel_period_pclks);

	timeouts->pre_range_mclks =
    1d58:	1f 83       	std	Y+7, r17	; 0x07
// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
u32 calcMacroPeriod(u8 vcsel_period_pclks)
{
	return (((u32) 2304 * (vcsel_period_pclks) * 1655) + 500) / 1000;
    1d5a:	0e 83       	std	Y+6, r16	; 0x06
    1d5c:	a8 81       	ld	r26, Y
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	3f e2       	ldi	r19, 0x2F	; 47
    1d64:	4a e3       	ldi	r20, 0x3A	; 58
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	0a d4       	rcall	.+2068   	; 0x257e <__muluhisi3>
    1d6a:	4b 01       	movw	r8, r22
    1d6c:	5c 01       	movw	r10, r24
    1d6e:	f4 ef       	ldi	r31, 0xF4	; 244
    1d70:	8f 0e       	add	r8, r31
    1d72:	f1 e0       	ldi	r31, 0x01	; 1
    1d74:	9f 1e       	adc	r9, r31
	timeoutMclksToMicroseconds(timeouts->msrc_dss_tcc_mclks,
	timeouts->pre_range_vcsel_period_pclks);

	timeouts->pre_range_mclks =
	decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
	timeouts->pre_range_us =
    1d76:	a1 1c       	adc	r10, r1
    1d78:	b1 1c       	adc	r11, r1
    1d7a:	c5 01       	movw	r24, r10
    1d7c:	b4 01       	movw	r22, r8
    1d7e:	a7 01       	movw	r20, r14
    1d80:	96 01       	movw	r18, r12
    1d82:	c3 d3       	rcall	.+1926   	; 0x250a <__udivmodsi4>
    1d84:	d8 01       	movw	r26, r16
    1d86:	fb d3       	rcall	.+2038   	; 0x257e <__muluhisi3>
    1d88:	2b 01       	movw	r4, r22
    1d8a:	3c 01       	movw	r6, r24
    1d8c:	c5 01       	movw	r24, r10
    1d8e:	b4 01       	movw	r22, r8
    1d90:	20 ed       	ldi	r18, 0xD0	; 208
    1d92:	37 e0       	ldi	r19, 0x07	; 7
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	50 e0       	ldi	r21, 0x00	; 0
    1d98:	b8 d3       	rcall	.+1904   	; 0x250a <__udivmodsi4>
    1d9a:	c3 01       	movw	r24, r6
    1d9c:	b2 01       	movw	r22, r4
    1d9e:	62 0f       	add	r22, r18
    1da0:	73 1f       	adc	r23, r19
    1da2:	84 1f       	adc	r24, r20
    1da4:	95 1f       	adc	r25, r21
    1da6:	a7 01       	movw	r20, r14
    1da8:	96 01       	movw	r18, r12
    1daa:	af d3       	rcall	.+1886   	; 0x250a <__udivmodsi4>
    1dac:	2e 87       	std	Y+14, r18	; 0x0e
    1dae:	3f 87       	std	Y+15, r19	; 0x0f
	timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
	timeouts->pre_range_vcsel_period_pclks);

	timeouts->final_range_vcsel_period_pclks = vl53l0x_getVcselPulsePeriod(VcselPeriodFinalRange);
    1db0:	48 8b       	std	Y+16, r20	; 0x10
    1db2:	59 8b       	std	Y+17, r21	; 0x11
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	98 de       	rcall	.-720    	; 0x1ae8 <vl53l0x_getVcselPulsePeriod>
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9b 83       	std	Y+3, r25	; 0x03

	timeouts->final_range_mclks =
	decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
    1dbe:	81 e7       	ldi	r24, 0x71	; 113
    1dc0:	15 de       	rcall	.-982    	; 0x19ec <readReg16Bit>
    1dc2:	9c 01       	movw	r18, r24
// Note: the original function returned a u32, but the return value is
// always stored in a u16.
u16 decodeTimeout(u16 reg_val)
{
	// format: "(LSByte * 2^MSByte) + 1"
	return (u16)((reg_val & 0x00FF) <<
    1dc4:	99 27       	eor	r25, r25
    1dc6:	02 c0       	rjmp	.+4      	; 0x1dcc <getSequenceStepTimeouts+0x136>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	3a 95       	dec	r19
    1dce:	e2 f7       	brpl	.-8      	; 0x1dc8 <getSequenceStepTimeouts+0x132>
    1dd0:	01 96       	adiw	r24, 0x01	; 1
	timeoutMclksToMicroseconds(timeouts->pre_range_mclks,
	timeouts->pre_range_vcsel_period_pclks);

	timeouts->final_range_vcsel_period_pclks = vl53l0x_getVcselPulsePeriod(VcselPeriodFinalRange);

	timeouts->final_range_mclks =
    1dd2:	99 87       	std	Y+9, r25	; 0x09
    1dd4:	88 87       	std	Y+8, r24	; 0x08
	decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));

	if (enables->pre_range)
    1dd6:	f1 01       	movw	r30, r2
    1dd8:	23 81       	ldd	r18, Z+3	; 0x03
    1dda:	22 23       	and	r18, r18
	{
		timeouts->final_range_mclks -= timeouts->pre_range_mclks;
    1ddc:	31 f0       	breq	.+12     	; 0x1dea <getSequenceStepTimeouts+0x154>
    1dde:	2e 81       	ldd	r18, Y+6	; 0x06
    1de0:	3f 81       	ldd	r19, Y+7	; 0x07
    1de2:	82 1b       	sub	r24, r18
    1de4:	93 0b       	sbc	r25, r19
    1de6:	99 87       	std	Y+9, r25	; 0x09
// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
u32 calcMacroPeriod(u8 vcsel_period_pclks)
{
	return (((u32) 2304 * (vcsel_period_pclks) * 1655) + 500) / 1000;
    1de8:	88 87       	std	Y+8, r24	; 0x08
    1dea:	aa 81       	ldd	r26, Y+2	; 0x02
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f e2       	ldi	r19, 0x2F	; 47
    1df2:	4a e3       	ldi	r20, 0x3A	; 58
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	c3 d3       	rcall	.+1926   	; 0x257e <__muluhisi3>
    1df8:	6b 01       	movw	r12, r22
    1dfa:	7c 01       	movw	r14, r24
    1dfc:	f4 ef       	ldi	r31, 0xF4	; 244
    1dfe:	cf 0e       	add	r12, r31
    1e00:	f1 e0       	ldi	r31, 0x01	; 1
    1e02:	df 1e       	adc	r13, r31
    1e04:	e1 1c       	adc	r14, r1
	if (enables->pre_range)
	{
		timeouts->final_range_mclks -= timeouts->pre_range_mclks;
	}

	timeouts->final_range_us =
    1e06:	f1 1c       	adc	r15, r1
    1e08:	08 85       	ldd	r16, Y+8	; 0x08
    1e0a:	19 85       	ldd	r17, Y+9	; 0x09
    1e0c:	0f 2e       	mov	r0, r31
    1e0e:	f8 ee       	ldi	r31, 0xE8	; 232
    1e10:	8f 2e       	mov	r8, r31
    1e12:	f3 e0       	ldi	r31, 0x03	; 3
    1e14:	9f 2e       	mov	r9, r31
    1e16:	a1 2c       	mov	r10, r1
    1e18:	b1 2c       	mov	r11, r1
    1e1a:	f0 2d       	mov	r31, r0
    1e1c:	c7 01       	movw	r24, r14
    1e1e:	b6 01       	movw	r22, r12
    1e20:	a5 01       	movw	r20, r10
    1e22:	94 01       	movw	r18, r8
    1e24:	72 d3       	rcall	.+1764   	; 0x250a <__udivmodsi4>
    1e26:	d8 01       	movw	r26, r16
    1e28:	aa d3       	rcall	.+1876   	; 0x257e <__muluhisi3>
    1e2a:	2b 01       	movw	r4, r22
    1e2c:	3c 01       	movw	r6, r24
    1e2e:	c7 01       	movw	r24, r14
    1e30:	b6 01       	movw	r22, r12
    1e32:	20 ed       	ldi	r18, 0xD0	; 208
    1e34:	37 e0       	ldi	r19, 0x07	; 7
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	67 d3       	rcall	.+1742   	; 0x250a <__udivmodsi4>
    1e3c:	c3 01       	movw	r24, r6
    1e3e:	b2 01       	movw	r22, r4
    1e40:	62 0f       	add	r22, r18
    1e42:	73 1f       	adc	r23, r19
    1e44:	84 1f       	adc	r24, r20
    1e46:	95 1f       	adc	r25, r21
    1e48:	a5 01       	movw	r20, r10
    1e4a:	94 01       	movw	r18, r8
    1e4c:	5e d3       	rcall	.+1724   	; 0x250a <__udivmodsi4>
    1e4e:	2a 8b       	std	Y+18, r18	; 0x12
    1e50:	3b 8b       	std	Y+19, r19	; 0x13
    1e52:	4c 8b       	std	Y+20, r20	; 0x14
    1e54:	5d 8b       	std	Y+21, r21	; 0x15
	timeoutMclksToMicroseconds(timeouts->final_range_mclks,
	timeouts->final_range_vcsel_period_pclks);
}
    1e56:	df 91       	pop	r29
    1e58:	cf 91       	pop	r28
    1e5a:	1f 91       	pop	r17
    1e5c:	0f 91       	pop	r16
    1e5e:	ff 90       	pop	r15
    1e60:	ef 90       	pop	r14
    1e62:	df 90       	pop	r13
    1e64:	cf 90       	pop	r12
    1e66:	bf 90       	pop	r11
    1e68:	af 90       	pop	r10
    1e6a:	9f 90       	pop	r9
    1e6c:	8f 90       	pop	r8
    1e6e:	7f 90       	pop	r7
    1e70:	6f 90       	pop	r6
    1e72:	5f 90       	pop	r5
    1e74:	4f 90       	pop	r4
    1e76:	3f 90       	pop	r3
    1e78:	2f 90       	pop	r2
    1e7a:	08 95       	ret

00001e7c <vl53l0x_setMeasurementTimingBudget>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool vl53l0x_setMeasurementTimingBudget(u32 u32_budget)
{
    1e7c:	4f 92       	push	r4
    1e7e:	5f 92       	push	r5
    1e80:	6f 92       	push	r6
    1e82:	7f 92       	push	r7
    1e84:	8f 92       	push	r8
    1e86:	9f 92       	push	r9
    1e88:	af 92       	push	r10
    1e8a:	bf 92       	push	r11
    1e8c:	cf 92       	push	r12
    1e8e:	df 92       	push	r13
    1e90:	ef 92       	push	r14
    1e92:	ff 92       	push	r15
    1e94:	1f 93       	push	r17
    1e96:	cf 93       	push	r28
    1e98:	df 93       	push	r29
    1e9a:	cd b7       	in	r28, 0x3d	; 61
    1e9c:	de b7       	in	r29, 0x3e	; 62
    1e9e:	6b 97       	sbiw	r28, 0x1b	; 27
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
	u16 const PreRangeOverhead   = 660;
	u16 const FinalRangeOverhead = 550;

	u32 const MinTimingBudget = 20000;

	if (u32_budget < MinTimingBudget) { return FALSE; }
    1eaa:	60 32       	cpi	r22, 0x20	; 32
    1eac:	2e e4       	ldi	r18, 0x4E	; 78
    1eae:	72 07       	cpc	r23, r18
    1eb0:	81 05       	cpc	r24, r1
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	08 f4       	brcc	.+2      	; 0x1eb8 <vl53l0x_setMeasurementTimingBudget+0x3c>
    1eb6:	a3 c0       	rjmp	.+326    	; 0x1ffe <vl53l0x_setMeasurementTimingBudget+0x182>
    1eb8:	6b 01       	movw	r12, r22
    1eba:	7c 01       	movw	r14, r24

	u32 used_budget_us = StartOverhead + EndOverhead;

	getSequenceStepEnables(&enables);
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	ce de       	rcall	.-612    	; 0x1c5e <getSequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
    1ec2:	be 01       	movw	r22, r28
    1ec4:	6a 5f       	subi	r22, 0xFA	; 250
    1ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec8:	ce 01       	movw	r24, r28
    1eca:	01 96       	adiw	r24, 0x01	; 1
    1ecc:	e4 de       	rcall	.-568    	; 0x1c96 <getSequenceStepTimeouts>

	if (enables.tcc)
    1ece:	89 81       	ldd	r24, Y+1	; 0x01
    1ed0:	88 23       	and	r24, r24
    1ed2:	49 f0       	breq	.+18     	; 0x1ee6 <vl53l0x_setMeasurementTimingBudget+0x6a>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
    1ed4:	88 89       	ldd	r24, Y+16	; 0x10
    1ed6:	99 89       	ldd	r25, Y+17	; 0x11
    1ed8:	aa 89       	ldd	r26, Y+18	; 0x12
    1eda:	bb 89       	ldd	r27, Y+19	; 0x13
    1edc:	8a 5c       	subi	r24, 0xCA	; 202
    1ede:	94 4f       	sbci	r25, 0xF4	; 244
    1ee0:	af 4f       	sbci	r26, 0xFF	; 255
    1ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee4:	04 c0       	rjmp	.+8      	; 0x1eee <vl53l0x_setMeasurementTimingBudget+0x72>

	u32 const MinTimingBudget = 20000;

	if (u32_budget < MinTimingBudget) { return FALSE; }

	u32 used_budget_us = StartOverhead + EndOverhead;
    1ee6:	88 ee       	ldi	r24, 0xE8	; 232
    1ee8:	98 e0       	ldi	r25, 0x08	; 8
    1eea:	a0 e0       	ldi	r26, 0x00	; 0
    1eec:	b0 e0       	ldi	r27, 0x00	; 0
	if (enables.tcc)
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
	}

	if (enables.dss)
    1eee:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef0:	22 23       	and	r18, r18
    1ef2:	89 f0       	breq	.+34     	; 0x1f16 <vl53l0x_setMeasurementTimingBudget+0x9a>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
    1ef4:	48 89       	ldd	r20, Y+16	; 0x10
    1ef6:	59 89       	ldd	r21, Y+17	; 0x11
    1ef8:	6a 89       	ldd	r22, Y+18	; 0x12
    1efa:	7b 89       	ldd	r23, Y+19	; 0x13
    1efc:	4e 54       	subi	r20, 0x4E	; 78
    1efe:	5d 4f       	sbci	r21, 0xFD	; 253
    1f00:	6f 4f       	sbci	r22, 0xFF	; 255
    1f02:	7f 4f       	sbci	r23, 0xFF	; 255
    1f04:	44 0f       	add	r20, r20
    1f06:	55 1f       	adc	r21, r21
    1f08:	66 1f       	adc	r22, r22
    1f0a:	77 1f       	adc	r23, r23
    1f0c:	84 0f       	add	r24, r20
    1f0e:	95 1f       	adc	r25, r21
    1f10:	a6 1f       	adc	r26, r22
    1f12:	b7 1f       	adc	r27, r23
    1f14:	0f c0       	rjmp	.+30     	; 0x1f34 <vl53l0x_setMeasurementTimingBudget+0xb8>
	}
	else if (enables.msrc)
    1f16:	2a 81       	ldd	r18, Y+2	; 0x02
    1f18:	22 23       	and	r18, r18
    1f1a:	61 f0       	breq	.+24     	; 0x1f34 <vl53l0x_setMeasurementTimingBudget+0xb8>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    1f1c:	48 89       	ldd	r20, Y+16	; 0x10
    1f1e:	59 89       	ldd	r21, Y+17	; 0x11
    1f20:	6a 89       	ldd	r22, Y+18	; 0x12
    1f22:	7b 89       	ldd	r23, Y+19	; 0x13
    1f24:	4c 56       	subi	r20, 0x6C	; 108
    1f26:	5d 4f       	sbci	r21, 0xFD	; 253
    1f28:	6f 4f       	sbci	r22, 0xFF	; 255
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	84 0f       	add	r24, r20
    1f2e:	95 1f       	adc	r25, r21
    1f30:	a6 1f       	adc	r26, r22
    1f32:	b7 1f       	adc	r27, r23
	}

	if (enables.pre_range)
    1f34:	1c 81       	ldd	r17, Y+4	; 0x04
    1f36:	11 23       	and	r17, r17
    1f38:	61 f0       	breq	.+24     	; 0x1f52 <vl53l0x_setMeasurementTimingBudget+0xd6>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
    1f3a:	4c 89       	ldd	r20, Y+20	; 0x14
    1f3c:	5d 89       	ldd	r21, Y+21	; 0x15
    1f3e:	6e 89       	ldd	r22, Y+22	; 0x16
    1f40:	7f 89       	ldd	r23, Y+23	; 0x17
    1f42:	4c 56       	subi	r20, 0x6C	; 108
    1f44:	5d 4f       	sbci	r21, 0xFD	; 253
    1f46:	6f 4f       	sbci	r22, 0xFF	; 255
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	84 0f       	add	r24, r20
    1f4c:	95 1f       	adc	r25, r21
    1f4e:	a6 1f       	adc	r26, r22
    1f50:	b7 1f       	adc	r27, r23
	}

	if (enables.final_range)
    1f52:	2d 81       	ldd	r18, Y+5	; 0x05
    1f54:	22 23       	and	r18, r18
    1f56:	09 f4       	brne	.+2      	; 0x1f5a <vl53l0x_setMeasurementTimingBudget+0xde>
    1f58:	54 c0       	rjmp	.+168    	; 0x2002 <vl53l0x_setMeasurementTimingBudget+0x186>
	{
		used_budget_us += FinalRangeOverhead;
    1f5a:	2c 01       	movw	r4, r24
    1f5c:	3d 01       	movw	r6, r26
    1f5e:	26 e2       	ldi	r18, 0x26	; 38
    1f60:	42 0e       	add	r4, r18
    1f62:	22 e0       	ldi	r18, 0x02	; 2
    1f64:	52 1e       	adc	r5, r18
    1f66:	61 1c       	adc	r6, r1
    1f68:	71 1c       	adc	r7, r1
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if (used_budget_us > u32_budget)
    1f6a:	c4 14       	cp	r12, r4
    1f6c:	d5 04       	cpc	r13, r5
    1f6e:	e6 04       	cpc	r14, r6
    1f70:	f7 04       	cpc	r15, r7
    1f72:	08 f4       	brcc	.+2      	; 0x1f76 <vl53l0x_setMeasurementTimingBudget+0xfa>
    1f74:	48 c0       	rjmp	.+144    	; 0x2006 <vl53l0x_setMeasurementTimingBudget+0x18a>
// Calculate macro period in *nanoseconds* from VCSEL period in PCLKs
// based on VL53L0X_calc_macro_period_ps()
// PLL_period_ps = 1655; macro_period_vclks = 2304
u32 calcMacroPeriod(u8 vcsel_period_pclks)
{
	return (((u32) 2304 * (vcsel_period_pclks) * 1655) + 500) / 1000;
    1f76:	a8 85       	ldd	r26, Y+8	; 0x08
    1f78:	b0 e0       	ldi	r27, 0x00	; 0
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f e2       	ldi	r19, 0x2F	; 47
    1f7e:	4a e3       	ldi	r20, 0x3A	; 58
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	fd d2       	rcall	.+1530   	; 0x257e <__muluhisi3>
    1f84:	4b 01       	movw	r8, r22
    1f86:	5c 01       	movw	r10, r24
    1f88:	24 ef       	ldi	r18, 0xF4	; 244
    1f8a:	82 0e       	add	r8, r18
    1f8c:	21 e0       	ldi	r18, 0x01	; 1
    1f8e:	92 1e       	adc	r9, r18
    1f90:	a1 1c       	adc	r10, r1
    1f92:	b1 1c       	adc	r11, r1
		// "For the final range timeout, the pre-range timeout
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		u16 final_range_timeout_mclks =
    1f94:	a7 01       	movw	r20, r14
    1f96:	96 01       	movw	r18, r12
    1f98:	24 19       	sub	r18, r4
    1f9a:	35 09       	sbc	r19, r5
    1f9c:	46 09       	sbc	r20, r6
    1f9e:	57 09       	sbc	r21, r7
    1fa0:	a8 ee       	ldi	r26, 0xE8	; 232
    1fa2:	b3 e0       	ldi	r27, 0x03	; 3
    1fa4:	ec d2       	rcall	.+1496   	; 0x257e <__muluhisi3>
    1fa6:	2b 01       	movw	r4, r22
    1fa8:	3c 01       	movw	r6, r24
    1faa:	c5 01       	movw	r24, r10
    1fac:	b4 01       	movw	r22, r8
    1fae:	20 ed       	ldi	r18, 0xD0	; 208
    1fb0:	37 e0       	ldi	r19, 0x07	; 7
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	50 e0       	ldi	r21, 0x00	; 0
    1fb6:	a9 d2       	rcall	.+1362   	; 0x250a <__udivmodsi4>
    1fb8:	42 0e       	add	r4, r18
    1fba:	53 1e       	adc	r5, r19
    1fbc:	64 1e       	adc	r6, r20
    1fbe:	75 1e       	adc	r7, r21
    1fc0:	c5 01       	movw	r24, r10
    1fc2:	b4 01       	movw	r22, r8
    1fc4:	28 ee       	ldi	r18, 0xE8	; 232
    1fc6:	33 e0       	ldi	r19, 0x03	; 3
    1fc8:	40 e0       	ldi	r20, 0x00	; 0
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	9e d2       	rcall	.+1340   	; 0x250a <__udivmodsi4>
    1fce:	c3 01       	movw	r24, r6
    1fd0:	b2 01       	movw	r22, r4
    1fd2:	9b d2       	rcall	.+1334   	; 0x250a <__udivmodsi4>
    1fd4:	c9 01       	movw	r24, r18
		timeoutMicrosecondsToMclks(final_range_timeout_us,
		timeouts.final_range_vcsel_period_pclks);

		if (enables.pre_range)
    1fd6:	11 23       	and	r17, r17
    1fd8:	21 f0       	breq	.+8      	; 0x1fe2 <vl53l0x_setMeasurementTimingBudget+0x166>
		{
			final_range_timeout_mclks += timeouts.pre_range_mclks;
    1fda:	8c 85       	ldd	r24, Y+12	; 0x0c
    1fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    1fde:	82 0f       	add	r24, r18
		}

		writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
    1fe0:	93 1f       	adc	r25, r19
    1fe2:	38 dc       	rcall	.-1936   	; 0x1854 <encodeTimeout>
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	81 e7       	ldi	r24, 0x71	; 113
    1fe8:	a9 dc       	rcall	.-1710   	; 0x193c <writeReg16Bit>
    1fea:	c0 92 57 01 	sts	0x0157, r12	; 0x800157 <g_measTimBudUs>
		encodeTimeout(final_range_timeout_mclks));

		// set_sequence_step_timeout() end

		g_measTimBudUs = u32_budget; // store for internal reuse
    1fee:	d0 92 58 01 	sts	0x0158, r13	; 0x800158 <g_measTimBudUs+0x1>
    1ff2:	e0 92 59 01 	sts	0x0159, r14	; 0x800159 <g_measTimBudUs+0x2>
    1ff6:	f0 92 5a 01 	sts	0x015A, r15	; 0x80015a <g_measTimBudUs+0x3>
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
	}
	return TRUE;
    1ffc:	05 c0       	rjmp	.+10     	; 0x2008 <vl53l0x_setMeasurementTimingBudget+0x18c>
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
	u16 const PreRangeOverhead   = 660;
	u16 const FinalRangeOverhead = 550;

	u32 const MinTimingBudget = 20000;

	if (u32_budget < MinTimingBudget) { return FALSE; }
    2000:	03 c0       	rjmp	.+6      	; 0x2008 <vl53l0x_setMeasurementTimingBudget+0x18c>
    2002:	81 e0       	ldi	r24, 0x01	; 1

		// set_sequence_step_timeout() end

		g_measTimBudUs = u32_budget; // store for internal reuse
	}
	return TRUE;
    2004:	01 c0       	rjmp	.+2      	; 0x2008 <vl53l0x_setMeasurementTimingBudget+0x18c>
    2006:	80 e0       	ldi	r24, 0x00	; 0
		// the final range."

		if (used_budget_us > u32_budget)
		{
			// "Requested timeout too big."
			return FALSE;
    2008:	6b 96       	adiw	r28, 0x1b	; 27
		// set_sequence_step_timeout() end

		g_measTimBudUs = u32_budget; // store for internal reuse
	}
	return TRUE;
}
    200a:	0f b6       	in	r0, 0x3f	; 63
    200c:	f8 94       	cli
    200e:	de bf       	out	0x3e, r29	; 62
    2010:	0f be       	out	0x3f, r0	; 63
    2012:	cd bf       	out	0x3d, r28	; 61
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	ff 90       	pop	r15
    201c:	ef 90       	pop	r14
    201e:	df 90       	pop	r13
    2020:	cf 90       	pop	r12
    2022:	bf 90       	pop	r11
    2024:	af 90       	pop	r10
    2026:	9f 90       	pop	r9
    2028:	8f 90       	pop	r8
    202a:	7f 90       	pop	r7
    202c:	6f 90       	pop	r6
    202e:	5f 90       	pop	r5
    2030:	4f 90       	pop	r4
    2032:	08 95       	ret

00002034 <vl53l0x_getMeasurementTimingBudget>:
    2034:	0f 93       	push	r16

// Get the measurement timing budget in microseconds
// based on VL53L0X_get_measurement_timing_budget_micro_seconds()
// in us
u32 vl53l0x_getMeasurementTimingBudget(void)
{
    2036:	1f 93       	push	r17
    2038:	cf 93       	push	r28
    203a:	df 93       	push	r29
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	6b 97       	sbiw	r28, 0x1b	; 27
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
	u16 const FinalRangeOverhead = 550;

	// "Start and end overhead times always present"
	u32 budget_us = StartOverhead + EndOverhead;

	getSequenceStepEnables(&enables);
    204c:	ce 01       	movw	r24, r28
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	06 de       	rcall	.-1012   	; 0x1c5e <getSequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
    2052:	be 01       	movw	r22, r28
    2054:	6a 5f       	subi	r22, 0xFA	; 250
    2056:	7f 4f       	sbci	r23, 0xFF	; 255
    2058:	ce 01       	movw	r24, r28
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	1c de       	rcall	.-968    	; 0x1c96 <getSequenceStepTimeouts>

	if (enables.tcc)
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	88 23       	and	r24, r24
    2062:	59 f0       	breq	.+22     	; 0x207a <vl53l0x_getMeasurementTimingBudget+0x46>
	{
		budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
    2064:	88 89       	ldd	r24, Y+16	; 0x10
    2066:	99 89       	ldd	r25, Y+17	; 0x11
    2068:	aa 89       	ldd	r26, Y+18	; 0x12
    206a:	bb 89       	ldd	r27, Y+19	; 0x13
    206c:	bc 01       	movw	r22, r24
    206e:	cd 01       	movw	r24, r26
    2070:	6c 57       	subi	r22, 0x7C	; 124
    2072:	72 4f       	sbci	r23, 0xF2	; 242
    2074:	8f 4f       	sbci	r24, 0xFF	; 255
    2076:	9f 4f       	sbci	r25, 0xFF	; 255
    2078:	04 c0       	rjmp	.+8      	; 0x2082 <vl53l0x_getMeasurementTimingBudget+0x4e>
	u16 const DssOverhead        = 690;
	u16 const PreRangeOverhead   = 660;
	u16 const FinalRangeOverhead = 550;

	// "Start and end overhead times always present"
	u32 budget_us = StartOverhead + EndOverhead;
    207a:	66 e3       	ldi	r22, 0x36	; 54
    207c:	7b e0       	ldi	r23, 0x0B	; 11
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
	if (enables.tcc)
	{
		budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
	}

	if (enables.dss)
    2082:	2b 81       	ldd	r18, Y+3	; 0x03
    2084:	22 23       	and	r18, r18
    2086:	89 f0       	breq	.+34     	; 0x20aa <vl53l0x_getMeasurementTimingBudget+0x76>
	{
		budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
    2088:	08 89       	ldd	r16, Y+16	; 0x10
    208a:	19 89       	ldd	r17, Y+17	; 0x11
    208c:	2a 89       	ldd	r18, Y+18	; 0x12
    208e:	3b 89       	ldd	r19, Y+19	; 0x13
    2090:	0e 54       	subi	r16, 0x4E	; 78
    2092:	1d 4f       	sbci	r17, 0xFD	; 253
    2094:	2f 4f       	sbci	r18, 0xFF	; 255
    2096:	3f 4f       	sbci	r19, 0xFF	; 255
    2098:	00 0f       	add	r16, r16
    209a:	11 1f       	adc	r17, r17
    209c:	22 1f       	adc	r18, r18
    209e:	33 1f       	adc	r19, r19
    20a0:	60 0f       	add	r22, r16
    20a2:	71 1f       	adc	r23, r17
    20a4:	82 1f       	adc	r24, r18
    20a6:	93 1f       	adc	r25, r19
    20a8:	0f c0       	rjmp	.+30     	; 0x20c8 <vl53l0x_getMeasurementTimingBudget+0x94>
	}
	else if (enables.msrc)
    20aa:	2a 81       	ldd	r18, Y+2	; 0x02
    20ac:	22 23       	and	r18, r18
    20ae:	61 f0       	breq	.+24     	; 0x20c8 <vl53l0x_getMeasurementTimingBudget+0x94>
	{
		budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
    20b0:	08 89       	ldd	r16, Y+16	; 0x10
    20b2:	19 89       	ldd	r17, Y+17	; 0x11
    20b4:	2a 89       	ldd	r18, Y+18	; 0x12
    20b6:	3b 89       	ldd	r19, Y+19	; 0x13
    20b8:	0c 56       	subi	r16, 0x6C	; 108
    20ba:	1d 4f       	sbci	r17, 0xFD	; 253
    20bc:	2f 4f       	sbci	r18, 0xFF	; 255
    20be:	3f 4f       	sbci	r19, 0xFF	; 255
    20c0:	60 0f       	add	r22, r16
    20c2:	71 1f       	adc	r23, r17
    20c4:	82 1f       	adc	r24, r18
    20c6:	93 1f       	adc	r25, r19
	}

	if (enables.pre_range)
    20c8:	2c 81       	ldd	r18, Y+4	; 0x04
    20ca:	22 23       	and	r18, r18
    20cc:	61 f0       	breq	.+24     	; 0x20e6 <vl53l0x_getMeasurementTimingBudget+0xb2>
	{
		budget_us += (timeouts.pre_range_us + PreRangeOverhead);
    20ce:	0c 89       	ldd	r16, Y+20	; 0x14
    20d0:	1d 89       	ldd	r17, Y+21	; 0x15
    20d2:	2e 89       	ldd	r18, Y+22	; 0x16
    20d4:	3f 89       	ldd	r19, Y+23	; 0x17
    20d6:	0c 56       	subi	r16, 0x6C	; 108
    20d8:	1d 4f       	sbci	r17, 0xFD	; 253
    20da:	2f 4f       	sbci	r18, 0xFF	; 255
    20dc:	3f 4f       	sbci	r19, 0xFF	; 255
    20de:	60 0f       	add	r22, r16
    20e0:	71 1f       	adc	r23, r17
    20e2:	82 1f       	adc	r24, r18
    20e4:	93 1f       	adc	r25, r19
	}

	if (enables.final_range)
    20e6:	2d 81       	ldd	r18, Y+5	; 0x05
    20e8:	22 23       	and	r18, r18
    20ea:	61 f0       	breq	.+24     	; 0x2104 <vl53l0x_getMeasurementTimingBudget+0xd0>
	{
		budget_us += (timeouts.final_range_us + FinalRangeOverhead);
    20ec:	08 8d       	ldd	r16, Y+24	; 0x18
    20ee:	19 8d       	ldd	r17, Y+25	; 0x19
    20f0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    20f2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    20f4:	0a 5d       	subi	r16, 0xDA	; 218
    20f6:	1d 4f       	sbci	r17, 0xFD	; 253
    20f8:	2f 4f       	sbci	r18, 0xFF	; 255
    20fa:	3f 4f       	sbci	r19, 0xFF	; 255
    20fc:	60 0f       	add	r22, r16
    20fe:	71 1f       	adc	r23, r17
    2100:	82 1f       	adc	r24, r18
    2102:	93 1f       	adc	r25, r19
	}

	g_measTimBudUs = budget_us; // store for internal reuse
    2104:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <g_measTimBudUs>
    2108:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <g_measTimBudUs+0x1>
    210c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <g_measTimBudUs+0x2>
    2110:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <g_measTimBudUs+0x3>
	return budget_us;
}
    2114:	6b 96       	adiw	r28, 0x1b	; 27
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	df 91       	pop	r29
    2122:	cf 91       	pop	r28
    2124:	1f 91       	pop	r17
    2126:	0f 91       	pop	r16
    2128:	08 95       	ret

0000212a <performSingleRefCalibration>:


// based on VL53L0X_perform_single_ref_calibration()
bool performSingleRefCalibration(u8 vhv_init_byte)
{
	writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
    212a:	68 2f       	mov	r22, r24
    212c:	61 60       	ori	r22, 0x01	; 1
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	f1 db       	rcall	.-2078   	; 0x1914 <writeReg>

	startTimeout();
    2132:	bc db       	rcall	.-2184   	; 0x18ac <startTimeout>
	while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
    2134:	03 c0       	rjmp	.+6      	; 0x213c <performSingleRefCalibration+0x12>
	{
		if (checkTimeoutExpired()) { return FALSE; }
    2136:	c7 db       	rcall	.-2162   	; 0x18c6 <checkTimeoutExpired>
    2138:	81 11       	cpse	r24, r1
    213a:	0c c0       	rjmp	.+24     	; 0x2154 <performSingleRefCalibration+0x2a>
bool performSingleRefCalibration(u8 vhv_init_byte)
{
	writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP

	startTimeout();
	while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
    213c:	83 e1       	ldi	r24, 0x13	; 19
    213e:	3e dc       	rcall	.-1924   	; 0x19bc <readReg>
    2140:	87 70       	andi	r24, 0x07	; 7
    2142:	c9 f3       	breq	.-14     	; 0x2136 <performSingleRefCalibration+0xc>
	{
		if (checkTimeoutExpired()) { return FALSE; }
	}

	writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
    2144:	61 e0       	ldi	r22, 0x01	; 1
    2146:	8b e0       	ldi	r24, 0x0B	; 11
    2148:	e5 db       	rcall	.-2102   	; 0x1914 <writeReg>

	writeReg(SYSRANGE_START, 0x00);
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	e2 db       	rcall	.-2108   	; 0x1914 <writeReg>
    2150:	81 e0       	ldi	r24, 0x01	; 1

	return TRUE;
    2152:	08 95       	ret
    2154:	80 e0       	ldi	r24, 0x00	; 0
	writeReg(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP

	startTimeout();
	while ((readReg(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
	{
		if (checkTimeoutExpired()) { return FALSE; }
    2156:	08 95       	ret

00002158 <vl53l0x_init>:
	writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);

	writeReg(SYSRANGE_START, 0x00);

	return TRUE;
    2158:	cf 93       	push	r28
// (VL53L0X_PerformRefSpadManagement()), since the API user manual says that it
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is TRUE or not given, the sensor is configured for 2V8
// mode.
bool vl53l0x_init(void){
    215a:	df 93       	push	r29
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	28 97       	sbiw	r28, 0x08	; 8
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
	
	s_i2cInterface.frequency = 400000;
    216c:	80 e8       	ldi	r24, 0x80	; 128
    216e:	9a e1       	ldi	r25, 0x1A	; 26
    2170:	a6 e0       	ldi	r26, 0x06	; 6
    2172:	b0 e0       	ldi	r27, 0x00	; 0
    2174:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <s_i2cInterface>
    2178:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <s_i2cInterface+0x1>
    217c:	a0 93 55 01 	sts	0x0155, r26	; 0x800155 <s_i2cInterface+0x2>
    2180:	b0 93 56 01 	sts	0x0156, r27	; 0x800156 <s_i2cInterface+0x3>
	i2c_init(s_i2cInterface);
    2184:	60 e8       	ldi	r22, 0x80	; 128
    2186:	7a e1       	ldi	r23, 0x1A	; 26
    2188:	86 e0       	ldi	r24, 0x06	; 6
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 cd 01 	call	0x39a	; 0x39a <i2c_init>
	i2c_start();
    2190:	0e 94 f6 01 	call	0x3ec	; 0x3ec <i2c_start>

	// VL53L0X_DataInit() begin

	writeReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV, readReg(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01);
    2194:	89 e8       	ldi	r24, 0x89	; 137
    2196:	12 dc       	rcall	.-2012   	; 0x19bc <readReg>
    2198:	68 2f       	mov	r22, r24
    219a:	61 60       	ori	r22, 0x01	; 1
    219c:	89 e8       	ldi	r24, 0x89	; 137
    219e:	ba db       	rcall	.-2188   	; 0x1914 <writeReg>

	// "Set I2C standard mode"
	writeReg(0x88, 0x00);
    21a0:	60 e0       	ldi	r22, 0x00	; 0
    21a2:	88 e8       	ldi	r24, 0x88	; 136
    21a4:	b7 db       	rcall	.-2194   	; 0x1914 <writeReg>

	writeReg(0x80, 0x01);
    21a6:	61 e0       	ldi	r22, 0x01	; 1
    21a8:	80 e8       	ldi	r24, 0x80	; 128
    21aa:	b4 db       	rcall	.-2200   	; 0x1914 <writeReg>
	writeReg(0xFF, 0x01);
    21ac:	61 e0       	ldi	r22, 0x01	; 1
    21ae:	8f ef       	ldi	r24, 0xFF	; 255
    21b0:	b1 db       	rcall	.-2206   	; 0x1914 <writeReg>
	writeReg(0x00, 0x00);
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	ae db       	rcall	.-2212   	; 0x1914 <writeReg>
    21b8:	81 e9       	ldi	r24, 0x91	; 145
	g_stopVariable = readReg(0x91);
    21ba:	00 dc       	rcall	.-2048   	; 0x19bc <readReg>
    21bc:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <g_stopVariable>
	writeReg(0x00, 0x01);
    21c0:	61 e0       	ldi	r22, 0x01	; 1
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	a7 db       	rcall	.-2226   	; 0x1914 <writeReg>
	writeReg(0xFF, 0x00);
    21c6:	60 e0       	ldi	r22, 0x00	; 0
    21c8:	8f ef       	ldi	r24, 0xFF	; 255
    21ca:	a4 db       	rcall	.-2232   	; 0x1914 <writeReg>
	writeReg(0x80, 0x00);
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	80 e8       	ldi	r24, 0x80	; 128
    21d0:	a1 db       	rcall	.-2238   	; 0x1914 <writeReg>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);
    21d2:	80 e6       	ldi	r24, 0x60	; 96
    21d4:	f3 db       	rcall	.-2074   	; 0x19bc <readReg>
    21d6:	68 2f       	mov	r22, r24
    21d8:	62 61       	ori	r22, 0x12	; 18
    21da:	80 e6       	ldi	r24, 0x60	; 96
    21dc:	9b db       	rcall	.-2250   	; 0x1914 <writeReg>
    21de:	60 e2       	ldi	r22, 0x20	; 32
bool vl53l0x_setSignalRateLimit(float f_limit)
{
	if (f_limit < 0 || f_limit > 511.99) { return FALSE; }

	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, f_limit * (1 << 7));
    21e0:	70 e0       	ldi	r23, 0x00	; 0
    21e2:	84 e4       	ldi	r24, 0x44	; 68
    21e4:	ab db       	rcall	.-2218   	; 0x193c <writeReg16Bit>
    21e6:	6f ef       	ldi	r22, 0xFF	; 255
	writeReg(MSRC_CONFIG_CONTROL, readReg(MSRC_CONFIG_CONTROL) | 0x12);

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	vl53l0x_setSignalRateLimit(0.25);

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0xFF);
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	94 db       	rcall	.-2264   	; 0x1914 <writeReg>
    21ec:	be 01       	movw	r22, r28
    21ee:	6e 5f       	subi	r22, 0xFE	; 254

	// VL53L0X_StaticInit() begin

	u8 spad_count;
	bool spad_type_is_aperture;
	if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return FALSE; }
    21f0:	7f 4f       	sbci	r23, 0xFF	; 255
    21f2:	ce 01       	movw	r24, r28
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	d6 dc       	rcall	.-1620   	; 0x1ba4 <getSpadInfo>
    21f8:	88 23       	and	r24, r24
    21fa:	09 f4       	brne	.+2      	; 0x21fe <vl53l0x_init+0xa6>
    21fc:	7d c1       	rjmp	.+762    	; 0x24f8 <vl53l0x_init+0x3a0>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	u8 ref_spad_map[6];
	readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
    21fe:	46 e0       	ldi	r20, 0x06	; 6
    2200:	be 01       	movw	r22, r28
    2202:	6d 5f       	subi	r22, 0xFD	; 253
    2204:	7f 4f       	sbci	r23, 0xFF	; 255
    2206:	80 eb       	ldi	r24, 0xB0	; 176

	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

	writeReg(0xFF, 0x01);
    2208:	3c dc       	rcall	.-1928   	; 0x1a82 <readMulti>
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	8f ef       	ldi	r24, 0xFF	; 255
    220e:	82 db       	rcall	.-2300   	; 0x1914 <writeReg>
	writeReg(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
    2210:	60 e0       	ldi	r22, 0x00	; 0
    2212:	8f e4       	ldi	r24, 0x4F	; 79
    2214:	7f db       	rcall	.-2306   	; 0x1914 <writeReg>
    2216:	6c e2       	ldi	r22, 0x2C	; 44
	writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
    2218:	8e e4       	ldi	r24, 0x4E	; 78
    221a:	7c db       	rcall	.-2312   	; 0x1914 <writeReg>
    221c:	60 e0       	ldi	r22, 0x00	; 0
    221e:	8f ef       	ldi	r24, 0xFF	; 255
	writeReg(0xFF, 0x00);
    2220:	79 db       	rcall	.-2318   	; 0x1914 <writeReg>
    2222:	64 eb       	ldi	r22, 0xB4	; 180
    2224:	86 eb       	ldi	r24, 0xB6	; 182
    2226:	76 db       	rcall	.-2324   	; 0x1914 <writeReg>
	writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	81 11       	cpse	r24, r1
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <vl53l0x_init+0xda>
    222e:	60 e0       	ldi	r22, 0x00	; 0

	u8 first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
    2230:	01 c0       	rjmp	.+2      	; 0x2234 <vl53l0x_init+0xdc>
    2232:	6c e0       	ldi	r22, 0x0C	; 12
    2234:	a9 81       	ldd	r26, Y+1	; 0x01
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	70 e0       	ldi	r23, 0x00	; 0
    223a:	41 e0       	ldi	r20, 0x01	; 1
	u8 spads_enabled = 0;

	for (u8 i = 0; i < 48; i++)
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
    223c:	50 e0       	ldi	r21, 0x00	; 0
	writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

	u8 first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
	u8 spads_enabled = 0;

	for (u8 i = 0; i < 48; i++)
    223e:	86 17       	cp	r24, r22
	writeReg(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
	writeReg(0xFF, 0x00);
	writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

	u8 first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
	u8 spads_enabled = 0;
    2240:	10 f0       	brcs	.+4      	; 0x2246 <vl53l0x_init+0xee>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
    2242:	a7 13       	cpse	r26, r23
    2244:	18 c0       	rjmp	.+48     	; 0x2276 <vl53l0x_init+0x11e>
	u8 first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
	u8 spads_enabled = 0;

	for (u8 i = 0; i < 48; i++)
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
    2246:	98 2f       	mov	r25, r24
    2248:	96 95       	lsr	r25
    224a:	96 95       	lsr	r25
    224c:	96 95       	lsr	r25
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
    224e:	e3 e0       	ldi	r30, 0x03	; 3
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	ec 0f       	add	r30, r28
    2254:	fd 1f       	adc	r31, r29
    2256:	e9 0f       	add	r30, r25
    2258:	f1 1d       	adc	r31, r1
    225a:	98 2f       	mov	r25, r24
    225c:	97 70       	andi	r25, 0x07	; 7
    225e:	9a 01       	movw	r18, r20
    2260:	02 c0       	rjmp	.+4      	; 0x2266 <vl53l0x_init+0x10e>
    2262:	22 0f       	add	r18, r18
    2264:	33 1f       	adc	r19, r19
    2266:	9a 95       	dec	r25
    2268:	e2 f7       	brpl	.-8      	; 0x2262 <vl53l0x_init+0x10a>
    226a:	92 2f       	mov	r25, r18
    226c:	90 95       	com	r25
    226e:	20 81       	ld	r18, Z
    2270:	92 23       	and	r25, r18
    2272:	90 83       	st	Z, r25
    2274:	15 c0       	rjmp	.+42     	; 0x22a0 <vl53l0x_init+0x148>
    2276:	98 2f       	mov	r25, r24
    2278:	96 95       	lsr	r25
    227a:	96 95       	lsr	r25
    227c:	96 95       	lsr	r25
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
    227e:	e3 e0       	ldi	r30, 0x03	; 3
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	ec 0f       	add	r30, r28
    2284:	fd 1f       	adc	r31, r29
    2286:	e9 0f       	add	r30, r25
    2288:	f1 1d       	adc	r31, r1
    228a:	20 81       	ld	r18, Z
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	98 2f       	mov	r25, r24
    2290:	97 70       	andi	r25, 0x07	; 7
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <vl53l0x_init+0x140>
    2294:	35 95       	asr	r19
    2296:	27 95       	ror	r18
    2298:	9a 95       	dec	r25
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <vl53l0x_init+0x13c>
    229c:	20 fd       	sbrc	r18, 0
    229e:	7f 5f       	subi	r23, 0xFF	; 255
	writeReg(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);

	u8 first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
	u8 spads_enabled = 0;

	for (u8 i = 0; i < 48; i++)
    22a0:	8f 5f       	subi	r24, 0xFF	; 255
    22a2:	80 33       	cpi	r24, 0x30	; 48
		{
			spads_enabled++;
		}
	}

	writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
    22a4:	61 f6       	brne	.-104    	; 0x223e <vl53l0x_init+0xe6>
    22a6:	46 e0       	ldi	r20, 0x06	; 6
    22a8:	be 01       	movw	r22, r28
    22aa:	6d 5f       	subi	r22, 0xFD	; 253
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h

	writeReg(0xFF, 0x01);
    22ae:	80 eb       	ldi	r24, 0xB0	; 176
    22b0:	bd db       	rcall	.-2182   	; 0x1a2c <writeMulti>
    22b2:	61 e0       	ldi	r22, 0x01	; 1
	writeReg(0x00, 0x00);
    22b4:	8f ef       	ldi	r24, 0xFF	; 255
    22b6:	2e db       	rcall	.-2468   	; 0x1914 <writeReg>
    22b8:	60 e0       	ldi	r22, 0x00	; 0

	writeReg(0xFF, 0x00);
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	2b db       	rcall	.-2474   	; 0x1914 <writeReg>
    22be:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x09, 0x00);
    22c0:	8f ef       	ldi	r24, 0xFF	; 255
    22c2:	28 db       	rcall	.-2480   	; 0x1914 <writeReg>
    22c4:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x10, 0x00);
    22c6:	89 e0       	ldi	r24, 0x09	; 9
    22c8:	25 db       	rcall	.-2486   	; 0x1914 <writeReg>
    22ca:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x11, 0x00);
    22cc:	80 e1       	ldi	r24, 0x10	; 16
    22ce:	22 db       	rcall	.-2492   	; 0x1914 <writeReg>
    22d0:	60 e0       	ldi	r22, 0x00	; 0

	writeReg(0x24, 0x01);
    22d2:	81 e1       	ldi	r24, 0x11	; 17
    22d4:	1f db       	rcall	.-2498   	; 0x1914 <writeReg>
    22d6:	61 e0       	ldi	r22, 0x01	; 1
	writeReg(0x25, 0xFF);
    22d8:	84 e2       	ldi	r24, 0x24	; 36
    22da:	1c db       	rcall	.-2504   	; 0x1914 <writeReg>
    22dc:	6f ef       	ldi	r22, 0xFF	; 255
	writeReg(0x75, 0x00);
    22de:	85 e2       	ldi	r24, 0x25	; 37
    22e0:	19 db       	rcall	.-2510   	; 0x1914 <writeReg>
    22e2:	60 e0       	ldi	r22, 0x00	; 0

	writeReg(0xFF, 0x01);
    22e4:	85 e7       	ldi	r24, 0x75	; 117
    22e6:	16 db       	rcall	.-2516   	; 0x1914 <writeReg>
    22e8:	61 e0       	ldi	r22, 0x01	; 1
	writeReg(0x4E, 0x2C);
    22ea:	8f ef       	ldi	r24, 0xFF	; 255
    22ec:	13 db       	rcall	.-2522   	; 0x1914 <writeReg>
    22ee:	6c e2       	ldi	r22, 0x2C	; 44
	writeReg(0x48, 0x00);
    22f0:	8e e4       	ldi	r24, 0x4E	; 78
    22f2:	10 db       	rcall	.-2528   	; 0x1914 <writeReg>
    22f4:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x30, 0x20);
    22f6:	88 e4       	ldi	r24, 0x48	; 72
    22f8:	0d db       	rcall	.-2534   	; 0x1914 <writeReg>
    22fa:	60 e2       	ldi	r22, 0x20	; 32

	writeReg(0xFF, 0x00);
    22fc:	80 e3       	ldi	r24, 0x30	; 48
    22fe:	0a db       	rcall	.-2540   	; 0x1914 <writeReg>
    2300:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x30, 0x09);
    2302:	8f ef       	ldi	r24, 0xFF	; 255
    2304:	07 db       	rcall	.-2546   	; 0x1914 <writeReg>
    2306:	69 e0       	ldi	r22, 0x09	; 9
	writeReg(0x54, 0x00);
    2308:	80 e3       	ldi	r24, 0x30	; 48
    230a:	04 db       	rcall	.-2552   	; 0x1914 <writeReg>
    230c:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x31, 0x04);
    230e:	84 e5       	ldi	r24, 0x54	; 84
    2310:	01 db       	rcall	.-2558   	; 0x1914 <writeReg>
    2312:	64 e0       	ldi	r22, 0x04	; 4
	writeReg(0x32, 0x03);
    2314:	81 e3       	ldi	r24, 0x31	; 49
    2316:	fe da       	rcall	.-2564   	; 0x1914 <writeReg>
    2318:	63 e0       	ldi	r22, 0x03	; 3
	writeReg(0x40, 0x83);
    231a:	82 e3       	ldi	r24, 0x32	; 50
    231c:	fb da       	rcall	.-2570   	; 0x1914 <writeReg>
    231e:	63 e8       	ldi	r22, 0x83	; 131
	writeReg(0x46, 0x25);
    2320:	80 e4       	ldi	r24, 0x40	; 64
    2322:	f8 da       	rcall	.-2576   	; 0x1914 <writeReg>
    2324:	65 e2       	ldi	r22, 0x25	; 37
	writeReg(0x60, 0x00);
    2326:	86 e4       	ldi	r24, 0x46	; 70
    2328:	f5 da       	rcall	.-2582   	; 0x1914 <writeReg>
    232a:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x27, 0x00);
    232c:	80 e6       	ldi	r24, 0x60	; 96
    232e:	f2 da       	rcall	.-2588   	; 0x1914 <writeReg>
    2330:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x50, 0x06);
    2332:	87 e2       	ldi	r24, 0x27	; 39
    2334:	ef da       	rcall	.-2594   	; 0x1914 <writeReg>
    2336:	66 e0       	ldi	r22, 0x06	; 6
	writeReg(0x51, 0x00);
    2338:	80 e5       	ldi	r24, 0x50	; 80
    233a:	ec da       	rcall	.-2600   	; 0x1914 <writeReg>
    233c:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x52, 0x96);
    233e:	81 e5       	ldi	r24, 0x51	; 81
    2340:	e9 da       	rcall	.-2606   	; 0x1914 <writeReg>
    2342:	66 e9       	ldi	r22, 0x96	; 150
	writeReg(0x56, 0x08);
    2344:	82 e5       	ldi	r24, 0x52	; 82
    2346:	e6 da       	rcall	.-2612   	; 0x1914 <writeReg>
    2348:	68 e0       	ldi	r22, 0x08	; 8
	writeReg(0x57, 0x30);
    234a:	86 e5       	ldi	r24, 0x56	; 86
    234c:	e3 da       	rcall	.-2618   	; 0x1914 <writeReg>
    234e:	60 e3       	ldi	r22, 0x30	; 48
	writeReg(0x61, 0x00);
    2350:	87 e5       	ldi	r24, 0x57	; 87
    2352:	e0 da       	rcall	.-2624   	; 0x1914 <writeReg>
    2354:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x62, 0x00);
    2356:	81 e6       	ldi	r24, 0x61	; 97
    2358:	dd da       	rcall	.-2630   	; 0x1914 <writeReg>
    235a:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x64, 0x00);
    235c:	82 e6       	ldi	r24, 0x62	; 98
    235e:	da da       	rcall	.-2636   	; 0x1914 <writeReg>
    2360:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x65, 0x00);
    2362:	84 e6       	ldi	r24, 0x64	; 100
    2364:	d7 da       	rcall	.-2642   	; 0x1914 <writeReg>
    2366:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x66, 0xA0);
    2368:	85 e6       	ldi	r24, 0x65	; 101
    236a:	d4 da       	rcall	.-2648   	; 0x1914 <writeReg>
    236c:	60 ea       	ldi	r22, 0xA0	; 160

	writeReg(0xFF, 0x01);
    236e:	86 e6       	ldi	r24, 0x66	; 102
    2370:	d1 da       	rcall	.-2654   	; 0x1914 <writeReg>
    2372:	61 e0       	ldi	r22, 0x01	; 1
	writeReg(0x22, 0x32);
    2374:	8f ef       	ldi	r24, 0xFF	; 255
    2376:	ce da       	rcall	.-2660   	; 0x1914 <writeReg>
    2378:	62 e3       	ldi	r22, 0x32	; 50
	writeReg(0x47, 0x14);
    237a:	82 e2       	ldi	r24, 0x22	; 34
    237c:	cb da       	rcall	.-2666   	; 0x1914 <writeReg>
    237e:	64 e1       	ldi	r22, 0x14	; 20
	writeReg(0x49, 0xFF);
    2380:	87 e4       	ldi	r24, 0x47	; 71
    2382:	c8 da       	rcall	.-2672   	; 0x1914 <writeReg>
    2384:	6f ef       	ldi	r22, 0xFF	; 255
	writeReg(0x4A, 0x00);
    2386:	89 e4       	ldi	r24, 0x49	; 73
    2388:	c5 da       	rcall	.-2678   	; 0x1914 <writeReg>
    238a:	60 e0       	ldi	r22, 0x00	; 0

	writeReg(0xFF, 0x00);
    238c:	8a e4       	ldi	r24, 0x4A	; 74
    238e:	c2 da       	rcall	.-2684   	; 0x1914 <writeReg>
    2390:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x7A, 0x0A);
    2392:	8f ef       	ldi	r24, 0xFF	; 255
    2394:	bf da       	rcall	.-2690   	; 0x1914 <writeReg>
    2396:	6a e0       	ldi	r22, 0x0A	; 10
	writeReg(0x7B, 0x00);
    2398:	8a e7       	ldi	r24, 0x7A	; 122
    239a:	bc da       	rcall	.-2696   	; 0x1914 <writeReg>
    239c:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x78, 0x21);
    239e:	8b e7       	ldi	r24, 0x7B	; 123
    23a0:	b9 da       	rcall	.-2702   	; 0x1914 <writeReg>
    23a2:	61 e2       	ldi	r22, 0x21	; 33

	writeReg(0xFF, 0x01);
    23a4:	88 e7       	ldi	r24, 0x78	; 120
    23a6:	b6 da       	rcall	.-2708   	; 0x1914 <writeReg>
    23a8:	61 e0       	ldi	r22, 0x01	; 1
	writeReg(0x23, 0x34);
    23aa:	8f ef       	ldi	r24, 0xFF	; 255
    23ac:	b3 da       	rcall	.-2714   	; 0x1914 <writeReg>
    23ae:	64 e3       	ldi	r22, 0x34	; 52
	writeReg(0x42, 0x00);
    23b0:	83 e2       	ldi	r24, 0x23	; 35
    23b2:	b0 da       	rcall	.-2720   	; 0x1914 <writeReg>
    23b4:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x44, 0xFF);
    23b6:	82 e4       	ldi	r24, 0x42	; 66
    23b8:	ad da       	rcall	.-2726   	; 0x1914 <writeReg>
    23ba:	6f ef       	ldi	r22, 0xFF	; 255
	writeReg(0x45, 0x26);
    23bc:	84 e4       	ldi	r24, 0x44	; 68
    23be:	aa da       	rcall	.-2732   	; 0x1914 <writeReg>
    23c0:	66 e2       	ldi	r22, 0x26	; 38
	writeReg(0x46, 0x05);
    23c2:	85 e4       	ldi	r24, 0x45	; 69
    23c4:	a7 da       	rcall	.-2738   	; 0x1914 <writeReg>
    23c6:	65 e0       	ldi	r22, 0x05	; 5
	writeReg(0x40, 0x40);
    23c8:	86 e4       	ldi	r24, 0x46	; 70
    23ca:	a4 da       	rcall	.-2744   	; 0x1914 <writeReg>
    23cc:	60 e4       	ldi	r22, 0x40	; 64
	writeReg(0x0E, 0x06);
    23ce:	80 e4       	ldi	r24, 0x40	; 64
    23d0:	a1 da       	rcall	.-2750   	; 0x1914 <writeReg>
    23d2:	66 e0       	ldi	r22, 0x06	; 6
	writeReg(0x20, 0x1A);
    23d4:	8e e0       	ldi	r24, 0x0E	; 14
    23d6:	9e da       	rcall	.-2756   	; 0x1914 <writeReg>
    23d8:	6a e1       	ldi	r22, 0x1A	; 26
	writeReg(0x43, 0x40);
    23da:	80 e2       	ldi	r24, 0x20	; 32
    23dc:	9b da       	rcall	.-2762   	; 0x1914 <writeReg>
    23de:	60 e4       	ldi	r22, 0x40	; 64

	writeReg(0xFF, 0x00);
    23e0:	83 e4       	ldi	r24, 0x43	; 67
    23e2:	98 da       	rcall	.-2768   	; 0x1914 <writeReg>
    23e4:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x34, 0x03);
    23e6:	8f ef       	ldi	r24, 0xFF	; 255
    23e8:	95 da       	rcall	.-2774   	; 0x1914 <writeReg>
    23ea:	63 e0       	ldi	r22, 0x03	; 3
	writeReg(0x35, 0x44);
    23ec:	84 e3       	ldi	r24, 0x34	; 52
    23ee:	92 da       	rcall	.-2780   	; 0x1914 <writeReg>
    23f0:	64 e4       	ldi	r22, 0x44	; 68

	writeReg(0xFF, 0x01);
    23f2:	85 e3       	ldi	r24, 0x35	; 53
    23f4:	8f da       	rcall	.-2786   	; 0x1914 <writeReg>
    23f6:	61 e0       	ldi	r22, 0x01	; 1
	writeReg(0x31, 0x04);
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	8c da       	rcall	.-2792   	; 0x1914 <writeReg>
	writeReg(0x4B, 0x09);
    23fc:	64 e0       	ldi	r22, 0x04	; 4
    23fe:	81 e3       	ldi	r24, 0x31	; 49
    2400:	89 da       	rcall	.-2798   	; 0x1914 <writeReg>
	writeReg(0x4C, 0x05);
    2402:	69 e0       	ldi	r22, 0x09	; 9
    2404:	8b e4       	ldi	r24, 0x4B	; 75
	writeReg(0x4D, 0x04);
    2406:	86 da       	rcall	.-2804   	; 0x1914 <writeReg>
    2408:	65 e0       	ldi	r22, 0x05	; 5
    240a:	8c e4       	ldi	r24, 0x4C	; 76
    240c:	83 da       	rcall	.-2810   	; 0x1914 <writeReg>

	writeReg(0xFF, 0x00);
    240e:	64 e0       	ldi	r22, 0x04	; 4
    2410:	8d e4       	ldi	r24, 0x4D	; 77
    2412:	80 da       	rcall	.-2816   	; 0x1914 <writeReg>
    2414:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x44, 0x00);
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	7d da       	rcall	.-2822   	; 0x1914 <writeReg>
    241a:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x45, 0x20);
    241c:	84 e4       	ldi	r24, 0x44	; 68
    241e:	7a da       	rcall	.-2828   	; 0x1914 <writeReg>
    2420:	60 e2       	ldi	r22, 0x20	; 32
    2422:	85 e4       	ldi	r24, 0x45	; 69
	writeReg(0x47, 0x08);
    2424:	77 da       	rcall	.-2834   	; 0x1914 <writeReg>
    2426:	68 e0       	ldi	r22, 0x08	; 8
    2428:	87 e4       	ldi	r24, 0x47	; 71
	writeReg(0x48, 0x28);
    242a:	74 da       	rcall	.-2840   	; 0x1914 <writeReg>
    242c:	68 e2       	ldi	r22, 0x28	; 40
    242e:	88 e4       	ldi	r24, 0x48	; 72
	writeReg(0x67, 0x00);
    2430:	71 da       	rcall	.-2846   	; 0x1914 <writeReg>
    2432:	60 e0       	ldi	r22, 0x00	; 0
    2434:	87 e6       	ldi	r24, 0x67	; 103
    2436:	6e da       	rcall	.-2852   	; 0x1914 <writeReg>
	writeReg(0x70, 0x04);
    2438:	64 e0       	ldi	r22, 0x04	; 4
    243a:	80 e7       	ldi	r24, 0x70	; 112
	writeReg(0x71, 0x01);
    243c:	6b da       	rcall	.-2858   	; 0x1914 <writeReg>
    243e:	61 e0       	ldi	r22, 0x01	; 1
    2440:	81 e7       	ldi	r24, 0x71	; 113
	writeReg(0x72, 0xFE);
    2442:	68 da       	rcall	.-2864   	; 0x1914 <writeReg>
    2444:	6e ef       	ldi	r22, 0xFE	; 254
    2446:	82 e7       	ldi	r24, 0x72	; 114
    2448:	65 da       	rcall	.-2870   	; 0x1914 <writeReg>
	writeReg(0x76, 0x00);
    244a:	60 e0       	ldi	r22, 0x00	; 0
    244c:	86 e7       	ldi	r24, 0x76	; 118
    244e:	62 da       	rcall	.-2876   	; 0x1914 <writeReg>
    2450:	60 e0       	ldi	r22, 0x00	; 0
	writeReg(0x77, 0x00);
    2452:	87 e7       	ldi	r24, 0x77	; 119
    2454:	5f da       	rcall	.-2882   	; 0x1914 <writeReg>
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	8f ef       	ldi	r24, 0xFF	; 255

	writeReg(0xFF, 0x01);
    245a:	5c da       	rcall	.-2888   	; 0x1914 <writeReg>
    245c:	61 e0       	ldi	r22, 0x01	; 1
    245e:	8d e0       	ldi	r24, 0x0D	; 13
    2460:	59 da       	rcall	.-2894   	; 0x1914 <writeReg>
	writeReg(0x0D, 0x01);
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	8f ef       	ldi	r24, 0xFF	; 255
    2466:	56 da       	rcall	.-2900   	; 0x1914 <writeReg>
    2468:	61 e0       	ldi	r22, 0x01	; 1

	writeReg(0xFF, 0x00);
    246a:	80 e8       	ldi	r24, 0x80	; 128
    246c:	53 da       	rcall	.-2906   	; 0x1914 <writeReg>
    246e:	68 ef       	ldi	r22, 0xF8	; 248
    2470:	81 e0       	ldi	r24, 0x01	; 1
	writeReg(0x80, 0x01);
    2472:	50 da       	rcall	.-2912   	; 0x1914 <writeReg>
    2474:	61 e0       	ldi	r22, 0x01	; 1
    2476:	8f ef       	ldi	r24, 0xFF	; 255
    2478:	4d da       	rcall	.-2918   	; 0x1914 <writeReg>
	writeReg(0x01, 0xF8);
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	8e e8       	ldi	r24, 0x8E	; 142
    247e:	4a da       	rcall	.-2924   	; 0x1914 <writeReg>
    2480:	61 e0       	ldi	r22, 0x01	; 1

	writeReg(0xFF, 0x01);
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	47 da       	rcall	.-2930   	; 0x1914 <writeReg>
    2486:	60 e0       	ldi	r22, 0x00	; 0
    2488:	8f ef       	ldi	r24, 0xFF	; 255
	writeReg(0x8E, 0x01);
    248a:	44 da       	rcall	.-2936   	; 0x1914 <writeReg>
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	80 e8       	ldi	r24, 0x80	; 128
    2490:	41 da       	rcall	.-2942   	; 0x1914 <writeReg>
	writeReg(0x00, 0x01);
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	8a e0       	ldi	r24, 0x0A	; 10
    2496:	3e da       	rcall	.-2948   	; 0x1914 <writeReg>
    2498:	84 e8       	ldi	r24, 0x84	; 132
	writeReg(0xFF, 0x00);
    249a:	90 da       	rcall	.-2784   	; 0x19bc <readReg>
    249c:	68 2f       	mov	r22, r24
    249e:	6f 7e       	andi	r22, 0xEF	; 239
    24a0:	84 e8       	ldi	r24, 0x84	; 132
	writeReg(0x80, 0x00);
    24a2:	38 da       	rcall	.-2960   	; 0x1914 <writeReg>
    24a4:	61 e0       	ldi	r22, 0x01	; 1
    24a6:	8b e0       	ldi	r24, 0x0B	; 11
    24a8:	35 da       	rcall	.-2966   	; 0x1914 <writeReg>
	// -- VL53L0X_load_tuning_settings() end

	// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	writeReg(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
    24aa:	c4 dd       	rcall	.-1144   	; 0x2034 <vl53l0x_getMeasurementTimingBudget>
    24ac:	60 93 57 01 	sts	0x0157, r22	; 0x800157 <g_measTimBudUs>
    24b0:	70 93 58 01 	sts	0x0158, r23	; 0x800158 <g_measTimBudUs+0x1>
	writeReg(GPIO_HV_MUX_ACTIVE_HIGH, readReg(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
    24b4:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <g_measTimBudUs+0x2>
    24b8:	90 93 5a 01 	sts	0x015A, r25	; 0x80015a <g_measTimBudUs+0x3>
    24bc:	68 ee       	ldi	r22, 0xE8	; 232
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	29 da       	rcall	.-2990   	; 0x1914 <writeReg>
	writeReg(SYSTEM_INTERRUPT_CLEAR, 0x01);
    24c2:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <g_measTimBudUs>
    24c6:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <g_measTimBudUs+0x1>

	// -- VL53L0X_SetGpioConfig() end

	g_measTimBudUs = vl53l0x_getMeasurementTimingBudget();
    24ca:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <g_measTimBudUs+0x2>
    24ce:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <g_measTimBudUs+0x3>
    24d2:	d4 dc       	rcall	.-1624   	; 0x1e7c <vl53l0x_setMeasurementTimingBudget>
    24d4:	61 e0       	ldi	r22, 0x01	; 1
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	1d da       	rcall	.-3014   	; 0x1914 <writeReg>
    24da:	80 e4       	ldi	r24, 0x40	; 64
    24dc:	26 de       	rcall	.-948    	; 0x212a <performSingleRefCalibration>
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
    24de:	88 23       	and	r24, r24
    24e0:	59 f0       	breq	.+22     	; 0x24f8 <vl53l0x_init+0x3a0>
    24e2:	62 e0       	ldi	r22, 0x02	; 2
    24e4:	81 e0       	ldi	r24, 0x01	; 1

	// -- VL53L0X_SetSequenceStepEnable() end

	// "Recalculate timing budget"
	vl53l0x_setMeasurementTimingBudget(g_measTimBudUs);
    24e6:	16 da       	rcall	.-3028   	; 0x1914 <writeReg>
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	1f de       	rcall	.-962    	; 0x212a <performSingleRefCalibration>
    24ec:	88 23       	and	r24, r24
    24ee:	21 f0       	breq	.+8      	; 0x24f8 <vl53l0x_init+0x3a0>
    24f0:	68 ee       	ldi	r22, 0xE8	; 232
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	0f da       	rcall	.-3042   	; 0x1914 <writeReg>
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	28 96       	adiw	r28, 0x08	; 8

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0x01);
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
	if (!performSingleRefCalibration(0x40)) { return FALSE; }
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	08 95       	ret

0000250a <__udivmodsi4>:
    250a:	a1 e2       	ldi	r26, 0x21	; 33

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	writeReg(SYSTEM_SEQUENCE_CONFIG, 0x02);
    250c:	1a 2e       	mov	r1, r26
    250e:	aa 1b       	sub	r26, r26
    2510:	bb 1b       	sub	r27, r27
    2512:	fd 01       	movw	r30, r26
	if (!performSingleRefCalibration(0x00)) { return FALSE; }
    2514:	0d c0       	rjmp	.+26     	; 0x2530 <__udivmodsi4_ep>

00002516 <__udivmodsi4_loop>:
    2516:	aa 1f       	adc	r26, r26
    2518:	bb 1f       	adc	r27, r27
    251a:	ee 1f       	adc	r30, r30
    251c:	ff 1f       	adc	r31, r31

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	writeReg(SYSTEM_SEQUENCE_CONFIG, 0xE8);
    251e:	a2 17       	cp	r26, r18
    2520:	b3 07       	cpc	r27, r19
    2522:	e4 07       	cpc	r30, r20
    2524:	f5 07       	cpc	r31, r21

	// VL53L0X_PerformRefCalibration() end

	return TRUE;
    2526:	20 f0       	brcs	.+8      	; 0x2530 <__udivmodsi4_ep>
}
    2528:	a2 1b       	sub	r26, r18
    252a:	b3 0b       	sbc	r27, r19
    252c:	e4 0b       	sbc	r30, r20
    252e:	f5 0b       	sbc	r31, r21

00002530 <__udivmodsi4_ep>:
    2530:	66 1f       	adc	r22, r22
    2532:	77 1f       	adc	r23, r23
    2534:	88 1f       	adc	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	1a 94       	dec	r1
    253a:	69 f7       	brne	.-38     	; 0x2516 <__udivmodsi4_loop>
    253c:	60 95       	com	r22
    253e:	70 95       	com	r23
    2540:	80 95       	com	r24
    2542:	90 95       	com	r25
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	bd 01       	movw	r22, r26
    254a:	cf 01       	movw	r24, r30
    254c:	08 95       	ret

0000254e <__tablejump2__>:
    254e:	ee 0f       	add	r30, r30
    2550:	ff 1f       	adc	r31, r31
    2552:	00 24       	eor	r0, r0
    2554:	00 1c       	adc	r0, r0
    2556:	0b be       	out	0x3b, r0	; 59
    2558:	07 90       	elpm	r0, Z+
    255a:	f6 91       	elpm	r31, Z
    255c:	e0 2d       	mov	r30, r0
    255e:	09 94       	ijmp

00002560 <__umulhisi3>:
    2560:	a2 9f       	mul	r26, r18
    2562:	b0 01       	movw	r22, r0
    2564:	b3 9f       	mul	r27, r19
    2566:	c0 01       	movw	r24, r0
    2568:	a3 9f       	mul	r26, r19
    256a:	70 0d       	add	r23, r0
    256c:	81 1d       	adc	r24, r1
    256e:	11 24       	eor	r1, r1
    2570:	91 1d       	adc	r25, r1
    2572:	b2 9f       	mul	r27, r18
    2574:	70 0d       	add	r23, r0
    2576:	81 1d       	adc	r24, r1
    2578:	11 24       	eor	r1, r1
    257a:	91 1d       	adc	r25, r1
    257c:	08 95       	ret

0000257e <__muluhisi3>:
    257e:	f0 df       	rcall	.-32     	; 0x2560 <__umulhisi3>
    2580:	a5 9f       	mul	r26, r21
    2582:	90 0d       	add	r25, r0
    2584:	b4 9f       	mul	r27, r20
    2586:	90 0d       	add	r25, r0
    2588:	a4 9f       	mul	r26, r20
    258a:	80 0d       	add	r24, r0
    258c:	91 1d       	adc	r25, r1
    258e:	11 24       	eor	r1, r1
    2590:	08 95       	ret

00002592 <_exit>:
    2592:	f8 94       	cli

00002594 <__stop_program>:
    2594:	ff cf       	rjmp	.-2      	; 0x2594 <__stop_program>
