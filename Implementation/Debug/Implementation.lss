
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003578  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003504  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e0  00800100  00800100  00003578  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003578  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000035a8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000748  00000000  00000000  000035e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a818  00000000  00000000  00003d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000235b  00000000  00000000  0000e548  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003fc6  00000000  00000000  000108a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001b5c  00000000  00000000  0001486c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023ca  00000000  00000000  000163c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006278  00000000  00000000  00018792  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000698  00000000  00000000  0001ea0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	e4 c3       	rjmp	.+1992   	; 0x7ce <__vector_1>
       6:	00 00       	nop
       8:	ec c3       	rjmp	.+2008   	; 0x7e2 <__vector_2>
       a:	00 00       	nop
       c:	f4 c3       	rjmp	.+2024   	; 0x7f6 <__vector_3>
       e:	00 00       	nop
      10:	32 c3       	rjmp	.+1636   	; 0x676 <__vector_4>
      12:	00 00       	nop
      14:	5b c3       	rjmp	.+1718   	; 0x6cc <__vector_5>
      16:	00 00       	nop
      18:	84 c3       	rjmp	.+1800   	; 0x722 <__vector_6>
      1a:	00 00       	nop
      1c:	ad c3       	rjmp	.+1882   	; 0x778 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 93 0e 	jmp	0x1d26	; 0x1d26 <__vector_8>
      24:	0c 94 9e 0a 	jmp	0x153c	; 0x153c <__vector_9>
      28:	0c 94 da 0a 	jmp	0x15b4	; 0x15b4 <__vector_10>
      2c:	0c 94 73 0a 	jmp	0x14e6	; 0x14e6 <__vector_11>
      30:	0c 94 16 0a 	jmp	0x142c	; 0x142c <__vector_12>
      34:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <__vector_13>
      38:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__vector_14>
      3c:	0c 94 60 09 	jmp	0x12c0	; 0x12c0 <__vector_15>
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7a c7       	rjmp	.+3828   	; 0xf42 <__vector_19>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	e2 0b       	sbc	r30, r18
      8e:	eb 0b       	sbc	r30, r27
      90:	f4 0b       	sbc	r31, r20
      92:	fd 0b       	sbc	r31, r29
      94:	06 0c       	add	r0, r6
      96:	0f 0c       	add	r0, r15
      98:	18 0c       	add	r1, r8

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e4 e0       	ldi	r30, 0x04	; 4
      ae:	f5 e3       	ldi	r31, 0x35	; 53
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a0 3e       	cpi	r26, 0xE0	; 224
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:
#include <util/delay.h>
#include <avr/io.h>
#include <avr/interrupt.h>

int main()
{
      d8:	aa d2       	rcall	.+1364   	; 0x62e <device_disableJTAG>
      da:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <debug_init>
      de:	78 94       	sei
      e0:	e8 e3       	ldi	r30, 0x38	; 56
      e2:	f1 e0       	ldi	r31, 0x01	; 1
      e4:	10 86       	std	Z+8, r1	; 0x08
      e6:	84 e0       	ldi	r24, 0x04	; 4
      e8:	87 83       	std	Z+7, r24	; 0x07
      ea:	82 e0       	ldi	r24, 0x02	; 2
      ec:	86 83       	std	Z+6, r24	; 0x06
      ee:	11 86       	std	Z+9, r1	; 0x09
      f0:	14 86       	std	Z+12, r1	; 0x0c
      f2:	95 e0       	ldi	r25, 0x05	; 5
      f4:	93 87       	std	Z+11, r25	; 0x0b
      f6:	82 87       	std	Z+10, r24	; 0x0a
      f8:	15 86       	std	Z+13, r1	; 0x0d
      fa:	e8 e2       	ldi	r30, 0x28	; 40
      fc:	f1 e0       	ldi	r31, 0x01	; 1
      fe:	10 86       	std	Z+8, r1	; 0x08
     100:	96 e0       	ldi	r25, 0x06	; 6
     102:	97 83       	std	Z+7, r25	; 0x07
     104:	86 83       	std	Z+6, r24	; 0x06
     106:	11 86       	std	Z+9, r1	; 0x09
     108:	14 86       	std	Z+12, r1	; 0x0c
     10a:	97 e0       	ldi	r25, 0x07	; 7
     10c:	93 87       	std	Z+11, r25	; 0x0b
     10e:	82 87       	std	Z+10, r24	; 0x0a
     110:	15 86       	std	Z+13, r1	; 0x0d
     112:	88 e3       	ldi	r24, 0x38	; 56
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <encoder_init>
     11a:	88 e2       	ldi	r24, 0x28	; 40
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <encoder_init>
     122:	a0 90 38 01 	lds	r10, 0x0138	; 0x800138 <s_encoderLeft>
     126:	b0 90 39 01 	lds	r11, 0x0139	; 0x800139 <s_encoderLeft+0x1>
     12a:	c0 90 3a 01 	lds	r12, 0x013A	; 0x80013a <s_encoderLeft+0x2>
     12e:	d0 90 3b 01 	lds	r13, 0x013B	; 0x80013b <s_encoderLeft+0x3>
     132:	e0 90 3c 01 	lds	r14, 0x013C	; 0x80013c <s_encoderLeft+0x4>
     136:	f0 90 3d 01 	lds	r15, 0x013D	; 0x80013d <s_encoderLeft+0x5>
     13a:	00 91 3e 01 	lds	r16, 0x013E	; 0x80013e <s_encoderLeft+0x6>
     13e:	10 91 3f 01 	lds	r17, 0x013F	; 0x80013f <s_encoderLeft+0x7>
     142:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <s_encoderLeft+0x8>
     146:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <s_encoderLeft+0x9>
     14a:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <s_encoderLeft+0xa>
     14e:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <s_encoderLeft+0xb>
     152:	60 91 44 01 	lds	r22, 0x0144	; 0x800144 <s_encoderLeft+0xc>
     156:	70 91 45 01 	lds	r23, 0x0145	; 0x800145 <s_encoderLeft+0xd>
     15a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <s_encoderLeft+0xe>
     15e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <s_encoderLeft+0xf>
     162:	0e 94 95 10 	call	0x212a	; 0x212a <encoder_start>
     166:	a0 90 28 01 	lds	r10, 0x0128	; 0x800128 <s_encoderRight>
     16a:	b0 90 29 01 	lds	r11, 0x0129	; 0x800129 <s_encoderRight+0x1>
     16e:	c0 90 2a 01 	lds	r12, 0x012A	; 0x80012a <s_encoderRight+0x2>
     172:	d0 90 2b 01 	lds	r13, 0x012B	; 0x80012b <s_encoderRight+0x3>
     176:	e0 90 2c 01 	lds	r14, 0x012C	; 0x80012c <s_encoderRight+0x4>
     17a:	f0 90 2d 01 	lds	r15, 0x012D	; 0x80012d <s_encoderRight+0x5>
     17e:	00 91 2e 01 	lds	r16, 0x012E	; 0x80012e <s_encoderRight+0x6>
     182:	10 91 2f 01 	lds	r17, 0x012F	; 0x80012f <s_encoderRight+0x7>
     186:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <s_encoderRight+0x8>
     18a:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <s_encoderRight+0x9>
     18e:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <s_encoderRight+0xa>
     192:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <s_encoderRight+0xb>
     196:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <s_encoderRight+0xc>
     19a:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <s_encoderRight+0xd>
     19e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <s_encoderRight+0xe>
     1a2:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <s_encoderRight+0xf>
     1a6:	0e 94 95 10 	call	0x212a	; 0x212a <encoder_start>
     1aa:	88 e3       	ldi	r24, 0x38	; 56
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	0e 94 ce 10 	call	0x219c	; 0x219c <encoder_resetCounter>
     1b2:	e8 e0       	ldi	r30, 0x08	; 8
     1b4:	f1 e0       	ldi	r31, 0x01	; 1
     1b6:	14 82       	std	Z+4, r1	; 0x04
     1b8:	15 82       	std	Z+5, r1	; 0x05
     1ba:	16 82       	std	Z+6, r1	; 0x06
     1bc:	17 82       	std	Z+7, r1	; 0x07
     1be:	10 86       	std	Z+8, r1	; 0x08
     1c0:	11 86       	std	Z+9, r1	; 0x09
     1c2:	12 86       	std	Z+10, r1	; 0x0a
     1c4:	13 86       	std	Z+11, r1	; 0x0b
     1c6:	80 e0       	ldi	r24, 0x00	; 0
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	a0 e8       	ldi	r26, 0x80	; 128
     1cc:	bf e3       	ldi	r27, 0x3F	; 63
     1ce:	80 83       	st	Z, r24
     1d0:	91 83       	std	Z+1, r25	; 0x01
     1d2:	a2 83       	std	Z+2, r26	; 0x02
     1d4:	b3 83       	std	Z+3, r27	; 0x03
     1d6:	2d b7       	in	r18, 0x3d	; 61
     1d8:	3e b7       	in	r19, 0x3e	; 62
     1da:	2c 51       	subi	r18, 0x1C	; 28
     1dc:	31 09       	sbc	r19, r1
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	3e bf       	out	0x3e, r19	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	2d bf       	out	0x3d, r18	; 61
     1e8:	ad b7       	in	r26, 0x3d	; 61
     1ea:	be b7       	in	r27, 0x3e	; 62
     1ec:	11 96       	adiw	r26, 0x01	; 1
     1ee:	8c e1       	ldi	r24, 0x1C	; 28
     1f0:	01 90       	ld	r0, Z+
     1f2:	0d 92       	st	X+, r0
     1f4:	8a 95       	dec	r24
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0x118>
     1f8:	0e 94 4a 11 	call	0x2294	; 0x2294 <pid_init>
     1fc:	bb d0       	rcall	.+374    	; 0x374 <motor_turnOn>
     1fe:	a7 d0       	rcall	.+334    	; 0x34e <motor_moveForward>
     200:	8d b7       	in	r24, 0x3d	; 61
     202:	9e b7       	in	r25, 0x3e	; 62
     204:	4c 96       	adiw	r24, 0x1c	; 28
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	9e bf       	out	0x3e, r25	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	8d bf       	out	0x3d, r24	; 61
     210:	cc e3       	ldi	r28, 0x3C	; 60
     212:	8c 2f       	mov	r24, r28
     214:	73 d1       	rcall	.+742    	; 0x4fc <motor_changeSpeed>
     216:	9f e7       	ldi	r25, 0x7F	; 127
     218:	28 e3       	ldi	r18, 0x38	; 56
     21a:	31 e0       	ldi	r19, 0x01	; 1
     21c:	91 50       	subi	r25, 0x01	; 1
     21e:	20 40       	sbci	r18, 0x00	; 0
     220:	30 40       	sbci	r19, 0x00	; 0
     222:	e1 f7       	brne	.-8      	; 0x21c <main+0x144>
     224:	00 c0       	rjmp	.+0      	; 0x226 <main+0x14e>
     226:	00 00       	nop
     228:	cf 5f       	subi	r28, 0xFF	; 255
     22a:	c7 34       	cpi	r28, 0x47	; 71
     22c:	91 f7       	brne	.-28     	; 0x212 <main+0x13a>
     22e:	96 d1       	rcall	.+812    	; 0x55c <distanceSensor_multiInit>
     230:	8b e8       	ldi	r24, 0x8B	; 139
     232:	91 e0       	ldi	r25, 0x01	; 1
     234:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vl53l0x_start>
     238:	60 91 8b 01 	lds	r22, 0x018B	; 0x80018b <s_leftSensor>
     23c:	6f 5f       	subi	r22, 0xFF	; 255
     23e:	8b e8       	ldi	r24, 0x8B	; 139
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <vl53l0x_setAddress>
     246:	60 e0       	ldi	r22, 0x00	; 0
     248:	8b e8       	ldi	r24, 0x8B	; 139
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	0e 94 d7 17 	call	0x2fae	; 0x2fae <vl53l0x_setMode>
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	ba 01       	movw	r22, r20
     256:	8b e8       	ldi	r24, 0x8B	; 139
     258:	91 e0       	ldi	r25, 0x01	; 1
     25a:	0e 94 12 18 	call	0x3024	; 0x3024 <vl53l0x_startContinuous>
     25e:	85 e7       	ldi	r24, 0x75	; 117
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vl53l0x_start>
     266:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <s_rightSensor>
     26a:	6e 5f       	subi	r22, 0xFE	; 254
     26c:	85 e7       	ldi	r24, 0x75	; 117
     26e:	91 e0       	ldi	r25, 0x01	; 1
     270:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <vl53l0x_setAddress>
     274:	60 e0       	ldi	r22, 0x00	; 0
     276:	85 e7       	ldi	r24, 0x75	; 117
     278:	91 e0       	ldi	r25, 0x01	; 1
     27a:	0e 94 d7 17 	call	0x2fae	; 0x2fae <vl53l0x_setMode>
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	ba 01       	movw	r22, r20
     284:	85 e7       	ldi	r24, 0x75	; 117
     286:	91 e0       	ldi	r25, 0x01	; 1
     288:	0e 94 12 18 	call	0x3024	; 0x3024 <vl53l0x_startContinuous>
     28c:	80 e8       	ldi	r24, 0x80	; 128
     28e:	91 e0       	ldi	r25, 0x01	; 1
     290:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vl53l0x_start>
     294:	60 e0       	ldi	r22, 0x00	; 0
     296:	80 e8       	ldi	r24, 0x80	; 128
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 d7 17 	call	0x2fae	; 0x2fae <vl53l0x_setMode>
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	50 e0       	ldi	r21, 0x00	; 0
     2a2:	ba 01       	movw	r22, r20
     2a4:	80 e8       	ldi	r24, 0x80	; 128
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	0e 94 12 18 	call	0x3024	; 0x3024 <vl53l0x_startContinuous>
     2ac:	c8 e0       	ldi	r28, 0x08	; 8
     2ae:	d1 e0       	ldi	r29, 0x01	; 1
     2b0:	10 e0       	ldi	r17, 0x00	; 0
     2b2:	80 e8       	ldi	r24, 0x80	; 128
     2b4:	91 e0       	ldi	r25, 0x01	; 1
     2b6:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <vl53l0x_readRangeContinuous>
     2ba:	8f 3f       	cpi	r24, 0xFF	; 255
     2bc:	2f ef       	ldi	r18, 0xFF	; 255
     2be:	92 07       	cpc	r25, r18
     2c0:	c1 f3       	breq	.-16     	; 0x2b2 <main+0x1da>
     2c2:	bc 01       	movw	r22, r24
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 23 19 	call	0x3246	; 0x3246 <__floatunsisf>
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	48 ec       	ldi	r20, 0xC8	; 200
     2d2:	52 e4       	ldi	r21, 0x42	; 66
     2d4:	0e 94 89 18 	call	0x3112	; 0x3112 <__subsf3>
     2d8:	6b 01       	movw	r12, r22
     2da:	7c 01       	movw	r14, r24
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	30 e0       	ldi	r19, 0x00	; 0
     2e0:	4a ef       	ldi	r20, 0xFA	; 250
     2e2:	54 e4       	ldi	r21, 0x44	; 68
     2e4:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__gesf2>
     2e8:	18 16       	cp	r1, r24
     2ea:	2c f0       	brlt	.+10     	; 0x2f6 <main+0x21e>
     2ec:	cc 8a       	std	Y+20, r12	; 0x14
     2ee:	dd 8a       	std	Y+21, r13	; 0x15
     2f0:	ee 8a       	std	Y+22, r14	; 0x16
     2f2:	ff 8a       	std	Y+23, r15	; 0x17
     2f4:	08 c0       	rjmp	.+16     	; 0x306 <main+0x22e>
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	aa ef       	ldi	r26, 0xFA	; 250
     2fc:	b4 e4       	ldi	r27, 0x44	; 68
     2fe:	8c 8b       	std	Y+20, r24	; 0x14
     300:	9d 8b       	std	Y+21, r25	; 0x15
     302:	ae 8b       	std	Y+22, r26	; 0x16
     304:	bf 8b       	std	Y+23, r27	; 0x17
     306:	8d b7       	in	r24, 0x3d	; 61
     308:	9e b7       	in	r25, 0x3e	; 62
     30a:	4c 97       	sbiw	r24, 0x1c	; 28
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	f8 94       	cli
     310:	9e bf       	out	0x3e, r25	; 62
     312:	0f be       	out	0x3f, r0	; 63
     314:	8d bf       	out	0x3d, r24	; 61
     316:	ad b7       	in	r26, 0x3d	; 61
     318:	be b7       	in	r27, 0x3e	; 62
     31a:	11 96       	adiw	r26, 0x01	; 1
     31c:	8c e1       	ldi	r24, 0x1C	; 28
     31e:	fe 01       	movw	r30, r28
     320:	01 90       	ld	r0, Z+
     322:	0d 92       	st	X+, r0
     324:	8a 95       	dec	r24
     326:	e1 f7       	brne	.-8      	; 0x320 <main+0x248>
     328:	0e 94 51 11 	call	0x22a2	; 0x22a2 <pid_getCorrection>
     32c:	2d b7       	in	r18, 0x3d	; 61
     32e:	3e b7       	in	r19, 0x3e	; 62
     330:	24 5e       	subi	r18, 0xE4	; 228
     332:	3f 4f       	sbci	r19, 0xFF	; 255
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	f8 94       	cli
     338:	3e bf       	out	0x3e, r19	; 62
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	2d bf       	out	0x3d, r18	; 61
     33e:	8d 33       	cpi	r24, 0x3D	; 61
     340:	0c f0       	brlt	.+2      	; 0x344 <main+0x26c>
     342:	8c e3       	ldi	r24, 0x3C	; 60
     344:	88 23       	and	r24, r24
     346:	0c f4       	brge	.+2      	; 0x34a <main+0x272>
     348:	81 2f       	mov	r24, r17
     34a:	d8 d0       	rcall	.+432    	; 0x4fc <motor_changeSpeed>
     34c:	b2 cf       	rjmp	.-156    	; 0x2b2 <main+0x1da>

0000034e <motor_moveForward>:
void motor_turnOff(){
	motor_stop(motorLeft);
	motor_stop(motorRight);
	motor_driverDisable(motorLeft);
	motor_driverDisable(motorRight);
}
     34e:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <motorLeft+0x4>
     352:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <motorLeft+0x5>
     356:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <motorLeft+0x6>
     35a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <motorLeft+0x7>
     35e:	ad d2       	rcall	.+1370   	; 0x8ba <gpio_out_reset>
     360:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <motorRight+0x4>
     364:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <motorRight+0x5>
     368:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <motorRight+0x6>
     36c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <motorRight+0x7>
     370:	a4 c2       	rjmp	.+1352   	; 0x8ba <gpio_out_reset>
     372:	08 95       	ret

00000374 <motor_turnOn>:
     374:	cf 93       	push	r28
     376:	ec e5       	ldi	r30, 0x5C	; 92
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	13 8a       	std	Z+19, r1	; 0x13
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	86 83       	std	Z+6, r24	; 0x06
     380:	96 e0       	ldi	r25, 0x06	; 6
     382:	95 83       	std	Z+5, r25	; 0x05
     384:	93 e0       	ldi	r25, 0x03	; 3
     386:	94 83       	std	Z+4, r25	; 0x04
     388:	17 82       	std	Z+7, r1	; 0x07
     38a:	82 83       	std	Z+2, r24	; 0x02
     38c:	22 e0       	ldi	r18, 0x02	; 2
     38e:	21 83       	std	Z+1, r18	; 0x01
     390:	90 83       	st	Z, r25
     392:	13 82       	std	Z+3, r1	; 0x03
     394:	80 87       	std	Z+8, r24	; 0x08
     396:	40 ea       	ldi	r20, 0xA0	; 160
     398:	56 e8       	ldi	r21, 0x86	; 134
     39a:	61 e0       	ldi	r22, 0x01	; 1
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	41 87       	std	Z+9, r20	; 0x09
     3a0:	52 87       	std	Z+10, r21	; 0x0a
     3a2:	63 87       	std	Z+11, r22	; 0x0b
     3a4:	74 87       	std	Z+12, r23	; 0x0c
     3a6:	87 87       	std	Z+15, r24	; 0x0f
     3a8:	10 8a       	std	Z+16, r1	; 0x10
     3aa:	16 86       	std	Z+14, r1	; 0x0e
     3ac:	15 86       	std	Z+13, r1	; 0x0d
     3ae:	e8 e4       	ldi	r30, 0x48	; 72
     3b0:	f1 e0       	ldi	r31, 0x01	; 1
     3b2:	83 8b       	std	Z+19, r24	; 0x13
     3b4:	86 83       	std	Z+6, r24	; 0x06
     3b6:	95 83       	std	Z+5, r25	; 0x05
     3b8:	94 83       	std	Z+4, r25	; 0x04
     3ba:	17 82       	std	Z+7, r1	; 0x07
     3bc:	82 83       	std	Z+2, r24	; 0x02
     3be:	21 83       	std	Z+1, r18	; 0x01
     3c0:	90 83       	st	Z, r25
     3c2:	13 82       	std	Z+3, r1	; 0x03
     3c4:	80 87       	std	Z+8, r24	; 0x08
     3c6:	41 87       	std	Z+9, r20	; 0x09
     3c8:	52 87       	std	Z+10, r21	; 0x0a
     3ca:	63 87       	std	Z+11, r22	; 0x0b
     3cc:	74 87       	std	Z+12, r23	; 0x0c
     3ce:	81 8b       	std	Z+17, r24	; 0x11
     3d0:	12 8a       	std	Z+18, r1	; 0x12
     3d2:	16 86       	std	Z+14, r1	; 0x0e
     3d4:	15 86       	std	Z+13, r1	; 0x0d
     3d6:	8d b7       	in	r24, 0x3d	; 61
     3d8:	9e b7       	in	r25, 0x3e	; 62
     3da:	44 97       	sbiw	r24, 0x14	; 20
     3dc:	0f b6       	in	r0, 0x3f	; 63
     3de:	f8 94       	cli
     3e0:	9e bf       	out	0x3e, r25	; 62
     3e2:	0f be       	out	0x3f, r0	; 63
     3e4:	8d bf       	out	0x3d, r24	; 61
     3e6:	ad b7       	in	r26, 0x3d	; 61
     3e8:	be b7       	in	r27, 0x3e	; 62
     3ea:	11 96       	adiw	r26, 0x01	; 1
     3ec:	84 e1       	ldi	r24, 0x14	; 20
     3ee:	ec e5       	ldi	r30, 0x5C	; 92
     3f0:	f1 e0       	ldi	r31, 0x01	; 1
     3f2:	01 90       	ld	r0, Z+
     3f4:	0d 92       	st	X+, r0
     3f6:	8a 95       	dec	r24
     3f8:	e1 f7       	brne	.-8      	; 0x3f2 <motor_turnOn+0x7e>
     3fa:	0e 94 d6 10 	call	0x21ac	; 0x21ac <motor_init>
     3fe:	8d b7       	in	r24, 0x3d	; 61
     400:	9e b7       	in	r25, 0x3e	; 62
     402:	44 97       	sbiw	r24, 0x14	; 20
     404:	0f b6       	in	r0, 0x3f	; 63
     406:	f8 94       	cli
     408:	9e bf       	out	0x3e, r25	; 62
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	8d bf       	out	0x3d, r24	; 61
     40e:	ad b7       	in	r26, 0x3d	; 61
     410:	be b7       	in	r27, 0x3e	; 62
     412:	11 96       	adiw	r26, 0x01	; 1
     414:	84 e1       	ldi	r24, 0x14	; 20
     416:	e8 e4       	ldi	r30, 0x48	; 72
     418:	f1 e0       	ldi	r31, 0x01	; 1
     41a:	01 90       	ld	r0, Z+
     41c:	0d 92       	st	X+, r0
     41e:	8a 95       	dec	r24
     420:	e1 f7       	brne	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     422:	0e 94 d6 10 	call	0x21ac	; 0x21ac <motor_init>
     426:	8d b7       	in	r24, 0x3d	; 61
     428:	9e b7       	in	r25, 0x3e	; 62
     42a:	88 96       	adiw	r24, 0x28	; 40
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	9e bf       	out	0x3e, r25	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	8d bf       	out	0x3d, r24	; 61
     436:	44 97       	sbiw	r24, 0x14	; 20
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	9e bf       	out	0x3e, r25	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	8d bf       	out	0x3d, r24	; 61
     442:	ad b7       	in	r26, 0x3d	; 61
     444:	be b7       	in	r27, 0x3e	; 62
     446:	11 96       	adiw	r26, 0x01	; 1
     448:	84 e1       	ldi	r24, 0x14	; 20
     44a:	ec e5       	ldi	r30, 0x5C	; 92
     44c:	f1 e0       	ldi	r31, 0x01	; 1
     44e:	01 90       	ld	r0, Z+
     450:	0d 92       	st	X+, r0
     452:	8a 95       	dec	r24
     454:	e1 f7       	brne	.-8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
     456:	0e 94 ed 10 	call	0x21da	; 0x21da <motor_start>
     45a:	8d b7       	in	r24, 0x3d	; 61
     45c:	9e b7       	in	r25, 0x3e	; 62
     45e:	44 97       	sbiw	r24, 0x14	; 20
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	9e bf       	out	0x3e, r25	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	8d bf       	out	0x3d, r24	; 61
     46a:	ad b7       	in	r26, 0x3d	; 61
     46c:	be b7       	in	r27, 0x3e	; 62
     46e:	11 96       	adiw	r26, 0x01	; 1
     470:	84 e1       	ldi	r24, 0x14	; 20
     472:	e8 e4       	ldi	r30, 0x48	; 72
     474:	f1 e0       	ldi	r31, 0x01	; 1
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	8a 95       	dec	r24
     47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47e:	0e 94 ed 10 	call	0x21da	; 0x21da <motor_start>
     482:	8d b7       	in	r24, 0x3d	; 61
     484:	9e b7       	in	r25, 0x3e	; 62
     486:	88 96       	adiw	r24, 0x28	; 40
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	9e bf       	out	0x3e, r25	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	8d bf       	out	0x3d, r24	; 61
     492:	cc e3       	ldi	r28, 0x3C	; 60
     494:	cf 93       	push	r28
     496:	8d b7       	in	r24, 0x3d	; 61
     498:	9e b7       	in	r25, 0x3e	; 62
     49a:	44 97       	sbiw	r24, 0x14	; 20
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	9e bf       	out	0x3e, r25	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	8d bf       	out	0x3d, r24	; 61
     4a6:	ad b7       	in	r26, 0x3d	; 61
     4a8:	be b7       	in	r27, 0x3e	; 62
     4aa:	11 96       	adiw	r26, 0x01	; 1
     4ac:	84 e1       	ldi	r24, 0x14	; 20
     4ae:	ec e5       	ldi	r30, 0x5C	; 92
     4b0:	f1 e0       	ldi	r31, 0x01	; 1
     4b2:	01 90       	ld	r0, Z+
     4b4:	0d 92       	st	X+, r0
     4b6:	8a 95       	dec	r24
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4ba:	0e 94 28 11 	call	0x2250	; 0x2250 <motor_speed>
     4be:	cf 93       	push	r28
     4c0:	8d b7       	in	r24, 0x3d	; 61
     4c2:	9e b7       	in	r25, 0x3e	; 62
     4c4:	44 97       	sbiw	r24, 0x14	; 20
     4c6:	0f b6       	in	r0, 0x3f	; 63
     4c8:	f8 94       	cli
     4ca:	9e bf       	out	0x3e, r25	; 62
     4cc:	0f be       	out	0x3f, r0	; 63
     4ce:	8d bf       	out	0x3d, r24	; 61
     4d0:	ad b7       	in	r26, 0x3d	; 61
     4d2:	be b7       	in	r27, 0x3e	; 62
     4d4:	11 96       	adiw	r26, 0x01	; 1
     4d6:	84 e1       	ldi	r24, 0x14	; 20
     4d8:	e8 e4       	ldi	r30, 0x48	; 72
     4da:	f1 e0       	ldi	r31, 0x01	; 1
     4dc:	01 90       	ld	r0, Z+
     4de:	0d 92       	st	X+, r0
     4e0:	8a 95       	dec	r24
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
     4e4:	0e 94 28 11 	call	0x2250	; 0x2250 <motor_speed>
     4e8:	8d b7       	in	r24, 0x3d	; 61
     4ea:	9e b7       	in	r25, 0x3e	; 62
     4ec:	8a 96       	adiw	r24, 0x2a	; 42
     4ee:	0f b6       	in	r0, 0x3f	; 63
     4f0:	f8 94       	cli
     4f2:	9e bf       	out	0x3e, r25	; 62
     4f4:	0f be       	out	0x3f, r0	; 63
     4f6:	8d bf       	out	0x3d, r24	; 61
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <motor_changeSpeed>:

void motor_changeSpeed(u8 speed){
     4fc:	af 92       	push	r10
     4fe:	cf 92       	push	r12
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	cf 93       	push	r28
	pwm_setDutyCycle(motorLeft.PWM, motorLeft.channel, speed);
     50a:	e4 e6       	ldi	r30, 0x64	; 100
     50c:	f1 e0       	ldi	r31, 0x01	; 1
     50e:	a8 2e       	mov	r10, r24
     510:	c0 90 6f 01 	lds	r12, 0x016F	; 0x80016f <motorLeft+0x13>
     514:	e0 80       	ld	r14, Z
     516:	f1 80       	ldd	r15, Z+1	; 0x01
     518:	02 81       	ldd	r16, Z+2	; 0x02
     51a:	13 81       	ldd	r17, Z+3	; 0x03
     51c:	24 81       	ldd	r18, Z+4	; 0x04
     51e:	35 81       	ldd	r19, Z+5	; 0x05
     520:	46 81       	ldd	r20, Z+6	; 0x06
     522:	57 81       	ldd	r21, Z+7	; 0x07
     524:	60 85       	ldd	r22, Z+8	; 0x08
     526:	71 85       	ldd	r23, Z+9	; 0x09
     528:	82 85       	ldd	r24, Z+10	; 0x0a
     52a:	ba d4       	rcall	.+2420   	; 0xea0 <pwm_setDutyCycle>
	pwm_setDutyCycle(motorRight.PWM, motorRight.channel, speed);
     52c:	e0 e5       	ldi	r30, 0x50	; 80
     52e:	f1 e0       	ldi	r31, 0x01	; 1
     530:	c0 90 5b 01 	lds	r12, 0x015B	; 0x80015b <motorRight+0x13>
     534:	e0 80       	ld	r14, Z
     536:	f1 80       	ldd	r15, Z+1	; 0x01
     538:	02 81       	ldd	r16, Z+2	; 0x02
     53a:	13 81       	ldd	r17, Z+3	; 0x03
     53c:	24 81       	ldd	r18, Z+4	; 0x04
     53e:	35 81       	ldd	r19, Z+5	; 0x05
     540:	46 81       	ldd	r20, Z+6	; 0x06
     542:	57 81       	ldd	r21, Z+7	; 0x07
     544:	60 85       	ldd	r22, Z+8	; 0x08
     546:	71 85       	ldd	r23, Z+9	; 0x09
     548:	82 85       	ldd	r24, Z+10	; 0x0a
     54a:	aa d4       	rcall	.+2388   	; 0xea0 <pwm_setDutyCycle>
}
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	cf 90       	pop	r12
     558:	af 90       	pop	r10
     55a:	08 95       	ret

0000055c <distanceSensor_multiInit>:
		}
	}
}

void distanceSensor_multiInit()
{
     55c:	0f 93       	push	r16
     55e:	1f 93       	push	r17
	s_timeoutTimer.frequency = 1000;
     560:	e0 e7       	ldi	r30, 0x70	; 112
     562:	f1 e0       	ldi	r31, 0x01	; 1
     564:	88 ee       	ldi	r24, 0xE8	; 232
     566:	58 2f       	mov	r21, r24
     568:	81 83       	std	Z+1, r24	; 0x01
     56a:	83 e0       	ldi	r24, 0x03	; 3
     56c:	82 83       	std	Z+2, r24	; 0x02
     56e:	13 82       	std	Z+3, r1	; 0x03
     570:	14 82       	std	Z+4, r1	; 0x04
	s_timeoutTimer.peripheral = TIMER1;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	48 2f       	mov	r20, r24
     576:	80 83       	st	Z, r24
	timer_init(s_timeoutTimer);
     578:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <s_timeoutTimer+0x2>
     57c:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <s_timeoutTimer+0x3>
     580:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <s_timeoutTimer+0x4>
     584:	0e 94 05 0b 	call	0x160a	; 0x160a <timer_init>
	timer_attachInterrupt(s_timeoutTimer, OVERFLOW, vl53l0x_incrementTimeoutCounter);
     588:	05 e7       	ldi	r16, 0x75	; 117
     58a:	18 e1       	ldi	r17, 0x18	; 24
     58c:	20 e0       	ldi	r18, 0x00	; 0
     58e:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <s_timeoutTimer>
     592:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <s_timeoutTimer+0x1>
     596:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <s_timeoutTimer+0x2>
     59a:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <s_timeoutTimer+0x3>
     59e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <s_timeoutTimer+0x4>
     5a2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <timer_attachInterrupt>
	timer_enableInterrupt(s_timeoutTimer, OVERFLOW);
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <s_timeoutTimer>
     5ac:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <s_timeoutTimer+0x1>
     5b0:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <s_timeoutTimer+0x2>
     5b4:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <s_timeoutTimer+0x3>
     5b8:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <s_timeoutTimer+0x4>
     5bc:	0e 94 96 0c 	call	0x192c	; 0x192c <timer_enableInterrupt>
	timer_start(s_timeoutTimer);
     5c0:	40 91 70 01 	lds	r20, 0x0170	; 0x800170 <s_timeoutTimer>
     5c4:	50 91 71 01 	lds	r21, 0x0171	; 0x800171 <s_timeoutTimer+0x1>
     5c8:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <s_timeoutTimer+0x2>
     5cc:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <s_timeoutTimer+0x3>
     5d0:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <s_timeoutTimer+0x4>
     5d4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <timer_start>

	s_frontSensor.address = VL53L0X_ADDRESS_DEFAULT;
     5d8:	e0 e8       	ldi	r30, 0x80	; 128
     5da:	f1 e0       	ldi	r31, 0x01	; 1
     5dc:	99 e2       	ldi	r25, 0x29	; 41
     5de:	90 83       	st	Z, r25
	s_frontSensor.i2cTimeout = 100;
     5e0:	24 e6       	ldi	r18, 0x64	; 100
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	32 83       	std	Z+2, r19	; 0x02
     5e6:	21 83       	std	Z+1, r18	; 0x01
	s_frontSensor.xshutPin.port = PD;
     5e8:	43 e0       	ldi	r20, 0x03	; 3
     5ea:	44 83       	std	Z+4, r20	; 0x04
	s_frontSensor.xshutPin.number = 7;
     5ec:	87 e0       	ldi	r24, 0x07	; 7
     5ee:	85 83       	std	Z+5, r24	; 0x05

	s_leftSensor.address = VL53L0X_ADDRESS_DEFAULT;
     5f0:	eb e8       	ldi	r30, 0x8B	; 139
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	90 83       	st	Z, r25
	s_leftSensor.i2cTimeout = 100;
     5f6:	32 83       	std	Z+2, r19	; 0x02
     5f8:	21 83       	std	Z+1, r18	; 0x01
	s_leftSensor.xshutPin.port = PC;
     5fa:	82 e0       	ldi	r24, 0x02	; 2
     5fc:	84 83       	std	Z+4, r24	; 0x04
	s_leftSensor.xshutPin.number = 2;
     5fe:	85 83       	std	Z+5, r24	; 0x05

	s_rightSensor.address = VL53L0X_ADDRESS_DEFAULT;
     600:	e5 e7       	ldi	r30, 0x75	; 117
     602:	f1 e0       	ldi	r31, 0x01	; 1
     604:	90 83       	st	Z, r25
	s_rightSensor.i2cTimeout = 100;
     606:	32 83       	std	Z+2, r19	; 0x02
     608:	21 83       	std	Z+1, r18	; 0x01
	s_rightSensor.xshutPin.port = PC;
     60a:	84 83       	std	Z+4, r24	; 0x04
	s_rightSensor.xshutPin.number = 3;
     60c:	45 83       	std	Z+5, r20	; 0x05

	sei();
     60e:	78 94       	sei

	vl53l0x_init(&s_frontSensor);
     610:	80 e8       	ldi	r24, 0x80	; 128
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vl53l0x_init>
	vl53l0x_init(&s_leftSensor);
     618:	8b e8       	ldi	r24, 0x8B	; 139
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vl53l0x_init>
	vl53l0x_init(&s_rightSensor);
     620:	85 e7       	ldi	r24, 0x75	; 117
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 60 15 	call	0x2ac0	; 0x2ac0 <vl53l0x_init>
}
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
     62e:	80 e8       	ldi	r24, 0x80	; 128
     630:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     632:	85 bf       	out	0x35, r24	; 53
     634:	08 95       	ret

00000636 <gpio_changeDirection>:
		#ifdef USING_EXTINT
			}
		#endif
			break;
	}
}
     636:	61 30       	cpi	r22, 0x01	; 1
     638:	61 f0       	breq	.+24     	; 0x652 <gpio_changeDirection+0x1c>
     63a:	28 f0       	brcs	.+10     	; 0x646 <gpio_changeDirection+0x10>
     63c:	62 30       	cpi	r22, 0x02	; 2
     63e:	79 f0       	breq	.+30     	; 0x65e <gpio_changeDirection+0x28>
     640:	63 30       	cpi	r22, 0x03	; 3
     642:	99 f0       	breq	.+38     	; 0x66a <gpio_changeDirection+0x34>
     644:	08 95       	ret
     646:	48 2f       	mov	r20, r24
     648:	67 2f       	mov	r22, r23
     64a:	81 e2       	ldi	r24, 0x21	; 33
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	30 c3       	rjmp	.+1632   	; 0xcb0 <updateBit>
     650:	08 95       	ret
     652:	48 2f       	mov	r20, r24
     654:	67 2f       	mov	r22, r23
     656:	84 e2       	ldi	r24, 0x24	; 36
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	2a c3       	rjmp	.+1620   	; 0xcb0 <updateBit>
     65c:	08 95       	ret
     65e:	48 2f       	mov	r20, r24
     660:	67 2f       	mov	r22, r23
     662:	87 e2       	ldi	r24, 0x27	; 39
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	24 c3       	rjmp	.+1608   	; 0xcb0 <updateBit>
     668:	08 95       	ret
     66a:	48 2f       	mov	r20, r24
     66c:	67 2f       	mov	r22, r23
     66e:	8a e2       	ldi	r24, 0x2A	; 42
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	1e c3       	rjmp	.+1596   	; 0xcb0 <updateBit>
     674:	08 95       	ret

00000676 <__vector_4>:
     676:	1f 92       	push	r1
     678:	0f 92       	push	r0
     67a:	0f b6       	in	r0, 0x3f	; 63
     67c:	0f 92       	push	r0
     67e:	11 24       	eor	r1, r1
     680:	0b b6       	in	r0, 0x3b	; 59
     682:	0f 92       	push	r0
     684:	2f 93       	push	r18
     686:	3f 93       	push	r19
     688:	4f 93       	push	r20
     68a:	5f 93       	push	r21
     68c:	6f 93       	push	r22
     68e:	7f 93       	push	r23
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
     694:	af 93       	push	r26
     696:	bf 93       	push	r27
     698:	ef 93       	push	r30
     69a:	ff 93       	push	r31
     69c:	e0 91 9c 01 	lds	r30, 0x019C	; 0x80019c <p_pcInt0Callback>
     6a0:	f0 91 9d 01 	lds	r31, 0x019D	; 0x80019d <p_pcInt0Callback+0x1>
     6a4:	09 95       	icall
     6a6:	ff 91       	pop	r31
     6a8:	ef 91       	pop	r30
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	7f 91       	pop	r23
     6b4:	6f 91       	pop	r22
     6b6:	5f 91       	pop	r21
     6b8:	4f 91       	pop	r20
     6ba:	3f 91       	pop	r19
     6bc:	2f 91       	pop	r18
     6be:	0f 90       	pop	r0
     6c0:	0b be       	out	0x3b, r0	; 59
     6c2:	0f 90       	pop	r0
     6c4:	0f be       	out	0x3f, r0	; 63
     6c6:	0f 90       	pop	r0
     6c8:	1f 90       	pop	r1
     6ca:	18 95       	reti

000006cc <__vector_5>:
     6cc:	1f 92       	push	r1
     6ce:	0f 92       	push	r0
     6d0:	0f b6       	in	r0, 0x3f	; 63
     6d2:	0f 92       	push	r0
     6d4:	11 24       	eor	r1, r1
     6d6:	0b b6       	in	r0, 0x3b	; 59
     6d8:	0f 92       	push	r0
     6da:	2f 93       	push	r18
     6dc:	3f 93       	push	r19
     6de:	4f 93       	push	r20
     6e0:	5f 93       	push	r21
     6e2:	6f 93       	push	r22
     6e4:	7f 93       	push	r23
     6e6:	8f 93       	push	r24
     6e8:	9f 93       	push	r25
     6ea:	af 93       	push	r26
     6ec:	bf 93       	push	r27
     6ee:	ef 93       	push	r30
     6f0:	ff 93       	push	r31
     6f2:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <p_pcInt1Callback>
     6f6:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <p_pcInt1Callback+0x1>
     6fa:	09 95       	icall
     6fc:	ff 91       	pop	r31
     6fe:	ef 91       	pop	r30
     700:	bf 91       	pop	r27
     702:	af 91       	pop	r26
     704:	9f 91       	pop	r25
     706:	8f 91       	pop	r24
     708:	7f 91       	pop	r23
     70a:	6f 91       	pop	r22
     70c:	5f 91       	pop	r21
     70e:	4f 91       	pop	r20
     710:	3f 91       	pop	r19
     712:	2f 91       	pop	r18
     714:	0f 90       	pop	r0
     716:	0b be       	out	0x3b, r0	; 59
     718:	0f 90       	pop	r0
     71a:	0f be       	out	0x3f, r0	; 63
     71c:	0f 90       	pop	r0
     71e:	1f 90       	pop	r1
     720:	18 95       	reti

00000722 <__vector_6>:
     722:	1f 92       	push	r1
     724:	0f 92       	push	r0
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	0f 92       	push	r0
     72a:	11 24       	eor	r1, r1
     72c:	0b b6       	in	r0, 0x3b	; 59
     72e:	0f 92       	push	r0
     730:	2f 93       	push	r18
     732:	3f 93       	push	r19
     734:	4f 93       	push	r20
     736:	5f 93       	push	r21
     738:	6f 93       	push	r22
     73a:	7f 93       	push	r23
     73c:	8f 93       	push	r24
     73e:	9f 93       	push	r25
     740:	af 93       	push	r26
     742:	bf 93       	push	r27
     744:	ef 93       	push	r30
     746:	ff 93       	push	r31
     748:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <p_pcInt2Callback>
     74c:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <p_pcInt2Callback+0x1>
     750:	09 95       	icall
     752:	ff 91       	pop	r31
     754:	ef 91       	pop	r30
     756:	bf 91       	pop	r27
     758:	af 91       	pop	r26
     75a:	9f 91       	pop	r25
     75c:	8f 91       	pop	r24
     75e:	7f 91       	pop	r23
     760:	6f 91       	pop	r22
     762:	5f 91       	pop	r21
     764:	4f 91       	pop	r20
     766:	3f 91       	pop	r19
     768:	2f 91       	pop	r18
     76a:	0f 90       	pop	r0
     76c:	0b be       	out	0x3b, r0	; 59
     76e:	0f 90       	pop	r0
     770:	0f be       	out	0x3f, r0	; 63
     772:	0f 90       	pop	r0
     774:	1f 90       	pop	r1
     776:	18 95       	reti

00000778 <__vector_7>:
     778:	1f 92       	push	r1
     77a:	0f 92       	push	r0
     77c:	0f b6       	in	r0, 0x3f	; 63
     77e:	0f 92       	push	r0
     780:	11 24       	eor	r1, r1
     782:	0b b6       	in	r0, 0x3b	; 59
     784:	0f 92       	push	r0
     786:	2f 93       	push	r18
     788:	3f 93       	push	r19
     78a:	4f 93       	push	r20
     78c:	5f 93       	push	r21
     78e:	6f 93       	push	r22
     790:	7f 93       	push	r23
     792:	8f 93       	push	r24
     794:	9f 93       	push	r25
     796:	af 93       	push	r26
     798:	bf 93       	push	r27
     79a:	ef 93       	push	r30
     79c:	ff 93       	push	r31
     79e:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <p_pcInt3Callback>
     7a2:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <p_pcInt3Callback+0x1>
     7a6:	09 95       	icall
     7a8:	ff 91       	pop	r31
     7aa:	ef 91       	pop	r30
     7ac:	bf 91       	pop	r27
     7ae:	af 91       	pop	r26
     7b0:	9f 91       	pop	r25
     7b2:	8f 91       	pop	r24
     7b4:	7f 91       	pop	r23
     7b6:	6f 91       	pop	r22
     7b8:	5f 91       	pop	r21
     7ba:	4f 91       	pop	r20
     7bc:	3f 91       	pop	r19
     7be:	2f 91       	pop	r18
     7c0:	0f 90       	pop	r0
     7c2:	0b be       	out	0x3b, r0	; 59
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <__vector_1>:
     7ce:	1f 92       	push	r1
     7d0:	0f 92       	push	r0
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	0f 92       	push	r0
     7d6:	11 24       	eor	r1, r1
     7d8:	0f 90       	pop	r0
     7da:	0f be       	out	0x3f, r0	; 63
     7dc:	0f 90       	pop	r0
     7de:	1f 90       	pop	r1
     7e0:	18 95       	reti

000007e2 <__vector_2>:
     7e2:	1f 92       	push	r1
     7e4:	0f 92       	push	r0
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	0f 92       	push	r0
     7ea:	11 24       	eor	r1, r1
     7ec:	0f 90       	pop	r0
     7ee:	0f be       	out	0x3f, r0	; 63
     7f0:	0f 90       	pop	r0
     7f2:	1f 90       	pop	r1
     7f4:	18 95       	reti

000007f6 <__vector_3>:
     7f6:	1f 92       	push	r1
     7f8:	0f 92       	push	r0
     7fa:	0f b6       	in	r0, 0x3f	; 63
     7fc:	0f 92       	push	r0
     7fe:	11 24       	eor	r1, r1
     800:	0f 90       	pop	r0
     802:	0f be       	out	0x3f, r0	; 63
     804:	0f 90       	pop	r0
     806:	1f 90       	pop	r1
     808:	18 95       	reti

0000080a <gpio_init>:
     80a:	0f 93       	push	r16
     80c:	1f 93       	push	r17
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	c6 2f       	mov	r28, r22
     814:	17 2f       	mov	r17, r23
     816:	d8 2f       	mov	r29, r24
     818:	09 2f       	mov	r16, r25
     81a:	0d df       	rcall	.-486    	; 0x636 <gpio_changeDirection>
     81c:	d1 11       	cpse	r29, r1
     81e:	23 c0       	rjmp	.+70     	; 0x866 <gpio_init+0x5c>
     820:	c1 30       	cpi	r28, 0x01	; 1
     822:	81 f0       	breq	.+32     	; 0x844 <gpio_init+0x3a>
     824:	28 f0       	brcs	.+10     	; 0x830 <gpio_init+0x26>
     826:	c2 30       	cpi	r28, 0x02	; 2
     828:	99 f0       	breq	.+38     	; 0x850 <gpio_init+0x46>
     82a:	c3 30       	cpi	r28, 0x03	; 3
     82c:	b9 f0       	breq	.+46     	; 0x85c <gpio_init+0x52>
     82e:	1b c0       	rjmp	.+54     	; 0x866 <gpio_init+0x5c>
     830:	40 2f       	mov	r20, r16
     832:	61 2f       	mov	r22, r17
     834:	82 e2       	ldi	r24, 0x22	; 34
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	3b d2       	rcall	.+1142   	; 0xcb0 <updateBit>
     83a:	61 2f       	mov	r22, r17
     83c:	8e e7       	ldi	r24, 0x7E	; 126
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	5b d2       	rcall	.+1206   	; 0xcf8 <clearBit>
     842:	11 c0       	rjmp	.+34     	; 0x866 <gpio_init+0x5c>
     844:	40 2f       	mov	r20, r16
     846:	61 2f       	mov	r22, r17
     848:	85 e2       	ldi	r24, 0x25	; 37
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	31 d2       	rcall	.+1122   	; 0xcb0 <updateBit>
     84e:	0b c0       	rjmp	.+22     	; 0x866 <gpio_init+0x5c>
     850:	40 2f       	mov	r20, r16
     852:	61 2f       	mov	r22, r17
     854:	88 e2       	ldi	r24, 0x28	; 40
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	2b d2       	rcall	.+1110   	; 0xcb0 <updateBit>
     85a:	05 c0       	rjmp	.+10     	; 0x866 <gpio_init+0x5c>
     85c:	40 2f       	mov	r20, r16
     85e:	61 2f       	mov	r22, r17
     860:	8b e2       	ldi	r24, 0x2B	; 43
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	25 d2       	rcall	.+1098   	; 0xcb0 <updateBit>
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <gpio_setDirectionOutput>:
     870:	21 e0       	ldi	r18, 0x01	; 1
     872:	fc 01       	movw	r30, r24
     874:	22 83       	std	Z+2, r18	; 0x02
     876:	60 81       	ld	r22, Z
     878:	71 81       	ldd	r23, Z+1	; 0x01
     87a:	82 81       	ldd	r24, Z+2	; 0x02
     87c:	93 81       	ldd	r25, Z+3	; 0x03
     87e:	db ce       	rjmp	.-586    	; 0x636 <gpio_changeDirection>
     880:	08 95       	ret

00000882 <gpio_out_set>:
     882:	61 30       	cpi	r22, 0x01	; 1
     884:	59 f0       	breq	.+22     	; 0x89c <gpio_out_set+0x1a>
     886:	28 f0       	brcs	.+10     	; 0x892 <gpio_out_set+0x10>
     888:	62 30       	cpi	r22, 0x02	; 2
     88a:	69 f0       	breq	.+26     	; 0x8a6 <gpio_out_set+0x24>
     88c:	63 30       	cpi	r22, 0x03	; 3
     88e:	81 f0       	breq	.+32     	; 0x8b0 <gpio_out_set+0x2e>
     890:	08 95       	ret
     892:	67 2f       	mov	r22, r23
     894:	82 e2       	ldi	r24, 0x22	; 34
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	23 c2       	rjmp	.+1094   	; 0xce0 <setBit>
     89a:	08 95       	ret
     89c:	67 2f       	mov	r22, r23
     89e:	85 e2       	ldi	r24, 0x25	; 37
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	1e c2       	rjmp	.+1084   	; 0xce0 <setBit>
     8a4:	08 95       	ret
     8a6:	67 2f       	mov	r22, r23
     8a8:	88 e2       	ldi	r24, 0x28	; 40
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	19 c2       	rjmp	.+1074   	; 0xce0 <setBit>
     8ae:	08 95       	ret
     8b0:	67 2f       	mov	r22, r23
     8b2:	8b e2       	ldi	r24, 0x2B	; 43
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	14 c2       	rjmp	.+1064   	; 0xce0 <setBit>
     8b8:	08 95       	ret

000008ba <gpio_out_reset>:
     8ba:	61 30       	cpi	r22, 0x01	; 1
     8bc:	59 f0       	breq	.+22     	; 0x8d4 <gpio_out_reset+0x1a>
     8be:	28 f0       	brcs	.+10     	; 0x8ca <gpio_out_reset+0x10>
     8c0:	62 30       	cpi	r22, 0x02	; 2
     8c2:	69 f0       	breq	.+26     	; 0x8de <gpio_out_reset+0x24>
     8c4:	63 30       	cpi	r22, 0x03	; 3
     8c6:	81 f0       	breq	.+32     	; 0x8e8 <gpio_out_reset+0x2e>
     8c8:	08 95       	ret
     8ca:	67 2f       	mov	r22, r23
     8cc:	82 e2       	ldi	r24, 0x22	; 34
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	13 c2       	rjmp	.+1062   	; 0xcf8 <clearBit>
     8d2:	08 95       	ret
     8d4:	67 2f       	mov	r22, r23
     8d6:	85 e2       	ldi	r24, 0x25	; 37
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e c2       	rjmp	.+1052   	; 0xcf8 <clearBit>
     8dc:	08 95       	ret
     8de:	67 2f       	mov	r22, r23
     8e0:	88 e2       	ldi	r24, 0x28	; 40
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	09 c2       	rjmp	.+1042   	; 0xcf8 <clearBit>
     8e6:	08 95       	ret
     8e8:	67 2f       	mov	r22, r23
     8ea:	8b e2       	ldi	r24, 0x2B	; 43
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	04 c2       	rjmp	.+1032   	; 0xcf8 <clearBit>
     8f0:	08 95       	ret

000008f2 <gpio_enableInterrupt>:
     8f2:	cf 93       	push	r28
     8f4:	c7 2f       	mov	r28, r23
     8f6:	61 30       	cpi	r22, 0x01	; 1
     8f8:	79 f0       	breq	.+30     	; 0x918 <gpio_enableInterrupt+0x26>
     8fa:	28 f0       	brcs	.+10     	; 0x906 <gpio_enableInterrupt+0x14>
     8fc:	62 30       	cpi	r22, 0x02	; 2
     8fe:	a9 f0       	breq	.+42     	; 0x92a <gpio_enableInterrupt+0x38>
     900:	63 30       	cpi	r22, 0x03	; 3
     902:	e1 f0       	breq	.+56     	; 0x93c <gpio_enableInterrupt+0x4a>
     904:	23 c0       	rjmp	.+70     	; 0x94c <gpio_enableInterrupt+0x5a>
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	e9 d1       	rcall	.+978    	; 0xce0 <setBit>
     90e:	6c 2f       	mov	r22, r28
     910:	8b e6       	ldi	r24, 0x6B	; 107
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	e5 d1       	rcall	.+970    	; 0xce0 <setBit>
     916:	1a c0       	rjmp	.+52     	; 0x94c <gpio_enableInterrupt+0x5a>
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	88 e6       	ldi	r24, 0x68	; 104
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	e0 d1       	rcall	.+960    	; 0xce0 <setBit>
     920:	6c 2f       	mov	r22, r28
     922:	8c e6       	ldi	r24, 0x6C	; 108
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	dc d1       	rcall	.+952    	; 0xce0 <setBit>
     928:	11 c0       	rjmp	.+34     	; 0x94c <gpio_enableInterrupt+0x5a>
     92a:	62 e0       	ldi	r22, 0x02	; 2
     92c:	88 e6       	ldi	r24, 0x68	; 104
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	d7 d1       	rcall	.+942    	; 0xce0 <setBit>
     932:	6c 2f       	mov	r22, r28
     934:	8d e6       	ldi	r24, 0x6D	; 109
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	d3 d1       	rcall	.+934    	; 0xce0 <setBit>
     93a:	08 c0       	rjmp	.+16     	; 0x94c <gpio_enableInterrupt+0x5a>
     93c:	63 e0       	ldi	r22, 0x03	; 3
     93e:	88 e6       	ldi	r24, 0x68	; 104
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	ce d1       	rcall	.+924    	; 0xce0 <setBit>
     944:	6c 2f       	mov	r22, r28
     946:	83 e7       	ldi	r24, 0x73	; 115
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	ca d1       	rcall	.+916    	; 0xce0 <setBit>
     94c:	cf 91       	pop	r28
     94e:	08 95       	ret

00000950 <gpio_attachInterrupt>:

void gpio_attachInterrupt(gpio_struct_t s_gpio, gpio_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
	switch (s_gpio.port)
     950:	61 30       	cpi	r22, 0x01	; 1
     952:	71 f0       	breq	.+28     	; 0x970 <gpio_attachInterrupt+0x20>
     954:	28 f0       	brcs	.+10     	; 0x960 <gpio_attachInterrupt+0x10>
     956:	62 30       	cpi	r22, 0x02	; 2
     958:	99 f0       	breq	.+38     	; 0x980 <gpio_attachInterrupt+0x30>
     95a:	63 30       	cpi	r22, 0x03	; 3
     95c:	c9 f0       	breq	.+50     	; 0x990 <gpio_attachInterrupt+0x40>
     95e:	08 95       	ret
	{
		case PA:
		#ifdef USING_PCINT0
			p_pcInt0Callback = p_function;
     960:	30 93 9d 01 	sts	0x019D, r19	; 0x80019d <p_pcInt0Callback+0x1>
     964:	20 93 9c 01 	sts	0x019C, r18	; 0x80019c <p_pcInt0Callback>
			u8_pcInt0OldState = PORTA;
     968:	82 b1       	in	r24, 0x02	; 2
     96a:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <u8_pcInt0OldState>
		#endif
			break;
     96e:	08 95       	ret
				p_extIntCallbacks[2] = p_function;
			else
			{
		#endif
		#ifdef USING_PCINT1
				p_pcInt1Callback = p_function;
     970:	30 93 a0 01 	sts	0x01A0, r19	; 0x8001a0 <p_pcInt1Callback+0x1>
     974:	20 93 9f 01 	sts	0x019F, r18	; 0x80019f <p_pcInt1Callback>
				u8_pcInt1OldState = PORTB;
     978:	85 b1       	in	r24, 0x05	; 5
     97a:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <u8_pcInt1OldState>
		#endif
		#ifdef USING_EXTINT
			}
		#endif
			break;
     97e:	08 95       	ret
		case PC:
		#ifdef USING_PCINT2
			p_pcInt2Callback = p_function;
     980:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <p_pcInt2Callback+0x1>
     984:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <p_pcInt2Callback>
			u8_pcInt2OldState = PORTC;
     988:	88 b1       	in	r24, 0x08	; 8
     98a:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <u8_pcInt2OldState>
		#endif
			break;
     98e:	08 95       	ret
				p_extIntCallbacks[1] = p_function;
			else
			{
		#endif
		#ifdef USING_PCINT3
				p_pcInt3Callback = p_function;
     990:	30 93 99 01 	sts	0x0199, r19	; 0x800199 <p_pcInt3Callback+0x1>
     994:	20 93 98 01 	sts	0x0198, r18	; 0x800198 <p_pcInt3Callback>
     998:	08 95       	ret

0000099a <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	8b 01       	movw	r16, r22
     9a4:	9c 01       	movw	r18, r24
     9a6:	ea 01       	movw	r28, r20
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	72 e1       	ldi	r23, 0x12	; 18
     9ac:	8a e7       	ldi	r24, 0x7A	; 122
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a9 01       	movw	r20, r18
     9b2:	98 01       	movw	r18, r16
     9b4:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
     9b8:	ba 01       	movw	r22, r20
     9ba:	a9 01       	movw	r20, r18
     9bc:	40 51       	subi	r20, 0x10	; 16
     9be:	51 09       	sbc	r21, r1
     9c0:	61 09       	sbc	r22, r1
     9c2:	71 09       	sbc	r23, r1
     9c4:	db 01       	movw	r26, r22
     9c6:	ca 01       	movw	r24, r20
     9c8:	b6 95       	lsr	r27
     9ca:	a7 95       	ror	r26
     9cc:	97 95       	ror	r25
     9ce:	87 95       	ror	r24
     9d0:	8f 3f       	cpi	r24, 0xFF	; 255
     9d2:	91 05       	cpc	r25, r1
     9d4:	a1 05       	cpc	r26, r1
     9d6:	b1 05       	cpc	r27, r1
     9d8:	09 f0       	breq	.+2      	; 0x9dc <calculateTWBR+0x42>
     9da:	10 f4       	brcc	.+4      	; 0x9e0 <calculateTWBR+0x46>
     9dc:	18 82       	st	Y, r1
     9de:	32 c0       	rjmp	.+100    	; 0xa44 <calculateTWBR+0xaa>
     9e0:	db 01       	movw	r26, r22
     9e2:	ca 01       	movw	r24, r20
     9e4:	68 94       	set
     9e6:	12 f8       	bld	r1, 2
     9e8:	b6 95       	lsr	r27
     9ea:	a7 95       	ror	r26
     9ec:	97 95       	ror	r25
     9ee:	87 95       	ror	r24
     9f0:	16 94       	lsr	r1
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <calculateTWBR+0x4e>
     9f4:	8f 3f       	cpi	r24, 0xFF	; 255
     9f6:	91 05       	cpc	r25, r1
     9f8:	a1 05       	cpc	r26, r1
     9fa:	b1 05       	cpc	r27, r1
     9fc:	09 f0       	breq	.+2      	; 0xa00 <calculateTWBR+0x66>
     9fe:	18 f4       	brcc	.+6      	; 0xa06 <calculateTWBR+0x6c>
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	28 83       	st	Y, r18
     a04:	1f c0       	rjmp	.+62     	; 0xa44 <calculateTWBR+0xaa>
     a06:	db 01       	movw	r26, r22
     a08:	ca 01       	movw	r24, r20
     a0a:	68 94       	set
     a0c:	14 f8       	bld	r1, 4
     a0e:	b6 95       	lsr	r27
     a10:	a7 95       	ror	r26
     a12:	97 95       	ror	r25
     a14:	87 95       	ror	r24
     a16:	16 94       	lsr	r1
     a18:	d1 f7       	brne	.-12     	; 0xa0e <calculateTWBR+0x74>
     a1a:	8f 3f       	cpi	r24, 0xFF	; 255
     a1c:	91 05       	cpc	r25, r1
     a1e:	a1 05       	cpc	r26, r1
     a20:	b1 05       	cpc	r27, r1
     a22:	09 f0       	breq	.+2      	; 0xa26 <calculateTWBR+0x8c>
     a24:	18 f4       	brcc	.+6      	; 0xa2c <calculateTWBR+0x92>
     a26:	22 e0       	ldi	r18, 0x02	; 2
     a28:	28 83       	st	Y, r18
     a2a:	0c c0       	rjmp	.+24     	; 0xa44 <calculateTWBR+0xaa>
     a2c:	83 e0       	ldi	r24, 0x03	; 3
     a2e:	88 83       	st	Y, r24
     a30:	db 01       	movw	r26, r22
     a32:	ca 01       	movw	r24, r20
     a34:	68 94       	set
     a36:	16 f8       	bld	r1, 6
     a38:	b6 95       	lsr	r27
     a3a:	a7 95       	ror	r26
     a3c:	97 95       	ror	r25
     a3e:	87 95       	ror	r24
     a40:	16 94       	lsr	r1
     a42:	d1 f7       	brne	.-12     	; 0xa38 <calculateTWBR+0x9e>
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	08 95       	ret

00000a4e <i2c_init>:
     a4e:	cf 93       	push	r28
     a50:	df 93       	push	r29
     a52:	1f 92       	push	r1
     a54:	cd b7       	in	r28, 0x3d	; 61
     a56:	de b7       	in	r29, 0x3e	; 62
     a58:	ae 01       	movw	r20, r28
     a5a:	4f 5f       	subi	r20, 0xFF	; 255
     a5c:	5f 4f       	sbci	r21, 0xFF	; 255
     a5e:	9d df       	rcall	.-198    	; 0x99a <calculateTWBR>
     a60:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     a64:	60 e0       	ldi	r22, 0x00	; 0
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	54 d1       	rcall	.+680    	; 0xd12 <checkBit>
     a6a:	48 2f       	mov	r20, r24
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	89 eb       	ldi	r24, 0xB9	; 185
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	1e d1       	rcall	.+572    	; 0xcb0 <updateBit>
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	4c d1       	rcall	.+664    	; 0xd12 <checkBit>
     a7a:	48 2f       	mov	r20, r24
     a7c:	61 e0       	ldi	r22, 0x01	; 1
     a7e:	89 eb       	ldi	r24, 0xB9	; 185
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	16 d1       	rcall	.+556    	; 0xcb0 <updateBit>
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	71 e0       	ldi	r23, 0x01	; 1
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	be de       	rcall	.-644    	; 0x80a <gpio_init>
     a8e:	62 e0       	ldi	r22, 0x02	; 2
     a90:	70 e0       	ldi	r23, 0x00	; 0
     a92:	80 e0       	ldi	r24, 0x00	; 0
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	b9 de       	rcall	.-654    	; 0x80a <gpio_init>
     a98:	0f 90       	pop	r0
     a9a:	df 91       	pop	r29
     a9c:	cf 91       	pop	r28
     a9e:	08 95       	ret

00000aa0 <i2c_start>:
     aa0:	62 e0       	ldi	r22, 0x02	; 2
     aa2:	8c eb       	ldi	r24, 0xBC	; 188
     aa4:	90 e0       	ldi	r25, 0x00	; 0
     aa6:	1c c1       	rjmp	.+568    	; 0xce0 <setBit>
     aa8:	08 95       	ret

00000aaa <i2c_sendStart>:
}

u8 i2c_sendStart(u8 u8_address)
{
     aaa:	ff 92       	push	r15
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	f8 2e       	mov	r15, r24
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);
     ab6:	cc eb       	ldi	r28, 0xBC	; 188
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
     aba:	88 81       	ld	r24, Y
     abc:	62 e0       	ldi	r22, 0x02	; 2
     abe:	29 d1       	rcall	.+594    	; 0xd12 <checkBit>
     ac0:	28 81       	ld	r18, Y
     ac2:	34 e0       	ldi	r19, 0x04	; 4
     ac4:	83 9f       	mul	r24, r19
     ac6:	c0 01       	movw	r24, r0
     ac8:	11 24       	eor	r1, r1
     aca:	80 6a       	ori	r24, 0xA0	; 160
     acc:	82 2b       	or	r24, r18
     ace:	88 83       	st	Y, r24
     ad0:	ce ef       	ldi	r28, 0xFE	; 254
     ad2:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until start condition has been sent */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     ad4:	0c eb       	ldi	r16, 0xBC	; 188
     ad6:	10 e0       	ldi	r17, 0x00	; 0
     ad8:	f8 01       	movw	r30, r16
     ada:	80 81       	ld	r24, Z
     adc:	67 e0       	ldi	r22, 0x07	; 7
     ade:	19 d1       	rcall	.+562    	; 0xd12 <checkBit>
     ae0:	81 11       	cpse	r24, r1
     ae2:	33 c0       	rjmp	.+102    	; 0xb4a <i2c_sendStart+0xa0>
     ae4:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until start condition has been sent */
	while(--timeout > 0)
     ae6:	c1 f7       	brne	.-16     	; 0xad8 <i2c_sendStart+0x2e>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     ae8:	8f ef       	ldi	r24, 0xFF	; 255
     aea:	3b c0       	rjmp	.+118    	; 0xb62 <i2c_sendStart+0xb8>

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     aec:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     af0:	88 7f       	andi	r24, 0xF8	; 248
     af2:	80 31       	cpi	r24, 0x10	; 16
     af4:	21 f0       	breq	.+8      	; 0xafe <i2c_sendStart+0x54>
		return (TW_STATUS & 0xF8);
     af6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     afa:	88 7f       	andi	r24, 0xF8	; 248
     afc:	32 c0       	rjmp	.+100    	; 0xb62 <i2c_sendStart+0xb8>

	/* Send device address */
	TWDR = u8_address;
     afe:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     b02:	cc eb       	ldi	r28, 0xBC	; 188
     b04:	d0 e0       	ldi	r29, 0x00	; 0
     b06:	88 81       	ld	r24, Y
     b08:	62 e0       	ldi	r22, 0x02	; 2
     b0a:	03 d1       	rcall	.+518    	; 0xd12 <checkBit>
     b0c:	f4 e0       	ldi	r31, 0x04	; 4
     b0e:	8f 9f       	mul	r24, r31
     b10:	c0 01       	movw	r24, r0
     b12:	11 24       	eor	r1, r1
     b14:	80 68       	ori	r24, 0x80	; 128
     b16:	88 83       	st	Y, r24
     b18:	ce ef       	ldi	r28, 0xFE	; 254
     b1a:	df ef       	ldi	r29, 0xFF	; 255

	/* Wail until address has been sent */
	while( --timeout > 0 )
		if(checkBit(TWCR, TWINT))
     b1c:	0c eb       	ldi	r16, 0xBC	; 188
     b1e:	10 e0       	ldi	r17, 0x00	; 0
     b20:	f8 01       	movw	r30, r16
     b22:	80 81       	ld	r24, Z
     b24:	67 e0       	ldi	r22, 0x07	; 7
     b26:	f5 d0       	rcall	.+490    	; 0xd12 <checkBit>
     b28:	81 11       	cpse	r24, r1
     b2a:	15 c0       	rjmp	.+42     	; 0xb56 <i2c_sendStart+0xac>
     b2c:	21 97       	sbiw	r28, 0x01	; 1
	/* Send device address */
	TWDR = u8_address;
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wail until address has been sent */
	while( --timeout > 0 )
     b2e:	c1 f7       	brne	.-16     	; 0xb20 <i2c_sendStart+0x76>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     b30:	8f ef       	ldi	r24, 0xFF	; 255
     b32:	17 c0       	rjmp	.+46     	; 0xb62 <i2c_sendStart+0xb8>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     b34:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     b38:	88 7f       	andi	r24, 0xF8	; 248
     b3a:	80 34       	cpi	r24, 0x40	; 64
     b3c:	21 f0       	breq	.+8      	; 0xb46 <i2c_sendStart+0x9c>
		return (TW_STATUS & 0xF8);
     b3e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     b42:	88 7f       	andi	r24, 0xF8	; 248
     b44:	0e c0       	rjmp	.+28     	; 0xb62 <i2c_sendStart+0xb8>

	return I2C_NO_ERROR;
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	0c c0       	rjmp	.+24     	; 0xb62 <i2c_sendStart+0xb8>
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     b4a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     b4e:	88 7f       	andi	r24, 0xF8	; 248
     b50:	88 30       	cpi	r24, 0x08	; 8
     b52:	61 f6       	brne	.-104    	; 0xaec <i2c_sendStart+0x42>
     b54:	d4 cf       	rjmp	.-88     	; 0xafe <i2c_sendStart+0x54>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     b56:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     b5a:	88 7f       	andi	r24, 0xF8	; 248
     b5c:	88 31       	cpi	r24, 0x18	; 24
     b5e:	51 f7       	brne	.-44     	; 0xb34 <i2c_sendStart+0x8a>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     b60:	80 e0       	ldi	r24, 0x00	; 0
}
     b62:	df 91       	pop	r29
     b64:	cf 91       	pop	r28
     b66:	1f 91       	pop	r17
     b68:	0f 91       	pop	r16
     b6a:	ff 90       	pop	r15
     b6c:	08 95       	ret

00000b6e <i2c_sendRepStart>:

u8 i2c_sendRepStart(u8 u8_address)
{
     b6e:	9d cf       	rjmp	.-198    	; 0xaaa <i2c_sendStart>
     b70:	08 95       	ret

00000b72 <i2c_sendStop>:
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cc eb       	ldi	r28, 0xBC	; 188
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	88 81       	ld	r24, Y
     b80:	62 e0       	ldi	r22, 0x02	; 2
     b82:	c7 d0       	rcall	.+398    	; 0xd12 <checkBit>
     b84:	28 81       	ld	r18, Y
     b86:	34 e0       	ldi	r19, 0x04	; 4
     b88:	83 9f       	mul	r24, r19
     b8a:	c0 01       	movw	r24, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	80 69       	ori	r24, 0x90	; 144
     b90:	82 2b       	or	r24, r18
     b92:	88 83       	st	Y, r24
     b94:	ce ef       	ldi	r28, 0xFE	; 254
     b96:	df ef       	ldi	r29, 0xFF	; 255
     b98:	0c eb       	ldi	r16, 0xBC	; 188
     b9a:	10 e0       	ldi	r17, 0x00	; 0
     b9c:	f8 01       	movw	r30, r16
     b9e:	80 81       	ld	r24, Z
     ba0:	64 e0       	ldi	r22, 0x04	; 4
     ba2:	b7 d0       	rcall	.+366    	; 0xd12 <checkBit>
     ba4:	88 23       	and	r24, r24
     ba6:	11 f0       	breq	.+4      	; 0xbac <i2c_sendStop+0x3a>
     ba8:	21 97       	sbiw	r28, 0x01	; 1
     baa:	c1 f7       	brne	.-16     	; 0xb9c <i2c_sendStop+0x2a>
     bac:	df 91       	pop	r29
     bae:	cf 91       	pop	r28
     bb0:	1f 91       	pop	r17
     bb2:	0f 91       	pop	r16
     bb4:	08 95       	ret

00000bb6 <i2c_write>:
     bb6:	0f 93       	push	r16
     bb8:	1f 93       	push	r17
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     bc2:	cc eb       	ldi	r28, 0xBC	; 188
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
     bc6:	88 81       	ld	r24, Y
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	a3 d0       	rcall	.+326    	; 0xd12 <checkBit>
     bcc:	24 e0       	ldi	r18, 0x04	; 4
     bce:	82 9f       	mul	r24, r18
     bd0:	c0 01       	movw	r24, r0
     bd2:	11 24       	eor	r1, r1
     bd4:	80 68       	ori	r24, 0x80	; 128
     bd6:	88 83       	st	Y, r24
     bd8:	ce ef       	ldi	r28, 0xFE	; 254
     bda:	df ef       	ldi	r29, 0xFF	; 255
     bdc:	0c eb       	ldi	r16, 0xBC	; 188
     bde:	10 e0       	ldi	r17, 0x00	; 0
     be0:	f8 01       	movw	r30, r16
     be2:	80 81       	ld	r24, Z
     be4:	67 e0       	ldi	r22, 0x07	; 7
     be6:	95 d0       	rcall	.+298    	; 0xd12 <checkBit>
     be8:	81 11       	cpse	r24, r1
     bea:	0f c0       	rjmp	.+30     	; 0xc0a <i2c_write+0x54>
     bec:	21 97       	sbiw	r28, 0x01	; 1
     bee:	c1 f7       	brne	.-16     	; 0xbe0 <i2c_write+0x2a>
     bf0:	8f ef       	ldi	r24, 0xFF	; 255
     bf2:	11 c0       	rjmp	.+34     	; 0xc16 <i2c_write+0x60>
     bf4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     bf8:	88 7f       	andi	r24, 0xF8	; 248
     bfa:	80 34       	cpi	r24, 0x40	; 64
     bfc:	21 f0       	breq	.+8      	; 0xc06 <i2c_write+0x50>
     bfe:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c02:	88 7f       	andi	r24, 0xF8	; 248
     c04:	08 c0       	rjmp	.+16     	; 0xc16 <i2c_write+0x60>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	06 c0       	rjmp	.+12     	; 0xc16 <i2c_write+0x60>
     c0a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     c0e:	88 7f       	andi	r24, 0xF8	; 248
     c10:	88 31       	cpi	r24, 0x18	; 24
     c12:	81 f7       	brne	.-32     	; 0xbf4 <i2c_write+0x3e>
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	1f 91       	pop	r17
     c1c:	0f 91       	pop	r16
     c1e:	08 95       	ret

00000c20 <i2c_readAck>:
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	cc eb       	ldi	r28, 0xBC	; 188
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
     c2c:	88 81       	ld	r24, Y
     c2e:	62 e0       	ldi	r22, 0x02	; 2
     c30:	70 d0       	rcall	.+224    	; 0xd12 <checkBit>
     c32:	24 e0       	ldi	r18, 0x04	; 4
     c34:	82 9f       	mul	r24, r18
     c36:	c0 01       	movw	r24, r0
     c38:	11 24       	eor	r1, r1
     c3a:	80 6c       	ori	r24, 0xC0	; 192
     c3c:	88 83       	st	Y, r24
     c3e:	ce ef       	ldi	r28, 0xFE	; 254
     c40:	df ef       	ldi	r29, 0xFF	; 255
     c42:	0c eb       	ldi	r16, 0xBC	; 188
     c44:	10 e0       	ldi	r17, 0x00	; 0
     c46:	f8 01       	movw	r30, r16
     c48:	80 81       	ld	r24, Z
     c4a:	67 e0       	ldi	r22, 0x07	; 7
     c4c:	62 d0       	rcall	.+196    	; 0xd12 <checkBit>
     c4e:	88 23       	and	r24, r24
     c50:	19 f0       	breq	.+6      	; 0xc58 <i2c_readAck+0x38>
     c52:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     c56:	03 c0       	rjmp	.+6      	; 0xc5e <i2c_readAck+0x3e>
     c58:	21 97       	sbiw	r28, 0x01	; 1
     c5a:	a9 f7       	brne	.-22     	; 0xc46 <i2c_readAck+0x26>
     c5c:	8f ef       	ldi	r24, 0xFF	; 255
     c5e:	df 91       	pop	r29
     c60:	cf 91       	pop	r28
     c62:	1f 91       	pop	r17
     c64:	0f 91       	pop	r16
     c66:	08 95       	ret

00000c68 <i2c_readNak>:
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cc eb       	ldi	r28, 0xBC	; 188
     c72:	d0 e0       	ldi	r29, 0x00	; 0
     c74:	88 81       	ld	r24, Y
     c76:	62 e0       	ldi	r22, 0x02	; 2
     c78:	4c d0       	rcall	.+152    	; 0xd12 <checkBit>
     c7a:	24 e0       	ldi	r18, 0x04	; 4
     c7c:	82 9f       	mul	r24, r18
     c7e:	c0 01       	movw	r24, r0
     c80:	11 24       	eor	r1, r1
     c82:	80 68       	ori	r24, 0x80	; 128
     c84:	88 83       	st	Y, r24
     c86:	ce ef       	ldi	r28, 0xFE	; 254
     c88:	df ef       	ldi	r29, 0xFF	; 255
     c8a:	0c eb       	ldi	r16, 0xBC	; 188
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	f8 01       	movw	r30, r16
     c90:	80 81       	ld	r24, Z
     c92:	67 e0       	ldi	r22, 0x07	; 7
     c94:	3e d0       	rcall	.+124    	; 0xd12 <checkBit>
     c96:	88 23       	and	r24, r24
     c98:	19 f0       	breq	.+6      	; 0xca0 <i2c_readNak+0x38>
     c9a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     c9e:	03 c0       	rjmp	.+6      	; 0xca6 <i2c_readNak+0x3e>
     ca0:	21 97       	sbiw	r28, 0x01	; 1
     ca2:	a9 f7       	brne	.-22     	; 0xc8e <i2c_readNak+0x26>
     ca4:	8f ef       	ldi	r24, 0xFF	; 255
     ca6:	df 91       	pop	r29
     ca8:	cf 91       	pop	r28
     caa:	1f 91       	pop	r17
     cac:	0f 91       	pop	r16
     cae:	08 95       	ret

00000cb0 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     cb0:	fc 01       	movw	r30, r24
     cb2:	94 2f       	mov	r25, r20
     cb4:	20 81       	ld	r18, Z
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	50 e0       	ldi	r21, 0x00	; 0
     cba:	06 2e       	mov	r0, r22
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <updateBit+0x12>
     cbe:	44 0f       	add	r20, r20
     cc0:	55 1f       	adc	r21, r21
     cc2:	0a 94       	dec	r0
     cc4:	e2 f7       	brpl	.-8      	; 0xcbe <updateBit+0xe>
     cc6:	40 95       	com	r20
     cc8:	50 95       	com	r21
     cca:	24 23       	and	r18, r20
     ccc:	49 2f       	mov	r20, r25
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <updateBit+0x26>
     cd2:	44 0f       	add	r20, r20
     cd4:	55 1f       	adc	r21, r21
     cd6:	6a 95       	dec	r22
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <updateBit+0x22>
     cda:	42 2b       	or	r20, r18
     cdc:	40 83       	st	Z, r20
     cde:	08 95       	ret

00000ce0 <setBit>:
     ce0:	fc 01       	movw	r30, r24
     ce2:	40 81       	ld	r20, Z
     ce4:	21 e0       	ldi	r18, 0x01	; 1
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <setBit+0xe>
     cea:	22 0f       	add	r18, r18
     cec:	33 1f       	adc	r19, r19
     cee:	6a 95       	dec	r22
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <setBit+0xa>
     cf2:	24 2b       	or	r18, r20
     cf4:	20 83       	st	Z, r18
     cf6:	08 95       	ret

00000cf8 <clearBit>:
     cf8:	fc 01       	movw	r30, r24
     cfa:	90 81       	ld	r25, Z
     cfc:	21 e0       	ldi	r18, 0x01	; 1
     cfe:	30 e0       	ldi	r19, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <clearBit+0xe>
     d02:	22 0f       	add	r18, r18
     d04:	33 1f       	adc	r19, r19
     d06:	6a 95       	dec	r22
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <clearBit+0xa>
     d0a:	20 95       	com	r18
     d0c:	29 23       	and	r18, r25
     d0e:	20 83       	st	Z, r18
     d10:	08 95       	ret

00000d12 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <checkBit+0x8>
     d16:	95 95       	asr	r25
     d18:	87 95       	ror	r24
     d1a:	6a 95       	dec	r22
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <checkBit+0x4>
}
     d1e:	81 70       	andi	r24, 0x01	; 1
     d20:	08 95       	ret

00000d22 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     d22:	cf 92       	push	r12
     d24:	df 92       	push	r13
     d26:	ef 92       	push	r14
     d28:	ff 92       	push	r15
     d2a:	69 01       	movw	r12, r18
     d2c:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	2c 19       	sub	r18, r12
     d34:	3d 09       	sbc	r19, r13
     d36:	4e 09       	sbc	r20, r14
     d38:	5f 09       	sbc	r21, r15
     d3a:	a8 ee       	ldi	r26, 0xE8	; 232
     d3c:	b3 e0       	ldi	r27, 0x03	; 3
     d3e:	0e 94 76 1a 	call	0x34ec	; 0x34ec <__muluhisi3>
     d42:	a7 01       	movw	r20, r14
     d44:	96 01       	movw	r18, r12
     d46:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
     d4a:	c9 01       	movw	r24, r18
     d4c:	99 23       	and	r25, r25
     d4e:	24 f4       	brge	.+8      	; 0xd58 <calculateError+0x36>
     d50:	88 27       	eor	r24, r24
     d52:	99 27       	eor	r25, r25
     d54:	82 1b       	sub	r24, r18
     d56:	93 0b       	sbc	r25, r19
}
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	08 95       	ret

00000d62 <ruleOfThree>:

u16 ruleOfThree(u16 u16_extreme, u16 u16_mean1, u16 u16_mean2)
{
     d62:	fc 01       	movw	r30, r24
     d64:	9b 01       	movw	r18, r22
	u32 u32_result;
	u32_result = (u32) u16_mean1 * u16_mean2 / u16_extreme;
	return (u16) u32_result;
     d66:	da 01       	movw	r26, r20
     d68:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__umulhisi3>
     d6c:	9f 01       	movw	r18, r30
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
}
     d76:	c9 01       	movw	r24, r18
     d78:	08 95       	ret

00000d7a <pwm_init>:
			OCR3A = ruleOfThree(100, u8_pwm3aPercent, ICR3);
			OCR3B = ruleOfThree(100, u8_pwm3bPercent, ICR3);
		#endif
			break;
	}
}
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
     d80:	48 81       	ld	r20, Y
     d82:	59 81       	ldd	r21, Y+1	; 0x01
     d84:	6a 81       	ldd	r22, Y+2	; 0x02
     d86:	7b 81       	ldd	r23, Y+3	; 0x03
     d88:	8c 81       	ldd	r24, Y+4	; 0x04
     d8a:	3f d4       	rcall	.+2174   	; 0x160a <timer_init>
     d8c:	88 81       	ld	r24, Y
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	09 f0       	breq	.+2      	; 0xd94 <pwm_init+0x1a>
     d92:	62 c0       	rjmp	.+196    	; 0xe58 <pwm_init+0xde>
     d94:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     d98:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     d9c:	89 2b       	or	r24, r25
     d9e:	49 f0       	breq	.+18     	; 0xdb2 <pwm_init+0x38>
     da0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     da4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     da8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     dac:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     db0:	06 c0       	rjmp	.+12     	; 0xdbe <pwm_init+0x44>
     db2:	8f ef       	ldi	r24, 0xFF	; 255
     db4:	9f ef       	ldi	r25, 0xFF	; 255
     db6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     dba:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     dbe:	64 e0       	ldi	r22, 0x04	; 4
     dc0:	81 e8       	ldi	r24, 0x81	; 129
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	8d df       	rcall	.-230    	; 0xce0 <setBit>
     dc6:	60 e0       	ldi	r22, 0x00	; 0
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	90 e0       	ldi	r25, 0x00	; 0
     dcc:	95 df       	rcall	.-214    	; 0xcf8 <clearBit>
     dce:	8e 81       	ldd	r24, Y+6	; 0x06
     dd0:	88 23       	and	r24, r24
     dd2:	19 f0       	breq	.+6      	; 0xdda <pwm_init+0x60>
     dd4:	81 30       	cpi	r24, 0x01	; 1
     dd6:	51 f0       	breq	.+20     	; 0xdec <pwm_init+0x72>
     dd8:	19 c0       	rjmp	.+50     	; 0xe0c <pwm_init+0x92>
     dda:	63 e0       	ldi	r22, 0x03	; 3
     ddc:	81 e8       	ldi	r24, 0x81	; 129
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	7f df       	rcall	.-258    	; 0xce0 <setBit>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	80 e8       	ldi	r24, 0x80	; 128
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	7b df       	rcall	.-266    	; 0xce0 <setBit>
     dea:	10 c0       	rjmp	.+32     	; 0xe0c <pwm_init+0x92>
     dec:	63 e0       	ldi	r22, 0x03	; 3
     dee:	81 e8       	ldi	r24, 0x81	; 129
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	82 df       	rcall	.-252    	; 0xcf8 <clearBit>
     df4:	8d 81       	ldd	r24, Y+5	; 0x05
     df6:	88 23       	and	r24, r24
     df8:	29 f0       	breq	.+10     	; 0xe04 <pwm_init+0x8a>
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	80 e8       	ldi	r24, 0x80	; 128
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	7b df       	rcall	.-266    	; 0xcf8 <clearBit>
     e02:	04 c0       	rjmp	.+8      	; 0xe0c <pwm_init+0x92>
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	6a df       	rcall	.-300    	; 0xce0 <setBit>
     e0c:	8f 81       	ldd	r24, Y+7	; 0x07
     e0e:	88 23       	and	r24, r24
     e10:	71 f0       	breq	.+28     	; 0xe2e <pwm_init+0xb4>
     e12:	67 e0       	ldi	r22, 0x07	; 7
     e14:	80 e8       	ldi	r24, 0x80	; 128
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	63 df       	rcall	.-314    	; 0xce0 <setBit>
     e1a:	48 85       	ldd	r20, Y+8	; 0x08
     e1c:	66 e0       	ldi	r22, 0x06	; 6
     e1e:	80 e8       	ldi	r24, 0x80	; 128
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	46 df       	rcall	.-372    	; 0xcb0 <updateBit>
     e24:	63 e0       	ldi	r22, 0x03	; 3
     e26:	75 e0       	ldi	r23, 0x05	; 5
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	ee dc       	rcall	.-1572   	; 0x80a <gpio_init>
     e2e:	89 85       	ldd	r24, Y+9	; 0x09
     e30:	88 23       	and	r24, r24
     e32:	71 f0       	breq	.+28     	; 0xe50 <pwm_init+0xd6>
     e34:	65 e0       	ldi	r22, 0x05	; 5
     e36:	80 e8       	ldi	r24, 0x80	; 128
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	52 df       	rcall	.-348    	; 0xce0 <setBit>
     e3c:	4a 85       	ldd	r20, Y+10	; 0x0a
     e3e:	64 e0       	ldi	r22, 0x04	; 4
     e40:	80 e8       	ldi	r24, 0x80	; 128
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	35 df       	rcall	.-406    	; 0xcb0 <updateBit>
     e46:	63 e0       	ldi	r22, 0x03	; 3
     e48:	74 e0       	ldi	r23, 0x04	; 4
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	dd dc       	rcall	.-1606   	; 0x80a <gpio_init>
     e50:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <u8_pwm1aPercent>
     e54:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <u8_pwm1bPercent>
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	08 95       	ret

00000e5e <pwm_start>:
     e5e:	ef 92       	push	r14
     e60:	ff 92       	push	r15
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	2b 97       	sbiw	r28, 0x0b	; 11
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	4e 2d       	mov	r20, r14
     e7c:	5f 2d       	mov	r21, r15
     e7e:	60 2f       	mov	r22, r16
     e80:	71 2f       	mov	r23, r17
     e82:	82 2f       	mov	r24, r18
     e84:	0e d5       	rcall	.+2588   	; 0x18a2 <timer_start>
     e86:	2b 96       	adiw	r28, 0x0b	; 11
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	f8 94       	cli
     e8c:	de bf       	out	0x3e, r29	; 62
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	cd bf       	out	0x3d, r28	; 61
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	08 95       	ret

00000ea0 <pwm_setDutyCycle>:

void pwm_setDutyCycle(pwm_struct_t s_pwm, timer_channel_enum_t e_channel, u8 u8_percent)
{
     ea0:	af 92       	push	r10
     ea2:	cf 92       	push	r12
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	cd b7       	in	r28, 0x3d	; 61
     eb2:	de b7       	in	r29, 0x3e	; 62
     eb4:	2b 97       	sbiw	r28, 0x0b	; 11
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	9e 2d       	mov	r25, r14
     ec2:	e9 82       	std	Y+1, r14	; 0x01
     ec4:	fa 82       	std	Y+2, r15	; 0x02
     ec6:	0b 83       	std	Y+3, r16	; 0x03
     ec8:	1c 83       	std	Y+4, r17	; 0x04
     eca:	2d 83       	std	Y+5, r18	; 0x05
     ecc:	3e 83       	std	Y+6, r19	; 0x06
     ece:	4f 83       	std	Y+7, r20	; 0x07
     ed0:	58 87       	std	Y+8, r21	; 0x08
     ed2:	69 87       	std	Y+9, r22	; 0x09
     ed4:	7a 87       	std	Y+10, r23	; 0x0a
     ed6:	8b 87       	std	Y+11, r24	; 0x0b
	switch(s_pwm.base.peripheral)
     ed8:	91 30       	cpi	r25, 0x01	; 1
     eda:	21 f5       	brne	.+72     	; 0xf24 <pwm_setDutyCycle+0x84>
     edc:	8c 2d       	mov	r24, r12
			}
		#endif
			break;
		case TIMER1:
		#ifdef USING_PWM1
			if (e_channel == CHANNEL_A)
     ede:	c1 10       	cpse	r12, r1
     ee0:	10 c0       	rjmp	.+32     	; 0xf02 <pwm_setDutyCycle+0x62>
			{
				u8_pwm1aPercent = u8_percent;
     ee2:	a0 92 a3 01 	sts	0x01A3, r10	; 0x8001a3 <u8_pwm1aPercent>
				OCR1A = ruleOfThree(100, u8_percent, ICR1);
     ee6:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     eea:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     eee:	6a 2d       	mov	r22, r10
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	84 e6       	ldi	r24, 0x64	; 100
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	35 df       	rcall	.-406    	; 0xd62 <ruleOfThree>
     ef8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     efc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     f00:	11 c0       	rjmp	.+34     	; 0xf24 <pwm_setDutyCycle+0x84>
			}
			if (e_channel == CHANNEL_B)
     f02:	81 30       	cpi	r24, 0x01	; 1
     f04:	79 f4       	brne	.+30     	; 0xf24 <pwm_setDutyCycle+0x84>
			{
				u8_pwm1bPercent = u8_percent;
     f06:	a0 92 a2 01 	sts	0x01A2, r10	; 0x8001a2 <u8_pwm1bPercent>
				OCR1B = ruleOfThree(100, u8_percent, ICR1);
     f0a:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     f0e:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     f12:	6a 2d       	mov	r22, r10
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	84 e6       	ldi	r24, 0x64	; 100
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	23 df       	rcall	.-442    	; 0xd62 <ruleOfThree>
     f1c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     f20:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				OCR3B = ruleOfThree(100, u8_percent, ICR3);
			}
		#endif
			break;
	}
}
     f24:	2b 96       	adiw	r28, 0x0b	; 11
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	de bf       	out	0x3e, r29	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	cd bf       	out	0x3d, r28	; 61
     f30:	df 91       	pop	r29
     f32:	cf 91       	pop	r28
     f34:	1f 91       	pop	r17
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	cf 90       	pop	r12
     f3e:	af 90       	pop	r10
     f40:	08 95       	ret

00000f42 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     f42:	1f 92       	push	r1
     f44:	0f 92       	push	r0
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	0f 92       	push	r0
     f4a:	11 24       	eor	r1, r1
     f4c:	0b b6       	in	r0, 0x3b	; 59
     f4e:	0f 92       	push	r0
     f50:	8f 93       	push	r24
     f52:	9f 93       	push	r25
     f54:	ef 93       	push	r30
     f56:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     f58:	e0 91 a9 01 	lds	r30, 0x01A9	; 0x8001a9 <u8_RLastReceivedIndex>
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	8e b5       	in	r24, 0x2e	; 46
     f60:	e6 55       	subi	r30, 0x56	; 86
     f62:	fe 4f       	sbci	r31, 0xFE	; 254
     f64:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     f66:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <u8_RLastReceivedIndex>
     f6a:	89 30       	cpi	r24, 0x09	; 9
     f6c:	30 f4       	brcc	.+12     	; 0xf7a <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     f6e:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <u8_RLastReceivedIndex>
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <u8_RLastReceivedIndex>
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     f7a:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     f84:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <u8_TLastTransmittedIndex>
     f88:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <u8_TLastRequestedIndex>
     f8c:	98 17       	cp	r25, r24
     f8e:	a1 f0       	breq	.+40     	; 0xfb8 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     f90:	e0 91 a6 01 	lds	r30, 0x01A6	; 0x8001a6 <u8_TLastTransmittedIndex>
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	ec 54       	subi	r30, 0x4C	; 76
     f98:	fe 4f       	sbci	r31, 0xFE	; 254
     f9a:	80 81       	ld	r24, Z
     f9c:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     f9e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <u8_TLastTransmittedIndex>
     fa2:	89 30       	cpi	r24, 0x09	; 9
     fa4:	30 f4       	brcc	.+12     	; 0xfb2 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     fa6:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <u8_TLastTransmittedIndex>
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <u8_TLastTransmittedIndex>
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     fb2:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <u8_TLastTransmittedIndex>
     fb6:	03 c0       	rjmp	.+6      	; 0xfbe <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <b_TAvailable>
	}
}
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	9f 91       	pop	r25
     fc4:	8f 91       	pop	r24
     fc6:	0f 90       	pop	r0
     fc8:	0b be       	out	0x3b, r0	; 59
     fca:	0f 90       	pop	r0
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	0f 90       	pop	r0
     fd0:	1f 90       	pop	r1
     fd2:	18 95       	reti

00000fd4 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     fd4:	8f 92       	push	r8
     fd6:	9f 92       	push	r9
     fd8:	af 92       	push	r10
     fda:	bf 92       	push	r11
     fdc:	ef 92       	push	r14
     fde:	ff 92       	push	r15
     fe0:	0f 93       	push	r16
     fe2:	1f 93       	push	r17
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	00 d0       	rcall	.+0      	; 0xfea <calculateTopRegister+0x16>
     fea:	00 d0       	rcall	.+0      	; 0xfec <calculateTopRegister+0x18>
     fec:	1f 92       	push	r1
     fee:	cd b7       	in	r28, 0x3d	; 61
     ff0:	de b7       	in	r29, 0x3e	; 62
     ff2:	48 01       	movw	r8, r16
     ff4:	59 01       	movw	r10, r18
     ff6:	41 30       	cpi	r20, 0x01	; 1
     ff8:	21 f0       	breq	.+8      	; 0x1002 <calculateTopRegister+0x2e>
     ffa:	42 30       	cpi	r20, 0x02	; 2
     ffc:	09 f4       	brne	.+2      	; 0x1000 <calculateTopRegister+0x2c>
     ffe:	88 c0       	rjmp	.+272    	; 0x1110 <calculateTopRegister+0x13c>
    1000:	4c c1       	rjmp	.+664    	; 0x129a <calculateTopRegister+0x2c6>
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	72 e1       	ldi	r23, 0x12	; 18
    1006:	8a e7       	ldi	r24, 0x7A	; 122
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a9 01       	movw	r20, r18
    100c:	98 01       	movw	r18, r16
    100e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1012:	da 01       	movw	r26, r20
    1014:	c9 01       	movw	r24, r18
    1016:	01 97       	sbiw	r24, 0x01	; 1
    1018:	a1 09       	sbc	r26, r1
    101a:	b1 09       	sbc	r27, r1
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	a2 07       	cpc	r26, r18
    1022:	b1 05       	cpc	r27, r1
    1024:	50 f4       	brcc	.+20     	; 0x103a <calculateTopRegister+0x66>
    1026:	49 ef       	ldi	r20, 0xF9	; 249
    1028:	5f ef       	ldi	r21, 0xFF	; 255
    102a:	6f ef       	ldi	r22, 0xFF	; 255
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	f7 01       	movw	r30, r14
    1030:	40 83       	st	Z, r20
    1032:	51 83       	std	Z+1, r21	; 0x01
    1034:	62 83       	std	Z+2, r22	; 0x02
    1036:	73 83       	std	Z+3, r23	; 0x03
    1038:	33 c1       	rjmp	.+614    	; 0x12a0 <calculateTopRegister+0x2cc>
    103a:	60 e4       	ldi	r22, 0x40	; 64
    103c:	72 e4       	ldi	r23, 0x42	; 66
    103e:	8f e0       	ldi	r24, 0x0F	; 15
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	a5 01       	movw	r20, r10
    1044:	94 01       	movw	r18, r8
    1046:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    104a:	da 01       	movw	r26, r20
    104c:	c9 01       	movw	r24, r18
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	a1 09       	sbc	r26, r1
    1052:	b1 09       	sbc	r27, r1
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	f1 e0       	ldi	r31, 0x01	; 1
    1058:	af 07       	cpc	r26, r31
    105a:	b1 05       	cpc	r27, r1
    105c:	50 f4       	brcc	.+20     	; 0x1072 <calculateTopRegister+0x9e>
    105e:	4a ef       	ldi	r20, 0xFA	; 250
    1060:	5f ef       	ldi	r21, 0xFF	; 255
    1062:	6f ef       	ldi	r22, 0xFF	; 255
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	f7 01       	movw	r30, r14
    1068:	40 83       	st	Z, r20
    106a:	51 83       	std	Z+1, r21	; 0x01
    106c:	62 83       	std	Z+2, r22	; 0x02
    106e:	73 83       	std	Z+3, r23	; 0x03
    1070:	17 c1       	rjmp	.+558    	; 0x12a0 <calculateTopRegister+0x2cc>
    1072:	68 e4       	ldi	r22, 0x48	; 72
    1074:	78 ee       	ldi	r23, 0xE8	; 232
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	a5 01       	movw	r20, r10
    107c:	94 01       	movw	r18, r8
    107e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1082:	da 01       	movw	r26, r20
    1084:	c9 01       	movw	r24, r18
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	a1 09       	sbc	r26, r1
    108a:	b1 09       	sbc	r27, r1
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	f1 e0       	ldi	r31, 0x01	; 1
    1090:	af 07       	cpc	r26, r31
    1092:	b1 05       	cpc	r27, r1
    1094:	50 f4       	brcc	.+20     	; 0x10aa <calculateTopRegister+0xd6>
    1096:	4c ef       	ldi	r20, 0xFC	; 252
    1098:	5f ef       	ldi	r21, 0xFF	; 255
    109a:	6f ef       	ldi	r22, 0xFF	; 255
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	f7 01       	movw	r30, r14
    10a0:	40 83       	st	Z, r20
    10a2:	51 83       	std	Z+1, r21	; 0x01
    10a4:	62 83       	std	Z+2, r22	; 0x02
    10a6:	73 83       	std	Z+3, r23	; 0x03
    10a8:	fb c0       	rjmp	.+502    	; 0x12a0 <calculateTopRegister+0x2cc>
    10aa:	62 e1       	ldi	r22, 0x12	; 18
    10ac:	7a e7       	ldi	r23, 0x7A	; 122
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a5 01       	movw	r20, r10
    10b4:	94 01       	movw	r18, r8
    10b6:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    10ba:	da 01       	movw	r26, r20
    10bc:	c9 01       	movw	r24, r18
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	a1 09       	sbc	r26, r1
    10c2:	b1 09       	sbc	r27, r1
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	f1 e0       	ldi	r31, 0x01	; 1
    10c8:	af 07       	cpc	r26, r31
    10ca:	b1 05       	cpc	r27, r1
    10cc:	50 f4       	brcc	.+20     	; 0x10e2 <calculateTopRegister+0x10e>
    10ce:	4e ef       	ldi	r20, 0xFE	; 254
    10d0:	5f ef       	ldi	r21, 0xFF	; 255
    10d2:	6f ef       	ldi	r22, 0xFF	; 255
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	f7 01       	movw	r30, r14
    10d8:	40 83       	st	Z, r20
    10da:	51 83       	std	Z+1, r21	; 0x01
    10dc:	62 83       	std	Z+2, r22	; 0x02
    10de:	73 83       	std	Z+3, r23	; 0x03
    10e0:	df c0       	rjmp	.+446    	; 0x12a0 <calculateTopRegister+0x2cc>
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	9f ef       	ldi	r25, 0xFF	; 255
    10e6:	af ef       	ldi	r26, 0xFF	; 255
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	f7 01       	movw	r30, r14
    10ec:	80 83       	st	Z, r24
    10ee:	91 83       	std	Z+1, r25	; 0x01
    10f0:	a2 83       	std	Z+2, r26	; 0x02
    10f2:	b3 83       	std	Z+3, r27	; 0x03
    10f4:	64 e8       	ldi	r22, 0x84	; 132
    10f6:	7e e1       	ldi	r23, 0x1E	; 30
    10f8:	80 e0       	ldi	r24, 0x00	; 0
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	a5 01       	movw	r20, r10
    10fe:	94 01       	movw	r18, r8
    1100:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1104:	da 01       	movw	r26, r20
    1106:	c9 01       	movw	r24, r18
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	a1 09       	sbc	r26, r1
    110c:	b1 09       	sbc	r27, r1
    110e:	c8 c0       	rjmp	.+400    	; 0x12a0 <calculateTopRegister+0x2cc>
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	72 e1       	ldi	r23, 0x12	; 18
    1114:	8a e7       	ldi	r24, 0x7A	; 122
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a9 01       	movw	r20, r18
    111a:	98 01       	movw	r18, r16
    111c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1120:	da 01       	movw	r26, r20
    1122:	c9 01       	movw	r24, r18
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	a1 09       	sbc	r26, r1
    1128:	b1 09       	sbc	r27, r1
    112a:	8f 3f       	cpi	r24, 0xFF	; 255
    112c:	91 05       	cpc	r25, r1
    112e:	a1 05       	cpc	r26, r1
    1130:	b1 05       	cpc	r27, r1
    1132:	09 f0       	breq	.+2      	; 0x1136 <calculateTopRegister+0x162>
    1134:	50 f4       	brcc	.+20     	; 0x114a <calculateTopRegister+0x176>
    1136:	49 ef       	ldi	r20, 0xF9	; 249
    1138:	5f ef       	ldi	r21, 0xFF	; 255
    113a:	6f ef       	ldi	r22, 0xFF	; 255
    113c:	70 e0       	ldi	r23, 0x00	; 0
    113e:	f7 01       	movw	r30, r14
    1140:	40 83       	st	Z, r20
    1142:	51 83       	std	Z+1, r21	; 0x01
    1144:	62 83       	std	Z+2, r22	; 0x02
    1146:	73 83       	std	Z+3, r23	; 0x03
    1148:	ab c0       	rjmp	.+342    	; 0x12a0 <calculateTopRegister+0x2cc>
    114a:	60 e4       	ldi	r22, 0x40	; 64
    114c:	72 e4       	ldi	r23, 0x42	; 66
    114e:	8f e0       	ldi	r24, 0x0F	; 15
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a5 01       	movw	r20, r10
    1154:	94 01       	movw	r18, r8
    1156:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    115a:	da 01       	movw	r26, r20
    115c:	c9 01       	movw	r24, r18
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	a1 09       	sbc	r26, r1
    1162:	b1 09       	sbc	r27, r1
    1164:	8f 3f       	cpi	r24, 0xFF	; 255
    1166:	91 05       	cpc	r25, r1
    1168:	a1 05       	cpc	r26, r1
    116a:	b1 05       	cpc	r27, r1
    116c:	09 f0       	breq	.+2      	; 0x1170 <calculateTopRegister+0x19c>
    116e:	50 f4       	brcc	.+20     	; 0x1184 <calculateTopRegister+0x1b0>
    1170:	4a ef       	ldi	r20, 0xFA	; 250
    1172:	5f ef       	ldi	r21, 0xFF	; 255
    1174:	6f ef       	ldi	r22, 0xFF	; 255
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	f7 01       	movw	r30, r14
    117a:	40 83       	st	Z, r20
    117c:	51 83       	std	Z+1, r21	; 0x01
    117e:	62 83       	std	Z+2, r22	; 0x02
    1180:	73 83       	std	Z+3, r23	; 0x03
    1182:	8e c0       	rjmp	.+284    	; 0x12a0 <calculateTopRegister+0x2cc>
    1184:	60 e9       	ldi	r22, 0x90	; 144
    1186:	70 ed       	ldi	r23, 0xD0	; 208
    1188:	83 e0       	ldi	r24, 0x03	; 3
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a5 01       	movw	r20, r10
    118e:	94 01       	movw	r18, r8
    1190:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1194:	da 01       	movw	r26, r20
    1196:	c9 01       	movw	r24, r18
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	a1 09       	sbc	r26, r1
    119c:	b1 09       	sbc	r27, r1
    119e:	8f 3f       	cpi	r24, 0xFF	; 255
    11a0:	91 05       	cpc	r25, r1
    11a2:	a1 05       	cpc	r26, r1
    11a4:	b1 05       	cpc	r27, r1
    11a6:	09 f0       	breq	.+2      	; 0x11aa <calculateTopRegister+0x1d6>
    11a8:	50 f4       	brcc	.+20     	; 0x11be <calculateTopRegister+0x1ea>
    11aa:	4b ef       	ldi	r20, 0xFB	; 251
    11ac:	5f ef       	ldi	r21, 0xFF	; 255
    11ae:	6f ef       	ldi	r22, 0xFF	; 255
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	f7 01       	movw	r30, r14
    11b4:	40 83       	st	Z, r20
    11b6:	51 83       	std	Z+1, r21	; 0x01
    11b8:	62 83       	std	Z+2, r22	; 0x02
    11ba:	73 83       	std	Z+3, r23	; 0x03
    11bc:	71 c0       	rjmp	.+226    	; 0x12a0 <calculateTopRegister+0x2cc>
    11be:	68 e4       	ldi	r22, 0x48	; 72
    11c0:	78 ee       	ldi	r23, 0xE8	; 232
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	a5 01       	movw	r20, r10
    11c8:	94 01       	movw	r18, r8
    11ca:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    11ce:	da 01       	movw	r26, r20
    11d0:	c9 01       	movw	r24, r18
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	a1 09       	sbc	r26, r1
    11d6:	b1 09       	sbc	r27, r1
    11d8:	8f 3f       	cpi	r24, 0xFF	; 255
    11da:	91 05       	cpc	r25, r1
    11dc:	a1 05       	cpc	r26, r1
    11de:	b1 05       	cpc	r27, r1
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <calculateTopRegister+0x210>
    11e2:	50 f4       	brcc	.+20     	; 0x11f8 <calculateTopRegister+0x224>
    11e4:	4c ef       	ldi	r20, 0xFC	; 252
    11e6:	5f ef       	ldi	r21, 0xFF	; 255
    11e8:	6f ef       	ldi	r22, 0xFF	; 255
    11ea:	70 e0       	ldi	r23, 0x00	; 0
    11ec:	f7 01       	movw	r30, r14
    11ee:	40 83       	st	Z, r20
    11f0:	51 83       	std	Z+1, r21	; 0x01
    11f2:	62 83       	std	Z+2, r22	; 0x02
    11f4:	73 83       	std	Z+3, r23	; 0x03
    11f6:	54 c0       	rjmp	.+168    	; 0x12a0 <calculateTopRegister+0x2cc>
    11f8:	64 e2       	ldi	r22, 0x24	; 36
    11fa:	74 ef       	ldi	r23, 0xF4	; 244
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	a5 01       	movw	r20, r10
    1202:	94 01       	movw	r18, r8
    1204:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1208:	da 01       	movw	r26, r20
    120a:	c9 01       	movw	r24, r18
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	a1 09       	sbc	r26, r1
    1210:	b1 09       	sbc	r27, r1
    1212:	8f 3f       	cpi	r24, 0xFF	; 255
    1214:	91 05       	cpc	r25, r1
    1216:	a1 05       	cpc	r26, r1
    1218:	b1 05       	cpc	r27, r1
    121a:	09 f0       	breq	.+2      	; 0x121e <calculateTopRegister+0x24a>
    121c:	50 f4       	brcc	.+20     	; 0x1232 <calculateTopRegister+0x25e>
    121e:	4d ef       	ldi	r20, 0xFD	; 253
    1220:	5f ef       	ldi	r21, 0xFF	; 255
    1222:	6f ef       	ldi	r22, 0xFF	; 255
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	f7 01       	movw	r30, r14
    1228:	40 83       	st	Z, r20
    122a:	51 83       	std	Z+1, r21	; 0x01
    122c:	62 83       	std	Z+2, r22	; 0x02
    122e:	73 83       	std	Z+3, r23	; 0x03
    1230:	37 c0       	rjmp	.+110    	; 0x12a0 <calculateTopRegister+0x2cc>
    1232:	62 e1       	ldi	r22, 0x12	; 18
    1234:	7a e7       	ldi	r23, 0x7A	; 122
    1236:	80 e0       	ldi	r24, 0x00	; 0
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	a5 01       	movw	r20, r10
    123c:	94 01       	movw	r18, r8
    123e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1242:	da 01       	movw	r26, r20
    1244:	c9 01       	movw	r24, r18
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	a1 09       	sbc	r26, r1
    124a:	b1 09       	sbc	r27, r1
    124c:	8f 3f       	cpi	r24, 0xFF	; 255
    124e:	91 05       	cpc	r25, r1
    1250:	a1 05       	cpc	r26, r1
    1252:	b1 05       	cpc	r27, r1
    1254:	09 f0       	breq	.+2      	; 0x1258 <calculateTopRegister+0x284>
    1256:	50 f4       	brcc	.+20     	; 0x126c <calculateTopRegister+0x298>
    1258:	4e ef       	ldi	r20, 0xFE	; 254
    125a:	5f ef       	ldi	r21, 0xFF	; 255
    125c:	6f ef       	ldi	r22, 0xFF	; 255
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	f7 01       	movw	r30, r14
    1262:	40 83       	st	Z, r20
    1264:	51 83       	std	Z+1, r21	; 0x01
    1266:	62 83       	std	Z+2, r22	; 0x02
    1268:	73 83       	std	Z+3, r23	; 0x03
    126a:	1a c0       	rjmp	.+52     	; 0x12a0 <calculateTopRegister+0x2cc>
    126c:	8f ef       	ldi	r24, 0xFF	; 255
    126e:	9f ef       	ldi	r25, 0xFF	; 255
    1270:	af ef       	ldi	r26, 0xFF	; 255
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	f7 01       	movw	r30, r14
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
    127e:	64 e8       	ldi	r22, 0x84	; 132
    1280:	7e e1       	ldi	r23, 0x1E	; 30
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a5 01       	movw	r20, r10
    1288:	94 01       	movw	r18, r8
    128a:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    128e:	da 01       	movw	r26, r20
    1290:	c9 01       	movw	r24, r18
    1292:	01 97       	sbiw	r24, 0x01	; 1
    1294:	a1 09       	sbc	r26, r1
    1296:	b1 09       	sbc	r27, r1
    1298:	03 c0       	rjmp	.+6      	; 0x12a0 <calculateTopRegister+0x2cc>
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	dc 01       	movw	r26, r24
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	df 91       	pop	r29
    12ac:	cf 91       	pop	r28
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ff 90       	pop	r15
    12b4:	ef 90       	pop	r14
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	9f 90       	pop	r9
    12bc:	8f 90       	pop	r8
    12be:	08 95       	ret

000012c0 <__vector_15>:
    12c0:	1f 92       	push	r1
    12c2:	0f 92       	push	r0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	0f 92       	push	r0
    12c8:	11 24       	eor	r1, r1
    12ca:	0b b6       	in	r0, 0x3b	; 59
    12cc:	0f 92       	push	r0
    12ce:	2f 93       	push	r18
    12d0:	3f 93       	push	r19
    12d2:	4f 93       	push	r20
    12d4:	5f 93       	push	r21
    12d6:	6f 93       	push	r22
    12d8:	7f 93       	push	r23
    12da:	8f 93       	push	r24
    12dc:	9f 93       	push	r25
    12de:	af 93       	push	r26
    12e0:	bf 93       	push	r27
    12e2:	ef 93       	push	r30
    12e4:	ff 93       	push	r31
    12e6:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <p_timer1Callbacks>
    12ea:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <p_timer1Callbacks+0x1>
    12ee:	09 95       	icall
    12f0:	ff 91       	pop	r31
    12f2:	ef 91       	pop	r30
    12f4:	bf 91       	pop	r27
    12f6:	af 91       	pop	r26
    12f8:	9f 91       	pop	r25
    12fa:	8f 91       	pop	r24
    12fc:	7f 91       	pop	r23
    12fe:	6f 91       	pop	r22
    1300:	5f 91       	pop	r21
    1302:	4f 91       	pop	r20
    1304:	3f 91       	pop	r19
    1306:	2f 91       	pop	r18
    1308:	0f 90       	pop	r0
    130a:	0b be       	out	0x3b, r0	; 59
    130c:	0f 90       	pop	r0
    130e:	0f be       	out	0x3f, r0	; 63
    1310:	0f 90       	pop	r0
    1312:	1f 90       	pop	r1
    1314:	18 95       	reti

00001316 <__vector_13>:
    1316:	1f 92       	push	r1
    1318:	0f 92       	push	r0
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	0f 92       	push	r0
    131e:	11 24       	eor	r1, r1
    1320:	0b b6       	in	r0, 0x3b	; 59
    1322:	0f 92       	push	r0
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
    1328:	2f 93       	push	r18
    132a:	3f 93       	push	r19
    132c:	4f 93       	push	r20
    132e:	5f 93       	push	r21
    1330:	6f 93       	push	r22
    1332:	7f 93       	push	r23
    1334:	8f 93       	push	r24
    1336:	9f 93       	push	r25
    1338:	af 93       	push	r26
    133a:	bf 93       	push	r27
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	ef 93       	push	r30
    1342:	ff 93       	push	r31
    1344:	c1 e8       	ldi	r28, 0x81	; 129
    1346:	d0 e0       	ldi	r29, 0x00	; 0
    1348:	88 81       	ld	r24, Y
    134a:	64 e0       	ldi	r22, 0x04	; 4
    134c:	e2 dc       	rcall	.-1596   	; 0xd12 <checkBit>
    134e:	18 2f       	mov	r17, r24
    1350:	88 81       	ld	r24, Y
    1352:	63 e0       	ldi	r22, 0x03	; 3
    1354:	de dc       	rcall	.-1604   	; 0xd12 <checkBit>
    1356:	c1 2f       	mov	r28, r17
    1358:	cc 0f       	add	r28, r28
    135a:	cc 0f       	add	r28, r28
    135c:	cc 0f       	add	r28, r28
    135e:	24 e0       	ldi	r18, 0x04	; 4
    1360:	82 9f       	mul	r24, r18
    1362:	c0 01       	movw	r24, r0
    1364:	11 24       	eor	r1, r1
    1366:	c8 2b       	or	r28, r24
    1368:	00 e8       	ldi	r16, 0x80	; 128
    136a:	10 e0       	ldi	r17, 0x00	; 0
    136c:	f8 01       	movw	r30, r16
    136e:	80 81       	ld	r24, Z
    1370:	61 e0       	ldi	r22, 0x01	; 1
    1372:	cf dc       	rcall	.-1634   	; 0xd12 <checkBit>
    1374:	d8 2f       	mov	r29, r24
    1376:	f8 01       	movw	r30, r16
    1378:	80 81       	ld	r24, Z
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	ca dc       	rcall	.-1644   	; 0xd12 <checkBit>
    137e:	dd 0f       	add	r29, r29
    1380:	8c 2b       	or	r24, r28
    1382:	8d 2b       	or	r24, r29
    1384:	88 30       	cpi	r24, 0x08	; 8
    1386:	18 f4       	brcc	.+6      	; 0x138e <__vector_13+0x78>
    1388:	84 30       	cpi	r24, 0x04	; 4
    138a:	19 f4       	brne	.+6      	; 0x1392 <__vector_13+0x7c>
    138c:	08 c0       	rjmp	.+16     	; 0x139e <__vector_13+0x88>
    138e:	80 fd       	sbrc	r24, 0
    1390:	06 c0       	rjmp	.+12     	; 0x139e <__vector_13+0x88>
    1392:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <p_timer1Callbacks+0x2>
    1396:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <p_timer1Callbacks+0x3>
    139a:	09 95       	icall
    139c:	05 c0       	rjmp	.+10     	; 0x13a8 <__vector_13+0x92>
    139e:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <p_timer1Callbacks>
    13a2:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <p_timer1Callbacks+0x1>
    13a6:	09 95       	icall
    13a8:	ff 91       	pop	r31
    13aa:	ef 91       	pop	r30
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	0f 90       	pop	r0
    13ca:	0b be       	out	0x3b, r0	; 59
    13cc:	0f 90       	pop	r0
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	0f 90       	pop	r0
    13d2:	1f 90       	pop	r1
    13d4:	18 95       	reti

000013d6 <__vector_14>:
    13d6:	1f 92       	push	r1
    13d8:	0f 92       	push	r0
    13da:	0f b6       	in	r0, 0x3f	; 63
    13dc:	0f 92       	push	r0
    13de:	11 24       	eor	r1, r1
    13e0:	0b b6       	in	r0, 0x3b	; 59
    13e2:	0f 92       	push	r0
    13e4:	2f 93       	push	r18
    13e6:	3f 93       	push	r19
    13e8:	4f 93       	push	r20
    13ea:	5f 93       	push	r21
    13ec:	6f 93       	push	r22
    13ee:	7f 93       	push	r23
    13f0:	8f 93       	push	r24
    13f2:	9f 93       	push	r25
    13f4:	af 93       	push	r26
    13f6:	bf 93       	push	r27
    13f8:	ef 93       	push	r30
    13fa:	ff 93       	push	r31
    13fc:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <p_timer1Callbacks+0x4>
    1400:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <p_timer1Callbacks+0x5>
    1404:	09 95       	icall
    1406:	ff 91       	pop	r31
    1408:	ef 91       	pop	r30
    140a:	bf 91       	pop	r27
    140c:	af 91       	pop	r26
    140e:	9f 91       	pop	r25
    1410:	8f 91       	pop	r24
    1412:	7f 91       	pop	r23
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0b be       	out	0x3b, r0	; 59
    1422:	0f 90       	pop	r0
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	0f 90       	pop	r0
    1428:	1f 90       	pop	r1
    142a:	18 95       	reti

0000142c <__vector_12>:
    142c:	1f 92       	push	r1
    142e:	0f 92       	push	r0
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	0f 92       	push	r0
    1434:	11 24       	eor	r1, r1
    1436:	0b b6       	in	r0, 0x3b	; 59
    1438:	0f 92       	push	r0
    143a:	0f 93       	push	r16
    143c:	1f 93       	push	r17
    143e:	2f 93       	push	r18
    1440:	3f 93       	push	r19
    1442:	4f 93       	push	r20
    1444:	5f 93       	push	r21
    1446:	6f 93       	push	r22
    1448:	7f 93       	push	r23
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	cf 93       	push	r28
    1454:	df 93       	push	r29
    1456:	ef 93       	push	r30
    1458:	ff 93       	push	r31
    145a:	c1 e8       	ldi	r28, 0x81	; 129
    145c:	d0 e0       	ldi	r29, 0x00	; 0
    145e:	88 81       	ld	r24, Y
    1460:	64 e0       	ldi	r22, 0x04	; 4
    1462:	57 dc       	rcall	.-1874   	; 0xd12 <checkBit>
    1464:	18 2f       	mov	r17, r24
    1466:	88 81       	ld	r24, Y
    1468:	63 e0       	ldi	r22, 0x03	; 3
    146a:	53 dc       	rcall	.-1882   	; 0xd12 <checkBit>
    146c:	c1 2f       	mov	r28, r17
    146e:	cc 0f       	add	r28, r28
    1470:	cc 0f       	add	r28, r28
    1472:	cc 0f       	add	r28, r28
    1474:	24 e0       	ldi	r18, 0x04	; 4
    1476:	82 9f       	mul	r24, r18
    1478:	c0 01       	movw	r24, r0
    147a:	11 24       	eor	r1, r1
    147c:	c8 2b       	or	r28, r24
    147e:	00 e8       	ldi	r16, 0x80	; 128
    1480:	10 e0       	ldi	r17, 0x00	; 0
    1482:	f8 01       	movw	r30, r16
    1484:	80 81       	ld	r24, Z
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	44 dc       	rcall	.-1912   	; 0xd12 <checkBit>
    148a:	d8 2f       	mov	r29, r24
    148c:	f8 01       	movw	r30, r16
    148e:	80 81       	ld	r24, Z
    1490:	60 e0       	ldi	r22, 0x00	; 0
    1492:	3f dc       	rcall	.-1922   	; 0xd12 <checkBit>
    1494:	dd 0f       	add	r29, r29
    1496:	8c 2b       	or	r24, r28
    1498:	8d 2b       	or	r24, r29
    149a:	88 30       	cpi	r24, 0x08	; 8
    149c:	10 f0       	brcs	.+4      	; 0x14a2 <__vector_12+0x76>
    149e:	80 ff       	sbrs	r24, 0
    14a0:	06 c0       	rjmp	.+12     	; 0x14ae <__vector_12+0x82>
    14a2:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <p_timer1Callbacks+0x6>
    14a6:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <p_timer1Callbacks+0x7>
    14aa:	09 95       	icall
    14ac:	05 c0       	rjmp	.+10     	; 0x14b8 <__vector_12+0x8c>
    14ae:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <p_timer1Callbacks>
    14b2:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <p_timer1Callbacks+0x1>
    14b6:	09 95       	icall
    14b8:	ff 91       	pop	r31
    14ba:	ef 91       	pop	r30
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	bf 91       	pop	r27
    14c2:	af 91       	pop	r26
    14c4:	9f 91       	pop	r25
    14c6:	8f 91       	pop	r24
    14c8:	7f 91       	pop	r23
    14ca:	6f 91       	pop	r22
    14cc:	5f 91       	pop	r21
    14ce:	4f 91       	pop	r20
    14d0:	3f 91       	pop	r19
    14d2:	2f 91       	pop	r18
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	0f 90       	pop	r0
    14da:	0b be       	out	0x3b, r0	; 59
    14dc:	0f 90       	pop	r0
    14de:	0f be       	out	0x3f, r0	; 63
    14e0:	0f 90       	pop	r0
    14e2:	1f 90       	pop	r1
    14e4:	18 95       	reti

000014e6 <__vector_11>:
    14e6:	1f 92       	push	r1
    14e8:	0f 92       	push	r0
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	0f 92       	push	r0
    14ee:	11 24       	eor	r1, r1
    14f0:	0b b6       	in	r0, 0x3b	; 59
    14f2:	0f 92       	push	r0
    14f4:	2f 93       	push	r18
    14f6:	3f 93       	push	r19
    14f8:	4f 93       	push	r20
    14fa:	5f 93       	push	r21
    14fc:	6f 93       	push	r22
    14fe:	7f 93       	push	r23
    1500:	8f 93       	push	r24
    1502:	9f 93       	push	r25
    1504:	af 93       	push	r26
    1506:	bf 93       	push	r27
    1508:	ef 93       	push	r30
    150a:	ff 93       	push	r31
    150c:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <p_timer2Callbacks>
    1510:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <p_timer2Callbacks+0x1>
    1514:	09 95       	icall
    1516:	ff 91       	pop	r31
    1518:	ef 91       	pop	r30
    151a:	bf 91       	pop	r27
    151c:	af 91       	pop	r26
    151e:	9f 91       	pop	r25
    1520:	8f 91       	pop	r24
    1522:	7f 91       	pop	r23
    1524:	6f 91       	pop	r22
    1526:	5f 91       	pop	r21
    1528:	4f 91       	pop	r20
    152a:	3f 91       	pop	r19
    152c:	2f 91       	pop	r18
    152e:	0f 90       	pop	r0
    1530:	0b be       	out	0x3b, r0	; 59
    1532:	0f 90       	pop	r0
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	0f 90       	pop	r0
    1538:	1f 90       	pop	r1
    153a:	18 95       	reti

0000153c <__vector_9>:
    153c:	1f 92       	push	r1
    153e:	0f 92       	push	r0
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	0f 92       	push	r0
    1544:	11 24       	eor	r1, r1
    1546:	0b b6       	in	r0, 0x3b	; 59
    1548:	0f 92       	push	r0
    154a:	2f 93       	push	r18
    154c:	3f 93       	push	r19
    154e:	4f 93       	push	r20
    1550:	5f 93       	push	r21
    1552:	6f 93       	push	r22
    1554:	7f 93       	push	r23
    1556:	8f 93       	push	r24
    1558:	9f 93       	push	r25
    155a:	af 93       	push	r26
    155c:	bf 93       	push	r27
    155e:	ef 93       	push	r30
    1560:	ff 93       	push	r31
    1562:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1566:	63 e0       	ldi	r22, 0x03	; 3
    1568:	d4 db       	rcall	.-2136   	; 0xd12 <checkBit>
    156a:	81 11       	cpse	r24, r1
    156c:	0b c0       	rjmp	.+22     	; 0x1584 <__vector_9+0x48>
    156e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1572:	83 70       	andi	r24, 0x03	; 3
    1574:	82 30       	cpi	r24, 0x02	; 2
    1576:	31 f0       	breq	.+12     	; 0x1584 <__vector_9+0x48>
    1578:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <p_timer2Callbacks+0x2>
    157c:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <p_timer2Callbacks+0x3>
    1580:	09 95       	icall
    1582:	05 c0       	rjmp	.+10     	; 0x158e <__vector_9+0x52>
    1584:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <p_timer2Callbacks>
    1588:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <p_timer2Callbacks+0x1>
    158c:	09 95       	icall
    158e:	ff 91       	pop	r31
    1590:	ef 91       	pop	r30
    1592:	bf 91       	pop	r27
    1594:	af 91       	pop	r26
    1596:	9f 91       	pop	r25
    1598:	8f 91       	pop	r24
    159a:	7f 91       	pop	r23
    159c:	6f 91       	pop	r22
    159e:	5f 91       	pop	r21
    15a0:	4f 91       	pop	r20
    15a2:	3f 91       	pop	r19
    15a4:	2f 91       	pop	r18
    15a6:	0f 90       	pop	r0
    15a8:	0b be       	out	0x3b, r0	; 59
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <__vector_10>:
    15b4:	1f 92       	push	r1
    15b6:	0f 92       	push	r0
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	0f 92       	push	r0
    15bc:	11 24       	eor	r1, r1
    15be:	0b b6       	in	r0, 0x3b	; 59
    15c0:	0f 92       	push	r0
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
    15da:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <p_timer2Callbacks+0x4>
    15de:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <p_timer2Callbacks+0x5>
    15e2:	09 95       	icall
    15e4:	ff 91       	pop	r31
    15e6:	ef 91       	pop	r30
    15e8:	bf 91       	pop	r27
    15ea:	af 91       	pop	r26
    15ec:	9f 91       	pop	r25
    15ee:	8f 91       	pop	r24
    15f0:	7f 91       	pop	r23
    15f2:	6f 91       	pop	r22
    15f4:	5f 91       	pop	r21
    15f6:	4f 91       	pop	r20
    15f8:	3f 91       	pop	r19
    15fa:	2f 91       	pop	r18
    15fc:	0f 90       	pop	r0
    15fe:	0b be       	out	0x3b, r0	; 59
    1600:	0f 90       	pop	r0
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	0f 90       	pop	r0
    1606:	1f 90       	pop	r1
    1608:	18 95       	reti

0000160a <timer_init>:
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	0f 93       	push	r16
    1610:	1f 93       	push	r17
    1612:	cf 93       	push	r28
    1614:	df 93       	push	r29
    1616:	cd b7       	in	r28, 0x3d	; 61
    1618:	de b7       	in	r29, 0x3e	; 62
    161a:	29 97       	sbiw	r28, 0x09	; 9
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	de bf       	out	0x3e, r29	; 62
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	cd bf       	out	0x3d, r28	; 61
    1626:	4d 83       	std	Y+5, r20	; 0x05
    1628:	5e 83       	std	Y+6, r21	; 0x06
    162a:	6f 83       	std	Y+7, r22	; 0x07
    162c:	78 87       	std	Y+8, r23	; 0x08
    162e:	89 87       	std	Y+9, r24	; 0x09
    1630:	0e 81       	ldd	r16, Y+6	; 0x06
    1632:	1f 81       	ldd	r17, Y+7	; 0x07
    1634:	28 85       	ldd	r18, Y+8	; 0x08
    1636:	39 85       	ldd	r19, Y+9	; 0x09
    1638:	19 82       	std	Y+1, r1	; 0x01
    163a:	1a 82       	std	Y+2, r1	; 0x02
    163c:	1b 82       	std	Y+3, r1	; 0x03
    163e:	1c 82       	std	Y+4, r1	; 0x04
    1640:	41 30       	cpi	r20, 0x01	; 1
    1642:	21 f0       	breq	.+8      	; 0x164c <timer_init+0x42>
    1644:	42 30       	cpi	r20, 0x02	; 2
    1646:	09 f4       	brne	.+2      	; 0x164a <timer_init+0x40>
    1648:	95 c0       	rjmp	.+298    	; 0x1774 <timer_init+0x16a>
    164a:	1e c1       	rjmp	.+572    	; 0x1888 <timer_init+0x27e>
    164c:	09 3f       	cpi	r16, 0xF9	; 249
    164e:	8f ef       	ldi	r24, 0xFF	; 255
    1650:	18 07       	cpc	r17, r24
    1652:	28 07       	cpc	r18, r24
    1654:	31 05       	cpc	r19, r1
    1656:	28 f0       	brcs	.+10     	; 0x1662 <timer_init+0x58>
    1658:	09 83       	std	Y+1, r16	; 0x01
    165a:	1a 83       	std	Y+2, r17	; 0x02
    165c:	2b 83       	std	Y+3, r18	; 0x03
    165e:	3c 83       	std	Y+4, r19	; 0x04
    1660:	15 c0       	rjmp	.+42     	; 0x168c <timer_init+0x82>
    1662:	ce 01       	movw	r24, r28
    1664:	01 96       	adiw	r24, 0x01	; 1
    1666:	7c 01       	movw	r14, r24
    1668:	4d 81       	ldd	r20, Y+5	; 0x05
    166a:	5e 81       	ldd	r21, Y+6	; 0x06
    166c:	6f 81       	ldd	r22, Y+7	; 0x07
    166e:	78 85       	ldd	r23, Y+8	; 0x08
    1670:	89 85       	ldd	r24, Y+9	; 0x09
    1672:	b0 dc       	rcall	.-1696   	; 0xfd4 <calculateTopRegister>
    1674:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1678:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    167c:	64 e0       	ldi	r22, 0x04	; 4
    167e:	81 e8       	ldi	r24, 0x81	; 129
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	2e db       	rcall	.-2468   	; 0xce0 <setBit>
    1684:	63 e0       	ldi	r22, 0x03	; 3
    1686:	81 e8       	ldi	r24, 0x81	; 129
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	2a db       	rcall	.-2476   	; 0xce0 <setBit>
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	9a 81       	ldd	r25, Y+2	; 0x02
    1690:	ab 81       	ldd	r26, Y+3	; 0x03
    1692:	bc 81       	ldd	r27, Y+4	; 0x04
    1694:	8c 3f       	cpi	r24, 0xFC	; 252
    1696:	2f ef       	ldi	r18, 0xFF	; 255
    1698:	92 07       	cpc	r25, r18
    169a:	a2 07       	cpc	r26, r18
    169c:	b1 05       	cpc	r27, r1
    169e:	59 f1       	breq	.+86     	; 0x16f6 <timer_init+0xec>
    16a0:	60 f4       	brcc	.+24     	; 0x16ba <timer_init+0xb0>
    16a2:	89 3f       	cpi	r24, 0xF9	; 249
    16a4:	2f ef       	ldi	r18, 0xFF	; 255
    16a6:	92 07       	cpc	r25, r18
    16a8:	a2 07       	cpc	r26, r18
    16aa:	b1 05       	cpc	r27, r1
    16ac:	91 f0       	breq	.+36     	; 0x16d2 <timer_init+0xc8>
    16ae:	8a 3f       	cpi	r24, 0xFA	; 250
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	af 4f       	sbci	r26, 0xFF	; 255
    16b4:	b1 05       	cpc	r27, r1
    16b6:	b1 f0       	breq	.+44     	; 0x16e4 <timer_init+0xda>
    16b8:	38 c0       	rjmp	.+112    	; 0x172a <timer_init+0x120>
    16ba:	8e 3f       	cpi	r24, 0xFE	; 254
    16bc:	2f ef       	ldi	r18, 0xFF	; 255
    16be:	92 07       	cpc	r25, r18
    16c0:	a2 07       	cpc	r26, r18
    16c2:	b1 05       	cpc	r27, r1
    16c4:	09 f1       	breq	.+66     	; 0x1708 <timer_init+0xfe>
    16c6:	8f 3f       	cpi	r24, 0xFF	; 255
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	af 4f       	sbci	r26, 0xFF	; 255
    16cc:	b1 05       	cpc	r27, r1
    16ce:	29 f1       	breq	.+74     	; 0x171a <timer_init+0x110>
    16d0:	2c c0       	rjmp	.+88     	; 0x172a <timer_init+0x120>
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	ab 83       	std	Y+3, r26	; 0x03
    16e0:	bc 83       	std	Y+4, r27	; 0x04
    16e2:	23 c0       	rjmp	.+70     	; 0x172a <timer_init+0x120>
    16e4:	82 e0       	ldi	r24, 0x02	; 2
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	89 83       	std	Y+1, r24	; 0x01
    16ee:	9a 83       	std	Y+2, r25	; 0x02
    16f0:	ab 83       	std	Y+3, r26	; 0x03
    16f2:	bc 83       	std	Y+4, r27	; 0x04
    16f4:	1a c0       	rjmp	.+52     	; 0x172a <timer_init+0x120>
    16f6:	83 e0       	ldi	r24, 0x03	; 3
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	a0 e0       	ldi	r26, 0x00	; 0
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	89 83       	std	Y+1, r24	; 0x01
    1700:	9a 83       	std	Y+2, r25	; 0x02
    1702:	ab 83       	std	Y+3, r26	; 0x03
    1704:	bc 83       	std	Y+4, r27	; 0x04
    1706:	11 c0       	rjmp	.+34     	; 0x172a <timer_init+0x120>
    1708:	84 e0       	ldi	r24, 0x04	; 4
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	89 83       	std	Y+1, r24	; 0x01
    1712:	9a 83       	std	Y+2, r25	; 0x02
    1714:	ab 83       	std	Y+3, r26	; 0x03
    1716:	bc 83       	std	Y+4, r27	; 0x04
    1718:	08 c0       	rjmp	.+16     	; 0x172a <timer_init+0x120>
    171a:	85 e0       	ldi	r24, 0x05	; 5
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	a0 e0       	ldi	r26, 0x00	; 0
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	89 83       	std	Y+1, r24	; 0x01
    1724:	9a 83       	std	Y+2, r25	; 0x02
    1726:	ab 83       	std	Y+3, r26	; 0x03
    1728:	bc 83       	std	Y+4, r27	; 0x04
    172a:	49 81       	ldd	r20, Y+1	; 0x01
    172c:	5a 81       	ldd	r21, Y+2	; 0x02
    172e:	6b 81       	ldd	r22, Y+3	; 0x03
    1730:	7c 81       	ldd	r23, Y+4	; 0x04
    1732:	76 95       	lsr	r23
    1734:	67 95       	ror	r22
    1736:	57 95       	ror	r21
    1738:	47 95       	ror	r20
    173a:	76 95       	lsr	r23
    173c:	67 95       	ror	r22
    173e:	57 95       	ror	r21
    1740:	47 95       	ror	r20
    1742:	41 70       	andi	r20, 0x01	; 1
    1744:	62 e0       	ldi	r22, 0x02	; 2
    1746:	88 ec       	ldi	r24, 0xC8	; 200
    1748:	91 e0       	ldi	r25, 0x01	; 1
    174a:	b2 da       	rcall	.-2716   	; 0xcb0 <updateBit>
    174c:	49 81       	ldd	r20, Y+1	; 0x01
    174e:	5a 81       	ldd	r21, Y+2	; 0x02
    1750:	6b 81       	ldd	r22, Y+3	; 0x03
    1752:	7c 81       	ldd	r23, Y+4	; 0x04
    1754:	76 95       	lsr	r23
    1756:	67 95       	ror	r22
    1758:	57 95       	ror	r21
    175a:	47 95       	ror	r20
    175c:	41 70       	andi	r20, 0x01	; 1
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	91 e0       	ldi	r25, 0x01	; 1
    1764:	a5 da       	rcall	.-2742   	; 0xcb0 <updateBit>
    1766:	49 81       	ldd	r20, Y+1	; 0x01
    1768:	41 70       	andi	r20, 0x01	; 1
    176a:	60 e0       	ldi	r22, 0x00	; 0
    176c:	88 ec       	ldi	r24, 0xC8	; 200
    176e:	91 e0       	ldi	r25, 0x01	; 1
    1770:	9f da       	rcall	.-2754   	; 0xcb0 <updateBit>
    1772:	8a c0       	rjmp	.+276    	; 0x1888 <timer_init+0x27e>
    1774:	09 3f       	cpi	r16, 0xF9	; 249
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	18 07       	cpc	r17, r24
    177a:	28 07       	cpc	r18, r24
    177c:	31 05       	cpc	r19, r1
    177e:	28 f0       	brcs	.+10     	; 0x178a <timer_init+0x180>
    1780:	09 83       	std	Y+1, r16	; 0x01
    1782:	1a 83       	std	Y+2, r17	; 0x02
    1784:	2b 83       	std	Y+3, r18	; 0x03
    1786:	3c 83       	std	Y+4, r19	; 0x04
    1788:	0f c0       	rjmp	.+30     	; 0x17a8 <timer_init+0x19e>
    178a:	ce 01       	movw	r24, r28
    178c:	01 96       	adiw	r24, 0x01	; 1
    178e:	7c 01       	movw	r14, r24
    1790:	4d 81       	ldd	r20, Y+5	; 0x05
    1792:	5e 81       	ldd	r21, Y+6	; 0x06
    1794:	6f 81       	ldd	r22, Y+7	; 0x07
    1796:	78 85       	ldd	r23, Y+8	; 0x08
    1798:	89 85       	ldd	r24, Y+9	; 0x09
    179a:	1c dc       	rcall	.-1992   	; 0xfd4 <calculateTopRegister>
    179c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    17a0:	61 e0       	ldi	r22, 0x01	; 1
    17a2:	80 eb       	ldi	r24, 0xB0	; 176
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	9c da       	rcall	.-2760   	; 0xce0 <setBit>
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	9a 81       	ldd	r25, Y+2	; 0x02
    17ac:	ab 81       	ldd	r26, Y+3	; 0x03
    17ae:	bc 81       	ldd	r27, Y+4	; 0x04
    17b0:	fc 01       	movw	r30, r24
    17b2:	37 96       	adiw	r30, 0x07	; 7
    17b4:	e7 30       	cpi	r30, 0x07	; 7
    17b6:	f1 05       	cpc	r31, r1
    17b8:	08 f0       	brcs	.+2      	; 0x17bc <timer_init+0x1b2>
    17ba:	42 c0       	rjmp	.+132    	; 0x1840 <timer_init+0x236>
    17bc:	ea 5b       	subi	r30, 0xBA	; 186
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	0c 94 5e 1a 	jmp	0x34bc	; 0x34bc <__tablejump2__>
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	89 83       	std	Y+1, r24	; 0x01
    17ce:	9a 83       	std	Y+2, r25	; 0x02
    17d0:	ab 83       	std	Y+3, r26	; 0x03
    17d2:	bc 83       	std	Y+4, r27	; 0x04
    17d4:	35 c0       	rjmp	.+106    	; 0x1840 <timer_init+0x236>
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a0 e0       	ldi	r26, 0x00	; 0
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	ab 83       	std	Y+3, r26	; 0x03
    17e4:	bc 83       	std	Y+4, r27	; 0x04
    17e6:	2c c0       	rjmp	.+88     	; 0x1840 <timer_init+0x236>
    17e8:	83 e0       	ldi	r24, 0x03	; 3
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a0 e0       	ldi	r26, 0x00	; 0
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	89 83       	std	Y+1, r24	; 0x01
    17f2:	9a 83       	std	Y+2, r25	; 0x02
    17f4:	ab 83       	std	Y+3, r26	; 0x03
    17f6:	bc 83       	std	Y+4, r27	; 0x04
    17f8:	23 c0       	rjmp	.+70     	; 0x1840 <timer_init+0x236>
    17fa:	84 e0       	ldi	r24, 0x04	; 4
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	a0 e0       	ldi	r26, 0x00	; 0
    1800:	b0 e0       	ldi	r27, 0x00	; 0
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	9a 83       	std	Y+2, r25	; 0x02
    1806:	ab 83       	std	Y+3, r26	; 0x03
    1808:	bc 83       	std	Y+4, r27	; 0x04
    180a:	1a c0       	rjmp	.+52     	; 0x1840 <timer_init+0x236>
    180c:	85 e0       	ldi	r24, 0x05	; 5
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	a0 e0       	ldi	r26, 0x00	; 0
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	89 83       	std	Y+1, r24	; 0x01
    1816:	9a 83       	std	Y+2, r25	; 0x02
    1818:	ab 83       	std	Y+3, r26	; 0x03
    181a:	bc 83       	std	Y+4, r27	; 0x04
    181c:	11 c0       	rjmp	.+34     	; 0x1840 <timer_init+0x236>
    181e:	86 e0       	ldi	r24, 0x06	; 6
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	a0 e0       	ldi	r26, 0x00	; 0
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	9a 83       	std	Y+2, r25	; 0x02
    182a:	ab 83       	std	Y+3, r26	; 0x03
    182c:	bc 83       	std	Y+4, r27	; 0x04
    182e:	08 c0       	rjmp	.+16     	; 0x1840 <timer_init+0x236>
    1830:	87 e0       	ldi	r24, 0x07	; 7
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a0 e0       	ldi	r26, 0x00	; 0
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	9a 83       	std	Y+2, r25	; 0x02
    183c:	ab 83       	std	Y+3, r26	; 0x03
    183e:	bc 83       	std	Y+4, r27	; 0x04
    1840:	49 81       	ldd	r20, Y+1	; 0x01
    1842:	5a 81       	ldd	r21, Y+2	; 0x02
    1844:	6b 81       	ldd	r22, Y+3	; 0x03
    1846:	7c 81       	ldd	r23, Y+4	; 0x04
    1848:	76 95       	lsr	r23
    184a:	67 95       	ror	r22
    184c:	57 95       	ror	r21
    184e:	47 95       	ror	r20
    1850:	76 95       	lsr	r23
    1852:	67 95       	ror	r22
    1854:	57 95       	ror	r21
    1856:	47 95       	ror	r20
    1858:	41 70       	andi	r20, 0x01	; 1
    185a:	62 e0       	ldi	r22, 0x02	; 2
    185c:	89 ec       	ldi	r24, 0xC9	; 201
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	27 da       	rcall	.-2994   	; 0xcb0 <updateBit>
    1862:	49 81       	ldd	r20, Y+1	; 0x01
    1864:	5a 81       	ldd	r21, Y+2	; 0x02
    1866:	6b 81       	ldd	r22, Y+3	; 0x03
    1868:	7c 81       	ldd	r23, Y+4	; 0x04
    186a:	76 95       	lsr	r23
    186c:	67 95       	ror	r22
    186e:	57 95       	ror	r21
    1870:	47 95       	ror	r20
    1872:	41 70       	andi	r20, 0x01	; 1
    1874:	61 e0       	ldi	r22, 0x01	; 1
    1876:	89 ec       	ldi	r24, 0xC9	; 201
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	1a da       	rcall	.-3020   	; 0xcb0 <updateBit>
    187c:	49 81       	ldd	r20, Y+1	; 0x01
    187e:	41 70       	andi	r20, 0x01	; 1
    1880:	60 e0       	ldi	r22, 0x00	; 0
    1882:	89 ec       	ldi	r24, 0xC9	; 201
    1884:	91 e0       	ldi	r25, 0x01	; 1
    1886:	14 da       	rcall	.-3032   	; 0xcb0 <updateBit>
    1888:	29 96       	adiw	r28, 0x09	; 9
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	de bf       	out	0x3e, r29	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	cd bf       	out	0x3d, r28	; 61
    1894:	df 91       	pop	r29
    1896:	cf 91       	pop	r28
    1898:	1f 91       	pop	r17
    189a:	0f 91       	pop	r16
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	08 95       	ret

000018a2 <timer_start>:
    18a2:	cf 93       	push	r28
    18a4:	df 93       	push	r29
    18a6:	00 d0       	rcall	.+0      	; 0x18a8 <timer_start+0x6>
    18a8:	00 d0       	rcall	.+0      	; 0x18aa <timer_start+0x8>
    18aa:	1f 92       	push	r1
    18ac:	cd b7       	in	r28, 0x3d	; 61
    18ae:	de b7       	in	r29, 0x3e	; 62
    18b0:	41 30       	cpi	r20, 0x01	; 1
    18b2:	19 f0       	breq	.+6      	; 0x18ba <timer_start+0x18>
    18b4:	42 30       	cpi	r20, 0x02	; 2
    18b6:	d1 f0       	breq	.+52     	; 0x18ec <timer_start+0x4a>
    18b8:	31 c0       	rjmp	.+98     	; 0x191c <timer_start+0x7a>
    18ba:	40 91 c8 01 	lds	r20, 0x01C8	; 0x8001c8 <u8_timer1ClockSource>
    18be:	42 fb       	bst	r20, 2
    18c0:	44 27       	eor	r20, r20
    18c2:	40 f9       	bld	r20, 0
    18c4:	62 e0       	ldi	r22, 0x02	; 2
    18c6:	81 e8       	ldi	r24, 0x81	; 129
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	f2 d9       	rcall	.-3100   	; 0xcb0 <updateBit>
    18cc:	40 91 c8 01 	lds	r20, 0x01C8	; 0x8001c8 <u8_timer1ClockSource>
    18d0:	46 95       	lsr	r20
    18d2:	41 70       	andi	r20, 0x01	; 1
    18d4:	61 e0       	ldi	r22, 0x01	; 1
    18d6:	81 e8       	ldi	r24, 0x81	; 129
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	ea d9       	rcall	.-3116   	; 0xcb0 <updateBit>
    18dc:	40 91 c8 01 	lds	r20, 0x01C8	; 0x8001c8 <u8_timer1ClockSource>
    18e0:	41 70       	andi	r20, 0x01	; 1
    18e2:	60 e0       	ldi	r22, 0x00	; 0
    18e4:	81 e8       	ldi	r24, 0x81	; 129
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	e3 d9       	rcall	.-3130   	; 0xcb0 <updateBit>
    18ea:	18 c0       	rjmp	.+48     	; 0x191c <timer_start+0x7a>
    18ec:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <u8_timer2ClockSource>
    18f0:	42 fb       	bst	r20, 2
    18f2:	44 27       	eor	r20, r20
    18f4:	40 f9       	bld	r20, 0
    18f6:	62 e0       	ldi	r22, 0x02	; 2
    18f8:	81 eb       	ldi	r24, 0xB1	; 177
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	d9 d9       	rcall	.-3150   	; 0xcb0 <updateBit>
    18fe:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <u8_timer2ClockSource>
    1902:	46 95       	lsr	r20
    1904:	41 70       	andi	r20, 0x01	; 1
    1906:	61 e0       	ldi	r22, 0x01	; 1
    1908:	81 eb       	ldi	r24, 0xB1	; 177
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	d1 d9       	rcall	.-3166   	; 0xcb0 <updateBit>
    190e:	40 91 c9 01 	lds	r20, 0x01C9	; 0x8001c9 <u8_timer2ClockSource>
    1912:	41 70       	andi	r20, 0x01	; 1
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	81 eb       	ldi	r24, 0xB1	; 177
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	ca d9       	rcall	.-3180   	; 0xcb0 <updateBit>
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret

0000192c <timer_enableInterrupt>:
    192c:	cf 92       	push	r12
    192e:	df 92       	push	r13
    1930:	ef 92       	push	r14
    1932:	ff 92       	push	r15
    1934:	0f 93       	push	r16
    1936:	1f 93       	push	r17
    1938:	cf 93       	push	r28
    193a:	df 93       	push	r29
    193c:	00 d0       	rcall	.+0      	; 0x193e <timer_enableInterrupt+0x12>
    193e:	00 d0       	rcall	.+0      	; 0x1940 <timer_enableInterrupt+0x14>
    1940:	1f 92       	push	r1
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
    1946:	49 83       	std	Y+1, r20	; 0x01
    1948:	5a 83       	std	Y+2, r21	; 0x02
    194a:	6b 83       	std	Y+3, r22	; 0x03
    194c:	7c 83       	std	Y+4, r23	; 0x04
    194e:	8d 83       	std	Y+5, r24	; 0x05
    1950:	02 2f       	mov	r16, r18
    1952:	41 30       	cpi	r20, 0x01	; 1
    1954:	21 f0       	breq	.+8      	; 0x195e <timer_enableInterrupt+0x32>
    1956:	42 30       	cpi	r20, 0x02	; 2
    1958:	09 f4       	brne	.+2      	; 0x195c <timer_enableInterrupt+0x30>
    195a:	5e c0       	rjmp	.+188    	; 0x1a18 <timer_enableInterrupt+0xec>
    195c:	95 c0       	rjmp	.+298    	; 0x1a88 <timer_enableInterrupt+0x15c>
    195e:	0f 2e       	mov	r0, r31
    1960:	f1 e8       	ldi	r31, 0x81	; 129
    1962:	ef 2e       	mov	r14, r31
    1964:	f1 2c       	mov	r15, r1
    1966:	f0 2d       	mov	r31, r0
    1968:	f7 01       	movw	r30, r14
    196a:	80 81       	ld	r24, Z
    196c:	64 e0       	ldi	r22, 0x04	; 4
    196e:	d1 d9       	rcall	.-3166   	; 0xd12 <checkBit>
    1970:	18 2f       	mov	r17, r24
    1972:	f7 01       	movw	r30, r14
    1974:	80 81       	ld	r24, Z
    1976:	63 e0       	ldi	r22, 0x03	; 3
    1978:	cc d9       	rcall	.-3176   	; 0xd12 <checkBit>
    197a:	11 0f       	add	r17, r17
    197c:	11 0f       	add	r17, r17
    197e:	11 0f       	add	r17, r17
    1980:	f4 e0       	ldi	r31, 0x04	; 4
    1982:	8f 9f       	mul	r24, r31
    1984:	c0 01       	movw	r24, r0
    1986:	11 24       	eor	r1, r1
    1988:	18 2b       	or	r17, r24
    198a:	68 94       	set
    198c:	cc 24       	eor	r12, r12
    198e:	c7 f8       	bld	r12, 7
    1990:	d1 2c       	mov	r13, r1
    1992:	f6 01       	movw	r30, r12
    1994:	80 81       	ld	r24, Z
    1996:	61 e0       	ldi	r22, 0x01	; 1
    1998:	bc d9       	rcall	.-3208   	; 0xd12 <checkBit>
    199a:	f8 2e       	mov	r15, r24
    199c:	f6 01       	movw	r30, r12
    199e:	80 81       	ld	r24, Z
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	b7 d9       	rcall	.-3218   	; 0xd12 <checkBit>
    19a4:	ff 0c       	add	r15, r15
    19a6:	81 2b       	or	r24, r17
    19a8:	8f 29       	or	r24, r15
    19aa:	01 30       	cpi	r16, 0x01	; 1
    19ac:	d9 f0       	breq	.+54     	; 0x19e4 <timer_enableInterrupt+0xb8>
    19ae:	28 f0       	brcs	.+10     	; 0x19ba <timer_enableInterrupt+0x8e>
    19b0:	02 30       	cpi	r16, 0x02	; 2
    19b2:	21 f1       	breq	.+72     	; 0x19fc <timer_enableInterrupt+0xd0>
    19b4:	03 30       	cpi	r16, 0x03	; 3
    19b6:	39 f1       	breq	.+78     	; 0x1a06 <timer_enableInterrupt+0xda>
    19b8:	67 c0       	rjmp	.+206    	; 0x1a88 <timer_enableInterrupt+0x15c>
    19ba:	88 30       	cpi	r24, 0x08	; 8
    19bc:	38 f4       	brcc	.+14     	; 0x19cc <timer_enableInterrupt+0xa0>
    19be:	84 30       	cpi	r24, 0x04	; 4
    19c0:	61 f0       	breq	.+24     	; 0x19da <timer_enableInterrupt+0xae>
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	8f e6       	ldi	r24, 0x6F	; 111
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	8b d9       	rcall	.-3306   	; 0xce0 <setBit>
    19ca:	5e c0       	rjmp	.+188    	; 0x1a88 <timer_enableInterrupt+0x15c>
    19cc:	80 fd       	sbrc	r24, 0
    19ce:	05 c0       	rjmp	.+10     	; 0x19da <timer_enableInterrupt+0xae>
    19d0:	65 e0       	ldi	r22, 0x05	; 5
    19d2:	8f e6       	ldi	r24, 0x6F	; 111
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	84 d9       	rcall	.-3320   	; 0xce0 <setBit>
    19d8:	57 c0       	rjmp	.+174    	; 0x1a88 <timer_enableInterrupt+0x15c>
    19da:	61 e0       	ldi	r22, 0x01	; 1
    19dc:	8f e6       	ldi	r24, 0x6F	; 111
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	7f d9       	rcall	.-3330   	; 0xce0 <setBit>
    19e2:	52 c0       	rjmp	.+164    	; 0x1a88 <timer_enableInterrupt+0x15c>
    19e4:	88 30       	cpi	r24, 0x08	; 8
    19e6:	18 f4       	brcc	.+6      	; 0x19ee <timer_enableInterrupt+0xc2>
    19e8:	84 30       	cpi	r24, 0x04	; 4
    19ea:	19 f4       	brne	.+6      	; 0x19f2 <timer_enableInterrupt+0xc6>
    19ec:	4d c0       	rjmp	.+154    	; 0x1a88 <timer_enableInterrupt+0x15c>
    19ee:	80 fd       	sbrc	r24, 0
    19f0:	4b c0       	rjmp	.+150    	; 0x1a88 <timer_enableInterrupt+0x15c>
    19f2:	61 e0       	ldi	r22, 0x01	; 1
    19f4:	8f e6       	ldi	r24, 0x6F	; 111
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	73 d9       	rcall	.-3354   	; 0xce0 <setBit>
    19fa:	46 c0       	rjmp	.+140    	; 0x1a88 <timer_enableInterrupt+0x15c>
    19fc:	62 e0       	ldi	r22, 0x02	; 2
    19fe:	8f e6       	ldi	r24, 0x6F	; 111
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	6e d9       	rcall	.-3364   	; 0xce0 <setBit>
    1a04:	41 c0       	rjmp	.+130    	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a06:	88 30       	cpi	r24, 0x08	; 8
    1a08:	10 f0       	brcs	.+4      	; 0x1a0e <timer_enableInterrupt+0xe2>
    1a0a:	80 ff       	sbrs	r24, 0
    1a0c:	3d c0       	rjmp	.+122    	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a0e:	65 e0       	ldi	r22, 0x05	; 5
    1a10:	8f e6       	ldi	r24, 0x6F	; 111
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	65 d9       	rcall	.-3382   	; 0xce0 <setBit>
    1a16:	38 c0       	rjmp	.+112    	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a18:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	79 d9       	rcall	.-3342   	; 0xd12 <checkBit>
    1a20:	18 2f       	mov	r17, r24
    1a22:	0f 2e       	mov	r0, r31
    1a24:	f0 eb       	ldi	r31, 0xB0	; 176
    1a26:	ef 2e       	mov	r14, r31
    1a28:	f1 2c       	mov	r15, r1
    1a2a:	f0 2d       	mov	r31, r0
    1a2c:	f7 01       	movw	r30, r14
    1a2e:	80 81       	ld	r24, Z
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	6f d9       	rcall	.-3362   	; 0xd12 <checkBit>
    1a34:	11 0f       	add	r17, r17
    1a36:	11 0f       	add	r17, r17
    1a38:	88 0f       	add	r24, r24
    1a3a:	18 2b       	or	r17, r24
    1a3c:	f7 01       	movw	r30, r14
    1a3e:	80 81       	ld	r24, Z
    1a40:	60 e0       	ldi	r22, 0x00	; 0
    1a42:	67 d9       	rcall	.-3378   	; 0xd12 <checkBit>
    1a44:	81 2b       	or	r24, r17
    1a46:	01 30       	cpi	r16, 0x01	; 1
    1a48:	91 f0       	breq	.+36     	; 0x1a6e <timer_enableInterrupt+0x142>
    1a4a:	18 f0       	brcs	.+6      	; 0x1a52 <timer_enableInterrupt+0x126>
    1a4c:	02 30       	cpi	r16, 0x02	; 2
    1a4e:	c1 f0       	breq	.+48     	; 0x1a80 <timer_enableInterrupt+0x154>
    1a50:	1b c0       	rjmp	.+54     	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	38 f4       	brcc	.+14     	; 0x1a64 <timer_enableInterrupt+0x138>
    1a56:	82 30       	cpi	r24, 0x02	; 2
    1a58:	29 f0       	breq	.+10     	; 0x1a64 <timer_enableInterrupt+0x138>
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	80 e7       	ldi	r24, 0x70	; 112
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	3f d9       	rcall	.-3458   	; 0xce0 <setBit>
    1a62:	12 c0       	rjmp	.+36     	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a64:	61 e0       	ldi	r22, 0x01	; 1
    1a66:	80 e7       	ldi	r24, 0x70	; 112
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	3a d9       	rcall	.-3468   	; 0xce0 <setBit>
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a6e:	84 30       	cpi	r24, 0x04	; 4
    1a70:	58 f4       	brcc	.+22     	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a72:	82 30       	cpi	r24, 0x02	; 2
    1a74:	49 f0       	breq	.+18     	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	80 e7       	ldi	r24, 0x70	; 112
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	31 d9       	rcall	.-3486   	; 0xce0 <setBit>
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <timer_enableInterrupt+0x15c>
    1a80:	62 e0       	ldi	r22, 0x02	; 2
    1a82:	80 e7       	ldi	r24, 0x70	; 112
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	2c d9       	rcall	.-3496   	; 0xce0 <setBit>
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	08 95       	ret

00001aa4 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    1aa4:	0f 93       	push	r16
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	00 d0       	rcall	.+0      	; 0x1aae <timer_attachInterrupt+0xa>
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <timer_attachInterrupt+0xc>
    1ab0:	1f 92       	push	r1
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    1ab6:	41 30       	cpi	r20, 0x01	; 1
    1ab8:	19 f0       	breq	.+6      	; 0x1ac0 <timer_attachInterrupt+0x1c>
    1aba:	42 30       	cpi	r20, 0x02	; 2
    1abc:	51 f0       	breq	.+20     	; 0x1ad2 <timer_attachInterrupt+0x2e>
    1abe:	11 c0       	rjmp	.+34     	; 0x1ae2 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    1ac0:	e2 2f       	mov	r30, r18
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	ee 0f       	add	r30, r30
    1ac6:	ff 1f       	adc	r31, r31
    1ac8:	e0 54       	subi	r30, 0x40	; 64
    1aca:	fe 4f       	sbci	r31, 0xFE	; 254
    1acc:	11 83       	std	Z+1, r17	; 0x01
    1ace:	00 83       	st	Z, r16
		#endif
			break;
    1ad0:	08 c0       	rjmp	.+16     	; 0x1ae2 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    1ad2:	e2 2f       	mov	r30, r18
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	ee 0f       	add	r30, r30
    1ad8:	ff 1f       	adc	r31, r31
    1ada:	e6 53       	subi	r30, 0x36	; 54
    1adc:	fe 4f       	sbci	r31, 0xFE	; 254
    1ade:	11 83       	std	Z+1, r17	; 0x01
    1ae0:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	08 95       	ret

00001af6 <calculateUBRR>:
/************************************************************************/
/* Internal functions                                                   */
/************************************************************************/

u16 calculateUBRR(u32 u32_baudRate, bool *b_usingDoubleSpeed)
{
    1af6:	4f 92       	push	r4
    1af8:	5f 92       	push	r5
    1afa:	6f 92       	push	r6
    1afc:	7f 92       	push	r7
    1afe:	8f 92       	push	r8
    1b00:	9f 92       	push	r9
    1b02:	af 92       	push	r10
    1b04:	bf 92       	push	r11
    1b06:	cf 92       	push	r12
    1b08:	df 92       	push	r13
    1b0a:	ef 92       	push	r14
    1b0c:	ff 92       	push	r15
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	4b 01       	movw	r8, r22
    1b14:	5c 01       	movw	r10, r24
    1b16:	ea 01       	movw	r28, r20
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = F_CPU / u8_divisor / u32_baudRate - 1;
    1b18:	0f 2e       	mov	r0, r31
    1b1a:	f0 e2       	ldi	r31, 0x20	; 32
    1b1c:	4f 2e       	mov	r4, r31
    1b1e:	f1 ea       	ldi	r31, 0xA1	; 161
    1b20:	5f 2e       	mov	r5, r31
    1b22:	f7 e0       	ldi	r31, 0x07	; 7
    1b24:	6f 2e       	mov	r6, r31
    1b26:	71 2c       	mov	r7, r1
    1b28:	f0 2d       	mov	r31, r0
    1b2a:	c3 01       	movw	r24, r6
    1b2c:	b2 01       	movw	r22, r4
    1b2e:	a5 01       	movw	r20, r10
    1b30:	94 01       	movw	r18, r8
    1b32:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1b36:	69 01       	movw	r12, r18
    1b38:	7a 01       	movw	r14, r20
	u32_actualBaudRate = F_CPU / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
    1b3a:	c3 01       	movw	r24, r6
    1b3c:	b2 01       	movw	r22, r4
    1b3e:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1b42:	ca 01       	movw	r24, r20
    1b44:	b9 01       	movw	r22, r18
    1b46:	a5 01       	movw	r20, r10
    1b48:	94 01       	movw	r18, r8
    1b4a:	eb d8       	rcall	.-3626   	; 0xd22 <calculateError>
    1b4c:	44 97       	sbiw	r24, 0x14	; 20
    1b4e:	30 f4       	brcc	.+12     	; 0x1b5c <calculateUBRR+0x66>
{
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = F_CPU / u8_divisor / u32_baudRate - 1;
    1b50:	d7 01       	movw	r26, r14
    1b52:	c6 01       	movw	r24, r12
    1b54:	01 97       	sbiw	r24, 0x01	; 1
    1b56:	a1 09       	sbc	r26, r1
    1b58:	b1 09       	sbc	r27, r1
    1b5a:	0f c0       	rjmp	.+30     	; 0x1b7a <calculateUBRR+0x84>
	u32_actualBaudRate = F_CPU / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
	{
		u8_divisor = 8;
		*b_usingDoubleSpeed = TRUE;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	88 83       	st	Y, r24
		u32_ubrr = F_CPU / u8_divisor / u32_baudRate - 1;
    1b60:	60 e4       	ldi	r22, 0x40	; 64
    1b62:	72 e4       	ldi	r23, 0x42	; 66
    1b64:	8f e0       	ldi	r24, 0x0F	; 15
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a5 01       	movw	r20, r10
    1b6a:	94 01       	movw	r18, r8
    1b6c:	0e 94 3c 1a 	call	0x3478	; 0x3478 <__udivmodsi4>
    1b70:	da 01       	movw	r26, r20
    1b72:	c9 01       	movw	r24, r18
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	a1 09       	sbc	r26, r1
    1b78:	b1 09       	sbc	r27, r1
		u32_actualBaudRate = F_CPU / u8_divisor / (u32_ubrr + 1);
	}
	return u32_ubrr;
}
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	9f 90       	pop	r9
    1b8c:	8f 90       	pop	r8
    1b8e:	7f 90       	pop	r7
    1b90:	6f 90       	pop	r6
    1b92:	5f 90       	pop	r5
    1b94:	4f 90       	pop	r4
    1b96:	08 95       	ret

00001b98 <uart_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void uart_init(uart_struct_t s_uart)
{
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	2b 97       	sbiw	r28, 0x0b	; 11
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	0a 83       	std	Y+2, r16	; 0x02
    1bb2:	1b 83       	std	Y+3, r17	; 0x03
    1bb4:	2c 83       	std	Y+4, r18	; 0x04
    1bb6:	3d 83       	std	Y+5, r19	; 0x05
    1bb8:	4e 83       	std	Y+6, r20	; 0x06
    1bba:	5f 83       	std	Y+7, r21	; 0x07
    1bbc:	68 87       	std	Y+8, r22	; 0x08
    1bbe:	79 87       	std	Y+9, r23	; 0x09
    1bc0:	8a 87       	std	Y+10, r24	; 0x0a
    1bc2:	9b 87       	std	Y+11, r25	; 0x0b
	u16 u16_ubrr;
	bool b_usingDoubleSpeed = FALSE;
    1bc4:	19 82       	std	Y+1, r1	; 0x01

	switch (s_uart.peripheral)
    1bc6:	01 11       	cpse	r16, r1
    1bc8:	7d c0       	rjmp	.+250    	; 0x1cc4 <uart_init+0x12c>
    1bca:	19 2f       	mov	r17, r25
	{
	case UART0:
	#ifdef USING_UART0
		/* Set asynchronous mode */
		UCSR0C &= ~(0b11 << UMSEL00);
    1bcc:	e2 ec       	ldi	r30, 0xC2	; 194
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8f 73       	andi	r24, 0x3F	; 63
    1bd4:	80 83       	st	Z, r24
		/* Set baud rate */
		u16_ubrr = calculateUBRR(s_uart.baudRate, &b_usingDoubleSpeed);
    1bd6:	6b 81       	ldd	r22, Y+3	; 0x03
    1bd8:	7c 81       	ldd	r23, Y+4	; 0x04
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	ae 01       	movw	r20, r28
    1be0:	4f 5f       	subi	r20, 0xFF	; 255
    1be2:	5f 4f       	sbci	r21, 0xFF	; 255
    1be4:	88 df       	rcall	.-240    	; 0x1af6 <calculateUBRR>
		UBRR0 = u16_ubrr;
    1be6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1bea:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		updateBit(&UCSR0A, U2X0, b_usingDoubleSpeed);
    1bee:	49 81       	ldd	r20, Y+1	; 0x01
    1bf0:	61 e0       	ldi	r22, 0x01	; 1
    1bf2:	80 ec       	ldi	r24, 0xC0	; 192
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	5c d8       	rcall	.-3912   	; 0xcb0 <updateBit>
		/* Set frame size */
		switch (s_uart.frameSize)
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	31 f1       	breq	.+76     	; 0x1c4a <uart_init+0xb2>
    1bfe:	28 f4       	brcc	.+10     	; 0x1c0a <uart_init+0x72>
    1c00:	88 23       	and	r24, r24
    1c02:	49 f0       	breq	.+18     	; 0x1c16 <uart_init+0x7e>
    1c04:	81 30       	cpi	r24, 0x01	; 1
    1c06:	a1 f0       	breq	.+40     	; 0x1c30 <uart_init+0x98>
    1c08:	46 c0       	rjmp	.+140    	; 0x1c96 <uart_init+0xfe>
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	59 f1       	breq	.+86     	; 0x1c64 <uart_init+0xcc>
    1c0e:	84 30       	cpi	r24, 0x04	; 4
    1c10:	09 f4       	brne	.+2      	; 0x1c14 <uart_init+0x7c>
    1c12:	35 c0       	rjmp	.+106    	; 0x1c7e <uart_init+0xe6>
    1c14:	40 c0       	rjmp	.+128    	; 0x1c96 <uart_init+0xfe>
		{
			case _5BIT:
				clearBit(&UCSR0C, UCSZ00);
    1c16:	61 e0       	ldi	r22, 0x01	; 1
    1c18:	82 ec       	ldi	r24, 0xC2	; 194
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&UCSR0C, UCSZ01);
    1c1c:	6d d8       	rcall	.-3878   	; 0xcf8 <clearBit>
    1c1e:	62 e0       	ldi	r22, 0x02	; 2
    1c20:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	69 d8       	rcall	.-3886   	; 0xcf8 <clearBit>
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	81 ec       	ldi	r24, 0xC1	; 193
				break;
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
			case _6BIT:
				setBit(&UCSR0C, UCSZ00);
    1c2c:	65 d8       	rcall	.-3894   	; 0xcf8 <clearBit>
    1c2e:	33 c0       	rjmp	.+102    	; 0x1c96 <uart_init+0xfe>
    1c30:	61 e0       	ldi	r22, 0x01	; 1
    1c32:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0C, UCSZ01);
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	54 d8       	rcall	.-3928   	; 0xce0 <setBit>
    1c38:	62 e0       	ldi	r22, 0x02	; 2
    1c3a:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	5c d8       	rcall	.-3912   	; 0xcf8 <clearBit>
    1c40:	62 e0       	ldi	r22, 0x02	; 2
				break;
			case _7BIT:
				clearBit(&UCSR0C, UCSZ00);
    1c42:	81 ec       	ldi	r24, 0xC1	; 193
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	58 d8       	rcall	.-3920   	; 0xcf8 <clearBit>
    1c48:	26 c0       	rjmp	.+76     	; 0x1c96 <uart_init+0xfe>
				setBit(&UCSR0C, UCSZ01);
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	82 ec       	ldi	r24, 0xC2	; 194
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	53 d8       	rcall	.-3930   	; 0xcf8 <clearBit>
				clearBit(&UCSR0B, UCSZ02);
    1c52:	62 e0       	ldi	r22, 0x02	; 2
    1c54:	82 ec       	ldi	r24, 0xC2	; 194
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	43 d8       	rcall	.-3962   	; 0xce0 <setBit>
				break;
			case _8BIT:
				setBit(&UCSR0C, UCSZ00);
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	81 ec       	ldi	r24, 0xC1	; 193
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
				setBit(&UCSR0C, UCSZ01);
    1c60:	4b d8       	rcall	.-3946   	; 0xcf8 <clearBit>
    1c62:	19 c0       	rjmp	.+50     	; 0x1c96 <uart_init+0xfe>
    1c64:	61 e0       	ldi	r22, 0x01	; 1
				clearBit(&UCSR0B, UCSZ02);
    1c66:	82 ec       	ldi	r24, 0xC2	; 194
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	3a d8       	rcall	.-3980   	; 0xce0 <setBit>
    1c6c:	62 e0       	ldi	r22, 0x02	; 2
				break;
    1c6e:	82 ec       	ldi	r24, 0xC2	; 194
			case _9BIT:
				setBit(&UCSR0C, UCSZ00);
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	36 d8       	rcall	.-3988   	; 0xce0 <setBit>
    1c74:	62 e0       	ldi	r22, 0x02	; 2
    1c76:	81 ec       	ldi	r24, 0xC1	; 193
				setBit(&UCSR0C, UCSZ01);
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	3e d8       	rcall	.-3972   	; 0xcf8 <clearBit>
    1c7c:	0c c0       	rjmp	.+24     	; 0x1c96 <uart_init+0xfe>
    1c7e:	61 e0       	ldi	r22, 0x01	; 1
    1c80:	82 ec       	ldi	r24, 0xC2	; 194
				setBit(&UCSR0B, UCSZ02);
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	2d d8       	rcall	.-4006   	; 0xce0 <setBit>
    1c86:	62 e0       	ldi	r22, 0x02	; 2
    1c88:	82 ec       	ldi	r24, 0xC2	; 194
				break;
		}
		/* Set number of stop bits */
		updateBit(&UCSR0C, USBS0, s_uart.stopBits);
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	29 d8       	rcall	.-4014   	; 0xce0 <setBit>
    1c8e:	62 e0       	ldi	r22, 0x02	; 2
    1c90:	81 ec       	ldi	r24, 0xC1	; 193
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	25 d8       	rcall	.-4022   	; 0xce0 <setBit>
		/* Set parity check */
		if (s_uart.parityBit == NONE)
    1c96:	4a 85       	ldd	r20, Y+10	; 0x0a
    1c98:	63 e0       	ldi	r22, 0x03	; 3
			UCSR0C &= ~(0b11 << UPM00);
    1c9a:	82 ec       	ldi	r24, 0xC2	; 194
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	08 d8       	rcall	.-4080   	; 0xcb0 <updateBit>
    1ca0:	12 30       	cpi	r17, 0x02	; 2
    1ca2:	31 f4       	brne	.+12     	; 0x1cb0 <uart_init+0x118>
    1ca4:	e2 ec       	ldi	r30, 0xC2	; 194
		else
		{
			setBit(&UCSR0C, UPM01);
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	8f 7c       	andi	r24, 0xCF	; 207
    1cac:	80 83       	st	Z, r24
    1cae:	0a c0       	rjmp	.+20     	; 0x1cc4 <uart_init+0x12c>
			updateBit(&UCSR0C, UPM00, s_uart.parityBit);
    1cb0:	65 e0       	ldi	r22, 0x05	; 5
    1cb2:	82 ec       	ldi	r24, 0xC2	; 194
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	14 d8       	rcall	.-4056   	; 0xce0 <setBit>
    1cb8:	41 2f       	mov	r20, r17
    1cba:	64 e0       	ldi	r22, 0x04	; 4
		}
	#endif
#endif
		break;
	}
}
    1cbc:	82 ec       	ldi	r24, 0xC2	; 194
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	0e 94 58 06 	call	0xcb0	; 0xcb0 <updateBit>
    1cc4:	2b 96       	adiw	r28, 0x0b	; 11
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	f8 94       	cli
    1cca:	de bf       	out	0x3e, r29	; 62
    1ccc:	0f be       	out	0x3f, r0	; 63
    1cce:	cd bf       	out	0x3d, r28	; 61
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	08 95       	ret

00001cda <uart_start>:

void uart_start(uart_struct_t s_uart)
{
    1cda:	0f 93       	push	r16
    1cdc:	1f 93       	push	r17
    1cde:	cf 93       	push	r28
    1ce0:	df 93       	push	r29
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	2a 97       	sbiw	r28, 0x0a	; 10
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	6f 83       	std	Y+7, r22	; 0x07
	switch (s_uart.peripheral)
    1cf4:	01 11       	cpse	r16, r1
    1cf6:	0c c0       	rjmp	.+24     	; 0x1d10 <uart_start+0x36>
	{
		case UART0:
		#ifdef USING_UART0
			updateBit(&UCSR0B, RXEN0, s_uart.useRx);
    1cf8:	45 2f       	mov	r20, r21
    1cfa:	64 e0       	ldi	r22, 0x04	; 4
    1cfc:	81 ec       	ldi	r24, 0xC1	; 193
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 58 06 	call	0xcb0	; 0xcb0 <updateBit>
			updateBit(&UCSR0B, TXEN0, s_uart.useTx);
    1d04:	4f 81       	ldd	r20, Y+7	; 0x07
    1d06:	63 e0       	ldi	r22, 0x03	; 3
    1d08:	81 ec       	ldi	r24, 0xC1	; 193
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <updateBit>
			updateBit(&UCSR1B, RXEN1, s_uart.useRx);
			updateBit(&UCSR1B, TXEN1, s_uart.useTx);
		#endif
			break;
	}
}
    1d10:	2a 96       	adiw	r28, 0x0a	; 10
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	08 95       	ret

00001d26 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    1d26:	1f 92       	push	r1
    1d28:	0f 92       	push	r0
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	0f 92       	push	r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	0b b6       	in	r0, 0x3b	; 59
    1d32:	0f 92       	push	r0
    1d34:	2f 93       	push	r18
    1d36:	3f 93       	push	r19
    1d38:	4f 93       	push	r20
    1d3a:	5f 93       	push	r21
    1d3c:	6f 93       	push	r22
    1d3e:	7f 93       	push	r23
    1d40:	8f 93       	push	r24
    1d42:	9f 93       	push	r25
    1d44:	af 93       	push	r26
    1d46:	bf 93       	push	r27
    1d48:	ef 93       	push	r30
    1d4a:	ff 93       	push	r31
	p_wdgCallback();
    1d4c:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <p_wdgCallback>
    1d50:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <p_wdgCallback+0x1>
    1d54:	09 95       	icall
}
    1d56:	ff 91       	pop	r31
    1d58:	ef 91       	pop	r30
    1d5a:	bf 91       	pop	r27
    1d5c:	af 91       	pop	r26
    1d5e:	9f 91       	pop	r25
    1d60:	8f 91       	pop	r24
    1d62:	7f 91       	pop	r23
    1d64:	6f 91       	pop	r22
    1d66:	5f 91       	pop	r21
    1d68:	4f 91       	pop	r20
    1d6a:	3f 91       	pop	r19
    1d6c:	2f 91       	pop	r18
    1d6e:	0f 90       	pop	r0
    1d70:	0b be       	out	0x3b, r0	; 59
    1d72:	0f 90       	pop	r0
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	0f 90       	pop	r0
    1d78:	1f 90       	pop	r1
    1d7a:	18 95       	reti

00001d7c <debug_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void debug_init()
{
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
	s_debugUart.baudRate = _19200;
    1d80:	e2 ed       	ldi	r30, 0xD2	; 210
    1d82:	f1 e0       	ldi	r31, 0x01	; 1
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	18 2f       	mov	r17, r24
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	8b e4       	ldi	r24, 0x4B	; 75
    1d8c:	82 83       	std	Z+2, r24	; 0x02
    1d8e:	13 82       	std	Z+3, r1	; 0x03
    1d90:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	78 2f       	mov	r23, r24
    1d96:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = EVEN;
    1d98:	11 86       	std	Z+9, r1	; 0x09
	s_debugUart.peripheral = UART0;
    1d9a:	10 82       	st	Z, r1
	s_debugUart.stopBits = _1BIT;
    1d9c:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
    1d9e:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	68 2f       	mov	r22, r24
    1da4:	86 83       	std	Z+6, r24	; 0x06
	uart_init(s_debugUart);
    1da6:	00 e0       	ldi	r16, 0x00	; 0
    1da8:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <s_debugUart+0x2>
    1dac:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <s_debugUart+0x3>
    1db0:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <s_debugUart+0x4>
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	ee de       	rcall	.-548    	; 0x1b98 <uart_init>
	uart_start(s_debugUart);
    1dbc:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <s_debugUart>
    1dc0:	10 91 d3 01 	lds	r17, 0x01D3	; 0x8001d3 <s_debugUart+0x1>
    1dc4:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <s_debugUart+0x2>
    1dc8:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <s_debugUart+0x3>
    1dcc:	40 91 d6 01 	lds	r20, 0x01D6	; 0x8001d6 <s_debugUart+0x4>
    1dd0:	50 91 d7 01 	lds	r21, 0x01D7	; 0x8001d7 <s_debugUart+0x5>
    1dd4:	60 91 d8 01 	lds	r22, 0x01D8	; 0x8001d8 <s_debugUart+0x6>
    1dd8:	70 91 d9 01 	lds	r23, 0x01D9	; 0x8001d9 <s_debugUart+0x7>
    1ddc:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <s_debugUart+0x8>
    1de0:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <s_debugUart+0x9>
    1de4:	7a df       	rcall	.-268    	; 0x1cda <uart_start>
}
    1de6:	1f 91       	pop	r17
    1de8:	0f 91       	pop	r16
    1dea:	08 95       	ret

00001dec <encoder_increment>:
	gpio_disableInterrupt(s_encoder.B, INTERRUPT_TOGGLE);
}

u32 encoder_getCounter(encoder_struct_t s_encoder){
	return s_encoder.counter;
}
    1dec:	0f 93       	push	r16
    1dee:	1f 93       	push	r17
    1df0:	cf 93       	push	r28
    1df2:	df 93       	push	r29
    1df4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <s_encoderLeft+0x6>
    1df8:	81 30       	cpi	r24, 0x01	; 1
    1dfa:	19 f1       	breq	.+70     	; 0x1e42 <encoder_increment+0x56>
    1dfc:	30 f0       	brcs	.+12     	; 0x1e0a <encoder_increment+0x1e>
    1dfe:	82 30       	cpi	r24, 0x02	; 2
    1e00:	e1 f1       	breq	.+120    	; 0x1e7a <encoder_increment+0x8e>
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <encoder_increment+0x1c>
    1e06:	55 c0       	rjmp	.+170    	; 0x1eb2 <encoder_increment+0xc6>
    1e08:	6f c0       	rjmp	.+222    	; 0x1ee8 <encoder_increment+0xfc>
    1e0a:	80 b1       	in	r24, 0x00	; 0
    1e0c:	c8 e3       	ldi	r28, 0x38	; 56
    1e0e:	d1 e0       	ldi	r29, 0x01	; 1
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	8c 01       	movw	r16, r24
    1e1a:	0f 80       	ldd	r0, Y+7	; 0x07
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <encoder_increment+0x36>
    1e1e:	00 0f       	add	r16, r16
    1e20:	11 1f       	adc	r17, r17
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <encoder_increment+0x32>
    1e26:	80 b1       	in	r24, 0x00	; 0
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0b 84       	ldd	r0, Y+11	; 0x0b
    1e32:	02 c0       	rjmp	.+4      	; 0x1e38 <encoder_increment+0x4c>
    1e34:	88 0f       	add	r24, r24
    1e36:	99 1f       	adc	r25, r25
    1e38:	0a 94       	dec	r0
    1e3a:	e2 f7       	brpl	.-8      	; 0x1e34 <encoder_increment+0x48>
    1e3c:	80 2b       	or	r24, r16
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	53 c0       	rjmp	.+166    	; 0x1ee8 <encoder_increment+0xfc>
    1e42:	83 b1       	in	r24, 0x03	; 3
    1e44:	c8 e3       	ldi	r28, 0x38	; 56
    1e46:	d1 e0       	ldi	r29, 0x01	; 1
    1e48:	6f 81       	ldd	r22, Y+7	; 0x07
    1e4a:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1e4e:	90 e0       	ldi	r25, 0x00	; 0
    1e50:	8c 01       	movw	r16, r24
    1e52:	0f 80       	ldd	r0, Y+7	; 0x07
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <encoder_increment+0x6e>
    1e56:	00 0f       	add	r16, r16
    1e58:	11 1f       	adc	r17, r17
    1e5a:	0a 94       	dec	r0
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <encoder_increment+0x6a>
    1e5e:	83 b1       	in	r24, 0x03	; 3
    1e60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e62:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	0b 84       	ldd	r0, Y+11	; 0x0b
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <encoder_increment+0x84>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <encoder_increment+0x80>
    1e74:	80 2b       	or	r24, r16
    1e76:	8d 83       	std	Y+5, r24	; 0x05
    1e78:	37 c0       	rjmp	.+110    	; 0x1ee8 <encoder_increment+0xfc>
    1e7a:	86 b1       	in	r24, 0x06	; 6
    1e7c:	c8 e3       	ldi	r28, 0x38	; 56
    1e7e:	d1 e0       	ldi	r29, 0x01	; 1
    1e80:	6f 81       	ldd	r22, Y+7	; 0x07
    1e82:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	8c 01       	movw	r16, r24
    1e8a:	0f 80       	ldd	r0, Y+7	; 0x07
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <encoder_increment+0xa6>
    1e8e:	00 0f       	add	r16, r16
    1e90:	11 1f       	adc	r17, r17
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <encoder_increment+0xa2>
    1e96:	86 b1       	in	r24, 0x06	; 6
    1e98:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e9a:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	0b 84       	ldd	r0, Y+11	; 0x0b
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <encoder_increment+0xbc>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	0a 94       	dec	r0
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <encoder_increment+0xb8>
    1eac:	80 2b       	or	r24, r16
    1eae:	8d 83       	std	Y+5, r24	; 0x05
    1eb0:	1b c0       	rjmp	.+54     	; 0x1ee8 <encoder_increment+0xfc>
    1eb2:	89 b1       	in	r24, 0x09	; 9
    1eb4:	c8 e3       	ldi	r28, 0x38	; 56
    1eb6:	d1 e0       	ldi	r29, 0x01	; 1
    1eb8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eba:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	8c 01       	movw	r16, r24
    1ec2:	0f 80       	ldd	r0, Y+7	; 0x07
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <encoder_increment+0xde>
    1ec6:	00 0f       	add	r16, r16
    1ec8:	11 1f       	adc	r17, r17
    1eca:	0a 94       	dec	r0
    1ecc:	e2 f7       	brpl	.-8      	; 0x1ec6 <encoder_increment+0xda>
    1ece:	89 b1       	in	r24, 0x09	; 9
    1ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed2:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0b 84       	ldd	r0, Y+11	; 0x0b
    1eda:	02 c0       	rjmp	.+4      	; 0x1ee0 <encoder_increment+0xf4>
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	0a 94       	dec	r0
    1ee2:	e2 f7       	brpl	.-8      	; 0x1edc <encoder_increment+0xf0>
    1ee4:	80 2b       	or	r24, r16
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <s_encoderRight+0x6>
    1eec:	81 30       	cpi	r24, 0x01	; 1
    1eee:	19 f1       	breq	.+70     	; 0x1f36 <encoder_increment+0x14a>
    1ef0:	30 f0       	brcs	.+12     	; 0x1efe <encoder_increment+0x112>
    1ef2:	82 30       	cpi	r24, 0x02	; 2
    1ef4:	e1 f1       	breq	.+120    	; 0x1f6e <encoder_increment+0x182>
    1ef6:	83 30       	cpi	r24, 0x03	; 3
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <encoder_increment+0x110>
    1efa:	55 c0       	rjmp	.+170    	; 0x1fa6 <encoder_increment+0x1ba>
    1efc:	6f c0       	rjmp	.+222    	; 0x1fdc <encoder_increment+0x1f0>
    1efe:	80 b1       	in	r24, 0x00	; 0
    1f00:	c8 e2       	ldi	r28, 0x28	; 40
    1f02:	d1 e0       	ldi	r29, 0x01	; 1
    1f04:	6f 81       	ldd	r22, Y+7	; 0x07
    1f06:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	8c 01       	movw	r16, r24
    1f0e:	0f 80       	ldd	r0, Y+7	; 0x07
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <encoder_increment+0x12a>
    1f12:	00 0f       	add	r16, r16
    1f14:	11 1f       	adc	r17, r17
    1f16:	0a 94       	dec	r0
    1f18:	e2 f7       	brpl	.-8      	; 0x1f12 <encoder_increment+0x126>
    1f1a:	80 b1       	in	r24, 0x00	; 0
    1f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f1e:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	0b 84       	ldd	r0, Y+11	; 0x0b
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <encoder_increment+0x140>
    1f28:	88 0f       	add	r24, r24
    1f2a:	99 1f       	adc	r25, r25
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <encoder_increment+0x13c>
    1f30:	80 2b       	or	r24, r16
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	53 c0       	rjmp	.+166    	; 0x1fdc <encoder_increment+0x1f0>
    1f36:	83 b1       	in	r24, 0x03	; 3
    1f38:	c8 e2       	ldi	r28, 0x28	; 40
    1f3a:	d1 e0       	ldi	r29, 0x01	; 1
    1f3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3e:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	8c 01       	movw	r16, r24
    1f46:	0f 80       	ldd	r0, Y+7	; 0x07
    1f48:	02 c0       	rjmp	.+4      	; 0x1f4e <encoder_increment+0x162>
    1f4a:	00 0f       	add	r16, r16
    1f4c:	11 1f       	adc	r17, r17
    1f4e:	0a 94       	dec	r0
    1f50:	e2 f7       	brpl	.-8      	; 0x1f4a <encoder_increment+0x15e>
    1f52:	83 b1       	in	r24, 0x03	; 3
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	0b 84       	ldd	r0, Y+11	; 0x0b
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <encoder_increment+0x178>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	0a 94       	dec	r0
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <encoder_increment+0x174>
    1f68:	80 2b       	or	r24, r16
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	37 c0       	rjmp	.+110    	; 0x1fdc <encoder_increment+0x1f0>
    1f6e:	86 b1       	in	r24, 0x06	; 6
    1f70:	c8 e2       	ldi	r28, 0x28	; 40
    1f72:	d1 e0       	ldi	r29, 0x01	; 1
    1f74:	6f 81       	ldd	r22, Y+7	; 0x07
    1f76:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	8c 01       	movw	r16, r24
    1f7e:	0f 80       	ldd	r0, Y+7	; 0x07
    1f80:	02 c0       	rjmp	.+4      	; 0x1f86 <encoder_increment+0x19a>
    1f82:	00 0f       	add	r16, r16
    1f84:	11 1f       	adc	r17, r17
    1f86:	0a 94       	dec	r0
    1f88:	e2 f7       	brpl	.-8      	; 0x1f82 <encoder_increment+0x196>
    1f8a:	86 b1       	in	r24, 0x06	; 6
    1f8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f8e:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0b 84       	ldd	r0, Y+11	; 0x0b
    1f96:	02 c0       	rjmp	.+4      	; 0x1f9c <encoder_increment+0x1b0>
    1f98:	88 0f       	add	r24, r24
    1f9a:	99 1f       	adc	r25, r25
    1f9c:	0a 94       	dec	r0
    1f9e:	e2 f7       	brpl	.-8      	; 0x1f98 <encoder_increment+0x1ac>
    1fa0:	80 2b       	or	r24, r16
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
    1fa4:	1b c0       	rjmp	.+54     	; 0x1fdc <encoder_increment+0x1f0>
    1fa6:	89 b1       	in	r24, 0x09	; 9
    1fa8:	c8 e2       	ldi	r28, 0x28	; 40
    1faa:	d1 e0       	ldi	r29, 0x01	; 1
    1fac:	6f 81       	ldd	r22, Y+7	; 0x07
    1fae:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	8c 01       	movw	r16, r24
    1fb6:	0f 80       	ldd	r0, Y+7	; 0x07
    1fb8:	02 c0       	rjmp	.+4      	; 0x1fbe <encoder_increment+0x1d2>
    1fba:	00 0f       	add	r16, r16
    1fbc:	11 1f       	adc	r17, r17
    1fbe:	0a 94       	dec	r0
    1fc0:	e2 f7       	brpl	.-8      	; 0x1fba <encoder_increment+0x1ce>
    1fc2:	89 b1       	in	r24, 0x09	; 9
    1fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc6:	0e 94 89 06 	call	0xd12	; 0xd12 <checkBit>
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0b 84       	ldd	r0, Y+11	; 0x0b
    1fce:	02 c0       	rjmp	.+4      	; 0x1fd4 <encoder_increment+0x1e8>
    1fd0:	88 0f       	add	r24, r24
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	0a 94       	dec	r0
    1fd6:	e2 f7       	brpl	.-8      	; 0x1fd0 <encoder_increment+0x1e4>
    1fd8:	80 2b       	or	r24, r16
    1fda:	8d 83       	std	Y+5, r24	; 0x05
    1fdc:	e8 e3       	ldi	r30, 0x38	; 56
    1fde:	f1 e0       	ldi	r31, 0x01	; 1
    1fe0:	55 81       	ldd	r21, Z+5	; 0x05
    1fe2:	a8 e2       	ldi	r26, 0x28	; 40
    1fe4:	b1 e0       	ldi	r27, 0x01	; 1
    1fe6:	15 96       	adiw	r26, 0x05	; 5
    1fe8:	4c 91       	ld	r20, X
    1fea:	15 97       	sbiw	r26, 0x05	; 5
    1fec:	94 81       	ldd	r25, Z+4	; 0x04
    1fee:	14 96       	adiw	r26, 0x04	; 4
    1ff0:	8c 91       	ld	r24, X
    1ff2:	89 2b       	or	r24, r25
    1ff4:	95 2f       	mov	r25, r21
    1ff6:	94 2b       	or	r25, r20
    1ff8:	89 27       	eor	r24, r25
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	21 e0       	ldi	r18, 0x01	; 1
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	07 80       	ldd	r0, Z+7	; 0x07
    2002:	02 c0       	rjmp	.+4      	; 0x2008 <encoder_increment+0x21c>
    2004:	22 0f       	add	r18, r18
    2006:	33 1f       	adc	r19, r19
    2008:	0a 94       	dec	r0
    200a:	e2 f7       	brpl	.-8      	; 0x2004 <encoder_increment+0x218>
    200c:	82 17       	cp	r24, r18
    200e:	93 07       	cpc	r25, r19
    2010:	61 f4       	brne	.+24     	; 0x202a <encoder_increment+0x23e>
    2012:	80 81       	ld	r24, Z
    2014:	91 81       	ldd	r25, Z+1	; 0x01
    2016:	a2 81       	ldd	r26, Z+2	; 0x02
    2018:	b3 81       	ldd	r27, Z+3	; 0x03
    201a:	01 96       	adiw	r24, 0x01	; 1
    201c:	a1 1d       	adc	r26, r1
    201e:	b1 1d       	adc	r27, r1
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
    2024:	a2 83       	std	Z+2, r26	; 0x02
    2026:	b3 83       	std	Z+3, r27	; 0x03
    2028:	4d c0       	rjmp	.+154    	; 0x20c4 <encoder_increment+0x2d8>
    202a:	21 e0       	ldi	r18, 0x01	; 1
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	00 90 43 01 	lds	r0, 0x0143	; 0x800143 <s_encoderLeft+0xb>
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <encoder_increment+0x24c>
    2034:	22 0f       	add	r18, r18
    2036:	33 1f       	adc	r19, r19
    2038:	0a 94       	dec	r0
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <encoder_increment+0x248>
    203c:	82 17       	cp	r24, r18
    203e:	93 07       	cpc	r25, r19
    2040:	71 f4       	brne	.+28     	; 0x205e <encoder_increment+0x272>
    2042:	e8 e3       	ldi	r30, 0x38	; 56
    2044:	f1 e0       	ldi	r31, 0x01	; 1
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	a2 81       	ldd	r26, Z+2	; 0x02
    204c:	b3 81       	ldd	r27, Z+3	; 0x03
    204e:	01 96       	adiw	r24, 0x01	; 1
    2050:	a1 1d       	adc	r26, r1
    2052:	b1 1d       	adc	r27, r1
    2054:	80 83       	st	Z, r24
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	a2 83       	std	Z+2, r26	; 0x02
    205a:	b3 83       	std	Z+3, r27	; 0x03
    205c:	33 c0       	rjmp	.+102    	; 0x20c4 <encoder_increment+0x2d8>
    205e:	21 e0       	ldi	r18, 0x01	; 1
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	00 90 2f 01 	lds	r0, 0x012F	; 0x80012f <s_encoderRight+0x7>
    2066:	02 c0       	rjmp	.+4      	; 0x206c <encoder_increment+0x280>
    2068:	22 0f       	add	r18, r18
    206a:	33 1f       	adc	r19, r19
    206c:	0a 94       	dec	r0
    206e:	e2 f7       	brpl	.-8      	; 0x2068 <encoder_increment+0x27c>
    2070:	82 17       	cp	r24, r18
    2072:	93 07       	cpc	r25, r19
    2074:	71 f4       	brne	.+28     	; 0x2092 <encoder_increment+0x2a6>
    2076:	e8 e2       	ldi	r30, 0x28	; 40
    2078:	f1 e0       	ldi	r31, 0x01	; 1
    207a:	80 81       	ld	r24, Z
    207c:	91 81       	ldd	r25, Z+1	; 0x01
    207e:	a2 81       	ldd	r26, Z+2	; 0x02
    2080:	b3 81       	ldd	r27, Z+3	; 0x03
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	a1 1d       	adc	r26, r1
    2086:	b1 1d       	adc	r27, r1
    2088:	80 83       	st	Z, r24
    208a:	91 83       	std	Z+1, r25	; 0x01
    208c:	a2 83       	std	Z+2, r26	; 0x02
    208e:	b3 83       	std	Z+3, r27	; 0x03
    2090:	19 c0       	rjmp	.+50     	; 0x20c4 <encoder_increment+0x2d8>
    2092:	21 e0       	ldi	r18, 0x01	; 1
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	00 90 33 01 	lds	r0, 0x0133	; 0x800133 <s_encoderRight+0xb>
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <encoder_increment+0x2b4>
    209c:	22 0f       	add	r18, r18
    209e:	33 1f       	adc	r19, r19
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <encoder_increment+0x2b0>
    20a4:	82 17       	cp	r24, r18
    20a6:	93 07       	cpc	r25, r19
    20a8:	69 f4       	brne	.+26     	; 0x20c4 <encoder_increment+0x2d8>
    20aa:	e8 e2       	ldi	r30, 0x28	; 40
    20ac:	f1 e0       	ldi	r31, 0x01	; 1
    20ae:	80 81       	ld	r24, Z
    20b0:	91 81       	ldd	r25, Z+1	; 0x01
    20b2:	a2 81       	ldd	r26, Z+2	; 0x02
    20b4:	b3 81       	ldd	r27, Z+3	; 0x03
    20b6:	01 96       	adiw	r24, 0x01	; 1
    20b8:	a1 1d       	adc	r26, r1
    20ba:	b1 1d       	adc	r27, r1
    20bc:	80 83       	st	Z, r24
    20be:	91 83       	std	Z+1, r25	; 0x01
    20c0:	a2 83       	std	Z+2, r26	; 0x02
    20c2:	b3 83       	std	Z+3, r27	; 0x03
    20c4:	50 93 3c 01 	sts	0x013C, r21	; 0x80013c <s_encoderLeft+0x4>
    20c8:	40 93 2c 01 	sts	0x012C, r20	; 0x80012c <s_encoderRight+0x4>
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	1f 91       	pop	r17
    20d2:	0f 91       	pop	r16
    20d4:	08 95       	ret

000020d6 <encoder_init>:
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	ec 01       	movw	r28, r24
    20dc:	6e 81       	ldd	r22, Y+6	; 0x06
    20de:	7f 81       	ldd	r23, Y+7	; 0x07
    20e0:	88 85       	ldd	r24, Y+8	; 0x08
    20e2:	99 85       	ldd	r25, Y+9	; 0x09
    20e4:	0e 94 05 04 	call	0x80a	; 0x80a <gpio_init>
    20e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    20ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    20ec:	8c 85       	ldd	r24, Y+12	; 0x0c
    20ee:	9d 85       	ldd	r25, Y+13	; 0x0d
    20f0:	0e 94 05 04 	call	0x80a	; 0x80a <gpio_init>
    20f4:	18 82       	st	Y, r1
    20f6:	19 82       	std	Y+1, r1	; 0x01
    20f8:	1a 82       	std	Y+2, r1	; 0x02
    20fa:	1b 82       	std	Y+3, r1	; 0x03
    20fc:	1c 82       	std	Y+4, r1	; 0x04
    20fe:	1d 82       	std	Y+5, r1	; 0x05
    2100:	6e 81       	ldd	r22, Y+6	; 0x06
    2102:	7f 81       	ldd	r23, Y+7	; 0x07
    2104:	88 85       	ldd	r24, Y+8	; 0x08
    2106:	99 85       	ldd	r25, Y+9	; 0x09
    2108:	26 ef       	ldi	r18, 0xF6	; 246
    210a:	3e e0       	ldi	r19, 0x0E	; 14
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 a8 04 	call	0x950	; 0x950 <gpio_attachInterrupt>
    2112:	6a 85       	ldd	r22, Y+10	; 0x0a
    2114:	7b 85       	ldd	r23, Y+11	; 0x0b
    2116:	8c 85       	ldd	r24, Y+12	; 0x0c
    2118:	9d 85       	ldd	r25, Y+13	; 0x0d
    211a:	26 ef       	ldi	r18, 0xF6	; 246
    211c:	3e e0       	ldi	r19, 0x0E	; 14
    211e:	41 e0       	ldi	r20, 0x01	; 1
    2120:	0e 94 a8 04 	call	0x950	; 0x950 <gpio_attachInterrupt>
    2124:	df 91       	pop	r29
    2126:	cf 91       	pop	r28
    2128:	08 95       	ret

0000212a <encoder_start>:
    212a:	af 92       	push	r10
    212c:	bf 92       	push	r11
    212e:	cf 92       	push	r12
    2130:	df 92       	push	r13
    2132:	ef 92       	push	r14
    2134:	ff 92       	push	r15
    2136:	0f 93       	push	r16
    2138:	1f 93       	push	r17
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	cd b7       	in	r28, 0x3d	; 61
    2140:	de b7       	in	r29, 0x3e	; 62
    2142:	60 97       	sbiw	r28, 0x10	; 16
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	0f 83       	std	Y+7, r16	; 0x07
    2150:	18 87       	std	Y+8, r17	; 0x08
    2152:	29 87       	std	Y+9, r18	; 0x09
    2154:	3a 87       	std	Y+10, r19	; 0x0a
    2156:	4b 87       	std	Y+11, r20	; 0x0b
    2158:	5c 87       	std	Y+12, r21	; 0x0c
    215a:	6d 87       	std	Y+13, r22	; 0x0d
    215c:	7e 87       	std	Y+14, r23	; 0x0e
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 79 04 	call	0x8f2	; 0x8f2 <gpio_enableInterrupt>
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	41 e0       	ldi	r20, 0x01	; 1
    2176:	0e 94 79 04 	call	0x8f2	; 0x8f2 <gpio_enableInterrupt>
    217a:	60 96       	adiw	r28, 0x10	; 16
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	df 90       	pop	r13
    2194:	cf 90       	pop	r12
    2196:	bf 90       	pop	r11
    2198:	af 90       	pop	r10
    219a:	08 95       	ret

0000219c <encoder_resetCounter>:

void encoder_resetCounter(encoder_struct_t *s_encoder){
    219c:	fc 01       	movw	r30, r24
	s_encoder->counter = 0;
    219e:	10 82       	st	Z, r1
    21a0:	11 82       	std	Z+1, r1	; 0x01
    21a2:	12 82       	std	Z+2, r1	; 0x02
    21a4:	13 82       	std	Z+3, r1	; 0x03
	s_encoder->currentState = 0;
    21a6:	15 82       	std	Z+5, r1	; 0x05
	s_encoder->lastState = 0;
    21a8:	14 82       	std	Z+4, r1	; 0x04
    21aa:	08 95       	ret

000021ac <motor_init>:
			gpio_out_set(s_motor.direction);
			break;
		default:
			break;
	}
}
    21ac:	cf 93       	push	r28
    21ae:	df 93       	push	r29
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	69 85       	ldd	r22, Y+9	; 0x09
    21b6:	7a 85       	ldd	r23, Y+10	; 0x0a
    21b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    21bc:	0e 94 05 04 	call	0x80a	; 0x80a <gpio_init>
    21c0:	6d 81       	ldd	r22, Y+5	; 0x05
    21c2:	7e 81       	ldd	r23, Y+6	; 0x06
    21c4:	8f 81       	ldd	r24, Y+7	; 0x07
    21c6:	98 85       	ldd	r25, Y+8	; 0x08
    21c8:	0e 94 05 04 	call	0x80a	; 0x80a <gpio_init>
    21cc:	ce 01       	movw	r24, r28
    21ce:	0d 96       	adiw	r24, 0x0d	; 13
    21d0:	0e 94 bd 06 	call	0xd7a	; 0xd7a <pwm_init>
    21d4:	df 91       	pop	r29
    21d6:	cf 91       	pop	r28
    21d8:	08 95       	ret

000021da <motor_start>:
    21da:	af 92       	push	r10
    21dc:	cf 92       	push	r12
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    21f0:	78 89       	ldd	r23, Y+16	; 0x10
    21f2:	89 89       	ldd	r24, Y+17	; 0x11
    21f4:	9a 89       	ldd	r25, Y+18	; 0x12
    21f6:	0e 94 41 04 	call	0x882	; 0x882 <gpio_out_set>
    21fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    21fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2200:	9e 85       	ldd	r25, Y+14	; 0x0e
    2202:	0e 94 41 04 	call	0x882	; 0x882 <gpio_out_set>
    2206:	a1 2c       	mov	r10, r1
    2208:	ce 8c       	ldd	r12, Y+30	; 0x1e
    220a:	eb 88       	ldd	r14, Y+19	; 0x13
    220c:	fc 88       	ldd	r15, Y+20	; 0x14
    220e:	0d 89       	ldd	r16, Y+21	; 0x15
    2210:	1e 89       	ldd	r17, Y+22	; 0x16
    2212:	2f 89       	ldd	r18, Y+23	; 0x17
    2214:	38 8d       	ldd	r19, Y+24	; 0x18
    2216:	49 8d       	ldd	r20, Y+25	; 0x19
    2218:	5a 8d       	ldd	r21, Y+26	; 0x1a
    221a:	6b 8d       	ldd	r22, Y+27	; 0x1b
    221c:	7c 8d       	ldd	r23, Y+28	; 0x1c
    221e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2220:	0e 94 50 07 	call	0xea0	; 0xea0 <pwm_setDutyCycle>
    2224:	eb 88       	ldd	r14, Y+19	; 0x13
    2226:	fc 88       	ldd	r15, Y+20	; 0x14
    2228:	0d 89       	ldd	r16, Y+21	; 0x15
    222a:	1e 89       	ldd	r17, Y+22	; 0x16
    222c:	2f 89       	ldd	r18, Y+23	; 0x17
    222e:	38 8d       	ldd	r19, Y+24	; 0x18
    2230:	49 8d       	ldd	r20, Y+25	; 0x19
    2232:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2234:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2236:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2238:	8d 8d       	ldd	r24, Y+29	; 0x1d
    223a:	0e 94 2f 07 	call	0xe5e	; 0xe5e <pwm_start>
    223e:	df 91       	pop	r29
    2240:	cf 91       	pop	r28
    2242:	1f 91       	pop	r17
    2244:	0f 91       	pop	r16
    2246:	ff 90       	pop	r15
    2248:	ef 90       	pop	r14
    224a:	cf 90       	pop	r12
    224c:	af 90       	pop	r10
    224e:	08 95       	ret

00002250 <motor_speed>:

void motor_speed(motor_struct_t s_motor, u8 speed){
    2250:	af 92       	push	r10
    2252:	cf 92       	push	r12
    2254:	ef 92       	push	r14
    2256:	ff 92       	push	r15
    2258:	0f 93       	push	r16
    225a:	1f 93       	push	r17
    225c:	cf 93       	push	r28
    225e:	df 93       	push	r29
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
	pwm_setDutyCycle(s_motor.PWM, s_motor.channel, speed);
    2264:	af 8c       	ldd	r10, Y+31	; 0x1f
    2266:	ce 8c       	ldd	r12, Y+30	; 0x1e
    2268:	eb 88       	ldd	r14, Y+19	; 0x13
    226a:	fc 88       	ldd	r15, Y+20	; 0x14
    226c:	0d 89       	ldd	r16, Y+21	; 0x15
    226e:	1e 89       	ldd	r17, Y+22	; 0x16
    2270:	2f 89       	ldd	r18, Y+23	; 0x17
    2272:	38 8d       	ldd	r19, Y+24	; 0x18
    2274:	49 8d       	ldd	r20, Y+25	; 0x19
    2276:	5a 8d       	ldd	r21, Y+26	; 0x1a
    2278:	6b 8d       	ldd	r22, Y+27	; 0x1b
    227a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    227c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    227e:	0e 94 50 07 	call	0xea0	; 0xea0 <pwm_setDutyCycle>
}
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
    2286:	1f 91       	pop	r17
    2288:	0f 91       	pop	r16
    228a:	ff 90       	pop	r15
    228c:	ef 90       	pop	r14
    228e:	cf 90       	pop	r12
    2290:	af 90       	pop	r10
    2292:	08 95       	ret

00002294 <pid_init>:
#include "pid.h"

void pid_init(pid_struct_t s_pid_example){
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	cd b7       	in	r28, 0x3d	; 61
    229a:	de b7       	in	r29, 0x3e	; 62
	s_pid_example.correction = 0;
	s_pid_example.currentError = 0;
	s_pid_example.previousError = 0;
	s_pid_example.totalError = 0;
}
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	08 95       	ret

000022a2 <pid_getCorrection>:

s8 pid_getCorrection(pid_struct_t s_pid_example)
{
    22a2:	8f 92       	push	r8
    22a4:	9f 92       	push	r9
    22a6:	af 92       	push	r10
    22a8:	bf 92       	push	r11
    22aa:	cf 92       	push	r12
    22ac:	df 92       	push	r13
    22ae:	ef 92       	push	r14
    22b0:	ff 92       	push	r15
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	c9 a0       	ldd	r12, Y+33	; 0x21
    22bc:	da a0       	ldd	r13, Y+34	; 0x22
    22be:	eb a0       	ldd	r14, Y+35	; 0x23
    22c0:	fc a0       	ldd	r15, Y+36	; 0x24
	s_pid_example.totalError += s_pid_example.currentError;
	
/** Calculates the correction after the following formula (Kp * currentError) + (Kd * (currentError - previousError)) + (Ki * totalError) **/		
	s_pid_example.correction = (s_pid_example.Kp * s_pid_example.currentError) 
	+ (s_pid_example.Kd * (s_pid_example.currentError - s_pid_example.previousError)) 
	+ (s_pid_example.Ki * s_pid_example.totalError);
    22c2:	29 8d       	ldd	r18, Y+25	; 0x19
    22c4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    22c6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    22c8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    22ca:	c7 01       	movw	r24, r14
    22cc:	b6 01       	movw	r22, r12
    22ce:	21 d7       	rcall	.+3650   	; 0x3112 <__subsf3>
    22d0:	29 89       	ldd	r18, Y+17	; 0x11
    22d2:	3a 89       	ldd	r19, Y+18	; 0x12
    22d4:	4b 89       	ldd	r20, Y+19	; 0x13
    22d6:	5c 89       	ldd	r21, Y+20	; 0x14
    22d8:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__mulsf3>
    22dc:	4b 01       	movw	r8, r22
    22de:	5c 01       	movw	r10, r24
    22e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    22e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    22e4:	4f 85       	ldd	r20, Y+15	; 0x0f
    22e6:	58 89       	ldd	r21, Y+16	; 0x10
    22e8:	c7 01       	movw	r24, r14
    22ea:	b6 01       	movw	r22, r12
    22ec:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__mulsf3>
    22f0:	9b 01       	movw	r18, r22
    22f2:	ac 01       	movw	r20, r24
    22f4:	c5 01       	movw	r24, r10
    22f6:	b4 01       	movw	r22, r8
    22f8:	0d d7       	rcall	.+3610   	; 0x3114 <__addsf3>
    22fa:	4b 01       	movw	r8, r22
    22fc:	5c 01       	movw	r10, r24
    22fe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2300:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2302:	4f 8d       	ldd	r20, Y+31	; 0x1f
    2304:	58 a1       	ldd	r21, Y+32	; 0x20
    2306:	c7 01       	movw	r24, r14
    2308:	b6 01       	movw	r22, r12
    230a:	04 d7       	rcall	.+3592   	; 0x3114 <__addsf3>
    230c:	2d 89       	ldd	r18, Y+21	; 0x15
    230e:	3e 89       	ldd	r19, Y+22	; 0x16
    2310:	4f 89       	ldd	r20, Y+23	; 0x17
    2312:	58 8d       	ldd	r21, Y+24	; 0x18
    2314:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <__mulsf3>
    2318:	9b 01       	movw	r18, r22
    231a:	ac 01       	movw	r20, r24
    231c:	c5 01       	movw	r24, r10
    231e:	b4 01       	movw	r22, r8
    2320:	f9 d6       	rcall	.+3570   	; 0x3114 <__addsf3>
    2322:	6b 01       	movw	r12, r22
    2324:	7c 01       	movw	r14, r24
/** The previous error takes the value of the current one after the calculation of correction **/			
	s_pid_example.previousError = s_pid_example.currentError;


	if(s_pid_example.correction > 100)
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	48 ec       	ldi	r20, 0xC8	; 200
    232c:	52 e4       	ldi	r21, 0x42	; 66
    232e:	0e 94 d5 19 	call	0x33aa	; 0x33aa <__gesf2>
    2332:	18 16       	cp	r1, r24
    2334:	94 f0       	brlt	.+36     	; 0x235a <pid_getCorrection+0xb8>
	s_pid_example.correction = 100;
	if(s_pid_example.correction < -100)
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	48 ec       	ldi	r20, 0xC8	; 200
    233c:	52 ec       	ldi	r21, 0xC2	; 194
    233e:	c7 01       	movw	r24, r14
    2340:	b6 01       	movw	r22, r12
    2342:	4c d7       	rcall	.+3736   	; 0x31dc <__cmpsf2>
    2344:	88 23       	and	r24, r24
    2346:	8c f4       	brge	.+34     	; 0x236a <pid_getCorrection+0xc8>
	s_pid_example.correction = -100;
    2348:	0f 2e       	mov	r0, r31
    234a:	c1 2c       	mov	r12, r1
    234c:	d1 2c       	mov	r13, r1
    234e:	f8 ec       	ldi	r31, 0xC8	; 200
    2350:	ef 2e       	mov	r14, r31
    2352:	f2 ec       	ldi	r31, 0xC2	; 194
    2354:	ff 2e       	mov	r15, r31
    2356:	f0 2d       	mov	r31, r0
    2358:	08 c0       	rjmp	.+16     	; 0x236a <pid_getCorrection+0xc8>
/** The previous error takes the value of the current one after the calculation of correction **/			
	s_pid_example.previousError = s_pid_example.currentError;


	if(s_pid_example.correction > 100)
	s_pid_example.correction = 100;
    235a:	0f 2e       	mov	r0, r31
    235c:	c1 2c       	mov	r12, r1
    235e:	d1 2c       	mov	r13, r1
    2360:	f8 ec       	ldi	r31, 0xC8	; 200
    2362:	ef 2e       	mov	r14, r31
    2364:	f2 e4       	ldi	r31, 0x42	; 66
    2366:	ff 2e       	mov	r15, r31
	if(s_pid_example.correction < -100)
	s_pid_example.correction = -100;


/** Returns the correction value**/	
	return s_pid_example.correction;
    2368:	f0 2d       	mov	r31, r0
    236a:	c7 01       	movw	r24, r14
    236c:	b6 01       	movw	r22, r12
    236e:	3a d7       	rcall	.+3700   	; 0x31e4 <__fixsfsi>
    2370:	86 2f       	mov	r24, r22
}
    2372:	df 91       	pop	r29
    2374:	cf 91       	pop	r28
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	df 90       	pop	r13
    237c:	cf 90       	pop	r12
    237e:	bf 90       	pop	r11
    2380:	af 90       	pop	r10
    2382:	9f 90       	pop	r9
    2384:	8f 90       	pop	r8
    2386:	08 95       	ret

00002388 <startTimeout>:

	temp = readReg16Bit(ps_sensor, RESULT_RANGE_STATUS + 10);
	writeReg(ps_sensor, SYSTEM_INTERRUPT_CLEAR, 0x01);

	return temp;
}
    2388:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
    238c:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
    2390:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end+0x2>
    2394:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x3>
    2398:	fc 01       	movw	r30, r24
    239a:	51 87       	std	Z+9, r21	; 0x09
    239c:	40 87       	std	Z+8, r20	; 0x08
    239e:	08 95       	ret

000023a0 <checkTimeoutExpired>:
    23a0:	0f 93       	push	r16
    23a2:	1f 93       	push	r17
    23a4:	fc 01       	movw	r30, r24
    23a6:	41 81       	ldd	r20, Z+1	; 0x01
    23a8:	52 81       	ldd	r21, Z+2	; 0x02
    23aa:	41 15       	cp	r20, r1
    23ac:	51 05       	cpc	r21, r1
    23ae:	c1 f0       	breq	.+48     	; 0x23e0 <checkTimeoutExpired+0x40>
    23b0:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
    23b4:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
    23b8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
    23bc:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
    23c0:	80 85       	ldd	r24, Z+8	; 0x08
    23c2:	91 85       	ldd	r25, Z+9	; 0x09
    23c4:	08 1b       	sub	r16, r24
    23c6:	19 0b       	sbc	r17, r25
    23c8:	21 09       	sbc	r18, r1
    23ca:	31 09       	sbc	r19, r1
    23cc:	60 e0       	ldi	r22, 0x00	; 0
    23ce:	70 e0       	ldi	r23, 0x00	; 0
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	40 17       	cp	r20, r16
    23d4:	51 07       	cpc	r21, r17
    23d6:	62 07       	cpc	r22, r18
    23d8:	73 07       	cpc	r23, r19
    23da:	18 f0       	brcs	.+6      	; 0x23e2 <checkTimeoutExpired+0x42>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <checkTimeoutExpired+0x42>
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	1f 91       	pop	r17
    23e4:	0f 91       	pop	r16
    23e6:	08 95       	ret

000023e8 <writeReg>:
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	d6 2f       	mov	r29, r22
    23ee:	c4 2f       	mov	r28, r20
    23f0:	fc 01       	movw	r30, r24
    23f2:	80 81       	ld	r24, Z
    23f4:	88 0f       	add	r24, r24
    23f6:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_sendStart>
    23fa:	8d 2f       	mov	r24, r29
    23fc:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2400:	8c 2f       	mov	r24, r28
    2402:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2406:	0e 94 b9 05 	call	0xb72	; 0xb72 <i2c_sendStop>
    240a:	df 91       	pop	r29
    240c:	cf 91       	pop	r28
    240e:	08 95       	ret

00002410 <writeReg16Bit>:
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	16 2f       	mov	r17, r22
    2418:	c4 2f       	mov	r28, r20
    241a:	d5 2f       	mov	r29, r21
    241c:	fc 01       	movw	r30, r24
    241e:	80 81       	ld	r24, Z
    2420:	88 0f       	add	r24, r24
    2422:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_sendStart>
    2426:	81 2f       	mov	r24, r17
    2428:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    242c:	8d 2f       	mov	r24, r29
    242e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2432:	8c 2f       	mov	r24, r28
    2434:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2438:	0e 94 b9 05 	call	0xb72	; 0xb72 <i2c_sendStop>
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	08 95       	ret

00002444 <writeReg32Bit>:
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	f6 2e       	mov	r15, r22
    2450:	c2 2f       	mov	r28, r18
    2452:	d3 2f       	mov	r29, r19
    2454:	14 2f       	mov	r17, r20
    2456:	05 2f       	mov	r16, r21
    2458:	fc 01       	movw	r30, r24
    245a:	80 81       	ld	r24, Z
    245c:	88 0f       	add	r24, r24
    245e:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_sendStart>
    2462:	8f 2d       	mov	r24, r15
    2464:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2468:	80 2f       	mov	r24, r16
    246a:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    246e:	81 2f       	mov	r24, r17
    2470:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2474:	8d 2f       	mov	r24, r29
    2476:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    247a:	8c 2f       	mov	r24, r28
    247c:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2480:	0e 94 b9 05 	call	0xb72	; 0xb72 <i2c_sendStop>
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	ff 90       	pop	r15
    248e:	08 95       	ret

00002490 <readReg>:
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	ec 01       	movw	r28, r24
    2498:	16 2f       	mov	r17, r22
    249a:	88 81       	ld	r24, Y
    249c:	88 0f       	add	r24, r24
    249e:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_sendStart>
    24a2:	81 2f       	mov	r24, r17
    24a4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    24a8:	88 81       	ld	r24, Y
    24aa:	88 0f       	add	r24, r24
    24ac:	81 60       	ori	r24, 0x01	; 1
    24ae:	0e 94 b7 05 	call	0xb6e	; 0xb6e <i2c_sendRepStart>
    24b2:	0e 94 34 06 	call	0xc68	; 0xc68 <i2c_readNak>
    24b6:	c8 2f       	mov	r28, r24
    24b8:	0e 94 b9 05 	call	0xb72	; 0xb72 <i2c_sendStop>
    24bc:	8c 2f       	mov	r24, r28
    24be:	df 91       	pop	r29
    24c0:	cf 91       	pop	r28
    24c2:	1f 91       	pop	r17
    24c4:	08 95       	ret

000024c6 <readReg16Bit>:
    24c6:	1f 93       	push	r17
    24c8:	cf 93       	push	r28
    24ca:	df 93       	push	r29
    24cc:	ec 01       	movw	r28, r24
    24ce:	16 2f       	mov	r17, r22
    24d0:	88 81       	ld	r24, Y
    24d2:	88 0f       	add	r24, r24
    24d4:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_sendStart>
    24d8:	81 2f       	mov	r24, r17
    24da:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    24de:	88 81       	ld	r24, Y
    24e0:	88 0f       	add	r24, r24
    24e2:	81 60       	ori	r24, 0x01	; 1
    24e4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <i2c_sendRepStart>
    24e8:	0e 94 10 06 	call	0xc20	; 0xc20 <i2c_readAck>
    24ec:	c8 2f       	mov	r28, r24
    24ee:	d0 e0       	ldi	r29, 0x00	; 0
    24f0:	dc 2f       	mov	r29, r28
    24f2:	cc 27       	eor	r28, r28
    24f4:	0e 94 34 06 	call	0xc68	; 0xc68 <i2c_readNak>
    24f8:	c8 2b       	or	r28, r24
    24fa:	0e 94 b9 05 	call	0xb72	; 0xb72 <i2c_sendStop>
    24fe:	ce 01       	movw	r24, r28
    2500:	df 91       	pop	r29
    2502:	cf 91       	pop	r28
    2504:	1f 91       	pop	r17
    2506:	08 95       	ret

00002508 <writeMulti>:
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	d6 2f       	mov	r29, r22
    2516:	7a 01       	movw	r14, r20
    2518:	c2 2f       	mov	r28, r18
    251a:	fc 01       	movw	r30, r24
    251c:	80 81       	ld	r24, Z
    251e:	88 0f       	add	r24, r24
    2520:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_sendStart>
    2524:	8d 2f       	mov	r24, r29
    2526:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    252a:	8f ef       	ldi	r24, 0xFF	; 255
    252c:	8c 0f       	add	r24, r28
    252e:	cc 23       	and	r28, r28
    2530:	69 f0       	breq	.+26     	; 0x254c <writeMulti+0x44>
    2532:	e7 01       	movw	r28, r14
    2534:	08 2f       	mov	r16, r24
    2536:	10 e0       	ldi	r17, 0x00	; 0
    2538:	0f 5f       	subi	r16, 0xFF	; 255
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	0e 0d       	add	r16, r14
    253e:	1f 1d       	adc	r17, r15
    2540:	89 91       	ld	r24, Y+
    2542:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2546:	c0 17       	cp	r28, r16
    2548:	d1 07       	cpc	r29, r17
    254a:	d1 f7       	brne	.-12     	; 0x2540 <writeMulti+0x38>
    254c:	0e 94 b9 05 	call	0xb72	; 0xb72 <i2c_sendStop>
    2550:	df 91       	pop	r29
    2552:	cf 91       	pop	r28
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	08 95       	ret

0000255e <readMulti>:
    255e:	ef 92       	push	r14
    2560:	ff 92       	push	r15
    2562:	0f 93       	push	r16
    2564:	1f 93       	push	r17
    2566:	cf 93       	push	r28
    2568:	df 93       	push	r29
    256a:	8c 01       	movw	r16, r24
    256c:	d6 2f       	mov	r29, r22
    256e:	e4 2e       	mov	r14, r20
    2570:	f5 2e       	mov	r15, r21
    2572:	c2 2f       	mov	r28, r18
    2574:	fc 01       	movw	r30, r24
    2576:	80 81       	ld	r24, Z
    2578:	88 0f       	add	r24, r24
    257a:	0e 94 55 05 	call	0xaaa	; 0xaaa <i2c_sendStart>
    257e:	8d 2f       	mov	r24, r29
    2580:	0e 94 db 05 	call	0xbb6	; 0xbb6 <i2c_write>
    2584:	f8 01       	movw	r30, r16
    2586:	80 81       	ld	r24, Z
    2588:	88 0f       	add	r24, r24
    258a:	81 60       	ori	r24, 0x01	; 1
    258c:	0e 94 b7 05 	call	0xb6e	; 0xb6e <i2c_sendRepStart>
    2590:	cc 23       	and	r28, r28
    2592:	91 f0       	breq	.+36     	; 0x25b8 <readMulti+0x5a>
    2594:	0e 2d       	mov	r16, r14
    2596:	1f 2d       	mov	r17, r15
    2598:	c2 30       	cpi	r28, 0x02	; 2
    259a:	28 f0       	brcs	.+10     	; 0x25a6 <readMulti+0x48>
    259c:	0e 94 10 06 	call	0xc20	; 0xc20 <i2c_readAck>
    25a0:	f8 01       	movw	r30, r16
    25a2:	80 83       	st	Z, r24
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <readMulti+0x50>
    25a6:	0e 94 34 06 	call	0xc68	; 0xc68 <i2c_readNak>
    25aa:	f8 01       	movw	r30, r16
    25ac:	80 83       	st	Z, r24
    25ae:	c1 50       	subi	r28, 0x01	; 1
    25b0:	0f 5f       	subi	r16, 0xFF	; 255
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	c1 11       	cpse	r28, r1
    25b6:	f0 cf       	rjmp	.-32     	; 0x2598 <readMulti+0x3a>
    25b8:	0e 94 b9 05 	call	0xb72	; 0xb72 <i2c_sendStop>
    25bc:	df 91       	pop	r29
    25be:	cf 91       	pop	r28
    25c0:	1f 91       	pop	r17
    25c2:	0f 91       	pop	r16
    25c4:	ff 90       	pop	r15
    25c6:	ef 90       	pop	r14
    25c8:	08 95       	ret

000025ca <getSpadInfo>:
    25ca:	ef 92       	push	r14
    25cc:	ff 92       	push	r15
    25ce:	0f 93       	push	r16
    25d0:	1f 93       	push	r17
    25d2:	cf 93       	push	r28
    25d4:	df 93       	push	r29
    25d6:	ec 01       	movw	r28, r24
    25d8:	7b 01       	movw	r14, r22
    25da:	8a 01       	movw	r16, r20
    25dc:	41 e0       	ldi	r20, 0x01	; 1
    25de:	60 e8       	ldi	r22, 0x80	; 128
    25e0:	03 df       	rcall	.-506    	; 0x23e8 <writeReg>
    25e2:	41 e0       	ldi	r20, 0x01	; 1
    25e4:	6f ef       	ldi	r22, 0xFF	; 255
    25e6:	ce 01       	movw	r24, r28
    25e8:	ff de       	rcall	.-514    	; 0x23e8 <writeReg>
    25ea:	40 e0       	ldi	r20, 0x00	; 0
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	ce 01       	movw	r24, r28
    25f0:	fb de       	rcall	.-522    	; 0x23e8 <writeReg>
    25f2:	46 e0       	ldi	r20, 0x06	; 6
    25f4:	6f ef       	ldi	r22, 0xFF	; 255
    25f6:	ce 01       	movw	r24, r28
    25f8:	f7 de       	rcall	.-530    	; 0x23e8 <writeReg>
    25fa:	63 e8       	ldi	r22, 0x83	; 131
    25fc:	ce 01       	movw	r24, r28
    25fe:	48 df       	rcall	.-368    	; 0x2490 <readReg>
    2600:	48 2f       	mov	r20, r24
    2602:	44 60       	ori	r20, 0x04	; 4
    2604:	63 e8       	ldi	r22, 0x83	; 131
    2606:	ce 01       	movw	r24, r28
    2608:	ef de       	rcall	.-546    	; 0x23e8 <writeReg>
    260a:	47 e0       	ldi	r20, 0x07	; 7
    260c:	6f ef       	ldi	r22, 0xFF	; 255
    260e:	ce 01       	movw	r24, r28
    2610:	eb de       	rcall	.-554    	; 0x23e8 <writeReg>
    2612:	41 e0       	ldi	r20, 0x01	; 1
    2614:	61 e8       	ldi	r22, 0x81	; 129
    2616:	ce 01       	movw	r24, r28
    2618:	e7 de       	rcall	.-562    	; 0x23e8 <writeReg>
    261a:	41 e0       	ldi	r20, 0x01	; 1
    261c:	60 e8       	ldi	r22, 0x80	; 128
    261e:	ce 01       	movw	r24, r28
    2620:	e3 de       	rcall	.-570    	; 0x23e8 <writeReg>
    2622:	4b e6       	ldi	r20, 0x6B	; 107
    2624:	64 e9       	ldi	r22, 0x94	; 148
    2626:	ce 01       	movw	r24, r28
    2628:	df de       	rcall	.-578    	; 0x23e8 <writeReg>
    262a:	40 e0       	ldi	r20, 0x00	; 0
    262c:	63 e8       	ldi	r22, 0x83	; 131
    262e:	ce 01       	movw	r24, r28
    2630:	db de       	rcall	.-586    	; 0x23e8 <writeReg>
    2632:	ce 01       	movw	r24, r28
    2634:	a9 de       	rcall	.-686    	; 0x2388 <startTimeout>
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <getSpadInfo+0x76>
    2638:	ce 01       	movw	r24, r28
    263a:	b2 de       	rcall	.-668    	; 0x23a0 <checkTimeoutExpired>
    263c:	81 11       	cpse	r24, r1
    263e:	37 c0       	rjmp	.+110    	; 0x26ae <getSpadInfo+0xe4>
    2640:	63 e8       	ldi	r22, 0x83	; 131
    2642:	ce 01       	movw	r24, r28
    2644:	25 df       	rcall	.-438    	; 0x2490 <readReg>
    2646:	88 23       	and	r24, r24
    2648:	b9 f3       	breq	.-18     	; 0x2638 <getSpadInfo+0x6e>
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	63 e8       	ldi	r22, 0x83	; 131
    264e:	ce 01       	movw	r24, r28
    2650:	cb de       	rcall	.-618    	; 0x23e8 <writeReg>
    2652:	62 e9       	ldi	r22, 0x92	; 146
    2654:	ce 01       	movw	r24, r28
    2656:	1c df       	rcall	.-456    	; 0x2490 <readReg>
    2658:	98 2f       	mov	r25, r24
    265a:	9f 77       	andi	r25, 0x7F	; 127
    265c:	f7 01       	movw	r30, r14
    265e:	90 83       	st	Z, r25
    2660:	88 1f       	adc	r24, r24
    2662:	88 27       	eor	r24, r24
    2664:	88 1f       	adc	r24, r24
    2666:	f8 01       	movw	r30, r16
    2668:	80 83       	st	Z, r24
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	61 e8       	ldi	r22, 0x81	; 129
    266e:	ce 01       	movw	r24, r28
    2670:	bb de       	rcall	.-650    	; 0x23e8 <writeReg>
    2672:	46 e0       	ldi	r20, 0x06	; 6
    2674:	6f ef       	ldi	r22, 0xFF	; 255
    2676:	ce 01       	movw	r24, r28
    2678:	b7 de       	rcall	.-658    	; 0x23e8 <writeReg>
    267a:	63 e8       	ldi	r22, 0x83	; 131
    267c:	ce 01       	movw	r24, r28
    267e:	08 df       	rcall	.-496    	; 0x2490 <readReg>
    2680:	48 2f       	mov	r20, r24
    2682:	4b 7f       	andi	r20, 0xFB	; 251
    2684:	63 e8       	ldi	r22, 0x83	; 131
    2686:	ce 01       	movw	r24, r28
    2688:	af de       	rcall	.-674    	; 0x23e8 <writeReg>
    268a:	41 e0       	ldi	r20, 0x01	; 1
    268c:	6f ef       	ldi	r22, 0xFF	; 255
    268e:	ce 01       	movw	r24, r28
    2690:	ab de       	rcall	.-682    	; 0x23e8 <writeReg>
    2692:	41 e0       	ldi	r20, 0x01	; 1
    2694:	60 e0       	ldi	r22, 0x00	; 0
    2696:	ce 01       	movw	r24, r28
    2698:	a7 de       	rcall	.-690    	; 0x23e8 <writeReg>
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	6f ef       	ldi	r22, 0xFF	; 255
    269e:	ce 01       	movw	r24, r28
    26a0:	a3 de       	rcall	.-698    	; 0x23e8 <writeReg>
    26a2:	40 e0       	ldi	r20, 0x00	; 0
    26a4:	60 e8       	ldi	r22, 0x80	; 128
    26a6:	ce 01       	movw	r24, r28
    26a8:	9f de       	rcall	.-706    	; 0x23e8 <writeReg>
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	01 c0       	rjmp	.+2      	; 0x26b0 <getSpadInfo+0xe6>
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	df 91       	pop	r29
    26b2:	cf 91       	pop	r28
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	ff 90       	pop	r15
    26ba:	ef 90       	pop	r14
    26bc:	08 95       	ret

000026be <getSequenceStepEnables>:
    26be:	cf 93       	push	r28
    26c0:	df 93       	push	r29
    26c2:	eb 01       	movw	r28, r22
    26c4:	61 e0       	ldi	r22, 0x01	; 1
    26c6:	e4 de       	rcall	.-568    	; 0x2490 <readReg>
    26c8:	84 fb       	bst	r24, 4
    26ca:	99 27       	eor	r25, r25
    26cc:	90 f9       	bld	r25, 0
    26ce:	98 83       	st	Y, r25
    26d0:	83 fb       	bst	r24, 3
    26d2:	99 27       	eor	r25, r25
    26d4:	90 f9       	bld	r25, 0
    26d6:	9a 83       	std	Y+2, r25	; 0x02
    26d8:	82 fb       	bst	r24, 2
    26da:	99 27       	eor	r25, r25
    26dc:	90 f9       	bld	r25, 0
    26de:	99 83       	std	Y+1, r25	; 0x01
    26e0:	86 fb       	bst	r24, 6
    26e2:	99 27       	eor	r25, r25
    26e4:	90 f9       	bld	r25, 0
    26e6:	9b 83       	std	Y+3, r25	; 0x03
    26e8:	88 1f       	adc	r24, r24
    26ea:	88 27       	eor	r24, r24
    26ec:	88 1f       	adc	r24, r24
    26ee:	8c 83       	std	Y+4, r24	; 0x04
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <encodeTimeout>:
    26f6:	0f 93       	push	r16
    26f8:	1f 93       	push	r17
    26fa:	00 97       	sbiw	r24, 0x00	; 0
    26fc:	19 f1       	breq	.+70     	; 0x2744 <encodeTimeout+0x4e>
    26fe:	ac 01       	movw	r20, r24
    2700:	41 50       	subi	r20, 0x01	; 1
    2702:	51 09       	sbc	r21, r1
    2704:	60 e0       	ldi	r22, 0x00	; 0
    2706:	70 e0       	ldi	r23, 0x00	; 0
    2708:	db 01       	movw	r26, r22
    270a:	ca 01       	movw	r24, r20
    270c:	88 27       	eor	r24, r24
    270e:	89 2b       	or	r24, r25
    2710:	8a 2b       	or	r24, r26
    2712:	8b 2b       	or	r24, r27
    2714:	79 f0       	breq	.+30     	; 0x2734 <encodeTimeout+0x3e>
    2716:	80 e0       	ldi	r24, 0x00	; 0
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	76 95       	lsr	r23
    271c:	67 95       	ror	r22
    271e:	57 95       	ror	r21
    2720:	47 95       	ror	r20
    2722:	01 96       	adiw	r24, 0x01	; 1
    2724:	8a 01       	movw	r16, r20
    2726:	9b 01       	movw	r18, r22
    2728:	00 27       	eor	r16, r16
    272a:	01 2b       	or	r16, r17
    272c:	02 2b       	or	r16, r18
    272e:	03 2b       	or	r16, r19
    2730:	a1 f7       	brne	.-24     	; 0x271a <encodeTimeout+0x24>
    2732:	02 c0       	rjmp	.+4      	; 0x2738 <encodeTimeout+0x42>
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	98 2f       	mov	r25, r24
    273a:	88 27       	eor	r24, r24
    273c:	55 27       	eor	r21, r21
    273e:	84 2b       	or	r24, r20
    2740:	95 2b       	or	r25, r21
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <encodeTimeout+0x52>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	1f 91       	pop	r17
    274a:	0f 91       	pop	r16
    274c:	08 95       	ret

0000274e <decodeTimeout>:
    274e:	9c 01       	movw	r18, r24
    2750:	33 27       	eor	r19, r19
    2752:	a9 01       	movw	r20, r18
    2754:	02 c0       	rjmp	.+4      	; 0x275a <decodeTimeout+0xc>
    2756:	44 0f       	add	r20, r20
    2758:	55 1f       	adc	r21, r21
    275a:	9a 95       	dec	r25
    275c:	e2 f7       	brpl	.-8      	; 0x2756 <decodeTimeout+0x8>
    275e:	ca 01       	movw	r24, r20
    2760:	01 96       	adiw	r24, 0x01	; 1
    2762:	08 95       	ret

00002764 <timeoutMclksToMicroseconds>:
    2764:	4f 92       	push	r4
    2766:	5f 92       	push	r5
    2768:	6f 92       	push	r6
    276a:	7f 92       	push	r7
    276c:	8f 92       	push	r8
    276e:	9f 92       	push	r9
    2770:	af 92       	push	r10
    2772:	bf 92       	push	r11
    2774:	cf 92       	push	r12
    2776:	df 92       	push	r13
    2778:	ef 92       	push	r14
    277a:	ff 92       	push	r15
    277c:	3c 01       	movw	r6, r24
    277e:	a6 2f       	mov	r26, r22
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	3f e2       	ldi	r19, 0x2F	; 47
    2786:	4a e3       	ldi	r20, 0x3A	; 58
    2788:	50 e0       	ldi	r21, 0x00	; 0
    278a:	b0 d6       	rcall	.+3424   	; 0x34ec <__muluhisi3>
    278c:	6b 01       	movw	r12, r22
    278e:	7c 01       	movw	r14, r24
    2790:	24 ef       	ldi	r18, 0xF4	; 244
    2792:	c2 0e       	add	r12, r18
    2794:	21 e0       	ldi	r18, 0x01	; 1
    2796:	d2 1e       	adc	r13, r18
    2798:	e1 1c       	adc	r14, r1
    279a:	f1 1c       	adc	r15, r1
    279c:	0f 2e       	mov	r0, r31
    279e:	f8 ee       	ldi	r31, 0xE8	; 232
    27a0:	8f 2e       	mov	r8, r31
    27a2:	f3 e0       	ldi	r31, 0x03	; 3
    27a4:	9f 2e       	mov	r9, r31
    27a6:	a1 2c       	mov	r10, r1
    27a8:	b1 2c       	mov	r11, r1
    27aa:	f0 2d       	mov	r31, r0
    27ac:	c7 01       	movw	r24, r14
    27ae:	b6 01       	movw	r22, r12
    27b0:	a5 01       	movw	r20, r10
    27b2:	94 01       	movw	r18, r8
    27b4:	61 d6       	rcall	.+3266   	; 0x3478 <__udivmodsi4>
    27b6:	d3 01       	movw	r26, r6
    27b8:	99 d6       	rcall	.+3378   	; 0x34ec <__muluhisi3>
    27ba:	2b 01       	movw	r4, r22
    27bc:	3c 01       	movw	r6, r24
    27be:	c7 01       	movw	r24, r14
    27c0:	b6 01       	movw	r22, r12
    27c2:	20 ed       	ldi	r18, 0xD0	; 208
    27c4:	37 e0       	ldi	r19, 0x07	; 7
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	50 e0       	ldi	r21, 0x00	; 0
    27ca:	56 d6       	rcall	.+3244   	; 0x3478 <__udivmodsi4>
    27cc:	c3 01       	movw	r24, r6
    27ce:	b2 01       	movw	r22, r4
    27d0:	62 0f       	add	r22, r18
    27d2:	73 1f       	adc	r23, r19
    27d4:	84 1f       	adc	r24, r20
    27d6:	95 1f       	adc	r25, r21
    27d8:	a5 01       	movw	r20, r10
    27da:	94 01       	movw	r18, r8
    27dc:	4d d6       	rcall	.+3226   	; 0x3478 <__udivmodsi4>
    27de:	ca 01       	movw	r24, r20
    27e0:	b9 01       	movw	r22, r18
    27e2:	ff 90       	pop	r15
    27e4:	ef 90       	pop	r14
    27e6:	df 90       	pop	r13
    27e8:	cf 90       	pop	r12
    27ea:	bf 90       	pop	r11
    27ec:	af 90       	pop	r10
    27ee:	9f 90       	pop	r9
    27f0:	8f 90       	pop	r8
    27f2:	7f 90       	pop	r7
    27f4:	6f 90       	pop	r6
    27f6:	5f 90       	pop	r5
    27f8:	4f 90       	pop	r4
    27fa:	08 95       	ret

000027fc <getVcselPulsePeriod>:
    27fc:	61 11       	cpse	r22, r1
    27fe:	05 c0       	rjmp	.+10     	; 0x280a <getVcselPulsePeriod+0xe>
    2800:	60 e5       	ldi	r22, 0x50	; 80
    2802:	46 de       	rcall	.-884    	; 0x2490 <readReg>
    2804:	8f 5f       	subi	r24, 0xFF	; 255
    2806:	88 0f       	add	r24, r24
    2808:	08 95       	ret
    280a:	61 30       	cpi	r22, 0x01	; 1
    280c:	29 f4       	brne	.+10     	; 0x2818 <getVcselPulsePeriod+0x1c>
    280e:	60 e7       	ldi	r22, 0x70	; 112
    2810:	3f de       	rcall	.-898    	; 0x2490 <readReg>
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	88 0f       	add	r24, r24
    2816:	08 95       	ret
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	08 95       	ret

0000281c <getSequenceStepTimeouts>:
    281c:	ef 92       	push	r14
    281e:	ff 92       	push	r15
    2820:	0f 93       	push	r16
    2822:	1f 93       	push	r17
    2824:	cf 93       	push	r28
    2826:	df 93       	push	r29
    2828:	8c 01       	movw	r16, r24
    282a:	7b 01       	movw	r14, r22
    282c:	ea 01       	movw	r28, r20
    282e:	60 e0       	ldi	r22, 0x00	; 0
    2830:	e5 df       	rcall	.-54     	; 0x27fc <getVcselPulsePeriod>
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	99 83       	std	Y+1, r25	; 0x01
    2836:	88 83       	st	Y, r24
    2838:	66 e4       	ldi	r22, 0x46	; 70
    283a:	c8 01       	movw	r24, r16
    283c:	29 de       	rcall	.-942    	; 0x2490 <readReg>
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	9d 83       	std	Y+5, r25	; 0x05
    2844:	8c 83       	std	Y+4, r24	; 0x04
    2846:	68 81       	ld	r22, Y
    2848:	8d df       	rcall	.-230    	; 0x2764 <timeoutMclksToMicroseconds>
    284a:	6a 87       	std	Y+10, r22	; 0x0a
    284c:	7b 87       	std	Y+11, r23	; 0x0b
    284e:	8c 87       	std	Y+12, r24	; 0x0c
    2850:	9d 87       	std	Y+13, r25	; 0x0d
    2852:	61 e5       	ldi	r22, 0x51	; 81
    2854:	c8 01       	movw	r24, r16
    2856:	37 de       	rcall	.-914    	; 0x24c6 <readReg16Bit>
    2858:	7a df       	rcall	.-268    	; 0x274e <decodeTimeout>
    285a:	9f 83       	std	Y+7, r25	; 0x07
    285c:	8e 83       	std	Y+6, r24	; 0x06
    285e:	68 81       	ld	r22, Y
    2860:	81 df       	rcall	.-254    	; 0x2764 <timeoutMclksToMicroseconds>
    2862:	6e 87       	std	Y+14, r22	; 0x0e
    2864:	7f 87       	std	Y+15, r23	; 0x0f
    2866:	88 8b       	std	Y+16, r24	; 0x10
    2868:	99 8b       	std	Y+17, r25	; 0x11
    286a:	61 e0       	ldi	r22, 0x01	; 1
    286c:	c8 01       	movw	r24, r16
    286e:	c6 df       	rcall	.-116    	; 0x27fc <getVcselPulsePeriod>
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9b 83       	std	Y+3, r25	; 0x03
    2874:	8a 83       	std	Y+2, r24	; 0x02
    2876:	61 e7       	ldi	r22, 0x71	; 113
    2878:	c8 01       	movw	r24, r16
    287a:	25 de       	rcall	.-950    	; 0x24c6 <readReg16Bit>
    287c:	68 df       	rcall	.-304    	; 0x274e <decodeTimeout>
    287e:	99 87       	std	Y+9, r25	; 0x09
    2880:	88 87       	std	Y+8, r24	; 0x08
    2882:	f7 01       	movw	r30, r14
    2884:	23 81       	ldd	r18, Z+3	; 0x03
    2886:	22 23       	and	r18, r18
    2888:	31 f0       	breq	.+12     	; 0x2896 <getSequenceStepTimeouts+0x7a>
    288a:	2e 81       	ldd	r18, Y+6	; 0x06
    288c:	3f 81       	ldd	r19, Y+7	; 0x07
    288e:	82 1b       	sub	r24, r18
    2890:	93 0b       	sbc	r25, r19
    2892:	99 87       	std	Y+9, r25	; 0x09
    2894:	88 87       	std	Y+8, r24	; 0x08
    2896:	6a 81       	ldd	r22, Y+2	; 0x02
    2898:	88 85       	ldd	r24, Y+8	; 0x08
    289a:	99 85       	ldd	r25, Y+9	; 0x09
    289c:	63 df       	rcall	.-314    	; 0x2764 <timeoutMclksToMicroseconds>
    289e:	6a 8b       	std	Y+18, r22	; 0x12
    28a0:	7b 8b       	std	Y+19, r23	; 0x13
    28a2:	8c 8b       	std	Y+20, r24	; 0x14
    28a4:	9d 8b       	std	Y+21, r25	; 0x15
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	ff 90       	pop	r15
    28b0:	ef 90       	pop	r14
    28b2:	08 95       	ret

000028b4 <timeoutMicrosecondsToMclks>:
    28b4:	8f 92       	push	r8
    28b6:	9f 92       	push	r9
    28b8:	af 92       	push	r10
    28ba:	bf 92       	push	r11
    28bc:	cf 92       	push	r12
    28be:	df 92       	push	r13
    28c0:	ef 92       	push	r14
    28c2:	ff 92       	push	r15
    28c4:	4b 01       	movw	r8, r22
    28c6:	5c 01       	movw	r10, r24
    28c8:	a4 2f       	mov	r26, r20
    28ca:	b0 e0       	ldi	r27, 0x00	; 0
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	3f e2       	ldi	r19, 0x2F	; 47
    28d0:	4a e3       	ldi	r20, 0x3A	; 58
    28d2:	50 e0       	ldi	r21, 0x00	; 0
    28d4:	0b d6       	rcall	.+3094   	; 0x34ec <__muluhisi3>
    28d6:	6b 01       	movw	r12, r22
    28d8:	7c 01       	movw	r14, r24
    28da:	24 ef       	ldi	r18, 0xF4	; 244
    28dc:	c2 0e       	add	r12, r18
    28de:	21 e0       	ldi	r18, 0x01	; 1
    28e0:	d2 1e       	adc	r13, r18
    28e2:	e1 1c       	adc	r14, r1
    28e4:	f1 1c       	adc	r15, r1
    28e6:	a8 ee       	ldi	r26, 0xE8	; 232
    28e8:	b3 e0       	ldi	r27, 0x03	; 3
    28ea:	a5 01       	movw	r20, r10
    28ec:	94 01       	movw	r18, r8
    28ee:	fe d5       	rcall	.+3068   	; 0x34ec <__muluhisi3>
    28f0:	4b 01       	movw	r8, r22
    28f2:	5c 01       	movw	r10, r24
    28f4:	c7 01       	movw	r24, r14
    28f6:	b6 01       	movw	r22, r12
    28f8:	20 ed       	ldi	r18, 0xD0	; 208
    28fa:	37 e0       	ldi	r19, 0x07	; 7
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	bb d5       	rcall	.+2934   	; 0x3478 <__udivmodsi4>
    2902:	82 0e       	add	r8, r18
    2904:	93 1e       	adc	r9, r19
    2906:	a4 1e       	adc	r10, r20
    2908:	b5 1e       	adc	r11, r21
    290a:	c7 01       	movw	r24, r14
    290c:	b6 01       	movw	r22, r12
    290e:	28 ee       	ldi	r18, 0xE8	; 232
    2910:	33 e0       	ldi	r19, 0x03	; 3
    2912:	40 e0       	ldi	r20, 0x00	; 0
    2914:	50 e0       	ldi	r21, 0x00	; 0
    2916:	b0 d5       	rcall	.+2912   	; 0x3478 <__udivmodsi4>
    2918:	c5 01       	movw	r24, r10
    291a:	b4 01       	movw	r22, r8
    291c:	ad d5       	rcall	.+2906   	; 0x3478 <__udivmodsi4>
    291e:	ca 01       	movw	r24, r20
    2920:	b9 01       	movw	r22, r18
    2922:	ff 90       	pop	r15
    2924:	ef 90       	pop	r14
    2926:	df 90       	pop	r13
    2928:	cf 90       	pop	r12
    292a:	bf 90       	pop	r11
    292c:	af 90       	pop	r10
    292e:	9f 90       	pop	r9
    2930:	8f 90       	pop	r8
    2932:	08 95       	ret

00002934 <performSingleRefCalibration>:
    2934:	cf 93       	push	r28
    2936:	df 93       	push	r29
    2938:	ec 01       	movw	r28, r24
    293a:	46 2f       	mov	r20, r22
    293c:	41 60       	ori	r20, 0x01	; 1
    293e:	60 e0       	ldi	r22, 0x00	; 0
    2940:	53 dd       	rcall	.-1370   	; 0x23e8 <writeReg>
    2942:	ce 01       	movw	r24, r28
    2944:	21 dd       	rcall	.-1470   	; 0x2388 <startTimeout>
    2946:	04 c0       	rjmp	.+8      	; 0x2950 <performSingleRefCalibration+0x1c>
    2948:	ce 01       	movw	r24, r28
    294a:	2a dd       	rcall	.-1452   	; 0x23a0 <checkTimeoutExpired>
    294c:	81 11       	cpse	r24, r1
    294e:	0f c0       	rjmp	.+30     	; 0x296e <performSingleRefCalibration+0x3a>
    2950:	63 e1       	ldi	r22, 0x13	; 19
    2952:	ce 01       	movw	r24, r28
    2954:	9d dd       	rcall	.-1222   	; 0x2490 <readReg>
    2956:	87 70       	andi	r24, 0x07	; 7
    2958:	b9 f3       	breq	.-18     	; 0x2948 <performSingleRefCalibration+0x14>
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	6b e0       	ldi	r22, 0x0B	; 11
    295e:	ce 01       	movw	r24, r28
    2960:	43 dd       	rcall	.-1402   	; 0x23e8 <writeReg>
    2962:	40 e0       	ldi	r20, 0x00	; 0
    2964:	60 e0       	ldi	r22, 0x00	; 0
    2966:	ce 01       	movw	r24, r28
    2968:	3f dd       	rcall	.-1410   	; 0x23e8 <writeReg>
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	01 c0       	rjmp	.+2      	; 0x2970 <performSingleRefCalibration+0x3c>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	08 95       	ret

00002976 <setMeasurementTimingBudget>:
    2976:	8f 92       	push	r8
    2978:	9f 92       	push	r9
    297a:	af 92       	push	r10
    297c:	bf 92       	push	r11
    297e:	df 92       	push	r13
    2980:	ef 92       	push	r14
    2982:	ff 92       	push	r15
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	cf 93       	push	r28
    298a:	df 93       	push	r29
    298c:	cd b7       	in	r28, 0x3d	; 61
    298e:	de b7       	in	r29, 0x3e	; 62
    2990:	6b 97       	sbiw	r28, 0x1b	; 27
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	de bf       	out	0x3e, r29	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	cd bf       	out	0x3d, r28	; 61
    299c:	40 32       	cpi	r20, 0x20	; 32
    299e:	2e e4       	ldi	r18, 0x4E	; 78
    29a0:	52 07       	cpc	r21, r18
    29a2:	61 05       	cpc	r22, r1
    29a4:	71 05       	cpc	r23, r1
    29a6:	08 f4       	brcc	.+2      	; 0x29aa <setMeasurementTimingBudget+0x34>
    29a8:	74 c0       	rjmp	.+232    	; 0x2a92 <setMeasurementTimingBudget+0x11c>
    29aa:	4a 01       	movw	r8, r20
    29ac:	5b 01       	movw	r10, r22
    29ae:	7c 01       	movw	r14, r24
    29b0:	be 01       	movw	r22, r28
    29b2:	6f 5f       	subi	r22, 0xFF	; 255
    29b4:	7f 4f       	sbci	r23, 0xFF	; 255
    29b6:	83 de       	rcall	.-762    	; 0x26be <getSequenceStepEnables>
    29b8:	ae 01       	movw	r20, r28
    29ba:	4a 5f       	subi	r20, 0xFA	; 250
    29bc:	5f 4f       	sbci	r21, 0xFF	; 255
    29be:	be 01       	movw	r22, r28
    29c0:	6f 5f       	subi	r22, 0xFF	; 255
    29c2:	7f 4f       	sbci	r23, 0xFF	; 255
    29c4:	c7 01       	movw	r24, r14
    29c6:	2a df       	rcall	.-428    	; 0x281c <getSequenceStepTimeouts>
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	88 23       	and	r24, r24
    29cc:	49 f0       	breq	.+18     	; 0x29e0 <setMeasurementTimingBudget+0x6a>
    29ce:	08 89       	ldd	r16, Y+16	; 0x10
    29d0:	19 89       	ldd	r17, Y+17	; 0x11
    29d2:	2a 89       	ldd	r18, Y+18	; 0x12
    29d4:	3b 89       	ldd	r19, Y+19	; 0x13
    29d6:	0a 5c       	subi	r16, 0xCA	; 202
    29d8:	14 4f       	sbci	r17, 0xF4	; 244
    29da:	2f 4f       	sbci	r18, 0xFF	; 255
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
    29de:	04 c0       	rjmp	.+8      	; 0x29e8 <setMeasurementTimingBudget+0x72>
    29e0:	08 ee       	ldi	r16, 0xE8	; 232
    29e2:	18 e0       	ldi	r17, 0x08	; 8
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	88 23       	and	r24, r24
    29ec:	89 f0       	breq	.+34     	; 0x2a10 <setMeasurementTimingBudget+0x9a>
    29ee:	88 89       	ldd	r24, Y+16	; 0x10
    29f0:	99 89       	ldd	r25, Y+17	; 0x11
    29f2:	aa 89       	ldd	r26, Y+18	; 0x12
    29f4:	bb 89       	ldd	r27, Y+19	; 0x13
    29f6:	8e 54       	subi	r24, 0x4E	; 78
    29f8:	9d 4f       	sbci	r25, 0xFD	; 253
    29fa:	af 4f       	sbci	r26, 0xFF	; 255
    29fc:	bf 4f       	sbci	r27, 0xFF	; 255
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	aa 1f       	adc	r26, r26
    2a04:	bb 1f       	adc	r27, r27
    2a06:	08 0f       	add	r16, r24
    2a08:	19 1f       	adc	r17, r25
    2a0a:	2a 1f       	adc	r18, r26
    2a0c:	3b 1f       	adc	r19, r27
    2a0e:	0f c0       	rjmp	.+30     	; 0x2a2e <setMeasurementTimingBudget+0xb8>
    2a10:	8a 81       	ldd	r24, Y+2	; 0x02
    2a12:	88 23       	and	r24, r24
    2a14:	61 f0       	breq	.+24     	; 0x2a2e <setMeasurementTimingBudget+0xb8>
    2a16:	88 89       	ldd	r24, Y+16	; 0x10
    2a18:	99 89       	ldd	r25, Y+17	; 0x11
    2a1a:	aa 89       	ldd	r26, Y+18	; 0x12
    2a1c:	bb 89       	ldd	r27, Y+19	; 0x13
    2a1e:	8c 56       	subi	r24, 0x6C	; 108
    2a20:	9d 4f       	sbci	r25, 0xFD	; 253
    2a22:	af 4f       	sbci	r26, 0xFF	; 255
    2a24:	bf 4f       	sbci	r27, 0xFF	; 255
    2a26:	08 0f       	add	r16, r24
    2a28:	19 1f       	adc	r17, r25
    2a2a:	2a 1f       	adc	r18, r26
    2a2c:	3b 1f       	adc	r19, r27
    2a2e:	dc 80       	ldd	r13, Y+4	; 0x04
    2a30:	dd 20       	and	r13, r13
    2a32:	61 f0       	breq	.+24     	; 0x2a4c <setMeasurementTimingBudget+0xd6>
    2a34:	8c 89       	ldd	r24, Y+20	; 0x14
    2a36:	9d 89       	ldd	r25, Y+21	; 0x15
    2a38:	ae 89       	ldd	r26, Y+22	; 0x16
    2a3a:	bf 89       	ldd	r27, Y+23	; 0x17
    2a3c:	8c 56       	subi	r24, 0x6C	; 108
    2a3e:	9d 4f       	sbci	r25, 0xFD	; 253
    2a40:	af 4f       	sbci	r26, 0xFF	; 255
    2a42:	bf 4f       	sbci	r27, 0xFF	; 255
    2a44:	08 0f       	add	r16, r24
    2a46:	19 1f       	adc	r17, r25
    2a48:	2a 1f       	adc	r18, r26
    2a4a:	3b 1f       	adc	r19, r27
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	88 23       	and	r24, r24
    2a50:	11 f1       	breq	.+68     	; 0x2a96 <setMeasurementTimingBudget+0x120>
    2a52:	0a 5d       	subi	r16, 0xDA	; 218
    2a54:	1d 4f       	sbci	r17, 0xFD	; 253
    2a56:	2f 4f       	sbci	r18, 0xFF	; 255
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	80 16       	cp	r8, r16
    2a5c:	91 06       	cpc	r9, r17
    2a5e:	a2 06       	cpc	r10, r18
    2a60:	b3 06       	cpc	r11, r19
    2a62:	d8 f0       	brcs	.+54     	; 0x2a9a <setMeasurementTimingBudget+0x124>
    2a64:	c5 01       	movw	r24, r10
    2a66:	b4 01       	movw	r22, r8
    2a68:	60 1b       	sub	r22, r16
    2a6a:	71 0b       	sbc	r23, r17
    2a6c:	82 0b       	sbc	r24, r18
    2a6e:	93 0b       	sbc	r25, r19
    2a70:	48 85       	ldd	r20, Y+8	; 0x08
    2a72:	20 df       	rcall	.-448    	; 0x28b4 <timeoutMicrosecondsToMclks>
    2a74:	9b 01       	movw	r18, r22
    2a76:	dd 20       	and	r13, r13
    2a78:	21 f0       	breq	.+8      	; 0x2a82 <setMeasurementTimingBudget+0x10c>
    2a7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a7c:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a7e:	26 0f       	add	r18, r22
    2a80:	37 1f       	adc	r19, r23
    2a82:	c9 01       	movw	r24, r18
    2a84:	38 de       	rcall	.-912    	; 0x26f6 <encodeTimeout>
    2a86:	ac 01       	movw	r20, r24
    2a88:	61 e7       	ldi	r22, 0x71	; 113
    2a8a:	c7 01       	movw	r24, r14
    2a8c:	c1 dc       	rcall	.-1662   	; 0x2410 <writeReg16Bit>
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	05 c0       	rjmp	.+10     	; 0x2a9c <setMeasurementTimingBudget+0x126>
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	03 c0       	rjmp	.+6      	; 0x2a9c <setMeasurementTimingBudget+0x126>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <setMeasurementTimingBudget+0x126>
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	6b 96       	adiw	r28, 0x1b	; 27
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	df 91       	pop	r29
    2aaa:	cf 91       	pop	r28
    2aac:	1f 91       	pop	r17
    2aae:	0f 91       	pop	r16
    2ab0:	ff 90       	pop	r15
    2ab2:	ef 90       	pop	r14
    2ab4:	df 90       	pop	r13
    2ab6:	bf 90       	pop	r11
    2ab8:	af 90       	pop	r10
    2aba:	9f 90       	pop	r9
    2abc:	8f 90       	pop	r8
    2abe:	08 95       	ret

00002ac0 <vl53l0x_init>:
    2ac0:	cf 93       	push	r28
    2ac2:	df 93       	push	r29
    2ac4:	ec 01       	movw	r28, r24
    2ac6:	80 e8       	ldi	r24, 0x80	; 128
    2ac8:	9a e1       	ldi	r25, 0x1A	; 26
    2aca:	a6 e0       	ldi	r26, 0x06	; 6
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <s_i2cInterface>
    2ad2:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <s_i2cInterface+0x1>
    2ad6:	a0 93 de 01 	sts	0x01DE, r26	; 0x8001de <s_i2cInterface+0x2>
    2ada:	b0 93 df 01 	sts	0x01DF, r27	; 0x8001df <s_i2cInterface+0x3>
    2ade:	60 e8       	ldi	r22, 0x80	; 128
    2ae0:	7a e1       	ldi	r23, 0x1A	; 26
    2ae2:	86 e0       	ldi	r24, 0x06	; 6
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	0e 94 27 05 	call	0xa4e	; 0xa4e <i2c_init>
    2aea:	0e 94 50 05 	call	0xaa0	; 0xaa0 <i2c_start>
    2aee:	1a 82       	std	Y+2, r1	; 0x02
    2af0:	19 82       	std	Y+1, r1	; 0x01
    2af2:	1b 82       	std	Y+3, r1	; 0x03
    2af4:	6c 81       	ldd	r22, Y+4	; 0x04
    2af6:	7d 81       	ldd	r23, Y+5	; 0x05
    2af8:	8e 81       	ldd	r24, Y+6	; 0x06
    2afa:	9f 81       	ldd	r25, Y+7	; 0x07
    2afc:	0e 94 05 04 	call	0x80a	; 0x80a <gpio_init>
    2b00:	ce 01       	movw	r24, r28
    2b02:	04 96       	adiw	r24, 0x04	; 4
    2b04:	0e 94 38 04 	call	0x870	; 0x870 <gpio_setDirectionOutput>
    2b08:	6c 81       	ldd	r22, Y+4	; 0x04
    2b0a:	7d 81       	ldd	r23, Y+5	; 0x05
    2b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    2b10:	0e 94 5d 04 	call	0x8ba	; 0x8ba <gpio_out_reset>
    2b14:	df 91       	pop	r29
    2b16:	cf 91       	pop	r28
    2b18:	08 95       	ret

00002b1a <vl53l0x_start>:
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	cd b7       	in	r28, 0x3d	; 61
    2b24:	de b7       	in	r29, 0x3e	; 62
    2b26:	28 97       	sbiw	r28, 0x08	; 8
    2b28:	0f b6       	in	r0, 0x3f	; 63
    2b2a:	f8 94       	cli
    2b2c:	de bf       	out	0x3e, r29	; 62
    2b2e:	0f be       	out	0x3f, r0	; 63
    2b30:	cd bf       	out	0x3d, r28	; 61
    2b32:	8c 01       	movw	r16, r24
    2b34:	fc 01       	movw	r30, r24
    2b36:	64 81       	ldd	r22, Z+4	; 0x04
    2b38:	75 81       	ldd	r23, Z+5	; 0x05
    2b3a:	86 81       	ldd	r24, Z+6	; 0x06
    2b3c:	97 81       	ldd	r25, Z+7	; 0x07
    2b3e:	0e 94 41 04 	call	0x882	; 0x882 <gpio_out_set>
    2b42:	8f e9       	ldi	r24, 0x9F	; 159
    2b44:	9f e0       	ldi	r25, 0x0F	; 15
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	f1 f7       	brne	.-4      	; 0x2b46 <vl53l0x_start+0x2c>
    2b4a:	00 c0       	rjmp	.+0      	; 0x2b4c <vl53l0x_start+0x32>
    2b4c:	00 00       	nop
    2b4e:	69 e8       	ldi	r22, 0x89	; 137
    2b50:	c8 01       	movw	r24, r16
    2b52:	9e dc       	rcall	.-1732   	; 0x2490 <readReg>
    2b54:	48 2f       	mov	r20, r24
    2b56:	41 60       	ori	r20, 0x01	; 1
    2b58:	69 e8       	ldi	r22, 0x89	; 137
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	45 dc       	rcall	.-1910   	; 0x23e8 <writeReg>
    2b5e:	40 e0       	ldi	r20, 0x00	; 0
    2b60:	68 e8       	ldi	r22, 0x88	; 136
    2b62:	c8 01       	movw	r24, r16
    2b64:	41 dc       	rcall	.-1918   	; 0x23e8 <writeReg>
    2b66:	41 e0       	ldi	r20, 0x01	; 1
    2b68:	60 e8       	ldi	r22, 0x80	; 128
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	3d dc       	rcall	.-1926   	; 0x23e8 <writeReg>
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	6f ef       	ldi	r22, 0xFF	; 255
    2b72:	c8 01       	movw	r24, r16
    2b74:	39 dc       	rcall	.-1934   	; 0x23e8 <writeReg>
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	60 e0       	ldi	r22, 0x00	; 0
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	35 dc       	rcall	.-1942   	; 0x23e8 <writeReg>
    2b7e:	61 e9       	ldi	r22, 0x91	; 145
    2b80:	c8 01       	movw	r24, r16
    2b82:	86 dc       	rcall	.-1780   	; 0x2490 <readReg>
    2b84:	f8 01       	movw	r30, r16
    2b86:	82 87       	std	Z+10, r24	; 0x0a
    2b88:	41 e0       	ldi	r20, 0x01	; 1
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	c8 01       	movw	r24, r16
    2b8e:	2c dc       	rcall	.-1960   	; 0x23e8 <writeReg>
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	6f ef       	ldi	r22, 0xFF	; 255
    2b94:	c8 01       	movw	r24, r16
    2b96:	28 dc       	rcall	.-1968   	; 0x23e8 <writeReg>
    2b98:	40 e0       	ldi	r20, 0x00	; 0
    2b9a:	60 e8       	ldi	r22, 0x80	; 128
    2b9c:	c8 01       	movw	r24, r16
    2b9e:	24 dc       	rcall	.-1976   	; 0x23e8 <writeReg>
    2ba0:	60 e6       	ldi	r22, 0x60	; 96
    2ba2:	c8 01       	movw	r24, r16
    2ba4:	75 dc       	rcall	.-1814   	; 0x2490 <readReg>
    2ba6:	48 2f       	mov	r20, r24
    2ba8:	42 61       	ori	r20, 0x12	; 18
    2baa:	60 e6       	ldi	r22, 0x60	; 96
    2bac:	c8 01       	movw	r24, r16
    2bae:	1c dc       	rcall	.-1992   	; 0x23e8 <writeReg>
    2bb0:	40 e2       	ldi	r20, 0x20	; 32
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	64 e4       	ldi	r22, 0x44	; 68
    2bb6:	c8 01       	movw	r24, r16
    2bb8:	2b dc       	rcall	.-1962   	; 0x2410 <writeReg16Bit>
    2bba:	4f ef       	ldi	r20, 0xFF	; 255
    2bbc:	61 e0       	ldi	r22, 0x01	; 1
    2bbe:	c8 01       	movw	r24, r16
    2bc0:	13 dc       	rcall	.-2010   	; 0x23e8 <writeReg>
    2bc2:	ae 01       	movw	r20, r28
    2bc4:	4e 5f       	subi	r20, 0xFE	; 254
    2bc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc8:	be 01       	movw	r22, r28
    2bca:	6f 5f       	subi	r22, 0xFF	; 255
    2bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bce:	c8 01       	movw	r24, r16
    2bd0:	fc dc       	rcall	.-1544   	; 0x25ca <getSpadInfo>
    2bd2:	88 23       	and	r24, r24
    2bd4:	09 f4       	brne	.+2      	; 0x2bd8 <vl53l0x_start+0xbe>
    2bd6:	d2 c1       	rjmp	.+932    	; 0x2f7c <vl53l0x_start+0x462>
    2bd8:	26 e0       	ldi	r18, 0x06	; 6
    2bda:	ae 01       	movw	r20, r28
    2bdc:	4d 5f       	subi	r20, 0xFD	; 253
    2bde:	5f 4f       	sbci	r21, 0xFF	; 255
    2be0:	60 eb       	ldi	r22, 0xB0	; 176
    2be2:	c8 01       	movw	r24, r16
    2be4:	bc dc       	rcall	.-1672   	; 0x255e <readMulti>
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	6f ef       	ldi	r22, 0xFF	; 255
    2bea:	c8 01       	movw	r24, r16
    2bec:	fd db       	rcall	.-2054   	; 0x23e8 <writeReg>
    2bee:	40 e0       	ldi	r20, 0x00	; 0
    2bf0:	6f e4       	ldi	r22, 0x4F	; 79
    2bf2:	c8 01       	movw	r24, r16
    2bf4:	f9 db       	rcall	.-2062   	; 0x23e8 <writeReg>
    2bf6:	4c e2       	ldi	r20, 0x2C	; 44
    2bf8:	6e e4       	ldi	r22, 0x4E	; 78
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	f5 db       	rcall	.-2070   	; 0x23e8 <writeReg>
    2bfe:	40 e0       	ldi	r20, 0x00	; 0
    2c00:	6f ef       	ldi	r22, 0xFF	; 255
    2c02:	c8 01       	movw	r24, r16
    2c04:	f1 db       	rcall	.-2078   	; 0x23e8 <writeReg>
    2c06:	44 eb       	ldi	r20, 0xB4	; 180
    2c08:	66 eb       	ldi	r22, 0xB6	; 182
    2c0a:	c8 01       	movw	r24, r16
    2c0c:	ed db       	rcall	.-2086   	; 0x23e8 <writeReg>
    2c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c10:	81 11       	cpse	r24, r1
    2c12:	02 c0       	rjmp	.+4      	; 0x2c18 <vl53l0x_start+0xfe>
    2c14:	60 e0       	ldi	r22, 0x00	; 0
    2c16:	01 c0       	rjmp	.+2      	; 0x2c1a <vl53l0x_start+0x100>
    2c18:	6c e0       	ldi	r22, 0x0C	; 12
    2c1a:	a9 81       	ldd	r26, Y+1	; 0x01
    2c1c:	80 e0       	ldi	r24, 0x00	; 0
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	41 e0       	ldi	r20, 0x01	; 1
    2c22:	50 e0       	ldi	r21, 0x00	; 0
    2c24:	86 17       	cp	r24, r22
    2c26:	10 f0       	brcs	.+4      	; 0x2c2c <vl53l0x_start+0x112>
    2c28:	a7 13       	cpse	r26, r23
    2c2a:	18 c0       	rjmp	.+48     	; 0x2c5c <vl53l0x_start+0x142>
    2c2c:	98 2f       	mov	r25, r24
    2c2e:	96 95       	lsr	r25
    2c30:	96 95       	lsr	r25
    2c32:	96 95       	lsr	r25
    2c34:	e3 e0       	ldi	r30, 0x03	; 3
    2c36:	f0 e0       	ldi	r31, 0x00	; 0
    2c38:	ec 0f       	add	r30, r28
    2c3a:	fd 1f       	adc	r31, r29
    2c3c:	e9 0f       	add	r30, r25
    2c3e:	f1 1d       	adc	r31, r1
    2c40:	98 2f       	mov	r25, r24
    2c42:	97 70       	andi	r25, 0x07	; 7
    2c44:	9a 01       	movw	r18, r20
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <vl53l0x_start+0x132>
    2c48:	22 0f       	add	r18, r18
    2c4a:	33 1f       	adc	r19, r19
    2c4c:	9a 95       	dec	r25
    2c4e:	e2 f7       	brpl	.-8      	; 0x2c48 <vl53l0x_start+0x12e>
    2c50:	92 2f       	mov	r25, r18
    2c52:	90 95       	com	r25
    2c54:	20 81       	ld	r18, Z
    2c56:	92 23       	and	r25, r18
    2c58:	90 83       	st	Z, r25
    2c5a:	15 c0       	rjmp	.+42     	; 0x2c86 <vl53l0x_start+0x16c>
    2c5c:	98 2f       	mov	r25, r24
    2c5e:	96 95       	lsr	r25
    2c60:	96 95       	lsr	r25
    2c62:	96 95       	lsr	r25
    2c64:	e3 e0       	ldi	r30, 0x03	; 3
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	ec 0f       	add	r30, r28
    2c6a:	fd 1f       	adc	r31, r29
    2c6c:	e9 0f       	add	r30, r25
    2c6e:	f1 1d       	adc	r31, r1
    2c70:	20 81       	ld	r18, Z
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	98 2f       	mov	r25, r24
    2c76:	97 70       	andi	r25, 0x07	; 7
    2c78:	02 c0       	rjmp	.+4      	; 0x2c7e <vl53l0x_start+0x164>
    2c7a:	35 95       	asr	r19
    2c7c:	27 95       	ror	r18
    2c7e:	9a 95       	dec	r25
    2c80:	e2 f7       	brpl	.-8      	; 0x2c7a <vl53l0x_start+0x160>
    2c82:	20 fd       	sbrc	r18, 0
    2c84:	7f 5f       	subi	r23, 0xFF	; 255
    2c86:	8f 5f       	subi	r24, 0xFF	; 255
    2c88:	80 33       	cpi	r24, 0x30	; 48
    2c8a:	61 f6       	brne	.-104    	; 0x2c24 <vl53l0x_start+0x10a>
    2c8c:	26 e0       	ldi	r18, 0x06	; 6
    2c8e:	ae 01       	movw	r20, r28
    2c90:	4d 5f       	subi	r20, 0xFD	; 253
    2c92:	5f 4f       	sbci	r21, 0xFF	; 255
    2c94:	60 eb       	ldi	r22, 0xB0	; 176
    2c96:	c8 01       	movw	r24, r16
    2c98:	37 dc       	rcall	.-1938   	; 0x2508 <writeMulti>
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	6f ef       	ldi	r22, 0xFF	; 255
    2c9e:	c8 01       	movw	r24, r16
    2ca0:	a3 db       	rcall	.-2234   	; 0x23e8 <writeReg>
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	60 e0       	ldi	r22, 0x00	; 0
    2ca6:	c8 01       	movw	r24, r16
    2ca8:	9f db       	rcall	.-2242   	; 0x23e8 <writeReg>
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	6f ef       	ldi	r22, 0xFF	; 255
    2cae:	c8 01       	movw	r24, r16
    2cb0:	9b db       	rcall	.-2250   	; 0x23e8 <writeReg>
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	69 e0       	ldi	r22, 0x09	; 9
    2cb6:	c8 01       	movw	r24, r16
    2cb8:	97 db       	rcall	.-2258   	; 0x23e8 <writeReg>
    2cba:	40 e0       	ldi	r20, 0x00	; 0
    2cbc:	60 e1       	ldi	r22, 0x10	; 16
    2cbe:	c8 01       	movw	r24, r16
    2cc0:	93 db       	rcall	.-2266   	; 0x23e8 <writeReg>
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	61 e1       	ldi	r22, 0x11	; 17
    2cc6:	c8 01       	movw	r24, r16
    2cc8:	8f db       	rcall	.-2274   	; 0x23e8 <writeReg>
    2cca:	41 e0       	ldi	r20, 0x01	; 1
    2ccc:	64 e2       	ldi	r22, 0x24	; 36
    2cce:	c8 01       	movw	r24, r16
    2cd0:	8b db       	rcall	.-2282   	; 0x23e8 <writeReg>
    2cd2:	4f ef       	ldi	r20, 0xFF	; 255
    2cd4:	65 e2       	ldi	r22, 0x25	; 37
    2cd6:	c8 01       	movw	r24, r16
    2cd8:	87 db       	rcall	.-2290   	; 0x23e8 <writeReg>
    2cda:	40 e0       	ldi	r20, 0x00	; 0
    2cdc:	65 e7       	ldi	r22, 0x75	; 117
    2cde:	c8 01       	movw	r24, r16
    2ce0:	83 db       	rcall	.-2298   	; 0x23e8 <writeReg>
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	6f ef       	ldi	r22, 0xFF	; 255
    2ce6:	c8 01       	movw	r24, r16
    2ce8:	7f db       	rcall	.-2306   	; 0x23e8 <writeReg>
    2cea:	4c e2       	ldi	r20, 0x2C	; 44
    2cec:	6e e4       	ldi	r22, 0x4E	; 78
    2cee:	c8 01       	movw	r24, r16
    2cf0:	7b db       	rcall	.-2314   	; 0x23e8 <writeReg>
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	68 e4       	ldi	r22, 0x48	; 72
    2cf6:	c8 01       	movw	r24, r16
    2cf8:	77 db       	rcall	.-2322   	; 0x23e8 <writeReg>
    2cfa:	40 e2       	ldi	r20, 0x20	; 32
    2cfc:	60 e3       	ldi	r22, 0x30	; 48
    2cfe:	c8 01       	movw	r24, r16
    2d00:	73 db       	rcall	.-2330   	; 0x23e8 <writeReg>
    2d02:	40 e0       	ldi	r20, 0x00	; 0
    2d04:	6f ef       	ldi	r22, 0xFF	; 255
    2d06:	c8 01       	movw	r24, r16
    2d08:	6f db       	rcall	.-2338   	; 0x23e8 <writeReg>
    2d0a:	49 e0       	ldi	r20, 0x09	; 9
    2d0c:	60 e3       	ldi	r22, 0x30	; 48
    2d0e:	c8 01       	movw	r24, r16
    2d10:	6b db       	rcall	.-2346   	; 0x23e8 <writeReg>
    2d12:	40 e0       	ldi	r20, 0x00	; 0
    2d14:	64 e5       	ldi	r22, 0x54	; 84
    2d16:	c8 01       	movw	r24, r16
    2d18:	67 db       	rcall	.-2354   	; 0x23e8 <writeReg>
    2d1a:	44 e0       	ldi	r20, 0x04	; 4
    2d1c:	61 e3       	ldi	r22, 0x31	; 49
    2d1e:	c8 01       	movw	r24, r16
    2d20:	63 db       	rcall	.-2362   	; 0x23e8 <writeReg>
    2d22:	43 e0       	ldi	r20, 0x03	; 3
    2d24:	62 e3       	ldi	r22, 0x32	; 50
    2d26:	c8 01       	movw	r24, r16
    2d28:	5f db       	rcall	.-2370   	; 0x23e8 <writeReg>
    2d2a:	43 e8       	ldi	r20, 0x83	; 131
    2d2c:	60 e4       	ldi	r22, 0x40	; 64
    2d2e:	c8 01       	movw	r24, r16
    2d30:	5b db       	rcall	.-2378   	; 0x23e8 <writeReg>
    2d32:	45 e2       	ldi	r20, 0x25	; 37
    2d34:	66 e4       	ldi	r22, 0x46	; 70
    2d36:	c8 01       	movw	r24, r16
    2d38:	57 db       	rcall	.-2386   	; 0x23e8 <writeReg>
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	60 e6       	ldi	r22, 0x60	; 96
    2d3e:	c8 01       	movw	r24, r16
    2d40:	53 db       	rcall	.-2394   	; 0x23e8 <writeReg>
    2d42:	40 e0       	ldi	r20, 0x00	; 0
    2d44:	67 e2       	ldi	r22, 0x27	; 39
    2d46:	c8 01       	movw	r24, r16
    2d48:	4f db       	rcall	.-2402   	; 0x23e8 <writeReg>
    2d4a:	46 e0       	ldi	r20, 0x06	; 6
    2d4c:	60 e5       	ldi	r22, 0x50	; 80
    2d4e:	c8 01       	movw	r24, r16
    2d50:	4b db       	rcall	.-2410   	; 0x23e8 <writeReg>
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	61 e5       	ldi	r22, 0x51	; 81
    2d56:	c8 01       	movw	r24, r16
    2d58:	47 db       	rcall	.-2418   	; 0x23e8 <writeReg>
    2d5a:	46 e9       	ldi	r20, 0x96	; 150
    2d5c:	62 e5       	ldi	r22, 0x52	; 82
    2d5e:	c8 01       	movw	r24, r16
    2d60:	43 db       	rcall	.-2426   	; 0x23e8 <writeReg>
    2d62:	48 e0       	ldi	r20, 0x08	; 8
    2d64:	66 e5       	ldi	r22, 0x56	; 86
    2d66:	c8 01       	movw	r24, r16
    2d68:	3f db       	rcall	.-2434   	; 0x23e8 <writeReg>
    2d6a:	40 e3       	ldi	r20, 0x30	; 48
    2d6c:	67 e5       	ldi	r22, 0x57	; 87
    2d6e:	c8 01       	movw	r24, r16
    2d70:	3b db       	rcall	.-2442   	; 0x23e8 <writeReg>
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	61 e6       	ldi	r22, 0x61	; 97
    2d76:	c8 01       	movw	r24, r16
    2d78:	37 db       	rcall	.-2450   	; 0x23e8 <writeReg>
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	62 e6       	ldi	r22, 0x62	; 98
    2d7e:	c8 01       	movw	r24, r16
    2d80:	33 db       	rcall	.-2458   	; 0x23e8 <writeReg>
    2d82:	40 e0       	ldi	r20, 0x00	; 0
    2d84:	64 e6       	ldi	r22, 0x64	; 100
    2d86:	c8 01       	movw	r24, r16
    2d88:	2f db       	rcall	.-2466   	; 0x23e8 <writeReg>
    2d8a:	40 e0       	ldi	r20, 0x00	; 0
    2d8c:	65 e6       	ldi	r22, 0x65	; 101
    2d8e:	c8 01       	movw	r24, r16
    2d90:	2b db       	rcall	.-2474   	; 0x23e8 <writeReg>
    2d92:	40 ea       	ldi	r20, 0xA0	; 160
    2d94:	66 e6       	ldi	r22, 0x66	; 102
    2d96:	c8 01       	movw	r24, r16
    2d98:	27 db       	rcall	.-2482   	; 0x23e8 <writeReg>
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	6f ef       	ldi	r22, 0xFF	; 255
    2d9e:	c8 01       	movw	r24, r16
    2da0:	23 db       	rcall	.-2490   	; 0x23e8 <writeReg>
    2da2:	42 e3       	ldi	r20, 0x32	; 50
    2da4:	62 e2       	ldi	r22, 0x22	; 34
    2da6:	c8 01       	movw	r24, r16
    2da8:	1f db       	rcall	.-2498   	; 0x23e8 <writeReg>
    2daa:	44 e1       	ldi	r20, 0x14	; 20
    2dac:	67 e4       	ldi	r22, 0x47	; 71
    2dae:	c8 01       	movw	r24, r16
    2db0:	1b db       	rcall	.-2506   	; 0x23e8 <writeReg>
    2db2:	4f ef       	ldi	r20, 0xFF	; 255
    2db4:	69 e4       	ldi	r22, 0x49	; 73
    2db6:	c8 01       	movw	r24, r16
    2db8:	17 db       	rcall	.-2514   	; 0x23e8 <writeReg>
    2dba:	40 e0       	ldi	r20, 0x00	; 0
    2dbc:	6a e4       	ldi	r22, 0x4A	; 74
    2dbe:	c8 01       	movw	r24, r16
    2dc0:	13 db       	rcall	.-2522   	; 0x23e8 <writeReg>
    2dc2:	40 e0       	ldi	r20, 0x00	; 0
    2dc4:	6f ef       	ldi	r22, 0xFF	; 255
    2dc6:	c8 01       	movw	r24, r16
    2dc8:	0f db       	rcall	.-2530   	; 0x23e8 <writeReg>
    2dca:	4a e0       	ldi	r20, 0x0A	; 10
    2dcc:	6a e7       	ldi	r22, 0x7A	; 122
    2dce:	c8 01       	movw	r24, r16
    2dd0:	0b db       	rcall	.-2538   	; 0x23e8 <writeReg>
    2dd2:	40 e0       	ldi	r20, 0x00	; 0
    2dd4:	6b e7       	ldi	r22, 0x7B	; 123
    2dd6:	c8 01       	movw	r24, r16
    2dd8:	07 db       	rcall	.-2546   	; 0x23e8 <writeReg>
    2dda:	41 e2       	ldi	r20, 0x21	; 33
    2ddc:	68 e7       	ldi	r22, 0x78	; 120
    2dde:	c8 01       	movw	r24, r16
    2de0:	03 db       	rcall	.-2554   	; 0x23e8 <writeReg>
    2de2:	41 e0       	ldi	r20, 0x01	; 1
    2de4:	6f ef       	ldi	r22, 0xFF	; 255
    2de6:	c8 01       	movw	r24, r16
    2de8:	ff da       	rcall	.-2562   	; 0x23e8 <writeReg>
    2dea:	44 e3       	ldi	r20, 0x34	; 52
    2dec:	63 e2       	ldi	r22, 0x23	; 35
    2dee:	c8 01       	movw	r24, r16
    2df0:	fb da       	rcall	.-2570   	; 0x23e8 <writeReg>
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	62 e4       	ldi	r22, 0x42	; 66
    2df6:	c8 01       	movw	r24, r16
    2df8:	f7 da       	rcall	.-2578   	; 0x23e8 <writeReg>
    2dfa:	4f ef       	ldi	r20, 0xFF	; 255
    2dfc:	64 e4       	ldi	r22, 0x44	; 68
    2dfe:	c8 01       	movw	r24, r16
    2e00:	f3 da       	rcall	.-2586   	; 0x23e8 <writeReg>
    2e02:	46 e2       	ldi	r20, 0x26	; 38
    2e04:	65 e4       	ldi	r22, 0x45	; 69
    2e06:	c8 01       	movw	r24, r16
    2e08:	ef da       	rcall	.-2594   	; 0x23e8 <writeReg>
    2e0a:	45 e0       	ldi	r20, 0x05	; 5
    2e0c:	66 e4       	ldi	r22, 0x46	; 70
    2e0e:	c8 01       	movw	r24, r16
    2e10:	eb da       	rcall	.-2602   	; 0x23e8 <writeReg>
    2e12:	40 e4       	ldi	r20, 0x40	; 64
    2e14:	60 e4       	ldi	r22, 0x40	; 64
    2e16:	c8 01       	movw	r24, r16
    2e18:	e7 da       	rcall	.-2610   	; 0x23e8 <writeReg>
    2e1a:	46 e0       	ldi	r20, 0x06	; 6
    2e1c:	6e e0       	ldi	r22, 0x0E	; 14
    2e1e:	c8 01       	movw	r24, r16
    2e20:	e3 da       	rcall	.-2618   	; 0x23e8 <writeReg>
    2e22:	4a e1       	ldi	r20, 0x1A	; 26
    2e24:	60 e2       	ldi	r22, 0x20	; 32
    2e26:	c8 01       	movw	r24, r16
    2e28:	df da       	rcall	.-2626   	; 0x23e8 <writeReg>
    2e2a:	40 e4       	ldi	r20, 0x40	; 64
    2e2c:	63 e4       	ldi	r22, 0x43	; 67
    2e2e:	c8 01       	movw	r24, r16
    2e30:	db da       	rcall	.-2634   	; 0x23e8 <writeReg>
    2e32:	40 e0       	ldi	r20, 0x00	; 0
    2e34:	6f ef       	ldi	r22, 0xFF	; 255
    2e36:	c8 01       	movw	r24, r16
    2e38:	d7 da       	rcall	.-2642   	; 0x23e8 <writeReg>
    2e3a:	43 e0       	ldi	r20, 0x03	; 3
    2e3c:	64 e3       	ldi	r22, 0x34	; 52
    2e3e:	c8 01       	movw	r24, r16
    2e40:	d3 da       	rcall	.-2650   	; 0x23e8 <writeReg>
    2e42:	44 e4       	ldi	r20, 0x44	; 68
    2e44:	65 e3       	ldi	r22, 0x35	; 53
    2e46:	c8 01       	movw	r24, r16
    2e48:	cf da       	rcall	.-2658   	; 0x23e8 <writeReg>
    2e4a:	41 e0       	ldi	r20, 0x01	; 1
    2e4c:	6f ef       	ldi	r22, 0xFF	; 255
    2e4e:	c8 01       	movw	r24, r16
    2e50:	cb da       	rcall	.-2666   	; 0x23e8 <writeReg>
    2e52:	44 e0       	ldi	r20, 0x04	; 4
    2e54:	61 e3       	ldi	r22, 0x31	; 49
    2e56:	c8 01       	movw	r24, r16
    2e58:	c7 da       	rcall	.-2674   	; 0x23e8 <writeReg>
    2e5a:	49 e0       	ldi	r20, 0x09	; 9
    2e5c:	6b e4       	ldi	r22, 0x4B	; 75
    2e5e:	c8 01       	movw	r24, r16
    2e60:	c3 da       	rcall	.-2682   	; 0x23e8 <writeReg>
    2e62:	45 e0       	ldi	r20, 0x05	; 5
    2e64:	6c e4       	ldi	r22, 0x4C	; 76
    2e66:	c8 01       	movw	r24, r16
    2e68:	bf da       	rcall	.-2690   	; 0x23e8 <writeReg>
    2e6a:	44 e0       	ldi	r20, 0x04	; 4
    2e6c:	6d e4       	ldi	r22, 0x4D	; 77
    2e6e:	c8 01       	movw	r24, r16
    2e70:	bb da       	rcall	.-2698   	; 0x23e8 <writeReg>
    2e72:	40 e0       	ldi	r20, 0x00	; 0
    2e74:	6f ef       	ldi	r22, 0xFF	; 255
    2e76:	c8 01       	movw	r24, r16
    2e78:	b7 da       	rcall	.-2706   	; 0x23e8 <writeReg>
    2e7a:	40 e0       	ldi	r20, 0x00	; 0
    2e7c:	64 e4       	ldi	r22, 0x44	; 68
    2e7e:	c8 01       	movw	r24, r16
    2e80:	b3 da       	rcall	.-2714   	; 0x23e8 <writeReg>
    2e82:	40 e2       	ldi	r20, 0x20	; 32
    2e84:	65 e4       	ldi	r22, 0x45	; 69
    2e86:	c8 01       	movw	r24, r16
    2e88:	af da       	rcall	.-2722   	; 0x23e8 <writeReg>
    2e8a:	48 e0       	ldi	r20, 0x08	; 8
    2e8c:	67 e4       	ldi	r22, 0x47	; 71
    2e8e:	c8 01       	movw	r24, r16
    2e90:	ab da       	rcall	.-2730   	; 0x23e8 <writeReg>
    2e92:	48 e2       	ldi	r20, 0x28	; 40
    2e94:	68 e4       	ldi	r22, 0x48	; 72
    2e96:	c8 01       	movw	r24, r16
    2e98:	a7 da       	rcall	.-2738   	; 0x23e8 <writeReg>
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	67 e6       	ldi	r22, 0x67	; 103
    2e9e:	c8 01       	movw	r24, r16
    2ea0:	a3 da       	rcall	.-2746   	; 0x23e8 <writeReg>
    2ea2:	44 e0       	ldi	r20, 0x04	; 4
    2ea4:	60 e7       	ldi	r22, 0x70	; 112
    2ea6:	c8 01       	movw	r24, r16
    2ea8:	9f da       	rcall	.-2754   	; 0x23e8 <writeReg>
    2eaa:	41 e0       	ldi	r20, 0x01	; 1
    2eac:	61 e7       	ldi	r22, 0x71	; 113
    2eae:	c8 01       	movw	r24, r16
    2eb0:	9b da       	rcall	.-2762   	; 0x23e8 <writeReg>
    2eb2:	4e ef       	ldi	r20, 0xFE	; 254
    2eb4:	62 e7       	ldi	r22, 0x72	; 114
    2eb6:	c8 01       	movw	r24, r16
    2eb8:	97 da       	rcall	.-2770   	; 0x23e8 <writeReg>
    2eba:	40 e0       	ldi	r20, 0x00	; 0
    2ebc:	66 e7       	ldi	r22, 0x76	; 118
    2ebe:	c8 01       	movw	r24, r16
    2ec0:	93 da       	rcall	.-2778   	; 0x23e8 <writeReg>
    2ec2:	40 e0       	ldi	r20, 0x00	; 0
    2ec4:	67 e7       	ldi	r22, 0x77	; 119
    2ec6:	c8 01       	movw	r24, r16
    2ec8:	8f da       	rcall	.-2786   	; 0x23e8 <writeReg>
    2eca:	41 e0       	ldi	r20, 0x01	; 1
    2ecc:	6f ef       	ldi	r22, 0xFF	; 255
    2ece:	c8 01       	movw	r24, r16
    2ed0:	8b da       	rcall	.-2794   	; 0x23e8 <writeReg>
    2ed2:	41 e0       	ldi	r20, 0x01	; 1
    2ed4:	6d e0       	ldi	r22, 0x0D	; 13
    2ed6:	c8 01       	movw	r24, r16
    2ed8:	87 da       	rcall	.-2802   	; 0x23e8 <writeReg>
    2eda:	40 e0       	ldi	r20, 0x00	; 0
    2edc:	6f ef       	ldi	r22, 0xFF	; 255
    2ede:	c8 01       	movw	r24, r16
    2ee0:	83 da       	rcall	.-2810   	; 0x23e8 <writeReg>
    2ee2:	41 e0       	ldi	r20, 0x01	; 1
    2ee4:	60 e8       	ldi	r22, 0x80	; 128
    2ee6:	c8 01       	movw	r24, r16
    2ee8:	7f da       	rcall	.-2818   	; 0x23e8 <writeReg>
    2eea:	48 ef       	ldi	r20, 0xF8	; 248
    2eec:	61 e0       	ldi	r22, 0x01	; 1
    2eee:	c8 01       	movw	r24, r16
    2ef0:	7b da       	rcall	.-2826   	; 0x23e8 <writeReg>
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	6f ef       	ldi	r22, 0xFF	; 255
    2ef6:	c8 01       	movw	r24, r16
    2ef8:	77 da       	rcall	.-2834   	; 0x23e8 <writeReg>
    2efa:	41 e0       	ldi	r20, 0x01	; 1
    2efc:	6e e8       	ldi	r22, 0x8E	; 142
    2efe:	c8 01       	movw	r24, r16
    2f00:	73 da       	rcall	.-2842   	; 0x23e8 <writeReg>
    2f02:	41 e0       	ldi	r20, 0x01	; 1
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	c8 01       	movw	r24, r16
    2f08:	6f da       	rcall	.-2850   	; 0x23e8 <writeReg>
    2f0a:	40 e0       	ldi	r20, 0x00	; 0
    2f0c:	6f ef       	ldi	r22, 0xFF	; 255
    2f0e:	c8 01       	movw	r24, r16
    2f10:	6b da       	rcall	.-2858   	; 0x23e8 <writeReg>
    2f12:	40 e0       	ldi	r20, 0x00	; 0
    2f14:	60 e8       	ldi	r22, 0x80	; 128
    2f16:	c8 01       	movw	r24, r16
    2f18:	67 da       	rcall	.-2866   	; 0x23e8 <writeReg>
    2f1a:	44 e0       	ldi	r20, 0x04	; 4
    2f1c:	6a e0       	ldi	r22, 0x0A	; 10
    2f1e:	c8 01       	movw	r24, r16
    2f20:	63 da       	rcall	.-2874   	; 0x23e8 <writeReg>
    2f22:	64 e8       	ldi	r22, 0x84	; 132
    2f24:	c8 01       	movw	r24, r16
    2f26:	b4 da       	rcall	.-2712   	; 0x2490 <readReg>
    2f28:	48 2f       	mov	r20, r24
    2f2a:	4f 7e       	andi	r20, 0xEF	; 239
    2f2c:	64 e8       	ldi	r22, 0x84	; 132
    2f2e:	c8 01       	movw	r24, r16
    2f30:	5b da       	rcall	.-2890   	; 0x23e8 <writeReg>
    2f32:	41 e0       	ldi	r20, 0x01	; 1
    2f34:	6b e0       	ldi	r22, 0x0B	; 11
    2f36:	c8 01       	movw	r24, r16
    2f38:	57 da       	rcall	.-2898   	; 0x23e8 <writeReg>
    2f3a:	48 ee       	ldi	r20, 0xE8	; 232
    2f3c:	61 e0       	ldi	r22, 0x01	; 1
    2f3e:	c8 01       	movw	r24, r16
    2f40:	53 da       	rcall	.-2906   	; 0x23e8 <writeReg>
    2f42:	4e e1       	ldi	r20, 0x1E	; 30
    2f44:	50 e0       	ldi	r21, 0x00	; 0
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	70 e0       	ldi	r23, 0x00	; 0
    2f4a:	c8 01       	movw	r24, r16
    2f4c:	14 dd       	rcall	.-1496   	; 0x2976 <setMeasurementTimingBudget>
    2f4e:	41 e0       	ldi	r20, 0x01	; 1
    2f50:	61 e0       	ldi	r22, 0x01	; 1
    2f52:	c8 01       	movw	r24, r16
    2f54:	49 da       	rcall	.-2926   	; 0x23e8 <writeReg>
    2f56:	60 e4       	ldi	r22, 0x40	; 64
    2f58:	c8 01       	movw	r24, r16
    2f5a:	ec dc       	rcall	.-1576   	; 0x2934 <performSingleRefCalibration>
    2f5c:	88 23       	and	r24, r24
    2f5e:	71 f0       	breq	.+28     	; 0x2f7c <vl53l0x_start+0x462>
    2f60:	42 e0       	ldi	r20, 0x02	; 2
    2f62:	61 e0       	ldi	r22, 0x01	; 1
    2f64:	c8 01       	movw	r24, r16
    2f66:	40 da       	rcall	.-2944   	; 0x23e8 <writeReg>
    2f68:	60 e0       	ldi	r22, 0x00	; 0
    2f6a:	c8 01       	movw	r24, r16
    2f6c:	e3 dc       	rcall	.-1594   	; 0x2934 <performSingleRefCalibration>
    2f6e:	88 23       	and	r24, r24
    2f70:	29 f0       	breq	.+10     	; 0x2f7c <vl53l0x_start+0x462>
    2f72:	48 ee       	ldi	r20, 0xE8	; 232
    2f74:	61 e0       	ldi	r22, 0x01	; 1
    2f76:	c8 01       	movw	r24, r16
    2f78:	37 da       	rcall	.-2962   	; 0x23e8 <writeReg>
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	28 96       	adiw	r28, 0x08	; 8
    2f7e:	0f b6       	in	r0, 0x3f	; 63
    2f80:	f8 94       	cli
    2f82:	de bf       	out	0x3e, r29	; 62
    2f84:	0f be       	out	0x3f, r0	; 63
    2f86:	cd bf       	out	0x3d, r28	; 61
    2f88:	df 91       	pop	r29
    2f8a:	cf 91       	pop	r28
    2f8c:	1f 91       	pop	r17
    2f8e:	0f 91       	pop	r16
    2f90:	08 95       	ret

00002f92 <vl53l0x_setAddress>:
    2f92:	1f 93       	push	r17
    2f94:	cf 93       	push	r28
    2f96:	df 93       	push	r29
    2f98:	ec 01       	movw	r28, r24
    2f9a:	16 2f       	mov	r17, r22
    2f9c:	46 2f       	mov	r20, r22
    2f9e:	4f 77       	andi	r20, 0x7F	; 127
    2fa0:	6a e8       	ldi	r22, 0x8A	; 138
    2fa2:	22 da       	rcall	.-3004   	; 0x23e8 <writeReg>
    2fa4:	18 83       	st	Y, r17
    2fa6:	df 91       	pop	r29
    2fa8:	cf 91       	pop	r28
    2faa:	1f 91       	pop	r17
    2fac:	08 95       	ret

00002fae <vl53l0x_setMode>:
    2fae:	cf 93       	push	r28
    2fb0:	df 93       	push	r29
    2fb2:	ec 01       	movw	r28, r24
    2fb4:	61 30       	cpi	r22, 0x01	; 1
    2fb6:	89 f0       	breq	.+34     	; 0x2fda <vl53l0x_setMode+0x2c>
    2fb8:	28 f0       	brcs	.+10     	; 0x2fc4 <vl53l0x_setMode+0x16>
    2fba:	62 30       	cpi	r22, 0x02	; 2
    2fbc:	c9 f0       	breq	.+50     	; 0x2ff0 <vl53l0x_setMode+0x42>
    2fbe:	63 30       	cpi	r22, 0x03	; 3
    2fc0:	11 f1       	breq	.+68     	; 0x3006 <vl53l0x_setMode+0x58>
    2fc2:	2c c0       	rjmp	.+88     	; 0x301c <vl53l0x_setMode+0x6e>
    2fc4:	40 e2       	ldi	r20, 0x20	; 32
    2fc6:	50 e0       	ldi	r21, 0x00	; 0
    2fc8:	64 e4       	ldi	r22, 0x44	; 68
    2fca:	22 da       	rcall	.-3004   	; 0x2410 <writeReg16Bit>
    2fcc:	40 e3       	ldi	r20, 0x30	; 48
    2fce:	55 e7       	ldi	r21, 0x75	; 117
    2fd0:	60 e0       	ldi	r22, 0x00	; 0
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	cf dc       	rcall	.-1634   	; 0x2976 <setMeasurementTimingBudget>
    2fd8:	22 c0       	rjmp	.+68     	; 0x301e <vl53l0x_setMode+0x70>
    2fda:	40 e2       	ldi	r20, 0x20	; 32
    2fdc:	50 e0       	ldi	r21, 0x00	; 0
    2fde:	64 e4       	ldi	r22, 0x44	; 68
    2fe0:	17 da       	rcall	.-3026   	; 0x2410 <writeReg16Bit>
    2fe2:	40 e4       	ldi	r20, 0x40	; 64
    2fe4:	5d e0       	ldi	r21, 0x0D	; 13
    2fe6:	63 e0       	ldi	r22, 0x03	; 3
    2fe8:	70 e0       	ldi	r23, 0x00	; 0
    2fea:	ce 01       	movw	r24, r28
    2fec:	c4 dc       	rcall	.-1656   	; 0x2976 <setMeasurementTimingBudget>
    2fee:	17 c0       	rjmp	.+46     	; 0x301e <vl53l0x_setMode+0x70>
    2ff0:	4c e0       	ldi	r20, 0x0C	; 12
    2ff2:	50 e0       	ldi	r21, 0x00	; 0
    2ff4:	64 e4       	ldi	r22, 0x44	; 68
    2ff6:	0c da       	rcall	.-3048   	; 0x2410 <writeReg16Bit>
    2ff8:	48 ee       	ldi	r20, 0xE8	; 232
    2ffa:	50 e8       	ldi	r21, 0x80	; 128
    2ffc:	60 e0       	ldi	r22, 0x00	; 0
    2ffe:	70 e0       	ldi	r23, 0x00	; 0
    3000:	ce 01       	movw	r24, r28
    3002:	b9 dc       	rcall	.-1678   	; 0x2976 <setMeasurementTimingBudget>
    3004:	0c c0       	rjmp	.+24     	; 0x301e <vl53l0x_setMode+0x70>
    3006:	40 e2       	ldi	r20, 0x20	; 32
    3008:	50 e0       	ldi	r21, 0x00	; 0
    300a:	64 e4       	ldi	r22, 0x44	; 68
    300c:	01 da       	rcall	.-3070   	; 0x2410 <writeReg16Bit>
    300e:	40 e2       	ldi	r20, 0x20	; 32
    3010:	5e e4       	ldi	r21, 0x4E	; 78
    3012:	60 e0       	ldi	r22, 0x00	; 0
    3014:	70 e0       	ldi	r23, 0x00	; 0
    3016:	ce 01       	movw	r24, r28
    3018:	ae dc       	rcall	.-1700   	; 0x2976 <setMeasurementTimingBudget>
    301a:	01 c0       	rjmp	.+2      	; 0x301e <vl53l0x_setMode+0x70>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	df 91       	pop	r29
    3020:	cf 91       	pop	r28
    3022:	08 95       	ret

00003024 <vl53l0x_startContinuous>:
    3024:	cf 92       	push	r12
    3026:	df 92       	push	r13
    3028:	ef 92       	push	r14
    302a:	ff 92       	push	r15
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	ec 01       	movw	r28, r24
    3032:	6a 01       	movw	r12, r20
    3034:	7b 01       	movw	r14, r22
    3036:	41 e0       	ldi	r20, 0x01	; 1
    3038:	60 e8       	ldi	r22, 0x80	; 128
    303a:	d6 d9       	rcall	.-3156   	; 0x23e8 <writeReg>
    303c:	41 e0       	ldi	r20, 0x01	; 1
    303e:	6f ef       	ldi	r22, 0xFF	; 255
    3040:	ce 01       	movw	r24, r28
    3042:	d2 d9       	rcall	.-3164   	; 0x23e8 <writeReg>
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	ce 01       	movw	r24, r28
    304a:	ce d9       	rcall	.-3172   	; 0x23e8 <writeReg>
    304c:	4a 85       	ldd	r20, Y+10	; 0x0a
    304e:	61 e9       	ldi	r22, 0x91	; 145
    3050:	ce 01       	movw	r24, r28
    3052:	ca d9       	rcall	.-3180   	; 0x23e8 <writeReg>
    3054:	41 e0       	ldi	r20, 0x01	; 1
    3056:	60 e0       	ldi	r22, 0x00	; 0
    3058:	ce 01       	movw	r24, r28
    305a:	c6 d9       	rcall	.-3188   	; 0x23e8 <writeReg>
    305c:	40 e0       	ldi	r20, 0x00	; 0
    305e:	6f ef       	ldi	r22, 0xFF	; 255
    3060:	ce 01       	movw	r24, r28
    3062:	c2 d9       	rcall	.-3196   	; 0x23e8 <writeReg>
    3064:	40 e0       	ldi	r20, 0x00	; 0
    3066:	60 e8       	ldi	r22, 0x80	; 128
    3068:	ce 01       	movw	r24, r28
    306a:	be d9       	rcall	.-3204   	; 0x23e8 <writeReg>
    306c:	c1 14       	cp	r12, r1
    306e:	d1 04       	cpc	r13, r1
    3070:	e1 04       	cpc	r14, r1
    3072:	f1 04       	cpc	r15, r1
    3074:	a9 f0       	breq	.+42     	; 0x30a0 <vl53l0x_startContinuous+0x7c>
    3076:	68 ef       	ldi	r22, 0xF8	; 248
    3078:	ce 01       	movw	r24, r28
    307a:	25 da       	rcall	.-2998   	; 0x24c6 <readReg16Bit>
    307c:	00 97       	sbiw	r24, 0x00	; 0
    307e:	31 f0       	breq	.+12     	; 0x308c <vl53l0x_startContinuous+0x68>
    3080:	dc 01       	movw	r26, r24
    3082:	a7 01       	movw	r20, r14
    3084:	96 01       	movw	r18, r12
    3086:	32 d2       	rcall	.+1124   	; 0x34ec <__muluhisi3>
    3088:	6b 01       	movw	r12, r22
    308a:	7c 01       	movw	r14, r24
    308c:	a7 01       	movw	r20, r14
    308e:	96 01       	movw	r18, r12
    3090:	64 e0       	ldi	r22, 0x04	; 4
    3092:	ce 01       	movw	r24, r28
    3094:	d7 d9       	rcall	.-3154   	; 0x2444 <writeReg32Bit>
    3096:	44 e0       	ldi	r20, 0x04	; 4
    3098:	60 e0       	ldi	r22, 0x00	; 0
    309a:	ce 01       	movw	r24, r28
    309c:	a5 d9       	rcall	.-3254   	; 0x23e8 <writeReg>
    309e:	04 c0       	rjmp	.+8      	; 0x30a8 <vl53l0x_startContinuous+0x84>
    30a0:	42 e0       	ldi	r20, 0x02	; 2
    30a2:	60 e0       	ldi	r22, 0x00	; 0
    30a4:	ce 01       	movw	r24, r28
    30a6:	a0 d9       	rcall	.-3264   	; 0x23e8 <writeReg>
    30a8:	df 91       	pop	r29
    30aa:	cf 91       	pop	r28
    30ac:	ff 90       	pop	r15
    30ae:	ef 90       	pop	r14
    30b0:	df 90       	pop	r13
    30b2:	cf 90       	pop	r12
    30b4:	08 95       	ret

000030b6 <vl53l0x_readRangeContinuous>:
    30b6:	0f 93       	push	r16
    30b8:	1f 93       	push	r17
    30ba:	cf 93       	push	r28
    30bc:	df 93       	push	r29
    30be:	ec 01       	movw	r28, r24
    30c0:	63 e1       	ldi	r22, 0x13	; 19
    30c2:	e6 d9       	rcall	.-3124   	; 0x2490 <readReg>
    30c4:	87 70       	andi	r24, 0x07	; 7
    30c6:	49 f0       	breq	.+18     	; 0x30da <vl53l0x_readRangeContinuous+0x24>
    30c8:	6e e1       	ldi	r22, 0x1E	; 30
    30ca:	ce 01       	movw	r24, r28
    30cc:	fc d9       	rcall	.-3080   	; 0x24c6 <readReg16Bit>
    30ce:	8c 01       	movw	r16, r24
    30d0:	41 e0       	ldi	r20, 0x01	; 1
    30d2:	6b e0       	ldi	r22, 0x0B	; 11
    30d4:	ce 01       	movw	r24, r28
    30d6:	88 d9       	rcall	.-3312   	; 0x23e8 <writeReg>
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <vl53l0x_readRangeContinuous+0x28>
    30da:	0f ef       	ldi	r16, 0xFF	; 255
    30dc:	1f ef       	ldi	r17, 0xFF	; 255
    30de:	c8 01       	movw	r24, r16
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	1f 91       	pop	r17
    30e6:	0f 91       	pop	r16
    30e8:	08 95       	ret

000030ea <vl53l0x_incrementTimeoutCounter>:

void vl53l0x_incrementTimeoutCounter()
{
	u32_milliseconds++;
    30ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    30ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    30f2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
    30f6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
    30fa:	01 96       	adiw	r24, 0x01	; 1
    30fc:	a1 1d       	adc	r26, r1
    30fe:	b1 1d       	adc	r27, r1
    3100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
    3104:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
    3108:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
    310c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
    3110:	08 95       	ret

00003112 <__subsf3>:
    3112:	50 58       	subi	r21, 0x80	; 128

00003114 <__addsf3>:
    3114:	bb 27       	eor	r27, r27
    3116:	aa 27       	eor	r26, r26
    3118:	0e d0       	rcall	.+28     	; 0x3136 <__addsf3x>
    311a:	0d c1       	rjmp	.+538    	; 0x3336 <__fp_round>
    311c:	fe d0       	rcall	.+508    	; 0x331a <__fp_pscA>
    311e:	30 f0       	brcs	.+12     	; 0x312c <__addsf3+0x18>
    3120:	03 d1       	rcall	.+518    	; 0x3328 <__fp_pscB>
    3122:	20 f0       	brcs	.+8      	; 0x312c <__addsf3+0x18>
    3124:	31 f4       	brne	.+12     	; 0x3132 <__addsf3+0x1e>
    3126:	9f 3f       	cpi	r25, 0xFF	; 255
    3128:	11 f4       	brne	.+4      	; 0x312e <__addsf3+0x1a>
    312a:	1e f4       	brtc	.+6      	; 0x3132 <__addsf3+0x1e>
    312c:	f3 c0       	rjmp	.+486    	; 0x3314 <__fp_nan>
    312e:	0e f4       	brtc	.+2      	; 0x3132 <__addsf3+0x1e>
    3130:	e0 95       	com	r30
    3132:	e7 fb       	bst	r30, 7
    3134:	e9 c0       	rjmp	.+466    	; 0x3308 <__fp_inf>

00003136 <__addsf3x>:
    3136:	e9 2f       	mov	r30, r25
    3138:	0f d1       	rcall	.+542    	; 0x3358 <__fp_split3>
    313a:	80 f3       	brcs	.-32     	; 0x311c <__addsf3+0x8>
    313c:	ba 17       	cp	r27, r26
    313e:	62 07       	cpc	r22, r18
    3140:	73 07       	cpc	r23, r19
    3142:	84 07       	cpc	r24, r20
    3144:	95 07       	cpc	r25, r21
    3146:	18 f0       	brcs	.+6      	; 0x314e <__addsf3x+0x18>
    3148:	71 f4       	brne	.+28     	; 0x3166 <__addsf3x+0x30>
    314a:	9e f5       	brtc	.+102    	; 0x31b2 <__addsf3x+0x7c>
    314c:	27 c1       	rjmp	.+590    	; 0x339c <__fp_zero>
    314e:	0e f4       	brtc	.+2      	; 0x3152 <__addsf3x+0x1c>
    3150:	e0 95       	com	r30
    3152:	0b 2e       	mov	r0, r27
    3154:	ba 2f       	mov	r27, r26
    3156:	a0 2d       	mov	r26, r0
    3158:	0b 01       	movw	r0, r22
    315a:	b9 01       	movw	r22, r18
    315c:	90 01       	movw	r18, r0
    315e:	0c 01       	movw	r0, r24
    3160:	ca 01       	movw	r24, r20
    3162:	a0 01       	movw	r20, r0
    3164:	11 24       	eor	r1, r1
    3166:	ff 27       	eor	r31, r31
    3168:	59 1b       	sub	r21, r25
    316a:	99 f0       	breq	.+38     	; 0x3192 <__addsf3x+0x5c>
    316c:	59 3f       	cpi	r21, 0xF9	; 249
    316e:	50 f4       	brcc	.+20     	; 0x3184 <__addsf3x+0x4e>
    3170:	50 3e       	cpi	r21, 0xE0	; 224
    3172:	68 f1       	brcs	.+90     	; 0x31ce <__addsf3x+0x98>
    3174:	1a 16       	cp	r1, r26
    3176:	f0 40       	sbci	r31, 0x00	; 0
    3178:	a2 2f       	mov	r26, r18
    317a:	23 2f       	mov	r18, r19
    317c:	34 2f       	mov	r19, r20
    317e:	44 27       	eor	r20, r20
    3180:	58 5f       	subi	r21, 0xF8	; 248
    3182:	f3 cf       	rjmp	.-26     	; 0x316a <__addsf3x+0x34>
    3184:	46 95       	lsr	r20
    3186:	37 95       	ror	r19
    3188:	27 95       	ror	r18
    318a:	a7 95       	ror	r26
    318c:	f0 40       	sbci	r31, 0x00	; 0
    318e:	53 95       	inc	r21
    3190:	c9 f7       	brne	.-14     	; 0x3184 <__addsf3x+0x4e>
    3192:	7e f4       	brtc	.+30     	; 0x31b2 <__addsf3x+0x7c>
    3194:	1f 16       	cp	r1, r31
    3196:	ba 0b       	sbc	r27, r26
    3198:	62 0b       	sbc	r22, r18
    319a:	73 0b       	sbc	r23, r19
    319c:	84 0b       	sbc	r24, r20
    319e:	ba f0       	brmi	.+46     	; 0x31ce <__addsf3x+0x98>
    31a0:	91 50       	subi	r25, 0x01	; 1
    31a2:	a1 f0       	breq	.+40     	; 0x31cc <__addsf3x+0x96>
    31a4:	ff 0f       	add	r31, r31
    31a6:	bb 1f       	adc	r27, r27
    31a8:	66 1f       	adc	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	88 1f       	adc	r24, r24
    31ae:	c2 f7       	brpl	.-16     	; 0x31a0 <__addsf3x+0x6a>
    31b0:	0e c0       	rjmp	.+28     	; 0x31ce <__addsf3x+0x98>
    31b2:	ba 0f       	add	r27, r26
    31b4:	62 1f       	adc	r22, r18
    31b6:	73 1f       	adc	r23, r19
    31b8:	84 1f       	adc	r24, r20
    31ba:	48 f4       	brcc	.+18     	; 0x31ce <__addsf3x+0x98>
    31bc:	87 95       	ror	r24
    31be:	77 95       	ror	r23
    31c0:	67 95       	ror	r22
    31c2:	b7 95       	ror	r27
    31c4:	f7 95       	ror	r31
    31c6:	9e 3f       	cpi	r25, 0xFE	; 254
    31c8:	08 f0       	brcs	.+2      	; 0x31cc <__addsf3x+0x96>
    31ca:	b3 cf       	rjmp	.-154    	; 0x3132 <__addsf3+0x1e>
    31cc:	93 95       	inc	r25
    31ce:	88 0f       	add	r24, r24
    31d0:	08 f0       	brcs	.+2      	; 0x31d4 <__addsf3x+0x9e>
    31d2:	99 27       	eor	r25, r25
    31d4:	ee 0f       	add	r30, r30
    31d6:	97 95       	ror	r25
    31d8:	87 95       	ror	r24
    31da:	08 95       	ret

000031dc <__cmpsf2>:
    31dc:	71 d0       	rcall	.+226    	; 0x32c0 <__fp_cmp>
    31de:	08 f4       	brcc	.+2      	; 0x31e2 <__cmpsf2+0x6>
    31e0:	81 e0       	ldi	r24, 0x01	; 1
    31e2:	08 95       	ret

000031e4 <__fixsfsi>:
    31e4:	04 d0       	rcall	.+8      	; 0x31ee <__fixunssfsi>
    31e6:	68 94       	set
    31e8:	b1 11       	cpse	r27, r1
    31ea:	d9 c0       	rjmp	.+434    	; 0x339e <__fp_szero>
    31ec:	08 95       	ret

000031ee <__fixunssfsi>:
    31ee:	bc d0       	rcall	.+376    	; 0x3368 <__fp_splitA>
    31f0:	88 f0       	brcs	.+34     	; 0x3214 <__fixunssfsi+0x26>
    31f2:	9f 57       	subi	r25, 0x7F	; 127
    31f4:	90 f0       	brcs	.+36     	; 0x321a <__fixunssfsi+0x2c>
    31f6:	b9 2f       	mov	r27, r25
    31f8:	99 27       	eor	r25, r25
    31fa:	b7 51       	subi	r27, 0x17	; 23
    31fc:	a0 f0       	brcs	.+40     	; 0x3226 <__fixunssfsi+0x38>
    31fe:	d1 f0       	breq	.+52     	; 0x3234 <__fixunssfsi+0x46>
    3200:	66 0f       	add	r22, r22
    3202:	77 1f       	adc	r23, r23
    3204:	88 1f       	adc	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	1a f0       	brmi	.+6      	; 0x3210 <__fixunssfsi+0x22>
    320a:	ba 95       	dec	r27
    320c:	c9 f7       	brne	.-14     	; 0x3200 <__fixunssfsi+0x12>
    320e:	12 c0       	rjmp	.+36     	; 0x3234 <__fixunssfsi+0x46>
    3210:	b1 30       	cpi	r27, 0x01	; 1
    3212:	81 f0       	breq	.+32     	; 0x3234 <__fixunssfsi+0x46>
    3214:	c3 d0       	rcall	.+390    	; 0x339c <__fp_zero>
    3216:	b1 e0       	ldi	r27, 0x01	; 1
    3218:	08 95       	ret
    321a:	c0 c0       	rjmp	.+384    	; 0x339c <__fp_zero>
    321c:	67 2f       	mov	r22, r23
    321e:	78 2f       	mov	r23, r24
    3220:	88 27       	eor	r24, r24
    3222:	b8 5f       	subi	r27, 0xF8	; 248
    3224:	39 f0       	breq	.+14     	; 0x3234 <__fixunssfsi+0x46>
    3226:	b9 3f       	cpi	r27, 0xF9	; 249
    3228:	cc f3       	brlt	.-14     	; 0x321c <__fixunssfsi+0x2e>
    322a:	86 95       	lsr	r24
    322c:	77 95       	ror	r23
    322e:	67 95       	ror	r22
    3230:	b3 95       	inc	r27
    3232:	d9 f7       	brne	.-10     	; 0x322a <__fixunssfsi+0x3c>
    3234:	3e f4       	brtc	.+14     	; 0x3244 <__fixunssfsi+0x56>
    3236:	90 95       	com	r25
    3238:	80 95       	com	r24
    323a:	70 95       	com	r23
    323c:	61 95       	neg	r22
    323e:	7f 4f       	sbci	r23, 0xFF	; 255
    3240:	8f 4f       	sbci	r24, 0xFF	; 255
    3242:	9f 4f       	sbci	r25, 0xFF	; 255
    3244:	08 95       	ret

00003246 <__floatunsisf>:
    3246:	e8 94       	clt
    3248:	09 c0       	rjmp	.+18     	; 0x325c <__floatsisf+0x12>

0000324a <__floatsisf>:
    324a:	97 fb       	bst	r25, 7
    324c:	3e f4       	brtc	.+14     	; 0x325c <__floatsisf+0x12>
    324e:	90 95       	com	r25
    3250:	80 95       	com	r24
    3252:	70 95       	com	r23
    3254:	61 95       	neg	r22
    3256:	7f 4f       	sbci	r23, 0xFF	; 255
    3258:	8f 4f       	sbci	r24, 0xFF	; 255
    325a:	9f 4f       	sbci	r25, 0xFF	; 255
    325c:	99 23       	and	r25, r25
    325e:	a9 f0       	breq	.+42     	; 0x328a <__floatsisf+0x40>
    3260:	f9 2f       	mov	r31, r25
    3262:	96 e9       	ldi	r25, 0x96	; 150
    3264:	bb 27       	eor	r27, r27
    3266:	93 95       	inc	r25
    3268:	f6 95       	lsr	r31
    326a:	87 95       	ror	r24
    326c:	77 95       	ror	r23
    326e:	67 95       	ror	r22
    3270:	b7 95       	ror	r27
    3272:	f1 11       	cpse	r31, r1
    3274:	f8 cf       	rjmp	.-16     	; 0x3266 <__floatsisf+0x1c>
    3276:	fa f4       	brpl	.+62     	; 0x32b6 <__floatsisf+0x6c>
    3278:	bb 0f       	add	r27, r27
    327a:	11 f4       	brne	.+4      	; 0x3280 <__floatsisf+0x36>
    327c:	60 ff       	sbrs	r22, 0
    327e:	1b c0       	rjmp	.+54     	; 0x32b6 <__floatsisf+0x6c>
    3280:	6f 5f       	subi	r22, 0xFF	; 255
    3282:	7f 4f       	sbci	r23, 0xFF	; 255
    3284:	8f 4f       	sbci	r24, 0xFF	; 255
    3286:	9f 4f       	sbci	r25, 0xFF	; 255
    3288:	16 c0       	rjmp	.+44     	; 0x32b6 <__floatsisf+0x6c>
    328a:	88 23       	and	r24, r24
    328c:	11 f0       	breq	.+4      	; 0x3292 <__floatsisf+0x48>
    328e:	96 e9       	ldi	r25, 0x96	; 150
    3290:	11 c0       	rjmp	.+34     	; 0x32b4 <__floatsisf+0x6a>
    3292:	77 23       	and	r23, r23
    3294:	21 f0       	breq	.+8      	; 0x329e <__floatsisf+0x54>
    3296:	9e e8       	ldi	r25, 0x8E	; 142
    3298:	87 2f       	mov	r24, r23
    329a:	76 2f       	mov	r23, r22
    329c:	05 c0       	rjmp	.+10     	; 0x32a8 <__floatsisf+0x5e>
    329e:	66 23       	and	r22, r22
    32a0:	71 f0       	breq	.+28     	; 0x32be <__floatsisf+0x74>
    32a2:	96 e8       	ldi	r25, 0x86	; 134
    32a4:	86 2f       	mov	r24, r22
    32a6:	70 e0       	ldi	r23, 0x00	; 0
    32a8:	60 e0       	ldi	r22, 0x00	; 0
    32aa:	2a f0       	brmi	.+10     	; 0x32b6 <__floatsisf+0x6c>
    32ac:	9a 95       	dec	r25
    32ae:	66 0f       	add	r22, r22
    32b0:	77 1f       	adc	r23, r23
    32b2:	88 1f       	adc	r24, r24
    32b4:	da f7       	brpl	.-10     	; 0x32ac <__floatsisf+0x62>
    32b6:	88 0f       	add	r24, r24
    32b8:	96 95       	lsr	r25
    32ba:	87 95       	ror	r24
    32bc:	97 f9       	bld	r25, 7
    32be:	08 95       	ret

000032c0 <__fp_cmp>:
    32c0:	99 0f       	add	r25, r25
    32c2:	00 08       	sbc	r0, r0
    32c4:	55 0f       	add	r21, r21
    32c6:	aa 0b       	sbc	r26, r26
    32c8:	e0 e8       	ldi	r30, 0x80	; 128
    32ca:	fe ef       	ldi	r31, 0xFE	; 254
    32cc:	16 16       	cp	r1, r22
    32ce:	17 06       	cpc	r1, r23
    32d0:	e8 07       	cpc	r30, r24
    32d2:	f9 07       	cpc	r31, r25
    32d4:	c0 f0       	brcs	.+48     	; 0x3306 <__fp_cmp+0x46>
    32d6:	12 16       	cp	r1, r18
    32d8:	13 06       	cpc	r1, r19
    32da:	e4 07       	cpc	r30, r20
    32dc:	f5 07       	cpc	r31, r21
    32de:	98 f0       	brcs	.+38     	; 0x3306 <__fp_cmp+0x46>
    32e0:	62 1b       	sub	r22, r18
    32e2:	73 0b       	sbc	r23, r19
    32e4:	84 0b       	sbc	r24, r20
    32e6:	95 0b       	sbc	r25, r21
    32e8:	39 f4       	brne	.+14     	; 0x32f8 <__fp_cmp+0x38>
    32ea:	0a 26       	eor	r0, r26
    32ec:	61 f0       	breq	.+24     	; 0x3306 <__fp_cmp+0x46>
    32ee:	23 2b       	or	r18, r19
    32f0:	24 2b       	or	r18, r20
    32f2:	25 2b       	or	r18, r21
    32f4:	21 f4       	brne	.+8      	; 0x32fe <__fp_cmp+0x3e>
    32f6:	08 95       	ret
    32f8:	0a 26       	eor	r0, r26
    32fa:	09 f4       	brne	.+2      	; 0x32fe <__fp_cmp+0x3e>
    32fc:	a1 40       	sbci	r26, 0x01	; 1
    32fe:	a6 95       	lsr	r26
    3300:	8f ef       	ldi	r24, 0xFF	; 255
    3302:	81 1d       	adc	r24, r1
    3304:	81 1d       	adc	r24, r1
    3306:	08 95       	ret

00003308 <__fp_inf>:
    3308:	97 f9       	bld	r25, 7
    330a:	9f 67       	ori	r25, 0x7F	; 127
    330c:	80 e8       	ldi	r24, 0x80	; 128
    330e:	70 e0       	ldi	r23, 0x00	; 0
    3310:	60 e0       	ldi	r22, 0x00	; 0
    3312:	08 95       	ret

00003314 <__fp_nan>:
    3314:	9f ef       	ldi	r25, 0xFF	; 255
    3316:	80 ec       	ldi	r24, 0xC0	; 192
    3318:	08 95       	ret

0000331a <__fp_pscA>:
    331a:	00 24       	eor	r0, r0
    331c:	0a 94       	dec	r0
    331e:	16 16       	cp	r1, r22
    3320:	17 06       	cpc	r1, r23
    3322:	18 06       	cpc	r1, r24
    3324:	09 06       	cpc	r0, r25
    3326:	08 95       	ret

00003328 <__fp_pscB>:
    3328:	00 24       	eor	r0, r0
    332a:	0a 94       	dec	r0
    332c:	12 16       	cp	r1, r18
    332e:	13 06       	cpc	r1, r19
    3330:	14 06       	cpc	r1, r20
    3332:	05 06       	cpc	r0, r21
    3334:	08 95       	ret

00003336 <__fp_round>:
    3336:	09 2e       	mov	r0, r25
    3338:	03 94       	inc	r0
    333a:	00 0c       	add	r0, r0
    333c:	11 f4       	brne	.+4      	; 0x3342 <__fp_round+0xc>
    333e:	88 23       	and	r24, r24
    3340:	52 f0       	brmi	.+20     	; 0x3356 <__fp_round+0x20>
    3342:	bb 0f       	add	r27, r27
    3344:	40 f4       	brcc	.+16     	; 0x3356 <__fp_round+0x20>
    3346:	bf 2b       	or	r27, r31
    3348:	11 f4       	brne	.+4      	; 0x334e <__fp_round+0x18>
    334a:	60 ff       	sbrs	r22, 0
    334c:	04 c0       	rjmp	.+8      	; 0x3356 <__fp_round+0x20>
    334e:	6f 5f       	subi	r22, 0xFF	; 255
    3350:	7f 4f       	sbci	r23, 0xFF	; 255
    3352:	8f 4f       	sbci	r24, 0xFF	; 255
    3354:	9f 4f       	sbci	r25, 0xFF	; 255
    3356:	08 95       	ret

00003358 <__fp_split3>:
    3358:	57 fd       	sbrc	r21, 7
    335a:	90 58       	subi	r25, 0x80	; 128
    335c:	44 0f       	add	r20, r20
    335e:	55 1f       	adc	r21, r21
    3360:	59 f0       	breq	.+22     	; 0x3378 <__fp_splitA+0x10>
    3362:	5f 3f       	cpi	r21, 0xFF	; 255
    3364:	71 f0       	breq	.+28     	; 0x3382 <__fp_splitA+0x1a>
    3366:	47 95       	ror	r20

00003368 <__fp_splitA>:
    3368:	88 0f       	add	r24, r24
    336a:	97 fb       	bst	r25, 7
    336c:	99 1f       	adc	r25, r25
    336e:	61 f0       	breq	.+24     	; 0x3388 <__fp_splitA+0x20>
    3370:	9f 3f       	cpi	r25, 0xFF	; 255
    3372:	79 f0       	breq	.+30     	; 0x3392 <__fp_splitA+0x2a>
    3374:	87 95       	ror	r24
    3376:	08 95       	ret
    3378:	12 16       	cp	r1, r18
    337a:	13 06       	cpc	r1, r19
    337c:	14 06       	cpc	r1, r20
    337e:	55 1f       	adc	r21, r21
    3380:	f2 cf       	rjmp	.-28     	; 0x3366 <__fp_split3+0xe>
    3382:	46 95       	lsr	r20
    3384:	f1 df       	rcall	.-30     	; 0x3368 <__fp_splitA>
    3386:	08 c0       	rjmp	.+16     	; 0x3398 <__fp_splitA+0x30>
    3388:	16 16       	cp	r1, r22
    338a:	17 06       	cpc	r1, r23
    338c:	18 06       	cpc	r1, r24
    338e:	99 1f       	adc	r25, r25
    3390:	f1 cf       	rjmp	.-30     	; 0x3374 <__fp_splitA+0xc>
    3392:	86 95       	lsr	r24
    3394:	71 05       	cpc	r23, r1
    3396:	61 05       	cpc	r22, r1
    3398:	08 94       	sec
    339a:	08 95       	ret

0000339c <__fp_zero>:
    339c:	e8 94       	clt

0000339e <__fp_szero>:
    339e:	bb 27       	eor	r27, r27
    33a0:	66 27       	eor	r22, r22
    33a2:	77 27       	eor	r23, r23
    33a4:	cb 01       	movw	r24, r22
    33a6:	97 f9       	bld	r25, 7
    33a8:	08 95       	ret

000033aa <__gesf2>:
    33aa:	8a df       	rcall	.-236    	; 0x32c0 <__fp_cmp>
    33ac:	08 f4       	brcc	.+2      	; 0x33b0 <__gesf2+0x6>
    33ae:	8f ef       	ldi	r24, 0xFF	; 255
    33b0:	08 95       	ret

000033b2 <__mulsf3>:
    33b2:	0b d0       	rcall	.+22     	; 0x33ca <__mulsf3x>
    33b4:	c0 cf       	rjmp	.-128    	; 0x3336 <__fp_round>
    33b6:	b1 df       	rcall	.-158    	; 0x331a <__fp_pscA>
    33b8:	28 f0       	brcs	.+10     	; 0x33c4 <__mulsf3+0x12>
    33ba:	b6 df       	rcall	.-148    	; 0x3328 <__fp_pscB>
    33bc:	18 f0       	brcs	.+6      	; 0x33c4 <__mulsf3+0x12>
    33be:	95 23       	and	r25, r21
    33c0:	09 f0       	breq	.+2      	; 0x33c4 <__mulsf3+0x12>
    33c2:	a2 cf       	rjmp	.-188    	; 0x3308 <__fp_inf>
    33c4:	a7 cf       	rjmp	.-178    	; 0x3314 <__fp_nan>
    33c6:	11 24       	eor	r1, r1
    33c8:	ea cf       	rjmp	.-44     	; 0x339e <__fp_szero>

000033ca <__mulsf3x>:
    33ca:	c6 df       	rcall	.-116    	; 0x3358 <__fp_split3>
    33cc:	a0 f3       	brcs	.-24     	; 0x33b6 <__mulsf3+0x4>

000033ce <__mulsf3_pse>:
    33ce:	95 9f       	mul	r25, r21
    33d0:	d1 f3       	breq	.-12     	; 0x33c6 <__mulsf3+0x14>
    33d2:	95 0f       	add	r25, r21
    33d4:	50 e0       	ldi	r21, 0x00	; 0
    33d6:	55 1f       	adc	r21, r21
    33d8:	62 9f       	mul	r22, r18
    33da:	f0 01       	movw	r30, r0
    33dc:	72 9f       	mul	r23, r18
    33de:	bb 27       	eor	r27, r27
    33e0:	f0 0d       	add	r31, r0
    33e2:	b1 1d       	adc	r27, r1
    33e4:	63 9f       	mul	r22, r19
    33e6:	aa 27       	eor	r26, r26
    33e8:	f0 0d       	add	r31, r0
    33ea:	b1 1d       	adc	r27, r1
    33ec:	aa 1f       	adc	r26, r26
    33ee:	64 9f       	mul	r22, r20
    33f0:	66 27       	eor	r22, r22
    33f2:	b0 0d       	add	r27, r0
    33f4:	a1 1d       	adc	r26, r1
    33f6:	66 1f       	adc	r22, r22
    33f8:	82 9f       	mul	r24, r18
    33fa:	22 27       	eor	r18, r18
    33fc:	b0 0d       	add	r27, r0
    33fe:	a1 1d       	adc	r26, r1
    3400:	62 1f       	adc	r22, r18
    3402:	73 9f       	mul	r23, r19
    3404:	b0 0d       	add	r27, r0
    3406:	a1 1d       	adc	r26, r1
    3408:	62 1f       	adc	r22, r18
    340a:	83 9f       	mul	r24, r19
    340c:	a0 0d       	add	r26, r0
    340e:	61 1d       	adc	r22, r1
    3410:	22 1f       	adc	r18, r18
    3412:	74 9f       	mul	r23, r20
    3414:	33 27       	eor	r19, r19
    3416:	a0 0d       	add	r26, r0
    3418:	61 1d       	adc	r22, r1
    341a:	23 1f       	adc	r18, r19
    341c:	84 9f       	mul	r24, r20
    341e:	60 0d       	add	r22, r0
    3420:	21 1d       	adc	r18, r1
    3422:	82 2f       	mov	r24, r18
    3424:	76 2f       	mov	r23, r22
    3426:	6a 2f       	mov	r22, r26
    3428:	11 24       	eor	r1, r1
    342a:	9f 57       	subi	r25, 0x7F	; 127
    342c:	50 40       	sbci	r21, 0x00	; 0
    342e:	8a f0       	brmi	.+34     	; 0x3452 <__mulsf3_pse+0x84>
    3430:	e1 f0       	breq	.+56     	; 0x346a <__mulsf3_pse+0x9c>
    3432:	88 23       	and	r24, r24
    3434:	4a f0       	brmi	.+18     	; 0x3448 <__mulsf3_pse+0x7a>
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	bb 1f       	adc	r27, r27
    343c:	66 1f       	adc	r22, r22
    343e:	77 1f       	adc	r23, r23
    3440:	88 1f       	adc	r24, r24
    3442:	91 50       	subi	r25, 0x01	; 1
    3444:	50 40       	sbci	r21, 0x00	; 0
    3446:	a9 f7       	brne	.-22     	; 0x3432 <__mulsf3_pse+0x64>
    3448:	9e 3f       	cpi	r25, 0xFE	; 254
    344a:	51 05       	cpc	r21, r1
    344c:	70 f0       	brcs	.+28     	; 0x346a <__mulsf3_pse+0x9c>
    344e:	5c cf       	rjmp	.-328    	; 0x3308 <__fp_inf>
    3450:	a6 cf       	rjmp	.-180    	; 0x339e <__fp_szero>
    3452:	5f 3f       	cpi	r21, 0xFF	; 255
    3454:	ec f3       	brlt	.-6      	; 0x3450 <__mulsf3_pse+0x82>
    3456:	98 3e       	cpi	r25, 0xE8	; 232
    3458:	dc f3       	brlt	.-10     	; 0x3450 <__mulsf3_pse+0x82>
    345a:	86 95       	lsr	r24
    345c:	77 95       	ror	r23
    345e:	67 95       	ror	r22
    3460:	b7 95       	ror	r27
    3462:	f7 95       	ror	r31
    3464:	e7 95       	ror	r30
    3466:	9f 5f       	subi	r25, 0xFF	; 255
    3468:	c1 f7       	brne	.-16     	; 0x345a <__mulsf3_pse+0x8c>
    346a:	fe 2b       	or	r31, r30
    346c:	88 0f       	add	r24, r24
    346e:	91 1d       	adc	r25, r1
    3470:	96 95       	lsr	r25
    3472:	87 95       	ror	r24
    3474:	97 f9       	bld	r25, 7
    3476:	08 95       	ret

00003478 <__udivmodsi4>:
    3478:	a1 e2       	ldi	r26, 0x21	; 33
    347a:	1a 2e       	mov	r1, r26
    347c:	aa 1b       	sub	r26, r26
    347e:	bb 1b       	sub	r27, r27
    3480:	fd 01       	movw	r30, r26
    3482:	0d c0       	rjmp	.+26     	; 0x349e <__udivmodsi4_ep>

00003484 <__udivmodsi4_loop>:
    3484:	aa 1f       	adc	r26, r26
    3486:	bb 1f       	adc	r27, r27
    3488:	ee 1f       	adc	r30, r30
    348a:	ff 1f       	adc	r31, r31
    348c:	a2 17       	cp	r26, r18
    348e:	b3 07       	cpc	r27, r19
    3490:	e4 07       	cpc	r30, r20
    3492:	f5 07       	cpc	r31, r21
    3494:	20 f0       	brcs	.+8      	; 0x349e <__udivmodsi4_ep>
    3496:	a2 1b       	sub	r26, r18
    3498:	b3 0b       	sbc	r27, r19
    349a:	e4 0b       	sbc	r30, r20
    349c:	f5 0b       	sbc	r31, r21

0000349e <__udivmodsi4_ep>:
    349e:	66 1f       	adc	r22, r22
    34a0:	77 1f       	adc	r23, r23
    34a2:	88 1f       	adc	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	1a 94       	dec	r1
    34a8:	69 f7       	brne	.-38     	; 0x3484 <__udivmodsi4_loop>
    34aa:	60 95       	com	r22
    34ac:	70 95       	com	r23
    34ae:	80 95       	com	r24
    34b0:	90 95       	com	r25
    34b2:	9b 01       	movw	r18, r22
    34b4:	ac 01       	movw	r20, r24
    34b6:	bd 01       	movw	r22, r26
    34b8:	cf 01       	movw	r24, r30
    34ba:	08 95       	ret

000034bc <__tablejump2__>:
    34bc:	ee 0f       	add	r30, r30
    34be:	ff 1f       	adc	r31, r31
    34c0:	00 24       	eor	r0, r0
    34c2:	00 1c       	adc	r0, r0
    34c4:	0b be       	out	0x3b, r0	; 59
    34c6:	07 90       	elpm	r0, Z+
    34c8:	f6 91       	elpm	r31, Z
    34ca:	e0 2d       	mov	r30, r0
    34cc:	09 94       	ijmp

000034ce <__umulhisi3>:
    34ce:	a2 9f       	mul	r26, r18
    34d0:	b0 01       	movw	r22, r0
    34d2:	b3 9f       	mul	r27, r19
    34d4:	c0 01       	movw	r24, r0
    34d6:	a3 9f       	mul	r26, r19
    34d8:	70 0d       	add	r23, r0
    34da:	81 1d       	adc	r24, r1
    34dc:	11 24       	eor	r1, r1
    34de:	91 1d       	adc	r25, r1
    34e0:	b2 9f       	mul	r27, r18
    34e2:	70 0d       	add	r23, r0
    34e4:	81 1d       	adc	r24, r1
    34e6:	11 24       	eor	r1, r1
    34e8:	91 1d       	adc	r25, r1
    34ea:	08 95       	ret

000034ec <__muluhisi3>:
    34ec:	f0 df       	rcall	.-32     	; 0x34ce <__umulhisi3>
    34ee:	a5 9f       	mul	r26, r21
    34f0:	90 0d       	add	r25, r0
    34f2:	b4 9f       	mul	r27, r20
    34f4:	90 0d       	add	r25, r0
    34f6:	a4 9f       	mul	r26, r20
    34f8:	80 0d       	add	r24, r0
    34fa:	91 1d       	adc	r25, r1
    34fc:	11 24       	eor	r1, r1
    34fe:	08 95       	ret

00003500 <_exit>:
    3500:	f8 94       	cli

00003502 <__stop_program>:
    3502:	ff cf       	rjmp	.-2      	; 0x3502 <__stop_program>
