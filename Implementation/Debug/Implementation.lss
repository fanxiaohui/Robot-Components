
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001e62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001dee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800100  00800100  00001e62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d0  00000000  00000000  00001ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052dc  00000000  00000000  000023a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019bc  00000000  00000000  00007680  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000023a9  00000000  00000000  0000903c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010b0  00000000  00000000  0000b3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001879  00000000  00000000  0000c498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fa1  00000000  00000000  0000dd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000410  00000000  00000000  00010cb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	89 c1       	rjmp	.+786    	; 0x318 <__vector_1>
       6:	00 00       	nop
       8:	91 c1       	rjmp	.+802    	; 0x32c <__vector_2>
       a:	00 00       	nop
       c:	99 c1       	rjmp	.+818    	; 0x340 <__vector_3>
       e:	00 00       	nop
      10:	3a c1       	rjmp	.+628    	; 0x286 <__vector_4>
      12:	00 00       	nop
      14:	42 c1       	rjmp	.+644    	; 0x29a <__vector_5>
      16:	00 00       	nop
      18:	4a c1       	rjmp	.+660    	; 0x2ae <__vector_6>
      1a:	00 00       	nop
      1c:	73 c1       	rjmp	.+742    	; 0x304 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 d7 0b 	jmp	0x17ae	; 0x17ae <__vector_8>
      24:	5b c6       	rjmp	.+3254   	; 0xcdc <__vector_9>
      26:	00 00       	nop
      28:	95 c6       	rjmp	.+3370   	; 0xd54 <__vector_10>
      2a:	00 00       	nop
      2c:	2c c6       	rjmp	.+3160   	; 0xc86 <__vector_11>
      2e:	00 00       	nop
      30:	cd c5       	rjmp	.+2970   	; 0xbcc <__vector_12>
      32:	00 00       	nop
      34:	40 c5       	rjmp	.+2688   	; 0xab6 <__vector_13>
      36:	00 00       	nop
      38:	9e c5       	rjmp	.+2876   	; 0xb76 <__vector_14>
      3a:	00 00       	nop
      3c:	11 c5       	rjmp	.+2594   	; 0xa60 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	4a c3       	rjmp	.+1684   	; 0x6e2 <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 98 09 	jmp	0x1330	; 0x1330 <__vector_20>
      54:	0c 94 f2 09 	jmp	0x13e4	; 0x13e4 <__vector_21>
      58:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_22>
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b1 07       	cpc	r27, r17
      8e:	ba 07       	cpc	r27, r26
      90:	c3 07       	cpc	r28, r19
      92:	cc 07       	cpc	r28, r28
      94:	d5 07       	cpc	r29, r21
      96:	de 07       	cpc	r29, r30
      98:	e7 07       	cpc	r30, r23

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	ee ee       	ldi	r30, 0xEE	; 238
      ae:	fd e1       	ldi	r31, 0x1D	; 29
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a8 3d       	cpi	r26, 0xD8	; 216
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	62 d0       	rcall	.+196    	; 0x196 <main>
      d2:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <Task_SetMotorSpeed>:
	right_EncoderCounter = encoder_getRight();
	uart_transmit(s_debugUart, right_EncoderCounter);
}

extern void Task_SetMotorSpeed()
{
      d8:	08 95       	ret

000000da <Task_ReadEncoders>:
	uart_init(s_debugUart);
	uart_start(s_debugUart);
}

extern void Task_ReadEncoders ()
{
      da:	ef 92       	push	r14
      dc:	ff 92       	push	r15
      de:	0f 93       	push	r16
      e0:	1f 93       	push	r17
	left_EncoderCounter = encoder_getLeft ();
      e2:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <encoder_getLeft>
	right_EncoderCounter = encoder_getRight();
      e6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <encoder_getRight>
	uart_transmit(s_debugUart, right_EncoderCounter);
      ea:	7b 01       	movw	r14, r22
      ec:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <s_debugUart>
      f0:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <s_debugUart+0x1>
      f4:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <s_debugUart+0x2>
      f8:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <s_debugUart+0x3>
      fc:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <s_debugUart+0x4>
     100:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <s_debugUart+0x5>
     104:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <s_debugUart+0x6>
     108:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <s_debugUart+0x7>
     10c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <s_debugUart+0x8>
     110:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <s_debugUart+0x9>
     114:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uart_transmit>
}
     118:	1f 91       	pop	r17
     11a:	0f 91       	pop	r16
     11c:	ff 90       	pop	r15
     11e:	ef 90       	pop	r14
     120:	08 95       	ret

00000122 <debug_init>:
static u32 right_EncoderCounter;
timer_struct_t s_scheduler_timer;
uart_struct_t s_debugUart;

void debug_init()
{
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
	s_debugUart.baudRate = 9600;
     126:	e3 e3       	ldi	r30, 0x33	; 51
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	80 e8       	ldi	r24, 0x80	; 128
     12c:	18 2f       	mov	r17, r24
     12e:	81 83       	std	Z+1, r24	; 0x01
     130:	85 e2       	ldi	r24, 0x25	; 37
     132:	82 83       	std	Z+2, r24	; 0x02
     134:	13 82       	std	Z+3, r1	; 0x03
     136:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	78 2f       	mov	r23, r24
     13c:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
     13e:	92 e0       	ldi	r25, 0x02	; 2
     140:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.peripheral = UART0;
     142:	10 82       	st	Z, r1
	s_debugUart.stopBits = _1BIT;
     144:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useTx = TRUE;
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	68 2f       	mov	r22, r24
     14a:	86 83       	std	Z+6, r24	; 0x06
	s_debugUart.useRx = FALSE;
     14c:	15 82       	std	Z+5, r1	; 0x05
	uart_init(s_debugUart);
     14e:	00 e0       	ldi	r16, 0x00	; 0
     150:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <s_debugUart+0x2>
     154:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <s_debugUart+0x3>
     158:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <s_debugUart+0x4>
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	0e 94 76 0a 	call	0x14ec	; 0x14ec <uart_init>
	uart_start(s_debugUart);
     164:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <s_debugUart>
     168:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <s_debugUart+0x1>
     16c:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <s_debugUart+0x2>
     170:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <s_debugUart+0x3>
     174:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <s_debugUart+0x4>
     178:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <s_debugUart+0x5>
     17c:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <s_debugUart+0x6>
     180:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <s_debugUart+0x7>
     184:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <s_debugUart+0x8>
     188:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <s_debugUart+0x9>
     18c:	0e 94 48 0b 	call	0x1690	; 0x1690 <uart_start>
}
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <main>:
}

int main(void)
{
	
	s_scheduler_timer.peripheral = TIMER2;
     196:	ed e3       	ldi	r30, 0x3D	; 61
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	82 e0       	ldi	r24, 0x02	; 2
     19c:	80 83       	st	Z, r24
	s_scheduler_timer.frequency = 1000;
     19e:	88 ee       	ldi	r24, 0xE8	; 232
     1a0:	93 e0       	ldi	r25, 0x03	; 3
     1a2:	a0 e0       	ldi	r26, 0x00	; 0
     1a4:	b0 e0       	ldi	r27, 0x00	; 0
     1a6:	81 83       	std	Z+1, r24	; 0x01
     1a8:	92 83       	std	Z+2, r25	; 0x02
     1aa:	a3 83       	std	Z+3, r26	; 0x03
	left_EncoderCounter = 0 ;
	right_EncoderCounter =0 ;
	device_disableJTAG();
     1ac:	b4 83       	std	Z+4, r27	; 0x04
	encoder_init();
     1ae:	47 d0       	rcall	.+142    	; 0x23e <device_disableJTAG>
     1b0:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <encoder_init>
	encoder_start();
	debug_init();
     1b4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <encoder_start>
	motor_init();		
     1b8:	b4 df       	rcall	.-152    	; 0x122 <debug_init>
     1ba:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <motor_init>
	scheduler_inti(s_scheduler_timer,OVERFLOW);
     1be:	20 e0       	ldi	r18, 0x00	; 0
     1c0:	40 91 3d 01 	lds	r20, 0x013D	; 0x80013d <s_scheduler_timer>
     1c4:	50 91 3e 01 	lds	r21, 0x013E	; 0x80013e <s_scheduler_timer+0x1>
     1c8:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <s_scheduler_timer+0x2>
     1cc:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <s_scheduler_timer+0x3>
     1d0:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <s_scheduler_timer+0x4>
     1d4:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <scheduler_inti>
	create_task(1,Task_SetMotorSpeed);
     1d8:	6c e6       	ldi	r22, 0x6C	; 108
     1da:	70 e0       	ldi	r23, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <create_task>
	create_task(0,Task_ReadEncoders);
     1e2:	6d e6       	ldi	r22, 0x6D	; 109
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <create_task>
	activate_task(0,10);
     1ec:	6a e0       	ldi	r22, 0x0A	; 10
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <activate_task>
	activate_task(1,15);
     1f4:	6f e0       	ldi	r22, 0x0F	; 15
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <activate_task>
	motor_start();
     1fc:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <motor_start>
	sei();
	
	uart_transmit(s_debugUart, 'a');
     200:	78 94       	sei
     202:	0f 2e       	mov	r0, r31
     204:	f1 e6       	ldi	r31, 0x61	; 97
     206:	ef 2e       	mov	r14, r31
     208:	f1 2c       	mov	r15, r1
     20a:	f0 2d       	mov	r31, r0
     20c:	00 91 33 01 	lds	r16, 0x0133	; 0x800133 <s_debugUart>
     210:	10 91 34 01 	lds	r17, 0x0134	; 0x800134 <s_debugUart+0x1>
     214:	20 91 35 01 	lds	r18, 0x0135	; 0x800135 <s_debugUart+0x2>
     218:	30 91 36 01 	lds	r19, 0x0136	; 0x800136 <s_debugUart+0x3>
     21c:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <s_debugUart+0x4>
     220:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <s_debugUart+0x5>
     224:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <s_debugUart+0x6>
     228:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <s_debugUart+0x7>
     22c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <s_debugUart+0x8>
     230:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <s_debugUart+0x9>
     234:	0e 94 6e 0b 	call	0x16dc	; 0x16dc <uart_transmit>
    while (1)
    {
		scheduler();
     238:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <scheduler>
     23c:	fd cf       	rjmp	.-6      	; 0x238 <main+0xa2>

0000023e <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     23e:	80 e8       	ldi	r24, 0x80	; 128
     240:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     242:	85 bf       	out	0x35, r24	; 53
     244:	08 95       	ret

00000246 <gpio_changeDirection>:
		#ifdef USING_EXTINT
			}
		#endif
			break;
	}
}
     246:	61 30       	cpi	r22, 0x01	; 1
     248:	61 f0       	breq	.+24     	; 0x262 <gpio_changeDirection+0x1c>
     24a:	28 f0       	brcs	.+10     	; 0x256 <gpio_changeDirection+0x10>
     24c:	62 30       	cpi	r22, 0x02	; 2
     24e:	79 f0       	breq	.+30     	; 0x26e <gpio_changeDirection+0x28>
     250:	63 30       	cpi	r22, 0x03	; 3
     252:	99 f0       	breq	.+38     	; 0x27a <gpio_changeDirection+0x34>
     254:	08 95       	ret
     256:	48 2f       	mov	r20, r24
     258:	67 2f       	mov	r22, r23
     25a:	81 e2       	ldi	r24, 0x21	; 33
     25c:	90 e0       	ldi	r25, 0x00	; 0
     25e:	f8 c0       	rjmp	.+496    	; 0x450 <updateBit>
     260:	08 95       	ret
     262:	48 2f       	mov	r20, r24
     264:	67 2f       	mov	r22, r23
     266:	84 e2       	ldi	r24, 0x24	; 36
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	f2 c0       	rjmp	.+484    	; 0x450 <updateBit>
     26c:	08 95       	ret
     26e:	48 2f       	mov	r20, r24
     270:	67 2f       	mov	r22, r23
     272:	87 e2       	ldi	r24, 0x27	; 39
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	ec c0       	rjmp	.+472    	; 0x450 <updateBit>
     278:	08 95       	ret
     27a:	48 2f       	mov	r20, r24
     27c:	67 2f       	mov	r22, r23
     27e:	8a e2       	ldi	r24, 0x2A	; 42
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	e6 c0       	rjmp	.+460    	; 0x450 <updateBit>
     284:	08 95       	ret

00000286 <__vector_4>:
     286:	1f 92       	push	r1
     288:	0f 92       	push	r0
     28a:	0f b6       	in	r0, 0x3f	; 63
     28c:	0f 92       	push	r0
     28e:	11 24       	eor	r1, r1
     290:	0f 90       	pop	r0
     292:	0f be       	out	0x3f, r0	; 63
     294:	0f 90       	pop	r0
     296:	1f 90       	pop	r1
     298:	18 95       	reti

0000029a <__vector_5>:
     29a:	1f 92       	push	r1
     29c:	0f 92       	push	r0
     29e:	0f b6       	in	r0, 0x3f	; 63
     2a0:	0f 92       	push	r0
     2a2:	11 24       	eor	r1, r1
     2a4:	0f 90       	pop	r0
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	0f 90       	pop	r0
     2aa:	1f 90       	pop	r1
     2ac:	18 95       	reti

000002ae <__vector_6>:
     2ae:	1f 92       	push	r1
     2b0:	0f 92       	push	r0
     2b2:	0f b6       	in	r0, 0x3f	; 63
     2b4:	0f 92       	push	r0
     2b6:	11 24       	eor	r1, r1
     2b8:	0b b6       	in	r0, 0x3b	; 59
     2ba:	0f 92       	push	r0
     2bc:	2f 93       	push	r18
     2be:	3f 93       	push	r19
     2c0:	4f 93       	push	r20
     2c2:	5f 93       	push	r21
     2c4:	6f 93       	push	r22
     2c6:	7f 93       	push	r23
     2c8:	8f 93       	push	r24
     2ca:	9f 93       	push	r25
     2cc:	af 93       	push	r26
     2ce:	bf 93       	push	r27
     2d0:	ef 93       	push	r30
     2d2:	ff 93       	push	r31
     2d4:	e0 91 04 18 	lds	r30, 0x1804	; 0x801804 <__bss_end+0x162c>
     2d8:	f0 91 05 18 	lds	r31, 0x1805	; 0x801805 <__bss_end+0x162d>
     2dc:	09 95       	icall
     2de:	ff 91       	pop	r31
     2e0:	ef 91       	pop	r30
     2e2:	bf 91       	pop	r27
     2e4:	af 91       	pop	r26
     2e6:	9f 91       	pop	r25
     2e8:	8f 91       	pop	r24
     2ea:	7f 91       	pop	r23
     2ec:	6f 91       	pop	r22
     2ee:	5f 91       	pop	r21
     2f0:	4f 91       	pop	r20
     2f2:	3f 91       	pop	r19
     2f4:	2f 91       	pop	r18
     2f6:	0f 90       	pop	r0
     2f8:	0b be       	out	0x3b, r0	; 59
     2fa:	0f 90       	pop	r0
     2fc:	0f be       	out	0x3f, r0	; 63
     2fe:	0f 90       	pop	r0
     300:	1f 90       	pop	r1
     302:	18 95       	reti

00000304 <__vector_7>:
     304:	1f 92       	push	r1
     306:	0f 92       	push	r0
     308:	0f b6       	in	r0, 0x3f	; 63
     30a:	0f 92       	push	r0
     30c:	11 24       	eor	r1, r1
     30e:	0f 90       	pop	r0
     310:	0f be       	out	0x3f, r0	; 63
     312:	0f 90       	pop	r0
     314:	1f 90       	pop	r1
     316:	18 95       	reti

00000318 <__vector_1>:
     318:	1f 92       	push	r1
     31a:	0f 92       	push	r0
     31c:	0f b6       	in	r0, 0x3f	; 63
     31e:	0f 92       	push	r0
     320:	11 24       	eor	r1, r1
     322:	0f 90       	pop	r0
     324:	0f be       	out	0x3f, r0	; 63
     326:	0f 90       	pop	r0
     328:	1f 90       	pop	r1
     32a:	18 95       	reti

0000032c <__vector_2>:
     32c:	1f 92       	push	r1
     32e:	0f 92       	push	r0
     330:	0f b6       	in	r0, 0x3f	; 63
     332:	0f 92       	push	r0
     334:	11 24       	eor	r1, r1
     336:	0f 90       	pop	r0
     338:	0f be       	out	0x3f, r0	; 63
     33a:	0f 90       	pop	r0
     33c:	1f 90       	pop	r1
     33e:	18 95       	reti

00000340 <__vector_3>:
     340:	1f 92       	push	r1
     342:	0f 92       	push	r0
     344:	0f b6       	in	r0, 0x3f	; 63
     346:	0f 92       	push	r0
     348:	11 24       	eor	r1, r1
     34a:	0f 90       	pop	r0
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	0f 90       	pop	r0
     350:	1f 90       	pop	r1
     352:	18 95       	reti

00000354 <gpio_init>:
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	c6 2f       	mov	r28, r22
     35e:	17 2f       	mov	r17, r23
     360:	d8 2f       	mov	r29, r24
     362:	09 2f       	mov	r16, r25
     364:	70 df       	rcall	.-288    	; 0x246 <gpio_changeDirection>
     366:	d1 11       	cpse	r29, r1
     368:	1f c0       	rjmp	.+62     	; 0x3a8 <gpio_init+0x54>
     36a:	c1 30       	cpi	r28, 0x01	; 1
     36c:	61 f0       	breq	.+24     	; 0x386 <gpio_init+0x32>
     36e:	28 f0       	brcs	.+10     	; 0x37a <gpio_init+0x26>
     370:	c2 30       	cpi	r28, 0x02	; 2
     372:	79 f0       	breq	.+30     	; 0x392 <gpio_init+0x3e>
     374:	c3 30       	cpi	r28, 0x03	; 3
     376:	99 f0       	breq	.+38     	; 0x39e <gpio_init+0x4a>
     378:	17 c0       	rjmp	.+46     	; 0x3a8 <gpio_init+0x54>
     37a:	40 2f       	mov	r20, r16
     37c:	61 2f       	mov	r22, r17
     37e:	82 e2       	ldi	r24, 0x22	; 34
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	66 d0       	rcall	.+204    	; 0x450 <updateBit>
     384:	11 c0       	rjmp	.+34     	; 0x3a8 <gpio_init+0x54>
     386:	40 2f       	mov	r20, r16
     388:	61 2f       	mov	r22, r17
     38a:	85 e2       	ldi	r24, 0x25	; 37
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	60 d0       	rcall	.+192    	; 0x450 <updateBit>
     390:	0b c0       	rjmp	.+22     	; 0x3a8 <gpio_init+0x54>
     392:	40 2f       	mov	r20, r16
     394:	61 2f       	mov	r22, r17
     396:	88 e2       	ldi	r24, 0x28	; 40
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	5a d0       	rcall	.+180    	; 0x450 <updateBit>
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <gpio_init+0x54>
     39e:	40 2f       	mov	r20, r16
     3a0:	61 2f       	mov	r22, r17
     3a2:	8b e2       	ldi	r24, 0x2B	; 43
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	54 d0       	rcall	.+168    	; 0x450 <updateBit>
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <gpio_out_set>:
     3b2:	61 30       	cpi	r22, 0x01	; 1
     3b4:	59 f0       	breq	.+22     	; 0x3cc <gpio_out_set+0x1a>
     3b6:	28 f0       	brcs	.+10     	; 0x3c2 <gpio_out_set+0x10>
     3b8:	62 30       	cpi	r22, 0x02	; 2
     3ba:	69 f0       	breq	.+26     	; 0x3d6 <gpio_out_set+0x24>
     3bc:	63 30       	cpi	r22, 0x03	; 3
     3be:	81 f0       	breq	.+32     	; 0x3e0 <gpio_out_set+0x2e>
     3c0:	08 95       	ret
     3c2:	67 2f       	mov	r22, r23
     3c4:	82 e2       	ldi	r24, 0x22	; 34
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	5b c0       	rjmp	.+182    	; 0x480 <setBit>
     3ca:	08 95       	ret
     3cc:	67 2f       	mov	r22, r23
     3ce:	85 e2       	ldi	r24, 0x25	; 37
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	56 c0       	rjmp	.+172    	; 0x480 <setBit>
     3d4:	08 95       	ret
     3d6:	67 2f       	mov	r22, r23
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	51 c0       	rjmp	.+162    	; 0x480 <setBit>
     3de:	08 95       	ret
     3e0:	67 2f       	mov	r22, r23
     3e2:	8b e2       	ldi	r24, 0x2B	; 43
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	4c c0       	rjmp	.+152    	; 0x480 <setBit>
     3e8:	08 95       	ret

000003ea <gpio_out_reset>:
     3ea:	61 30       	cpi	r22, 0x01	; 1
     3ec:	59 f0       	breq	.+22     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     3ee:	28 f0       	brcs	.+10     	; 0x3fa <gpio_out_reset+0x10>
     3f0:	62 30       	cpi	r22, 0x02	; 2
     3f2:	69 f0       	breq	.+26     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3f4:	63 30       	cpi	r22, 0x03	; 3
     3f6:	81 f0       	breq	.+32     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f8:	08 95       	ret
     3fa:	67 2f       	mov	r22, r23
     3fc:	82 e2       	ldi	r24, 0x22	; 34
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	4b c0       	rjmp	.+150    	; 0x498 <clearBit>
     402:	08 95       	ret
     404:	67 2f       	mov	r22, r23
     406:	85 e2       	ldi	r24, 0x25	; 37
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	46 c0       	rjmp	.+140    	; 0x498 <clearBit>
     40c:	08 95       	ret
     40e:	67 2f       	mov	r22, r23
     410:	88 e2       	ldi	r24, 0x28	; 40
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	41 c0       	rjmp	.+130    	; 0x498 <clearBit>
     416:	08 95       	ret
     418:	67 2f       	mov	r22, r23
     41a:	8b e2       	ldi	r24, 0x2B	; 43
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	3c c0       	rjmp	.+120    	; 0x498 <clearBit>
     420:	08 95       	ret

00000422 <gpio_enableInterrupt>:
     422:	cf 93       	push	r28
     424:	62 30       	cpi	r22, 0x02	; 2
     426:	41 f4       	brne	.+16     	; 0x438 <gpio_enableInterrupt+0x16>
     428:	c7 2f       	mov	r28, r23
     42a:	88 e6       	ldi	r24, 0x68	; 104
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	28 d0       	rcall	.+80     	; 0x480 <setBit>
     430:	6c 2f       	mov	r22, r28
     432:	8d e6       	ldi	r24, 0x6D	; 109
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	24 d0       	rcall	.+72     	; 0x480 <setBit>
     438:	cf 91       	pop	r28
     43a:	08 95       	ret

0000043c <gpio_attachInterrupt>:

void gpio_attachInterrupt(gpio_struct_t s_gpio, gpio_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
	switch (s_gpio.port)
     43c:	62 30       	cpi	r22, 0x02	; 2
     43e:	39 f4       	brne	.+14     	; 0x44e <gpio_attachInterrupt+0x12>
			}
		#endif
			break;
		case PC:
		#ifdef USING_PCINT2
			p_pcInt2Callback = p_function;
     440:	30 93 05 18 	sts	0x1805, r19	; 0x801805 <__bss_end+0x162d>
     444:	20 93 04 18 	sts	0x1804, r18	; 0x801804 <__bss_end+0x162c>
			u8_pcInt2OldState = PORTC;
     448:	88 b1       	in	r24, 0x08	; 8
     44a:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8_pcInt2OldState>
     44e:	08 95       	ret

00000450 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     450:	fc 01       	movw	r30, r24
     452:	94 2f       	mov	r25, r20
     454:	20 81       	ld	r18, Z
     456:	41 e0       	ldi	r20, 0x01	; 1
     458:	50 e0       	ldi	r21, 0x00	; 0
     45a:	06 2e       	mov	r0, r22
     45c:	02 c0       	rjmp	.+4      	; 0x462 <updateBit+0x12>
     45e:	44 0f       	add	r20, r20
     460:	55 1f       	adc	r21, r21
     462:	0a 94       	dec	r0
     464:	e2 f7       	brpl	.-8      	; 0x45e <updateBit+0xe>
     466:	40 95       	com	r20
     468:	50 95       	com	r21
     46a:	24 23       	and	r18, r20
     46c:	49 2f       	mov	r20, r25
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	02 c0       	rjmp	.+4      	; 0x476 <updateBit+0x26>
     472:	44 0f       	add	r20, r20
     474:	55 1f       	adc	r21, r21
     476:	6a 95       	dec	r22
     478:	e2 f7       	brpl	.-8      	; 0x472 <updateBit+0x22>
     47a:	42 2b       	or	r20, r18
     47c:	40 83       	st	Z, r20
     47e:	08 95       	ret

00000480 <setBit>:
     480:	fc 01       	movw	r30, r24
     482:	40 81       	ld	r20, Z
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	30 e0       	ldi	r19, 0x00	; 0
     488:	02 c0       	rjmp	.+4      	; 0x48e <setBit+0xe>
     48a:	22 0f       	add	r18, r18
     48c:	33 1f       	adc	r19, r19
     48e:	6a 95       	dec	r22
     490:	e2 f7       	brpl	.-8      	; 0x48a <setBit+0xa>
     492:	24 2b       	or	r18, r20
     494:	20 83       	st	Z, r18
     496:	08 95       	ret

00000498 <clearBit>:
     498:	fc 01       	movw	r30, r24
     49a:	90 81       	ld	r25, Z
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <clearBit+0xe>
     4a2:	22 0f       	add	r18, r18
     4a4:	33 1f       	adc	r19, r19
     4a6:	6a 95       	dec	r22
     4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <clearBit+0xa>
     4aa:	20 95       	com	r18
     4ac:	29 23       	and	r18, r25
     4ae:	20 83       	st	Z, r18
     4b0:	08 95       	ret

000004b2 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	02 c0       	rjmp	.+4      	; 0x4ba <checkBit+0x8>
     4b6:	95 95       	asr	r25
     4b8:	87 95       	ror	r24
     4ba:	6a 95       	dec	r22
     4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <checkBit+0x4>
}
     4be:	81 70       	andi	r24, 0x01	; 1
     4c0:	08 95       	ret

000004c2 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     4c2:	cf 92       	push	r12
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	69 01       	movw	r12, r18
     4cc:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	2c 19       	sub	r18, r12
     4d4:	3d 09       	sbc	r19, r13
     4d6:	4e 09       	sbc	r20, r14
     4d8:	5f 09       	sbc	r21, r15
     4da:	a8 ee       	ldi	r26, 0xE8	; 232
     4dc:	b3 e0       	ldi	r27, 0x03	; 3
     4de:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__muluhisi3>
     4e2:	a7 01       	movw	r20, r14
     4e4:	96 01       	movw	r18, r12
     4e6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     4ea:	c9 01       	movw	r24, r18
     4ec:	99 23       	and	r25, r25
     4ee:	24 f4       	brge	.+8      	; 0x4f8 <calculateError+0x36>
     4f0:	88 27       	eor	r24, r24
     4f2:	99 27       	eor	r25, r25
     4f4:	82 1b       	sub	r24, r18
     4f6:	93 0b       	sbc	r25, r19
}
     4f8:	ff 90       	pop	r15
     4fa:	ef 90       	pop	r14
     4fc:	df 90       	pop	r13
     4fe:	cf 90       	pop	r12
     500:	08 95       	ret

00000502 <ruleOfThree>:

u16 ruleOfThree(u16 u16_extreme, u16 u16_mean1, u16 u16_mean2)
{
     502:	fc 01       	movw	r30, r24
     504:	9b 01       	movw	r18, r22
	u32 u32_result;
	u32_result = (u32) u16_mean1 * u16_mean2 / u16_extreme;
	return (u16) u32_result;
     506:	da 01       	movw	r26, r20
     508:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <__umulhisi3>
     50c:	9f 01       	movw	r18, r30
     50e:	40 e0       	ldi	r20, 0x00	; 0
     510:	50 e0       	ldi	r21, 0x00	; 0
     512:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     516:	c9 01       	movw	r24, r18
     518:	08 95       	ret

0000051a <pwm_init>:
			OCR3A = ruleOfThree(100, u8_pwm3aPercent, ICR3);
			OCR3B = ruleOfThree(100, u8_pwm3bPercent, ICR3);
		#endif
			break;
	}
}
     51a:	cf 93       	push	r28
     51c:	df 93       	push	r29
     51e:	ec 01       	movw	r28, r24
     520:	48 81       	ld	r20, Y
     522:	59 81       	ldd	r21, Y+1	; 0x01
     524:	6a 81       	ldd	r22, Y+2	; 0x02
     526:	7b 81       	ldd	r23, Y+3	; 0x03
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	3f d4       	rcall	.+2174   	; 0xdaa <timer_init>
     52c:	88 81       	ld	r24, Y
     52e:	81 30       	cpi	r24, 0x01	; 1
     530:	09 f0       	breq	.+2      	; 0x534 <pwm_init+0x1a>
     532:	62 c0       	rjmp	.+196    	; 0x5f8 <pwm_init+0xde>
     534:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     538:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     53c:	89 2b       	or	r24, r25
     53e:	49 f0       	breq	.+18     	; 0x552 <pwm_init+0x38>
     540:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     544:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     548:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     54c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     550:	06 c0       	rjmp	.+12     	; 0x55e <pwm_init+0x44>
     552:	8f ef       	ldi	r24, 0xFF	; 255
     554:	9f ef       	ldi	r25, 0xFF	; 255
     556:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     55a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     55e:	64 e0       	ldi	r22, 0x04	; 4
     560:	81 e8       	ldi	r24, 0x81	; 129
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	8d df       	rcall	.-230    	; 0x480 <setBit>
     566:	60 e0       	ldi	r22, 0x00	; 0
     568:	80 e8       	ldi	r24, 0x80	; 128
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	95 df       	rcall	.-214    	; 0x498 <clearBit>
     56e:	8e 81       	ldd	r24, Y+6	; 0x06
     570:	88 23       	and	r24, r24
     572:	19 f0       	breq	.+6      	; 0x57a <pwm_init+0x60>
     574:	81 30       	cpi	r24, 0x01	; 1
     576:	51 f0       	breq	.+20     	; 0x58c <pwm_init+0x72>
     578:	19 c0       	rjmp	.+50     	; 0x5ac <pwm_init+0x92>
     57a:	63 e0       	ldi	r22, 0x03	; 3
     57c:	81 e8       	ldi	r24, 0x81	; 129
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	7f df       	rcall	.-258    	; 0x480 <setBit>
     582:	61 e0       	ldi	r22, 0x01	; 1
     584:	80 e8       	ldi	r24, 0x80	; 128
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	7b df       	rcall	.-266    	; 0x480 <setBit>
     58a:	10 c0       	rjmp	.+32     	; 0x5ac <pwm_init+0x92>
     58c:	63 e0       	ldi	r22, 0x03	; 3
     58e:	81 e8       	ldi	r24, 0x81	; 129
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	82 df       	rcall	.-252    	; 0x498 <clearBit>
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	88 23       	and	r24, r24
     598:	29 f0       	breq	.+10     	; 0x5a4 <pwm_init+0x8a>
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	80 e8       	ldi	r24, 0x80	; 128
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	7b df       	rcall	.-266    	; 0x498 <clearBit>
     5a2:	04 c0       	rjmp	.+8      	; 0x5ac <pwm_init+0x92>
     5a4:	61 e0       	ldi	r22, 0x01	; 1
     5a6:	80 e8       	ldi	r24, 0x80	; 128
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	6a df       	rcall	.-300    	; 0x480 <setBit>
     5ac:	8f 81       	ldd	r24, Y+7	; 0x07
     5ae:	88 23       	and	r24, r24
     5b0:	71 f0       	breq	.+28     	; 0x5ce <pwm_init+0xb4>
     5b2:	67 e0       	ldi	r22, 0x07	; 7
     5b4:	80 e8       	ldi	r24, 0x80	; 128
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	63 df       	rcall	.-314    	; 0x480 <setBit>
     5ba:	48 85       	ldd	r20, Y+8	; 0x08
     5bc:	66 e0       	ldi	r22, 0x06	; 6
     5be:	80 e8       	ldi	r24, 0x80	; 128
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	46 df       	rcall	.-372    	; 0x450 <updateBit>
     5c4:	63 e0       	ldi	r22, 0x03	; 3
     5c6:	75 e0       	ldi	r23, 0x05	; 5
     5c8:	81 e0       	ldi	r24, 0x01	; 1
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	c3 de       	rcall	.-634    	; 0x354 <gpio_init>
     5ce:	89 85       	ldd	r24, Y+9	; 0x09
     5d0:	88 23       	and	r24, r24
     5d2:	71 f0       	breq	.+28     	; 0x5f0 <pwm_init+0xd6>
     5d4:	65 e0       	ldi	r22, 0x05	; 5
     5d6:	80 e8       	ldi	r24, 0x80	; 128
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	52 df       	rcall	.-348    	; 0x480 <setBit>
     5dc:	4a 85       	ldd	r20, Y+10	; 0x0a
     5de:	64 e0       	ldi	r22, 0x04	; 4
     5e0:	80 e8       	ldi	r24, 0x80	; 128
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	35 df       	rcall	.-406    	; 0x450 <updateBit>
     5e6:	63 e0       	ldi	r22, 0x03	; 3
     5e8:	74 e0       	ldi	r23, 0x04	; 4
     5ea:	81 e0       	ldi	r24, 0x01	; 1
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	b2 de       	rcall	.-668    	; 0x354 <gpio_init>
     5f0:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <u8_pwm1aPercent>
     5f4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <u8_pwm1bPercent>
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <pwm_start>:
     5fe:	ef 92       	push	r14
     600:	ff 92       	push	r15
     602:	0f 93       	push	r16
     604:	1f 93       	push	r17
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	2b 97       	sbiw	r28, 0x0b	; 11
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	4e 2d       	mov	r20, r14
     61c:	5f 2d       	mov	r21, r15
     61e:	60 2f       	mov	r22, r16
     620:	71 2f       	mov	r23, r17
     622:	82 2f       	mov	r24, r18
     624:	0d d5       	rcall	.+2586   	; 0x1040 <timer_start>
     626:	2b 96       	adiw	r28, 0x0b	; 11
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	08 95       	ret

00000640 <pwm_setDutyCycle>:

void pwm_setDutyCycle(pwm_struct_t s_pwm, timer_channel_enum_t e_channel, u8 u8_percent)
{
     640:	af 92       	push	r10
     642:	cf 92       	push	r12
     644:	ef 92       	push	r14
     646:	ff 92       	push	r15
     648:	0f 93       	push	r16
     64a:	1f 93       	push	r17
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
     654:	2b 97       	sbiw	r28, 0x0b	; 11
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	9e 2d       	mov	r25, r14
     662:	e9 82       	std	Y+1, r14	; 0x01
     664:	fa 82       	std	Y+2, r15	; 0x02
     666:	0b 83       	std	Y+3, r16	; 0x03
     668:	1c 83       	std	Y+4, r17	; 0x04
     66a:	2d 83       	std	Y+5, r18	; 0x05
     66c:	3e 83       	std	Y+6, r19	; 0x06
     66e:	4f 83       	std	Y+7, r20	; 0x07
     670:	58 87       	std	Y+8, r21	; 0x08
     672:	69 87       	std	Y+9, r22	; 0x09
     674:	7a 87       	std	Y+10, r23	; 0x0a
     676:	8b 87       	std	Y+11, r24	; 0x0b
	switch(s_pwm.base.peripheral)
     678:	91 30       	cpi	r25, 0x01	; 1
     67a:	21 f5       	brne	.+72     	; 0x6c4 <pwm_setDutyCycle+0x84>
     67c:	8c 2d       	mov	r24, r12
			}
		#endif
			break;
		case TIMER1:
		#ifdef USING_PWM1
			if (e_channel == CHANNEL_A)
     67e:	c1 10       	cpse	r12, r1
     680:	10 c0       	rjmp	.+32     	; 0x6a2 <pwm_setDutyCycle+0x62>
			{
				u8_pwm1aPercent = u8_percent;
     682:	a0 92 44 01 	sts	0x0144, r10	; 0x800144 <u8_pwm1aPercent>
				OCR1A = ruleOfThree(100, u8_percent, ICR1);
     686:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     68a:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     68e:	6a 2d       	mov	r22, r10
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	84 e6       	ldi	r24, 0x64	; 100
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	35 df       	rcall	.-406    	; 0x502 <ruleOfThree>
     698:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     69c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     6a0:	11 c0       	rjmp	.+34     	; 0x6c4 <pwm_setDutyCycle+0x84>
			}
			if (e_channel == CHANNEL_B)
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	79 f4       	brne	.+30     	; 0x6c4 <pwm_setDutyCycle+0x84>
			{
				u8_pwm1bPercent = u8_percent;
     6a6:	a0 92 43 01 	sts	0x0143, r10	; 0x800143 <u8_pwm1bPercent>
				OCR1B = ruleOfThree(100, u8_percent, ICR1);
     6aa:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     6ae:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     6b2:	6a 2d       	mov	r22, r10
     6b4:	70 e0       	ldi	r23, 0x00	; 0
     6b6:	84 e6       	ldi	r24, 0x64	; 100
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	23 df       	rcall	.-442    	; 0x502 <ruleOfThree>
     6bc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     6c0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				OCR3B = ruleOfThree(100, u8_percent, ICR3);
			}
		#endif
			break;
	}
}
     6c4:	2b 96       	adiw	r28, 0x0b	; 11
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	1f 91       	pop	r17
     6d6:	0f 91       	pop	r16
     6d8:	ff 90       	pop	r15
     6da:	ef 90       	pop	r14
     6dc:	cf 90       	pop	r12
     6de:	af 90       	pop	r10
     6e0:	08 95       	ret

000006e2 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     6e2:	1f 92       	push	r1
     6e4:	0f 92       	push	r0
     6e6:	0f b6       	in	r0, 0x3f	; 63
     6e8:	0f 92       	push	r0
     6ea:	11 24       	eor	r1, r1
     6ec:	0b b6       	in	r0, 0x3b	; 59
     6ee:	0f 92       	push	r0
     6f0:	8f 93       	push	r24
     6f2:	9f 93       	push	r25
     6f4:	ef 93       	push	r30
     6f6:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     6f8:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <u8_RLastReceivedIndex>
     6fc:	f0 e0       	ldi	r31, 0x00	; 0
     6fe:	8e b5       	in	r24, 0x2e	; 46
     700:	e5 5b       	subi	r30, 0xB5	; 181
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     706:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8_RLastReceivedIndex>
     70a:	89 30       	cpi	r24, 0x09	; 9
     70c:	30 f4       	brcc	.+12     	; 0x71a <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     70e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8_RLastReceivedIndex>
     712:	8f 5f       	subi	r24, 0xFF	; 255
     714:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8_RLastReceivedIndex>
     718:	02 c0       	rjmp	.+4      	; 0x71e <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     71a:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     724:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <u8_TLastTransmittedIndex>
     728:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <u8_TLastRequestedIndex>
     72c:	98 17       	cp	r25, r24
     72e:	a1 f0       	breq	.+40     	; 0x758 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     730:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <u8_TLastTransmittedIndex>
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	eb 5a       	subi	r30, 0xAB	; 171
     738:	fe 4f       	sbci	r31, 0xFE	; 254
     73a:	80 81       	ld	r24, Z
     73c:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     73e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_TLastTransmittedIndex>
     742:	89 30       	cpi	r24, 0x09	; 9
     744:	30 f4       	brcc	.+12     	; 0x752 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     746:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <u8_TLastTransmittedIndex>
     74a:	8f 5f       	subi	r24, 0xFF	; 255
     74c:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <u8_TLastTransmittedIndex>
     750:	06 c0       	rjmp	.+12     	; 0x75e <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     752:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <u8_TLastTransmittedIndex>
     756:	03 c0       	rjmp	.+6      	; 0x75e <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <b_TAvailable>
	}
}
     75e:	ff 91       	pop	r31
     760:	ef 91       	pop	r30
     762:	9f 91       	pop	r25
     764:	8f 91       	pop	r24
     766:	0f 90       	pop	r0
     768:	0b be       	out	0x3b, r0	; 59
     76a:	0f 90       	pop	r0
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	0f 90       	pop	r0
     770:	1f 90       	pop	r1
     772:	18 95       	reti

00000774 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     774:	8f 92       	push	r8
     776:	9f 92       	push	r9
     778:	af 92       	push	r10
     77a:	bf 92       	push	r11
     77c:	ef 92       	push	r14
     77e:	ff 92       	push	r15
     780:	0f 93       	push	r16
     782:	1f 93       	push	r17
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	00 d0       	rcall	.+0      	; 0x78a <calculateTopRegister+0x16>
     78a:	00 d0       	rcall	.+0      	; 0x78c <calculateTopRegister+0x18>
     78c:	1f 92       	push	r1
     78e:	cd b7       	in	r28, 0x3d	; 61
     790:	de b7       	in	r29, 0x3e	; 62
     792:	48 01       	movw	r8, r16
     794:	59 01       	movw	r10, r18
     796:	41 30       	cpi	r20, 0x01	; 1
     798:	21 f0       	breq	.+8      	; 0x7a2 <calculateTopRegister+0x2e>
     79a:	42 30       	cpi	r20, 0x02	; 2
     79c:	09 f4       	brne	.+2      	; 0x7a0 <calculateTopRegister+0x2c>
     79e:	88 c0       	rjmp	.+272    	; 0x8b0 <calculateTopRegister+0x13c>
     7a0:	4c c1       	rjmp	.+664    	; 0xa3a <calculateTopRegister+0x2c6>
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	72 e1       	ldi	r23, 0x12	; 18
     7a6:	8a e7       	ldi	r24, 0x7A	; 122
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	98 01       	movw	r18, r16
     7ae:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     7b2:	da 01       	movw	r26, r20
     7b4:	c9 01       	movw	r24, r18
     7b6:	01 97       	sbiw	r24, 0x01	; 1
     7b8:	a1 09       	sbc	r26, r1
     7ba:	b1 09       	sbc	r27, r1
     7bc:	00 97       	sbiw	r24, 0x00	; 0
     7be:	21 e0       	ldi	r18, 0x01	; 1
     7c0:	a2 07       	cpc	r26, r18
     7c2:	b1 05       	cpc	r27, r1
     7c4:	50 f4       	brcc	.+20     	; 0x7da <calculateTopRegister+0x66>
     7c6:	49 ef       	ldi	r20, 0xF9	; 249
     7c8:	5f ef       	ldi	r21, 0xFF	; 255
     7ca:	6f ef       	ldi	r22, 0xFF	; 255
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	f7 01       	movw	r30, r14
     7d0:	40 83       	st	Z, r20
     7d2:	51 83       	std	Z+1, r21	; 0x01
     7d4:	62 83       	std	Z+2, r22	; 0x02
     7d6:	73 83       	std	Z+3, r23	; 0x03
     7d8:	33 c1       	rjmp	.+614    	; 0xa40 <calculateTopRegister+0x2cc>
     7da:	60 e4       	ldi	r22, 0x40	; 64
     7dc:	72 e4       	ldi	r23, 0x42	; 66
     7de:	8f e0       	ldi	r24, 0x0F	; 15
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	a5 01       	movw	r20, r10
     7e4:	94 01       	movw	r18, r8
     7e6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     7ea:	da 01       	movw	r26, r20
     7ec:	c9 01       	movw	r24, r18
     7ee:	01 97       	sbiw	r24, 0x01	; 1
     7f0:	a1 09       	sbc	r26, r1
     7f2:	b1 09       	sbc	r27, r1
     7f4:	00 97       	sbiw	r24, 0x00	; 0
     7f6:	f1 e0       	ldi	r31, 0x01	; 1
     7f8:	af 07       	cpc	r26, r31
     7fa:	b1 05       	cpc	r27, r1
     7fc:	50 f4       	brcc	.+20     	; 0x812 <calculateTopRegister+0x9e>
     7fe:	4a ef       	ldi	r20, 0xFA	; 250
     800:	5f ef       	ldi	r21, 0xFF	; 255
     802:	6f ef       	ldi	r22, 0xFF	; 255
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	f7 01       	movw	r30, r14
     808:	40 83       	st	Z, r20
     80a:	51 83       	std	Z+1, r21	; 0x01
     80c:	62 83       	std	Z+2, r22	; 0x02
     80e:	73 83       	std	Z+3, r23	; 0x03
     810:	17 c1       	rjmp	.+558    	; 0xa40 <calculateTopRegister+0x2cc>
     812:	68 e4       	ldi	r22, 0x48	; 72
     814:	78 ee       	ldi	r23, 0xE8	; 232
     816:	81 e0       	ldi	r24, 0x01	; 1
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a5 01       	movw	r20, r10
     81c:	94 01       	movw	r18, r8
     81e:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     822:	da 01       	movw	r26, r20
     824:	c9 01       	movw	r24, r18
     826:	01 97       	sbiw	r24, 0x01	; 1
     828:	a1 09       	sbc	r26, r1
     82a:	b1 09       	sbc	r27, r1
     82c:	00 97       	sbiw	r24, 0x00	; 0
     82e:	f1 e0       	ldi	r31, 0x01	; 1
     830:	af 07       	cpc	r26, r31
     832:	b1 05       	cpc	r27, r1
     834:	50 f4       	brcc	.+20     	; 0x84a <calculateTopRegister+0xd6>
     836:	4c ef       	ldi	r20, 0xFC	; 252
     838:	5f ef       	ldi	r21, 0xFF	; 255
     83a:	6f ef       	ldi	r22, 0xFF	; 255
     83c:	70 e0       	ldi	r23, 0x00	; 0
     83e:	f7 01       	movw	r30, r14
     840:	40 83       	st	Z, r20
     842:	51 83       	std	Z+1, r21	; 0x01
     844:	62 83       	std	Z+2, r22	; 0x02
     846:	73 83       	std	Z+3, r23	; 0x03
     848:	fb c0       	rjmp	.+502    	; 0xa40 <calculateTopRegister+0x2cc>
     84a:	62 e1       	ldi	r22, 0x12	; 18
     84c:	7a e7       	ldi	r23, 0x7A	; 122
     84e:	80 e0       	ldi	r24, 0x00	; 0
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	a5 01       	movw	r20, r10
     854:	94 01       	movw	r18, r8
     856:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     85a:	da 01       	movw	r26, r20
     85c:	c9 01       	movw	r24, r18
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	a1 09       	sbc	r26, r1
     862:	b1 09       	sbc	r27, r1
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	f1 e0       	ldi	r31, 0x01	; 1
     868:	af 07       	cpc	r26, r31
     86a:	b1 05       	cpc	r27, r1
     86c:	50 f4       	brcc	.+20     	; 0x882 <calculateTopRegister+0x10e>
     86e:	4e ef       	ldi	r20, 0xFE	; 254
     870:	5f ef       	ldi	r21, 0xFF	; 255
     872:	6f ef       	ldi	r22, 0xFF	; 255
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	f7 01       	movw	r30, r14
     878:	40 83       	st	Z, r20
     87a:	51 83       	std	Z+1, r21	; 0x01
     87c:	62 83       	std	Z+2, r22	; 0x02
     87e:	73 83       	std	Z+3, r23	; 0x03
     880:	df c0       	rjmp	.+446    	; 0xa40 <calculateTopRegister+0x2cc>
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	9f ef       	ldi	r25, 0xFF	; 255
     886:	af ef       	ldi	r26, 0xFF	; 255
     888:	b0 e0       	ldi	r27, 0x00	; 0
     88a:	f7 01       	movw	r30, r14
     88c:	80 83       	st	Z, r24
     88e:	91 83       	std	Z+1, r25	; 0x01
     890:	a2 83       	std	Z+2, r26	; 0x02
     892:	b3 83       	std	Z+3, r27	; 0x03
     894:	64 e8       	ldi	r22, 0x84	; 132
     896:	7e e1       	ldi	r23, 0x1E	; 30
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	a5 01       	movw	r20, r10
     89e:	94 01       	movw	r18, r8
     8a0:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     8a4:	da 01       	movw	r26, r20
     8a6:	c9 01       	movw	r24, r18
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	a1 09       	sbc	r26, r1
     8ac:	b1 09       	sbc	r27, r1
     8ae:	c8 c0       	rjmp	.+400    	; 0xa40 <calculateTopRegister+0x2cc>
     8b0:	60 e0       	ldi	r22, 0x00	; 0
     8b2:	72 e1       	ldi	r23, 0x12	; 18
     8b4:	8a e7       	ldi	r24, 0x7A	; 122
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a9 01       	movw	r20, r18
     8ba:	98 01       	movw	r18, r16
     8bc:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     8c0:	da 01       	movw	r26, r20
     8c2:	c9 01       	movw	r24, r18
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	a1 09       	sbc	r26, r1
     8c8:	b1 09       	sbc	r27, r1
     8ca:	8f 3f       	cpi	r24, 0xFF	; 255
     8cc:	91 05       	cpc	r25, r1
     8ce:	a1 05       	cpc	r26, r1
     8d0:	b1 05       	cpc	r27, r1
     8d2:	09 f0       	breq	.+2      	; 0x8d6 <calculateTopRegister+0x162>
     8d4:	50 f4       	brcc	.+20     	; 0x8ea <calculateTopRegister+0x176>
     8d6:	49 ef       	ldi	r20, 0xF9	; 249
     8d8:	5f ef       	ldi	r21, 0xFF	; 255
     8da:	6f ef       	ldi	r22, 0xFF	; 255
     8dc:	70 e0       	ldi	r23, 0x00	; 0
     8de:	f7 01       	movw	r30, r14
     8e0:	40 83       	st	Z, r20
     8e2:	51 83       	std	Z+1, r21	; 0x01
     8e4:	62 83       	std	Z+2, r22	; 0x02
     8e6:	73 83       	std	Z+3, r23	; 0x03
     8e8:	ab c0       	rjmp	.+342    	; 0xa40 <calculateTopRegister+0x2cc>
     8ea:	60 e4       	ldi	r22, 0x40	; 64
     8ec:	72 e4       	ldi	r23, 0x42	; 66
     8ee:	8f e0       	ldi	r24, 0x0F	; 15
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	a5 01       	movw	r20, r10
     8f4:	94 01       	movw	r18, r8
     8f6:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     8fa:	da 01       	movw	r26, r20
     8fc:	c9 01       	movw	r24, r18
     8fe:	01 97       	sbiw	r24, 0x01	; 1
     900:	a1 09       	sbc	r26, r1
     902:	b1 09       	sbc	r27, r1
     904:	8f 3f       	cpi	r24, 0xFF	; 255
     906:	91 05       	cpc	r25, r1
     908:	a1 05       	cpc	r26, r1
     90a:	b1 05       	cpc	r27, r1
     90c:	09 f0       	breq	.+2      	; 0x910 <calculateTopRegister+0x19c>
     90e:	50 f4       	brcc	.+20     	; 0x924 <calculateTopRegister+0x1b0>
     910:	4a ef       	ldi	r20, 0xFA	; 250
     912:	5f ef       	ldi	r21, 0xFF	; 255
     914:	6f ef       	ldi	r22, 0xFF	; 255
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	f7 01       	movw	r30, r14
     91a:	40 83       	st	Z, r20
     91c:	51 83       	std	Z+1, r21	; 0x01
     91e:	62 83       	std	Z+2, r22	; 0x02
     920:	73 83       	std	Z+3, r23	; 0x03
     922:	8e c0       	rjmp	.+284    	; 0xa40 <calculateTopRegister+0x2cc>
     924:	60 e9       	ldi	r22, 0x90	; 144
     926:	70 ed       	ldi	r23, 0xD0	; 208
     928:	83 e0       	ldi	r24, 0x03	; 3
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	a5 01       	movw	r20, r10
     92e:	94 01       	movw	r18, r8
     930:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     934:	da 01       	movw	r26, r20
     936:	c9 01       	movw	r24, r18
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	a1 09       	sbc	r26, r1
     93c:	b1 09       	sbc	r27, r1
     93e:	8f 3f       	cpi	r24, 0xFF	; 255
     940:	91 05       	cpc	r25, r1
     942:	a1 05       	cpc	r26, r1
     944:	b1 05       	cpc	r27, r1
     946:	09 f0       	breq	.+2      	; 0x94a <calculateTopRegister+0x1d6>
     948:	50 f4       	brcc	.+20     	; 0x95e <calculateTopRegister+0x1ea>
     94a:	4b ef       	ldi	r20, 0xFB	; 251
     94c:	5f ef       	ldi	r21, 0xFF	; 255
     94e:	6f ef       	ldi	r22, 0xFF	; 255
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	f7 01       	movw	r30, r14
     954:	40 83       	st	Z, r20
     956:	51 83       	std	Z+1, r21	; 0x01
     958:	62 83       	std	Z+2, r22	; 0x02
     95a:	73 83       	std	Z+3, r23	; 0x03
     95c:	71 c0       	rjmp	.+226    	; 0xa40 <calculateTopRegister+0x2cc>
     95e:	68 e4       	ldi	r22, 0x48	; 72
     960:	78 ee       	ldi	r23, 0xE8	; 232
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	a5 01       	movw	r20, r10
     968:	94 01       	movw	r18, r8
     96a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     96e:	da 01       	movw	r26, r20
     970:	c9 01       	movw	r24, r18
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	a1 09       	sbc	r26, r1
     976:	b1 09       	sbc	r27, r1
     978:	8f 3f       	cpi	r24, 0xFF	; 255
     97a:	91 05       	cpc	r25, r1
     97c:	a1 05       	cpc	r26, r1
     97e:	b1 05       	cpc	r27, r1
     980:	09 f0       	breq	.+2      	; 0x984 <calculateTopRegister+0x210>
     982:	50 f4       	brcc	.+20     	; 0x998 <calculateTopRegister+0x224>
     984:	4c ef       	ldi	r20, 0xFC	; 252
     986:	5f ef       	ldi	r21, 0xFF	; 255
     988:	6f ef       	ldi	r22, 0xFF	; 255
     98a:	70 e0       	ldi	r23, 0x00	; 0
     98c:	f7 01       	movw	r30, r14
     98e:	40 83       	st	Z, r20
     990:	51 83       	std	Z+1, r21	; 0x01
     992:	62 83       	std	Z+2, r22	; 0x02
     994:	73 83       	std	Z+3, r23	; 0x03
     996:	54 c0       	rjmp	.+168    	; 0xa40 <calculateTopRegister+0x2cc>
     998:	64 e2       	ldi	r22, 0x24	; 36
     99a:	74 ef       	ldi	r23, 0xF4	; 244
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	a5 01       	movw	r20, r10
     9a2:	94 01       	movw	r18, r8
     9a4:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     9a8:	da 01       	movw	r26, r20
     9aa:	c9 01       	movw	r24, r18
     9ac:	01 97       	sbiw	r24, 0x01	; 1
     9ae:	a1 09       	sbc	r26, r1
     9b0:	b1 09       	sbc	r27, r1
     9b2:	8f 3f       	cpi	r24, 0xFF	; 255
     9b4:	91 05       	cpc	r25, r1
     9b6:	a1 05       	cpc	r26, r1
     9b8:	b1 05       	cpc	r27, r1
     9ba:	09 f0       	breq	.+2      	; 0x9be <calculateTopRegister+0x24a>
     9bc:	50 f4       	brcc	.+20     	; 0x9d2 <calculateTopRegister+0x25e>
     9be:	4d ef       	ldi	r20, 0xFD	; 253
     9c0:	5f ef       	ldi	r21, 0xFF	; 255
     9c2:	6f ef       	ldi	r22, 0xFF	; 255
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	f7 01       	movw	r30, r14
     9c8:	40 83       	st	Z, r20
     9ca:	51 83       	std	Z+1, r21	; 0x01
     9cc:	62 83       	std	Z+2, r22	; 0x02
     9ce:	73 83       	std	Z+3, r23	; 0x03
     9d0:	37 c0       	rjmp	.+110    	; 0xa40 <calculateTopRegister+0x2cc>
     9d2:	62 e1       	ldi	r22, 0x12	; 18
     9d4:	7a e7       	ldi	r23, 0x7A	; 122
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	a5 01       	movw	r20, r10
     9dc:	94 01       	movw	r18, r8
     9de:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     9e2:	da 01       	movw	r26, r20
     9e4:	c9 01       	movw	r24, r18
     9e6:	01 97       	sbiw	r24, 0x01	; 1
     9e8:	a1 09       	sbc	r26, r1
     9ea:	b1 09       	sbc	r27, r1
     9ec:	8f 3f       	cpi	r24, 0xFF	; 255
     9ee:	91 05       	cpc	r25, r1
     9f0:	a1 05       	cpc	r26, r1
     9f2:	b1 05       	cpc	r27, r1
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <calculateTopRegister+0x284>
     9f6:	50 f4       	brcc	.+20     	; 0xa0c <calculateTopRegister+0x298>
     9f8:	4e ef       	ldi	r20, 0xFE	; 254
     9fa:	5f ef       	ldi	r21, 0xFF	; 255
     9fc:	6f ef       	ldi	r22, 0xFF	; 255
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	f7 01       	movw	r30, r14
     a02:	40 83       	st	Z, r20
     a04:	51 83       	std	Z+1, r21	; 0x01
     a06:	62 83       	std	Z+2, r22	; 0x02
     a08:	73 83       	std	Z+3, r23	; 0x03
     a0a:	1a c0       	rjmp	.+52     	; 0xa40 <calculateTopRegister+0x2cc>
     a0c:	8f ef       	ldi	r24, 0xFF	; 255
     a0e:	9f ef       	ldi	r25, 0xFF	; 255
     a10:	af ef       	ldi	r26, 0xFF	; 255
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	f7 01       	movw	r30, r14
     a16:	80 83       	st	Z, r24
     a18:	91 83       	std	Z+1, r25	; 0x01
     a1a:	a2 83       	std	Z+2, r26	; 0x02
     a1c:	b3 83       	std	Z+3, r27	; 0x03
     a1e:	64 e8       	ldi	r22, 0x84	; 132
     a20:	7e e1       	ldi	r23, 0x1E	; 30
     a22:	80 e0       	ldi	r24, 0x00	; 0
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	a5 01       	movw	r20, r10
     a28:	94 01       	movw	r18, r8
     a2a:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <__udivmodsi4>
     a2e:	da 01       	movw	r26, r20
     a30:	c9 01       	movw	r24, r18
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <calculateTopRegister+0x2cc>
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	dc 01       	movw	r26, r24
     a40:	0f 90       	pop	r0
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	1f 91       	pop	r17
     a50:	0f 91       	pop	r16
     a52:	ff 90       	pop	r15
     a54:	ef 90       	pop	r14
     a56:	bf 90       	pop	r11
     a58:	af 90       	pop	r10
     a5a:	9f 90       	pop	r9
     a5c:	8f 90       	pop	r8
     a5e:	08 95       	ret

00000a60 <__vector_15>:
     a60:	1f 92       	push	r1
     a62:	0f 92       	push	r0
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	0f 92       	push	r0
     a68:	11 24       	eor	r1, r1
     a6a:	0b b6       	in	r0, 0x3b	; 59
     a6c:	0f 92       	push	r0
     a6e:	2f 93       	push	r18
     a70:	3f 93       	push	r19
     a72:	4f 93       	push	r20
     a74:	5f 93       	push	r21
     a76:	6f 93       	push	r22
     a78:	7f 93       	push	r23
     a7a:	8f 93       	push	r24
     a7c:	9f 93       	push	r25
     a7e:	af 93       	push	r26
     a80:	bf 93       	push	r27
     a82:	ef 93       	push	r30
     a84:	ff 93       	push	r31
     a86:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <p_timer1Callbacks>
     a8a:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <p_timer1Callbacks+0x1>
     a8e:	09 95       	icall
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	7f 91       	pop	r23
     a9e:	6f 91       	pop	r22
     aa0:	5f 91       	pop	r21
     aa2:	4f 91       	pop	r20
     aa4:	3f 91       	pop	r19
     aa6:	2f 91       	pop	r18
     aa8:	0f 90       	pop	r0
     aaa:	0b be       	out	0x3b, r0	; 59
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_13>:
     ab6:	1f 92       	push	r1
     ab8:	0f 92       	push	r0
     aba:	0f b6       	in	r0, 0x3f	; 63
     abc:	0f 92       	push	r0
     abe:	11 24       	eor	r1, r1
     ac0:	0b b6       	in	r0, 0x3b	; 59
     ac2:	0f 92       	push	r0
     ac4:	0f 93       	push	r16
     ac6:	1f 93       	push	r17
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
     ae0:	ef 93       	push	r30
     ae2:	ff 93       	push	r31
     ae4:	c1 e8       	ldi	r28, 0x81	; 129
     ae6:	d0 e0       	ldi	r29, 0x00	; 0
     ae8:	88 81       	ld	r24, Y
     aea:	64 e0       	ldi	r22, 0x04	; 4
     aec:	e2 dc       	rcall	.-1596   	; 0x4b2 <checkBit>
     aee:	18 2f       	mov	r17, r24
     af0:	88 81       	ld	r24, Y
     af2:	63 e0       	ldi	r22, 0x03	; 3
     af4:	de dc       	rcall	.-1604   	; 0x4b2 <checkBit>
     af6:	c1 2f       	mov	r28, r17
     af8:	cc 0f       	add	r28, r28
     afa:	cc 0f       	add	r28, r28
     afc:	cc 0f       	add	r28, r28
     afe:	24 e0       	ldi	r18, 0x04	; 4
     b00:	82 9f       	mul	r24, r18
     b02:	c0 01       	movw	r24, r0
     b04:	11 24       	eor	r1, r1
     b06:	c8 2b       	or	r28, r24
     b08:	00 e8       	ldi	r16, 0x80	; 128
     b0a:	10 e0       	ldi	r17, 0x00	; 0
     b0c:	f8 01       	movw	r30, r16
     b0e:	80 81       	ld	r24, Z
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	cf dc       	rcall	.-1634   	; 0x4b2 <checkBit>
     b14:	d8 2f       	mov	r29, r24
     b16:	f8 01       	movw	r30, r16
     b18:	80 81       	ld	r24, Z
     b1a:	60 e0       	ldi	r22, 0x00	; 0
     b1c:	ca dc       	rcall	.-1644   	; 0x4b2 <checkBit>
     b1e:	dd 0f       	add	r29, r29
     b20:	8c 2b       	or	r24, r28
     b22:	8d 2b       	or	r24, r29
     b24:	88 30       	cpi	r24, 0x08	; 8
     b26:	18 f4       	brcc	.+6      	; 0xb2e <__vector_13+0x78>
     b28:	84 30       	cpi	r24, 0x04	; 4
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__vector_13+0x7c>
     b2c:	08 c0       	rjmp	.+16     	; 0xb3e <__vector_13+0x88>
     b2e:	80 fd       	sbrc	r24, 0
     b30:	06 c0       	rjmp	.+12     	; 0xb3e <__vector_13+0x88>
     b32:	e0 91 63 01 	lds	r30, 0x0163	; 0x800163 <p_timer1Callbacks+0x2>
     b36:	f0 91 64 01 	lds	r31, 0x0164	; 0x800164 <p_timer1Callbacks+0x3>
     b3a:	09 95       	icall
     b3c:	05 c0       	rjmp	.+10     	; 0xb48 <__vector_13+0x92>
     b3e:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <p_timer1Callbacks>
     b42:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <p_timer1Callbacks+0x1>
     b46:	09 95       	icall
     b48:	ff 91       	pop	r31
     b4a:	ef 91       	pop	r30
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	bf 91       	pop	r27
     b52:	af 91       	pop	r26
     b54:	9f 91       	pop	r25
     b56:	8f 91       	pop	r24
     b58:	7f 91       	pop	r23
     b5a:	6f 91       	pop	r22
     b5c:	5f 91       	pop	r21
     b5e:	4f 91       	pop	r20
     b60:	3f 91       	pop	r19
     b62:	2f 91       	pop	r18
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	0f 90       	pop	r0
     b6a:	0b be       	out	0x3b, r0	; 59
     b6c:	0f 90       	pop	r0
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	0f 90       	pop	r0
     b72:	1f 90       	pop	r1
     b74:	18 95       	reti

00000b76 <__vector_14>:
     b76:	1f 92       	push	r1
     b78:	0f 92       	push	r0
     b7a:	0f b6       	in	r0, 0x3f	; 63
     b7c:	0f 92       	push	r0
     b7e:	11 24       	eor	r1, r1
     b80:	0b b6       	in	r0, 0x3b	; 59
     b82:	0f 92       	push	r0
     b84:	2f 93       	push	r18
     b86:	3f 93       	push	r19
     b88:	4f 93       	push	r20
     b8a:	5f 93       	push	r21
     b8c:	6f 93       	push	r22
     b8e:	7f 93       	push	r23
     b90:	8f 93       	push	r24
     b92:	9f 93       	push	r25
     b94:	af 93       	push	r26
     b96:	bf 93       	push	r27
     b98:	ef 93       	push	r30
     b9a:	ff 93       	push	r31
     b9c:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <p_timer1Callbacks+0x4>
     ba0:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <p_timer1Callbacks+0x5>
     ba4:	09 95       	icall
     ba6:	ff 91       	pop	r31
     ba8:	ef 91       	pop	r30
     baa:	bf 91       	pop	r27
     bac:	af 91       	pop	r26
     bae:	9f 91       	pop	r25
     bb0:	8f 91       	pop	r24
     bb2:	7f 91       	pop	r23
     bb4:	6f 91       	pop	r22
     bb6:	5f 91       	pop	r21
     bb8:	4f 91       	pop	r20
     bba:	3f 91       	pop	r19
     bbc:	2f 91       	pop	r18
     bbe:	0f 90       	pop	r0
     bc0:	0b be       	out	0x3b, r0	; 59
     bc2:	0f 90       	pop	r0
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	0f 90       	pop	r0
     bc8:	1f 90       	pop	r1
     bca:	18 95       	reti

00000bcc <__vector_12>:
     bcc:	1f 92       	push	r1
     bce:	0f 92       	push	r0
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	0f 92       	push	r0
     bd4:	11 24       	eor	r1, r1
     bd6:	0b b6       	in	r0, 0x3b	; 59
     bd8:	0f 92       	push	r0
     bda:	0f 93       	push	r16
     bdc:	1f 93       	push	r17
     bde:	2f 93       	push	r18
     be0:	3f 93       	push	r19
     be2:	4f 93       	push	r20
     be4:	5f 93       	push	r21
     be6:	6f 93       	push	r22
     be8:	7f 93       	push	r23
     bea:	8f 93       	push	r24
     bec:	9f 93       	push	r25
     bee:	af 93       	push	r26
     bf0:	bf 93       	push	r27
     bf2:	cf 93       	push	r28
     bf4:	df 93       	push	r29
     bf6:	ef 93       	push	r30
     bf8:	ff 93       	push	r31
     bfa:	c1 e8       	ldi	r28, 0x81	; 129
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
     bfe:	88 81       	ld	r24, Y
     c00:	64 e0       	ldi	r22, 0x04	; 4
     c02:	57 dc       	rcall	.-1874   	; 0x4b2 <checkBit>
     c04:	18 2f       	mov	r17, r24
     c06:	88 81       	ld	r24, Y
     c08:	63 e0       	ldi	r22, 0x03	; 3
     c0a:	53 dc       	rcall	.-1882   	; 0x4b2 <checkBit>
     c0c:	c1 2f       	mov	r28, r17
     c0e:	cc 0f       	add	r28, r28
     c10:	cc 0f       	add	r28, r28
     c12:	cc 0f       	add	r28, r28
     c14:	24 e0       	ldi	r18, 0x04	; 4
     c16:	82 9f       	mul	r24, r18
     c18:	c0 01       	movw	r24, r0
     c1a:	11 24       	eor	r1, r1
     c1c:	c8 2b       	or	r28, r24
     c1e:	00 e8       	ldi	r16, 0x80	; 128
     c20:	10 e0       	ldi	r17, 0x00	; 0
     c22:	f8 01       	movw	r30, r16
     c24:	80 81       	ld	r24, Z
     c26:	61 e0       	ldi	r22, 0x01	; 1
     c28:	44 dc       	rcall	.-1912   	; 0x4b2 <checkBit>
     c2a:	d8 2f       	mov	r29, r24
     c2c:	f8 01       	movw	r30, r16
     c2e:	80 81       	ld	r24, Z
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	3f dc       	rcall	.-1922   	; 0x4b2 <checkBit>
     c34:	dd 0f       	add	r29, r29
     c36:	8c 2b       	or	r24, r28
     c38:	8d 2b       	or	r24, r29
     c3a:	88 30       	cpi	r24, 0x08	; 8
     c3c:	10 f0       	brcs	.+4      	; 0xc42 <__vector_12+0x76>
     c3e:	80 ff       	sbrs	r24, 0
     c40:	06 c0       	rjmp	.+12     	; 0xc4e <__vector_12+0x82>
     c42:	e0 91 67 01 	lds	r30, 0x0167	; 0x800167 <p_timer1Callbacks+0x6>
     c46:	f0 91 68 01 	lds	r31, 0x0168	; 0x800168 <p_timer1Callbacks+0x7>
     c4a:	09 95       	icall
     c4c:	05 c0       	rjmp	.+10     	; 0xc58 <__vector_12+0x8c>
     c4e:	e0 91 61 01 	lds	r30, 0x0161	; 0x800161 <p_timer1Callbacks>
     c52:	f0 91 62 01 	lds	r31, 0x0162	; 0x800162 <p_timer1Callbacks+0x1>
     c56:	09 95       	icall
     c58:	ff 91       	pop	r31
     c5a:	ef 91       	pop	r30
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	1f 91       	pop	r17
     c76:	0f 91       	pop	r16
     c78:	0f 90       	pop	r0
     c7a:	0b be       	out	0x3b, r0	; 59
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <__vector_11>:
     c86:	1f 92       	push	r1
     c88:	0f 92       	push	r0
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	0f 92       	push	r0
     c8e:	11 24       	eor	r1, r1
     c90:	0b b6       	in	r0, 0x3b	; 59
     c92:	0f 92       	push	r0
     c94:	2f 93       	push	r18
     c96:	3f 93       	push	r19
     c98:	4f 93       	push	r20
     c9a:	5f 93       	push	r21
     c9c:	6f 93       	push	r22
     c9e:	7f 93       	push	r23
     ca0:	8f 93       	push	r24
     ca2:	9f 93       	push	r25
     ca4:	af 93       	push	r26
     ca6:	bf 93       	push	r27
     ca8:	ef 93       	push	r30
     caa:	ff 93       	push	r31
     cac:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <p_timer2Callbacks>
     cb0:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <p_timer2Callbacks+0x1>
     cb4:	09 95       	icall
     cb6:	ff 91       	pop	r31
     cb8:	ef 91       	pop	r30
     cba:	bf 91       	pop	r27
     cbc:	af 91       	pop	r26
     cbe:	9f 91       	pop	r25
     cc0:	8f 91       	pop	r24
     cc2:	7f 91       	pop	r23
     cc4:	6f 91       	pop	r22
     cc6:	5f 91       	pop	r21
     cc8:	4f 91       	pop	r20
     cca:	3f 91       	pop	r19
     ccc:	2f 91       	pop	r18
     cce:	0f 90       	pop	r0
     cd0:	0b be       	out	0x3b, r0	; 59
     cd2:	0f 90       	pop	r0
     cd4:	0f be       	out	0x3f, r0	; 63
     cd6:	0f 90       	pop	r0
     cd8:	1f 90       	pop	r1
     cda:	18 95       	reti

00000cdc <__vector_9>:
     cdc:	1f 92       	push	r1
     cde:	0f 92       	push	r0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	0f 92       	push	r0
     ce4:	11 24       	eor	r1, r1
     ce6:	0b b6       	in	r0, 0x3b	; 59
     ce8:	0f 92       	push	r0
     cea:	2f 93       	push	r18
     cec:	3f 93       	push	r19
     cee:	4f 93       	push	r20
     cf0:	5f 93       	push	r21
     cf2:	6f 93       	push	r22
     cf4:	7f 93       	push	r23
     cf6:	8f 93       	push	r24
     cf8:	9f 93       	push	r25
     cfa:	af 93       	push	r26
     cfc:	bf 93       	push	r27
     cfe:	ef 93       	push	r30
     d00:	ff 93       	push	r31
     d02:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     d06:	63 e0       	ldi	r22, 0x03	; 3
     d08:	d4 db       	rcall	.-2136   	; 0x4b2 <checkBit>
     d0a:	81 11       	cpse	r24, r1
     d0c:	0b c0       	rjmp	.+22     	; 0xd24 <__vector_9+0x48>
     d0e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     d12:	83 70       	andi	r24, 0x03	; 3
     d14:	82 30       	cpi	r24, 0x02	; 2
     d16:	31 f0       	breq	.+12     	; 0xd24 <__vector_9+0x48>
     d18:	e0 91 6d 01 	lds	r30, 0x016D	; 0x80016d <p_timer2Callbacks+0x2>
     d1c:	f0 91 6e 01 	lds	r31, 0x016E	; 0x80016e <p_timer2Callbacks+0x3>
     d20:	09 95       	icall
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <__vector_9+0x52>
     d24:	e0 91 6b 01 	lds	r30, 0x016B	; 0x80016b <p_timer2Callbacks>
     d28:	f0 91 6c 01 	lds	r31, 0x016C	; 0x80016c <p_timer2Callbacks+0x1>
     d2c:	09 95       	icall
     d2e:	ff 91       	pop	r31
     d30:	ef 91       	pop	r30
     d32:	bf 91       	pop	r27
     d34:	af 91       	pop	r26
     d36:	9f 91       	pop	r25
     d38:	8f 91       	pop	r24
     d3a:	7f 91       	pop	r23
     d3c:	6f 91       	pop	r22
     d3e:	5f 91       	pop	r21
     d40:	4f 91       	pop	r20
     d42:	3f 91       	pop	r19
     d44:	2f 91       	pop	r18
     d46:	0f 90       	pop	r0
     d48:	0b be       	out	0x3b, r0	; 59
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	0f 90       	pop	r0
     d50:	1f 90       	pop	r1
     d52:	18 95       	reti

00000d54 <__vector_10>:
     d54:	1f 92       	push	r1
     d56:	0f 92       	push	r0
     d58:	0f b6       	in	r0, 0x3f	; 63
     d5a:	0f 92       	push	r0
     d5c:	11 24       	eor	r1, r1
     d5e:	0b b6       	in	r0, 0x3b	; 59
     d60:	0f 92       	push	r0
     d62:	2f 93       	push	r18
     d64:	3f 93       	push	r19
     d66:	4f 93       	push	r20
     d68:	5f 93       	push	r21
     d6a:	6f 93       	push	r22
     d6c:	7f 93       	push	r23
     d6e:	8f 93       	push	r24
     d70:	9f 93       	push	r25
     d72:	af 93       	push	r26
     d74:	bf 93       	push	r27
     d76:	ef 93       	push	r30
     d78:	ff 93       	push	r31
     d7a:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <p_timer2Callbacks+0x4>
     d7e:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <p_timer2Callbacks+0x5>
     d82:	09 95       	icall
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0b be       	out	0x3b, r0	; 59
     da0:	0f 90       	pop	r0
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	0f 90       	pop	r0
     da6:	1f 90       	pop	r1
     da8:	18 95       	reti

00000daa <timer_init>:
     daa:	ef 92       	push	r14
     dac:	ff 92       	push	r15
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	29 97       	sbiw	r28, 0x09	; 9
     dbc:	0f b6       	in	r0, 0x3f	; 63
     dbe:	f8 94       	cli
     dc0:	de bf       	out	0x3e, r29	; 62
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	cd bf       	out	0x3d, r28	; 61
     dc6:	4d 83       	std	Y+5, r20	; 0x05
     dc8:	5e 83       	std	Y+6, r21	; 0x06
     dca:	6f 83       	std	Y+7, r22	; 0x07
     dcc:	78 87       	std	Y+8, r23	; 0x08
     dce:	89 87       	std	Y+9, r24	; 0x09
     dd0:	0e 81       	ldd	r16, Y+6	; 0x06
     dd2:	1f 81       	ldd	r17, Y+7	; 0x07
     dd4:	28 85       	ldd	r18, Y+8	; 0x08
     dd6:	39 85       	ldd	r19, Y+9	; 0x09
     dd8:	19 82       	std	Y+1, r1	; 0x01
     dda:	1a 82       	std	Y+2, r1	; 0x02
     ddc:	1b 82       	std	Y+3, r1	; 0x03
     dde:	1c 82       	std	Y+4, r1	; 0x04
     de0:	41 30       	cpi	r20, 0x01	; 1
     de2:	21 f0       	breq	.+8      	; 0xdec <timer_init+0x42>
     de4:	42 30       	cpi	r20, 0x02	; 2
     de6:	09 f4       	brne	.+2      	; 0xdea <timer_init+0x40>
     de8:	95 c0       	rjmp	.+298    	; 0xf14 <timer_init+0x16a>
     dea:	1d c1       	rjmp	.+570    	; 0x1026 <timer_init+0x27c>
     dec:	09 3f       	cpi	r16, 0xF9	; 249
     dee:	8f ef       	ldi	r24, 0xFF	; 255
     df0:	18 07       	cpc	r17, r24
     df2:	28 07       	cpc	r18, r24
     df4:	31 05       	cpc	r19, r1
     df6:	28 f0       	brcs	.+10     	; 0xe02 <timer_init+0x58>
     df8:	09 83       	std	Y+1, r16	; 0x01
     dfa:	1a 83       	std	Y+2, r17	; 0x02
     dfc:	2b 83       	std	Y+3, r18	; 0x03
     dfe:	3c 83       	std	Y+4, r19	; 0x04
     e00:	15 c0       	rjmp	.+42     	; 0xe2c <timer_init+0x82>
     e02:	ce 01       	movw	r24, r28
     e04:	01 96       	adiw	r24, 0x01	; 1
     e06:	7c 01       	movw	r14, r24
     e08:	4d 81       	ldd	r20, Y+5	; 0x05
     e0a:	5e 81       	ldd	r21, Y+6	; 0x06
     e0c:	6f 81       	ldd	r22, Y+7	; 0x07
     e0e:	78 85       	ldd	r23, Y+8	; 0x08
     e10:	89 85       	ldd	r24, Y+9	; 0x09
     e12:	b0 dc       	rcall	.-1696   	; 0x774 <calculateTopRegister>
     e14:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e18:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e1c:	64 e0       	ldi	r22, 0x04	; 4
     e1e:	81 e8       	ldi	r24, 0x81	; 129
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	2e db       	rcall	.-2468   	; 0x480 <setBit>
     e24:	63 e0       	ldi	r22, 0x03	; 3
     e26:	81 e8       	ldi	r24, 0x81	; 129
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	2a db       	rcall	.-2476   	; 0x480 <setBit>
     e2c:	89 81       	ldd	r24, Y+1	; 0x01
     e2e:	9a 81       	ldd	r25, Y+2	; 0x02
     e30:	ab 81       	ldd	r26, Y+3	; 0x03
     e32:	bc 81       	ldd	r27, Y+4	; 0x04
     e34:	8c 3f       	cpi	r24, 0xFC	; 252
     e36:	2f ef       	ldi	r18, 0xFF	; 255
     e38:	92 07       	cpc	r25, r18
     e3a:	a2 07       	cpc	r26, r18
     e3c:	b1 05       	cpc	r27, r1
     e3e:	59 f1       	breq	.+86     	; 0xe96 <timer_init+0xec>
     e40:	60 f4       	brcc	.+24     	; 0xe5a <timer_init+0xb0>
     e42:	89 3f       	cpi	r24, 0xF9	; 249
     e44:	2f ef       	ldi	r18, 0xFF	; 255
     e46:	92 07       	cpc	r25, r18
     e48:	a2 07       	cpc	r26, r18
     e4a:	b1 05       	cpc	r27, r1
     e4c:	91 f0       	breq	.+36     	; 0xe72 <timer_init+0xc8>
     e4e:	8a 3f       	cpi	r24, 0xFA	; 250
     e50:	9f 4f       	sbci	r25, 0xFF	; 255
     e52:	af 4f       	sbci	r26, 0xFF	; 255
     e54:	b1 05       	cpc	r27, r1
     e56:	b1 f0       	breq	.+44     	; 0xe84 <timer_init+0xda>
     e58:	38 c0       	rjmp	.+112    	; 0xeca <timer_init+0x120>
     e5a:	8e 3f       	cpi	r24, 0xFE	; 254
     e5c:	2f ef       	ldi	r18, 0xFF	; 255
     e5e:	92 07       	cpc	r25, r18
     e60:	a2 07       	cpc	r26, r18
     e62:	b1 05       	cpc	r27, r1
     e64:	09 f1       	breq	.+66     	; 0xea8 <timer_init+0xfe>
     e66:	8f 3f       	cpi	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	af 4f       	sbci	r26, 0xFF	; 255
     e6c:	b1 05       	cpc	r27, r1
     e6e:	29 f1       	breq	.+74     	; 0xeba <timer_init+0x110>
     e70:	2c c0       	rjmp	.+88     	; 0xeca <timer_init+0x120>
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	a0 e0       	ldi	r26, 0x00	; 0
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	89 83       	std	Y+1, r24	; 0x01
     e7c:	9a 83       	std	Y+2, r25	; 0x02
     e7e:	ab 83       	std	Y+3, r26	; 0x03
     e80:	bc 83       	std	Y+4, r27	; 0x04
     e82:	23 c0       	rjmp	.+70     	; 0xeca <timer_init+0x120>
     e84:	82 e0       	ldi	r24, 0x02	; 2
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	89 83       	std	Y+1, r24	; 0x01
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	ab 83       	std	Y+3, r26	; 0x03
     e92:	bc 83       	std	Y+4, r27	; 0x04
     e94:	1a c0       	rjmp	.+52     	; 0xeca <timer_init+0x120>
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	90 e0       	ldi	r25, 0x00	; 0
     e9a:	a0 e0       	ldi	r26, 0x00	; 0
     e9c:	b0 e0       	ldi	r27, 0x00	; 0
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	9a 83       	std	Y+2, r25	; 0x02
     ea2:	ab 83       	std	Y+3, r26	; 0x03
     ea4:	bc 83       	std	Y+4, r27	; 0x04
     ea6:	11 c0       	rjmp	.+34     	; 0xeca <timer_init+0x120>
     ea8:	84 e0       	ldi	r24, 0x04	; 4
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	a0 e0       	ldi	r26, 0x00	; 0
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	9a 83       	std	Y+2, r25	; 0x02
     eb4:	ab 83       	std	Y+3, r26	; 0x03
     eb6:	bc 83       	std	Y+4, r27	; 0x04
     eb8:	08 c0       	rjmp	.+16     	; 0xeca <timer_init+0x120>
     eba:	85 e0       	ldi	r24, 0x05	; 5
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	a0 e0       	ldi	r26, 0x00	; 0
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	ab 83       	std	Y+3, r26	; 0x03
     ec8:	bc 83       	std	Y+4, r27	; 0x04
     eca:	49 81       	ldd	r20, Y+1	; 0x01
     ecc:	5a 81       	ldd	r21, Y+2	; 0x02
     ece:	6b 81       	ldd	r22, Y+3	; 0x03
     ed0:	7c 81       	ldd	r23, Y+4	; 0x04
     ed2:	76 95       	lsr	r23
     ed4:	67 95       	ror	r22
     ed6:	57 95       	ror	r21
     ed8:	47 95       	ror	r20
     eda:	76 95       	lsr	r23
     edc:	67 95       	ror	r22
     ede:	57 95       	ror	r21
     ee0:	47 95       	ror	r20
     ee2:	41 70       	andi	r20, 0x01	; 1
     ee4:	62 e0       	ldi	r22, 0x02	; 2
     ee6:	89 e6       	ldi	r24, 0x69	; 105
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	b2 da       	rcall	.-2716   	; 0x450 <updateBit>
     eec:	49 81       	ldd	r20, Y+1	; 0x01
     eee:	5a 81       	ldd	r21, Y+2	; 0x02
     ef0:	6b 81       	ldd	r22, Y+3	; 0x03
     ef2:	7c 81       	ldd	r23, Y+4	; 0x04
     ef4:	76 95       	lsr	r23
     ef6:	67 95       	ror	r22
     ef8:	57 95       	ror	r21
     efa:	47 95       	ror	r20
     efc:	41 70       	andi	r20, 0x01	; 1
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	89 e6       	ldi	r24, 0x69	; 105
     f02:	91 e0       	ldi	r25, 0x01	; 1
     f04:	a5 da       	rcall	.-2742   	; 0x450 <updateBit>
     f06:	49 81       	ldd	r20, Y+1	; 0x01
     f08:	41 70       	andi	r20, 0x01	; 1
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	89 e6       	ldi	r24, 0x69	; 105
     f0e:	91 e0       	ldi	r25, 0x01	; 1
     f10:	9f da       	rcall	.-2754   	; 0x450 <updateBit>
     f12:	89 c0       	rjmp	.+274    	; 0x1026 <timer_init+0x27c>
     f14:	09 3f       	cpi	r16, 0xF9	; 249
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	18 07       	cpc	r17, r24
     f1a:	28 07       	cpc	r18, r24
     f1c:	31 05       	cpc	r19, r1
     f1e:	28 f0       	brcs	.+10     	; 0xf2a <timer_init+0x180>
     f20:	09 83       	std	Y+1, r16	; 0x01
     f22:	1a 83       	std	Y+2, r17	; 0x02
     f24:	2b 83       	std	Y+3, r18	; 0x03
     f26:	3c 83       	std	Y+4, r19	; 0x04
     f28:	0f c0       	rjmp	.+30     	; 0xf48 <timer_init+0x19e>
     f2a:	ce 01       	movw	r24, r28
     f2c:	01 96       	adiw	r24, 0x01	; 1
     f2e:	7c 01       	movw	r14, r24
     f30:	4d 81       	ldd	r20, Y+5	; 0x05
     f32:	5e 81       	ldd	r21, Y+6	; 0x06
     f34:	6f 81       	ldd	r22, Y+7	; 0x07
     f36:	78 85       	ldd	r23, Y+8	; 0x08
     f38:	89 85       	ldd	r24, Y+9	; 0x09
     f3a:	1c dc       	rcall	.-1992   	; 0x774 <calculateTopRegister>
     f3c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     f40:	61 e0       	ldi	r22, 0x01	; 1
     f42:	80 eb       	ldi	r24, 0xB0	; 176
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9c da       	rcall	.-2760   	; 0x480 <setBit>
     f48:	89 81       	ldd	r24, Y+1	; 0x01
     f4a:	9a 81       	ldd	r25, Y+2	; 0x02
     f4c:	ab 81       	ldd	r26, Y+3	; 0x03
     f4e:	bc 81       	ldd	r27, Y+4	; 0x04
     f50:	fc 01       	movw	r30, r24
     f52:	37 96       	adiw	r30, 0x07	; 7
     f54:	e7 30       	cpi	r30, 0x07	; 7
     f56:	f1 05       	cpc	r31, r1
     f58:	08 f0       	brcs	.+2      	; 0xf5c <timer_init+0x1b2>
     f5a:	41 c0       	rjmp	.+130    	; 0xfde <timer_init+0x234>
     f5c:	ea 5b       	subi	r30, 0xBA	; 186
     f5e:	ff 4f       	sbci	r31, 0xFF	; 255
     f60:	22 c7       	rjmp	.+3652   	; 0x1da6 <__tablejump2__>
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	ab 83       	std	Y+3, r26	; 0x03
     f70:	bc 83       	std	Y+4, r27	; 0x04
     f72:	35 c0       	rjmp	.+106    	; 0xfde <timer_init+0x234>
     f74:	82 e0       	ldi	r24, 0x02	; 2
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	a0 e0       	ldi	r26, 0x00	; 0
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	9a 83       	std	Y+2, r25	; 0x02
     f80:	ab 83       	std	Y+3, r26	; 0x03
     f82:	bc 83       	std	Y+4, r27	; 0x04
     f84:	2c c0       	rjmp	.+88     	; 0xfde <timer_init+0x234>
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	a0 e0       	ldi	r26, 0x00	; 0
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	9a 83       	std	Y+2, r25	; 0x02
     f92:	ab 83       	std	Y+3, r26	; 0x03
     f94:	bc 83       	std	Y+4, r27	; 0x04
     f96:	23 c0       	rjmp	.+70     	; 0xfde <timer_init+0x234>
     f98:	84 e0       	ldi	r24, 0x04	; 4
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	89 83       	std	Y+1, r24	; 0x01
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	ab 83       	std	Y+3, r26	; 0x03
     fa6:	bc 83       	std	Y+4, r27	; 0x04
     fa8:	1a c0       	rjmp	.+52     	; 0xfde <timer_init+0x234>
     faa:	85 e0       	ldi	r24, 0x05	; 5
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	a0 e0       	ldi	r26, 0x00	; 0
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	9a 83       	std	Y+2, r25	; 0x02
     fb6:	ab 83       	std	Y+3, r26	; 0x03
     fb8:	bc 83       	std	Y+4, r27	; 0x04
     fba:	11 c0       	rjmp	.+34     	; 0xfde <timer_init+0x234>
     fbc:	86 e0       	ldi	r24, 0x06	; 6
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	a0 e0       	ldi	r26, 0x00	; 0
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	ab 83       	std	Y+3, r26	; 0x03
     fca:	bc 83       	std	Y+4, r27	; 0x04
     fcc:	08 c0       	rjmp	.+16     	; 0xfde <timer_init+0x234>
     fce:	87 e0       	ldi	r24, 0x07	; 7
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	a0 e0       	ldi	r26, 0x00	; 0
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	9a 83       	std	Y+2, r25	; 0x02
     fda:	ab 83       	std	Y+3, r26	; 0x03
     fdc:	bc 83       	std	Y+4, r27	; 0x04
     fde:	49 81       	ldd	r20, Y+1	; 0x01
     fe0:	5a 81       	ldd	r21, Y+2	; 0x02
     fe2:	6b 81       	ldd	r22, Y+3	; 0x03
     fe4:	7c 81       	ldd	r23, Y+4	; 0x04
     fe6:	76 95       	lsr	r23
     fe8:	67 95       	ror	r22
     fea:	57 95       	ror	r21
     fec:	47 95       	ror	r20
     fee:	76 95       	lsr	r23
     ff0:	67 95       	ror	r22
     ff2:	57 95       	ror	r21
     ff4:	47 95       	ror	r20
     ff6:	41 70       	andi	r20, 0x01	; 1
     ff8:	62 e0       	ldi	r22, 0x02	; 2
     ffa:	8a e6       	ldi	r24, 0x6A	; 106
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	28 da       	rcall	.-2992   	; 0x450 <updateBit>
    1000:	49 81       	ldd	r20, Y+1	; 0x01
    1002:	5a 81       	ldd	r21, Y+2	; 0x02
    1004:	6b 81       	ldd	r22, Y+3	; 0x03
    1006:	7c 81       	ldd	r23, Y+4	; 0x04
    1008:	76 95       	lsr	r23
    100a:	67 95       	ror	r22
    100c:	57 95       	ror	r21
    100e:	47 95       	ror	r20
    1010:	41 70       	andi	r20, 0x01	; 1
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	8a e6       	ldi	r24, 0x6A	; 106
    1016:	91 e0       	ldi	r25, 0x01	; 1
    1018:	1b da       	rcall	.-3018   	; 0x450 <updateBit>
    101a:	49 81       	ldd	r20, Y+1	; 0x01
    101c:	41 70       	andi	r20, 0x01	; 1
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	8a e6       	ldi	r24, 0x6A	; 106
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	15 da       	rcall	.-3030   	; 0x450 <updateBit>
    1026:	29 96       	adiw	r28, 0x09	; 9
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	de bf       	out	0x3e, r29	; 62
    102e:	0f be       	out	0x3f, r0	; 63
    1030:	cd bf       	out	0x3d, r28	; 61
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	0f 91       	pop	r16
    103a:	ff 90       	pop	r15
    103c:	ef 90       	pop	r14
    103e:	08 95       	ret

00001040 <timer_start>:
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	00 d0       	rcall	.+0      	; 0x1046 <timer_start+0x6>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <timer_start+0x8>
    1048:	1f 92       	push	r1
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	41 30       	cpi	r20, 0x01	; 1
    1050:	19 f0       	breq	.+6      	; 0x1058 <timer_start+0x18>
    1052:	42 30       	cpi	r20, 0x02	; 2
    1054:	d1 f0       	breq	.+52     	; 0x108a <timer_start+0x4a>
    1056:	31 c0       	rjmp	.+98     	; 0x10ba <timer_start+0x7a>
    1058:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <u8_timer1ClockSource>
    105c:	42 fb       	bst	r20, 2
    105e:	44 27       	eor	r20, r20
    1060:	40 f9       	bld	r20, 0
    1062:	62 e0       	ldi	r22, 0x02	; 2
    1064:	81 e8       	ldi	r24, 0x81	; 129
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	f3 d9       	rcall	.-3098   	; 0x450 <updateBit>
    106a:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <u8_timer1ClockSource>
    106e:	46 95       	lsr	r20
    1070:	41 70       	andi	r20, 0x01	; 1
    1072:	61 e0       	ldi	r22, 0x01	; 1
    1074:	81 e8       	ldi	r24, 0x81	; 129
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	eb d9       	rcall	.-3114   	; 0x450 <updateBit>
    107a:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <u8_timer1ClockSource>
    107e:	41 70       	andi	r20, 0x01	; 1
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	81 e8       	ldi	r24, 0x81	; 129
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	e4 d9       	rcall	.-3128   	; 0x450 <updateBit>
    1088:	18 c0       	rjmp	.+48     	; 0x10ba <timer_start+0x7a>
    108a:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <u8_timer2ClockSource>
    108e:	42 fb       	bst	r20, 2
    1090:	44 27       	eor	r20, r20
    1092:	40 f9       	bld	r20, 0
    1094:	62 e0       	ldi	r22, 0x02	; 2
    1096:	81 eb       	ldi	r24, 0xB1	; 177
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	da d9       	rcall	.-3148   	; 0x450 <updateBit>
    109c:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <u8_timer2ClockSource>
    10a0:	46 95       	lsr	r20
    10a2:	41 70       	andi	r20, 0x01	; 1
    10a4:	61 e0       	ldi	r22, 0x01	; 1
    10a6:	81 eb       	ldi	r24, 0xB1	; 177
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	d2 d9       	rcall	.-3164   	; 0x450 <updateBit>
    10ac:	40 91 6a 01 	lds	r20, 0x016A	; 0x80016a <u8_timer2ClockSource>
    10b0:	41 70       	andi	r20, 0x01	; 1
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	81 eb       	ldi	r24, 0xB1	; 177
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	cb d9       	rcall	.-3178   	; 0x450 <updateBit>
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	0f 90       	pop	r0
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <timer_enableInterrupt>:
    10ca:	cf 92       	push	r12
    10cc:	df 92       	push	r13
    10ce:	ef 92       	push	r14
    10d0:	ff 92       	push	r15
    10d2:	0f 93       	push	r16
    10d4:	1f 93       	push	r17
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	00 d0       	rcall	.+0      	; 0x10dc <timer_enableInterrupt+0x12>
    10dc:	00 d0       	rcall	.+0      	; 0x10de <timer_enableInterrupt+0x14>
    10de:	1f 92       	push	r1
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	49 83       	std	Y+1, r20	; 0x01
    10e6:	5a 83       	std	Y+2, r21	; 0x02
    10e8:	6b 83       	std	Y+3, r22	; 0x03
    10ea:	7c 83       	std	Y+4, r23	; 0x04
    10ec:	8d 83       	std	Y+5, r24	; 0x05
    10ee:	02 2f       	mov	r16, r18
    10f0:	41 30       	cpi	r20, 0x01	; 1
    10f2:	21 f0       	breq	.+8      	; 0x10fc <timer_enableInterrupt+0x32>
    10f4:	42 30       	cpi	r20, 0x02	; 2
    10f6:	09 f4       	brne	.+2      	; 0x10fa <timer_enableInterrupt+0x30>
    10f8:	5e c0       	rjmp	.+188    	; 0x11b6 <timer_enableInterrupt+0xec>
    10fa:	95 c0       	rjmp	.+298    	; 0x1226 <timer_enableInterrupt+0x15c>
    10fc:	0f 2e       	mov	r0, r31
    10fe:	f1 e8       	ldi	r31, 0x81	; 129
    1100:	ef 2e       	mov	r14, r31
    1102:	f1 2c       	mov	r15, r1
    1104:	f0 2d       	mov	r31, r0
    1106:	f7 01       	movw	r30, r14
    1108:	80 81       	ld	r24, Z
    110a:	64 e0       	ldi	r22, 0x04	; 4
    110c:	d2 d9       	rcall	.-3164   	; 0x4b2 <checkBit>
    110e:	18 2f       	mov	r17, r24
    1110:	f7 01       	movw	r30, r14
    1112:	80 81       	ld	r24, Z
    1114:	63 e0       	ldi	r22, 0x03	; 3
    1116:	cd d9       	rcall	.-3174   	; 0x4b2 <checkBit>
    1118:	11 0f       	add	r17, r17
    111a:	11 0f       	add	r17, r17
    111c:	11 0f       	add	r17, r17
    111e:	f4 e0       	ldi	r31, 0x04	; 4
    1120:	8f 9f       	mul	r24, r31
    1122:	c0 01       	movw	r24, r0
    1124:	11 24       	eor	r1, r1
    1126:	18 2b       	or	r17, r24
    1128:	68 94       	set
    112a:	cc 24       	eor	r12, r12
    112c:	c7 f8       	bld	r12, 7
    112e:	d1 2c       	mov	r13, r1
    1130:	f6 01       	movw	r30, r12
    1132:	80 81       	ld	r24, Z
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	bd d9       	rcall	.-3206   	; 0x4b2 <checkBit>
    1138:	f8 2e       	mov	r15, r24
    113a:	f6 01       	movw	r30, r12
    113c:	80 81       	ld	r24, Z
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	b8 d9       	rcall	.-3216   	; 0x4b2 <checkBit>
    1142:	ff 0c       	add	r15, r15
    1144:	81 2b       	or	r24, r17
    1146:	8f 29       	or	r24, r15
    1148:	01 30       	cpi	r16, 0x01	; 1
    114a:	d9 f0       	breq	.+54     	; 0x1182 <timer_enableInterrupt+0xb8>
    114c:	28 f0       	brcs	.+10     	; 0x1158 <timer_enableInterrupt+0x8e>
    114e:	02 30       	cpi	r16, 0x02	; 2
    1150:	21 f1       	breq	.+72     	; 0x119a <timer_enableInterrupt+0xd0>
    1152:	03 30       	cpi	r16, 0x03	; 3
    1154:	39 f1       	breq	.+78     	; 0x11a4 <timer_enableInterrupt+0xda>
    1156:	67 c0       	rjmp	.+206    	; 0x1226 <timer_enableInterrupt+0x15c>
    1158:	88 30       	cpi	r24, 0x08	; 8
    115a:	38 f4       	brcc	.+14     	; 0x116a <timer_enableInterrupt+0xa0>
    115c:	84 30       	cpi	r24, 0x04	; 4
    115e:	61 f0       	breq	.+24     	; 0x1178 <timer_enableInterrupt+0xae>
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	8f e6       	ldi	r24, 0x6F	; 111
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	8c d9       	rcall	.-3304   	; 0x480 <setBit>
    1168:	5e c0       	rjmp	.+188    	; 0x1226 <timer_enableInterrupt+0x15c>
    116a:	80 fd       	sbrc	r24, 0
    116c:	05 c0       	rjmp	.+10     	; 0x1178 <timer_enableInterrupt+0xae>
    116e:	65 e0       	ldi	r22, 0x05	; 5
    1170:	8f e6       	ldi	r24, 0x6F	; 111
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	85 d9       	rcall	.-3318   	; 0x480 <setBit>
    1176:	57 c0       	rjmp	.+174    	; 0x1226 <timer_enableInterrupt+0x15c>
    1178:	61 e0       	ldi	r22, 0x01	; 1
    117a:	8f e6       	ldi	r24, 0x6F	; 111
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	80 d9       	rcall	.-3328   	; 0x480 <setBit>
    1180:	52 c0       	rjmp	.+164    	; 0x1226 <timer_enableInterrupt+0x15c>
    1182:	88 30       	cpi	r24, 0x08	; 8
    1184:	18 f4       	brcc	.+6      	; 0x118c <timer_enableInterrupt+0xc2>
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	19 f4       	brne	.+6      	; 0x1190 <timer_enableInterrupt+0xc6>
    118a:	4d c0       	rjmp	.+154    	; 0x1226 <timer_enableInterrupt+0x15c>
    118c:	80 fd       	sbrc	r24, 0
    118e:	4b c0       	rjmp	.+150    	; 0x1226 <timer_enableInterrupt+0x15c>
    1190:	61 e0       	ldi	r22, 0x01	; 1
    1192:	8f e6       	ldi	r24, 0x6F	; 111
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	74 d9       	rcall	.-3352   	; 0x480 <setBit>
    1198:	46 c0       	rjmp	.+140    	; 0x1226 <timer_enableInterrupt+0x15c>
    119a:	62 e0       	ldi	r22, 0x02	; 2
    119c:	8f e6       	ldi	r24, 0x6F	; 111
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	6f d9       	rcall	.-3362   	; 0x480 <setBit>
    11a2:	41 c0       	rjmp	.+130    	; 0x1226 <timer_enableInterrupt+0x15c>
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	10 f0       	brcs	.+4      	; 0x11ac <timer_enableInterrupt+0xe2>
    11a8:	80 ff       	sbrs	r24, 0
    11aa:	3d c0       	rjmp	.+122    	; 0x1226 <timer_enableInterrupt+0x15c>
    11ac:	65 e0       	ldi	r22, 0x05	; 5
    11ae:	8f e6       	ldi	r24, 0x6F	; 111
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	66 d9       	rcall	.-3380   	; 0x480 <setBit>
    11b4:	38 c0       	rjmp	.+112    	; 0x1226 <timer_enableInterrupt+0x15c>
    11b6:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    11ba:	63 e0       	ldi	r22, 0x03	; 3
    11bc:	7a d9       	rcall	.-3340   	; 0x4b2 <checkBit>
    11be:	18 2f       	mov	r17, r24
    11c0:	0f 2e       	mov	r0, r31
    11c2:	f0 eb       	ldi	r31, 0xB0	; 176
    11c4:	ef 2e       	mov	r14, r31
    11c6:	f1 2c       	mov	r15, r1
    11c8:	f0 2d       	mov	r31, r0
    11ca:	f7 01       	movw	r30, r14
    11cc:	80 81       	ld	r24, Z
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	70 d9       	rcall	.-3360   	; 0x4b2 <checkBit>
    11d2:	11 0f       	add	r17, r17
    11d4:	11 0f       	add	r17, r17
    11d6:	88 0f       	add	r24, r24
    11d8:	18 2b       	or	r17, r24
    11da:	f7 01       	movw	r30, r14
    11dc:	80 81       	ld	r24, Z
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	68 d9       	rcall	.-3376   	; 0x4b2 <checkBit>
    11e2:	81 2b       	or	r24, r17
    11e4:	01 30       	cpi	r16, 0x01	; 1
    11e6:	91 f0       	breq	.+36     	; 0x120c <timer_enableInterrupt+0x142>
    11e8:	18 f0       	brcs	.+6      	; 0x11f0 <timer_enableInterrupt+0x126>
    11ea:	02 30       	cpi	r16, 0x02	; 2
    11ec:	c1 f0       	breq	.+48     	; 0x121e <timer_enableInterrupt+0x154>
    11ee:	1b c0       	rjmp	.+54     	; 0x1226 <timer_enableInterrupt+0x15c>
    11f0:	84 30       	cpi	r24, 0x04	; 4
    11f2:	38 f4       	brcc	.+14     	; 0x1202 <timer_enableInterrupt+0x138>
    11f4:	82 30       	cpi	r24, 0x02	; 2
    11f6:	29 f0       	breq	.+10     	; 0x1202 <timer_enableInterrupt+0x138>
    11f8:	60 e0       	ldi	r22, 0x00	; 0
    11fa:	80 e7       	ldi	r24, 0x70	; 112
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	40 d9       	rcall	.-3456   	; 0x480 <setBit>
    1200:	12 c0       	rjmp	.+36     	; 0x1226 <timer_enableInterrupt+0x15c>
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	80 e7       	ldi	r24, 0x70	; 112
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	3b d9       	rcall	.-3466   	; 0x480 <setBit>
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <timer_enableInterrupt+0x15c>
    120c:	84 30       	cpi	r24, 0x04	; 4
    120e:	58 f4       	brcc	.+22     	; 0x1226 <timer_enableInterrupt+0x15c>
    1210:	82 30       	cpi	r24, 0x02	; 2
    1212:	49 f0       	breq	.+18     	; 0x1226 <timer_enableInterrupt+0x15c>
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	80 e7       	ldi	r24, 0x70	; 112
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	32 d9       	rcall	.-3484   	; 0x480 <setBit>
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <timer_enableInterrupt+0x15c>
    121e:	62 e0       	ldi	r22, 0x02	; 2
    1220:	80 e7       	ldi	r24, 0x70	; 112
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	2d d9       	rcall	.-3494   	; 0x480 <setBit>
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	ff 90       	pop	r15
    123a:	ef 90       	pop	r14
    123c:	df 90       	pop	r13
    123e:	cf 90       	pop	r12
    1240:	08 95       	ret

00001242 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    1242:	0f 93       	push	r16
    1244:	1f 93       	push	r17
    1246:	cf 93       	push	r28
    1248:	df 93       	push	r29
    124a:	00 d0       	rcall	.+0      	; 0x124c <timer_attachInterrupt+0xa>
    124c:	00 d0       	rcall	.+0      	; 0x124e <timer_attachInterrupt+0xc>
    124e:	1f 92       	push	r1
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    1254:	41 30       	cpi	r20, 0x01	; 1
    1256:	19 f0       	breq	.+6      	; 0x125e <timer_attachInterrupt+0x1c>
    1258:	42 30       	cpi	r20, 0x02	; 2
    125a:	51 f0       	breq	.+20     	; 0x1270 <timer_attachInterrupt+0x2e>
    125c:	11 c0       	rjmp	.+34     	; 0x1280 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    125e:	e2 2f       	mov	r30, r18
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	ee 0f       	add	r30, r30
    1264:	ff 1f       	adc	r31, r31
    1266:	ef 59       	subi	r30, 0x9F	; 159
    1268:	fe 4f       	sbci	r31, 0xFE	; 254
    126a:	11 83       	std	Z+1, r17	; 0x01
    126c:	00 83       	st	Z, r16
		#endif
			break;
    126e:	08 c0       	rjmp	.+16     	; 0x1280 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    1270:	e2 2f       	mov	r30, r18
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	ee 0f       	add	r30, r30
    1276:	ff 1f       	adc	r31, r31
    1278:	e5 59       	subi	r30, 0x95	; 149
    127a:	fe 4f       	sbci	r31, 0xFE	; 254
    127c:	11 83       	std	Z+1, r17	; 0x01
    127e:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	df 91       	pop	r29
    128c:	cf 91       	pop	r28
    128e:	1f 91       	pop	r17
    1290:	0f 91       	pop	r16
    1292:	08 95       	ret

00001294 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    1294:	4f 92       	push	r4
    1296:	5f 92       	push	r5
    1298:	6f 92       	push	r6
    129a:	7f 92       	push	r7
    129c:	8f 92       	push	r8
    129e:	9f 92       	push	r9
    12a0:	af 92       	push	r10
    12a2:	bf 92       	push	r11
    12a4:	cf 92       	push	r12
    12a6:	df 92       	push	r13
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
    12b0:	4b 01       	movw	r8, r22
    12b2:	5c 01       	movw	r10, r24
    12b4:	ea 01       	movw	r28, r20
    12b6:	0f 2e       	mov	r0, r31
    12b8:	f0 e2       	ldi	r31, 0x20	; 32
    12ba:	4f 2e       	mov	r4, r31
    12bc:	f1 ea       	ldi	r31, 0xA1	; 161
    12be:	5f 2e       	mov	r5, r31
    12c0:	f7 e0       	ldi	r31, 0x07	; 7
    12c2:	6f 2e       	mov	r6, r31
    12c4:	71 2c       	mov	r7, r1
    12c6:	f0 2d       	mov	r31, r0
    12c8:	c3 01       	movw	r24, r6
    12ca:	b2 01       	movw	r22, r4
    12cc:	a5 01       	movw	r20, r10
    12ce:	94 01       	movw	r18, r8
    12d0:	48 d5       	rcall	.+2704   	; 0x1d62 <__udivmodsi4>
    12d2:	69 01       	movw	r12, r18
    12d4:	7a 01       	movw	r14, r20
    12d6:	c3 01       	movw	r24, r6
    12d8:	b2 01       	movw	r22, r4
    12da:	43 d5       	rcall	.+2694   	; 0x1d62 <__udivmodsi4>
    12dc:	ca 01       	movw	r24, r20
    12de:	b9 01       	movw	r22, r18
    12e0:	a5 01       	movw	r20, r10
    12e2:	94 01       	movw	r18, r8
    12e4:	ee d8       	rcall	.-3620   	; 0x4c2 <calculateError>
    12e6:	44 97       	sbiw	r24, 0x14	; 20
    12e8:	30 f4       	brcc	.+12     	; 0x12f6 <calculateUBRR+0x62>
    12ea:	d7 01       	movw	r26, r14
    12ec:	c6 01       	movw	r24, r12
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	a1 09       	sbc	r26, r1
    12f2:	b1 09       	sbc	r27, r1
    12f4:	0e c0       	rjmp	.+28     	; 0x1312 <calculateUBRR+0x7e>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	88 83       	st	Y, r24
    12fa:	60 e4       	ldi	r22, 0x40	; 64
    12fc:	72 e4       	ldi	r23, 0x42	; 66
    12fe:	8f e0       	ldi	r24, 0x0F	; 15
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	a5 01       	movw	r20, r10
    1304:	94 01       	movw	r18, r8
    1306:	2d d5       	rcall	.+2650   	; 0x1d62 <__udivmodsi4>
    1308:	da 01       	movw	r26, r20
    130a:	c9 01       	movw	r24, r18
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	a1 09       	sbc	r26, r1
    1310:	b1 09       	sbc	r27, r1
    1312:	df 91       	pop	r29
    1314:	cf 91       	pop	r28
    1316:	ff 90       	pop	r15
    1318:	ef 90       	pop	r14
    131a:	df 90       	pop	r13
    131c:	cf 90       	pop	r12
    131e:	bf 90       	pop	r11
    1320:	af 90       	pop	r10
    1322:	9f 90       	pop	r9
    1324:	8f 90       	pop	r8
    1326:	7f 90       	pop	r7
    1328:	6f 90       	pop	r6
    132a:	5f 90       	pop	r5
    132c:	4f 90       	pop	r4
    132e:	08 95       	ret

00001330 <__vector_20>:
    1330:	1f 92       	push	r1
    1332:	0f 92       	push	r0
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	0f 92       	push	r0
    1338:	11 24       	eor	r1, r1
    133a:	0b b6       	in	r0, 0x3b	; 59
    133c:	0f 92       	push	r0
    133e:	2f 93       	push	r18
    1340:	3f 93       	push	r19
    1342:	4f 93       	push	r20
    1344:	5f 93       	push	r21
    1346:	6f 93       	push	r22
    1348:	7f 93       	push	r23
    134a:	8f 93       	push	r24
    134c:	9f 93       	push	r25
    134e:	af 93       	push	r26
    1350:	bf 93       	push	r27
    1352:	ef 93       	push	r30
    1354:	ff 93       	push	r31
    1356:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	aa d8       	rcall	.-3756   	; 0x4b2 <checkBit>
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	99 f4       	brne	.+38     	; 0x1388 <__vector_20+0x58>
    1362:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <u8_rx0LastReceivedIndex>
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    136c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1370:	82 70       	andi	r24, 0x02	; 2
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	98 2f       	mov	r25, r24
    1376:	88 27       	eor	r24, r24
    1378:	82 2b       	or	r24, r18
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	ec 58       	subi	r30, 0x8C	; 140
    1380:	fe 4f       	sbci	r31, 0xFE	; 254
    1382:	91 83       	std	Z+1, r25	; 0x01
    1384:	80 83       	st	Z, r24
    1386:	0c c0       	rjmp	.+24     	; 0x13a0 <__vector_20+0x70>
    1388:	e0 91 73 01 	lds	r30, 0x0173	; 0x800173 <u8_rx0LastReceivedIndex>
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	ec 58       	subi	r30, 0x8C	; 140
    139a:	fe 4f       	sbci	r31, 0xFE	; 254
    139c:	91 83       	std	Z+1, r25	; 0x01
    139e:	80 83       	st	Z, r24
    13a0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <u8_rx0LastReceivedIndex>
    13a4:	89 30       	cpi	r24, 0x09	; 9
    13a6:	30 f4       	brcc	.+12     	; 0x13b4 <__vector_20+0x84>
    13a8:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <u8_rx0LastReceivedIndex>
    13ac:	8f 5f       	subi	r24, 0xFF	; 255
    13ae:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <u8_rx0LastReceivedIndex>
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <__vector_20+0x88>
    13b4:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <u8_rx0LastReceivedIndex>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <b_rx0Available>
    13be:	ff 91       	pop	r31
    13c0:	ef 91       	pop	r30
    13c2:	bf 91       	pop	r27
    13c4:	af 91       	pop	r26
    13c6:	9f 91       	pop	r25
    13c8:	8f 91       	pop	r24
    13ca:	7f 91       	pop	r23
    13cc:	6f 91       	pop	r22
    13ce:	5f 91       	pop	r21
    13d0:	4f 91       	pop	r20
    13d2:	3f 91       	pop	r19
    13d4:	2f 91       	pop	r18
    13d6:	0f 90       	pop	r0
    13d8:	0b be       	out	0x3b, r0	; 59
    13da:	0f 90       	pop	r0
    13dc:	0f be       	out	0x3f, r0	; 63
    13de:	0f 90       	pop	r0
    13e0:	1f 90       	pop	r1
    13e2:	18 95       	reti

000013e4 <__vector_21>:
    13e4:	1f 92       	push	r1
    13e6:	0f 92       	push	r0
    13e8:	0f b6       	in	r0, 0x3f	; 63
    13ea:	0f 92       	push	r0
    13ec:	11 24       	eor	r1, r1
    13ee:	0b b6       	in	r0, 0x3b	; 59
    13f0:	0f 92       	push	r0
    13f2:	2f 93       	push	r18
    13f4:	3f 93       	push	r19
    13f6:	4f 93       	push	r20
    13f8:	5f 93       	push	r21
    13fa:	6f 93       	push	r22
    13fc:	7f 93       	push	r23
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
    1402:	af 93       	push	r26
    1404:	bf 93       	push	r27
    1406:	ef 93       	push	r30
    1408:	ff 93       	push	r31
    140a:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <u8_tx0LastTransmittedIndex>
    140e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <u8_tx0LastRequestedIndex>
    1412:	98 17       	cp	r25, r24
    1414:	69 f1       	breq	.+90     	; 0x1470 <__vector_21+0x8c>
    1416:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	4a d8       	rcall	.-3948   	; 0x4b2 <checkBit>
    141e:	81 30       	cpi	r24, 0x01	; 1
    1420:	79 f4       	brne	.+30     	; 0x1440 <__vector_21+0x5c>
    1422:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <u8_tx0LastTransmittedIndex>
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e6 57       	subi	r30, 0x76	; 118
    142e:	fe 4f       	sbci	r31, 0xFE	; 254
    1430:	80 81       	ld	r24, Z
    1432:	91 81       	ldd	r25, Z+1	; 0x01
    1434:	e1 ec       	ldi	r30, 0xC1	; 193
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	91 70       	andi	r25, 0x01	; 1
    143c:	89 2b       	or	r24, r25
    143e:	80 83       	st	Z, r24
    1440:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <u8_tx0LastTransmittedIndex>
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	e6 57       	subi	r30, 0x76	; 118
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	80 81       	ld	r24, Z
    1450:	91 81       	ldd	r25, Z+1	; 0x01
    1452:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1456:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <u8_tx0LastTransmittedIndex>
    145a:	89 30       	cpi	r24, 0x09	; 9
    145c:	30 f4       	brcc	.+12     	; 0x146a <__vector_21+0x86>
    145e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <u8_tx0LastTransmittedIndex>
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <u8_tx0LastTransmittedIndex>
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <__vector_21+0x94>
    146a:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <u8_tx0LastTransmittedIndex>
    146e:	04 c0       	rjmp	.+8      	; 0x1478 <__vector_21+0x94>
    1470:	65 e0       	ldi	r22, 0x05	; 5
    1472:	81 ec       	ldi	r24, 0xC1	; 193
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	10 d8       	rcall	.-4064   	; 0x498 <clearBit>
    1478:	ff 91       	pop	r31
    147a:	ef 91       	pop	r30
    147c:	bf 91       	pop	r27
    147e:	af 91       	pop	r26
    1480:	9f 91       	pop	r25
    1482:	8f 91       	pop	r24
    1484:	7f 91       	pop	r23
    1486:	6f 91       	pop	r22
    1488:	5f 91       	pop	r21
    148a:	4f 91       	pop	r20
    148c:	3f 91       	pop	r19
    148e:	2f 91       	pop	r18
    1490:	0f 90       	pop	r0
    1492:	0b be       	out	0x3b, r0	; 59
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <__vector_22>:
    149e:	1f 92       	push	r1
    14a0:	0f 92       	push	r0
    14a2:	0f b6       	in	r0, 0x3f	; 63
    14a4:	0f 92       	push	r0
    14a6:	11 24       	eor	r1, r1
    14a8:	0b b6       	in	r0, 0x3b	; 59
    14aa:	0f 92       	push	r0
    14ac:	8f 93       	push	r24
    14ae:	9f 93       	push	r25
    14b0:	ef 93       	push	r30
    14b2:	ff 93       	push	r31
    14b4:	80 e0       	ldi	r24, 0x00	; 0
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	fc 01       	movw	r30, r24
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	e6 57       	subi	r30, 0x76	; 118
    14c0:	fe 4f       	sbci	r31, 0xFE	; 254
    14c2:	11 82       	std	Z+1, r1	; 0x01
    14c4:	10 82       	st	Z, r1
    14c6:	01 96       	adiw	r24, 0x01	; 1
    14c8:	8a 30       	cpi	r24, 0x0A	; 10
    14ca:	91 05       	cpc	r25, r1
    14cc:	a9 f7       	brne	.-22     	; 0x14b8 <__vector_22+0x1a>
    14ce:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <u8_tx0LastTransmittedIndex>
    14d2:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <u8_tx0LastRequestedIndex>
    14d6:	ff 91       	pop	r31
    14d8:	ef 91       	pop	r30
    14da:	9f 91       	pop	r25
    14dc:	8f 91       	pop	r24
    14de:	0f 90       	pop	r0
    14e0:	0b be       	out	0x3b, r0	; 59
    14e2:	0f 90       	pop	r0
    14e4:	0f be       	out	0x3f, r0	; 63
    14e6:	0f 90       	pop	r0
    14e8:	1f 90       	pop	r1
    14ea:	18 95       	reti

000014ec <uart_init>:
    14ec:	0f 93       	push	r16
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	2b 97       	sbiw	r28, 0x0b	; 11
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	0a 83       	std	Y+2, r16	; 0x02
    1506:	1b 83       	std	Y+3, r17	; 0x03
    1508:	2c 83       	std	Y+4, r18	; 0x04
    150a:	3d 83       	std	Y+5, r19	; 0x05
    150c:	4e 83       	std	Y+6, r20	; 0x06
    150e:	5f 83       	std	Y+7, r21	; 0x07
    1510:	68 87       	std	Y+8, r22	; 0x08
    1512:	79 87       	std	Y+9, r23	; 0x09
    1514:	8a 87       	std	Y+10, r24	; 0x0a
    1516:	9b 87       	std	Y+11, r25	; 0x0b
    1518:	19 82       	std	Y+1, r1	; 0x01
    151a:	01 11       	cpse	r16, r1
    151c:	ae c0       	rjmp	.+348    	; 0x167a <uart_init+0x18e>
    151e:	19 2f       	mov	r17, r25
    1520:	e2 ec       	ldi	r30, 0xC2	; 194
    1522:	f0 e0       	ldi	r31, 0x00	; 0
    1524:	80 81       	ld	r24, Z
    1526:	8f 73       	andi	r24, 0x3F	; 63
    1528:	80 83       	st	Z, r24
    152a:	6b 81       	ldd	r22, Y+3	; 0x03
    152c:	7c 81       	ldd	r23, Y+4	; 0x04
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	9e 81       	ldd	r25, Y+6	; 0x06
    1532:	ae 01       	movw	r20, r28
    1534:	4f 5f       	subi	r20, 0xFF	; 255
    1536:	5f 4f       	sbci	r21, 0xFF	; 255
    1538:	ad de       	rcall	.-678    	; 0x1294 <calculateUBRR>
    153a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    153e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1542:	49 81       	ldd	r20, Y+1	; 0x01
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	80 ec       	ldi	r24, 0xC0	; 192
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 28 02 	call	0x450	; 0x450 <updateBit>
    154e:	89 85       	ldd	r24, Y+9	; 0x09
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	61 f1       	breq	.+88     	; 0x15ac <uart_init+0xc0>
    1554:	28 f4       	brcc	.+10     	; 0x1560 <uart_init+0x74>
    1556:	88 23       	and	r24, r24
    1558:	49 f0       	breq	.+18     	; 0x156c <uart_init+0x80>
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	b9 f0       	breq	.+46     	; 0x158c <uart_init+0xa0>
    155e:	55 c0       	rjmp	.+170    	; 0x160a <uart_init+0x11e>
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	a1 f1       	breq	.+104    	; 0x15cc <uart_init+0xe0>
    1564:	84 30       	cpi	r24, 0x04	; 4
    1566:	09 f4       	brne	.+2      	; 0x156a <uart_init+0x7e>
    1568:	41 c0       	rjmp	.+130    	; 0x15ec <uart_init+0x100>
    156a:	4f c0       	rjmp	.+158    	; 0x160a <uart_init+0x11e>
    156c:	61 e0       	ldi	r22, 0x01	; 1
    156e:	82 ec       	ldi	r24, 0xC2	; 194
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    1576:	62 e0       	ldi	r22, 0x02	; 2
    1578:	82 ec       	ldi	r24, 0xC2	; 194
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	81 ec       	ldi	r24, 0xC1	; 193
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    158a:	3f c0       	rjmp	.+126    	; 0x160a <uart_init+0x11e>
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	82 ec       	ldi	r24, 0xC2	; 194
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    1596:	62 e0       	ldi	r22, 0x02	; 2
    1598:	82 ec       	ldi	r24, 0xC2	; 194
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	81 ec       	ldi	r24, 0xC1	; 193
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    15aa:	2f c0       	rjmp	.+94     	; 0x160a <uart_init+0x11e>
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	82 ec       	ldi	r24, 0xC2	; 194
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    15b6:	62 e0       	ldi	r22, 0x02	; 2
    15b8:	82 ec       	ldi	r24, 0xC2	; 194
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    15c0:	62 e0       	ldi	r22, 0x02	; 2
    15c2:	81 ec       	ldi	r24, 0xC1	; 193
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    15ca:	1f c0       	rjmp	.+62     	; 0x160a <uart_init+0x11e>
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	82 ec       	ldi	r24, 0xC2	; 194
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    15d6:	62 e0       	ldi	r22, 0x02	; 2
    15d8:	82 ec       	ldi	r24, 0xC2	; 194
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    15e0:	62 e0       	ldi	r22, 0x02	; 2
    15e2:	81 ec       	ldi	r24, 0xC1	; 193
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 4c 02 	call	0x498	; 0x498 <clearBit>
    15ea:	0f c0       	rjmp	.+30     	; 0x160a <uart_init+0x11e>
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	82 ec       	ldi	r24, 0xC2	; 194
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	82 ec       	ldi	r24, 0xC2	; 194
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    1600:	62 e0       	ldi	r22, 0x02	; 2
    1602:	81 ec       	ldi	r24, 0xC1	; 193
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    160a:	4a 85       	ldd	r20, Y+10	; 0x0a
    160c:	63 e0       	ldi	r22, 0x03	; 3
    160e:	82 ec       	ldi	r24, 0xC2	; 194
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 28 02 	call	0x450	; 0x450 <updateBit>
    1616:	12 30       	cpi	r17, 0x02	; 2
    1618:	31 f4       	brne	.+12     	; 0x1626 <uart_init+0x13a>
    161a:	e2 ec       	ldi	r30, 0xC2	; 194
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	8f 7c       	andi	r24, 0xCF	; 207
    1622:	80 83       	st	Z, r24
    1624:	0b c0       	rjmp	.+22     	; 0x163c <uart_init+0x150>
    1626:	65 e0       	ldi	r22, 0x05	; 5
    1628:	82 ec       	ldi	r24, 0xC2	; 194
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    1630:	41 2f       	mov	r20, r17
    1632:	64 e0       	ldi	r22, 0x04	; 4
    1634:	82 ec       	ldi	r24, 0xC2	; 194
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	0e 94 28 02 	call	0x450	; 0x450 <updateBit>
    163c:	8f 81       	ldd	r24, Y+7	; 0x07
    163e:	88 23       	and	r24, r24
    1640:	59 f0       	breq	.+22     	; 0x1658 <uart_init+0x16c>
    1642:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <u8_rx0LastProcessedIndex>
    1646:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <u8_rx0LastReceivedIndex>
    164a:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <b_rx0Available>
    164e:	67 e0       	ldi	r22, 0x07	; 7
    1650:	81 ec       	ldi	r24, 0xC1	; 193
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    1658:	88 85       	ldd	r24, Y+8	; 0x08
    165a:	88 23       	and	r24, r24
    165c:	71 f0       	breq	.+28     	; 0x167a <uart_init+0x18e>
    165e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <u8_tx0LastRequestedIndex>
    1662:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <u8_tx0LastTransmittedIndex>
    1666:	66 e0       	ldi	r22, 0x06	; 6
    1668:	81 ec       	ldi	r24, 0xC1	; 193
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    1670:	65 e0       	ldi	r22, 0x05	; 5
    1672:	81 ec       	ldi	r24, 0xC1	; 193
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
    167a:	2b 96       	adiw	r28, 0x0b	; 11
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	08 95       	ret

00001690 <uart_start>:
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	cd b7       	in	r28, 0x3d	; 61
    169a:	de b7       	in	r29, 0x3e	; 62
    169c:	2a 97       	sbiw	r28, 0x0a	; 10
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	de bf       	out	0x3e, r29	; 62
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	cd bf       	out	0x3d, r28	; 61
    16a8:	6f 83       	std	Y+7, r22	; 0x07
    16aa:	01 11       	cpse	r16, r1
    16ac:	0c c0       	rjmp	.+24     	; 0x16c6 <uart_start+0x36>
    16ae:	45 2f       	mov	r20, r21
    16b0:	64 e0       	ldi	r22, 0x04	; 4
    16b2:	81 ec       	ldi	r24, 0xC1	; 193
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 28 02 	call	0x450	; 0x450 <updateBit>
    16ba:	4f 81       	ldd	r20, Y+7	; 0x07
    16bc:	63 e0       	ldi	r22, 0x03	; 3
    16be:	81 ec       	ldi	r24, 0xC1	; 193
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	0e 94 28 02 	call	0x450	; 0x450 <updateBit>
    16c6:	2a 96       	adiw	r28, 0x0a	; 10
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	08 95       	ret

000016dc <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    16dc:	ef 92       	push	r14
    16de:	ff 92       	push	r15
    16e0:	0f 93       	push	r16
    16e2:	1f 93       	push	r17
    16e4:	cf 93       	push	r28
    16e6:	df 93       	push	r29
    16e8:	cd b7       	in	r28, 0x3d	; 61
    16ea:	de b7       	in	r29, 0x3e	; 62
    16ec:	2a 97       	sbiw	r28, 0x0a	; 10
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	09 83       	std	Y+1, r16	; 0x01
    16fa:	1a 83       	std	Y+2, r17	; 0x02
    16fc:	2b 83       	std	Y+3, r18	; 0x03
    16fe:	3c 83       	std	Y+4, r19	; 0x04
    1700:	4d 83       	std	Y+5, r20	; 0x05
    1702:	5e 83       	std	Y+6, r21	; 0x06
    1704:	6f 83       	std	Y+7, r22	; 0x07
    1706:	78 87       	std	Y+8, r23	; 0x08
    1708:	89 87       	std	Y+9, r24	; 0x09
    170a:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    170c:	01 11       	cpse	r16, r1
    170e:	42 c0       	rjmp	.+132    	; 0x1794 <uart_transmit+0xb8>
	{
		case UART0:
		#ifdef USING_UART0
		#ifdef UART0_INTERRUPT_MODE
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    1710:	00 ec       	ldi	r16, 0xC0	; 192
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	f8 01       	movw	r30, r16
    1716:	80 81       	ld	r24, Z
    1718:	65 e0       	ldi	r22, 0x05	; 5
    171a:	0e 94 59 02 	call	0x4b2	; 0x4b2 <checkBit>
    171e:	88 23       	and	r24, r24
    1720:	c9 f3       	breq	.-14     	; 0x1714 <uart_transmit+0x38>
			au16_tx0Buffer[u8_tx0LastRequestedIndex] = u16_data;
    1722:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <u8_tx0LastRequestedIndex>
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	e6 57       	subi	r30, 0x76	; 118
    172e:	fe 4f       	sbci	r31, 0xFE	; 254
    1730:	f1 82       	std	Z+1, r15	; 0x01
    1732:	e0 82       	st	Z, r14
			if (u8_tx0LastRequestedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1734:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <u8_tx0LastRequestedIndex>
    1738:	89 30       	cpi	r24, 0x09	; 9
    173a:	30 f4       	brcc	.+12     	; 0x1748 <uart_transmit+0x6c>
				u8_tx0LastRequestedIndex++;
    173c:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <u8_tx0LastRequestedIndex>
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <u8_tx0LastRequestedIndex>
    1746:	02 c0       	rjmp	.+4      	; 0x174c <uart_transmit+0x70>
			else
				u8_tx0LastRequestedIndex = 0;
    1748:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <u8_tx0LastRequestedIndex>
			if (checkBit(UCSR0A, UDRE0) == SET)
    174c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1750:	65 e0       	ldi	r22, 0x05	; 5
    1752:	0e 94 59 02 	call	0x4b2	; 0x4b2 <checkBit>
    1756:	81 30       	cpi	r24, 0x01	; 1
    1758:	e9 f4       	brne	.+58     	; 0x1794 <uart_transmit+0xb8>
			{
				if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    175a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <u8_tx0LastTransmittedIndex>
    175e:	89 30       	cpi	r24, 0x09	; 9
    1760:	30 f4       	brcc	.+12     	; 0x176e <uart_transmit+0x92>
					u8_tx0LastTransmittedIndex++;
    1762:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <u8_tx0LastTransmittedIndex>
    1766:	8f 5f       	subi	r24, 0xFF	; 255
    1768:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <u8_tx0LastTransmittedIndex>
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <uart_transmit+0x96>
				else
					u8_tx0LastTransmittedIndex = 0;
    176e:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <u8_tx0LastTransmittedIndex>
				setBit(&UCSR0B, UDRIE0);
    1772:	65 e0       	ldi	r22, 0x05	; 5
    1774:	81 ec       	ldi	r24, 0xC1	; 193
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	0e 94 40 02 	call	0x480	; 0x480 <setBit>
				if (s_uart.frameSize == _9BIT)
    177c:	88 85       	ldd	r24, Y+8	; 0x08
    177e:	84 30       	cpi	r24, 0x04	; 4
    1780:	39 f4       	brne	.+14     	; 0x1790 <uart_transmit+0xb4>
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
    1782:	e1 ec       	ldi	r30, 0xC1	; 193
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	9f 2d       	mov	r25, r15
    178a:	91 70       	andi	r25, 0x01	; 1
    178c:	89 2b       	or	r24, r25
    178e:	80 83       	st	Z, r24
				UDR0 = (u8) u16_data;
    1790:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    1794:	2a 96       	adiw	r28, 0x0a	; 10
    1796:	0f b6       	in	r0, 0x3f	; 63
    1798:	f8 94       	cli
    179a:	de bf       	out	0x3e, r29	; 62
    179c:	0f be       	out	0x3f, r0	; 63
    179e:	cd bf       	out	0x3d, r28	; 61
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	08 95       	ret

000017ae <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    17ae:	1f 92       	push	r1
    17b0:	0f 92       	push	r0
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	0f 92       	push	r0
    17b6:	11 24       	eor	r1, r1
    17b8:	0b b6       	in	r0, 0x3b	; 59
    17ba:	0f 92       	push	r0
    17bc:	2f 93       	push	r18
    17be:	3f 93       	push	r19
    17c0:	4f 93       	push	r20
    17c2:	5f 93       	push	r21
    17c4:	6f 93       	push	r22
    17c6:	7f 93       	push	r23
    17c8:	8f 93       	push	r24
    17ca:	9f 93       	push	r25
    17cc:	af 93       	push	r26
    17ce:	bf 93       	push	r27
    17d0:	ef 93       	push	r30
    17d2:	ff 93       	push	r31
	p_wdgCallback();
    17d4:	e0 91 9e 01 	lds	r30, 0x019E	; 0x80019e <p_wdgCallback>
    17d8:	f0 91 9f 01 	lds	r31, 0x019F	; 0x80019f <p_wdgCallback+0x1>
    17dc:	09 95       	icall
}
    17de:	ff 91       	pop	r31
    17e0:	ef 91       	pop	r30
    17e2:	bf 91       	pop	r27
    17e4:	af 91       	pop	r26
    17e6:	9f 91       	pop	r25
    17e8:	8f 91       	pop	r24
    17ea:	7f 91       	pop	r23
    17ec:	6f 91       	pop	r22
    17ee:	5f 91       	pop	r21
    17f0:	4f 91       	pop	r20
    17f2:	3f 91       	pop	r19
    17f4:	2f 91       	pop	r18
    17f6:	0f 90       	pop	r0
    17f8:	0b be       	out	0x3b, r0	; 59
    17fa:	0f 90       	pop	r0
    17fc:	0f be       	out	0x3f, r0	; 63
    17fe:	0f 90       	pop	r0
    1800:	1f 90       	pop	r1
    1802:	18 95       	reti

00001804 <p_pcInt2Callback>:

void encoder_stop(){
	gpio_disableInterrupt(encoderLA, INTERRUPT_TOGGLE);
	gpio_disableInterrupt(encoderLB, INTERRUPT_TOGGLE);
	gpio_disableInterrupt(encoderRA, INTERRUPT_TOGGLE);
	gpio_disableInterrupt(encoderRB, INTERRUPT_TOGGLE);
    1804:	86 b1       	in	r24, 0x06	; 6
    1806:	80 7f       	andi	r24, 0xF0	; 240
    1808:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <currentState>
    180c:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <lastState>
    1810:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <currentState>
    1814:	89 27       	eor	r24, r25
    1816:	80 32       	cpi	r24, 0x20	; 32
    1818:	e9 f0       	breq	.+58     	; 0x1854 <p_pcInt2Callback+0x50>
    181a:	18 f4       	brcc	.+6      	; 0x1822 <p_pcInt2Callback+0x1e>
    181c:	80 31       	cpi	r24, 0x10	; 16
    181e:	31 f0       	breq	.+12     	; 0x182c <p_pcInt2Callback+0x28>
    1820:	54 c0       	rjmp	.+168    	; 0x18ca <p_pcInt2Callback+0xc6>
    1822:	80 34       	cpi	r24, 0x40	; 64
    1824:	59 f1       	breq	.+86     	; 0x187c <p_pcInt2Callback+0x78>
    1826:	80 38       	cpi	r24, 0x80	; 128
    1828:	e9 f1       	breq	.+122    	; 0x18a4 <p_pcInt2Callback+0xa0>
    182a:	4f c0       	rjmp	.+158    	; 0x18ca <p_pcInt2Callback+0xc6>
    182c:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <counterRight>
    1830:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <counterRight+0x1>
    1834:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <counterRight+0x2>
    1838:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <counterRight+0x3>
    183c:	01 96       	adiw	r24, 0x01	; 1
    183e:	a1 1d       	adc	r26, r1
    1840:	b1 1d       	adc	r27, r1
    1842:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <counterRight>
    1846:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <counterRight+0x1>
    184a:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <counterRight+0x2>
    184e:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <counterRight+0x3>
    1852:	3b c0       	rjmp	.+118    	; 0x18ca <p_pcInt2Callback+0xc6>
    1854:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <counterRight>
    1858:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <counterRight+0x1>
    185c:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <counterRight+0x2>
    1860:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <counterRight+0x3>
    1864:	01 96       	adiw	r24, 0x01	; 1
    1866:	a1 1d       	adc	r26, r1
    1868:	b1 1d       	adc	r27, r1
    186a:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <counterRight>
    186e:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <counterRight+0x1>
    1872:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <counterRight+0x2>
    1876:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <counterRight+0x3>
    187a:	27 c0       	rjmp	.+78     	; 0x18ca <p_pcInt2Callback+0xc6>
    187c:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <counterLeft>
    1880:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <counterLeft+0x1>
    1884:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <counterLeft+0x2>
    1888:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <counterLeft+0x3>
    188c:	01 96       	adiw	r24, 0x01	; 1
    188e:	a1 1d       	adc	r26, r1
    1890:	b1 1d       	adc	r27, r1
    1892:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <counterLeft>
    1896:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <counterLeft+0x1>
    189a:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <counterLeft+0x2>
    189e:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <counterLeft+0x3>
    18a2:	13 c0       	rjmp	.+38     	; 0x18ca <p_pcInt2Callback+0xc6>
    18a4:	80 91 a0 01 	lds	r24, 0x01A0	; 0x8001a0 <counterLeft>
    18a8:	90 91 a1 01 	lds	r25, 0x01A1	; 0x8001a1 <counterLeft+0x1>
    18ac:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <counterLeft+0x2>
    18b0:	b0 91 a3 01 	lds	r27, 0x01A3	; 0x8001a3 <counterLeft+0x3>
    18b4:	01 96       	adiw	r24, 0x01	; 1
    18b6:	a1 1d       	adc	r26, r1
    18b8:	b1 1d       	adc	r27, r1
    18ba:	80 93 a0 01 	sts	0x01A0, r24	; 0x8001a0 <counterLeft>
    18be:	90 93 a1 01 	sts	0x01A1, r25	; 0x8001a1 <counterLeft+0x1>
    18c2:	a0 93 a2 01 	sts	0x01A2, r26	; 0x8001a2 <counterLeft+0x2>
    18c6:	b0 93 a3 01 	sts	0x01A3, r27	; 0x8001a3 <counterLeft+0x3>
    18ca:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <currentState>
    18ce:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <lastState>
    18d2:	08 95       	ret

000018d4 <encoder_init>:
    18d4:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <counter>
    18d8:	10 92 a0 01 	sts	0x01A0, r1	; 0x8001a0 <counterLeft>
    18dc:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <counterLeft+0x1>
    18e0:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <counterLeft+0x2>
    18e4:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <counterLeft+0x3>
    18e8:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <counterRight>
    18ec:	10 92 b4 01 	sts	0x01B4, r1	; 0x8001b4 <counterRight+0x1>
    18f0:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <counterRight+0x2>
    18f4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <counterRight+0x3>
    18f8:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <lastState>
    18fc:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <currentState>
    1900:	ee ea       	ldi	r30, 0xAE	; 174
    1902:	f1 e0       	ldi	r31, 0x01	; 1
    1904:	12 82       	std	Z+2, r1	; 0x02
    1906:	82 e0       	ldi	r24, 0x02	; 2
    1908:	80 83       	st	Z, r24
    190a:	96 e0       	ldi	r25, 0x06	; 6
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	13 82       	std	Z+3, r1	; 0x03
    1910:	ea ea       	ldi	r30, 0xAA	; 170
    1912:	f1 e0       	ldi	r31, 0x01	; 1
    1914:	12 82       	std	Z+2, r1	; 0x02
    1916:	80 83       	st	Z, r24
    1918:	97 e0       	ldi	r25, 0x07	; 7
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	13 82       	std	Z+3, r1	; 0x03
    191e:	e6 ea       	ldi	r30, 0xA6	; 166
    1920:	f1 e0       	ldi	r31, 0x01	; 1
    1922:	12 82       	std	Z+2, r1	; 0x02
    1924:	80 83       	st	Z, r24
    1926:	94 e0       	ldi	r25, 0x04	; 4
    1928:	91 83       	std	Z+1, r25	; 0x01
    192a:	13 82       	std	Z+3, r1	; 0x03
    192c:	e7 eb       	ldi	r30, 0xB7	; 183
    192e:	f1 e0       	ldi	r31, 0x01	; 1
    1930:	12 82       	std	Z+2, r1	; 0x02
    1932:	80 83       	st	Z, r24
    1934:	85 e0       	ldi	r24, 0x05	; 5
    1936:	81 83       	std	Z+1, r24	; 0x01
    1938:	13 82       	std	Z+3, r1	; 0x03
    193a:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <encoderLA>
    193e:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <encoderLA+0x1>
    1942:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <encoderLA+0x2>
    1946:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <encoderLA+0x3>
    194a:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_init>
    194e:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <encoderLB>
    1952:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <encoderLB+0x1>
    1956:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <encoderLB+0x2>
    195a:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <encoderLB+0x3>
    195e:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_init>
    1962:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <encoderRA>
    1966:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <encoderRA+0x1>
    196a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <encoderRA+0x2>
    196e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <encoderRA+0x3>
    1972:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_init>
    1976:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <encoderRB>
    197a:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <encoderRB+0x1>
    197e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <encoderRB+0x2>
    1982:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <encoderRB+0x3>
    1986:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_init>
    198a:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <encoderLA>
    198e:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <encoderLA+0x1>
    1992:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <encoderLA+0x2>
    1996:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <encoderLA+0x3>
    199a:	22 e0       	ldi	r18, 0x02	; 2
    199c:	3c e0       	ldi	r19, 0x0C	; 12
    199e:	41 e0       	ldi	r20, 0x01	; 1
    19a0:	0e 94 1e 02 	call	0x43c	; 0x43c <gpio_attachInterrupt>
    19a4:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <encoderLB>
    19a8:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <encoderLB+0x1>
    19ac:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <encoderLB+0x2>
    19b0:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <encoderLB+0x3>
    19b4:	22 e0       	ldi	r18, 0x02	; 2
    19b6:	3c e0       	ldi	r19, 0x0C	; 12
    19b8:	41 e0       	ldi	r20, 0x01	; 1
    19ba:	0e 94 1e 02 	call	0x43c	; 0x43c <gpio_attachInterrupt>
    19be:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <encoderRA>
    19c2:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <encoderRA+0x1>
    19c6:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <encoderRA+0x2>
    19ca:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <encoderRA+0x3>
    19ce:	22 e0       	ldi	r18, 0x02	; 2
    19d0:	3c e0       	ldi	r19, 0x0C	; 12
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	0e 94 1e 02 	call	0x43c	; 0x43c <gpio_attachInterrupt>
    19d8:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <encoderRB>
    19dc:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <encoderRB+0x1>
    19e0:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <encoderRB+0x2>
    19e4:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <encoderRB+0x3>
    19e8:	22 e0       	ldi	r18, 0x02	; 2
    19ea:	3c e0       	ldi	r19, 0x0C	; 12
    19ec:	41 e0       	ldi	r20, 0x01	; 1
    19ee:	0c 94 1e 02 	jmp	0x43c	; 0x43c <gpio_attachInterrupt>
    19f2:	08 95       	ret

000019f4 <encoder_start>:
    19f4:	60 91 ae 01 	lds	r22, 0x01AE	; 0x8001ae <encoderLA>
    19f8:	70 91 af 01 	lds	r23, 0x01AF	; 0x8001af <encoderLA+0x1>
    19fc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <encoderLA+0x2>
    1a00:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <encoderLA+0x3>
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	0e 94 11 02 	call	0x422	; 0x422 <gpio_enableInterrupt>
    1a0a:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <encoderLB>
    1a0e:	70 91 ab 01 	lds	r23, 0x01AB	; 0x8001ab <encoderLB+0x1>
    1a12:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <encoderLB+0x2>
    1a16:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <encoderLB+0x3>
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	0e 94 11 02 	call	0x422	; 0x422 <gpio_enableInterrupt>
    1a20:	60 91 a6 01 	lds	r22, 0x01A6	; 0x8001a6 <encoderRA>
    1a24:	70 91 a7 01 	lds	r23, 0x01A7	; 0x8001a7 <encoderRA+0x1>
    1a28:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <encoderRA+0x2>
    1a2c:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <encoderRA+0x3>
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 11 02 	call	0x422	; 0x422 <gpio_enableInterrupt>
    1a36:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <encoderRB>
    1a3a:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <encoderRB+0x1>
    1a3e:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <encoderRB+0x2>
    1a42:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <encoderRB+0x3>
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0c 94 11 02 	jmp	0x422	; 0x422 <gpio_enableInterrupt>
    1a4c:	08 95       	ret

00001a4e <encoder_getRight>:
}

u32 encoder_getRight(){
	return counterRight;
    1a4e:	60 91 b3 01 	lds	r22, 0x01B3	; 0x8001b3 <counterRight>
    1a52:	70 91 b4 01 	lds	r23, 0x01B4	; 0x8001b4 <counterRight+0x1>
    1a56:	80 91 b5 01 	lds	r24, 0x01B5	; 0x8001b5 <counterRight+0x2>
    1a5a:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <counterRight+0x3>
}
    1a5e:	08 95       	ret

00001a60 <encoder_getLeft>:

u32 encoder_getLeft(){
	return counterLeft;
    1a60:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <counterLeft>
    1a64:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <counterLeft+0x1>
    1a68:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <counterLeft+0x2>
    1a6c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <counterLeft+0x3>
}
    1a70:	08 95       	ret

00001a72 <motor_init>:
	return 0.91*speed;
}


void motor_init(){
	motorEnable.direction = OUTPUT;
    1a72:	ef eb       	ldi	r30, 0xBF	; 191
    1a74:	f1 e0       	ldi	r31, 0x01	; 1
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	82 83       	std	Z+2, r24	; 0x02
	motorEnable.port = PD;
    1a7a:	93 e0       	ldi	r25, 0x03	; 3
    1a7c:	90 83       	st	Z, r25
	motorEnable.number = 2;
    1a7e:	22 e0       	ldi	r18, 0x02	; 2
    1a80:	21 83       	std	Z+1, r18	; 0x01
	motorEnable.pullUp = NO_PULL;
    1a82:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionA.direction = OUTPUT;
    1a84:	eb eb       	ldi	r30, 0xBB	; 187
    1a86:	f1 e0       	ldi	r31, 0x01	; 1
    1a88:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionA.port = PD;
    1a8a:	90 83       	st	Z, r25
	motorDirectionA.number = 6;
    1a8c:	26 e0       	ldi	r18, 0x06	; 6
    1a8e:	21 83       	std	Z+1, r18	; 0x01
	motorDirectionA.pullUp = NO_PULL;
    1a90:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionB.direction = OUTPUT;
    1a92:	e3 ec       	ldi	r30, 0xC3	; 195
    1a94:	f1 e0       	ldi	r31, 0x01	; 1
    1a96:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionB.port = PD;
    1a98:	90 83       	st	Z, r25
	motorDirectionB.number = 3;
    1a9a:	91 83       	std	Z+1, r25	; 0x01
	motorDirectionB.pullUp = NO_PULL;
    1a9c:	13 82       	std	Z+3, r1	; 0x03
	
	motorTimer.frequency = 20000;
    1a9e:	e7 ec       	ldi	r30, 0xC7	; 199
    1aa0:	f1 e0       	ldi	r31, 0x01	; 1
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	5e e4       	ldi	r21, 0x4E	; 78
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	70 e0       	ldi	r23, 0x00	; 0
    1aaa:	41 83       	std	Z+1, r20	; 0x01
    1aac:	52 83       	std	Z+2, r21	; 0x02
    1aae:	63 83       	std	Z+3, r22	; 0x03
    1ab0:	74 83       	std	Z+4, r23	; 0x04
	motorTimer.peripheral = TIMER1;
    1ab2:	80 83       	st	Z, r24
	
	motorPWM.base = motorTimer;
    1ab4:	95 e0       	ldi	r25, 0x05	; 5
    1ab6:	ac ec       	ldi	r26, 0xCC	; 204
    1ab8:	b1 e0       	ldi	r27, 0x01	; 1
    1aba:	01 90       	ld	r0, Z+
    1abc:	0d 92       	st	X+, r0
    1abe:	9a 95       	dec	r25
    1ac0:	e1 f7       	brne	.-8      	; 0x1aba <motor_init+0x48>
	motorPWM.signalType = DUTY_CYCLE_VARIABLE;
    1ac2:	ec ec       	ldi	r30, 0xCC	; 204
    1ac4:	f1 e0       	ldi	r31, 0x01	; 1
    1ac6:	15 82       	std	Z+5, r1	; 0x05
	motorPWM.mode = FAST_PWM;
    1ac8:	16 82       	std	Z+6, r1	; 0x06
	motorPWM.channelA.enabled = TRUE;
    1aca:	87 83       	std	Z+7, r24	; 0x07
	motorPWM.channelA.invertedOutput = FALSE;
    1acc:	10 86       	std	Z+8, r1	; 0x08
	motorPWM.channelB.enabled = TRUE;
    1ace:	81 87       	std	Z+9, r24	; 0x09
	motorPWM.channelB.invertedOutput = FALSE;
    1ad0:	12 86       	std	Z+10, r1	; 0x0a
	
	gpio_init(motorEnable);
    1ad2:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <motorEnable>
    1ad6:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <motorEnable+0x1>
    1ada:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <motorEnable+0x2>
    1ade:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <motorEnable+0x3>
    1ae2:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_init>
	gpio_init(motorDirectionA);
    1ae6:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <motorDirectionA>
    1aea:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <motorDirectionA+0x1>
    1aee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <motorDirectionA+0x2>
    1af2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <motorDirectionA+0x3>
    1af6:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_init>
	gpio_init(motorDirectionB);
    1afa:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <motorDirectionB>
    1afe:	70 91 c4 01 	lds	r23, 0x01C4	; 0x8001c4 <motorDirectionB+0x1>
    1b02:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <motorDirectionB+0x2>
    1b06:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <motorDirectionB+0x3>
    1b0a:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_init>
	timer_init(motorTimer);
    1b0e:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <motorTimer>
    1b12:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <motorTimer+0x1>
    1b16:	60 91 c9 01 	lds	r22, 0x01C9	; 0x8001c9 <motorTimer+0x2>
    1b1a:	70 91 ca 01 	lds	r23, 0x01CA	; 0x8001ca <motorTimer+0x3>
    1b1e:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <motorTimer+0x4>
    1b22:	43 d9       	rcall	.-3450   	; 0xdaa <timer_init>
	pwm_init(&motorPWM);
    1b24:	8c ec       	ldi	r24, 0xCC	; 204
    1b26:	91 e0       	ldi	r25, 0x01	; 1
    1b28:	0c 94 8d 02 	jmp	0x51a	; 0x51a <pwm_init>
    1b2c:	08 95       	ret

00001b2e <motor_start>:
}

void motor_start(){
    1b2e:	af 92       	push	r10
    1b30:	cf 92       	push	r12
    1b32:	ef 92       	push	r14
    1b34:	ff 92       	push	r15
    1b36:	0f 93       	push	r16
    1b38:	1f 93       	push	r17
	gpio_out_reset(motorDirectionA);
    1b3a:	60 91 bb 01 	lds	r22, 0x01BB	; 0x8001bb <motorDirectionA>
    1b3e:	70 91 bc 01 	lds	r23, 0x01BC	; 0x8001bc <motorDirectionA+0x1>
    1b42:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <motorDirectionA+0x2>
    1b46:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <motorDirectionA+0x3>
    1b4a:	0e 94 f5 01 	call	0x3ea	; 0x3ea <gpio_out_reset>
	gpio_out_reset(motorDirectionB);
    1b4e:	60 91 c3 01 	lds	r22, 0x01C3	; 0x8001c3 <motorDirectionB>
    1b52:	70 91 c4 01 	lds	r23, 0x01C4	; 0x8001c4 <motorDirectionB+0x1>
    1b56:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <motorDirectionB+0x2>
    1b5a:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <motorDirectionB+0x3>
    1b5e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <gpio_out_reset>
	gpio_out_set(motorEnable);
    1b62:	60 91 bf 01 	lds	r22, 0x01BF	; 0x8001bf <motorEnable>
    1b66:	70 91 c0 01 	lds	r23, 0x01C0	; 0x8001c0 <motorEnable+0x1>
    1b6a:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <motorEnable+0x2>
    1b6e:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <motorEnable+0x3>
    1b72:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <gpio_out_set>
	pwm_setDutyCycle(motorPWM, CHANNEL_A, 0);
    1b76:	a1 2c       	mov	r10, r1
    1b78:	c1 2c       	mov	r12, r1
    1b7a:	e0 90 cc 01 	lds	r14, 0x01CC	; 0x8001cc <motorPWM>
    1b7e:	f0 90 cd 01 	lds	r15, 0x01CD	; 0x8001cd <motorPWM+0x1>
    1b82:	00 91 ce 01 	lds	r16, 0x01CE	; 0x8001ce <motorPWM+0x2>
    1b86:	10 91 cf 01 	lds	r17, 0x01CF	; 0x8001cf <motorPWM+0x3>
    1b8a:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <motorPWM+0x4>
    1b8e:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <motorPWM+0x5>
    1b92:	40 91 d2 01 	lds	r20, 0x01D2	; 0x8001d2 <motorPWM+0x6>
    1b96:	50 91 d3 01 	lds	r21, 0x01D3	; 0x8001d3 <motorPWM+0x7>
    1b9a:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <motorPWM+0x8>
    1b9e:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <motorPWM+0x9>
    1ba2:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <motorPWM+0xa>
    1ba6:	0e 94 20 03 	call	0x640	; 0x640 <pwm_setDutyCycle>
	pwm_setDutyCycle(motorPWM, CHANNEL_B, 0);
    1baa:	cc 24       	eor	r12, r12
    1bac:	c3 94       	inc	r12
    1bae:	e0 90 cc 01 	lds	r14, 0x01CC	; 0x8001cc <motorPWM>
    1bb2:	f0 90 cd 01 	lds	r15, 0x01CD	; 0x8001cd <motorPWM+0x1>
    1bb6:	00 91 ce 01 	lds	r16, 0x01CE	; 0x8001ce <motorPWM+0x2>
    1bba:	10 91 cf 01 	lds	r17, 0x01CF	; 0x8001cf <motorPWM+0x3>
    1bbe:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <motorPWM+0x4>
    1bc2:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <motorPWM+0x5>
    1bc6:	40 91 d2 01 	lds	r20, 0x01D2	; 0x8001d2 <motorPWM+0x6>
    1bca:	50 91 d3 01 	lds	r21, 0x01D3	; 0x8001d3 <motorPWM+0x7>
    1bce:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <motorPWM+0x8>
    1bd2:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <motorPWM+0x9>
    1bd6:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <motorPWM+0xa>
    1bda:	0e 94 20 03 	call	0x640	; 0x640 <pwm_setDutyCycle>
	pwm_start(motorPWM);
    1bde:	e0 90 cc 01 	lds	r14, 0x01CC	; 0x8001cc <motorPWM>
    1be2:	f0 90 cd 01 	lds	r15, 0x01CD	; 0x8001cd <motorPWM+0x1>
    1be6:	00 91 ce 01 	lds	r16, 0x01CE	; 0x8001ce <motorPWM+0x2>
    1bea:	10 91 cf 01 	lds	r17, 0x01CF	; 0x8001cf <motorPWM+0x3>
    1bee:	20 91 d0 01 	lds	r18, 0x01D0	; 0x8001d0 <motorPWM+0x4>
    1bf2:	30 91 d1 01 	lds	r19, 0x01D1	; 0x8001d1 <motorPWM+0x5>
    1bf6:	40 91 d2 01 	lds	r20, 0x01D2	; 0x8001d2 <motorPWM+0x6>
    1bfa:	50 91 d3 01 	lds	r21, 0x01D3	; 0x8001d3 <motorPWM+0x7>
    1bfe:	60 91 d4 01 	lds	r22, 0x01D4	; 0x8001d4 <motorPWM+0x8>
    1c02:	70 91 d5 01 	lds	r23, 0x01D5	; 0x8001d5 <motorPWM+0x9>
    1c06:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <motorPWM+0xa>
    1c0a:	0e 94 ff 02 	call	0x5fe	; 0x5fe <pwm_start>
}
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	cf 90       	pop	r12
    1c18:	af 90       	pop	r10
    1c1a:	08 95       	ret

00001c1c <FlagUpdate>:
	task_table[taskId].timerValue = task_timer;
	task_timers[taskId] =task_table[taskId].timerValue;
}
void deactivate_task(u8 taskId)
{
	task_timers[taskId] = DEACTIVATE;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <timer_flag>
    1c22:	08 95       	ret

00001c24 <scheduler_inti>:
    1c24:	ff 92       	push	r15
    1c26:	0f 93       	push	r16
    1c28:	1f 93       	push	r17
    1c2a:	cf 93       	push	r28
    1c2c:	df 93       	push	r29
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <scheduler_inti+0xc>
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <scheduler_inti+0xe>
    1c32:	1f 92       	push	r1
    1c34:	cd b7       	in	r28, 0x3d	; 61
    1c36:	de b7       	in	r29, 0x3e	; 62
    1c38:	49 83       	std	Y+1, r20	; 0x01
    1c3a:	5a 83       	std	Y+2, r21	; 0x02
    1c3c:	6b 83       	std	Y+3, r22	; 0x03
    1c3e:	7c 83       	std	Y+4, r23	; 0x04
    1c40:	8d 83       	std	Y+5, r24	; 0x05
    1c42:	f2 2e       	mov	r15, r18
    1c44:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <task_number>
    1c48:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <timer_flag>
    1c4c:	ae d8       	rcall	.-3748   	; 0xdaa <timer_init>
    1c4e:	0e e0       	ldi	r16, 0x0E	; 14
    1c50:	1e e0       	ldi	r17, 0x0E	; 14
    1c52:	2f 2d       	mov	r18, r15
    1c54:	49 81       	ldd	r20, Y+1	; 0x01
    1c56:	5a 81       	ldd	r21, Y+2	; 0x02
    1c58:	6b 81       	ldd	r22, Y+3	; 0x03
    1c5a:	7c 81       	ldd	r23, Y+4	; 0x04
    1c5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5e:	f1 da       	rcall	.-2590   	; 0x1242 <timer_attachInterrupt>
    1c60:	2f 2d       	mov	r18, r15
    1c62:	49 81       	ldd	r20, Y+1	; 0x01
    1c64:	5a 81       	ldd	r21, Y+2	; 0x02
    1c66:	6b 81       	ldd	r22, Y+3	; 0x03
    1c68:	7c 81       	ldd	r23, Y+4	; 0x04
    1c6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6c:	2e da       	rcall	.-2980   	; 0x10ca <timer_enableInterrupt>
    1c6e:	49 81       	ldd	r20, Y+1	; 0x01
    1c70:	5a 81       	ldd	r21, Y+2	; 0x02
    1c72:	6b 81       	ldd	r22, Y+3	; 0x03
    1c74:	7c 81       	ldd	r23, Y+4	; 0x04
    1c76:	8d 81       	ldd	r24, Y+5	; 0x05
    1c78:	e3 d9       	rcall	.-3130   	; 0x1040 <timer_start>
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	08 95       	ret

00001c90 <activate_task>:
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9c 01       	movw	r18, r24
    1c94:	22 0f       	add	r18, r18
    1c96:	33 1f       	adc	r19, r19
    1c98:	82 0f       	add	r24, r18
    1c9a:	93 1f       	adc	r25, r19
    1c9c:	fc 01       	movw	r30, r24
    1c9e:	e0 50       	subi	r30, 0x00	; 0
    1ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca2:	60 83       	st	Z, r22
    1ca4:	f9 01       	movw	r30, r18
    1ca6:	e2 5e       	subi	r30, 0xE2	; 226
    1ca8:	fe 4f       	sbci	r31, 0xFE	; 254
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	71 83       	std	Z+1, r23	; 0x01
    1cae:	60 83       	st	Z, r22
    1cb0:	08 95       	ret

00001cb2 <scheduler>:
}
void scheduler ()
{
    1cb2:	ef 92       	push	r14
    1cb4:	ff 92       	push	r15
    1cb6:	0f 93       	push	r16
    1cb8:	1f 93       	push	r17
    1cba:	cf 93       	push	r28
	u8 task = 0u;
	if (timer_flag == TRUE)
    1cbc:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <timer_flag>
    1cc0:	81 30       	cpi	r24, 0x01	; 1
    1cc2:	b9 f5       	brne	.+110    	; 0x1d32 <scheduler+0x80>
	{
		timer_flag = FALSE;
    1cc4:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <timer_flag>
		while(task < task_number)
    1cc8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <task_number>
    1ccc:	88 23       	and	r24, r24
    1cce:	89 f1       	breq	.+98     	; 0x1d32 <scheduler+0x80>
    1cd0:	c0 e0       	ldi	r28, 0x00	; 0
		{
			if (task_timers[task] != 0)
    1cd2:	2c 2f       	mov	r18, r28
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	f9 01       	movw	r30, r18
    1cd8:	ee 0f       	add	r30, r30
    1cda:	ff 1f       	adc	r31, r31
    1cdc:	e2 5e       	subi	r30, 0xE2	; 226
    1cde:	fe 4f       	sbci	r31, 0xFE	; 254
    1ce0:	80 81       	ld	r24, Z
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	00 97       	sbiw	r24, 0x00	; 0
    1ce6:	01 f1       	breq	.+64     	; 0x1d28 <scheduler+0x76>
			{
				task_timers[task] --;
    1ce8:	01 97       	sbiw	r24, 0x01	; 1
    1cea:	f9 01       	movw	r30, r18
    1cec:	ee 0f       	add	r30, r30
    1cee:	ff 1f       	adc	r31, r31
    1cf0:	e2 5e       	subi	r30, 0xE2	; 226
    1cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    1cf4:	91 83       	std	Z+1, r25	; 0x01
    1cf6:	80 83       	st	Z, r24
				if (task_timers[task] == 0)
    1cf8:	89 2b       	or	r24, r25
    1cfa:	b1 f4       	brne	.+44     	; 0x1d28 <scheduler+0x76>
				{
					task_table[task].pf_task();
    1cfc:	79 01       	movw	r14, r18
    1cfe:	ee 0c       	add	r14, r14
    1d00:	ff 1c       	adc	r15, r15
    1d02:	2e 0d       	add	r18, r14
    1d04:	3f 1d       	adc	r19, r15
    1d06:	89 01       	movw	r16, r18
    1d08:	00 50       	subi	r16, 0x00	; 0
    1d0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d0c:	d8 01       	movw	r26, r16
    1d0e:	11 96       	adiw	r26, 0x01	; 1
    1d10:	ed 91       	ld	r30, X+
    1d12:	fc 91       	ld	r31, X
    1d14:	12 97       	sbiw	r26, 0x02	; 2
    1d16:	09 95       	icall
					task_timers[task]= task_table[task].timerValue;
    1d18:	f7 01       	movw	r30, r14
    1d1a:	e2 5e       	subi	r30, 0xE2	; 226
    1d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    1d1e:	d8 01       	movw	r26, r16
    1d20:	8c 91       	ld	r24, X
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	91 83       	std	Z+1, r25	; 0x01
    1d26:	80 83       	st	Z, r24
				}
			}
			task++;
    1d28:	cf 5f       	subi	r28, 0xFF	; 255
{
	u8 task = 0u;
	if (timer_flag == TRUE)
	{
		timer_flag = FALSE;
		while(task < task_number)
    1d2a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <task_number>
    1d2e:	c8 17       	cp	r28, r24
    1d30:	80 f2       	brcs	.-96     	; 0x1cd2 <scheduler+0x20>
	}
	else 
	{
		
	}
}
    1d32:	cf 91       	pop	r28
    1d34:	1f 91       	pop	r17
    1d36:	0f 91       	pop	r16
    1d38:	ff 90       	pop	r15
    1d3a:	ef 90       	pop	r14
    1d3c:	08 95       	ret

00001d3e <create_task>:
void create_task (taskIdType taskId, pf_TaskHandler pf_taskH )
{
	task_table[taskId].timerValue = DEACTIVATE;
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	fc 01       	movw	r30, r24
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	8e 0f       	add	r24, r30
    1d48:	9f 1f       	adc	r25, r31
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	e0 50       	subi	r30, 0x00	; 0
    1d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d50:	10 82       	st	Z, r1
	task_table[taskId].pf_task = pf_taskH;
    1d52:	72 83       	std	Z+2, r23	; 0x02
    1d54:	61 83       	std	Z+1, r22	; 0x01
	task_number++;
    1d56:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <task_number>
    1d5a:	8f 5f       	subi	r24, 0xFF	; 255
    1d5c:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <task_number>
    1d60:	08 95       	ret

00001d62 <__udivmodsi4>:
    1d62:	a1 e2       	ldi	r26, 0x21	; 33
    1d64:	1a 2e       	mov	r1, r26
    1d66:	aa 1b       	sub	r26, r26
    1d68:	bb 1b       	sub	r27, r27
    1d6a:	fd 01       	movw	r30, r26
    1d6c:	0d c0       	rjmp	.+26     	; 0x1d88 <__udivmodsi4_ep>

00001d6e <__udivmodsi4_loop>:
    1d6e:	aa 1f       	adc	r26, r26
    1d70:	bb 1f       	adc	r27, r27
    1d72:	ee 1f       	adc	r30, r30
    1d74:	ff 1f       	adc	r31, r31
    1d76:	a2 17       	cp	r26, r18
    1d78:	b3 07       	cpc	r27, r19
    1d7a:	e4 07       	cpc	r30, r20
    1d7c:	f5 07       	cpc	r31, r21
    1d7e:	20 f0       	brcs	.+8      	; 0x1d88 <__udivmodsi4_ep>
    1d80:	a2 1b       	sub	r26, r18
    1d82:	b3 0b       	sbc	r27, r19
    1d84:	e4 0b       	sbc	r30, r20
    1d86:	f5 0b       	sbc	r31, r21

00001d88 <__udivmodsi4_ep>:
    1d88:	66 1f       	adc	r22, r22
    1d8a:	77 1f       	adc	r23, r23
    1d8c:	88 1f       	adc	r24, r24
    1d8e:	99 1f       	adc	r25, r25
    1d90:	1a 94       	dec	r1
    1d92:	69 f7       	brne	.-38     	; 0x1d6e <__udivmodsi4_loop>
    1d94:	60 95       	com	r22
    1d96:	70 95       	com	r23
    1d98:	80 95       	com	r24
    1d9a:	90 95       	com	r25
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	ac 01       	movw	r20, r24
    1da0:	bd 01       	movw	r22, r26
    1da2:	cf 01       	movw	r24, r30
    1da4:	08 95       	ret

00001da6 <__tablejump2__>:
    1da6:	ee 0f       	add	r30, r30
    1da8:	ff 1f       	adc	r31, r31
    1daa:	00 24       	eor	r0, r0
    1dac:	00 1c       	adc	r0, r0
    1dae:	0b be       	out	0x3b, r0	; 59
    1db0:	07 90       	elpm	r0, Z+
    1db2:	f6 91       	elpm	r31, Z
    1db4:	e0 2d       	mov	r30, r0
    1db6:	09 94       	ijmp

00001db8 <__umulhisi3>:
    1db8:	a2 9f       	mul	r26, r18
    1dba:	b0 01       	movw	r22, r0
    1dbc:	b3 9f       	mul	r27, r19
    1dbe:	c0 01       	movw	r24, r0
    1dc0:	a3 9f       	mul	r26, r19
    1dc2:	70 0d       	add	r23, r0
    1dc4:	81 1d       	adc	r24, r1
    1dc6:	11 24       	eor	r1, r1
    1dc8:	91 1d       	adc	r25, r1
    1dca:	b2 9f       	mul	r27, r18
    1dcc:	70 0d       	add	r23, r0
    1dce:	81 1d       	adc	r24, r1
    1dd0:	11 24       	eor	r1, r1
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	08 95       	ret

00001dd6 <__muluhisi3>:
    1dd6:	f0 df       	rcall	.-32     	; 0x1db8 <__umulhisi3>
    1dd8:	a5 9f       	mul	r26, r21
    1dda:	90 0d       	add	r25, r0
    1ddc:	b4 9f       	mul	r27, r20
    1dde:	90 0d       	add	r25, r0
    1de0:	a4 9f       	mul	r26, r20
    1de2:	80 0d       	add	r24, r0
    1de4:	91 1d       	adc	r25, r1
    1de6:	11 24       	eor	r1, r1
    1de8:	08 95       	ret

00001dea <_exit>:
    1dea:	f8 94       	cli

00001dec <__stop_program>:
    1dec:	ff cf       	rjmp	.-2      	; 0x1dec <__stop_program>
