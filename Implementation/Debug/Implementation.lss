
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002726  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000026b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007d  00800100  00800100  00002726  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002726  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  00002798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006b74  00000000  00000000  00002ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019f1  00000000  00000000  0000985c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002cbe  00000000  00000000  0000b24d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000012f0  00000000  00000000  0000df0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001bfc  00000000  00000000  0000f1fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003f9a  00000000  00000000  00010df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000510  00000000  00000000  00014d92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	a2 c1       	rjmp	.+836    	; 0x34a <__vector_1>
       6:	00 00       	nop
       8:	aa c1       	rjmp	.+852    	; 0x35e <__vector_2>
       a:	00 00       	nop
       c:	b2 c1       	rjmp	.+868    	; 0x372 <__vector_3>
       e:	00 00       	nop
      10:	74 c1       	rjmp	.+744    	; 0x2fa <__vector_4>
      12:	00 00       	nop
      14:	7c c1       	rjmp	.+760    	; 0x30e <__vector_5>
      16:	00 00       	nop
      18:	84 c1       	rjmp	.+776    	; 0x322 <__vector_6>
      1a:	00 00       	nop
      1c:	8c c1       	rjmp	.+792    	; 0x336 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 75 0c 	jmp	0x18ea	; 0x18ea <__vector_8>
      24:	0b c7       	rjmp	.+3606   	; 0xe3c <__vector_9>
      26:	00 00       	nop
      28:	45 c7       	rjmp	.+3722   	; 0xeb4 <__vector_10>
      2a:	00 00       	nop
      2c:	dc c6       	rjmp	.+3512   	; 0xde6 <__vector_11>
      2e:	00 00       	nop
      30:	7d c6       	rjmp	.+3322   	; 0xd2c <__vector_12>
      32:	00 00       	nop
      34:	f0 c5       	rjmp	.+3040   	; 0xc16 <__vector_13>
      36:	00 00       	nop
      38:	4e c6       	rjmp	.+3228   	; 0xcd6 <__vector_14>
      3a:	00 00       	nop
      3c:	c1 c5       	rjmp	.+2946   	; 0xbc0 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	fa c3       	rjmp	.+2036   	; 0x842 <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_20>
      54:	0c 94 a6 0a 	jmp	0x154c	; 0x154c <__vector_21>
      58:	0c 94 03 0b 	jmp	0x1606	; 0x1606 <__vector_22>
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	62 08       	sbc	r6, r2
      8e:	6b 08       	sbc	r6, r11
      90:	74 08       	sbc	r7, r4
      92:	7d 08       	sbc	r7, r13
      94:	86 08       	sbc	r8, r6
      96:	8f 08       	sbc	r8, r15
      98:	98 08       	sbc	r9, r8

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e2 eb       	ldi	r30, 0xB2	; 178
      ae:	f6 e2       	ldi	r31, 0x26	; 38
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ad 37       	cpi	r26, 0x7D	; 125
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	90 d0       	rcall	.+288    	; 0x1f2 <main>
      d2:	0c 94 57 13 	jmp	0x26ae	; 0x26ae <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <incrementMillis>:
	uart_start(s_debugUart);
}

void incrementMillis()
{
	milliseconds++;
      d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
      dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
      e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
      e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	a1 1d       	adc	r26, r1
      ec:	b1 1d       	adc	r27, r1
      ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
      f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
      f6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
      fa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
      fe:	08 95       	ret

00000100 <debug_init>:
timer_struct_t s_schedulerTimer;

u32 milliseconds = 0;

void debug_init()
{
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
	s_debugUart.peripheral = UART0;
     104:	e7 e0       	ldi	r30, 0x07	; 7
     106:	f1 e0       	ldi	r31, 0x01	; 1
     108:	10 82       	st	Z, r1
	s_debugUart.baudRate = _19200;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	18 2f       	mov	r17, r24
     10e:	81 83       	std	Z+1, r24	; 0x01
     110:	8b e4       	ldi	r24, 0x4B	; 75
     112:	82 83       	std	Z+2, r24	; 0x02
     114:	13 82       	std	Z+3, r1	; 0x03
     116:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
     118:	83 e0       	ldi	r24, 0x03	; 3
     11a:	78 2f       	mov	r23, r24
     11c:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
     11e:	92 e0       	ldi	r25, 0x02	; 2
     120:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.stopBits = _1BIT;
     122:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = TRUE;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	58 2f       	mov	r21, r24
     128:	85 83       	std	Z+5, r24	; 0x05
	s_debugUart.useTx = TRUE;
     12a:	68 2f       	mov	r22, r24
     12c:	86 83       	std	Z+6, r24	; 0x06

	uart_init(s_debugUart);
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <s_debugUart+0x2>
     134:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <s_debugUart+0x3>
     138:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <s_debugUart+0x4>
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 2a 0b 	call	0x1654	; 0x1654 <uart_init>
	uart_start(s_debugUart);
     142:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <s_debugUart>
     146:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <s_debugUart+0x1>
     14a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <s_debugUart+0x2>
     14e:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <s_debugUart+0x3>
     152:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <s_debugUart+0x4>
     156:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <s_debugUart+0x5>
     15a:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <s_debugUart+0x6>
     15e:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <s_debugUart+0x7>
     162:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <s_debugUart+0x8>
     166:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <s_debugUart+0x9>
     16a:	0e 94 e6 0b 	call	0x17cc	; 0x17cc <uart_start>
}
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	08 95       	ret

00000174 <scheduler_init>:
{
	milliseconds++;
}

void scheduler_init()
{
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
	s_schedulerTimer.frequency = 1000;
     178:	e1 e1       	ldi	r30, 0x11	; 17
     17a:	f1 e0       	ldi	r31, 0x01	; 1
     17c:	88 ee       	ldi	r24, 0xE8	; 232
     17e:	58 2f       	mov	r21, r24
     180:	81 83       	std	Z+1, r24	; 0x01
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	82 83       	std	Z+2, r24	; 0x02
     186:	13 82       	std	Z+3, r1	; 0x03
     188:	14 82       	std	Z+4, r1	; 0x04
	s_schedulerTimer.peripheral = TIMER1;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	48 2f       	mov	r20, r24
     18e:	80 83       	st	Z, r24

	timer_init(s_schedulerTimer);
     190:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <s_schedulerTimer+0x2>
     194:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <s_schedulerTimer+0x3>
     198:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <s_schedulerTimer+0x4>
     19c:	b6 d6       	rcall	.+3436   	; 0xf0a <timer_init>
	timer_attachInterrupt(s_schedulerTimer, OVERFLOW, incrementMillis);
     19e:	0c e6       	ldi	r16, 0x6C	; 108
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <s_schedulerTimer>
     1a8:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <s_schedulerTimer+0x1>
     1ac:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <s_schedulerTimer+0x2>
     1b0:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <s_schedulerTimer+0x3>
     1b4:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <s_schedulerTimer+0x4>
     1b8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <timer_attachInterrupt>
	timer_enableInterrupt(s_schedulerTimer, OVERFLOW);
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <s_schedulerTimer>
     1c2:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <s_schedulerTimer+0x1>
     1c6:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <s_schedulerTimer+0x2>
     1ca:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <s_schedulerTimer+0x3>
     1ce:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <s_schedulerTimer+0x4>
     1d2:	0e 94 16 09 	call	0x122c	; 0x122c <timer_enableInterrupt>
	timer_start(s_schedulerTimer);
     1d6:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <s_schedulerTimer>
     1da:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <s_schedulerTimer+0x1>
     1de:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <s_schedulerTimer+0x2>
     1e2:	70 91 14 01 	lds	r23, 0x0114	; 0x800114 <s_schedulerTimer+0x3>
     1e6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <s_schedulerTimer+0x4>
     1ea:	db d7       	rcall	.+4022   	; 0x11a2 <timer_start>
}
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	08 95       	ret

000001f2 <main>:

int main(void)
{
	u8 u8_distance = 0;
	device_disableJTAG();
	debug_init();
     1f2:	5f d0       	rcall	.+190    	; 0x2b2 <device_disableJTAG>

	vl53l0x_init();
     1f4:	85 df       	rcall	.-246    	; 0x100 <debug_init>

	scheduler_init();
     1f6:	0e 94 c7 12 	call	0x258e	; 0x258e <vl53l0x_init>
	sei();
     1fa:	bc df       	rcall	.-136    	; 0x174 <scheduler_init>

	vl53l0x_start();
     1fc:	78 94       	sei
     1fe:	0e 94 f0 12 	call	0x25e0	; 0x25e0 <vl53l0x_start>

    while (1)
    {
		u8_distance = vl53l0x_getDistance();
     202:	0e 94 09 13 	call	0x2612	; 0x2612 <vl53l0x_getDistance>
	    uart_transmit(s_debugUart, (u8)(u8_distance >> 8));
     206:	ec 01       	movw	r28, r24
     208:	e1 2c       	mov	r14, r1
     20a:	f1 2c       	mov	r15, r1
     20c:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <s_debugUart>
     210:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <s_debugUart+0x1>
     214:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <s_debugUart+0x2>
     218:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <s_debugUart+0x3>
     21c:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <s_debugUart+0x4>
     220:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <s_debugUart+0x5>
     224:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <s_debugUart+0x6>
     228:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <s_debugUart+0x7>
     22c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <s_debugUart+0x8>
     230:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <s_debugUart+0x9>
     234:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart_transmit>
	    uart_transmit(s_debugUart, u8_distance);
     238:	7e 01       	movw	r14, r28
     23a:	ff 24       	eor	r15, r15
     23c:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <s_debugUart>
     240:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <s_debugUart+0x1>
     244:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <s_debugUart+0x2>
     248:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <s_debugUart+0x3>
     24c:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <s_debugUart+0x4>
     250:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <s_debugUart+0x5>
     254:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <s_debugUart+0x6>
     258:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <s_debugUart+0x7>
     25c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <s_debugUart+0x8>
     260:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <s_debugUart+0x9>
     264:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart_transmit>
	    uart_transmit(s_debugUart, '\n');
     268:	0f 2e       	mov	r0, r31
     26a:	fa e0       	ldi	r31, 0x0A	; 10
     26c:	ef 2e       	mov	r14, r31
     26e:	f1 2c       	mov	r15, r1
     270:	f0 2d       	mov	r31, r0
     272:	00 91 07 01 	lds	r16, 0x0107	; 0x800107 <s_debugUart>
     276:	10 91 08 01 	lds	r17, 0x0108	; 0x800108 <s_debugUart+0x1>
     27a:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <s_debugUart+0x2>
     27e:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <s_debugUart+0x3>
     282:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <s_debugUart+0x4>
     286:	50 91 0c 01 	lds	r21, 0x010C	; 0x80010c <s_debugUart+0x5>
     28a:	60 91 0d 01 	lds	r22, 0x010D	; 0x80010d <s_debugUart+0x6>
     28e:	70 91 0e 01 	lds	r23, 0x010E	; 0x80010e <s_debugUart+0x7>
     292:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <s_debugUart+0x8>
     296:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <s_debugUart+0x9>
     29a:	0e 94 0c 0c 	call	0x1818	; 0x1818 <uart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     29e:	2f ef       	ldi	r18, 0xFF	; 255
     2a0:	80 e7       	ldi	r24, 0x70	; 112
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	21 50       	subi	r18, 0x01	; 1
     2a6:	80 40       	sbci	r24, 0x00	; 0
     2a8:	90 40       	sbci	r25, 0x00	; 0
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <main+0xb2>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <main+0xbc>
     2ae:	00 00       	nop
     2b0:	a8 cf       	rjmp	.-176    	; 0x202 <main+0x10>

000002b2 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     2b2:	80 e8       	ldi	r24, 0x80	; 128
     2b4:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     2b6:	85 bf       	out	0x35, r24	; 53
     2b8:	08 95       	ret

000002ba <gpio_changeDirection>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
     2ba:	61 30       	cpi	r22, 0x01	; 1
     2bc:	61 f0       	breq	.+24     	; 0x2d6 <gpio_changeDirection+0x1c>
     2be:	28 f0       	brcs	.+10     	; 0x2ca <gpio_changeDirection+0x10>
     2c0:	62 30       	cpi	r22, 0x02	; 2
     2c2:	79 f0       	breq	.+30     	; 0x2e2 <gpio_changeDirection+0x28>
     2c4:	63 30       	cpi	r22, 0x03	; 3
     2c6:	99 f0       	breq	.+38     	; 0x2ee <gpio_changeDirection+0x34>
     2c8:	08 95       	ret
     2ca:	48 2f       	mov	r20, r24
     2cc:	67 2f       	mov	r22, r23
     2ce:	81 e2       	ldi	r24, 0x21	; 33
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	5e c2       	rjmp	.+1212   	; 0x790 <updateBit>
     2d4:	08 95       	ret
     2d6:	48 2f       	mov	r20, r24
     2d8:	67 2f       	mov	r22, r23
     2da:	84 e2       	ldi	r24, 0x24	; 36
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	58 c2       	rjmp	.+1200   	; 0x790 <updateBit>
     2e0:	08 95       	ret
     2e2:	48 2f       	mov	r20, r24
     2e4:	67 2f       	mov	r22, r23
     2e6:	87 e2       	ldi	r24, 0x27	; 39
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	52 c2       	rjmp	.+1188   	; 0x790 <updateBit>
     2ec:	08 95       	ret
     2ee:	48 2f       	mov	r20, r24
     2f0:	67 2f       	mov	r22, r23
     2f2:	8a e2       	ldi	r24, 0x2A	; 42
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	4c c2       	rjmp	.+1176   	; 0x790 <updateBit>
     2f8:	08 95       	ret

000002fa <__vector_4>:
     2fa:	1f 92       	push	r1
     2fc:	0f 92       	push	r0
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	0f 92       	push	r0
     302:	11 24       	eor	r1, r1
     304:	0f 90       	pop	r0
     306:	0f be       	out	0x3f, r0	; 63
     308:	0f 90       	pop	r0
     30a:	1f 90       	pop	r1
     30c:	18 95       	reti

0000030e <__vector_5>:
     30e:	1f 92       	push	r1
     310:	0f 92       	push	r0
     312:	0f b6       	in	r0, 0x3f	; 63
     314:	0f 92       	push	r0
     316:	11 24       	eor	r1, r1
     318:	0f 90       	pop	r0
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	0f 90       	pop	r0
     31e:	1f 90       	pop	r1
     320:	18 95       	reti

00000322 <__vector_6>:
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	0f 90       	pop	r0
     32e:	0f be       	out	0x3f, r0	; 63
     330:	0f 90       	pop	r0
     332:	1f 90       	pop	r1
     334:	18 95       	reti

00000336 <__vector_7>:
     336:	1f 92       	push	r1
     338:	0f 92       	push	r0
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	0f 92       	push	r0
     33e:	11 24       	eor	r1, r1
     340:	0f 90       	pop	r0
     342:	0f be       	out	0x3f, r0	; 63
     344:	0f 90       	pop	r0
     346:	1f 90       	pop	r1
     348:	18 95       	reti

0000034a <__vector_1>:
     34a:	1f 92       	push	r1
     34c:	0f 92       	push	r0
     34e:	0f b6       	in	r0, 0x3f	; 63
     350:	0f 92       	push	r0
     352:	11 24       	eor	r1, r1
     354:	0f 90       	pop	r0
     356:	0f be       	out	0x3f, r0	; 63
     358:	0f 90       	pop	r0
     35a:	1f 90       	pop	r1
     35c:	18 95       	reti

0000035e <__vector_2>:
     35e:	1f 92       	push	r1
     360:	0f 92       	push	r0
     362:	0f b6       	in	r0, 0x3f	; 63
     364:	0f 92       	push	r0
     366:	11 24       	eor	r1, r1
     368:	0f 90       	pop	r0
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	0f 90       	pop	r0
     36e:	1f 90       	pop	r1
     370:	18 95       	reti

00000372 <__vector_3>:
     372:	1f 92       	push	r1
     374:	0f 92       	push	r0
     376:	0f b6       	in	r0, 0x3f	; 63
     378:	0f 92       	push	r0
     37a:	11 24       	eor	r1, r1
     37c:	0f 90       	pop	r0
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti

00000386 <gpio_init>:
     386:	0f 93       	push	r16
     388:	1f 93       	push	r17
     38a:	cf 93       	push	r28
     38c:	df 93       	push	r29
     38e:	c6 2f       	mov	r28, r22
     390:	17 2f       	mov	r17, r23
     392:	d8 2f       	mov	r29, r24
     394:	09 2f       	mov	r16, r25
     396:	91 df       	rcall	.-222    	; 0x2ba <gpio_changeDirection>
     398:	d1 11       	cpse	r29, r1
     39a:	23 c0       	rjmp	.+70     	; 0x3e2 <gpio_init+0x5c>
     39c:	c1 30       	cpi	r28, 0x01	; 1
     39e:	81 f0       	breq	.+32     	; 0x3c0 <gpio_init+0x3a>
     3a0:	28 f0       	brcs	.+10     	; 0x3ac <gpio_init+0x26>
     3a2:	c2 30       	cpi	r28, 0x02	; 2
     3a4:	99 f0       	breq	.+38     	; 0x3cc <gpio_init+0x46>
     3a6:	c3 30       	cpi	r28, 0x03	; 3
     3a8:	b9 f0       	breq	.+46     	; 0x3d8 <gpio_init+0x52>
     3aa:	1b c0       	rjmp	.+54     	; 0x3e2 <gpio_init+0x5c>
     3ac:	40 2f       	mov	r20, r16
     3ae:	61 2f       	mov	r22, r17
     3b0:	82 e2       	ldi	r24, 0x22	; 34
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	ed d1       	rcall	.+986    	; 0x790 <updateBit>
     3b6:	61 2f       	mov	r22, r17
     3b8:	8e e7       	ldi	r24, 0x7E	; 126
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0d d2       	rcall	.+1050   	; 0x7d8 <clearBit>
     3be:	11 c0       	rjmp	.+34     	; 0x3e2 <gpio_init+0x5c>
     3c0:	40 2f       	mov	r20, r16
     3c2:	61 2f       	mov	r22, r17
     3c4:	85 e2       	ldi	r24, 0x25	; 37
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	e3 d1       	rcall	.+966    	; 0x790 <updateBit>
     3ca:	0b c0       	rjmp	.+22     	; 0x3e2 <gpio_init+0x5c>
     3cc:	40 2f       	mov	r20, r16
     3ce:	61 2f       	mov	r22, r17
     3d0:	88 e2       	ldi	r24, 0x28	; 40
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	dd d1       	rcall	.+954    	; 0x790 <updateBit>
     3d6:	05 c0       	rjmp	.+10     	; 0x3e2 <gpio_init+0x5c>
     3d8:	40 2f       	mov	r20, r16
     3da:	61 2f       	mov	r22, r17
     3dc:	8b e2       	ldi	r24, 0x2B	; 43
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	d7 d1       	rcall	.+942    	; 0x790 <updateBit>
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     3ec:	61 30       	cpi	r22, 0x01	; 1
     3ee:	59 f0       	breq	.+22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f0:	28 f0       	brcs	.+10     	; 0x3fc <gpio_out_set+0x10>
     3f2:	62 30       	cpi	r22, 0x02	; 2
     3f4:	69 f0       	breq	.+26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f6:	63 30       	cpi	r22, 0x03	; 3
     3f8:	81 f0       	breq	.+32     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     3fa:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     3fc:	67 2f       	mov	r22, r23
     3fe:	82 e2       	ldi	r24, 0x22	; 34
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	de c1       	rjmp	.+956    	; 0x7c0 <setBit>
			break;
     404:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     406:	67 2f       	mov	r22, r23
     408:	85 e2       	ldi	r24, 0x25	; 37
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	d9 c1       	rjmp	.+946    	; 0x7c0 <setBit>
			break;
     40e:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     410:	67 2f       	mov	r22, r23
     412:	88 e2       	ldi	r24, 0x28	; 40
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	d4 c1       	rjmp	.+936    	; 0x7c0 <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
     418:	08 95       	ret
     41a:	67 2f       	mov	r22, r23
     41c:	8b e2       	ldi	r24, 0x2B	; 43
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	cf c1       	rjmp	.+926    	; 0x7c0 <setBit>
     422:	08 95       	ret

00000424 <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	8b 01       	movw	r16, r22
     42e:	9c 01       	movw	r18, r24
     430:	ea 01       	movw	r28, r20
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	72 e1       	ldi	r23, 0x12	; 18
     436:	8a e7       	ldi	r24, 0x7A	; 122
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	a9 01       	movw	r20, r18
     43c:	98 01       	movw	r18, r16
     43e:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     442:	ba 01       	movw	r22, r20
     444:	a9 01       	movw	r20, r18
     446:	40 51       	subi	r20, 0x10	; 16
     448:	51 09       	sbc	r21, r1
     44a:	61 09       	sbc	r22, r1
     44c:	71 09       	sbc	r23, r1
     44e:	db 01       	movw	r26, r22
     450:	ca 01       	movw	r24, r20
     452:	b6 95       	lsr	r27
     454:	a7 95       	ror	r26
     456:	97 95       	ror	r25
     458:	87 95       	ror	r24
     45a:	8f 3f       	cpi	r24, 0xFF	; 255
     45c:	91 05       	cpc	r25, r1
     45e:	a1 05       	cpc	r26, r1
     460:	b1 05       	cpc	r27, r1
     462:	09 f0       	breq	.+2      	; 0x466 <calculateTWBR+0x42>
     464:	10 f4       	brcc	.+4      	; 0x46a <calculateTWBR+0x46>
     466:	18 82       	st	Y, r1
     468:	32 c0       	rjmp	.+100    	; 0x4ce <calculateTWBR+0xaa>
     46a:	db 01       	movw	r26, r22
     46c:	ca 01       	movw	r24, r20
     46e:	68 94       	set
     470:	12 f8       	bld	r1, 2
     472:	b6 95       	lsr	r27
     474:	a7 95       	ror	r26
     476:	97 95       	ror	r25
     478:	87 95       	ror	r24
     47a:	16 94       	lsr	r1
     47c:	d1 f7       	brne	.-12     	; 0x472 <calculateTWBR+0x4e>
     47e:	8f 3f       	cpi	r24, 0xFF	; 255
     480:	91 05       	cpc	r25, r1
     482:	a1 05       	cpc	r26, r1
     484:	b1 05       	cpc	r27, r1
     486:	09 f0       	breq	.+2      	; 0x48a <calculateTWBR+0x66>
     488:	18 f4       	brcc	.+6      	; 0x490 <calculateTWBR+0x6c>
     48a:	21 e0       	ldi	r18, 0x01	; 1
     48c:	28 83       	st	Y, r18
     48e:	1f c0       	rjmp	.+62     	; 0x4ce <calculateTWBR+0xaa>
     490:	db 01       	movw	r26, r22
     492:	ca 01       	movw	r24, r20
     494:	68 94       	set
     496:	14 f8       	bld	r1, 4
     498:	b6 95       	lsr	r27
     49a:	a7 95       	ror	r26
     49c:	97 95       	ror	r25
     49e:	87 95       	ror	r24
     4a0:	16 94       	lsr	r1
     4a2:	d1 f7       	brne	.-12     	; 0x498 <calculateTWBR+0x74>
     4a4:	8f 3f       	cpi	r24, 0xFF	; 255
     4a6:	91 05       	cpc	r25, r1
     4a8:	a1 05       	cpc	r26, r1
     4aa:	b1 05       	cpc	r27, r1
     4ac:	09 f0       	breq	.+2      	; 0x4b0 <calculateTWBR+0x8c>
     4ae:	18 f4       	brcc	.+6      	; 0x4b6 <calculateTWBR+0x92>
     4b0:	22 e0       	ldi	r18, 0x02	; 2
     4b2:	28 83       	st	Y, r18
     4b4:	0c c0       	rjmp	.+24     	; 0x4ce <calculateTWBR+0xaa>
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	88 83       	st	Y, r24
     4ba:	db 01       	movw	r26, r22
     4bc:	ca 01       	movw	r24, r20
     4be:	68 94       	set
     4c0:	16 f8       	bld	r1, 6
     4c2:	b6 95       	lsr	r27
     4c4:	a7 95       	ror	r26
     4c6:	97 95       	ror	r25
     4c8:	87 95       	ror	r24
     4ca:	16 94       	lsr	r1
     4cc:	d1 f7       	brne	.-12     	; 0x4c2 <calculateTWBR+0x9e>
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	08 95       	ret

000004d8 <stopAndGetErrorCode>:
     4d8:	cf 93       	push	r28
     4da:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4de:	64 e0       	ldi	r22, 0x04	; 4
     4e0:	8c eb       	ldi	r24, 0xBC	; 188
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	6d d1       	rcall	.+730    	; 0x7c0 <setBit>
     4e6:	8c 2f       	mov	r24, r28
     4e8:	88 7f       	andi	r24, 0xF8	; 248
     4ea:	cf 91       	pop	r28
     4ec:	08 95       	ret

000004ee <i2c_init>:
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	00 d0       	rcall	.+0      	; 0x4f4 <i2c_init+0x6>
     4f4:	00 d0       	rcall	.+0      	; 0x4f6 <i2c_init+0x8>
     4f6:	00 d0       	rcall	.+0      	; 0x4f8 <i2c_init+0xa>
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	5b 83       	std	Y+3, r21	; 0x03
     4fe:	6c 83       	std	Y+4, r22	; 0x04
     500:	7d 83       	std	Y+5, r23	; 0x05
     502:	8e 83       	std	Y+6, r24	; 0x06
     504:	6b 81       	ldd	r22, Y+3	; 0x03
     506:	7c 81       	ldd	r23, Y+4	; 0x04
     508:	8d 81       	ldd	r24, Y+5	; 0x05
     50a:	9e 81       	ldd	r25, Y+6	; 0x06
     50c:	ae 01       	movw	r20, r28
     50e:	4f 5f       	subi	r20, 0xFF	; 255
     510:	5f 4f       	sbci	r21, 0xFF	; 255
     512:	88 df       	rcall	.-240    	; 0x424 <calculateTWBR>
     514:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	6a d1       	rcall	.+724    	; 0x7f2 <checkBit>
     51e:	48 2f       	mov	r20, r24
     520:	60 e0       	ldi	r22, 0x00	; 0
     522:	89 eb       	ldi	r24, 0xB9	; 185
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	34 d1       	rcall	.+616    	; 0x790 <updateBit>
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	89 81       	ldd	r24, Y+1	; 0x01
     52c:	62 d1       	rcall	.+708    	; 0x7f2 <checkBit>
     52e:	48 2f       	mov	r20, r24
     530:	61 e0       	ldi	r22, 0x01	; 1
     532:	89 eb       	ldi	r24, 0xB9	; 185
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	2c d1       	rcall	.+600    	; 0x790 <updateBit>
     538:	62 e0       	ldi	r22, 0x02	; 2
     53a:	71 e0       	ldi	r23, 0x01	; 1
     53c:	80 e0       	ldi	r24, 0x00	; 0
     53e:	91 e0       	ldi	r25, 0x01	; 1
     540:	22 df       	rcall	.-444    	; 0x386 <gpio_init>
     542:	62 e0       	ldi	r22, 0x02	; 2
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	91 e0       	ldi	r25, 0x01	; 1
     54a:	1d df       	rcall	.-454    	; 0x386 <gpio_init>
     54c:	26 96       	adiw	r28, 0x06	; 6
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <i2c_start>:
     55e:	62 e0       	ldi	r22, 0x02	; 2
     560:	8c eb       	ldi	r24, 0xBC	; 188
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	2d c1       	rjmp	.+602    	; 0x7c0 <setBit>
     566:	08 95       	ret

00000568 <i2c_transmit>:
}

u8 i2c_transmit(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	18 2f       	mov	r17, r24
     57e:	6b 01       	movw	r12, r22
     580:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     582:	65 e0       	ldi	r22, 0x05	; 5
     584:	8c eb       	ldi	r24, 0xBC	; 188
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	1b d1       	rcall	.+566    	; 0x7c0 <setBit>
	/* Clear I2C flag */
	setBit(&TWCR, TWINT);
     58a:	67 e0       	ldi	r22, 0x07	; 7
     58c:	8c eb       	ldi	r24, 0xBC	; 188
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	17 d1       	rcall	.+558    	; 0x7c0 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     592:	cc eb       	ldi	r28, 0xBC	; 188
     594:	d0 e0       	ldi	r29, 0x00	; 0
     596:	88 81       	ld	r24, Y
     598:	67 e0       	ldi	r22, 0x07	; 7
     59a:	2b d1       	rcall	.+598    	; 0x7f2 <checkBit>
     59c:	88 23       	and	r24, r24
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     59e:	d9 f3       	breq	.-10     	; 0x596 <i2c_transmit+0x2e>
     5a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a4:	88 7f       	andi	r24, 0xF8	; 248
     5a6:	88 30       	cpi	r24, 0x08	; 8
     5a8:	09 f0       	breq	.+2      	; 0x5ac <i2c_transmit+0x44>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     5aa:	47 c0       	rjmp	.+142    	; 0x63a <i2c_transmit+0xd2>
     5ac:	11 0f       	add	r17, r17
		/* Set write mode */
		clearBit(&TWDR, TWD0);
     5ae:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5b2:	60 e0       	ldi	r22, 0x00	; 0
		/* Clear start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     5b4:	8b eb       	ldi	r24, 0xBB	; 187
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0f d1       	rcall	.+542    	; 0x7d8 <clearBit>
     5ba:	65 e0       	ldi	r22, 0x05	; 5
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     5bc:	8c eb       	ldi	r24, 0xBC	; 188
     5be:	90 e0       	ldi	r25, 0x00	; 0
     5c0:	0b d1       	rcall	.+534    	; 0x7d8 <clearBit>
     5c2:	cc eb       	ldi	r28, 0xBC	; 188
     5c4:	d0 e0       	ldi	r29, 0x00	; 0
     5c6:	88 81       	ld	r24, Y
     5c8:	67 e0       	ldi	r22, 0x07	; 7
     5ca:	13 d1       	rcall	.+550    	; 0x7f2 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
     5cc:	88 23       	and	r24, r24
     5ce:	d9 f3       	breq	.-10     	; 0x5c6 <i2c_transmit+0x5e>
     5d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5d4:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Transmit data */
			while (i != u8_dataLength)
     5d6:	88 31       	cpi	r24, 0x18	; 24
     5d8:	71 f5       	brne	.+92     	; 0x636 <i2c_transmit+0xce>
     5da:	ee 20       	and	r14, r14
     5dc:	81 f1       	breq	.+96     	; 0x63e <i2c_transmit+0xd6>
     5de:	86 01       	movw	r16, r12
     5e0:	ea 94       	dec	r14
     5e2:	f1 2c       	mov	r15, r1
     5e4:	8f ef       	ldi	r24, 0xFF	; 255
     5e6:	e8 1a       	sub	r14, r24
     5e8:	f8 0a       	sbc	r15, r24
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     5ea:	ec 0c       	add	r14, r12
     5ec:	fd 1c       	adc	r15, r13
     5ee:	0f 2e       	mov	r0, r31
     5f0:	fb eb       	ldi	r31, 0xBB	; 187
     5f2:	af 2e       	mov	r10, r31
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     5f4:	b1 2c       	mov	r11, r1
     5f6:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     5f8:	cc eb       	ldi	r28, 0xBC	; 188
     5fa:	d0 e0       	ldi	r29, 0x00	; 0
     5fc:	0f 2e       	mov	r0, r31
     5fe:	f9 eb       	ldi	r31, 0xB9	; 185
     600:	cf 2e       	mov	r12, r31
		{
			/* Transmit data */
			while (i != u8_dataLength)
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     602:	d1 2c       	mov	r13, r1
     604:	f0 2d       	mov	r31, r0
     606:	f8 01       	movw	r30, r16
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     608:	81 91       	ld	r24, Z+
     60a:	8f 01       	movw	r16, r30
     60c:	f5 01       	movw	r30, r10
     60e:	80 83       	st	Z, r24
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     610:	67 e0       	ldi	r22, 0x07	; 7
     612:	ce 01       	movw	r24, r28
     614:	d5 d0       	rcall	.+426    	; 0x7c0 <setBit>
     616:	88 81       	ld	r24, Y
     618:	67 e0       	ldi	r22, 0x07	; 7
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     61a:	eb d0       	rcall	.+470    	; 0x7f2 <checkBit>
     61c:	88 23       	and	r24, r24
     61e:	d9 f3       	breq	.-10     	; 0x616 <i2c_transmit+0xae>
					return stopAndGetErrorCode();
     620:	f6 01       	movw	r30, r12
     622:	80 81       	ld	r24, Z
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
		{
			/* Transmit data */
			while (i != u8_dataLength)
     624:	88 7f       	andi	r24, 0xF8	; 248
     626:	88 32       	cpi	r24, 0x28	; 40
     628:	11 f0       	breq	.+4      	; 0x62e <i2c_transmit+0xc6>
					return stopAndGetErrorCode();
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     62a:	56 df       	rcall	.-340    	; 0x4d8 <stopAndGetErrorCode>
     62c:	13 c0       	rjmp	.+38     	; 0x654 <i2c_transmit+0xec>
	}
	else
		return stopAndGetErrorCode();
     62e:	0e 15       	cp	r16, r14
     630:	1f 05       	cpc	r17, r15
	
	/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
	setBit(&TWCR, TWSTO);
     632:	49 f7       	brne	.-46     	; 0x606 <i2c_transmit+0x9e>
     634:	04 c0       	rjmp	.+8      	; 0x63e <i2c_transmit+0xd6>
     636:	50 df       	rcall	.-352    	; 0x4d8 <stopAndGetErrorCode>
     638:	0d c0       	rjmp	.+26     	; 0x654 <i2c_transmit+0xec>
     63a:	4e df       	rcall	.-356    	; 0x4d8 <stopAndGetErrorCode>
	/* Wait for stop condition to be sent. */
	while (checkBit(TWCR, TWSTO));
     63c:	0b c0       	rjmp	.+22     	; 0x654 <i2c_transmit+0xec>
     63e:	64 e0       	ldi	r22, 0x04	; 4
     640:	8c eb       	ldi	r24, 0xBC	; 188
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	bd d0       	rcall	.+378    	; 0x7c0 <setBit>
     646:	cc eb       	ldi	r28, 0xBC	; 188
     648:	d0 e0       	ldi	r29, 0x00	; 0
     64a:	88 81       	ld	r24, Y

	return I2C_NO_ERROR;
}
     64c:	64 e0       	ldi	r22, 0x04	; 4
     64e:	d1 d0       	rcall	.+418    	; 0x7f2 <checkBit>
     650:	81 11       	cpse	r24, r1
     652:	fb cf       	rjmp	.-10     	; 0x64a <i2c_transmit+0xe2>
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	bf 90       	pop	r11
     666:	af 90       	pop	r10
     668:	08 95       	ret

0000066a <i2c_receive>:

u8 i2c_receive(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     66a:	af 92       	push	r10
     66c:	bf 92       	push	r11
     66e:	cf 92       	push	r12
     670:	df 92       	push	r13
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
     67e:	18 2f       	mov	r17, r24
     680:	6b 01       	movw	r12, r22
     682:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     684:	65 e0       	ldi	r22, 0x05	; 5
     686:	8c eb       	ldi	r24, 0xBC	; 188
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	9a d0       	rcall	.+308    	; 0x7c0 <setBit>
	/* Clear I2C flag */
	setBit(&TWCR, TWINT);
     68c:	67 e0       	ldi	r22, 0x07	; 7
     68e:	8c eb       	ldi	r24, 0xBC	; 188
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	96 d0       	rcall	.+300    	; 0x7c0 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     694:	cc eb       	ldi	r28, 0xBC	; 188
     696:	d0 e0       	ldi	r29, 0x00	; 0
     698:	88 81       	ld	r24, Y
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	aa d0       	rcall	.+340    	; 0x7f2 <checkBit>
     69e:	88 23       	and	r24, r24
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     6a0:	d9 f3       	breq	.-10     	; 0x698 <i2c_receive+0x2e>
     6a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6a6:	88 7f       	andi	r24, 0xF8	; 248
     6a8:	88 30       	cpi	r24, 0x08	; 8
     6aa:	09 f0       	breq	.+2      	; 0x6ae <i2c_receive+0x44>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     6ac:	47 c0       	rjmp	.+142    	; 0x73c <i2c_receive+0xd2>
     6ae:	11 0f       	add	r17, r17
		/* Set read mode */
		setBit(&TWDR, TWD0);
     6b0:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6b4:	60 e0       	ldi	r22, 0x00	; 0
		/* Clear start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     6b6:	8b eb       	ldi	r24, 0xBB	; 187
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	82 d0       	rcall	.+260    	; 0x7c0 <setBit>
     6bc:	65 e0       	ldi	r22, 0x05	; 5
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     6be:	8c eb       	ldi	r24, 0xBC	; 188
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	8a d0       	rcall	.+276    	; 0x7d8 <clearBit>
     6c4:	cc eb       	ldi	r28, 0xBC	; 188
     6c6:	d0 e0       	ldi	r29, 0x00	; 0
     6c8:	88 81       	ld	r24, Y
     6ca:	67 e0       	ldi	r22, 0x07	; 7
     6cc:	92 d0       	rcall	.+292    	; 0x7f2 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
     6ce:	88 23       	and	r24, r24
     6d0:	d9 f3       	breq	.-10     	; 0x6c8 <i2c_receive+0x5e>
     6d2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6d6:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Receive data */
			while (i != u8_dataLength)
     6d8:	80 34       	cpi	r24, 0x40	; 64
     6da:	71 f5       	brne	.+92     	; 0x738 <i2c_receive+0xce>
     6dc:	ee 20       	and	r14, r14
     6de:	81 f1       	breq	.+96     	; 0x740 <i2c_receive+0xd6>
     6e0:	86 01       	movw	r16, r12
     6e2:	ea 94       	dec	r14
     6e4:	f1 2c       	mov	r15, r1
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	e8 1a       	sub	r14, r24
     6ea:	f8 0a       	sbc	r15, r24
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     6ec:	ec 0c       	add	r14, r12
     6ee:	fd 1c       	adc	r15, r13
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     6f0:	cc eb       	ldi	r28, 0xBC	; 188
     6f2:	d0 e0       	ldi	r29, 0x00	; 0
     6f4:	0f 2e       	mov	r0, r31
     6f6:	f9 eb       	ldi	r31, 0xB9	; 185
     6f8:	cf 2e       	mov	r12, r31
					return stopAndGetErrorCode();
				/* Read next byte */
				au8_data[i] = TWDR;
     6fa:	d1 2c       	mov	r13, r1
     6fc:	f0 2d       	mov	r31, r0
     6fe:	0f 2e       	mov	r0, r31
		{
			/* Receive data */
			while (i != u8_dataLength)
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     700:	fb eb       	ldi	r31, 0xBB	; 187
     702:	af 2e       	mov	r10, r31
     704:	b1 2c       	mov	r11, r1
     706:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     708:	66 e0       	ldi	r22, 0x06	; 6
     70a:	ce 01       	movw	r24, r28
     70c:	59 d0       	rcall	.+178    	; 0x7c0 <setBit>
     70e:	88 81       	ld	r24, Y
     710:	67 e0       	ldi	r22, 0x07	; 7
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     712:	6f d0       	rcall	.+222    	; 0x7f2 <checkBit>
     714:	88 23       	and	r24, r24
     716:	d9 f3       	breq	.-10     	; 0x70e <i2c_receive+0xa4>
     718:	f6 01       	movw	r30, r12
     71a:	80 81       	ld	r24, Z
					return stopAndGetErrorCode();
     71c:	88 7f       	andi	r24, 0xF8	; 248
     71e:	80 35       	cpi	r24, 0x50	; 80
				/* Read next byte */
				au8_data[i] = TWDR;
     720:	11 f0       	breq	.+4      	; 0x726 <i2c_receive+0xbc>
     722:	da de       	rcall	.-588    	; 0x4d8 <stopAndGetErrorCode>
     724:	2a c0       	rjmp	.+84     	; 0x77a <i2c_receive+0x110>
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
		{
			/* Receive data */
			while (i != u8_dataLength)
     726:	f5 01       	movw	r30, r10
     728:	80 81       	ld	r24, Z
     72a:	f8 01       	movw	r30, r16
				au8_data[i] = TWDR;
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     72c:	81 93       	st	Z+, r24
     72e:	8f 01       	movw	r16, r30
	}
	else
		return stopAndGetErrorCode();
     730:	ee 15       	cp	r30, r14
     732:	ff 05       	cpc	r31, r15
	
	/* Send NACK after all expected transfers are done. Also clears I2C flag because it writes a 1 to it. */
	clearBit(&TWCR, TWEA);
     734:	49 f7       	brne	.-46     	; 0x708 <i2c_receive+0x9e>
     736:	04 c0       	rjmp	.+8      	; 0x740 <i2c_receive+0xd6>
     738:	cf de       	rcall	.-610    	; 0x4d8 <stopAndGetErrorCode>
     73a:	1f c0       	rjmp	.+62     	; 0x77a <i2c_receive+0x110>
     73c:	cd de       	rcall	.-614    	; 0x4d8 <stopAndGetErrorCode>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     73e:	1d c0       	rjmp	.+58     	; 0x77a <i2c_receive+0x110>
     740:	66 e0       	ldi	r22, 0x06	; 6
     742:	8c eb       	ldi	r24, 0xBC	; 188
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	48 d0       	rcall	.+144    	; 0x7d8 <clearBit>
     748:	cc eb       	ldi	r28, 0xBC	; 188
	/* If NACK was sent, all is good */
	if ((TWSR & 0xF8) == I2C_DATA_READ_NACK)
     74a:	d0 e0       	ldi	r29, 0x00	; 0
     74c:	88 81       	ld	r24, Y
     74e:	67 e0       	ldi	r22, 0x07	; 7
     750:	50 d0       	rcall	.+160    	; 0x7f2 <checkBit>
	{
		/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
		setBit(&TWCR, TWSTO);
     752:	88 23       	and	r24, r24
     754:	d9 f3       	breq	.-10     	; 0x74c <i2c_receive+0xe2>
     756:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     75a:	88 7f       	andi	r24, 0xF8	; 248
		/* Wait for stop condition to be sent. */
		while (checkBit(TWCR, TWSTO));
     75c:	88 35       	cpi	r24, 0x58	; 88
     75e:	61 f4       	brne	.+24     	; 0x778 <i2c_receive+0x10e>
     760:	64 e0       	ldi	r22, 0x04	; 4
     762:	8c eb       	ldi	r24, 0xBC	; 188
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	2c d0       	rcall	.+88     	; 0x7c0 <setBit>
     768:	cc eb       	ldi	r28, 0xBC	; 188
     76a:	d0 e0       	ldi	r29, 0x00	; 0
     76c:	88 81       	ld	r24, Y
	}

	return I2C_NO_ERROR;
     76e:	64 e0       	ldi	r22, 0x04	; 4
}
     770:	40 d0       	rcall	.+128    	; 0x7f2 <checkBit>
     772:	81 11       	cpse	r24, r1
     774:	fb cf       	rjmp	.-10     	; 0x76c <i2c_receive+0x102>
     776:	01 c0       	rjmp	.+2      	; 0x77a <i2c_receive+0x110>
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	bf 90       	pop	r11
     78c:	af 90       	pop	r10
     78e:	08 95       	ret

00000790 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     790:	fc 01       	movw	r30, r24
     792:	94 2f       	mov	r25, r20
     794:	20 81       	ld	r18, Z
     796:	41 e0       	ldi	r20, 0x01	; 1
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	06 2e       	mov	r0, r22
     79c:	02 c0       	rjmp	.+4      	; 0x7a2 <updateBit+0x12>
     79e:	44 0f       	add	r20, r20
     7a0:	55 1f       	adc	r21, r21
     7a2:	0a 94       	dec	r0
     7a4:	e2 f7       	brpl	.-8      	; 0x79e <updateBit+0xe>
     7a6:	40 95       	com	r20
     7a8:	50 95       	com	r21
     7aa:	24 23       	and	r18, r20
     7ac:	49 2f       	mov	r20, r25
     7ae:	50 e0       	ldi	r21, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <updateBit+0x26>
     7b2:	44 0f       	add	r20, r20
     7b4:	55 1f       	adc	r21, r21
     7b6:	6a 95       	dec	r22
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <updateBit+0x22>
     7ba:	42 2b       	or	r20, r18
     7bc:	40 83       	st	Z, r20
     7be:	08 95       	ret

000007c0 <setBit>:
     7c0:	fc 01       	movw	r30, r24
     7c2:	40 81       	ld	r20, Z
     7c4:	21 e0       	ldi	r18, 0x01	; 1
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <setBit+0xe>
     7ca:	22 0f       	add	r18, r18
     7cc:	33 1f       	adc	r19, r19
     7ce:	6a 95       	dec	r22
     7d0:	e2 f7       	brpl	.-8      	; 0x7ca <setBit+0xa>
     7d2:	24 2b       	or	r18, r20
     7d4:	20 83       	st	Z, r18
     7d6:	08 95       	ret

000007d8 <clearBit>:
     7d8:	fc 01       	movw	r30, r24
     7da:	90 81       	ld	r25, Z
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <clearBit+0xe>
     7e2:	22 0f       	add	r18, r18
     7e4:	33 1f       	adc	r19, r19
     7e6:	6a 95       	dec	r22
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <clearBit+0xa>
     7ea:	20 95       	com	r18
     7ec:	29 23       	and	r18, r25
     7ee:	20 83       	st	Z, r18
     7f0:	08 95       	ret

000007f2 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <checkBit+0x8>
     7f6:	95 95       	asr	r25
     7f8:	87 95       	ror	r24
     7fa:	6a 95       	dec	r22
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <checkBit+0x4>
}
     7fe:	81 70       	andi	r24, 0x01	; 1
     800:	08 95       	ret

00000802 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	69 01       	movw	r12, r18
     80c:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     80e:	9b 01       	movw	r18, r22
     810:	ac 01       	movw	r20, r24
     812:	2c 19       	sub	r18, r12
     814:	3d 09       	sbc	r19, r13
     816:	4e 09       	sbc	r20, r14
     818:	5f 09       	sbc	r21, r15
     81a:	a8 ee       	ldi	r26, 0xE8	; 232
     81c:	b3 e0       	ldi	r27, 0x03	; 3
     81e:	0e 94 4d 13 	call	0x269a	; 0x269a <__muluhisi3>
     822:	a7 01       	movw	r20, r14
     824:	96 01       	movw	r18, r12
     826:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     82a:	c9 01       	movw	r24, r18
     82c:	99 23       	and	r25, r25
     82e:	24 f4       	brge	.+8      	; 0x838 <calculateError+0x36>
     830:	88 27       	eor	r24, r24
     832:	99 27       	eor	r25, r25
     834:	82 1b       	sub	r24, r18
     836:	93 0b       	sbc	r25, r19
}
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	08 95       	ret

00000842 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     842:	1f 92       	push	r1
     844:	0f 92       	push	r0
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	0f 92       	push	r0
     84a:	11 24       	eor	r1, r1
     84c:	0b b6       	in	r0, 0x3b	; 59
     84e:	0f 92       	push	r0
     850:	8f 93       	push	r24
     852:	9f 93       	push	r25
     854:	ef 93       	push	r30
     856:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     858:	e0 91 1b 01 	lds	r30, 0x011B	; 0x80011b <u8_RLastReceivedIndex>
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	8e b5       	in	r24, 0x2e	; 46
     860:	e4 5e       	subi	r30, 0xE4	; 228
     862:	fe 4f       	sbci	r31, 0xFE	; 254
     864:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     866:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <u8_RLastReceivedIndex>
     86a:	89 30       	cpi	r24, 0x09	; 9
     86c:	30 f4       	brcc	.+12     	; 0x87a <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     86e:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <u8_RLastReceivedIndex>
     872:	8f 5f       	subi	r24, 0xFF	; 255
     874:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <u8_RLastReceivedIndex>
     878:	02 c0       	rjmp	.+4      	; 0x87e <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     87a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     884:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <u8_TLastTransmittedIndex>
     888:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <u8_TLastRequestedIndex>
     88c:	98 17       	cp	r25, r24
     88e:	a1 f0       	breq	.+40     	; 0x8b8 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     890:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <u8_TLastTransmittedIndex>
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	ea 5d       	subi	r30, 0xDA	; 218
     898:	fe 4f       	sbci	r31, 0xFE	; 254
     89a:	80 81       	ld	r24, Z
     89c:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     89e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <u8_TLastTransmittedIndex>
     8a2:	89 30       	cpi	r24, 0x09	; 9
     8a4:	30 f4       	brcc	.+12     	; 0x8b2 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     8a6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <u8_TLastTransmittedIndex>
     8aa:	8f 5f       	subi	r24, 0xFF	; 255
     8ac:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u8_TLastTransmittedIndex>
     8b0:	06 c0       	rjmp	.+12     	; 0x8be <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     8b2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <u8_TLastTransmittedIndex>
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <b_TAvailable>
	}
}
     8be:	ff 91       	pop	r31
     8c0:	ef 91       	pop	r30
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	0f 90       	pop	r0
     8c8:	0b be       	out	0x3b, r0	; 59
     8ca:	0f 90       	pop	r0
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	0f 90       	pop	r0
     8d0:	1f 90       	pop	r1
     8d2:	18 95       	reti

000008d4 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     8d4:	8f 92       	push	r8
     8d6:	9f 92       	push	r9
     8d8:	af 92       	push	r10
     8da:	bf 92       	push	r11
     8dc:	ef 92       	push	r14
     8de:	ff 92       	push	r15
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	cf 93       	push	r28
     8e6:	df 93       	push	r29
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <calculateTopRegister+0x16>
     8ea:	00 d0       	rcall	.+0      	; 0x8ec <calculateTopRegister+0x18>
     8ec:	1f 92       	push	r1
     8ee:	cd b7       	in	r28, 0x3d	; 61
     8f0:	de b7       	in	r29, 0x3e	; 62
     8f2:	48 01       	movw	r8, r16
     8f4:	59 01       	movw	r10, r18
     8f6:	41 30       	cpi	r20, 0x01	; 1
     8f8:	21 f0       	breq	.+8      	; 0x902 <calculateTopRegister+0x2e>
     8fa:	42 30       	cpi	r20, 0x02	; 2
     8fc:	09 f4       	brne	.+2      	; 0x900 <calculateTopRegister+0x2c>
     8fe:	88 c0       	rjmp	.+272    	; 0xa10 <calculateTopRegister+0x13c>
     900:	4c c1       	rjmp	.+664    	; 0xb9a <calculateTopRegister+0x2c6>
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	72 e1       	ldi	r23, 0x12	; 18
     906:	8a e7       	ldi	r24, 0x7A	; 122
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	a9 01       	movw	r20, r18
     90c:	98 01       	movw	r18, r16
     90e:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     912:	da 01       	movw	r26, r20
     914:	c9 01       	movw	r24, r18
     916:	01 97       	sbiw	r24, 0x01	; 1
     918:	a1 09       	sbc	r26, r1
     91a:	b1 09       	sbc	r27, r1
     91c:	00 97       	sbiw	r24, 0x00	; 0
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	a2 07       	cpc	r26, r18
     922:	b1 05       	cpc	r27, r1
     924:	50 f4       	brcc	.+20     	; 0x93a <calculateTopRegister+0x66>
     926:	49 ef       	ldi	r20, 0xF9	; 249
     928:	5f ef       	ldi	r21, 0xFF	; 255
     92a:	6f ef       	ldi	r22, 0xFF	; 255
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	f7 01       	movw	r30, r14
     930:	40 83       	st	Z, r20
     932:	51 83       	std	Z+1, r21	; 0x01
     934:	62 83       	std	Z+2, r22	; 0x02
     936:	73 83       	std	Z+3, r23	; 0x03
     938:	33 c1       	rjmp	.+614    	; 0xba0 <calculateTopRegister+0x2cc>
     93a:	60 e4       	ldi	r22, 0x40	; 64
     93c:	72 e4       	ldi	r23, 0x42	; 66
     93e:	8f e0       	ldi	r24, 0x0F	; 15
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a5 01       	movw	r20, r10
     944:	94 01       	movw	r18, r8
     946:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     94a:	da 01       	movw	r26, r20
     94c:	c9 01       	movw	r24, r18
     94e:	01 97       	sbiw	r24, 0x01	; 1
     950:	a1 09       	sbc	r26, r1
     952:	b1 09       	sbc	r27, r1
     954:	00 97       	sbiw	r24, 0x00	; 0
     956:	f1 e0       	ldi	r31, 0x01	; 1
     958:	af 07       	cpc	r26, r31
     95a:	b1 05       	cpc	r27, r1
     95c:	50 f4       	brcc	.+20     	; 0x972 <calculateTopRegister+0x9e>
     95e:	4a ef       	ldi	r20, 0xFA	; 250
     960:	5f ef       	ldi	r21, 0xFF	; 255
     962:	6f ef       	ldi	r22, 0xFF	; 255
     964:	70 e0       	ldi	r23, 0x00	; 0
     966:	f7 01       	movw	r30, r14
     968:	40 83       	st	Z, r20
     96a:	51 83       	std	Z+1, r21	; 0x01
     96c:	62 83       	std	Z+2, r22	; 0x02
     96e:	73 83       	std	Z+3, r23	; 0x03
     970:	17 c1       	rjmp	.+558    	; 0xba0 <calculateTopRegister+0x2cc>
     972:	68 e4       	ldi	r22, 0x48	; 72
     974:	78 ee       	ldi	r23, 0xE8	; 232
     976:	81 e0       	ldi	r24, 0x01	; 1
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	a5 01       	movw	r20, r10
     97c:	94 01       	movw	r18, r8
     97e:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     982:	da 01       	movw	r26, r20
     984:	c9 01       	movw	r24, r18
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	a1 09       	sbc	r26, r1
     98a:	b1 09       	sbc	r27, r1
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	f1 e0       	ldi	r31, 0x01	; 1
     990:	af 07       	cpc	r26, r31
     992:	b1 05       	cpc	r27, r1
     994:	50 f4       	brcc	.+20     	; 0x9aa <calculateTopRegister+0xd6>
     996:	4c ef       	ldi	r20, 0xFC	; 252
     998:	5f ef       	ldi	r21, 0xFF	; 255
     99a:	6f ef       	ldi	r22, 0xFF	; 255
     99c:	70 e0       	ldi	r23, 0x00	; 0
     99e:	f7 01       	movw	r30, r14
     9a0:	40 83       	st	Z, r20
     9a2:	51 83       	std	Z+1, r21	; 0x01
     9a4:	62 83       	std	Z+2, r22	; 0x02
     9a6:	73 83       	std	Z+3, r23	; 0x03
     9a8:	fb c0       	rjmp	.+502    	; 0xba0 <calculateTopRegister+0x2cc>
     9aa:	62 e1       	ldi	r22, 0x12	; 18
     9ac:	7a e7       	ldi	r23, 0x7A	; 122
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	a5 01       	movw	r20, r10
     9b4:	94 01       	movw	r18, r8
     9b6:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     9ba:	da 01       	movw	r26, r20
     9bc:	c9 01       	movw	r24, r18
     9be:	01 97       	sbiw	r24, 0x01	; 1
     9c0:	a1 09       	sbc	r26, r1
     9c2:	b1 09       	sbc	r27, r1
     9c4:	00 97       	sbiw	r24, 0x00	; 0
     9c6:	f1 e0       	ldi	r31, 0x01	; 1
     9c8:	af 07       	cpc	r26, r31
     9ca:	b1 05       	cpc	r27, r1
     9cc:	50 f4       	brcc	.+20     	; 0x9e2 <calculateTopRegister+0x10e>
     9ce:	4e ef       	ldi	r20, 0xFE	; 254
     9d0:	5f ef       	ldi	r21, 0xFF	; 255
     9d2:	6f ef       	ldi	r22, 0xFF	; 255
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	f7 01       	movw	r30, r14
     9d8:	40 83       	st	Z, r20
     9da:	51 83       	std	Z+1, r21	; 0x01
     9dc:	62 83       	std	Z+2, r22	; 0x02
     9de:	73 83       	std	Z+3, r23	; 0x03
     9e0:	df c0       	rjmp	.+446    	; 0xba0 <calculateTopRegister+0x2cc>
     9e2:	8f ef       	ldi	r24, 0xFF	; 255
     9e4:	9f ef       	ldi	r25, 0xFF	; 255
     9e6:	af ef       	ldi	r26, 0xFF	; 255
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	f7 01       	movw	r30, r14
     9ec:	80 83       	st	Z, r24
     9ee:	91 83       	std	Z+1, r25	; 0x01
     9f0:	a2 83       	std	Z+2, r26	; 0x02
     9f2:	b3 83       	std	Z+3, r27	; 0x03
     9f4:	64 e8       	ldi	r22, 0x84	; 132
     9f6:	7e e1       	ldi	r23, 0x1E	; 30
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a5 01       	movw	r20, r10
     9fe:	94 01       	movw	r18, r8
     a00:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     a04:	da 01       	movw	r26, r20
     a06:	c9 01       	movw	r24, r18
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	a1 09       	sbc	r26, r1
     a0c:	b1 09       	sbc	r27, r1
     a0e:	c8 c0       	rjmp	.+400    	; 0xba0 <calculateTopRegister+0x2cc>
     a10:	60 e0       	ldi	r22, 0x00	; 0
     a12:	72 e1       	ldi	r23, 0x12	; 18
     a14:	8a e7       	ldi	r24, 0x7A	; 122
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a9 01       	movw	r20, r18
     a1a:	98 01       	movw	r18, r16
     a1c:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     a20:	da 01       	movw	r26, r20
     a22:	c9 01       	movw	r24, r18
     a24:	01 97       	sbiw	r24, 0x01	; 1
     a26:	a1 09       	sbc	r26, r1
     a28:	b1 09       	sbc	r27, r1
     a2a:	8f 3f       	cpi	r24, 0xFF	; 255
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	09 f0       	breq	.+2      	; 0xa36 <calculateTopRegister+0x162>
     a34:	50 f4       	brcc	.+20     	; 0xa4a <calculateTopRegister+0x176>
     a36:	49 ef       	ldi	r20, 0xF9	; 249
     a38:	5f ef       	ldi	r21, 0xFF	; 255
     a3a:	6f ef       	ldi	r22, 0xFF	; 255
     a3c:	70 e0       	ldi	r23, 0x00	; 0
     a3e:	f7 01       	movw	r30, r14
     a40:	40 83       	st	Z, r20
     a42:	51 83       	std	Z+1, r21	; 0x01
     a44:	62 83       	std	Z+2, r22	; 0x02
     a46:	73 83       	std	Z+3, r23	; 0x03
     a48:	ab c0       	rjmp	.+342    	; 0xba0 <calculateTopRegister+0x2cc>
     a4a:	60 e4       	ldi	r22, 0x40	; 64
     a4c:	72 e4       	ldi	r23, 0x42	; 66
     a4e:	8f e0       	ldi	r24, 0x0F	; 15
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	a5 01       	movw	r20, r10
     a54:	94 01       	movw	r18, r8
     a56:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     a5a:	da 01       	movw	r26, r20
     a5c:	c9 01       	movw	r24, r18
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	a1 09       	sbc	r26, r1
     a62:	b1 09       	sbc	r27, r1
     a64:	8f 3f       	cpi	r24, 0xFF	; 255
     a66:	91 05       	cpc	r25, r1
     a68:	a1 05       	cpc	r26, r1
     a6a:	b1 05       	cpc	r27, r1
     a6c:	09 f0       	breq	.+2      	; 0xa70 <calculateTopRegister+0x19c>
     a6e:	50 f4       	brcc	.+20     	; 0xa84 <calculateTopRegister+0x1b0>
     a70:	4a ef       	ldi	r20, 0xFA	; 250
     a72:	5f ef       	ldi	r21, 0xFF	; 255
     a74:	6f ef       	ldi	r22, 0xFF	; 255
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	f7 01       	movw	r30, r14
     a7a:	40 83       	st	Z, r20
     a7c:	51 83       	std	Z+1, r21	; 0x01
     a7e:	62 83       	std	Z+2, r22	; 0x02
     a80:	73 83       	std	Z+3, r23	; 0x03
     a82:	8e c0       	rjmp	.+284    	; 0xba0 <calculateTopRegister+0x2cc>
     a84:	60 e9       	ldi	r22, 0x90	; 144
     a86:	70 ed       	ldi	r23, 0xD0	; 208
     a88:	83 e0       	ldi	r24, 0x03	; 3
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a5 01       	movw	r20, r10
     a8e:	94 01       	movw	r18, r8
     a90:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     a94:	da 01       	movw	r26, r20
     a96:	c9 01       	movw	r24, r18
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	a1 09       	sbc	r26, r1
     a9c:	b1 09       	sbc	r27, r1
     a9e:	8f 3f       	cpi	r24, 0xFF	; 255
     aa0:	91 05       	cpc	r25, r1
     aa2:	a1 05       	cpc	r26, r1
     aa4:	b1 05       	cpc	r27, r1
     aa6:	09 f0       	breq	.+2      	; 0xaaa <calculateTopRegister+0x1d6>
     aa8:	50 f4       	brcc	.+20     	; 0xabe <calculateTopRegister+0x1ea>
     aaa:	4b ef       	ldi	r20, 0xFB	; 251
     aac:	5f ef       	ldi	r21, 0xFF	; 255
     aae:	6f ef       	ldi	r22, 0xFF	; 255
     ab0:	70 e0       	ldi	r23, 0x00	; 0
     ab2:	f7 01       	movw	r30, r14
     ab4:	40 83       	st	Z, r20
     ab6:	51 83       	std	Z+1, r21	; 0x01
     ab8:	62 83       	std	Z+2, r22	; 0x02
     aba:	73 83       	std	Z+3, r23	; 0x03
     abc:	71 c0       	rjmp	.+226    	; 0xba0 <calculateTopRegister+0x2cc>
     abe:	68 e4       	ldi	r22, 0x48	; 72
     ac0:	78 ee       	ldi	r23, 0xE8	; 232
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	a5 01       	movw	r20, r10
     ac8:	94 01       	movw	r18, r8
     aca:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     ace:	da 01       	movw	r26, r20
     ad0:	c9 01       	movw	r24, r18
     ad2:	01 97       	sbiw	r24, 0x01	; 1
     ad4:	a1 09       	sbc	r26, r1
     ad6:	b1 09       	sbc	r27, r1
     ad8:	8f 3f       	cpi	r24, 0xFF	; 255
     ada:	91 05       	cpc	r25, r1
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <calculateTopRegister+0x210>
     ae2:	50 f4       	brcc	.+20     	; 0xaf8 <calculateTopRegister+0x224>
     ae4:	4c ef       	ldi	r20, 0xFC	; 252
     ae6:	5f ef       	ldi	r21, 0xFF	; 255
     ae8:	6f ef       	ldi	r22, 0xFF	; 255
     aea:	70 e0       	ldi	r23, 0x00	; 0
     aec:	f7 01       	movw	r30, r14
     aee:	40 83       	st	Z, r20
     af0:	51 83       	std	Z+1, r21	; 0x01
     af2:	62 83       	std	Z+2, r22	; 0x02
     af4:	73 83       	std	Z+3, r23	; 0x03
     af6:	54 c0       	rjmp	.+168    	; 0xba0 <calculateTopRegister+0x2cc>
     af8:	64 e2       	ldi	r22, 0x24	; 36
     afa:	74 ef       	ldi	r23, 0xF4	; 244
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a5 01       	movw	r20, r10
     b02:	94 01       	movw	r18, r8
     b04:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     b08:	da 01       	movw	r26, r20
     b0a:	c9 01       	movw	r24, r18
     b0c:	01 97       	sbiw	r24, 0x01	; 1
     b0e:	a1 09       	sbc	r26, r1
     b10:	b1 09       	sbc	r27, r1
     b12:	8f 3f       	cpi	r24, 0xFF	; 255
     b14:	91 05       	cpc	r25, r1
     b16:	a1 05       	cpc	r26, r1
     b18:	b1 05       	cpc	r27, r1
     b1a:	09 f0       	breq	.+2      	; 0xb1e <calculateTopRegister+0x24a>
     b1c:	50 f4       	brcc	.+20     	; 0xb32 <calculateTopRegister+0x25e>
     b1e:	4d ef       	ldi	r20, 0xFD	; 253
     b20:	5f ef       	ldi	r21, 0xFF	; 255
     b22:	6f ef       	ldi	r22, 0xFF	; 255
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	f7 01       	movw	r30, r14
     b28:	40 83       	st	Z, r20
     b2a:	51 83       	std	Z+1, r21	; 0x01
     b2c:	62 83       	std	Z+2, r22	; 0x02
     b2e:	73 83       	std	Z+3, r23	; 0x03
     b30:	37 c0       	rjmp	.+110    	; 0xba0 <calculateTopRegister+0x2cc>
     b32:	62 e1       	ldi	r22, 0x12	; 18
     b34:	7a e7       	ldi	r23, 0x7A	; 122
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a5 01       	movw	r20, r10
     b3c:	94 01       	movw	r18, r8
     b3e:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     b42:	da 01       	movw	r26, r20
     b44:	c9 01       	movw	r24, r18
     b46:	01 97       	sbiw	r24, 0x01	; 1
     b48:	a1 09       	sbc	r26, r1
     b4a:	b1 09       	sbc	r27, r1
     b4c:	8f 3f       	cpi	r24, 0xFF	; 255
     b4e:	91 05       	cpc	r25, r1
     b50:	a1 05       	cpc	r26, r1
     b52:	b1 05       	cpc	r27, r1
     b54:	09 f0       	breq	.+2      	; 0xb58 <calculateTopRegister+0x284>
     b56:	50 f4       	brcc	.+20     	; 0xb6c <calculateTopRegister+0x298>
     b58:	4e ef       	ldi	r20, 0xFE	; 254
     b5a:	5f ef       	ldi	r21, 0xFF	; 255
     b5c:	6f ef       	ldi	r22, 0xFF	; 255
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	f7 01       	movw	r30, r14
     b62:	40 83       	st	Z, r20
     b64:	51 83       	std	Z+1, r21	; 0x01
     b66:	62 83       	std	Z+2, r22	; 0x02
     b68:	73 83       	std	Z+3, r23	; 0x03
     b6a:	1a c0       	rjmp	.+52     	; 0xba0 <calculateTopRegister+0x2cc>
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	9f ef       	ldi	r25, 0xFF	; 255
     b70:	af ef       	ldi	r26, 0xFF	; 255
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	f7 01       	movw	r30, r14
     b76:	80 83       	st	Z, r24
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	a2 83       	std	Z+2, r26	; 0x02
     b7c:	b3 83       	std	Z+3, r27	; 0x03
     b7e:	64 e8       	ldi	r22, 0x84	; 132
     b80:	7e e1       	ldi	r23, 0x1E	; 30
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a5 01       	movw	r20, r10
     b88:	94 01       	movw	r18, r8
     b8a:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
     b8e:	da 01       	movw	r26, r20
     b90:	c9 01       	movw	r24, r18
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	a1 09       	sbc	r26, r1
     b96:	b1 09       	sbc	r27, r1
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <calculateTopRegister+0x2cc>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	dc 01       	movw	r26, r24
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	0f 90       	pop	r0
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	bf 90       	pop	r11
     bb8:	af 90       	pop	r10
     bba:	9f 90       	pop	r9
     bbc:	8f 90       	pop	r8
     bbe:	08 95       	ret

00000bc0 <__vector_15>:
     bc0:	1f 92       	push	r1
     bc2:	0f 92       	push	r0
     bc4:	0f b6       	in	r0, 0x3f	; 63
     bc6:	0f 92       	push	r0
     bc8:	11 24       	eor	r1, r1
     bca:	0b b6       	in	r0, 0x3b	; 59
     bcc:	0f 92       	push	r0
     bce:	2f 93       	push	r18
     bd0:	3f 93       	push	r19
     bd2:	4f 93       	push	r20
     bd4:	5f 93       	push	r21
     bd6:	6f 93       	push	r22
     bd8:	7f 93       	push	r23
     bda:	8f 93       	push	r24
     bdc:	9f 93       	push	r25
     bde:	af 93       	push	r26
     be0:	bf 93       	push	r27
     be2:	ef 93       	push	r30
     be4:	ff 93       	push	r31
     be6:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer1Callbacks>
     bea:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer1Callbacks+0x1>
     bee:	09 95       	icall
     bf0:	ff 91       	pop	r31
     bf2:	ef 91       	pop	r30
     bf4:	bf 91       	pop	r27
     bf6:	af 91       	pop	r26
     bf8:	9f 91       	pop	r25
     bfa:	8f 91       	pop	r24
     bfc:	7f 91       	pop	r23
     bfe:	6f 91       	pop	r22
     c00:	5f 91       	pop	r21
     c02:	4f 91       	pop	r20
     c04:	3f 91       	pop	r19
     c06:	2f 91       	pop	r18
     c08:	0f 90       	pop	r0
     c0a:	0b be       	out	0x3b, r0	; 59
     c0c:	0f 90       	pop	r0
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	0f 90       	pop	r0
     c12:	1f 90       	pop	r1
     c14:	18 95       	reti

00000c16 <__vector_13>:
     c16:	1f 92       	push	r1
     c18:	0f 92       	push	r0
     c1a:	0f b6       	in	r0, 0x3f	; 63
     c1c:	0f 92       	push	r0
     c1e:	11 24       	eor	r1, r1
     c20:	0b b6       	in	r0, 0x3b	; 59
     c22:	0f 92       	push	r0
     c24:	0f 93       	push	r16
     c26:	1f 93       	push	r17
     c28:	2f 93       	push	r18
     c2a:	3f 93       	push	r19
     c2c:	4f 93       	push	r20
     c2e:	5f 93       	push	r21
     c30:	6f 93       	push	r22
     c32:	7f 93       	push	r23
     c34:	8f 93       	push	r24
     c36:	9f 93       	push	r25
     c38:	af 93       	push	r26
     c3a:	bf 93       	push	r27
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ef 93       	push	r30
     c42:	ff 93       	push	r31
     c44:	c1 e8       	ldi	r28, 0x81	; 129
     c46:	d0 e0       	ldi	r29, 0x00	; 0
     c48:	88 81       	ld	r24, Y
     c4a:	64 e0       	ldi	r22, 0x04	; 4
     c4c:	d2 dd       	rcall	.-1116   	; 0x7f2 <checkBit>
     c4e:	18 2f       	mov	r17, r24
     c50:	88 81       	ld	r24, Y
     c52:	63 e0       	ldi	r22, 0x03	; 3
     c54:	ce dd       	rcall	.-1124   	; 0x7f2 <checkBit>
     c56:	c1 2f       	mov	r28, r17
     c58:	cc 0f       	add	r28, r28
     c5a:	cc 0f       	add	r28, r28
     c5c:	cc 0f       	add	r28, r28
     c5e:	24 e0       	ldi	r18, 0x04	; 4
     c60:	82 9f       	mul	r24, r18
     c62:	c0 01       	movw	r24, r0
     c64:	11 24       	eor	r1, r1
     c66:	c8 2b       	or	r28, r24
     c68:	00 e8       	ldi	r16, 0x80	; 128
     c6a:	10 e0       	ldi	r17, 0x00	; 0
     c6c:	f8 01       	movw	r30, r16
     c6e:	80 81       	ld	r24, Z
     c70:	61 e0       	ldi	r22, 0x01	; 1
     c72:	bf dd       	rcall	.-1154   	; 0x7f2 <checkBit>
     c74:	d8 2f       	mov	r29, r24
     c76:	f8 01       	movw	r30, r16
     c78:	80 81       	ld	r24, Z
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	ba dd       	rcall	.-1164   	; 0x7f2 <checkBit>
     c7e:	dd 0f       	add	r29, r29
     c80:	8c 2b       	or	r24, r28
     c82:	8d 2b       	or	r24, r29
     c84:	88 30       	cpi	r24, 0x08	; 8
     c86:	18 f4       	brcc	.+6      	; 0xc8e <__vector_13+0x78>
     c88:	84 30       	cpi	r24, 0x04	; 4
     c8a:	19 f4       	brne	.+6      	; 0xc92 <__vector_13+0x7c>
     c8c:	08 c0       	rjmp	.+16     	; 0xc9e <__vector_13+0x88>
     c8e:	80 fd       	sbrc	r24, 0
     c90:	06 c0       	rjmp	.+12     	; 0xc9e <__vector_13+0x88>
     c92:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks+0x2>
     c96:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x3>
     c9a:	09 95       	icall
     c9c:	05 c0       	rjmp	.+10     	; 0xca8 <__vector_13+0x92>
     c9e:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer1Callbacks>
     ca2:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer1Callbacks+0x1>
     ca6:	09 95       	icall
     ca8:	ff 91       	pop	r31
     caa:	ef 91       	pop	r30
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	bf 91       	pop	r27
     cb2:	af 91       	pop	r26
     cb4:	9f 91       	pop	r25
     cb6:	8f 91       	pop	r24
     cb8:	7f 91       	pop	r23
     cba:	6f 91       	pop	r22
     cbc:	5f 91       	pop	r21
     cbe:	4f 91       	pop	r20
     cc0:	3f 91       	pop	r19
     cc2:	2f 91       	pop	r18
     cc4:	1f 91       	pop	r17
     cc6:	0f 91       	pop	r16
     cc8:	0f 90       	pop	r0
     cca:	0b be       	out	0x3b, r0	; 59
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <__vector_14>:
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	0b b6       	in	r0, 0x3b	; 59
     ce2:	0f 92       	push	r0
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
     cfc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p_timer1Callbacks+0x4>
     d00:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p_timer1Callbacks+0x5>
     d04:	09 95       	icall
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0b be       	out	0x3b, r0	; 59
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <__vector_12>:
     d2c:	1f 92       	push	r1
     d2e:	0f 92       	push	r0
     d30:	0f b6       	in	r0, 0x3f	; 63
     d32:	0f 92       	push	r0
     d34:	11 24       	eor	r1, r1
     d36:	0b b6       	in	r0, 0x3b	; 59
     d38:	0f 92       	push	r0
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	2f 93       	push	r18
     d40:	3f 93       	push	r19
     d42:	4f 93       	push	r20
     d44:	5f 93       	push	r21
     d46:	6f 93       	push	r22
     d48:	7f 93       	push	r23
     d4a:	8f 93       	push	r24
     d4c:	9f 93       	push	r25
     d4e:	af 93       	push	r26
     d50:	bf 93       	push	r27
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	ef 93       	push	r30
     d58:	ff 93       	push	r31
     d5a:	c1 e8       	ldi	r28, 0x81	; 129
     d5c:	d0 e0       	ldi	r29, 0x00	; 0
     d5e:	88 81       	ld	r24, Y
     d60:	64 e0       	ldi	r22, 0x04	; 4
     d62:	47 dd       	rcall	.-1394   	; 0x7f2 <checkBit>
     d64:	18 2f       	mov	r17, r24
     d66:	88 81       	ld	r24, Y
     d68:	63 e0       	ldi	r22, 0x03	; 3
     d6a:	43 dd       	rcall	.-1402   	; 0x7f2 <checkBit>
     d6c:	c1 2f       	mov	r28, r17
     d6e:	cc 0f       	add	r28, r28
     d70:	cc 0f       	add	r28, r28
     d72:	cc 0f       	add	r28, r28
     d74:	24 e0       	ldi	r18, 0x04	; 4
     d76:	82 9f       	mul	r24, r18
     d78:	c0 01       	movw	r24, r0
     d7a:	11 24       	eor	r1, r1
     d7c:	c8 2b       	or	r28, r24
     d7e:	00 e8       	ldi	r16, 0x80	; 128
     d80:	10 e0       	ldi	r17, 0x00	; 0
     d82:	f8 01       	movw	r30, r16
     d84:	80 81       	ld	r24, Z
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	34 dd       	rcall	.-1432   	; 0x7f2 <checkBit>
     d8a:	d8 2f       	mov	r29, r24
     d8c:	f8 01       	movw	r30, r16
     d8e:	80 81       	ld	r24, Z
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	2f dd       	rcall	.-1442   	; 0x7f2 <checkBit>
     d94:	dd 0f       	add	r29, r29
     d96:	8c 2b       	or	r24, r28
     d98:	8d 2b       	or	r24, r29
     d9a:	88 30       	cpi	r24, 0x08	; 8
     d9c:	10 f0       	brcs	.+4      	; 0xda2 <__vector_12+0x76>
     d9e:	80 ff       	sbrs	r24, 0
     da0:	06 c0       	rjmp	.+12     	; 0xdae <__vector_12+0x82>
     da2:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <p_timer1Callbacks+0x6>
     da6:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <p_timer1Callbacks+0x7>
     daa:	09 95       	icall
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <__vector_12+0x8c>
     dae:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer1Callbacks>
     db2:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer1Callbacks+0x1>
     db6:	09 95       	icall
     db8:	ff 91       	pop	r31
     dba:	ef 91       	pop	r30
     dbc:	df 91       	pop	r29
     dbe:	cf 91       	pop	r28
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	1f 91       	pop	r17
     dd6:	0f 91       	pop	r16
     dd8:	0f 90       	pop	r0
     dda:	0b be       	out	0x3b, r0	; 59
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_11>:
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
     e0c:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <p_timer2Callbacks>
     e10:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <p_timer2Callbacks+0x1>
     e14:	09 95       	icall
     e16:	ff 91       	pop	r31
     e18:	ef 91       	pop	r30
     e1a:	bf 91       	pop	r27
     e1c:	af 91       	pop	r26
     e1e:	9f 91       	pop	r25
     e20:	8f 91       	pop	r24
     e22:	7f 91       	pop	r23
     e24:	6f 91       	pop	r22
     e26:	5f 91       	pop	r21
     e28:	4f 91       	pop	r20
     e2a:	3f 91       	pop	r19
     e2c:	2f 91       	pop	r18
     e2e:	0f 90       	pop	r0
     e30:	0b be       	out	0x3b, r0	; 59
     e32:	0f 90       	pop	r0
     e34:	0f be       	out	0x3f, r0	; 63
     e36:	0f 90       	pop	r0
     e38:	1f 90       	pop	r1
     e3a:	18 95       	reti

00000e3c <__vector_9>:
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	0b b6       	in	r0, 0x3b	; 59
     e48:	0f 92       	push	r0
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
     e62:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     e66:	63 e0       	ldi	r22, 0x03	; 3
     e68:	c4 dc       	rcall	.-1656   	; 0x7f2 <checkBit>
     e6a:	81 11       	cpse	r24, r1
     e6c:	0b c0       	rjmp	.+22     	; 0xe84 <__vector_9+0x48>
     e6e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e72:	83 70       	andi	r24, 0x03	; 3
     e74:	82 30       	cpi	r24, 0x02	; 2
     e76:	31 f0       	breq	.+12     	; 0xe84 <__vector_9+0x48>
     e78:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <p_timer2Callbacks+0x2>
     e7c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <p_timer2Callbacks+0x3>
     e80:	09 95       	icall
     e82:	05 c0       	rjmp	.+10     	; 0xe8e <__vector_9+0x52>
     e84:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <p_timer2Callbacks>
     e88:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <p_timer2Callbacks+0x1>
     e8c:	09 95       	icall
     e8e:	ff 91       	pop	r31
     e90:	ef 91       	pop	r30
     e92:	bf 91       	pop	r27
     e94:	af 91       	pop	r26
     e96:	9f 91       	pop	r25
     e98:	8f 91       	pop	r24
     e9a:	7f 91       	pop	r23
     e9c:	6f 91       	pop	r22
     e9e:	5f 91       	pop	r21
     ea0:	4f 91       	pop	r20
     ea2:	3f 91       	pop	r19
     ea4:	2f 91       	pop	r18
     ea6:	0f 90       	pop	r0
     ea8:	0b be       	out	0x3b, r0	; 59
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	0f 90       	pop	r0
     eb0:	1f 90       	pop	r1
     eb2:	18 95       	reti

00000eb4 <__vector_10>:
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	0b b6       	in	r0, 0x3b	; 59
     ec0:	0f 92       	push	r0
     ec2:	2f 93       	push	r18
     ec4:	3f 93       	push	r19
     ec6:	4f 93       	push	r20
     ec8:	5f 93       	push	r21
     eca:	6f 93       	push	r22
     ecc:	7f 93       	push	r23
     ece:	8f 93       	push	r24
     ed0:	9f 93       	push	r25
     ed2:	af 93       	push	r26
     ed4:	bf 93       	push	r27
     ed6:	ef 93       	push	r30
     ed8:	ff 93       	push	r31
     eda:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <p_timer2Callbacks+0x4>
     ede:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <p_timer2Callbacks+0x5>
     ee2:	09 95       	icall
     ee4:	ff 91       	pop	r31
     ee6:	ef 91       	pop	r30
     ee8:	bf 91       	pop	r27
     eea:	af 91       	pop	r26
     eec:	9f 91       	pop	r25
     eee:	8f 91       	pop	r24
     ef0:	7f 91       	pop	r23
     ef2:	6f 91       	pop	r22
     ef4:	5f 91       	pop	r21
     ef6:	4f 91       	pop	r20
     ef8:	3f 91       	pop	r19
     efa:	2f 91       	pop	r18
     efc:	0f 90       	pop	r0
     efe:	0b be       	out	0x3b, r0	; 59
     f00:	0f 90       	pop	r0
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	0f 90       	pop	r0
     f06:	1f 90       	pop	r1
     f08:	18 95       	reti

00000f0a <timer_init>:
     f0a:	ef 92       	push	r14
     f0c:	ff 92       	push	r15
     f0e:	0f 93       	push	r16
     f10:	1f 93       	push	r17
     f12:	cf 93       	push	r28
     f14:	df 93       	push	r29
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	29 97       	sbiw	r28, 0x09	; 9
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	4d 83       	std	Y+5, r20	; 0x05
     f28:	5e 83       	std	Y+6, r21	; 0x06
     f2a:	6f 83       	std	Y+7, r22	; 0x07
     f2c:	78 87       	std	Y+8, r23	; 0x08
     f2e:	89 87       	std	Y+9, r24	; 0x09
     f30:	0e 81       	ldd	r16, Y+6	; 0x06
     f32:	1f 81       	ldd	r17, Y+7	; 0x07
     f34:	28 85       	ldd	r18, Y+8	; 0x08
     f36:	39 85       	ldd	r19, Y+9	; 0x09
     f38:	19 82       	std	Y+1, r1	; 0x01
     f3a:	1a 82       	std	Y+2, r1	; 0x02
     f3c:	1b 82       	std	Y+3, r1	; 0x03
     f3e:	1c 82       	std	Y+4, r1	; 0x04
     f40:	41 30       	cpi	r20, 0x01	; 1
     f42:	21 f0       	breq	.+8      	; 0xf4c <timer_init+0x42>
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	09 f4       	brne	.+2      	; 0xf4a <timer_init+0x40>
     f48:	95 c0       	rjmp	.+298    	; 0x1074 <timer_init+0x16a>
     f4a:	1e c1       	rjmp	.+572    	; 0x1188 <timer_init+0x27e>
     f4c:	09 3f       	cpi	r16, 0xF9	; 249
     f4e:	8f ef       	ldi	r24, 0xFF	; 255
     f50:	18 07       	cpc	r17, r24
     f52:	28 07       	cpc	r18, r24
     f54:	31 05       	cpc	r19, r1
     f56:	28 f0       	brcs	.+10     	; 0xf62 <timer_init+0x58>
     f58:	09 83       	std	Y+1, r16	; 0x01
     f5a:	1a 83       	std	Y+2, r17	; 0x02
     f5c:	2b 83       	std	Y+3, r18	; 0x03
     f5e:	3c 83       	std	Y+4, r19	; 0x04
     f60:	15 c0       	rjmp	.+42     	; 0xf8c <timer_init+0x82>
     f62:	ce 01       	movw	r24, r28
     f64:	01 96       	adiw	r24, 0x01	; 1
     f66:	7c 01       	movw	r14, r24
     f68:	4d 81       	ldd	r20, Y+5	; 0x05
     f6a:	5e 81       	ldd	r21, Y+6	; 0x06
     f6c:	6f 81       	ldd	r22, Y+7	; 0x07
     f6e:	78 85       	ldd	r23, Y+8	; 0x08
     f70:	89 85       	ldd	r24, Y+9	; 0x09
     f72:	b0 dc       	rcall	.-1696   	; 0x8d4 <calculateTopRegister>
     f74:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     f78:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     f7c:	64 e0       	ldi	r22, 0x04	; 4
     f7e:	81 e8       	ldi	r24, 0x81	; 129
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	1e dc       	rcall	.-1988   	; 0x7c0 <setBit>
     f84:	63 e0       	ldi	r22, 0x03	; 3
     f86:	81 e8       	ldi	r24, 0x81	; 129
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	1a dc       	rcall	.-1996   	; 0x7c0 <setBit>
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	ab 81       	ldd	r26, Y+3	; 0x03
     f92:	bc 81       	ldd	r27, Y+4	; 0x04
     f94:	8c 3f       	cpi	r24, 0xFC	; 252
     f96:	2f ef       	ldi	r18, 0xFF	; 255
     f98:	92 07       	cpc	r25, r18
     f9a:	a2 07       	cpc	r26, r18
     f9c:	b1 05       	cpc	r27, r1
     f9e:	59 f1       	breq	.+86     	; 0xff6 <timer_init+0xec>
     fa0:	60 f4       	brcc	.+24     	; 0xfba <timer_init+0xb0>
     fa2:	89 3f       	cpi	r24, 0xF9	; 249
     fa4:	2f ef       	ldi	r18, 0xFF	; 255
     fa6:	92 07       	cpc	r25, r18
     fa8:	a2 07       	cpc	r26, r18
     faa:	b1 05       	cpc	r27, r1
     fac:	91 f0       	breq	.+36     	; 0xfd2 <timer_init+0xc8>
     fae:	8a 3f       	cpi	r24, 0xFA	; 250
     fb0:	9f 4f       	sbci	r25, 0xFF	; 255
     fb2:	af 4f       	sbci	r26, 0xFF	; 255
     fb4:	b1 05       	cpc	r27, r1
     fb6:	b1 f0       	breq	.+44     	; 0xfe4 <timer_init+0xda>
     fb8:	38 c0       	rjmp	.+112    	; 0x102a <timer_init+0x120>
     fba:	8e 3f       	cpi	r24, 0xFE	; 254
     fbc:	2f ef       	ldi	r18, 0xFF	; 255
     fbe:	92 07       	cpc	r25, r18
     fc0:	a2 07       	cpc	r26, r18
     fc2:	b1 05       	cpc	r27, r1
     fc4:	09 f1       	breq	.+66     	; 0x1008 <timer_init+0xfe>
     fc6:	8f 3f       	cpi	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	af 4f       	sbci	r26, 0xFF	; 255
     fcc:	b1 05       	cpc	r27, r1
     fce:	29 f1       	breq	.+74     	; 0x101a <timer_init+0x110>
     fd0:	2c c0       	rjmp	.+88     	; 0x102a <timer_init+0x120>
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	89 83       	std	Y+1, r24	; 0x01
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	ab 83       	std	Y+3, r26	; 0x03
     fe0:	bc 83       	std	Y+4, r27	; 0x04
     fe2:	23 c0       	rjmp	.+70     	; 0x102a <timer_init+0x120>
     fe4:	82 e0       	ldi	r24, 0x02	; 2
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	a0 e0       	ldi	r26, 0x00	; 0
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	9a 83       	std	Y+2, r25	; 0x02
     ff0:	ab 83       	std	Y+3, r26	; 0x03
     ff2:	bc 83       	std	Y+4, r27	; 0x04
     ff4:	1a c0       	rjmp	.+52     	; 0x102a <timer_init+0x120>
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a0 e0       	ldi	r26, 0x00	; 0
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	ab 83       	std	Y+3, r26	; 0x03
    1004:	bc 83       	std	Y+4, r27	; 0x04
    1006:	11 c0       	rjmp	.+34     	; 0x102a <timer_init+0x120>
    1008:	84 e0       	ldi	r24, 0x04	; 4
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	9a 83       	std	Y+2, r25	; 0x02
    1014:	ab 83       	std	Y+3, r26	; 0x03
    1016:	bc 83       	std	Y+4, r27	; 0x04
    1018:	08 c0       	rjmp	.+16     	; 0x102a <timer_init+0x120>
    101a:	85 e0       	ldi	r24, 0x05	; 5
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	89 83       	std	Y+1, r24	; 0x01
    1024:	9a 83       	std	Y+2, r25	; 0x02
    1026:	ab 83       	std	Y+3, r26	; 0x03
    1028:	bc 83       	std	Y+4, r27	; 0x04
    102a:	49 81       	ldd	r20, Y+1	; 0x01
    102c:	5a 81       	ldd	r21, Y+2	; 0x02
    102e:	6b 81       	ldd	r22, Y+3	; 0x03
    1030:	7c 81       	ldd	r23, Y+4	; 0x04
    1032:	76 95       	lsr	r23
    1034:	67 95       	ror	r22
    1036:	57 95       	ror	r21
    1038:	47 95       	ror	r20
    103a:	76 95       	lsr	r23
    103c:	67 95       	ror	r22
    103e:	57 95       	ror	r21
    1040:	47 95       	ror	r20
    1042:	41 70       	andi	r20, 0x01	; 1
    1044:	62 e0       	ldi	r22, 0x02	; 2
    1046:	8a e3       	ldi	r24, 0x3A	; 58
    1048:	91 e0       	ldi	r25, 0x01	; 1
    104a:	a2 db       	rcall	.-2236   	; 0x790 <updateBit>
    104c:	49 81       	ldd	r20, Y+1	; 0x01
    104e:	5a 81       	ldd	r21, Y+2	; 0x02
    1050:	6b 81       	ldd	r22, Y+3	; 0x03
    1052:	7c 81       	ldd	r23, Y+4	; 0x04
    1054:	76 95       	lsr	r23
    1056:	67 95       	ror	r22
    1058:	57 95       	ror	r21
    105a:	47 95       	ror	r20
    105c:	41 70       	andi	r20, 0x01	; 1
    105e:	61 e0       	ldi	r22, 0x01	; 1
    1060:	8a e3       	ldi	r24, 0x3A	; 58
    1062:	91 e0       	ldi	r25, 0x01	; 1
    1064:	95 db       	rcall	.-2262   	; 0x790 <updateBit>
    1066:	49 81       	ldd	r20, Y+1	; 0x01
    1068:	41 70       	andi	r20, 0x01	; 1
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	8a e3       	ldi	r24, 0x3A	; 58
    106e:	91 e0       	ldi	r25, 0x01	; 1
    1070:	8f db       	rcall	.-2274   	; 0x790 <updateBit>
    1072:	8a c0       	rjmp	.+276    	; 0x1188 <timer_init+0x27e>
    1074:	09 3f       	cpi	r16, 0xF9	; 249
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	18 07       	cpc	r17, r24
    107a:	28 07       	cpc	r18, r24
    107c:	31 05       	cpc	r19, r1
    107e:	28 f0       	brcs	.+10     	; 0x108a <timer_init+0x180>
    1080:	09 83       	std	Y+1, r16	; 0x01
    1082:	1a 83       	std	Y+2, r17	; 0x02
    1084:	2b 83       	std	Y+3, r18	; 0x03
    1086:	3c 83       	std	Y+4, r19	; 0x04
    1088:	0f c0       	rjmp	.+30     	; 0x10a8 <timer_init+0x19e>
    108a:	ce 01       	movw	r24, r28
    108c:	01 96       	adiw	r24, 0x01	; 1
    108e:	7c 01       	movw	r14, r24
    1090:	4d 81       	ldd	r20, Y+5	; 0x05
    1092:	5e 81       	ldd	r21, Y+6	; 0x06
    1094:	6f 81       	ldd	r22, Y+7	; 0x07
    1096:	78 85       	ldd	r23, Y+8	; 0x08
    1098:	89 85       	ldd	r24, Y+9	; 0x09
    109a:	1c dc       	rcall	.-1992   	; 0x8d4 <calculateTopRegister>
    109c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    10a0:	61 e0       	ldi	r22, 0x01	; 1
    10a2:	80 eb       	ldi	r24, 0xB0	; 176
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	8c db       	rcall	.-2280   	; 0x7c0 <setBit>
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	ab 81       	ldd	r26, Y+3	; 0x03
    10ae:	bc 81       	ldd	r27, Y+4	; 0x04
    10b0:	fc 01       	movw	r30, r24
    10b2:	37 96       	adiw	r30, 0x07	; 7
    10b4:	e7 30       	cpi	r30, 0x07	; 7
    10b6:	f1 05       	cpc	r31, r1
    10b8:	08 f0       	brcs	.+2      	; 0x10bc <timer_init+0x1b2>
    10ba:	42 c0       	rjmp	.+132    	; 0x1140 <timer_init+0x236>
    10bc:	ea 5b       	subi	r30, 0xBA	; 186
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	0c 94 35 13 	jmp	0x266a	; 0x266a <__tablejump2__>
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	a0 e0       	ldi	r26, 0x00	; 0
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	89 83       	std	Y+1, r24	; 0x01
    10ce:	9a 83       	std	Y+2, r25	; 0x02
    10d0:	ab 83       	std	Y+3, r26	; 0x03
    10d2:	bc 83       	std	Y+4, r27	; 0x04
    10d4:	35 c0       	rjmp	.+106    	; 0x1140 <timer_init+0x236>
    10d6:	82 e0       	ldi	r24, 0x02	; 2
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	a0 e0       	ldi	r26, 0x00	; 0
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	ab 83       	std	Y+3, r26	; 0x03
    10e4:	bc 83       	std	Y+4, r27	; 0x04
    10e6:	2c c0       	rjmp	.+88     	; 0x1140 <timer_init+0x236>
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	a0 e0       	ldi	r26, 0x00	; 0
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	9a 83       	std	Y+2, r25	; 0x02
    10f4:	ab 83       	std	Y+3, r26	; 0x03
    10f6:	bc 83       	std	Y+4, r27	; 0x04
    10f8:	23 c0       	rjmp	.+70     	; 0x1140 <timer_init+0x236>
    10fa:	84 e0       	ldi	r24, 0x04	; 4
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	a0 e0       	ldi	r26, 0x00	; 0
    1100:	b0 e0       	ldi	r27, 0x00	; 0
    1102:	89 83       	std	Y+1, r24	; 0x01
    1104:	9a 83       	std	Y+2, r25	; 0x02
    1106:	ab 83       	std	Y+3, r26	; 0x03
    1108:	bc 83       	std	Y+4, r27	; 0x04
    110a:	1a c0       	rjmp	.+52     	; 0x1140 <timer_init+0x236>
    110c:	85 e0       	ldi	r24, 0x05	; 5
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	9a 83       	std	Y+2, r25	; 0x02
    1118:	ab 83       	std	Y+3, r26	; 0x03
    111a:	bc 83       	std	Y+4, r27	; 0x04
    111c:	11 c0       	rjmp	.+34     	; 0x1140 <timer_init+0x236>
    111e:	86 e0       	ldi	r24, 0x06	; 6
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	a0 e0       	ldi	r26, 0x00	; 0
    1124:	b0 e0       	ldi	r27, 0x00	; 0
    1126:	89 83       	std	Y+1, r24	; 0x01
    1128:	9a 83       	std	Y+2, r25	; 0x02
    112a:	ab 83       	std	Y+3, r26	; 0x03
    112c:	bc 83       	std	Y+4, r27	; 0x04
    112e:	08 c0       	rjmp	.+16     	; 0x1140 <timer_init+0x236>
    1130:	87 e0       	ldi	r24, 0x07	; 7
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	a0 e0       	ldi	r26, 0x00	; 0
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	9a 83       	std	Y+2, r25	; 0x02
    113c:	ab 83       	std	Y+3, r26	; 0x03
    113e:	bc 83       	std	Y+4, r27	; 0x04
    1140:	49 81       	ldd	r20, Y+1	; 0x01
    1142:	5a 81       	ldd	r21, Y+2	; 0x02
    1144:	6b 81       	ldd	r22, Y+3	; 0x03
    1146:	7c 81       	ldd	r23, Y+4	; 0x04
    1148:	76 95       	lsr	r23
    114a:	67 95       	ror	r22
    114c:	57 95       	ror	r21
    114e:	47 95       	ror	r20
    1150:	76 95       	lsr	r23
    1152:	67 95       	ror	r22
    1154:	57 95       	ror	r21
    1156:	47 95       	ror	r20
    1158:	41 70       	andi	r20, 0x01	; 1
    115a:	62 e0       	ldi	r22, 0x02	; 2
    115c:	8b e3       	ldi	r24, 0x3B	; 59
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	17 db       	rcall	.-2514   	; 0x790 <updateBit>
    1162:	49 81       	ldd	r20, Y+1	; 0x01
    1164:	5a 81       	ldd	r21, Y+2	; 0x02
    1166:	6b 81       	ldd	r22, Y+3	; 0x03
    1168:	7c 81       	ldd	r23, Y+4	; 0x04
    116a:	76 95       	lsr	r23
    116c:	67 95       	ror	r22
    116e:	57 95       	ror	r21
    1170:	47 95       	ror	r20
    1172:	41 70       	andi	r20, 0x01	; 1
    1174:	61 e0       	ldi	r22, 0x01	; 1
    1176:	8b e3       	ldi	r24, 0x3B	; 59
    1178:	91 e0       	ldi	r25, 0x01	; 1
    117a:	0a db       	rcall	.-2540   	; 0x790 <updateBit>
    117c:	49 81       	ldd	r20, Y+1	; 0x01
    117e:	41 70       	andi	r20, 0x01	; 1
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	8b e3       	ldi	r24, 0x3B	; 59
    1184:	91 e0       	ldi	r25, 0x01	; 1
    1186:	04 db       	rcall	.-2552   	; 0x790 <updateBit>
    1188:	29 96       	adiw	r28, 0x09	; 9
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	de bf       	out	0x3e, r29	; 62
    1190:	0f be       	out	0x3f, r0	; 63
    1192:	cd bf       	out	0x3d, r28	; 61
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	1f 91       	pop	r17
    119a:	0f 91       	pop	r16
    119c:	ff 90       	pop	r15
    119e:	ef 90       	pop	r14
    11a0:	08 95       	ret

000011a2 <timer_start>:
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <timer_start+0x6>
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <timer_start+0x8>
    11aa:	1f 92       	push	r1
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	41 30       	cpi	r20, 0x01	; 1
    11b2:	19 f0       	breq	.+6      	; 0x11ba <timer_start+0x18>
    11b4:	42 30       	cpi	r20, 0x02	; 2
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <timer_start+0x4a>
    11b8:	31 c0       	rjmp	.+98     	; 0x121c <timer_start+0x7a>
    11ba:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <u8_timer1ClockSource>
    11be:	42 fb       	bst	r20, 2
    11c0:	44 27       	eor	r20, r20
    11c2:	40 f9       	bld	r20, 0
    11c4:	62 e0       	ldi	r22, 0x02	; 2
    11c6:	81 e8       	ldi	r24, 0x81	; 129
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	e2 da       	rcall	.-2620   	; 0x790 <updateBit>
    11cc:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <u8_timer1ClockSource>
    11d0:	46 95       	lsr	r20
    11d2:	41 70       	andi	r20, 0x01	; 1
    11d4:	61 e0       	ldi	r22, 0x01	; 1
    11d6:	81 e8       	ldi	r24, 0x81	; 129
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	da da       	rcall	.-2636   	; 0x790 <updateBit>
    11dc:	40 91 3a 01 	lds	r20, 0x013A	; 0x80013a <u8_timer1ClockSource>
    11e0:	41 70       	andi	r20, 0x01	; 1
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	81 e8       	ldi	r24, 0x81	; 129
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	d3 da       	rcall	.-2650   	; 0x790 <updateBit>
    11ea:	18 c0       	rjmp	.+48     	; 0x121c <timer_start+0x7a>
    11ec:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <u8_timer2ClockSource>
    11f0:	42 fb       	bst	r20, 2
    11f2:	44 27       	eor	r20, r20
    11f4:	40 f9       	bld	r20, 0
    11f6:	62 e0       	ldi	r22, 0x02	; 2
    11f8:	81 eb       	ldi	r24, 0xB1	; 177
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	c9 da       	rcall	.-2670   	; 0x790 <updateBit>
    11fe:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <u8_timer2ClockSource>
    1202:	46 95       	lsr	r20
    1204:	41 70       	andi	r20, 0x01	; 1
    1206:	61 e0       	ldi	r22, 0x01	; 1
    1208:	81 eb       	ldi	r24, 0xB1	; 177
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	c1 da       	rcall	.-2686   	; 0x790 <updateBit>
    120e:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <u8_timer2ClockSource>
    1212:	41 70       	andi	r20, 0x01	; 1
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	81 eb       	ldi	r24, 0xB1	; 177
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	ba da       	rcall	.-2700   	; 0x790 <updateBit>
    121c:	0f 90       	pop	r0
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	0f 90       	pop	r0
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	08 95       	ret

0000122c <timer_enableInterrupt>:
    122c:	cf 92       	push	r12
    122e:	df 92       	push	r13
    1230:	ef 92       	push	r14
    1232:	ff 92       	push	r15
    1234:	0f 93       	push	r16
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	00 d0       	rcall	.+0      	; 0x123e <timer_enableInterrupt+0x12>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <timer_enableInterrupt+0x14>
    1240:	1f 92       	push	r1
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	49 83       	std	Y+1, r20	; 0x01
    1248:	5a 83       	std	Y+2, r21	; 0x02
    124a:	6b 83       	std	Y+3, r22	; 0x03
    124c:	7c 83       	std	Y+4, r23	; 0x04
    124e:	8d 83       	std	Y+5, r24	; 0x05
    1250:	02 2f       	mov	r16, r18
    1252:	41 30       	cpi	r20, 0x01	; 1
    1254:	21 f0       	breq	.+8      	; 0x125e <timer_enableInterrupt+0x32>
    1256:	42 30       	cpi	r20, 0x02	; 2
    1258:	09 f4       	brne	.+2      	; 0x125c <timer_enableInterrupt+0x30>
    125a:	5e c0       	rjmp	.+188    	; 0x1318 <timer_enableInterrupt+0xec>
    125c:	95 c0       	rjmp	.+298    	; 0x1388 <timer_enableInterrupt+0x15c>
    125e:	0f 2e       	mov	r0, r31
    1260:	f1 e8       	ldi	r31, 0x81	; 129
    1262:	ef 2e       	mov	r14, r31
    1264:	f1 2c       	mov	r15, r1
    1266:	f0 2d       	mov	r31, r0
    1268:	f7 01       	movw	r30, r14
    126a:	80 81       	ld	r24, Z
    126c:	64 e0       	ldi	r22, 0x04	; 4
    126e:	c1 da       	rcall	.-2686   	; 0x7f2 <checkBit>
    1270:	18 2f       	mov	r17, r24
    1272:	f7 01       	movw	r30, r14
    1274:	80 81       	ld	r24, Z
    1276:	63 e0       	ldi	r22, 0x03	; 3
    1278:	bc da       	rcall	.-2696   	; 0x7f2 <checkBit>
    127a:	11 0f       	add	r17, r17
    127c:	11 0f       	add	r17, r17
    127e:	11 0f       	add	r17, r17
    1280:	f4 e0       	ldi	r31, 0x04	; 4
    1282:	8f 9f       	mul	r24, r31
    1284:	c0 01       	movw	r24, r0
    1286:	11 24       	eor	r1, r1
    1288:	18 2b       	or	r17, r24
    128a:	68 94       	set
    128c:	cc 24       	eor	r12, r12
    128e:	c7 f8       	bld	r12, 7
    1290:	d1 2c       	mov	r13, r1
    1292:	f6 01       	movw	r30, r12
    1294:	80 81       	ld	r24, Z
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	ac da       	rcall	.-2728   	; 0x7f2 <checkBit>
    129a:	f8 2e       	mov	r15, r24
    129c:	f6 01       	movw	r30, r12
    129e:	80 81       	ld	r24, Z
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	a7 da       	rcall	.-2738   	; 0x7f2 <checkBit>
    12a4:	ff 0c       	add	r15, r15
    12a6:	81 2b       	or	r24, r17
    12a8:	8f 29       	or	r24, r15
    12aa:	01 30       	cpi	r16, 0x01	; 1
    12ac:	d9 f0       	breq	.+54     	; 0x12e4 <timer_enableInterrupt+0xb8>
    12ae:	28 f0       	brcs	.+10     	; 0x12ba <timer_enableInterrupt+0x8e>
    12b0:	02 30       	cpi	r16, 0x02	; 2
    12b2:	21 f1       	breq	.+72     	; 0x12fc <timer_enableInterrupt+0xd0>
    12b4:	03 30       	cpi	r16, 0x03	; 3
    12b6:	39 f1       	breq	.+78     	; 0x1306 <timer_enableInterrupt+0xda>
    12b8:	67 c0       	rjmp	.+206    	; 0x1388 <timer_enableInterrupt+0x15c>
    12ba:	88 30       	cpi	r24, 0x08	; 8
    12bc:	38 f4       	brcc	.+14     	; 0x12cc <timer_enableInterrupt+0xa0>
    12be:	84 30       	cpi	r24, 0x04	; 4
    12c0:	61 f0       	breq	.+24     	; 0x12da <timer_enableInterrupt+0xae>
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	8f e6       	ldi	r24, 0x6F	; 111
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	7b da       	rcall	.-2826   	; 0x7c0 <setBit>
    12ca:	5e c0       	rjmp	.+188    	; 0x1388 <timer_enableInterrupt+0x15c>
    12cc:	80 fd       	sbrc	r24, 0
    12ce:	05 c0       	rjmp	.+10     	; 0x12da <timer_enableInterrupt+0xae>
    12d0:	65 e0       	ldi	r22, 0x05	; 5
    12d2:	8f e6       	ldi	r24, 0x6F	; 111
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	74 da       	rcall	.-2840   	; 0x7c0 <setBit>
    12d8:	57 c0       	rjmp	.+174    	; 0x1388 <timer_enableInterrupt+0x15c>
    12da:	61 e0       	ldi	r22, 0x01	; 1
    12dc:	8f e6       	ldi	r24, 0x6F	; 111
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	6f da       	rcall	.-2850   	; 0x7c0 <setBit>
    12e2:	52 c0       	rjmp	.+164    	; 0x1388 <timer_enableInterrupt+0x15c>
    12e4:	88 30       	cpi	r24, 0x08	; 8
    12e6:	18 f4       	brcc	.+6      	; 0x12ee <timer_enableInterrupt+0xc2>
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <timer_enableInterrupt+0xc6>
    12ec:	4d c0       	rjmp	.+154    	; 0x1388 <timer_enableInterrupt+0x15c>
    12ee:	80 fd       	sbrc	r24, 0
    12f0:	4b c0       	rjmp	.+150    	; 0x1388 <timer_enableInterrupt+0x15c>
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	8f e6       	ldi	r24, 0x6F	; 111
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	63 da       	rcall	.-2874   	; 0x7c0 <setBit>
    12fa:	46 c0       	rjmp	.+140    	; 0x1388 <timer_enableInterrupt+0x15c>
    12fc:	62 e0       	ldi	r22, 0x02	; 2
    12fe:	8f e6       	ldi	r24, 0x6F	; 111
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	5e da       	rcall	.-2884   	; 0x7c0 <setBit>
    1304:	41 c0       	rjmp	.+130    	; 0x1388 <timer_enableInterrupt+0x15c>
    1306:	88 30       	cpi	r24, 0x08	; 8
    1308:	10 f0       	brcs	.+4      	; 0x130e <timer_enableInterrupt+0xe2>
    130a:	80 ff       	sbrs	r24, 0
    130c:	3d c0       	rjmp	.+122    	; 0x1388 <timer_enableInterrupt+0x15c>
    130e:	65 e0       	ldi	r22, 0x05	; 5
    1310:	8f e6       	ldi	r24, 0x6F	; 111
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	55 da       	rcall	.-2902   	; 0x7c0 <setBit>
    1316:	38 c0       	rjmp	.+112    	; 0x1388 <timer_enableInterrupt+0x15c>
    1318:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    131c:	63 e0       	ldi	r22, 0x03	; 3
    131e:	69 da       	rcall	.-2862   	; 0x7f2 <checkBit>
    1320:	18 2f       	mov	r17, r24
    1322:	0f 2e       	mov	r0, r31
    1324:	f0 eb       	ldi	r31, 0xB0	; 176
    1326:	ef 2e       	mov	r14, r31
    1328:	f1 2c       	mov	r15, r1
    132a:	f0 2d       	mov	r31, r0
    132c:	f7 01       	movw	r30, r14
    132e:	80 81       	ld	r24, Z
    1330:	61 e0       	ldi	r22, 0x01	; 1
    1332:	5f da       	rcall	.-2882   	; 0x7f2 <checkBit>
    1334:	11 0f       	add	r17, r17
    1336:	11 0f       	add	r17, r17
    1338:	88 0f       	add	r24, r24
    133a:	18 2b       	or	r17, r24
    133c:	f7 01       	movw	r30, r14
    133e:	80 81       	ld	r24, Z
    1340:	60 e0       	ldi	r22, 0x00	; 0
    1342:	57 da       	rcall	.-2898   	; 0x7f2 <checkBit>
    1344:	81 2b       	or	r24, r17
    1346:	01 30       	cpi	r16, 0x01	; 1
    1348:	91 f0       	breq	.+36     	; 0x136e <timer_enableInterrupt+0x142>
    134a:	18 f0       	brcs	.+6      	; 0x1352 <timer_enableInterrupt+0x126>
    134c:	02 30       	cpi	r16, 0x02	; 2
    134e:	c1 f0       	breq	.+48     	; 0x1380 <timer_enableInterrupt+0x154>
    1350:	1b c0       	rjmp	.+54     	; 0x1388 <timer_enableInterrupt+0x15c>
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	38 f4       	brcc	.+14     	; 0x1364 <timer_enableInterrupt+0x138>
    1356:	82 30       	cpi	r24, 0x02	; 2
    1358:	29 f0       	breq	.+10     	; 0x1364 <timer_enableInterrupt+0x138>
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	80 e7       	ldi	r24, 0x70	; 112
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	2f da       	rcall	.-2978   	; 0x7c0 <setBit>
    1362:	12 c0       	rjmp	.+36     	; 0x1388 <timer_enableInterrupt+0x15c>
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	80 e7       	ldi	r24, 0x70	; 112
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	2a da       	rcall	.-2988   	; 0x7c0 <setBit>
    136c:	0d c0       	rjmp	.+26     	; 0x1388 <timer_enableInterrupt+0x15c>
    136e:	84 30       	cpi	r24, 0x04	; 4
    1370:	58 f4       	brcc	.+22     	; 0x1388 <timer_enableInterrupt+0x15c>
    1372:	82 30       	cpi	r24, 0x02	; 2
    1374:	49 f0       	breq	.+18     	; 0x1388 <timer_enableInterrupt+0x15c>
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	80 e7       	ldi	r24, 0x70	; 112
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	21 da       	rcall	.-3006   	; 0x7c0 <setBit>
    137e:	04 c0       	rjmp	.+8      	; 0x1388 <timer_enableInterrupt+0x15c>
    1380:	62 e0       	ldi	r22, 0x02	; 2
    1382:	80 e7       	ldi	r24, 0x70	; 112
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	1c da       	rcall	.-3016   	; 0x7c0 <setBit>
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	df 91       	pop	r29
    1394:	cf 91       	pop	r28
    1396:	1f 91       	pop	r17
    1398:	0f 91       	pop	r16
    139a:	ff 90       	pop	r15
    139c:	ef 90       	pop	r14
    139e:	df 90       	pop	r13
    13a0:	cf 90       	pop	r12
    13a2:	08 95       	ret

000013a4 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    13a4:	0f 93       	push	r16
    13a6:	1f 93       	push	r17
    13a8:	cf 93       	push	r28
    13aa:	df 93       	push	r29
    13ac:	00 d0       	rcall	.+0      	; 0x13ae <timer_attachInterrupt+0xa>
    13ae:	00 d0       	rcall	.+0      	; 0x13b0 <timer_attachInterrupt+0xc>
    13b0:	1f 92       	push	r1
    13b2:	cd b7       	in	r28, 0x3d	; 61
    13b4:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    13b6:	41 30       	cpi	r20, 0x01	; 1
    13b8:	19 f0       	breq	.+6      	; 0x13c0 <timer_attachInterrupt+0x1c>
    13ba:	42 30       	cpi	r20, 0x02	; 2
    13bc:	51 f0       	breq	.+20     	; 0x13d2 <timer_attachInterrupt+0x2e>
    13be:	11 c0       	rjmp	.+34     	; 0x13e2 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    13c0:	e2 2f       	mov	r30, r18
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	ee 5c       	subi	r30, 0xCE	; 206
    13ca:	fe 4f       	sbci	r31, 0xFE	; 254
    13cc:	11 83       	std	Z+1, r17	; 0x01
    13ce:	00 83       	st	Z, r16
		#endif
			break;
    13d0:	08 c0       	rjmp	.+16     	; 0x13e2 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    13d2:	e2 2f       	mov	r30, r18
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	e4 5c       	subi	r30, 0xC4	; 196
    13dc:	fe 4f       	sbci	r31, 0xFE	; 254
    13de:	11 83       	std	Z+1, r17	; 0x01
    13e0:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    13e2:	0f 90       	pop	r0
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    13f6:	4f 92       	push	r4
    13f8:	5f 92       	push	r5
    13fa:	6f 92       	push	r6
    13fc:	7f 92       	push	r7
    13fe:	8f 92       	push	r8
    1400:	9f 92       	push	r9
    1402:	af 92       	push	r10
    1404:	bf 92       	push	r11
    1406:	cf 92       	push	r12
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	4b 01       	movw	r8, r22
    1414:	5c 01       	movw	r10, r24
    1416:	ea 01       	movw	r28, r20
    1418:	0f 2e       	mov	r0, r31
    141a:	f0 e2       	ldi	r31, 0x20	; 32
    141c:	4f 2e       	mov	r4, r31
    141e:	f1 ea       	ldi	r31, 0xA1	; 161
    1420:	5f 2e       	mov	r5, r31
    1422:	f7 e0       	ldi	r31, 0x07	; 7
    1424:	6f 2e       	mov	r6, r31
    1426:	71 2c       	mov	r7, r1
    1428:	f0 2d       	mov	r31, r0
    142a:	c3 01       	movw	r24, r6
    142c:	b2 01       	movw	r22, r4
    142e:	a5 01       	movw	r20, r10
    1430:	94 01       	movw	r18, r8
    1432:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
    1436:	69 01       	movw	r12, r18
    1438:	7a 01       	movw	r14, r20
    143a:	c3 01       	movw	r24, r6
    143c:	b2 01       	movw	r22, r4
    143e:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
    1442:	ca 01       	movw	r24, r20
    1444:	b9 01       	movw	r22, r18
    1446:	a5 01       	movw	r20, r10
    1448:	94 01       	movw	r18, r8
    144a:	db d9       	rcall	.-3146   	; 0x802 <calculateError>
    144c:	44 97       	sbiw	r24, 0x14	; 20
    144e:	30 f4       	brcc	.+12     	; 0x145c <calculateUBRR+0x66>
    1450:	d7 01       	movw	r26, r14
    1452:	c6 01       	movw	r24, r12
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	a1 09       	sbc	r26, r1
    1458:	b1 09       	sbc	r27, r1
    145a:	0f c0       	rjmp	.+30     	; 0x147a <calculateUBRR+0x84>
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	88 83       	st	Y, r24
    1460:	60 e4       	ldi	r22, 0x40	; 64
    1462:	72 e4       	ldi	r23, 0x42	; 66
    1464:	8f e0       	ldi	r24, 0x0F	; 15
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	a5 01       	movw	r20, r10
    146a:	94 01       	movw	r18, r8
    146c:	0e 94 13 13 	call	0x2626	; 0x2626 <__udivmodsi4>
    1470:	da 01       	movw	r26, r20
    1472:	c9 01       	movw	r24, r18
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	a1 09       	sbc	r26, r1
    1478:	b1 09       	sbc	r27, r1
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	bf 90       	pop	r11
    1488:	af 90       	pop	r10
    148a:	9f 90       	pop	r9
    148c:	8f 90       	pop	r8
    148e:	7f 90       	pop	r7
    1490:	6f 90       	pop	r6
    1492:	5f 90       	pop	r5
    1494:	4f 90       	pop	r4
    1496:	08 95       	ret

00001498 <__vector_20>:
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	0b b6       	in	r0, 0x3b	; 59
    14a4:	0f 92       	push	r0
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14c2:	62 e0       	ldi	r22, 0x02	; 2
    14c4:	96 d9       	rcall	.-3284   	; 0x7f2 <checkBit>
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	99 f4       	brne	.+38     	; 0x14f0 <__vector_20+0x58>
    14ca:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <u8_rx0LastReceivedIndex>
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14d4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14d8:	82 70       	andi	r24, 0x02	; 2
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	98 2f       	mov	r25, r24
    14de:	88 27       	eor	r24, r24
    14e0:	82 2b       	or	r24, r18
    14e2:	ee 0f       	add	r30, r30
    14e4:	ff 1f       	adc	r31, r31
    14e6:	eb 5b       	subi	r30, 0xBB	; 187
    14e8:	fe 4f       	sbci	r31, 0xFE	; 254
    14ea:	91 83       	std	Z+1, r25	; 0x01
    14ec:	80 83       	st	Z, r24
    14ee:	0c c0       	rjmp	.+24     	; 0x1508 <__vector_20+0x70>
    14f0:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <u8_rx0LastReceivedIndex>
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	eb 5b       	subi	r30, 0xBB	; 187
    1502:	fe 4f       	sbci	r31, 0xFE	; 254
    1504:	91 83       	std	Z+1, r25	; 0x01
    1506:	80 83       	st	Z, r24
    1508:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_rx0LastReceivedIndex>
    150c:	89 30       	cpi	r24, 0x09	; 9
    150e:	30 f4       	brcc	.+12     	; 0x151c <__vector_20+0x84>
    1510:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <u8_rx0LastReceivedIndex>
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <u8_rx0LastReceivedIndex>
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <__vector_20+0x88>
    151c:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <u8_rx0LastReceivedIndex>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <b_rx0Available>
    1526:	ff 91       	pop	r31
    1528:	ef 91       	pop	r30
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0b be       	out	0x3b, r0	; 59
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0
    1548:	1f 90       	pop	r1
    154a:	18 95       	reti

0000154c <__vector_21>:
    154c:	1f 92       	push	r1
    154e:	0f 92       	push	r0
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	0f 92       	push	r0
    1554:	11 24       	eor	r1, r1
    1556:	0b b6       	in	r0, 0x3b	; 59
    1558:	0f 92       	push	r0
    155a:	2f 93       	push	r18
    155c:	3f 93       	push	r19
    155e:	4f 93       	push	r20
    1560:	5f 93       	push	r21
    1562:	6f 93       	push	r22
    1564:	7f 93       	push	r23
    1566:	8f 93       	push	r24
    1568:	9f 93       	push	r25
    156a:	af 93       	push	r26
    156c:	bf 93       	push	r27
    156e:	ef 93       	push	r30
    1570:	ff 93       	push	r31
    1572:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <u8_tx0LastTransmittedIndex>
    1576:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u8_tx0LastRequestedIndex>
    157a:	98 17       	cp	r25, r24
    157c:	69 f1       	breq	.+90     	; 0x15d8 <__vector_21+0x8c>
    157e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1582:	62 e0       	ldi	r22, 0x02	; 2
    1584:	36 d9       	rcall	.-3476   	; 0x7f2 <checkBit>
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	79 f4       	brne	.+30     	; 0x15a8 <__vector_21+0x5c>
    158a:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <u8_tx0LastTransmittedIndex>
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	ee 0f       	add	r30, r30
    1592:	ff 1f       	adc	r31, r31
    1594:	e5 5a       	subi	r30, 0xA5	; 165
    1596:	fe 4f       	sbci	r31, 0xFE	; 254
    1598:	80 81       	ld	r24, Z
    159a:	91 81       	ldd	r25, Z+1	; 0x01
    159c:	e1 ec       	ldi	r30, 0xC1	; 193
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	91 70       	andi	r25, 0x01	; 1
    15a4:	89 2b       	or	r24, r25
    15a6:	80 83       	st	Z, r24
    15a8:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <u8_tx0LastTransmittedIndex>
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	ee 0f       	add	r30, r30
    15b0:	ff 1f       	adc	r31, r31
    15b2:	e5 5a       	subi	r30, 0xA5	; 165
    15b4:	fe 4f       	sbci	r31, 0xFE	; 254
    15b6:	80 81       	ld	r24, Z
    15b8:	91 81       	ldd	r25, Z+1	; 0x01
    15ba:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    15be:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8_tx0LastTransmittedIndex>
    15c2:	89 30       	cpi	r24, 0x09	; 9
    15c4:	30 f4       	brcc	.+12     	; 0x15d2 <__vector_21+0x86>
    15c6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8_tx0LastTransmittedIndex>
    15ca:	8f 5f       	subi	r24, 0xFF	; 255
    15cc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8_tx0LastTransmittedIndex>
    15d0:	07 c0       	rjmp	.+14     	; 0x15e0 <__vector_21+0x94>
    15d2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <u8_tx0LastTransmittedIndex>
    15d6:	04 c0       	rjmp	.+8      	; 0x15e0 <__vector_21+0x94>
    15d8:	65 e0       	ldi	r22, 0x05	; 5
    15da:	81 ec       	ldi	r24, 0xC1	; 193
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	fc d8       	rcall	.-3592   	; 0x7d8 <clearBit>
    15e0:	ff 91       	pop	r31
    15e2:	ef 91       	pop	r30
    15e4:	bf 91       	pop	r27
    15e6:	af 91       	pop	r26
    15e8:	9f 91       	pop	r25
    15ea:	8f 91       	pop	r24
    15ec:	7f 91       	pop	r23
    15ee:	6f 91       	pop	r22
    15f0:	5f 91       	pop	r21
    15f2:	4f 91       	pop	r20
    15f4:	3f 91       	pop	r19
    15f6:	2f 91       	pop	r18
    15f8:	0f 90       	pop	r0
    15fa:	0b be       	out	0x3b, r0	; 59
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0
    1602:	1f 90       	pop	r1
    1604:	18 95       	reti

00001606 <__vector_22>:
    1606:	1f 92       	push	r1
    1608:	0f 92       	push	r0
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	0f 92       	push	r0
    160e:	11 24       	eor	r1, r1
    1610:	0b b6       	in	r0, 0x3b	; 59
    1612:	0f 92       	push	r0
    1614:	8f 93       	push	r24
    1616:	9f 93       	push	r25
    1618:	ef 93       	push	r30
    161a:	ff 93       	push	r31
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	fc 01       	movw	r30, r24
    1622:	ee 0f       	add	r30, r30
    1624:	ff 1f       	adc	r31, r31
    1626:	e5 5a       	subi	r30, 0xA5	; 165
    1628:	fe 4f       	sbci	r31, 0xFE	; 254
    162a:	11 82       	std	Z+1, r1	; 0x01
    162c:	10 82       	st	Z, r1
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	8a 30       	cpi	r24, 0x0A	; 10
    1632:	91 05       	cpc	r25, r1
    1634:	a9 f7       	brne	.-22     	; 0x1620 <__vector_22+0x1a>
    1636:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <u8_tx0LastTransmittedIndex>
    163a:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8_tx0LastRequestedIndex>
    163e:	ff 91       	pop	r31
    1640:	ef 91       	pop	r30
    1642:	9f 91       	pop	r25
    1644:	8f 91       	pop	r24
    1646:	0f 90       	pop	r0
    1648:	0b be       	out	0x3b, r0	; 59
    164a:	0f 90       	pop	r0
    164c:	0f be       	out	0x3f, r0	; 63
    164e:	0f 90       	pop	r0
    1650:	1f 90       	pop	r1
    1652:	18 95       	reti

00001654 <uart_init>:
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	2b 97       	sbiw	r28, 0x0b	; 11
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	0a 83       	std	Y+2, r16	; 0x02
    166e:	1b 83       	std	Y+3, r17	; 0x03
    1670:	2c 83       	std	Y+4, r18	; 0x04
    1672:	3d 83       	std	Y+5, r19	; 0x05
    1674:	4e 83       	std	Y+6, r20	; 0x06
    1676:	5f 83       	std	Y+7, r21	; 0x07
    1678:	68 87       	std	Y+8, r22	; 0x08
    167a:	79 87       	std	Y+9, r23	; 0x09
    167c:	8a 87       	std	Y+10, r24	; 0x0a
    167e:	9b 87       	std	Y+11, r25	; 0x0b
    1680:	19 82       	std	Y+1, r1	; 0x01
    1682:	01 11       	cpse	r16, r1
    1684:	98 c0       	rjmp	.+304    	; 0x17b6 <uart_init+0x162>
    1686:	19 2f       	mov	r17, r25
    1688:	e2 ec       	ldi	r30, 0xC2	; 194
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8f 73       	andi	r24, 0x3F	; 63
    1690:	80 83       	st	Z, r24
    1692:	6b 81       	ldd	r22, Y+3	; 0x03
    1694:	7c 81       	ldd	r23, Y+4	; 0x04
    1696:	8d 81       	ldd	r24, Y+5	; 0x05
    1698:	9e 81       	ldd	r25, Y+6	; 0x06
    169a:	ae 01       	movw	r20, r28
    169c:	4f 5f       	subi	r20, 0xFF	; 255
    169e:	5f 4f       	sbci	r21, 0xFF	; 255
    16a0:	aa de       	rcall	.-684    	; 0x13f6 <calculateUBRR>
    16a2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    16a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    16aa:	49 81       	ldd	r20, Y+1	; 0x01
    16ac:	61 e0       	ldi	r22, 0x01	; 1
    16ae:	80 ec       	ldi	r24, 0xC0	; 192
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	6e d8       	rcall	.-3876   	; 0x790 <updateBit>
    16b4:	89 85       	ldd	r24, Y+9	; 0x09
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	31 f1       	breq	.+76     	; 0x1706 <uart_init+0xb2>
    16ba:	28 f4       	brcc	.+10     	; 0x16c6 <uart_init+0x72>
    16bc:	88 23       	and	r24, r24
    16be:	49 f0       	breq	.+18     	; 0x16d2 <uart_init+0x7e>
    16c0:	81 30       	cpi	r24, 0x01	; 1
    16c2:	a1 f0       	breq	.+40     	; 0x16ec <uart_init+0x98>
    16c4:	46 c0       	rjmp	.+140    	; 0x1752 <uart_init+0xfe>
    16c6:	83 30       	cpi	r24, 0x03	; 3
    16c8:	59 f1       	breq	.+86     	; 0x1720 <uart_init+0xcc>
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <uart_init+0x7c>
    16ce:	35 c0       	rjmp	.+106    	; 0x173a <uart_init+0xe6>
    16d0:	40 c0       	rjmp	.+128    	; 0x1752 <uart_init+0xfe>
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	82 ec       	ldi	r24, 0xC2	; 194
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	7f d8       	rcall	.-3842   	; 0x7d8 <clearBit>
    16da:	62 e0       	ldi	r22, 0x02	; 2
    16dc:	82 ec       	ldi	r24, 0xC2	; 194
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	7b d8       	rcall	.-3850   	; 0x7d8 <clearBit>
    16e2:	62 e0       	ldi	r22, 0x02	; 2
    16e4:	81 ec       	ldi	r24, 0xC1	; 193
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	77 d8       	rcall	.-3858   	; 0x7d8 <clearBit>
    16ea:	33 c0       	rjmp	.+102    	; 0x1752 <uart_init+0xfe>
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	82 ec       	ldi	r24, 0xC2	; 194
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	66 d8       	rcall	.-3892   	; 0x7c0 <setBit>
    16f4:	62 e0       	ldi	r22, 0x02	; 2
    16f6:	82 ec       	ldi	r24, 0xC2	; 194
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	6e d8       	rcall	.-3876   	; 0x7d8 <clearBit>
    16fc:	62 e0       	ldi	r22, 0x02	; 2
    16fe:	81 ec       	ldi	r24, 0xC1	; 193
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	6a d8       	rcall	.-3884   	; 0x7d8 <clearBit>
    1704:	26 c0       	rjmp	.+76     	; 0x1752 <uart_init+0xfe>
    1706:	61 e0       	ldi	r22, 0x01	; 1
    1708:	82 ec       	ldi	r24, 0xC2	; 194
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	65 d8       	rcall	.-3894   	; 0x7d8 <clearBit>
    170e:	62 e0       	ldi	r22, 0x02	; 2
    1710:	82 ec       	ldi	r24, 0xC2	; 194
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	55 d8       	rcall	.-3926   	; 0x7c0 <setBit>
    1716:	62 e0       	ldi	r22, 0x02	; 2
    1718:	81 ec       	ldi	r24, 0xC1	; 193
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	5d d8       	rcall	.-3910   	; 0x7d8 <clearBit>
    171e:	19 c0       	rjmp	.+50     	; 0x1752 <uart_init+0xfe>
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	82 ec       	ldi	r24, 0xC2	; 194
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	4c d8       	rcall	.-3944   	; 0x7c0 <setBit>
    1728:	62 e0       	ldi	r22, 0x02	; 2
    172a:	82 ec       	ldi	r24, 0xC2	; 194
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	48 d8       	rcall	.-3952   	; 0x7c0 <setBit>
    1730:	62 e0       	ldi	r22, 0x02	; 2
    1732:	81 ec       	ldi	r24, 0xC1	; 193
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	50 d8       	rcall	.-3936   	; 0x7d8 <clearBit>
    1738:	0c c0       	rjmp	.+24     	; 0x1752 <uart_init+0xfe>
    173a:	61 e0       	ldi	r22, 0x01	; 1
    173c:	82 ec       	ldi	r24, 0xC2	; 194
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	3f d8       	rcall	.-3970   	; 0x7c0 <setBit>
    1742:	62 e0       	ldi	r22, 0x02	; 2
    1744:	82 ec       	ldi	r24, 0xC2	; 194
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	3b d8       	rcall	.-3978   	; 0x7c0 <setBit>
    174a:	62 e0       	ldi	r22, 0x02	; 2
    174c:	81 ec       	ldi	r24, 0xC1	; 193
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	37 d8       	rcall	.-3986   	; 0x7c0 <setBit>
    1752:	4a 85       	ldd	r20, Y+10	; 0x0a
    1754:	63 e0       	ldi	r22, 0x03	; 3
    1756:	82 ec       	ldi	r24, 0xC2	; 194
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	1a d8       	rcall	.-4044   	; 0x790 <updateBit>
    175c:	12 30       	cpi	r17, 0x02	; 2
    175e:	31 f4       	brne	.+12     	; 0x176c <uart_init+0x118>
    1760:	e2 ec       	ldi	r30, 0xC2	; 194
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	8f 7c       	andi	r24, 0xCF	; 207
    1768:	80 83       	st	Z, r24
    176a:	09 c0       	rjmp	.+18     	; 0x177e <uart_init+0x12a>
    176c:	65 e0       	ldi	r22, 0x05	; 5
    176e:	82 ec       	ldi	r24, 0xC2	; 194
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	26 d8       	rcall	.-4020   	; 0x7c0 <setBit>
    1774:	41 2f       	mov	r20, r17
    1776:	64 e0       	ldi	r22, 0x04	; 4
    1778:	82 ec       	ldi	r24, 0xC2	; 194
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	09 d8       	rcall	.-4078   	; 0x790 <updateBit>
    177e:	8f 81       	ldd	r24, Y+7	; 0x07
    1780:	88 23       	and	r24, r24
    1782:	51 f0       	breq	.+20     	; 0x1798 <uart_init+0x144>
    1784:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <u8_rx0LastProcessedIndex>
    1788:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <u8_rx0LastReceivedIndex>
    178c:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <b_rx0Available>
    1790:	67 e0       	ldi	r22, 0x07	; 7
    1792:	81 ec       	ldi	r24, 0xC1	; 193
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	14 d8       	rcall	.-4056   	; 0x7c0 <setBit>
    1798:	88 85       	ldd	r24, Y+8	; 0x08
    179a:	88 23       	and	r24, r24
    179c:	61 f0       	breq	.+24     	; 0x17b6 <uart_init+0x162>
    179e:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8_tx0LastRequestedIndex>
    17a2:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <u8_tx0LastTransmittedIndex>
    17a6:	66 e0       	ldi	r22, 0x06	; 6
    17a8:	81 ec       	ldi	r24, 0xC1	; 193
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	09 d8       	rcall	.-4078   	; 0x7c0 <setBit>
    17ae:	65 e0       	ldi	r22, 0x05	; 5
    17b0:	81 ec       	ldi	r24, 0xC1	; 193
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	05 d8       	rcall	.-4086   	; 0x7c0 <setBit>
    17b6:	2b 96       	adiw	r28, 0x0b	; 11
    17b8:	0f b6       	in	r0, 0x3f	; 63
    17ba:	f8 94       	cli
    17bc:	de bf       	out	0x3e, r29	; 62
    17be:	0f be       	out	0x3f, r0	; 63
    17c0:	cd bf       	out	0x3d, r28	; 61
    17c2:	df 91       	pop	r29
    17c4:	cf 91       	pop	r28
    17c6:	1f 91       	pop	r17
    17c8:	0f 91       	pop	r16
    17ca:	08 95       	ret

000017cc <uart_start>:
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	2a 97       	sbiw	r28, 0x0a	; 10
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	6f 83       	std	Y+7, r22	; 0x07
    17e6:	01 11       	cpse	r16, r1
    17e8:	0c c0       	rjmp	.+24     	; 0x1802 <uart_start+0x36>
    17ea:	45 2f       	mov	r20, r21
    17ec:	64 e0       	ldi	r22, 0x04	; 4
    17ee:	81 ec       	ldi	r24, 0xC1	; 193
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 c8 03 	call	0x790	; 0x790 <updateBit>
    17f6:	4f 81       	ldd	r20, Y+7	; 0x07
    17f8:	63 e0       	ldi	r22, 0x03	; 3
    17fa:	81 ec       	ldi	r24, 0xC1	; 193
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 c8 03 	call	0x790	; 0x790 <updateBit>
    1802:	2a 96       	adiw	r28, 0x0a	; 10
    1804:	0f b6       	in	r0, 0x3f	; 63
    1806:	f8 94       	cli
    1808:	de bf       	out	0x3e, r29	; 62
    180a:	0f be       	out	0x3f, r0	; 63
    180c:	cd bf       	out	0x3d, r28	; 61
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	1f 91       	pop	r17
    1814:	0f 91       	pop	r16
    1816:	08 95       	ret

00001818 <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    1818:	ef 92       	push	r14
    181a:	ff 92       	push	r15
    181c:	0f 93       	push	r16
    181e:	1f 93       	push	r17
    1820:	cf 93       	push	r28
    1822:	df 93       	push	r29
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	2a 97       	sbiw	r28, 0x0a	; 10
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	09 83       	std	Y+1, r16	; 0x01
    1836:	1a 83       	std	Y+2, r17	; 0x02
    1838:	2b 83       	std	Y+3, r18	; 0x03
    183a:	3c 83       	std	Y+4, r19	; 0x04
    183c:	4d 83       	std	Y+5, r20	; 0x05
    183e:	5e 83       	std	Y+6, r21	; 0x06
    1840:	6f 83       	std	Y+7, r22	; 0x07
    1842:	78 87       	std	Y+8, r23	; 0x08
    1844:	89 87       	std	Y+9, r24	; 0x09
    1846:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    1848:	01 11       	cpse	r16, r1
    184a:	42 c0       	rjmp	.+132    	; 0x18d0 <uart_transmit+0xb8>
	{
		case UART0:
		#ifdef USING_UART0
		#ifdef UART0_INTERRUPT_MODE
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    184c:	00 ec       	ldi	r16, 0xC0	; 192
    184e:	10 e0       	ldi	r17, 0x00	; 0
    1850:	f8 01       	movw	r30, r16
    1852:	80 81       	ld	r24, Z
    1854:	65 e0       	ldi	r22, 0x05	; 5
    1856:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <checkBit>
    185a:	88 23       	and	r24, r24
    185c:	c9 f3       	breq	.-14     	; 0x1850 <uart_transmit+0x38>
			au16_tx0Buffer[u8_tx0LastRequestedIndex] = u16_data;
    185e:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <u8_tx0LastRequestedIndex>
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	ee 0f       	add	r30, r30
    1866:	ff 1f       	adc	r31, r31
    1868:	e5 5a       	subi	r30, 0xA5	; 165
    186a:	fe 4f       	sbci	r31, 0xFE	; 254
    186c:	f1 82       	std	Z+1, r15	; 0x01
    186e:	e0 82       	st	Z, r14
			if (u8_tx0LastRequestedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1870:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u8_tx0LastRequestedIndex>
    1874:	89 30       	cpi	r24, 0x09	; 9
    1876:	30 f4       	brcc	.+12     	; 0x1884 <uart_transmit+0x6c>
				u8_tx0LastRequestedIndex++;
    1878:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <u8_tx0LastRequestedIndex>
    187c:	8f 5f       	subi	r24, 0xFF	; 255
    187e:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <u8_tx0LastRequestedIndex>
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <uart_transmit+0x70>
			else
				u8_tx0LastRequestedIndex = 0;
    1884:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <u8_tx0LastRequestedIndex>
			if (checkBit(UCSR0A, UDRE0) == SET)
    1888:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    188c:	65 e0       	ldi	r22, 0x05	; 5
    188e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <checkBit>
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	e9 f4       	brne	.+58     	; 0x18d0 <uart_transmit+0xb8>
			{
				if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1896:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8_tx0LastTransmittedIndex>
    189a:	89 30       	cpi	r24, 0x09	; 9
    189c:	30 f4       	brcc	.+12     	; 0x18aa <uart_transmit+0x92>
					u8_tx0LastTransmittedIndex++;
    189e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <u8_tx0LastTransmittedIndex>
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <u8_tx0LastTransmittedIndex>
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <uart_transmit+0x96>
				else
					u8_tx0LastTransmittedIndex = 0;
    18aa:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <u8_tx0LastTransmittedIndex>
				setBit(&UCSR0B, UDRIE0);
    18ae:	65 e0       	ldi	r22, 0x05	; 5
    18b0:	81 ec       	ldi	r24, 0xC1	; 193
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <setBit>
				if (s_uart.frameSize == _9BIT)
    18b8:	88 85       	ldd	r24, Y+8	; 0x08
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	39 f4       	brne	.+14     	; 0x18cc <uart_transmit+0xb4>
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
    18be:	e1 ec       	ldi	r30, 0xC1	; 193
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	9f 2d       	mov	r25, r15
    18c6:	91 70       	andi	r25, 0x01	; 1
    18c8:	89 2b       	or	r24, r25
    18ca:	80 83       	st	Z, r24
				UDR0 = (u8) u16_data;
    18cc:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    18d0:	2a 96       	adiw	r28, 0x0a	; 10
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	08 95       	ret

000018ea <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    18ea:	1f 92       	push	r1
    18ec:	0f 92       	push	r0
    18ee:	0f b6       	in	r0, 0x3f	; 63
    18f0:	0f 92       	push	r0
    18f2:	11 24       	eor	r1, r1
    18f4:	0b b6       	in	r0, 0x3b	; 59
    18f6:	0f 92       	push	r0
    18f8:	2f 93       	push	r18
    18fa:	3f 93       	push	r19
    18fc:	4f 93       	push	r20
    18fe:	5f 93       	push	r21
    1900:	6f 93       	push	r22
    1902:	7f 93       	push	r23
    1904:	8f 93       	push	r24
    1906:	9f 93       	push	r25
    1908:	af 93       	push	r26
    190a:	bf 93       	push	r27
    190c:	ef 93       	push	r30
    190e:	ff 93       	push	r31
	p_wdgCallback();
    1910:	e0 91 6f 01 	lds	r30, 0x016F	; 0x80016f <p_wdgCallback>
    1914:	f0 91 70 01 	lds	r31, 0x0170	; 0x800170 <p_wdgCallback+0x1>
    1918:	09 95       	icall
}
    191a:	ff 91       	pop	r31
    191c:	ef 91       	pop	r30
    191e:	bf 91       	pop	r27
    1920:	af 91       	pop	r26
    1922:	9f 91       	pop	r25
    1924:	8f 91       	pop	r24
    1926:	7f 91       	pop	r23
    1928:	6f 91       	pop	r22
    192a:	5f 91       	pop	r21
    192c:	4f 91       	pop	r20
    192e:	3f 91       	pop	r19
    1930:	2f 91       	pop	r18
    1932:	0f 90       	pop	r0
    1934:	0b be       	out	0x3b, r0	; 59
    1936:	0f 90       	pop	r0
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	0f 90       	pop	r0
    193c:	1f 90       	pop	r1
    193e:	18 95       	reti

00001940 <writeReg>:
	u8 u8_dataIn[1];

	i2c_transmit(41, u8_dataOut, 1);
	i2c_receive(41, u8_dataIn, 1);
	return u8_dataIn[0] == 0xee;
}
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	00 d0       	rcall	.+0      	; 0x1946 <writeReg+0x6>
    1946:	cd b7       	in	r28, 0x3d	; 61
    1948:	de b7       	in	r29, 0x3e	; 62
    194a:	89 83       	std	Y+1, r24	; 0x01
    194c:	6a 83       	std	Y+2, r22	; 0x02
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	be 01       	movw	r22, r28
    1952:	6f 5f       	subi	r22, 0xFF	; 255
    1954:	7f 4f       	sbci	r23, 0xFF	; 255
    1956:	89 e2       	ldi	r24, 0x29	; 41
    1958:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	be 01       	movw	r22, r28
    1960:	6e 5f       	subi	r22, 0xFE	; 254
    1962:	7f 4f       	sbci	r23, 0xFF	; 255
    1964:	89 e2       	ldi	r24, 0x29	; 41
    1966:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	08 95       	ret

00001974 <writeReg16Bit>:
    1974:	cf 93       	push	r28
    1976:	df 93       	push	r29
    1978:	00 d0       	rcall	.+0      	; 0x197a <writeReg16Bit+0x6>
    197a:	1f 92       	push	r1
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	8b 83       	std	Y+3, r24	; 0x03
    1982:	87 2f       	mov	r24, r23
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	21 e0       	ldi	r18, 0x01	; 1
    1988:	89 2b       	or	r24, r25
    198a:	09 f4       	brne	.+2      	; 0x198e <writeReg16Bit+0x1a>
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	29 83       	std	Y+1, r18	; 0x01
    1990:	6a 83       	std	Y+2, r22	; 0x02
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	be 01       	movw	r22, r28
    1996:	6d 5f       	subi	r22, 0xFD	; 253
    1998:	7f 4f       	sbci	r23, 0xFF	; 255
    199a:	89 e2       	ldi	r24, 0x29	; 41
    199c:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    19a0:	42 e0       	ldi	r20, 0x02	; 2
    19a2:	be 01       	movw	r22, r28
    19a4:	6f 5f       	subi	r22, 0xFF	; 255
    19a6:	7f 4f       	sbci	r23, 0xFF	; 255
    19a8:	89 e2       	ldi	r24, 0x29	; 41
    19aa:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	df 91       	pop	r29
    19b6:	cf 91       	pop	r28
    19b8:	08 95       	ret

000019ba <writeReg32Bit>:
    19ba:	0f 93       	push	r16
    19bc:	1f 93       	push	r17
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	00 d0       	rcall	.+0      	; 0x19c4 <writeReg32Bit+0xa>
    19c4:	00 d0       	rcall	.+0      	; 0x19c6 <writeReg32Bit+0xc>
    19c6:	1f 92       	push	r1
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
    19cc:	8d 83       	std	Y+5, r24	; 0x05
    19ce:	07 2f       	mov	r16, r23
    19d0:	11 27       	eor	r17, r17
    19d2:	22 27       	eor	r18, r18
    19d4:	33 27       	eor	r19, r19
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	01 2b       	or	r16, r17
    19da:	02 2b       	or	r16, r18
    19dc:	03 2b       	or	r16, r19
    19de:	09 f4       	brne	.+2      	; 0x19e2 <writeReg32Bit+0x28>
    19e0:	80 e0       	ldi	r24, 0x00	; 0
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	cb 01       	movw	r24, r22
    19e6:	aa 27       	eor	r26, r26
    19e8:	bb 27       	eor	r27, r27
    19ea:	21 e0       	ldi	r18, 0x01	; 1
    19ec:	89 2b       	or	r24, r25
    19ee:	8a 2b       	or	r24, r26
    19f0:	8b 2b       	or	r24, r27
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <writeReg32Bit+0x3c>
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	2a 83       	std	Y+2, r18	; 0x02
    19f8:	bb 27       	eor	r27, r27
    19fa:	a7 2f       	mov	r26, r23
    19fc:	96 2f       	mov	r25, r22
    19fe:	85 2f       	mov	r24, r21
    1a00:	21 e0       	ldi	r18, 0x01	; 1
    1a02:	89 2b       	or	r24, r25
    1a04:	8a 2b       	or	r24, r26
    1a06:	8b 2b       	or	r24, r27
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <writeReg32Bit+0x52>
    1a0a:	20 e0       	ldi	r18, 0x00	; 0
    1a0c:	2b 83       	std	Y+3, r18	; 0x03
    1a0e:	4c 83       	std	Y+4, r20	; 0x04
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	be 01       	movw	r22, r28
    1a14:	6b 5f       	subi	r22, 0xFB	; 251
    1a16:	7f 4f       	sbci	r23, 0xFF	; 255
    1a18:	89 e2       	ldi	r24, 0x29	; 41
    1a1a:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    1a1e:	44 e0       	ldi	r20, 0x04	; 4
    1a20:	be 01       	movw	r22, r28
    1a22:	6f 5f       	subi	r22, 0xFF	; 255
    1a24:	7f 4f       	sbci	r23, 0xFF	; 255
    1a26:	89 e2       	ldi	r24, 0x29	; 41
    1a28:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    1a2c:	0f 90       	pop	r0
    1a2e:	0f 90       	pop	r0
    1a30:	0f 90       	pop	r0
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	08 95       	ret

00001a40 <readReg>:
    1a40:	cf 93       	push	r28
    1a42:	df 93       	push	r29
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <readReg+0x6>
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	8a 83       	std	Y+2, r24	; 0x02
    1a4c:	41 e0       	ldi	r20, 0x01	; 1
    1a4e:	be 01       	movw	r22, r28
    1a50:	6e 5f       	subi	r22, 0xFE	; 254
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	89 e2       	ldi	r24, 0x29	; 41
    1a56:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	be 01       	movw	r22, r28
    1a5e:	6f 5f       	subi	r22, 0xFF	; 255
    1a60:	7f 4f       	sbci	r23, 0xFF	; 255
    1a62:	89 e2       	ldi	r24, 0x29	; 41
    1a64:	0e 94 35 03 	call	0x66a	; 0x66a <i2c_receive>
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	df 91       	pop	r29
    1a70:	cf 91       	pop	r28
    1a72:	08 95       	ret

00001a74 <readReg16Bit>:
    1a74:	cf 93       	push	r28
    1a76:	df 93       	push	r29
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <readReg16Bit+0x6>
    1a7a:	1f 92       	push	r1
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	8b 83       	std	Y+3, r24	; 0x03
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	be 01       	movw	r22, r28
    1a86:	6d 5f       	subi	r22, 0xFD	; 253
    1a88:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8a:	89 e2       	ldi	r24, 0x29	; 41
    1a8c:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    1a90:	42 e0       	ldi	r20, 0x02	; 2
    1a92:	be 01       	movw	r22, r28
    1a94:	6f 5f       	subi	r22, 0xFF	; 255
    1a96:	7f 4f       	sbci	r23, 0xFF	; 255
    1a98:	89 e2       	ldi	r24, 0x29	; 41
    1a9a:	0e 94 35 03 	call	0x66a	; 0x66a <i2c_receive>
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	98 2f       	mov	r25, r24
    1aa4:	88 27       	eor	r24, r24
    1aa6:	2a 81       	ldd	r18, Y+2	; 0x02
    1aa8:	82 2b       	or	r24, r18
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	08 95       	ret

00001ab6 <writeMulti>:
    1ab6:	ff 92       	push	r15
    1ab8:	0f 93       	push	r16
    1aba:	1f 93       	push	r17
    1abc:	cf 93       	push	r28
    1abe:	df 93       	push	r29
    1ac0:	1f 92       	push	r1
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	8b 01       	movw	r16, r22
    1aca:	f4 2e       	mov	r15, r20
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	be 01       	movw	r22, r28
    1ad0:	6f 5f       	subi	r22, 0xFF	; 255
    1ad2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad4:	89 e2       	ldi	r24, 0x29	; 41
    1ad6:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    1ada:	4f 2d       	mov	r20, r15
    1adc:	b8 01       	movw	r22, r16
    1ade:	89 e2       	ldi	r24, 0x29	; 41
    1ae0:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	1f 91       	pop	r17
    1aec:	0f 91       	pop	r16
    1aee:	ff 90       	pop	r15
    1af0:	08 95       	ret

00001af2 <readMulti>:
    1af2:	ff 92       	push	r15
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	1f 92       	push	r1
    1afe:	cd b7       	in	r28, 0x3d	; 61
    1b00:	de b7       	in	r29, 0x3e	; 62
    1b02:	89 83       	std	Y+1, r24	; 0x01
    1b04:	8b 01       	movw	r16, r22
    1b06:	f4 2e       	mov	r15, r20
    1b08:	41 e0       	ldi	r20, 0x01	; 1
    1b0a:	be 01       	movw	r22, r28
    1b0c:	6f 5f       	subi	r22, 0xFF	; 255
    1b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b10:	89 e2       	ldi	r24, 0x29	; 41
    1b12:	0e 94 b4 02 	call	0x568	; 0x568 <i2c_transmit>
    1b16:	4f 2d       	mov	r20, r15
    1b18:	b8 01       	movw	r22, r16
    1b1a:	89 e2       	ldi	r24, 0x29	; 41
    1b1c:	0e 94 35 03 	call	0x66a	; 0x66a <i2c_receive>
    1b20:	0f 90       	pop	r0
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	1f 91       	pop	r17
    1b28:	0f 91       	pop	r16
    1b2a:	ff 90       	pop	r15
    1b2c:	08 95       	ret

00001b2e <getVcselPulsePeriod>:
    1b2e:	81 11       	cpse	r24, r1
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <getVcselPulsePeriod+0xe>
    1b32:	80 e5       	ldi	r24, 0x50	; 80
    1b34:	85 df       	rcall	.-246    	; 0x1a40 <readReg>
    1b36:	8f 5f       	subi	r24, 0xFF	; 255
    1b38:	88 0f       	add	r24, r24
    1b3a:	08 95       	ret
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	29 f4       	brne	.+10     	; 0x1b4a <getVcselPulsePeriod+0x1c>
    1b40:	80 e7       	ldi	r24, 0x70	; 112
    1b42:	7e df       	rcall	.-260    	; 0x1a40 <readReg>
    1b44:	8f 5f       	subi	r24, 0xFF	; 255
    1b46:	88 0f       	add	r24, r24
    1b48:	08 95       	ret
    1b4a:	8f ef       	ldi	r24, 0xFF	; 255
    1b4c:	08 95       	ret

00001b4e <startContinuous>:
    1b4e:	cf 92       	push	r12
    1b50:	df 92       	push	r13
    1b52:	ef 92       	push	r14
    1b54:	ff 92       	push	r15
    1b56:	6b 01       	movw	r12, r22
    1b58:	7c 01       	movw	r14, r24
    1b5a:	61 e0       	ldi	r22, 0x01	; 1
    1b5c:	80 e8       	ldi	r24, 0x80	; 128
    1b5e:	f0 de       	rcall	.-544    	; 0x1940 <writeReg>
    1b60:	61 e0       	ldi	r22, 0x01	; 1
    1b62:	8f ef       	ldi	r24, 0xFF	; 255
    1b64:	ed de       	rcall	.-550    	; 0x1940 <writeReg>
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	ea de       	rcall	.-556    	; 0x1940 <writeReg>
    1b6c:	60 91 74 01 	lds	r22, 0x0174	; 0x800174 <stop_variable>
    1b70:	81 e9       	ldi	r24, 0x91	; 145
    1b72:	e6 de       	rcall	.-564    	; 0x1940 <writeReg>
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	e3 de       	rcall	.-570    	; 0x1940 <writeReg>
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	8f ef       	ldi	r24, 0xFF	; 255
    1b7e:	e0 de       	rcall	.-576    	; 0x1940 <writeReg>
    1b80:	60 e0       	ldi	r22, 0x00	; 0
    1b82:	80 e8       	ldi	r24, 0x80	; 128
    1b84:	dd de       	rcall	.-582    	; 0x1940 <writeReg>
    1b86:	c1 14       	cp	r12, r1
    1b88:	d1 04       	cpc	r13, r1
    1b8a:	e1 04       	cpc	r14, r1
    1b8c:	f1 04       	cpc	r15, r1
    1b8e:	91 f0       	breq	.+36     	; 0x1bb4 <startContinuous+0x66>
    1b90:	88 ef       	ldi	r24, 0xF8	; 248
    1b92:	70 df       	rcall	.-288    	; 0x1a74 <readReg16Bit>
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	31 f0       	breq	.+12     	; 0x1ba4 <startContinuous+0x56>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	a7 01       	movw	r20, r14
    1b9c:	96 01       	movw	r18, r12
    1b9e:	7d d5       	rcall	.+2810   	; 0x269a <__muluhisi3>
    1ba0:	6b 01       	movw	r12, r22
    1ba2:	7c 01       	movw	r14, r24
    1ba4:	b7 01       	movw	r22, r14
    1ba6:	a6 01       	movw	r20, r12
    1ba8:	84 e0       	ldi	r24, 0x04	; 4
    1baa:	07 df       	rcall	.-498    	; 0x19ba <writeReg32Bit>
    1bac:	64 e0       	ldi	r22, 0x04	; 4
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	c7 de       	rcall	.-626    	; 0x1940 <writeReg>
    1bb2:	03 c0       	rjmp	.+6      	; 0x1bba <startContinuous+0x6c>
    1bb4:	62 e0       	ldi	r22, 0x02	; 2
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	c3 de       	rcall	.-634    	; 0x1940 <writeReg>
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	08 95       	ret

00001bc4 <readRangeContinuousMillimeters>:
    1bc4:	cf 93       	push	r28
    1bc6:	df 93       	push	r29
    1bc8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    1bcc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    1bd0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <timeout_start_ms+0x1>
    1bd4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <timeout_start_ms>
    1bd8:	c0 e0       	ldi	r28, 0x00	; 0
    1bda:	d1 e0       	ldi	r29, 0x01	; 1
    1bdc:	17 c0       	rjmp	.+46     	; 0x1c0c <readRangeContinuousMillimeters+0x48>
    1bde:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <io_timeout>
    1be2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <io_timeout+0x1>
    1be6:	00 97       	sbiw	r24, 0x00	; 0
    1be8:	89 f0       	breq	.+34     	; 0x1c0c <readRangeContinuousMillimeters+0x48>
    1bea:	28 81       	ld	r18, Y
    1bec:	39 81       	ldd	r19, Y+1	; 0x01
    1bee:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <timeout_start_ms>
    1bf2:	50 91 73 01 	lds	r21, 0x0173	; 0x800173 <timeout_start_ms+0x1>
    1bf6:	24 1b       	sub	r18, r20
    1bf8:	35 0b       	sbc	r19, r21
    1bfa:	82 17       	cp	r24, r18
    1bfc:	93 07       	cpc	r25, r19
    1bfe:	30 f4       	brcc	.+12     	; 0x1c0c <readRangeContinuousMillimeters+0x48>
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <did_timeout>
    1c06:	8f ef       	ldi	r24, 0xFF	; 255
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
    1c0a:	0d c0       	rjmp	.+26     	; 0x1c26 <readRangeContinuousMillimeters+0x62>
    1c0c:	83 e1       	ldi	r24, 0x13	; 19
    1c0e:	18 df       	rcall	.-464    	; 0x1a40 <readReg>
    1c10:	87 70       	andi	r24, 0x07	; 7
    1c12:	29 f3       	breq	.-54     	; 0x1bde <readRangeContinuousMillimeters+0x1a>
    1c14:	8e e1       	ldi	r24, 0x1E	; 30
    1c16:	2e df       	rcall	.-420    	; 0x1a74 <readReg16Bit>
    1c18:	d8 2f       	mov	r29, r24
    1c1a:	c9 2f       	mov	r28, r25
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	8b e0       	ldi	r24, 0x0B	; 11
    1c20:	8f de       	rcall	.-738    	; 0x1940 <writeReg>
    1c22:	8d 2f       	mov	r24, r29
    1c24:	9c 2f       	mov	r25, r28
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	08 95       	ret

00001c2c <getSpadInfo>:
    1c2c:	ef 92       	push	r14
    1c2e:	ff 92       	push	r15
    1c30:	0f 93       	push	r16
    1c32:	1f 93       	push	r17
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	7c 01       	movw	r14, r24
    1c3a:	8b 01       	movw	r16, r22
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	80 e8       	ldi	r24, 0x80	; 128
    1c40:	7f de       	rcall	.-770    	; 0x1940 <writeReg>
    1c42:	61 e0       	ldi	r22, 0x01	; 1
    1c44:	8f ef       	ldi	r24, 0xFF	; 255
    1c46:	7c de       	rcall	.-776    	; 0x1940 <writeReg>
    1c48:	60 e0       	ldi	r22, 0x00	; 0
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	79 de       	rcall	.-782    	; 0x1940 <writeReg>
    1c4e:	66 e0       	ldi	r22, 0x06	; 6
    1c50:	8f ef       	ldi	r24, 0xFF	; 255
    1c52:	76 de       	rcall	.-788    	; 0x1940 <writeReg>
    1c54:	83 e8       	ldi	r24, 0x83	; 131
    1c56:	f4 de       	rcall	.-536    	; 0x1a40 <readReg>
    1c58:	68 2f       	mov	r22, r24
    1c5a:	64 60       	ori	r22, 0x04	; 4
    1c5c:	83 e8       	ldi	r24, 0x83	; 131
    1c5e:	70 de       	rcall	.-800    	; 0x1940 <writeReg>
    1c60:	67 e0       	ldi	r22, 0x07	; 7
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	6d de       	rcall	.-806    	; 0x1940 <writeReg>
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	81 e8       	ldi	r24, 0x81	; 129
    1c6a:	6a de       	rcall	.-812    	; 0x1940 <writeReg>
    1c6c:	61 e0       	ldi	r22, 0x01	; 1
    1c6e:	80 e8       	ldi	r24, 0x80	; 128
    1c70:	67 de       	rcall	.-818    	; 0x1940 <writeReg>
    1c72:	6b e6       	ldi	r22, 0x6B	; 107
    1c74:	84 e9       	ldi	r24, 0x94	; 148
    1c76:	64 de       	rcall	.-824    	; 0x1940 <writeReg>
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	83 e8       	ldi	r24, 0x83	; 131
    1c7c:	61 de       	rcall	.-830    	; 0x1940 <writeReg>
    1c7e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    1c82:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    1c86:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <timeout_start_ms+0x1>
    1c8a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <timeout_start_ms>
    1c8e:	c0 e0       	ldi	r28, 0x00	; 0
    1c90:	d1 e0       	ldi	r29, 0x01	; 1
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <getSpadInfo+0x8a>
    1c94:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <io_timeout>
    1c98:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <io_timeout+0x1>
    1c9c:	00 97       	sbiw	r24, 0x00	; 0
    1c9e:	59 f0       	breq	.+22     	; 0x1cb6 <getSpadInfo+0x8a>
    1ca0:	28 81       	ld	r18, Y
    1ca2:	39 81       	ldd	r19, Y+1	; 0x01
    1ca4:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <timeout_start_ms>
    1ca8:	50 91 73 01 	lds	r21, 0x0173	; 0x800173 <timeout_start_ms+0x1>
    1cac:	24 1b       	sub	r18, r20
    1cae:	35 0b       	sbc	r19, r21
    1cb0:	82 17       	cp	r24, r18
    1cb2:	93 07       	cpc	r25, r19
    1cb4:	60 f1       	brcs	.+88     	; 0x1d0e <getSpadInfo+0xe2>
    1cb6:	83 e8       	ldi	r24, 0x83	; 131
    1cb8:	c3 de       	rcall	.-634    	; 0x1a40 <readReg>
    1cba:	88 23       	and	r24, r24
    1cbc:	59 f3       	breq	.-42     	; 0x1c94 <getSpadInfo+0x68>
    1cbe:	61 e0       	ldi	r22, 0x01	; 1
    1cc0:	83 e8       	ldi	r24, 0x83	; 131
    1cc2:	3e de       	rcall	.-900    	; 0x1940 <writeReg>
    1cc4:	82 e9       	ldi	r24, 0x92	; 146
    1cc6:	bc de       	rcall	.-648    	; 0x1a40 <readReg>
    1cc8:	98 2f       	mov	r25, r24
    1cca:	9f 77       	andi	r25, 0x7F	; 127
    1ccc:	f7 01       	movw	r30, r14
    1cce:	90 83       	st	Z, r25
    1cd0:	88 1f       	adc	r24, r24
    1cd2:	88 27       	eor	r24, r24
    1cd4:	88 1f       	adc	r24, r24
    1cd6:	f8 01       	movw	r30, r16
    1cd8:	80 83       	st	Z, r24
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	81 e8       	ldi	r24, 0x81	; 129
    1cde:	30 de       	rcall	.-928    	; 0x1940 <writeReg>
    1ce0:	66 e0       	ldi	r22, 0x06	; 6
    1ce2:	8f ef       	ldi	r24, 0xFF	; 255
    1ce4:	2d de       	rcall	.-934    	; 0x1940 <writeReg>
    1ce6:	83 e8       	ldi	r24, 0x83	; 131
    1ce8:	ab de       	rcall	.-682    	; 0x1a40 <readReg>
    1cea:	68 2f       	mov	r22, r24
    1cec:	6b 7f       	andi	r22, 0xFB	; 251
    1cee:	83 e8       	ldi	r24, 0x83	; 131
    1cf0:	27 de       	rcall	.-946    	; 0x1940 <writeReg>
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	24 de       	rcall	.-952    	; 0x1940 <writeReg>
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	21 de       	rcall	.-958    	; 0x1940 <writeReg>
    1cfe:	60 e0       	ldi	r22, 0x00	; 0
    1d00:	8f ef       	ldi	r24, 0xFF	; 255
    1d02:	1e de       	rcall	.-964    	; 0x1940 <writeReg>
    1d04:	60 e0       	ldi	r22, 0x00	; 0
    1d06:	80 e8       	ldi	r24, 0x80	; 128
    1d08:	1b de       	rcall	.-970    	; 0x1940 <writeReg>
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	01 c0       	rjmp	.+2      	; 0x1d10 <getSpadInfo+0xe4>
    1d0e:	80 e0       	ldi	r24, 0x00	; 0
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	08 95       	ret

00001d1e <getSequenceStepEnables>:
    1d1e:	cf 93       	push	r28
    1d20:	df 93       	push	r29
    1d22:	ec 01       	movw	r28, r24
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	8c de       	rcall	.-744    	; 0x1a40 <readReg>
    1d28:	84 fb       	bst	r24, 4
    1d2a:	99 27       	eor	r25, r25
    1d2c:	90 f9       	bld	r25, 0
    1d2e:	98 83       	st	Y, r25
    1d30:	83 fb       	bst	r24, 3
    1d32:	99 27       	eor	r25, r25
    1d34:	90 f9       	bld	r25, 0
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	82 fb       	bst	r24, 2
    1d3a:	99 27       	eor	r25, r25
    1d3c:	90 f9       	bld	r25, 0
    1d3e:	99 83       	std	Y+1, r25	; 0x01
    1d40:	86 fb       	bst	r24, 6
    1d42:	99 27       	eor	r25, r25
    1d44:	90 f9       	bld	r25, 0
    1d46:	9b 83       	std	Y+3, r25	; 0x03
    1d48:	88 1f       	adc	r24, r24
    1d4a:	88 27       	eor	r24, r24
    1d4c:	88 1f       	adc	r24, r24
    1d4e:	8c 83       	std	Y+4, r24	; 0x04
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	08 95       	ret

00001d56 <decodeTimeout>:
    1d56:	9c 01       	movw	r18, r24
    1d58:	33 27       	eor	r19, r19
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <decodeTimeout+0xc>
    1d5e:	44 0f       	add	r20, r20
    1d60:	55 1f       	adc	r21, r21
    1d62:	9a 95       	dec	r25
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <decodeTimeout+0x8>
    1d66:	ca 01       	movw	r24, r20
    1d68:	01 96       	adiw	r24, 0x01	; 1
    1d6a:	08 95       	ret

00001d6c <encodeTimeout>:
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	19 f1       	breq	.+70     	; 0x1dba <encodeTimeout+0x4e>
    1d74:	ac 01       	movw	r20, r24
    1d76:	41 50       	subi	r20, 0x01	; 1
    1d78:	51 09       	sbc	r21, r1
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	db 01       	movw	r26, r22
    1d80:	ca 01       	movw	r24, r20
    1d82:	88 27       	eor	r24, r24
    1d84:	89 2b       	or	r24, r25
    1d86:	8a 2b       	or	r24, r26
    1d88:	8b 2b       	or	r24, r27
    1d8a:	79 f0       	breq	.+30     	; 0x1daa <encodeTimeout+0x3e>
    1d8c:	80 e0       	ldi	r24, 0x00	; 0
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	76 95       	lsr	r23
    1d92:	67 95       	ror	r22
    1d94:	57 95       	ror	r21
    1d96:	47 95       	ror	r20
    1d98:	01 96       	adiw	r24, 0x01	; 1
    1d9a:	8a 01       	movw	r16, r20
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	00 27       	eor	r16, r16
    1da0:	01 2b       	or	r16, r17
    1da2:	02 2b       	or	r16, r18
    1da4:	03 2b       	or	r16, r19
    1da6:	a1 f7       	brne	.-24     	; 0x1d90 <encodeTimeout+0x24>
    1da8:	02 c0       	rjmp	.+4      	; 0x1dae <encodeTimeout+0x42>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	98 2f       	mov	r25, r24
    1db0:	88 27       	eor	r24, r24
    1db2:	55 27       	eor	r21, r21
    1db4:	84 2b       	or	r24, r20
    1db6:	95 2b       	or	r25, r21
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <encodeTimeout+0x52>
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	1f 91       	pop	r17
    1dc0:	0f 91       	pop	r16
    1dc2:	08 95       	ret

00001dc4 <timeoutMclksToMicroseconds>:
    1dc4:	4f 92       	push	r4
    1dc6:	5f 92       	push	r5
    1dc8:	6f 92       	push	r6
    1dca:	7f 92       	push	r7
    1dcc:	8f 92       	push	r8
    1dce:	9f 92       	push	r9
    1dd0:	af 92       	push	r10
    1dd2:	bf 92       	push	r11
    1dd4:	cf 92       	push	r12
    1dd6:	df 92       	push	r13
    1dd8:	ef 92       	push	r14
    1dda:	ff 92       	push	r15
    1ddc:	3c 01       	movw	r6, r24
    1dde:	a6 2f       	mov	r26, r22
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f e2       	ldi	r19, 0x2F	; 47
    1de6:	4a e3       	ldi	r20, 0x3A	; 58
    1de8:	50 e0       	ldi	r21, 0x00	; 0
    1dea:	57 d4       	rcall	.+2222   	; 0x269a <__muluhisi3>
    1dec:	6b 01       	movw	r12, r22
    1dee:	7c 01       	movw	r14, r24
    1df0:	24 ef       	ldi	r18, 0xF4	; 244
    1df2:	c2 0e       	add	r12, r18
    1df4:	21 e0       	ldi	r18, 0x01	; 1
    1df6:	d2 1e       	adc	r13, r18
    1df8:	e1 1c       	adc	r14, r1
    1dfa:	f1 1c       	adc	r15, r1
    1dfc:	0f 2e       	mov	r0, r31
    1dfe:	f8 ee       	ldi	r31, 0xE8	; 232
    1e00:	8f 2e       	mov	r8, r31
    1e02:	f3 e0       	ldi	r31, 0x03	; 3
    1e04:	9f 2e       	mov	r9, r31
    1e06:	a1 2c       	mov	r10, r1
    1e08:	b1 2c       	mov	r11, r1
    1e0a:	f0 2d       	mov	r31, r0
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	b6 01       	movw	r22, r12
    1e10:	a5 01       	movw	r20, r10
    1e12:	94 01       	movw	r18, r8
    1e14:	08 d4       	rcall	.+2064   	; 0x2626 <__udivmodsi4>
    1e16:	d3 01       	movw	r26, r6
    1e18:	40 d4       	rcall	.+2176   	; 0x269a <__muluhisi3>
    1e1a:	2b 01       	movw	r4, r22
    1e1c:	3c 01       	movw	r6, r24
    1e1e:	c7 01       	movw	r24, r14
    1e20:	b6 01       	movw	r22, r12
    1e22:	20 ed       	ldi	r18, 0xD0	; 208
    1e24:	37 e0       	ldi	r19, 0x07	; 7
    1e26:	40 e0       	ldi	r20, 0x00	; 0
    1e28:	50 e0       	ldi	r21, 0x00	; 0
    1e2a:	fd d3       	rcall	.+2042   	; 0x2626 <__udivmodsi4>
    1e2c:	c3 01       	movw	r24, r6
    1e2e:	b2 01       	movw	r22, r4
    1e30:	62 0f       	add	r22, r18
    1e32:	73 1f       	adc	r23, r19
    1e34:	84 1f       	adc	r24, r20
    1e36:	95 1f       	adc	r25, r21
    1e38:	a5 01       	movw	r20, r10
    1e3a:	94 01       	movw	r18, r8
    1e3c:	f4 d3       	rcall	.+2024   	; 0x2626 <__udivmodsi4>
    1e3e:	ca 01       	movw	r24, r20
    1e40:	b9 01       	movw	r22, r18
    1e42:	ff 90       	pop	r15
    1e44:	ef 90       	pop	r14
    1e46:	df 90       	pop	r13
    1e48:	cf 90       	pop	r12
    1e4a:	bf 90       	pop	r11
    1e4c:	af 90       	pop	r10
    1e4e:	9f 90       	pop	r9
    1e50:	8f 90       	pop	r8
    1e52:	7f 90       	pop	r7
    1e54:	6f 90       	pop	r6
    1e56:	5f 90       	pop	r5
    1e58:	4f 90       	pop	r4
    1e5a:	08 95       	ret

00001e5c <getSequenceStepTimeouts>:
    1e5c:	0f 93       	push	r16
    1e5e:	1f 93       	push	r17
    1e60:	cf 93       	push	r28
    1e62:	df 93       	push	r29
    1e64:	8c 01       	movw	r16, r24
    1e66:	eb 01       	movw	r28, r22
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	61 de       	rcall	.-830    	; 0x1b2e <getVcselPulsePeriod>
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	99 83       	std	Y+1, r25	; 0x01
    1e70:	88 83       	st	Y, r24
    1e72:	86 e4       	ldi	r24, 0x46	; 70
    1e74:	e5 dd       	rcall	.-1078   	; 0x1a40 <readReg>
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	01 96       	adiw	r24, 0x01	; 1
    1e7a:	9d 83       	std	Y+5, r25	; 0x05
    1e7c:	8c 83       	std	Y+4, r24	; 0x04
    1e7e:	68 81       	ld	r22, Y
    1e80:	a1 df       	rcall	.-190    	; 0x1dc4 <timeoutMclksToMicroseconds>
    1e82:	6a 87       	std	Y+10, r22	; 0x0a
    1e84:	7b 87       	std	Y+11, r23	; 0x0b
    1e86:	8c 87       	std	Y+12, r24	; 0x0c
    1e88:	9d 87       	std	Y+13, r25	; 0x0d
    1e8a:	81 e5       	ldi	r24, 0x51	; 81
    1e8c:	f3 dd       	rcall	.-1050   	; 0x1a74 <readReg16Bit>
    1e8e:	63 df       	rcall	.-314    	; 0x1d56 <decodeTimeout>
    1e90:	9f 83       	std	Y+7, r25	; 0x07
    1e92:	8e 83       	std	Y+6, r24	; 0x06
    1e94:	68 81       	ld	r22, Y
    1e96:	96 df       	rcall	.-212    	; 0x1dc4 <timeoutMclksToMicroseconds>
    1e98:	6e 87       	std	Y+14, r22	; 0x0e
    1e9a:	7f 87       	std	Y+15, r23	; 0x0f
    1e9c:	88 8b       	std	Y+16, r24	; 0x10
    1e9e:	99 8b       	std	Y+17, r25	; 0x11
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	45 de       	rcall	.-886    	; 0x1b2e <getVcselPulsePeriod>
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	9b 83       	std	Y+3, r25	; 0x03
    1ea8:	8a 83       	std	Y+2, r24	; 0x02
    1eaa:	81 e7       	ldi	r24, 0x71	; 113
    1eac:	e3 dd       	rcall	.-1082   	; 0x1a74 <readReg16Bit>
    1eae:	53 df       	rcall	.-346    	; 0x1d56 <decodeTimeout>
    1eb0:	99 87       	std	Y+9, r25	; 0x09
    1eb2:	88 87       	std	Y+8, r24	; 0x08
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	23 81       	ldd	r18, Z+3	; 0x03
    1eb8:	22 23       	and	r18, r18
    1eba:	31 f0       	breq	.+12     	; 0x1ec8 <getSequenceStepTimeouts+0x6c>
    1ebc:	2e 81       	ldd	r18, Y+6	; 0x06
    1ebe:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec0:	82 1b       	sub	r24, r18
    1ec2:	93 0b       	sbc	r25, r19
    1ec4:	99 87       	std	Y+9, r25	; 0x09
    1ec6:	88 87       	std	Y+8, r24	; 0x08
    1ec8:	6a 81       	ldd	r22, Y+2	; 0x02
    1eca:	88 85       	ldd	r24, Y+8	; 0x08
    1ecc:	99 85       	ldd	r25, Y+9	; 0x09
    1ece:	7a df       	rcall	.-268    	; 0x1dc4 <timeoutMclksToMicroseconds>
    1ed0:	6a 8b       	std	Y+18, r22	; 0x12
    1ed2:	7b 8b       	std	Y+19, r23	; 0x13
    1ed4:	8c 8b       	std	Y+20, r24	; 0x14
    1ed6:	9d 8b       	std	Y+21, r25	; 0x15
    1ed8:	df 91       	pop	r29
    1eda:	cf 91       	pop	r28
    1edc:	1f 91       	pop	r17
    1ede:	0f 91       	pop	r16
    1ee0:	08 95       	ret

00001ee2 <getMeasurementTimingBudget>:
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	cf 93       	push	r28
    1ee8:	df 93       	push	r29
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	6b 97       	sbiw	r28, 0x1b	; 27
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	de bf       	out	0x3e, r29	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	cd bf       	out	0x3d, r28	; 61
    1efa:	ce 01       	movw	r24, r28
    1efc:	01 96       	adiw	r24, 0x01	; 1
    1efe:	0f df       	rcall	.-482    	; 0x1d1e <getSequenceStepEnables>
    1f00:	be 01       	movw	r22, r28
    1f02:	6a 5f       	subi	r22, 0xFA	; 250
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	ce 01       	movw	r24, r28
    1f08:	01 96       	adiw	r24, 0x01	; 1
    1f0a:	a8 df       	rcall	.-176    	; 0x1e5c <getSequenceStepTimeouts>
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	88 23       	and	r24, r24
    1f10:	59 f0       	breq	.+22     	; 0x1f28 <getMeasurementTimingBudget+0x46>
    1f12:	88 89       	ldd	r24, Y+16	; 0x10
    1f14:	99 89       	ldd	r25, Y+17	; 0x11
    1f16:	aa 89       	ldd	r26, Y+18	; 0x12
    1f18:	bb 89       	ldd	r27, Y+19	; 0x13
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	6c 57       	subi	r22, 0x7C	; 124
    1f20:	72 4f       	sbci	r23, 0xF2	; 242
    1f22:	8f 4f       	sbci	r24, 0xFF	; 255
    1f24:	9f 4f       	sbci	r25, 0xFF	; 255
    1f26:	04 c0       	rjmp	.+8      	; 0x1f30 <getMeasurementTimingBudget+0x4e>
    1f28:	66 e3       	ldi	r22, 0x36	; 54
    1f2a:	7b e0       	ldi	r23, 0x0B	; 11
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	2b 81       	ldd	r18, Y+3	; 0x03
    1f32:	22 23       	and	r18, r18
    1f34:	89 f0       	breq	.+34     	; 0x1f58 <getMeasurementTimingBudget+0x76>
    1f36:	08 89       	ldd	r16, Y+16	; 0x10
    1f38:	19 89       	ldd	r17, Y+17	; 0x11
    1f3a:	2a 89       	ldd	r18, Y+18	; 0x12
    1f3c:	3b 89       	ldd	r19, Y+19	; 0x13
    1f3e:	0e 54       	subi	r16, 0x4E	; 78
    1f40:	1d 4f       	sbci	r17, 0xFD	; 253
    1f42:	2f 4f       	sbci	r18, 0xFF	; 255
    1f44:	3f 4f       	sbci	r19, 0xFF	; 255
    1f46:	00 0f       	add	r16, r16
    1f48:	11 1f       	adc	r17, r17
    1f4a:	22 1f       	adc	r18, r18
    1f4c:	33 1f       	adc	r19, r19
    1f4e:	60 0f       	add	r22, r16
    1f50:	71 1f       	adc	r23, r17
    1f52:	82 1f       	adc	r24, r18
    1f54:	93 1f       	adc	r25, r19
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <getMeasurementTimingBudget+0x94>
    1f58:	2a 81       	ldd	r18, Y+2	; 0x02
    1f5a:	22 23       	and	r18, r18
    1f5c:	61 f0       	breq	.+24     	; 0x1f76 <getMeasurementTimingBudget+0x94>
    1f5e:	08 89       	ldd	r16, Y+16	; 0x10
    1f60:	19 89       	ldd	r17, Y+17	; 0x11
    1f62:	2a 89       	ldd	r18, Y+18	; 0x12
    1f64:	3b 89       	ldd	r19, Y+19	; 0x13
    1f66:	0c 56       	subi	r16, 0x6C	; 108
    1f68:	1d 4f       	sbci	r17, 0xFD	; 253
    1f6a:	2f 4f       	sbci	r18, 0xFF	; 255
    1f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6e:	60 0f       	add	r22, r16
    1f70:	71 1f       	adc	r23, r17
    1f72:	82 1f       	adc	r24, r18
    1f74:	93 1f       	adc	r25, r19
    1f76:	2c 81       	ldd	r18, Y+4	; 0x04
    1f78:	22 23       	and	r18, r18
    1f7a:	61 f0       	breq	.+24     	; 0x1f94 <getMeasurementTimingBudget+0xb2>
    1f7c:	0c 89       	ldd	r16, Y+20	; 0x14
    1f7e:	1d 89       	ldd	r17, Y+21	; 0x15
    1f80:	2e 89       	ldd	r18, Y+22	; 0x16
    1f82:	3f 89       	ldd	r19, Y+23	; 0x17
    1f84:	0c 56       	subi	r16, 0x6C	; 108
    1f86:	1d 4f       	sbci	r17, 0xFD	; 253
    1f88:	2f 4f       	sbci	r18, 0xFF	; 255
    1f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f8c:	60 0f       	add	r22, r16
    1f8e:	71 1f       	adc	r23, r17
    1f90:	82 1f       	adc	r24, r18
    1f92:	93 1f       	adc	r25, r19
    1f94:	2d 81       	ldd	r18, Y+5	; 0x05
    1f96:	22 23       	and	r18, r18
    1f98:	61 f0       	breq	.+24     	; 0x1fb2 <getMeasurementTimingBudget+0xd0>
    1f9a:	08 8d       	ldd	r16, Y+24	; 0x18
    1f9c:	19 8d       	ldd	r17, Y+25	; 0x19
    1f9e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1fa0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1fa2:	0a 5d       	subi	r16, 0xDA	; 218
    1fa4:	1d 4f       	sbci	r17, 0xFD	; 253
    1fa6:	2f 4f       	sbci	r18, 0xFF	; 255
    1fa8:	3f 4f       	sbci	r19, 0xFF	; 255
    1faa:	60 0f       	add	r22, r16
    1fac:	71 1f       	adc	r23, r17
    1fae:	82 1f       	adc	r24, r18
    1fb0:	93 1f       	adc	r25, r19
    1fb2:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <measurement_timing_budget_us>
    1fb6:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <measurement_timing_budget_us+0x1>
    1fba:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <measurement_timing_budget_us+0x2>
    1fbe:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <measurement_timing_budget_us+0x3>
    1fc2:	6b 96       	adiw	r28, 0x1b	; 27
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	1f 91       	pop	r17
    1fd4:	0f 91       	pop	r16
    1fd6:	08 95       	ret

00001fd8 <timeoutMicrosecondsToMclks>:
    1fd8:	8f 92       	push	r8
    1fda:	9f 92       	push	r9
    1fdc:	af 92       	push	r10
    1fde:	bf 92       	push	r11
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	4b 01       	movw	r8, r22
    1fea:	5c 01       	movw	r10, r24
    1fec:	a4 2f       	mov	r26, r20
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f e2       	ldi	r19, 0x2F	; 47
    1ff4:	4a e3       	ldi	r20, 0x3A	; 58
    1ff6:	50 e0       	ldi	r21, 0x00	; 0
    1ff8:	50 d3       	rcall	.+1696   	; 0x269a <__muluhisi3>
    1ffa:	6b 01       	movw	r12, r22
    1ffc:	7c 01       	movw	r14, r24
    1ffe:	24 ef       	ldi	r18, 0xF4	; 244
    2000:	c2 0e       	add	r12, r18
    2002:	21 e0       	ldi	r18, 0x01	; 1
    2004:	d2 1e       	adc	r13, r18
    2006:	e1 1c       	adc	r14, r1
    2008:	f1 1c       	adc	r15, r1
    200a:	a8 ee       	ldi	r26, 0xE8	; 232
    200c:	b3 e0       	ldi	r27, 0x03	; 3
    200e:	a5 01       	movw	r20, r10
    2010:	94 01       	movw	r18, r8
    2012:	43 d3       	rcall	.+1670   	; 0x269a <__muluhisi3>
    2014:	4b 01       	movw	r8, r22
    2016:	5c 01       	movw	r10, r24
    2018:	c7 01       	movw	r24, r14
    201a:	b6 01       	movw	r22, r12
    201c:	20 ed       	ldi	r18, 0xD0	; 208
    201e:	37 e0       	ldi	r19, 0x07	; 7
    2020:	40 e0       	ldi	r20, 0x00	; 0
    2022:	50 e0       	ldi	r21, 0x00	; 0
    2024:	00 d3       	rcall	.+1536   	; 0x2626 <__udivmodsi4>
    2026:	82 0e       	add	r8, r18
    2028:	93 1e       	adc	r9, r19
    202a:	a4 1e       	adc	r10, r20
    202c:	b5 1e       	adc	r11, r21
    202e:	c7 01       	movw	r24, r14
    2030:	b6 01       	movw	r22, r12
    2032:	28 ee       	ldi	r18, 0xE8	; 232
    2034:	33 e0       	ldi	r19, 0x03	; 3
    2036:	40 e0       	ldi	r20, 0x00	; 0
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	f5 d2       	rcall	.+1514   	; 0x2626 <__udivmodsi4>
    203c:	c5 01       	movw	r24, r10
    203e:	b4 01       	movw	r22, r8
    2040:	f2 d2       	rcall	.+1508   	; 0x2626 <__udivmodsi4>
    2042:	ca 01       	movw	r24, r20
    2044:	b9 01       	movw	r22, r18
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	df 90       	pop	r13
    204c:	cf 90       	pop	r12
    204e:	bf 90       	pop	r11
    2050:	af 90       	pop	r10
    2052:	9f 90       	pop	r9
    2054:	8f 90       	pop	r8
    2056:	08 95       	ret

00002058 <setMeasurementTimingBudget>:
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	6b 97       	sbiw	r28, 0x1b	; 27
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	60 32       	cpi	r22, 0x20	; 32
    2078:	2e e4       	ldi	r18, 0x4E	; 78
    207a:	72 07       	cpc	r23, r18
    207c:	81 05       	cpc	r24, r1
    207e:	91 05       	cpc	r25, r1
    2080:	08 f4       	brcc	.+2      	; 0x2084 <setMeasurementTimingBudget+0x2c>
    2082:	79 c0       	rjmp	.+242    	; 0x2176 <setMeasurementTimingBudget+0x11e>
    2084:	6b 01       	movw	r12, r22
    2086:	7c 01       	movw	r14, r24
    2088:	ce 01       	movw	r24, r28
    208a:	01 96       	adiw	r24, 0x01	; 1
    208c:	48 de       	rcall	.-880    	; 0x1d1e <getSequenceStepEnables>
    208e:	be 01       	movw	r22, r28
    2090:	6a 5f       	subi	r22, 0xFA	; 250
    2092:	7f 4f       	sbci	r23, 0xFF	; 255
    2094:	ce 01       	movw	r24, r28
    2096:	01 96       	adiw	r24, 0x01	; 1
    2098:	e1 de       	rcall	.-574    	; 0x1e5c <getSequenceStepTimeouts>
    209a:	89 81       	ldd	r24, Y+1	; 0x01
    209c:	88 23       	and	r24, r24
    209e:	49 f0       	breq	.+18     	; 0x20b2 <setMeasurementTimingBudget+0x5a>
    20a0:	88 89       	ldd	r24, Y+16	; 0x10
    20a2:	99 89       	ldd	r25, Y+17	; 0x11
    20a4:	aa 89       	ldd	r26, Y+18	; 0x12
    20a6:	bb 89       	ldd	r27, Y+19	; 0x13
    20a8:	8a 5c       	subi	r24, 0xCA	; 202
    20aa:	94 4f       	sbci	r25, 0xF4	; 244
    20ac:	af 4f       	sbci	r26, 0xFF	; 255
    20ae:	bf 4f       	sbci	r27, 0xFF	; 255
    20b0:	04 c0       	rjmp	.+8      	; 0x20ba <setMeasurementTimingBudget+0x62>
    20b2:	88 ee       	ldi	r24, 0xE8	; 232
    20b4:	98 e0       	ldi	r25, 0x08	; 8
    20b6:	a0 e0       	ldi	r26, 0x00	; 0
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	2b 81       	ldd	r18, Y+3	; 0x03
    20bc:	22 23       	and	r18, r18
    20be:	89 f0       	breq	.+34     	; 0x20e2 <setMeasurementTimingBudget+0x8a>
    20c0:	48 89       	ldd	r20, Y+16	; 0x10
    20c2:	59 89       	ldd	r21, Y+17	; 0x11
    20c4:	6a 89       	ldd	r22, Y+18	; 0x12
    20c6:	7b 89       	ldd	r23, Y+19	; 0x13
    20c8:	4e 54       	subi	r20, 0x4E	; 78
    20ca:	5d 4f       	sbci	r21, 0xFD	; 253
    20cc:	6f 4f       	sbci	r22, 0xFF	; 255
    20ce:	7f 4f       	sbci	r23, 0xFF	; 255
    20d0:	44 0f       	add	r20, r20
    20d2:	55 1f       	adc	r21, r21
    20d4:	66 1f       	adc	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	84 0f       	add	r24, r20
    20da:	95 1f       	adc	r25, r21
    20dc:	a6 1f       	adc	r26, r22
    20de:	b7 1f       	adc	r27, r23
    20e0:	0f c0       	rjmp	.+30     	; 0x2100 <setMeasurementTimingBudget+0xa8>
    20e2:	2a 81       	ldd	r18, Y+2	; 0x02
    20e4:	22 23       	and	r18, r18
    20e6:	61 f0       	breq	.+24     	; 0x2100 <setMeasurementTimingBudget+0xa8>
    20e8:	48 89       	ldd	r20, Y+16	; 0x10
    20ea:	59 89       	ldd	r21, Y+17	; 0x11
    20ec:	6a 89       	ldd	r22, Y+18	; 0x12
    20ee:	7b 89       	ldd	r23, Y+19	; 0x13
    20f0:	4c 56       	subi	r20, 0x6C	; 108
    20f2:	5d 4f       	sbci	r21, 0xFD	; 253
    20f4:	6f 4f       	sbci	r22, 0xFF	; 255
    20f6:	7f 4f       	sbci	r23, 0xFF	; 255
    20f8:	84 0f       	add	r24, r20
    20fa:	95 1f       	adc	r25, r21
    20fc:	a6 1f       	adc	r26, r22
    20fe:	b7 1f       	adc	r27, r23
    2100:	1c 81       	ldd	r17, Y+4	; 0x04
    2102:	11 23       	and	r17, r17
    2104:	61 f0       	breq	.+24     	; 0x211e <setMeasurementTimingBudget+0xc6>
    2106:	4c 89       	ldd	r20, Y+20	; 0x14
    2108:	5d 89       	ldd	r21, Y+21	; 0x15
    210a:	6e 89       	ldd	r22, Y+22	; 0x16
    210c:	7f 89       	ldd	r23, Y+23	; 0x17
    210e:	4c 56       	subi	r20, 0x6C	; 108
    2110:	5d 4f       	sbci	r21, 0xFD	; 253
    2112:	6f 4f       	sbci	r22, 0xFF	; 255
    2114:	7f 4f       	sbci	r23, 0xFF	; 255
    2116:	84 0f       	add	r24, r20
    2118:	95 1f       	adc	r25, r21
    211a:	a6 1f       	adc	r26, r22
    211c:	b7 1f       	adc	r27, r23
    211e:	2d 81       	ldd	r18, Y+5	; 0x05
    2120:	22 23       	and	r18, r18
    2122:	59 f1       	breq	.+86     	; 0x217a <setMeasurementTimingBudget+0x122>
    2124:	8a 5d       	subi	r24, 0xDA	; 218
    2126:	9d 4f       	sbci	r25, 0xFD	; 253
    2128:	af 4f       	sbci	r26, 0xFF	; 255
    212a:	bf 4f       	sbci	r27, 0xFF	; 255
    212c:	c8 16       	cp	r12, r24
    212e:	d9 06       	cpc	r13, r25
    2130:	ea 06       	cpc	r14, r26
    2132:	fb 06       	cpc	r15, r27
    2134:	20 f1       	brcs	.+72     	; 0x217e <setMeasurementTimingBudget+0x126>
    2136:	a7 01       	movw	r20, r14
    2138:	96 01       	movw	r18, r12
    213a:	28 1b       	sub	r18, r24
    213c:	39 0b       	sbc	r19, r25
    213e:	4a 0b       	sbc	r20, r26
    2140:	5b 0b       	sbc	r21, r27
    2142:	ca 01       	movw	r24, r20
    2144:	b9 01       	movw	r22, r18
    2146:	48 85       	ldd	r20, Y+8	; 0x08
    2148:	47 df       	rcall	.-370    	; 0x1fd8 <timeoutMicrosecondsToMclks>
    214a:	9b 01       	movw	r18, r22
    214c:	11 23       	and	r17, r17
    214e:	21 f0       	breq	.+8      	; 0x2158 <setMeasurementTimingBudget+0x100>
    2150:	2c 85       	ldd	r18, Y+12	; 0x0c
    2152:	3d 85       	ldd	r19, Y+13	; 0x0d
    2154:	26 0f       	add	r18, r22
    2156:	37 1f       	adc	r19, r23
    2158:	c9 01       	movw	r24, r18
    215a:	08 de       	rcall	.-1008   	; 0x1d6c <encodeTimeout>
    215c:	bc 01       	movw	r22, r24
    215e:	81 e7       	ldi	r24, 0x71	; 113
    2160:	09 dc       	rcall	.-2030   	; 0x1974 <writeReg16Bit>
    2162:	c0 92 79 01 	sts	0x0179, r12	; 0x800179 <measurement_timing_budget_us>
    2166:	d0 92 7a 01 	sts	0x017A, r13	; 0x80017a <measurement_timing_budget_us+0x1>
    216a:	e0 92 7b 01 	sts	0x017B, r14	; 0x80017b <measurement_timing_budget_us+0x2>
    216e:	f0 92 7c 01 	sts	0x017C, r15	; 0x80017c <measurement_timing_budget_us+0x3>
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	05 c0       	rjmp	.+10     	; 0x2180 <setMeasurementTimingBudget+0x128>
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <setMeasurementTimingBudget+0x128>
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	01 c0       	rjmp	.+2      	; 0x2180 <setMeasurementTimingBudget+0x128>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	6b 96       	adiw	r28, 0x1b	; 27
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	f8 94       	cli
    2186:	de bf       	out	0x3e, r29	; 62
    2188:	0f be       	out	0x3f, r0	; 63
    218a:	cd bf       	out	0x3d, r28	; 61
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	ff 90       	pop	r15
    2194:	ef 90       	pop	r14
    2196:	df 90       	pop	r13
    2198:	cf 90       	pop	r12
    219a:	08 95       	ret

0000219c <performSingleRefCalibration>:
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	68 2f       	mov	r22, r24
    21a2:	61 60       	ori	r22, 0x01	; 1
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	cc db       	rcall	.-2152   	; 0x1940 <writeReg>
    21a8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    21ac:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    21b0:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <timeout_start_ms+0x1>
    21b4:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <timeout_start_ms>
    21b8:	c0 e0       	ldi	r28, 0x00	; 0
    21ba:	d1 e0       	ldi	r29, 0x01	; 1
    21bc:	11 c0       	rjmp	.+34     	; 0x21e0 <performSingleRefCalibration+0x44>
    21be:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <io_timeout>
    21c2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <io_timeout+0x1>
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	59 f0       	breq	.+22     	; 0x21e0 <performSingleRefCalibration+0x44>
    21ca:	28 81       	ld	r18, Y
    21cc:	39 81       	ldd	r19, Y+1	; 0x01
    21ce:	40 91 72 01 	lds	r20, 0x0172	; 0x800172 <timeout_start_ms>
    21d2:	50 91 73 01 	lds	r21, 0x0173	; 0x800173 <timeout_start_ms+0x1>
    21d6:	24 1b       	sub	r18, r20
    21d8:	35 0b       	sbc	r19, r21
    21da:	82 17       	cp	r24, r18
    21dc:	93 07       	cpc	r25, r19
    21de:	60 f0       	brcs	.+24     	; 0x21f8 <performSingleRefCalibration+0x5c>
    21e0:	83 e1       	ldi	r24, 0x13	; 19
    21e2:	2e dc       	rcall	.-1956   	; 0x1a40 <readReg>
    21e4:	87 70       	andi	r24, 0x07	; 7
    21e6:	59 f3       	breq	.-42     	; 0x21be <performSingleRefCalibration+0x22>
    21e8:	61 e0       	ldi	r22, 0x01	; 1
    21ea:	8b e0       	ldi	r24, 0x0B	; 11
    21ec:	a9 db       	rcall	.-2222   	; 0x1940 <writeReg>
    21ee:	60 e0       	ldi	r22, 0x00	; 0
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	a6 db       	rcall	.-2228   	; 0x1940 <writeReg>
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	01 c0       	rjmp	.+2      	; 0x21fa <performSingleRefCalibration+0x5e>
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	df 91       	pop	r29
    21fc:	cf 91       	pop	r28
    21fe:	08 95       	ret

00002200 <internal_init>:
    2200:	cf 93       	push	r28
    2202:	df 93       	push	r29
    2204:	cd b7       	in	r28, 0x3d	; 61
    2206:	de b7       	in	r29, 0x3e	; 62
    2208:	28 97       	sbiw	r28, 0x08	; 8
    220a:	0f b6       	in	r0, 0x3f	; 63
    220c:	f8 94       	cli
    220e:	de bf       	out	0x3e, r29	; 62
    2210:	0f be       	out	0x3f, r0	; 63
    2212:	cd bf       	out	0x3d, r28	; 61
    2214:	88 23       	and	r24, r24
    2216:	31 f0       	breq	.+12     	; 0x2224 <internal_init+0x24>
    2218:	89 e8       	ldi	r24, 0x89	; 137
    221a:	12 dc       	rcall	.-2012   	; 0x1a40 <readReg>
    221c:	68 2f       	mov	r22, r24
    221e:	61 60       	ori	r22, 0x01	; 1
    2220:	89 e8       	ldi	r24, 0x89	; 137
    2222:	8e db       	rcall	.-2276   	; 0x1940 <writeReg>
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	88 e8       	ldi	r24, 0x88	; 136
    2228:	8b db       	rcall	.-2282   	; 0x1940 <writeReg>
    222a:	61 e0       	ldi	r22, 0x01	; 1
    222c:	80 e8       	ldi	r24, 0x80	; 128
    222e:	88 db       	rcall	.-2288   	; 0x1940 <writeReg>
    2230:	61 e0       	ldi	r22, 0x01	; 1
    2232:	8f ef       	ldi	r24, 0xFF	; 255
    2234:	85 db       	rcall	.-2294   	; 0x1940 <writeReg>
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	82 db       	rcall	.-2300   	; 0x1940 <writeReg>
    223c:	81 e9       	ldi	r24, 0x91	; 145
    223e:	00 dc       	rcall	.-2048   	; 0x1a40 <readReg>
    2240:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <stop_variable>
    2244:	61 e0       	ldi	r22, 0x01	; 1
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	7b db       	rcall	.-2314   	; 0x1940 <writeReg>
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	78 db       	rcall	.-2320   	; 0x1940 <writeReg>
    2250:	60 e0       	ldi	r22, 0x00	; 0
    2252:	80 e8       	ldi	r24, 0x80	; 128
    2254:	75 db       	rcall	.-2326   	; 0x1940 <writeReg>
    2256:	80 e6       	ldi	r24, 0x60	; 96
    2258:	f3 db       	rcall	.-2074   	; 0x1a40 <readReg>
    225a:	68 2f       	mov	r22, r24
    225c:	62 61       	ori	r22, 0x12	; 18
    225e:	80 e6       	ldi	r24, 0x60	; 96
    2260:	6f db       	rcall	.-2338   	; 0x1940 <writeReg>
    2262:	60 e2       	ldi	r22, 0x20	; 32
    2264:	70 e0       	ldi	r23, 0x00	; 0
    2266:	84 e4       	ldi	r24, 0x44	; 68
    2268:	85 db       	rcall	.-2294   	; 0x1974 <writeReg16Bit>
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	68 db       	rcall	.-2352   	; 0x1940 <writeReg>
    2270:	be 01       	movw	r22, r28
    2272:	6e 5f       	subi	r22, 0xFE	; 254
    2274:	7f 4f       	sbci	r23, 0xFF	; 255
    2276:	ce 01       	movw	r24, r28
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	d8 dc       	rcall	.-1616   	; 0x1c2c <getSpadInfo>
    227c:	88 23       	and	r24, r24
    227e:	09 f4       	brne	.+2      	; 0x2282 <internal_init+0x82>
    2280:	7d c1       	rjmp	.+762    	; 0x257c <internal_init+0x37c>
    2282:	46 e0       	ldi	r20, 0x06	; 6
    2284:	be 01       	movw	r22, r28
    2286:	6d 5f       	subi	r22, 0xFD	; 253
    2288:	7f 4f       	sbci	r23, 0xFF	; 255
    228a:	80 eb       	ldi	r24, 0xB0	; 176
    228c:	32 dc       	rcall	.-1948   	; 0x1af2 <readMulti>
    228e:	61 e0       	ldi	r22, 0x01	; 1
    2290:	8f ef       	ldi	r24, 0xFF	; 255
    2292:	56 db       	rcall	.-2388   	; 0x1940 <writeReg>
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	8f e4       	ldi	r24, 0x4F	; 79
    2298:	53 db       	rcall	.-2394   	; 0x1940 <writeReg>
    229a:	6c e2       	ldi	r22, 0x2C	; 44
    229c:	8e e4       	ldi	r24, 0x4E	; 78
    229e:	50 db       	rcall	.-2400   	; 0x1940 <writeReg>
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	8f ef       	ldi	r24, 0xFF	; 255
    22a4:	4d db       	rcall	.-2406   	; 0x1940 <writeReg>
    22a6:	64 eb       	ldi	r22, 0xB4	; 180
    22a8:	86 eb       	ldi	r24, 0xB6	; 182
    22aa:	4a db       	rcall	.-2412   	; 0x1940 <writeReg>
    22ac:	8a 81       	ldd	r24, Y+2	; 0x02
    22ae:	81 11       	cpse	r24, r1
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <internal_init+0xb6>
    22b2:	60 e0       	ldi	r22, 0x00	; 0
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <internal_init+0xb8>
    22b6:	6c e0       	ldi	r22, 0x0C	; 12
    22b8:	a9 81       	ldd	r26, Y+1	; 0x01
    22ba:	80 e0       	ldi	r24, 0x00	; 0
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	41 e0       	ldi	r20, 0x01	; 1
    22c0:	50 e0       	ldi	r21, 0x00	; 0
    22c2:	86 17       	cp	r24, r22
    22c4:	10 f0       	brcs	.+4      	; 0x22ca <internal_init+0xca>
    22c6:	a7 13       	cpse	r26, r23
    22c8:	18 c0       	rjmp	.+48     	; 0x22fa <internal_init+0xfa>
    22ca:	98 2f       	mov	r25, r24
    22cc:	96 95       	lsr	r25
    22ce:	96 95       	lsr	r25
    22d0:	96 95       	lsr	r25
    22d2:	e3 e0       	ldi	r30, 0x03	; 3
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	ec 0f       	add	r30, r28
    22d8:	fd 1f       	adc	r31, r29
    22da:	e9 0f       	add	r30, r25
    22dc:	f1 1d       	adc	r31, r1
    22de:	98 2f       	mov	r25, r24
    22e0:	97 70       	andi	r25, 0x07	; 7
    22e2:	9a 01       	movw	r18, r20
    22e4:	02 c0       	rjmp	.+4      	; 0x22ea <internal_init+0xea>
    22e6:	22 0f       	add	r18, r18
    22e8:	33 1f       	adc	r19, r19
    22ea:	9a 95       	dec	r25
    22ec:	e2 f7       	brpl	.-8      	; 0x22e6 <internal_init+0xe6>
    22ee:	92 2f       	mov	r25, r18
    22f0:	90 95       	com	r25
    22f2:	20 81       	ld	r18, Z
    22f4:	92 23       	and	r25, r18
    22f6:	90 83       	st	Z, r25
    22f8:	15 c0       	rjmp	.+42     	; 0x2324 <internal_init+0x124>
    22fa:	98 2f       	mov	r25, r24
    22fc:	96 95       	lsr	r25
    22fe:	96 95       	lsr	r25
    2300:	96 95       	lsr	r25
    2302:	e3 e0       	ldi	r30, 0x03	; 3
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	ec 0f       	add	r30, r28
    2308:	fd 1f       	adc	r31, r29
    230a:	e9 0f       	add	r30, r25
    230c:	f1 1d       	adc	r31, r1
    230e:	20 81       	ld	r18, Z
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	98 2f       	mov	r25, r24
    2314:	97 70       	andi	r25, 0x07	; 7
    2316:	02 c0       	rjmp	.+4      	; 0x231c <internal_init+0x11c>
    2318:	35 95       	asr	r19
    231a:	27 95       	ror	r18
    231c:	9a 95       	dec	r25
    231e:	e2 f7       	brpl	.-8      	; 0x2318 <internal_init+0x118>
    2320:	20 fd       	sbrc	r18, 0
    2322:	7f 5f       	subi	r23, 0xFF	; 255
    2324:	8f 5f       	subi	r24, 0xFF	; 255
    2326:	80 33       	cpi	r24, 0x30	; 48
    2328:	61 f6       	brne	.-104    	; 0x22c2 <internal_init+0xc2>
    232a:	46 e0       	ldi	r20, 0x06	; 6
    232c:	be 01       	movw	r22, r28
    232e:	6d 5f       	subi	r22, 0xFD	; 253
    2330:	7f 4f       	sbci	r23, 0xFF	; 255
    2332:	80 eb       	ldi	r24, 0xB0	; 176
    2334:	c0 db       	rcall	.-2176   	; 0x1ab6 <writeMulti>
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	02 db       	rcall	.-2556   	; 0x1940 <writeReg>
    233c:	60 e0       	ldi	r22, 0x00	; 0
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	ff da       	rcall	.-2562   	; 0x1940 <writeReg>
    2342:	60 e0       	ldi	r22, 0x00	; 0
    2344:	8f ef       	ldi	r24, 0xFF	; 255
    2346:	fc da       	rcall	.-2568   	; 0x1940 <writeReg>
    2348:	60 e0       	ldi	r22, 0x00	; 0
    234a:	89 e0       	ldi	r24, 0x09	; 9
    234c:	f9 da       	rcall	.-2574   	; 0x1940 <writeReg>
    234e:	60 e0       	ldi	r22, 0x00	; 0
    2350:	80 e1       	ldi	r24, 0x10	; 16
    2352:	f6 da       	rcall	.-2580   	; 0x1940 <writeReg>
    2354:	60 e0       	ldi	r22, 0x00	; 0
    2356:	81 e1       	ldi	r24, 0x11	; 17
    2358:	f3 da       	rcall	.-2586   	; 0x1940 <writeReg>
    235a:	61 e0       	ldi	r22, 0x01	; 1
    235c:	84 e2       	ldi	r24, 0x24	; 36
    235e:	f0 da       	rcall	.-2592   	; 0x1940 <writeReg>
    2360:	6f ef       	ldi	r22, 0xFF	; 255
    2362:	85 e2       	ldi	r24, 0x25	; 37
    2364:	ed da       	rcall	.-2598   	; 0x1940 <writeReg>
    2366:	60 e0       	ldi	r22, 0x00	; 0
    2368:	85 e7       	ldi	r24, 0x75	; 117
    236a:	ea da       	rcall	.-2604   	; 0x1940 <writeReg>
    236c:	61 e0       	ldi	r22, 0x01	; 1
    236e:	8f ef       	ldi	r24, 0xFF	; 255
    2370:	e7 da       	rcall	.-2610   	; 0x1940 <writeReg>
    2372:	6c e2       	ldi	r22, 0x2C	; 44
    2374:	8e e4       	ldi	r24, 0x4E	; 78
    2376:	e4 da       	rcall	.-2616   	; 0x1940 <writeReg>
    2378:	60 e0       	ldi	r22, 0x00	; 0
    237a:	88 e4       	ldi	r24, 0x48	; 72
    237c:	e1 da       	rcall	.-2622   	; 0x1940 <writeReg>
    237e:	60 e2       	ldi	r22, 0x20	; 32
    2380:	80 e3       	ldi	r24, 0x30	; 48
    2382:	de da       	rcall	.-2628   	; 0x1940 <writeReg>
    2384:	60 e0       	ldi	r22, 0x00	; 0
    2386:	8f ef       	ldi	r24, 0xFF	; 255
    2388:	db da       	rcall	.-2634   	; 0x1940 <writeReg>
    238a:	69 e0       	ldi	r22, 0x09	; 9
    238c:	80 e3       	ldi	r24, 0x30	; 48
    238e:	d8 da       	rcall	.-2640   	; 0x1940 <writeReg>
    2390:	60 e0       	ldi	r22, 0x00	; 0
    2392:	84 e5       	ldi	r24, 0x54	; 84
    2394:	d5 da       	rcall	.-2646   	; 0x1940 <writeReg>
    2396:	64 e0       	ldi	r22, 0x04	; 4
    2398:	81 e3       	ldi	r24, 0x31	; 49
    239a:	d2 da       	rcall	.-2652   	; 0x1940 <writeReg>
    239c:	63 e0       	ldi	r22, 0x03	; 3
    239e:	82 e3       	ldi	r24, 0x32	; 50
    23a0:	cf da       	rcall	.-2658   	; 0x1940 <writeReg>
    23a2:	63 e8       	ldi	r22, 0x83	; 131
    23a4:	80 e4       	ldi	r24, 0x40	; 64
    23a6:	cc da       	rcall	.-2664   	; 0x1940 <writeReg>
    23a8:	65 e2       	ldi	r22, 0x25	; 37
    23aa:	86 e4       	ldi	r24, 0x46	; 70
    23ac:	c9 da       	rcall	.-2670   	; 0x1940 <writeReg>
    23ae:	60 e0       	ldi	r22, 0x00	; 0
    23b0:	80 e6       	ldi	r24, 0x60	; 96
    23b2:	c6 da       	rcall	.-2676   	; 0x1940 <writeReg>
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	87 e2       	ldi	r24, 0x27	; 39
    23b8:	c3 da       	rcall	.-2682   	; 0x1940 <writeReg>
    23ba:	66 e0       	ldi	r22, 0x06	; 6
    23bc:	80 e5       	ldi	r24, 0x50	; 80
    23be:	c0 da       	rcall	.-2688   	; 0x1940 <writeReg>
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	81 e5       	ldi	r24, 0x51	; 81
    23c4:	bd da       	rcall	.-2694   	; 0x1940 <writeReg>
    23c6:	66 e9       	ldi	r22, 0x96	; 150
    23c8:	82 e5       	ldi	r24, 0x52	; 82
    23ca:	ba da       	rcall	.-2700   	; 0x1940 <writeReg>
    23cc:	68 e0       	ldi	r22, 0x08	; 8
    23ce:	86 e5       	ldi	r24, 0x56	; 86
    23d0:	b7 da       	rcall	.-2706   	; 0x1940 <writeReg>
    23d2:	60 e3       	ldi	r22, 0x30	; 48
    23d4:	87 e5       	ldi	r24, 0x57	; 87
    23d6:	b4 da       	rcall	.-2712   	; 0x1940 <writeReg>
    23d8:	60 e0       	ldi	r22, 0x00	; 0
    23da:	81 e6       	ldi	r24, 0x61	; 97
    23dc:	b1 da       	rcall	.-2718   	; 0x1940 <writeReg>
    23de:	60 e0       	ldi	r22, 0x00	; 0
    23e0:	82 e6       	ldi	r24, 0x62	; 98
    23e2:	ae da       	rcall	.-2724   	; 0x1940 <writeReg>
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	84 e6       	ldi	r24, 0x64	; 100
    23e8:	ab da       	rcall	.-2730   	; 0x1940 <writeReg>
    23ea:	60 e0       	ldi	r22, 0x00	; 0
    23ec:	85 e6       	ldi	r24, 0x65	; 101
    23ee:	a8 da       	rcall	.-2736   	; 0x1940 <writeReg>
    23f0:	60 ea       	ldi	r22, 0xA0	; 160
    23f2:	86 e6       	ldi	r24, 0x66	; 102
    23f4:	a5 da       	rcall	.-2742   	; 0x1940 <writeReg>
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	a2 da       	rcall	.-2748   	; 0x1940 <writeReg>
    23fc:	62 e3       	ldi	r22, 0x32	; 50
    23fe:	82 e2       	ldi	r24, 0x22	; 34
    2400:	9f da       	rcall	.-2754   	; 0x1940 <writeReg>
    2402:	64 e1       	ldi	r22, 0x14	; 20
    2404:	87 e4       	ldi	r24, 0x47	; 71
    2406:	9c da       	rcall	.-2760   	; 0x1940 <writeReg>
    2408:	6f ef       	ldi	r22, 0xFF	; 255
    240a:	89 e4       	ldi	r24, 0x49	; 73
    240c:	99 da       	rcall	.-2766   	; 0x1940 <writeReg>
    240e:	60 e0       	ldi	r22, 0x00	; 0
    2410:	8a e4       	ldi	r24, 0x4A	; 74
    2412:	96 da       	rcall	.-2772   	; 0x1940 <writeReg>
    2414:	60 e0       	ldi	r22, 0x00	; 0
    2416:	8f ef       	ldi	r24, 0xFF	; 255
    2418:	93 da       	rcall	.-2778   	; 0x1940 <writeReg>
    241a:	6a e0       	ldi	r22, 0x0A	; 10
    241c:	8a e7       	ldi	r24, 0x7A	; 122
    241e:	90 da       	rcall	.-2784   	; 0x1940 <writeReg>
    2420:	60 e0       	ldi	r22, 0x00	; 0
    2422:	8b e7       	ldi	r24, 0x7B	; 123
    2424:	8d da       	rcall	.-2790   	; 0x1940 <writeReg>
    2426:	61 e2       	ldi	r22, 0x21	; 33
    2428:	88 e7       	ldi	r24, 0x78	; 120
    242a:	8a da       	rcall	.-2796   	; 0x1940 <writeReg>
    242c:	61 e0       	ldi	r22, 0x01	; 1
    242e:	8f ef       	ldi	r24, 0xFF	; 255
    2430:	87 da       	rcall	.-2802   	; 0x1940 <writeReg>
    2432:	64 e3       	ldi	r22, 0x34	; 52
    2434:	83 e2       	ldi	r24, 0x23	; 35
    2436:	84 da       	rcall	.-2808   	; 0x1940 <writeReg>
    2438:	60 e0       	ldi	r22, 0x00	; 0
    243a:	82 e4       	ldi	r24, 0x42	; 66
    243c:	81 da       	rcall	.-2814   	; 0x1940 <writeReg>
    243e:	6f ef       	ldi	r22, 0xFF	; 255
    2440:	84 e4       	ldi	r24, 0x44	; 68
    2442:	7e da       	rcall	.-2820   	; 0x1940 <writeReg>
    2444:	66 e2       	ldi	r22, 0x26	; 38
    2446:	85 e4       	ldi	r24, 0x45	; 69
    2448:	7b da       	rcall	.-2826   	; 0x1940 <writeReg>
    244a:	65 e0       	ldi	r22, 0x05	; 5
    244c:	86 e4       	ldi	r24, 0x46	; 70
    244e:	78 da       	rcall	.-2832   	; 0x1940 <writeReg>
    2450:	60 e4       	ldi	r22, 0x40	; 64
    2452:	80 e4       	ldi	r24, 0x40	; 64
    2454:	75 da       	rcall	.-2838   	; 0x1940 <writeReg>
    2456:	66 e0       	ldi	r22, 0x06	; 6
    2458:	8e e0       	ldi	r24, 0x0E	; 14
    245a:	72 da       	rcall	.-2844   	; 0x1940 <writeReg>
    245c:	6a e1       	ldi	r22, 0x1A	; 26
    245e:	80 e2       	ldi	r24, 0x20	; 32
    2460:	6f da       	rcall	.-2850   	; 0x1940 <writeReg>
    2462:	60 e4       	ldi	r22, 0x40	; 64
    2464:	83 e4       	ldi	r24, 0x43	; 67
    2466:	6c da       	rcall	.-2856   	; 0x1940 <writeReg>
    2468:	60 e0       	ldi	r22, 0x00	; 0
    246a:	8f ef       	ldi	r24, 0xFF	; 255
    246c:	69 da       	rcall	.-2862   	; 0x1940 <writeReg>
    246e:	63 e0       	ldi	r22, 0x03	; 3
    2470:	84 e3       	ldi	r24, 0x34	; 52
    2472:	66 da       	rcall	.-2868   	; 0x1940 <writeReg>
    2474:	64 e4       	ldi	r22, 0x44	; 68
    2476:	85 e3       	ldi	r24, 0x35	; 53
    2478:	63 da       	rcall	.-2874   	; 0x1940 <writeReg>
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	8f ef       	ldi	r24, 0xFF	; 255
    247e:	60 da       	rcall	.-2880   	; 0x1940 <writeReg>
    2480:	64 e0       	ldi	r22, 0x04	; 4
    2482:	81 e3       	ldi	r24, 0x31	; 49
    2484:	5d da       	rcall	.-2886   	; 0x1940 <writeReg>
    2486:	69 e0       	ldi	r22, 0x09	; 9
    2488:	8b e4       	ldi	r24, 0x4B	; 75
    248a:	5a da       	rcall	.-2892   	; 0x1940 <writeReg>
    248c:	65 e0       	ldi	r22, 0x05	; 5
    248e:	8c e4       	ldi	r24, 0x4C	; 76
    2490:	57 da       	rcall	.-2898   	; 0x1940 <writeReg>
    2492:	64 e0       	ldi	r22, 0x04	; 4
    2494:	8d e4       	ldi	r24, 0x4D	; 77
    2496:	54 da       	rcall	.-2904   	; 0x1940 <writeReg>
    2498:	60 e0       	ldi	r22, 0x00	; 0
    249a:	8f ef       	ldi	r24, 0xFF	; 255
    249c:	51 da       	rcall	.-2910   	; 0x1940 <writeReg>
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	84 e4       	ldi	r24, 0x44	; 68
    24a2:	4e da       	rcall	.-2916   	; 0x1940 <writeReg>
    24a4:	60 e2       	ldi	r22, 0x20	; 32
    24a6:	85 e4       	ldi	r24, 0x45	; 69
    24a8:	4b da       	rcall	.-2922   	; 0x1940 <writeReg>
    24aa:	68 e0       	ldi	r22, 0x08	; 8
    24ac:	87 e4       	ldi	r24, 0x47	; 71
    24ae:	48 da       	rcall	.-2928   	; 0x1940 <writeReg>
    24b0:	68 e2       	ldi	r22, 0x28	; 40
    24b2:	88 e4       	ldi	r24, 0x48	; 72
    24b4:	45 da       	rcall	.-2934   	; 0x1940 <writeReg>
    24b6:	60 e0       	ldi	r22, 0x00	; 0
    24b8:	87 e6       	ldi	r24, 0x67	; 103
    24ba:	42 da       	rcall	.-2940   	; 0x1940 <writeReg>
    24bc:	64 e0       	ldi	r22, 0x04	; 4
    24be:	80 e7       	ldi	r24, 0x70	; 112
    24c0:	3f da       	rcall	.-2946   	; 0x1940 <writeReg>
    24c2:	61 e0       	ldi	r22, 0x01	; 1
    24c4:	81 e7       	ldi	r24, 0x71	; 113
    24c6:	3c da       	rcall	.-2952   	; 0x1940 <writeReg>
    24c8:	6e ef       	ldi	r22, 0xFE	; 254
    24ca:	82 e7       	ldi	r24, 0x72	; 114
    24cc:	39 da       	rcall	.-2958   	; 0x1940 <writeReg>
    24ce:	60 e0       	ldi	r22, 0x00	; 0
    24d0:	86 e7       	ldi	r24, 0x76	; 118
    24d2:	36 da       	rcall	.-2964   	; 0x1940 <writeReg>
    24d4:	60 e0       	ldi	r22, 0x00	; 0
    24d6:	87 e7       	ldi	r24, 0x77	; 119
    24d8:	33 da       	rcall	.-2970   	; 0x1940 <writeReg>
    24da:	61 e0       	ldi	r22, 0x01	; 1
    24dc:	8f ef       	ldi	r24, 0xFF	; 255
    24de:	30 da       	rcall	.-2976   	; 0x1940 <writeReg>
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	8d e0       	ldi	r24, 0x0D	; 13
    24e4:	2d da       	rcall	.-2982   	; 0x1940 <writeReg>
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	8f ef       	ldi	r24, 0xFF	; 255
    24ea:	2a da       	rcall	.-2988   	; 0x1940 <writeReg>
    24ec:	61 e0       	ldi	r22, 0x01	; 1
    24ee:	80 e8       	ldi	r24, 0x80	; 128
    24f0:	27 da       	rcall	.-2994   	; 0x1940 <writeReg>
    24f2:	68 ef       	ldi	r22, 0xF8	; 248
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	24 da       	rcall	.-3000   	; 0x1940 <writeReg>
    24f8:	61 e0       	ldi	r22, 0x01	; 1
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	21 da       	rcall	.-3006   	; 0x1940 <writeReg>
    24fe:	61 e0       	ldi	r22, 0x01	; 1
    2500:	8e e8       	ldi	r24, 0x8E	; 142
    2502:	1e da       	rcall	.-3012   	; 0x1940 <writeReg>
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	1b da       	rcall	.-3018   	; 0x1940 <writeReg>
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	8f ef       	ldi	r24, 0xFF	; 255
    250e:	18 da       	rcall	.-3024   	; 0x1940 <writeReg>
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	80 e8       	ldi	r24, 0x80	; 128
    2514:	15 da       	rcall	.-3030   	; 0x1940 <writeReg>
    2516:	64 e0       	ldi	r22, 0x04	; 4
    2518:	8a e0       	ldi	r24, 0x0A	; 10
    251a:	12 da       	rcall	.-3036   	; 0x1940 <writeReg>
    251c:	84 e8       	ldi	r24, 0x84	; 132
    251e:	90 da       	rcall	.-2784   	; 0x1a40 <readReg>
    2520:	68 2f       	mov	r22, r24
    2522:	6f 7e       	andi	r22, 0xEF	; 239
    2524:	84 e8       	ldi	r24, 0x84	; 132
    2526:	0c da       	rcall	.-3048   	; 0x1940 <writeReg>
    2528:	61 e0       	ldi	r22, 0x01	; 1
    252a:	8b e0       	ldi	r24, 0x0B	; 11
    252c:	09 da       	rcall	.-3054   	; 0x1940 <writeReg>
    252e:	d9 dc       	rcall	.-1614   	; 0x1ee2 <getMeasurementTimingBudget>
    2530:	60 93 79 01 	sts	0x0179, r22	; 0x800179 <measurement_timing_budget_us>
    2534:	70 93 7a 01 	sts	0x017A, r23	; 0x80017a <measurement_timing_budget_us+0x1>
    2538:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <measurement_timing_budget_us+0x2>
    253c:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <measurement_timing_budget_us+0x3>
    2540:	68 ee       	ldi	r22, 0xE8	; 232
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	fd d9       	rcall	.-3078   	; 0x1940 <writeReg>
    2546:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <measurement_timing_budget_us>
    254a:	70 91 7a 01 	lds	r23, 0x017A	; 0x80017a <measurement_timing_budget_us+0x1>
    254e:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <measurement_timing_budget_us+0x2>
    2552:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <measurement_timing_budget_us+0x3>
    2556:	80 dd       	rcall	.-1280   	; 0x2058 <setMeasurementTimingBudget>
    2558:	61 e0       	ldi	r22, 0x01	; 1
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	f1 d9       	rcall	.-3102   	; 0x1940 <writeReg>
    255e:	80 e4       	ldi	r24, 0x40	; 64
    2560:	1d de       	rcall	.-966    	; 0x219c <performSingleRefCalibration>
    2562:	88 23       	and	r24, r24
    2564:	59 f0       	breq	.+22     	; 0x257c <internal_init+0x37c>
    2566:	62 e0       	ldi	r22, 0x02	; 2
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	ea d9       	rcall	.-3116   	; 0x1940 <writeReg>
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	16 de       	rcall	.-980    	; 0x219c <performSingleRefCalibration>
    2570:	88 23       	and	r24, r24
    2572:	21 f0       	breq	.+8      	; 0x257c <internal_init+0x37c>
    2574:	68 ee       	ldi	r22, 0xE8	; 232
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	e3 d9       	rcall	.-3130   	; 0x1940 <writeReg>
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	28 96       	adiw	r28, 0x08	; 8
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	df 91       	pop	r29
    258a:	cf 91       	pop	r28
    258c:	08 95       	ret

0000258e <vl53l0x_init>:
    258e:	cf 93       	push	r28
    2590:	df 93       	push	r29
    2592:	00 d0       	rcall	.+0      	; 0x2594 <vl53l0x_init+0x6>
    2594:	00 d0       	rcall	.+0      	; 0x2596 <vl53l0x_init+0x8>
    2596:	1f 92       	push	r1
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	e5 e7       	ldi	r30, 0x75	; 117
    259e:	f1 e0       	ldi	r31, 0x01	; 1
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	80 83       	st	Z, r24
    25a4:	81 83       	std	Z+1, r24	; 0x01
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	82 83       	std	Z+2, r24	; 0x02
    25aa:	13 82       	std	Z+3, r1	; 0x03
    25ac:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <s_xshutPin>
    25b0:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <s_xshutPin+0x1>
    25b4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <s_xshutPin+0x2>
    25b8:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <s_xshutPin+0x3>
    25bc:	0e 94 c3 01 	call	0x386	; 0x386 <gpio_init>
    25c0:	80 ea       	ldi	r24, 0xA0	; 160
    25c2:	58 2f       	mov	r21, r24
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	66 e8       	ldi	r22, 0x86	; 134
    25c8:	71 e0       	ldi	r23, 0x01	; 1
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	0e 94 77 02 	call	0x4ee	; 0x4ee <i2c_init>
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	df 91       	pop	r29
    25dc:	cf 91       	pop	r28
    25de:	08 95       	ret

000025e0 <vl53l0x_start>:
    25e0:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <s_xshutPin>
    25e4:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <s_xshutPin+0x1>
    25e8:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <s_xshutPin+0x2>
    25ec:	90 91 78 01 	lds	r25, 0x0178	; 0x800178 <s_xshutPin+0x3>
    25f0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <gpio_out_set>
    25f4:	0e 94 af 02 	call	0x55e	; 0x55e <i2c_start>
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	02 de       	rcall	.-1020   	; 0x2200 <internal_init>
    25fc:	84 ef       	ldi	r24, 0xF4	; 244
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <io_timeout+0x1>
    2604:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <io_timeout>
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	cb 01       	movw	r24, r22
    260e:	9f ca       	rjmp	.-2754   	; 0x1b4e <startContinuous>
    2610:	08 95       	ret

00002612 <vl53l0x_getDistance>:

u16 vl53l0x_getDistance()
{
    2612:	d8 da       	rcall	.-2640   	; 0x1bc4 <readRangeContinuousMillimeters>
    2614:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <did_timeout>
    2618:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <did_timeout>
    261c:	22 23       	and	r18, r18
    261e:	11 f0       	breq	.+4      	; 0x2624 <vl53l0x_getDistance+0x12>
    2620:	8f ef       	ldi	r24, 0xFF	; 255
    2622:	9f ef       	ldi	r25, 0xFF	; 255
    2624:	08 95       	ret

00002626 <__udivmodsi4>:
    2626:	a1 e2       	ldi	r26, 0x21	; 33
    2628:	1a 2e       	mov	r1, r26
    262a:	aa 1b       	sub	r26, r26
    262c:	bb 1b       	sub	r27, r27
    262e:	fd 01       	movw	r30, r26
    2630:	0d c0       	rjmp	.+26     	; 0x264c <__udivmodsi4_ep>

00002632 <__udivmodsi4_loop>:
    2632:	aa 1f       	adc	r26, r26
    2634:	bb 1f       	adc	r27, r27
    2636:	ee 1f       	adc	r30, r30
    2638:	ff 1f       	adc	r31, r31
    263a:	a2 17       	cp	r26, r18
    263c:	b3 07       	cpc	r27, r19
    263e:	e4 07       	cpc	r30, r20
    2640:	f5 07       	cpc	r31, r21
    2642:	20 f0       	brcs	.+8      	; 0x264c <__udivmodsi4_ep>
    2644:	a2 1b       	sub	r26, r18
    2646:	b3 0b       	sbc	r27, r19
    2648:	e4 0b       	sbc	r30, r20
    264a:	f5 0b       	sbc	r31, r21

0000264c <__udivmodsi4_ep>:
    264c:	66 1f       	adc	r22, r22
    264e:	77 1f       	adc	r23, r23
    2650:	88 1f       	adc	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	1a 94       	dec	r1
    2656:	69 f7       	brne	.-38     	; 0x2632 <__udivmodsi4_loop>
    2658:	60 95       	com	r22
    265a:	70 95       	com	r23
    265c:	80 95       	com	r24
    265e:	90 95       	com	r25
    2660:	9b 01       	movw	r18, r22
    2662:	ac 01       	movw	r20, r24
    2664:	bd 01       	movw	r22, r26
    2666:	cf 01       	movw	r24, r30
    2668:	08 95       	ret

0000266a <__tablejump2__>:
    266a:	ee 0f       	add	r30, r30
    266c:	ff 1f       	adc	r31, r31
    266e:	00 24       	eor	r0, r0
    2670:	00 1c       	adc	r0, r0
    2672:	0b be       	out	0x3b, r0	; 59
    2674:	07 90       	elpm	r0, Z+
    2676:	f6 91       	elpm	r31, Z
    2678:	e0 2d       	mov	r30, r0
    267a:	09 94       	ijmp

0000267c <__umulhisi3>:
    267c:	a2 9f       	mul	r26, r18
    267e:	b0 01       	movw	r22, r0
    2680:	b3 9f       	mul	r27, r19
    2682:	c0 01       	movw	r24, r0
    2684:	a3 9f       	mul	r26, r19
    2686:	70 0d       	add	r23, r0
    2688:	81 1d       	adc	r24, r1
    268a:	11 24       	eor	r1, r1
    268c:	91 1d       	adc	r25, r1
    268e:	b2 9f       	mul	r27, r18
    2690:	70 0d       	add	r23, r0
    2692:	81 1d       	adc	r24, r1
    2694:	11 24       	eor	r1, r1
    2696:	91 1d       	adc	r25, r1
    2698:	08 95       	ret

0000269a <__muluhisi3>:
    269a:	f0 df       	rcall	.-32     	; 0x267c <__umulhisi3>
    269c:	a5 9f       	mul	r26, r21
    269e:	90 0d       	add	r25, r0
    26a0:	b4 9f       	mul	r27, r20
    26a2:	90 0d       	add	r25, r0
    26a4:	a4 9f       	mul	r26, r20
    26a6:	80 0d       	add	r24, r0
    26a8:	91 1d       	adc	r25, r1
    26aa:	11 24       	eor	r1, r1
    26ac:	08 95       	ret

000026ae <_exit>:
    26ae:	f8 94       	cli

000026b0 <__stop_program>:
    26b0:	ff cf       	rjmp	.-2      	; 0x26b0 <__stop_program>
