
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002e4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dda  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800100  00800100  00002e4e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000608  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008a9b  00000000  00000000  000034c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b7b  00000000  00000000  0000bf63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003598  00000000  00000000  0000dade  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001644  00000000  00000000  00011078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f26  00000000  00000000  000126bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005340  00000000  00000000  000145e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00019922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	8b c1       	rjmp	.+790    	; 0x31c <__vector_1>
       6:	00 00       	nop
       8:	93 c1       	rjmp	.+806    	; 0x330 <__vector_2>
       a:	00 00       	nop
       c:	9b c1       	rjmp	.+822    	; 0x344 <__vector_3>
       e:	00 00       	nop
      10:	5d c1       	rjmp	.+698    	; 0x2cc <__vector_4>
      12:	00 00       	nop
      14:	65 c1       	rjmp	.+714    	; 0x2e0 <__vector_5>
      16:	00 00       	nop
      18:	6d c1       	rjmp	.+730    	; 0x2f4 <__vector_6>
      1a:	00 00       	nop
      1c:	75 c1       	rjmp	.+746    	; 0x308 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 0d 0e 	jmp	0x1c1a	; 0x1c1a <__vector_8>
      24:	78 c7       	rjmp	.+3824   	; 0xf16 <__vector_9>
      26:	00 00       	nop
      28:	b2 c7       	rjmp	.+3940   	; 0xf8e <__vector_10>
      2a:	00 00       	nop
      2c:	49 c7       	rjmp	.+3730   	; 0xec0 <__vector_11>
      2e:	00 00       	nop
      30:	ea c6       	rjmp	.+3540   	; 0xe06 <__vector_12>
      32:	00 00       	nop
      34:	5d c6       	rjmp	.+3258   	; 0xcf0 <__vector_13>
      36:	00 00       	nop
      38:	bb c6       	rjmp	.+3446   	; 0xdb0 <__vector_14>
      3a:	00 00       	nop
      3c:	2e c6       	rjmp	.+3164   	; 0xc9a <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	dd c3       	rjmp	.+1978   	; 0x808 <__vector_19>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__vector_31>
      80:	dc c7       	rjmp	.+4024   	; 0x103a <__vector_32>
      82:	00 00       	nop
      84:	0c 94 7d 08 	jmp	0x10fa	; 0x10fa <__vector_33>
      88:	ad c7       	rjmp	.+3930   	; 0xfe4 <__vector_34>
      8a:	00 00       	nop
      8c:	e5 09       	sbc	r30, r5
      8e:	ee 09       	sbc	r30, r14
      90:	f7 09       	sbc	r31, r7
      92:	00 0a       	sbc	r0, r16
      94:	09 0a       	sbc	r0, r25
      96:	12 0a       	sbc	r1, r18
      98:	1b 0a       	sbc	r1, r27

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	ea ed       	ldi	r30, 0xDA	; 218
      ae:	fd e2       	ldi	r31, 0x2D	; 45
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	af 36       	cpi	r26, 0x6F	; 111
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 eb 16 	jmp	0x2dd6	; 0x2dd6 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main()
{
	device_disableJTAG();
      d8:	d5 d0       	rcall	.+426    	; 0x284 <device_disableJTAG>
	debug_init();
      da:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <debug_init>


	distanceSensor_multiInit();
	distanceSensor_multiDefaultTest();
      de:	04 d0       	rcall	.+8      	; 0xe8 <distanceSensor_multiInit>
      e0:	6c d0       	rcall	.+216    	; 0x1ba <distanceSensor_multiDefaultTest>
	
	return 0;
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	08 95       	ret

000000e8 <distanceSensor_multiInit>:
		}
	}
}

void distanceSensor_multiInit()
{
      e8:	0f 93       	push	r16
      ea:	1f 93       	push	r17
	s_timeoutTimer.frequency = 1000;
      ec:	e4 e0       	ldi	r30, 0x04	; 4
      ee:	f1 e0       	ldi	r31, 0x01	; 1
      f0:	88 ee       	ldi	r24, 0xE8	; 232
      f2:	58 2f       	mov	r21, r24
      f4:	81 83       	std	Z+1, r24	; 0x01
      f6:	83 e0       	ldi	r24, 0x03	; 3
      f8:	82 83       	std	Z+2, r24	; 0x02
      fa:	13 82       	std	Z+3, r1	; 0x03
      fc:	14 82       	std	Z+4, r1	; 0x04
	s_timeoutTimer.peripheral = TIMER1;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	48 2f       	mov	r20, r24
     102:	80 83       	st	Z, r24
	timer_init(s_timeoutTimer);
     104:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     108:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     10c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     110:	0e 94 05 09 	call	0x120a	; 0x120a <timer_init>
	timer_attachInterrupt(s_timeoutTimer, OVERFLOW, vl53l0x_incrementTimeoutCounter);
     114:	03 e9       	ldi	r16, 0x93	; 147
     116:	16 e1       	ldi	r17, 0x16	; 22
     118:	20 e0       	ldi	r18, 0x00	; 0
     11a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     11e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     122:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     126:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     12a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     12e:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <timer_attachInterrupt>
	timer_enableInterrupt(s_timeoutTimer, OVERFLOW);
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     138:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     13c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     140:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     144:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     148:	0e 94 48 0b 	call	0x1690	; 0x1690 <timer_enableInterrupt>
	timer_start(s_timeoutTimer);
     14c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     150:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     154:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     158:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     15c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     160:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <timer_start>

	s_frontSensor.address = VL53L0X_ADDRESS_DEFAULT;
     164:	e4 e1       	ldi	r30, 0x14	; 20
     166:	f1 e0       	ldi	r31, 0x01	; 1
     168:	99 e2       	ldi	r25, 0x29	; 41
     16a:	90 83       	st	Z, r25
	s_frontSensor.i2cTimeout = 100;
     16c:	24 e6       	ldi	r18, 0x64	; 100
     16e:	30 e0       	ldi	r19, 0x00	; 0
     170:	32 83       	std	Z+2, r19	; 0x02
     172:	21 83       	std	Z+1, r18	; 0x01
	s_frontSensor.xshutPin.port = PD;
     174:	43 e0       	ldi	r20, 0x03	; 3
     176:	44 83       	std	Z+4, r20	; 0x04
	s_frontSensor.xshutPin.number = 7;
     178:	87 e0       	ldi	r24, 0x07	; 7
     17a:	85 83       	std	Z+5, r24	; 0x05

	s_leftSensor.address = VL53L0X_ADDRESS_DEFAULT;
     17c:	ef e1       	ldi	r30, 0x1F	; 31
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	90 83       	st	Z, r25
	s_leftSensor.i2cTimeout = 100;
     182:	32 83       	std	Z+2, r19	; 0x02
     184:	21 83       	std	Z+1, r18	; 0x01
	s_leftSensor.xshutPin.port = PC;
     186:	82 e0       	ldi	r24, 0x02	; 2
     188:	84 83       	std	Z+4, r24	; 0x04
	s_leftSensor.xshutPin.number = 2;
     18a:	85 83       	std	Z+5, r24	; 0x05

	s_rightSensor.address = VL53L0X_ADDRESS_DEFAULT;
     18c:	e9 e0       	ldi	r30, 0x09	; 9
     18e:	f1 e0       	ldi	r31, 0x01	; 1
     190:	90 83       	st	Z, r25
	s_rightSensor.i2cTimeout = 100;
     192:	32 83       	std	Z+2, r19	; 0x02
     194:	21 83       	std	Z+1, r18	; 0x01
	s_rightSensor.xshutPin.port = PC;
     196:	84 83       	std	Z+4, r24	; 0x04
	s_rightSensor.xshutPin.number = 3;
     198:	45 83       	std	Z+5, r20	; 0x05

	sei();
     19a:	78 94       	sei

	vl53l0x_init(&s_frontSensor);
     19c:	84 e1       	ldi	r24, 0x14	; 20
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <vl53l0x_init>
	vl53l0x_init(&s_leftSensor);
     1a4:	8f e1       	ldi	r24, 0x1F	; 31
     1a6:	91 e0       	ldi	r25, 0x01	; 1
     1a8:	0e 94 7e 13 	call	0x26fc	; 0x26fc <vl53l0x_init>
	vl53l0x_init(&s_rightSensor);
     1ac:	89 e0       	ldi	r24, 0x09	; 9
     1ae:	91 e0       	ldi	r25, 0x01	; 1
     1b0:	0e 94 7e 13 	call	0x26fc	; 0x26fc <vl53l0x_init>
}
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	08 95       	ret

000001ba <distanceSensor_multiDefaultTest>:

void distanceSensor_multiDefaultTest()
{

	u16 distance;
	vl53l0x_start(&s_leftSensor);
     1ba:	8f e1       	ldi	r24, 0x1F	; 31
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 ab 13 	call	0x2756	; 0x2756 <vl53l0x_start>
	vl53l0x_setAddress(&s_leftSensor, s_leftSensor.address + 1);
     1c2:	60 91 1f 01 	lds	r22, 0x011F	; 0x80011f <s_leftSensor>
     1c6:	6f 5f       	subi	r22, 0xFF	; 255
     1c8:	8f e1       	ldi	r24, 0x1F	; 31
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 e7 15 	call	0x2bce	; 0x2bce <vl53l0x_setAddress>
	vl53l0x_setMode(&s_leftSensor, VL53L0X_DEFAULT);
     1d0:	60 e0       	ldi	r22, 0x00	; 0
     1d2:	8f e1       	ldi	r24, 0x1F	; 31
     1d4:	91 e0       	ldi	r25, 0x01	; 1
     1d6:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vl53l0x_setMode>
	vl53l0x_startContinuous(&s_leftSensor, 0);
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	ba 01       	movw	r22, r20
     1e0:	8f e1       	ldi	r24, 0x1F	; 31
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 30 16 	call	0x2c60	; 0x2c60 <vl53l0x_startContinuous>
	
	vl53l0x_start(&s_rightSensor);
     1e8:	89 e0       	ldi	r24, 0x09	; 9
     1ea:	91 e0       	ldi	r25, 0x01	; 1
     1ec:	0e 94 ab 13 	call	0x2756	; 0x2756 <vl53l0x_start>
	vl53l0x_setAddress(&s_rightSensor, s_rightSensor.address + 2);
     1f0:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <s_rightSensor>
     1f4:	6e 5f       	subi	r22, 0xFE	; 254
     1f6:	89 e0       	ldi	r24, 0x09	; 9
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 e7 15 	call	0x2bce	; 0x2bce <vl53l0x_setAddress>
	vl53l0x_setMode(&s_rightSensor, VL53L0X_DEFAULT);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	89 e0       	ldi	r24, 0x09	; 9
     202:	91 e0       	ldi	r25, 0x01	; 1
     204:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vl53l0x_setMode>
	vl53l0x_startContinuous(&s_rightSensor, 0);
     208:	40 e0       	ldi	r20, 0x00	; 0
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	ba 01       	movw	r22, r20
     20e:	89 e0       	ldi	r24, 0x09	; 9
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	0e 94 30 16 	call	0x2c60	; 0x2c60 <vl53l0x_startContinuous>
	
	vl53l0x_start(&s_frontSensor);
     216:	84 e1       	ldi	r24, 0x14	; 20
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 ab 13 	call	0x2756	; 0x2756 <vl53l0x_start>
	vl53l0x_setMode(&s_frontSensor, VL53L0X_DEFAULT);
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	84 e1       	ldi	r24, 0x14	; 20
     222:	91 e0       	ldi	r25, 0x01	; 1
     224:	0e 94 f5 15 	call	0x2bea	; 0x2bea <vl53l0x_setMode>
	vl53l0x_startContinuous(&s_frontSensor, 0);
     228:	40 e0       	ldi	r20, 0x00	; 0
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	ba 01       	movw	r22, r20
     22e:	84 e1       	ldi	r24, 0x14	; 20
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 30 16 	call	0x2c60	; 0x2c60 <vl53l0x_startContinuous>

	while (1)
	{
	   
		/* This can be put in a scheduler if no GPIO pin from the sensor is available */
		distance = vl53l0x_readRangeContinuous(&s_leftSensor);
     236:	8f e1       	ldi	r24, 0x1F	; 31
     238:	91 e0       	ldi	r25, 0x01	; 1
     23a:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <vl53l0x_readRangeContinuous>
		if (distance != 0xffff)
     23e:	8f 3f       	cpi	r24, 0xFF	; 255
     240:	2f ef       	ldi	r18, 0xFF	; 255
     242:	92 07       	cpc	r25, r18
     244:	29 f0       	breq	.+10     	; 0x250 <distanceSensor_multiDefaultTest+0x96>
		{
			debug_writeDecimal(distance);
     246:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <debug_writeDecimal>
			debug_writeChar(' ');
     24a:	80 e2       	ldi	r24, 0x20	; 32
     24c:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <debug_writeChar>
		}
		
		distance = vl53l0x_readRangeContinuous(&s_frontSensor);
     250:	84 e1       	ldi	r24, 0x14	; 20
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <vl53l0x_readRangeContinuous>
		if (distance != 0xffff)
     258:	8f 3f       	cpi	r24, 0xFF	; 255
     25a:	2f ef       	ldi	r18, 0xFF	; 255
     25c:	92 07       	cpc	r25, r18
     25e:	29 f0       	breq	.+10     	; 0x26a <distanceSensor_multiDefaultTest+0xb0>
		{
			debug_writeDecimal(distance);
     260:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <debug_writeDecimal>
			debug_writeChar(' ');
     264:	80 e2       	ldi	r24, 0x20	; 32
     266:	0e 94 70 0e 	call	0x1ce0	; 0x1ce0 <debug_writeChar>
		}
		
		distance = vl53l0x_readRangeContinuous(&s_rightSensor);
     26a:	89 e0       	ldi	r24, 0x09	; 9
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <vl53l0x_readRangeContinuous>
		if (distance != 0xffff)
     272:	8f 3f       	cpi	r24, 0xFF	; 255
     274:	2f ef       	ldi	r18, 0xFF	; 255
     276:	92 07       	cpc	r25, r18
     278:	f1 f2       	breq	.-68     	; 0x236 <distanceSensor_multiDefaultTest+0x7c>
		{
			debug_writeDecimal(distance);
     27a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <debug_writeDecimal>
			debug_writeNewLine();
     27e:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <debug_writeNewLine>
     282:	d9 cf       	rjmp	.-78     	; 0x236 <distanceSensor_multiDefaultTest+0x7c>

00000284 <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
     284:	80 e8       	ldi	r24, 0x80	; 128
     286:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     288:	85 bf       	out	0x35, r24	; 53
     28a:	08 95       	ret

0000028c <gpio_changeDirection>:
}

void gpio_setDirectionInput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = INPUT;
	gpio_changeDirection(*s_gpio);
     28c:	61 30       	cpi	r22, 0x01	; 1
     28e:	61 f0       	breq	.+24     	; 0x2a8 <gpio_changeDirection+0x1c>
     290:	28 f0       	brcs	.+10     	; 0x29c <gpio_changeDirection+0x10>
     292:	62 30       	cpi	r22, 0x02	; 2
     294:	79 f0       	breq	.+30     	; 0x2b4 <gpio_changeDirection+0x28>
     296:	63 30       	cpi	r22, 0x03	; 3
     298:	99 f0       	breq	.+38     	; 0x2c0 <gpio_changeDirection+0x34>
     29a:	08 95       	ret
     29c:	48 2f       	mov	r20, r24
     29e:	67 2f       	mov	r22, r23
     2a0:	81 e2       	ldi	r24, 0x21	; 33
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	58 c2       	rjmp	.+1200   	; 0x756 <updateBit>
     2a6:	08 95       	ret
     2a8:	48 2f       	mov	r20, r24
     2aa:	67 2f       	mov	r22, r23
     2ac:	84 e2       	ldi	r24, 0x24	; 36
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	52 c2       	rjmp	.+1188   	; 0x756 <updateBit>
     2b2:	08 95       	ret
     2b4:	48 2f       	mov	r20, r24
     2b6:	67 2f       	mov	r22, r23
     2b8:	87 e2       	ldi	r24, 0x27	; 39
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	4c c2       	rjmp	.+1176   	; 0x756 <updateBit>
     2be:	08 95       	ret
     2c0:	48 2f       	mov	r20, r24
     2c2:	67 2f       	mov	r22, r23
     2c4:	8a e2       	ldi	r24, 0x2A	; 42
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	46 c2       	rjmp	.+1164   	; 0x756 <updateBit>
     2ca:	08 95       	ret

000002cc <__vector_4>:
     2cc:	1f 92       	push	r1
     2ce:	0f 92       	push	r0
     2d0:	0f b6       	in	r0, 0x3f	; 63
     2d2:	0f 92       	push	r0
     2d4:	11 24       	eor	r1, r1
     2d6:	0f 90       	pop	r0
     2d8:	0f be       	out	0x3f, r0	; 63
     2da:	0f 90       	pop	r0
     2dc:	1f 90       	pop	r1
     2de:	18 95       	reti

000002e0 <__vector_5>:
     2e0:	1f 92       	push	r1
     2e2:	0f 92       	push	r0
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	0f 92       	push	r0
     2e8:	11 24       	eor	r1, r1
     2ea:	0f 90       	pop	r0
     2ec:	0f be       	out	0x3f, r0	; 63
     2ee:	0f 90       	pop	r0
     2f0:	1f 90       	pop	r1
     2f2:	18 95       	reti

000002f4 <__vector_6>:
     2f4:	1f 92       	push	r1
     2f6:	0f 92       	push	r0
     2f8:	0f b6       	in	r0, 0x3f	; 63
     2fa:	0f 92       	push	r0
     2fc:	11 24       	eor	r1, r1
     2fe:	0f 90       	pop	r0
     300:	0f be       	out	0x3f, r0	; 63
     302:	0f 90       	pop	r0
     304:	1f 90       	pop	r1
     306:	18 95       	reti

00000308 <__vector_7>:
     308:	1f 92       	push	r1
     30a:	0f 92       	push	r0
     30c:	0f b6       	in	r0, 0x3f	; 63
     30e:	0f 92       	push	r0
     310:	11 24       	eor	r1, r1
     312:	0f 90       	pop	r0
     314:	0f be       	out	0x3f, r0	; 63
     316:	0f 90       	pop	r0
     318:	1f 90       	pop	r1
     31a:	18 95       	reti

0000031c <__vector_1>:
     31c:	1f 92       	push	r1
     31e:	0f 92       	push	r0
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	0f 92       	push	r0
     324:	11 24       	eor	r1, r1
     326:	0f 90       	pop	r0
     328:	0f be       	out	0x3f, r0	; 63
     32a:	0f 90       	pop	r0
     32c:	1f 90       	pop	r1
     32e:	18 95       	reti

00000330 <__vector_2>:
     330:	1f 92       	push	r1
     332:	0f 92       	push	r0
     334:	0f b6       	in	r0, 0x3f	; 63
     336:	0f 92       	push	r0
     338:	11 24       	eor	r1, r1
     33a:	0f 90       	pop	r0
     33c:	0f be       	out	0x3f, r0	; 63
     33e:	0f 90       	pop	r0
     340:	1f 90       	pop	r1
     342:	18 95       	reti

00000344 <__vector_3>:
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	0f 90       	pop	r0
     350:	0f be       	out	0x3f, r0	; 63
     352:	0f 90       	pop	r0
     354:	1f 90       	pop	r1
     356:	18 95       	reti

00000358 <gpio_init>:
     358:	0f 93       	push	r16
     35a:	1f 93       	push	r17
     35c:	cf 93       	push	r28
     35e:	df 93       	push	r29
     360:	c6 2f       	mov	r28, r22
     362:	17 2f       	mov	r17, r23
     364:	d8 2f       	mov	r29, r24
     366:	09 2f       	mov	r16, r25
     368:	91 df       	rcall	.-222    	; 0x28c <gpio_changeDirection>
     36a:	d1 11       	cpse	r29, r1
     36c:	23 c0       	rjmp	.+70     	; 0x3b4 <gpio_init+0x5c>
     36e:	c1 30       	cpi	r28, 0x01	; 1
     370:	81 f0       	breq	.+32     	; 0x392 <gpio_init+0x3a>
     372:	28 f0       	brcs	.+10     	; 0x37e <gpio_init+0x26>
     374:	c2 30       	cpi	r28, 0x02	; 2
     376:	99 f0       	breq	.+38     	; 0x39e <gpio_init+0x46>
     378:	c3 30       	cpi	r28, 0x03	; 3
     37a:	b9 f0       	breq	.+46     	; 0x3aa <gpio_init+0x52>
     37c:	1b c0       	rjmp	.+54     	; 0x3b4 <gpio_init+0x5c>
     37e:	40 2f       	mov	r20, r16
     380:	61 2f       	mov	r22, r17
     382:	82 e2       	ldi	r24, 0x22	; 34
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	e7 d1       	rcall	.+974    	; 0x756 <updateBit>
     388:	61 2f       	mov	r22, r17
     38a:	8e e7       	ldi	r24, 0x7E	; 126
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	07 d2       	rcall	.+1038   	; 0x79e <clearBit>
     390:	11 c0       	rjmp	.+34     	; 0x3b4 <gpio_init+0x5c>
     392:	40 2f       	mov	r20, r16
     394:	61 2f       	mov	r22, r17
     396:	85 e2       	ldi	r24, 0x25	; 37
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	dd d1       	rcall	.+954    	; 0x756 <updateBit>
     39c:	0b c0       	rjmp	.+22     	; 0x3b4 <gpio_init+0x5c>
     39e:	40 2f       	mov	r20, r16
     3a0:	61 2f       	mov	r22, r17
     3a2:	88 e2       	ldi	r24, 0x28	; 40
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	d7 d1       	rcall	.+942    	; 0x756 <updateBit>
     3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <gpio_init+0x5c>
     3aa:	40 2f       	mov	r20, r16
     3ac:	61 2f       	mov	r22, r17
     3ae:	8b e2       	ldi	r24, 0x2B	; 43
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	d1 d1       	rcall	.+930    	; 0x756 <updateBit>
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	0f 91       	pop	r16
     3bc:	08 95       	ret

000003be <gpio_setDirectionOutput>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	fc 01       	movw	r30, r24
     3c2:	22 83       	std	Z+2, r18	; 0x02
	gpio_changeDirection(*s_gpio);
     3c4:	60 81       	ld	r22, Z
     3c6:	71 81       	ldd	r23, Z+1	; 0x01
     3c8:	82 81       	ldd	r24, Z+2	; 0x02
     3ca:	93 81       	ldd	r25, Z+3	; 0x03
     3cc:	5f cf       	rjmp	.-322    	; 0x28c <gpio_changeDirection>
     3ce:	08 95       	ret

000003d0 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     3d0:	61 30       	cpi	r22, 0x01	; 1
     3d2:	59 f0       	breq	.+22     	; 0x3ea <gpio_out_set+0x1a>
     3d4:	28 f0       	brcs	.+10     	; 0x3e0 <gpio_out_set+0x10>
     3d6:	62 30       	cpi	r22, 0x02	; 2
     3d8:	69 f0       	breq	.+26     	; 0x3f4 <gpio_out_set+0x24>
     3da:	63 30       	cpi	r22, 0x03	; 3
     3dc:	81 f0       	breq	.+32     	; 0x3fe <gpio_out_set+0x2e>
     3de:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     3e0:	67 2f       	mov	r22, r23
     3e2:	82 e2       	ldi	r24, 0x22	; 34
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	cf c1       	rjmp	.+926    	; 0x786 <setBit>
			break;
     3e8:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     3ea:	67 2f       	mov	r22, r23
     3ec:	85 e2       	ldi	r24, 0x25	; 37
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	ca c1       	rjmp	.+916    	; 0x786 <setBit>
			break;
     3f2:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     3f4:	67 2f       	mov	r22, r23
     3f6:	88 e2       	ldi	r24, 0x28	; 40
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	c5 c1       	rjmp	.+906    	; 0x786 <setBit>
			break;
     3fc:	08 95       	ret
		case PD:
			setBit(&PORTD, s_gpio.number);
     3fe:	67 2f       	mov	r22, r23
     400:	8b e2       	ldi	r24, 0x2B	; 43
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	c0 c1       	rjmp	.+896    	; 0x786 <setBit>
     406:	08 95       	ret

00000408 <gpio_out_reset>:
	}
}

void gpio_out_reset(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     408:	61 30       	cpi	r22, 0x01	; 1
     40a:	59 f0       	breq	.+22     	; 0x422 <gpio_out_reset+0x1a>
     40c:	28 f0       	brcs	.+10     	; 0x418 <gpio_out_reset+0x10>
     40e:	62 30       	cpi	r22, 0x02	; 2
     410:	69 f0       	breq	.+26     	; 0x42c <gpio_out_reset+0x24>
     412:	63 30       	cpi	r22, 0x03	; 3
     414:	81 f0       	breq	.+32     	; 0x436 <gpio_out_reset+0x2e>
     416:	08 95       	ret
	{
		case PA:
			clearBit(&PORTA, s_gpio.number);
     418:	67 2f       	mov	r22, r23
     41a:	82 e2       	ldi	r24, 0x22	; 34
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	bf c1       	rjmp	.+894    	; 0x79e <clearBit>
			break;
     420:	08 95       	ret
		case PB:
			clearBit(&PORTB, s_gpio.number);
     422:	67 2f       	mov	r22, r23
     424:	85 e2       	ldi	r24, 0x25	; 37
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	ba c1       	rjmp	.+884    	; 0x79e <clearBit>
			break;
     42a:	08 95       	ret
		case PC:
			clearBit(&PORTC, s_gpio.number);
     42c:	67 2f       	mov	r22, r23
     42e:	88 e2       	ldi	r24, 0x28	; 40
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	b5 c1       	rjmp	.+874    	; 0x79e <clearBit>
			break;
     434:	08 95       	ret
		case PD:
			clearBit(&PORTD, s_gpio.number);
     436:	67 2f       	mov	r22, r23
     438:	8b e2       	ldi	r24, 0x2B	; 43
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	b0 c1       	rjmp	.+864    	; 0x79e <clearBit>
     43e:	08 95       	ret

00000440 <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	8b 01       	movw	r16, r22
     44a:	9c 01       	movw	r18, r24
     44c:	ea 01       	movw	r28, r20
     44e:	60 e0       	ldi	r22, 0x00	; 0
     450:	72 e1       	ldi	r23, 0x12	; 18
     452:	8a e7       	ldi	r24, 0x7A	; 122
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	a9 01       	movw	r20, r18
     458:	98 01       	movw	r18, r16
     45a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     45e:	ba 01       	movw	r22, r20
     460:	a9 01       	movw	r20, r18
     462:	40 51       	subi	r20, 0x10	; 16
     464:	51 09       	sbc	r21, r1
     466:	61 09       	sbc	r22, r1
     468:	71 09       	sbc	r23, r1
     46a:	db 01       	movw	r26, r22
     46c:	ca 01       	movw	r24, r20
     46e:	b6 95       	lsr	r27
     470:	a7 95       	ror	r26
     472:	97 95       	ror	r25
     474:	87 95       	ror	r24
     476:	8f 3f       	cpi	r24, 0xFF	; 255
     478:	91 05       	cpc	r25, r1
     47a:	a1 05       	cpc	r26, r1
     47c:	b1 05       	cpc	r27, r1
     47e:	09 f0       	breq	.+2      	; 0x482 <calculateTWBR+0x42>
     480:	10 f4       	brcc	.+4      	; 0x486 <calculateTWBR+0x46>
     482:	18 82       	st	Y, r1
     484:	32 c0       	rjmp	.+100    	; 0x4ea <calculateTWBR+0xaa>
     486:	db 01       	movw	r26, r22
     488:	ca 01       	movw	r24, r20
     48a:	68 94       	set
     48c:	12 f8       	bld	r1, 2
     48e:	b6 95       	lsr	r27
     490:	a7 95       	ror	r26
     492:	97 95       	ror	r25
     494:	87 95       	ror	r24
     496:	16 94       	lsr	r1
     498:	d1 f7       	brne	.-12     	; 0x48e <calculateTWBR+0x4e>
     49a:	8f 3f       	cpi	r24, 0xFF	; 255
     49c:	91 05       	cpc	r25, r1
     49e:	a1 05       	cpc	r26, r1
     4a0:	b1 05       	cpc	r27, r1
     4a2:	09 f0       	breq	.+2      	; 0x4a6 <calculateTWBR+0x66>
     4a4:	18 f4       	brcc	.+6      	; 0x4ac <calculateTWBR+0x6c>
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	28 83       	st	Y, r18
     4aa:	1f c0       	rjmp	.+62     	; 0x4ea <calculateTWBR+0xaa>
     4ac:	db 01       	movw	r26, r22
     4ae:	ca 01       	movw	r24, r20
     4b0:	68 94       	set
     4b2:	14 f8       	bld	r1, 4
     4b4:	b6 95       	lsr	r27
     4b6:	a7 95       	ror	r26
     4b8:	97 95       	ror	r25
     4ba:	87 95       	ror	r24
     4bc:	16 94       	lsr	r1
     4be:	d1 f7       	brne	.-12     	; 0x4b4 <calculateTWBR+0x74>
     4c0:	8f 3f       	cpi	r24, 0xFF	; 255
     4c2:	91 05       	cpc	r25, r1
     4c4:	a1 05       	cpc	r26, r1
     4c6:	b1 05       	cpc	r27, r1
     4c8:	09 f0       	breq	.+2      	; 0x4cc <calculateTWBR+0x8c>
     4ca:	18 f4       	brcc	.+6      	; 0x4d2 <calculateTWBR+0x92>
     4cc:	22 e0       	ldi	r18, 0x02	; 2
     4ce:	28 83       	st	Y, r18
     4d0:	0c c0       	rjmp	.+24     	; 0x4ea <calculateTWBR+0xaa>
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	88 83       	st	Y, r24
     4d6:	db 01       	movw	r26, r22
     4d8:	ca 01       	movw	r24, r20
     4da:	68 94       	set
     4dc:	16 f8       	bld	r1, 6
     4de:	b6 95       	lsr	r27
     4e0:	a7 95       	ror	r26
     4e2:	97 95       	ror	r25
     4e4:	87 95       	ror	r24
     4e6:	16 94       	lsr	r1
     4e8:	d1 f7       	brne	.-12     	; 0x4de <calculateTWBR+0x9e>
     4ea:	df 91       	pop	r29
     4ec:	cf 91       	pop	r28
     4ee:	1f 91       	pop	r17
     4f0:	0f 91       	pop	r16
     4f2:	08 95       	ret

000004f4 <i2c_init>:
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	ae 01       	movw	r20, r28
     500:	4f 5f       	subi	r20, 0xFF	; 255
     502:	5f 4f       	sbci	r21, 0xFF	; 255
     504:	9d df       	rcall	.-198    	; 0x440 <calculateTWBR>
     506:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	54 d1       	rcall	.+680    	; 0x7b8 <checkBit>
     510:	48 2f       	mov	r20, r24
     512:	60 e0       	ldi	r22, 0x00	; 0
     514:	89 eb       	ldi	r24, 0xB9	; 185
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	1e d1       	rcall	.+572    	; 0x756 <updateBit>
     51a:	61 e0       	ldi	r22, 0x01	; 1
     51c:	89 81       	ldd	r24, Y+1	; 0x01
     51e:	4c d1       	rcall	.+664    	; 0x7b8 <checkBit>
     520:	48 2f       	mov	r20, r24
     522:	61 e0       	ldi	r22, 0x01	; 1
     524:	89 eb       	ldi	r24, 0xB9	; 185
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	16 d1       	rcall	.+556    	; 0x756 <updateBit>
     52a:	62 e0       	ldi	r22, 0x02	; 2
     52c:	71 e0       	ldi	r23, 0x01	; 1
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	12 df       	rcall	.-476    	; 0x358 <gpio_init>
     534:	62 e0       	ldi	r22, 0x02	; 2
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	0d df       	rcall	.-486    	; 0x358 <gpio_init>
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <i2c_start>:
     546:	62 e0       	ldi	r22, 0x02	; 2
     548:	8c eb       	ldi	r24, 0xBC	; 188
     54a:	90 e0       	ldi	r25, 0x00	; 0
     54c:	1c c1       	rjmp	.+568    	; 0x786 <setBit>
     54e:	08 95       	ret

00000550 <i2c_sendStart>:
}

u8 i2c_sendStart(u8 u8_address)
{
     550:	ff 92       	push	r15
     552:	0f 93       	push	r16
     554:	1f 93       	push	r17
     556:	cf 93       	push	r28
     558:	df 93       	push	r29
     55a:	f8 2e       	mov	r15, r24
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);
     55c:	cc eb       	ldi	r28, 0xBC	; 188
     55e:	d0 e0       	ldi	r29, 0x00	; 0
     560:	88 81       	ld	r24, Y
     562:	62 e0       	ldi	r22, 0x02	; 2
     564:	29 d1       	rcall	.+594    	; 0x7b8 <checkBit>
     566:	28 81       	ld	r18, Y
     568:	34 e0       	ldi	r19, 0x04	; 4
     56a:	83 9f       	mul	r24, r19
     56c:	c0 01       	movw	r24, r0
     56e:	11 24       	eor	r1, r1
     570:	80 6a       	ori	r24, 0xA0	; 160
     572:	82 2b       	or	r24, r18
     574:	88 83       	st	Y, r24
     576:	ce ef       	ldi	r28, 0xFE	; 254
     578:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until start condition has been sent */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     57a:	0c eb       	ldi	r16, 0xBC	; 188
     57c:	10 e0       	ldi	r17, 0x00	; 0
     57e:	f8 01       	movw	r30, r16
     580:	80 81       	ld	r24, Z
     582:	67 e0       	ldi	r22, 0x07	; 7
     584:	19 d1       	rcall	.+562    	; 0x7b8 <checkBit>
     586:	81 11       	cpse	r24, r1
     588:	33 c0       	rjmp	.+102    	; 0x5f0 <i2c_sendStart+0xa0>
     58a:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until start condition has been sent */
	while(--timeout > 0)
     58c:	c1 f7       	brne	.-16     	; 0x57e <i2c_sendStart+0x2e>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     58e:	8f ef       	ldi	r24, 0xFF	; 255
     590:	3b c0       	rjmp	.+118    	; 0x608 <i2c_sendStart+0xb8>

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     592:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     596:	88 7f       	andi	r24, 0xF8	; 248
     598:	80 31       	cpi	r24, 0x10	; 16
     59a:	21 f0       	breq	.+8      	; 0x5a4 <i2c_sendStart+0x54>
		return (TW_STATUS & 0xF8);
     59c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a0:	88 7f       	andi	r24, 0xF8	; 248
     5a2:	32 c0       	rjmp	.+100    	; 0x608 <i2c_sendStart+0xb8>

	/* Send device address */
	TWDR = u8_address;
     5a4:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     5a8:	cc eb       	ldi	r28, 0xBC	; 188
     5aa:	d0 e0       	ldi	r29, 0x00	; 0
     5ac:	88 81       	ld	r24, Y
     5ae:	62 e0       	ldi	r22, 0x02	; 2
     5b0:	03 d1       	rcall	.+518    	; 0x7b8 <checkBit>
     5b2:	f4 e0       	ldi	r31, 0x04	; 4
     5b4:	8f 9f       	mul	r24, r31
     5b6:	c0 01       	movw	r24, r0
     5b8:	11 24       	eor	r1, r1
     5ba:	80 68       	ori	r24, 0x80	; 128
     5bc:	88 83       	st	Y, r24
     5be:	ce ef       	ldi	r28, 0xFE	; 254
     5c0:	df ef       	ldi	r29, 0xFF	; 255

	/* Wail until address has been sent */
	while( --timeout > 0 )
		if(checkBit(TWCR, TWINT))
     5c2:	0c eb       	ldi	r16, 0xBC	; 188
     5c4:	10 e0       	ldi	r17, 0x00	; 0
     5c6:	f8 01       	movw	r30, r16
     5c8:	80 81       	ld	r24, Z
     5ca:	67 e0       	ldi	r22, 0x07	; 7
     5cc:	f5 d0       	rcall	.+490    	; 0x7b8 <checkBit>
     5ce:	81 11       	cpse	r24, r1
     5d0:	15 c0       	rjmp	.+42     	; 0x5fc <i2c_sendStart+0xac>
     5d2:	21 97       	sbiw	r28, 0x01	; 1
	/* Send device address */
	TWDR = u8_address;
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wail until address has been sent */
	while( --timeout > 0 )
     5d4:	c1 f7       	brne	.-16     	; 0x5c6 <i2c_sendStart+0x76>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	17 c0       	rjmp	.+46     	; 0x608 <i2c_sendStart+0xb8>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     5da:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5de:	88 7f       	andi	r24, 0xF8	; 248
     5e0:	80 34       	cpi	r24, 0x40	; 64
     5e2:	21 f0       	breq	.+8      	; 0x5ec <i2c_sendStart+0x9c>
		return (TW_STATUS & 0xF8);
     5e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5e8:	88 7f       	andi	r24, 0xF8	; 248
     5ea:	0e c0       	rjmp	.+28     	; 0x608 <i2c_sendStart+0xb8>

	return I2C_NO_ERROR;
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	0c c0       	rjmp	.+24     	; 0x608 <i2c_sendStart+0xb8>
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     5f0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5f4:	88 7f       	andi	r24, 0xF8	; 248
     5f6:	88 30       	cpi	r24, 0x08	; 8
     5f8:	61 f6       	brne	.-104    	; 0x592 <i2c_sendStart+0x42>
     5fa:	d4 cf       	rjmp	.-88     	; 0x5a4 <i2c_sendStart+0x54>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     5fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     600:	88 7f       	andi	r24, 0xF8	; 248
     602:	88 31       	cpi	r24, 0x18	; 24
     604:	51 f7       	brne	.-44     	; 0x5da <i2c_sendStart+0x8a>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     606:	80 e0       	ldi	r24, 0x00	; 0
}
     608:	df 91       	pop	r29
     60a:	cf 91       	pop	r28
     60c:	1f 91       	pop	r17
     60e:	0f 91       	pop	r16
     610:	ff 90       	pop	r15
     612:	08 95       	ret

00000614 <i2c_sendRepStart>:

u8 i2c_sendRepStart(u8 u8_address)
{
	return i2c_sendStart(u8_address);
     614:	9d cf       	rjmp	.-198    	; 0x550 <i2c_sendStart>
}
     616:	08 95       	ret

00000618 <i2c_sendStop>:

void i2c_sendStop(void)
{
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
     620:	cc eb       	ldi	r28, 0xBC	; 188
     622:	d0 e0       	ldi	r29, 0x00	; 0
     624:	88 81       	ld	r24, Y
     626:	62 e0       	ldi	r22, 0x02	; 2
     628:	c7 d0       	rcall	.+398    	; 0x7b8 <checkBit>
     62a:	28 81       	ld	r18, Y
     62c:	34 e0       	ldi	r19, 0x04	; 4
     62e:	83 9f       	mul	r24, r19
     630:	c0 01       	movw	r24, r0
     632:	11 24       	eor	r1, r1
     634:	80 69       	ori	r24, 0x90	; 144
     636:	82 2b       	or	r24, r18
     638:	88 83       	st	Y, r24
     63a:	ce ef       	ldi	r28, 0xFE	; 254
     63c:	df ef       	ldi	r29, 0xFF	; 255
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
		if(!checkBit(TWCR, TWSTO))
     63e:	0c eb       	ldi	r16, 0xBC	; 188
     640:	10 e0       	ldi	r17, 0x00	; 0
     642:	f8 01       	movw	r30, r16
     644:	80 81       	ld	r24, Z
     646:	64 e0       	ldi	r22, 0x04	; 4
     648:	b7 d0       	rcall	.+366    	; 0x7b8 <checkBit>
     64a:	88 23       	and	r24, r24
     64c:	11 f0       	breq	.+4      	; 0x652 <i2c_sendStop+0x3a>
     64e:	21 97       	sbiw	r28, 0x01	; 1
{
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
     650:	c1 f7       	brne	.-16     	; 0x642 <i2c_sendStop+0x2a>
		if(!checkBit(TWCR, TWSTO))
			return;
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	08 95       	ret

0000065c <i2c_write>:

u8 i2c_write(u8 u8_data)
{
     65c:	0f 93       	push	r16
     65e:	1f 93       	push	r17
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send byte */
	TWDR = u8_data;
     664:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     668:	cc eb       	ldi	r28, 0xBC	; 188
     66a:	d0 e0       	ldi	r29, 0x00	; 0
     66c:	88 81       	ld	r24, Y
     66e:	62 e0       	ldi	r22, 0x02	; 2
     670:	a3 d0       	rcall	.+326    	; 0x7b8 <checkBit>
     672:	24 e0       	ldi	r18, 0x04	; 4
     674:	82 9f       	mul	r24, r18
     676:	c0 01       	movw	r24, r0
     678:	11 24       	eor	r1, r1
     67a:	80 68       	ori	r24, 0x80	; 128
     67c:	88 83       	st	Y, r24
     67e:	ce ef       	ldi	r28, 0xFE	; 254
     680:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     682:	0c eb       	ldi	r16, 0xBC	; 188
     684:	10 e0       	ldi	r17, 0x00	; 0
     686:	f8 01       	movw	r30, r16
     688:	80 81       	ld	r24, Z
     68a:	67 e0       	ldi	r22, 0x07	; 7
     68c:	95 d0       	rcall	.+298    	; 0x7b8 <checkBit>
     68e:	81 11       	cpse	r24, r1
     690:	0f c0       	rjmp	.+30     	; 0x6b0 <i2c_write+0x54>
     692:	21 97       	sbiw	r28, 0x01	; 1
	/* Send byte */
	TWDR = u8_data;
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     694:	c1 f7       	brne	.-16     	; 0x686 <i2c_write+0x2a>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     696:	8f ef       	ldi	r24, 0xFF	; 255
     698:	11 c0       	rjmp	.+34     	; 0x6bc <i2c_write+0x60>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     69a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     69e:	88 7f       	andi	r24, 0xF8	; 248
     6a0:	80 34       	cpi	r24, 0x40	; 64
     6a2:	21 f0       	breq	.+8      	; 0x6ac <i2c_write+0x50>
		return (TW_STATUS & 0xF8);
     6a4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6a8:	88 7f       	andi	r24, 0xF8	; 248
     6aa:	08 c0       	rjmp	.+16     	; 0x6bc <i2c_write+0x60>

	return I2C_NO_ERROR;
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	06 c0       	rjmp	.+12     	; 0x6bc <i2c_write+0x60>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     6b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6b4:	88 7f       	andi	r24, 0xF8	; 248
     6b6:	88 31       	cpi	r24, 0x18	; 24
     6b8:	81 f7       	brne	.-32     	; 0x69a <i2c_write+0x3e>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
}
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	08 95       	ret

000006c6 <i2c_readAck>:

u8 i2c_readAck(void)
{
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	cf 93       	push	r28
     6cc:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);
     6ce:	cc eb       	ldi	r28, 0xBC	; 188
     6d0:	d0 e0       	ldi	r29, 0x00	; 0
     6d2:	88 81       	ld	r24, Y
     6d4:	62 e0       	ldi	r22, 0x02	; 2
     6d6:	70 d0       	rcall	.+224    	; 0x7b8 <checkBit>
     6d8:	24 e0       	ldi	r18, 0x04	; 4
     6da:	82 9f       	mul	r24, r18
     6dc:	c0 01       	movw	r24, r0
     6de:	11 24       	eor	r1, r1
     6e0:	80 6c       	ori	r24, 0xC0	; 192
     6e2:	88 83       	st	Y, r24
     6e4:	ce ef       	ldi	r28, 0xFE	; 254
     6e6:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     6e8:	0c eb       	ldi	r16, 0xBC	; 188
     6ea:	10 e0       	ldi	r17, 0x00	; 0
     6ec:	f8 01       	movw	r30, r16
     6ee:	80 81       	ld	r24, Z
     6f0:	67 e0       	ldi	r22, 0x07	; 7
     6f2:	62 d0       	rcall	.+196    	; 0x7b8 <checkBit>
     6f4:	88 23       	and	r24, r24
     6f6:	19 f0       	breq	.+6      	; 0x6fe <i2c_readAck+0x38>
		return TWDR;
     6f8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6fc:	03 c0       	rjmp	.+6      	; 0x704 <i2c_readAck+0x3e>
     6fe:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     700:	a9 f7       	brne	.-22     	; 0x6ec <i2c_readAck+0x26>
		if(checkBit(TWCR, TWINT))
		return TWDR;

	return I2C_BUS_LOCKED;
     702:	8f ef       	ldi	r24, 0xFF	; 255
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	08 95       	ret

0000070e <i2c_readNak>:

u8 i2c_readNak(void)
{
     70e:	0f 93       	push	r16
     710:	1f 93       	push	r17
     712:	cf 93       	push	r28
     714:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     716:	cc eb       	ldi	r28, 0xBC	; 188
     718:	d0 e0       	ldi	r29, 0x00	; 0
     71a:	88 81       	ld	r24, Y
     71c:	62 e0       	ldi	r22, 0x02	; 2
     71e:	4c d0       	rcall	.+152    	; 0x7b8 <checkBit>
     720:	24 e0       	ldi	r18, 0x04	; 4
     722:	82 9f       	mul	r24, r18
     724:	c0 01       	movw	r24, r0
     726:	11 24       	eor	r1, r1
     728:	80 68       	ori	r24, 0x80	; 128
     72a:	88 83       	st	Y, r24
     72c:	ce ef       	ldi	r28, 0xFE	; 254
     72e:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     730:	0c eb       	ldi	r16, 0xBC	; 188
     732:	10 e0       	ldi	r17, 0x00	; 0
     734:	f8 01       	movw	r30, r16
     736:	80 81       	ld	r24, Z
     738:	67 e0       	ldi	r22, 0x07	; 7
     73a:	3e d0       	rcall	.+124    	; 0x7b8 <checkBit>
     73c:	88 23       	and	r24, r24
     73e:	19 f0       	breq	.+6      	; 0x746 <i2c_readNak+0x38>
			return TWDR;
     740:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     744:	03 c0       	rjmp	.+6      	; 0x74c <i2c_readNak+0x3e>
     746:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     748:	a9 f7       	brne	.-22     	; 0x734 <i2c_readNak+0x26>
		if(checkBit(TWCR, TWINT))
			return TWDR;

	return I2C_BUS_LOCKED;
     74a:	8f ef       	ldi	r24, 0xFF	; 255
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	08 95       	ret

00000756 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     756:	fc 01       	movw	r30, r24
     758:	94 2f       	mov	r25, r20
     75a:	20 81       	ld	r18, Z
     75c:	41 e0       	ldi	r20, 0x01	; 1
     75e:	50 e0       	ldi	r21, 0x00	; 0
     760:	06 2e       	mov	r0, r22
     762:	02 c0       	rjmp	.+4      	; 0x768 <updateBit+0x12>
     764:	44 0f       	add	r20, r20
     766:	55 1f       	adc	r21, r21
     768:	0a 94       	dec	r0
     76a:	e2 f7       	brpl	.-8      	; 0x764 <updateBit+0xe>
     76c:	40 95       	com	r20
     76e:	50 95       	com	r21
     770:	24 23       	and	r18, r20
     772:	49 2f       	mov	r20, r25
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	02 c0       	rjmp	.+4      	; 0x77c <updateBit+0x26>
     778:	44 0f       	add	r20, r20
     77a:	55 1f       	adc	r21, r21
     77c:	6a 95       	dec	r22
     77e:	e2 f7       	brpl	.-8      	; 0x778 <updateBit+0x22>
     780:	42 2b       	or	r20, r18
     782:	40 83       	st	Z, r20
     784:	08 95       	ret

00000786 <setBit>:
     786:	fc 01       	movw	r30, r24
     788:	40 81       	ld	r20, Z
     78a:	21 e0       	ldi	r18, 0x01	; 1
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	02 c0       	rjmp	.+4      	; 0x794 <setBit+0xe>
     790:	22 0f       	add	r18, r18
     792:	33 1f       	adc	r19, r19
     794:	6a 95       	dec	r22
     796:	e2 f7       	brpl	.-8      	; 0x790 <setBit+0xa>
     798:	24 2b       	or	r18, r20
     79a:	20 83       	st	Z, r18
     79c:	08 95       	ret

0000079e <clearBit>:
     79e:	fc 01       	movw	r30, r24
     7a0:	90 81       	ld	r25, Z
     7a2:	21 e0       	ldi	r18, 0x01	; 1
     7a4:	30 e0       	ldi	r19, 0x00	; 0
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <clearBit+0xe>
     7a8:	22 0f       	add	r18, r18
     7aa:	33 1f       	adc	r19, r19
     7ac:	6a 95       	dec	r22
     7ae:	e2 f7       	brpl	.-8      	; 0x7a8 <clearBit+0xa>
     7b0:	20 95       	com	r18
     7b2:	29 23       	and	r18, r25
     7b4:	20 83       	st	Z, r18
     7b6:	08 95       	ret

000007b8 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <checkBit+0x8>
     7bc:	95 95       	asr	r25
     7be:	87 95       	ror	r24
     7c0:	6a 95       	dec	r22
     7c2:	e2 f7       	brpl	.-8      	; 0x7bc <checkBit+0x4>
}
     7c4:	81 70       	andi	r24, 0x01	; 1
     7c6:	08 95       	ret

000007c8 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	ff 92       	push	r15
     7d0:	69 01       	movw	r12, r18
     7d2:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     7d4:	9b 01       	movw	r18, r22
     7d6:	ac 01       	movw	r20, r24
     7d8:	2c 19       	sub	r18, r12
     7da:	3d 09       	sbc	r19, r13
     7dc:	4e 09       	sbc	r20, r14
     7de:	5f 09       	sbc	r21, r15
     7e0:	a8 ee       	ldi	r26, 0xE8	; 232
     7e2:	b3 e0       	ldi	r27, 0x03	; 3
     7e4:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <__muluhisi3>
     7e8:	a7 01       	movw	r20, r14
     7ea:	96 01       	movw	r18, r12
     7ec:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     7f0:	c9 01       	movw	r24, r18
     7f2:	99 23       	and	r25, r25
     7f4:	24 f4       	brge	.+8      	; 0x7fe <calculateError+0x36>
     7f6:	88 27       	eor	r24, r24
     7f8:	99 27       	eor	r25, r25
     7fa:	82 1b       	sub	r24, r18
     7fc:	93 0b       	sbc	r25, r19
}
     7fe:	ff 90       	pop	r15
     800:	ef 90       	pop	r14
     802:	df 90       	pop	r13
     804:	cf 90       	pop	r12
     806:	08 95       	ret

00000808 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     808:	1f 92       	push	r1
     80a:	0f 92       	push	r0
     80c:	0f b6       	in	r0, 0x3f	; 63
     80e:	0f 92       	push	r0
     810:	11 24       	eor	r1, r1
     812:	0b b6       	in	r0, 0x3b	; 59
     814:	0f 92       	push	r0
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     81e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <u8_RLastReceivedIndex>
     822:	f0 e0       	ldi	r31, 0x00	; 0
     824:	8e b5       	in	r24, 0x2e	; 46
     826:	e0 5d       	subi	r30, 0xD0	; 208
     828:	fe 4f       	sbci	r31, 0xFE	; 254
     82a:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     82c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <u8_RLastReceivedIndex>
     830:	89 30       	cpi	r24, 0x09	; 9
     832:	30 f4       	brcc	.+12     	; 0x840 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     834:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <u8_RLastReceivedIndex>
     838:	8f 5f       	subi	r24, 0xFF	; 255
     83a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <u8_RLastReceivedIndex>
     83e:	02 c0       	rjmp	.+4      	; 0x844 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     840:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     84a:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <u8_TLastTransmittedIndex>
     84e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <u8_TLastRequestedIndex>
     852:	98 17       	cp	r25, r24
     854:	a1 f0       	breq	.+40     	; 0x87e <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     856:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <u8_TLastTransmittedIndex>
     85a:	f0 e0       	ldi	r31, 0x00	; 0
     85c:	e6 5c       	subi	r30, 0xC6	; 198
     85e:	fe 4f       	sbci	r31, 0xFE	; 254
     860:	80 81       	ld	r24, Z
     862:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     864:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <u8_TLastTransmittedIndex>
     868:	89 30       	cpi	r24, 0x09	; 9
     86a:	30 f4       	brcc	.+12     	; 0x878 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     86c:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <u8_TLastTransmittedIndex>
     870:	8f 5f       	subi	r24, 0xFF	; 255
     872:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <u8_TLastTransmittedIndex>
     876:	06 c0       	rjmp	.+12     	; 0x884 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     878:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <u8_TLastTransmittedIndex>
     87c:	03 c0       	rjmp	.+6      	; 0x884 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <b_TAvailable>
	}
}
     884:	ff 91       	pop	r31
     886:	ef 91       	pop	r30
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	0f 90       	pop	r0
     88e:	0b be       	out	0x3b, r0	; 59
     890:	0f 90       	pop	r0
     892:	0f be       	out	0x3f, r0	; 63
     894:	0f 90       	pop	r0
     896:	1f 90       	pop	r1
     898:	18 95       	reti

0000089a <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     89a:	8f 92       	push	r8
     89c:	9f 92       	push	r9
     89e:	af 92       	push	r10
     8a0:	bf 92       	push	r11
     8a2:	ef 92       	push	r14
     8a4:	ff 92       	push	r15
     8a6:	0f 93       	push	r16
     8a8:	1f 93       	push	r17
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <calculateTopRegister+0x16>
     8b0:	00 d0       	rcall	.+0      	; 0x8b2 <calculateTopRegister+0x18>
     8b2:	1f 92       	push	r1
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
     8b8:	48 01       	movw	r8, r16
     8ba:	59 01       	movw	r10, r18
     8bc:	42 30       	cpi	r20, 0x02	; 2
     8be:	09 f4       	brne	.+2      	; 0x8c2 <calculateTopRegister+0x28>
     8c0:	14 c1       	rjmp	.+552    	; 0xaea <calculateTopRegister+0x250>
     8c2:	43 30       	cpi	r20, 0x03	; 3
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <calculateTopRegister+0x2e>
     8c6:	8a c0       	rjmp	.+276    	; 0x9dc <calculateTopRegister+0x142>
     8c8:	41 30       	cpi	r20, 0x01	; 1
     8ca:	09 f0       	breq	.+2      	; 0x8ce <calculateTopRegister+0x34>
     8cc:	d3 c1       	rjmp	.+934    	; 0xc74 <calculateTopRegister+0x3da>
     8ce:	60 e0       	ldi	r22, 0x00	; 0
     8d0:	72 e1       	ldi	r23, 0x12	; 18
     8d2:	8a e7       	ldi	r24, 0x7A	; 122
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a9 01       	movw	r20, r18
     8d8:	98 01       	movw	r18, r16
     8da:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     8de:	da 01       	movw	r26, r20
     8e0:	c9 01       	movw	r24, r18
     8e2:	01 97       	sbiw	r24, 0x01	; 1
     8e4:	a1 09       	sbc	r26, r1
     8e6:	b1 09       	sbc	r27, r1
     8e8:	00 97       	sbiw	r24, 0x00	; 0
     8ea:	21 e0       	ldi	r18, 0x01	; 1
     8ec:	a2 07       	cpc	r26, r18
     8ee:	b1 05       	cpc	r27, r1
     8f0:	50 f4       	brcc	.+20     	; 0x906 <calculateTopRegister+0x6c>
     8f2:	49 ef       	ldi	r20, 0xF9	; 249
     8f4:	5f ef       	ldi	r21, 0xFF	; 255
     8f6:	6f ef       	ldi	r22, 0xFF	; 255
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	f7 01       	movw	r30, r14
     8fc:	40 83       	st	Z, r20
     8fe:	51 83       	std	Z+1, r21	; 0x01
     900:	62 83       	std	Z+2, r22	; 0x02
     902:	73 83       	std	Z+3, r23	; 0x03
     904:	ba c1       	rjmp	.+884    	; 0xc7a <calculateTopRegister+0x3e0>
     906:	60 e4       	ldi	r22, 0x40	; 64
     908:	72 e4       	ldi	r23, 0x42	; 66
     90a:	8f e0       	ldi	r24, 0x0F	; 15
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a5 01       	movw	r20, r10
     910:	94 01       	movw	r18, r8
     912:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     916:	da 01       	movw	r26, r20
     918:	c9 01       	movw	r24, r18
     91a:	01 97       	sbiw	r24, 0x01	; 1
     91c:	a1 09       	sbc	r26, r1
     91e:	b1 09       	sbc	r27, r1
     920:	00 97       	sbiw	r24, 0x00	; 0
     922:	f1 e0       	ldi	r31, 0x01	; 1
     924:	af 07       	cpc	r26, r31
     926:	b1 05       	cpc	r27, r1
     928:	50 f4       	brcc	.+20     	; 0x93e <calculateTopRegister+0xa4>
     92a:	4a ef       	ldi	r20, 0xFA	; 250
     92c:	5f ef       	ldi	r21, 0xFF	; 255
     92e:	6f ef       	ldi	r22, 0xFF	; 255
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	f7 01       	movw	r30, r14
     934:	40 83       	st	Z, r20
     936:	51 83       	std	Z+1, r21	; 0x01
     938:	62 83       	std	Z+2, r22	; 0x02
     93a:	73 83       	std	Z+3, r23	; 0x03
     93c:	9e c1       	rjmp	.+828    	; 0xc7a <calculateTopRegister+0x3e0>
     93e:	68 e4       	ldi	r22, 0x48	; 72
     940:	78 ee       	ldi	r23, 0xE8	; 232
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a5 01       	movw	r20, r10
     948:	94 01       	movw	r18, r8
     94a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     94e:	da 01       	movw	r26, r20
     950:	c9 01       	movw	r24, r18
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	a1 09       	sbc	r26, r1
     956:	b1 09       	sbc	r27, r1
     958:	00 97       	sbiw	r24, 0x00	; 0
     95a:	f1 e0       	ldi	r31, 0x01	; 1
     95c:	af 07       	cpc	r26, r31
     95e:	b1 05       	cpc	r27, r1
     960:	50 f4       	brcc	.+20     	; 0x976 <calculateTopRegister+0xdc>
     962:	4c ef       	ldi	r20, 0xFC	; 252
     964:	5f ef       	ldi	r21, 0xFF	; 255
     966:	6f ef       	ldi	r22, 0xFF	; 255
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	f7 01       	movw	r30, r14
     96c:	40 83       	st	Z, r20
     96e:	51 83       	std	Z+1, r21	; 0x01
     970:	62 83       	std	Z+2, r22	; 0x02
     972:	73 83       	std	Z+3, r23	; 0x03
     974:	82 c1       	rjmp	.+772    	; 0xc7a <calculateTopRegister+0x3e0>
     976:	62 e1       	ldi	r22, 0x12	; 18
     978:	7a e7       	ldi	r23, 0x7A	; 122
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a5 01       	movw	r20, r10
     980:	94 01       	movw	r18, r8
     982:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     986:	da 01       	movw	r26, r20
     988:	c9 01       	movw	r24, r18
     98a:	01 97       	sbiw	r24, 0x01	; 1
     98c:	a1 09       	sbc	r26, r1
     98e:	b1 09       	sbc	r27, r1
     990:	00 97       	sbiw	r24, 0x00	; 0
     992:	f1 e0       	ldi	r31, 0x01	; 1
     994:	af 07       	cpc	r26, r31
     996:	b1 05       	cpc	r27, r1
     998:	50 f4       	brcc	.+20     	; 0x9ae <calculateTopRegister+0x114>
     99a:	4e ef       	ldi	r20, 0xFE	; 254
     99c:	5f ef       	ldi	r21, 0xFF	; 255
     99e:	6f ef       	ldi	r22, 0xFF	; 255
     9a0:	70 e0       	ldi	r23, 0x00	; 0
     9a2:	f7 01       	movw	r30, r14
     9a4:	40 83       	st	Z, r20
     9a6:	51 83       	std	Z+1, r21	; 0x01
     9a8:	62 83       	std	Z+2, r22	; 0x02
     9aa:	73 83       	std	Z+3, r23	; 0x03
     9ac:	66 c1       	rjmp	.+716    	; 0xc7a <calculateTopRegister+0x3e0>
     9ae:	8f ef       	ldi	r24, 0xFF	; 255
     9b0:	9f ef       	ldi	r25, 0xFF	; 255
     9b2:	af ef       	ldi	r26, 0xFF	; 255
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	f7 01       	movw	r30, r14
     9b8:	80 83       	st	Z, r24
     9ba:	91 83       	std	Z+1, r25	; 0x01
     9bc:	a2 83       	std	Z+2, r26	; 0x02
     9be:	b3 83       	std	Z+3, r27	; 0x03
     9c0:	64 e8       	ldi	r22, 0x84	; 132
     9c2:	7e e1       	ldi	r23, 0x1E	; 30
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	a5 01       	movw	r20, r10
     9ca:	94 01       	movw	r18, r8
     9cc:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     9d0:	da 01       	movw	r26, r20
     9d2:	c9 01       	movw	r24, r18
     9d4:	01 97       	sbiw	r24, 0x01	; 1
     9d6:	a1 09       	sbc	r26, r1
     9d8:	b1 09       	sbc	r27, r1
     9da:	4f c1       	rjmp	.+670    	; 0xc7a <calculateTopRegister+0x3e0>
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	72 e1       	ldi	r23, 0x12	; 18
     9e0:	8a e7       	ldi	r24, 0x7A	; 122
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	a9 01       	movw	r20, r18
     9e6:	98 01       	movw	r18, r16
     9e8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     9ec:	da 01       	movw	r26, r20
     9ee:	c9 01       	movw	r24, r18
     9f0:	01 97       	sbiw	r24, 0x01	; 1
     9f2:	a1 09       	sbc	r26, r1
     9f4:	b1 09       	sbc	r27, r1
     9f6:	00 97       	sbiw	r24, 0x00	; 0
     9f8:	f1 e0       	ldi	r31, 0x01	; 1
     9fa:	af 07       	cpc	r26, r31
     9fc:	b1 05       	cpc	r27, r1
     9fe:	50 f4       	brcc	.+20     	; 0xa14 <calculateTopRegister+0x17a>
     a00:	49 ef       	ldi	r20, 0xF9	; 249
     a02:	5f ef       	ldi	r21, 0xFF	; 255
     a04:	6f ef       	ldi	r22, 0xFF	; 255
     a06:	70 e0       	ldi	r23, 0x00	; 0
     a08:	f7 01       	movw	r30, r14
     a0a:	40 83       	st	Z, r20
     a0c:	51 83       	std	Z+1, r21	; 0x01
     a0e:	62 83       	std	Z+2, r22	; 0x02
     a10:	73 83       	std	Z+3, r23	; 0x03
     a12:	33 c1       	rjmp	.+614    	; 0xc7a <calculateTopRegister+0x3e0>
     a14:	60 e4       	ldi	r22, 0x40	; 64
     a16:	72 e4       	ldi	r23, 0x42	; 66
     a18:	8f e0       	ldi	r24, 0x0F	; 15
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a5 01       	movw	r20, r10
     a1e:	94 01       	movw	r18, r8
     a20:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     a24:	da 01       	movw	r26, r20
     a26:	c9 01       	movw	r24, r18
     a28:	01 97       	sbiw	r24, 0x01	; 1
     a2a:	a1 09       	sbc	r26, r1
     a2c:	b1 09       	sbc	r27, r1
     a2e:	00 97       	sbiw	r24, 0x00	; 0
     a30:	f1 e0       	ldi	r31, 0x01	; 1
     a32:	af 07       	cpc	r26, r31
     a34:	b1 05       	cpc	r27, r1
     a36:	50 f4       	brcc	.+20     	; 0xa4c <calculateTopRegister+0x1b2>
     a38:	4a ef       	ldi	r20, 0xFA	; 250
     a3a:	5f ef       	ldi	r21, 0xFF	; 255
     a3c:	6f ef       	ldi	r22, 0xFF	; 255
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	f7 01       	movw	r30, r14
     a42:	40 83       	st	Z, r20
     a44:	51 83       	std	Z+1, r21	; 0x01
     a46:	62 83       	std	Z+2, r22	; 0x02
     a48:	73 83       	std	Z+3, r23	; 0x03
     a4a:	17 c1       	rjmp	.+558    	; 0xc7a <calculateTopRegister+0x3e0>
     a4c:	68 e4       	ldi	r22, 0x48	; 72
     a4e:	78 ee       	ldi	r23, 0xE8	; 232
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	a5 01       	movw	r20, r10
     a56:	94 01       	movw	r18, r8
     a58:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     a5c:	da 01       	movw	r26, r20
     a5e:	c9 01       	movw	r24, r18
     a60:	01 97       	sbiw	r24, 0x01	; 1
     a62:	a1 09       	sbc	r26, r1
     a64:	b1 09       	sbc	r27, r1
     a66:	00 97       	sbiw	r24, 0x00	; 0
     a68:	f1 e0       	ldi	r31, 0x01	; 1
     a6a:	af 07       	cpc	r26, r31
     a6c:	b1 05       	cpc	r27, r1
     a6e:	50 f4       	brcc	.+20     	; 0xa84 <calculateTopRegister+0x1ea>
     a70:	4c ef       	ldi	r20, 0xFC	; 252
     a72:	5f ef       	ldi	r21, 0xFF	; 255
     a74:	6f ef       	ldi	r22, 0xFF	; 255
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	f7 01       	movw	r30, r14
     a7a:	40 83       	st	Z, r20
     a7c:	51 83       	std	Z+1, r21	; 0x01
     a7e:	62 83       	std	Z+2, r22	; 0x02
     a80:	73 83       	std	Z+3, r23	; 0x03
     a82:	fb c0       	rjmp	.+502    	; 0xc7a <calculateTopRegister+0x3e0>
     a84:	62 e1       	ldi	r22, 0x12	; 18
     a86:	7a e7       	ldi	r23, 0x7A	; 122
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	a5 01       	movw	r20, r10
     a8e:	94 01       	movw	r18, r8
     a90:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     a94:	da 01       	movw	r26, r20
     a96:	c9 01       	movw	r24, r18
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	a1 09       	sbc	r26, r1
     a9c:	b1 09       	sbc	r27, r1
     a9e:	00 97       	sbiw	r24, 0x00	; 0
     aa0:	f1 e0       	ldi	r31, 0x01	; 1
     aa2:	af 07       	cpc	r26, r31
     aa4:	b1 05       	cpc	r27, r1
     aa6:	50 f4       	brcc	.+20     	; 0xabc <calculateTopRegister+0x222>
     aa8:	4e ef       	ldi	r20, 0xFE	; 254
     aaa:	5f ef       	ldi	r21, 0xFF	; 255
     aac:	6f ef       	ldi	r22, 0xFF	; 255
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	f7 01       	movw	r30, r14
     ab2:	40 83       	st	Z, r20
     ab4:	51 83       	std	Z+1, r21	; 0x01
     ab6:	62 83       	std	Z+2, r22	; 0x02
     ab8:	73 83       	std	Z+3, r23	; 0x03
     aba:	df c0       	rjmp	.+446    	; 0xc7a <calculateTopRegister+0x3e0>
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	9f ef       	ldi	r25, 0xFF	; 255
     ac0:	af ef       	ldi	r26, 0xFF	; 255
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	f7 01       	movw	r30, r14
     ac6:	80 83       	st	Z, r24
     ac8:	91 83       	std	Z+1, r25	; 0x01
     aca:	a2 83       	std	Z+2, r26	; 0x02
     acc:	b3 83       	std	Z+3, r27	; 0x03
     ace:	64 e8       	ldi	r22, 0x84	; 132
     ad0:	7e e1       	ldi	r23, 0x1E	; 30
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a5 01       	movw	r20, r10
     ad8:	94 01       	movw	r18, r8
     ada:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     ade:	da 01       	movw	r26, r20
     ae0:	c9 01       	movw	r24, r18
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	a1 09       	sbc	r26, r1
     ae6:	b1 09       	sbc	r27, r1
     ae8:	c8 c0       	rjmp	.+400    	; 0xc7a <calculateTopRegister+0x3e0>
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	72 e1       	ldi	r23, 0x12	; 18
     aee:	8a e7       	ldi	r24, 0x7A	; 122
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a9 01       	movw	r20, r18
     af4:	98 01       	movw	r18, r16
     af6:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     afa:	da 01       	movw	r26, r20
     afc:	c9 01       	movw	r24, r18
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	a1 09       	sbc	r26, r1
     b02:	b1 09       	sbc	r27, r1
     b04:	8f 3f       	cpi	r24, 0xFF	; 255
     b06:	91 05       	cpc	r25, r1
     b08:	a1 05       	cpc	r26, r1
     b0a:	b1 05       	cpc	r27, r1
     b0c:	09 f0       	breq	.+2      	; 0xb10 <calculateTopRegister+0x276>
     b0e:	50 f4       	brcc	.+20     	; 0xb24 <calculateTopRegister+0x28a>
     b10:	49 ef       	ldi	r20, 0xF9	; 249
     b12:	5f ef       	ldi	r21, 0xFF	; 255
     b14:	6f ef       	ldi	r22, 0xFF	; 255
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	f7 01       	movw	r30, r14
     b1a:	40 83       	st	Z, r20
     b1c:	51 83       	std	Z+1, r21	; 0x01
     b1e:	62 83       	std	Z+2, r22	; 0x02
     b20:	73 83       	std	Z+3, r23	; 0x03
     b22:	ab c0       	rjmp	.+342    	; 0xc7a <calculateTopRegister+0x3e0>
     b24:	60 e4       	ldi	r22, 0x40	; 64
     b26:	72 e4       	ldi	r23, 0x42	; 66
     b28:	8f e0       	ldi	r24, 0x0F	; 15
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	a5 01       	movw	r20, r10
     b2e:	94 01       	movw	r18, r8
     b30:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     b34:	da 01       	movw	r26, r20
     b36:	c9 01       	movw	r24, r18
     b38:	01 97       	sbiw	r24, 0x01	; 1
     b3a:	a1 09       	sbc	r26, r1
     b3c:	b1 09       	sbc	r27, r1
     b3e:	8f 3f       	cpi	r24, 0xFF	; 255
     b40:	91 05       	cpc	r25, r1
     b42:	a1 05       	cpc	r26, r1
     b44:	b1 05       	cpc	r27, r1
     b46:	09 f0       	breq	.+2      	; 0xb4a <calculateTopRegister+0x2b0>
     b48:	50 f4       	brcc	.+20     	; 0xb5e <calculateTopRegister+0x2c4>
     b4a:	4a ef       	ldi	r20, 0xFA	; 250
     b4c:	5f ef       	ldi	r21, 0xFF	; 255
     b4e:	6f ef       	ldi	r22, 0xFF	; 255
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	f7 01       	movw	r30, r14
     b54:	40 83       	st	Z, r20
     b56:	51 83       	std	Z+1, r21	; 0x01
     b58:	62 83       	std	Z+2, r22	; 0x02
     b5a:	73 83       	std	Z+3, r23	; 0x03
     b5c:	8e c0       	rjmp	.+284    	; 0xc7a <calculateTopRegister+0x3e0>
     b5e:	60 e9       	ldi	r22, 0x90	; 144
     b60:	70 ed       	ldi	r23, 0xD0	; 208
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a5 01       	movw	r20, r10
     b68:	94 01       	movw	r18, r8
     b6a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     b6e:	da 01       	movw	r26, r20
     b70:	c9 01       	movw	r24, r18
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8f 3f       	cpi	r24, 0xFF	; 255
     b7a:	91 05       	cpc	r25, r1
     b7c:	a1 05       	cpc	r26, r1
     b7e:	b1 05       	cpc	r27, r1
     b80:	09 f0       	breq	.+2      	; 0xb84 <calculateTopRegister+0x2ea>
     b82:	50 f4       	brcc	.+20     	; 0xb98 <calculateTopRegister+0x2fe>
     b84:	4b ef       	ldi	r20, 0xFB	; 251
     b86:	5f ef       	ldi	r21, 0xFF	; 255
     b88:	6f ef       	ldi	r22, 0xFF	; 255
     b8a:	70 e0       	ldi	r23, 0x00	; 0
     b8c:	f7 01       	movw	r30, r14
     b8e:	40 83       	st	Z, r20
     b90:	51 83       	std	Z+1, r21	; 0x01
     b92:	62 83       	std	Z+2, r22	; 0x02
     b94:	73 83       	std	Z+3, r23	; 0x03
     b96:	71 c0       	rjmp	.+226    	; 0xc7a <calculateTopRegister+0x3e0>
     b98:	68 e4       	ldi	r22, 0x48	; 72
     b9a:	78 ee       	ldi	r23, 0xE8	; 232
     b9c:	81 e0       	ldi	r24, 0x01	; 1
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	a5 01       	movw	r20, r10
     ba2:	94 01       	movw	r18, r8
     ba4:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     ba8:	da 01       	movw	r26, r20
     baa:	c9 01       	movw	r24, r18
     bac:	01 97       	sbiw	r24, 0x01	; 1
     bae:	a1 09       	sbc	r26, r1
     bb0:	b1 09       	sbc	r27, r1
     bb2:	8f 3f       	cpi	r24, 0xFF	; 255
     bb4:	91 05       	cpc	r25, r1
     bb6:	a1 05       	cpc	r26, r1
     bb8:	b1 05       	cpc	r27, r1
     bba:	09 f0       	breq	.+2      	; 0xbbe <calculateTopRegister+0x324>
     bbc:	50 f4       	brcc	.+20     	; 0xbd2 <calculateTopRegister+0x338>
     bbe:	4c ef       	ldi	r20, 0xFC	; 252
     bc0:	5f ef       	ldi	r21, 0xFF	; 255
     bc2:	6f ef       	ldi	r22, 0xFF	; 255
     bc4:	70 e0       	ldi	r23, 0x00	; 0
     bc6:	f7 01       	movw	r30, r14
     bc8:	40 83       	st	Z, r20
     bca:	51 83       	std	Z+1, r21	; 0x01
     bcc:	62 83       	std	Z+2, r22	; 0x02
     bce:	73 83       	std	Z+3, r23	; 0x03
     bd0:	54 c0       	rjmp	.+168    	; 0xc7a <calculateTopRegister+0x3e0>
     bd2:	64 e2       	ldi	r22, 0x24	; 36
     bd4:	74 ef       	ldi	r23, 0xF4	; 244
     bd6:	80 e0       	ldi	r24, 0x00	; 0
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a5 01       	movw	r20, r10
     bdc:	94 01       	movw	r18, r8
     bde:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     be2:	da 01       	movw	r26, r20
     be4:	c9 01       	movw	r24, r18
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	a1 09       	sbc	r26, r1
     bea:	b1 09       	sbc	r27, r1
     bec:	8f 3f       	cpi	r24, 0xFF	; 255
     bee:	91 05       	cpc	r25, r1
     bf0:	a1 05       	cpc	r26, r1
     bf2:	b1 05       	cpc	r27, r1
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <calculateTopRegister+0x35e>
     bf6:	50 f4       	brcc	.+20     	; 0xc0c <calculateTopRegister+0x372>
     bf8:	4d ef       	ldi	r20, 0xFD	; 253
     bfa:	5f ef       	ldi	r21, 0xFF	; 255
     bfc:	6f ef       	ldi	r22, 0xFF	; 255
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	f7 01       	movw	r30, r14
     c02:	40 83       	st	Z, r20
     c04:	51 83       	std	Z+1, r21	; 0x01
     c06:	62 83       	std	Z+2, r22	; 0x02
     c08:	73 83       	std	Z+3, r23	; 0x03
     c0a:	37 c0       	rjmp	.+110    	; 0xc7a <calculateTopRegister+0x3e0>
     c0c:	62 e1       	ldi	r22, 0x12	; 18
     c0e:	7a e7       	ldi	r23, 0x7A	; 122
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	a5 01       	movw	r20, r10
     c16:	94 01       	movw	r18, r8
     c18:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     c1c:	da 01       	movw	r26, r20
     c1e:	c9 01       	movw	r24, r18
     c20:	01 97       	sbiw	r24, 0x01	; 1
     c22:	a1 09       	sbc	r26, r1
     c24:	b1 09       	sbc	r27, r1
     c26:	8f 3f       	cpi	r24, 0xFF	; 255
     c28:	91 05       	cpc	r25, r1
     c2a:	a1 05       	cpc	r26, r1
     c2c:	b1 05       	cpc	r27, r1
     c2e:	09 f0       	breq	.+2      	; 0xc32 <calculateTopRegister+0x398>
     c30:	50 f4       	brcc	.+20     	; 0xc46 <calculateTopRegister+0x3ac>
     c32:	4e ef       	ldi	r20, 0xFE	; 254
     c34:	5f ef       	ldi	r21, 0xFF	; 255
     c36:	6f ef       	ldi	r22, 0xFF	; 255
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	f7 01       	movw	r30, r14
     c3c:	40 83       	st	Z, r20
     c3e:	51 83       	std	Z+1, r21	; 0x01
     c40:	62 83       	std	Z+2, r22	; 0x02
     c42:	73 83       	std	Z+3, r23	; 0x03
     c44:	1a c0       	rjmp	.+52     	; 0xc7a <calculateTopRegister+0x3e0>
     c46:	8f ef       	ldi	r24, 0xFF	; 255
     c48:	9f ef       	ldi	r25, 0xFF	; 255
     c4a:	af ef       	ldi	r26, 0xFF	; 255
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	f7 01       	movw	r30, r14
     c50:	80 83       	st	Z, r24
     c52:	91 83       	std	Z+1, r25	; 0x01
     c54:	a2 83       	std	Z+2, r26	; 0x02
     c56:	b3 83       	std	Z+3, r27	; 0x03
     c58:	64 e8       	ldi	r22, 0x84	; 132
     c5a:	7e e1       	ldi	r23, 0x1E	; 30
     c5c:	80 e0       	ldi	r24, 0x00	; 0
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	a5 01       	movw	r20, r10
     c62:	94 01       	movw	r18, r8
     c64:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	a1 09       	sbc	r26, r1
     c70:	b1 09       	sbc	r27, r1
     c72:	03 c0       	rjmp	.+6      	; 0xc7a <calculateTopRegister+0x3e0>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	dc 01       	movw	r26, r24
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	0f 90       	pop	r0
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	bf 90       	pop	r11
     c92:	af 90       	pop	r10
     c94:	9f 90       	pop	r9
     c96:	8f 90       	pop	r8
     c98:	08 95       	ret

00000c9a <__vector_15>:
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	0b b6       	in	r0, 0x3b	; 59
     ca6:	0f 92       	push	r0
     ca8:	2f 93       	push	r18
     caa:	3f 93       	push	r19
     cac:	4f 93       	push	r20
     cae:	5f 93       	push	r21
     cb0:	6f 93       	push	r22
     cb2:	7f 93       	push	r23
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <p_timer1Callbacks>
     cc4:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <p_timer1Callbacks+0x1>
     cc8:	09 95       	icall
     cca:	ff 91       	pop	r31
     ccc:	ef 91       	pop	r30
     cce:	bf 91       	pop	r27
     cd0:	af 91       	pop	r26
     cd2:	9f 91       	pop	r25
     cd4:	8f 91       	pop	r24
     cd6:	7f 91       	pop	r23
     cd8:	6f 91       	pop	r22
     cda:	5f 91       	pop	r21
     cdc:	4f 91       	pop	r20
     cde:	3f 91       	pop	r19
     ce0:	2f 91       	pop	r18
     ce2:	0f 90       	pop	r0
     ce4:	0b be       	out	0x3b, r0	; 59
     ce6:	0f 90       	pop	r0
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	0f 90       	pop	r0
     cec:	1f 90       	pop	r1
     cee:	18 95       	reti

00000cf0 <__vector_13>:
     cf0:	1f 92       	push	r1
     cf2:	0f 92       	push	r0
     cf4:	0f b6       	in	r0, 0x3f	; 63
     cf6:	0f 92       	push	r0
     cf8:	11 24       	eor	r1, r1
     cfa:	0b b6       	in	r0, 0x3b	; 59
     cfc:	0f 92       	push	r0
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	2f 93       	push	r18
     d04:	3f 93       	push	r19
     d06:	4f 93       	push	r20
     d08:	5f 93       	push	r21
     d0a:	6f 93       	push	r22
     d0c:	7f 93       	push	r23
     d0e:	8f 93       	push	r24
     d10:	9f 93       	push	r25
     d12:	af 93       	push	r26
     d14:	bf 93       	push	r27
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	ef 93       	push	r30
     d1c:	ff 93       	push	r31
     d1e:	c1 e8       	ldi	r28, 0x81	; 129
     d20:	d0 e0       	ldi	r29, 0x00	; 0
     d22:	88 81       	ld	r24, Y
     d24:	64 e0       	ldi	r22, 0x04	; 4
     d26:	48 dd       	rcall	.-1392   	; 0x7b8 <checkBit>
     d28:	18 2f       	mov	r17, r24
     d2a:	88 81       	ld	r24, Y
     d2c:	63 e0       	ldi	r22, 0x03	; 3
     d2e:	44 dd       	rcall	.-1400   	; 0x7b8 <checkBit>
     d30:	c1 2f       	mov	r28, r17
     d32:	cc 0f       	add	r28, r28
     d34:	cc 0f       	add	r28, r28
     d36:	cc 0f       	add	r28, r28
     d38:	24 e0       	ldi	r18, 0x04	; 4
     d3a:	82 9f       	mul	r24, r18
     d3c:	c0 01       	movw	r24, r0
     d3e:	11 24       	eor	r1, r1
     d40:	c8 2b       	or	r28, r24
     d42:	00 e8       	ldi	r16, 0x80	; 128
     d44:	10 e0       	ldi	r17, 0x00	; 0
     d46:	f8 01       	movw	r30, r16
     d48:	80 81       	ld	r24, Z
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	35 dd       	rcall	.-1430   	; 0x7b8 <checkBit>
     d4e:	d8 2f       	mov	r29, r24
     d50:	f8 01       	movw	r30, r16
     d52:	80 81       	ld	r24, Z
     d54:	60 e0       	ldi	r22, 0x00	; 0
     d56:	30 dd       	rcall	.-1440   	; 0x7b8 <checkBit>
     d58:	dd 0f       	add	r29, r29
     d5a:	8c 2b       	or	r24, r28
     d5c:	8d 2b       	or	r24, r29
     d5e:	88 30       	cpi	r24, 0x08	; 8
     d60:	18 f4       	brcc	.+6      	; 0xd68 <__vector_13+0x78>
     d62:	84 30       	cpi	r24, 0x04	; 4
     d64:	19 f4       	brne	.+6      	; 0xd6c <__vector_13+0x7c>
     d66:	08 c0       	rjmp	.+16     	; 0xd78 <__vector_13+0x88>
     d68:	80 fd       	sbrc	r24, 0
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <__vector_13+0x88>
     d6c:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <p_timer1Callbacks+0x2>
     d70:	f0 91 52 01 	lds	r31, 0x0152	; 0x800152 <p_timer1Callbacks+0x3>
     d74:	09 95       	icall
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <__vector_13+0x92>
     d78:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <p_timer1Callbacks>
     d7c:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <p_timer1Callbacks+0x1>
     d80:	09 95       	icall
     d82:	ff 91       	pop	r31
     d84:	ef 91       	pop	r30
     d86:	df 91       	pop	r29
     d88:	cf 91       	pop	r28
     d8a:	bf 91       	pop	r27
     d8c:	af 91       	pop	r26
     d8e:	9f 91       	pop	r25
     d90:	8f 91       	pop	r24
     d92:	7f 91       	pop	r23
     d94:	6f 91       	pop	r22
     d96:	5f 91       	pop	r21
     d98:	4f 91       	pop	r20
     d9a:	3f 91       	pop	r19
     d9c:	2f 91       	pop	r18
     d9e:	1f 91       	pop	r17
     da0:	0f 91       	pop	r16
     da2:	0f 90       	pop	r0
     da4:	0b be       	out	0x3b, r0	; 59
     da6:	0f 90       	pop	r0
     da8:	0f be       	out	0x3f, r0	; 63
     daa:	0f 90       	pop	r0
     dac:	1f 90       	pop	r1
     dae:	18 95       	reti

00000db0 <__vector_14>:
     db0:	1f 92       	push	r1
     db2:	0f 92       	push	r0
     db4:	0f b6       	in	r0, 0x3f	; 63
     db6:	0f 92       	push	r0
     db8:	11 24       	eor	r1, r1
     dba:	0b b6       	in	r0, 0x3b	; 59
     dbc:	0f 92       	push	r0
     dbe:	2f 93       	push	r18
     dc0:	3f 93       	push	r19
     dc2:	4f 93       	push	r20
     dc4:	5f 93       	push	r21
     dc6:	6f 93       	push	r22
     dc8:	7f 93       	push	r23
     dca:	8f 93       	push	r24
     dcc:	9f 93       	push	r25
     dce:	af 93       	push	r26
     dd0:	bf 93       	push	r27
     dd2:	ef 93       	push	r30
     dd4:	ff 93       	push	r31
     dd6:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <p_timer1Callbacks+0x4>
     dda:	f0 91 54 01 	lds	r31, 0x0154	; 0x800154 <p_timer1Callbacks+0x5>
     dde:	09 95       	icall
     de0:	ff 91       	pop	r31
     de2:	ef 91       	pop	r30
     de4:	bf 91       	pop	r27
     de6:	af 91       	pop	r26
     de8:	9f 91       	pop	r25
     dea:	8f 91       	pop	r24
     dec:	7f 91       	pop	r23
     dee:	6f 91       	pop	r22
     df0:	5f 91       	pop	r21
     df2:	4f 91       	pop	r20
     df4:	3f 91       	pop	r19
     df6:	2f 91       	pop	r18
     df8:	0f 90       	pop	r0
     dfa:	0b be       	out	0x3b, r0	; 59
     dfc:	0f 90       	pop	r0
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	0f 90       	pop	r0
     e02:	1f 90       	pop	r1
     e04:	18 95       	reti

00000e06 <__vector_12>:
     e06:	1f 92       	push	r1
     e08:	0f 92       	push	r0
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	0f 92       	push	r0
     e0e:	11 24       	eor	r1, r1
     e10:	0b b6       	in	r0, 0x3b	; 59
     e12:	0f 92       	push	r0
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	2f 93       	push	r18
     e1a:	3f 93       	push	r19
     e1c:	4f 93       	push	r20
     e1e:	5f 93       	push	r21
     e20:	6f 93       	push	r22
     e22:	7f 93       	push	r23
     e24:	8f 93       	push	r24
     e26:	9f 93       	push	r25
     e28:	af 93       	push	r26
     e2a:	bf 93       	push	r27
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	ef 93       	push	r30
     e32:	ff 93       	push	r31
     e34:	c1 e8       	ldi	r28, 0x81	; 129
     e36:	d0 e0       	ldi	r29, 0x00	; 0
     e38:	88 81       	ld	r24, Y
     e3a:	64 e0       	ldi	r22, 0x04	; 4
     e3c:	bd dc       	rcall	.-1670   	; 0x7b8 <checkBit>
     e3e:	18 2f       	mov	r17, r24
     e40:	88 81       	ld	r24, Y
     e42:	63 e0       	ldi	r22, 0x03	; 3
     e44:	b9 dc       	rcall	.-1678   	; 0x7b8 <checkBit>
     e46:	c1 2f       	mov	r28, r17
     e48:	cc 0f       	add	r28, r28
     e4a:	cc 0f       	add	r28, r28
     e4c:	cc 0f       	add	r28, r28
     e4e:	24 e0       	ldi	r18, 0x04	; 4
     e50:	82 9f       	mul	r24, r18
     e52:	c0 01       	movw	r24, r0
     e54:	11 24       	eor	r1, r1
     e56:	c8 2b       	or	r28, r24
     e58:	00 e8       	ldi	r16, 0x80	; 128
     e5a:	10 e0       	ldi	r17, 0x00	; 0
     e5c:	f8 01       	movw	r30, r16
     e5e:	80 81       	ld	r24, Z
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	aa dc       	rcall	.-1708   	; 0x7b8 <checkBit>
     e64:	d8 2f       	mov	r29, r24
     e66:	f8 01       	movw	r30, r16
     e68:	80 81       	ld	r24, Z
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	a5 dc       	rcall	.-1718   	; 0x7b8 <checkBit>
     e6e:	dd 0f       	add	r29, r29
     e70:	8c 2b       	or	r24, r28
     e72:	8d 2b       	or	r24, r29
     e74:	88 30       	cpi	r24, 0x08	; 8
     e76:	10 f0       	brcs	.+4      	; 0xe7c <__vector_12+0x76>
     e78:	80 ff       	sbrs	r24, 0
     e7a:	06 c0       	rjmp	.+12     	; 0xe88 <__vector_12+0x82>
     e7c:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <p_timer1Callbacks+0x6>
     e80:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <p_timer1Callbacks+0x7>
     e84:	09 95       	icall
     e86:	05 c0       	rjmp	.+10     	; 0xe92 <__vector_12+0x8c>
     e88:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <p_timer1Callbacks>
     e8c:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <p_timer1Callbacks+0x1>
     e90:	09 95       	icall
     e92:	ff 91       	pop	r31
     e94:	ef 91       	pop	r30
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	bf 91       	pop	r27
     e9c:	af 91       	pop	r26
     e9e:	9f 91       	pop	r25
     ea0:	8f 91       	pop	r24
     ea2:	7f 91       	pop	r23
     ea4:	6f 91       	pop	r22
     ea6:	5f 91       	pop	r21
     ea8:	4f 91       	pop	r20
     eaa:	3f 91       	pop	r19
     eac:	2f 91       	pop	r18
     eae:	1f 91       	pop	r17
     eb0:	0f 91       	pop	r16
     eb2:	0f 90       	pop	r0
     eb4:	0b be       	out	0x3b, r0	; 59
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <__vector_11>:
     ec0:	1f 92       	push	r1
     ec2:	0f 92       	push	r0
     ec4:	0f b6       	in	r0, 0x3f	; 63
     ec6:	0f 92       	push	r0
     ec8:	11 24       	eor	r1, r1
     eca:	0b b6       	in	r0, 0x3b	; 59
     ecc:	0f 92       	push	r0
     ece:	2f 93       	push	r18
     ed0:	3f 93       	push	r19
     ed2:	4f 93       	push	r20
     ed4:	5f 93       	push	r21
     ed6:	6f 93       	push	r22
     ed8:	7f 93       	push	r23
     eda:	8f 93       	push	r24
     edc:	9f 93       	push	r25
     ede:	af 93       	push	r26
     ee0:	bf 93       	push	r27
     ee2:	ef 93       	push	r30
     ee4:	ff 93       	push	r31
     ee6:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <p_timer2Callbacks>
     eea:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <p_timer2Callbacks+0x1>
     eee:	09 95       	icall
     ef0:	ff 91       	pop	r31
     ef2:	ef 91       	pop	r30
     ef4:	bf 91       	pop	r27
     ef6:	af 91       	pop	r26
     ef8:	9f 91       	pop	r25
     efa:	8f 91       	pop	r24
     efc:	7f 91       	pop	r23
     efe:	6f 91       	pop	r22
     f00:	5f 91       	pop	r21
     f02:	4f 91       	pop	r20
     f04:	3f 91       	pop	r19
     f06:	2f 91       	pop	r18
     f08:	0f 90       	pop	r0
     f0a:	0b be       	out	0x3b, r0	; 59
     f0c:	0f 90       	pop	r0
     f0e:	0f be       	out	0x3f, r0	; 63
     f10:	0f 90       	pop	r0
     f12:	1f 90       	pop	r1
     f14:	18 95       	reti

00000f16 <__vector_9>:
     f16:	1f 92       	push	r1
     f18:	0f 92       	push	r0
     f1a:	0f b6       	in	r0, 0x3f	; 63
     f1c:	0f 92       	push	r0
     f1e:	11 24       	eor	r1, r1
     f20:	0b b6       	in	r0, 0x3b	; 59
     f22:	0f 92       	push	r0
     f24:	2f 93       	push	r18
     f26:	3f 93       	push	r19
     f28:	4f 93       	push	r20
     f2a:	5f 93       	push	r21
     f2c:	6f 93       	push	r22
     f2e:	7f 93       	push	r23
     f30:	8f 93       	push	r24
     f32:	9f 93       	push	r25
     f34:	af 93       	push	r26
     f36:	bf 93       	push	r27
     f38:	ef 93       	push	r30
     f3a:	ff 93       	push	r31
     f3c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     f40:	63 e0       	ldi	r22, 0x03	; 3
     f42:	3a dc       	rcall	.-1932   	; 0x7b8 <checkBit>
     f44:	81 11       	cpse	r24, r1
     f46:	0b c0       	rjmp	.+22     	; 0xf5e <__vector_9+0x48>
     f48:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     f4c:	83 70       	andi	r24, 0x03	; 3
     f4e:	82 30       	cpi	r24, 0x02	; 2
     f50:	31 f0       	breq	.+12     	; 0xf5e <__vector_9+0x48>
     f52:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <p_timer2Callbacks+0x2>
     f56:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <p_timer2Callbacks+0x3>
     f5a:	09 95       	icall
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <__vector_9+0x52>
     f5e:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <p_timer2Callbacks>
     f62:	f0 91 5a 01 	lds	r31, 0x015A	; 0x80015a <p_timer2Callbacks+0x1>
     f66:	09 95       	icall
     f68:	ff 91       	pop	r31
     f6a:	ef 91       	pop	r30
     f6c:	bf 91       	pop	r27
     f6e:	af 91       	pop	r26
     f70:	9f 91       	pop	r25
     f72:	8f 91       	pop	r24
     f74:	7f 91       	pop	r23
     f76:	6f 91       	pop	r22
     f78:	5f 91       	pop	r21
     f7a:	4f 91       	pop	r20
     f7c:	3f 91       	pop	r19
     f7e:	2f 91       	pop	r18
     f80:	0f 90       	pop	r0
     f82:	0b be       	out	0x3b, r0	; 59
     f84:	0f 90       	pop	r0
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	0f 90       	pop	r0
     f8a:	1f 90       	pop	r1
     f8c:	18 95       	reti

00000f8e <__vector_10>:
     f8e:	1f 92       	push	r1
     f90:	0f 92       	push	r0
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	0f 92       	push	r0
     f96:	11 24       	eor	r1, r1
     f98:	0b b6       	in	r0, 0x3b	; 59
     f9a:	0f 92       	push	r0
     f9c:	2f 93       	push	r18
     f9e:	3f 93       	push	r19
     fa0:	4f 93       	push	r20
     fa2:	5f 93       	push	r21
     fa4:	6f 93       	push	r22
     fa6:	7f 93       	push	r23
     fa8:	8f 93       	push	r24
     faa:	9f 93       	push	r25
     fac:	af 93       	push	r26
     fae:	bf 93       	push	r27
     fb0:	ef 93       	push	r30
     fb2:	ff 93       	push	r31
     fb4:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <p_timer2Callbacks+0x4>
     fb8:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <p_timer2Callbacks+0x5>
     fbc:	09 95       	icall
     fbe:	ff 91       	pop	r31
     fc0:	ef 91       	pop	r30
     fc2:	bf 91       	pop	r27
     fc4:	af 91       	pop	r26
     fc6:	9f 91       	pop	r25
     fc8:	8f 91       	pop	r24
     fca:	7f 91       	pop	r23
     fcc:	6f 91       	pop	r22
     fce:	5f 91       	pop	r21
     fd0:	4f 91       	pop	r20
     fd2:	3f 91       	pop	r19
     fd4:	2f 91       	pop	r18
     fd6:	0f 90       	pop	r0
     fd8:	0b be       	out	0x3b, r0	; 59
     fda:	0f 90       	pop	r0
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	0f 90       	pop	r0
     fe0:	1f 90       	pop	r1
     fe2:	18 95       	reti

00000fe4 <__vector_34>:
     fe4:	1f 92       	push	r1
     fe6:	0f 92       	push	r0
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	0f 92       	push	r0
     fec:	11 24       	eor	r1, r1
     fee:	0b b6       	in	r0, 0x3b	; 59
     ff0:	0f 92       	push	r0
     ff2:	2f 93       	push	r18
     ff4:	3f 93       	push	r19
     ff6:	4f 93       	push	r20
     ff8:	5f 93       	push	r21
     ffa:	6f 93       	push	r22
     ffc:	7f 93       	push	r23
     ffe:	8f 93       	push	r24
    1000:	9f 93       	push	r25
    1002:	af 93       	push	r26
    1004:	bf 93       	push	r27
    1006:	ef 93       	push	r30
    1008:	ff 93       	push	r31
    100a:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <p_timer3Callbacks>
    100e:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <p_timer3Callbacks+0x1>
    1012:	09 95       	icall
    1014:	ff 91       	pop	r31
    1016:	ef 91       	pop	r30
    1018:	bf 91       	pop	r27
    101a:	af 91       	pop	r26
    101c:	9f 91       	pop	r25
    101e:	8f 91       	pop	r24
    1020:	7f 91       	pop	r23
    1022:	6f 91       	pop	r22
    1024:	5f 91       	pop	r21
    1026:	4f 91       	pop	r20
    1028:	3f 91       	pop	r19
    102a:	2f 91       	pop	r18
    102c:	0f 90       	pop	r0
    102e:	0b be       	out	0x3b, r0	; 59
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <__vector_32>:
    103a:	1f 92       	push	r1
    103c:	0f 92       	push	r0
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	0f 92       	push	r0
    1042:	11 24       	eor	r1, r1
    1044:	0b b6       	in	r0, 0x3b	; 59
    1046:	0f 92       	push	r0
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	ef 93       	push	r30
    1066:	ff 93       	push	r31
    1068:	c1 e9       	ldi	r28, 0x91	; 145
    106a:	d0 e0       	ldi	r29, 0x00	; 0
    106c:	88 81       	ld	r24, Y
    106e:	64 e0       	ldi	r22, 0x04	; 4
    1070:	a3 db       	rcall	.-2234   	; 0x7b8 <checkBit>
    1072:	18 2f       	mov	r17, r24
    1074:	88 81       	ld	r24, Y
    1076:	63 e0       	ldi	r22, 0x03	; 3
    1078:	9f db       	rcall	.-2242   	; 0x7b8 <checkBit>
    107a:	c1 2f       	mov	r28, r17
    107c:	cc 0f       	add	r28, r28
    107e:	cc 0f       	add	r28, r28
    1080:	cc 0f       	add	r28, r28
    1082:	24 e0       	ldi	r18, 0x04	; 4
    1084:	82 9f       	mul	r24, r18
    1086:	c0 01       	movw	r24, r0
    1088:	11 24       	eor	r1, r1
    108a:	c8 2b       	or	r28, r24
    108c:	00 e9       	ldi	r16, 0x90	; 144
    108e:	10 e0       	ldi	r17, 0x00	; 0
    1090:	f8 01       	movw	r30, r16
    1092:	80 81       	ld	r24, Z
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	90 db       	rcall	.-2272   	; 0x7b8 <checkBit>
    1098:	d8 2f       	mov	r29, r24
    109a:	f8 01       	movw	r30, r16
    109c:	80 81       	ld	r24, Z
    109e:	60 e0       	ldi	r22, 0x00	; 0
    10a0:	8b db       	rcall	.-2282   	; 0x7b8 <checkBit>
    10a2:	dd 0f       	add	r29, r29
    10a4:	8c 2b       	or	r24, r28
    10a6:	8d 2b       	or	r24, r29
    10a8:	88 30       	cpi	r24, 0x08	; 8
    10aa:	18 f4       	brcc	.+6      	; 0x10b2 <__vector_32+0x78>
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	19 f4       	brne	.+6      	; 0x10b6 <__vector_32+0x7c>
    10b0:	08 c0       	rjmp	.+16     	; 0x10c2 <__vector_32+0x88>
    10b2:	80 fd       	sbrc	r24, 0
    10b4:	06 c0       	rjmp	.+12     	; 0x10c2 <__vector_32+0x88>
    10b6:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <p_timer3Callbacks+0x2>
    10ba:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <p_timer3Callbacks+0x3>
    10be:	09 95       	icall
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <__vector_32+0x92>
    10c2:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <p_timer3Callbacks>
    10c6:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <p_timer3Callbacks+0x1>
    10ca:	09 95       	icall
    10cc:	ff 91       	pop	r31
    10ce:	ef 91       	pop	r30
    10d0:	df 91       	pop	r29
    10d2:	cf 91       	pop	r28
    10d4:	bf 91       	pop	r27
    10d6:	af 91       	pop	r26
    10d8:	9f 91       	pop	r25
    10da:	8f 91       	pop	r24
    10dc:	7f 91       	pop	r23
    10de:	6f 91       	pop	r22
    10e0:	5f 91       	pop	r21
    10e2:	4f 91       	pop	r20
    10e4:	3f 91       	pop	r19
    10e6:	2f 91       	pop	r18
    10e8:	1f 91       	pop	r17
    10ea:	0f 91       	pop	r16
    10ec:	0f 90       	pop	r0
    10ee:	0b be       	out	0x3b, r0	; 59
    10f0:	0f 90       	pop	r0
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	0f 90       	pop	r0
    10f6:	1f 90       	pop	r1
    10f8:	18 95       	reti

000010fa <__vector_33>:
    10fa:	1f 92       	push	r1
    10fc:	0f 92       	push	r0
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	0f 92       	push	r0
    1102:	11 24       	eor	r1, r1
    1104:	0b b6       	in	r0, 0x3b	; 59
    1106:	0f 92       	push	r0
    1108:	2f 93       	push	r18
    110a:	3f 93       	push	r19
    110c:	4f 93       	push	r20
    110e:	5f 93       	push	r21
    1110:	6f 93       	push	r22
    1112:	7f 93       	push	r23
    1114:	8f 93       	push	r24
    1116:	9f 93       	push	r25
    1118:	af 93       	push	r26
    111a:	bf 93       	push	r27
    111c:	ef 93       	push	r30
    111e:	ff 93       	push	r31
    1120:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <p_timer3Callbacks+0x4>
    1124:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <p_timer3Callbacks+0x5>
    1128:	09 95       	icall
    112a:	ff 91       	pop	r31
    112c:	ef 91       	pop	r30
    112e:	bf 91       	pop	r27
    1130:	af 91       	pop	r26
    1132:	9f 91       	pop	r25
    1134:	8f 91       	pop	r24
    1136:	7f 91       	pop	r23
    1138:	6f 91       	pop	r22
    113a:	5f 91       	pop	r21
    113c:	4f 91       	pop	r20
    113e:	3f 91       	pop	r19
    1140:	2f 91       	pop	r18
    1142:	0f 90       	pop	r0
    1144:	0b be       	out	0x3b, r0	; 59
    1146:	0f 90       	pop	r0
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	0f 90       	pop	r0
    114c:	1f 90       	pop	r1
    114e:	18 95       	reti

00001150 <__vector_31>:
    1150:	1f 92       	push	r1
    1152:	0f 92       	push	r0
    1154:	0f b6       	in	r0, 0x3f	; 63
    1156:	0f 92       	push	r0
    1158:	11 24       	eor	r1, r1
    115a:	0b b6       	in	r0, 0x3b	; 59
    115c:	0f 92       	push	r0
    115e:	0f 93       	push	r16
    1160:	1f 93       	push	r17
    1162:	2f 93       	push	r18
    1164:	3f 93       	push	r19
    1166:	4f 93       	push	r20
    1168:	5f 93       	push	r21
    116a:	6f 93       	push	r22
    116c:	7f 93       	push	r23
    116e:	8f 93       	push	r24
    1170:	9f 93       	push	r25
    1172:	af 93       	push	r26
    1174:	bf 93       	push	r27
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	ef 93       	push	r30
    117c:	ff 93       	push	r31
    117e:	c1 e9       	ldi	r28, 0x91	; 145
    1180:	d0 e0       	ldi	r29, 0x00	; 0
    1182:	88 81       	ld	r24, Y
    1184:	64 e0       	ldi	r22, 0x04	; 4
    1186:	18 db       	rcall	.-2512   	; 0x7b8 <checkBit>
    1188:	18 2f       	mov	r17, r24
    118a:	88 81       	ld	r24, Y
    118c:	63 e0       	ldi	r22, 0x03	; 3
    118e:	14 db       	rcall	.-2520   	; 0x7b8 <checkBit>
    1190:	c1 2f       	mov	r28, r17
    1192:	cc 0f       	add	r28, r28
    1194:	cc 0f       	add	r28, r28
    1196:	cc 0f       	add	r28, r28
    1198:	24 e0       	ldi	r18, 0x04	; 4
    119a:	82 9f       	mul	r24, r18
    119c:	c0 01       	movw	r24, r0
    119e:	11 24       	eor	r1, r1
    11a0:	c8 2b       	or	r28, r24
    11a2:	00 e9       	ldi	r16, 0x90	; 144
    11a4:	10 e0       	ldi	r17, 0x00	; 0
    11a6:	f8 01       	movw	r30, r16
    11a8:	80 81       	ld	r24, Z
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	05 db       	rcall	.-2550   	; 0x7b8 <checkBit>
    11ae:	d8 2f       	mov	r29, r24
    11b0:	f8 01       	movw	r30, r16
    11b2:	80 81       	ld	r24, Z
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	00 db       	rcall	.-2560   	; 0x7b8 <checkBit>
    11b8:	dd 0f       	add	r29, r29
    11ba:	8c 2b       	or	r24, r28
    11bc:	8d 2b       	or	r24, r29
    11be:	88 30       	cpi	r24, 0x08	; 8
    11c0:	10 f0       	brcs	.+4      	; 0x11c6 <__vector_31+0x76>
    11c2:	80 ff       	sbrs	r24, 0
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <__vector_31+0x82>
    11c6:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <p_timer3Callbacks+0x6>
    11ca:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <p_timer3Callbacks+0x7>
    11ce:	09 95       	icall
    11d0:	05 c0       	rjmp	.+10     	; 0x11dc <__vector_31+0x8c>
    11d2:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <p_timer3Callbacks>
    11d6:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <p_timer3Callbacks+0x1>
    11da:	09 95       	icall
    11dc:	ff 91       	pop	r31
    11de:	ef 91       	pop	r30
    11e0:	df 91       	pop	r29
    11e2:	cf 91       	pop	r28
    11e4:	bf 91       	pop	r27
    11e6:	af 91       	pop	r26
    11e8:	9f 91       	pop	r25
    11ea:	8f 91       	pop	r24
    11ec:	7f 91       	pop	r23
    11ee:	6f 91       	pop	r22
    11f0:	5f 91       	pop	r21
    11f2:	4f 91       	pop	r20
    11f4:	3f 91       	pop	r19
    11f6:	2f 91       	pop	r18
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	0f 90       	pop	r0
    11fe:	0b be       	out	0x3b, r0	; 59
    1200:	0f 90       	pop	r0
    1202:	0f be       	out	0x3f, r0	; 63
    1204:	0f 90       	pop	r0
    1206:	1f 90       	pop	r1
    1208:	18 95       	reti

0000120a <timer_init>:
    120a:	ef 92       	push	r14
    120c:	ff 92       	push	r15
    120e:	0f 93       	push	r16
    1210:	1f 93       	push	r17
    1212:	cf 93       	push	r28
    1214:	df 93       	push	r29
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	29 97       	sbiw	r28, 0x09	; 9
    121c:	0f b6       	in	r0, 0x3f	; 63
    121e:	f8 94       	cli
    1220:	de bf       	out	0x3e, r29	; 62
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	cd bf       	out	0x3d, r28	; 61
    1226:	4d 83       	std	Y+5, r20	; 0x05
    1228:	5e 83       	std	Y+6, r21	; 0x06
    122a:	6f 83       	std	Y+7, r22	; 0x07
    122c:	78 87       	std	Y+8, r23	; 0x08
    122e:	89 87       	std	Y+9, r24	; 0x09
    1230:	0e 81       	ldd	r16, Y+6	; 0x06
    1232:	1f 81       	ldd	r17, Y+7	; 0x07
    1234:	28 85       	ldd	r18, Y+8	; 0x08
    1236:	39 85       	ldd	r19, Y+9	; 0x09
    1238:	19 82       	std	Y+1, r1	; 0x01
    123a:	1a 82       	std	Y+2, r1	; 0x02
    123c:	1b 82       	std	Y+3, r1	; 0x03
    123e:	1c 82       	std	Y+4, r1	; 0x04
    1240:	42 30       	cpi	r20, 0x02	; 2
    1242:	09 f4       	brne	.+2      	; 0x1246 <timer_init+0x3c>
    1244:	9a c0       	rjmp	.+308    	; 0x137a <timer_init+0x170>
    1246:	43 30       	cpi	r20, 0x03	; 3
    1248:	09 f4       	brne	.+2      	; 0x124c <timer_init+0x42>
    124a:	22 c1       	rjmp	.+580    	; 0x1490 <timer_init+0x286>
    124c:	41 30       	cpi	r20, 0x01	; 1
    124e:	09 f0       	breq	.+2      	; 0x1252 <timer_init+0x48>
    1250:	b2 c1       	rjmp	.+868    	; 0x15b6 <timer_init+0x3ac>
    1252:	09 3f       	cpi	r16, 0xF9	; 249
    1254:	8f ef       	ldi	r24, 0xFF	; 255
    1256:	18 07       	cpc	r17, r24
    1258:	28 07       	cpc	r18, r24
    125a:	31 05       	cpc	r19, r1
    125c:	28 f0       	brcs	.+10     	; 0x1268 <timer_init+0x5e>
    125e:	09 83       	std	Y+1, r16	; 0x01
    1260:	1a 83       	std	Y+2, r17	; 0x02
    1262:	2b 83       	std	Y+3, r18	; 0x03
    1264:	3c 83       	std	Y+4, r19	; 0x04
    1266:	15 c0       	rjmp	.+42     	; 0x1292 <timer_init+0x88>
    1268:	ce 01       	movw	r24, r28
    126a:	01 96       	adiw	r24, 0x01	; 1
    126c:	7c 01       	movw	r14, r24
    126e:	4d 81       	ldd	r20, Y+5	; 0x05
    1270:	5e 81       	ldd	r21, Y+6	; 0x06
    1272:	6f 81       	ldd	r22, Y+7	; 0x07
    1274:	78 85       	ldd	r23, Y+8	; 0x08
    1276:	89 85       	ldd	r24, Y+9	; 0x09
    1278:	10 db       	rcall	.-2528   	; 0x89a <calculateTopRegister>
    127a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    127e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    1282:	64 e0       	ldi	r22, 0x04	; 4
    1284:	81 e8       	ldi	r24, 0x81	; 129
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	7e da       	rcall	.-2820   	; 0x786 <setBit>
    128a:	63 e0       	ldi	r22, 0x03	; 3
    128c:	81 e8       	ldi	r24, 0x81	; 129
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	7a da       	rcall	.-2828   	; 0x786 <setBit>
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	9a 81       	ldd	r25, Y+2	; 0x02
    1296:	ab 81       	ldd	r26, Y+3	; 0x03
    1298:	bc 81       	ldd	r27, Y+4	; 0x04
    129a:	8c 3f       	cpi	r24, 0xFC	; 252
    129c:	2f ef       	ldi	r18, 0xFF	; 255
    129e:	92 07       	cpc	r25, r18
    12a0:	a2 07       	cpc	r26, r18
    12a2:	b1 05       	cpc	r27, r1
    12a4:	59 f1       	breq	.+86     	; 0x12fc <timer_init+0xf2>
    12a6:	60 f4       	brcc	.+24     	; 0x12c0 <timer_init+0xb6>
    12a8:	89 3f       	cpi	r24, 0xF9	; 249
    12aa:	2f ef       	ldi	r18, 0xFF	; 255
    12ac:	92 07       	cpc	r25, r18
    12ae:	a2 07       	cpc	r26, r18
    12b0:	b1 05       	cpc	r27, r1
    12b2:	91 f0       	breq	.+36     	; 0x12d8 <timer_init+0xce>
    12b4:	8a 3f       	cpi	r24, 0xFA	; 250
    12b6:	9f 4f       	sbci	r25, 0xFF	; 255
    12b8:	af 4f       	sbci	r26, 0xFF	; 255
    12ba:	b1 05       	cpc	r27, r1
    12bc:	b1 f0       	breq	.+44     	; 0x12ea <timer_init+0xe0>
    12be:	38 c0       	rjmp	.+112    	; 0x1330 <timer_init+0x126>
    12c0:	8e 3f       	cpi	r24, 0xFE	; 254
    12c2:	2f ef       	ldi	r18, 0xFF	; 255
    12c4:	92 07       	cpc	r25, r18
    12c6:	a2 07       	cpc	r26, r18
    12c8:	b1 05       	cpc	r27, r1
    12ca:	09 f1       	breq	.+66     	; 0x130e <timer_init+0x104>
    12cc:	8f 3f       	cpi	r24, 0xFF	; 255
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	af 4f       	sbci	r26, 0xFF	; 255
    12d2:	b1 05       	cpc	r27, r1
    12d4:	29 f1       	breq	.+74     	; 0x1320 <timer_init+0x116>
    12d6:	2c c0       	rjmp	.+88     	; 0x1330 <timer_init+0x126>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	9a 83       	std	Y+2, r25	; 0x02
    12e4:	ab 83       	std	Y+3, r26	; 0x03
    12e6:	bc 83       	std	Y+4, r27	; 0x04
    12e8:	23 c0       	rjmp	.+70     	; 0x1330 <timer_init+0x126>
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	ab 83       	std	Y+3, r26	; 0x03
    12f8:	bc 83       	std	Y+4, r27	; 0x04
    12fa:	1a c0       	rjmp	.+52     	; 0x1330 <timer_init+0x126>
    12fc:	83 e0       	ldi	r24, 0x03	; 3
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	a0 e0       	ldi	r26, 0x00	; 0
    1302:	b0 e0       	ldi	r27, 0x00	; 0
    1304:	89 83       	std	Y+1, r24	; 0x01
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	ab 83       	std	Y+3, r26	; 0x03
    130a:	bc 83       	std	Y+4, r27	; 0x04
    130c:	11 c0       	rjmp	.+34     	; 0x1330 <timer_init+0x126>
    130e:	84 e0       	ldi	r24, 0x04	; 4
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	89 83       	std	Y+1, r24	; 0x01
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	ab 83       	std	Y+3, r26	; 0x03
    131c:	bc 83       	std	Y+4, r27	; 0x04
    131e:	08 c0       	rjmp	.+16     	; 0x1330 <timer_init+0x126>
    1320:	85 e0       	ldi	r24, 0x05	; 5
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e0       	ldi	r26, 0x00	; 0
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	9a 83       	std	Y+2, r25	; 0x02
    132c:	ab 83       	std	Y+3, r26	; 0x03
    132e:	bc 83       	std	Y+4, r27	; 0x04
    1330:	49 81       	ldd	r20, Y+1	; 0x01
    1332:	5a 81       	ldd	r21, Y+2	; 0x02
    1334:	6b 81       	ldd	r22, Y+3	; 0x03
    1336:	7c 81       	ldd	r23, Y+4	; 0x04
    1338:	76 95       	lsr	r23
    133a:	67 95       	ror	r22
    133c:	57 95       	ror	r21
    133e:	47 95       	ror	r20
    1340:	76 95       	lsr	r23
    1342:	67 95       	ror	r22
    1344:	57 95       	ror	r21
    1346:	47 95       	ror	r20
    1348:	41 70       	andi	r20, 0x01	; 1
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	87 e5       	ldi	r24, 0x57	; 87
    134e:	91 e0       	ldi	r25, 0x01	; 1
    1350:	02 da       	rcall	.-3068   	; 0x756 <updateBit>
    1352:	49 81       	ldd	r20, Y+1	; 0x01
    1354:	5a 81       	ldd	r21, Y+2	; 0x02
    1356:	6b 81       	ldd	r22, Y+3	; 0x03
    1358:	7c 81       	ldd	r23, Y+4	; 0x04
    135a:	76 95       	lsr	r23
    135c:	67 95       	ror	r22
    135e:	57 95       	ror	r21
    1360:	47 95       	ror	r20
    1362:	41 70       	andi	r20, 0x01	; 1
    1364:	61 e0       	ldi	r22, 0x01	; 1
    1366:	87 e5       	ldi	r24, 0x57	; 87
    1368:	91 e0       	ldi	r25, 0x01	; 1
    136a:	f5 d9       	rcall	.-3094   	; 0x756 <updateBit>
    136c:	49 81       	ldd	r20, Y+1	; 0x01
    136e:	41 70       	andi	r20, 0x01	; 1
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	87 e5       	ldi	r24, 0x57	; 87
    1374:	91 e0       	ldi	r25, 0x01	; 1
    1376:	ef d9       	rcall	.-3106   	; 0x756 <updateBit>
    1378:	1e c1       	rjmp	.+572    	; 0x15b6 <timer_init+0x3ac>
    137a:	09 3f       	cpi	r16, 0xF9	; 249
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	18 07       	cpc	r17, r24
    1380:	28 07       	cpc	r18, r24
    1382:	31 05       	cpc	r19, r1
    1384:	28 f0       	brcs	.+10     	; 0x1390 <timer_init+0x186>
    1386:	09 83       	std	Y+1, r16	; 0x01
    1388:	1a 83       	std	Y+2, r17	; 0x02
    138a:	2b 83       	std	Y+3, r18	; 0x03
    138c:	3c 83       	std	Y+4, r19	; 0x04
    138e:	0f c0       	rjmp	.+30     	; 0x13ae <timer_init+0x1a4>
    1390:	ce 01       	movw	r24, r28
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	7c 01       	movw	r14, r24
    1396:	4d 81       	ldd	r20, Y+5	; 0x05
    1398:	5e 81       	ldd	r21, Y+6	; 0x06
    139a:	6f 81       	ldd	r22, Y+7	; 0x07
    139c:	78 85       	ldd	r23, Y+8	; 0x08
    139e:	89 85       	ldd	r24, Y+9	; 0x09
    13a0:	7c da       	rcall	.-2824   	; 0x89a <calculateTopRegister>
    13a2:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    13a6:	61 e0       	ldi	r22, 0x01	; 1
    13a8:	80 eb       	ldi	r24, 0xB0	; 176
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	ec d9       	rcall	.-3112   	; 0x786 <setBit>
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	ab 81       	ldd	r26, Y+3	; 0x03
    13b4:	bc 81       	ldd	r27, Y+4	; 0x04
    13b6:	fc 01       	movw	r30, r24
    13b8:	37 96       	adiw	r30, 0x07	; 7
    13ba:	e7 30       	cpi	r30, 0x07	; 7
    13bc:	f1 05       	cpc	r31, r1
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <timer_init+0x1b8>
    13c0:	42 c0       	rjmp	.+132    	; 0x1446 <timer_init+0x23c>
    13c2:	ea 5b       	subi	r30, 0xBA	; 186
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	0c 94 c9 16 	jmp	0x2d92	; 0x2d92 <__tablejump2__>
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a0 e0       	ldi	r26, 0x00	; 0
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	ab 83       	std	Y+3, r26	; 0x03
    13d8:	bc 83       	std	Y+4, r27	; 0x04
    13da:	35 c0       	rjmp	.+106    	; 0x1446 <timer_init+0x23c>
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	a0 e0       	ldi	r26, 0x00	; 0
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	89 83       	std	Y+1, r24	; 0x01
    13e6:	9a 83       	std	Y+2, r25	; 0x02
    13e8:	ab 83       	std	Y+3, r26	; 0x03
    13ea:	bc 83       	std	Y+4, r27	; 0x04
    13ec:	2c c0       	rjmp	.+88     	; 0x1446 <timer_init+0x23c>
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	a0 e0       	ldi	r26, 0x00	; 0
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	ab 83       	std	Y+3, r26	; 0x03
    13fc:	bc 83       	std	Y+4, r27	; 0x04
    13fe:	23 c0       	rjmp	.+70     	; 0x1446 <timer_init+0x23c>
    1400:	84 e0       	ldi	r24, 0x04	; 4
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e0       	ldi	r26, 0x00	; 0
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	ab 83       	std	Y+3, r26	; 0x03
    140e:	bc 83       	std	Y+4, r27	; 0x04
    1410:	1a c0       	rjmp	.+52     	; 0x1446 <timer_init+0x23c>
    1412:	85 e0       	ldi	r24, 0x05	; 5
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	a0 e0       	ldi	r26, 0x00	; 0
    1418:	b0 e0       	ldi	r27, 0x00	; 0
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	ab 83       	std	Y+3, r26	; 0x03
    1420:	bc 83       	std	Y+4, r27	; 0x04
    1422:	11 c0       	rjmp	.+34     	; 0x1446 <timer_init+0x23c>
    1424:	86 e0       	ldi	r24, 0x06	; 6
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	9a 83       	std	Y+2, r25	; 0x02
    1430:	ab 83       	std	Y+3, r26	; 0x03
    1432:	bc 83       	std	Y+4, r27	; 0x04
    1434:	08 c0       	rjmp	.+16     	; 0x1446 <timer_init+0x23c>
    1436:	87 e0       	ldi	r24, 0x07	; 7
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	a0 e0       	ldi	r26, 0x00	; 0
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	9a 83       	std	Y+2, r25	; 0x02
    1442:	ab 83       	std	Y+3, r26	; 0x03
    1444:	bc 83       	std	Y+4, r27	; 0x04
    1446:	49 81       	ldd	r20, Y+1	; 0x01
    1448:	5a 81       	ldd	r21, Y+2	; 0x02
    144a:	6b 81       	ldd	r22, Y+3	; 0x03
    144c:	7c 81       	ldd	r23, Y+4	; 0x04
    144e:	76 95       	lsr	r23
    1450:	67 95       	ror	r22
    1452:	57 95       	ror	r21
    1454:	47 95       	ror	r20
    1456:	76 95       	lsr	r23
    1458:	67 95       	ror	r22
    145a:	57 95       	ror	r21
    145c:	47 95       	ror	r20
    145e:	41 70       	andi	r20, 0x01	; 1
    1460:	62 e0       	ldi	r22, 0x02	; 2
    1462:	88 e5       	ldi	r24, 0x58	; 88
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	77 d9       	rcall	.-3346   	; 0x756 <updateBit>
    1468:	49 81       	ldd	r20, Y+1	; 0x01
    146a:	5a 81       	ldd	r21, Y+2	; 0x02
    146c:	6b 81       	ldd	r22, Y+3	; 0x03
    146e:	7c 81       	ldd	r23, Y+4	; 0x04
    1470:	76 95       	lsr	r23
    1472:	67 95       	ror	r22
    1474:	57 95       	ror	r21
    1476:	47 95       	ror	r20
    1478:	41 70       	andi	r20, 0x01	; 1
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	88 e5       	ldi	r24, 0x58	; 88
    147e:	91 e0       	ldi	r25, 0x01	; 1
    1480:	6a d9       	rcall	.-3372   	; 0x756 <updateBit>
    1482:	49 81       	ldd	r20, Y+1	; 0x01
    1484:	41 70       	andi	r20, 0x01	; 1
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	88 e5       	ldi	r24, 0x58	; 88
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	64 d9       	rcall	.-3384   	; 0x756 <updateBit>
    148e:	93 c0       	rjmp	.+294    	; 0x15b6 <timer_init+0x3ac>
    1490:	09 3f       	cpi	r16, 0xF9	; 249
    1492:	9f ef       	ldi	r25, 0xFF	; 255
    1494:	19 07       	cpc	r17, r25
    1496:	29 07       	cpc	r18, r25
    1498:	31 05       	cpc	r19, r1
    149a:	28 f0       	brcs	.+10     	; 0x14a6 <timer_init+0x29c>
    149c:	09 83       	std	Y+1, r16	; 0x01
    149e:	1a 83       	std	Y+2, r17	; 0x02
    14a0:	2b 83       	std	Y+3, r18	; 0x03
    14a2:	3c 83       	std	Y+4, r19	; 0x04
    14a4:	15 c0       	rjmp	.+42     	; 0x14d0 <timer_init+0x2c6>
    14a6:	ce 01       	movw	r24, r28
    14a8:	01 96       	adiw	r24, 0x01	; 1
    14aa:	7c 01       	movw	r14, r24
    14ac:	4d 81       	ldd	r20, Y+5	; 0x05
    14ae:	5e 81       	ldd	r21, Y+6	; 0x06
    14b0:	6f 81       	ldd	r22, Y+7	; 0x07
    14b2:	78 85       	ldd	r23, Y+8	; 0x08
    14b4:	89 85       	ldd	r24, Y+9	; 0x09
    14b6:	f1 d9       	rcall	.-3102   	; 0x89a <calculateTopRegister>
    14b8:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <__TEXT_REGION_LENGTH__+0x7e0097>
    14bc:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7e0096>
    14c0:	64 e0       	ldi	r22, 0x04	; 4
    14c2:	81 e9       	ldi	r24, 0x91	; 145
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	5f d9       	rcall	.-3394   	; 0x786 <setBit>
    14c8:	63 e0       	ldi	r22, 0x03	; 3
    14ca:	81 e9       	ldi	r24, 0x91	; 145
    14cc:	90 e0       	ldi	r25, 0x00	; 0
    14ce:	5b d9       	rcall	.-3402   	; 0x786 <setBit>
    14d0:	89 81       	ldd	r24, Y+1	; 0x01
    14d2:	9a 81       	ldd	r25, Y+2	; 0x02
    14d4:	ab 81       	ldd	r26, Y+3	; 0x03
    14d6:	bc 81       	ldd	r27, Y+4	; 0x04
    14d8:	8c 3f       	cpi	r24, 0xFC	; 252
    14da:	2f ef       	ldi	r18, 0xFF	; 255
    14dc:	92 07       	cpc	r25, r18
    14de:	a2 07       	cpc	r26, r18
    14e0:	b1 05       	cpc	r27, r1
    14e2:	59 f1       	breq	.+86     	; 0x153a <timer_init+0x330>
    14e4:	60 f4       	brcc	.+24     	; 0x14fe <timer_init+0x2f4>
    14e6:	89 3f       	cpi	r24, 0xF9	; 249
    14e8:	2f ef       	ldi	r18, 0xFF	; 255
    14ea:	92 07       	cpc	r25, r18
    14ec:	a2 07       	cpc	r26, r18
    14ee:	b1 05       	cpc	r27, r1
    14f0:	91 f0       	breq	.+36     	; 0x1516 <timer_init+0x30c>
    14f2:	8a 3f       	cpi	r24, 0xFA	; 250
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	af 4f       	sbci	r26, 0xFF	; 255
    14f8:	b1 05       	cpc	r27, r1
    14fa:	b1 f0       	breq	.+44     	; 0x1528 <timer_init+0x31e>
    14fc:	38 c0       	rjmp	.+112    	; 0x156e <timer_init+0x364>
    14fe:	8e 3f       	cpi	r24, 0xFE	; 254
    1500:	2f ef       	ldi	r18, 0xFF	; 255
    1502:	92 07       	cpc	r25, r18
    1504:	a2 07       	cpc	r26, r18
    1506:	b1 05       	cpc	r27, r1
    1508:	09 f1       	breq	.+66     	; 0x154c <timer_init+0x342>
    150a:	8f 3f       	cpi	r24, 0xFF	; 255
    150c:	9f 4f       	sbci	r25, 0xFF	; 255
    150e:	af 4f       	sbci	r26, 0xFF	; 255
    1510:	b1 05       	cpc	r27, r1
    1512:	29 f1       	breq	.+74     	; 0x155e <timer_init+0x354>
    1514:	2c c0       	rjmp	.+88     	; 0x156e <timer_init+0x364>
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	ab 83       	std	Y+3, r26	; 0x03
    1524:	bc 83       	std	Y+4, r27	; 0x04
    1526:	23 c0       	rjmp	.+70     	; 0x156e <timer_init+0x364>
    1528:	82 e0       	ldi	r24, 0x02	; 2
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 e0       	ldi	r26, 0x00	; 0
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	ab 83       	std	Y+3, r26	; 0x03
    1536:	bc 83       	std	Y+4, r27	; 0x04
    1538:	1a c0       	rjmp	.+52     	; 0x156e <timer_init+0x364>
    153a:	83 e0       	ldi	r24, 0x03	; 3
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	a0 e0       	ldi	r26, 0x00	; 0
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	9a 83       	std	Y+2, r25	; 0x02
    1546:	ab 83       	std	Y+3, r26	; 0x03
    1548:	bc 83       	std	Y+4, r27	; 0x04
    154a:	11 c0       	rjmp	.+34     	; 0x156e <timer_init+0x364>
    154c:	84 e0       	ldi	r24, 0x04	; 4
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	ab 83       	std	Y+3, r26	; 0x03
    155a:	bc 83       	std	Y+4, r27	; 0x04
    155c:	08 c0       	rjmp	.+16     	; 0x156e <timer_init+0x364>
    155e:	85 e0       	ldi	r24, 0x05	; 5
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a0 e0       	ldi	r26, 0x00	; 0
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	89 83       	std	Y+1, r24	; 0x01
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	ab 83       	std	Y+3, r26	; 0x03
    156c:	bc 83       	std	Y+4, r27	; 0x04
    156e:	49 81       	ldd	r20, Y+1	; 0x01
    1570:	5a 81       	ldd	r21, Y+2	; 0x02
    1572:	6b 81       	ldd	r22, Y+3	; 0x03
    1574:	7c 81       	ldd	r23, Y+4	; 0x04
    1576:	76 95       	lsr	r23
    1578:	67 95       	ror	r22
    157a:	57 95       	ror	r21
    157c:	47 95       	ror	r20
    157e:	76 95       	lsr	r23
    1580:	67 95       	ror	r22
    1582:	57 95       	ror	r21
    1584:	47 95       	ror	r20
    1586:	41 70       	andi	r20, 0x01	; 1
    1588:	62 e0       	ldi	r22, 0x02	; 2
    158a:	86 e4       	ldi	r24, 0x46	; 70
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	e3 d8       	rcall	.-3642   	; 0x756 <updateBit>
    1590:	49 81       	ldd	r20, Y+1	; 0x01
    1592:	5a 81       	ldd	r21, Y+2	; 0x02
    1594:	6b 81       	ldd	r22, Y+3	; 0x03
    1596:	7c 81       	ldd	r23, Y+4	; 0x04
    1598:	76 95       	lsr	r23
    159a:	67 95       	ror	r22
    159c:	57 95       	ror	r21
    159e:	47 95       	ror	r20
    15a0:	41 70       	andi	r20, 0x01	; 1
    15a2:	61 e0       	ldi	r22, 0x01	; 1
    15a4:	86 e4       	ldi	r24, 0x46	; 70
    15a6:	91 e0       	ldi	r25, 0x01	; 1
    15a8:	d6 d8       	rcall	.-3668   	; 0x756 <updateBit>
    15aa:	49 81       	ldd	r20, Y+1	; 0x01
    15ac:	41 70       	andi	r20, 0x01	; 1
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	86 e4       	ldi	r24, 0x46	; 70
    15b2:	91 e0       	ldi	r25, 0x01	; 1
    15b4:	d0 d8       	rcall	.-3680   	; 0x756 <updateBit>
    15b6:	29 96       	adiw	r28, 0x09	; 9
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	08 95       	ret

000015d0 <timer_start>:
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <timer_start+0x6>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <timer_start+0x8>
    15d8:	1f 92       	push	r1
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	42 30       	cpi	r20, 0x02	; 2
    15e0:	f1 f0       	breq	.+60     	; 0x161e <timer_start+0x4e>
    15e2:	43 30       	cpi	r20, 0x03	; 3
    15e4:	a9 f1       	breq	.+106    	; 0x1650 <timer_start+0x80>
    15e6:	41 30       	cpi	r20, 0x01	; 1
    15e8:	09 f0       	breq	.+2      	; 0x15ec <timer_start+0x1c>
    15ea:	4a c0       	rjmp	.+148    	; 0x1680 <timer_start+0xb0>
    15ec:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <u8_timer1ClockSource>
    15f0:	42 fb       	bst	r20, 2
    15f2:	44 27       	eor	r20, r20
    15f4:	40 f9       	bld	r20, 0
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	81 e8       	ldi	r24, 0x81	; 129
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	ac d8       	rcall	.-3752   	; 0x756 <updateBit>
    15fe:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <u8_timer1ClockSource>
    1602:	46 95       	lsr	r20
    1604:	41 70       	andi	r20, 0x01	; 1
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	81 e8       	ldi	r24, 0x81	; 129
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a4 d8       	rcall	.-3768   	; 0x756 <updateBit>
    160e:	40 91 57 01 	lds	r20, 0x0157	; 0x800157 <u8_timer1ClockSource>
    1612:	41 70       	andi	r20, 0x01	; 1
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	81 e8       	ldi	r24, 0x81	; 129
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9d d8       	rcall	.-3782   	; 0x756 <updateBit>
    161c:	31 c0       	rjmp	.+98     	; 0x1680 <timer_start+0xb0>
    161e:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <u8_timer2ClockSource>
    1622:	42 fb       	bst	r20, 2
    1624:	44 27       	eor	r20, r20
    1626:	40 f9       	bld	r20, 0
    1628:	62 e0       	ldi	r22, 0x02	; 2
    162a:	81 eb       	ldi	r24, 0xB1	; 177
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	93 d8       	rcall	.-3802   	; 0x756 <updateBit>
    1630:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <u8_timer2ClockSource>
    1634:	46 95       	lsr	r20
    1636:	41 70       	andi	r20, 0x01	; 1
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	81 eb       	ldi	r24, 0xB1	; 177
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	8b d8       	rcall	.-3818   	; 0x756 <updateBit>
    1640:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <u8_timer2ClockSource>
    1644:	41 70       	andi	r20, 0x01	; 1
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	81 eb       	ldi	r24, 0xB1	; 177
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	84 d8       	rcall	.-3832   	; 0x756 <updateBit>
    164e:	18 c0       	rjmp	.+48     	; 0x1680 <timer_start+0xb0>
    1650:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <u8_timer3ClockSource>
    1654:	42 fb       	bst	r20, 2
    1656:	44 27       	eor	r20, r20
    1658:	40 f9       	bld	r20, 0
    165a:	62 e0       	ldi	r22, 0x02	; 2
    165c:	81 e9       	ldi	r24, 0x91	; 145
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	7a d8       	rcall	.-3852   	; 0x756 <updateBit>
    1662:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <u8_timer3ClockSource>
    1666:	46 95       	lsr	r20
    1668:	41 70       	andi	r20, 0x01	; 1
    166a:	61 e0       	ldi	r22, 0x01	; 1
    166c:	81 e9       	ldi	r24, 0x91	; 145
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	72 d8       	rcall	.-3868   	; 0x756 <updateBit>
    1672:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <u8_timer3ClockSource>
    1676:	41 70       	andi	r20, 0x01	; 1
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	81 e9       	ldi	r24, 0x91	; 145
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	6b d8       	rcall	.-3882   	; 0x756 <updateBit>
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	08 95       	ret

00001690 <timer_enableInterrupt>:
    1690:	cf 92       	push	r12
    1692:	df 92       	push	r13
    1694:	ff 92       	push	r15
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	00 d0       	rcall	.+0      	; 0x16a0 <timer_enableInterrupt+0x10>
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <timer_enableInterrupt+0x12>
    16a2:	1f 92       	push	r1
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	49 83       	std	Y+1, r20	; 0x01
    16aa:	5a 83       	std	Y+2, r21	; 0x02
    16ac:	6b 83       	std	Y+3, r22	; 0x03
    16ae:	7c 83       	std	Y+4, r23	; 0x04
    16b0:	8d 83       	std	Y+5, r24	; 0x05
    16b2:	12 2f       	mov	r17, r18
    16b4:	42 30       	cpi	r20, 0x02	; 2
    16b6:	09 f4       	brne	.+2      	; 0x16ba <timer_enableInterrupt+0x2a>
    16b8:	63 c0       	rjmp	.+198    	; 0x1780 <timer_enableInterrupt+0xf0>
    16ba:	43 30       	cpi	r20, 0x03	; 3
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <timer_enableInterrupt+0x30>
    16be:	9f c0       	rjmp	.+318    	; 0x17fe <timer_enableInterrupt+0x16e>
    16c0:	41 30       	cpi	r20, 0x01	; 1
    16c2:	09 f0       	breq	.+2      	; 0x16c6 <timer_enableInterrupt+0x36>
    16c4:	03 c1       	rjmp	.+518    	; 0x18cc <timer_enableInterrupt+0x23c>
    16c6:	0f 2e       	mov	r0, r31
    16c8:	f1 e8       	ldi	r31, 0x81	; 129
    16ca:	cf 2e       	mov	r12, r31
    16cc:	d1 2c       	mov	r13, r1
    16ce:	f0 2d       	mov	r31, r0
    16d0:	f6 01       	movw	r30, r12
    16d2:	80 81       	ld	r24, Z
    16d4:	64 e0       	ldi	r22, 0x04	; 4
    16d6:	70 d8       	rcall	.-3872   	; 0x7b8 <checkBit>
    16d8:	08 2f       	mov	r16, r24
    16da:	f6 01       	movw	r30, r12
    16dc:	80 81       	ld	r24, Z
    16de:	63 e0       	ldi	r22, 0x03	; 3
    16e0:	6b d8       	rcall	.-3882   	; 0x7b8 <checkBit>
    16e2:	00 0f       	add	r16, r16
    16e4:	00 0f       	add	r16, r16
    16e6:	00 0f       	add	r16, r16
    16e8:	f4 e0       	ldi	r31, 0x04	; 4
    16ea:	8f 9f       	mul	r24, r31
    16ec:	c0 01       	movw	r24, r0
    16ee:	11 24       	eor	r1, r1
    16f0:	08 2b       	or	r16, r24
    16f2:	68 94       	set
    16f4:	cc 24       	eor	r12, r12
    16f6:	c7 f8       	bld	r12, 7
    16f8:	d1 2c       	mov	r13, r1
    16fa:	f6 01       	movw	r30, r12
    16fc:	80 81       	ld	r24, Z
    16fe:	61 e0       	ldi	r22, 0x01	; 1
    1700:	5b d8       	rcall	.-3914   	; 0x7b8 <checkBit>
    1702:	f8 2e       	mov	r15, r24
    1704:	f6 01       	movw	r30, r12
    1706:	80 81       	ld	r24, Z
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	56 d8       	rcall	.-3924   	; 0x7b8 <checkBit>
    170c:	80 2b       	or	r24, r16
    170e:	ff 0c       	add	r15, r15
    1710:	8f 29       	or	r24, r15
    1712:	11 30       	cpi	r17, 0x01	; 1
    1714:	d9 f0       	breq	.+54     	; 0x174c <timer_enableInterrupt+0xbc>
    1716:	28 f0       	brcs	.+10     	; 0x1722 <timer_enableInterrupt+0x92>
    1718:	12 30       	cpi	r17, 0x02	; 2
    171a:	21 f1       	breq	.+72     	; 0x1764 <timer_enableInterrupt+0xd4>
    171c:	13 30       	cpi	r17, 0x03	; 3
    171e:	39 f1       	breq	.+78     	; 0x176e <timer_enableInterrupt+0xde>
    1720:	d5 c0       	rjmp	.+426    	; 0x18cc <timer_enableInterrupt+0x23c>
    1722:	88 30       	cpi	r24, 0x08	; 8
    1724:	38 f4       	brcc	.+14     	; 0x1734 <timer_enableInterrupt+0xa4>
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	61 f0       	breq	.+24     	; 0x1742 <timer_enableInterrupt+0xb2>
    172a:	60 e0       	ldi	r22, 0x00	; 0
    172c:	8f e6       	ldi	r24, 0x6F	; 111
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	2a d8       	rcall	.-4012   	; 0x786 <setBit>
    1732:	cc c0       	rjmp	.+408    	; 0x18cc <timer_enableInterrupt+0x23c>
    1734:	80 fd       	sbrc	r24, 0
    1736:	05 c0       	rjmp	.+10     	; 0x1742 <timer_enableInterrupt+0xb2>
    1738:	65 e0       	ldi	r22, 0x05	; 5
    173a:	8f e6       	ldi	r24, 0x6F	; 111
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	23 d8       	rcall	.-4026   	; 0x786 <setBit>
    1740:	c5 c0       	rjmp	.+394    	; 0x18cc <timer_enableInterrupt+0x23c>
    1742:	61 e0       	ldi	r22, 0x01	; 1
    1744:	8f e6       	ldi	r24, 0x6F	; 111
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	1e d8       	rcall	.-4036   	; 0x786 <setBit>
    174a:	c0 c0       	rjmp	.+384    	; 0x18cc <timer_enableInterrupt+0x23c>
    174c:	88 30       	cpi	r24, 0x08	; 8
    174e:	18 f4       	brcc	.+6      	; 0x1756 <timer_enableInterrupt+0xc6>
    1750:	84 30       	cpi	r24, 0x04	; 4
    1752:	19 f4       	brne	.+6      	; 0x175a <timer_enableInterrupt+0xca>
    1754:	bb c0       	rjmp	.+374    	; 0x18cc <timer_enableInterrupt+0x23c>
    1756:	80 fd       	sbrc	r24, 0
    1758:	b9 c0       	rjmp	.+370    	; 0x18cc <timer_enableInterrupt+0x23c>
    175a:	61 e0       	ldi	r22, 0x01	; 1
    175c:	8f e6       	ldi	r24, 0x6F	; 111
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	12 d8       	rcall	.-4060   	; 0x786 <setBit>
    1762:	b4 c0       	rjmp	.+360    	; 0x18cc <timer_enableInterrupt+0x23c>
    1764:	62 e0       	ldi	r22, 0x02	; 2
    1766:	8f e6       	ldi	r24, 0x6F	; 111
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0d d8       	rcall	.-4070   	; 0x786 <setBit>
    176c:	af c0       	rjmp	.+350    	; 0x18cc <timer_enableInterrupt+0x23c>
    176e:	88 30       	cpi	r24, 0x08	; 8
    1770:	10 f0       	brcs	.+4      	; 0x1776 <timer_enableInterrupt+0xe6>
    1772:	80 ff       	sbrs	r24, 0
    1774:	ab c0       	rjmp	.+342    	; 0x18cc <timer_enableInterrupt+0x23c>
    1776:	65 e0       	ldi	r22, 0x05	; 5
    1778:	8f e6       	ldi	r24, 0x6F	; 111
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	04 d8       	rcall	.-4088   	; 0x786 <setBit>
    177e:	a6 c0       	rjmp	.+332    	; 0x18cc <timer_enableInterrupt+0x23c>
    1780:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1784:	63 e0       	ldi	r22, 0x03	; 3
    1786:	18 d8       	rcall	.-4048   	; 0x7b8 <checkBit>
    1788:	08 2f       	mov	r16, r24
    178a:	0f 2e       	mov	r0, r31
    178c:	f0 eb       	ldi	r31, 0xB0	; 176
    178e:	cf 2e       	mov	r12, r31
    1790:	d1 2c       	mov	r13, r1
    1792:	f0 2d       	mov	r31, r0
    1794:	f6 01       	movw	r30, r12
    1796:	80 81       	ld	r24, Z
    1798:	61 e0       	ldi	r22, 0x01	; 1
    179a:	0e d8       	rcall	.-4068   	; 0x7b8 <checkBit>
    179c:	00 0f       	add	r16, r16
    179e:	00 0f       	add	r16, r16
    17a0:	88 0f       	add	r24, r24
    17a2:	08 2b       	or	r16, r24
    17a4:	f6 01       	movw	r30, r12
    17a6:	80 81       	ld	r24, Z
    17a8:	60 e0       	ldi	r22, 0x00	; 0
    17aa:	06 d8       	rcall	.-4084   	; 0x7b8 <checkBit>
    17ac:	80 2b       	or	r24, r16
    17ae:	11 30       	cpi	r17, 0x01	; 1
    17b0:	a1 f0       	breq	.+40     	; 0x17da <timer_enableInterrupt+0x14a>
    17b2:	18 f0       	brcs	.+6      	; 0x17ba <timer_enableInterrupt+0x12a>
    17b4:	12 30       	cpi	r17, 0x02	; 2
    17b6:	e9 f0       	breq	.+58     	; 0x17f2 <timer_enableInterrupt+0x162>
    17b8:	89 c0       	rjmp	.+274    	; 0x18cc <timer_enableInterrupt+0x23c>
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	40 f4       	brcc	.+16     	; 0x17ce <timer_enableInterrupt+0x13e>
    17be:	82 30       	cpi	r24, 0x02	; 2
    17c0:	31 f0       	breq	.+12     	; 0x17ce <timer_enableInterrupt+0x13e>
    17c2:	60 e0       	ldi	r22, 0x00	; 0
    17c4:	80 e7       	ldi	r24, 0x70	; 112
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    17cc:	7f c0       	rjmp	.+254    	; 0x18cc <timer_enableInterrupt+0x23c>
    17ce:	61 e0       	ldi	r22, 0x01	; 1
    17d0:	80 e7       	ldi	r24, 0x70	; 112
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    17d8:	79 c0       	rjmp	.+242    	; 0x18cc <timer_enableInterrupt+0x23c>
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <timer_enableInterrupt+0x150>
    17de:	76 c0       	rjmp	.+236    	; 0x18cc <timer_enableInterrupt+0x23c>
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	09 f4       	brne	.+2      	; 0x17e6 <timer_enableInterrupt+0x156>
    17e4:	73 c0       	rjmp	.+230    	; 0x18cc <timer_enableInterrupt+0x23c>
    17e6:	61 e0       	ldi	r22, 0x01	; 1
    17e8:	80 e7       	ldi	r24, 0x70	; 112
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    17f0:	6d c0       	rjmp	.+218    	; 0x18cc <timer_enableInterrupt+0x23c>
    17f2:	62 e0       	ldi	r22, 0x02	; 2
    17f4:	80 e7       	ldi	r24, 0x70	; 112
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    17fc:	67 c0       	rjmp	.+206    	; 0x18cc <timer_enableInterrupt+0x23c>
    17fe:	0f 2e       	mov	r0, r31
    1800:	f1 e9       	ldi	r31, 0x91	; 145
    1802:	cf 2e       	mov	r12, r31
    1804:	d1 2c       	mov	r13, r1
    1806:	f0 2d       	mov	r31, r0
    1808:	f6 01       	movw	r30, r12
    180a:	80 81       	ld	r24, Z
    180c:	64 e0       	ldi	r22, 0x04	; 4
    180e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <checkBit>
    1812:	08 2f       	mov	r16, r24
    1814:	f6 01       	movw	r30, r12
    1816:	80 81       	ld	r24, Z
    1818:	63 e0       	ldi	r22, 0x03	; 3
    181a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <checkBit>
    181e:	00 0f       	add	r16, r16
    1820:	00 0f       	add	r16, r16
    1822:	00 0f       	add	r16, r16
    1824:	f4 e0       	ldi	r31, 0x04	; 4
    1826:	8f 9f       	mul	r24, r31
    1828:	c0 01       	movw	r24, r0
    182a:	11 24       	eor	r1, r1
    182c:	08 2b       	or	r16, r24
    182e:	0f 2e       	mov	r0, r31
    1830:	f0 e9       	ldi	r31, 0x90	; 144
    1832:	cf 2e       	mov	r12, r31
    1834:	d1 2c       	mov	r13, r1
    1836:	f0 2d       	mov	r31, r0
    1838:	f6 01       	movw	r30, r12
    183a:	80 81       	ld	r24, Z
    183c:	61 e0       	ldi	r22, 0x01	; 1
    183e:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <checkBit>
    1842:	f8 2e       	mov	r15, r24
    1844:	f6 01       	movw	r30, r12
    1846:	80 81       	ld	r24, Z
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <checkBit>
    184e:	ff 0c       	add	r15, r15
    1850:	80 2b       	or	r24, r16
    1852:	8f 29       	or	r24, r15
    1854:	11 30       	cpi	r17, 0x01	; 1
    1856:	f1 f0       	breq	.+60     	; 0x1894 <timer_enableInterrupt+0x204>
    1858:	28 f0       	brcs	.+10     	; 0x1864 <timer_enableInterrupt+0x1d4>
    185a:	12 30       	cpi	r17, 0x02	; 2
    185c:	41 f1       	breq	.+80     	; 0x18ae <timer_enableInterrupt+0x21e>
    185e:	13 30       	cpi	r17, 0x03	; 3
    1860:	61 f1       	breq	.+88     	; 0x18ba <timer_enableInterrupt+0x22a>
    1862:	34 c0       	rjmp	.+104    	; 0x18cc <timer_enableInterrupt+0x23c>
    1864:	88 30       	cpi	r24, 0x08	; 8
    1866:	40 f4       	brcc	.+16     	; 0x1878 <timer_enableInterrupt+0x1e8>
    1868:	84 30       	cpi	r24, 0x04	; 4
    186a:	71 f0       	breq	.+28     	; 0x1888 <timer_enableInterrupt+0x1f8>
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	81 e7       	ldi	r24, 0x71	; 113
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1876:	2a c0       	rjmp	.+84     	; 0x18cc <timer_enableInterrupt+0x23c>
    1878:	80 fd       	sbrc	r24, 0
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <timer_enableInterrupt+0x1f8>
    187c:	65 e0       	ldi	r22, 0x05	; 5
    187e:	81 e7       	ldi	r24, 0x71	; 113
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1886:	22 c0       	rjmp	.+68     	; 0x18cc <timer_enableInterrupt+0x23c>
    1888:	61 e0       	ldi	r22, 0x01	; 1
    188a:	81 e7       	ldi	r24, 0x71	; 113
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1892:	1c c0       	rjmp	.+56     	; 0x18cc <timer_enableInterrupt+0x23c>
    1894:	88 30       	cpi	r24, 0x08	; 8
    1896:	18 f4       	brcc	.+6      	; 0x189e <timer_enableInterrupt+0x20e>
    1898:	84 30       	cpi	r24, 0x04	; 4
    189a:	19 f4       	brne	.+6      	; 0x18a2 <timer_enableInterrupt+0x212>
    189c:	17 c0       	rjmp	.+46     	; 0x18cc <timer_enableInterrupt+0x23c>
    189e:	80 fd       	sbrc	r24, 0
    18a0:	15 c0       	rjmp	.+42     	; 0x18cc <timer_enableInterrupt+0x23c>
    18a2:	61 e0       	ldi	r22, 0x01	; 1
    18a4:	81 e7       	ldi	r24, 0x71	; 113
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    18ac:	0f c0       	rjmp	.+30     	; 0x18cc <timer_enableInterrupt+0x23c>
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	81 e7       	ldi	r24, 0x71	; 113
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <timer_enableInterrupt+0x23c>
    18ba:	88 30       	cpi	r24, 0x08	; 8
    18bc:	10 f0       	brcs	.+4      	; 0x18c2 <timer_enableInterrupt+0x232>
    18be:	80 ff       	sbrs	r24, 0
    18c0:	05 c0       	rjmp	.+10     	; 0x18cc <timer_enableInterrupt+0x23c>
    18c2:	65 e0       	ldi	r22, 0x05	; 5
    18c4:	81 e7       	ldi	r24, 0x71	; 113
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	0f 90       	pop	r0
    18d4:	0f 90       	pop	r0
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	1f 91       	pop	r17
    18dc:	0f 91       	pop	r16
    18de:	ff 90       	pop	r15
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	08 95       	ret

000018e6 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	00 d0       	rcall	.+0      	; 0x18f0 <timer_attachInterrupt+0xa>
    18f0:	00 d0       	rcall	.+0      	; 0x18f2 <timer_attachInterrupt+0xc>
    18f2:	1f 92       	push	r1
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    18f8:	42 30       	cpi	r20, 0x02	; 2
    18fa:	69 f0       	breq	.+26     	; 0x1916 <timer_attachInterrupt+0x30>
    18fc:	43 30       	cpi	r20, 0x03	; 3
    18fe:	a1 f0       	breq	.+40     	; 0x1928 <timer_attachInterrupt+0x42>
    1900:	41 30       	cpi	r20, 0x01	; 1
    1902:	d1 f4       	brne	.+52     	; 0x1938 <timer_attachInterrupt+0x52>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    1904:	e2 2f       	mov	r30, r18
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	ee 0f       	add	r30, r30
    190a:	ff 1f       	adc	r31, r31
    190c:	e1 5b       	subi	r30, 0xB1	; 177
    190e:	fe 4f       	sbci	r31, 0xFE	; 254
    1910:	11 83       	std	Z+1, r17	; 0x01
    1912:	00 83       	st	Z, r16
		#endif
			break;
    1914:	11 c0       	rjmp	.+34     	; 0x1938 <timer_attachInterrupt+0x52>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    1916:	e2 2f       	mov	r30, r18
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	e7 5a       	subi	r30, 0xA7	; 167
    1920:	fe 4f       	sbci	r31, 0xFE	; 254
    1922:	11 83       	std	Z+1, r17	; 0x01
    1924:	00 83       	st	Z, r16
		#endif
			break;
    1926:	08 c0       	rjmp	.+16     	; 0x1938 <timer_attachInterrupt+0x52>
		case TIMER3:
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
    1928:	e2 2f       	mov	r30, r18
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	ee 0f       	add	r30, r30
    192e:	ff 1f       	adc	r31, r31
    1930:	e9 5b       	subi	r30, 0xB9	; 185
    1932:	fe 4f       	sbci	r31, 0xFE	; 254
    1934:	11 83       	std	Z+1, r17	; 0x01
    1936:	00 83       	st	Z, r16
		#endif
			break;
	}
}
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	0f 90       	pop	r0
    193e:	0f 90       	pop	r0
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	1f 91       	pop	r17
    1948:	0f 91       	pop	r16
    194a:	08 95       	ret

0000194c <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    194c:	4f 92       	push	r4
    194e:	5f 92       	push	r5
    1950:	6f 92       	push	r6
    1952:	7f 92       	push	r7
    1954:	8f 92       	push	r8
    1956:	9f 92       	push	r9
    1958:	af 92       	push	r10
    195a:	bf 92       	push	r11
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	cf 93       	push	r28
    1966:	df 93       	push	r29
    1968:	4b 01       	movw	r8, r22
    196a:	5c 01       	movw	r10, r24
    196c:	ea 01       	movw	r28, r20
    196e:	0f 2e       	mov	r0, r31
    1970:	f0 e2       	ldi	r31, 0x20	; 32
    1972:	4f 2e       	mov	r4, r31
    1974:	f1 ea       	ldi	r31, 0xA1	; 161
    1976:	5f 2e       	mov	r5, r31
    1978:	f7 e0       	ldi	r31, 0x07	; 7
    197a:	6f 2e       	mov	r6, r31
    197c:	71 2c       	mov	r7, r1
    197e:	f0 2d       	mov	r31, r0
    1980:	c3 01       	movw	r24, r6
    1982:	b2 01       	movw	r22, r4
    1984:	a5 01       	movw	r20, r10
    1986:	94 01       	movw	r18, r8
    1988:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
    198c:	69 01       	movw	r12, r18
    198e:	7a 01       	movw	r14, r20
    1990:	c3 01       	movw	r24, r6
    1992:	b2 01       	movw	r22, r4
    1994:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
    1998:	ca 01       	movw	r24, r20
    199a:	b9 01       	movw	r22, r18
    199c:	a5 01       	movw	r20, r10
    199e:	94 01       	movw	r18, r8
    19a0:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <calculateError>
    19a4:	44 97       	sbiw	r24, 0x14	; 20
    19a6:	30 f4       	brcc	.+12     	; 0x19b4 <calculateUBRR+0x68>
    19a8:	d7 01       	movw	r26, r14
    19aa:	c6 01       	movw	r24, r12
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	a1 09       	sbc	r26, r1
    19b0:	b1 09       	sbc	r27, r1
    19b2:	0f c0       	rjmp	.+30     	; 0x19d2 <calculateUBRR+0x86>
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	88 83       	st	Y, r24
    19b8:	60 e4       	ldi	r22, 0x40	; 64
    19ba:	72 e4       	ldi	r23, 0x42	; 66
    19bc:	8f e0       	ldi	r24, 0x0F	; 15
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a5 01       	movw	r20, r10
    19c2:	94 01       	movw	r18, r8
    19c4:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <__udivmodsi4>
    19c8:	da 01       	movw	r26, r20
    19ca:	c9 01       	movw	r24, r18
    19cc:	01 97       	sbiw	r24, 0x01	; 1
    19ce:	a1 09       	sbc	r26, r1
    19d0:	b1 09       	sbc	r27, r1
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	bf 90       	pop	r11
    19e0:	af 90       	pop	r10
    19e2:	9f 90       	pop	r9
    19e4:	8f 90       	pop	r8
    19e6:	7f 90       	pop	r7
    19e8:	6f 90       	pop	r6
    19ea:	5f 90       	pop	r5
    19ec:	4f 90       	pop	r4
    19ee:	08 95       	ret

000019f0 <uart_init>:
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
    19fc:	2b 97       	sbiw	r28, 0x0b	; 11
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	f8 94       	cli
    1a02:	de bf       	out	0x3e, r29	; 62
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	cd bf       	out	0x3d, r28	; 61
    1a08:	0a 83       	std	Y+2, r16	; 0x02
    1a0a:	1b 83       	std	Y+3, r17	; 0x03
    1a0c:	2c 83       	std	Y+4, r18	; 0x04
    1a0e:	3d 83       	std	Y+5, r19	; 0x05
    1a10:	4e 83       	std	Y+6, r20	; 0x06
    1a12:	5f 83       	std	Y+7, r21	; 0x07
    1a14:	68 87       	std	Y+8, r22	; 0x08
    1a16:	79 87       	std	Y+9, r23	; 0x09
    1a18:	8a 87       	std	Y+10, r24	; 0x0a
    1a1a:	9b 87       	std	Y+11, r25	; 0x0b
    1a1c:	19 82       	std	Y+1, r1	; 0x01
    1a1e:	01 11       	cpse	r16, r1
    1a20:	8f c0       	rjmp	.+286    	; 0x1b40 <uart_init+0x150>
    1a22:	19 2f       	mov	r17, r25
    1a24:	e2 ec       	ldi	r30, 0xC2	; 194
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	8f 73       	andi	r24, 0x3F	; 63
    1a2c:	80 83       	st	Z, r24
    1a2e:	6b 81       	ldd	r22, Y+3	; 0x03
    1a30:	7c 81       	ldd	r23, Y+4	; 0x04
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	ae 01       	movw	r20, r28
    1a38:	4f 5f       	subi	r20, 0xFF	; 255
    1a3a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a3c:	87 df       	rcall	.-242    	; 0x194c <calculateUBRR>
    1a3e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1a42:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1a46:	49 81       	ldd	r20, Y+1	; 0x01
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	80 ec       	ldi	r24, 0xC0	; 192
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	0e 94 ab 03 	call	0x756	; 0x756 <updateBit>
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	82 30       	cpi	r24, 0x02	; 2
    1a56:	61 f1       	breq	.+88     	; 0x1ab0 <uart_init+0xc0>
    1a58:	28 f4       	brcc	.+10     	; 0x1a64 <uart_init+0x74>
    1a5a:	88 23       	and	r24, r24
    1a5c:	49 f0       	breq	.+18     	; 0x1a70 <uart_init+0x80>
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	b9 f0       	breq	.+46     	; 0x1a90 <uart_init+0xa0>
    1a62:	55 c0       	rjmp	.+170    	; 0x1b0e <uart_init+0x11e>
    1a64:	83 30       	cpi	r24, 0x03	; 3
    1a66:	a1 f1       	breq	.+104    	; 0x1ad0 <uart_init+0xe0>
    1a68:	84 30       	cpi	r24, 0x04	; 4
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <uart_init+0x7e>
    1a6c:	41 c0       	rjmp	.+130    	; 0x1af0 <uart_init+0x100>
    1a6e:	4f c0       	rjmp	.+158    	; 0x1b0e <uart_init+0x11e>
    1a70:	61 e0       	ldi	r22, 0x01	; 1
    1a72:	82 ec       	ldi	r24, 0xC2	; 194
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	82 ec       	ldi	r24, 0xC2	; 194
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1a84:	62 e0       	ldi	r22, 0x02	; 2
    1a86:	81 ec       	ldi	r24, 0xC1	; 193
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1a8e:	3f c0       	rjmp	.+126    	; 0x1b0e <uart_init+0x11e>
    1a90:	61 e0       	ldi	r22, 0x01	; 1
    1a92:	82 ec       	ldi	r24, 0xC2	; 194
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	82 ec       	ldi	r24, 0xC2	; 194
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1aa4:	62 e0       	ldi	r22, 0x02	; 2
    1aa6:	81 ec       	ldi	r24, 0xC1	; 193
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1aae:	2f c0       	rjmp	.+94     	; 0x1b0e <uart_init+0x11e>
    1ab0:	61 e0       	ldi	r22, 0x01	; 1
    1ab2:	82 ec       	ldi	r24, 0xC2	; 194
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1aba:	62 e0       	ldi	r22, 0x02	; 2
    1abc:	82 ec       	ldi	r24, 0xC2	; 194
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1ac4:	62 e0       	ldi	r22, 0x02	; 2
    1ac6:	81 ec       	ldi	r24, 0xC1	; 193
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1ace:	1f c0       	rjmp	.+62     	; 0x1b0e <uart_init+0x11e>
    1ad0:	61 e0       	ldi	r22, 0x01	; 1
    1ad2:	82 ec       	ldi	r24, 0xC2	; 194
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	82 ec       	ldi	r24, 0xC2	; 194
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1ae4:	62 e0       	ldi	r22, 0x02	; 2
    1ae6:	81 ec       	ldi	r24, 0xC1	; 193
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 cf 03 	call	0x79e	; 0x79e <clearBit>
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <uart_init+0x11e>
    1af0:	61 e0       	ldi	r22, 0x01	; 1
    1af2:	82 ec       	ldi	r24, 0xC2	; 194
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1afa:	62 e0       	ldi	r22, 0x02	; 2
    1afc:	82 ec       	ldi	r24, 0xC2	; 194
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1b04:	62 e0       	ldi	r22, 0x02	; 2
    1b06:	81 ec       	ldi	r24, 0xC1	; 193
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1b0e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1b10:	63 e0       	ldi	r22, 0x03	; 3
    1b12:	82 ec       	ldi	r24, 0xC2	; 194
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	0e 94 ab 03 	call	0x756	; 0x756 <updateBit>
    1b1a:	12 30       	cpi	r17, 0x02	; 2
    1b1c:	31 f4       	brne	.+12     	; 0x1b2a <uart_init+0x13a>
    1b1e:	e2 ec       	ldi	r30, 0xC2	; 194
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	8f 7c       	andi	r24, 0xCF	; 207
    1b26:	80 83       	st	Z, r24
    1b28:	0b c0       	rjmp	.+22     	; 0x1b40 <uart_init+0x150>
    1b2a:	65 e0       	ldi	r22, 0x05	; 5
    1b2c:	82 ec       	ldi	r24, 0xC2	; 194
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 c3 03 	call	0x786	; 0x786 <setBit>
    1b34:	41 2f       	mov	r20, r17
    1b36:	64 e0       	ldi	r22, 0x04	; 4
    1b38:	82 ec       	ldi	r24, 0xC2	; 194
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 ab 03 	call	0x756	; 0x756 <updateBit>
    1b40:	2b 96       	adiw	r28, 0x0b	; 11
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	0f 91       	pop	r16
    1b54:	08 95       	ret

00001b56 <uart_start>:
    1b56:	0f 93       	push	r16
    1b58:	1f 93       	push	r17
    1b5a:	cf 93       	push	r28
    1b5c:	df 93       	push	r29
    1b5e:	cd b7       	in	r28, 0x3d	; 61
    1b60:	de b7       	in	r29, 0x3e	; 62
    1b62:	2a 97       	sbiw	r28, 0x0a	; 10
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	6f 83       	std	Y+7, r22	; 0x07
    1b70:	01 11       	cpse	r16, r1
    1b72:	0c c0       	rjmp	.+24     	; 0x1b8c <uart_start+0x36>
    1b74:	45 2f       	mov	r20, r21
    1b76:	64 e0       	ldi	r22, 0x04	; 4
    1b78:	81 ec       	ldi	r24, 0xC1	; 193
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	0e 94 ab 03 	call	0x756	; 0x756 <updateBit>
    1b80:	4f 81       	ldd	r20, Y+7	; 0x07
    1b82:	63 e0       	ldi	r22, 0x03	; 3
    1b84:	81 ec       	ldi	r24, 0xC1	; 193
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	0e 94 ab 03 	call	0x756	; 0x756 <updateBit>
    1b8c:	2a 96       	adiw	r28, 0x0a	; 10
    1b8e:	0f b6       	in	r0, 0x3f	; 63
    1b90:	f8 94       	cli
    1b92:	de bf       	out	0x3e, r29	; 62
    1b94:	0f be       	out	0x3f, r0	; 63
    1b96:	cd bf       	out	0x3d, r28	; 61
    1b98:	df 91       	pop	r29
    1b9a:	cf 91       	pop	r28
    1b9c:	1f 91       	pop	r17
    1b9e:	0f 91       	pop	r16
    1ba0:	08 95       	ret

00001ba2 <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    1ba2:	ef 92       	push	r14
    1ba4:	ff 92       	push	r15
    1ba6:	0f 93       	push	r16
    1ba8:	1f 93       	push	r17
    1baa:	cf 93       	push	r28
    1bac:	df 93       	push	r29
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	2a 97       	sbiw	r28, 0x0a	; 10
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	f8 94       	cli
    1bb8:	de bf       	out	0x3e, r29	; 62
    1bba:	0f be       	out	0x3f, r0	; 63
    1bbc:	cd bf       	out	0x3d, r28	; 61
    1bbe:	09 83       	std	Y+1, r16	; 0x01
    1bc0:	1a 83       	std	Y+2, r17	; 0x02
    1bc2:	2b 83       	std	Y+3, r18	; 0x03
    1bc4:	3c 83       	std	Y+4, r19	; 0x04
    1bc6:	4d 83       	std	Y+5, r20	; 0x05
    1bc8:	5e 83       	std	Y+6, r21	; 0x06
    1bca:	6f 83       	std	Y+7, r22	; 0x07
    1bcc:	78 87       	std	Y+8, r23	; 0x08
    1bce:	89 87       	std	Y+9, r24	; 0x09
    1bd0:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    1bd2:	01 11       	cpse	r16, r1
    1bd4:	15 c0       	rjmp	.+42     	; 0x1c00 <uart_transmit+0x5e>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    1bd6:	00 ec       	ldi	r16, 0xC0	; 192
    1bd8:	10 e0       	ldi	r17, 0x00	; 0
    1bda:	f8 01       	movw	r30, r16
    1bdc:	80 81       	ld	r24, Z
    1bde:	65 e0       	ldi	r22, 0x05	; 5
    1be0:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <checkBit>
    1be4:	88 23       	and	r24, r24
    1be6:	c9 f3       	breq	.-14     	; 0x1bda <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
    1be8:	88 85       	ldd	r24, Y+8	; 0x08
    1bea:	84 30       	cpi	r24, 0x04	; 4
    1bec:	39 f4       	brne	.+14     	; 0x1bfc <uart_transmit+0x5a>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
    1bee:	4f 2d       	mov	r20, r15
    1bf0:	41 70       	andi	r20, 0x01	; 1
    1bf2:	60 e0       	ldi	r22, 0x00	; 0
    1bf4:	81 ec       	ldi	r24, 0xC1	; 193
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 ab 03 	call	0x756	; 0x756 <updateBit>
			UDR0 = (u8) u16_data;
    1bfc:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    1c00:	2a 96       	adiw	r28, 0x0a	; 10
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	de bf       	out	0x3e, r29	; 62
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	cd bf       	out	0x3d, r28	; 61
    1c0c:	df 91       	pop	r29
    1c0e:	cf 91       	pop	r28
    1c10:	1f 91       	pop	r17
    1c12:	0f 91       	pop	r16
    1c14:	ff 90       	pop	r15
    1c16:	ef 90       	pop	r14
    1c18:	08 95       	ret

00001c1a <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    1c1a:	1f 92       	push	r1
    1c1c:	0f 92       	push	r0
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	0f 92       	push	r0
    1c22:	11 24       	eor	r1, r1
    1c24:	0b b6       	in	r0, 0x3b	; 59
    1c26:	0f 92       	push	r0
    1c28:	2f 93       	push	r18
    1c2a:	3f 93       	push	r19
    1c2c:	4f 93       	push	r20
    1c2e:	5f 93       	push	r21
    1c30:	6f 93       	push	r22
    1c32:	7f 93       	push	r23
    1c34:	8f 93       	push	r24
    1c36:	9f 93       	push	r25
    1c38:	af 93       	push	r26
    1c3a:	bf 93       	push	r27
    1c3c:	ef 93       	push	r30
    1c3e:	ff 93       	push	r31
	p_wdgCallback();
    1c40:	e0 91 5f 01 	lds	r30, 0x015F	; 0x80015f <p_wdgCallback>
    1c44:	f0 91 60 01 	lds	r31, 0x0160	; 0x800160 <p_wdgCallback+0x1>
    1c48:	09 95       	icall
}
    1c4a:	ff 91       	pop	r31
    1c4c:	ef 91       	pop	r30
    1c4e:	bf 91       	pop	r27
    1c50:	af 91       	pop	r26
    1c52:	9f 91       	pop	r25
    1c54:	8f 91       	pop	r24
    1c56:	7f 91       	pop	r23
    1c58:	6f 91       	pop	r22
    1c5a:	5f 91       	pop	r21
    1c5c:	4f 91       	pop	r20
    1c5e:	3f 91       	pop	r19
    1c60:	2f 91       	pop	r18
    1c62:	0f 90       	pop	r0
    1c64:	0b be       	out	0x3b, r0	; 59
    1c66:	0f 90       	pop	r0
    1c68:	0f be       	out	0x3f, r0	; 63
    1c6a:	0f 90       	pop	r0
    1c6c:	1f 90       	pop	r1
    1c6e:	18 95       	reti

00001c70 <debug_init>:
	byteToASCIIHex(u8_ASCIIData + 4, u32_data >> 8);
	byteToASCIIHex(u8_ASCIIData + 6, u32_data);
	for (u8 i = 0; i < 8; i++)
		uart_transmit(s_debugUart, u8_ASCIIData[i]);
	uart_transmit(s_debugUart, '\n');
}
    1c70:	0f 93       	push	r16
    1c72:	1f 93       	push	r17
    1c74:	e1 e6       	ldi	r30, 0x61	; 97
    1c76:	f1 e0       	ldi	r31, 0x01	; 1
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	18 2f       	mov	r17, r24
    1c7c:	81 83       	std	Z+1, r24	; 0x01
    1c7e:	8b e4       	ldi	r24, 0x4B	; 75
    1c80:	82 83       	std	Z+2, r24	; 0x02
    1c82:	13 82       	std	Z+3, r1	; 0x03
    1c84:	14 82       	std	Z+4, r1	; 0x04
    1c86:	83 e0       	ldi	r24, 0x03	; 3
    1c88:	78 2f       	mov	r23, r24
    1c8a:	87 83       	std	Z+7, r24	; 0x07
    1c8c:	11 86       	std	Z+9, r1	; 0x09
    1c8e:	10 82       	st	Z, r1
    1c90:	10 86       	std	Z+8, r1	; 0x08
    1c92:	15 82       	std	Z+5, r1	; 0x05
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	68 2f       	mov	r22, r24
    1c98:	86 83       	std	Z+6, r24	; 0x06
    1c9a:	00 e0       	ldi	r16, 0x00	; 0
    1c9c:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1ca0:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1ca4:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1ca8:	50 e0       	ldi	r21, 0x00	; 0
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	a0 de       	rcall	.-704    	; 0x19f0 <uart_init>
    1cb0:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1cb4:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1cb8:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1cbc:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1cc0:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1cc4:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1cc8:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1ccc:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1cd0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1cd4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
    1cd8:	3e df       	rcall	.-388    	; 0x1b56 <uart_start>
    1cda:	1f 91       	pop	r17
    1cdc:	0f 91       	pop	r16
    1cde:	08 95       	ret

00001ce0 <debug_writeChar>:
    1ce0:	ef 92       	push	r14
    1ce2:	ff 92       	push	r15
    1ce4:	0f 93       	push	r16
    1ce6:	1f 93       	push	r17
    1ce8:	e8 2e       	mov	r14, r24
    1cea:	f1 2c       	mov	r15, r1
    1cec:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1cf0:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1cf4:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1cf8:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1cfc:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1d00:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1d04:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1d08:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1d0c:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1d10:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
    1d14:	46 df       	rcall	.-372    	; 0x1ba2 <uart_transmit>
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	08 95       	ret

00001d20 <debug_writeDecimal>:

void debug_writeDecimal(u16 u16_data)
{
    1d20:	cf 92       	push	r12
    1d22:	df 92       	push	r13
    1d24:	ef 92       	push	r14
    1d26:	ff 92       	push	r15
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	cf 93       	push	r28
    1d2e:	df 93       	push	r29
    1d30:	ec 01       	movw	r28, r24
	uart_transmit(s_debugUart, u16_data / 10000 % 10 + '0');
    1d32:	9c 01       	movw	r18, r24
    1d34:	32 95       	swap	r19
    1d36:	22 95       	swap	r18
    1d38:	2f 70       	andi	r18, 0x0F	; 15
    1d3a:	23 27       	eor	r18, r19
    1d3c:	3f 70       	andi	r19, 0x0F	; 15
    1d3e:	23 27       	eor	r18, r19
    1d40:	a7 e4       	ldi	r26, 0x47	; 71
    1d42:	b3 e0       	ldi	r27, 0x03	; 3
    1d44:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__umulhisi3>
    1d48:	7c 01       	movw	r14, r24
    1d4a:	f6 94       	lsr	r15
    1d4c:	e7 94       	ror	r14
    1d4e:	f6 94       	lsr	r15
    1d50:	e7 94       	ror	r14
    1d52:	f6 94       	lsr	r15
    1d54:	e7 94       	ror	r14
    1d56:	97 01       	movw	r18, r14
    1d58:	ad ec       	ldi	r26, 0xCD	; 205
    1d5a:	bc ec       	ldi	r27, 0xCC	; 204
    1d5c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__umulhisi3>
    1d60:	96 95       	lsr	r25
    1d62:	87 95       	ror	r24
    1d64:	96 95       	lsr	r25
    1d66:	87 95       	ror	r24
    1d68:	96 95       	lsr	r25
    1d6a:	87 95       	ror	r24
    1d6c:	9c 01       	movw	r18, r24
    1d6e:	22 0f       	add	r18, r18
    1d70:	33 1f       	adc	r19, r19
    1d72:	88 0f       	add	r24, r24
    1d74:	99 1f       	adc	r25, r25
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	88 0f       	add	r24, r24
    1d7c:	99 1f       	adc	r25, r25
    1d7e:	82 0f       	add	r24, r18
    1d80:	93 1f       	adc	r25, r19
    1d82:	e8 1a       	sub	r14, r24
    1d84:	f9 0a       	sbc	r15, r25
    1d86:	80 e3       	ldi	r24, 0x30	; 48
    1d88:	e8 0e       	add	r14, r24
    1d8a:	f1 1c       	adc	r15, r1
    1d8c:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1d90:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1d94:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1d98:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1d9c:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1da0:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1da4:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1da8:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1dac:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1db0:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
    1db4:	f6 de       	rcall	.-532    	; 0x1ba2 <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 1000 % 10 + '0');
    1db6:	9e 01       	movw	r18, r28
    1db8:	36 95       	lsr	r19
    1dba:	27 95       	ror	r18
    1dbc:	36 95       	lsr	r19
    1dbe:	27 95       	ror	r18
    1dc0:	36 95       	lsr	r19
    1dc2:	27 95       	ror	r18
    1dc4:	a5 ec       	ldi	r26, 0xC5	; 197
    1dc6:	b0 e2       	ldi	r27, 0x20	; 32
    1dc8:	ed d7       	rcall	.+4058   	; 0x2da4 <__umulhisi3>
    1dca:	7c 01       	movw	r14, r24
    1dcc:	f6 94       	lsr	r15
    1dce:	e7 94       	ror	r14
    1dd0:	f6 94       	lsr	r15
    1dd2:	e7 94       	ror	r14
    1dd4:	f6 94       	lsr	r15
    1dd6:	e7 94       	ror	r14
    1dd8:	f6 94       	lsr	r15
    1dda:	e7 94       	ror	r14
    1ddc:	97 01       	movw	r18, r14
    1dde:	ad ec       	ldi	r26, 0xCD	; 205
    1de0:	bc ec       	ldi	r27, 0xCC	; 204
    1de2:	e0 d7       	rcall	.+4032   	; 0x2da4 <__umulhisi3>
    1de4:	96 95       	lsr	r25
    1de6:	87 95       	ror	r24
    1de8:	96 95       	lsr	r25
    1dea:	87 95       	ror	r24
    1dec:	96 95       	lsr	r25
    1dee:	87 95       	ror	r24
    1df0:	9c 01       	movw	r18, r24
    1df2:	22 0f       	add	r18, r18
    1df4:	33 1f       	adc	r19, r19
    1df6:	88 0f       	add	r24, r24
    1df8:	99 1f       	adc	r25, r25
    1dfa:	88 0f       	add	r24, r24
    1dfc:	99 1f       	adc	r25, r25
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	82 0f       	add	r24, r18
    1e04:	93 1f       	adc	r25, r19
    1e06:	e8 1a       	sub	r14, r24
    1e08:	f9 0a       	sbc	r15, r25
    1e0a:	80 e3       	ldi	r24, 0x30	; 48
    1e0c:	e8 0e       	add	r14, r24
    1e0e:	f1 1c       	adc	r15, r1
    1e10:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1e14:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1e18:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1e1c:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1e20:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1e24:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1e28:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1e2c:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1e30:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1e34:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
    1e38:	b4 de       	rcall	.-664    	; 0x1ba2 <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 100 % 10 + '0');
    1e3a:	9e 01       	movw	r18, r28
    1e3c:	36 95       	lsr	r19
    1e3e:	27 95       	ror	r18
    1e40:	36 95       	lsr	r19
    1e42:	27 95       	ror	r18
    1e44:	ab e7       	ldi	r26, 0x7B	; 123
    1e46:	b4 e1       	ldi	r27, 0x14	; 20
    1e48:	ad d7       	rcall	.+3930   	; 0x2da4 <__umulhisi3>
    1e4a:	7c 01       	movw	r14, r24
    1e4c:	f6 94       	lsr	r15
    1e4e:	e7 94       	ror	r14
    1e50:	97 01       	movw	r18, r14
    1e52:	ad ec       	ldi	r26, 0xCD	; 205
    1e54:	bc ec       	ldi	r27, 0xCC	; 204
    1e56:	a6 d7       	rcall	.+3916   	; 0x2da4 <__umulhisi3>
    1e58:	96 95       	lsr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	96 95       	lsr	r25
    1e5e:	87 95       	ror	r24
    1e60:	96 95       	lsr	r25
    1e62:	87 95       	ror	r24
    1e64:	9c 01       	movw	r18, r24
    1e66:	22 0f       	add	r18, r18
    1e68:	33 1f       	adc	r19, r19
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	82 0f       	add	r24, r18
    1e78:	93 1f       	adc	r25, r19
    1e7a:	e8 1a       	sub	r14, r24
    1e7c:	f9 0a       	sbc	r15, r25
    1e7e:	80 e3       	ldi	r24, 0x30	; 48
    1e80:	e8 0e       	add	r14, r24
    1e82:	f1 1c       	adc	r15, r1
    1e84:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1e88:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1e8c:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1e90:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1e94:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1e98:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1e9c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1ea0:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1ea4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1ea8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
	uart_transmit(s_debugUart, u16_data / 10 % 10 + '0');
    1eac:	7a de       	rcall	.-780    	; 0x1ba2 <uart_transmit>
    1eae:	9e 01       	movw	r18, r28
    1eb0:	ad ec       	ldi	r26, 0xCD	; 205
    1eb2:	bc ec       	ldi	r27, 0xCC	; 204
    1eb4:	77 d7       	rcall	.+3822   	; 0x2da4 <__umulhisi3>
    1eb6:	6c 01       	movw	r12, r24
    1eb8:	d6 94       	lsr	r13
    1eba:	c7 94       	ror	r12
    1ebc:	d6 94       	lsr	r13
    1ebe:	c7 94       	ror	r12
    1ec0:	d6 94       	lsr	r13
    1ec2:	c7 94       	ror	r12
    1ec4:	96 01       	movw	r18, r12
    1ec6:	6e d7       	rcall	.+3804   	; 0x2da4 <__umulhisi3>
    1ec8:	96 95       	lsr	r25
    1eca:	87 95       	ror	r24
    1ecc:	96 95       	lsr	r25
    1ece:	87 95       	ror	r24
    1ed0:	96 95       	lsr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	22 0f       	add	r18, r18
    1ed8:	33 1f       	adc	r19, r19
    1eda:	88 0f       	add	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	88 0f       	add	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	82 0f       	add	r24, r18
    1ee8:	93 1f       	adc	r25, r19
    1eea:	76 01       	movw	r14, r12
    1eec:	e8 1a       	sub	r14, r24
    1eee:	f9 0a       	sbc	r15, r25
    1ef0:	80 e3       	ldi	r24, 0x30	; 48
    1ef2:	e8 0e       	add	r14, r24
    1ef4:	f1 1c       	adc	r15, r1
    1ef6:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1efa:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1efe:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1f02:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1f06:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1f0a:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1f0e:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1f12:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1f16:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1f1a:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
    1f1e:	41 de       	rcall	.-894    	; 0x1ba2 <uart_transmit>
	uart_transmit(s_debugUart, u16_data % 10 + '0');
    1f20:	c6 01       	movw	r24, r12
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	cc 0c       	add	r12, r12
    1f28:	dd 1c       	adc	r13, r13
    1f2a:	cc 0c       	add	r12, r12
    1f2c:	dd 1c       	adc	r13, r13
    1f2e:	cc 0c       	add	r12, r12
    1f30:	dd 1c       	adc	r13, r13
    1f32:	c8 0e       	add	r12, r24
    1f34:	d9 1e       	adc	r13, r25
    1f36:	7e 01       	movw	r14, r28
    1f38:	ec 18       	sub	r14, r12
    1f3a:	fd 08       	sbc	r15, r13
    1f3c:	80 e3       	ldi	r24, 0x30	; 48
    1f3e:	e8 0e       	add	r14, r24
    1f40:	f1 1c       	adc	r15, r1
    1f42:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1f46:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1f4a:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1f4e:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1f52:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1f56:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1f5a:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1f5e:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1f62:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1f66:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
    1f6a:	1b de       	rcall	.-970    	; 0x1ba2 <uart_transmit>
}
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	df 90       	pop	r13
    1f7a:	cf 90       	pop	r12
    1f7c:	08 95       	ret

00001f7e <debug_writeNewLine>:

void debug_writeNewLine()
{
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
	uart_transmit(s_debugUart, '\n');
    1f86:	0f 2e       	mov	r0, r31
    1f88:	fa e0       	ldi	r31, 0x0A	; 10
    1f8a:	ef 2e       	mov	r14, r31
    1f8c:	f1 2c       	mov	r15, r1
    1f8e:	f0 2d       	mov	r31, r0
    1f90:	00 91 61 01 	lds	r16, 0x0161	; 0x800161 <s_debugUart>
    1f94:	10 91 62 01 	lds	r17, 0x0162	; 0x800162 <s_debugUart+0x1>
    1f98:	20 91 63 01 	lds	r18, 0x0163	; 0x800163 <s_debugUart+0x2>
    1f9c:	30 91 64 01 	lds	r19, 0x0164	; 0x800164 <s_debugUart+0x3>
    1fa0:	40 91 65 01 	lds	r20, 0x0165	; 0x800165 <s_debugUart+0x4>
    1fa4:	50 91 66 01 	lds	r21, 0x0166	; 0x800166 <s_debugUart+0x5>
    1fa8:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <s_debugUart+0x6>
    1fac:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <s_debugUart+0x7>
    1fb0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <s_debugUart+0x8>
    1fb4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <s_debugUart+0x9>
    1fb8:	f4 dd       	rcall	.-1048   	; 0x1ba2 <uart_transmit>
}
    1fba:	1f 91       	pop	r17
    1fbc:	0f 91       	pop	r16
    1fbe:	ff 90       	pop	r15
    1fc0:	ef 90       	pop	r14
    1fc2:	08 95       	ret

00001fc4 <startTimeout>:

	temp = readReg16Bit(ps_sensor, RESULT_RANGE_STATUS + 10);
	writeReg(ps_sensor, SYSTEM_INTERRUPT_CLEAR, 0x01);

	return temp;
}
    1fc4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
    1fc8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
    1fcc:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end+0x2>
    1fd0:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x3>
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	51 87       	std	Z+9, r21	; 0x09
    1fd8:	40 87       	std	Z+8, r20	; 0x08
    1fda:	08 95       	ret

00001fdc <checkTimeoutExpired>:
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	41 81       	ldd	r20, Z+1	; 0x01
    1fe4:	52 81       	ldd	r21, Z+2	; 0x02
    1fe6:	41 15       	cp	r20, r1
    1fe8:	51 05       	cpc	r21, r1
    1fea:	c1 f0       	breq	.+48     	; 0x201c <checkTimeoutExpired+0x40>
    1fec:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
    1ff0:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
    1ff4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
    1ff8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
    1ffc:	80 85       	ldd	r24, Z+8	; 0x08
    1ffe:	91 85       	ldd	r25, Z+9	; 0x09
    2000:	08 1b       	sub	r16, r24
    2002:	19 0b       	sbc	r17, r25
    2004:	21 09       	sbc	r18, r1
    2006:	31 09       	sbc	r19, r1
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	40 17       	cp	r20, r16
    2010:	51 07       	cpc	r21, r17
    2012:	62 07       	cpc	r22, r18
    2014:	73 07       	cpc	r23, r19
    2016:	18 f0       	brcs	.+6      	; 0x201e <checkTimeoutExpired+0x42>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	01 c0       	rjmp	.+2      	; 0x201e <checkTimeoutExpired+0x42>
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	1f 91       	pop	r17
    2020:	0f 91       	pop	r16
    2022:	08 95       	ret

00002024 <writeReg>:
    2024:	cf 93       	push	r28
    2026:	df 93       	push	r29
    2028:	d6 2f       	mov	r29, r22
    202a:	c4 2f       	mov	r28, r20
    202c:	fc 01       	movw	r30, r24
    202e:	80 81       	ld	r24, Z
    2030:	88 0f       	add	r24, r24
    2032:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_sendStart>
    2036:	8d 2f       	mov	r24, r29
    2038:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    203c:	8c 2f       	mov	r24, r28
    203e:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    2042:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_sendStop>
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret

0000204c <writeReg16Bit>:
    204c:	1f 93       	push	r17
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	16 2f       	mov	r17, r22
    2054:	c4 2f       	mov	r28, r20
    2056:	d5 2f       	mov	r29, r21
    2058:	fc 01       	movw	r30, r24
    205a:	80 81       	ld	r24, Z
    205c:	88 0f       	add	r24, r24
    205e:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_sendStart>
    2062:	81 2f       	mov	r24, r17
    2064:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    2068:	8d 2f       	mov	r24, r29
    206a:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    206e:	8c 2f       	mov	r24, r28
    2070:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    2074:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_sendStop>
    2078:	df 91       	pop	r29
    207a:	cf 91       	pop	r28
    207c:	1f 91       	pop	r17
    207e:	08 95       	ret

00002080 <writeReg32Bit>:
    2080:	ff 92       	push	r15
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	f6 2e       	mov	r15, r22
    208c:	c2 2f       	mov	r28, r18
    208e:	d3 2f       	mov	r29, r19
    2090:	14 2f       	mov	r17, r20
    2092:	05 2f       	mov	r16, r21
    2094:	fc 01       	movw	r30, r24
    2096:	80 81       	ld	r24, Z
    2098:	88 0f       	add	r24, r24
    209a:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_sendStart>
    209e:	8f 2d       	mov	r24, r15
    20a0:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    20a4:	80 2f       	mov	r24, r16
    20a6:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    20aa:	81 2f       	mov	r24, r17
    20ac:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    20b0:	8d 2f       	mov	r24, r29
    20b2:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    20b6:	8c 2f       	mov	r24, r28
    20b8:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    20bc:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_sendStop>
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	ff 90       	pop	r15
    20ca:	08 95       	ret

000020cc <readReg>:
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	ec 01       	movw	r28, r24
    20d4:	16 2f       	mov	r17, r22
    20d6:	88 81       	ld	r24, Y
    20d8:	88 0f       	add	r24, r24
    20da:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_sendStart>
    20de:	81 2f       	mov	r24, r17
    20e0:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    20e4:	88 81       	ld	r24, Y
    20e6:	88 0f       	add	r24, r24
    20e8:	81 60       	ori	r24, 0x01	; 1
    20ea:	0e 94 0a 03 	call	0x614	; 0x614 <i2c_sendRepStart>
    20ee:	0e 94 87 03 	call	0x70e	; 0x70e <i2c_readNak>
    20f2:	c8 2f       	mov	r28, r24
    20f4:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_sendStop>
    20f8:	8c 2f       	mov	r24, r28
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	1f 91       	pop	r17
    2100:	08 95       	ret

00002102 <readReg16Bit>:
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	ec 01       	movw	r28, r24
    210a:	16 2f       	mov	r17, r22
    210c:	88 81       	ld	r24, Y
    210e:	88 0f       	add	r24, r24
    2110:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_sendStart>
    2114:	81 2f       	mov	r24, r17
    2116:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    211a:	88 81       	ld	r24, Y
    211c:	88 0f       	add	r24, r24
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	0e 94 0a 03 	call	0x614	; 0x614 <i2c_sendRepStart>
    2124:	0e 94 63 03 	call	0x6c6	; 0x6c6 <i2c_readAck>
    2128:	c8 2f       	mov	r28, r24
    212a:	d0 e0       	ldi	r29, 0x00	; 0
    212c:	dc 2f       	mov	r29, r28
    212e:	cc 27       	eor	r28, r28
    2130:	0e 94 87 03 	call	0x70e	; 0x70e <i2c_readNak>
    2134:	c8 2b       	or	r28, r24
    2136:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_sendStop>
    213a:	ce 01       	movw	r24, r28
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	08 95       	ret

00002144 <writeMulti>:
    2144:	ef 92       	push	r14
    2146:	ff 92       	push	r15
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	d6 2f       	mov	r29, r22
    2152:	7a 01       	movw	r14, r20
    2154:	c2 2f       	mov	r28, r18
    2156:	fc 01       	movw	r30, r24
    2158:	80 81       	ld	r24, Z
    215a:	88 0f       	add	r24, r24
    215c:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_sendStart>
    2160:	8d 2f       	mov	r24, r29
    2162:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    2166:	8f ef       	ldi	r24, 0xFF	; 255
    2168:	8c 0f       	add	r24, r28
    216a:	cc 23       	and	r28, r28
    216c:	69 f0       	breq	.+26     	; 0x2188 <writeMulti+0x44>
    216e:	e7 01       	movw	r28, r14
    2170:	08 2f       	mov	r16, r24
    2172:	10 e0       	ldi	r17, 0x00	; 0
    2174:	0f 5f       	subi	r16, 0xFF	; 255
    2176:	1f 4f       	sbci	r17, 0xFF	; 255
    2178:	0e 0d       	add	r16, r14
    217a:	1f 1d       	adc	r17, r15
    217c:	89 91       	ld	r24, Y+
    217e:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    2182:	c0 17       	cp	r28, r16
    2184:	d1 07       	cpc	r29, r17
    2186:	d1 f7       	brne	.-12     	; 0x217c <writeMulti+0x38>
    2188:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_sendStop>
    218c:	df 91       	pop	r29
    218e:	cf 91       	pop	r28
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	ff 90       	pop	r15
    2196:	ef 90       	pop	r14
    2198:	08 95       	ret

0000219a <readMulti>:
    219a:	ef 92       	push	r14
    219c:	ff 92       	push	r15
    219e:	0f 93       	push	r16
    21a0:	1f 93       	push	r17
    21a2:	cf 93       	push	r28
    21a4:	df 93       	push	r29
    21a6:	8c 01       	movw	r16, r24
    21a8:	d6 2f       	mov	r29, r22
    21aa:	e4 2e       	mov	r14, r20
    21ac:	f5 2e       	mov	r15, r21
    21ae:	c2 2f       	mov	r28, r18
    21b0:	fc 01       	movw	r30, r24
    21b2:	80 81       	ld	r24, Z
    21b4:	88 0f       	add	r24, r24
    21b6:	0e 94 a8 02 	call	0x550	; 0x550 <i2c_sendStart>
    21ba:	8d 2f       	mov	r24, r29
    21bc:	0e 94 2e 03 	call	0x65c	; 0x65c <i2c_write>
    21c0:	f8 01       	movw	r30, r16
    21c2:	80 81       	ld	r24, Z
    21c4:	88 0f       	add	r24, r24
    21c6:	81 60       	ori	r24, 0x01	; 1
    21c8:	0e 94 0a 03 	call	0x614	; 0x614 <i2c_sendRepStart>
    21cc:	cc 23       	and	r28, r28
    21ce:	91 f0       	breq	.+36     	; 0x21f4 <readMulti+0x5a>
    21d0:	0e 2d       	mov	r16, r14
    21d2:	1f 2d       	mov	r17, r15
    21d4:	c2 30       	cpi	r28, 0x02	; 2
    21d6:	28 f0       	brcs	.+10     	; 0x21e2 <readMulti+0x48>
    21d8:	0e 94 63 03 	call	0x6c6	; 0x6c6 <i2c_readAck>
    21dc:	f8 01       	movw	r30, r16
    21de:	80 83       	st	Z, r24
    21e0:	04 c0       	rjmp	.+8      	; 0x21ea <readMulti+0x50>
    21e2:	0e 94 87 03 	call	0x70e	; 0x70e <i2c_readNak>
    21e6:	f8 01       	movw	r30, r16
    21e8:	80 83       	st	Z, r24
    21ea:	c1 50       	subi	r28, 0x01	; 1
    21ec:	0f 5f       	subi	r16, 0xFF	; 255
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	c1 11       	cpse	r28, r1
    21f2:	f0 cf       	rjmp	.-32     	; 0x21d4 <readMulti+0x3a>
    21f4:	0e 94 0c 03 	call	0x618	; 0x618 <i2c_sendStop>
    21f8:	df 91       	pop	r29
    21fa:	cf 91       	pop	r28
    21fc:	1f 91       	pop	r17
    21fe:	0f 91       	pop	r16
    2200:	ff 90       	pop	r15
    2202:	ef 90       	pop	r14
    2204:	08 95       	ret

00002206 <getSpadInfo>:
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	ec 01       	movw	r28, r24
    2214:	7b 01       	movw	r14, r22
    2216:	8a 01       	movw	r16, r20
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	60 e8       	ldi	r22, 0x80	; 128
    221c:	03 df       	rcall	.-506    	; 0x2024 <writeReg>
    221e:	41 e0       	ldi	r20, 0x01	; 1
    2220:	6f ef       	ldi	r22, 0xFF	; 255
    2222:	ce 01       	movw	r24, r28
    2224:	ff de       	rcall	.-514    	; 0x2024 <writeReg>
    2226:	40 e0       	ldi	r20, 0x00	; 0
    2228:	60 e0       	ldi	r22, 0x00	; 0
    222a:	ce 01       	movw	r24, r28
    222c:	fb de       	rcall	.-522    	; 0x2024 <writeReg>
    222e:	46 e0       	ldi	r20, 0x06	; 6
    2230:	6f ef       	ldi	r22, 0xFF	; 255
    2232:	ce 01       	movw	r24, r28
    2234:	f7 de       	rcall	.-530    	; 0x2024 <writeReg>
    2236:	63 e8       	ldi	r22, 0x83	; 131
    2238:	ce 01       	movw	r24, r28
    223a:	48 df       	rcall	.-368    	; 0x20cc <readReg>
    223c:	48 2f       	mov	r20, r24
    223e:	44 60       	ori	r20, 0x04	; 4
    2240:	63 e8       	ldi	r22, 0x83	; 131
    2242:	ce 01       	movw	r24, r28
    2244:	ef de       	rcall	.-546    	; 0x2024 <writeReg>
    2246:	47 e0       	ldi	r20, 0x07	; 7
    2248:	6f ef       	ldi	r22, 0xFF	; 255
    224a:	ce 01       	movw	r24, r28
    224c:	eb de       	rcall	.-554    	; 0x2024 <writeReg>
    224e:	41 e0       	ldi	r20, 0x01	; 1
    2250:	61 e8       	ldi	r22, 0x81	; 129
    2252:	ce 01       	movw	r24, r28
    2254:	e7 de       	rcall	.-562    	; 0x2024 <writeReg>
    2256:	41 e0       	ldi	r20, 0x01	; 1
    2258:	60 e8       	ldi	r22, 0x80	; 128
    225a:	ce 01       	movw	r24, r28
    225c:	e3 de       	rcall	.-570    	; 0x2024 <writeReg>
    225e:	4b e6       	ldi	r20, 0x6B	; 107
    2260:	64 e9       	ldi	r22, 0x94	; 148
    2262:	ce 01       	movw	r24, r28
    2264:	df de       	rcall	.-578    	; 0x2024 <writeReg>
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	63 e8       	ldi	r22, 0x83	; 131
    226a:	ce 01       	movw	r24, r28
    226c:	db de       	rcall	.-586    	; 0x2024 <writeReg>
    226e:	ce 01       	movw	r24, r28
    2270:	a9 de       	rcall	.-686    	; 0x1fc4 <startTimeout>
    2272:	04 c0       	rjmp	.+8      	; 0x227c <getSpadInfo+0x76>
    2274:	ce 01       	movw	r24, r28
    2276:	b2 de       	rcall	.-668    	; 0x1fdc <checkTimeoutExpired>
    2278:	81 11       	cpse	r24, r1
    227a:	37 c0       	rjmp	.+110    	; 0x22ea <getSpadInfo+0xe4>
    227c:	63 e8       	ldi	r22, 0x83	; 131
    227e:	ce 01       	movw	r24, r28
    2280:	25 df       	rcall	.-438    	; 0x20cc <readReg>
    2282:	88 23       	and	r24, r24
    2284:	b9 f3       	breq	.-18     	; 0x2274 <getSpadInfo+0x6e>
    2286:	41 e0       	ldi	r20, 0x01	; 1
    2288:	63 e8       	ldi	r22, 0x83	; 131
    228a:	ce 01       	movw	r24, r28
    228c:	cb de       	rcall	.-618    	; 0x2024 <writeReg>
    228e:	62 e9       	ldi	r22, 0x92	; 146
    2290:	ce 01       	movw	r24, r28
    2292:	1c df       	rcall	.-456    	; 0x20cc <readReg>
    2294:	98 2f       	mov	r25, r24
    2296:	9f 77       	andi	r25, 0x7F	; 127
    2298:	f7 01       	movw	r30, r14
    229a:	90 83       	st	Z, r25
    229c:	88 1f       	adc	r24, r24
    229e:	88 27       	eor	r24, r24
    22a0:	88 1f       	adc	r24, r24
    22a2:	f8 01       	movw	r30, r16
    22a4:	80 83       	st	Z, r24
    22a6:	40 e0       	ldi	r20, 0x00	; 0
    22a8:	61 e8       	ldi	r22, 0x81	; 129
    22aa:	ce 01       	movw	r24, r28
    22ac:	bb de       	rcall	.-650    	; 0x2024 <writeReg>
    22ae:	46 e0       	ldi	r20, 0x06	; 6
    22b0:	6f ef       	ldi	r22, 0xFF	; 255
    22b2:	ce 01       	movw	r24, r28
    22b4:	b7 de       	rcall	.-658    	; 0x2024 <writeReg>
    22b6:	63 e8       	ldi	r22, 0x83	; 131
    22b8:	ce 01       	movw	r24, r28
    22ba:	08 df       	rcall	.-496    	; 0x20cc <readReg>
    22bc:	48 2f       	mov	r20, r24
    22be:	4b 7f       	andi	r20, 0xFB	; 251
    22c0:	63 e8       	ldi	r22, 0x83	; 131
    22c2:	ce 01       	movw	r24, r28
    22c4:	af de       	rcall	.-674    	; 0x2024 <writeReg>
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	6f ef       	ldi	r22, 0xFF	; 255
    22ca:	ce 01       	movw	r24, r28
    22cc:	ab de       	rcall	.-682    	; 0x2024 <writeReg>
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	60 e0       	ldi	r22, 0x00	; 0
    22d2:	ce 01       	movw	r24, r28
    22d4:	a7 de       	rcall	.-690    	; 0x2024 <writeReg>
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	6f ef       	ldi	r22, 0xFF	; 255
    22da:	ce 01       	movw	r24, r28
    22dc:	a3 de       	rcall	.-698    	; 0x2024 <writeReg>
    22de:	40 e0       	ldi	r20, 0x00	; 0
    22e0:	60 e8       	ldi	r22, 0x80	; 128
    22e2:	ce 01       	movw	r24, r28
    22e4:	9f de       	rcall	.-706    	; 0x2024 <writeReg>
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <getSpadInfo+0xe6>
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	08 95       	ret

000022fa <getSequenceStepEnables>:
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	eb 01       	movw	r28, r22
    2300:	61 e0       	ldi	r22, 0x01	; 1
    2302:	e4 de       	rcall	.-568    	; 0x20cc <readReg>
    2304:	84 fb       	bst	r24, 4
    2306:	99 27       	eor	r25, r25
    2308:	90 f9       	bld	r25, 0
    230a:	98 83       	st	Y, r25
    230c:	83 fb       	bst	r24, 3
    230e:	99 27       	eor	r25, r25
    2310:	90 f9       	bld	r25, 0
    2312:	9a 83       	std	Y+2, r25	; 0x02
    2314:	82 fb       	bst	r24, 2
    2316:	99 27       	eor	r25, r25
    2318:	90 f9       	bld	r25, 0
    231a:	99 83       	std	Y+1, r25	; 0x01
    231c:	86 fb       	bst	r24, 6
    231e:	99 27       	eor	r25, r25
    2320:	90 f9       	bld	r25, 0
    2322:	9b 83       	std	Y+3, r25	; 0x03
    2324:	88 1f       	adc	r24, r24
    2326:	88 27       	eor	r24, r24
    2328:	88 1f       	adc	r24, r24
    232a:	8c 83       	std	Y+4, r24	; 0x04
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	08 95       	ret

00002332 <encodeTimeout>:
    2332:	0f 93       	push	r16
    2334:	1f 93       	push	r17
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	19 f1       	breq	.+70     	; 0x2380 <encodeTimeout+0x4e>
    233a:	ac 01       	movw	r20, r24
    233c:	41 50       	subi	r20, 0x01	; 1
    233e:	51 09       	sbc	r21, r1
    2340:	60 e0       	ldi	r22, 0x00	; 0
    2342:	70 e0       	ldi	r23, 0x00	; 0
    2344:	db 01       	movw	r26, r22
    2346:	ca 01       	movw	r24, r20
    2348:	88 27       	eor	r24, r24
    234a:	89 2b       	or	r24, r25
    234c:	8a 2b       	or	r24, r26
    234e:	8b 2b       	or	r24, r27
    2350:	79 f0       	breq	.+30     	; 0x2370 <encodeTimeout+0x3e>
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	76 95       	lsr	r23
    2358:	67 95       	ror	r22
    235a:	57 95       	ror	r21
    235c:	47 95       	ror	r20
    235e:	01 96       	adiw	r24, 0x01	; 1
    2360:	8a 01       	movw	r16, r20
    2362:	9b 01       	movw	r18, r22
    2364:	00 27       	eor	r16, r16
    2366:	01 2b       	or	r16, r17
    2368:	02 2b       	or	r16, r18
    236a:	03 2b       	or	r16, r19
    236c:	a1 f7       	brne	.-24     	; 0x2356 <encodeTimeout+0x24>
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <encodeTimeout+0x42>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	98 2f       	mov	r25, r24
    2376:	88 27       	eor	r24, r24
    2378:	55 27       	eor	r21, r21
    237a:	84 2b       	or	r24, r20
    237c:	95 2b       	or	r25, r21
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <encodeTimeout+0x52>
    2380:	80 e0       	ldi	r24, 0x00	; 0
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	08 95       	ret

0000238a <decodeTimeout>:
    238a:	9c 01       	movw	r18, r24
    238c:	33 27       	eor	r19, r19
    238e:	a9 01       	movw	r20, r18
    2390:	02 c0       	rjmp	.+4      	; 0x2396 <decodeTimeout+0xc>
    2392:	44 0f       	add	r20, r20
    2394:	55 1f       	adc	r21, r21
    2396:	9a 95       	dec	r25
    2398:	e2 f7       	brpl	.-8      	; 0x2392 <decodeTimeout+0x8>
    239a:	ca 01       	movw	r24, r20
    239c:	01 96       	adiw	r24, 0x01	; 1
    239e:	08 95       	ret

000023a0 <timeoutMclksToMicroseconds>:
    23a0:	4f 92       	push	r4
    23a2:	5f 92       	push	r5
    23a4:	6f 92       	push	r6
    23a6:	7f 92       	push	r7
    23a8:	8f 92       	push	r8
    23aa:	9f 92       	push	r9
    23ac:	af 92       	push	r10
    23ae:	bf 92       	push	r11
    23b0:	cf 92       	push	r12
    23b2:	df 92       	push	r13
    23b4:	ef 92       	push	r14
    23b6:	ff 92       	push	r15
    23b8:	3c 01       	movw	r6, r24
    23ba:	a6 2f       	mov	r26, r22
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	3f e2       	ldi	r19, 0x2F	; 47
    23c2:	4a e3       	ldi	r20, 0x3A	; 58
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	fd d4       	rcall	.+2554   	; 0x2dc2 <__muluhisi3>
    23c8:	6b 01       	movw	r12, r22
    23ca:	7c 01       	movw	r14, r24
    23cc:	24 ef       	ldi	r18, 0xF4	; 244
    23ce:	c2 0e       	add	r12, r18
    23d0:	21 e0       	ldi	r18, 0x01	; 1
    23d2:	d2 1e       	adc	r13, r18
    23d4:	e1 1c       	adc	r14, r1
    23d6:	f1 1c       	adc	r15, r1
    23d8:	0f 2e       	mov	r0, r31
    23da:	f8 ee       	ldi	r31, 0xE8	; 232
    23dc:	8f 2e       	mov	r8, r31
    23de:	f3 e0       	ldi	r31, 0x03	; 3
    23e0:	9f 2e       	mov	r9, r31
    23e2:	a1 2c       	mov	r10, r1
    23e4:	b1 2c       	mov	r11, r1
    23e6:	f0 2d       	mov	r31, r0
    23e8:	c7 01       	movw	r24, r14
    23ea:	b6 01       	movw	r22, r12
    23ec:	a5 01       	movw	r20, r10
    23ee:	94 01       	movw	r18, r8
    23f0:	ae d4       	rcall	.+2396   	; 0x2d4e <__udivmodsi4>
    23f2:	d3 01       	movw	r26, r6
    23f4:	e6 d4       	rcall	.+2508   	; 0x2dc2 <__muluhisi3>
    23f6:	2b 01       	movw	r4, r22
    23f8:	3c 01       	movw	r6, r24
    23fa:	c7 01       	movw	r24, r14
    23fc:	b6 01       	movw	r22, r12
    23fe:	20 ed       	ldi	r18, 0xD0	; 208
    2400:	37 e0       	ldi	r19, 0x07	; 7
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	a3 d4       	rcall	.+2374   	; 0x2d4e <__udivmodsi4>
    2408:	c3 01       	movw	r24, r6
    240a:	b2 01       	movw	r22, r4
    240c:	62 0f       	add	r22, r18
    240e:	73 1f       	adc	r23, r19
    2410:	84 1f       	adc	r24, r20
    2412:	95 1f       	adc	r25, r21
    2414:	a5 01       	movw	r20, r10
    2416:	94 01       	movw	r18, r8
    2418:	9a d4       	rcall	.+2356   	; 0x2d4e <__udivmodsi4>
    241a:	ca 01       	movw	r24, r20
    241c:	b9 01       	movw	r22, r18
    241e:	ff 90       	pop	r15
    2420:	ef 90       	pop	r14
    2422:	df 90       	pop	r13
    2424:	cf 90       	pop	r12
    2426:	bf 90       	pop	r11
    2428:	af 90       	pop	r10
    242a:	9f 90       	pop	r9
    242c:	8f 90       	pop	r8
    242e:	7f 90       	pop	r7
    2430:	6f 90       	pop	r6
    2432:	5f 90       	pop	r5
    2434:	4f 90       	pop	r4
    2436:	08 95       	ret

00002438 <getVcselPulsePeriod>:
    2438:	61 11       	cpse	r22, r1
    243a:	05 c0       	rjmp	.+10     	; 0x2446 <getVcselPulsePeriod+0xe>
    243c:	60 e5       	ldi	r22, 0x50	; 80
    243e:	46 de       	rcall	.-884    	; 0x20cc <readReg>
    2440:	8f 5f       	subi	r24, 0xFF	; 255
    2442:	88 0f       	add	r24, r24
    2444:	08 95       	ret
    2446:	61 30       	cpi	r22, 0x01	; 1
    2448:	29 f4       	brne	.+10     	; 0x2454 <getVcselPulsePeriod+0x1c>
    244a:	60 e7       	ldi	r22, 0x70	; 112
    244c:	3f de       	rcall	.-898    	; 0x20cc <readReg>
    244e:	8f 5f       	subi	r24, 0xFF	; 255
    2450:	88 0f       	add	r24, r24
    2452:	08 95       	ret
    2454:	8f ef       	ldi	r24, 0xFF	; 255
    2456:	08 95       	ret

00002458 <getSequenceStepTimeouts>:
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	8c 01       	movw	r16, r24
    2466:	7b 01       	movw	r14, r22
    2468:	ea 01       	movw	r28, r20
    246a:	60 e0       	ldi	r22, 0x00	; 0
    246c:	e5 df       	rcall	.-54     	; 0x2438 <getVcselPulsePeriod>
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	99 83       	std	Y+1, r25	; 0x01
    2472:	88 83       	st	Y, r24
    2474:	66 e4       	ldi	r22, 0x46	; 70
    2476:	c8 01       	movw	r24, r16
    2478:	29 de       	rcall	.-942    	; 0x20cc <readReg>
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	01 96       	adiw	r24, 0x01	; 1
    247e:	9d 83       	std	Y+5, r25	; 0x05
    2480:	8c 83       	std	Y+4, r24	; 0x04
    2482:	68 81       	ld	r22, Y
    2484:	8d df       	rcall	.-230    	; 0x23a0 <timeoutMclksToMicroseconds>
    2486:	6a 87       	std	Y+10, r22	; 0x0a
    2488:	7b 87       	std	Y+11, r23	; 0x0b
    248a:	8c 87       	std	Y+12, r24	; 0x0c
    248c:	9d 87       	std	Y+13, r25	; 0x0d
    248e:	61 e5       	ldi	r22, 0x51	; 81
    2490:	c8 01       	movw	r24, r16
    2492:	37 de       	rcall	.-914    	; 0x2102 <readReg16Bit>
    2494:	7a df       	rcall	.-268    	; 0x238a <decodeTimeout>
    2496:	9f 83       	std	Y+7, r25	; 0x07
    2498:	8e 83       	std	Y+6, r24	; 0x06
    249a:	68 81       	ld	r22, Y
    249c:	81 df       	rcall	.-254    	; 0x23a0 <timeoutMclksToMicroseconds>
    249e:	6e 87       	std	Y+14, r22	; 0x0e
    24a0:	7f 87       	std	Y+15, r23	; 0x0f
    24a2:	88 8b       	std	Y+16, r24	; 0x10
    24a4:	99 8b       	std	Y+17, r25	; 0x11
    24a6:	61 e0       	ldi	r22, 0x01	; 1
    24a8:	c8 01       	movw	r24, r16
    24aa:	c6 df       	rcall	.-116    	; 0x2438 <getVcselPulsePeriod>
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9b 83       	std	Y+3, r25	; 0x03
    24b0:	8a 83       	std	Y+2, r24	; 0x02
    24b2:	61 e7       	ldi	r22, 0x71	; 113
    24b4:	c8 01       	movw	r24, r16
    24b6:	25 de       	rcall	.-950    	; 0x2102 <readReg16Bit>
    24b8:	68 df       	rcall	.-304    	; 0x238a <decodeTimeout>
    24ba:	99 87       	std	Y+9, r25	; 0x09
    24bc:	88 87       	std	Y+8, r24	; 0x08
    24be:	f7 01       	movw	r30, r14
    24c0:	23 81       	ldd	r18, Z+3	; 0x03
    24c2:	22 23       	and	r18, r18
    24c4:	31 f0       	breq	.+12     	; 0x24d2 <getSequenceStepTimeouts+0x7a>
    24c6:	2e 81       	ldd	r18, Y+6	; 0x06
    24c8:	3f 81       	ldd	r19, Y+7	; 0x07
    24ca:	82 1b       	sub	r24, r18
    24cc:	93 0b       	sbc	r25, r19
    24ce:	99 87       	std	Y+9, r25	; 0x09
    24d0:	88 87       	std	Y+8, r24	; 0x08
    24d2:	6a 81       	ldd	r22, Y+2	; 0x02
    24d4:	88 85       	ldd	r24, Y+8	; 0x08
    24d6:	99 85       	ldd	r25, Y+9	; 0x09
    24d8:	63 df       	rcall	.-314    	; 0x23a0 <timeoutMclksToMicroseconds>
    24da:	6a 8b       	std	Y+18, r22	; 0x12
    24dc:	7b 8b       	std	Y+19, r23	; 0x13
    24de:	8c 8b       	std	Y+20, r24	; 0x14
    24e0:	9d 8b       	std	Y+21, r25	; 0x15
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	ff 90       	pop	r15
    24ec:	ef 90       	pop	r14
    24ee:	08 95       	ret

000024f0 <timeoutMicrosecondsToMclks>:
    24f0:	8f 92       	push	r8
    24f2:	9f 92       	push	r9
    24f4:	af 92       	push	r10
    24f6:	bf 92       	push	r11
    24f8:	cf 92       	push	r12
    24fa:	df 92       	push	r13
    24fc:	ef 92       	push	r14
    24fe:	ff 92       	push	r15
    2500:	4b 01       	movw	r8, r22
    2502:	5c 01       	movw	r10, r24
    2504:	a4 2f       	mov	r26, r20
    2506:	b0 e0       	ldi	r27, 0x00	; 0
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	3f e2       	ldi	r19, 0x2F	; 47
    250c:	4a e3       	ldi	r20, 0x3A	; 58
    250e:	50 e0       	ldi	r21, 0x00	; 0
    2510:	58 d4       	rcall	.+2224   	; 0x2dc2 <__muluhisi3>
    2512:	6b 01       	movw	r12, r22
    2514:	7c 01       	movw	r14, r24
    2516:	24 ef       	ldi	r18, 0xF4	; 244
    2518:	c2 0e       	add	r12, r18
    251a:	21 e0       	ldi	r18, 0x01	; 1
    251c:	d2 1e       	adc	r13, r18
    251e:	e1 1c       	adc	r14, r1
    2520:	f1 1c       	adc	r15, r1
    2522:	a8 ee       	ldi	r26, 0xE8	; 232
    2524:	b3 e0       	ldi	r27, 0x03	; 3
    2526:	a5 01       	movw	r20, r10
    2528:	94 01       	movw	r18, r8
    252a:	4b d4       	rcall	.+2198   	; 0x2dc2 <__muluhisi3>
    252c:	4b 01       	movw	r8, r22
    252e:	5c 01       	movw	r10, r24
    2530:	c7 01       	movw	r24, r14
    2532:	b6 01       	movw	r22, r12
    2534:	20 ed       	ldi	r18, 0xD0	; 208
    2536:	37 e0       	ldi	r19, 0x07	; 7
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	50 e0       	ldi	r21, 0x00	; 0
    253c:	08 d4       	rcall	.+2064   	; 0x2d4e <__udivmodsi4>
    253e:	82 0e       	add	r8, r18
    2540:	93 1e       	adc	r9, r19
    2542:	a4 1e       	adc	r10, r20
    2544:	b5 1e       	adc	r11, r21
    2546:	c7 01       	movw	r24, r14
    2548:	b6 01       	movw	r22, r12
    254a:	28 ee       	ldi	r18, 0xE8	; 232
    254c:	33 e0       	ldi	r19, 0x03	; 3
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	50 e0       	ldi	r21, 0x00	; 0
    2552:	fd d3       	rcall	.+2042   	; 0x2d4e <__udivmodsi4>
    2554:	c5 01       	movw	r24, r10
    2556:	b4 01       	movw	r22, r8
    2558:	fa d3       	rcall	.+2036   	; 0x2d4e <__udivmodsi4>
    255a:	ca 01       	movw	r24, r20
    255c:	b9 01       	movw	r22, r18
    255e:	ff 90       	pop	r15
    2560:	ef 90       	pop	r14
    2562:	df 90       	pop	r13
    2564:	cf 90       	pop	r12
    2566:	bf 90       	pop	r11
    2568:	af 90       	pop	r10
    256a:	9f 90       	pop	r9
    256c:	8f 90       	pop	r8
    256e:	08 95       	ret

00002570 <performSingleRefCalibration>:
    2570:	cf 93       	push	r28
    2572:	df 93       	push	r29
    2574:	ec 01       	movw	r28, r24
    2576:	46 2f       	mov	r20, r22
    2578:	41 60       	ori	r20, 0x01	; 1
    257a:	60 e0       	ldi	r22, 0x00	; 0
    257c:	53 dd       	rcall	.-1370   	; 0x2024 <writeReg>
    257e:	ce 01       	movw	r24, r28
    2580:	21 dd       	rcall	.-1470   	; 0x1fc4 <startTimeout>
    2582:	04 c0       	rjmp	.+8      	; 0x258c <performSingleRefCalibration+0x1c>
    2584:	ce 01       	movw	r24, r28
    2586:	2a dd       	rcall	.-1452   	; 0x1fdc <checkTimeoutExpired>
    2588:	81 11       	cpse	r24, r1
    258a:	0f c0       	rjmp	.+30     	; 0x25aa <performSingleRefCalibration+0x3a>
    258c:	63 e1       	ldi	r22, 0x13	; 19
    258e:	ce 01       	movw	r24, r28
    2590:	9d dd       	rcall	.-1222   	; 0x20cc <readReg>
    2592:	87 70       	andi	r24, 0x07	; 7
    2594:	b9 f3       	breq	.-18     	; 0x2584 <performSingleRefCalibration+0x14>
    2596:	41 e0       	ldi	r20, 0x01	; 1
    2598:	6b e0       	ldi	r22, 0x0B	; 11
    259a:	ce 01       	movw	r24, r28
    259c:	43 dd       	rcall	.-1402   	; 0x2024 <writeReg>
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	60 e0       	ldi	r22, 0x00	; 0
    25a2:	ce 01       	movw	r24, r28
    25a4:	3f dd       	rcall	.-1410   	; 0x2024 <writeReg>
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <performSingleRefCalibration+0x3c>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <setMeasurementTimingBudget>:
    25b2:	8f 92       	push	r8
    25b4:	9f 92       	push	r9
    25b6:	af 92       	push	r10
    25b8:	bf 92       	push	r11
    25ba:	df 92       	push	r13
    25bc:	ef 92       	push	r14
    25be:	ff 92       	push	r15
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	cf 93       	push	r28
    25c6:	df 93       	push	r29
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	6b 97       	sbiw	r28, 0x1b	; 27
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	de bf       	out	0x3e, r29	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	cd bf       	out	0x3d, r28	; 61
    25d8:	40 32       	cpi	r20, 0x20	; 32
    25da:	2e e4       	ldi	r18, 0x4E	; 78
    25dc:	52 07       	cpc	r21, r18
    25de:	61 05       	cpc	r22, r1
    25e0:	71 05       	cpc	r23, r1
    25e2:	08 f4       	brcc	.+2      	; 0x25e6 <setMeasurementTimingBudget+0x34>
    25e4:	74 c0       	rjmp	.+232    	; 0x26ce <setMeasurementTimingBudget+0x11c>
    25e6:	4a 01       	movw	r8, r20
    25e8:	5b 01       	movw	r10, r22
    25ea:	7c 01       	movw	r14, r24
    25ec:	be 01       	movw	r22, r28
    25ee:	6f 5f       	subi	r22, 0xFF	; 255
    25f0:	7f 4f       	sbci	r23, 0xFF	; 255
    25f2:	83 de       	rcall	.-762    	; 0x22fa <getSequenceStepEnables>
    25f4:	ae 01       	movw	r20, r28
    25f6:	4a 5f       	subi	r20, 0xFA	; 250
    25f8:	5f 4f       	sbci	r21, 0xFF	; 255
    25fa:	be 01       	movw	r22, r28
    25fc:	6f 5f       	subi	r22, 0xFF	; 255
    25fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2600:	c7 01       	movw	r24, r14
    2602:	2a df       	rcall	.-428    	; 0x2458 <getSequenceStepTimeouts>
    2604:	89 81       	ldd	r24, Y+1	; 0x01
    2606:	88 23       	and	r24, r24
    2608:	49 f0       	breq	.+18     	; 0x261c <setMeasurementTimingBudget+0x6a>
    260a:	08 89       	ldd	r16, Y+16	; 0x10
    260c:	19 89       	ldd	r17, Y+17	; 0x11
    260e:	2a 89       	ldd	r18, Y+18	; 0x12
    2610:	3b 89       	ldd	r19, Y+19	; 0x13
    2612:	0a 5c       	subi	r16, 0xCA	; 202
    2614:	14 4f       	sbci	r17, 0xF4	; 244
    2616:	2f 4f       	sbci	r18, 0xFF	; 255
    2618:	3f 4f       	sbci	r19, 0xFF	; 255
    261a:	04 c0       	rjmp	.+8      	; 0x2624 <setMeasurementTimingBudget+0x72>
    261c:	08 ee       	ldi	r16, 0xE8	; 232
    261e:	18 e0       	ldi	r17, 0x08	; 8
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	8b 81       	ldd	r24, Y+3	; 0x03
    2626:	88 23       	and	r24, r24
    2628:	89 f0       	breq	.+34     	; 0x264c <setMeasurementTimingBudget+0x9a>
    262a:	88 89       	ldd	r24, Y+16	; 0x10
    262c:	99 89       	ldd	r25, Y+17	; 0x11
    262e:	aa 89       	ldd	r26, Y+18	; 0x12
    2630:	bb 89       	ldd	r27, Y+19	; 0x13
    2632:	8e 54       	subi	r24, 0x4E	; 78
    2634:	9d 4f       	sbci	r25, 0xFD	; 253
    2636:	af 4f       	sbci	r26, 0xFF	; 255
    2638:	bf 4f       	sbci	r27, 0xFF	; 255
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	aa 1f       	adc	r26, r26
    2640:	bb 1f       	adc	r27, r27
    2642:	08 0f       	add	r16, r24
    2644:	19 1f       	adc	r17, r25
    2646:	2a 1f       	adc	r18, r26
    2648:	3b 1f       	adc	r19, r27
    264a:	0f c0       	rjmp	.+30     	; 0x266a <setMeasurementTimingBudget+0xb8>
    264c:	8a 81       	ldd	r24, Y+2	; 0x02
    264e:	88 23       	and	r24, r24
    2650:	61 f0       	breq	.+24     	; 0x266a <setMeasurementTimingBudget+0xb8>
    2652:	88 89       	ldd	r24, Y+16	; 0x10
    2654:	99 89       	ldd	r25, Y+17	; 0x11
    2656:	aa 89       	ldd	r26, Y+18	; 0x12
    2658:	bb 89       	ldd	r27, Y+19	; 0x13
    265a:	8c 56       	subi	r24, 0x6C	; 108
    265c:	9d 4f       	sbci	r25, 0xFD	; 253
    265e:	af 4f       	sbci	r26, 0xFF	; 255
    2660:	bf 4f       	sbci	r27, 0xFF	; 255
    2662:	08 0f       	add	r16, r24
    2664:	19 1f       	adc	r17, r25
    2666:	2a 1f       	adc	r18, r26
    2668:	3b 1f       	adc	r19, r27
    266a:	dc 80       	ldd	r13, Y+4	; 0x04
    266c:	dd 20       	and	r13, r13
    266e:	61 f0       	breq	.+24     	; 0x2688 <setMeasurementTimingBudget+0xd6>
    2670:	8c 89       	ldd	r24, Y+20	; 0x14
    2672:	9d 89       	ldd	r25, Y+21	; 0x15
    2674:	ae 89       	ldd	r26, Y+22	; 0x16
    2676:	bf 89       	ldd	r27, Y+23	; 0x17
    2678:	8c 56       	subi	r24, 0x6C	; 108
    267a:	9d 4f       	sbci	r25, 0xFD	; 253
    267c:	af 4f       	sbci	r26, 0xFF	; 255
    267e:	bf 4f       	sbci	r27, 0xFF	; 255
    2680:	08 0f       	add	r16, r24
    2682:	19 1f       	adc	r17, r25
    2684:	2a 1f       	adc	r18, r26
    2686:	3b 1f       	adc	r19, r27
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	88 23       	and	r24, r24
    268c:	11 f1       	breq	.+68     	; 0x26d2 <setMeasurementTimingBudget+0x120>
    268e:	0a 5d       	subi	r16, 0xDA	; 218
    2690:	1d 4f       	sbci	r17, 0xFD	; 253
    2692:	2f 4f       	sbci	r18, 0xFF	; 255
    2694:	3f 4f       	sbci	r19, 0xFF	; 255
    2696:	80 16       	cp	r8, r16
    2698:	91 06       	cpc	r9, r17
    269a:	a2 06       	cpc	r10, r18
    269c:	b3 06       	cpc	r11, r19
    269e:	d8 f0       	brcs	.+54     	; 0x26d6 <setMeasurementTimingBudget+0x124>
    26a0:	c5 01       	movw	r24, r10
    26a2:	b4 01       	movw	r22, r8
    26a4:	60 1b       	sub	r22, r16
    26a6:	71 0b       	sbc	r23, r17
    26a8:	82 0b       	sbc	r24, r18
    26aa:	93 0b       	sbc	r25, r19
    26ac:	48 85       	ldd	r20, Y+8	; 0x08
    26ae:	20 df       	rcall	.-448    	; 0x24f0 <timeoutMicrosecondsToMclks>
    26b0:	9b 01       	movw	r18, r22
    26b2:	dd 20       	and	r13, r13
    26b4:	21 f0       	breq	.+8      	; 0x26be <setMeasurementTimingBudget+0x10c>
    26b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    26b8:	3d 85       	ldd	r19, Y+13	; 0x0d
    26ba:	26 0f       	add	r18, r22
    26bc:	37 1f       	adc	r19, r23
    26be:	c9 01       	movw	r24, r18
    26c0:	38 de       	rcall	.-912    	; 0x2332 <encodeTimeout>
    26c2:	ac 01       	movw	r20, r24
    26c4:	61 e7       	ldi	r22, 0x71	; 113
    26c6:	c7 01       	movw	r24, r14
    26c8:	c1 dc       	rcall	.-1662   	; 0x204c <writeReg16Bit>
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	05 c0       	rjmp	.+10     	; 0x26d8 <setMeasurementTimingBudget+0x126>
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	03 c0       	rjmp	.+6      	; 0x26d8 <setMeasurementTimingBudget+0x126>
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	01 c0       	rjmp	.+2      	; 0x26d8 <setMeasurementTimingBudget+0x126>
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	6b 96       	adiw	r28, 0x1b	; 27
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	f8 94       	cli
    26de:	de bf       	out	0x3e, r29	; 62
    26e0:	0f be       	out	0x3f, r0	; 63
    26e2:	cd bf       	out	0x3d, r28	; 61
    26e4:	df 91       	pop	r29
    26e6:	cf 91       	pop	r28
    26e8:	1f 91       	pop	r17
    26ea:	0f 91       	pop	r16
    26ec:	ff 90       	pop	r15
    26ee:	ef 90       	pop	r14
    26f0:	df 90       	pop	r13
    26f2:	bf 90       	pop	r11
    26f4:	af 90       	pop	r10
    26f6:	9f 90       	pop	r9
    26f8:	8f 90       	pop	r8
    26fa:	08 95       	ret

000026fc <vl53l0x_init>:
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	ec 01       	movw	r28, r24
    2702:	80 e8       	ldi	r24, 0x80	; 128
    2704:	9a e1       	ldi	r25, 0x1A	; 26
    2706:	a6 e0       	ldi	r26, 0x06	; 6
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	80 93 6b 01 	sts	0x016B, r24	; 0x80016b <s_i2cInterface>
    270e:	90 93 6c 01 	sts	0x016C, r25	; 0x80016c <s_i2cInterface+0x1>
    2712:	a0 93 6d 01 	sts	0x016D, r26	; 0x80016d <s_i2cInterface+0x2>
    2716:	b0 93 6e 01 	sts	0x016E, r27	; 0x80016e <s_i2cInterface+0x3>
    271a:	60 e8       	ldi	r22, 0x80	; 128
    271c:	7a e1       	ldi	r23, 0x1A	; 26
    271e:	86 e0       	ldi	r24, 0x06	; 6
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <i2c_init>
    2726:	0e 94 a3 02 	call	0x546	; 0x546 <i2c_start>
    272a:	1a 82       	std	Y+2, r1	; 0x02
    272c:	19 82       	std	Y+1, r1	; 0x01
    272e:	1b 82       	std	Y+3, r1	; 0x03
    2730:	6c 81       	ldd	r22, Y+4	; 0x04
    2732:	7d 81       	ldd	r23, Y+5	; 0x05
    2734:	8e 81       	ldd	r24, Y+6	; 0x06
    2736:	9f 81       	ldd	r25, Y+7	; 0x07
    2738:	0e 94 ac 01 	call	0x358	; 0x358 <gpio_init>
    273c:	ce 01       	movw	r24, r28
    273e:	04 96       	adiw	r24, 0x04	; 4
    2740:	0e 94 df 01 	call	0x3be	; 0x3be <gpio_setDirectionOutput>
    2744:	6c 81       	ldd	r22, Y+4	; 0x04
    2746:	7d 81       	ldd	r23, Y+5	; 0x05
    2748:	8e 81       	ldd	r24, Y+6	; 0x06
    274a:	9f 81       	ldd	r25, Y+7	; 0x07
    274c:	0e 94 04 02 	call	0x408	; 0x408 <gpio_out_reset>
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <vl53l0x_start>:
    2756:	0f 93       	push	r16
    2758:	1f 93       	push	r17
    275a:	cf 93       	push	r28
    275c:	df 93       	push	r29
    275e:	cd b7       	in	r28, 0x3d	; 61
    2760:	de b7       	in	r29, 0x3e	; 62
    2762:	28 97       	sbiw	r28, 0x08	; 8
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	de bf       	out	0x3e, r29	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	cd bf       	out	0x3d, r28	; 61
    276e:	8c 01       	movw	r16, r24
    2770:	fc 01       	movw	r30, r24
    2772:	64 81       	ldd	r22, Z+4	; 0x04
    2774:	75 81       	ldd	r23, Z+5	; 0x05
    2776:	86 81       	ldd	r24, Z+6	; 0x06
    2778:	97 81       	ldd	r25, Z+7	; 0x07
    277a:	0e 94 e8 01 	call	0x3d0	; 0x3d0 <gpio_out_set>
    277e:	8f e9       	ldi	r24, 0x9F	; 159
    2780:	9f e0       	ldi	r25, 0x0F	; 15
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <vl53l0x_start+0x2c>
    2786:	00 c0       	rjmp	.+0      	; 0x2788 <vl53l0x_start+0x32>
    2788:	00 00       	nop
    278a:	69 e8       	ldi	r22, 0x89	; 137
    278c:	c8 01       	movw	r24, r16
    278e:	9e dc       	rcall	.-1732   	; 0x20cc <readReg>
    2790:	48 2f       	mov	r20, r24
    2792:	41 60       	ori	r20, 0x01	; 1
    2794:	69 e8       	ldi	r22, 0x89	; 137
    2796:	c8 01       	movw	r24, r16
    2798:	45 dc       	rcall	.-1910   	; 0x2024 <writeReg>
    279a:	40 e0       	ldi	r20, 0x00	; 0
    279c:	68 e8       	ldi	r22, 0x88	; 136
    279e:	c8 01       	movw	r24, r16
    27a0:	41 dc       	rcall	.-1918   	; 0x2024 <writeReg>
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	60 e8       	ldi	r22, 0x80	; 128
    27a6:	c8 01       	movw	r24, r16
    27a8:	3d dc       	rcall	.-1926   	; 0x2024 <writeReg>
    27aa:	41 e0       	ldi	r20, 0x01	; 1
    27ac:	6f ef       	ldi	r22, 0xFF	; 255
    27ae:	c8 01       	movw	r24, r16
    27b0:	39 dc       	rcall	.-1934   	; 0x2024 <writeReg>
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	60 e0       	ldi	r22, 0x00	; 0
    27b6:	c8 01       	movw	r24, r16
    27b8:	35 dc       	rcall	.-1942   	; 0x2024 <writeReg>
    27ba:	61 e9       	ldi	r22, 0x91	; 145
    27bc:	c8 01       	movw	r24, r16
    27be:	86 dc       	rcall	.-1780   	; 0x20cc <readReg>
    27c0:	f8 01       	movw	r30, r16
    27c2:	82 87       	std	Z+10, r24	; 0x0a
    27c4:	41 e0       	ldi	r20, 0x01	; 1
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	c8 01       	movw	r24, r16
    27ca:	2c dc       	rcall	.-1960   	; 0x2024 <writeReg>
    27cc:	40 e0       	ldi	r20, 0x00	; 0
    27ce:	6f ef       	ldi	r22, 0xFF	; 255
    27d0:	c8 01       	movw	r24, r16
    27d2:	28 dc       	rcall	.-1968   	; 0x2024 <writeReg>
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	60 e8       	ldi	r22, 0x80	; 128
    27d8:	c8 01       	movw	r24, r16
    27da:	24 dc       	rcall	.-1976   	; 0x2024 <writeReg>
    27dc:	60 e6       	ldi	r22, 0x60	; 96
    27de:	c8 01       	movw	r24, r16
    27e0:	75 dc       	rcall	.-1814   	; 0x20cc <readReg>
    27e2:	48 2f       	mov	r20, r24
    27e4:	42 61       	ori	r20, 0x12	; 18
    27e6:	60 e6       	ldi	r22, 0x60	; 96
    27e8:	c8 01       	movw	r24, r16
    27ea:	1c dc       	rcall	.-1992   	; 0x2024 <writeReg>
    27ec:	40 e2       	ldi	r20, 0x20	; 32
    27ee:	50 e0       	ldi	r21, 0x00	; 0
    27f0:	64 e4       	ldi	r22, 0x44	; 68
    27f2:	c8 01       	movw	r24, r16
    27f4:	2b dc       	rcall	.-1962   	; 0x204c <writeReg16Bit>
    27f6:	4f ef       	ldi	r20, 0xFF	; 255
    27f8:	61 e0       	ldi	r22, 0x01	; 1
    27fa:	c8 01       	movw	r24, r16
    27fc:	13 dc       	rcall	.-2010   	; 0x2024 <writeReg>
    27fe:	ae 01       	movw	r20, r28
    2800:	4e 5f       	subi	r20, 0xFE	; 254
    2802:	5f 4f       	sbci	r21, 0xFF	; 255
    2804:	be 01       	movw	r22, r28
    2806:	6f 5f       	subi	r22, 0xFF	; 255
    2808:	7f 4f       	sbci	r23, 0xFF	; 255
    280a:	c8 01       	movw	r24, r16
    280c:	fc dc       	rcall	.-1544   	; 0x2206 <getSpadInfo>
    280e:	88 23       	and	r24, r24
    2810:	09 f4       	brne	.+2      	; 0x2814 <vl53l0x_start+0xbe>
    2812:	d2 c1       	rjmp	.+932    	; 0x2bb8 <vl53l0x_start+0x462>
    2814:	26 e0       	ldi	r18, 0x06	; 6
    2816:	ae 01       	movw	r20, r28
    2818:	4d 5f       	subi	r20, 0xFD	; 253
    281a:	5f 4f       	sbci	r21, 0xFF	; 255
    281c:	60 eb       	ldi	r22, 0xB0	; 176
    281e:	c8 01       	movw	r24, r16
    2820:	bc dc       	rcall	.-1672   	; 0x219a <readMulti>
    2822:	41 e0       	ldi	r20, 0x01	; 1
    2824:	6f ef       	ldi	r22, 0xFF	; 255
    2826:	c8 01       	movw	r24, r16
    2828:	fd db       	rcall	.-2054   	; 0x2024 <writeReg>
    282a:	40 e0       	ldi	r20, 0x00	; 0
    282c:	6f e4       	ldi	r22, 0x4F	; 79
    282e:	c8 01       	movw	r24, r16
    2830:	f9 db       	rcall	.-2062   	; 0x2024 <writeReg>
    2832:	4c e2       	ldi	r20, 0x2C	; 44
    2834:	6e e4       	ldi	r22, 0x4E	; 78
    2836:	c8 01       	movw	r24, r16
    2838:	f5 db       	rcall	.-2070   	; 0x2024 <writeReg>
    283a:	40 e0       	ldi	r20, 0x00	; 0
    283c:	6f ef       	ldi	r22, 0xFF	; 255
    283e:	c8 01       	movw	r24, r16
    2840:	f1 db       	rcall	.-2078   	; 0x2024 <writeReg>
    2842:	44 eb       	ldi	r20, 0xB4	; 180
    2844:	66 eb       	ldi	r22, 0xB6	; 182
    2846:	c8 01       	movw	r24, r16
    2848:	ed db       	rcall	.-2086   	; 0x2024 <writeReg>
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	81 11       	cpse	r24, r1
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <vl53l0x_start+0xfe>
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	01 c0       	rjmp	.+2      	; 0x2856 <vl53l0x_start+0x100>
    2854:	6c e0       	ldi	r22, 0x0C	; 12
    2856:	a9 81       	ldd	r26, Y+1	; 0x01
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	70 e0       	ldi	r23, 0x00	; 0
    285c:	41 e0       	ldi	r20, 0x01	; 1
    285e:	50 e0       	ldi	r21, 0x00	; 0
    2860:	86 17       	cp	r24, r22
    2862:	10 f0       	brcs	.+4      	; 0x2868 <vl53l0x_start+0x112>
    2864:	a7 13       	cpse	r26, r23
    2866:	18 c0       	rjmp	.+48     	; 0x2898 <vl53l0x_start+0x142>
    2868:	98 2f       	mov	r25, r24
    286a:	96 95       	lsr	r25
    286c:	96 95       	lsr	r25
    286e:	96 95       	lsr	r25
    2870:	e3 e0       	ldi	r30, 0x03	; 3
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	ec 0f       	add	r30, r28
    2876:	fd 1f       	adc	r31, r29
    2878:	e9 0f       	add	r30, r25
    287a:	f1 1d       	adc	r31, r1
    287c:	98 2f       	mov	r25, r24
    287e:	97 70       	andi	r25, 0x07	; 7
    2880:	9a 01       	movw	r18, r20
    2882:	02 c0       	rjmp	.+4      	; 0x2888 <vl53l0x_start+0x132>
    2884:	22 0f       	add	r18, r18
    2886:	33 1f       	adc	r19, r19
    2888:	9a 95       	dec	r25
    288a:	e2 f7       	brpl	.-8      	; 0x2884 <vl53l0x_start+0x12e>
    288c:	92 2f       	mov	r25, r18
    288e:	90 95       	com	r25
    2890:	20 81       	ld	r18, Z
    2892:	92 23       	and	r25, r18
    2894:	90 83       	st	Z, r25
    2896:	15 c0       	rjmp	.+42     	; 0x28c2 <vl53l0x_start+0x16c>
    2898:	98 2f       	mov	r25, r24
    289a:	96 95       	lsr	r25
    289c:	96 95       	lsr	r25
    289e:	96 95       	lsr	r25
    28a0:	e3 e0       	ldi	r30, 0x03	; 3
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	ec 0f       	add	r30, r28
    28a6:	fd 1f       	adc	r31, r29
    28a8:	e9 0f       	add	r30, r25
    28aa:	f1 1d       	adc	r31, r1
    28ac:	20 81       	ld	r18, Z
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	98 2f       	mov	r25, r24
    28b2:	97 70       	andi	r25, 0x07	; 7
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <vl53l0x_start+0x164>
    28b6:	35 95       	asr	r19
    28b8:	27 95       	ror	r18
    28ba:	9a 95       	dec	r25
    28bc:	e2 f7       	brpl	.-8      	; 0x28b6 <vl53l0x_start+0x160>
    28be:	20 fd       	sbrc	r18, 0
    28c0:	7f 5f       	subi	r23, 0xFF	; 255
    28c2:	8f 5f       	subi	r24, 0xFF	; 255
    28c4:	80 33       	cpi	r24, 0x30	; 48
    28c6:	61 f6       	brne	.-104    	; 0x2860 <vl53l0x_start+0x10a>
    28c8:	26 e0       	ldi	r18, 0x06	; 6
    28ca:	ae 01       	movw	r20, r28
    28cc:	4d 5f       	subi	r20, 0xFD	; 253
    28ce:	5f 4f       	sbci	r21, 0xFF	; 255
    28d0:	60 eb       	ldi	r22, 0xB0	; 176
    28d2:	c8 01       	movw	r24, r16
    28d4:	37 dc       	rcall	.-1938   	; 0x2144 <writeMulti>
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	6f ef       	ldi	r22, 0xFF	; 255
    28da:	c8 01       	movw	r24, r16
    28dc:	a3 db       	rcall	.-2234   	; 0x2024 <writeReg>
    28de:	40 e0       	ldi	r20, 0x00	; 0
    28e0:	60 e0       	ldi	r22, 0x00	; 0
    28e2:	c8 01       	movw	r24, r16
    28e4:	9f db       	rcall	.-2242   	; 0x2024 <writeReg>
    28e6:	40 e0       	ldi	r20, 0x00	; 0
    28e8:	6f ef       	ldi	r22, 0xFF	; 255
    28ea:	c8 01       	movw	r24, r16
    28ec:	9b db       	rcall	.-2250   	; 0x2024 <writeReg>
    28ee:	40 e0       	ldi	r20, 0x00	; 0
    28f0:	69 e0       	ldi	r22, 0x09	; 9
    28f2:	c8 01       	movw	r24, r16
    28f4:	97 db       	rcall	.-2258   	; 0x2024 <writeReg>
    28f6:	40 e0       	ldi	r20, 0x00	; 0
    28f8:	60 e1       	ldi	r22, 0x10	; 16
    28fa:	c8 01       	movw	r24, r16
    28fc:	93 db       	rcall	.-2266   	; 0x2024 <writeReg>
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	61 e1       	ldi	r22, 0x11	; 17
    2902:	c8 01       	movw	r24, r16
    2904:	8f db       	rcall	.-2274   	; 0x2024 <writeReg>
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	64 e2       	ldi	r22, 0x24	; 36
    290a:	c8 01       	movw	r24, r16
    290c:	8b db       	rcall	.-2282   	; 0x2024 <writeReg>
    290e:	4f ef       	ldi	r20, 0xFF	; 255
    2910:	65 e2       	ldi	r22, 0x25	; 37
    2912:	c8 01       	movw	r24, r16
    2914:	87 db       	rcall	.-2290   	; 0x2024 <writeReg>
    2916:	40 e0       	ldi	r20, 0x00	; 0
    2918:	65 e7       	ldi	r22, 0x75	; 117
    291a:	c8 01       	movw	r24, r16
    291c:	83 db       	rcall	.-2298   	; 0x2024 <writeReg>
    291e:	41 e0       	ldi	r20, 0x01	; 1
    2920:	6f ef       	ldi	r22, 0xFF	; 255
    2922:	c8 01       	movw	r24, r16
    2924:	7f db       	rcall	.-2306   	; 0x2024 <writeReg>
    2926:	4c e2       	ldi	r20, 0x2C	; 44
    2928:	6e e4       	ldi	r22, 0x4E	; 78
    292a:	c8 01       	movw	r24, r16
    292c:	7b db       	rcall	.-2314   	; 0x2024 <writeReg>
    292e:	40 e0       	ldi	r20, 0x00	; 0
    2930:	68 e4       	ldi	r22, 0x48	; 72
    2932:	c8 01       	movw	r24, r16
    2934:	77 db       	rcall	.-2322   	; 0x2024 <writeReg>
    2936:	40 e2       	ldi	r20, 0x20	; 32
    2938:	60 e3       	ldi	r22, 0x30	; 48
    293a:	c8 01       	movw	r24, r16
    293c:	73 db       	rcall	.-2330   	; 0x2024 <writeReg>
    293e:	40 e0       	ldi	r20, 0x00	; 0
    2940:	6f ef       	ldi	r22, 0xFF	; 255
    2942:	c8 01       	movw	r24, r16
    2944:	6f db       	rcall	.-2338   	; 0x2024 <writeReg>
    2946:	49 e0       	ldi	r20, 0x09	; 9
    2948:	60 e3       	ldi	r22, 0x30	; 48
    294a:	c8 01       	movw	r24, r16
    294c:	6b db       	rcall	.-2346   	; 0x2024 <writeReg>
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	64 e5       	ldi	r22, 0x54	; 84
    2952:	c8 01       	movw	r24, r16
    2954:	67 db       	rcall	.-2354   	; 0x2024 <writeReg>
    2956:	44 e0       	ldi	r20, 0x04	; 4
    2958:	61 e3       	ldi	r22, 0x31	; 49
    295a:	c8 01       	movw	r24, r16
    295c:	63 db       	rcall	.-2362   	; 0x2024 <writeReg>
    295e:	43 e0       	ldi	r20, 0x03	; 3
    2960:	62 e3       	ldi	r22, 0x32	; 50
    2962:	c8 01       	movw	r24, r16
    2964:	5f db       	rcall	.-2370   	; 0x2024 <writeReg>
    2966:	43 e8       	ldi	r20, 0x83	; 131
    2968:	60 e4       	ldi	r22, 0x40	; 64
    296a:	c8 01       	movw	r24, r16
    296c:	5b db       	rcall	.-2378   	; 0x2024 <writeReg>
    296e:	45 e2       	ldi	r20, 0x25	; 37
    2970:	66 e4       	ldi	r22, 0x46	; 70
    2972:	c8 01       	movw	r24, r16
    2974:	57 db       	rcall	.-2386   	; 0x2024 <writeReg>
    2976:	40 e0       	ldi	r20, 0x00	; 0
    2978:	60 e6       	ldi	r22, 0x60	; 96
    297a:	c8 01       	movw	r24, r16
    297c:	53 db       	rcall	.-2394   	; 0x2024 <writeReg>
    297e:	40 e0       	ldi	r20, 0x00	; 0
    2980:	67 e2       	ldi	r22, 0x27	; 39
    2982:	c8 01       	movw	r24, r16
    2984:	4f db       	rcall	.-2402   	; 0x2024 <writeReg>
    2986:	46 e0       	ldi	r20, 0x06	; 6
    2988:	60 e5       	ldi	r22, 0x50	; 80
    298a:	c8 01       	movw	r24, r16
    298c:	4b db       	rcall	.-2410   	; 0x2024 <writeReg>
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	61 e5       	ldi	r22, 0x51	; 81
    2992:	c8 01       	movw	r24, r16
    2994:	47 db       	rcall	.-2418   	; 0x2024 <writeReg>
    2996:	46 e9       	ldi	r20, 0x96	; 150
    2998:	62 e5       	ldi	r22, 0x52	; 82
    299a:	c8 01       	movw	r24, r16
    299c:	43 db       	rcall	.-2426   	; 0x2024 <writeReg>
    299e:	48 e0       	ldi	r20, 0x08	; 8
    29a0:	66 e5       	ldi	r22, 0x56	; 86
    29a2:	c8 01       	movw	r24, r16
    29a4:	3f db       	rcall	.-2434   	; 0x2024 <writeReg>
    29a6:	40 e3       	ldi	r20, 0x30	; 48
    29a8:	67 e5       	ldi	r22, 0x57	; 87
    29aa:	c8 01       	movw	r24, r16
    29ac:	3b db       	rcall	.-2442   	; 0x2024 <writeReg>
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	61 e6       	ldi	r22, 0x61	; 97
    29b2:	c8 01       	movw	r24, r16
    29b4:	37 db       	rcall	.-2450   	; 0x2024 <writeReg>
    29b6:	40 e0       	ldi	r20, 0x00	; 0
    29b8:	62 e6       	ldi	r22, 0x62	; 98
    29ba:	c8 01       	movw	r24, r16
    29bc:	33 db       	rcall	.-2458   	; 0x2024 <writeReg>
    29be:	40 e0       	ldi	r20, 0x00	; 0
    29c0:	64 e6       	ldi	r22, 0x64	; 100
    29c2:	c8 01       	movw	r24, r16
    29c4:	2f db       	rcall	.-2466   	; 0x2024 <writeReg>
    29c6:	40 e0       	ldi	r20, 0x00	; 0
    29c8:	65 e6       	ldi	r22, 0x65	; 101
    29ca:	c8 01       	movw	r24, r16
    29cc:	2b db       	rcall	.-2474   	; 0x2024 <writeReg>
    29ce:	40 ea       	ldi	r20, 0xA0	; 160
    29d0:	66 e6       	ldi	r22, 0x66	; 102
    29d2:	c8 01       	movw	r24, r16
    29d4:	27 db       	rcall	.-2482   	; 0x2024 <writeReg>
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	6f ef       	ldi	r22, 0xFF	; 255
    29da:	c8 01       	movw	r24, r16
    29dc:	23 db       	rcall	.-2490   	; 0x2024 <writeReg>
    29de:	42 e3       	ldi	r20, 0x32	; 50
    29e0:	62 e2       	ldi	r22, 0x22	; 34
    29e2:	c8 01       	movw	r24, r16
    29e4:	1f db       	rcall	.-2498   	; 0x2024 <writeReg>
    29e6:	44 e1       	ldi	r20, 0x14	; 20
    29e8:	67 e4       	ldi	r22, 0x47	; 71
    29ea:	c8 01       	movw	r24, r16
    29ec:	1b db       	rcall	.-2506   	; 0x2024 <writeReg>
    29ee:	4f ef       	ldi	r20, 0xFF	; 255
    29f0:	69 e4       	ldi	r22, 0x49	; 73
    29f2:	c8 01       	movw	r24, r16
    29f4:	17 db       	rcall	.-2514   	; 0x2024 <writeReg>
    29f6:	40 e0       	ldi	r20, 0x00	; 0
    29f8:	6a e4       	ldi	r22, 0x4A	; 74
    29fa:	c8 01       	movw	r24, r16
    29fc:	13 db       	rcall	.-2522   	; 0x2024 <writeReg>
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	6f ef       	ldi	r22, 0xFF	; 255
    2a02:	c8 01       	movw	r24, r16
    2a04:	0f db       	rcall	.-2530   	; 0x2024 <writeReg>
    2a06:	4a e0       	ldi	r20, 0x0A	; 10
    2a08:	6a e7       	ldi	r22, 0x7A	; 122
    2a0a:	c8 01       	movw	r24, r16
    2a0c:	0b db       	rcall	.-2538   	; 0x2024 <writeReg>
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	6b e7       	ldi	r22, 0x7B	; 123
    2a12:	c8 01       	movw	r24, r16
    2a14:	07 db       	rcall	.-2546   	; 0x2024 <writeReg>
    2a16:	41 e2       	ldi	r20, 0x21	; 33
    2a18:	68 e7       	ldi	r22, 0x78	; 120
    2a1a:	c8 01       	movw	r24, r16
    2a1c:	03 db       	rcall	.-2554   	; 0x2024 <writeReg>
    2a1e:	41 e0       	ldi	r20, 0x01	; 1
    2a20:	6f ef       	ldi	r22, 0xFF	; 255
    2a22:	c8 01       	movw	r24, r16
    2a24:	ff da       	rcall	.-2562   	; 0x2024 <writeReg>
    2a26:	44 e3       	ldi	r20, 0x34	; 52
    2a28:	63 e2       	ldi	r22, 0x23	; 35
    2a2a:	c8 01       	movw	r24, r16
    2a2c:	fb da       	rcall	.-2570   	; 0x2024 <writeReg>
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	62 e4       	ldi	r22, 0x42	; 66
    2a32:	c8 01       	movw	r24, r16
    2a34:	f7 da       	rcall	.-2578   	; 0x2024 <writeReg>
    2a36:	4f ef       	ldi	r20, 0xFF	; 255
    2a38:	64 e4       	ldi	r22, 0x44	; 68
    2a3a:	c8 01       	movw	r24, r16
    2a3c:	f3 da       	rcall	.-2586   	; 0x2024 <writeReg>
    2a3e:	46 e2       	ldi	r20, 0x26	; 38
    2a40:	65 e4       	ldi	r22, 0x45	; 69
    2a42:	c8 01       	movw	r24, r16
    2a44:	ef da       	rcall	.-2594   	; 0x2024 <writeReg>
    2a46:	45 e0       	ldi	r20, 0x05	; 5
    2a48:	66 e4       	ldi	r22, 0x46	; 70
    2a4a:	c8 01       	movw	r24, r16
    2a4c:	eb da       	rcall	.-2602   	; 0x2024 <writeReg>
    2a4e:	40 e4       	ldi	r20, 0x40	; 64
    2a50:	60 e4       	ldi	r22, 0x40	; 64
    2a52:	c8 01       	movw	r24, r16
    2a54:	e7 da       	rcall	.-2610   	; 0x2024 <writeReg>
    2a56:	46 e0       	ldi	r20, 0x06	; 6
    2a58:	6e e0       	ldi	r22, 0x0E	; 14
    2a5a:	c8 01       	movw	r24, r16
    2a5c:	e3 da       	rcall	.-2618   	; 0x2024 <writeReg>
    2a5e:	4a e1       	ldi	r20, 0x1A	; 26
    2a60:	60 e2       	ldi	r22, 0x20	; 32
    2a62:	c8 01       	movw	r24, r16
    2a64:	df da       	rcall	.-2626   	; 0x2024 <writeReg>
    2a66:	40 e4       	ldi	r20, 0x40	; 64
    2a68:	63 e4       	ldi	r22, 0x43	; 67
    2a6a:	c8 01       	movw	r24, r16
    2a6c:	db da       	rcall	.-2634   	; 0x2024 <writeReg>
    2a6e:	40 e0       	ldi	r20, 0x00	; 0
    2a70:	6f ef       	ldi	r22, 0xFF	; 255
    2a72:	c8 01       	movw	r24, r16
    2a74:	d7 da       	rcall	.-2642   	; 0x2024 <writeReg>
    2a76:	43 e0       	ldi	r20, 0x03	; 3
    2a78:	64 e3       	ldi	r22, 0x34	; 52
    2a7a:	c8 01       	movw	r24, r16
    2a7c:	d3 da       	rcall	.-2650   	; 0x2024 <writeReg>
    2a7e:	44 e4       	ldi	r20, 0x44	; 68
    2a80:	65 e3       	ldi	r22, 0x35	; 53
    2a82:	c8 01       	movw	r24, r16
    2a84:	cf da       	rcall	.-2658   	; 0x2024 <writeReg>
    2a86:	41 e0       	ldi	r20, 0x01	; 1
    2a88:	6f ef       	ldi	r22, 0xFF	; 255
    2a8a:	c8 01       	movw	r24, r16
    2a8c:	cb da       	rcall	.-2666   	; 0x2024 <writeReg>
    2a8e:	44 e0       	ldi	r20, 0x04	; 4
    2a90:	61 e3       	ldi	r22, 0x31	; 49
    2a92:	c8 01       	movw	r24, r16
    2a94:	c7 da       	rcall	.-2674   	; 0x2024 <writeReg>
    2a96:	49 e0       	ldi	r20, 0x09	; 9
    2a98:	6b e4       	ldi	r22, 0x4B	; 75
    2a9a:	c8 01       	movw	r24, r16
    2a9c:	c3 da       	rcall	.-2682   	; 0x2024 <writeReg>
    2a9e:	45 e0       	ldi	r20, 0x05	; 5
    2aa0:	6c e4       	ldi	r22, 0x4C	; 76
    2aa2:	c8 01       	movw	r24, r16
    2aa4:	bf da       	rcall	.-2690   	; 0x2024 <writeReg>
    2aa6:	44 e0       	ldi	r20, 0x04	; 4
    2aa8:	6d e4       	ldi	r22, 0x4D	; 77
    2aaa:	c8 01       	movw	r24, r16
    2aac:	bb da       	rcall	.-2698   	; 0x2024 <writeReg>
    2aae:	40 e0       	ldi	r20, 0x00	; 0
    2ab0:	6f ef       	ldi	r22, 0xFF	; 255
    2ab2:	c8 01       	movw	r24, r16
    2ab4:	b7 da       	rcall	.-2706   	; 0x2024 <writeReg>
    2ab6:	40 e0       	ldi	r20, 0x00	; 0
    2ab8:	64 e4       	ldi	r22, 0x44	; 68
    2aba:	c8 01       	movw	r24, r16
    2abc:	b3 da       	rcall	.-2714   	; 0x2024 <writeReg>
    2abe:	40 e2       	ldi	r20, 0x20	; 32
    2ac0:	65 e4       	ldi	r22, 0x45	; 69
    2ac2:	c8 01       	movw	r24, r16
    2ac4:	af da       	rcall	.-2722   	; 0x2024 <writeReg>
    2ac6:	48 e0       	ldi	r20, 0x08	; 8
    2ac8:	67 e4       	ldi	r22, 0x47	; 71
    2aca:	c8 01       	movw	r24, r16
    2acc:	ab da       	rcall	.-2730   	; 0x2024 <writeReg>
    2ace:	48 e2       	ldi	r20, 0x28	; 40
    2ad0:	68 e4       	ldi	r22, 0x48	; 72
    2ad2:	c8 01       	movw	r24, r16
    2ad4:	a7 da       	rcall	.-2738   	; 0x2024 <writeReg>
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	67 e6       	ldi	r22, 0x67	; 103
    2ada:	c8 01       	movw	r24, r16
    2adc:	a3 da       	rcall	.-2746   	; 0x2024 <writeReg>
    2ade:	44 e0       	ldi	r20, 0x04	; 4
    2ae0:	60 e7       	ldi	r22, 0x70	; 112
    2ae2:	c8 01       	movw	r24, r16
    2ae4:	9f da       	rcall	.-2754   	; 0x2024 <writeReg>
    2ae6:	41 e0       	ldi	r20, 0x01	; 1
    2ae8:	61 e7       	ldi	r22, 0x71	; 113
    2aea:	c8 01       	movw	r24, r16
    2aec:	9b da       	rcall	.-2762   	; 0x2024 <writeReg>
    2aee:	4e ef       	ldi	r20, 0xFE	; 254
    2af0:	62 e7       	ldi	r22, 0x72	; 114
    2af2:	c8 01       	movw	r24, r16
    2af4:	97 da       	rcall	.-2770   	; 0x2024 <writeReg>
    2af6:	40 e0       	ldi	r20, 0x00	; 0
    2af8:	66 e7       	ldi	r22, 0x76	; 118
    2afa:	c8 01       	movw	r24, r16
    2afc:	93 da       	rcall	.-2778   	; 0x2024 <writeReg>
    2afe:	40 e0       	ldi	r20, 0x00	; 0
    2b00:	67 e7       	ldi	r22, 0x77	; 119
    2b02:	c8 01       	movw	r24, r16
    2b04:	8f da       	rcall	.-2786   	; 0x2024 <writeReg>
    2b06:	41 e0       	ldi	r20, 0x01	; 1
    2b08:	6f ef       	ldi	r22, 0xFF	; 255
    2b0a:	c8 01       	movw	r24, r16
    2b0c:	8b da       	rcall	.-2794   	; 0x2024 <writeReg>
    2b0e:	41 e0       	ldi	r20, 0x01	; 1
    2b10:	6d e0       	ldi	r22, 0x0D	; 13
    2b12:	c8 01       	movw	r24, r16
    2b14:	87 da       	rcall	.-2802   	; 0x2024 <writeReg>
    2b16:	40 e0       	ldi	r20, 0x00	; 0
    2b18:	6f ef       	ldi	r22, 0xFF	; 255
    2b1a:	c8 01       	movw	r24, r16
    2b1c:	83 da       	rcall	.-2810   	; 0x2024 <writeReg>
    2b1e:	41 e0       	ldi	r20, 0x01	; 1
    2b20:	60 e8       	ldi	r22, 0x80	; 128
    2b22:	c8 01       	movw	r24, r16
    2b24:	7f da       	rcall	.-2818   	; 0x2024 <writeReg>
    2b26:	48 ef       	ldi	r20, 0xF8	; 248
    2b28:	61 e0       	ldi	r22, 0x01	; 1
    2b2a:	c8 01       	movw	r24, r16
    2b2c:	7b da       	rcall	.-2826   	; 0x2024 <writeReg>
    2b2e:	41 e0       	ldi	r20, 0x01	; 1
    2b30:	6f ef       	ldi	r22, 0xFF	; 255
    2b32:	c8 01       	movw	r24, r16
    2b34:	77 da       	rcall	.-2834   	; 0x2024 <writeReg>
    2b36:	41 e0       	ldi	r20, 0x01	; 1
    2b38:	6e e8       	ldi	r22, 0x8E	; 142
    2b3a:	c8 01       	movw	r24, r16
    2b3c:	73 da       	rcall	.-2842   	; 0x2024 <writeReg>
    2b3e:	41 e0       	ldi	r20, 0x01	; 1
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	c8 01       	movw	r24, r16
    2b44:	6f da       	rcall	.-2850   	; 0x2024 <writeReg>
    2b46:	40 e0       	ldi	r20, 0x00	; 0
    2b48:	6f ef       	ldi	r22, 0xFF	; 255
    2b4a:	c8 01       	movw	r24, r16
    2b4c:	6b da       	rcall	.-2858   	; 0x2024 <writeReg>
    2b4e:	40 e0       	ldi	r20, 0x00	; 0
    2b50:	60 e8       	ldi	r22, 0x80	; 128
    2b52:	c8 01       	movw	r24, r16
    2b54:	67 da       	rcall	.-2866   	; 0x2024 <writeReg>
    2b56:	44 e0       	ldi	r20, 0x04	; 4
    2b58:	6a e0       	ldi	r22, 0x0A	; 10
    2b5a:	c8 01       	movw	r24, r16
    2b5c:	63 da       	rcall	.-2874   	; 0x2024 <writeReg>
    2b5e:	64 e8       	ldi	r22, 0x84	; 132
    2b60:	c8 01       	movw	r24, r16
    2b62:	b4 da       	rcall	.-2712   	; 0x20cc <readReg>
    2b64:	48 2f       	mov	r20, r24
    2b66:	4f 7e       	andi	r20, 0xEF	; 239
    2b68:	64 e8       	ldi	r22, 0x84	; 132
    2b6a:	c8 01       	movw	r24, r16
    2b6c:	5b da       	rcall	.-2890   	; 0x2024 <writeReg>
    2b6e:	41 e0       	ldi	r20, 0x01	; 1
    2b70:	6b e0       	ldi	r22, 0x0B	; 11
    2b72:	c8 01       	movw	r24, r16
    2b74:	57 da       	rcall	.-2898   	; 0x2024 <writeReg>
    2b76:	48 ee       	ldi	r20, 0xE8	; 232
    2b78:	61 e0       	ldi	r22, 0x01	; 1
    2b7a:	c8 01       	movw	r24, r16
    2b7c:	53 da       	rcall	.-2906   	; 0x2024 <writeReg>
    2b7e:	4e e1       	ldi	r20, 0x1E	; 30
    2b80:	50 e0       	ldi	r21, 0x00	; 0
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	c8 01       	movw	r24, r16
    2b88:	14 dd       	rcall	.-1496   	; 0x25b2 <setMeasurementTimingBudget>
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	61 e0       	ldi	r22, 0x01	; 1
    2b8e:	c8 01       	movw	r24, r16
    2b90:	49 da       	rcall	.-2926   	; 0x2024 <writeReg>
    2b92:	60 e4       	ldi	r22, 0x40	; 64
    2b94:	c8 01       	movw	r24, r16
    2b96:	ec dc       	rcall	.-1576   	; 0x2570 <performSingleRefCalibration>
    2b98:	88 23       	and	r24, r24
    2b9a:	71 f0       	breq	.+28     	; 0x2bb8 <vl53l0x_start+0x462>
    2b9c:	42 e0       	ldi	r20, 0x02	; 2
    2b9e:	61 e0       	ldi	r22, 0x01	; 1
    2ba0:	c8 01       	movw	r24, r16
    2ba2:	40 da       	rcall	.-2944   	; 0x2024 <writeReg>
    2ba4:	60 e0       	ldi	r22, 0x00	; 0
    2ba6:	c8 01       	movw	r24, r16
    2ba8:	e3 dc       	rcall	.-1594   	; 0x2570 <performSingleRefCalibration>
    2baa:	88 23       	and	r24, r24
    2bac:	29 f0       	breq	.+10     	; 0x2bb8 <vl53l0x_start+0x462>
    2bae:	48 ee       	ldi	r20, 0xE8	; 232
    2bb0:	61 e0       	ldi	r22, 0x01	; 1
    2bb2:	c8 01       	movw	r24, r16
    2bb4:	37 da       	rcall	.-2962   	; 0x2024 <writeReg>
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	28 96       	adiw	r28, 0x08	; 8
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	08 95       	ret

00002bce <vl53l0x_setAddress>:
    2bce:	1f 93       	push	r17
    2bd0:	cf 93       	push	r28
    2bd2:	df 93       	push	r29
    2bd4:	ec 01       	movw	r28, r24
    2bd6:	16 2f       	mov	r17, r22
    2bd8:	46 2f       	mov	r20, r22
    2bda:	4f 77       	andi	r20, 0x7F	; 127
    2bdc:	6a e8       	ldi	r22, 0x8A	; 138
    2bde:	22 da       	rcall	.-3004   	; 0x2024 <writeReg>
    2be0:	18 83       	st	Y, r17
    2be2:	df 91       	pop	r29
    2be4:	cf 91       	pop	r28
    2be6:	1f 91       	pop	r17
    2be8:	08 95       	ret

00002bea <vl53l0x_setMode>:
    2bea:	cf 93       	push	r28
    2bec:	df 93       	push	r29
    2bee:	ec 01       	movw	r28, r24
    2bf0:	61 30       	cpi	r22, 0x01	; 1
    2bf2:	89 f0       	breq	.+34     	; 0x2c16 <vl53l0x_setMode+0x2c>
    2bf4:	28 f0       	brcs	.+10     	; 0x2c00 <vl53l0x_setMode+0x16>
    2bf6:	62 30       	cpi	r22, 0x02	; 2
    2bf8:	c9 f0       	breq	.+50     	; 0x2c2c <vl53l0x_setMode+0x42>
    2bfa:	63 30       	cpi	r22, 0x03	; 3
    2bfc:	11 f1       	breq	.+68     	; 0x2c42 <vl53l0x_setMode+0x58>
    2bfe:	2c c0       	rjmp	.+88     	; 0x2c58 <vl53l0x_setMode+0x6e>
    2c00:	40 e2       	ldi	r20, 0x20	; 32
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	64 e4       	ldi	r22, 0x44	; 68
    2c06:	22 da       	rcall	.-3004   	; 0x204c <writeReg16Bit>
    2c08:	40 e3       	ldi	r20, 0x30	; 48
    2c0a:	55 e7       	ldi	r21, 0x75	; 117
    2c0c:	60 e0       	ldi	r22, 0x00	; 0
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	ce 01       	movw	r24, r28
    2c12:	cf dc       	rcall	.-1634   	; 0x25b2 <setMeasurementTimingBudget>
    2c14:	22 c0       	rjmp	.+68     	; 0x2c5a <vl53l0x_setMode+0x70>
    2c16:	40 e2       	ldi	r20, 0x20	; 32
    2c18:	50 e0       	ldi	r21, 0x00	; 0
    2c1a:	64 e4       	ldi	r22, 0x44	; 68
    2c1c:	17 da       	rcall	.-3026   	; 0x204c <writeReg16Bit>
    2c1e:	40 e4       	ldi	r20, 0x40	; 64
    2c20:	5d e0       	ldi	r21, 0x0D	; 13
    2c22:	63 e0       	ldi	r22, 0x03	; 3
    2c24:	70 e0       	ldi	r23, 0x00	; 0
    2c26:	ce 01       	movw	r24, r28
    2c28:	c4 dc       	rcall	.-1656   	; 0x25b2 <setMeasurementTimingBudget>
    2c2a:	17 c0       	rjmp	.+46     	; 0x2c5a <vl53l0x_setMode+0x70>
    2c2c:	4c e0       	ldi	r20, 0x0C	; 12
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	64 e4       	ldi	r22, 0x44	; 68
    2c32:	0c da       	rcall	.-3048   	; 0x204c <writeReg16Bit>
    2c34:	48 ee       	ldi	r20, 0xE8	; 232
    2c36:	50 e8       	ldi	r21, 0x80	; 128
    2c38:	60 e0       	ldi	r22, 0x00	; 0
    2c3a:	70 e0       	ldi	r23, 0x00	; 0
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	b9 dc       	rcall	.-1678   	; 0x25b2 <setMeasurementTimingBudget>
    2c40:	0c c0       	rjmp	.+24     	; 0x2c5a <vl53l0x_setMode+0x70>
    2c42:	40 e2       	ldi	r20, 0x20	; 32
    2c44:	50 e0       	ldi	r21, 0x00	; 0
    2c46:	64 e4       	ldi	r22, 0x44	; 68
    2c48:	01 da       	rcall	.-3070   	; 0x204c <writeReg16Bit>
    2c4a:	40 e2       	ldi	r20, 0x20	; 32
    2c4c:	5e e4       	ldi	r21, 0x4E	; 78
    2c4e:	60 e0       	ldi	r22, 0x00	; 0
    2c50:	70 e0       	ldi	r23, 0x00	; 0
    2c52:	ce 01       	movw	r24, r28
    2c54:	ae dc       	rcall	.-1700   	; 0x25b2 <setMeasurementTimingBudget>
    2c56:	01 c0       	rjmp	.+2      	; 0x2c5a <vl53l0x_setMode+0x70>
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret

00002c60 <vl53l0x_startContinuous>:
    2c60:	cf 92       	push	r12
    2c62:	df 92       	push	r13
    2c64:	ef 92       	push	r14
    2c66:	ff 92       	push	r15
    2c68:	cf 93       	push	r28
    2c6a:	df 93       	push	r29
    2c6c:	ec 01       	movw	r28, r24
    2c6e:	6a 01       	movw	r12, r20
    2c70:	7b 01       	movw	r14, r22
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	60 e8       	ldi	r22, 0x80	; 128
    2c76:	d6 d9       	rcall	.-3156   	; 0x2024 <writeReg>
    2c78:	41 e0       	ldi	r20, 0x01	; 1
    2c7a:	6f ef       	ldi	r22, 0xFF	; 255
    2c7c:	ce 01       	movw	r24, r28
    2c7e:	d2 d9       	rcall	.-3164   	; 0x2024 <writeReg>
    2c80:	40 e0       	ldi	r20, 0x00	; 0
    2c82:	60 e0       	ldi	r22, 0x00	; 0
    2c84:	ce 01       	movw	r24, r28
    2c86:	ce d9       	rcall	.-3172   	; 0x2024 <writeReg>
    2c88:	4a 85       	ldd	r20, Y+10	; 0x0a
    2c8a:	61 e9       	ldi	r22, 0x91	; 145
    2c8c:	ce 01       	movw	r24, r28
    2c8e:	ca d9       	rcall	.-3180   	; 0x2024 <writeReg>
    2c90:	41 e0       	ldi	r20, 0x01	; 1
    2c92:	60 e0       	ldi	r22, 0x00	; 0
    2c94:	ce 01       	movw	r24, r28
    2c96:	c6 d9       	rcall	.-3188   	; 0x2024 <writeReg>
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	6f ef       	ldi	r22, 0xFF	; 255
    2c9c:	ce 01       	movw	r24, r28
    2c9e:	c2 d9       	rcall	.-3196   	; 0x2024 <writeReg>
    2ca0:	40 e0       	ldi	r20, 0x00	; 0
    2ca2:	60 e8       	ldi	r22, 0x80	; 128
    2ca4:	ce 01       	movw	r24, r28
    2ca6:	be d9       	rcall	.-3204   	; 0x2024 <writeReg>
    2ca8:	c1 14       	cp	r12, r1
    2caa:	d1 04       	cpc	r13, r1
    2cac:	e1 04       	cpc	r14, r1
    2cae:	f1 04       	cpc	r15, r1
    2cb0:	a9 f0       	breq	.+42     	; 0x2cdc <vl53l0x_startContinuous+0x7c>
    2cb2:	68 ef       	ldi	r22, 0xF8	; 248
    2cb4:	ce 01       	movw	r24, r28
    2cb6:	25 da       	rcall	.-2998   	; 0x2102 <readReg16Bit>
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	31 f0       	breq	.+12     	; 0x2cc8 <vl53l0x_startContinuous+0x68>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	a7 01       	movw	r20, r14
    2cc0:	96 01       	movw	r18, r12
    2cc2:	7f d0       	rcall	.+254    	; 0x2dc2 <__muluhisi3>
    2cc4:	6b 01       	movw	r12, r22
    2cc6:	7c 01       	movw	r14, r24
    2cc8:	a7 01       	movw	r20, r14
    2cca:	96 01       	movw	r18, r12
    2ccc:	64 e0       	ldi	r22, 0x04	; 4
    2cce:	ce 01       	movw	r24, r28
    2cd0:	d7 d9       	rcall	.-3154   	; 0x2080 <writeReg32Bit>
    2cd2:	44 e0       	ldi	r20, 0x04	; 4
    2cd4:	60 e0       	ldi	r22, 0x00	; 0
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	a5 d9       	rcall	.-3254   	; 0x2024 <writeReg>
    2cda:	04 c0       	rjmp	.+8      	; 0x2ce4 <vl53l0x_startContinuous+0x84>
    2cdc:	42 e0       	ldi	r20, 0x02	; 2
    2cde:	60 e0       	ldi	r22, 0x00	; 0
    2ce0:	ce 01       	movw	r24, r28
    2ce2:	a0 d9       	rcall	.-3264   	; 0x2024 <writeReg>
    2ce4:	df 91       	pop	r29
    2ce6:	cf 91       	pop	r28
    2ce8:	ff 90       	pop	r15
    2cea:	ef 90       	pop	r14
    2cec:	df 90       	pop	r13
    2cee:	cf 90       	pop	r12
    2cf0:	08 95       	ret

00002cf2 <vl53l0x_readRangeContinuous>:
    2cf2:	0f 93       	push	r16
    2cf4:	1f 93       	push	r17
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	ec 01       	movw	r28, r24
    2cfc:	63 e1       	ldi	r22, 0x13	; 19
    2cfe:	e6 d9       	rcall	.-3124   	; 0x20cc <readReg>
    2d00:	87 70       	andi	r24, 0x07	; 7
    2d02:	49 f0       	breq	.+18     	; 0x2d16 <vl53l0x_readRangeContinuous+0x24>
    2d04:	6e e1       	ldi	r22, 0x1E	; 30
    2d06:	ce 01       	movw	r24, r28
    2d08:	fc d9       	rcall	.-3080   	; 0x2102 <readReg16Bit>
    2d0a:	8c 01       	movw	r16, r24
    2d0c:	41 e0       	ldi	r20, 0x01	; 1
    2d0e:	6b e0       	ldi	r22, 0x0B	; 11
    2d10:	ce 01       	movw	r24, r28
    2d12:	88 d9       	rcall	.-3312   	; 0x2024 <writeReg>
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <vl53l0x_readRangeContinuous+0x28>
    2d16:	0f ef       	ldi	r16, 0xFF	; 255
    2d18:	1f ef       	ldi	r17, 0xFF	; 255
    2d1a:	c8 01       	movw	r24, r16
    2d1c:	df 91       	pop	r29
    2d1e:	cf 91       	pop	r28
    2d20:	1f 91       	pop	r17
    2d22:	0f 91       	pop	r16
    2d24:	08 95       	ret

00002d26 <vl53l0x_incrementTimeoutCounter>:

void vl53l0x_incrementTimeoutCounter()
{
	u32_milliseconds++;
    2d26:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    2d2a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    2d2e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
    2d32:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
    2d36:	01 96       	adiw	r24, 0x01	; 1
    2d38:	a1 1d       	adc	r26, r1
    2d3a:	b1 1d       	adc	r27, r1
    2d3c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
    2d40:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
    2d44:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
    2d48:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
    2d4c:	08 95       	ret

00002d4e <__udivmodsi4>:
    2d4e:	a1 e2       	ldi	r26, 0x21	; 33
    2d50:	1a 2e       	mov	r1, r26
    2d52:	aa 1b       	sub	r26, r26
    2d54:	bb 1b       	sub	r27, r27
    2d56:	fd 01       	movw	r30, r26
    2d58:	0d c0       	rjmp	.+26     	; 0x2d74 <__udivmodsi4_ep>

00002d5a <__udivmodsi4_loop>:
    2d5a:	aa 1f       	adc	r26, r26
    2d5c:	bb 1f       	adc	r27, r27
    2d5e:	ee 1f       	adc	r30, r30
    2d60:	ff 1f       	adc	r31, r31
    2d62:	a2 17       	cp	r26, r18
    2d64:	b3 07       	cpc	r27, r19
    2d66:	e4 07       	cpc	r30, r20
    2d68:	f5 07       	cpc	r31, r21
    2d6a:	20 f0       	brcs	.+8      	; 0x2d74 <__udivmodsi4_ep>
    2d6c:	a2 1b       	sub	r26, r18
    2d6e:	b3 0b       	sbc	r27, r19
    2d70:	e4 0b       	sbc	r30, r20
    2d72:	f5 0b       	sbc	r31, r21

00002d74 <__udivmodsi4_ep>:
    2d74:	66 1f       	adc	r22, r22
    2d76:	77 1f       	adc	r23, r23
    2d78:	88 1f       	adc	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	1a 94       	dec	r1
    2d7e:	69 f7       	brne	.-38     	; 0x2d5a <__udivmodsi4_loop>
    2d80:	60 95       	com	r22
    2d82:	70 95       	com	r23
    2d84:	80 95       	com	r24
    2d86:	90 95       	com	r25
    2d88:	9b 01       	movw	r18, r22
    2d8a:	ac 01       	movw	r20, r24
    2d8c:	bd 01       	movw	r22, r26
    2d8e:	cf 01       	movw	r24, r30
    2d90:	08 95       	ret

00002d92 <__tablejump2__>:
    2d92:	ee 0f       	add	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	00 24       	eor	r0, r0
    2d98:	00 1c       	adc	r0, r0
    2d9a:	0b be       	out	0x3b, r0	; 59
    2d9c:	07 90       	elpm	r0, Z+
    2d9e:	f6 91       	elpm	r31, Z
    2da0:	e0 2d       	mov	r30, r0
    2da2:	09 94       	ijmp

00002da4 <__umulhisi3>:
    2da4:	a2 9f       	mul	r26, r18
    2da6:	b0 01       	movw	r22, r0
    2da8:	b3 9f       	mul	r27, r19
    2daa:	c0 01       	movw	r24, r0
    2dac:	a3 9f       	mul	r26, r19
    2dae:	70 0d       	add	r23, r0
    2db0:	81 1d       	adc	r24, r1
    2db2:	11 24       	eor	r1, r1
    2db4:	91 1d       	adc	r25, r1
    2db6:	b2 9f       	mul	r27, r18
    2db8:	70 0d       	add	r23, r0
    2dba:	81 1d       	adc	r24, r1
    2dbc:	11 24       	eor	r1, r1
    2dbe:	91 1d       	adc	r25, r1
    2dc0:	08 95       	ret

00002dc2 <__muluhisi3>:
    2dc2:	f0 df       	rcall	.-32     	; 0x2da4 <__umulhisi3>
    2dc4:	a5 9f       	mul	r26, r21
    2dc6:	90 0d       	add	r25, r0
    2dc8:	b4 9f       	mul	r27, r20
    2dca:	90 0d       	add	r25, r0
    2dcc:	a4 9f       	mul	r26, r20
    2dce:	80 0d       	add	r24, r0
    2dd0:	91 1d       	adc	r25, r1
    2dd2:	11 24       	eor	r1, r1
    2dd4:	08 95       	ret

00002dd6 <_exit>:
    2dd6:	f8 94       	cli

00002dd8 <__stop_program>:
    2dd8:	ff cf       	rjmp	.-2      	; 0x2dd8 <__stop_program>
