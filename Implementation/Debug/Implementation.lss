
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002dc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a8  00800100  00800100  00002e36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000678  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000987b  00000000  00000000  00003520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001eab  00000000  00000000  0000cd9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000378f  00000000  00000000  0000ec46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001750  00000000  00000000  000123d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000215e  00000000  00000000  00013b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005414  00000000  00000000  00015c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  0001b09a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	c8 c1       	rjmp	.+912    	; 0x396 <__vector_1>
       6:	00 00       	nop
       8:	d0 c1       	rjmp	.+928    	; 0x3aa <__vector_2>
       a:	00 00       	nop
       c:	d8 c1       	rjmp	.+944    	; 0x3be <__vector_3>
       e:	00 00       	nop
      10:	9a c1       	rjmp	.+820    	; 0x346 <__vector_4>
      12:	00 00       	nop
      14:	a2 c1       	rjmp	.+836    	; 0x35a <__vector_5>
      16:	00 00       	nop
      18:	aa c1       	rjmp	.+852    	; 0x36e <__vector_6>
      1a:	00 00       	nop
      1c:	b2 c1       	rjmp	.+868    	; 0x382 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 5f 0c 	jmp	0x18be	; 0x18be <__vector_8>
      24:	0c 94 2e 08 	jmp	0x105c	; 0x105c <__vector_9>
      28:	0c 94 6a 08 	jmp	0x10d4	; 0x10d4 <__vector_10>
      2c:	ec c7       	rjmp	.+4056   	; 0x1006 <__vector_11>
      2e:	00 00       	nop
      30:	8d c7       	rjmp	.+3866   	; 0xf4c <__vector_12>
      32:	00 00       	nop
      34:	00 c7       	rjmp	.+3584   	; 0xe36 <__vector_13>
      36:	00 00       	nop
      38:	5e c7       	rjmp	.+3772   	; 0xef6 <__vector_14>
      3a:	00 00       	nop
      3c:	d1 c6       	rjmp	.+3490   	; 0xde0 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c5       	rjmp	.+2580   	; 0xa62 <__vector_19>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 09       	sbc	r23, r2
      8e:	7b 09       	sbc	r23, r11
      90:	84 09       	sbc	r24, r4
      92:	8d 09       	sbc	r24, r13
      94:	96 09       	sbc	r25, r6
      96:	9f 09       	sbc	r25, r15
      98:	a8 09       	sbc	r26, r8

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e2 ec       	ldi	r30, 0xC2	; 194
      ae:	fd e2       	ldi	r31, 0x2D	; 45
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a8 3a       	cpi	r26, 0xA8	; 168
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:
extern vl53l0x_struct_t s_rightSensor;

#include <util/delay.h>

int main()
{
      d8:	12 d1       	rcall	.+548    	; 0x2fe <device_disableJTAG>
      da:	0e 94 8a 0c 	call	0x1914	; 0x1914 <debug_init>
      de:	e8 e2       	ldi	r30, 0x28	; 40
      e0:	f1 e0       	ldi	r31, 0x01	; 1
      e2:	83 e0       	ldi	r24, 0x03	; 3
      e4:	80 83       	st	Z, r24
      e6:	92 e0       	ldi	r25, 0x02	; 2
      e8:	91 83       	std	Z+1, r25	; 0x01
      ea:	84 83       	std	Z+4, r24	; 0x04
      ec:	85 83       	std	Z+5, r24	; 0x05
      ee:	80 87       	std	Z+8, r24	; 0x08
      f0:	86 e0       	ldi	r24, 0x06	; 6
      f2:	81 87       	std	Z+9, r24	; 0x09
      f4:	80 ea       	ldi	r24, 0xA0	; 160
      f6:	96 e8       	ldi	r25, 0x86	; 134
      f8:	a1 e0       	ldi	r26, 0x01	; 1
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	82 8b       	std	Z+18, r24	; 0x12
      fe:	93 8b       	std	Z+19, r25	; 0x13
     100:	a4 8b       	std	Z+20, r26	; 0x14
     102:	b5 8b       	std	Z+21, r27	; 0x15
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	81 8b       	std	Z+17, r24	; 0x11
     108:	16 8a       	std	Z+22, r1	; 0x16
     10a:	17 8a       	std	Z+23, r1	; 0x17
     10c:	80 8f       	std	Z+24, r24	; 0x18
     10e:	11 8e       	std	Z+25, r1	; 0x19
     110:	82 8f       	std	Z+26, r24	; 0x1a
     112:	13 8e       	std	Z+27, r1	; 0x1b
     114:	8d b7       	in	r24, 0x3d	; 61
     116:	9e b7       	in	r25, 0x3e	; 62
     118:	4c 97       	sbiw	r24, 0x1c	; 28
     11a:	0f b6       	in	r0, 0x3f	; 63
     11c:	f8 94       	cli
     11e:	9e bf       	out	0x3e, r25	; 62
     120:	0f be       	out	0x3f, r0	; 63
     122:	8d bf       	out	0x3d, r24	; 61
     124:	ad b7       	in	r26, 0x3d	; 61
     126:	be b7       	in	r27, 0x3e	; 62
     128:	11 96       	adiw	r26, 0x01	; 1
     12a:	8c e1       	ldi	r24, 0x1C	; 28
     12c:	01 90       	ld	r0, Z+
     12e:	0d 92       	st	X+, r0
     130:	8a 95       	dec	r24
     132:	e1 f7       	brne	.-8      	; 0x12c <main+0x54>
     134:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <motor_init>
     138:	8d b7       	in	r24, 0x3d	; 61
     13a:	9e b7       	in	r25, 0x3e	; 62
     13c:	4c 97       	sbiw	r24, 0x1c	; 28
     13e:	0f b6       	in	r0, 0x3f	; 63
     140:	f8 94       	cli
     142:	9e bf       	out	0x3e, r25	; 62
     144:	0f be       	out	0x3f, r0	; 63
     146:	8d bf       	out	0x3d, r24	; 61
     148:	ad b7       	in	r26, 0x3d	; 61
     14a:	be b7       	in	r27, 0x3e	; 62
     14c:	11 96       	adiw	r26, 0x01	; 1
     14e:	8c e1       	ldi	r24, 0x1C	; 28
     150:	e8 e2       	ldi	r30, 0x28	; 40
     152:	f1 e0       	ldi	r31, 0x01	; 1
     154:	01 90       	ld	r0, Z+
     156:	0d 92       	st	X+, r0
     158:	8a 95       	dec	r24
     15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x7c>
     15c:	0e 94 37 0e 	call	0x1c6e	; 0x1c6e <motor_start>
     160:	8d b7       	in	r24, 0x3d	; 61
     162:	9e b7       	in	r25, 0x3e	; 62
     164:	c8 96       	adiw	r24, 0x38	; 56
     166:	0f b6       	in	r0, 0x3f	; 63
     168:	f8 94       	cli
     16a:	9e bf       	out	0x3e, r25	; 62
     16c:	0f be       	out	0x3f, r0	; 63
     16e:	8d bf       	out	0x3d, r24	; 61
     170:	5e d0       	rcall	.+188    	; 0x22e <distanceSensor_multiInit>
     172:	84 e5       	ldi	r24, 0x54	; 84
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 90 12 	call	0x2520	; 0x2520 <vl53l0x_start>
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	84 e5       	ldi	r24, 0x54	; 84
     17e:	91 e0       	ldi	r25, 0x01	; 1
     180:	0e 94 cc 14 	call	0x2998	; 0x2998 <vl53l0x_setMode>
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	ba 01       	movw	r22, r20
     18a:	84 e5       	ldi	r24, 0x54	; 84
     18c:	91 e0       	ldi	r25, 0x01	; 1
     18e:	0e 94 07 15 	call	0x2a0e	; 0x2a0e <vl53l0x_startContinuous>
     192:	1c e3       	ldi	r17, 0x3C	; 60
     194:	84 e5       	ldi	r24, 0x54	; 84
     196:	91 e0       	ldi	r25, 0x01	; 1
     198:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <vl53l0x_readRangeContinuous>
     19c:	ec 01       	movw	r28, r24
     19e:	cf 3f       	cpi	r28, 0xFF	; 255
     1a0:	9f ef       	ldi	r25, 0xFF	; 255
     1a2:	d9 07       	cpc	r29, r25
     1a4:	b9 f3       	breq	.-18     	; 0x194 <main+0xbc>
     1a6:	c5 36       	cpi	r28, 0x65	; 101
     1a8:	d1 05       	cpc	r29, r1
     1aa:	f0 f0       	brcs	.+60     	; 0x1e8 <main+0x110>
     1ac:	1f 93       	push	r17
     1ae:	8d b7       	in	r24, 0x3d	; 61
     1b0:	9e b7       	in	r25, 0x3e	; 62
     1b2:	4c 97       	sbiw	r24, 0x1c	; 28
     1b4:	0f b6       	in	r0, 0x3f	; 63
     1b6:	f8 94       	cli
     1b8:	9e bf       	out	0x3e, r25	; 62
     1ba:	0f be       	out	0x3f, r0	; 63
     1bc:	8d bf       	out	0x3d, r24	; 61
     1be:	ad b7       	in	r26, 0x3d	; 61
     1c0:	be b7       	in	r27, 0x3e	; 62
     1c2:	11 96       	adiw	r26, 0x01	; 1
     1c4:	8c e1       	ldi	r24, 0x1C	; 28
     1c6:	e8 e2       	ldi	r30, 0x28	; 40
     1c8:	f1 e0       	ldi	r31, 0x01	; 1
     1ca:	01 90       	ld	r0, Z+
     1cc:	0d 92       	st	X+, r0
     1ce:	8a 95       	dec	r24
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0xf2>
     1d2:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <motor_speed>
     1d6:	8d b7       	in	r24, 0x3d	; 61
     1d8:	9e b7       	in	r25, 0x3e	; 62
     1da:	4d 96       	adiw	r24, 0x1d	; 29
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	9e bf       	out	0x3e, r25	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8d bf       	out	0x3d, r24	; 61
     1e6:	1d c0       	rjmp	.+58     	; 0x222 <main+0x14a>
     1e8:	1f 92       	push	r1
     1ea:	8d b7       	in	r24, 0x3d	; 61
     1ec:	9e b7       	in	r25, 0x3e	; 62
     1ee:	4c 97       	sbiw	r24, 0x1c	; 28
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	9e bf       	out	0x3e, r25	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	8d bf       	out	0x3d, r24	; 61
     1fa:	ad b7       	in	r26, 0x3d	; 61
     1fc:	be b7       	in	r27, 0x3e	; 62
     1fe:	11 96       	adiw	r26, 0x01	; 1
     200:	8c e1       	ldi	r24, 0x1C	; 28
     202:	e8 e2       	ldi	r30, 0x28	; 40
     204:	f1 e0       	ldi	r31, 0x01	; 1
     206:	01 90       	ld	r0, Z+
     208:	0d 92       	st	X+, r0
     20a:	8a 95       	dec	r24
     20c:	e1 f7       	brne	.-8      	; 0x206 <main+0x12e>
     20e:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <motor_speed>
     212:	8d b7       	in	r24, 0x3d	; 61
     214:	9e b7       	in	r25, 0x3e	; 62
     216:	4d 96       	adiw	r24, 0x1d	; 29
     218:	0f b6       	in	r0, 0x3f	; 63
     21a:	f8 94       	cli
     21c:	9e bf       	out	0x3e, r25	; 62
     21e:	0f be       	out	0x3f, r0	; 63
     220:	8d bf       	out	0x3d, r24	; 61
     222:	ce 01       	movw	r24, r28
     224:	0e 94 c2 0c 	call	0x1984	; 0x1984 <debug_writeDecimal>
     228:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <debug_writeNewLine>
     22c:	b3 cf       	rjmp	.-154    	; 0x194 <main+0xbc>

0000022e <distanceSensor_multiInit>:
		}
	}
}

void distanceSensor_multiInit()
{
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
	s_timeoutTimer.frequency = 1000;
     232:	e4 e4       	ldi	r30, 0x44	; 68
     234:	f1 e0       	ldi	r31, 0x01	; 1
     236:	88 ee       	ldi	r24, 0xE8	; 232
     238:	58 2f       	mov	r21, r24
     23a:	81 83       	std	Z+1, r24	; 0x01
     23c:	83 e0       	ldi	r24, 0x03	; 3
     23e:	82 83       	std	Z+2, r24	; 0x02
     240:	13 82       	std	Z+3, r1	; 0x03
     242:	14 82       	std	Z+4, r1	; 0x04
	s_timeoutTimer.peripheral = TIMER1;
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	48 2f       	mov	r20, r24
     248:	80 83       	st	Z, r24
	timer_init(s_timeoutTimer);
     24a:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <s_timeoutTimer+0x2>
     24e:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <s_timeoutTimer+0x3>
     252:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <s_timeoutTimer+0x4>
     256:	69 d7       	rcall	.+3794   	; 0x112a <timer_init>
	timer_attachInterrupt(s_timeoutTimer, OVERFLOW, vl53l0x_incrementTimeoutCounter);
     258:	0a e6       	ldi	r16, 0x6A	; 106
     25a:	15 e1       	ldi	r17, 0x15	; 21
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <s_timeoutTimer>
     262:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <s_timeoutTimer+0x1>
     266:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <s_timeoutTimer+0x2>
     26a:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <s_timeoutTimer+0x3>
     26e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <s_timeoutTimer+0x4>
     272:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <timer_attachInterrupt>
	timer_enableInterrupt(s_timeoutTimer, OVERFLOW);
     276:	20 e0       	ldi	r18, 0x00	; 0
     278:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <s_timeoutTimer>
     27c:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <s_timeoutTimer+0x1>
     280:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <s_timeoutTimer+0x2>
     284:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <s_timeoutTimer+0x3>
     288:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <s_timeoutTimer+0x4>
     28c:	0e 94 26 0a 	call	0x144c	; 0x144c <timer_enableInterrupt>
	timer_start(s_timeoutTimer);
     290:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <s_timeoutTimer>
     294:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <s_timeoutTimer+0x1>
     298:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <s_timeoutTimer+0x2>
     29c:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <s_timeoutTimer+0x3>
     2a0:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <s_timeoutTimer+0x4>
     2a4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <timer_start>

	s_frontSensor.address = VL53L0X_ADDRESS_DEFAULT;
     2a8:	e4 e5       	ldi	r30, 0x54	; 84
     2aa:	f1 e0       	ldi	r31, 0x01	; 1
     2ac:	99 e2       	ldi	r25, 0x29	; 41
     2ae:	90 83       	st	Z, r25
	s_frontSensor.i2cTimeout = 100;
     2b0:	24 e6       	ldi	r18, 0x64	; 100
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	32 83       	std	Z+2, r19	; 0x02
     2b6:	21 83       	std	Z+1, r18	; 0x01
	s_frontSensor.xshutPin.port = PD;
     2b8:	43 e0       	ldi	r20, 0x03	; 3
     2ba:	44 83       	std	Z+4, r20	; 0x04
	s_frontSensor.xshutPin.number = 7;
     2bc:	87 e0       	ldi	r24, 0x07	; 7
     2be:	85 83       	std	Z+5, r24	; 0x05

	s_leftSensor.address = VL53L0X_ADDRESS_DEFAULT;
     2c0:	ef e5       	ldi	r30, 0x5F	; 95
     2c2:	f1 e0       	ldi	r31, 0x01	; 1
     2c4:	90 83       	st	Z, r25
	s_leftSensor.i2cTimeout = 100;
     2c6:	32 83       	std	Z+2, r19	; 0x02
     2c8:	21 83       	std	Z+1, r18	; 0x01
	s_leftSensor.xshutPin.port = PC;
     2ca:	82 e0       	ldi	r24, 0x02	; 2
     2cc:	84 83       	std	Z+4, r24	; 0x04
	s_leftSensor.xshutPin.number = 2;
     2ce:	85 83       	std	Z+5, r24	; 0x05

	s_rightSensor.address = VL53L0X_ADDRESS_DEFAULT;
     2d0:	e9 e4       	ldi	r30, 0x49	; 73
     2d2:	f1 e0       	ldi	r31, 0x01	; 1
     2d4:	90 83       	st	Z, r25
	s_rightSensor.i2cTimeout = 100;
     2d6:	32 83       	std	Z+2, r19	; 0x02
     2d8:	21 83       	std	Z+1, r18	; 0x01
	s_rightSensor.xshutPin.port = PC;
     2da:	84 83       	std	Z+4, r24	; 0x04
	s_rightSensor.xshutPin.number = 3;
     2dc:	45 83       	std	Z+5, r20	; 0x05

	sei();
     2de:	78 94       	sei

	vl53l0x_init(&s_frontSensor);
     2e0:	84 e5       	ldi	r24, 0x54	; 84
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <vl53l0x_init>
	vl53l0x_init(&s_leftSensor);
     2e8:	8f e5       	ldi	r24, 0x5F	; 95
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 63 12 	call	0x24c6	; 0x24c6 <vl53l0x_init>
	vl53l0x_init(&s_rightSensor);
     2f0:	89 e4       	ldi	r24, 0x49	; 73
     2f2:	91 e0       	ldi	r25, 0x01	; 1
     2f4:	0e 94 63 12 	call	0x24c6	; 0x24c6 <vl53l0x_init>
}
     2f8:	1f 91       	pop	r17
     2fa:	0f 91       	pop	r16
     2fc:	08 95       	ret

000002fe <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     302:	85 bf       	out	0x35, r24	; 53
     304:	08 95       	ret

00000306 <gpio_changeDirection>:
}

void gpio_setDirectionInput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = INPUT;
	gpio_changeDirection(*s_gpio);
     306:	61 30       	cpi	r22, 0x01	; 1
     308:	61 f0       	breq	.+24     	; 0x322 <gpio_changeDirection+0x1c>
     30a:	28 f0       	brcs	.+10     	; 0x316 <gpio_changeDirection+0x10>
     30c:	62 30       	cpi	r22, 0x02	; 2
     30e:	79 f0       	breq	.+30     	; 0x32e <gpio_changeDirection+0x28>
     310:	63 30       	cpi	r22, 0x03	; 3
     312:	99 f0       	breq	.+38     	; 0x33a <gpio_changeDirection+0x34>
     314:	08 95       	ret
     316:	48 2f       	mov	r20, r24
     318:	67 2f       	mov	r22, r23
     31a:	81 e2       	ldi	r24, 0x21	; 33
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	58 c2       	rjmp	.+1200   	; 0x7d0 <updateBit>
     320:	08 95       	ret
     322:	48 2f       	mov	r20, r24
     324:	67 2f       	mov	r22, r23
     326:	84 e2       	ldi	r24, 0x24	; 36
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	52 c2       	rjmp	.+1188   	; 0x7d0 <updateBit>
     32c:	08 95       	ret
     32e:	48 2f       	mov	r20, r24
     330:	67 2f       	mov	r22, r23
     332:	87 e2       	ldi	r24, 0x27	; 39
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	4c c2       	rjmp	.+1176   	; 0x7d0 <updateBit>
     338:	08 95       	ret
     33a:	48 2f       	mov	r20, r24
     33c:	67 2f       	mov	r22, r23
     33e:	8a e2       	ldi	r24, 0x2A	; 42
     340:	90 e0       	ldi	r25, 0x00	; 0
     342:	46 c2       	rjmp	.+1164   	; 0x7d0 <updateBit>
     344:	08 95       	ret

00000346 <__vector_4>:
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	0f 90       	pop	r0
     352:	0f be       	out	0x3f, r0	; 63
     354:	0f 90       	pop	r0
     356:	1f 90       	pop	r1
     358:	18 95       	reti

0000035a <__vector_5>:
     35a:	1f 92       	push	r1
     35c:	0f 92       	push	r0
     35e:	0f b6       	in	r0, 0x3f	; 63
     360:	0f 92       	push	r0
     362:	11 24       	eor	r1, r1
     364:	0f 90       	pop	r0
     366:	0f be       	out	0x3f, r0	; 63
     368:	0f 90       	pop	r0
     36a:	1f 90       	pop	r1
     36c:	18 95       	reti

0000036e <__vector_6>:
     36e:	1f 92       	push	r1
     370:	0f 92       	push	r0
     372:	0f b6       	in	r0, 0x3f	; 63
     374:	0f 92       	push	r0
     376:	11 24       	eor	r1, r1
     378:	0f 90       	pop	r0
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	0f 90       	pop	r0
     37e:	1f 90       	pop	r1
     380:	18 95       	reti

00000382 <__vector_7>:
     382:	1f 92       	push	r1
     384:	0f 92       	push	r0
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	0f 92       	push	r0
     38a:	11 24       	eor	r1, r1
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <__vector_1>:
     396:	1f 92       	push	r1
     398:	0f 92       	push	r0
     39a:	0f b6       	in	r0, 0x3f	; 63
     39c:	0f 92       	push	r0
     39e:	11 24       	eor	r1, r1
     3a0:	0f 90       	pop	r0
     3a2:	0f be       	out	0x3f, r0	; 63
     3a4:	0f 90       	pop	r0
     3a6:	1f 90       	pop	r1
     3a8:	18 95       	reti

000003aa <__vector_2>:
     3aa:	1f 92       	push	r1
     3ac:	0f 92       	push	r0
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	0f 92       	push	r0
     3b2:	11 24       	eor	r1, r1
     3b4:	0f 90       	pop	r0
     3b6:	0f be       	out	0x3f, r0	; 63
     3b8:	0f 90       	pop	r0
     3ba:	1f 90       	pop	r1
     3bc:	18 95       	reti

000003be <__vector_3>:
     3be:	1f 92       	push	r1
     3c0:	0f 92       	push	r0
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	0f 92       	push	r0
     3c6:	11 24       	eor	r1, r1
     3c8:	0f 90       	pop	r0
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	0f 90       	pop	r0
     3ce:	1f 90       	pop	r1
     3d0:	18 95       	reti

000003d2 <gpio_init>:
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	c6 2f       	mov	r28, r22
     3dc:	17 2f       	mov	r17, r23
     3de:	d8 2f       	mov	r29, r24
     3e0:	09 2f       	mov	r16, r25
     3e2:	91 df       	rcall	.-222    	; 0x306 <gpio_changeDirection>
     3e4:	d1 11       	cpse	r29, r1
     3e6:	23 c0       	rjmp	.+70     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3e8:	c1 30       	cpi	r28, 0x01	; 1
     3ea:	81 f0       	breq	.+32     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     3ec:	28 f0       	brcs	.+10     	; 0x3f8 <gpio_init+0x26>
     3ee:	c2 30       	cpi	r28, 0x02	; 2
     3f0:	99 f0       	breq	.+38     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     3f2:	c3 30       	cpi	r28, 0x03	; 3
     3f4:	b9 f0       	breq	.+46     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     3f6:	1b c0       	rjmp	.+54     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     3f8:	40 2f       	mov	r20, r16
     3fa:	61 2f       	mov	r22, r17
     3fc:	82 e2       	ldi	r24, 0x22	; 34
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	e7 d1       	rcall	.+974    	; 0x7d0 <updateBit>
     402:	61 2f       	mov	r22, r17
     404:	8e e7       	ldi	r24, 0x7E	; 126
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	07 d2       	rcall	.+1038   	; 0x818 <clearBit>
     40a:	11 c0       	rjmp	.+34     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     40c:	40 2f       	mov	r20, r16
     40e:	61 2f       	mov	r22, r17
     410:	85 e2       	ldi	r24, 0x25	; 37
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	dd d1       	rcall	.+954    	; 0x7d0 <updateBit>
     416:	0b c0       	rjmp	.+22     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     418:	40 2f       	mov	r20, r16
     41a:	61 2f       	mov	r22, r17
     41c:	88 e2       	ldi	r24, 0x28	; 40
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	d7 d1       	rcall	.+942    	; 0x7d0 <updateBit>
     422:	05 c0       	rjmp	.+10     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     424:	40 2f       	mov	r20, r16
     426:	61 2f       	mov	r22, r17
     428:	8b e2       	ldi	r24, 0x2B	; 43
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	d1 d1       	rcall	.+930    	; 0x7d0 <updateBit>
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	08 95       	ret

00000438 <gpio_setDirectionOutput>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
     438:	21 e0       	ldi	r18, 0x01	; 1
     43a:	fc 01       	movw	r30, r24
     43c:	22 83       	std	Z+2, r18	; 0x02
	gpio_changeDirection(*s_gpio);
     43e:	60 81       	ld	r22, Z
     440:	71 81       	ldd	r23, Z+1	; 0x01
     442:	82 81       	ldd	r24, Z+2	; 0x02
     444:	93 81       	ldd	r25, Z+3	; 0x03
     446:	5f cf       	rjmp	.-322    	; 0x306 <gpio_changeDirection>
     448:	08 95       	ret

0000044a <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     44a:	61 30       	cpi	r22, 0x01	; 1
     44c:	59 f0       	breq	.+22     	; 0x464 <gpio_out_set+0x1a>
     44e:	28 f0       	brcs	.+10     	; 0x45a <gpio_out_set+0x10>
     450:	62 30       	cpi	r22, 0x02	; 2
     452:	69 f0       	breq	.+26     	; 0x46e <gpio_out_set+0x24>
     454:	63 30       	cpi	r22, 0x03	; 3
     456:	81 f0       	breq	.+32     	; 0x478 <gpio_out_set+0x2e>
     458:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     45a:	67 2f       	mov	r22, r23
     45c:	82 e2       	ldi	r24, 0x22	; 34
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	cf c1       	rjmp	.+926    	; 0x800 <setBit>
			break;
     462:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     464:	67 2f       	mov	r22, r23
     466:	85 e2       	ldi	r24, 0x25	; 37
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	ca c1       	rjmp	.+916    	; 0x800 <setBit>
			break;
     46c:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     46e:	67 2f       	mov	r22, r23
     470:	88 e2       	ldi	r24, 0x28	; 40
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	c5 c1       	rjmp	.+906    	; 0x800 <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
     476:	08 95       	ret
     478:	67 2f       	mov	r22, r23
     47a:	8b e2       	ldi	r24, 0x2B	; 43
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	c0 c1       	rjmp	.+896    	; 0x800 <setBit>
     480:	08 95       	ret

00000482 <gpio_out_reset>:
	}
}

void gpio_out_reset(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     482:	61 30       	cpi	r22, 0x01	; 1
     484:	59 f0       	breq	.+22     	; 0x49c <gpio_out_reset+0x1a>
     486:	28 f0       	brcs	.+10     	; 0x492 <gpio_out_reset+0x10>
     488:	62 30       	cpi	r22, 0x02	; 2
     48a:	69 f0       	breq	.+26     	; 0x4a6 <gpio_out_reset+0x24>
     48c:	63 30       	cpi	r22, 0x03	; 3
     48e:	81 f0       	breq	.+32     	; 0x4b0 <gpio_out_reset+0x2e>
     490:	08 95       	ret
	{
		case PA:
			clearBit(&PORTA, s_gpio.number);
     492:	67 2f       	mov	r22, r23
     494:	82 e2       	ldi	r24, 0x22	; 34
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	bf c1       	rjmp	.+894    	; 0x818 <clearBit>
			break;
     49a:	08 95       	ret
		case PB:
			clearBit(&PORTB, s_gpio.number);
     49c:	67 2f       	mov	r22, r23
     49e:	85 e2       	ldi	r24, 0x25	; 37
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	ba c1       	rjmp	.+884    	; 0x818 <clearBit>
			break;
     4a4:	08 95       	ret
		case PC:
			clearBit(&PORTC, s_gpio.number);
     4a6:	67 2f       	mov	r22, r23
     4a8:	88 e2       	ldi	r24, 0x28	; 40
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	b5 c1       	rjmp	.+874    	; 0x818 <clearBit>
			break;
		case PD:
			clearBit(&PORTD, s_gpio.number);
     4ae:	08 95       	ret
     4b0:	67 2f       	mov	r22, r23
     4b2:	8b e2       	ldi	r24, 0x2B	; 43
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	b0 c1       	rjmp	.+864    	; 0x818 <clearBit>
     4b8:	08 95       	ret

000004ba <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	8b 01       	movw	r16, r22
     4c4:	9c 01       	movw	r18, r24
     4c6:	ea 01       	movw	r28, r20
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	72 e1       	ldi	r23, 0x12	; 18
     4cc:	8a e7       	ldi	r24, 0x7A	; 122
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	a9 01       	movw	r20, r18
     4d2:	98 01       	movw	r18, r16
     4d4:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     4d8:	ba 01       	movw	r22, r20
     4da:	a9 01       	movw	r20, r18
     4dc:	40 51       	subi	r20, 0x10	; 16
     4de:	51 09       	sbc	r21, r1
     4e0:	61 09       	sbc	r22, r1
     4e2:	71 09       	sbc	r23, r1
     4e4:	db 01       	movw	r26, r22
     4e6:	ca 01       	movw	r24, r20
     4e8:	b6 95       	lsr	r27
     4ea:	a7 95       	ror	r26
     4ec:	97 95       	ror	r25
     4ee:	87 95       	ror	r24
     4f0:	8f 3f       	cpi	r24, 0xFF	; 255
     4f2:	91 05       	cpc	r25, r1
     4f4:	a1 05       	cpc	r26, r1
     4f6:	b1 05       	cpc	r27, r1
     4f8:	09 f0       	breq	.+2      	; 0x4fc <calculateTWBR+0x42>
     4fa:	10 f4       	brcc	.+4      	; 0x500 <calculateTWBR+0x46>
     4fc:	18 82       	st	Y, r1
     4fe:	32 c0       	rjmp	.+100    	; 0x564 <calculateTWBR+0xaa>
     500:	db 01       	movw	r26, r22
     502:	ca 01       	movw	r24, r20
     504:	68 94       	set
     506:	12 f8       	bld	r1, 2
     508:	b6 95       	lsr	r27
     50a:	a7 95       	ror	r26
     50c:	97 95       	ror	r25
     50e:	87 95       	ror	r24
     510:	16 94       	lsr	r1
     512:	d1 f7       	brne	.-12     	; 0x508 <calculateTWBR+0x4e>
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	91 05       	cpc	r25, r1
     518:	a1 05       	cpc	r26, r1
     51a:	b1 05       	cpc	r27, r1
     51c:	09 f0       	breq	.+2      	; 0x520 <calculateTWBR+0x66>
     51e:	18 f4       	brcc	.+6      	; 0x526 <calculateTWBR+0x6c>
     520:	21 e0       	ldi	r18, 0x01	; 1
     522:	28 83       	st	Y, r18
     524:	1f c0       	rjmp	.+62     	; 0x564 <calculateTWBR+0xaa>
     526:	db 01       	movw	r26, r22
     528:	ca 01       	movw	r24, r20
     52a:	68 94       	set
     52c:	14 f8       	bld	r1, 4
     52e:	b6 95       	lsr	r27
     530:	a7 95       	ror	r26
     532:	97 95       	ror	r25
     534:	87 95       	ror	r24
     536:	16 94       	lsr	r1
     538:	d1 f7       	brne	.-12     	; 0x52e <calculateTWBR+0x74>
     53a:	8f 3f       	cpi	r24, 0xFF	; 255
     53c:	91 05       	cpc	r25, r1
     53e:	a1 05       	cpc	r26, r1
     540:	b1 05       	cpc	r27, r1
     542:	09 f0       	breq	.+2      	; 0x546 <calculateTWBR+0x8c>
     544:	18 f4       	brcc	.+6      	; 0x54c <calculateTWBR+0x92>
     546:	22 e0       	ldi	r18, 0x02	; 2
     548:	28 83       	st	Y, r18
     54a:	0c c0       	rjmp	.+24     	; 0x564 <calculateTWBR+0xaa>
     54c:	83 e0       	ldi	r24, 0x03	; 3
     54e:	88 83       	st	Y, r24
     550:	db 01       	movw	r26, r22
     552:	ca 01       	movw	r24, r20
     554:	68 94       	set
     556:	16 f8       	bld	r1, 6
     558:	b6 95       	lsr	r27
     55a:	a7 95       	ror	r26
     55c:	97 95       	ror	r25
     55e:	87 95       	ror	r24
     560:	16 94       	lsr	r1
     562:	d1 f7       	brne	.-12     	; 0x558 <calculateTWBR+0x9e>
     564:	df 91       	pop	r29
     566:	cf 91       	pop	r28
     568:	1f 91       	pop	r17
     56a:	0f 91       	pop	r16
     56c:	08 95       	ret

0000056e <i2c_init>:
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	1f 92       	push	r1
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	ae 01       	movw	r20, r28
     57a:	4f 5f       	subi	r20, 0xFF	; 255
     57c:	5f 4f       	sbci	r21, 0xFF	; 255
     57e:	9d df       	rcall	.-198    	; 0x4ba <calculateTWBR>
     580:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	54 d1       	rcall	.+680    	; 0x832 <checkBit>
     58a:	48 2f       	mov	r20, r24
     58c:	60 e0       	ldi	r22, 0x00	; 0
     58e:	89 eb       	ldi	r24, 0xB9	; 185
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	1e d1       	rcall	.+572    	; 0x7d0 <updateBit>
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	89 81       	ldd	r24, Y+1	; 0x01
     598:	4c d1       	rcall	.+664    	; 0x832 <checkBit>
     59a:	48 2f       	mov	r20, r24
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	89 eb       	ldi	r24, 0xB9	; 185
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	16 d1       	rcall	.+556    	; 0x7d0 <updateBit>
     5a4:	62 e0       	ldi	r22, 0x02	; 2
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	80 e0       	ldi	r24, 0x00	; 0
     5aa:	91 e0       	ldi	r25, 0x01	; 1
     5ac:	12 df       	rcall	.-476    	; 0x3d2 <gpio_init>
     5ae:	62 e0       	ldi	r22, 0x02	; 2
     5b0:	70 e0       	ldi	r23, 0x00	; 0
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	0d df       	rcall	.-486    	; 0x3d2 <gpio_init>
     5b8:	0f 90       	pop	r0
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	08 95       	ret

000005c0 <i2c_start>:
     5c0:	62 e0       	ldi	r22, 0x02	; 2
     5c2:	8c eb       	ldi	r24, 0xBC	; 188
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	1c c1       	rjmp	.+568    	; 0x800 <setBit>
     5c8:	08 95       	ret

000005ca <i2c_sendStart>:
}

u8 i2c_sendStart(u8 u8_address)
{
     5ca:	ff 92       	push	r15
     5cc:	0f 93       	push	r16
     5ce:	1f 93       	push	r17
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	f8 2e       	mov	r15, r24
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);
     5d6:	cc eb       	ldi	r28, 0xBC	; 188
     5d8:	d0 e0       	ldi	r29, 0x00	; 0
     5da:	88 81       	ld	r24, Y
     5dc:	62 e0       	ldi	r22, 0x02	; 2
     5de:	29 d1       	rcall	.+594    	; 0x832 <checkBit>
     5e0:	28 81       	ld	r18, Y
     5e2:	34 e0       	ldi	r19, 0x04	; 4
     5e4:	83 9f       	mul	r24, r19
     5e6:	c0 01       	movw	r24, r0
     5e8:	11 24       	eor	r1, r1
     5ea:	80 6a       	ori	r24, 0xA0	; 160
     5ec:	82 2b       	or	r24, r18
     5ee:	88 83       	st	Y, r24
     5f0:	ce ef       	ldi	r28, 0xFE	; 254
     5f2:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until start condition has been sent */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     5f4:	0c eb       	ldi	r16, 0xBC	; 188
     5f6:	10 e0       	ldi	r17, 0x00	; 0
     5f8:	f8 01       	movw	r30, r16
     5fa:	80 81       	ld	r24, Z
     5fc:	67 e0       	ldi	r22, 0x07	; 7
     5fe:	19 d1       	rcall	.+562    	; 0x832 <checkBit>
     600:	81 11       	cpse	r24, r1
     602:	33 c0       	rjmp	.+102    	; 0x66a <i2c_sendStart+0xa0>
     604:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until start condition has been sent */
	while(--timeout > 0)
     606:	c1 f7       	brne	.-16     	; 0x5f8 <i2c_sendStart+0x2e>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     608:	8f ef       	ldi	r24, 0xFF	; 255
     60a:	3b c0       	rjmp	.+118    	; 0x682 <i2c_sendStart+0xb8>

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     60c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     610:	88 7f       	andi	r24, 0xF8	; 248
     612:	80 31       	cpi	r24, 0x10	; 16
     614:	21 f0       	breq	.+8      	; 0x61e <i2c_sendStart+0x54>
		return (TW_STATUS & 0xF8);
     616:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     61a:	88 7f       	andi	r24, 0xF8	; 248
     61c:	32 c0       	rjmp	.+100    	; 0x682 <i2c_sendStart+0xb8>

	/* Send device address */
	TWDR = u8_address;
     61e:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     622:	cc eb       	ldi	r28, 0xBC	; 188
     624:	d0 e0       	ldi	r29, 0x00	; 0
     626:	88 81       	ld	r24, Y
     628:	62 e0       	ldi	r22, 0x02	; 2
     62a:	03 d1       	rcall	.+518    	; 0x832 <checkBit>
     62c:	f4 e0       	ldi	r31, 0x04	; 4
     62e:	8f 9f       	mul	r24, r31
     630:	c0 01       	movw	r24, r0
     632:	11 24       	eor	r1, r1
     634:	80 68       	ori	r24, 0x80	; 128
     636:	88 83       	st	Y, r24
     638:	ce ef       	ldi	r28, 0xFE	; 254
     63a:	df ef       	ldi	r29, 0xFF	; 255

	/* Wail until address has been sent */
	while( --timeout > 0 )
		if(checkBit(TWCR, TWINT))
     63c:	0c eb       	ldi	r16, 0xBC	; 188
     63e:	10 e0       	ldi	r17, 0x00	; 0
     640:	f8 01       	movw	r30, r16
     642:	80 81       	ld	r24, Z
     644:	67 e0       	ldi	r22, 0x07	; 7
     646:	f5 d0       	rcall	.+490    	; 0x832 <checkBit>
     648:	81 11       	cpse	r24, r1
     64a:	15 c0       	rjmp	.+42     	; 0x676 <i2c_sendStart+0xac>
     64c:	21 97       	sbiw	r28, 0x01	; 1
	/* Send device address */
	TWDR = u8_address;
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wail until address has been sent */
	while( --timeout > 0 )
     64e:	c1 f7       	brne	.-16     	; 0x640 <i2c_sendStart+0x76>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     650:	8f ef       	ldi	r24, 0xFF	; 255
     652:	17 c0       	rjmp	.+46     	; 0x682 <i2c_sendStart+0xb8>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     654:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     658:	88 7f       	andi	r24, 0xF8	; 248
     65a:	80 34       	cpi	r24, 0x40	; 64
     65c:	21 f0       	breq	.+8      	; 0x666 <i2c_sendStart+0x9c>
		return (TW_STATUS & 0xF8);
     65e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     662:	88 7f       	andi	r24, 0xF8	; 248
     664:	0e c0       	rjmp	.+28     	; 0x682 <i2c_sendStart+0xb8>

	return I2C_NO_ERROR;
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	0c c0       	rjmp	.+24     	; 0x682 <i2c_sendStart+0xb8>
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     66a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     66e:	88 7f       	andi	r24, 0xF8	; 248
     670:	88 30       	cpi	r24, 0x08	; 8
     672:	61 f6       	brne	.-104    	; 0x60c <i2c_sendStart+0x42>
     674:	d4 cf       	rjmp	.-88     	; 0x61e <i2c_sendStart+0x54>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     676:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     67a:	88 7f       	andi	r24, 0xF8	; 248
     67c:	88 31       	cpi	r24, 0x18	; 24
     67e:	51 f7       	brne	.-44     	; 0x654 <i2c_sendStart+0x8a>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     680:	80 e0       	ldi	r24, 0x00	; 0
}
     682:	df 91       	pop	r29
     684:	cf 91       	pop	r28
     686:	1f 91       	pop	r17
     688:	0f 91       	pop	r16
     68a:	ff 90       	pop	r15
     68c:	08 95       	ret

0000068e <i2c_sendRepStart>:

u8 i2c_sendRepStart(u8 u8_address)
{
     68e:	9d cf       	rjmp	.-198    	; 0x5ca <i2c_sendStart>
     690:	08 95       	ret

00000692 <i2c_sendStop>:
     692:	0f 93       	push	r16
     694:	1f 93       	push	r17
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cc eb       	ldi	r28, 0xBC	; 188
     69c:	d0 e0       	ldi	r29, 0x00	; 0
     69e:	88 81       	ld	r24, Y
     6a0:	62 e0       	ldi	r22, 0x02	; 2
     6a2:	c7 d0       	rcall	.+398    	; 0x832 <checkBit>
     6a4:	28 81       	ld	r18, Y
     6a6:	34 e0       	ldi	r19, 0x04	; 4
     6a8:	83 9f       	mul	r24, r19
     6aa:	c0 01       	movw	r24, r0
     6ac:	11 24       	eor	r1, r1
     6ae:	80 69       	ori	r24, 0x90	; 144
     6b0:	82 2b       	or	r24, r18
     6b2:	88 83       	st	Y, r24
     6b4:	ce ef       	ldi	r28, 0xFE	; 254
     6b6:	df ef       	ldi	r29, 0xFF	; 255
     6b8:	0c eb       	ldi	r16, 0xBC	; 188
     6ba:	10 e0       	ldi	r17, 0x00	; 0
     6bc:	f8 01       	movw	r30, r16
     6be:	80 81       	ld	r24, Z
     6c0:	64 e0       	ldi	r22, 0x04	; 4
     6c2:	b7 d0       	rcall	.+366    	; 0x832 <checkBit>
     6c4:	88 23       	and	r24, r24
     6c6:	11 f0       	breq	.+4      	; 0x6cc <i2c_sendStop+0x3a>
     6c8:	21 97       	sbiw	r28, 0x01	; 1
     6ca:	c1 f7       	brne	.-16     	; 0x6bc <i2c_sendStop+0x2a>
     6cc:	df 91       	pop	r29
     6ce:	cf 91       	pop	r28
     6d0:	1f 91       	pop	r17
     6d2:	0f 91       	pop	r16
     6d4:	08 95       	ret

000006d6 <i2c_write>:
     6d6:	0f 93       	push	r16
     6d8:	1f 93       	push	r17
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6e2:	cc eb       	ldi	r28, 0xBC	; 188
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
     6e6:	88 81       	ld	r24, Y
     6e8:	62 e0       	ldi	r22, 0x02	; 2
     6ea:	a3 d0       	rcall	.+326    	; 0x832 <checkBit>
     6ec:	24 e0       	ldi	r18, 0x04	; 4
     6ee:	82 9f       	mul	r24, r18
     6f0:	c0 01       	movw	r24, r0
     6f2:	11 24       	eor	r1, r1
     6f4:	80 68       	ori	r24, 0x80	; 128
     6f6:	88 83       	st	Y, r24
     6f8:	ce ef       	ldi	r28, 0xFE	; 254
     6fa:	df ef       	ldi	r29, 0xFF	; 255
     6fc:	0c eb       	ldi	r16, 0xBC	; 188
     6fe:	10 e0       	ldi	r17, 0x00	; 0
     700:	f8 01       	movw	r30, r16
     702:	80 81       	ld	r24, Z
     704:	67 e0       	ldi	r22, 0x07	; 7
     706:	95 d0       	rcall	.+298    	; 0x832 <checkBit>
     708:	81 11       	cpse	r24, r1
     70a:	0f c0       	rjmp	.+30     	; 0x72a <i2c_write+0x54>
     70c:	21 97       	sbiw	r28, 0x01	; 1
     70e:	c1 f7       	brne	.-16     	; 0x700 <i2c_write+0x2a>
     710:	8f ef       	ldi	r24, 0xFF	; 255
     712:	11 c0       	rjmp	.+34     	; 0x736 <i2c_write+0x60>
     714:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     718:	88 7f       	andi	r24, 0xF8	; 248
     71a:	80 34       	cpi	r24, 0x40	; 64
     71c:	21 f0       	breq	.+8      	; 0x726 <i2c_write+0x50>
     71e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     722:	88 7f       	andi	r24, 0xF8	; 248
     724:	08 c0       	rjmp	.+16     	; 0x736 <i2c_write+0x60>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	06 c0       	rjmp	.+12     	; 0x736 <i2c_write+0x60>
     72a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     72e:	88 7f       	andi	r24, 0xF8	; 248
     730:	88 31       	cpi	r24, 0x18	; 24
     732:	81 f7       	brne	.-32     	; 0x714 <i2c_write+0x3e>
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <i2c_readAck>:
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	cc eb       	ldi	r28, 0xBC	; 188
     74a:	d0 e0       	ldi	r29, 0x00	; 0
     74c:	88 81       	ld	r24, Y
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	70 d0       	rcall	.+224    	; 0x832 <checkBit>
     752:	24 e0       	ldi	r18, 0x04	; 4
     754:	82 9f       	mul	r24, r18
     756:	c0 01       	movw	r24, r0
     758:	11 24       	eor	r1, r1
     75a:	80 6c       	ori	r24, 0xC0	; 192
     75c:	88 83       	st	Y, r24
     75e:	ce ef       	ldi	r28, 0xFE	; 254
     760:	df ef       	ldi	r29, 0xFF	; 255
     762:	0c eb       	ldi	r16, 0xBC	; 188
     764:	10 e0       	ldi	r17, 0x00	; 0
     766:	f8 01       	movw	r30, r16
     768:	80 81       	ld	r24, Z
     76a:	67 e0       	ldi	r22, 0x07	; 7
     76c:	62 d0       	rcall	.+196    	; 0x832 <checkBit>
     76e:	88 23       	and	r24, r24
     770:	19 f0       	breq	.+6      	; 0x778 <i2c_readAck+0x38>
     772:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     776:	03 c0       	rjmp	.+6      	; 0x77e <i2c_readAck+0x3e>
     778:	21 97       	sbiw	r28, 0x01	; 1
     77a:	a9 f7       	brne	.-22     	; 0x766 <i2c_readAck+0x26>
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	1f 91       	pop	r17
     784:	0f 91       	pop	r16
     786:	08 95       	ret

00000788 <i2c_readNak>:
     788:	0f 93       	push	r16
     78a:	1f 93       	push	r17
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	cc eb       	ldi	r28, 0xBC	; 188
     792:	d0 e0       	ldi	r29, 0x00	; 0
     794:	88 81       	ld	r24, Y
     796:	62 e0       	ldi	r22, 0x02	; 2
     798:	4c d0       	rcall	.+152    	; 0x832 <checkBit>
     79a:	24 e0       	ldi	r18, 0x04	; 4
     79c:	82 9f       	mul	r24, r18
     79e:	c0 01       	movw	r24, r0
     7a0:	11 24       	eor	r1, r1
     7a2:	80 68       	ori	r24, 0x80	; 128
     7a4:	88 83       	st	Y, r24
     7a6:	ce ef       	ldi	r28, 0xFE	; 254
     7a8:	df ef       	ldi	r29, 0xFF	; 255
     7aa:	0c eb       	ldi	r16, 0xBC	; 188
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	f8 01       	movw	r30, r16
     7b0:	80 81       	ld	r24, Z
     7b2:	67 e0       	ldi	r22, 0x07	; 7
     7b4:	3e d0       	rcall	.+124    	; 0x832 <checkBit>
     7b6:	88 23       	and	r24, r24
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <i2c_readNak+0x38>
     7ba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     7be:	03 c0       	rjmp	.+6      	; 0x7c6 <i2c_readNak+0x3e>
     7c0:	21 97       	sbiw	r28, 0x01	; 1
     7c2:	a9 f7       	brne	.-22     	; 0x7ae <i2c_readNak+0x26>
     7c4:	8f ef       	ldi	r24, 0xFF	; 255
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     7d0:	fc 01       	movw	r30, r24
     7d2:	94 2f       	mov	r25, r20
     7d4:	20 81       	ld	r18, Z
     7d6:	41 e0       	ldi	r20, 0x01	; 1
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	06 2e       	mov	r0, r22
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <updateBit+0x12>
     7de:	44 0f       	add	r20, r20
     7e0:	55 1f       	adc	r21, r21
     7e2:	0a 94       	dec	r0
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <updateBit+0xe>
     7e6:	40 95       	com	r20
     7e8:	50 95       	com	r21
     7ea:	24 23       	and	r18, r20
     7ec:	49 2f       	mov	r20, r25
     7ee:	50 e0       	ldi	r21, 0x00	; 0
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <updateBit+0x26>
     7f2:	44 0f       	add	r20, r20
     7f4:	55 1f       	adc	r21, r21
     7f6:	6a 95       	dec	r22
     7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <updateBit+0x22>
     7fa:	42 2b       	or	r20, r18
     7fc:	40 83       	st	Z, r20
     7fe:	08 95       	ret

00000800 <setBit>:
     800:	fc 01       	movw	r30, r24
     802:	40 81       	ld	r20, Z
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	02 c0       	rjmp	.+4      	; 0x80e <setBit+0xe>
     80a:	22 0f       	add	r18, r18
     80c:	33 1f       	adc	r19, r19
     80e:	6a 95       	dec	r22
     810:	e2 f7       	brpl	.-8      	; 0x80a <setBit+0xa>
     812:	24 2b       	or	r18, r20
     814:	20 83       	st	Z, r18
     816:	08 95       	ret

00000818 <clearBit>:
     818:	fc 01       	movw	r30, r24
     81a:	90 81       	ld	r25, Z
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	02 c0       	rjmp	.+4      	; 0x826 <clearBit+0xe>
     822:	22 0f       	add	r18, r18
     824:	33 1f       	adc	r19, r19
     826:	6a 95       	dec	r22
     828:	e2 f7       	brpl	.-8      	; 0x822 <clearBit+0xa>
     82a:	20 95       	com	r18
     82c:	29 23       	and	r18, r25
     82e:	20 83       	st	Z, r18
     830:	08 95       	ret

00000832 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	02 c0       	rjmp	.+4      	; 0x83a <checkBit+0x8>
     836:	95 95       	asr	r25
     838:	87 95       	ror	r24
     83a:	6a 95       	dec	r22
     83c:	e2 f7       	brpl	.-8      	; 0x836 <checkBit+0x4>
}
     83e:	81 70       	andi	r24, 0x01	; 1
     840:	08 95       	ret

00000842 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     842:	cf 92       	push	r12
     844:	df 92       	push	r13
     846:	ef 92       	push	r14
     848:	ff 92       	push	r15
     84a:	69 01       	movw	r12, r18
     84c:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     84e:	9b 01       	movw	r18, r22
     850:	ac 01       	movw	r20, r24
     852:	2c 19       	sub	r18, r12
     854:	3d 09       	sbc	r19, r13
     856:	4e 09       	sbc	r20, r14
     858:	5f 09       	sbc	r21, r15
     85a:	a8 ee       	ldi	r26, 0xE8	; 232
     85c:	b3 e0       	ldi	r27, 0x03	; 3
     85e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__muluhisi3>
     862:	a7 01       	movw	r20, r14
     864:	96 01       	movw	r18, r12
     866:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     86a:	c9 01       	movw	r24, r18
     86c:	99 23       	and	r25, r25
     86e:	24 f4       	brge	.+8      	; 0x878 <calculateError+0x36>
     870:	88 27       	eor	r24, r24
     872:	99 27       	eor	r25, r25
     874:	82 1b       	sub	r24, r18
     876:	93 0b       	sbc	r25, r19
}
     878:	ff 90       	pop	r15
     87a:	ef 90       	pop	r14
     87c:	df 90       	pop	r13
     87e:	cf 90       	pop	r12
     880:	08 95       	ret

00000882 <ruleOfThree>:

u16 ruleOfThree(u16 u16_extreme, u16 u16_mean1, u16 u16_mean2)
{
     882:	fc 01       	movw	r30, r24
     884:	9b 01       	movw	r18, r22
	u32 u32_result;
	u32_result = (u32) u16_mean1 * u16_mean2 / u16_extreme;
	return (u16) u32_result;
     886:	da 01       	movw	r26, r20
     888:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
     88c:	9f 01       	movw	r18, r30
     88e:	40 e0       	ldi	r20, 0x00	; 0
     890:	50 e0       	ldi	r21, 0x00	; 0
     892:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
}
     896:	c9 01       	movw	r24, r18
     898:	08 95       	ret

0000089a <pwm_init>:
			OCR3A = ruleOfThree(100, u8_pwm3aPercent, ICR3);
			OCR3B = ruleOfThree(100, u8_pwm3bPercent, ICR3);
		#endif
			break;
	}
}
     89a:	cf 93       	push	r28
     89c:	df 93       	push	r29
     89e:	ec 01       	movw	r28, r24
     8a0:	48 81       	ld	r20, Y
     8a2:	59 81       	ldd	r21, Y+1	; 0x01
     8a4:	6a 81       	ldd	r22, Y+2	; 0x02
     8a6:	7b 81       	ldd	r23, Y+3	; 0x03
     8a8:	8c 81       	ldd	r24, Y+4	; 0x04
     8aa:	3f d4       	rcall	.+2174   	; 0x112a <timer_init>
     8ac:	88 81       	ld	r24, Y
     8ae:	81 30       	cpi	r24, 0x01	; 1
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <pwm_init+0x1a>
     8b2:	62 c0       	rjmp	.+196    	; 0x978 <pwm_init+0xde>
     8b4:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8b8:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8bc:	89 2b       	or	r24, r25
     8be:	49 f0       	breq	.+18     	; 0x8d2 <pwm_init+0x38>
     8c0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8c4:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8c8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     8cc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     8d0:	06 c0       	rjmp	.+12     	; 0x8de <pwm_init+0x44>
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	9f ef       	ldi	r25, 0xFF	; 255
     8d6:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     8da:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     8de:	64 e0       	ldi	r22, 0x04	; 4
     8e0:	81 e8       	ldi	r24, 0x81	; 129
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	8d df       	rcall	.-230    	; 0x800 <setBit>
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	80 e8       	ldi	r24, 0x80	; 128
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	95 df       	rcall	.-214    	; 0x818 <clearBit>
     8ee:	8e 81       	ldd	r24, Y+6	; 0x06
     8f0:	88 23       	and	r24, r24
     8f2:	19 f0       	breq	.+6      	; 0x8fa <pwm_init+0x60>
     8f4:	81 30       	cpi	r24, 0x01	; 1
     8f6:	51 f0       	breq	.+20     	; 0x90c <pwm_init+0x72>
     8f8:	19 c0       	rjmp	.+50     	; 0x92c <pwm_init+0x92>
     8fa:	63 e0       	ldi	r22, 0x03	; 3
     8fc:	81 e8       	ldi	r24, 0x81	; 129
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	7f df       	rcall	.-258    	; 0x800 <setBit>
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	80 e8       	ldi	r24, 0x80	; 128
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	7b df       	rcall	.-266    	; 0x800 <setBit>
     90a:	10 c0       	rjmp	.+32     	; 0x92c <pwm_init+0x92>
     90c:	63 e0       	ldi	r22, 0x03	; 3
     90e:	81 e8       	ldi	r24, 0x81	; 129
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	82 df       	rcall	.-252    	; 0x818 <clearBit>
     914:	8d 81       	ldd	r24, Y+5	; 0x05
     916:	88 23       	and	r24, r24
     918:	29 f0       	breq	.+10     	; 0x924 <pwm_init+0x8a>
     91a:	61 e0       	ldi	r22, 0x01	; 1
     91c:	80 e8       	ldi	r24, 0x80	; 128
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	7b df       	rcall	.-266    	; 0x818 <clearBit>
     922:	04 c0       	rjmp	.+8      	; 0x92c <pwm_init+0x92>
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	80 e8       	ldi	r24, 0x80	; 128
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	6a df       	rcall	.-300    	; 0x800 <setBit>
     92c:	8f 81       	ldd	r24, Y+7	; 0x07
     92e:	88 23       	and	r24, r24
     930:	71 f0       	breq	.+28     	; 0x94e <pwm_init+0xb4>
     932:	67 e0       	ldi	r22, 0x07	; 7
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	63 df       	rcall	.-314    	; 0x800 <setBit>
     93a:	48 85       	ldd	r20, Y+8	; 0x08
     93c:	66 e0       	ldi	r22, 0x06	; 6
     93e:	80 e8       	ldi	r24, 0x80	; 128
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	46 df       	rcall	.-372    	; 0x7d0 <updateBit>
     944:	63 e0       	ldi	r22, 0x03	; 3
     946:	75 e0       	ldi	r23, 0x05	; 5
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	42 dd       	rcall	.-1404   	; 0x3d2 <gpio_init>
     94e:	89 85       	ldd	r24, Y+9	; 0x09
     950:	88 23       	and	r24, r24
     952:	71 f0       	breq	.+28     	; 0x970 <pwm_init+0xd6>
     954:	65 e0       	ldi	r22, 0x05	; 5
     956:	80 e8       	ldi	r24, 0x80	; 128
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	52 df       	rcall	.-348    	; 0x800 <setBit>
     95c:	4a 85       	ldd	r20, Y+10	; 0x0a
     95e:	64 e0       	ldi	r22, 0x04	; 4
     960:	80 e8       	ldi	r24, 0x80	; 128
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	35 df       	rcall	.-406    	; 0x7d0 <updateBit>
     966:	63 e0       	ldi	r22, 0x03	; 3
     968:	74 e0       	ldi	r23, 0x04	; 4
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	31 dd       	rcall	.-1438   	; 0x3d2 <gpio_init>
     970:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <u8_pwm1aPercent>
     974:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <u8_pwm1bPercent>
     978:	df 91       	pop	r29
     97a:	cf 91       	pop	r28
     97c:	08 95       	ret

0000097e <pwm_start>:
     97e:	ef 92       	push	r14
     980:	ff 92       	push	r15
     982:	0f 93       	push	r16
     984:	1f 93       	push	r17
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	2b 97       	sbiw	r28, 0x0b	; 11
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	f8 94       	cli
     994:	de bf       	out	0x3e, r29	; 62
     996:	0f be       	out	0x3f, r0	; 63
     998:	cd bf       	out	0x3d, r28	; 61
     99a:	4e 2d       	mov	r20, r14
     99c:	5f 2d       	mov	r21, r15
     99e:	60 2f       	mov	r22, r16
     9a0:	71 2f       	mov	r23, r17
     9a2:	82 2f       	mov	r24, r18
     9a4:	0e d5       	rcall	.+2588   	; 0x13c2 <timer_start>
     9a6:	2b 96       	adiw	r28, 0x0b	; 11
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	08 95       	ret

000009c0 <pwm_setDutyCycle>:

void pwm_setDutyCycle(pwm_struct_t s_pwm, timer_channel_enum_t e_channel, u8 u8_percent)
{
     9c0:	af 92       	push	r10
     9c2:	cf 92       	push	r12
     9c4:	ef 92       	push	r14
     9c6:	ff 92       	push	r15
     9c8:	0f 93       	push	r16
     9ca:	1f 93       	push	r17
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	cd b7       	in	r28, 0x3d	; 61
     9d2:	de b7       	in	r29, 0x3e	; 62
     9d4:	2b 97       	sbiw	r28, 0x0b	; 11
     9d6:	0f b6       	in	r0, 0x3f	; 63
     9d8:	f8 94       	cli
     9da:	de bf       	out	0x3e, r29	; 62
     9dc:	0f be       	out	0x3f, r0	; 63
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	9e 2d       	mov	r25, r14
     9e2:	e9 82       	std	Y+1, r14	; 0x01
     9e4:	fa 82       	std	Y+2, r15	; 0x02
     9e6:	0b 83       	std	Y+3, r16	; 0x03
     9e8:	1c 83       	std	Y+4, r17	; 0x04
     9ea:	2d 83       	std	Y+5, r18	; 0x05
     9ec:	3e 83       	std	Y+6, r19	; 0x06
     9ee:	4f 83       	std	Y+7, r20	; 0x07
     9f0:	58 87       	std	Y+8, r21	; 0x08
     9f2:	69 87       	std	Y+9, r22	; 0x09
     9f4:	7a 87       	std	Y+10, r23	; 0x0a
     9f6:	8b 87       	std	Y+11, r24	; 0x0b
	switch(s_pwm.base.peripheral)
     9f8:	91 30       	cpi	r25, 0x01	; 1
     9fa:	21 f5       	brne	.+72     	; 0xa44 <pwm_setDutyCycle+0x84>
     9fc:	8c 2d       	mov	r24, r12
			}
		#endif
			break;
		case TIMER1:
		#ifdef USING_PWM1
			if (e_channel == CHANNEL_A)
     9fe:	c1 10       	cpse	r12, r1
     a00:	10 c0       	rjmp	.+32     	; 0xa22 <pwm_setDutyCycle+0x62>
			{
				u8_pwm1aPercent = u8_percent;
     a02:	a0 92 6b 01 	sts	0x016B, r10	; 0x80016b <u8_pwm1aPercent>
				OCR1A = ruleOfThree(100, u8_percent, ICR1);
     a06:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a0a:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a0e:	6a 2d       	mov	r22, r10
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	84 e6       	ldi	r24, 0x64	; 100
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	35 df       	rcall	.-406    	; 0x882 <ruleOfThree>
     a18:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a1c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a20:	11 c0       	rjmp	.+34     	; 0xa44 <pwm_setDutyCycle+0x84>
			}
			if (e_channel == CHANNEL_B)
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	79 f4       	brne	.+30     	; 0xa44 <pwm_setDutyCycle+0x84>
			{
				u8_pwm1bPercent = u8_percent;
     a26:	a0 92 6a 01 	sts	0x016A, r10	; 0x80016a <u8_pwm1bPercent>
				OCR1B = ruleOfThree(100, u8_percent, ICR1);
     a2a:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     a2e:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     a32:	6a 2d       	mov	r22, r10
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	84 e6       	ldi	r24, 0x64	; 100
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	23 df       	rcall	.-442    	; 0x882 <ruleOfThree>
     a3c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     a40:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				OCR3B = ruleOfThree(100, u8_percent, ICR3);
			}
		#endif
			break;
	}
}
     a44:	2b 96       	adiw	r28, 0x0b	; 11
     a46:	0f b6       	in	r0, 0x3f	; 63
     a48:	f8 94       	cli
     a4a:	de bf       	out	0x3e, r29	; 62
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	cd bf       	out	0x3d, r28	; 61
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	1f 91       	pop	r17
     a56:	0f 91       	pop	r16
     a58:	ff 90       	pop	r15
     a5a:	ef 90       	pop	r14
     a5c:	cf 90       	pop	r12
     a5e:	af 90       	pop	r10
     a60:	08 95       	ret

00000a62 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	0b b6       	in	r0, 0x3b	; 59
     a6e:	0f 92       	push	r0
     a70:	8f 93       	push	r24
     a72:	9f 93       	push	r25
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     a78:	e0 91 71 01 	lds	r30, 0x0171	; 0x800171 <u8_RLastReceivedIndex>
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	8e b5       	in	r24, 0x2e	; 46
     a80:	ee 58       	subi	r30, 0x8E	; 142
     a82:	fe 4f       	sbci	r31, 0xFE	; 254
     a84:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     a86:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <u8_RLastReceivedIndex>
     a8a:	89 30       	cpi	r24, 0x09	; 9
     a8c:	30 f4       	brcc	.+12     	; 0xa9a <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     a8e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <u8_RLastReceivedIndex>
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <u8_RLastReceivedIndex>
     a98:	02 c0       	rjmp	.+4      	; 0xa9e <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     a9a:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     aa4:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <u8_TLastTransmittedIndex>
     aa8:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <u8_TLastRequestedIndex>
     aac:	98 17       	cp	r25, r24
     aae:	a1 f0       	breq	.+40     	; 0xad8 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     ab0:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <u8_TLastTransmittedIndex>
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	e4 58       	subi	r30, 0x84	; 132
     ab8:	fe 4f       	sbci	r31, 0xFE	; 254
     aba:	80 81       	ld	r24, Z
     abc:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     abe:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8_TLastTransmittedIndex>
     ac2:	89 30       	cpi	r24, 0x09	; 9
     ac4:	30 f4       	brcc	.+12     	; 0xad2 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     ac6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <u8_TLastTransmittedIndex>
     aca:	8f 5f       	subi	r24, 0xFF	; 255
     acc:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <u8_TLastTransmittedIndex>
     ad0:	06 c0       	rjmp	.+12     	; 0xade <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     ad2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <u8_TLastTransmittedIndex>
     ad6:	03 c0       	rjmp	.+6      	; 0xade <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <b_TAvailable>
	}
}
     ade:	ff 91       	pop	r31
     ae0:	ef 91       	pop	r30
     ae2:	9f 91       	pop	r25
     ae4:	8f 91       	pop	r24
     ae6:	0f 90       	pop	r0
     ae8:	0b be       	out	0x3b, r0	; 59
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     af4:	8f 92       	push	r8
     af6:	9f 92       	push	r9
     af8:	af 92       	push	r10
     afa:	bf 92       	push	r11
     afc:	ef 92       	push	r14
     afe:	ff 92       	push	r15
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	00 d0       	rcall	.+0      	; 0xb0a <calculateTopRegister+0x16>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <calculateTopRegister+0x18>
     b0c:	1f 92       	push	r1
     b0e:	cd b7       	in	r28, 0x3d	; 61
     b10:	de b7       	in	r29, 0x3e	; 62
     b12:	48 01       	movw	r8, r16
     b14:	59 01       	movw	r10, r18
     b16:	41 30       	cpi	r20, 0x01	; 1
     b18:	21 f0       	breq	.+8      	; 0xb22 <calculateTopRegister+0x2e>
     b1a:	42 30       	cpi	r20, 0x02	; 2
     b1c:	09 f4       	brne	.+2      	; 0xb20 <calculateTopRegister+0x2c>
     b1e:	88 c0       	rjmp	.+272    	; 0xc30 <calculateTopRegister+0x13c>
     b20:	4c c1       	rjmp	.+664    	; 0xdba <calculateTopRegister+0x2c6>
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	72 e1       	ldi	r23, 0x12	; 18
     b26:	8a e7       	ldi	r24, 0x7A	; 122
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	a9 01       	movw	r20, r18
     b2c:	98 01       	movw	r18, r16
     b2e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     b32:	da 01       	movw	r26, r20
     b34:	c9 01       	movw	r24, r18
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	a1 09       	sbc	r26, r1
     b3a:	b1 09       	sbc	r27, r1
     b3c:	00 97       	sbiw	r24, 0x00	; 0
     b3e:	21 e0       	ldi	r18, 0x01	; 1
     b40:	a2 07       	cpc	r26, r18
     b42:	b1 05       	cpc	r27, r1
     b44:	50 f4       	brcc	.+20     	; 0xb5a <calculateTopRegister+0x66>
     b46:	49 ef       	ldi	r20, 0xF9	; 249
     b48:	5f ef       	ldi	r21, 0xFF	; 255
     b4a:	6f ef       	ldi	r22, 0xFF	; 255
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	f7 01       	movw	r30, r14
     b50:	40 83       	st	Z, r20
     b52:	51 83       	std	Z+1, r21	; 0x01
     b54:	62 83       	std	Z+2, r22	; 0x02
     b56:	73 83       	std	Z+3, r23	; 0x03
     b58:	33 c1       	rjmp	.+614    	; 0xdc0 <calculateTopRegister+0x2cc>
     b5a:	60 e4       	ldi	r22, 0x40	; 64
     b5c:	72 e4       	ldi	r23, 0x42	; 66
     b5e:	8f e0       	ldi	r24, 0x0F	; 15
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a5 01       	movw	r20, r10
     b64:	94 01       	movw	r18, r8
     b66:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     b6a:	da 01       	movw	r26, r20
     b6c:	c9 01       	movw	r24, r18
     b6e:	01 97       	sbiw	r24, 0x01	; 1
     b70:	a1 09       	sbc	r26, r1
     b72:	b1 09       	sbc	r27, r1
     b74:	00 97       	sbiw	r24, 0x00	; 0
     b76:	f1 e0       	ldi	r31, 0x01	; 1
     b78:	af 07       	cpc	r26, r31
     b7a:	b1 05       	cpc	r27, r1
     b7c:	50 f4       	brcc	.+20     	; 0xb92 <calculateTopRegister+0x9e>
     b7e:	4a ef       	ldi	r20, 0xFA	; 250
     b80:	5f ef       	ldi	r21, 0xFF	; 255
     b82:	6f ef       	ldi	r22, 0xFF	; 255
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	f7 01       	movw	r30, r14
     b88:	40 83       	st	Z, r20
     b8a:	51 83       	std	Z+1, r21	; 0x01
     b8c:	62 83       	std	Z+2, r22	; 0x02
     b8e:	73 83       	std	Z+3, r23	; 0x03
     b90:	17 c1       	rjmp	.+558    	; 0xdc0 <calculateTopRegister+0x2cc>
     b92:	68 e4       	ldi	r22, 0x48	; 72
     b94:	78 ee       	ldi	r23, 0xE8	; 232
     b96:	81 e0       	ldi	r24, 0x01	; 1
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a5 01       	movw	r20, r10
     b9c:	94 01       	movw	r18, r8
     b9e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     ba2:	da 01       	movw	r26, r20
     ba4:	c9 01       	movw	r24, r18
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	a1 09       	sbc	r26, r1
     baa:	b1 09       	sbc	r27, r1
     bac:	00 97       	sbiw	r24, 0x00	; 0
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	af 07       	cpc	r26, r31
     bb2:	b1 05       	cpc	r27, r1
     bb4:	50 f4       	brcc	.+20     	; 0xbca <calculateTopRegister+0xd6>
     bb6:	4c ef       	ldi	r20, 0xFC	; 252
     bb8:	5f ef       	ldi	r21, 0xFF	; 255
     bba:	6f ef       	ldi	r22, 0xFF	; 255
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	f7 01       	movw	r30, r14
     bc0:	40 83       	st	Z, r20
     bc2:	51 83       	std	Z+1, r21	; 0x01
     bc4:	62 83       	std	Z+2, r22	; 0x02
     bc6:	73 83       	std	Z+3, r23	; 0x03
     bc8:	fb c0       	rjmp	.+502    	; 0xdc0 <calculateTopRegister+0x2cc>
     bca:	62 e1       	ldi	r22, 0x12	; 18
     bcc:	7a e7       	ldi	r23, 0x7A	; 122
     bce:	80 e0       	ldi	r24, 0x00	; 0
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	a5 01       	movw	r20, r10
     bd4:	94 01       	movw	r18, r8
     bd6:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     bda:	da 01       	movw	r26, r20
     bdc:	c9 01       	movw	r24, r18
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	f1 e0       	ldi	r31, 0x01	; 1
     be8:	af 07       	cpc	r26, r31
     bea:	b1 05       	cpc	r27, r1
     bec:	50 f4       	brcc	.+20     	; 0xc02 <calculateTopRegister+0x10e>
     bee:	4e ef       	ldi	r20, 0xFE	; 254
     bf0:	5f ef       	ldi	r21, 0xFF	; 255
     bf2:	6f ef       	ldi	r22, 0xFF	; 255
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	f7 01       	movw	r30, r14
     bf8:	40 83       	st	Z, r20
     bfa:	51 83       	std	Z+1, r21	; 0x01
     bfc:	62 83       	std	Z+2, r22	; 0x02
     bfe:	73 83       	std	Z+3, r23	; 0x03
     c00:	df c0       	rjmp	.+446    	; 0xdc0 <calculateTopRegister+0x2cc>
     c02:	8f ef       	ldi	r24, 0xFF	; 255
     c04:	9f ef       	ldi	r25, 0xFF	; 255
     c06:	af ef       	ldi	r26, 0xFF	; 255
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	f7 01       	movw	r30, r14
     c0c:	80 83       	st	Z, r24
     c0e:	91 83       	std	Z+1, r25	; 0x01
     c10:	a2 83       	std	Z+2, r26	; 0x02
     c12:	b3 83       	std	Z+3, r27	; 0x03
     c14:	64 e8       	ldi	r22, 0x84	; 132
     c16:	7e e1       	ldi	r23, 0x1E	; 30
     c18:	80 e0       	ldi	r24, 0x00	; 0
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	a5 01       	movw	r20, r10
     c1e:	94 01       	movw	r18, r8
     c20:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     c24:	da 01       	movw	r26, r20
     c26:	c9 01       	movw	r24, r18
     c28:	01 97       	sbiw	r24, 0x01	; 1
     c2a:	a1 09       	sbc	r26, r1
     c2c:	b1 09       	sbc	r27, r1
     c2e:	c8 c0       	rjmp	.+400    	; 0xdc0 <calculateTopRegister+0x2cc>
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	72 e1       	ldi	r23, 0x12	; 18
     c34:	8a e7       	ldi	r24, 0x7A	; 122
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a9 01       	movw	r20, r18
     c3a:	98 01       	movw	r18, r16
     c3c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     c40:	da 01       	movw	r26, r20
     c42:	c9 01       	movw	r24, r18
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	a1 09       	sbc	r26, r1
     c48:	b1 09       	sbc	r27, r1
     c4a:	8f 3f       	cpi	r24, 0xFF	; 255
     c4c:	91 05       	cpc	r25, r1
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	09 f0       	breq	.+2      	; 0xc56 <calculateTopRegister+0x162>
     c54:	50 f4       	brcc	.+20     	; 0xc6a <calculateTopRegister+0x176>
     c56:	49 ef       	ldi	r20, 0xF9	; 249
     c58:	5f ef       	ldi	r21, 0xFF	; 255
     c5a:	6f ef       	ldi	r22, 0xFF	; 255
     c5c:	70 e0       	ldi	r23, 0x00	; 0
     c5e:	f7 01       	movw	r30, r14
     c60:	40 83       	st	Z, r20
     c62:	51 83       	std	Z+1, r21	; 0x01
     c64:	62 83       	std	Z+2, r22	; 0x02
     c66:	73 83       	std	Z+3, r23	; 0x03
     c68:	ab c0       	rjmp	.+342    	; 0xdc0 <calculateTopRegister+0x2cc>
     c6a:	60 e4       	ldi	r22, 0x40	; 64
     c6c:	72 e4       	ldi	r23, 0x42	; 66
     c6e:	8f e0       	ldi	r24, 0x0F	; 15
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	a5 01       	movw	r20, r10
     c74:	94 01       	movw	r18, r8
     c76:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     c7a:	da 01       	movw	r26, r20
     c7c:	c9 01       	movw	r24, r18
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	a1 09       	sbc	r26, r1
     c82:	b1 09       	sbc	r27, r1
     c84:	8f 3f       	cpi	r24, 0xFF	; 255
     c86:	91 05       	cpc	r25, r1
     c88:	a1 05       	cpc	r26, r1
     c8a:	b1 05       	cpc	r27, r1
     c8c:	09 f0       	breq	.+2      	; 0xc90 <calculateTopRegister+0x19c>
     c8e:	50 f4       	brcc	.+20     	; 0xca4 <calculateTopRegister+0x1b0>
     c90:	4a ef       	ldi	r20, 0xFA	; 250
     c92:	5f ef       	ldi	r21, 0xFF	; 255
     c94:	6f ef       	ldi	r22, 0xFF	; 255
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	f7 01       	movw	r30, r14
     c9a:	40 83       	st	Z, r20
     c9c:	51 83       	std	Z+1, r21	; 0x01
     c9e:	62 83       	std	Z+2, r22	; 0x02
     ca0:	73 83       	std	Z+3, r23	; 0x03
     ca2:	8e c0       	rjmp	.+284    	; 0xdc0 <calculateTopRegister+0x2cc>
     ca4:	60 e9       	ldi	r22, 0x90	; 144
     ca6:	70 ed       	ldi	r23, 0xD0	; 208
     ca8:	83 e0       	ldi	r24, 0x03	; 3
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	a5 01       	movw	r20, r10
     cae:	94 01       	movw	r18, r8
     cb0:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     cb4:	da 01       	movw	r26, r20
     cb6:	c9 01       	movw	r24, r18
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	a1 09       	sbc	r26, r1
     cbc:	b1 09       	sbc	r27, r1
     cbe:	8f 3f       	cpi	r24, 0xFF	; 255
     cc0:	91 05       	cpc	r25, r1
     cc2:	a1 05       	cpc	r26, r1
     cc4:	b1 05       	cpc	r27, r1
     cc6:	09 f0       	breq	.+2      	; 0xcca <calculateTopRegister+0x1d6>
     cc8:	50 f4       	brcc	.+20     	; 0xcde <calculateTopRegister+0x1ea>
     cca:	4b ef       	ldi	r20, 0xFB	; 251
     ccc:	5f ef       	ldi	r21, 0xFF	; 255
     cce:	6f ef       	ldi	r22, 0xFF	; 255
     cd0:	70 e0       	ldi	r23, 0x00	; 0
     cd2:	f7 01       	movw	r30, r14
     cd4:	40 83       	st	Z, r20
     cd6:	51 83       	std	Z+1, r21	; 0x01
     cd8:	62 83       	std	Z+2, r22	; 0x02
     cda:	73 83       	std	Z+3, r23	; 0x03
     cdc:	71 c0       	rjmp	.+226    	; 0xdc0 <calculateTopRegister+0x2cc>
     cde:	68 e4       	ldi	r22, 0x48	; 72
     ce0:	78 ee       	ldi	r23, 0xE8	; 232
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a5 01       	movw	r20, r10
     ce8:	94 01       	movw	r18, r8
     cea:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     cee:	da 01       	movw	r26, r20
     cf0:	c9 01       	movw	r24, r18
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	a1 09       	sbc	r26, r1
     cf6:	b1 09       	sbc	r27, r1
     cf8:	8f 3f       	cpi	r24, 0xFF	; 255
     cfa:	91 05       	cpc	r25, r1
     cfc:	a1 05       	cpc	r26, r1
     cfe:	b1 05       	cpc	r27, r1
     d00:	09 f0       	breq	.+2      	; 0xd04 <calculateTopRegister+0x210>
     d02:	50 f4       	brcc	.+20     	; 0xd18 <calculateTopRegister+0x224>
     d04:	4c ef       	ldi	r20, 0xFC	; 252
     d06:	5f ef       	ldi	r21, 0xFF	; 255
     d08:	6f ef       	ldi	r22, 0xFF	; 255
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	f7 01       	movw	r30, r14
     d0e:	40 83       	st	Z, r20
     d10:	51 83       	std	Z+1, r21	; 0x01
     d12:	62 83       	std	Z+2, r22	; 0x02
     d14:	73 83       	std	Z+3, r23	; 0x03
     d16:	54 c0       	rjmp	.+168    	; 0xdc0 <calculateTopRegister+0x2cc>
     d18:	64 e2       	ldi	r22, 0x24	; 36
     d1a:	74 ef       	ldi	r23, 0xF4	; 244
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	a5 01       	movw	r20, r10
     d22:	94 01       	movw	r18, r8
     d24:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     d28:	da 01       	movw	r26, r20
     d2a:	c9 01       	movw	r24, r18
     d2c:	01 97       	sbiw	r24, 0x01	; 1
     d2e:	a1 09       	sbc	r26, r1
     d30:	b1 09       	sbc	r27, r1
     d32:	8f 3f       	cpi	r24, 0xFF	; 255
     d34:	91 05       	cpc	r25, r1
     d36:	a1 05       	cpc	r26, r1
     d38:	b1 05       	cpc	r27, r1
     d3a:	09 f0       	breq	.+2      	; 0xd3e <calculateTopRegister+0x24a>
     d3c:	50 f4       	brcc	.+20     	; 0xd52 <calculateTopRegister+0x25e>
     d3e:	4d ef       	ldi	r20, 0xFD	; 253
     d40:	5f ef       	ldi	r21, 0xFF	; 255
     d42:	6f ef       	ldi	r22, 0xFF	; 255
     d44:	70 e0       	ldi	r23, 0x00	; 0
     d46:	f7 01       	movw	r30, r14
     d48:	40 83       	st	Z, r20
     d4a:	51 83       	std	Z+1, r21	; 0x01
     d4c:	62 83       	std	Z+2, r22	; 0x02
     d4e:	73 83       	std	Z+3, r23	; 0x03
     d50:	37 c0       	rjmp	.+110    	; 0xdc0 <calculateTopRegister+0x2cc>
     d52:	62 e1       	ldi	r22, 0x12	; 18
     d54:	7a e7       	ldi	r23, 0x7A	; 122
     d56:	80 e0       	ldi	r24, 0x00	; 0
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	a5 01       	movw	r20, r10
     d5c:	94 01       	movw	r18, r8
     d5e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     d62:	da 01       	movw	r26, r20
     d64:	c9 01       	movw	r24, r18
     d66:	01 97       	sbiw	r24, 0x01	; 1
     d68:	a1 09       	sbc	r26, r1
     d6a:	b1 09       	sbc	r27, r1
     d6c:	8f 3f       	cpi	r24, 0xFF	; 255
     d6e:	91 05       	cpc	r25, r1
     d70:	a1 05       	cpc	r26, r1
     d72:	b1 05       	cpc	r27, r1
     d74:	09 f0       	breq	.+2      	; 0xd78 <calculateTopRegister+0x284>
     d76:	50 f4       	brcc	.+20     	; 0xd8c <calculateTopRegister+0x298>
     d78:	4e ef       	ldi	r20, 0xFE	; 254
     d7a:	5f ef       	ldi	r21, 0xFF	; 255
     d7c:	6f ef       	ldi	r22, 0xFF	; 255
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	f7 01       	movw	r30, r14
     d82:	40 83       	st	Z, r20
     d84:	51 83       	std	Z+1, r21	; 0x01
     d86:	62 83       	std	Z+2, r22	; 0x02
     d88:	73 83       	std	Z+3, r23	; 0x03
     d8a:	1a c0       	rjmp	.+52     	; 0xdc0 <calculateTopRegister+0x2cc>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	9f ef       	ldi	r25, 0xFF	; 255
     d90:	af ef       	ldi	r26, 0xFF	; 255
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	f7 01       	movw	r30, r14
     d96:	80 83       	st	Z, r24
     d98:	91 83       	std	Z+1, r25	; 0x01
     d9a:	a2 83       	std	Z+2, r26	; 0x02
     d9c:	b3 83       	std	Z+3, r27	; 0x03
     d9e:	64 e8       	ldi	r22, 0x84	; 132
     da0:	7e e1       	ldi	r23, 0x1E	; 30
     da2:	80 e0       	ldi	r24, 0x00	; 0
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a5 01       	movw	r20, r10
     da8:	94 01       	movw	r18, r8
     daa:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
     dae:	da 01       	movw	r26, r20
     db0:	c9 01       	movw	r24, r18
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	a1 09       	sbc	r26, r1
     db6:	b1 09       	sbc	r27, r1
     db8:	03 c0       	rjmp	.+6      	; 0xdc0 <calculateTopRegister+0x2cc>
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	dc 01       	movw	r26, r24
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	1f 91       	pop	r17
     dd0:	0f 91       	pop	r16
     dd2:	ff 90       	pop	r15
     dd4:	ef 90       	pop	r14
     dd6:	bf 90       	pop	r11
     dd8:	af 90       	pop	r10
     dda:	9f 90       	pop	r9
     ddc:	8f 90       	pop	r8
     dde:	08 95       	ret

00000de0 <__vector_15>:
     de0:	1f 92       	push	r1
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	0f 92       	push	r0
     de8:	11 24       	eor	r1, r1
     dea:	0b b6       	in	r0, 0x3b	; 59
     dec:	0f 92       	push	r0
     dee:	2f 93       	push	r18
     df0:	3f 93       	push	r19
     df2:	4f 93       	push	r20
     df4:	5f 93       	push	r21
     df6:	6f 93       	push	r22
     df8:	7f 93       	push	r23
     dfa:	8f 93       	push	r24
     dfc:	9f 93       	push	r25
     dfe:	af 93       	push	r26
     e00:	bf 93       	push	r27
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
     e06:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <p_timer1Callbacks>
     e0a:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <p_timer1Callbacks+0x1>
     e0e:	09 95       	icall
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_13>:
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	0b b6       	in	r0, 0x3b	; 59
     e42:	0f 92       	push	r0
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	2f 93       	push	r18
     e4a:	3f 93       	push	r19
     e4c:	4f 93       	push	r20
     e4e:	5f 93       	push	r21
     e50:	6f 93       	push	r22
     e52:	7f 93       	push	r23
     e54:	8f 93       	push	r24
     e56:	9f 93       	push	r25
     e58:	af 93       	push	r26
     e5a:	bf 93       	push	r27
     e5c:	cf 93       	push	r28
     e5e:	df 93       	push	r29
     e60:	ef 93       	push	r30
     e62:	ff 93       	push	r31
     e64:	c1 e8       	ldi	r28, 0x81	; 129
     e66:	d0 e0       	ldi	r29, 0x00	; 0
     e68:	88 81       	ld	r24, Y
     e6a:	64 e0       	ldi	r22, 0x04	; 4
     e6c:	e2 dc       	rcall	.-1596   	; 0x832 <checkBit>
     e6e:	18 2f       	mov	r17, r24
     e70:	88 81       	ld	r24, Y
     e72:	63 e0       	ldi	r22, 0x03	; 3
     e74:	de dc       	rcall	.-1604   	; 0x832 <checkBit>
     e76:	c1 2f       	mov	r28, r17
     e78:	cc 0f       	add	r28, r28
     e7a:	cc 0f       	add	r28, r28
     e7c:	cc 0f       	add	r28, r28
     e7e:	24 e0       	ldi	r18, 0x04	; 4
     e80:	82 9f       	mul	r24, r18
     e82:	c0 01       	movw	r24, r0
     e84:	11 24       	eor	r1, r1
     e86:	c8 2b       	or	r28, r24
     e88:	00 e8       	ldi	r16, 0x80	; 128
     e8a:	10 e0       	ldi	r17, 0x00	; 0
     e8c:	f8 01       	movw	r30, r16
     e8e:	80 81       	ld	r24, Z
     e90:	61 e0       	ldi	r22, 0x01	; 1
     e92:	cf dc       	rcall	.-1634   	; 0x832 <checkBit>
     e94:	d8 2f       	mov	r29, r24
     e96:	f8 01       	movw	r30, r16
     e98:	80 81       	ld	r24, Z
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	ca dc       	rcall	.-1644   	; 0x832 <checkBit>
     e9e:	dd 0f       	add	r29, r29
     ea0:	8c 2b       	or	r24, r28
     ea2:	8d 2b       	or	r24, r29
     ea4:	88 30       	cpi	r24, 0x08	; 8
     ea6:	18 f4       	brcc	.+6      	; 0xeae <__vector_13+0x78>
     ea8:	84 30       	cpi	r24, 0x04	; 4
     eaa:	19 f4       	brne	.+6      	; 0xeb2 <__vector_13+0x7c>
     eac:	08 c0       	rjmp	.+16     	; 0xebe <__vector_13+0x88>
     eae:	80 fd       	sbrc	r24, 0
     eb0:	06 c0       	rjmp	.+12     	; 0xebe <__vector_13+0x88>
     eb2:	e0 91 8a 01 	lds	r30, 0x018A	; 0x80018a <p_timer1Callbacks+0x2>
     eb6:	f0 91 8b 01 	lds	r31, 0x018B	; 0x80018b <p_timer1Callbacks+0x3>
     eba:	09 95       	icall
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <__vector_13+0x92>
     ebe:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <p_timer1Callbacks>
     ec2:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <p_timer1Callbacks+0x1>
     ec6:	09 95       	icall
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	bf 91       	pop	r27
     ed2:	af 91       	pop	r26
     ed4:	9f 91       	pop	r25
     ed6:	8f 91       	pop	r24
     ed8:	7f 91       	pop	r23
     eda:	6f 91       	pop	r22
     edc:	5f 91       	pop	r21
     ede:	4f 91       	pop	r20
     ee0:	3f 91       	pop	r19
     ee2:	2f 91       	pop	r18
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	0f 90       	pop	r0
     eea:	0b be       	out	0x3b, r0	; 59
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <__vector_14>:
     ef6:	1f 92       	push	r1
     ef8:	0f 92       	push	r0
     efa:	0f b6       	in	r0, 0x3f	; 63
     efc:	0f 92       	push	r0
     efe:	11 24       	eor	r1, r1
     f00:	0b b6       	in	r0, 0x3b	; 59
     f02:	0f 92       	push	r0
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
     f1c:	e0 91 8c 01 	lds	r30, 0x018C	; 0x80018c <p_timer1Callbacks+0x4>
     f20:	f0 91 8d 01 	lds	r31, 0x018D	; 0x80018d <p_timer1Callbacks+0x5>
     f24:	09 95       	icall
     f26:	ff 91       	pop	r31
     f28:	ef 91       	pop	r30
     f2a:	bf 91       	pop	r27
     f2c:	af 91       	pop	r26
     f2e:	9f 91       	pop	r25
     f30:	8f 91       	pop	r24
     f32:	7f 91       	pop	r23
     f34:	6f 91       	pop	r22
     f36:	5f 91       	pop	r21
     f38:	4f 91       	pop	r20
     f3a:	3f 91       	pop	r19
     f3c:	2f 91       	pop	r18
     f3e:	0f 90       	pop	r0
     f40:	0b be       	out	0x3b, r0	; 59
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_12>:
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	0b b6       	in	r0, 0x3b	; 59
     f58:	0f 92       	push	r0
     f5a:	0f 93       	push	r16
     f5c:	1f 93       	push	r17
     f5e:	2f 93       	push	r18
     f60:	3f 93       	push	r19
     f62:	4f 93       	push	r20
     f64:	5f 93       	push	r21
     f66:	6f 93       	push	r22
     f68:	7f 93       	push	r23
     f6a:	8f 93       	push	r24
     f6c:	9f 93       	push	r25
     f6e:	af 93       	push	r26
     f70:	bf 93       	push	r27
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	ef 93       	push	r30
     f78:	ff 93       	push	r31
     f7a:	c1 e8       	ldi	r28, 0x81	; 129
     f7c:	d0 e0       	ldi	r29, 0x00	; 0
     f7e:	88 81       	ld	r24, Y
     f80:	64 e0       	ldi	r22, 0x04	; 4
     f82:	57 dc       	rcall	.-1874   	; 0x832 <checkBit>
     f84:	18 2f       	mov	r17, r24
     f86:	88 81       	ld	r24, Y
     f88:	63 e0       	ldi	r22, 0x03	; 3
     f8a:	53 dc       	rcall	.-1882   	; 0x832 <checkBit>
     f8c:	c1 2f       	mov	r28, r17
     f8e:	cc 0f       	add	r28, r28
     f90:	cc 0f       	add	r28, r28
     f92:	cc 0f       	add	r28, r28
     f94:	24 e0       	ldi	r18, 0x04	; 4
     f96:	82 9f       	mul	r24, r18
     f98:	c0 01       	movw	r24, r0
     f9a:	11 24       	eor	r1, r1
     f9c:	c8 2b       	or	r28, r24
     f9e:	00 e8       	ldi	r16, 0x80	; 128
     fa0:	10 e0       	ldi	r17, 0x00	; 0
     fa2:	f8 01       	movw	r30, r16
     fa4:	80 81       	ld	r24, Z
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	44 dc       	rcall	.-1912   	; 0x832 <checkBit>
     faa:	d8 2f       	mov	r29, r24
     fac:	f8 01       	movw	r30, r16
     fae:	80 81       	ld	r24, Z
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	3f dc       	rcall	.-1922   	; 0x832 <checkBit>
     fb4:	dd 0f       	add	r29, r29
     fb6:	8c 2b       	or	r24, r28
     fb8:	8d 2b       	or	r24, r29
     fba:	88 30       	cpi	r24, 0x08	; 8
     fbc:	10 f0       	brcs	.+4      	; 0xfc2 <__vector_12+0x76>
     fbe:	80 ff       	sbrs	r24, 0
     fc0:	06 c0       	rjmp	.+12     	; 0xfce <__vector_12+0x82>
     fc2:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <p_timer1Callbacks+0x6>
     fc6:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <p_timer1Callbacks+0x7>
     fca:	09 95       	icall
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <__vector_12+0x8c>
     fce:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <p_timer1Callbacks>
     fd2:	f0 91 89 01 	lds	r31, 0x0189	; 0x800189 <p_timer1Callbacks+0x1>
     fd6:	09 95       	icall
     fd8:	ff 91       	pop	r31
     fda:	ef 91       	pop	r30
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	bf 91       	pop	r27
     fe2:	af 91       	pop	r26
     fe4:	9f 91       	pop	r25
     fe6:	8f 91       	pop	r24
     fe8:	7f 91       	pop	r23
     fea:	6f 91       	pop	r22
     fec:	5f 91       	pop	r21
     fee:	4f 91       	pop	r20
     ff0:	3f 91       	pop	r19
     ff2:	2f 91       	pop	r18
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	0f 90       	pop	r0
     ffa:	0b be       	out	0x3b, r0	; 59
     ffc:	0f 90       	pop	r0
     ffe:	0f be       	out	0x3f, r0	; 63
    1000:	0f 90       	pop	r0
    1002:	1f 90       	pop	r1
    1004:	18 95       	reti

00001006 <__vector_11>:
    1006:	1f 92       	push	r1
    1008:	0f 92       	push	r0
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	0f 92       	push	r0
    100e:	11 24       	eor	r1, r1
    1010:	0b b6       	in	r0, 0x3b	; 59
    1012:	0f 92       	push	r0
    1014:	2f 93       	push	r18
    1016:	3f 93       	push	r19
    1018:	4f 93       	push	r20
    101a:	5f 93       	push	r21
    101c:	6f 93       	push	r22
    101e:	7f 93       	push	r23
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	af 93       	push	r26
    1026:	bf 93       	push	r27
    1028:	ef 93       	push	r30
    102a:	ff 93       	push	r31
    102c:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <p_timer2Callbacks>
    1030:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <p_timer2Callbacks+0x1>
    1034:	09 95       	icall
    1036:	ff 91       	pop	r31
    1038:	ef 91       	pop	r30
    103a:	bf 91       	pop	r27
    103c:	af 91       	pop	r26
    103e:	9f 91       	pop	r25
    1040:	8f 91       	pop	r24
    1042:	7f 91       	pop	r23
    1044:	6f 91       	pop	r22
    1046:	5f 91       	pop	r21
    1048:	4f 91       	pop	r20
    104a:	3f 91       	pop	r19
    104c:	2f 91       	pop	r18
    104e:	0f 90       	pop	r0
    1050:	0b be       	out	0x3b, r0	; 59
    1052:	0f 90       	pop	r0
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	0f 90       	pop	r0
    1058:	1f 90       	pop	r1
    105a:	18 95       	reti

0000105c <__vector_9>:
    105c:	1f 92       	push	r1
    105e:	0f 92       	push	r0
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	0f 92       	push	r0
    1064:	11 24       	eor	r1, r1
    1066:	0b b6       	in	r0, 0x3b	; 59
    1068:	0f 92       	push	r0
    106a:	2f 93       	push	r18
    106c:	3f 93       	push	r19
    106e:	4f 93       	push	r20
    1070:	5f 93       	push	r21
    1072:	6f 93       	push	r22
    1074:	7f 93       	push	r23
    1076:	8f 93       	push	r24
    1078:	9f 93       	push	r25
    107a:	af 93       	push	r26
    107c:	bf 93       	push	r27
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
    1082:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1086:	63 e0       	ldi	r22, 0x03	; 3
    1088:	d4 db       	rcall	.-2136   	; 0x832 <checkBit>
    108a:	81 11       	cpse	r24, r1
    108c:	0b c0       	rjmp	.+22     	; 0x10a4 <__vector_9+0x48>
    108e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    1092:	83 70       	andi	r24, 0x03	; 3
    1094:	82 30       	cpi	r24, 0x02	; 2
    1096:	31 f0       	breq	.+12     	; 0x10a4 <__vector_9+0x48>
    1098:	e0 91 94 01 	lds	r30, 0x0194	; 0x800194 <p_timer2Callbacks+0x2>
    109c:	f0 91 95 01 	lds	r31, 0x0195	; 0x800195 <p_timer2Callbacks+0x3>
    10a0:	09 95       	icall
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <__vector_9+0x52>
    10a4:	e0 91 92 01 	lds	r30, 0x0192	; 0x800192 <p_timer2Callbacks>
    10a8:	f0 91 93 01 	lds	r31, 0x0193	; 0x800193 <p_timer2Callbacks+0x1>
    10ac:	09 95       	icall
    10ae:	ff 91       	pop	r31
    10b0:	ef 91       	pop	r30
    10b2:	bf 91       	pop	r27
    10b4:	af 91       	pop	r26
    10b6:	9f 91       	pop	r25
    10b8:	8f 91       	pop	r24
    10ba:	7f 91       	pop	r23
    10bc:	6f 91       	pop	r22
    10be:	5f 91       	pop	r21
    10c0:	4f 91       	pop	r20
    10c2:	3f 91       	pop	r19
    10c4:	2f 91       	pop	r18
    10c6:	0f 90       	pop	r0
    10c8:	0b be       	out	0x3b, r0	; 59
    10ca:	0f 90       	pop	r0
    10cc:	0f be       	out	0x3f, r0	; 63
    10ce:	0f 90       	pop	r0
    10d0:	1f 90       	pop	r1
    10d2:	18 95       	reti

000010d4 <__vector_10>:
    10d4:	1f 92       	push	r1
    10d6:	0f 92       	push	r0
    10d8:	0f b6       	in	r0, 0x3f	; 63
    10da:	0f 92       	push	r0
    10dc:	11 24       	eor	r1, r1
    10de:	0b b6       	in	r0, 0x3b	; 59
    10e0:	0f 92       	push	r0
    10e2:	2f 93       	push	r18
    10e4:	3f 93       	push	r19
    10e6:	4f 93       	push	r20
    10e8:	5f 93       	push	r21
    10ea:	6f 93       	push	r22
    10ec:	7f 93       	push	r23
    10ee:	8f 93       	push	r24
    10f0:	9f 93       	push	r25
    10f2:	af 93       	push	r26
    10f4:	bf 93       	push	r27
    10f6:	ef 93       	push	r30
    10f8:	ff 93       	push	r31
    10fa:	e0 91 96 01 	lds	r30, 0x0196	; 0x800196 <p_timer2Callbacks+0x4>
    10fe:	f0 91 97 01 	lds	r31, 0x0197	; 0x800197 <p_timer2Callbacks+0x5>
    1102:	09 95       	icall
    1104:	ff 91       	pop	r31
    1106:	ef 91       	pop	r30
    1108:	bf 91       	pop	r27
    110a:	af 91       	pop	r26
    110c:	9f 91       	pop	r25
    110e:	8f 91       	pop	r24
    1110:	7f 91       	pop	r23
    1112:	6f 91       	pop	r22
    1114:	5f 91       	pop	r21
    1116:	4f 91       	pop	r20
    1118:	3f 91       	pop	r19
    111a:	2f 91       	pop	r18
    111c:	0f 90       	pop	r0
    111e:	0b be       	out	0x3b, r0	; 59
    1120:	0f 90       	pop	r0
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	0f 90       	pop	r0
    1126:	1f 90       	pop	r1
    1128:	18 95       	reti

0000112a <timer_init>:
    112a:	ef 92       	push	r14
    112c:	ff 92       	push	r15
    112e:	0f 93       	push	r16
    1130:	1f 93       	push	r17
    1132:	cf 93       	push	r28
    1134:	df 93       	push	r29
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	29 97       	sbiw	r28, 0x09	; 9
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61
    1146:	4d 83       	std	Y+5, r20	; 0x05
    1148:	5e 83       	std	Y+6, r21	; 0x06
    114a:	6f 83       	std	Y+7, r22	; 0x07
    114c:	78 87       	std	Y+8, r23	; 0x08
    114e:	89 87       	std	Y+9, r24	; 0x09
    1150:	0e 81       	ldd	r16, Y+6	; 0x06
    1152:	1f 81       	ldd	r17, Y+7	; 0x07
    1154:	28 85       	ldd	r18, Y+8	; 0x08
    1156:	39 85       	ldd	r19, Y+9	; 0x09
    1158:	19 82       	std	Y+1, r1	; 0x01
    115a:	1a 82       	std	Y+2, r1	; 0x02
    115c:	1b 82       	std	Y+3, r1	; 0x03
    115e:	1c 82       	std	Y+4, r1	; 0x04
    1160:	41 30       	cpi	r20, 0x01	; 1
    1162:	21 f0       	breq	.+8      	; 0x116c <timer_init+0x42>
    1164:	42 30       	cpi	r20, 0x02	; 2
    1166:	09 f4       	brne	.+2      	; 0x116a <timer_init+0x40>
    1168:	95 c0       	rjmp	.+298    	; 0x1294 <timer_init+0x16a>
    116a:	1e c1       	rjmp	.+572    	; 0x13a8 <timer_init+0x27e>
    116c:	09 3f       	cpi	r16, 0xF9	; 249
    116e:	8f ef       	ldi	r24, 0xFF	; 255
    1170:	18 07       	cpc	r17, r24
    1172:	28 07       	cpc	r18, r24
    1174:	31 05       	cpc	r19, r1
    1176:	28 f0       	brcs	.+10     	; 0x1182 <timer_init+0x58>
    1178:	09 83       	std	Y+1, r16	; 0x01
    117a:	1a 83       	std	Y+2, r17	; 0x02
    117c:	2b 83       	std	Y+3, r18	; 0x03
    117e:	3c 83       	std	Y+4, r19	; 0x04
    1180:	15 c0       	rjmp	.+42     	; 0x11ac <timer_init+0x82>
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	7c 01       	movw	r14, r24
    1188:	4d 81       	ldd	r20, Y+5	; 0x05
    118a:	5e 81       	ldd	r21, Y+6	; 0x06
    118c:	6f 81       	ldd	r22, Y+7	; 0x07
    118e:	78 85       	ldd	r23, Y+8	; 0x08
    1190:	89 85       	ldd	r24, Y+9	; 0x09
    1192:	b0 dc       	rcall	.-1696   	; 0xaf4 <calculateTopRegister>
    1194:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
    1198:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
    119c:	64 e0       	ldi	r22, 0x04	; 4
    119e:	81 e8       	ldi	r24, 0x81	; 129
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	2e db       	rcall	.-2468   	; 0x800 <setBit>
    11a4:	63 e0       	ldi	r22, 0x03	; 3
    11a6:	81 e8       	ldi	r24, 0x81	; 129
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	2a db       	rcall	.-2476   	; 0x800 <setBit>
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	9a 81       	ldd	r25, Y+2	; 0x02
    11b0:	ab 81       	ldd	r26, Y+3	; 0x03
    11b2:	bc 81       	ldd	r27, Y+4	; 0x04
    11b4:	8c 3f       	cpi	r24, 0xFC	; 252
    11b6:	2f ef       	ldi	r18, 0xFF	; 255
    11b8:	92 07       	cpc	r25, r18
    11ba:	a2 07       	cpc	r26, r18
    11bc:	b1 05       	cpc	r27, r1
    11be:	59 f1       	breq	.+86     	; 0x1216 <timer_init+0xec>
    11c0:	60 f4       	brcc	.+24     	; 0x11da <timer_init+0xb0>
    11c2:	89 3f       	cpi	r24, 0xF9	; 249
    11c4:	2f ef       	ldi	r18, 0xFF	; 255
    11c6:	92 07       	cpc	r25, r18
    11c8:	a2 07       	cpc	r26, r18
    11ca:	b1 05       	cpc	r27, r1
    11cc:	91 f0       	breq	.+36     	; 0x11f2 <timer_init+0xc8>
    11ce:	8a 3f       	cpi	r24, 0xFA	; 250
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	af 4f       	sbci	r26, 0xFF	; 255
    11d4:	b1 05       	cpc	r27, r1
    11d6:	b1 f0       	breq	.+44     	; 0x1204 <timer_init+0xda>
    11d8:	38 c0       	rjmp	.+112    	; 0x124a <timer_init+0x120>
    11da:	8e 3f       	cpi	r24, 0xFE	; 254
    11dc:	2f ef       	ldi	r18, 0xFF	; 255
    11de:	92 07       	cpc	r25, r18
    11e0:	a2 07       	cpc	r26, r18
    11e2:	b1 05       	cpc	r27, r1
    11e4:	09 f1       	breq	.+66     	; 0x1228 <timer_init+0xfe>
    11e6:	8f 3f       	cpi	r24, 0xFF	; 255
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	af 4f       	sbci	r26, 0xFF	; 255
    11ec:	b1 05       	cpc	r27, r1
    11ee:	29 f1       	breq	.+74     	; 0x123a <timer_init+0x110>
    11f0:	2c c0       	rjmp	.+88     	; 0x124a <timer_init+0x120>
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	89 83       	std	Y+1, r24	; 0x01
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	ab 83       	std	Y+3, r26	; 0x03
    1200:	bc 83       	std	Y+4, r27	; 0x04
    1202:	23 c0       	rjmp	.+70     	; 0x124a <timer_init+0x120>
    1204:	82 e0       	ldi	r24, 0x02	; 2
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	a0 e0       	ldi	r26, 0x00	; 0
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	9a 83       	std	Y+2, r25	; 0x02
    1210:	ab 83       	std	Y+3, r26	; 0x03
    1212:	bc 83       	std	Y+4, r27	; 0x04
    1214:	1a c0       	rjmp	.+52     	; 0x124a <timer_init+0x120>
    1216:	83 e0       	ldi	r24, 0x03	; 3
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	a0 e0       	ldi	r26, 0x00	; 0
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	9a 83       	std	Y+2, r25	; 0x02
    1222:	ab 83       	std	Y+3, r26	; 0x03
    1224:	bc 83       	std	Y+4, r27	; 0x04
    1226:	11 c0       	rjmp	.+34     	; 0x124a <timer_init+0x120>
    1228:	84 e0       	ldi	r24, 0x04	; 4
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	a0 e0       	ldi	r26, 0x00	; 0
    122e:	b0 e0       	ldi	r27, 0x00	; 0
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	9a 83       	std	Y+2, r25	; 0x02
    1234:	ab 83       	std	Y+3, r26	; 0x03
    1236:	bc 83       	std	Y+4, r27	; 0x04
    1238:	08 c0       	rjmp	.+16     	; 0x124a <timer_init+0x120>
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	a0 e0       	ldi	r26, 0x00	; 0
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	9a 83       	std	Y+2, r25	; 0x02
    1246:	ab 83       	std	Y+3, r26	; 0x03
    1248:	bc 83       	std	Y+4, r27	; 0x04
    124a:	49 81       	ldd	r20, Y+1	; 0x01
    124c:	5a 81       	ldd	r21, Y+2	; 0x02
    124e:	6b 81       	ldd	r22, Y+3	; 0x03
    1250:	7c 81       	ldd	r23, Y+4	; 0x04
    1252:	76 95       	lsr	r23
    1254:	67 95       	ror	r22
    1256:	57 95       	ror	r21
    1258:	47 95       	ror	r20
    125a:	76 95       	lsr	r23
    125c:	67 95       	ror	r22
    125e:	57 95       	ror	r21
    1260:	47 95       	ror	r20
    1262:	41 70       	andi	r20, 0x01	; 1
    1264:	62 e0       	ldi	r22, 0x02	; 2
    1266:	80 e9       	ldi	r24, 0x90	; 144
    1268:	91 e0       	ldi	r25, 0x01	; 1
    126a:	b2 da       	rcall	.-2716   	; 0x7d0 <updateBit>
    126c:	49 81       	ldd	r20, Y+1	; 0x01
    126e:	5a 81       	ldd	r21, Y+2	; 0x02
    1270:	6b 81       	ldd	r22, Y+3	; 0x03
    1272:	7c 81       	ldd	r23, Y+4	; 0x04
    1274:	76 95       	lsr	r23
    1276:	67 95       	ror	r22
    1278:	57 95       	ror	r21
    127a:	47 95       	ror	r20
    127c:	41 70       	andi	r20, 0x01	; 1
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	80 e9       	ldi	r24, 0x90	; 144
    1282:	91 e0       	ldi	r25, 0x01	; 1
    1284:	a5 da       	rcall	.-2742   	; 0x7d0 <updateBit>
    1286:	49 81       	ldd	r20, Y+1	; 0x01
    1288:	41 70       	andi	r20, 0x01	; 1
    128a:	60 e0       	ldi	r22, 0x00	; 0
    128c:	80 e9       	ldi	r24, 0x90	; 144
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	9f da       	rcall	.-2754   	; 0x7d0 <updateBit>
    1292:	8a c0       	rjmp	.+276    	; 0x13a8 <timer_init+0x27e>
    1294:	09 3f       	cpi	r16, 0xF9	; 249
    1296:	8f ef       	ldi	r24, 0xFF	; 255
    1298:	18 07       	cpc	r17, r24
    129a:	28 07       	cpc	r18, r24
    129c:	31 05       	cpc	r19, r1
    129e:	28 f0       	brcs	.+10     	; 0x12aa <timer_init+0x180>
    12a0:	09 83       	std	Y+1, r16	; 0x01
    12a2:	1a 83       	std	Y+2, r17	; 0x02
    12a4:	2b 83       	std	Y+3, r18	; 0x03
    12a6:	3c 83       	std	Y+4, r19	; 0x04
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <timer_init+0x19e>
    12aa:	ce 01       	movw	r24, r28
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	7c 01       	movw	r14, r24
    12b0:	4d 81       	ldd	r20, Y+5	; 0x05
    12b2:	5e 81       	ldd	r21, Y+6	; 0x06
    12b4:	6f 81       	ldd	r22, Y+7	; 0x07
    12b6:	78 85       	ldd	r23, Y+8	; 0x08
    12b8:	89 85       	ldd	r24, Y+9	; 0x09
    12ba:	1c dc       	rcall	.-1992   	; 0xaf4 <calculateTopRegister>
    12bc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	80 eb       	ldi	r24, 0xB0	; 176
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	9c da       	rcall	.-2760   	; 0x800 <setBit>
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	9a 81       	ldd	r25, Y+2	; 0x02
    12cc:	ab 81       	ldd	r26, Y+3	; 0x03
    12ce:	bc 81       	ldd	r27, Y+4	; 0x04
    12d0:	fc 01       	movw	r30, r24
    12d2:	37 96       	adiw	r30, 0x07	; 7
    12d4:	e7 30       	cpi	r30, 0x07	; 7
    12d6:	f1 05       	cpc	r31, r1
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <timer_init+0x1b2>
    12da:	42 c0       	rjmp	.+132    	; 0x1360 <timer_init+0x236>
    12dc:	ea 5b       	subi	r30, 0xBA	; 186
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <__tablejump2__>
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	a0 e0       	ldi	r26, 0x00	; 0
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	89 83       	std	Y+1, r24	; 0x01
    12ee:	9a 83       	std	Y+2, r25	; 0x02
    12f0:	ab 83       	std	Y+3, r26	; 0x03
    12f2:	bc 83       	std	Y+4, r27	; 0x04
    12f4:	35 c0       	rjmp	.+106    	; 0x1360 <timer_init+0x236>
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	a0 e0       	ldi	r26, 0x00	; 0
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	9a 83       	std	Y+2, r25	; 0x02
    1302:	ab 83       	std	Y+3, r26	; 0x03
    1304:	bc 83       	std	Y+4, r27	; 0x04
    1306:	2c c0       	rjmp	.+88     	; 0x1360 <timer_init+0x236>
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	a0 e0       	ldi	r26, 0x00	; 0
    130e:	b0 e0       	ldi	r27, 0x00	; 0
    1310:	89 83       	std	Y+1, r24	; 0x01
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	ab 83       	std	Y+3, r26	; 0x03
    1316:	bc 83       	std	Y+4, r27	; 0x04
    1318:	23 c0       	rjmp	.+70     	; 0x1360 <timer_init+0x236>
    131a:	84 e0       	ldi	r24, 0x04	; 4
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	a0 e0       	ldi	r26, 0x00	; 0
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	89 83       	std	Y+1, r24	; 0x01
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	ab 83       	std	Y+3, r26	; 0x03
    1328:	bc 83       	std	Y+4, r27	; 0x04
    132a:	1a c0       	rjmp	.+52     	; 0x1360 <timer_init+0x236>
    132c:	85 e0       	ldi	r24, 0x05	; 5
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	89 83       	std	Y+1, r24	; 0x01
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	ab 83       	std	Y+3, r26	; 0x03
    133a:	bc 83       	std	Y+4, r27	; 0x04
    133c:	11 c0       	rjmp	.+34     	; 0x1360 <timer_init+0x236>
    133e:	86 e0       	ldi	r24, 0x06	; 6
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	89 83       	std	Y+1, r24	; 0x01
    1348:	9a 83       	std	Y+2, r25	; 0x02
    134a:	ab 83       	std	Y+3, r26	; 0x03
    134c:	bc 83       	std	Y+4, r27	; 0x04
    134e:	08 c0       	rjmp	.+16     	; 0x1360 <timer_init+0x236>
    1350:	87 e0       	ldi	r24, 0x07	; 7
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	9a 83       	std	Y+2, r25	; 0x02
    135c:	ab 83       	std	Y+3, r26	; 0x03
    135e:	bc 83       	std	Y+4, r27	; 0x04
    1360:	49 81       	ldd	r20, Y+1	; 0x01
    1362:	5a 81       	ldd	r21, Y+2	; 0x02
    1364:	6b 81       	ldd	r22, Y+3	; 0x03
    1366:	7c 81       	ldd	r23, Y+4	; 0x04
    1368:	76 95       	lsr	r23
    136a:	67 95       	ror	r22
    136c:	57 95       	ror	r21
    136e:	47 95       	ror	r20
    1370:	76 95       	lsr	r23
    1372:	67 95       	ror	r22
    1374:	57 95       	ror	r21
    1376:	47 95       	ror	r20
    1378:	41 70       	andi	r20, 0x01	; 1
    137a:	62 e0       	ldi	r22, 0x02	; 2
    137c:	81 e9       	ldi	r24, 0x91	; 145
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	27 da       	rcall	.-2994   	; 0x7d0 <updateBit>
    1382:	49 81       	ldd	r20, Y+1	; 0x01
    1384:	5a 81       	ldd	r21, Y+2	; 0x02
    1386:	6b 81       	ldd	r22, Y+3	; 0x03
    1388:	7c 81       	ldd	r23, Y+4	; 0x04
    138a:	76 95       	lsr	r23
    138c:	67 95       	ror	r22
    138e:	57 95       	ror	r21
    1390:	47 95       	ror	r20
    1392:	41 70       	andi	r20, 0x01	; 1
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	81 e9       	ldi	r24, 0x91	; 145
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	1a da       	rcall	.-3020   	; 0x7d0 <updateBit>
    139c:	49 81       	ldd	r20, Y+1	; 0x01
    139e:	41 70       	andi	r20, 0x01	; 1
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	81 e9       	ldi	r24, 0x91	; 145
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	14 da       	rcall	.-3032   	; 0x7d0 <updateBit>
    13a8:	29 96       	adiw	r28, 0x09	; 9
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	f8 94       	cli
    13ae:	de bf       	out	0x3e, r29	; 62
    13b0:	0f be       	out	0x3f, r0	; 63
    13b2:	cd bf       	out	0x3d, r28	; 61
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	ff 90       	pop	r15
    13be:	ef 90       	pop	r14
    13c0:	08 95       	ret

000013c2 <timer_start>:
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <timer_start+0x6>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <timer_start+0x8>
    13ca:	1f 92       	push	r1
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	41 30       	cpi	r20, 0x01	; 1
    13d2:	19 f0       	breq	.+6      	; 0x13da <timer_start+0x18>
    13d4:	42 30       	cpi	r20, 0x02	; 2
    13d6:	d1 f0       	breq	.+52     	; 0x140c <timer_start+0x4a>
    13d8:	31 c0       	rjmp	.+98     	; 0x143c <timer_start+0x7a>
    13da:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <u8_timer1ClockSource>
    13de:	42 fb       	bst	r20, 2
    13e0:	44 27       	eor	r20, r20
    13e2:	40 f9       	bld	r20, 0
    13e4:	62 e0       	ldi	r22, 0x02	; 2
    13e6:	81 e8       	ldi	r24, 0x81	; 129
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	f2 d9       	rcall	.-3100   	; 0x7d0 <updateBit>
    13ec:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <u8_timer1ClockSource>
    13f0:	46 95       	lsr	r20
    13f2:	41 70       	andi	r20, 0x01	; 1
    13f4:	61 e0       	ldi	r22, 0x01	; 1
    13f6:	81 e8       	ldi	r24, 0x81	; 129
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	ea d9       	rcall	.-3116   	; 0x7d0 <updateBit>
    13fc:	40 91 90 01 	lds	r20, 0x0190	; 0x800190 <u8_timer1ClockSource>
    1400:	41 70       	andi	r20, 0x01	; 1
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	81 e8       	ldi	r24, 0x81	; 129
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	e3 d9       	rcall	.-3130   	; 0x7d0 <updateBit>
    140a:	18 c0       	rjmp	.+48     	; 0x143c <timer_start+0x7a>
    140c:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <u8_timer2ClockSource>
    1410:	42 fb       	bst	r20, 2
    1412:	44 27       	eor	r20, r20
    1414:	40 f9       	bld	r20, 0
    1416:	62 e0       	ldi	r22, 0x02	; 2
    1418:	81 eb       	ldi	r24, 0xB1	; 177
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	d9 d9       	rcall	.-3150   	; 0x7d0 <updateBit>
    141e:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <u8_timer2ClockSource>
    1422:	46 95       	lsr	r20
    1424:	41 70       	andi	r20, 0x01	; 1
    1426:	61 e0       	ldi	r22, 0x01	; 1
    1428:	81 eb       	ldi	r24, 0xB1	; 177
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	d1 d9       	rcall	.-3166   	; 0x7d0 <updateBit>
    142e:	40 91 91 01 	lds	r20, 0x0191	; 0x800191 <u8_timer2ClockSource>
    1432:	41 70       	andi	r20, 0x01	; 1
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	81 eb       	ldi	r24, 0xB1	; 177
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	ca d9       	rcall	.-3180   	; 0x7d0 <updateBit>
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	08 95       	ret

0000144c <timer_enableInterrupt>:
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	00 d0       	rcall	.+0      	; 0x145e <timer_enableInterrupt+0x12>
    145e:	00 d0       	rcall	.+0      	; 0x1460 <timer_enableInterrupt+0x14>
    1460:	1f 92       	push	r1
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	49 83       	std	Y+1, r20	; 0x01
    1468:	5a 83       	std	Y+2, r21	; 0x02
    146a:	6b 83       	std	Y+3, r22	; 0x03
    146c:	7c 83       	std	Y+4, r23	; 0x04
    146e:	8d 83       	std	Y+5, r24	; 0x05
    1470:	02 2f       	mov	r16, r18
    1472:	41 30       	cpi	r20, 0x01	; 1
    1474:	21 f0       	breq	.+8      	; 0x147e <timer_enableInterrupt+0x32>
    1476:	42 30       	cpi	r20, 0x02	; 2
    1478:	09 f4       	brne	.+2      	; 0x147c <timer_enableInterrupt+0x30>
    147a:	5e c0       	rjmp	.+188    	; 0x1538 <timer_enableInterrupt+0xec>
    147c:	95 c0       	rjmp	.+298    	; 0x15a8 <timer_enableInterrupt+0x15c>
    147e:	0f 2e       	mov	r0, r31
    1480:	f1 e8       	ldi	r31, 0x81	; 129
    1482:	ef 2e       	mov	r14, r31
    1484:	f1 2c       	mov	r15, r1
    1486:	f0 2d       	mov	r31, r0
    1488:	f7 01       	movw	r30, r14
    148a:	80 81       	ld	r24, Z
    148c:	64 e0       	ldi	r22, 0x04	; 4
    148e:	d1 d9       	rcall	.-3166   	; 0x832 <checkBit>
    1490:	18 2f       	mov	r17, r24
    1492:	f7 01       	movw	r30, r14
    1494:	80 81       	ld	r24, Z
    1496:	63 e0       	ldi	r22, 0x03	; 3
    1498:	cc d9       	rcall	.-3176   	; 0x832 <checkBit>
    149a:	11 0f       	add	r17, r17
    149c:	11 0f       	add	r17, r17
    149e:	11 0f       	add	r17, r17
    14a0:	f4 e0       	ldi	r31, 0x04	; 4
    14a2:	8f 9f       	mul	r24, r31
    14a4:	c0 01       	movw	r24, r0
    14a6:	11 24       	eor	r1, r1
    14a8:	18 2b       	or	r17, r24
    14aa:	68 94       	set
    14ac:	cc 24       	eor	r12, r12
    14ae:	c7 f8       	bld	r12, 7
    14b0:	d1 2c       	mov	r13, r1
    14b2:	f6 01       	movw	r30, r12
    14b4:	80 81       	ld	r24, Z
    14b6:	61 e0       	ldi	r22, 0x01	; 1
    14b8:	bc d9       	rcall	.-3208   	; 0x832 <checkBit>
    14ba:	f8 2e       	mov	r15, r24
    14bc:	f6 01       	movw	r30, r12
    14be:	80 81       	ld	r24, Z
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	b7 d9       	rcall	.-3218   	; 0x832 <checkBit>
    14c4:	ff 0c       	add	r15, r15
    14c6:	81 2b       	or	r24, r17
    14c8:	8f 29       	or	r24, r15
    14ca:	01 30       	cpi	r16, 0x01	; 1
    14cc:	d9 f0       	breq	.+54     	; 0x1504 <timer_enableInterrupt+0xb8>
    14ce:	28 f0       	brcs	.+10     	; 0x14da <timer_enableInterrupt+0x8e>
    14d0:	02 30       	cpi	r16, 0x02	; 2
    14d2:	21 f1       	breq	.+72     	; 0x151c <timer_enableInterrupt+0xd0>
    14d4:	03 30       	cpi	r16, 0x03	; 3
    14d6:	39 f1       	breq	.+78     	; 0x1526 <timer_enableInterrupt+0xda>
    14d8:	67 c0       	rjmp	.+206    	; 0x15a8 <timer_enableInterrupt+0x15c>
    14da:	88 30       	cpi	r24, 0x08	; 8
    14dc:	38 f4       	brcc	.+14     	; 0x14ec <timer_enableInterrupt+0xa0>
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	61 f0       	breq	.+24     	; 0x14fa <timer_enableInterrupt+0xae>
    14e2:	60 e0       	ldi	r22, 0x00	; 0
    14e4:	8f e6       	ldi	r24, 0x6F	; 111
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	8b d9       	rcall	.-3306   	; 0x800 <setBit>
    14ea:	5e c0       	rjmp	.+188    	; 0x15a8 <timer_enableInterrupt+0x15c>
    14ec:	80 fd       	sbrc	r24, 0
    14ee:	05 c0       	rjmp	.+10     	; 0x14fa <timer_enableInterrupt+0xae>
    14f0:	65 e0       	ldi	r22, 0x05	; 5
    14f2:	8f e6       	ldi	r24, 0x6F	; 111
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	84 d9       	rcall	.-3320   	; 0x800 <setBit>
    14f8:	57 c0       	rjmp	.+174    	; 0x15a8 <timer_enableInterrupt+0x15c>
    14fa:	61 e0       	ldi	r22, 0x01	; 1
    14fc:	8f e6       	ldi	r24, 0x6F	; 111
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	7f d9       	rcall	.-3330   	; 0x800 <setBit>
    1502:	52 c0       	rjmp	.+164    	; 0x15a8 <timer_enableInterrupt+0x15c>
    1504:	88 30       	cpi	r24, 0x08	; 8
    1506:	18 f4       	brcc	.+6      	; 0x150e <timer_enableInterrupt+0xc2>
    1508:	84 30       	cpi	r24, 0x04	; 4
    150a:	19 f4       	brne	.+6      	; 0x1512 <timer_enableInterrupt+0xc6>
    150c:	4d c0       	rjmp	.+154    	; 0x15a8 <timer_enableInterrupt+0x15c>
    150e:	80 fd       	sbrc	r24, 0
    1510:	4b c0       	rjmp	.+150    	; 0x15a8 <timer_enableInterrupt+0x15c>
    1512:	61 e0       	ldi	r22, 0x01	; 1
    1514:	8f e6       	ldi	r24, 0x6F	; 111
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	73 d9       	rcall	.-3354   	; 0x800 <setBit>
    151a:	46 c0       	rjmp	.+140    	; 0x15a8 <timer_enableInterrupt+0x15c>
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	8f e6       	ldi	r24, 0x6F	; 111
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	6e d9       	rcall	.-3364   	; 0x800 <setBit>
    1524:	41 c0       	rjmp	.+130    	; 0x15a8 <timer_enableInterrupt+0x15c>
    1526:	88 30       	cpi	r24, 0x08	; 8
    1528:	10 f0       	brcs	.+4      	; 0x152e <timer_enableInterrupt+0xe2>
    152a:	80 ff       	sbrs	r24, 0
    152c:	3d c0       	rjmp	.+122    	; 0x15a8 <timer_enableInterrupt+0x15c>
    152e:	65 e0       	ldi	r22, 0x05	; 5
    1530:	8f e6       	ldi	r24, 0x6F	; 111
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	65 d9       	rcall	.-3382   	; 0x800 <setBit>
    1536:	38 c0       	rjmp	.+112    	; 0x15a8 <timer_enableInterrupt+0x15c>
    1538:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    153c:	63 e0       	ldi	r22, 0x03	; 3
    153e:	79 d9       	rcall	.-3342   	; 0x832 <checkBit>
    1540:	18 2f       	mov	r17, r24
    1542:	0f 2e       	mov	r0, r31
    1544:	f0 eb       	ldi	r31, 0xB0	; 176
    1546:	ef 2e       	mov	r14, r31
    1548:	f1 2c       	mov	r15, r1
    154a:	f0 2d       	mov	r31, r0
    154c:	f7 01       	movw	r30, r14
    154e:	80 81       	ld	r24, Z
    1550:	61 e0       	ldi	r22, 0x01	; 1
    1552:	6f d9       	rcall	.-3362   	; 0x832 <checkBit>
    1554:	11 0f       	add	r17, r17
    1556:	11 0f       	add	r17, r17
    1558:	88 0f       	add	r24, r24
    155a:	18 2b       	or	r17, r24
    155c:	f7 01       	movw	r30, r14
    155e:	80 81       	ld	r24, Z
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	67 d9       	rcall	.-3378   	; 0x832 <checkBit>
    1564:	81 2b       	or	r24, r17
    1566:	01 30       	cpi	r16, 0x01	; 1
    1568:	91 f0       	breq	.+36     	; 0x158e <timer_enableInterrupt+0x142>
    156a:	18 f0       	brcs	.+6      	; 0x1572 <timer_enableInterrupt+0x126>
    156c:	02 30       	cpi	r16, 0x02	; 2
    156e:	c1 f0       	breq	.+48     	; 0x15a0 <timer_enableInterrupt+0x154>
    1570:	1b c0       	rjmp	.+54     	; 0x15a8 <timer_enableInterrupt+0x15c>
    1572:	84 30       	cpi	r24, 0x04	; 4
    1574:	38 f4       	brcc	.+14     	; 0x1584 <timer_enableInterrupt+0x138>
    1576:	82 30       	cpi	r24, 0x02	; 2
    1578:	29 f0       	breq	.+10     	; 0x1584 <timer_enableInterrupt+0x138>
    157a:	60 e0       	ldi	r22, 0x00	; 0
    157c:	80 e7       	ldi	r24, 0x70	; 112
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	3f d9       	rcall	.-3458   	; 0x800 <setBit>
    1582:	12 c0       	rjmp	.+36     	; 0x15a8 <timer_enableInterrupt+0x15c>
    1584:	61 e0       	ldi	r22, 0x01	; 1
    1586:	80 e7       	ldi	r24, 0x70	; 112
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	3a d9       	rcall	.-3468   	; 0x800 <setBit>
    158c:	0d c0       	rjmp	.+26     	; 0x15a8 <timer_enableInterrupt+0x15c>
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	58 f4       	brcc	.+22     	; 0x15a8 <timer_enableInterrupt+0x15c>
    1592:	82 30       	cpi	r24, 0x02	; 2
    1594:	49 f0       	breq	.+18     	; 0x15a8 <timer_enableInterrupt+0x15c>
    1596:	61 e0       	ldi	r22, 0x01	; 1
    1598:	80 e7       	ldi	r24, 0x70	; 112
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	31 d9       	rcall	.-3486   	; 0x800 <setBit>
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <timer_enableInterrupt+0x15c>
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	80 e7       	ldi	r24, 0x70	; 112
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	2c d9       	rcall	.-3496   	; 0x800 <setBit>
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	df 91       	pop	r29
    15b4:	cf 91       	pop	r28
    15b6:	1f 91       	pop	r17
    15b8:	0f 91       	pop	r16
    15ba:	ff 90       	pop	r15
    15bc:	ef 90       	pop	r14
    15be:	df 90       	pop	r13
    15c0:	cf 90       	pop	r12
    15c2:	08 95       	ret

000015c4 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    15c4:	0f 93       	push	r16
    15c6:	1f 93       	push	r17
    15c8:	cf 93       	push	r28
    15ca:	df 93       	push	r29
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <timer_attachInterrupt+0xa>
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <timer_attachInterrupt+0xc>
    15d0:	1f 92       	push	r1
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    15d6:	41 30       	cpi	r20, 0x01	; 1
    15d8:	19 f0       	breq	.+6      	; 0x15e0 <timer_attachInterrupt+0x1c>
    15da:	42 30       	cpi	r20, 0x02	; 2
    15dc:	51 f0       	breq	.+20     	; 0x15f2 <timer_attachInterrupt+0x2e>
    15de:	11 c0       	rjmp	.+34     	; 0x1602 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    15e0:	e2 2f       	mov	r30, r18
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	ee 0f       	add	r30, r30
    15e6:	ff 1f       	adc	r31, r31
    15e8:	e8 57       	subi	r30, 0x78	; 120
    15ea:	fe 4f       	sbci	r31, 0xFE	; 254
    15ec:	11 83       	std	Z+1, r17	; 0x01
    15ee:	00 83       	st	Z, r16
		#endif
			break;
    15f0:	08 c0       	rjmp	.+16     	; 0x1602 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    15f2:	e2 2f       	mov	r30, r18
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	ee 0f       	add	r30, r30
    15f8:	ff 1f       	adc	r31, r31
    15fa:	ee 56       	subi	r30, 0x6E	; 110
    15fc:	fe 4f       	sbci	r31, 0xFE	; 254
    15fe:	11 83       	std	Z+1, r17	; 0x01
    1600:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	08 95       	ret

00001616 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    1616:	4f 92       	push	r4
    1618:	5f 92       	push	r5
    161a:	6f 92       	push	r6
    161c:	7f 92       	push	r7
    161e:	8f 92       	push	r8
    1620:	9f 92       	push	r9
    1622:	af 92       	push	r10
    1624:	bf 92       	push	r11
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	4b 01       	movw	r8, r22
    1634:	5c 01       	movw	r10, r24
    1636:	ea 01       	movw	r28, r20
    1638:	0f 2e       	mov	r0, r31
    163a:	f0 e2       	ldi	r31, 0x20	; 32
    163c:	4f 2e       	mov	r4, r31
    163e:	f1 ea       	ldi	r31, 0xA1	; 161
    1640:	5f 2e       	mov	r5, r31
    1642:	f7 e0       	ldi	r31, 0x07	; 7
    1644:	6f 2e       	mov	r6, r31
    1646:	71 2c       	mov	r7, r1
    1648:	f0 2d       	mov	r31, r0
    164a:	c3 01       	movw	r24, r6
    164c:	b2 01       	movw	r22, r4
    164e:	a5 01       	movw	r20, r10
    1650:	94 01       	movw	r18, r8
    1652:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
    1656:	69 01       	movw	r12, r18
    1658:	7a 01       	movw	r14, r20
    165a:	c3 01       	movw	r24, r6
    165c:	b2 01       	movw	r22, r4
    165e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
    1662:	ca 01       	movw	r24, r20
    1664:	b9 01       	movw	r22, r18
    1666:	a5 01       	movw	r20, r10
    1668:	94 01       	movw	r18, r8
    166a:	eb d8       	rcall	.-3626   	; 0x842 <calculateError>
    166c:	44 97       	sbiw	r24, 0x14	; 20
    166e:	30 f4       	brcc	.+12     	; 0x167c <calculateUBRR+0x66>
    1670:	d7 01       	movw	r26, r14
    1672:	c6 01       	movw	r24, r12
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	a1 09       	sbc	r26, r1
    1678:	b1 09       	sbc	r27, r1
    167a:	0f c0       	rjmp	.+30     	; 0x169a <calculateUBRR+0x84>
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	88 83       	st	Y, r24
    1680:	60 e4       	ldi	r22, 0x40	; 64
    1682:	72 e4       	ldi	r23, 0x42	; 66
    1684:	8f e0       	ldi	r24, 0x0F	; 15
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	a5 01       	movw	r20, r10
    168a:	94 01       	movw	r18, r8
    168c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <__udivmodsi4>
    1690:	da 01       	movw	r26, r20
    1692:	c9 01       	movw	r24, r18
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	a1 09       	sbc	r26, r1
    1698:	b1 09       	sbc	r27, r1
    169a:	df 91       	pop	r29
    169c:	cf 91       	pop	r28
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	df 90       	pop	r13
    16a4:	cf 90       	pop	r12
    16a6:	bf 90       	pop	r11
    16a8:	af 90       	pop	r10
    16aa:	9f 90       	pop	r9
    16ac:	8f 90       	pop	r8
    16ae:	7f 90       	pop	r7
    16b0:	6f 90       	pop	r6
    16b2:	5f 90       	pop	r5
    16b4:	4f 90       	pop	r4
    16b6:	08 95       	ret

000016b8 <uart_init>:
    16b8:	0f 93       	push	r16
    16ba:	1f 93       	push	r17
    16bc:	cf 93       	push	r28
    16be:	df 93       	push	r29
    16c0:	cd b7       	in	r28, 0x3d	; 61
    16c2:	de b7       	in	r29, 0x3e	; 62
    16c4:	2b 97       	sbiw	r28, 0x0b	; 11
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	0a 83       	std	Y+2, r16	; 0x02
    16d2:	1b 83       	std	Y+3, r17	; 0x03
    16d4:	2c 83       	std	Y+4, r18	; 0x04
    16d6:	3d 83       	std	Y+5, r19	; 0x05
    16d8:	4e 83       	std	Y+6, r20	; 0x06
    16da:	5f 83       	std	Y+7, r21	; 0x07
    16dc:	68 87       	std	Y+8, r22	; 0x08
    16de:	79 87       	std	Y+9, r23	; 0x09
    16e0:	8a 87       	std	Y+10, r24	; 0x0a
    16e2:	9b 87       	std	Y+11, r25	; 0x0b
    16e4:	19 82       	std	Y+1, r1	; 0x01
    16e6:	01 11       	cpse	r16, r1
    16e8:	7d c0       	rjmp	.+250    	; 0x17e4 <uart_init+0x12c>
    16ea:	19 2f       	mov	r17, r25
    16ec:	e2 ec       	ldi	r30, 0xC2	; 194
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 73       	andi	r24, 0x3F	; 63
    16f4:	80 83       	st	Z, r24
    16f6:	6b 81       	ldd	r22, Y+3	; 0x03
    16f8:	7c 81       	ldd	r23, Y+4	; 0x04
    16fa:	8d 81       	ldd	r24, Y+5	; 0x05
    16fc:	9e 81       	ldd	r25, Y+6	; 0x06
    16fe:	ae 01       	movw	r20, r28
    1700:	4f 5f       	subi	r20, 0xFF	; 255
    1702:	5f 4f       	sbci	r21, 0xFF	; 255
    1704:	88 df       	rcall	.-240    	; 0x1616 <calculateUBRR>
    1706:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    170a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    170e:	49 81       	ldd	r20, Y+1	; 0x01
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	80 ec       	ldi	r24, 0xC0	; 192
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	5c d8       	rcall	.-3912   	; 0x7d0 <updateBit>
    1718:	89 85       	ldd	r24, Y+9	; 0x09
    171a:	82 30       	cpi	r24, 0x02	; 2
    171c:	31 f1       	breq	.+76     	; 0x176a <uart_init+0xb2>
    171e:	28 f4       	brcc	.+10     	; 0x172a <uart_init+0x72>
    1720:	88 23       	and	r24, r24
    1722:	49 f0       	breq	.+18     	; 0x1736 <uart_init+0x7e>
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	a1 f0       	breq	.+40     	; 0x1750 <uart_init+0x98>
    1728:	46 c0       	rjmp	.+140    	; 0x17b6 <uart_init+0xfe>
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	59 f1       	breq	.+86     	; 0x1784 <uart_init+0xcc>
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	09 f4       	brne	.+2      	; 0x1734 <uart_init+0x7c>
    1732:	35 c0       	rjmp	.+106    	; 0x179e <uart_init+0xe6>
    1734:	40 c0       	rjmp	.+128    	; 0x17b6 <uart_init+0xfe>
    1736:	61 e0       	ldi	r22, 0x01	; 1
    1738:	82 ec       	ldi	r24, 0xC2	; 194
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	6d d8       	rcall	.-3878   	; 0x818 <clearBit>
    173e:	62 e0       	ldi	r22, 0x02	; 2
    1740:	82 ec       	ldi	r24, 0xC2	; 194
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	69 d8       	rcall	.-3886   	; 0x818 <clearBit>
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	81 ec       	ldi	r24, 0xC1	; 193
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	65 d8       	rcall	.-3894   	; 0x818 <clearBit>
    174e:	33 c0       	rjmp	.+102    	; 0x17b6 <uart_init+0xfe>
    1750:	61 e0       	ldi	r22, 0x01	; 1
    1752:	82 ec       	ldi	r24, 0xC2	; 194
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	54 d8       	rcall	.-3928   	; 0x800 <setBit>
    1758:	62 e0       	ldi	r22, 0x02	; 2
    175a:	82 ec       	ldi	r24, 0xC2	; 194
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	5c d8       	rcall	.-3912   	; 0x818 <clearBit>
    1760:	62 e0       	ldi	r22, 0x02	; 2
    1762:	81 ec       	ldi	r24, 0xC1	; 193
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	58 d8       	rcall	.-3920   	; 0x818 <clearBit>
    1768:	26 c0       	rjmp	.+76     	; 0x17b6 <uart_init+0xfe>
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	82 ec       	ldi	r24, 0xC2	; 194
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	53 d8       	rcall	.-3930   	; 0x818 <clearBit>
    1772:	62 e0       	ldi	r22, 0x02	; 2
    1774:	82 ec       	ldi	r24, 0xC2	; 194
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	43 d8       	rcall	.-3962   	; 0x800 <setBit>
    177a:	62 e0       	ldi	r22, 0x02	; 2
    177c:	81 ec       	ldi	r24, 0xC1	; 193
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	4b d8       	rcall	.-3946   	; 0x818 <clearBit>
    1782:	19 c0       	rjmp	.+50     	; 0x17b6 <uart_init+0xfe>
    1784:	61 e0       	ldi	r22, 0x01	; 1
    1786:	82 ec       	ldi	r24, 0xC2	; 194
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	3a d8       	rcall	.-3980   	; 0x800 <setBit>
    178c:	62 e0       	ldi	r22, 0x02	; 2
    178e:	82 ec       	ldi	r24, 0xC2	; 194
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	36 d8       	rcall	.-3988   	; 0x800 <setBit>
    1794:	62 e0       	ldi	r22, 0x02	; 2
    1796:	81 ec       	ldi	r24, 0xC1	; 193
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	3e d8       	rcall	.-3972   	; 0x818 <clearBit>
    179c:	0c c0       	rjmp	.+24     	; 0x17b6 <uart_init+0xfe>
    179e:	61 e0       	ldi	r22, 0x01	; 1
    17a0:	82 ec       	ldi	r24, 0xC2	; 194
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	2d d8       	rcall	.-4006   	; 0x800 <setBit>
    17a6:	62 e0       	ldi	r22, 0x02	; 2
    17a8:	82 ec       	ldi	r24, 0xC2	; 194
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	29 d8       	rcall	.-4014   	; 0x800 <setBit>
    17ae:	62 e0       	ldi	r22, 0x02	; 2
    17b0:	81 ec       	ldi	r24, 0xC1	; 193
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	25 d8       	rcall	.-4022   	; 0x800 <setBit>
    17b6:	4a 85       	ldd	r20, Y+10	; 0x0a
    17b8:	63 e0       	ldi	r22, 0x03	; 3
    17ba:	82 ec       	ldi	r24, 0xC2	; 194
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	08 d8       	rcall	.-4080   	; 0x7d0 <updateBit>
    17c0:	12 30       	cpi	r17, 0x02	; 2
    17c2:	31 f4       	brne	.+12     	; 0x17d0 <uart_init+0x118>
    17c4:	e2 ec       	ldi	r30, 0xC2	; 194
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8f 7c       	andi	r24, 0xCF	; 207
    17cc:	80 83       	st	Z, r24
    17ce:	0a c0       	rjmp	.+20     	; 0x17e4 <uart_init+0x12c>
    17d0:	65 e0       	ldi	r22, 0x05	; 5
    17d2:	82 ec       	ldi	r24, 0xC2	; 194
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	14 d8       	rcall	.-4056   	; 0x800 <setBit>
    17d8:	41 2f       	mov	r20, r17
    17da:	64 e0       	ldi	r22, 0x04	; 4
    17dc:	82 ec       	ldi	r24, 0xC2	; 194
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateBit>
    17e4:	2b 96       	adiw	r28, 0x0b	; 11
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	1f 91       	pop	r17
    17f6:	0f 91       	pop	r16
    17f8:	08 95       	ret

000017fa <uart_start>:
    17fa:	0f 93       	push	r16
    17fc:	1f 93       	push	r17
    17fe:	cf 93       	push	r28
    1800:	df 93       	push	r29
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	2a 97       	sbiw	r28, 0x0a	; 10
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	6f 83       	std	Y+7, r22	; 0x07
    1814:	01 11       	cpse	r16, r1
    1816:	0c c0       	rjmp	.+24     	; 0x1830 <uart_start+0x36>
    1818:	45 2f       	mov	r20, r21
    181a:	64 e0       	ldi	r22, 0x04	; 4
    181c:	81 ec       	ldi	r24, 0xC1	; 193
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateBit>
    1824:	4f 81       	ldd	r20, Y+7	; 0x07
    1826:	63 e0       	ldi	r22, 0x03	; 3
    1828:	81 ec       	ldi	r24, 0xC1	; 193
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateBit>
    1830:	2a 96       	adiw	r28, 0x0a	; 10
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	1f 91       	pop	r17
    1842:	0f 91       	pop	r16
    1844:	08 95       	ret

00001846 <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    1846:	ef 92       	push	r14
    1848:	ff 92       	push	r15
    184a:	0f 93       	push	r16
    184c:	1f 93       	push	r17
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	cd b7       	in	r28, 0x3d	; 61
    1854:	de b7       	in	r29, 0x3e	; 62
    1856:	2a 97       	sbiw	r28, 0x0a	; 10
    1858:	0f b6       	in	r0, 0x3f	; 63
    185a:	f8 94       	cli
    185c:	de bf       	out	0x3e, r29	; 62
    185e:	0f be       	out	0x3f, r0	; 63
    1860:	cd bf       	out	0x3d, r28	; 61
    1862:	09 83       	std	Y+1, r16	; 0x01
    1864:	1a 83       	std	Y+2, r17	; 0x02
    1866:	2b 83       	std	Y+3, r18	; 0x03
    1868:	3c 83       	std	Y+4, r19	; 0x04
    186a:	4d 83       	std	Y+5, r20	; 0x05
    186c:	5e 83       	std	Y+6, r21	; 0x06
    186e:	6f 83       	std	Y+7, r22	; 0x07
    1870:	78 87       	std	Y+8, r23	; 0x08
    1872:	89 87       	std	Y+9, r24	; 0x09
    1874:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    1876:	01 11       	cpse	r16, r1
    1878:	15 c0       	rjmp	.+42     	; 0x18a4 <uart_transmit+0x5e>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    187a:	00 ec       	ldi	r16, 0xC0	; 192
    187c:	10 e0       	ldi	r17, 0x00	; 0
    187e:	f8 01       	movw	r30, r16
    1880:	80 81       	ld	r24, Z
    1882:	65 e0       	ldi	r22, 0x05	; 5
    1884:	0e 94 19 04 	call	0x832	; 0x832 <checkBit>
    1888:	88 23       	and	r24, r24
    188a:	c9 f3       	breq	.-14     	; 0x187e <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
    188c:	88 85       	ldd	r24, Y+8	; 0x08
    188e:	84 30       	cpi	r24, 0x04	; 4
    1890:	39 f4       	brne	.+14     	; 0x18a0 <uart_transmit+0x5a>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
    1892:	4f 2d       	mov	r20, r15
    1894:	41 70       	andi	r20, 0x01	; 1
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	81 ec       	ldi	r24, 0xC1	; 193
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <updateBit>
			UDR0 = (u8) u16_data;
    18a0:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    18a4:	2a 96       	adiw	r28, 0x0a	; 10
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	08 95       	ret

000018be <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    18be:	1f 92       	push	r1
    18c0:	0f 92       	push	r0
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	0f 92       	push	r0
    18c6:	11 24       	eor	r1, r1
    18c8:	0b b6       	in	r0, 0x3b	; 59
    18ca:	0f 92       	push	r0
    18cc:	2f 93       	push	r18
    18ce:	3f 93       	push	r19
    18d0:	4f 93       	push	r20
    18d2:	5f 93       	push	r21
    18d4:	6f 93       	push	r22
    18d6:	7f 93       	push	r23
    18d8:	8f 93       	push	r24
    18da:	9f 93       	push	r25
    18dc:	af 93       	push	r26
    18de:	bf 93       	push	r27
    18e0:	ef 93       	push	r30
    18e2:	ff 93       	push	r31
	p_wdgCallback();
    18e4:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <p_wdgCallback>
    18e8:	f0 91 99 01 	lds	r31, 0x0199	; 0x800199 <p_wdgCallback+0x1>
    18ec:	09 95       	icall
}
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0b be       	out	0x3b, r0	; 59
    190a:	0f 90       	pop	r0
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	0f 90       	pop	r0
    1910:	1f 90       	pop	r1
    1912:	18 95       	reti

00001914 <debug_init>:
	byteToASCIIHex(u8_ASCIIData + 4, u32_data >> 8);
	byteToASCIIHex(u8_ASCIIData + 6, u32_data);
	for (u8 i = 0; i < 8; i++)
		uart_transmit(s_debugUart, u8_ASCIIData[i]);
	uart_transmit(s_debugUart, '\n');
}
    1914:	0f 93       	push	r16
    1916:	1f 93       	push	r17
    1918:	ea e9       	ldi	r30, 0x9A	; 154
    191a:	f1 e0       	ldi	r31, 0x01	; 1
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	18 2f       	mov	r17, r24
    1920:	81 83       	std	Z+1, r24	; 0x01
    1922:	8b e4       	ldi	r24, 0x4B	; 75
    1924:	82 83       	std	Z+2, r24	; 0x02
    1926:	13 82       	std	Z+3, r1	; 0x03
    1928:	14 82       	std	Z+4, r1	; 0x04
    192a:	83 e0       	ldi	r24, 0x03	; 3
    192c:	78 2f       	mov	r23, r24
    192e:	87 83       	std	Z+7, r24	; 0x07
    1930:	11 86       	std	Z+9, r1	; 0x09
    1932:	10 82       	st	Z, r1
    1934:	10 86       	std	Z+8, r1	; 0x08
    1936:	15 82       	std	Z+5, r1	; 0x05
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	68 2f       	mov	r22, r24
    193c:	86 83       	std	Z+6, r24	; 0x06
    193e:	00 e0       	ldi	r16, 0x00	; 0
    1940:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    1944:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1948:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	b2 de       	rcall	.-668    	; 0x16b8 <uart_init>
    1954:	00 91 9a 01 	lds	r16, 0x019A	; 0x80019a <s_debugUart>
    1958:	10 91 9b 01 	lds	r17, 0x019B	; 0x80019b <s_debugUart+0x1>
    195c:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    1960:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1964:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    1968:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <s_debugUart+0x5>
    196c:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <s_debugUart+0x6>
    1970:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <s_debugUart+0x7>
    1974:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <s_debugUart+0x8>
    1978:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <s_debugUart+0x9>
    197c:	3e df       	rcall	.-388    	; 0x17fa <uart_start>
    197e:	1f 91       	pop	r17
    1980:	0f 91       	pop	r16
    1982:	08 95       	ret

00001984 <debug_writeDecimal>:

void debug_writeDecimal(u16 u16_data)
{
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	cf 93       	push	r28
    1992:	df 93       	push	r29
    1994:	ec 01       	movw	r28, r24
	uart_transmit(s_debugUart, u16_data / 10000 % 10 + '0');
    1996:	9c 01       	movw	r18, r24
    1998:	32 95       	swap	r19
    199a:	22 95       	swap	r18
    199c:	2f 70       	andi	r18, 0x0F	; 15
    199e:	23 27       	eor	r18, r19
    19a0:	3f 70       	andi	r19, 0x0F	; 15
    19a2:	23 27       	eor	r18, r19
    19a4:	a7 e4       	ldi	r26, 0x47	; 71
    19a6:	b3 e0       	ldi	r27, 0x03	; 3
    19a8:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    19ac:	7c 01       	movw	r14, r24
    19ae:	f6 94       	lsr	r15
    19b0:	e7 94       	ror	r14
    19b2:	f6 94       	lsr	r15
    19b4:	e7 94       	ror	r14
    19b6:	f6 94       	lsr	r15
    19b8:	e7 94       	ror	r14
    19ba:	97 01       	movw	r18, r14
    19bc:	ad ec       	ldi	r26, 0xCD	; 205
    19be:	bc ec       	ldi	r27, 0xCC	; 204
    19c0:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    19c4:	96 95       	lsr	r25
    19c6:	87 95       	ror	r24
    19c8:	96 95       	lsr	r25
    19ca:	87 95       	ror	r24
    19cc:	96 95       	lsr	r25
    19ce:	87 95       	ror	r24
    19d0:	9c 01       	movw	r18, r24
    19d2:	22 0f       	add	r18, r18
    19d4:	33 1f       	adc	r19, r19
    19d6:	88 0f       	add	r24, r24
    19d8:	99 1f       	adc	r25, r25
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	88 0f       	add	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	82 0f       	add	r24, r18
    19e4:	93 1f       	adc	r25, r19
    19e6:	e8 1a       	sub	r14, r24
    19e8:	f9 0a       	sbc	r15, r25
    19ea:	80 e3       	ldi	r24, 0x30	; 48
    19ec:	e8 0e       	add	r14, r24
    19ee:	f1 1c       	adc	r15, r1
    19f0:	00 91 9a 01 	lds	r16, 0x019A	; 0x80019a <s_debugUart>
    19f4:	10 91 9b 01 	lds	r17, 0x019B	; 0x80019b <s_debugUart+0x1>
    19f8:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    19fc:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1a00:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    1a04:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <s_debugUart+0x5>
    1a08:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <s_debugUart+0x6>
    1a0c:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <s_debugUart+0x7>
    1a10:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <s_debugUart+0x8>
    1a14:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <s_debugUart+0x9>
    1a18:	16 df       	rcall	.-468    	; 0x1846 <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 1000 % 10 + '0');
    1a1a:	9e 01       	movw	r18, r28
    1a1c:	36 95       	lsr	r19
    1a1e:	27 95       	ror	r18
    1a20:	36 95       	lsr	r19
    1a22:	27 95       	ror	r18
    1a24:	36 95       	lsr	r19
    1a26:	27 95       	ror	r18
    1a28:	a5 ec       	ldi	r26, 0xC5	; 197
    1a2a:	b0 e2       	ldi	r27, 0x20	; 32
    1a2c:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    1a30:	7c 01       	movw	r14, r24
    1a32:	f6 94       	lsr	r15
    1a34:	e7 94       	ror	r14
    1a36:	f6 94       	lsr	r15
    1a38:	e7 94       	ror	r14
    1a3a:	f6 94       	lsr	r15
    1a3c:	e7 94       	ror	r14
    1a3e:	f6 94       	lsr	r15
    1a40:	e7 94       	ror	r14
    1a42:	97 01       	movw	r18, r14
    1a44:	ad ec       	ldi	r26, 0xCD	; 205
    1a46:	bc ec       	ldi	r27, 0xCC	; 204
    1a48:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    1a4c:	96 95       	lsr	r25
    1a4e:	87 95       	ror	r24
    1a50:	96 95       	lsr	r25
    1a52:	87 95       	ror	r24
    1a54:	96 95       	lsr	r25
    1a56:	87 95       	ror	r24
    1a58:	9c 01       	movw	r18, r24
    1a5a:	22 0f       	add	r18, r18
    1a5c:	33 1f       	adc	r19, r19
    1a5e:	88 0f       	add	r24, r24
    1a60:	99 1f       	adc	r25, r25
    1a62:	88 0f       	add	r24, r24
    1a64:	99 1f       	adc	r25, r25
    1a66:	88 0f       	add	r24, r24
    1a68:	99 1f       	adc	r25, r25
    1a6a:	82 0f       	add	r24, r18
    1a6c:	93 1f       	adc	r25, r19
    1a6e:	e8 1a       	sub	r14, r24
    1a70:	f9 0a       	sbc	r15, r25
    1a72:	80 e3       	ldi	r24, 0x30	; 48
    1a74:	e8 0e       	add	r14, r24
    1a76:	f1 1c       	adc	r15, r1
    1a78:	00 91 9a 01 	lds	r16, 0x019A	; 0x80019a <s_debugUart>
    1a7c:	10 91 9b 01 	lds	r17, 0x019B	; 0x80019b <s_debugUart+0x1>
    1a80:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    1a84:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1a88:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    1a8c:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <s_debugUart+0x5>
    1a90:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <s_debugUart+0x6>
    1a94:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <s_debugUart+0x7>
    1a98:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <s_debugUart+0x8>
    1a9c:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <s_debugUart+0x9>
    1aa0:	d2 de       	rcall	.-604    	; 0x1846 <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 100 % 10 + '0');
    1aa2:	9e 01       	movw	r18, r28
    1aa4:	36 95       	lsr	r19
    1aa6:	27 95       	ror	r18
    1aa8:	36 95       	lsr	r19
    1aaa:	27 95       	ror	r18
    1aac:	ab e7       	ldi	r26, 0x7B	; 123
    1aae:	b4 e1       	ldi	r27, 0x14	; 20
    1ab0:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    1ab4:	7c 01       	movw	r14, r24
    1ab6:	f6 94       	lsr	r15
    1ab8:	e7 94       	ror	r14
    1aba:	97 01       	movw	r18, r14
    1abc:	ad ec       	ldi	r26, 0xCD	; 205
    1abe:	bc ec       	ldi	r27, 0xCC	; 204
    1ac0:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    1ac4:	96 95       	lsr	r25
    1ac6:	87 95       	ror	r24
    1ac8:	96 95       	lsr	r25
    1aca:	87 95       	ror	r24
    1acc:	96 95       	lsr	r25
    1ace:	87 95       	ror	r24
    1ad0:	9c 01       	movw	r18, r24
    1ad2:	22 0f       	add	r18, r18
    1ad4:	33 1f       	adc	r19, r19
    1ad6:	88 0f       	add	r24, r24
    1ad8:	99 1f       	adc	r25, r25
    1ada:	88 0f       	add	r24, r24
    1adc:	99 1f       	adc	r25, r25
    1ade:	88 0f       	add	r24, r24
    1ae0:	99 1f       	adc	r25, r25
    1ae2:	82 0f       	add	r24, r18
    1ae4:	93 1f       	adc	r25, r19
    1ae6:	e8 1a       	sub	r14, r24
    1ae8:	f9 0a       	sbc	r15, r25
    1aea:	80 e3       	ldi	r24, 0x30	; 48
    1aec:	e8 0e       	add	r14, r24
    1aee:	f1 1c       	adc	r15, r1
    1af0:	00 91 9a 01 	lds	r16, 0x019A	; 0x80019a <s_debugUart>
    1af4:	10 91 9b 01 	lds	r17, 0x019B	; 0x80019b <s_debugUart+0x1>
    1af8:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    1afc:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1b00:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    1b04:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <s_debugUart+0x5>
    1b08:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <s_debugUart+0x6>
    1b0c:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <s_debugUart+0x7>
    1b10:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <s_debugUart+0x8>
    1b14:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <s_debugUart+0x9>
    1b18:	96 de       	rcall	.-724    	; 0x1846 <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 10 % 10 + '0');
    1b1a:	9e 01       	movw	r18, r28
    1b1c:	ad ec       	ldi	r26, 0xCD	; 205
    1b1e:	bc ec       	ldi	r27, 0xCC	; 204
    1b20:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    1b24:	6c 01       	movw	r12, r24
    1b26:	d6 94       	lsr	r13
    1b28:	c7 94       	ror	r12
    1b2a:	d6 94       	lsr	r13
    1b2c:	c7 94       	ror	r12
    1b2e:	d6 94       	lsr	r13
    1b30:	c7 94       	ror	r12
    1b32:	96 01       	movw	r18, r12
    1b34:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <__umulhisi3>
    1b38:	96 95       	lsr	r25
    1b3a:	87 95       	ror	r24
    1b3c:	96 95       	lsr	r25
    1b3e:	87 95       	ror	r24
    1b40:	96 95       	lsr	r25
    1b42:	87 95       	ror	r24
    1b44:	9c 01       	movw	r18, r24
    1b46:	22 0f       	add	r18, r18
    1b48:	33 1f       	adc	r19, r19
    1b4a:	88 0f       	add	r24, r24
    1b4c:	99 1f       	adc	r25, r25
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	82 0f       	add	r24, r18
    1b58:	93 1f       	adc	r25, r19
    1b5a:	76 01       	movw	r14, r12
    1b5c:	e8 1a       	sub	r14, r24
    1b5e:	f9 0a       	sbc	r15, r25
    1b60:	80 e3       	ldi	r24, 0x30	; 48
    1b62:	e8 0e       	add	r14, r24
    1b64:	f1 1c       	adc	r15, r1
    1b66:	00 91 9a 01 	lds	r16, 0x019A	; 0x80019a <s_debugUart>
    1b6a:	10 91 9b 01 	lds	r17, 0x019B	; 0x80019b <s_debugUart+0x1>
    1b6e:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    1b72:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1b76:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    1b7a:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <s_debugUart+0x5>
    1b7e:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <s_debugUart+0x6>
    1b82:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <s_debugUart+0x7>
    1b86:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <s_debugUart+0x8>
    1b8a:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <s_debugUart+0x9>
    1b8e:	5b de       	rcall	.-842    	; 0x1846 <uart_transmit>
	uart_transmit(s_debugUart, u16_data % 10 + '0');
    1b90:	c6 01       	movw	r24, r12
    1b92:	88 0f       	add	r24, r24
    1b94:	99 1f       	adc	r25, r25
    1b96:	cc 0c       	add	r12, r12
    1b98:	dd 1c       	adc	r13, r13
    1b9a:	cc 0c       	add	r12, r12
    1b9c:	dd 1c       	adc	r13, r13
    1b9e:	cc 0c       	add	r12, r12
    1ba0:	dd 1c       	adc	r13, r13
    1ba2:	c8 0e       	add	r12, r24
    1ba4:	d9 1e       	adc	r13, r25
    1ba6:	7e 01       	movw	r14, r28
    1ba8:	ec 18       	sub	r14, r12
    1baa:	fd 08       	sbc	r15, r13
    1bac:	80 e3       	ldi	r24, 0x30	; 48
    1bae:	e8 0e       	add	r14, r24
    1bb0:	f1 1c       	adc	r15, r1
    1bb2:	00 91 9a 01 	lds	r16, 0x019A	; 0x80019a <s_debugUart>
    1bb6:	10 91 9b 01 	lds	r17, 0x019B	; 0x80019b <s_debugUart+0x1>
    1bba:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    1bbe:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1bc2:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    1bc6:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <s_debugUart+0x5>
    1bca:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <s_debugUart+0x6>
    1bce:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <s_debugUart+0x7>
    1bd2:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <s_debugUart+0x8>
    1bd6:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <s_debugUart+0x9>
    1bda:	35 de       	rcall	.-918    	; 0x1846 <uart_transmit>
}
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	df 90       	pop	r13
    1bea:	cf 90       	pop	r12
    1bec:	08 95       	ret

00001bee <debug_writeNewLine>:

void debug_writeNewLine()
{
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
	uart_transmit(s_debugUart, '\n');
    1bf6:	0f 2e       	mov	r0, r31
    1bf8:	fa e0       	ldi	r31, 0x0A	; 10
    1bfa:	ef 2e       	mov	r14, r31
    1bfc:	f1 2c       	mov	r15, r1
    1bfe:	f0 2d       	mov	r31, r0
    1c00:	00 91 9a 01 	lds	r16, 0x019A	; 0x80019a <s_debugUart>
    1c04:	10 91 9b 01 	lds	r17, 0x019B	; 0x80019b <s_debugUart+0x1>
    1c08:	20 91 9c 01 	lds	r18, 0x019C	; 0x80019c <s_debugUart+0x2>
    1c0c:	30 91 9d 01 	lds	r19, 0x019D	; 0x80019d <s_debugUart+0x3>
    1c10:	40 91 9e 01 	lds	r20, 0x019E	; 0x80019e <s_debugUart+0x4>
    1c14:	50 91 9f 01 	lds	r21, 0x019F	; 0x80019f <s_debugUart+0x5>
    1c18:	60 91 a0 01 	lds	r22, 0x01A0	; 0x8001a0 <s_debugUart+0x6>
    1c1c:	70 91 a1 01 	lds	r23, 0x01A1	; 0x8001a1 <s_debugUart+0x7>
    1c20:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <s_debugUart+0x8>
    1c24:	90 91 a3 01 	lds	r25, 0x01A3	; 0x8001a3 <s_debugUart+0x9>
    1c28:	0e de       	rcall	.-996    	; 0x1846 <uart_transmit>
}
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	08 95       	ret

00001c34 <motor_init>:
		case RIGHT:
			gpio_out_set(s_motor.motorDirectionA);
			gpio_out_reset(s_motor.motorDirectionB);
			break;
	}
}
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	69 85       	ldd	r22, Y+9	; 0x09
    1c3e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c40:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c42:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c44:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <gpio_init>
    1c48:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c4a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4e:	98 89       	ldd	r25, Y+16	; 0x10
    1c50:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <gpio_init>
    1c54:	6d 81       	ldd	r22, Y+5	; 0x05
    1c56:	7e 81       	ldd	r23, Y+6	; 0x06
    1c58:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5a:	98 85       	ldd	r25, Y+8	; 0x08
    1c5c:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <gpio_init>
    1c60:	ce 01       	movw	r24, r28
    1c62:	46 96       	adiw	r24, 0x16	; 22
    1c64:	0e 94 4d 04 	call	0x89a	; 0x89a <pwm_init>
    1c68:	df 91       	pop	r29
    1c6a:	cf 91       	pop	r28
    1c6c:	08 95       	ret

00001c6e <motor_start>:
    1c6e:	af 92       	push	r10
    1c70:	cf 92       	push	r12
    1c72:	ef 92       	push	r14
    1c74:	ff 92       	push	r15
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	cf 93       	push	r28
    1c7c:	df 93       	push	r29
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c84:	78 89       	ldd	r23, Y+16	; 0x10
    1c86:	89 89       	ldd	r24, Y+17	; 0x11
    1c88:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8a:	0e 94 41 02 	call	0x482	; 0x482 <gpio_out_reset>
    1c8e:	6b 89       	ldd	r22, Y+19	; 0x13
    1c90:	7c 89       	ldd	r23, Y+20	; 0x14
    1c92:	8d 89       	ldd	r24, Y+21	; 0x15
    1c94:	9e 89       	ldd	r25, Y+22	; 0x16
    1c96:	0e 94 41 02 	call	0x482	; 0x482 <gpio_out_reset>
    1c9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca2:	0e 94 25 02 	call	0x44a	; 0x44a <gpio_out_set>
    1ca6:	a1 2c       	mov	r10, r1
    1ca8:	c1 2c       	mov	r12, r1
    1caa:	ec 8c       	ldd	r14, Y+28	; 0x1c
    1cac:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1cae:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1cb0:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1cb2:	28 a1       	ldd	r18, Y+32	; 0x20
    1cb4:	39 a1       	ldd	r19, Y+33	; 0x21
    1cb6:	4a a1       	ldd	r20, Y+34	; 0x22
    1cb8:	5b a1       	ldd	r21, Y+35	; 0x23
    1cba:	6c a1       	ldd	r22, Y+36	; 0x24
    1cbc:	7d a1       	ldd	r23, Y+37	; 0x25
    1cbe:	8e a1       	ldd	r24, Y+38	; 0x26
    1cc0:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pwm_setDutyCycle>
    1cc4:	cc 24       	eor	r12, r12
    1cc6:	c3 94       	inc	r12
    1cc8:	ec 8c       	ldd	r14, Y+28	; 0x1c
    1cca:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1ccc:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1cce:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1cd0:	28 a1       	ldd	r18, Y+32	; 0x20
    1cd2:	39 a1       	ldd	r19, Y+33	; 0x21
    1cd4:	4a a1       	ldd	r20, Y+34	; 0x22
    1cd6:	5b a1       	ldd	r21, Y+35	; 0x23
    1cd8:	6c a1       	ldd	r22, Y+36	; 0x24
    1cda:	7d a1       	ldd	r23, Y+37	; 0x25
    1cdc:	8e a1       	ldd	r24, Y+38	; 0x26
    1cde:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pwm_setDutyCycle>
    1ce2:	ec 8c       	ldd	r14, Y+28	; 0x1c
    1ce4:	fd 8c       	ldd	r15, Y+29	; 0x1d
    1ce6:	0e 8d       	ldd	r16, Y+30	; 0x1e
    1ce8:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1cea:	28 a1       	ldd	r18, Y+32	; 0x20
    1cec:	39 a1       	ldd	r19, Y+33	; 0x21
    1cee:	4a a1       	ldd	r20, Y+34	; 0x22
    1cf0:	5b a1       	ldd	r21, Y+35	; 0x23
    1cf2:	6c a1       	ldd	r22, Y+36	; 0x24
    1cf4:	7d a1       	ldd	r23, Y+37	; 0x25
    1cf6:	8e a1       	ldd	r24, Y+38	; 0x26
    1cf8:	0e 94 bf 04 	call	0x97e	; 0x97e <pwm_start>
    1cfc:	df 91       	pop	r29
    1cfe:	cf 91       	pop	r28
    1d00:	1f 91       	pop	r17
    1d02:	0f 91       	pop	r16
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	cf 90       	pop	r12
    1d0a:	af 90       	pop	r10
    1d0c:	08 95       	ret

00001d0e <motor_speed>:

void motor_speed(motor_struct_t s_motor, u8 speed){
    1d0e:	af 92       	push	r10
    1d10:	cf 92       	push	r12
    1d12:	df 92       	push	r13
    1d14:	ef 92       	push	r14
    1d16:	ff 92       	push	r15
    1d18:	0f 93       	push	r16
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	cd b7       	in	r28, 0x3d	; 61
    1d22:	de b7       	in	r29, 0x3e	; 62
    1d24:	d8 a4       	ldd	r13, Y+40	; 0x28
	pwm_setDutyCycle(s_motor.motorPWM, CHANNEL_A, calibrateSpeed(speed));
    1d26:	6d 2d       	mov	r22, r13
    1d28:	70 e0       	ldi	r23, 0x00	; 0
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	14 d7       	rcall	.+3624   	; 0x2b58 <__floatsisf>
    1d30:	23 ec       	ldi	r18, 0xC3	; 195
    1d32:	35 ef       	ldi	r19, 0xF5	; 245
    1d34:	48 e6       	ldi	r20, 0x68	; 104
    1d36:	5f e3       	ldi	r21, 0x3F	; 63
    1d38:	9b d7       	rcall	.+3894   	; 0x2c70 <__mulsf3>
    1d3a:	e0 d6       	rcall	.+3520   	; 0x2afc <__fixunssfsi>
    1d3c:	a6 2e       	mov	r10, r22
    1d3e:	c1 2c       	mov	r12, r1
    1d40:	ed 8c       	ldd	r14, Y+29	; 0x1d
    1d42:	fe 8c       	ldd	r15, Y+30	; 0x1e
    1d44:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1d46:	18 a1       	ldd	r17, Y+32	; 0x20
    1d48:	29 a1       	ldd	r18, Y+33	; 0x21
    1d4a:	3a a1       	ldd	r19, Y+34	; 0x22
    1d4c:	4b a1       	ldd	r20, Y+35	; 0x23
    1d4e:	5c a1       	ldd	r21, Y+36	; 0x24
    1d50:	6d a1       	ldd	r22, Y+37	; 0x25
    1d52:	7e a1       	ldd	r23, Y+38	; 0x26
    1d54:	8f a1       	ldd	r24, Y+39	; 0x27
    1d56:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pwm_setDutyCycle>
	pwm_setDutyCycle(s_motor.motorPWM, CHANNEL_B, speed);
    1d5a:	ad 2c       	mov	r10, r13
    1d5c:	cc 24       	eor	r12, r12
    1d5e:	c3 94       	inc	r12
    1d60:	ed 8c       	ldd	r14, Y+29	; 0x1d
    1d62:	fe 8c       	ldd	r15, Y+30	; 0x1e
    1d64:	0f 8d       	ldd	r16, Y+31	; 0x1f
    1d66:	18 a1       	ldd	r17, Y+32	; 0x20
    1d68:	29 a1       	ldd	r18, Y+33	; 0x21
    1d6a:	3a a1       	ldd	r19, Y+34	; 0x22
    1d6c:	4b a1       	ldd	r20, Y+35	; 0x23
    1d6e:	5c a1       	ldd	r21, Y+36	; 0x24
    1d70:	6d a1       	ldd	r22, Y+37	; 0x25
    1d72:	7e a1       	ldd	r23, Y+38	; 0x26
    1d74:	8f a1       	ldd	r24, Y+39	; 0x27
    1d76:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <pwm_setDutyCycle>
}
    1d7a:	df 91       	pop	r29
    1d7c:	cf 91       	pop	r28
    1d7e:	1f 91       	pop	r17
    1d80:	0f 91       	pop	r16
    1d82:	ff 90       	pop	r15
    1d84:	ef 90       	pop	r14
    1d86:	df 90       	pop	r13
    1d88:	cf 90       	pop	r12
    1d8a:	af 90       	pop	r10
    1d8c:	08 95       	ret

00001d8e <startTimeout>:

	temp = readReg16Bit(ps_sensor, RESULT_RANGE_STATUS + 10);
	writeReg(ps_sensor, SYSTEM_INTERRUPT_CLEAR, 0x01);

	return temp;
}
    1d8e:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
    1d92:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
    1d96:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end+0x2>
    1d9a:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x3>
    1d9e:	fc 01       	movw	r30, r24
    1da0:	51 87       	std	Z+9, r21	; 0x09
    1da2:	40 87       	std	Z+8, r20	; 0x08
    1da4:	08 95       	ret

00001da6 <checkTimeoutExpired>:
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	fc 01       	movw	r30, r24
    1dac:	41 81       	ldd	r20, Z+1	; 0x01
    1dae:	52 81       	ldd	r21, Z+2	; 0x02
    1db0:	41 15       	cp	r20, r1
    1db2:	51 05       	cpc	r21, r1
    1db4:	c1 f0       	breq	.+48     	; 0x1de6 <checkTimeoutExpired+0x40>
    1db6:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
    1dba:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
    1dbe:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
    1dc2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
    1dc6:	80 85       	ldd	r24, Z+8	; 0x08
    1dc8:	91 85       	ldd	r25, Z+9	; 0x09
    1dca:	08 1b       	sub	r16, r24
    1dcc:	19 0b       	sbc	r17, r25
    1dce:	21 09       	sbc	r18, r1
    1dd0:	31 09       	sbc	r19, r1
    1dd2:	60 e0       	ldi	r22, 0x00	; 0
    1dd4:	70 e0       	ldi	r23, 0x00	; 0
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	40 17       	cp	r20, r16
    1dda:	51 07       	cpc	r21, r17
    1ddc:	62 07       	cpc	r22, r18
    1dde:	73 07       	cpc	r23, r19
    1de0:	18 f0       	brcs	.+6      	; 0x1de8 <checkTimeoutExpired+0x42>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	01 c0       	rjmp	.+2      	; 0x1de8 <checkTimeoutExpired+0x42>
    1de6:	80 e0       	ldi	r24, 0x00	; 0
    1de8:	1f 91       	pop	r17
    1dea:	0f 91       	pop	r16
    1dec:	08 95       	ret

00001dee <writeReg>:
    1dee:	cf 93       	push	r28
    1df0:	df 93       	push	r29
    1df2:	d6 2f       	mov	r29, r22
    1df4:	c4 2f       	mov	r28, r20
    1df6:	fc 01       	movw	r30, r24
    1df8:	80 81       	ld	r24, Z
    1dfa:	88 0f       	add	r24, r24
    1dfc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_sendStart>
    1e00:	8d 2f       	mov	r24, r29
    1e02:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e06:	8c 2f       	mov	r24, r28
    1e08:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e0c:	0e 94 49 03 	call	0x692	; 0x692 <i2c_sendStop>
    1e10:	df 91       	pop	r29
    1e12:	cf 91       	pop	r28
    1e14:	08 95       	ret

00001e16 <writeReg16Bit>:
    1e16:	1f 93       	push	r17
    1e18:	cf 93       	push	r28
    1e1a:	df 93       	push	r29
    1e1c:	16 2f       	mov	r17, r22
    1e1e:	c4 2f       	mov	r28, r20
    1e20:	d5 2f       	mov	r29, r21
    1e22:	fc 01       	movw	r30, r24
    1e24:	80 81       	ld	r24, Z
    1e26:	88 0f       	add	r24, r24
    1e28:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_sendStart>
    1e2c:	81 2f       	mov	r24, r17
    1e2e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e32:	8d 2f       	mov	r24, r29
    1e34:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e38:	8c 2f       	mov	r24, r28
    1e3a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e3e:	0e 94 49 03 	call	0x692	; 0x692 <i2c_sendStop>
    1e42:	df 91       	pop	r29
    1e44:	cf 91       	pop	r28
    1e46:	1f 91       	pop	r17
    1e48:	08 95       	ret

00001e4a <writeReg32Bit>:
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	cf 93       	push	r28
    1e52:	df 93       	push	r29
    1e54:	f6 2e       	mov	r15, r22
    1e56:	c2 2f       	mov	r28, r18
    1e58:	d3 2f       	mov	r29, r19
    1e5a:	14 2f       	mov	r17, r20
    1e5c:	05 2f       	mov	r16, r21
    1e5e:	fc 01       	movw	r30, r24
    1e60:	80 81       	ld	r24, Z
    1e62:	88 0f       	add	r24, r24
    1e64:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_sendStart>
    1e68:	8f 2d       	mov	r24, r15
    1e6a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e6e:	80 2f       	mov	r24, r16
    1e70:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e74:	81 2f       	mov	r24, r17
    1e76:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e7a:	8d 2f       	mov	r24, r29
    1e7c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e80:	8c 2f       	mov	r24, r28
    1e82:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1e86:	0e 94 49 03 	call	0x692	; 0x692 <i2c_sendStop>
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	ff 90       	pop	r15
    1e94:	08 95       	ret

00001e96 <readReg>:
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	ec 01       	movw	r28, r24
    1e9e:	16 2f       	mov	r17, r22
    1ea0:	88 81       	ld	r24, Y
    1ea2:	88 0f       	add	r24, r24
    1ea4:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_sendStart>
    1ea8:	81 2f       	mov	r24, r17
    1eaa:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1eae:	88 81       	ld	r24, Y
    1eb0:	88 0f       	add	r24, r24
    1eb2:	81 60       	ori	r24, 0x01	; 1
    1eb4:	0e 94 47 03 	call	0x68e	; 0x68e <i2c_sendRepStart>
    1eb8:	0e 94 c4 03 	call	0x788	; 0x788 <i2c_readNak>
    1ebc:	c8 2f       	mov	r28, r24
    1ebe:	0e 94 49 03 	call	0x692	; 0x692 <i2c_sendStop>
    1ec2:	8c 2f       	mov	r24, r28
    1ec4:	df 91       	pop	r29
    1ec6:	cf 91       	pop	r28
    1ec8:	1f 91       	pop	r17
    1eca:	08 95       	ret

00001ecc <readReg16Bit>:
    1ecc:	1f 93       	push	r17
    1ece:	cf 93       	push	r28
    1ed0:	df 93       	push	r29
    1ed2:	ec 01       	movw	r28, r24
    1ed4:	16 2f       	mov	r17, r22
    1ed6:	88 81       	ld	r24, Y
    1ed8:	88 0f       	add	r24, r24
    1eda:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_sendStart>
    1ede:	81 2f       	mov	r24, r17
    1ee0:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1ee4:	88 81       	ld	r24, Y
    1ee6:	88 0f       	add	r24, r24
    1ee8:	81 60       	ori	r24, 0x01	; 1
    1eea:	0e 94 47 03 	call	0x68e	; 0x68e <i2c_sendRepStart>
    1eee:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_readAck>
    1ef2:	c8 2f       	mov	r28, r24
    1ef4:	d0 e0       	ldi	r29, 0x00	; 0
    1ef6:	dc 2f       	mov	r29, r28
    1ef8:	cc 27       	eor	r28, r28
    1efa:	0e 94 c4 03 	call	0x788	; 0x788 <i2c_readNak>
    1efe:	c8 2b       	or	r28, r24
    1f00:	0e 94 49 03 	call	0x692	; 0x692 <i2c_sendStop>
    1f04:	ce 01       	movw	r24, r28
    1f06:	df 91       	pop	r29
    1f08:	cf 91       	pop	r28
    1f0a:	1f 91       	pop	r17
    1f0c:	08 95       	ret

00001f0e <writeMulti>:
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	d6 2f       	mov	r29, r22
    1f1c:	7a 01       	movw	r14, r20
    1f1e:	c2 2f       	mov	r28, r18
    1f20:	fc 01       	movw	r30, r24
    1f22:	80 81       	ld	r24, Z
    1f24:	88 0f       	add	r24, r24
    1f26:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_sendStart>
    1f2a:	8d 2f       	mov	r24, r29
    1f2c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1f30:	8f ef       	ldi	r24, 0xFF	; 255
    1f32:	8c 0f       	add	r24, r28
    1f34:	cc 23       	and	r28, r28
    1f36:	69 f0       	breq	.+26     	; 0x1f52 <writeMulti+0x44>
    1f38:	e7 01       	movw	r28, r14
    1f3a:	08 2f       	mov	r16, r24
    1f3c:	10 e0       	ldi	r17, 0x00	; 0
    1f3e:	0f 5f       	subi	r16, 0xFF	; 255
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	0e 0d       	add	r16, r14
    1f44:	1f 1d       	adc	r17, r15
    1f46:	89 91       	ld	r24, Y+
    1f48:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1f4c:	c0 17       	cp	r28, r16
    1f4e:	d1 07       	cpc	r29, r17
    1f50:	d1 f7       	brne	.-12     	; 0x1f46 <writeMulti+0x38>
    1f52:	0e 94 49 03 	call	0x692	; 0x692 <i2c_sendStop>
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	ff 90       	pop	r15
    1f60:	ef 90       	pop	r14
    1f62:	08 95       	ret

00001f64 <readMulti>:
    1f64:	ef 92       	push	r14
    1f66:	ff 92       	push	r15
    1f68:	0f 93       	push	r16
    1f6a:	1f 93       	push	r17
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	8c 01       	movw	r16, r24
    1f72:	d6 2f       	mov	r29, r22
    1f74:	e4 2e       	mov	r14, r20
    1f76:	f5 2e       	mov	r15, r21
    1f78:	c2 2f       	mov	r28, r18
    1f7a:	fc 01       	movw	r30, r24
    1f7c:	80 81       	ld	r24, Z
    1f7e:	88 0f       	add	r24, r24
    1f80:	0e 94 e5 02 	call	0x5ca	; 0x5ca <i2c_sendStart>
    1f84:	8d 2f       	mov	r24, r29
    1f86:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <i2c_write>
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	80 81       	ld	r24, Z
    1f8e:	88 0f       	add	r24, r24
    1f90:	81 60       	ori	r24, 0x01	; 1
    1f92:	0e 94 47 03 	call	0x68e	; 0x68e <i2c_sendRepStart>
    1f96:	cc 23       	and	r28, r28
    1f98:	91 f0       	breq	.+36     	; 0x1fbe <readMulti+0x5a>
    1f9a:	0e 2d       	mov	r16, r14
    1f9c:	1f 2d       	mov	r17, r15
    1f9e:	c2 30       	cpi	r28, 0x02	; 2
    1fa0:	28 f0       	brcs	.+10     	; 0x1fac <readMulti+0x48>
    1fa2:	0e 94 a0 03 	call	0x740	; 0x740 <i2c_readAck>
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	80 83       	st	Z, r24
    1faa:	04 c0       	rjmp	.+8      	; 0x1fb4 <readMulti+0x50>
    1fac:	0e 94 c4 03 	call	0x788	; 0x788 <i2c_readNak>
    1fb0:	f8 01       	movw	r30, r16
    1fb2:	80 83       	st	Z, r24
    1fb4:	c1 50       	subi	r28, 0x01	; 1
    1fb6:	0f 5f       	subi	r16, 0xFF	; 255
    1fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fba:	c1 11       	cpse	r28, r1
    1fbc:	f0 cf       	rjmp	.-32     	; 0x1f9e <readMulti+0x3a>
    1fbe:	0e 94 49 03 	call	0x692	; 0x692 <i2c_sendStop>
    1fc2:	df 91       	pop	r29
    1fc4:	cf 91       	pop	r28
    1fc6:	1f 91       	pop	r17
    1fc8:	0f 91       	pop	r16
    1fca:	ff 90       	pop	r15
    1fcc:	ef 90       	pop	r14
    1fce:	08 95       	ret

00001fd0 <getSpadInfo>:
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	ec 01       	movw	r28, r24
    1fde:	7b 01       	movw	r14, r22
    1fe0:	8a 01       	movw	r16, r20
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	60 e8       	ldi	r22, 0x80	; 128
    1fe6:	03 df       	rcall	.-506    	; 0x1dee <writeReg>
    1fe8:	41 e0       	ldi	r20, 0x01	; 1
    1fea:	6f ef       	ldi	r22, 0xFF	; 255
    1fec:	ce 01       	movw	r24, r28
    1fee:	ff de       	rcall	.-514    	; 0x1dee <writeReg>
    1ff0:	40 e0       	ldi	r20, 0x00	; 0
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	fb de       	rcall	.-522    	; 0x1dee <writeReg>
    1ff8:	46 e0       	ldi	r20, 0x06	; 6
    1ffa:	6f ef       	ldi	r22, 0xFF	; 255
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	f7 de       	rcall	.-530    	; 0x1dee <writeReg>
    2000:	63 e8       	ldi	r22, 0x83	; 131
    2002:	ce 01       	movw	r24, r28
    2004:	48 df       	rcall	.-368    	; 0x1e96 <readReg>
    2006:	48 2f       	mov	r20, r24
    2008:	44 60       	ori	r20, 0x04	; 4
    200a:	63 e8       	ldi	r22, 0x83	; 131
    200c:	ce 01       	movw	r24, r28
    200e:	ef de       	rcall	.-546    	; 0x1dee <writeReg>
    2010:	47 e0       	ldi	r20, 0x07	; 7
    2012:	6f ef       	ldi	r22, 0xFF	; 255
    2014:	ce 01       	movw	r24, r28
    2016:	eb de       	rcall	.-554    	; 0x1dee <writeReg>
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	61 e8       	ldi	r22, 0x81	; 129
    201c:	ce 01       	movw	r24, r28
    201e:	e7 de       	rcall	.-562    	; 0x1dee <writeReg>
    2020:	41 e0       	ldi	r20, 0x01	; 1
    2022:	60 e8       	ldi	r22, 0x80	; 128
    2024:	ce 01       	movw	r24, r28
    2026:	e3 de       	rcall	.-570    	; 0x1dee <writeReg>
    2028:	4b e6       	ldi	r20, 0x6B	; 107
    202a:	64 e9       	ldi	r22, 0x94	; 148
    202c:	ce 01       	movw	r24, r28
    202e:	df de       	rcall	.-578    	; 0x1dee <writeReg>
    2030:	40 e0       	ldi	r20, 0x00	; 0
    2032:	63 e8       	ldi	r22, 0x83	; 131
    2034:	ce 01       	movw	r24, r28
    2036:	db de       	rcall	.-586    	; 0x1dee <writeReg>
    2038:	ce 01       	movw	r24, r28
    203a:	a9 de       	rcall	.-686    	; 0x1d8e <startTimeout>
    203c:	04 c0       	rjmp	.+8      	; 0x2046 <getSpadInfo+0x76>
    203e:	ce 01       	movw	r24, r28
    2040:	b2 de       	rcall	.-668    	; 0x1da6 <checkTimeoutExpired>
    2042:	81 11       	cpse	r24, r1
    2044:	37 c0       	rjmp	.+110    	; 0x20b4 <getSpadInfo+0xe4>
    2046:	63 e8       	ldi	r22, 0x83	; 131
    2048:	ce 01       	movw	r24, r28
    204a:	25 df       	rcall	.-438    	; 0x1e96 <readReg>
    204c:	88 23       	and	r24, r24
    204e:	b9 f3       	breq	.-18     	; 0x203e <getSpadInfo+0x6e>
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	63 e8       	ldi	r22, 0x83	; 131
    2054:	ce 01       	movw	r24, r28
    2056:	cb de       	rcall	.-618    	; 0x1dee <writeReg>
    2058:	62 e9       	ldi	r22, 0x92	; 146
    205a:	ce 01       	movw	r24, r28
    205c:	1c df       	rcall	.-456    	; 0x1e96 <readReg>
    205e:	98 2f       	mov	r25, r24
    2060:	9f 77       	andi	r25, 0x7F	; 127
    2062:	f7 01       	movw	r30, r14
    2064:	90 83       	st	Z, r25
    2066:	88 1f       	adc	r24, r24
    2068:	88 27       	eor	r24, r24
    206a:	88 1f       	adc	r24, r24
    206c:	f8 01       	movw	r30, r16
    206e:	80 83       	st	Z, r24
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	61 e8       	ldi	r22, 0x81	; 129
    2074:	ce 01       	movw	r24, r28
    2076:	bb de       	rcall	.-650    	; 0x1dee <writeReg>
    2078:	46 e0       	ldi	r20, 0x06	; 6
    207a:	6f ef       	ldi	r22, 0xFF	; 255
    207c:	ce 01       	movw	r24, r28
    207e:	b7 de       	rcall	.-658    	; 0x1dee <writeReg>
    2080:	63 e8       	ldi	r22, 0x83	; 131
    2082:	ce 01       	movw	r24, r28
    2084:	08 df       	rcall	.-496    	; 0x1e96 <readReg>
    2086:	48 2f       	mov	r20, r24
    2088:	4b 7f       	andi	r20, 0xFB	; 251
    208a:	63 e8       	ldi	r22, 0x83	; 131
    208c:	ce 01       	movw	r24, r28
    208e:	af de       	rcall	.-674    	; 0x1dee <writeReg>
    2090:	41 e0       	ldi	r20, 0x01	; 1
    2092:	6f ef       	ldi	r22, 0xFF	; 255
    2094:	ce 01       	movw	r24, r28
    2096:	ab de       	rcall	.-682    	; 0x1dee <writeReg>
    2098:	41 e0       	ldi	r20, 0x01	; 1
    209a:	60 e0       	ldi	r22, 0x00	; 0
    209c:	ce 01       	movw	r24, r28
    209e:	a7 de       	rcall	.-690    	; 0x1dee <writeReg>
    20a0:	40 e0       	ldi	r20, 0x00	; 0
    20a2:	6f ef       	ldi	r22, 0xFF	; 255
    20a4:	ce 01       	movw	r24, r28
    20a6:	a3 de       	rcall	.-698    	; 0x1dee <writeReg>
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	60 e8       	ldi	r22, 0x80	; 128
    20ac:	ce 01       	movw	r24, r28
    20ae:	9f de       	rcall	.-706    	; 0x1dee <writeReg>
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	01 c0       	rjmp	.+2      	; 0x20b6 <getSpadInfo+0xe6>
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	df 91       	pop	r29
    20b8:	cf 91       	pop	r28
    20ba:	1f 91       	pop	r17
    20bc:	0f 91       	pop	r16
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	08 95       	ret

000020c4 <getSequenceStepEnables>:
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	eb 01       	movw	r28, r22
    20ca:	61 e0       	ldi	r22, 0x01	; 1
    20cc:	e4 de       	rcall	.-568    	; 0x1e96 <readReg>
    20ce:	84 fb       	bst	r24, 4
    20d0:	99 27       	eor	r25, r25
    20d2:	90 f9       	bld	r25, 0
    20d4:	98 83       	st	Y, r25
    20d6:	83 fb       	bst	r24, 3
    20d8:	99 27       	eor	r25, r25
    20da:	90 f9       	bld	r25, 0
    20dc:	9a 83       	std	Y+2, r25	; 0x02
    20de:	82 fb       	bst	r24, 2
    20e0:	99 27       	eor	r25, r25
    20e2:	90 f9       	bld	r25, 0
    20e4:	99 83       	std	Y+1, r25	; 0x01
    20e6:	86 fb       	bst	r24, 6
    20e8:	99 27       	eor	r25, r25
    20ea:	90 f9       	bld	r25, 0
    20ec:	9b 83       	std	Y+3, r25	; 0x03
    20ee:	88 1f       	adc	r24, r24
    20f0:	88 27       	eor	r24, r24
    20f2:	88 1f       	adc	r24, r24
    20f4:	8c 83       	std	Y+4, r24	; 0x04
    20f6:	df 91       	pop	r29
    20f8:	cf 91       	pop	r28
    20fa:	08 95       	ret

000020fc <encodeTimeout>:
    20fc:	0f 93       	push	r16
    20fe:	1f 93       	push	r17
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	19 f1       	breq	.+70     	; 0x214a <encodeTimeout+0x4e>
    2104:	ac 01       	movw	r20, r24
    2106:	41 50       	subi	r20, 0x01	; 1
    2108:	51 09       	sbc	r21, r1
    210a:	60 e0       	ldi	r22, 0x00	; 0
    210c:	70 e0       	ldi	r23, 0x00	; 0
    210e:	db 01       	movw	r26, r22
    2110:	ca 01       	movw	r24, r20
    2112:	88 27       	eor	r24, r24
    2114:	89 2b       	or	r24, r25
    2116:	8a 2b       	or	r24, r26
    2118:	8b 2b       	or	r24, r27
    211a:	79 f0       	breq	.+30     	; 0x213a <encodeTimeout+0x3e>
    211c:	80 e0       	ldi	r24, 0x00	; 0
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	76 95       	lsr	r23
    2122:	67 95       	ror	r22
    2124:	57 95       	ror	r21
    2126:	47 95       	ror	r20
    2128:	01 96       	adiw	r24, 0x01	; 1
    212a:	8a 01       	movw	r16, r20
    212c:	9b 01       	movw	r18, r22
    212e:	00 27       	eor	r16, r16
    2130:	01 2b       	or	r16, r17
    2132:	02 2b       	or	r16, r18
    2134:	03 2b       	or	r16, r19
    2136:	a1 f7       	brne	.-24     	; 0x2120 <encodeTimeout+0x24>
    2138:	02 c0       	rjmp	.+4      	; 0x213e <encodeTimeout+0x42>
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	98 2f       	mov	r25, r24
    2140:	88 27       	eor	r24, r24
    2142:	55 27       	eor	r21, r21
    2144:	84 2b       	or	r24, r20
    2146:	95 2b       	or	r25, r21
    2148:	02 c0       	rjmp	.+4      	; 0x214e <encodeTimeout+0x52>
    214a:	80 e0       	ldi	r24, 0x00	; 0
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	08 95       	ret

00002154 <decodeTimeout>:
    2154:	9c 01       	movw	r18, r24
    2156:	33 27       	eor	r19, r19
    2158:	a9 01       	movw	r20, r18
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <decodeTimeout+0xc>
    215c:	44 0f       	add	r20, r20
    215e:	55 1f       	adc	r21, r21
    2160:	9a 95       	dec	r25
    2162:	e2 f7       	brpl	.-8      	; 0x215c <decodeTimeout+0x8>
    2164:	ca 01       	movw	r24, r20
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	08 95       	ret

0000216a <timeoutMclksToMicroseconds>:
    216a:	4f 92       	push	r4
    216c:	5f 92       	push	r5
    216e:	6f 92       	push	r6
    2170:	7f 92       	push	r7
    2172:	8f 92       	push	r8
    2174:	9f 92       	push	r9
    2176:	af 92       	push	r10
    2178:	bf 92       	push	r11
    217a:	cf 92       	push	r12
    217c:	df 92       	push	r13
    217e:	ef 92       	push	r14
    2180:	ff 92       	push	r15
    2182:	3c 01       	movw	r6, r24
    2184:	a6 2f       	mov	r26, r22
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f e2       	ldi	r19, 0x2F	; 47
    218c:	4a e3       	ldi	r20, 0x3A	; 58
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	0c d6       	rcall	.+3096   	; 0x2daa <__muluhisi3>
    2192:	6b 01       	movw	r12, r22
    2194:	7c 01       	movw	r14, r24
    2196:	24 ef       	ldi	r18, 0xF4	; 244
    2198:	c2 0e       	add	r12, r18
    219a:	21 e0       	ldi	r18, 0x01	; 1
    219c:	d2 1e       	adc	r13, r18
    219e:	e1 1c       	adc	r14, r1
    21a0:	f1 1c       	adc	r15, r1
    21a2:	0f 2e       	mov	r0, r31
    21a4:	f8 ee       	ldi	r31, 0xE8	; 232
    21a6:	8f 2e       	mov	r8, r31
    21a8:	f3 e0       	ldi	r31, 0x03	; 3
    21aa:	9f 2e       	mov	r9, r31
    21ac:	a1 2c       	mov	r10, r1
    21ae:	b1 2c       	mov	r11, r1
    21b0:	f0 2d       	mov	r31, r0
    21b2:	c7 01       	movw	r24, r14
    21b4:	b6 01       	movw	r22, r12
    21b6:	a5 01       	movw	r20, r10
    21b8:	94 01       	movw	r18, r8
    21ba:	bd d5       	rcall	.+2938   	; 0x2d36 <__udivmodsi4>
    21bc:	d3 01       	movw	r26, r6
    21be:	f5 d5       	rcall	.+3050   	; 0x2daa <__muluhisi3>
    21c0:	2b 01       	movw	r4, r22
    21c2:	3c 01       	movw	r6, r24
    21c4:	c7 01       	movw	r24, r14
    21c6:	b6 01       	movw	r22, r12
    21c8:	20 ed       	ldi	r18, 0xD0	; 208
    21ca:	37 e0       	ldi	r19, 0x07	; 7
    21cc:	40 e0       	ldi	r20, 0x00	; 0
    21ce:	50 e0       	ldi	r21, 0x00	; 0
    21d0:	b2 d5       	rcall	.+2916   	; 0x2d36 <__udivmodsi4>
    21d2:	c3 01       	movw	r24, r6
    21d4:	b2 01       	movw	r22, r4
    21d6:	62 0f       	add	r22, r18
    21d8:	73 1f       	adc	r23, r19
    21da:	84 1f       	adc	r24, r20
    21dc:	95 1f       	adc	r25, r21
    21de:	a5 01       	movw	r20, r10
    21e0:	94 01       	movw	r18, r8
    21e2:	a9 d5       	rcall	.+2898   	; 0x2d36 <__udivmodsi4>
    21e4:	ca 01       	movw	r24, r20
    21e6:	b9 01       	movw	r22, r18
    21e8:	ff 90       	pop	r15
    21ea:	ef 90       	pop	r14
    21ec:	df 90       	pop	r13
    21ee:	cf 90       	pop	r12
    21f0:	bf 90       	pop	r11
    21f2:	af 90       	pop	r10
    21f4:	9f 90       	pop	r9
    21f6:	8f 90       	pop	r8
    21f8:	7f 90       	pop	r7
    21fa:	6f 90       	pop	r6
    21fc:	5f 90       	pop	r5
    21fe:	4f 90       	pop	r4
    2200:	08 95       	ret

00002202 <getVcselPulsePeriod>:
    2202:	61 11       	cpse	r22, r1
    2204:	05 c0       	rjmp	.+10     	; 0x2210 <getVcselPulsePeriod+0xe>
    2206:	60 e5       	ldi	r22, 0x50	; 80
    2208:	46 de       	rcall	.-884    	; 0x1e96 <readReg>
    220a:	8f 5f       	subi	r24, 0xFF	; 255
    220c:	88 0f       	add	r24, r24
    220e:	08 95       	ret
    2210:	61 30       	cpi	r22, 0x01	; 1
    2212:	29 f4       	brne	.+10     	; 0x221e <getVcselPulsePeriod+0x1c>
    2214:	60 e7       	ldi	r22, 0x70	; 112
    2216:	3f de       	rcall	.-898    	; 0x1e96 <readReg>
    2218:	8f 5f       	subi	r24, 0xFF	; 255
    221a:	88 0f       	add	r24, r24
    221c:	08 95       	ret
    221e:	8f ef       	ldi	r24, 0xFF	; 255
    2220:	08 95       	ret

00002222 <getSequenceStepTimeouts>:
    2222:	ef 92       	push	r14
    2224:	ff 92       	push	r15
    2226:	0f 93       	push	r16
    2228:	1f 93       	push	r17
    222a:	cf 93       	push	r28
    222c:	df 93       	push	r29
    222e:	8c 01       	movw	r16, r24
    2230:	7b 01       	movw	r14, r22
    2232:	ea 01       	movw	r28, r20
    2234:	60 e0       	ldi	r22, 0x00	; 0
    2236:	e5 df       	rcall	.-54     	; 0x2202 <getVcselPulsePeriod>
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	99 83       	std	Y+1, r25	; 0x01
    223c:	88 83       	st	Y, r24
    223e:	66 e4       	ldi	r22, 0x46	; 70
    2240:	c8 01       	movw	r24, r16
    2242:	29 de       	rcall	.-942    	; 0x1e96 <readReg>
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	9d 83       	std	Y+5, r25	; 0x05
    224a:	8c 83       	std	Y+4, r24	; 0x04
    224c:	68 81       	ld	r22, Y
    224e:	8d df       	rcall	.-230    	; 0x216a <timeoutMclksToMicroseconds>
    2250:	6a 87       	std	Y+10, r22	; 0x0a
    2252:	7b 87       	std	Y+11, r23	; 0x0b
    2254:	8c 87       	std	Y+12, r24	; 0x0c
    2256:	9d 87       	std	Y+13, r25	; 0x0d
    2258:	61 e5       	ldi	r22, 0x51	; 81
    225a:	c8 01       	movw	r24, r16
    225c:	37 de       	rcall	.-914    	; 0x1ecc <readReg16Bit>
    225e:	7a df       	rcall	.-268    	; 0x2154 <decodeTimeout>
    2260:	9f 83       	std	Y+7, r25	; 0x07
    2262:	8e 83       	std	Y+6, r24	; 0x06
    2264:	68 81       	ld	r22, Y
    2266:	81 df       	rcall	.-254    	; 0x216a <timeoutMclksToMicroseconds>
    2268:	6e 87       	std	Y+14, r22	; 0x0e
    226a:	7f 87       	std	Y+15, r23	; 0x0f
    226c:	88 8b       	std	Y+16, r24	; 0x10
    226e:	99 8b       	std	Y+17, r25	; 0x11
    2270:	61 e0       	ldi	r22, 0x01	; 1
    2272:	c8 01       	movw	r24, r16
    2274:	c6 df       	rcall	.-116    	; 0x2202 <getVcselPulsePeriod>
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9b 83       	std	Y+3, r25	; 0x03
    227a:	8a 83       	std	Y+2, r24	; 0x02
    227c:	61 e7       	ldi	r22, 0x71	; 113
    227e:	c8 01       	movw	r24, r16
    2280:	25 de       	rcall	.-950    	; 0x1ecc <readReg16Bit>
    2282:	68 df       	rcall	.-304    	; 0x2154 <decodeTimeout>
    2284:	99 87       	std	Y+9, r25	; 0x09
    2286:	88 87       	std	Y+8, r24	; 0x08
    2288:	f7 01       	movw	r30, r14
    228a:	23 81       	ldd	r18, Z+3	; 0x03
    228c:	22 23       	and	r18, r18
    228e:	31 f0       	breq	.+12     	; 0x229c <getSequenceStepTimeouts+0x7a>
    2290:	2e 81       	ldd	r18, Y+6	; 0x06
    2292:	3f 81       	ldd	r19, Y+7	; 0x07
    2294:	82 1b       	sub	r24, r18
    2296:	93 0b       	sbc	r25, r19
    2298:	99 87       	std	Y+9, r25	; 0x09
    229a:	88 87       	std	Y+8, r24	; 0x08
    229c:	6a 81       	ldd	r22, Y+2	; 0x02
    229e:	88 85       	ldd	r24, Y+8	; 0x08
    22a0:	99 85       	ldd	r25, Y+9	; 0x09
    22a2:	63 df       	rcall	.-314    	; 0x216a <timeoutMclksToMicroseconds>
    22a4:	6a 8b       	std	Y+18, r22	; 0x12
    22a6:	7b 8b       	std	Y+19, r23	; 0x13
    22a8:	8c 8b       	std	Y+20, r24	; 0x14
    22aa:	9d 8b       	std	Y+21, r25	; 0x15
    22ac:	df 91       	pop	r29
    22ae:	cf 91       	pop	r28
    22b0:	1f 91       	pop	r17
    22b2:	0f 91       	pop	r16
    22b4:	ff 90       	pop	r15
    22b6:	ef 90       	pop	r14
    22b8:	08 95       	ret

000022ba <timeoutMicrosecondsToMclks>:
    22ba:	8f 92       	push	r8
    22bc:	9f 92       	push	r9
    22be:	af 92       	push	r10
    22c0:	bf 92       	push	r11
    22c2:	cf 92       	push	r12
    22c4:	df 92       	push	r13
    22c6:	ef 92       	push	r14
    22c8:	ff 92       	push	r15
    22ca:	4b 01       	movw	r8, r22
    22cc:	5c 01       	movw	r10, r24
    22ce:	a4 2f       	mov	r26, r20
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	3f e2       	ldi	r19, 0x2F	; 47
    22d6:	4a e3       	ldi	r20, 0x3A	; 58
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	67 d5       	rcall	.+2766   	; 0x2daa <__muluhisi3>
    22dc:	6b 01       	movw	r12, r22
    22de:	7c 01       	movw	r14, r24
    22e0:	24 ef       	ldi	r18, 0xF4	; 244
    22e2:	c2 0e       	add	r12, r18
    22e4:	21 e0       	ldi	r18, 0x01	; 1
    22e6:	d2 1e       	adc	r13, r18
    22e8:	e1 1c       	adc	r14, r1
    22ea:	f1 1c       	adc	r15, r1
    22ec:	a8 ee       	ldi	r26, 0xE8	; 232
    22ee:	b3 e0       	ldi	r27, 0x03	; 3
    22f0:	a5 01       	movw	r20, r10
    22f2:	94 01       	movw	r18, r8
    22f4:	5a d5       	rcall	.+2740   	; 0x2daa <__muluhisi3>
    22f6:	4b 01       	movw	r8, r22
    22f8:	5c 01       	movw	r10, r24
    22fa:	c7 01       	movw	r24, r14
    22fc:	b6 01       	movw	r22, r12
    22fe:	20 ed       	ldi	r18, 0xD0	; 208
    2300:	37 e0       	ldi	r19, 0x07	; 7
    2302:	40 e0       	ldi	r20, 0x00	; 0
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	17 d5       	rcall	.+2606   	; 0x2d36 <__udivmodsi4>
    2308:	82 0e       	add	r8, r18
    230a:	93 1e       	adc	r9, r19
    230c:	a4 1e       	adc	r10, r20
    230e:	b5 1e       	adc	r11, r21
    2310:	c7 01       	movw	r24, r14
    2312:	b6 01       	movw	r22, r12
    2314:	28 ee       	ldi	r18, 0xE8	; 232
    2316:	33 e0       	ldi	r19, 0x03	; 3
    2318:	40 e0       	ldi	r20, 0x00	; 0
    231a:	50 e0       	ldi	r21, 0x00	; 0
    231c:	0c d5       	rcall	.+2584   	; 0x2d36 <__udivmodsi4>
    231e:	c5 01       	movw	r24, r10
    2320:	b4 01       	movw	r22, r8
    2322:	09 d5       	rcall	.+2578   	; 0x2d36 <__udivmodsi4>
    2324:	ca 01       	movw	r24, r20
    2326:	b9 01       	movw	r22, r18
    2328:	ff 90       	pop	r15
    232a:	ef 90       	pop	r14
    232c:	df 90       	pop	r13
    232e:	cf 90       	pop	r12
    2330:	bf 90       	pop	r11
    2332:	af 90       	pop	r10
    2334:	9f 90       	pop	r9
    2336:	8f 90       	pop	r8
    2338:	08 95       	ret

0000233a <performSingleRefCalibration>:
    233a:	cf 93       	push	r28
    233c:	df 93       	push	r29
    233e:	ec 01       	movw	r28, r24
    2340:	46 2f       	mov	r20, r22
    2342:	41 60       	ori	r20, 0x01	; 1
    2344:	60 e0       	ldi	r22, 0x00	; 0
    2346:	53 dd       	rcall	.-1370   	; 0x1dee <writeReg>
    2348:	ce 01       	movw	r24, r28
    234a:	21 dd       	rcall	.-1470   	; 0x1d8e <startTimeout>
    234c:	04 c0       	rjmp	.+8      	; 0x2356 <performSingleRefCalibration+0x1c>
    234e:	ce 01       	movw	r24, r28
    2350:	2a dd       	rcall	.-1452   	; 0x1da6 <checkTimeoutExpired>
    2352:	81 11       	cpse	r24, r1
    2354:	0f c0       	rjmp	.+30     	; 0x2374 <performSingleRefCalibration+0x3a>
    2356:	63 e1       	ldi	r22, 0x13	; 19
    2358:	ce 01       	movw	r24, r28
    235a:	9d dd       	rcall	.-1222   	; 0x1e96 <readReg>
    235c:	87 70       	andi	r24, 0x07	; 7
    235e:	b9 f3       	breq	.-18     	; 0x234e <performSingleRefCalibration+0x14>
    2360:	41 e0       	ldi	r20, 0x01	; 1
    2362:	6b e0       	ldi	r22, 0x0B	; 11
    2364:	ce 01       	movw	r24, r28
    2366:	43 dd       	rcall	.-1402   	; 0x1dee <writeReg>
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	ce 01       	movw	r24, r28
    236e:	3f dd       	rcall	.-1410   	; 0x1dee <writeReg>
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	01 c0       	rjmp	.+2      	; 0x2376 <performSingleRefCalibration+0x3c>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	df 91       	pop	r29
    2378:	cf 91       	pop	r28
    237a:	08 95       	ret

0000237c <setMeasurementTimingBudget>:
    237c:	8f 92       	push	r8
    237e:	9f 92       	push	r9
    2380:	af 92       	push	r10
    2382:	bf 92       	push	r11
    2384:	df 92       	push	r13
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	6b 97       	sbiw	r28, 0x1b	; 27
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	40 32       	cpi	r20, 0x20	; 32
    23a4:	2e e4       	ldi	r18, 0x4E	; 78
    23a6:	52 07       	cpc	r21, r18
    23a8:	61 05       	cpc	r22, r1
    23aa:	71 05       	cpc	r23, r1
    23ac:	08 f4       	brcc	.+2      	; 0x23b0 <setMeasurementTimingBudget+0x34>
    23ae:	74 c0       	rjmp	.+232    	; 0x2498 <setMeasurementTimingBudget+0x11c>
    23b0:	4a 01       	movw	r8, r20
    23b2:	5b 01       	movw	r10, r22
    23b4:	7c 01       	movw	r14, r24
    23b6:	be 01       	movw	r22, r28
    23b8:	6f 5f       	subi	r22, 0xFF	; 255
    23ba:	7f 4f       	sbci	r23, 0xFF	; 255
    23bc:	83 de       	rcall	.-762    	; 0x20c4 <getSequenceStepEnables>
    23be:	ae 01       	movw	r20, r28
    23c0:	4a 5f       	subi	r20, 0xFA	; 250
    23c2:	5f 4f       	sbci	r21, 0xFF	; 255
    23c4:	be 01       	movw	r22, r28
    23c6:	6f 5f       	subi	r22, 0xFF	; 255
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	c7 01       	movw	r24, r14
    23cc:	2a df       	rcall	.-428    	; 0x2222 <getSequenceStepTimeouts>
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	88 23       	and	r24, r24
    23d2:	49 f0       	breq	.+18     	; 0x23e6 <setMeasurementTimingBudget+0x6a>
    23d4:	08 89       	ldd	r16, Y+16	; 0x10
    23d6:	19 89       	ldd	r17, Y+17	; 0x11
    23d8:	2a 89       	ldd	r18, Y+18	; 0x12
    23da:	3b 89       	ldd	r19, Y+19	; 0x13
    23dc:	0a 5c       	subi	r16, 0xCA	; 202
    23de:	14 4f       	sbci	r17, 0xF4	; 244
    23e0:	2f 4f       	sbci	r18, 0xFF	; 255
    23e2:	3f 4f       	sbci	r19, 0xFF	; 255
    23e4:	04 c0       	rjmp	.+8      	; 0x23ee <setMeasurementTimingBudget+0x72>
    23e6:	08 ee       	ldi	r16, 0xE8	; 232
    23e8:	18 e0       	ldi	r17, 0x08	; 8
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	88 23       	and	r24, r24
    23f2:	89 f0       	breq	.+34     	; 0x2416 <setMeasurementTimingBudget+0x9a>
    23f4:	88 89       	ldd	r24, Y+16	; 0x10
    23f6:	99 89       	ldd	r25, Y+17	; 0x11
    23f8:	aa 89       	ldd	r26, Y+18	; 0x12
    23fa:	bb 89       	ldd	r27, Y+19	; 0x13
    23fc:	8e 54       	subi	r24, 0x4E	; 78
    23fe:	9d 4f       	sbci	r25, 0xFD	; 253
    2400:	af 4f       	sbci	r26, 0xFF	; 255
    2402:	bf 4f       	sbci	r27, 0xFF	; 255
    2404:	88 0f       	add	r24, r24
    2406:	99 1f       	adc	r25, r25
    2408:	aa 1f       	adc	r26, r26
    240a:	bb 1f       	adc	r27, r27
    240c:	08 0f       	add	r16, r24
    240e:	19 1f       	adc	r17, r25
    2410:	2a 1f       	adc	r18, r26
    2412:	3b 1f       	adc	r19, r27
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <setMeasurementTimingBudget+0xb8>
    2416:	8a 81       	ldd	r24, Y+2	; 0x02
    2418:	88 23       	and	r24, r24
    241a:	61 f0       	breq	.+24     	; 0x2434 <setMeasurementTimingBudget+0xb8>
    241c:	88 89       	ldd	r24, Y+16	; 0x10
    241e:	99 89       	ldd	r25, Y+17	; 0x11
    2420:	aa 89       	ldd	r26, Y+18	; 0x12
    2422:	bb 89       	ldd	r27, Y+19	; 0x13
    2424:	8c 56       	subi	r24, 0x6C	; 108
    2426:	9d 4f       	sbci	r25, 0xFD	; 253
    2428:	af 4f       	sbci	r26, 0xFF	; 255
    242a:	bf 4f       	sbci	r27, 0xFF	; 255
    242c:	08 0f       	add	r16, r24
    242e:	19 1f       	adc	r17, r25
    2430:	2a 1f       	adc	r18, r26
    2432:	3b 1f       	adc	r19, r27
    2434:	dc 80       	ldd	r13, Y+4	; 0x04
    2436:	dd 20       	and	r13, r13
    2438:	61 f0       	breq	.+24     	; 0x2452 <setMeasurementTimingBudget+0xd6>
    243a:	8c 89       	ldd	r24, Y+20	; 0x14
    243c:	9d 89       	ldd	r25, Y+21	; 0x15
    243e:	ae 89       	ldd	r26, Y+22	; 0x16
    2440:	bf 89       	ldd	r27, Y+23	; 0x17
    2442:	8c 56       	subi	r24, 0x6C	; 108
    2444:	9d 4f       	sbci	r25, 0xFD	; 253
    2446:	af 4f       	sbci	r26, 0xFF	; 255
    2448:	bf 4f       	sbci	r27, 0xFF	; 255
    244a:	08 0f       	add	r16, r24
    244c:	19 1f       	adc	r17, r25
    244e:	2a 1f       	adc	r18, r26
    2450:	3b 1f       	adc	r19, r27
    2452:	8d 81       	ldd	r24, Y+5	; 0x05
    2454:	88 23       	and	r24, r24
    2456:	11 f1       	breq	.+68     	; 0x249c <setMeasurementTimingBudget+0x120>
    2458:	0a 5d       	subi	r16, 0xDA	; 218
    245a:	1d 4f       	sbci	r17, 0xFD	; 253
    245c:	2f 4f       	sbci	r18, 0xFF	; 255
    245e:	3f 4f       	sbci	r19, 0xFF	; 255
    2460:	80 16       	cp	r8, r16
    2462:	91 06       	cpc	r9, r17
    2464:	a2 06       	cpc	r10, r18
    2466:	b3 06       	cpc	r11, r19
    2468:	d8 f0       	brcs	.+54     	; 0x24a0 <setMeasurementTimingBudget+0x124>
    246a:	c5 01       	movw	r24, r10
    246c:	b4 01       	movw	r22, r8
    246e:	60 1b       	sub	r22, r16
    2470:	71 0b       	sbc	r23, r17
    2472:	82 0b       	sbc	r24, r18
    2474:	93 0b       	sbc	r25, r19
    2476:	48 85       	ldd	r20, Y+8	; 0x08
    2478:	20 df       	rcall	.-448    	; 0x22ba <timeoutMicrosecondsToMclks>
    247a:	9b 01       	movw	r18, r22
    247c:	dd 20       	and	r13, r13
    247e:	21 f0       	breq	.+8      	; 0x2488 <setMeasurementTimingBudget+0x10c>
    2480:	2c 85       	ldd	r18, Y+12	; 0x0c
    2482:	3d 85       	ldd	r19, Y+13	; 0x0d
    2484:	26 0f       	add	r18, r22
    2486:	37 1f       	adc	r19, r23
    2488:	c9 01       	movw	r24, r18
    248a:	38 de       	rcall	.-912    	; 0x20fc <encodeTimeout>
    248c:	ac 01       	movw	r20, r24
    248e:	61 e7       	ldi	r22, 0x71	; 113
    2490:	c7 01       	movw	r24, r14
    2492:	c1 dc       	rcall	.-1662   	; 0x1e16 <writeReg16Bit>
    2494:	81 e0       	ldi	r24, 0x01	; 1
    2496:	05 c0       	rjmp	.+10     	; 0x24a2 <setMeasurementTimingBudget+0x126>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	03 c0       	rjmp	.+6      	; 0x24a2 <setMeasurementTimingBudget+0x126>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	01 c0       	rjmp	.+2      	; 0x24a2 <setMeasurementTimingBudget+0x126>
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	6b 96       	adiw	r28, 0x1b	; 27
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	de bf       	out	0x3e, r29	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	cd bf       	out	0x3d, r28	; 61
    24ae:	df 91       	pop	r29
    24b0:	cf 91       	pop	r28
    24b2:	1f 91       	pop	r17
    24b4:	0f 91       	pop	r16
    24b6:	ff 90       	pop	r15
    24b8:	ef 90       	pop	r14
    24ba:	df 90       	pop	r13
    24bc:	bf 90       	pop	r11
    24be:	af 90       	pop	r10
    24c0:	9f 90       	pop	r9
    24c2:	8f 90       	pop	r8
    24c4:	08 95       	ret

000024c6 <vl53l0x_init>:
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	ec 01       	movw	r28, r24
    24cc:	80 e8       	ldi	r24, 0x80	; 128
    24ce:	9a e1       	ldi	r25, 0x1A	; 26
    24d0:	a6 e0       	ldi	r26, 0x06	; 6
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <s_i2cInterface>
    24d8:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <s_i2cInterface+0x1>
    24dc:	a0 93 a6 01 	sts	0x01A6, r26	; 0x8001a6 <s_i2cInterface+0x2>
    24e0:	b0 93 a7 01 	sts	0x01A7, r27	; 0x8001a7 <s_i2cInterface+0x3>
    24e4:	60 e8       	ldi	r22, 0x80	; 128
    24e6:	7a e1       	ldi	r23, 0x1A	; 26
    24e8:	86 e0       	ldi	r24, 0x06	; 6
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 b7 02 	call	0x56e	; 0x56e <i2c_init>
    24f0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_start>
    24f4:	1a 82       	std	Y+2, r1	; 0x02
    24f6:	19 82       	std	Y+1, r1	; 0x01
    24f8:	1b 82       	std	Y+3, r1	; 0x03
    24fa:	6c 81       	ldd	r22, Y+4	; 0x04
    24fc:	7d 81       	ldd	r23, Y+5	; 0x05
    24fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2500:	9f 81       	ldd	r25, Y+7	; 0x07
    2502:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <gpio_init>
    2506:	ce 01       	movw	r24, r28
    2508:	04 96       	adiw	r24, 0x04	; 4
    250a:	0e 94 1c 02 	call	0x438	; 0x438 <gpio_setDirectionOutput>
    250e:	6c 81       	ldd	r22, Y+4	; 0x04
    2510:	7d 81       	ldd	r23, Y+5	; 0x05
    2512:	8e 81       	ldd	r24, Y+6	; 0x06
    2514:	9f 81       	ldd	r25, Y+7	; 0x07
    2516:	0e 94 41 02 	call	0x482	; 0x482 <gpio_out_reset>
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	08 95       	ret

00002520 <vl53l0x_start>:
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	cd b7       	in	r28, 0x3d	; 61
    252a:	de b7       	in	r29, 0x3e	; 62
    252c:	28 97       	sbiw	r28, 0x08	; 8
    252e:	0f b6       	in	r0, 0x3f	; 63
    2530:	f8 94       	cli
    2532:	de bf       	out	0x3e, r29	; 62
    2534:	0f be       	out	0x3f, r0	; 63
    2536:	cd bf       	out	0x3d, r28	; 61
    2538:	8c 01       	movw	r16, r24
    253a:	fc 01       	movw	r30, r24
    253c:	64 81       	ldd	r22, Z+4	; 0x04
    253e:	75 81       	ldd	r23, Z+5	; 0x05
    2540:	86 81       	ldd	r24, Z+6	; 0x06
    2542:	97 81       	ldd	r25, Z+7	; 0x07
    2544:	0e 94 25 02 	call	0x44a	; 0x44a <gpio_out_set>
    2548:	8f e9       	ldi	r24, 0x9F	; 159
    254a:	9f e0       	ldi	r25, 0x0F	; 15
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <vl53l0x_start+0x2c>
    2550:	00 c0       	rjmp	.+0      	; 0x2552 <vl53l0x_start+0x32>
    2552:	00 00       	nop
    2554:	69 e8       	ldi	r22, 0x89	; 137
    2556:	c8 01       	movw	r24, r16
    2558:	9e dc       	rcall	.-1732   	; 0x1e96 <readReg>
    255a:	48 2f       	mov	r20, r24
    255c:	41 60       	ori	r20, 0x01	; 1
    255e:	69 e8       	ldi	r22, 0x89	; 137
    2560:	c8 01       	movw	r24, r16
    2562:	45 dc       	rcall	.-1910   	; 0x1dee <writeReg>
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	68 e8       	ldi	r22, 0x88	; 136
    2568:	c8 01       	movw	r24, r16
    256a:	41 dc       	rcall	.-1918   	; 0x1dee <writeReg>
    256c:	41 e0       	ldi	r20, 0x01	; 1
    256e:	60 e8       	ldi	r22, 0x80	; 128
    2570:	c8 01       	movw	r24, r16
    2572:	3d dc       	rcall	.-1926   	; 0x1dee <writeReg>
    2574:	41 e0       	ldi	r20, 0x01	; 1
    2576:	6f ef       	ldi	r22, 0xFF	; 255
    2578:	c8 01       	movw	r24, r16
    257a:	39 dc       	rcall	.-1934   	; 0x1dee <writeReg>
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	60 e0       	ldi	r22, 0x00	; 0
    2580:	c8 01       	movw	r24, r16
    2582:	35 dc       	rcall	.-1942   	; 0x1dee <writeReg>
    2584:	61 e9       	ldi	r22, 0x91	; 145
    2586:	c8 01       	movw	r24, r16
    2588:	86 dc       	rcall	.-1780   	; 0x1e96 <readReg>
    258a:	f8 01       	movw	r30, r16
    258c:	82 87       	std	Z+10, r24	; 0x0a
    258e:	41 e0       	ldi	r20, 0x01	; 1
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	c8 01       	movw	r24, r16
    2594:	2c dc       	rcall	.-1960   	; 0x1dee <writeReg>
    2596:	40 e0       	ldi	r20, 0x00	; 0
    2598:	6f ef       	ldi	r22, 0xFF	; 255
    259a:	c8 01       	movw	r24, r16
    259c:	28 dc       	rcall	.-1968   	; 0x1dee <writeReg>
    259e:	40 e0       	ldi	r20, 0x00	; 0
    25a0:	60 e8       	ldi	r22, 0x80	; 128
    25a2:	c8 01       	movw	r24, r16
    25a4:	24 dc       	rcall	.-1976   	; 0x1dee <writeReg>
    25a6:	60 e6       	ldi	r22, 0x60	; 96
    25a8:	c8 01       	movw	r24, r16
    25aa:	75 dc       	rcall	.-1814   	; 0x1e96 <readReg>
    25ac:	48 2f       	mov	r20, r24
    25ae:	42 61       	ori	r20, 0x12	; 18
    25b0:	60 e6       	ldi	r22, 0x60	; 96
    25b2:	c8 01       	movw	r24, r16
    25b4:	1c dc       	rcall	.-1992   	; 0x1dee <writeReg>
    25b6:	40 e2       	ldi	r20, 0x20	; 32
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	64 e4       	ldi	r22, 0x44	; 68
    25bc:	c8 01       	movw	r24, r16
    25be:	2b dc       	rcall	.-1962   	; 0x1e16 <writeReg16Bit>
    25c0:	4f ef       	ldi	r20, 0xFF	; 255
    25c2:	61 e0       	ldi	r22, 0x01	; 1
    25c4:	c8 01       	movw	r24, r16
    25c6:	13 dc       	rcall	.-2010   	; 0x1dee <writeReg>
    25c8:	ae 01       	movw	r20, r28
    25ca:	4e 5f       	subi	r20, 0xFE	; 254
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255
    25ce:	be 01       	movw	r22, r28
    25d0:	6f 5f       	subi	r22, 0xFF	; 255
    25d2:	7f 4f       	sbci	r23, 0xFF	; 255
    25d4:	c8 01       	movw	r24, r16
    25d6:	fc dc       	rcall	.-1544   	; 0x1fd0 <getSpadInfo>
    25d8:	88 23       	and	r24, r24
    25da:	09 f4       	brne	.+2      	; 0x25de <vl53l0x_start+0xbe>
    25dc:	d2 c1       	rjmp	.+932    	; 0x2982 <vl53l0x_start+0x462>
    25de:	26 e0       	ldi	r18, 0x06	; 6
    25e0:	ae 01       	movw	r20, r28
    25e2:	4d 5f       	subi	r20, 0xFD	; 253
    25e4:	5f 4f       	sbci	r21, 0xFF	; 255
    25e6:	60 eb       	ldi	r22, 0xB0	; 176
    25e8:	c8 01       	movw	r24, r16
    25ea:	bc dc       	rcall	.-1672   	; 0x1f64 <readMulti>
    25ec:	41 e0       	ldi	r20, 0x01	; 1
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	c8 01       	movw	r24, r16
    25f2:	fd db       	rcall	.-2054   	; 0x1dee <writeReg>
    25f4:	40 e0       	ldi	r20, 0x00	; 0
    25f6:	6f e4       	ldi	r22, 0x4F	; 79
    25f8:	c8 01       	movw	r24, r16
    25fa:	f9 db       	rcall	.-2062   	; 0x1dee <writeReg>
    25fc:	4c e2       	ldi	r20, 0x2C	; 44
    25fe:	6e e4       	ldi	r22, 0x4E	; 78
    2600:	c8 01       	movw	r24, r16
    2602:	f5 db       	rcall	.-2070   	; 0x1dee <writeReg>
    2604:	40 e0       	ldi	r20, 0x00	; 0
    2606:	6f ef       	ldi	r22, 0xFF	; 255
    2608:	c8 01       	movw	r24, r16
    260a:	f1 db       	rcall	.-2078   	; 0x1dee <writeReg>
    260c:	44 eb       	ldi	r20, 0xB4	; 180
    260e:	66 eb       	ldi	r22, 0xB6	; 182
    2610:	c8 01       	movw	r24, r16
    2612:	ed db       	rcall	.-2086   	; 0x1dee <writeReg>
    2614:	8a 81       	ldd	r24, Y+2	; 0x02
    2616:	81 11       	cpse	r24, r1
    2618:	02 c0       	rjmp	.+4      	; 0x261e <vl53l0x_start+0xfe>
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	01 c0       	rjmp	.+2      	; 0x2620 <vl53l0x_start+0x100>
    261e:	6c e0       	ldi	r22, 0x0C	; 12
    2620:	a9 81       	ldd	r26, Y+1	; 0x01
    2622:	80 e0       	ldi	r24, 0x00	; 0
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	41 e0       	ldi	r20, 0x01	; 1
    2628:	50 e0       	ldi	r21, 0x00	; 0
    262a:	86 17       	cp	r24, r22
    262c:	10 f0       	brcs	.+4      	; 0x2632 <vl53l0x_start+0x112>
    262e:	a7 13       	cpse	r26, r23
    2630:	18 c0       	rjmp	.+48     	; 0x2662 <vl53l0x_start+0x142>
    2632:	98 2f       	mov	r25, r24
    2634:	96 95       	lsr	r25
    2636:	96 95       	lsr	r25
    2638:	96 95       	lsr	r25
    263a:	e3 e0       	ldi	r30, 0x03	; 3
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	ec 0f       	add	r30, r28
    2640:	fd 1f       	adc	r31, r29
    2642:	e9 0f       	add	r30, r25
    2644:	f1 1d       	adc	r31, r1
    2646:	98 2f       	mov	r25, r24
    2648:	97 70       	andi	r25, 0x07	; 7
    264a:	9a 01       	movw	r18, r20
    264c:	02 c0       	rjmp	.+4      	; 0x2652 <vl53l0x_start+0x132>
    264e:	22 0f       	add	r18, r18
    2650:	33 1f       	adc	r19, r19
    2652:	9a 95       	dec	r25
    2654:	e2 f7       	brpl	.-8      	; 0x264e <vl53l0x_start+0x12e>
    2656:	92 2f       	mov	r25, r18
    2658:	90 95       	com	r25
    265a:	20 81       	ld	r18, Z
    265c:	92 23       	and	r25, r18
    265e:	90 83       	st	Z, r25
    2660:	15 c0       	rjmp	.+42     	; 0x268c <vl53l0x_start+0x16c>
    2662:	98 2f       	mov	r25, r24
    2664:	96 95       	lsr	r25
    2666:	96 95       	lsr	r25
    2668:	96 95       	lsr	r25
    266a:	e3 e0       	ldi	r30, 0x03	; 3
    266c:	f0 e0       	ldi	r31, 0x00	; 0
    266e:	ec 0f       	add	r30, r28
    2670:	fd 1f       	adc	r31, r29
    2672:	e9 0f       	add	r30, r25
    2674:	f1 1d       	adc	r31, r1
    2676:	20 81       	ld	r18, Z
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	98 2f       	mov	r25, r24
    267c:	97 70       	andi	r25, 0x07	; 7
    267e:	02 c0       	rjmp	.+4      	; 0x2684 <vl53l0x_start+0x164>
    2680:	35 95       	asr	r19
    2682:	27 95       	ror	r18
    2684:	9a 95       	dec	r25
    2686:	e2 f7       	brpl	.-8      	; 0x2680 <vl53l0x_start+0x160>
    2688:	20 fd       	sbrc	r18, 0
    268a:	7f 5f       	subi	r23, 0xFF	; 255
    268c:	8f 5f       	subi	r24, 0xFF	; 255
    268e:	80 33       	cpi	r24, 0x30	; 48
    2690:	61 f6       	brne	.-104    	; 0x262a <vl53l0x_start+0x10a>
    2692:	26 e0       	ldi	r18, 0x06	; 6
    2694:	ae 01       	movw	r20, r28
    2696:	4d 5f       	subi	r20, 0xFD	; 253
    2698:	5f 4f       	sbci	r21, 0xFF	; 255
    269a:	60 eb       	ldi	r22, 0xB0	; 176
    269c:	c8 01       	movw	r24, r16
    269e:	37 dc       	rcall	.-1938   	; 0x1f0e <writeMulti>
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	6f ef       	ldi	r22, 0xFF	; 255
    26a4:	c8 01       	movw	r24, r16
    26a6:	a3 db       	rcall	.-2234   	; 0x1dee <writeReg>
    26a8:	40 e0       	ldi	r20, 0x00	; 0
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	c8 01       	movw	r24, r16
    26ae:	9f db       	rcall	.-2242   	; 0x1dee <writeReg>
    26b0:	40 e0       	ldi	r20, 0x00	; 0
    26b2:	6f ef       	ldi	r22, 0xFF	; 255
    26b4:	c8 01       	movw	r24, r16
    26b6:	9b db       	rcall	.-2250   	; 0x1dee <writeReg>
    26b8:	40 e0       	ldi	r20, 0x00	; 0
    26ba:	69 e0       	ldi	r22, 0x09	; 9
    26bc:	c8 01       	movw	r24, r16
    26be:	97 db       	rcall	.-2258   	; 0x1dee <writeReg>
    26c0:	40 e0       	ldi	r20, 0x00	; 0
    26c2:	60 e1       	ldi	r22, 0x10	; 16
    26c4:	c8 01       	movw	r24, r16
    26c6:	93 db       	rcall	.-2266   	; 0x1dee <writeReg>
    26c8:	40 e0       	ldi	r20, 0x00	; 0
    26ca:	61 e1       	ldi	r22, 0x11	; 17
    26cc:	c8 01       	movw	r24, r16
    26ce:	8f db       	rcall	.-2274   	; 0x1dee <writeReg>
    26d0:	41 e0       	ldi	r20, 0x01	; 1
    26d2:	64 e2       	ldi	r22, 0x24	; 36
    26d4:	c8 01       	movw	r24, r16
    26d6:	8b db       	rcall	.-2282   	; 0x1dee <writeReg>
    26d8:	4f ef       	ldi	r20, 0xFF	; 255
    26da:	65 e2       	ldi	r22, 0x25	; 37
    26dc:	c8 01       	movw	r24, r16
    26de:	87 db       	rcall	.-2290   	; 0x1dee <writeReg>
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	65 e7       	ldi	r22, 0x75	; 117
    26e4:	c8 01       	movw	r24, r16
    26e6:	83 db       	rcall	.-2298   	; 0x1dee <writeReg>
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	6f ef       	ldi	r22, 0xFF	; 255
    26ec:	c8 01       	movw	r24, r16
    26ee:	7f db       	rcall	.-2306   	; 0x1dee <writeReg>
    26f0:	4c e2       	ldi	r20, 0x2C	; 44
    26f2:	6e e4       	ldi	r22, 0x4E	; 78
    26f4:	c8 01       	movw	r24, r16
    26f6:	7b db       	rcall	.-2314   	; 0x1dee <writeReg>
    26f8:	40 e0       	ldi	r20, 0x00	; 0
    26fa:	68 e4       	ldi	r22, 0x48	; 72
    26fc:	c8 01       	movw	r24, r16
    26fe:	77 db       	rcall	.-2322   	; 0x1dee <writeReg>
    2700:	40 e2       	ldi	r20, 0x20	; 32
    2702:	60 e3       	ldi	r22, 0x30	; 48
    2704:	c8 01       	movw	r24, r16
    2706:	73 db       	rcall	.-2330   	; 0x1dee <writeReg>
    2708:	40 e0       	ldi	r20, 0x00	; 0
    270a:	6f ef       	ldi	r22, 0xFF	; 255
    270c:	c8 01       	movw	r24, r16
    270e:	6f db       	rcall	.-2338   	; 0x1dee <writeReg>
    2710:	49 e0       	ldi	r20, 0x09	; 9
    2712:	60 e3       	ldi	r22, 0x30	; 48
    2714:	c8 01       	movw	r24, r16
    2716:	6b db       	rcall	.-2346   	; 0x1dee <writeReg>
    2718:	40 e0       	ldi	r20, 0x00	; 0
    271a:	64 e5       	ldi	r22, 0x54	; 84
    271c:	c8 01       	movw	r24, r16
    271e:	67 db       	rcall	.-2354   	; 0x1dee <writeReg>
    2720:	44 e0       	ldi	r20, 0x04	; 4
    2722:	61 e3       	ldi	r22, 0x31	; 49
    2724:	c8 01       	movw	r24, r16
    2726:	63 db       	rcall	.-2362   	; 0x1dee <writeReg>
    2728:	43 e0       	ldi	r20, 0x03	; 3
    272a:	62 e3       	ldi	r22, 0x32	; 50
    272c:	c8 01       	movw	r24, r16
    272e:	5f db       	rcall	.-2370   	; 0x1dee <writeReg>
    2730:	43 e8       	ldi	r20, 0x83	; 131
    2732:	60 e4       	ldi	r22, 0x40	; 64
    2734:	c8 01       	movw	r24, r16
    2736:	5b db       	rcall	.-2378   	; 0x1dee <writeReg>
    2738:	45 e2       	ldi	r20, 0x25	; 37
    273a:	66 e4       	ldi	r22, 0x46	; 70
    273c:	c8 01       	movw	r24, r16
    273e:	57 db       	rcall	.-2386   	; 0x1dee <writeReg>
    2740:	40 e0       	ldi	r20, 0x00	; 0
    2742:	60 e6       	ldi	r22, 0x60	; 96
    2744:	c8 01       	movw	r24, r16
    2746:	53 db       	rcall	.-2394   	; 0x1dee <writeReg>
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	67 e2       	ldi	r22, 0x27	; 39
    274c:	c8 01       	movw	r24, r16
    274e:	4f db       	rcall	.-2402   	; 0x1dee <writeReg>
    2750:	46 e0       	ldi	r20, 0x06	; 6
    2752:	60 e5       	ldi	r22, 0x50	; 80
    2754:	c8 01       	movw	r24, r16
    2756:	4b db       	rcall	.-2410   	; 0x1dee <writeReg>
    2758:	40 e0       	ldi	r20, 0x00	; 0
    275a:	61 e5       	ldi	r22, 0x51	; 81
    275c:	c8 01       	movw	r24, r16
    275e:	47 db       	rcall	.-2418   	; 0x1dee <writeReg>
    2760:	46 e9       	ldi	r20, 0x96	; 150
    2762:	62 e5       	ldi	r22, 0x52	; 82
    2764:	c8 01       	movw	r24, r16
    2766:	43 db       	rcall	.-2426   	; 0x1dee <writeReg>
    2768:	48 e0       	ldi	r20, 0x08	; 8
    276a:	66 e5       	ldi	r22, 0x56	; 86
    276c:	c8 01       	movw	r24, r16
    276e:	3f db       	rcall	.-2434   	; 0x1dee <writeReg>
    2770:	40 e3       	ldi	r20, 0x30	; 48
    2772:	67 e5       	ldi	r22, 0x57	; 87
    2774:	c8 01       	movw	r24, r16
    2776:	3b db       	rcall	.-2442   	; 0x1dee <writeReg>
    2778:	40 e0       	ldi	r20, 0x00	; 0
    277a:	61 e6       	ldi	r22, 0x61	; 97
    277c:	c8 01       	movw	r24, r16
    277e:	37 db       	rcall	.-2450   	; 0x1dee <writeReg>
    2780:	40 e0       	ldi	r20, 0x00	; 0
    2782:	62 e6       	ldi	r22, 0x62	; 98
    2784:	c8 01       	movw	r24, r16
    2786:	33 db       	rcall	.-2458   	; 0x1dee <writeReg>
    2788:	40 e0       	ldi	r20, 0x00	; 0
    278a:	64 e6       	ldi	r22, 0x64	; 100
    278c:	c8 01       	movw	r24, r16
    278e:	2f db       	rcall	.-2466   	; 0x1dee <writeReg>
    2790:	40 e0       	ldi	r20, 0x00	; 0
    2792:	65 e6       	ldi	r22, 0x65	; 101
    2794:	c8 01       	movw	r24, r16
    2796:	2b db       	rcall	.-2474   	; 0x1dee <writeReg>
    2798:	40 ea       	ldi	r20, 0xA0	; 160
    279a:	66 e6       	ldi	r22, 0x66	; 102
    279c:	c8 01       	movw	r24, r16
    279e:	27 db       	rcall	.-2482   	; 0x1dee <writeReg>
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	6f ef       	ldi	r22, 0xFF	; 255
    27a4:	c8 01       	movw	r24, r16
    27a6:	23 db       	rcall	.-2490   	; 0x1dee <writeReg>
    27a8:	42 e3       	ldi	r20, 0x32	; 50
    27aa:	62 e2       	ldi	r22, 0x22	; 34
    27ac:	c8 01       	movw	r24, r16
    27ae:	1f db       	rcall	.-2498   	; 0x1dee <writeReg>
    27b0:	44 e1       	ldi	r20, 0x14	; 20
    27b2:	67 e4       	ldi	r22, 0x47	; 71
    27b4:	c8 01       	movw	r24, r16
    27b6:	1b db       	rcall	.-2506   	; 0x1dee <writeReg>
    27b8:	4f ef       	ldi	r20, 0xFF	; 255
    27ba:	69 e4       	ldi	r22, 0x49	; 73
    27bc:	c8 01       	movw	r24, r16
    27be:	17 db       	rcall	.-2514   	; 0x1dee <writeReg>
    27c0:	40 e0       	ldi	r20, 0x00	; 0
    27c2:	6a e4       	ldi	r22, 0x4A	; 74
    27c4:	c8 01       	movw	r24, r16
    27c6:	13 db       	rcall	.-2522   	; 0x1dee <writeReg>
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	6f ef       	ldi	r22, 0xFF	; 255
    27cc:	c8 01       	movw	r24, r16
    27ce:	0f db       	rcall	.-2530   	; 0x1dee <writeReg>
    27d0:	4a e0       	ldi	r20, 0x0A	; 10
    27d2:	6a e7       	ldi	r22, 0x7A	; 122
    27d4:	c8 01       	movw	r24, r16
    27d6:	0b db       	rcall	.-2538   	; 0x1dee <writeReg>
    27d8:	40 e0       	ldi	r20, 0x00	; 0
    27da:	6b e7       	ldi	r22, 0x7B	; 123
    27dc:	c8 01       	movw	r24, r16
    27de:	07 db       	rcall	.-2546   	; 0x1dee <writeReg>
    27e0:	41 e2       	ldi	r20, 0x21	; 33
    27e2:	68 e7       	ldi	r22, 0x78	; 120
    27e4:	c8 01       	movw	r24, r16
    27e6:	03 db       	rcall	.-2554   	; 0x1dee <writeReg>
    27e8:	41 e0       	ldi	r20, 0x01	; 1
    27ea:	6f ef       	ldi	r22, 0xFF	; 255
    27ec:	c8 01       	movw	r24, r16
    27ee:	ff da       	rcall	.-2562   	; 0x1dee <writeReg>
    27f0:	44 e3       	ldi	r20, 0x34	; 52
    27f2:	63 e2       	ldi	r22, 0x23	; 35
    27f4:	c8 01       	movw	r24, r16
    27f6:	fb da       	rcall	.-2570   	; 0x1dee <writeReg>
    27f8:	40 e0       	ldi	r20, 0x00	; 0
    27fa:	62 e4       	ldi	r22, 0x42	; 66
    27fc:	c8 01       	movw	r24, r16
    27fe:	f7 da       	rcall	.-2578   	; 0x1dee <writeReg>
    2800:	4f ef       	ldi	r20, 0xFF	; 255
    2802:	64 e4       	ldi	r22, 0x44	; 68
    2804:	c8 01       	movw	r24, r16
    2806:	f3 da       	rcall	.-2586   	; 0x1dee <writeReg>
    2808:	46 e2       	ldi	r20, 0x26	; 38
    280a:	65 e4       	ldi	r22, 0x45	; 69
    280c:	c8 01       	movw	r24, r16
    280e:	ef da       	rcall	.-2594   	; 0x1dee <writeReg>
    2810:	45 e0       	ldi	r20, 0x05	; 5
    2812:	66 e4       	ldi	r22, 0x46	; 70
    2814:	c8 01       	movw	r24, r16
    2816:	eb da       	rcall	.-2602   	; 0x1dee <writeReg>
    2818:	40 e4       	ldi	r20, 0x40	; 64
    281a:	60 e4       	ldi	r22, 0x40	; 64
    281c:	c8 01       	movw	r24, r16
    281e:	e7 da       	rcall	.-2610   	; 0x1dee <writeReg>
    2820:	46 e0       	ldi	r20, 0x06	; 6
    2822:	6e e0       	ldi	r22, 0x0E	; 14
    2824:	c8 01       	movw	r24, r16
    2826:	e3 da       	rcall	.-2618   	; 0x1dee <writeReg>
    2828:	4a e1       	ldi	r20, 0x1A	; 26
    282a:	60 e2       	ldi	r22, 0x20	; 32
    282c:	c8 01       	movw	r24, r16
    282e:	df da       	rcall	.-2626   	; 0x1dee <writeReg>
    2830:	40 e4       	ldi	r20, 0x40	; 64
    2832:	63 e4       	ldi	r22, 0x43	; 67
    2834:	c8 01       	movw	r24, r16
    2836:	db da       	rcall	.-2634   	; 0x1dee <writeReg>
    2838:	40 e0       	ldi	r20, 0x00	; 0
    283a:	6f ef       	ldi	r22, 0xFF	; 255
    283c:	c8 01       	movw	r24, r16
    283e:	d7 da       	rcall	.-2642   	; 0x1dee <writeReg>
    2840:	43 e0       	ldi	r20, 0x03	; 3
    2842:	64 e3       	ldi	r22, 0x34	; 52
    2844:	c8 01       	movw	r24, r16
    2846:	d3 da       	rcall	.-2650   	; 0x1dee <writeReg>
    2848:	44 e4       	ldi	r20, 0x44	; 68
    284a:	65 e3       	ldi	r22, 0x35	; 53
    284c:	c8 01       	movw	r24, r16
    284e:	cf da       	rcall	.-2658   	; 0x1dee <writeReg>
    2850:	41 e0       	ldi	r20, 0x01	; 1
    2852:	6f ef       	ldi	r22, 0xFF	; 255
    2854:	c8 01       	movw	r24, r16
    2856:	cb da       	rcall	.-2666   	; 0x1dee <writeReg>
    2858:	44 e0       	ldi	r20, 0x04	; 4
    285a:	61 e3       	ldi	r22, 0x31	; 49
    285c:	c8 01       	movw	r24, r16
    285e:	c7 da       	rcall	.-2674   	; 0x1dee <writeReg>
    2860:	49 e0       	ldi	r20, 0x09	; 9
    2862:	6b e4       	ldi	r22, 0x4B	; 75
    2864:	c8 01       	movw	r24, r16
    2866:	c3 da       	rcall	.-2682   	; 0x1dee <writeReg>
    2868:	45 e0       	ldi	r20, 0x05	; 5
    286a:	6c e4       	ldi	r22, 0x4C	; 76
    286c:	c8 01       	movw	r24, r16
    286e:	bf da       	rcall	.-2690   	; 0x1dee <writeReg>
    2870:	44 e0       	ldi	r20, 0x04	; 4
    2872:	6d e4       	ldi	r22, 0x4D	; 77
    2874:	c8 01       	movw	r24, r16
    2876:	bb da       	rcall	.-2698   	; 0x1dee <writeReg>
    2878:	40 e0       	ldi	r20, 0x00	; 0
    287a:	6f ef       	ldi	r22, 0xFF	; 255
    287c:	c8 01       	movw	r24, r16
    287e:	b7 da       	rcall	.-2706   	; 0x1dee <writeReg>
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	64 e4       	ldi	r22, 0x44	; 68
    2884:	c8 01       	movw	r24, r16
    2886:	b3 da       	rcall	.-2714   	; 0x1dee <writeReg>
    2888:	40 e2       	ldi	r20, 0x20	; 32
    288a:	65 e4       	ldi	r22, 0x45	; 69
    288c:	c8 01       	movw	r24, r16
    288e:	af da       	rcall	.-2722   	; 0x1dee <writeReg>
    2890:	48 e0       	ldi	r20, 0x08	; 8
    2892:	67 e4       	ldi	r22, 0x47	; 71
    2894:	c8 01       	movw	r24, r16
    2896:	ab da       	rcall	.-2730   	; 0x1dee <writeReg>
    2898:	48 e2       	ldi	r20, 0x28	; 40
    289a:	68 e4       	ldi	r22, 0x48	; 72
    289c:	c8 01       	movw	r24, r16
    289e:	a7 da       	rcall	.-2738   	; 0x1dee <writeReg>
    28a0:	40 e0       	ldi	r20, 0x00	; 0
    28a2:	67 e6       	ldi	r22, 0x67	; 103
    28a4:	c8 01       	movw	r24, r16
    28a6:	a3 da       	rcall	.-2746   	; 0x1dee <writeReg>
    28a8:	44 e0       	ldi	r20, 0x04	; 4
    28aa:	60 e7       	ldi	r22, 0x70	; 112
    28ac:	c8 01       	movw	r24, r16
    28ae:	9f da       	rcall	.-2754   	; 0x1dee <writeReg>
    28b0:	41 e0       	ldi	r20, 0x01	; 1
    28b2:	61 e7       	ldi	r22, 0x71	; 113
    28b4:	c8 01       	movw	r24, r16
    28b6:	9b da       	rcall	.-2762   	; 0x1dee <writeReg>
    28b8:	4e ef       	ldi	r20, 0xFE	; 254
    28ba:	62 e7       	ldi	r22, 0x72	; 114
    28bc:	c8 01       	movw	r24, r16
    28be:	97 da       	rcall	.-2770   	; 0x1dee <writeReg>
    28c0:	40 e0       	ldi	r20, 0x00	; 0
    28c2:	66 e7       	ldi	r22, 0x76	; 118
    28c4:	c8 01       	movw	r24, r16
    28c6:	93 da       	rcall	.-2778   	; 0x1dee <writeReg>
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	67 e7       	ldi	r22, 0x77	; 119
    28cc:	c8 01       	movw	r24, r16
    28ce:	8f da       	rcall	.-2786   	; 0x1dee <writeReg>
    28d0:	41 e0       	ldi	r20, 0x01	; 1
    28d2:	6f ef       	ldi	r22, 0xFF	; 255
    28d4:	c8 01       	movw	r24, r16
    28d6:	8b da       	rcall	.-2794   	; 0x1dee <writeReg>
    28d8:	41 e0       	ldi	r20, 0x01	; 1
    28da:	6d e0       	ldi	r22, 0x0D	; 13
    28dc:	c8 01       	movw	r24, r16
    28de:	87 da       	rcall	.-2802   	; 0x1dee <writeReg>
    28e0:	40 e0       	ldi	r20, 0x00	; 0
    28e2:	6f ef       	ldi	r22, 0xFF	; 255
    28e4:	c8 01       	movw	r24, r16
    28e6:	83 da       	rcall	.-2810   	; 0x1dee <writeReg>
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	60 e8       	ldi	r22, 0x80	; 128
    28ec:	c8 01       	movw	r24, r16
    28ee:	7f da       	rcall	.-2818   	; 0x1dee <writeReg>
    28f0:	48 ef       	ldi	r20, 0xF8	; 248
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	c8 01       	movw	r24, r16
    28f6:	7b da       	rcall	.-2826   	; 0x1dee <writeReg>
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	6f ef       	ldi	r22, 0xFF	; 255
    28fc:	c8 01       	movw	r24, r16
    28fe:	77 da       	rcall	.-2834   	; 0x1dee <writeReg>
    2900:	41 e0       	ldi	r20, 0x01	; 1
    2902:	6e e8       	ldi	r22, 0x8E	; 142
    2904:	c8 01       	movw	r24, r16
    2906:	73 da       	rcall	.-2842   	; 0x1dee <writeReg>
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	60 e0       	ldi	r22, 0x00	; 0
    290c:	c8 01       	movw	r24, r16
    290e:	6f da       	rcall	.-2850   	; 0x1dee <writeReg>
    2910:	40 e0       	ldi	r20, 0x00	; 0
    2912:	6f ef       	ldi	r22, 0xFF	; 255
    2914:	c8 01       	movw	r24, r16
    2916:	6b da       	rcall	.-2858   	; 0x1dee <writeReg>
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	60 e8       	ldi	r22, 0x80	; 128
    291c:	c8 01       	movw	r24, r16
    291e:	67 da       	rcall	.-2866   	; 0x1dee <writeReg>
    2920:	44 e0       	ldi	r20, 0x04	; 4
    2922:	6a e0       	ldi	r22, 0x0A	; 10
    2924:	c8 01       	movw	r24, r16
    2926:	63 da       	rcall	.-2874   	; 0x1dee <writeReg>
    2928:	64 e8       	ldi	r22, 0x84	; 132
    292a:	c8 01       	movw	r24, r16
    292c:	b4 da       	rcall	.-2712   	; 0x1e96 <readReg>
    292e:	48 2f       	mov	r20, r24
    2930:	4f 7e       	andi	r20, 0xEF	; 239
    2932:	64 e8       	ldi	r22, 0x84	; 132
    2934:	c8 01       	movw	r24, r16
    2936:	5b da       	rcall	.-2890   	; 0x1dee <writeReg>
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	6b e0       	ldi	r22, 0x0B	; 11
    293c:	c8 01       	movw	r24, r16
    293e:	57 da       	rcall	.-2898   	; 0x1dee <writeReg>
    2940:	48 ee       	ldi	r20, 0xE8	; 232
    2942:	61 e0       	ldi	r22, 0x01	; 1
    2944:	c8 01       	movw	r24, r16
    2946:	53 da       	rcall	.-2906   	; 0x1dee <writeReg>
    2948:	4e e1       	ldi	r20, 0x1E	; 30
    294a:	50 e0       	ldi	r21, 0x00	; 0
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	c8 01       	movw	r24, r16
    2952:	14 dd       	rcall	.-1496   	; 0x237c <setMeasurementTimingBudget>
    2954:	41 e0       	ldi	r20, 0x01	; 1
    2956:	61 e0       	ldi	r22, 0x01	; 1
    2958:	c8 01       	movw	r24, r16
    295a:	49 da       	rcall	.-2926   	; 0x1dee <writeReg>
    295c:	60 e4       	ldi	r22, 0x40	; 64
    295e:	c8 01       	movw	r24, r16
    2960:	ec dc       	rcall	.-1576   	; 0x233a <performSingleRefCalibration>
    2962:	88 23       	and	r24, r24
    2964:	71 f0       	breq	.+28     	; 0x2982 <vl53l0x_start+0x462>
    2966:	42 e0       	ldi	r20, 0x02	; 2
    2968:	61 e0       	ldi	r22, 0x01	; 1
    296a:	c8 01       	movw	r24, r16
    296c:	40 da       	rcall	.-2944   	; 0x1dee <writeReg>
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	c8 01       	movw	r24, r16
    2972:	e3 dc       	rcall	.-1594   	; 0x233a <performSingleRefCalibration>
    2974:	88 23       	and	r24, r24
    2976:	29 f0       	breq	.+10     	; 0x2982 <vl53l0x_start+0x462>
    2978:	48 ee       	ldi	r20, 0xE8	; 232
    297a:	61 e0       	ldi	r22, 0x01	; 1
    297c:	c8 01       	movw	r24, r16
    297e:	37 da       	rcall	.-2962   	; 0x1dee <writeReg>
    2980:	81 e0       	ldi	r24, 0x01	; 1
    2982:	28 96       	adiw	r28, 0x08	; 8
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	08 95       	ret

00002998 <vl53l0x_setMode>:
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	ec 01       	movw	r28, r24
    299e:	61 30       	cpi	r22, 0x01	; 1
    29a0:	89 f0       	breq	.+34     	; 0x29c4 <vl53l0x_setMode+0x2c>
    29a2:	28 f0       	brcs	.+10     	; 0x29ae <vl53l0x_setMode+0x16>
    29a4:	62 30       	cpi	r22, 0x02	; 2
    29a6:	c9 f0       	breq	.+50     	; 0x29da <vl53l0x_setMode+0x42>
    29a8:	63 30       	cpi	r22, 0x03	; 3
    29aa:	11 f1       	breq	.+68     	; 0x29f0 <vl53l0x_setMode+0x58>
    29ac:	2c c0       	rjmp	.+88     	; 0x2a06 <vl53l0x_setMode+0x6e>
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	64 e4       	ldi	r22, 0x44	; 68
    29b4:	30 da       	rcall	.-2976   	; 0x1e16 <writeReg16Bit>
    29b6:	40 e3       	ldi	r20, 0x30	; 48
    29b8:	55 e7       	ldi	r21, 0x75	; 117
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	ce 01       	movw	r24, r28
    29c0:	dd dc       	rcall	.-1606   	; 0x237c <setMeasurementTimingBudget>
    29c2:	22 c0       	rjmp	.+68     	; 0x2a08 <vl53l0x_setMode+0x70>
    29c4:	40 e2       	ldi	r20, 0x20	; 32
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	64 e4       	ldi	r22, 0x44	; 68
    29ca:	25 da       	rcall	.-2998   	; 0x1e16 <writeReg16Bit>
    29cc:	40 e4       	ldi	r20, 0x40	; 64
    29ce:	5d e0       	ldi	r21, 0x0D	; 13
    29d0:	63 e0       	ldi	r22, 0x03	; 3
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	ce 01       	movw	r24, r28
    29d6:	d2 dc       	rcall	.-1628   	; 0x237c <setMeasurementTimingBudget>
    29d8:	17 c0       	rjmp	.+46     	; 0x2a08 <vl53l0x_setMode+0x70>
    29da:	4c e0       	ldi	r20, 0x0C	; 12
    29dc:	50 e0       	ldi	r21, 0x00	; 0
    29de:	64 e4       	ldi	r22, 0x44	; 68
    29e0:	1a da       	rcall	.-3020   	; 0x1e16 <writeReg16Bit>
    29e2:	48 ee       	ldi	r20, 0xE8	; 232
    29e4:	50 e8       	ldi	r21, 0x80	; 128
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	ce 01       	movw	r24, r28
    29ec:	c7 dc       	rcall	.-1650   	; 0x237c <setMeasurementTimingBudget>
    29ee:	0c c0       	rjmp	.+24     	; 0x2a08 <vl53l0x_setMode+0x70>
    29f0:	40 e2       	ldi	r20, 0x20	; 32
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	64 e4       	ldi	r22, 0x44	; 68
    29f6:	0f da       	rcall	.-3042   	; 0x1e16 <writeReg16Bit>
    29f8:	40 e2       	ldi	r20, 0x20	; 32
    29fa:	5e e4       	ldi	r21, 0x4E	; 78
    29fc:	60 e0       	ldi	r22, 0x00	; 0
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	ce 01       	movw	r24, r28
    2a02:	bc dc       	rcall	.-1672   	; 0x237c <setMeasurementTimingBudget>
    2a04:	01 c0       	rjmp	.+2      	; 0x2a08 <vl53l0x_setMode+0x70>
    2a06:	80 e0       	ldi	r24, 0x00	; 0
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	08 95       	ret

00002a0e <vl53l0x_startContinuous>:
    2a0e:	cf 92       	push	r12
    2a10:	df 92       	push	r13
    2a12:	ef 92       	push	r14
    2a14:	ff 92       	push	r15
    2a16:	cf 93       	push	r28
    2a18:	df 93       	push	r29
    2a1a:	ec 01       	movw	r28, r24
    2a1c:	6a 01       	movw	r12, r20
    2a1e:	7b 01       	movw	r14, r22
    2a20:	41 e0       	ldi	r20, 0x01	; 1
    2a22:	60 e8       	ldi	r22, 0x80	; 128
    2a24:	e4 d9       	rcall	.-3128   	; 0x1dee <writeReg>
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	6f ef       	ldi	r22, 0xFF	; 255
    2a2a:	ce 01       	movw	r24, r28
    2a2c:	e0 d9       	rcall	.-3136   	; 0x1dee <writeReg>
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	60 e0       	ldi	r22, 0x00	; 0
    2a32:	ce 01       	movw	r24, r28
    2a34:	dc d9       	rcall	.-3144   	; 0x1dee <writeReg>
    2a36:	4a 85       	ldd	r20, Y+10	; 0x0a
    2a38:	61 e9       	ldi	r22, 0x91	; 145
    2a3a:	ce 01       	movw	r24, r28
    2a3c:	d8 d9       	rcall	.-3152   	; 0x1dee <writeReg>
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	ce 01       	movw	r24, r28
    2a44:	d4 d9       	rcall	.-3160   	; 0x1dee <writeReg>
    2a46:	40 e0       	ldi	r20, 0x00	; 0
    2a48:	6f ef       	ldi	r22, 0xFF	; 255
    2a4a:	ce 01       	movw	r24, r28
    2a4c:	d0 d9       	rcall	.-3168   	; 0x1dee <writeReg>
    2a4e:	40 e0       	ldi	r20, 0x00	; 0
    2a50:	60 e8       	ldi	r22, 0x80	; 128
    2a52:	ce 01       	movw	r24, r28
    2a54:	cc d9       	rcall	.-3176   	; 0x1dee <writeReg>
    2a56:	c1 14       	cp	r12, r1
    2a58:	d1 04       	cpc	r13, r1
    2a5a:	e1 04       	cpc	r14, r1
    2a5c:	f1 04       	cpc	r15, r1
    2a5e:	a9 f0       	breq	.+42     	; 0x2a8a <vl53l0x_startContinuous+0x7c>
    2a60:	68 ef       	ldi	r22, 0xF8	; 248
    2a62:	ce 01       	movw	r24, r28
    2a64:	33 da       	rcall	.-2970   	; 0x1ecc <readReg16Bit>
    2a66:	00 97       	sbiw	r24, 0x00	; 0
    2a68:	31 f0       	breq	.+12     	; 0x2a76 <vl53l0x_startContinuous+0x68>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	a7 01       	movw	r20, r14
    2a6e:	96 01       	movw	r18, r12
    2a70:	9c d1       	rcall	.+824    	; 0x2daa <__muluhisi3>
    2a72:	6b 01       	movw	r12, r22
    2a74:	7c 01       	movw	r14, r24
    2a76:	a7 01       	movw	r20, r14
    2a78:	96 01       	movw	r18, r12
    2a7a:	64 e0       	ldi	r22, 0x04	; 4
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	e5 d9       	rcall	.-3126   	; 0x1e4a <writeReg32Bit>
    2a80:	44 e0       	ldi	r20, 0x04	; 4
    2a82:	60 e0       	ldi	r22, 0x00	; 0
    2a84:	ce 01       	movw	r24, r28
    2a86:	b3 d9       	rcall	.-3226   	; 0x1dee <writeReg>
    2a88:	04 c0       	rjmp	.+8      	; 0x2a92 <vl53l0x_startContinuous+0x84>
    2a8a:	42 e0       	ldi	r20, 0x02	; 2
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	ce 01       	movw	r24, r28
    2a90:	ae d9       	rcall	.-3236   	; 0x1dee <writeReg>
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	df 90       	pop	r13
    2a9c:	cf 90       	pop	r12
    2a9e:	08 95       	ret

00002aa0 <vl53l0x_readRangeContinuous>:
    2aa0:	0f 93       	push	r16
    2aa2:	1f 93       	push	r17
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	ec 01       	movw	r28, r24
    2aaa:	63 e1       	ldi	r22, 0x13	; 19
    2aac:	f4 d9       	rcall	.-3096   	; 0x1e96 <readReg>
    2aae:	87 70       	andi	r24, 0x07	; 7
    2ab0:	49 f0       	breq	.+18     	; 0x2ac4 <vl53l0x_readRangeContinuous+0x24>
    2ab2:	6e e1       	ldi	r22, 0x1E	; 30
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	0a da       	rcall	.-3052   	; 0x1ecc <readReg16Bit>
    2ab8:	8c 01       	movw	r16, r24
    2aba:	41 e0       	ldi	r20, 0x01	; 1
    2abc:	6b e0       	ldi	r22, 0x0B	; 11
    2abe:	ce 01       	movw	r24, r28
    2ac0:	96 d9       	rcall	.-3284   	; 0x1dee <writeReg>
    2ac2:	02 c0       	rjmp	.+4      	; 0x2ac8 <vl53l0x_readRangeContinuous+0x28>
    2ac4:	0f ef       	ldi	r16, 0xFF	; 255
    2ac6:	1f ef       	ldi	r17, 0xFF	; 255
    2ac8:	c8 01       	movw	r24, r16
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <vl53l0x_incrementTimeoutCounter>:

void vl53l0x_incrementTimeoutCounter()
{
	u32_milliseconds++;
    2ad4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    2ad8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    2adc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
    2ae0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
    2ae4:	01 96       	adiw	r24, 0x01	; 1
    2ae6:	a1 1d       	adc	r26, r1
    2ae8:	b1 1d       	adc	r27, r1
    2aea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
    2aee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
    2af2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
    2af6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
    2afa:	08 95       	ret

00002afc <__fixunssfsi>:
    2afc:	98 d0       	rcall	.+304    	; 0x2c2e <__fp_splitA>
    2afe:	88 f0       	brcs	.+34     	; 0x2b22 <__fixunssfsi+0x26>
    2b00:	9f 57       	subi	r25, 0x7F	; 127
    2b02:	90 f0       	brcs	.+36     	; 0x2b28 <__fixunssfsi+0x2c>
    2b04:	b9 2f       	mov	r27, r25
    2b06:	99 27       	eor	r25, r25
    2b08:	b7 51       	subi	r27, 0x17	; 23
    2b0a:	a0 f0       	brcs	.+40     	; 0x2b34 <__fixunssfsi+0x38>
    2b0c:	d1 f0       	breq	.+52     	; 0x2b42 <__fixunssfsi+0x46>
    2b0e:	66 0f       	add	r22, r22
    2b10:	77 1f       	adc	r23, r23
    2b12:	88 1f       	adc	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	1a f0       	brmi	.+6      	; 0x2b1e <__fixunssfsi+0x22>
    2b18:	ba 95       	dec	r27
    2b1a:	c9 f7       	brne	.-14     	; 0x2b0e <__fixunssfsi+0x12>
    2b1c:	12 c0       	rjmp	.+36     	; 0x2b42 <__fixunssfsi+0x46>
    2b1e:	b1 30       	cpi	r27, 0x01	; 1
    2b20:	81 f0       	breq	.+32     	; 0x2b42 <__fixunssfsi+0x46>
    2b22:	9f d0       	rcall	.+318    	; 0x2c62 <__fp_zero>
    2b24:	b1 e0       	ldi	r27, 0x01	; 1
    2b26:	08 95       	ret
    2b28:	9c c0       	rjmp	.+312    	; 0x2c62 <__fp_zero>
    2b2a:	67 2f       	mov	r22, r23
    2b2c:	78 2f       	mov	r23, r24
    2b2e:	88 27       	eor	r24, r24
    2b30:	b8 5f       	subi	r27, 0xF8	; 248
    2b32:	39 f0       	breq	.+14     	; 0x2b42 <__fixunssfsi+0x46>
    2b34:	b9 3f       	cpi	r27, 0xF9	; 249
    2b36:	cc f3       	brlt	.-14     	; 0x2b2a <__fixunssfsi+0x2e>
    2b38:	86 95       	lsr	r24
    2b3a:	77 95       	ror	r23
    2b3c:	67 95       	ror	r22
    2b3e:	b3 95       	inc	r27
    2b40:	d9 f7       	brne	.-10     	; 0x2b38 <__fixunssfsi+0x3c>
    2b42:	3e f4       	brtc	.+14     	; 0x2b52 <__fixunssfsi+0x56>
    2b44:	90 95       	com	r25
    2b46:	80 95       	com	r24
    2b48:	70 95       	com	r23
    2b4a:	61 95       	neg	r22
    2b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	08 95       	ret

00002b54 <__floatunsisf>:
    2b54:	e8 94       	clt
    2b56:	09 c0       	rjmp	.+18     	; 0x2b6a <__floatsisf+0x12>

00002b58 <__floatsisf>:
    2b58:	97 fb       	bst	r25, 7
    2b5a:	3e f4       	brtc	.+14     	; 0x2b6a <__floatsisf+0x12>
    2b5c:	90 95       	com	r25
    2b5e:	80 95       	com	r24
    2b60:	70 95       	com	r23
    2b62:	61 95       	neg	r22
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255
    2b66:	8f 4f       	sbci	r24, 0xFF	; 255
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	99 23       	and	r25, r25
    2b6c:	a9 f0       	breq	.+42     	; 0x2b98 <__floatsisf+0x40>
    2b6e:	f9 2f       	mov	r31, r25
    2b70:	96 e9       	ldi	r25, 0x96	; 150
    2b72:	bb 27       	eor	r27, r27
    2b74:	93 95       	inc	r25
    2b76:	f6 95       	lsr	r31
    2b78:	87 95       	ror	r24
    2b7a:	77 95       	ror	r23
    2b7c:	67 95       	ror	r22
    2b7e:	b7 95       	ror	r27
    2b80:	f1 11       	cpse	r31, r1
    2b82:	f8 cf       	rjmp	.-16     	; 0x2b74 <__floatsisf+0x1c>
    2b84:	fa f4       	brpl	.+62     	; 0x2bc4 <__floatsisf+0x6c>
    2b86:	bb 0f       	add	r27, r27
    2b88:	11 f4       	brne	.+4      	; 0x2b8e <__floatsisf+0x36>
    2b8a:	60 ff       	sbrs	r22, 0
    2b8c:	1b c0       	rjmp	.+54     	; 0x2bc4 <__floatsisf+0x6c>
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8f 4f       	sbci	r24, 0xFF	; 255
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	16 c0       	rjmp	.+44     	; 0x2bc4 <__floatsisf+0x6c>
    2b98:	88 23       	and	r24, r24
    2b9a:	11 f0       	breq	.+4      	; 0x2ba0 <__floatsisf+0x48>
    2b9c:	96 e9       	ldi	r25, 0x96	; 150
    2b9e:	11 c0       	rjmp	.+34     	; 0x2bc2 <__floatsisf+0x6a>
    2ba0:	77 23       	and	r23, r23
    2ba2:	21 f0       	breq	.+8      	; 0x2bac <__floatsisf+0x54>
    2ba4:	9e e8       	ldi	r25, 0x8E	; 142
    2ba6:	87 2f       	mov	r24, r23
    2ba8:	76 2f       	mov	r23, r22
    2baa:	05 c0       	rjmp	.+10     	; 0x2bb6 <__floatsisf+0x5e>
    2bac:	66 23       	and	r22, r22
    2bae:	71 f0       	breq	.+28     	; 0x2bcc <__floatsisf+0x74>
    2bb0:	96 e8       	ldi	r25, 0x86	; 134
    2bb2:	86 2f       	mov	r24, r22
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	2a f0       	brmi	.+10     	; 0x2bc4 <__floatsisf+0x6c>
    2bba:	9a 95       	dec	r25
    2bbc:	66 0f       	add	r22, r22
    2bbe:	77 1f       	adc	r23, r23
    2bc0:	88 1f       	adc	r24, r24
    2bc2:	da f7       	brpl	.-10     	; 0x2bba <__floatsisf+0x62>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	96 95       	lsr	r25
    2bc8:	87 95       	ror	r24
    2bca:	97 f9       	bld	r25, 7
    2bcc:	08 95       	ret

00002bce <__fp_inf>:
    2bce:	97 f9       	bld	r25, 7
    2bd0:	9f 67       	ori	r25, 0x7F	; 127
    2bd2:	80 e8       	ldi	r24, 0x80	; 128
    2bd4:	70 e0       	ldi	r23, 0x00	; 0
    2bd6:	60 e0       	ldi	r22, 0x00	; 0
    2bd8:	08 95       	ret

00002bda <__fp_nan>:
    2bda:	9f ef       	ldi	r25, 0xFF	; 255
    2bdc:	80 ec       	ldi	r24, 0xC0	; 192
    2bde:	08 95       	ret

00002be0 <__fp_pscA>:
    2be0:	00 24       	eor	r0, r0
    2be2:	0a 94       	dec	r0
    2be4:	16 16       	cp	r1, r22
    2be6:	17 06       	cpc	r1, r23
    2be8:	18 06       	cpc	r1, r24
    2bea:	09 06       	cpc	r0, r25
    2bec:	08 95       	ret

00002bee <__fp_pscB>:
    2bee:	00 24       	eor	r0, r0
    2bf0:	0a 94       	dec	r0
    2bf2:	12 16       	cp	r1, r18
    2bf4:	13 06       	cpc	r1, r19
    2bf6:	14 06       	cpc	r1, r20
    2bf8:	05 06       	cpc	r0, r21
    2bfa:	08 95       	ret

00002bfc <__fp_round>:
    2bfc:	09 2e       	mov	r0, r25
    2bfe:	03 94       	inc	r0
    2c00:	00 0c       	add	r0, r0
    2c02:	11 f4       	brne	.+4      	; 0x2c08 <__fp_round+0xc>
    2c04:	88 23       	and	r24, r24
    2c06:	52 f0       	brmi	.+20     	; 0x2c1c <__fp_round+0x20>
    2c08:	bb 0f       	add	r27, r27
    2c0a:	40 f4       	brcc	.+16     	; 0x2c1c <__fp_round+0x20>
    2c0c:	bf 2b       	or	r27, r31
    2c0e:	11 f4       	brne	.+4      	; 0x2c14 <__fp_round+0x18>
    2c10:	60 ff       	sbrs	r22, 0
    2c12:	04 c0       	rjmp	.+8      	; 0x2c1c <__fp_round+0x20>
    2c14:	6f 5f       	subi	r22, 0xFF	; 255
    2c16:	7f 4f       	sbci	r23, 0xFF	; 255
    2c18:	8f 4f       	sbci	r24, 0xFF	; 255
    2c1a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c1c:	08 95       	ret

00002c1e <__fp_split3>:
    2c1e:	57 fd       	sbrc	r21, 7
    2c20:	90 58       	subi	r25, 0x80	; 128
    2c22:	44 0f       	add	r20, r20
    2c24:	55 1f       	adc	r21, r21
    2c26:	59 f0       	breq	.+22     	; 0x2c3e <__fp_splitA+0x10>
    2c28:	5f 3f       	cpi	r21, 0xFF	; 255
    2c2a:	71 f0       	breq	.+28     	; 0x2c48 <__fp_splitA+0x1a>
    2c2c:	47 95       	ror	r20

00002c2e <__fp_splitA>:
    2c2e:	88 0f       	add	r24, r24
    2c30:	97 fb       	bst	r25, 7
    2c32:	99 1f       	adc	r25, r25
    2c34:	61 f0       	breq	.+24     	; 0x2c4e <__fp_splitA+0x20>
    2c36:	9f 3f       	cpi	r25, 0xFF	; 255
    2c38:	79 f0       	breq	.+30     	; 0x2c58 <__fp_splitA+0x2a>
    2c3a:	87 95       	ror	r24
    2c3c:	08 95       	ret
    2c3e:	12 16       	cp	r1, r18
    2c40:	13 06       	cpc	r1, r19
    2c42:	14 06       	cpc	r1, r20
    2c44:	55 1f       	adc	r21, r21
    2c46:	f2 cf       	rjmp	.-28     	; 0x2c2c <__fp_split3+0xe>
    2c48:	46 95       	lsr	r20
    2c4a:	f1 df       	rcall	.-30     	; 0x2c2e <__fp_splitA>
    2c4c:	08 c0       	rjmp	.+16     	; 0x2c5e <__fp_splitA+0x30>
    2c4e:	16 16       	cp	r1, r22
    2c50:	17 06       	cpc	r1, r23
    2c52:	18 06       	cpc	r1, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	f1 cf       	rjmp	.-30     	; 0x2c3a <__fp_splitA+0xc>
    2c58:	86 95       	lsr	r24
    2c5a:	71 05       	cpc	r23, r1
    2c5c:	61 05       	cpc	r22, r1
    2c5e:	08 94       	sec
    2c60:	08 95       	ret

00002c62 <__fp_zero>:
    2c62:	e8 94       	clt

00002c64 <__fp_szero>:
    2c64:	bb 27       	eor	r27, r27
    2c66:	66 27       	eor	r22, r22
    2c68:	77 27       	eor	r23, r23
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	97 f9       	bld	r25, 7
    2c6e:	08 95       	ret

00002c70 <__mulsf3>:
    2c70:	0b d0       	rcall	.+22     	; 0x2c88 <__mulsf3x>
    2c72:	c4 cf       	rjmp	.-120    	; 0x2bfc <__fp_round>
    2c74:	b5 df       	rcall	.-150    	; 0x2be0 <__fp_pscA>
    2c76:	28 f0       	brcs	.+10     	; 0x2c82 <__mulsf3+0x12>
    2c78:	ba df       	rcall	.-140    	; 0x2bee <__fp_pscB>
    2c7a:	18 f0       	brcs	.+6      	; 0x2c82 <__mulsf3+0x12>
    2c7c:	95 23       	and	r25, r21
    2c7e:	09 f0       	breq	.+2      	; 0x2c82 <__mulsf3+0x12>
    2c80:	a6 cf       	rjmp	.-180    	; 0x2bce <__fp_inf>
    2c82:	ab cf       	rjmp	.-170    	; 0x2bda <__fp_nan>
    2c84:	11 24       	eor	r1, r1
    2c86:	ee cf       	rjmp	.-36     	; 0x2c64 <__fp_szero>

00002c88 <__mulsf3x>:
    2c88:	ca df       	rcall	.-108    	; 0x2c1e <__fp_split3>
    2c8a:	a0 f3       	brcs	.-24     	; 0x2c74 <__mulsf3+0x4>

00002c8c <__mulsf3_pse>:
    2c8c:	95 9f       	mul	r25, r21
    2c8e:	d1 f3       	breq	.-12     	; 0x2c84 <__mulsf3+0x14>
    2c90:	95 0f       	add	r25, r21
    2c92:	50 e0       	ldi	r21, 0x00	; 0
    2c94:	55 1f       	adc	r21, r21
    2c96:	62 9f       	mul	r22, r18
    2c98:	f0 01       	movw	r30, r0
    2c9a:	72 9f       	mul	r23, r18
    2c9c:	bb 27       	eor	r27, r27
    2c9e:	f0 0d       	add	r31, r0
    2ca0:	b1 1d       	adc	r27, r1
    2ca2:	63 9f       	mul	r22, r19
    2ca4:	aa 27       	eor	r26, r26
    2ca6:	f0 0d       	add	r31, r0
    2ca8:	b1 1d       	adc	r27, r1
    2caa:	aa 1f       	adc	r26, r26
    2cac:	64 9f       	mul	r22, r20
    2cae:	66 27       	eor	r22, r22
    2cb0:	b0 0d       	add	r27, r0
    2cb2:	a1 1d       	adc	r26, r1
    2cb4:	66 1f       	adc	r22, r22
    2cb6:	82 9f       	mul	r24, r18
    2cb8:	22 27       	eor	r18, r18
    2cba:	b0 0d       	add	r27, r0
    2cbc:	a1 1d       	adc	r26, r1
    2cbe:	62 1f       	adc	r22, r18
    2cc0:	73 9f       	mul	r23, r19
    2cc2:	b0 0d       	add	r27, r0
    2cc4:	a1 1d       	adc	r26, r1
    2cc6:	62 1f       	adc	r22, r18
    2cc8:	83 9f       	mul	r24, r19
    2cca:	a0 0d       	add	r26, r0
    2ccc:	61 1d       	adc	r22, r1
    2cce:	22 1f       	adc	r18, r18
    2cd0:	74 9f       	mul	r23, r20
    2cd2:	33 27       	eor	r19, r19
    2cd4:	a0 0d       	add	r26, r0
    2cd6:	61 1d       	adc	r22, r1
    2cd8:	23 1f       	adc	r18, r19
    2cda:	84 9f       	mul	r24, r20
    2cdc:	60 0d       	add	r22, r0
    2cde:	21 1d       	adc	r18, r1
    2ce0:	82 2f       	mov	r24, r18
    2ce2:	76 2f       	mov	r23, r22
    2ce4:	6a 2f       	mov	r22, r26
    2ce6:	11 24       	eor	r1, r1
    2ce8:	9f 57       	subi	r25, 0x7F	; 127
    2cea:	50 40       	sbci	r21, 0x00	; 0
    2cec:	8a f0       	brmi	.+34     	; 0x2d10 <__mulsf3_pse+0x84>
    2cee:	e1 f0       	breq	.+56     	; 0x2d28 <__mulsf3_pse+0x9c>
    2cf0:	88 23       	and	r24, r24
    2cf2:	4a f0       	brmi	.+18     	; 0x2d06 <__mulsf3_pse+0x7a>
    2cf4:	ee 0f       	add	r30, r30
    2cf6:	ff 1f       	adc	r31, r31
    2cf8:	bb 1f       	adc	r27, r27
    2cfa:	66 1f       	adc	r22, r22
    2cfc:	77 1f       	adc	r23, r23
    2cfe:	88 1f       	adc	r24, r24
    2d00:	91 50       	subi	r25, 0x01	; 1
    2d02:	50 40       	sbci	r21, 0x00	; 0
    2d04:	a9 f7       	brne	.-22     	; 0x2cf0 <__mulsf3_pse+0x64>
    2d06:	9e 3f       	cpi	r25, 0xFE	; 254
    2d08:	51 05       	cpc	r21, r1
    2d0a:	70 f0       	brcs	.+28     	; 0x2d28 <__mulsf3_pse+0x9c>
    2d0c:	60 cf       	rjmp	.-320    	; 0x2bce <__fp_inf>
    2d0e:	aa cf       	rjmp	.-172    	; 0x2c64 <__fp_szero>
    2d10:	5f 3f       	cpi	r21, 0xFF	; 255
    2d12:	ec f3       	brlt	.-6      	; 0x2d0e <__mulsf3_pse+0x82>
    2d14:	98 3e       	cpi	r25, 0xE8	; 232
    2d16:	dc f3       	brlt	.-10     	; 0x2d0e <__mulsf3_pse+0x82>
    2d18:	86 95       	lsr	r24
    2d1a:	77 95       	ror	r23
    2d1c:	67 95       	ror	r22
    2d1e:	b7 95       	ror	r27
    2d20:	f7 95       	ror	r31
    2d22:	e7 95       	ror	r30
    2d24:	9f 5f       	subi	r25, 0xFF	; 255
    2d26:	c1 f7       	brne	.-16     	; 0x2d18 <__mulsf3_pse+0x8c>
    2d28:	fe 2b       	or	r31, r30
    2d2a:	88 0f       	add	r24, r24
    2d2c:	91 1d       	adc	r25, r1
    2d2e:	96 95       	lsr	r25
    2d30:	87 95       	ror	r24
    2d32:	97 f9       	bld	r25, 7
    2d34:	08 95       	ret

00002d36 <__udivmodsi4>:
    2d36:	a1 e2       	ldi	r26, 0x21	; 33
    2d38:	1a 2e       	mov	r1, r26
    2d3a:	aa 1b       	sub	r26, r26
    2d3c:	bb 1b       	sub	r27, r27
    2d3e:	fd 01       	movw	r30, r26
    2d40:	0d c0       	rjmp	.+26     	; 0x2d5c <__udivmodsi4_ep>

00002d42 <__udivmodsi4_loop>:
    2d42:	aa 1f       	adc	r26, r26
    2d44:	bb 1f       	adc	r27, r27
    2d46:	ee 1f       	adc	r30, r30
    2d48:	ff 1f       	adc	r31, r31
    2d4a:	a2 17       	cp	r26, r18
    2d4c:	b3 07       	cpc	r27, r19
    2d4e:	e4 07       	cpc	r30, r20
    2d50:	f5 07       	cpc	r31, r21
    2d52:	20 f0       	brcs	.+8      	; 0x2d5c <__udivmodsi4_ep>
    2d54:	a2 1b       	sub	r26, r18
    2d56:	b3 0b       	sbc	r27, r19
    2d58:	e4 0b       	sbc	r30, r20
    2d5a:	f5 0b       	sbc	r31, r21

00002d5c <__udivmodsi4_ep>:
    2d5c:	66 1f       	adc	r22, r22
    2d5e:	77 1f       	adc	r23, r23
    2d60:	88 1f       	adc	r24, r24
    2d62:	99 1f       	adc	r25, r25
    2d64:	1a 94       	dec	r1
    2d66:	69 f7       	brne	.-38     	; 0x2d42 <__udivmodsi4_loop>
    2d68:	60 95       	com	r22
    2d6a:	70 95       	com	r23
    2d6c:	80 95       	com	r24
    2d6e:	90 95       	com	r25
    2d70:	9b 01       	movw	r18, r22
    2d72:	ac 01       	movw	r20, r24
    2d74:	bd 01       	movw	r22, r26
    2d76:	cf 01       	movw	r24, r30
    2d78:	08 95       	ret

00002d7a <__tablejump2__>:
    2d7a:	ee 0f       	add	r30, r30
    2d7c:	ff 1f       	adc	r31, r31
    2d7e:	00 24       	eor	r0, r0
    2d80:	00 1c       	adc	r0, r0
    2d82:	0b be       	out	0x3b, r0	; 59
    2d84:	07 90       	elpm	r0, Z+
    2d86:	f6 91       	elpm	r31, Z
    2d88:	e0 2d       	mov	r30, r0
    2d8a:	09 94       	ijmp

00002d8c <__umulhisi3>:
    2d8c:	a2 9f       	mul	r26, r18
    2d8e:	b0 01       	movw	r22, r0
    2d90:	b3 9f       	mul	r27, r19
    2d92:	c0 01       	movw	r24, r0
    2d94:	a3 9f       	mul	r26, r19
    2d96:	70 0d       	add	r23, r0
    2d98:	81 1d       	adc	r24, r1
    2d9a:	11 24       	eor	r1, r1
    2d9c:	91 1d       	adc	r25, r1
    2d9e:	b2 9f       	mul	r27, r18
    2da0:	70 0d       	add	r23, r0
    2da2:	81 1d       	adc	r24, r1
    2da4:	11 24       	eor	r1, r1
    2da6:	91 1d       	adc	r25, r1
    2da8:	08 95       	ret

00002daa <__muluhisi3>:
    2daa:	f0 df       	rcall	.-32     	; 0x2d8c <__umulhisi3>
    2dac:	a5 9f       	mul	r26, r21
    2dae:	90 0d       	add	r25, r0
    2db0:	b4 9f       	mul	r27, r20
    2db2:	90 0d       	add	r25, r0
    2db4:	a4 9f       	mul	r26, r20
    2db6:	80 0d       	add	r24, r0
    2db8:	91 1d       	adc	r25, r1
    2dba:	11 24       	eor	r1, r1
    2dbc:	08 95       	ret

00002dbe <_exit>:
    2dbe:	f8 94       	cli

00002dc0 <__stop_program>:
    2dc0:	ff cf       	rjmp	.-2      	; 0x2dc0 <__stop_program>
