
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001ff0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f7c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000db  00800100  00800100  00001ff0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ff0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c8  00000000  00000000  00002060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000052c5  00000000  00000000  00002528  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000019a6  00000000  00000000  000077ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000235e  00000000  00000000  00009193  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001044  00000000  00000000  0000b4f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000189b  00000000  00000000  0000c538  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002db0  00000000  00000000  0000ddd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  00010b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	19 c1       	rjmp	.+562    	; 0x238 <__vector_1>
       6:	00 00       	nop
       8:	21 c1       	rjmp	.+578    	; 0x24c <__vector_2>
       a:	00 00       	nop
       c:	29 c1       	rjmp	.+594    	; 0x260 <__vector_3>
       e:	00 00       	nop
      10:	eb c0       	rjmp	.+470    	; 0x1e8 <__vector_4>
      12:	00 00       	nop
      14:	f3 c0       	rjmp	.+486    	; 0x1fc <__vector_5>
      16:	00 00       	nop
      18:	fb c0       	rjmp	.+502    	; 0x210 <__vector_6>
      1a:	00 00       	nop
      1c:	03 c1       	rjmp	.+518    	; 0x224 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_8>
      24:	17 c6       	rjmp	.+3118   	; 0xc54 <__vector_9>
      26:	00 00       	nop
      28:	51 c6       	rjmp	.+3234   	; 0xccc <__vector_10>
      2a:	00 00       	nop
      2c:	e8 c5       	rjmp	.+3024   	; 0xbfe <__vector_11>
      2e:	00 00       	nop
      30:	89 c5       	rjmp	.+2834   	; 0xb44 <__vector_12>
      32:	00 00       	nop
      34:	fc c4       	rjmp	.+2552   	; 0xa2e <__vector_13>
      36:	00 00       	nop
      38:	5a c5       	rjmp	.+2740   	; 0xaee <__vector_14>
      3a:	00 00       	nop
      3c:	cd c4       	rjmp	.+2458   	; 0x9d8 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	06 c3       	rjmp	.+1548   	; 0x65a <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 55 09 	jmp	0x12aa	; 0x12aa <__vector_20>
      54:	0c 94 af 09 	jmp	0x135e	; 0x135e <__vector_21>
      58:	0c 94 0c 0a 	jmp	0x1418	; 0x1418 <__vector_22>
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	6e 07       	cpc	r22, r30
      8e:	77 07       	cpc	r23, r23
      90:	80 07       	cpc	r24, r16
      92:	89 07       	cpc	r24, r25
      94:	92 07       	cpc	r25, r18
      96:	9b 07       	cpc	r25, r27
      98:	a4 07       	cpc	r26, r20

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	ec e7       	ldi	r30, 0x7C	; 124
      ae:	ff e1       	ldi	r31, 0x1F	; 31
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ab 3d       	cpi	r26, 0xDB	; 219
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	24 d0       	rcall	.+72     	; 0x11a <main>
      d2:	0c 94 bc 0f 	jmp	0x1f78	; 0x1f78 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <Task_ReadEncoders>:
timer_struct_t s_scheduler_timer;


extern void Task_ReadEncoders ()
{
	left_EncoderCounter = encoder_getLeft ();
      d8:	0e 94 84 0c 	call	0x1908	; 0x1908 <encoder_getLeft>
      dc:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_end>
      e0:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_end+0x1>
      e4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end+0x2>
      e8:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x3>
	right_EncoderCounter = encoder_getRight();
      ec:	0c 94 7b 0c 	jmp	0x18f6	; 0x18f6 <encoder_getRight>
      f0:	08 95       	ret

000000f2 <Task_SetMotorSpeed>:
}

extern void Task_SetMotorSpeed()
{
	
	if ( left_EncoderCounter > 0 )
      f2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
      f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
      fa:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
      fe:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
     102:	89 2b       	or	r24, r25
     104:	8a 2b       	or	r24, r26
     106:	8b 2b       	or	r24, r27
     108:	21 f0       	breq	.+8      	; 0x112 <Task_SetMotorSpeed+0x20>
	{
			motor_speed(10);
     10a:	8a e0       	ldi	r24, 0x0A	; 10
     10c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <motor_speed>
     110:	08 95       	ret
	}
	else 
	{
		motor_speed(40);
     112:	88 e2       	ldi	r24, 0x28	; 40
     114:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <motor_speed>
     118:	08 95       	ret

0000011a <main>:
}

int main(void)
{
	
	s_scheduler_timer.peripheral = TIMER2;
     11a:	e7 e3       	ldi	r30, 0x37	; 55
     11c:	f1 e0       	ldi	r31, 0x01	; 1
     11e:	82 e0       	ldi	r24, 0x02	; 2
     120:	80 83       	st	Z, r24
	s_scheduler_timer.frequency = 1000;
     122:	88 ee       	ldi	r24, 0xE8	; 232
     124:	93 e0       	ldi	r25, 0x03	; 3
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	81 83       	std	Z+1, r24	; 0x01
     12c:	92 83       	std	Z+2, r25	; 0x02
     12e:	a3 83       	std	Z+3, r26	; 0x03
     130:	b4 83       	std	Z+4, r27	; 0x04
	left_EncoderCounter = 0 ;
     132:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
     136:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_end+0x1>
     13a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end+0x2>
     13e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x3>
	right_EncoderCounter =0 ;
	device_disableJTAG();
	encoder_init();
     142:	2e d0       	rcall	.+92     	; 0x1a0 <device_disableJTAG>
     144:	0e 94 be 0b 	call	0x177c	; 0x177c <encoder_init>
	encoder_start();
     148:	0e 94 4e 0c 	call	0x189c	; 0x189c <encoder_start>
	motor_init();		
     14c:	0e 94 8d 0c 	call	0x191a	; 0x191a <motor_init>
	scheduler_inti(s_scheduler_timer,OVERFLOW);
     150:	20 e0       	ldi	r18, 0x00	; 0
     152:	40 91 37 01 	lds	r20, 0x0137	; 0x800137 <s_scheduler_timer>
     156:	50 91 38 01 	lds	r21, 0x0138	; 0x800138 <s_scheduler_timer+0x1>
     15a:	60 91 39 01 	lds	r22, 0x0139	; 0x800139 <s_scheduler_timer+0x2>
     15e:	70 91 3a 01 	lds	r23, 0x013A	; 0x80013a <s_scheduler_timer+0x3>
     162:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <s_scheduler_timer+0x4>
     166:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <scheduler_inti>
	create_task(1,Task_SetMotorSpeed);
     16a:	69 e7       	ldi	r22, 0x79	; 121
     16c:	70 e0       	ldi	r23, 0x00	; 0
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <create_task>
	create_task(0,Task_ReadEncoders);
     174:	6c e6       	ldi	r22, 0x6C	; 108
     176:	70 e0       	ldi	r23, 0x00	; 0
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	0e 94 49 0e 	call	0x1c92	; 0x1c92 <create_task>
	activate_task(0,10);
     17e:	6a e0       	ldi	r22, 0x0A	; 10
     180:	80 e0       	ldi	r24, 0x00	; 0
     182:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <activate_task>
	activate_task(1,15);
     186:	6f e0       	ldi	r22, 0x0F	; 15
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <activate_task>
	motor_start();
     18e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <motor_start>
	motor_speed(1);
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <motor_speed>
	sei();
    while (1)
    {
		scheduler();
     198:	78 94       	sei
     19a:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <scheduler>
     19e:	fd cf       	rjmp	.-6      	; 0x19a <main+0x80>

000001a0 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     1a0:	80 e8       	ldi	r24, 0x80	; 128
     1a2:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     1a4:	85 bf       	out	0x35, r24	; 53
     1a6:	08 95       	ret

000001a8 <gpio_changeDirection>:
			break;
	}
}

void gpio_disableInterrupt(gpio_struct_t s_gpio, gpio_interruptType_enum_t e_interruptType)
{
     1a8:	61 30       	cpi	r22, 0x01	; 1
     1aa:	61 f0       	breq	.+24     	; 0x1c4 <gpio_changeDirection+0x1c>
     1ac:	28 f0       	brcs	.+10     	; 0x1b8 <gpio_changeDirection+0x10>
     1ae:	62 30       	cpi	r22, 0x02	; 2
     1b0:	79 f0       	breq	.+30     	; 0x1d0 <gpio_changeDirection+0x28>
     1b2:	63 30       	cpi	r22, 0x03	; 3
     1b4:	99 f0       	breq	.+38     	; 0x1dc <gpio_changeDirection+0x34>
     1b6:	08 95       	ret
     1b8:	48 2f       	mov	r20, r24
     1ba:	67 2f       	mov	r22, r23
     1bc:	81 e2       	ldi	r24, 0x21	; 33
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	03 c1       	rjmp	.+518    	; 0x3c8 <updateBit>
     1c2:	08 95       	ret
     1c4:	48 2f       	mov	r20, r24
     1c6:	67 2f       	mov	r22, r23
     1c8:	84 e2       	ldi	r24, 0x24	; 36
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	fd c0       	rjmp	.+506    	; 0x3c8 <updateBit>
     1ce:	08 95       	ret
     1d0:	48 2f       	mov	r20, r24
     1d2:	67 2f       	mov	r22, r23
     1d4:	87 e2       	ldi	r24, 0x27	; 39
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	f7 c0       	rjmp	.+494    	; 0x3c8 <updateBit>
     1da:	08 95       	ret
     1dc:	48 2f       	mov	r20, r24
     1de:	67 2f       	mov	r22, r23
     1e0:	8a e2       	ldi	r24, 0x2A	; 42
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	f1 c0       	rjmp	.+482    	; 0x3c8 <updateBit>
     1e6:	08 95       	ret

000001e8 <__vector_4>:
     1e8:	1f 92       	push	r1
     1ea:	0f 92       	push	r0
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	0f 92       	push	r0
     1f0:	11 24       	eor	r1, r1
     1f2:	0f 90       	pop	r0
     1f4:	0f be       	out	0x3f, r0	; 63
     1f6:	0f 90       	pop	r0
     1f8:	1f 90       	pop	r1
     1fa:	18 95       	reti

000001fc <__vector_5>:
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	0f 90       	pop	r0
     208:	0f be       	out	0x3f, r0	; 63
     20a:	0f 90       	pop	r0
     20c:	1f 90       	pop	r1
     20e:	18 95       	reti

00000210 <__vector_6>:
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <__vector_7>:
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	0f 90       	pop	r0
     230:	0f be       	out	0x3f, r0	; 63
     232:	0f 90       	pop	r0
     234:	1f 90       	pop	r1
     236:	18 95       	reti

00000238 <__vector_1>:
     238:	1f 92       	push	r1
     23a:	0f 92       	push	r0
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	0f 92       	push	r0
     240:	11 24       	eor	r1, r1
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <__vector_2>:
     24c:	1f 92       	push	r1
     24e:	0f 92       	push	r0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	0f 90       	pop	r0
     258:	0f be       	out	0x3f, r0	; 63
     25a:	0f 90       	pop	r0
     25c:	1f 90       	pop	r1
     25e:	18 95       	reti

00000260 <__vector_3>:
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <gpio_init>:
     274:	ef 92       	push	r14
     276:	ff 92       	push	r15
     278:	0f 93       	push	r16
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
     280:	c6 2f       	mov	r28, r22
     282:	f7 2e       	mov	r15, r23
     284:	d8 2f       	mov	r29, r24
     286:	e9 2e       	mov	r14, r25
     288:	ec e3       	ldi	r30, 0x3C	; 60
     28a:	f1 e0       	ldi	r31, 0x01	; 1
     28c:	10 82       	st	Z, r1
     28e:	80 e8       	ldi	r24, 0x80	; 128
     290:	18 2f       	mov	r17, r24
     292:	81 83       	std	Z+1, r24	; 0x01
     294:	85 e2       	ldi	r24, 0x25	; 37
     296:	82 83       	std	Z+2, r24	; 0x02
     298:	13 82       	std	Z+3, r1	; 0x03
     29a:	14 82       	std	Z+4, r1	; 0x04
     29c:	83 e0       	ldi	r24, 0x03	; 3
     29e:	78 2f       	mov	r23, r24
     2a0:	87 83       	std	Z+7, r24	; 0x07
     2a2:	92 e0       	ldi	r25, 0x02	; 2
     2a4:	91 87       	std	Z+9, r25	; 0x09
     2a6:	10 86       	std	Z+8, r1	; 0x08
     2a8:	15 82       	std	Z+5, r1	; 0x05
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	68 2f       	mov	r22, r24
     2ae:	86 83       	std	Z+6, r24	; 0x06
     2b0:	00 e0       	ldi	r16, 0x00	; 0
     2b2:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <s_debugUart+0x2>
     2b6:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <s_debugUart+0x3>
     2ba:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <s_debugUart+0x4>
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	0e 94 33 0a 	call	0x1466	; 0x1466 <uart_init>
     2c6:	00 91 3c 01 	lds	r16, 0x013C	; 0x80013c <s_debugUart>
     2ca:	10 91 3d 01 	lds	r17, 0x013D	; 0x80013d <s_debugUart+0x1>
     2ce:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <s_debugUart+0x2>
     2d2:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <s_debugUart+0x3>
     2d6:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <s_debugUart+0x4>
     2da:	50 91 41 01 	lds	r21, 0x0141	; 0x800141 <s_debugUart+0x5>
     2de:	60 91 42 01 	lds	r22, 0x0142	; 0x800142 <s_debugUart+0x6>
     2e2:	70 91 43 01 	lds	r23, 0x0143	; 0x800143 <s_debugUart+0x7>
     2e6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <s_debugUart+0x8>
     2ea:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <s_debugUart+0x9>
     2ee:	0e 94 05 0b 	call	0x160a	; 0x160a <uart_start>
     2f2:	6c 2f       	mov	r22, r28
     2f4:	7f 2d       	mov	r23, r15
     2f6:	8d 2f       	mov	r24, r29
     2f8:	9e 2d       	mov	r25, r14
     2fa:	56 df       	rcall	.-340    	; 0x1a8 <gpio_changeDirection>
     2fc:	d1 11       	cpse	r29, r1
     2fe:	23 c0       	rjmp	.+70     	; 0x346 <gpio_init+0xd2>
     300:	c1 30       	cpi	r28, 0x01	; 1
     302:	81 f0       	breq	.+32     	; 0x324 <gpio_init+0xb0>
     304:	28 f0       	brcs	.+10     	; 0x310 <gpio_init+0x9c>
     306:	c2 30       	cpi	r28, 0x02	; 2
     308:	99 f0       	breq	.+38     	; 0x330 <gpio_init+0xbc>
     30a:	c3 30       	cpi	r28, 0x03	; 3
     30c:	b9 f0       	breq	.+46     	; 0x33c <gpio_init+0xc8>
     30e:	1b c0       	rjmp	.+54     	; 0x346 <gpio_init+0xd2>
     310:	4e 2d       	mov	r20, r14
     312:	6f 2d       	mov	r22, r15
     314:	82 e2       	ldi	r24, 0x22	; 34
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	57 d0       	rcall	.+174    	; 0x3c8 <updateBit>
     31a:	6f 2d       	mov	r22, r15
     31c:	8e e7       	ldi	r24, 0x7E	; 126
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	77 d0       	rcall	.+238    	; 0x410 <clearBit>
     322:	11 c0       	rjmp	.+34     	; 0x346 <gpio_init+0xd2>
     324:	4e 2d       	mov	r20, r14
     326:	6f 2d       	mov	r22, r15
     328:	85 e2       	ldi	r24, 0x25	; 37
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	4d d0       	rcall	.+154    	; 0x3c8 <updateBit>
     32e:	0b c0       	rjmp	.+22     	; 0x346 <gpio_init+0xd2>
     330:	4e 2d       	mov	r20, r14
     332:	6f 2d       	mov	r22, r15
     334:	88 e2       	ldi	r24, 0x28	; 40
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	47 d0       	rcall	.+142    	; 0x3c8 <updateBit>
     33a:	05 c0       	rjmp	.+10     	; 0x346 <gpio_init+0xd2>
     33c:	4e 2d       	mov	r20, r14
     33e:	6f 2d       	mov	r22, r15
     340:	8b e2       	ldi	r24, 0x2B	; 43
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	41 d0       	rcall	.+130    	; 0x3c8 <updateBit>
     346:	df 91       	pop	r29
     348:	cf 91       	pop	r28
     34a:	1f 91       	pop	r17
     34c:	0f 91       	pop	r16
     34e:	ff 90       	pop	r15
     350:	ef 90       	pop	r14
     352:	08 95       	ret

00000354 <gpio_out_set>:
     354:	61 30       	cpi	r22, 0x01	; 1
     356:	59 f0       	breq	.+22     	; 0x36e <gpio_out_set+0x1a>
     358:	28 f0       	brcs	.+10     	; 0x364 <gpio_out_set+0x10>
     35a:	62 30       	cpi	r22, 0x02	; 2
     35c:	69 f0       	breq	.+26     	; 0x378 <gpio_out_set+0x24>
     35e:	63 30       	cpi	r22, 0x03	; 3
     360:	81 f0       	breq	.+32     	; 0x382 <gpio_out_set+0x2e>
     362:	08 95       	ret
     364:	67 2f       	mov	r22, r23
     366:	82 e2       	ldi	r24, 0x22	; 34
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	46 c0       	rjmp	.+140    	; 0x3f8 <setBit>
     36c:	08 95       	ret
     36e:	67 2f       	mov	r22, r23
     370:	85 e2       	ldi	r24, 0x25	; 37
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	41 c0       	rjmp	.+130    	; 0x3f8 <setBit>
     376:	08 95       	ret
     378:	67 2f       	mov	r22, r23
     37a:	88 e2       	ldi	r24, 0x28	; 40
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	3c c0       	rjmp	.+120    	; 0x3f8 <setBit>
     380:	08 95       	ret
     382:	67 2f       	mov	r22, r23
     384:	8b e2       	ldi	r24, 0x2B	; 43
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	37 c0       	rjmp	.+110    	; 0x3f8 <setBit>
     38a:	08 95       	ret

0000038c <gpio_out_reset>:
     38c:	61 30       	cpi	r22, 0x01	; 1
     38e:	59 f0       	breq	.+22     	; 0x3a6 <gpio_out_reset+0x1a>
     390:	28 f0       	brcs	.+10     	; 0x39c <gpio_out_reset+0x10>
     392:	62 30       	cpi	r22, 0x02	; 2
     394:	69 f0       	breq	.+26     	; 0x3b0 <gpio_out_reset+0x24>
     396:	63 30       	cpi	r22, 0x03	; 3
     398:	81 f0       	breq	.+32     	; 0x3ba <gpio_out_reset+0x2e>
     39a:	08 95       	ret
     39c:	67 2f       	mov	r22, r23
     39e:	82 e2       	ldi	r24, 0x22	; 34
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	36 c0       	rjmp	.+108    	; 0x410 <clearBit>
     3a4:	08 95       	ret
     3a6:	67 2f       	mov	r22, r23
     3a8:	85 e2       	ldi	r24, 0x25	; 37
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	31 c0       	rjmp	.+98     	; 0x410 <clearBit>
     3ae:	08 95       	ret
     3b0:	67 2f       	mov	r22, r23
     3b2:	88 e2       	ldi	r24, 0x28	; 40
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	2c c0       	rjmp	.+88     	; 0x410 <clearBit>
     3b8:	08 95       	ret
     3ba:	67 2f       	mov	r22, r23
     3bc:	8b e2       	ldi	r24, 0x2B	; 43
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	27 c0       	rjmp	.+78     	; 0x410 <clearBit>
     3c2:	08 95       	ret

000003c4 <gpio_enableInterrupt>:
     3c4:	08 95       	ret

000003c6 <gpio_attachInterrupt>:
			break;
	}
}

void gpio_attachInterrupt(gpio_struct_t s_gpio, gpio_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
     3c6:	08 95       	ret

000003c8 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     3c8:	fc 01       	movw	r30, r24
     3ca:	94 2f       	mov	r25, r20
     3cc:	20 81       	ld	r18, Z
     3ce:	41 e0       	ldi	r20, 0x01	; 1
     3d0:	50 e0       	ldi	r21, 0x00	; 0
     3d2:	06 2e       	mov	r0, r22
     3d4:	02 c0       	rjmp	.+4      	; 0x3da <updateBit+0x12>
     3d6:	44 0f       	add	r20, r20
     3d8:	55 1f       	adc	r21, r21
     3da:	0a 94       	dec	r0
     3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <updateBit+0xe>
     3de:	40 95       	com	r20
     3e0:	50 95       	com	r21
     3e2:	24 23       	and	r18, r20
     3e4:	49 2f       	mov	r20, r25
     3e6:	50 e0       	ldi	r21, 0x00	; 0
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <updateBit+0x26>
     3ea:	44 0f       	add	r20, r20
     3ec:	55 1f       	adc	r21, r21
     3ee:	6a 95       	dec	r22
     3f0:	e2 f7       	brpl	.-8      	; 0x3ea <updateBit+0x22>
     3f2:	42 2b       	or	r20, r18
     3f4:	40 83       	st	Z, r20
     3f6:	08 95       	ret

000003f8 <setBit>:
     3f8:	fc 01       	movw	r30, r24
     3fa:	40 81       	ld	r20, Z
     3fc:	21 e0       	ldi	r18, 0x01	; 1
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	02 c0       	rjmp	.+4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     402:	22 0f       	add	r18, r18
     404:	33 1f       	adc	r19, r19
     406:	6a 95       	dec	r22
     408:	e2 f7       	brpl	.-8      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     40a:	24 2b       	or	r18, r20
     40c:	20 83       	st	Z, r18
     40e:	08 95       	ret

00000410 <clearBit>:
     410:	fc 01       	movw	r30, r24
     412:	90 81       	ld	r25, Z
     414:	21 e0       	ldi	r18, 0x01	; 1
     416:	30 e0       	ldi	r19, 0x00	; 0
     418:	02 c0       	rjmp	.+4      	; 0x41e <clearBit+0xe>
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	6a 95       	dec	r22
     420:	e2 f7       	brpl	.-8      	; 0x41a <clearBit+0xa>
     422:	20 95       	com	r18
     424:	29 23       	and	r18, r25
     426:	20 83       	st	Z, r18
     428:	08 95       	ret

0000042a <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	02 c0       	rjmp	.+4      	; 0x432 <checkBit+0x8>
     42e:	95 95       	asr	r25
     430:	87 95       	ror	r24
     432:	6a 95       	dec	r22
     434:	e2 f7       	brpl	.-8      	; 0x42e <checkBit+0x4>
}
     436:	81 70       	andi	r24, 0x01	; 1
     438:	08 95       	ret

0000043a <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     43a:	cf 92       	push	r12
     43c:	df 92       	push	r13
     43e:	ef 92       	push	r14
     440:	ff 92       	push	r15
     442:	69 01       	movw	r12, r18
     444:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     446:	9b 01       	movw	r18, r22
     448:	ac 01       	movw	r20, r24
     44a:	2c 19       	sub	r18, r12
     44c:	3d 09       	sbc	r19, r13
     44e:	4e 09       	sbc	r20, r14
     450:	5f 09       	sbc	r21, r15
     452:	a8 ee       	ldi	r26, 0xE8	; 232
     454:	b3 e0       	ldi	r27, 0x03	; 3
     456:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <__muluhisi3>
     45a:	a7 01       	movw	r20, r14
     45c:	96 01       	movw	r18, r12
     45e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	99 23       	and	r25, r25
     466:	24 f4       	brge	.+8      	; 0x470 <calculateError+0x36>
     468:	88 27       	eor	r24, r24
     46a:	99 27       	eor	r25, r25
     46c:	82 1b       	sub	r24, r18
     46e:	93 0b       	sbc	r25, r19
}
     470:	ff 90       	pop	r15
     472:	ef 90       	pop	r14
     474:	df 90       	pop	r13
     476:	cf 90       	pop	r12
     478:	08 95       	ret

0000047a <ruleOfThree>:

u16 ruleOfThree(u16 u16_extreme, u16 u16_mean1, u16 u16_mean2)
{
     47a:	fc 01       	movw	r30, r24
     47c:	9b 01       	movw	r18, r22
	u32 u32_result;
	u32_result = (u32) u16_mean1 * u16_mean2 / u16_extreme;
	return (u16) u32_result;
     47e:	da 01       	movw	r26, r20
     480:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <__umulhisi3>
     484:	9f 01       	movw	r18, r30
     486:	40 e0       	ldi	r20, 0x00	; 0
     488:	50 e0       	ldi	r21, 0x00	; 0
     48a:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     48e:	c9 01       	movw	r24, r18
     490:	08 95       	ret

00000492 <pwm_init>:
			OCR3A = ruleOfThree(100, u8_pwm3aPercent, ICR3);
			OCR3B = ruleOfThree(100, u8_pwm3bPercent, ICR3);
		#endif
			break;
	}
}
     492:	cf 93       	push	r28
     494:	df 93       	push	r29
     496:	ec 01       	movw	r28, r24
     498:	48 81       	ld	r20, Y
     49a:	59 81       	ldd	r21, Y+1	; 0x01
     49c:	6a 81       	ldd	r22, Y+2	; 0x02
     49e:	7b 81       	ldd	r23, Y+3	; 0x03
     4a0:	8c 81       	ldd	r24, Y+4	; 0x04
     4a2:	3f d4       	rcall	.+2174   	; 0xd22 <timer_init>
     4a4:	88 81       	ld	r24, Y
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	09 f0       	breq	.+2      	; 0x4ac <pwm_init+0x1a>
     4aa:	62 c0       	rjmp	.+196    	; 0x570 <pwm_init+0xde>
     4ac:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4b0:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4b4:	89 2b       	or	r24, r25
     4b6:	49 f0       	breq	.+18     	; 0x4ca <pwm_init+0x38>
     4b8:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     4bc:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4c0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4c4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4c8:	06 c0       	rjmp	.+12     	; 0x4d6 <pwm_init+0x44>
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	9f ef       	ldi	r25, 0xFF	; 255
     4ce:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4d2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4d6:	64 e0       	ldi	r22, 0x04	; 4
     4d8:	81 e8       	ldi	r24, 0x81	; 129
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	8d df       	rcall	.-230    	; 0x3f8 <setBit>
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	80 e8       	ldi	r24, 0x80	; 128
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	95 df       	rcall	.-214    	; 0x410 <clearBit>
     4e6:	8e 81       	ldd	r24, Y+6	; 0x06
     4e8:	88 23       	and	r24, r24
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <pwm_init+0x60>
     4ec:	81 30       	cpi	r24, 0x01	; 1
     4ee:	51 f0       	breq	.+20     	; 0x504 <pwm_init+0x72>
     4f0:	19 c0       	rjmp	.+50     	; 0x524 <pwm_init+0x92>
     4f2:	63 e0       	ldi	r22, 0x03	; 3
     4f4:	81 e8       	ldi	r24, 0x81	; 129
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	7f df       	rcall	.-258    	; 0x3f8 <setBit>
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	80 e8       	ldi	r24, 0x80	; 128
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	7b df       	rcall	.-266    	; 0x3f8 <setBit>
     502:	10 c0       	rjmp	.+32     	; 0x524 <pwm_init+0x92>
     504:	63 e0       	ldi	r22, 0x03	; 3
     506:	81 e8       	ldi	r24, 0x81	; 129
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	82 df       	rcall	.-252    	; 0x410 <clearBit>
     50c:	8d 81       	ldd	r24, Y+5	; 0x05
     50e:	88 23       	and	r24, r24
     510:	29 f0       	breq	.+10     	; 0x51c <pwm_init+0x8a>
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	7b df       	rcall	.-266    	; 0x410 <clearBit>
     51a:	04 c0       	rjmp	.+8      	; 0x524 <pwm_init+0x92>
     51c:	61 e0       	ldi	r22, 0x01	; 1
     51e:	80 e8       	ldi	r24, 0x80	; 128
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	6a df       	rcall	.-300    	; 0x3f8 <setBit>
     524:	8f 81       	ldd	r24, Y+7	; 0x07
     526:	88 23       	and	r24, r24
     528:	71 f0       	breq	.+28     	; 0x546 <pwm_init+0xb4>
     52a:	67 e0       	ldi	r22, 0x07	; 7
     52c:	80 e8       	ldi	r24, 0x80	; 128
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	63 df       	rcall	.-314    	; 0x3f8 <setBit>
     532:	48 85       	ldd	r20, Y+8	; 0x08
     534:	66 e0       	ldi	r22, 0x06	; 6
     536:	80 e8       	ldi	r24, 0x80	; 128
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	46 df       	rcall	.-372    	; 0x3c8 <updateBit>
     53c:	63 e0       	ldi	r22, 0x03	; 3
     53e:	75 e0       	ldi	r23, 0x05	; 5
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	97 de       	rcall	.-722    	; 0x274 <gpio_init>
     546:	89 85       	ldd	r24, Y+9	; 0x09
     548:	88 23       	and	r24, r24
     54a:	71 f0       	breq	.+28     	; 0x568 <pwm_init+0xd6>
     54c:	65 e0       	ldi	r22, 0x05	; 5
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	52 df       	rcall	.-348    	; 0x3f8 <setBit>
     554:	4a 85       	ldd	r20, Y+10	; 0x0a
     556:	64 e0       	ldi	r22, 0x04	; 4
     558:	80 e8       	ldi	r24, 0x80	; 128
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	35 df       	rcall	.-406    	; 0x3c8 <updateBit>
     55e:	63 e0       	ldi	r22, 0x03	; 3
     560:	74 e0       	ldi	r23, 0x04	; 4
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	86 de       	rcall	.-756    	; 0x274 <gpio_init>
     568:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <u8_pwm1aPercent>
     56c:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <u8_pwm1bPercent>
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <pwm_start>:
     576:	ef 92       	push	r14
     578:	ff 92       	push	r15
     57a:	0f 93       	push	r16
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	cd b7       	in	r28, 0x3d	; 61
     584:	de b7       	in	r29, 0x3e	; 62
     586:	2b 97       	sbiw	r28, 0x0b	; 11
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	f8 94       	cli
     58c:	de bf       	out	0x3e, r29	; 62
     58e:	0f be       	out	0x3f, r0	; 63
     590:	cd bf       	out	0x3d, r28	; 61
     592:	4e 2d       	mov	r20, r14
     594:	5f 2d       	mov	r21, r15
     596:	60 2f       	mov	r22, r16
     598:	71 2f       	mov	r23, r17
     59a:	82 2f       	mov	r24, r18
     59c:	0e d5       	rcall	.+2588   	; 0xfba <timer_start>
     59e:	2b 96       	adiw	r28, 0x0b	; 11
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	ef 90       	pop	r14
     5b6:	08 95       	ret

000005b8 <pwm_setDutyCycle>:

void pwm_setDutyCycle(pwm_struct_t s_pwm, timer_channel_enum_t e_channel, u8 u8_percent)
{
     5b8:	af 92       	push	r10
     5ba:	cf 92       	push	r12
     5bc:	ef 92       	push	r14
     5be:	ff 92       	push	r15
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
     5c8:	cd b7       	in	r28, 0x3d	; 61
     5ca:	de b7       	in	r29, 0x3e	; 62
     5cc:	2b 97       	sbiw	r28, 0x0b	; 11
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	9e 2d       	mov	r25, r14
     5da:	e9 82       	std	Y+1, r14	; 0x01
     5dc:	fa 82       	std	Y+2, r15	; 0x02
     5de:	0b 83       	std	Y+3, r16	; 0x03
     5e0:	1c 83       	std	Y+4, r17	; 0x04
     5e2:	2d 83       	std	Y+5, r18	; 0x05
     5e4:	3e 83       	std	Y+6, r19	; 0x06
     5e6:	4f 83       	std	Y+7, r20	; 0x07
     5e8:	58 87       	std	Y+8, r21	; 0x08
     5ea:	69 87       	std	Y+9, r22	; 0x09
     5ec:	7a 87       	std	Y+10, r23	; 0x0a
     5ee:	8b 87       	std	Y+11, r24	; 0x0b
	switch(s_pwm.base.peripheral)
     5f0:	91 30       	cpi	r25, 0x01	; 1
     5f2:	21 f5       	brne	.+72     	; 0x63c <pwm_setDutyCycle+0x84>
     5f4:	8c 2d       	mov	r24, r12
			}
		#endif
			break;
		case TIMER1:
		#ifdef USING_PWM1
			if (e_channel == CHANNEL_A)
     5f6:	c1 10       	cpse	r12, r1
     5f8:	10 c0       	rjmp	.+32     	; 0x61a <pwm_setDutyCycle+0x62>
			{
				u8_pwm1aPercent = u8_percent;
     5fa:	a0 92 47 01 	sts	0x0147, r10	; 0x800147 <u8_pwm1aPercent>
				OCR1A = ruleOfThree(100, u8_percent, ICR1);
     5fe:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     602:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     606:	6a 2d       	mov	r22, r10
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	84 e6       	ldi	r24, 0x64	; 100
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	35 df       	rcall	.-406    	; 0x47a <ruleOfThree>
     610:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     614:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     618:	11 c0       	rjmp	.+34     	; 0x63c <pwm_setDutyCycle+0x84>
			}
			if (e_channel == CHANNEL_B)
     61a:	81 30       	cpi	r24, 0x01	; 1
     61c:	79 f4       	brne	.+30     	; 0x63c <pwm_setDutyCycle+0x84>
			{
				u8_pwm1bPercent = u8_percent;
     61e:	a0 92 46 01 	sts	0x0146, r10	; 0x800146 <u8_pwm1bPercent>
				OCR1B = ruleOfThree(100, u8_percent, ICR1);
     622:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     626:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     62a:	6a 2d       	mov	r22, r10
     62c:	70 e0       	ldi	r23, 0x00	; 0
     62e:	84 e6       	ldi	r24, 0x64	; 100
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	23 df       	rcall	.-442    	; 0x47a <ruleOfThree>
     634:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     638:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				OCR3B = ruleOfThree(100, u8_percent, ICR3);
			}
		#endif
			break;
	}
}
     63c:	2b 96       	adiw	r28, 0x0b	; 11
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	0f 91       	pop	r16
     650:	ff 90       	pop	r15
     652:	ef 90       	pop	r14
     654:	cf 90       	pop	r12
     656:	af 90       	pop	r10
     658:	08 95       	ret

0000065a <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     65a:	1f 92       	push	r1
     65c:	0f 92       	push	r0
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	0f 92       	push	r0
     662:	11 24       	eor	r1, r1
     664:	0b b6       	in	r0, 0x3b	; 59
     666:	0f 92       	push	r0
     668:	8f 93       	push	r24
     66a:	9f 93       	push	r25
     66c:	ef 93       	push	r30
     66e:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     670:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <u8_RLastReceivedIndex>
     674:	f0 e0       	ldi	r31, 0x00	; 0
     676:	8e b5       	in	r24, 0x2e	; 46
     678:	e2 5b       	subi	r30, 0xB2	; 178
     67a:	fe 4f       	sbci	r31, 0xFE	; 254
     67c:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     67e:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8_RLastReceivedIndex>
     682:	89 30       	cpi	r24, 0x09	; 9
     684:	30 f4       	brcc	.+12     	; 0x692 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     686:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <u8_RLastReceivedIndex>
     68a:	8f 5f       	subi	r24, 0xFF	; 255
     68c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <u8_RLastReceivedIndex>
     690:	02 c0       	rjmp	.+4      	; 0x696 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     692:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     69c:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <u8_TLastTransmittedIndex>
     6a0:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <u8_TLastRequestedIndex>
     6a4:	98 17       	cp	r25, r24
     6a6:	a1 f0       	breq	.+40     	; 0x6d0 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     6a8:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <u8_TLastTransmittedIndex>
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	e8 5a       	subi	r30, 0xA8	; 168
     6b0:	fe 4f       	sbci	r31, 0xFE	; 254
     6b2:	80 81       	ld	r24, Z
     6b4:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     6b6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8_TLastTransmittedIndex>
     6ba:	89 30       	cpi	r24, 0x09	; 9
     6bc:	30 f4       	brcc	.+12     	; 0x6ca <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     6be:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <u8_TLastTransmittedIndex>
     6c2:	8f 5f       	subi	r24, 0xFF	; 255
     6c4:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <u8_TLastTransmittedIndex>
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     6ca:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <u8_TLastTransmittedIndex>
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <b_TAvailable>
	}
}
     6d6:	ff 91       	pop	r31
     6d8:	ef 91       	pop	r30
     6da:	9f 91       	pop	r25
     6dc:	8f 91       	pop	r24
     6de:	0f 90       	pop	r0
     6e0:	0b be       	out	0x3b, r0	; 59
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     6ec:	8f 92       	push	r8
     6ee:	9f 92       	push	r9
     6f0:	af 92       	push	r10
     6f2:	bf 92       	push	r11
     6f4:	ef 92       	push	r14
     6f6:	ff 92       	push	r15
     6f8:	0f 93       	push	r16
     6fa:	1f 93       	push	r17
     6fc:	cf 93       	push	r28
     6fe:	df 93       	push	r29
     700:	00 d0       	rcall	.+0      	; 0x702 <calculateTopRegister+0x16>
     702:	00 d0       	rcall	.+0      	; 0x704 <calculateTopRegister+0x18>
     704:	1f 92       	push	r1
     706:	cd b7       	in	r28, 0x3d	; 61
     708:	de b7       	in	r29, 0x3e	; 62
     70a:	48 01       	movw	r8, r16
     70c:	59 01       	movw	r10, r18
     70e:	41 30       	cpi	r20, 0x01	; 1
     710:	21 f0       	breq	.+8      	; 0x71a <calculateTopRegister+0x2e>
     712:	42 30       	cpi	r20, 0x02	; 2
     714:	09 f4       	brne	.+2      	; 0x718 <calculateTopRegister+0x2c>
     716:	88 c0       	rjmp	.+272    	; 0x828 <calculateTopRegister+0x13c>
     718:	4c c1       	rjmp	.+664    	; 0x9b2 <calculateTopRegister+0x2c6>
     71a:	60 e0       	ldi	r22, 0x00	; 0
     71c:	72 e1       	ldi	r23, 0x12	; 18
     71e:	8a e7       	ldi	r24, 0x7A	; 122
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	a9 01       	movw	r20, r18
     724:	98 01       	movw	r18, r16
     726:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     72a:	da 01       	movw	r26, r20
     72c:	c9 01       	movw	r24, r18
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	a1 09       	sbc	r26, r1
     732:	b1 09       	sbc	r27, r1
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	a2 07       	cpc	r26, r18
     73a:	b1 05       	cpc	r27, r1
     73c:	50 f4       	brcc	.+20     	; 0x752 <calculateTopRegister+0x66>
     73e:	49 ef       	ldi	r20, 0xF9	; 249
     740:	5f ef       	ldi	r21, 0xFF	; 255
     742:	6f ef       	ldi	r22, 0xFF	; 255
     744:	70 e0       	ldi	r23, 0x00	; 0
     746:	f7 01       	movw	r30, r14
     748:	40 83       	st	Z, r20
     74a:	51 83       	std	Z+1, r21	; 0x01
     74c:	62 83       	std	Z+2, r22	; 0x02
     74e:	73 83       	std	Z+3, r23	; 0x03
     750:	33 c1       	rjmp	.+614    	; 0x9b8 <calculateTopRegister+0x2cc>
     752:	60 e4       	ldi	r22, 0x40	; 64
     754:	72 e4       	ldi	r23, 0x42	; 66
     756:	8f e0       	ldi	r24, 0x0F	; 15
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	a5 01       	movw	r20, r10
     75c:	94 01       	movw	r18, r8
     75e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     762:	da 01       	movw	r26, r20
     764:	c9 01       	movw	r24, r18
     766:	01 97       	sbiw	r24, 0x01	; 1
     768:	a1 09       	sbc	r26, r1
     76a:	b1 09       	sbc	r27, r1
     76c:	00 97       	sbiw	r24, 0x00	; 0
     76e:	f1 e0       	ldi	r31, 0x01	; 1
     770:	af 07       	cpc	r26, r31
     772:	b1 05       	cpc	r27, r1
     774:	50 f4       	brcc	.+20     	; 0x78a <calculateTopRegister+0x9e>
     776:	4a ef       	ldi	r20, 0xFA	; 250
     778:	5f ef       	ldi	r21, 0xFF	; 255
     77a:	6f ef       	ldi	r22, 0xFF	; 255
     77c:	70 e0       	ldi	r23, 0x00	; 0
     77e:	f7 01       	movw	r30, r14
     780:	40 83       	st	Z, r20
     782:	51 83       	std	Z+1, r21	; 0x01
     784:	62 83       	std	Z+2, r22	; 0x02
     786:	73 83       	std	Z+3, r23	; 0x03
     788:	17 c1       	rjmp	.+558    	; 0x9b8 <calculateTopRegister+0x2cc>
     78a:	68 e4       	ldi	r22, 0x48	; 72
     78c:	78 ee       	ldi	r23, 0xE8	; 232
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	a5 01       	movw	r20, r10
     794:	94 01       	movw	r18, r8
     796:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     79a:	da 01       	movw	r26, r20
     79c:	c9 01       	movw	r24, r18
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	a1 09       	sbc	r26, r1
     7a2:	b1 09       	sbc	r27, r1
     7a4:	00 97       	sbiw	r24, 0x00	; 0
     7a6:	f1 e0       	ldi	r31, 0x01	; 1
     7a8:	af 07       	cpc	r26, r31
     7aa:	b1 05       	cpc	r27, r1
     7ac:	50 f4       	brcc	.+20     	; 0x7c2 <calculateTopRegister+0xd6>
     7ae:	4c ef       	ldi	r20, 0xFC	; 252
     7b0:	5f ef       	ldi	r21, 0xFF	; 255
     7b2:	6f ef       	ldi	r22, 0xFF	; 255
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	f7 01       	movw	r30, r14
     7b8:	40 83       	st	Z, r20
     7ba:	51 83       	std	Z+1, r21	; 0x01
     7bc:	62 83       	std	Z+2, r22	; 0x02
     7be:	73 83       	std	Z+3, r23	; 0x03
     7c0:	fb c0       	rjmp	.+502    	; 0x9b8 <calculateTopRegister+0x2cc>
     7c2:	62 e1       	ldi	r22, 0x12	; 18
     7c4:	7a e7       	ldi	r23, 0x7A	; 122
     7c6:	80 e0       	ldi	r24, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a5 01       	movw	r20, r10
     7cc:	94 01       	movw	r18, r8
     7ce:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     7d2:	da 01       	movw	r26, r20
     7d4:	c9 01       	movw	r24, r18
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	a1 09       	sbc	r26, r1
     7da:	b1 09       	sbc	r27, r1
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	af 07       	cpc	r26, r31
     7e2:	b1 05       	cpc	r27, r1
     7e4:	50 f4       	brcc	.+20     	; 0x7fa <calculateTopRegister+0x10e>
     7e6:	4e ef       	ldi	r20, 0xFE	; 254
     7e8:	5f ef       	ldi	r21, 0xFF	; 255
     7ea:	6f ef       	ldi	r22, 0xFF	; 255
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	f7 01       	movw	r30, r14
     7f0:	40 83       	st	Z, r20
     7f2:	51 83       	std	Z+1, r21	; 0x01
     7f4:	62 83       	std	Z+2, r22	; 0x02
     7f6:	73 83       	std	Z+3, r23	; 0x03
     7f8:	df c0       	rjmp	.+446    	; 0x9b8 <calculateTopRegister+0x2cc>
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	9f ef       	ldi	r25, 0xFF	; 255
     7fe:	af ef       	ldi	r26, 0xFF	; 255
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	f7 01       	movw	r30, r14
     804:	80 83       	st	Z, r24
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	a2 83       	std	Z+2, r26	; 0x02
     80a:	b3 83       	std	Z+3, r27	; 0x03
     80c:	64 e8       	ldi	r22, 0x84	; 132
     80e:	7e e1       	ldi	r23, 0x1E	; 30
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a5 01       	movw	r20, r10
     816:	94 01       	movw	r18, r8
     818:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     81c:	da 01       	movw	r26, r20
     81e:	c9 01       	movw	r24, r18
     820:	01 97       	sbiw	r24, 0x01	; 1
     822:	a1 09       	sbc	r26, r1
     824:	b1 09       	sbc	r27, r1
     826:	c8 c0       	rjmp	.+400    	; 0x9b8 <calculateTopRegister+0x2cc>
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	72 e1       	ldi	r23, 0x12	; 18
     82c:	8a e7       	ldi	r24, 0x7A	; 122
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a9 01       	movw	r20, r18
     832:	98 01       	movw	r18, r16
     834:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     838:	da 01       	movw	r26, r20
     83a:	c9 01       	movw	r24, r18
     83c:	01 97       	sbiw	r24, 0x01	; 1
     83e:	a1 09       	sbc	r26, r1
     840:	b1 09       	sbc	r27, r1
     842:	8f 3f       	cpi	r24, 0xFF	; 255
     844:	91 05       	cpc	r25, r1
     846:	a1 05       	cpc	r26, r1
     848:	b1 05       	cpc	r27, r1
     84a:	09 f0       	breq	.+2      	; 0x84e <calculateTopRegister+0x162>
     84c:	50 f4       	brcc	.+20     	; 0x862 <calculateTopRegister+0x176>
     84e:	49 ef       	ldi	r20, 0xF9	; 249
     850:	5f ef       	ldi	r21, 0xFF	; 255
     852:	6f ef       	ldi	r22, 0xFF	; 255
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	f7 01       	movw	r30, r14
     858:	40 83       	st	Z, r20
     85a:	51 83       	std	Z+1, r21	; 0x01
     85c:	62 83       	std	Z+2, r22	; 0x02
     85e:	73 83       	std	Z+3, r23	; 0x03
     860:	ab c0       	rjmp	.+342    	; 0x9b8 <calculateTopRegister+0x2cc>
     862:	60 e4       	ldi	r22, 0x40	; 64
     864:	72 e4       	ldi	r23, 0x42	; 66
     866:	8f e0       	ldi	r24, 0x0F	; 15
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	a5 01       	movw	r20, r10
     86c:	94 01       	movw	r18, r8
     86e:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     872:	da 01       	movw	r26, r20
     874:	c9 01       	movw	r24, r18
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	a1 09       	sbc	r26, r1
     87a:	b1 09       	sbc	r27, r1
     87c:	8f 3f       	cpi	r24, 0xFF	; 255
     87e:	91 05       	cpc	r25, r1
     880:	a1 05       	cpc	r26, r1
     882:	b1 05       	cpc	r27, r1
     884:	09 f0       	breq	.+2      	; 0x888 <calculateTopRegister+0x19c>
     886:	50 f4       	brcc	.+20     	; 0x89c <calculateTopRegister+0x1b0>
     888:	4a ef       	ldi	r20, 0xFA	; 250
     88a:	5f ef       	ldi	r21, 0xFF	; 255
     88c:	6f ef       	ldi	r22, 0xFF	; 255
     88e:	70 e0       	ldi	r23, 0x00	; 0
     890:	f7 01       	movw	r30, r14
     892:	40 83       	st	Z, r20
     894:	51 83       	std	Z+1, r21	; 0x01
     896:	62 83       	std	Z+2, r22	; 0x02
     898:	73 83       	std	Z+3, r23	; 0x03
     89a:	8e c0       	rjmp	.+284    	; 0x9b8 <calculateTopRegister+0x2cc>
     89c:	60 e9       	ldi	r22, 0x90	; 144
     89e:	70 ed       	ldi	r23, 0xD0	; 208
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a5 01       	movw	r20, r10
     8a6:	94 01       	movw	r18, r8
     8a8:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     8ac:	da 01       	movw	r26, r20
     8ae:	c9 01       	movw	r24, r18
     8b0:	01 97       	sbiw	r24, 0x01	; 1
     8b2:	a1 09       	sbc	r26, r1
     8b4:	b1 09       	sbc	r27, r1
     8b6:	8f 3f       	cpi	r24, 0xFF	; 255
     8b8:	91 05       	cpc	r25, r1
     8ba:	a1 05       	cpc	r26, r1
     8bc:	b1 05       	cpc	r27, r1
     8be:	09 f0       	breq	.+2      	; 0x8c2 <calculateTopRegister+0x1d6>
     8c0:	50 f4       	brcc	.+20     	; 0x8d6 <calculateTopRegister+0x1ea>
     8c2:	4b ef       	ldi	r20, 0xFB	; 251
     8c4:	5f ef       	ldi	r21, 0xFF	; 255
     8c6:	6f ef       	ldi	r22, 0xFF	; 255
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	f7 01       	movw	r30, r14
     8cc:	40 83       	st	Z, r20
     8ce:	51 83       	std	Z+1, r21	; 0x01
     8d0:	62 83       	std	Z+2, r22	; 0x02
     8d2:	73 83       	std	Z+3, r23	; 0x03
     8d4:	71 c0       	rjmp	.+226    	; 0x9b8 <calculateTopRegister+0x2cc>
     8d6:	68 e4       	ldi	r22, 0x48	; 72
     8d8:	78 ee       	ldi	r23, 0xE8	; 232
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	a5 01       	movw	r20, r10
     8e0:	94 01       	movw	r18, r8
     8e2:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     8e6:	da 01       	movw	r26, r20
     8e8:	c9 01       	movw	r24, r18
     8ea:	01 97       	sbiw	r24, 0x01	; 1
     8ec:	a1 09       	sbc	r26, r1
     8ee:	b1 09       	sbc	r27, r1
     8f0:	8f 3f       	cpi	r24, 0xFF	; 255
     8f2:	91 05       	cpc	r25, r1
     8f4:	a1 05       	cpc	r26, r1
     8f6:	b1 05       	cpc	r27, r1
     8f8:	09 f0       	breq	.+2      	; 0x8fc <calculateTopRegister+0x210>
     8fa:	50 f4       	brcc	.+20     	; 0x910 <calculateTopRegister+0x224>
     8fc:	4c ef       	ldi	r20, 0xFC	; 252
     8fe:	5f ef       	ldi	r21, 0xFF	; 255
     900:	6f ef       	ldi	r22, 0xFF	; 255
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	f7 01       	movw	r30, r14
     906:	40 83       	st	Z, r20
     908:	51 83       	std	Z+1, r21	; 0x01
     90a:	62 83       	std	Z+2, r22	; 0x02
     90c:	73 83       	std	Z+3, r23	; 0x03
     90e:	54 c0       	rjmp	.+168    	; 0x9b8 <calculateTopRegister+0x2cc>
     910:	64 e2       	ldi	r22, 0x24	; 36
     912:	74 ef       	ldi	r23, 0xF4	; 244
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a5 01       	movw	r20, r10
     91a:	94 01       	movw	r18, r8
     91c:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     920:	da 01       	movw	r26, r20
     922:	c9 01       	movw	r24, r18
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	a1 09       	sbc	r26, r1
     928:	b1 09       	sbc	r27, r1
     92a:	8f 3f       	cpi	r24, 0xFF	; 255
     92c:	91 05       	cpc	r25, r1
     92e:	a1 05       	cpc	r26, r1
     930:	b1 05       	cpc	r27, r1
     932:	09 f0       	breq	.+2      	; 0x936 <calculateTopRegister+0x24a>
     934:	50 f4       	brcc	.+20     	; 0x94a <calculateTopRegister+0x25e>
     936:	4d ef       	ldi	r20, 0xFD	; 253
     938:	5f ef       	ldi	r21, 0xFF	; 255
     93a:	6f ef       	ldi	r22, 0xFF	; 255
     93c:	70 e0       	ldi	r23, 0x00	; 0
     93e:	f7 01       	movw	r30, r14
     940:	40 83       	st	Z, r20
     942:	51 83       	std	Z+1, r21	; 0x01
     944:	62 83       	std	Z+2, r22	; 0x02
     946:	73 83       	std	Z+3, r23	; 0x03
     948:	37 c0       	rjmp	.+110    	; 0x9b8 <calculateTopRegister+0x2cc>
     94a:	62 e1       	ldi	r22, 0x12	; 18
     94c:	7a e7       	ldi	r23, 0x7A	; 122
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	a5 01       	movw	r20, r10
     954:	94 01       	movw	r18, r8
     956:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     95a:	da 01       	movw	r26, r20
     95c:	c9 01       	movw	r24, r18
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	a1 09       	sbc	r26, r1
     962:	b1 09       	sbc	r27, r1
     964:	8f 3f       	cpi	r24, 0xFF	; 255
     966:	91 05       	cpc	r25, r1
     968:	a1 05       	cpc	r26, r1
     96a:	b1 05       	cpc	r27, r1
     96c:	09 f0       	breq	.+2      	; 0x970 <calculateTopRegister+0x284>
     96e:	50 f4       	brcc	.+20     	; 0x984 <calculateTopRegister+0x298>
     970:	4e ef       	ldi	r20, 0xFE	; 254
     972:	5f ef       	ldi	r21, 0xFF	; 255
     974:	6f ef       	ldi	r22, 0xFF	; 255
     976:	70 e0       	ldi	r23, 0x00	; 0
     978:	f7 01       	movw	r30, r14
     97a:	40 83       	st	Z, r20
     97c:	51 83       	std	Z+1, r21	; 0x01
     97e:	62 83       	std	Z+2, r22	; 0x02
     980:	73 83       	std	Z+3, r23	; 0x03
     982:	1a c0       	rjmp	.+52     	; 0x9b8 <calculateTopRegister+0x2cc>
     984:	8f ef       	ldi	r24, 0xFF	; 255
     986:	9f ef       	ldi	r25, 0xFF	; 255
     988:	af ef       	ldi	r26, 0xFF	; 255
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	f7 01       	movw	r30, r14
     98e:	80 83       	st	Z, r24
     990:	91 83       	std	Z+1, r25	; 0x01
     992:	a2 83       	std	Z+2, r26	; 0x02
     994:	b3 83       	std	Z+3, r27	; 0x03
     996:	64 e8       	ldi	r22, 0x84	; 132
     998:	7e e1       	ldi	r23, 0x1E	; 30
     99a:	80 e0       	ldi	r24, 0x00	; 0
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	a5 01       	movw	r20, r10
     9a0:	94 01       	movw	r18, r8
     9a2:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <__udivmodsi4>
     9a6:	da 01       	movw	r26, r20
     9a8:	c9 01       	movw	r24, r18
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	a1 09       	sbc	r26, r1
     9ae:	b1 09       	sbc	r27, r1
     9b0:	03 c0       	rjmp	.+6      	; 0x9b8 <calculateTopRegister+0x2cc>
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	dc 01       	movw	r26, r24
     9b8:	0f 90       	pop	r0
     9ba:	0f 90       	pop	r0
     9bc:	0f 90       	pop	r0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	df 91       	pop	r29
     9c4:	cf 91       	pop	r28
     9c6:	1f 91       	pop	r17
     9c8:	0f 91       	pop	r16
     9ca:	ff 90       	pop	r15
     9cc:	ef 90       	pop	r14
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	8f 90       	pop	r8
     9d6:	08 95       	ret

000009d8 <__vector_15>:
     9d8:	1f 92       	push	r1
     9da:	0f 92       	push	r0
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	0f 92       	push	r0
     9e0:	11 24       	eor	r1, r1
     9e2:	0b b6       	in	r0, 0x3b	; 59
     9e4:	0f 92       	push	r0
     9e6:	2f 93       	push	r18
     9e8:	3f 93       	push	r19
     9ea:	4f 93       	push	r20
     9ec:	5f 93       	push	r21
     9ee:	6f 93       	push	r22
     9f0:	7f 93       	push	r23
     9f2:	8f 93       	push	r24
     9f4:	9f 93       	push	r25
     9f6:	af 93       	push	r26
     9f8:	bf 93       	push	r27
     9fa:	ef 93       	push	r30
     9fc:	ff 93       	push	r31
     9fe:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <p_timer1Callbacks>
     a02:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <p_timer1Callbacks+0x1>
     a06:	09 95       	icall
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0b be       	out	0x3b, r0	; 59
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_13>:
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	0b b6       	in	r0, 0x3b	; 59
     a3a:	0f 92       	push	r0
     a3c:	0f 93       	push	r16
     a3e:	1f 93       	push	r17
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	4f 93       	push	r20
     a46:	5f 93       	push	r21
     a48:	6f 93       	push	r22
     a4a:	7f 93       	push	r23
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	af 93       	push	r26
     a52:	bf 93       	push	r27
     a54:	cf 93       	push	r28
     a56:	df 93       	push	r29
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
     a5c:	c1 e8       	ldi	r28, 0x81	; 129
     a5e:	d0 e0       	ldi	r29, 0x00	; 0
     a60:	88 81       	ld	r24, Y
     a62:	64 e0       	ldi	r22, 0x04	; 4
     a64:	e2 dc       	rcall	.-1596   	; 0x42a <checkBit>
     a66:	18 2f       	mov	r17, r24
     a68:	88 81       	ld	r24, Y
     a6a:	63 e0       	ldi	r22, 0x03	; 3
     a6c:	de dc       	rcall	.-1604   	; 0x42a <checkBit>
     a6e:	c1 2f       	mov	r28, r17
     a70:	cc 0f       	add	r28, r28
     a72:	cc 0f       	add	r28, r28
     a74:	cc 0f       	add	r28, r28
     a76:	24 e0       	ldi	r18, 0x04	; 4
     a78:	82 9f       	mul	r24, r18
     a7a:	c0 01       	movw	r24, r0
     a7c:	11 24       	eor	r1, r1
     a7e:	c8 2b       	or	r28, r24
     a80:	00 e8       	ldi	r16, 0x80	; 128
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	f8 01       	movw	r30, r16
     a86:	80 81       	ld	r24, Z
     a88:	61 e0       	ldi	r22, 0x01	; 1
     a8a:	cf dc       	rcall	.-1634   	; 0x42a <checkBit>
     a8c:	d8 2f       	mov	r29, r24
     a8e:	f8 01       	movw	r30, r16
     a90:	80 81       	ld	r24, Z
     a92:	60 e0       	ldi	r22, 0x00	; 0
     a94:	ca dc       	rcall	.-1644   	; 0x42a <checkBit>
     a96:	dd 0f       	add	r29, r29
     a98:	8c 2b       	or	r24, r28
     a9a:	8d 2b       	or	r24, r29
     a9c:	88 30       	cpi	r24, 0x08	; 8
     a9e:	18 f4       	brcc	.+6      	; 0xaa6 <__vector_13+0x78>
     aa0:	84 30       	cpi	r24, 0x04	; 4
     aa2:	19 f4       	brne	.+6      	; 0xaaa <__vector_13+0x7c>
     aa4:	08 c0       	rjmp	.+16     	; 0xab6 <__vector_13+0x88>
     aa6:	80 fd       	sbrc	r24, 0
     aa8:	06 c0       	rjmp	.+12     	; 0xab6 <__vector_13+0x88>
     aaa:	e0 91 66 01 	lds	r30, 0x0166	; 0x800166 <p_timer1Callbacks+0x2>
     aae:	f0 91 67 01 	lds	r31, 0x0167	; 0x800167 <p_timer1Callbacks+0x3>
     ab2:	09 95       	icall
     ab4:	05 c0       	rjmp	.+10     	; 0xac0 <__vector_13+0x92>
     ab6:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <p_timer1Callbacks>
     aba:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <p_timer1Callbacks+0x1>
     abe:	09 95       	icall
     ac0:	ff 91       	pop	r31
     ac2:	ef 91       	pop	r30
     ac4:	df 91       	pop	r29
     ac6:	cf 91       	pop	r28
     ac8:	bf 91       	pop	r27
     aca:	af 91       	pop	r26
     acc:	9f 91       	pop	r25
     ace:	8f 91       	pop	r24
     ad0:	7f 91       	pop	r23
     ad2:	6f 91       	pop	r22
     ad4:	5f 91       	pop	r21
     ad6:	4f 91       	pop	r20
     ad8:	3f 91       	pop	r19
     ada:	2f 91       	pop	r18
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	0f 90       	pop	r0
     ae2:	0b be       	out	0x3b, r0	; 59
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <__vector_14>:
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	0b b6       	in	r0, 0x3b	; 59
     afa:	0f 92       	push	r0
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
     b14:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <p_timer1Callbacks+0x4>
     b18:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <p_timer1Callbacks+0x5>
     b1c:	09 95       	icall
     b1e:	ff 91       	pop	r31
     b20:	ef 91       	pop	r30
     b22:	bf 91       	pop	r27
     b24:	af 91       	pop	r26
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	7f 91       	pop	r23
     b2c:	6f 91       	pop	r22
     b2e:	5f 91       	pop	r21
     b30:	4f 91       	pop	r20
     b32:	3f 91       	pop	r19
     b34:	2f 91       	pop	r18
     b36:	0f 90       	pop	r0
     b38:	0b be       	out	0x3b, r0	; 59
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_12>:
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	0b b6       	in	r0, 0x3b	; 59
     b50:	0f 92       	push	r0
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
     b72:	c1 e8       	ldi	r28, 0x81	; 129
     b74:	d0 e0       	ldi	r29, 0x00	; 0
     b76:	88 81       	ld	r24, Y
     b78:	64 e0       	ldi	r22, 0x04	; 4
     b7a:	57 dc       	rcall	.-1874   	; 0x42a <checkBit>
     b7c:	18 2f       	mov	r17, r24
     b7e:	88 81       	ld	r24, Y
     b80:	63 e0       	ldi	r22, 0x03	; 3
     b82:	53 dc       	rcall	.-1882   	; 0x42a <checkBit>
     b84:	c1 2f       	mov	r28, r17
     b86:	cc 0f       	add	r28, r28
     b88:	cc 0f       	add	r28, r28
     b8a:	cc 0f       	add	r28, r28
     b8c:	24 e0       	ldi	r18, 0x04	; 4
     b8e:	82 9f       	mul	r24, r18
     b90:	c0 01       	movw	r24, r0
     b92:	11 24       	eor	r1, r1
     b94:	c8 2b       	or	r28, r24
     b96:	00 e8       	ldi	r16, 0x80	; 128
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 81       	ld	r24, Z
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	44 dc       	rcall	.-1912   	; 0x42a <checkBit>
     ba2:	d8 2f       	mov	r29, r24
     ba4:	f8 01       	movw	r30, r16
     ba6:	80 81       	ld	r24, Z
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	3f dc       	rcall	.-1922   	; 0x42a <checkBit>
     bac:	dd 0f       	add	r29, r29
     bae:	8c 2b       	or	r24, r28
     bb0:	8d 2b       	or	r24, r29
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__vector_12+0x76>
     bb6:	80 ff       	sbrs	r24, 0
     bb8:	06 c0       	rjmp	.+12     	; 0xbc6 <__vector_12+0x82>
     bba:	e0 91 6a 01 	lds	r30, 0x016A	; 0x80016a <p_timer1Callbacks+0x6>
     bbe:	f0 91 6b 01 	lds	r31, 0x016B	; 0x80016b <p_timer1Callbacks+0x7>
     bc2:	09 95       	icall
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <__vector_12+0x8c>
     bc6:	e0 91 64 01 	lds	r30, 0x0164	; 0x800164 <p_timer1Callbacks>
     bca:	f0 91 65 01 	lds	r31, 0x0165	; 0x800165 <p_timer1Callbacks+0x1>
     bce:	09 95       	icall
     bd0:	ff 91       	pop	r31
     bd2:	ef 91       	pop	r30
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	bf 91       	pop	r27
     bda:	af 91       	pop	r26
     bdc:	9f 91       	pop	r25
     bde:	8f 91       	pop	r24
     be0:	7f 91       	pop	r23
     be2:	6f 91       	pop	r22
     be4:	5f 91       	pop	r21
     be6:	4f 91       	pop	r20
     be8:	3f 91       	pop	r19
     bea:	2f 91       	pop	r18
     bec:	1f 91       	pop	r17
     bee:	0f 91       	pop	r16
     bf0:	0f 90       	pop	r0
     bf2:	0b be       	out	0x3b, r0	; 59
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <__vector_11>:
     bfe:	1f 92       	push	r1
     c00:	0f 92       	push	r0
     c02:	0f b6       	in	r0, 0x3f	; 63
     c04:	0f 92       	push	r0
     c06:	11 24       	eor	r1, r1
     c08:	0b b6       	in	r0, 0x3b	; 59
     c0a:	0f 92       	push	r0
     c0c:	2f 93       	push	r18
     c0e:	3f 93       	push	r19
     c10:	4f 93       	push	r20
     c12:	5f 93       	push	r21
     c14:	6f 93       	push	r22
     c16:	7f 93       	push	r23
     c18:	8f 93       	push	r24
     c1a:	9f 93       	push	r25
     c1c:	af 93       	push	r26
     c1e:	bf 93       	push	r27
     c20:	ef 93       	push	r30
     c22:	ff 93       	push	r31
     c24:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <p_timer2Callbacks>
     c28:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <p_timer2Callbacks+0x1>
     c2c:	09 95       	icall
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0b be       	out	0x3b, r0	; 59
     c4a:	0f 90       	pop	r0
     c4c:	0f be       	out	0x3f, r0	; 63
     c4e:	0f 90       	pop	r0
     c50:	1f 90       	pop	r1
     c52:	18 95       	reti

00000c54 <__vector_9>:
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	0b b6       	in	r0, 0x3b	; 59
     c60:	0f 92       	push	r0
     c62:	2f 93       	push	r18
     c64:	3f 93       	push	r19
     c66:	4f 93       	push	r20
     c68:	5f 93       	push	r21
     c6a:	6f 93       	push	r22
     c6c:	7f 93       	push	r23
     c6e:	8f 93       	push	r24
     c70:	9f 93       	push	r25
     c72:	af 93       	push	r26
     c74:	bf 93       	push	r27
     c76:	ef 93       	push	r30
     c78:	ff 93       	push	r31
     c7a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     c7e:	63 e0       	ldi	r22, 0x03	; 3
     c80:	d4 db       	rcall	.-2136   	; 0x42a <checkBit>
     c82:	81 11       	cpse	r24, r1
     c84:	0b c0       	rjmp	.+22     	; 0xc9c <__vector_9+0x48>
     c86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     c8a:	83 70       	andi	r24, 0x03	; 3
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	31 f0       	breq	.+12     	; 0xc9c <__vector_9+0x48>
     c90:	e0 91 70 01 	lds	r30, 0x0170	; 0x800170 <p_timer2Callbacks+0x2>
     c94:	f0 91 71 01 	lds	r31, 0x0171	; 0x800171 <p_timer2Callbacks+0x3>
     c98:	09 95       	icall
     c9a:	05 c0       	rjmp	.+10     	; 0xca6 <__vector_9+0x52>
     c9c:	e0 91 6e 01 	lds	r30, 0x016E	; 0x80016e <p_timer2Callbacks>
     ca0:	f0 91 6f 01 	lds	r31, 0x016F	; 0x80016f <p_timer2Callbacks+0x1>
     ca4:	09 95       	icall
     ca6:	ff 91       	pop	r31
     ca8:	ef 91       	pop	r30
     caa:	bf 91       	pop	r27
     cac:	af 91       	pop	r26
     cae:	9f 91       	pop	r25
     cb0:	8f 91       	pop	r24
     cb2:	7f 91       	pop	r23
     cb4:	6f 91       	pop	r22
     cb6:	5f 91       	pop	r21
     cb8:	4f 91       	pop	r20
     cba:	3f 91       	pop	r19
     cbc:	2f 91       	pop	r18
     cbe:	0f 90       	pop	r0
     cc0:	0b be       	out	0x3b, r0	; 59
     cc2:	0f 90       	pop	r0
     cc4:	0f be       	out	0x3f, r0	; 63
     cc6:	0f 90       	pop	r0
     cc8:	1f 90       	pop	r1
     cca:	18 95       	reti

00000ccc <__vector_10>:
     ccc:	1f 92       	push	r1
     cce:	0f 92       	push	r0
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	0f 92       	push	r0
     cd4:	11 24       	eor	r1, r1
     cd6:	0b b6       	in	r0, 0x3b	; 59
     cd8:	0f 92       	push	r0
     cda:	2f 93       	push	r18
     cdc:	3f 93       	push	r19
     cde:	4f 93       	push	r20
     ce0:	5f 93       	push	r21
     ce2:	6f 93       	push	r22
     ce4:	7f 93       	push	r23
     ce6:	8f 93       	push	r24
     ce8:	9f 93       	push	r25
     cea:	af 93       	push	r26
     cec:	bf 93       	push	r27
     cee:	ef 93       	push	r30
     cf0:	ff 93       	push	r31
     cf2:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <p_timer2Callbacks+0x4>
     cf6:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <p_timer2Callbacks+0x5>
     cfa:	09 95       	icall
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	0b be       	out	0x3b, r0	; 59
     d18:	0f 90       	pop	r0
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	0f 90       	pop	r0
     d1e:	1f 90       	pop	r1
     d20:	18 95       	reti

00000d22 <timer_init>:
     d22:	ef 92       	push	r14
     d24:	ff 92       	push	r15
     d26:	0f 93       	push	r16
     d28:	1f 93       	push	r17
     d2a:	cf 93       	push	r28
     d2c:	df 93       	push	r29
     d2e:	cd b7       	in	r28, 0x3d	; 61
     d30:	de b7       	in	r29, 0x3e	; 62
     d32:	29 97       	sbiw	r28, 0x09	; 9
     d34:	0f b6       	in	r0, 0x3f	; 63
     d36:	f8 94       	cli
     d38:	de bf       	out	0x3e, r29	; 62
     d3a:	0f be       	out	0x3f, r0	; 63
     d3c:	cd bf       	out	0x3d, r28	; 61
     d3e:	4d 83       	std	Y+5, r20	; 0x05
     d40:	5e 83       	std	Y+6, r21	; 0x06
     d42:	6f 83       	std	Y+7, r22	; 0x07
     d44:	78 87       	std	Y+8, r23	; 0x08
     d46:	89 87       	std	Y+9, r24	; 0x09
     d48:	0e 81       	ldd	r16, Y+6	; 0x06
     d4a:	1f 81       	ldd	r17, Y+7	; 0x07
     d4c:	28 85       	ldd	r18, Y+8	; 0x08
     d4e:	39 85       	ldd	r19, Y+9	; 0x09
     d50:	19 82       	std	Y+1, r1	; 0x01
     d52:	1a 82       	std	Y+2, r1	; 0x02
     d54:	1b 82       	std	Y+3, r1	; 0x03
     d56:	1c 82       	std	Y+4, r1	; 0x04
     d58:	41 30       	cpi	r20, 0x01	; 1
     d5a:	21 f0       	breq	.+8      	; 0xd64 <timer_init+0x42>
     d5c:	42 30       	cpi	r20, 0x02	; 2
     d5e:	09 f4       	brne	.+2      	; 0xd62 <timer_init+0x40>
     d60:	95 c0       	rjmp	.+298    	; 0xe8c <timer_init+0x16a>
     d62:	1e c1       	rjmp	.+572    	; 0xfa0 <timer_init+0x27e>
     d64:	09 3f       	cpi	r16, 0xF9	; 249
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	18 07       	cpc	r17, r24
     d6a:	28 07       	cpc	r18, r24
     d6c:	31 05       	cpc	r19, r1
     d6e:	28 f0       	brcs	.+10     	; 0xd7a <timer_init+0x58>
     d70:	09 83       	std	Y+1, r16	; 0x01
     d72:	1a 83       	std	Y+2, r17	; 0x02
     d74:	2b 83       	std	Y+3, r18	; 0x03
     d76:	3c 83       	std	Y+4, r19	; 0x04
     d78:	15 c0       	rjmp	.+42     	; 0xda4 <timer_init+0x82>
     d7a:	ce 01       	movw	r24, r28
     d7c:	01 96       	adiw	r24, 0x01	; 1
     d7e:	7c 01       	movw	r14, r24
     d80:	4d 81       	ldd	r20, Y+5	; 0x05
     d82:	5e 81       	ldd	r21, Y+6	; 0x06
     d84:	6f 81       	ldd	r22, Y+7	; 0x07
     d86:	78 85       	ldd	r23, Y+8	; 0x08
     d88:	89 85       	ldd	r24, Y+9	; 0x09
     d8a:	b0 dc       	rcall	.-1696   	; 0x6ec <calculateTopRegister>
     d8c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d90:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d94:	64 e0       	ldi	r22, 0x04	; 4
     d96:	81 e8       	ldi	r24, 0x81	; 129
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	2e db       	rcall	.-2468   	; 0x3f8 <setBit>
     d9c:	63 e0       	ldi	r22, 0x03	; 3
     d9e:	81 e8       	ldi	r24, 0x81	; 129
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	2a db       	rcall	.-2476   	; 0x3f8 <setBit>
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	ab 81       	ldd	r26, Y+3	; 0x03
     daa:	bc 81       	ldd	r27, Y+4	; 0x04
     dac:	8c 3f       	cpi	r24, 0xFC	; 252
     dae:	2f ef       	ldi	r18, 0xFF	; 255
     db0:	92 07       	cpc	r25, r18
     db2:	a2 07       	cpc	r26, r18
     db4:	b1 05       	cpc	r27, r1
     db6:	59 f1       	breq	.+86     	; 0xe0e <timer_init+0xec>
     db8:	60 f4       	brcc	.+24     	; 0xdd2 <timer_init+0xb0>
     dba:	89 3f       	cpi	r24, 0xF9	; 249
     dbc:	2f ef       	ldi	r18, 0xFF	; 255
     dbe:	92 07       	cpc	r25, r18
     dc0:	a2 07       	cpc	r26, r18
     dc2:	b1 05       	cpc	r27, r1
     dc4:	91 f0       	breq	.+36     	; 0xdea <timer_init+0xc8>
     dc6:	8a 3f       	cpi	r24, 0xFA	; 250
     dc8:	9f 4f       	sbci	r25, 0xFF	; 255
     dca:	af 4f       	sbci	r26, 0xFF	; 255
     dcc:	b1 05       	cpc	r27, r1
     dce:	b1 f0       	breq	.+44     	; 0xdfc <timer_init+0xda>
     dd0:	38 c0       	rjmp	.+112    	; 0xe42 <timer_init+0x120>
     dd2:	8e 3f       	cpi	r24, 0xFE	; 254
     dd4:	2f ef       	ldi	r18, 0xFF	; 255
     dd6:	92 07       	cpc	r25, r18
     dd8:	a2 07       	cpc	r26, r18
     dda:	b1 05       	cpc	r27, r1
     ddc:	09 f1       	breq	.+66     	; 0xe20 <timer_init+0xfe>
     dde:	8f 3f       	cpi	r24, 0xFF	; 255
     de0:	9f 4f       	sbci	r25, 0xFF	; 255
     de2:	af 4f       	sbci	r26, 0xFF	; 255
     de4:	b1 05       	cpc	r27, r1
     de6:	29 f1       	breq	.+74     	; 0xe32 <timer_init+0x110>
     de8:	2c c0       	rjmp	.+88     	; 0xe42 <timer_init+0x120>
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	89 83       	std	Y+1, r24	; 0x01
     df4:	9a 83       	std	Y+2, r25	; 0x02
     df6:	ab 83       	std	Y+3, r26	; 0x03
     df8:	bc 83       	std	Y+4, r27	; 0x04
     dfa:	23 c0       	rjmp	.+70     	; 0xe42 <timer_init+0x120>
     dfc:	82 e0       	ldi	r24, 0x02	; 2
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a0 e0       	ldi	r26, 0x00	; 0
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	89 83       	std	Y+1, r24	; 0x01
     e06:	9a 83       	std	Y+2, r25	; 0x02
     e08:	ab 83       	std	Y+3, r26	; 0x03
     e0a:	bc 83       	std	Y+4, r27	; 0x04
     e0c:	1a c0       	rjmp	.+52     	; 0xe42 <timer_init+0x120>
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	a0 e0       	ldi	r26, 0x00	; 0
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	89 83       	std	Y+1, r24	; 0x01
     e18:	9a 83       	std	Y+2, r25	; 0x02
     e1a:	ab 83       	std	Y+3, r26	; 0x03
     e1c:	bc 83       	std	Y+4, r27	; 0x04
     e1e:	11 c0       	rjmp	.+34     	; 0xe42 <timer_init+0x120>
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b0 e0       	ldi	r27, 0x00	; 0
     e28:	89 83       	std	Y+1, r24	; 0x01
     e2a:	9a 83       	std	Y+2, r25	; 0x02
     e2c:	ab 83       	std	Y+3, r26	; 0x03
     e2e:	bc 83       	std	Y+4, r27	; 0x04
     e30:	08 c0       	rjmp	.+16     	; 0xe42 <timer_init+0x120>
     e32:	85 e0       	ldi	r24, 0x05	; 5
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	9a 83       	std	Y+2, r25	; 0x02
     e3e:	ab 83       	std	Y+3, r26	; 0x03
     e40:	bc 83       	std	Y+4, r27	; 0x04
     e42:	49 81       	ldd	r20, Y+1	; 0x01
     e44:	5a 81       	ldd	r21, Y+2	; 0x02
     e46:	6b 81       	ldd	r22, Y+3	; 0x03
     e48:	7c 81       	ldd	r23, Y+4	; 0x04
     e4a:	76 95       	lsr	r23
     e4c:	67 95       	ror	r22
     e4e:	57 95       	ror	r21
     e50:	47 95       	ror	r20
     e52:	76 95       	lsr	r23
     e54:	67 95       	ror	r22
     e56:	57 95       	ror	r21
     e58:	47 95       	ror	r20
     e5a:	41 70       	andi	r20, 0x01	; 1
     e5c:	62 e0       	ldi	r22, 0x02	; 2
     e5e:	8c e6       	ldi	r24, 0x6C	; 108
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	b2 da       	rcall	.-2716   	; 0x3c8 <updateBit>
     e64:	49 81       	ldd	r20, Y+1	; 0x01
     e66:	5a 81       	ldd	r21, Y+2	; 0x02
     e68:	6b 81       	ldd	r22, Y+3	; 0x03
     e6a:	7c 81       	ldd	r23, Y+4	; 0x04
     e6c:	76 95       	lsr	r23
     e6e:	67 95       	ror	r22
     e70:	57 95       	ror	r21
     e72:	47 95       	ror	r20
     e74:	41 70       	andi	r20, 0x01	; 1
     e76:	61 e0       	ldi	r22, 0x01	; 1
     e78:	8c e6       	ldi	r24, 0x6C	; 108
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	a5 da       	rcall	.-2742   	; 0x3c8 <updateBit>
     e7e:	49 81       	ldd	r20, Y+1	; 0x01
     e80:	41 70       	andi	r20, 0x01	; 1
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	8c e6       	ldi	r24, 0x6C	; 108
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	9f da       	rcall	.-2754   	; 0x3c8 <updateBit>
     e8a:	8a c0       	rjmp	.+276    	; 0xfa0 <timer_init+0x27e>
     e8c:	09 3f       	cpi	r16, 0xF9	; 249
     e8e:	8f ef       	ldi	r24, 0xFF	; 255
     e90:	18 07       	cpc	r17, r24
     e92:	28 07       	cpc	r18, r24
     e94:	31 05       	cpc	r19, r1
     e96:	28 f0       	brcs	.+10     	; 0xea2 <timer_init+0x180>
     e98:	09 83       	std	Y+1, r16	; 0x01
     e9a:	1a 83       	std	Y+2, r17	; 0x02
     e9c:	2b 83       	std	Y+3, r18	; 0x03
     e9e:	3c 83       	std	Y+4, r19	; 0x04
     ea0:	0f c0       	rjmp	.+30     	; 0xec0 <timer_init+0x19e>
     ea2:	ce 01       	movw	r24, r28
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	7c 01       	movw	r14, r24
     ea8:	4d 81       	ldd	r20, Y+5	; 0x05
     eaa:	5e 81       	ldd	r21, Y+6	; 0x06
     eac:	6f 81       	ldd	r22, Y+7	; 0x07
     eae:	78 85       	ldd	r23, Y+8	; 0x08
     eb0:	89 85       	ldd	r24, Y+9	; 0x09
     eb2:	1c dc       	rcall	.-1992   	; 0x6ec <calculateTopRegister>
     eb4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	80 eb       	ldi	r24, 0xB0	; 176
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	9c da       	rcall	.-2760   	; 0x3f8 <setBit>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	ab 81       	ldd	r26, Y+3	; 0x03
     ec6:	bc 81       	ldd	r27, Y+4	; 0x04
     ec8:	fc 01       	movw	r30, r24
     eca:	37 96       	adiw	r30, 0x07	; 7
     ecc:	e7 30       	cpi	r30, 0x07	; 7
     ece:	f1 05       	cpc	r31, r1
     ed0:	08 f0       	brcs	.+2      	; 0xed4 <timer_init+0x1b2>
     ed2:	42 c0       	rjmp	.+132    	; 0xf58 <timer_init+0x236>
     ed4:	ea 5b       	subi	r30, 0xBA	; 186
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	0c 94 9a 0f 	jmp	0x1f34	; 0x1f34 <__tablejump2__>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	ab 83       	std	Y+3, r26	; 0x03
     eea:	bc 83       	std	Y+4, r27	; 0x04
     eec:	35 c0       	rjmp	.+106    	; 0xf58 <timer_init+0x236>
     eee:	82 e0       	ldi	r24, 0x02	; 2
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	ab 83       	std	Y+3, r26	; 0x03
     efc:	bc 83       	std	Y+4, r27	; 0x04
     efe:	2c c0       	rjmp	.+88     	; 0xf58 <timer_init+0x236>
     f00:	83 e0       	ldi	r24, 0x03	; 3
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	ab 83       	std	Y+3, r26	; 0x03
     f0e:	bc 83       	std	Y+4, r27	; 0x04
     f10:	23 c0       	rjmp	.+70     	; 0xf58 <timer_init+0x236>
     f12:	84 e0       	ldi	r24, 0x04	; 4
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	ab 83       	std	Y+3, r26	; 0x03
     f20:	bc 83       	std	Y+4, r27	; 0x04
     f22:	1a c0       	rjmp	.+52     	; 0xf58 <timer_init+0x236>
     f24:	85 e0       	ldi	r24, 0x05	; 5
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a0 e0       	ldi	r26, 0x00	; 0
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	ab 83       	std	Y+3, r26	; 0x03
     f32:	bc 83       	std	Y+4, r27	; 0x04
     f34:	11 c0       	rjmp	.+34     	; 0xf58 <timer_init+0x236>
     f36:	86 e0       	ldi	r24, 0x06	; 6
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	ab 83       	std	Y+3, r26	; 0x03
     f44:	bc 83       	std	Y+4, r27	; 0x04
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <timer_init+0x236>
     f48:	87 e0       	ldi	r24, 0x07	; 7
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	ab 83       	std	Y+3, r26	; 0x03
     f56:	bc 83       	std	Y+4, r27	; 0x04
     f58:	49 81       	ldd	r20, Y+1	; 0x01
     f5a:	5a 81       	ldd	r21, Y+2	; 0x02
     f5c:	6b 81       	ldd	r22, Y+3	; 0x03
     f5e:	7c 81       	ldd	r23, Y+4	; 0x04
     f60:	76 95       	lsr	r23
     f62:	67 95       	ror	r22
     f64:	57 95       	ror	r21
     f66:	47 95       	ror	r20
     f68:	76 95       	lsr	r23
     f6a:	67 95       	ror	r22
     f6c:	57 95       	ror	r21
     f6e:	47 95       	ror	r20
     f70:	41 70       	andi	r20, 0x01	; 1
     f72:	62 e0       	ldi	r22, 0x02	; 2
     f74:	8d e6       	ldi	r24, 0x6D	; 109
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	27 da       	rcall	.-2994   	; 0x3c8 <updateBit>
     f7a:	49 81       	ldd	r20, Y+1	; 0x01
     f7c:	5a 81       	ldd	r21, Y+2	; 0x02
     f7e:	6b 81       	ldd	r22, Y+3	; 0x03
     f80:	7c 81       	ldd	r23, Y+4	; 0x04
     f82:	76 95       	lsr	r23
     f84:	67 95       	ror	r22
     f86:	57 95       	ror	r21
     f88:	47 95       	ror	r20
     f8a:	41 70       	andi	r20, 0x01	; 1
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	8d e6       	ldi	r24, 0x6D	; 109
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	1a da       	rcall	.-3020   	; 0x3c8 <updateBit>
     f94:	49 81       	ldd	r20, Y+1	; 0x01
     f96:	41 70       	andi	r20, 0x01	; 1
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	8d e6       	ldi	r24, 0x6D	; 109
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	14 da       	rcall	.-3032   	; 0x3c8 <updateBit>
     fa0:	29 96       	adiw	r28, 0x09	; 9
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	f8 94       	cli
     fa6:	de bf       	out	0x3e, r29	; 62
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	cd bf       	out	0x3d, r28	; 61
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	08 95       	ret

00000fba <timer_start>:
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	00 d0       	rcall	.+0      	; 0xfc0 <timer_start+0x6>
     fc0:	00 d0       	rcall	.+0      	; 0xfc2 <timer_start+0x8>
     fc2:	1f 92       	push	r1
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	41 30       	cpi	r20, 0x01	; 1
     fca:	19 f0       	breq	.+6      	; 0xfd2 <timer_start+0x18>
     fcc:	42 30       	cpi	r20, 0x02	; 2
     fce:	d1 f0       	breq	.+52     	; 0x1004 <timer_start+0x4a>
     fd0:	31 c0       	rjmp	.+98     	; 0x1034 <timer_start+0x7a>
     fd2:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <u8_timer1ClockSource>
     fd6:	42 fb       	bst	r20, 2
     fd8:	44 27       	eor	r20, r20
     fda:	40 f9       	bld	r20, 0
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	81 e8       	ldi	r24, 0x81	; 129
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	f2 d9       	rcall	.-3100   	; 0x3c8 <updateBit>
     fe4:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <u8_timer1ClockSource>
     fe8:	46 95       	lsr	r20
     fea:	41 70       	andi	r20, 0x01	; 1
     fec:	61 e0       	ldi	r22, 0x01	; 1
     fee:	81 e8       	ldi	r24, 0x81	; 129
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	ea d9       	rcall	.-3116   	; 0x3c8 <updateBit>
     ff4:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <u8_timer1ClockSource>
     ff8:	41 70       	andi	r20, 0x01	; 1
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	81 e8       	ldi	r24, 0x81	; 129
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	e3 d9       	rcall	.-3130   	; 0x3c8 <updateBit>
    1002:	18 c0       	rjmp	.+48     	; 0x1034 <timer_start+0x7a>
    1004:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <u8_timer2ClockSource>
    1008:	42 fb       	bst	r20, 2
    100a:	44 27       	eor	r20, r20
    100c:	40 f9       	bld	r20, 0
    100e:	62 e0       	ldi	r22, 0x02	; 2
    1010:	81 eb       	ldi	r24, 0xB1	; 177
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	d9 d9       	rcall	.-3150   	; 0x3c8 <updateBit>
    1016:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <u8_timer2ClockSource>
    101a:	46 95       	lsr	r20
    101c:	41 70       	andi	r20, 0x01	; 1
    101e:	61 e0       	ldi	r22, 0x01	; 1
    1020:	81 eb       	ldi	r24, 0xB1	; 177
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	d1 d9       	rcall	.-3166   	; 0x3c8 <updateBit>
    1026:	40 91 6d 01 	lds	r20, 0x016D	; 0x80016d <u8_timer2ClockSource>
    102a:	41 70       	andi	r20, 0x01	; 1
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	81 eb       	ldi	r24, 0xB1	; 177
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	ca d9       	rcall	.-3180   	; 0x3c8 <updateBit>
    1034:	0f 90       	pop	r0
    1036:	0f 90       	pop	r0
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	df 91       	pop	r29
    1040:	cf 91       	pop	r28
    1042:	08 95       	ret

00001044 <timer_enableInterrupt>:
    1044:	cf 92       	push	r12
    1046:	df 92       	push	r13
    1048:	ef 92       	push	r14
    104a:	ff 92       	push	r15
    104c:	0f 93       	push	r16
    104e:	1f 93       	push	r17
    1050:	cf 93       	push	r28
    1052:	df 93       	push	r29
    1054:	00 d0       	rcall	.+0      	; 0x1056 <timer_enableInterrupt+0x12>
    1056:	00 d0       	rcall	.+0      	; 0x1058 <timer_enableInterrupt+0x14>
    1058:	1f 92       	push	r1
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	49 83       	std	Y+1, r20	; 0x01
    1060:	5a 83       	std	Y+2, r21	; 0x02
    1062:	6b 83       	std	Y+3, r22	; 0x03
    1064:	7c 83       	std	Y+4, r23	; 0x04
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	02 2f       	mov	r16, r18
    106a:	41 30       	cpi	r20, 0x01	; 1
    106c:	21 f0       	breq	.+8      	; 0x1076 <timer_enableInterrupt+0x32>
    106e:	42 30       	cpi	r20, 0x02	; 2
    1070:	09 f4       	brne	.+2      	; 0x1074 <timer_enableInterrupt+0x30>
    1072:	5e c0       	rjmp	.+188    	; 0x1130 <timer_enableInterrupt+0xec>
    1074:	95 c0       	rjmp	.+298    	; 0x11a0 <timer_enableInterrupt+0x15c>
    1076:	0f 2e       	mov	r0, r31
    1078:	f1 e8       	ldi	r31, 0x81	; 129
    107a:	ef 2e       	mov	r14, r31
    107c:	f1 2c       	mov	r15, r1
    107e:	f0 2d       	mov	r31, r0
    1080:	f7 01       	movw	r30, r14
    1082:	80 81       	ld	r24, Z
    1084:	64 e0       	ldi	r22, 0x04	; 4
    1086:	d1 d9       	rcall	.-3166   	; 0x42a <checkBit>
    1088:	18 2f       	mov	r17, r24
    108a:	f7 01       	movw	r30, r14
    108c:	80 81       	ld	r24, Z
    108e:	63 e0       	ldi	r22, 0x03	; 3
    1090:	cc d9       	rcall	.-3176   	; 0x42a <checkBit>
    1092:	11 0f       	add	r17, r17
    1094:	11 0f       	add	r17, r17
    1096:	11 0f       	add	r17, r17
    1098:	f4 e0       	ldi	r31, 0x04	; 4
    109a:	8f 9f       	mul	r24, r31
    109c:	c0 01       	movw	r24, r0
    109e:	11 24       	eor	r1, r1
    10a0:	18 2b       	or	r17, r24
    10a2:	68 94       	set
    10a4:	cc 24       	eor	r12, r12
    10a6:	c7 f8       	bld	r12, 7
    10a8:	d1 2c       	mov	r13, r1
    10aa:	f6 01       	movw	r30, r12
    10ac:	80 81       	ld	r24, Z
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	bc d9       	rcall	.-3208   	; 0x42a <checkBit>
    10b2:	f8 2e       	mov	r15, r24
    10b4:	f6 01       	movw	r30, r12
    10b6:	80 81       	ld	r24, Z
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	b7 d9       	rcall	.-3218   	; 0x42a <checkBit>
    10bc:	ff 0c       	add	r15, r15
    10be:	81 2b       	or	r24, r17
    10c0:	8f 29       	or	r24, r15
    10c2:	01 30       	cpi	r16, 0x01	; 1
    10c4:	d9 f0       	breq	.+54     	; 0x10fc <timer_enableInterrupt+0xb8>
    10c6:	28 f0       	brcs	.+10     	; 0x10d2 <timer_enableInterrupt+0x8e>
    10c8:	02 30       	cpi	r16, 0x02	; 2
    10ca:	21 f1       	breq	.+72     	; 0x1114 <timer_enableInterrupt+0xd0>
    10cc:	03 30       	cpi	r16, 0x03	; 3
    10ce:	39 f1       	breq	.+78     	; 0x111e <timer_enableInterrupt+0xda>
    10d0:	67 c0       	rjmp	.+206    	; 0x11a0 <timer_enableInterrupt+0x15c>
    10d2:	88 30       	cpi	r24, 0x08	; 8
    10d4:	38 f4       	brcc	.+14     	; 0x10e4 <timer_enableInterrupt+0xa0>
    10d6:	84 30       	cpi	r24, 0x04	; 4
    10d8:	61 f0       	breq	.+24     	; 0x10f2 <timer_enableInterrupt+0xae>
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	8f e6       	ldi	r24, 0x6F	; 111
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	8b d9       	rcall	.-3306   	; 0x3f8 <setBit>
    10e2:	5e c0       	rjmp	.+188    	; 0x11a0 <timer_enableInterrupt+0x15c>
    10e4:	80 fd       	sbrc	r24, 0
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <timer_enableInterrupt+0xae>
    10e8:	65 e0       	ldi	r22, 0x05	; 5
    10ea:	8f e6       	ldi	r24, 0x6F	; 111
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	84 d9       	rcall	.-3320   	; 0x3f8 <setBit>
    10f0:	57 c0       	rjmp	.+174    	; 0x11a0 <timer_enableInterrupt+0x15c>
    10f2:	61 e0       	ldi	r22, 0x01	; 1
    10f4:	8f e6       	ldi	r24, 0x6F	; 111
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	7f d9       	rcall	.-3330   	; 0x3f8 <setBit>
    10fa:	52 c0       	rjmp	.+164    	; 0x11a0 <timer_enableInterrupt+0x15c>
    10fc:	88 30       	cpi	r24, 0x08	; 8
    10fe:	18 f4       	brcc	.+6      	; 0x1106 <timer_enableInterrupt+0xc2>
    1100:	84 30       	cpi	r24, 0x04	; 4
    1102:	19 f4       	brne	.+6      	; 0x110a <timer_enableInterrupt+0xc6>
    1104:	4d c0       	rjmp	.+154    	; 0x11a0 <timer_enableInterrupt+0x15c>
    1106:	80 fd       	sbrc	r24, 0
    1108:	4b c0       	rjmp	.+150    	; 0x11a0 <timer_enableInterrupt+0x15c>
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	8f e6       	ldi	r24, 0x6F	; 111
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	73 d9       	rcall	.-3354   	; 0x3f8 <setBit>
    1112:	46 c0       	rjmp	.+140    	; 0x11a0 <timer_enableInterrupt+0x15c>
    1114:	62 e0       	ldi	r22, 0x02	; 2
    1116:	8f e6       	ldi	r24, 0x6F	; 111
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	6e d9       	rcall	.-3364   	; 0x3f8 <setBit>
    111c:	41 c0       	rjmp	.+130    	; 0x11a0 <timer_enableInterrupt+0x15c>
    111e:	88 30       	cpi	r24, 0x08	; 8
    1120:	10 f0       	brcs	.+4      	; 0x1126 <timer_enableInterrupt+0xe2>
    1122:	80 ff       	sbrs	r24, 0
    1124:	3d c0       	rjmp	.+122    	; 0x11a0 <timer_enableInterrupt+0x15c>
    1126:	65 e0       	ldi	r22, 0x05	; 5
    1128:	8f e6       	ldi	r24, 0x6F	; 111
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	65 d9       	rcall	.-3382   	; 0x3f8 <setBit>
    112e:	38 c0       	rjmp	.+112    	; 0x11a0 <timer_enableInterrupt+0x15c>
    1130:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    1134:	63 e0       	ldi	r22, 0x03	; 3
    1136:	79 d9       	rcall	.-3342   	; 0x42a <checkBit>
    1138:	18 2f       	mov	r17, r24
    113a:	0f 2e       	mov	r0, r31
    113c:	f0 eb       	ldi	r31, 0xB0	; 176
    113e:	ef 2e       	mov	r14, r31
    1140:	f1 2c       	mov	r15, r1
    1142:	f0 2d       	mov	r31, r0
    1144:	f7 01       	movw	r30, r14
    1146:	80 81       	ld	r24, Z
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	6f d9       	rcall	.-3362   	; 0x42a <checkBit>
    114c:	11 0f       	add	r17, r17
    114e:	11 0f       	add	r17, r17
    1150:	88 0f       	add	r24, r24
    1152:	18 2b       	or	r17, r24
    1154:	f7 01       	movw	r30, r14
    1156:	80 81       	ld	r24, Z
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	67 d9       	rcall	.-3378   	; 0x42a <checkBit>
    115c:	81 2b       	or	r24, r17
    115e:	01 30       	cpi	r16, 0x01	; 1
    1160:	91 f0       	breq	.+36     	; 0x1186 <timer_enableInterrupt+0x142>
    1162:	18 f0       	brcs	.+6      	; 0x116a <timer_enableInterrupt+0x126>
    1164:	02 30       	cpi	r16, 0x02	; 2
    1166:	c1 f0       	breq	.+48     	; 0x1198 <timer_enableInterrupt+0x154>
    1168:	1b c0       	rjmp	.+54     	; 0x11a0 <timer_enableInterrupt+0x15c>
    116a:	84 30       	cpi	r24, 0x04	; 4
    116c:	38 f4       	brcc	.+14     	; 0x117c <timer_enableInterrupt+0x138>
    116e:	82 30       	cpi	r24, 0x02	; 2
    1170:	29 f0       	breq	.+10     	; 0x117c <timer_enableInterrupt+0x138>
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	80 e7       	ldi	r24, 0x70	; 112
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	3f d9       	rcall	.-3458   	; 0x3f8 <setBit>
    117a:	12 c0       	rjmp	.+36     	; 0x11a0 <timer_enableInterrupt+0x15c>
    117c:	61 e0       	ldi	r22, 0x01	; 1
    117e:	80 e7       	ldi	r24, 0x70	; 112
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	3a d9       	rcall	.-3468   	; 0x3f8 <setBit>
    1184:	0d c0       	rjmp	.+26     	; 0x11a0 <timer_enableInterrupt+0x15c>
    1186:	84 30       	cpi	r24, 0x04	; 4
    1188:	58 f4       	brcc	.+22     	; 0x11a0 <timer_enableInterrupt+0x15c>
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	49 f0       	breq	.+18     	; 0x11a0 <timer_enableInterrupt+0x15c>
    118e:	61 e0       	ldi	r22, 0x01	; 1
    1190:	80 e7       	ldi	r24, 0x70	; 112
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	31 d9       	rcall	.-3486   	; 0x3f8 <setBit>
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <timer_enableInterrupt+0x15c>
    1198:	62 e0       	ldi	r22, 0x02	; 2
    119a:	80 e7       	ldi	r24, 0x70	; 112
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	2c d9       	rcall	.-3496   	; 0x3f8 <setBit>
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	1f 91       	pop	r17
    11b0:	0f 91       	pop	r16
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	08 95       	ret

000011bc <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    11bc:	0f 93       	push	r16
    11be:	1f 93       	push	r17
    11c0:	cf 93       	push	r28
    11c2:	df 93       	push	r29
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <timer_attachInterrupt+0xa>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <timer_attachInterrupt+0xc>
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    11ce:	41 30       	cpi	r20, 0x01	; 1
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <timer_attachInterrupt+0x1c>
    11d2:	42 30       	cpi	r20, 0x02	; 2
    11d4:	51 f0       	breq	.+20     	; 0x11ea <timer_attachInterrupt+0x2e>
    11d6:	11 c0       	rjmp	.+34     	; 0x11fa <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    11d8:	e2 2f       	mov	r30, r18
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	ee 0f       	add	r30, r30
    11de:	ff 1f       	adc	r31, r31
    11e0:	ec 59       	subi	r30, 0x9C	; 156
    11e2:	fe 4f       	sbci	r31, 0xFE	; 254
    11e4:	11 83       	std	Z+1, r17	; 0x01
    11e6:	00 83       	st	Z, r16
		#endif
			break;
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    11ea:	e2 2f       	mov	r30, r18
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	ee 0f       	add	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	e2 59       	subi	r30, 0x92	; 146
    11f4:	fe 4f       	sbci	r31, 0xFE	; 254
    11f6:	11 83       	std	Z+1, r17	; 0x01
    11f8:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    11fa:	0f 90       	pop	r0
    11fc:	0f 90       	pop	r0
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	df 91       	pop	r29
    1206:	cf 91       	pop	r28
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	08 95       	ret

0000120e <calculateUBRR>:
/************************************************************************/
/* Internal functions                                                   */
/************************************************************************/

u16 calculateUBRR(u32 u32_baudRate, bool *b_usingDoubleSpeed)
{
    120e:	4f 92       	push	r4
    1210:	5f 92       	push	r5
    1212:	6f 92       	push	r6
    1214:	7f 92       	push	r7
    1216:	8f 92       	push	r8
    1218:	9f 92       	push	r9
    121a:	af 92       	push	r10
    121c:	bf 92       	push	r11
    121e:	cf 92       	push	r12
    1220:	df 92       	push	r13
    1222:	ef 92       	push	r14
    1224:	ff 92       	push	r15
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	4b 01       	movw	r8, r22
    122c:	5c 01       	movw	r10, r24
    122e:	ea 01       	movw	r28, r20
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    1230:	0f 2e       	mov	r0, r31
    1232:	f0 e2       	ldi	r31, 0x20	; 32
    1234:	4f 2e       	mov	r4, r31
    1236:	f1 ea       	ldi	r31, 0xA1	; 161
    1238:	5f 2e       	mov	r5, r31
    123a:	f7 e0       	ldi	r31, 0x07	; 7
    123c:	6f 2e       	mov	r6, r31
    123e:	71 2c       	mov	r7, r1
    1240:	f0 2d       	mov	r31, r0
    1242:	c3 01       	movw	r24, r6
    1244:	b2 01       	movw	r22, r4
    1246:	a5 01       	movw	r20, r10
    1248:	94 01       	movw	r18, r8
    124a:	52 d6       	rcall	.+3236   	; 0x1ef0 <__udivmodsi4>
    124c:	69 01       	movw	r12, r18
    124e:	7a 01       	movw	r14, r20
	u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
    1250:	c3 01       	movw	r24, r6
    1252:	b2 01       	movw	r22, r4
    1254:	4d d6       	rcall	.+3226   	; 0x1ef0 <__udivmodsi4>
    1256:	ca 01       	movw	r24, r20
    1258:	b9 01       	movw	r22, r18
    125a:	a5 01       	movw	r20, r10
    125c:	94 01       	movw	r18, r8
    125e:	ed d8       	rcall	.-3622   	; 0x43a <calculateError>
    1260:	44 97       	sbiw	r24, 0x14	; 20
    1262:	30 f4       	brcc	.+12     	; 0x1270 <calculateUBRR+0x62>
{
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    1264:	d7 01       	movw	r26, r14
    1266:	c6 01       	movw	r24, r12
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	a1 09       	sbc	r26, r1
    126c:	b1 09       	sbc	r27, r1
    126e:	0e c0       	rjmp	.+28     	; 0x128c <calculateUBRR+0x7e>
	u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
	{
		u8_divisor = 8;
		*b_usingDoubleSpeed = TRUE;
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	88 83       	st	Y, r24
		u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    1274:	60 e4       	ldi	r22, 0x40	; 64
    1276:	72 e4       	ldi	r23, 0x42	; 66
    1278:	8f e0       	ldi	r24, 0x0F	; 15
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a5 01       	movw	r20, r10
    127e:	94 01       	movw	r18, r8
    1280:	37 d6       	rcall	.+3182   	; 0x1ef0 <__udivmodsi4>
    1282:	da 01       	movw	r26, r20
    1284:	c9 01       	movw	r24, r18
    1286:	01 97       	sbiw	r24, 0x01	; 1
    1288:	a1 09       	sbc	r26, r1
    128a:	b1 09       	sbc	r27, r1
		u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);
	}
	return u32_ubrr;
}
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	bf 90       	pop	r11
    129a:	af 90       	pop	r10
    129c:	9f 90       	pop	r9
    129e:	8f 90       	pop	r8
    12a0:	7f 90       	pop	r7
    12a2:	6f 90       	pop	r6
    12a4:	5f 90       	pop	r5
    12a6:	4f 90       	pop	r4
    12a8:	08 95       	ret

000012aa <__vector_20>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef UART0_INTERRUPT_MODE
ISR(USART0_RX_vect)
{
    12aa:	1f 92       	push	r1
    12ac:	0f 92       	push	r0
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	0f 92       	push	r0
    12b2:	11 24       	eor	r1, r1
    12b4:	0b b6       	in	r0, 0x3b	; 59
    12b6:	0f 92       	push	r0
    12b8:	2f 93       	push	r18
    12ba:	3f 93       	push	r19
    12bc:	4f 93       	push	r20
    12be:	5f 93       	push	r21
    12c0:	6f 93       	push	r22
    12c2:	7f 93       	push	r23
    12c4:	8f 93       	push	r24
    12c6:	9f 93       	push	r25
    12c8:	af 93       	push	r26
    12ca:	bf 93       	push	r27
    12cc:	ef 93       	push	r30
    12ce:	ff 93       	push	r31
	if (checkBit(UCSR0B, UCSZ02) == SET)
    12d0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12d4:	62 e0       	ldi	r22, 0x02	; 2
    12d6:	a9 d8       	rcall	.-3758   	; 0x42a <checkBit>
    12d8:	81 30       	cpi	r24, 0x01	; 1
    12da:	99 f4       	brne	.+38     	; 0x1302 <__vector_20+0x58>
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = ((UCSR0B & (1 << RXB80)) << 8) | UDR0;
    12dc:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <u8_rx0LastReceivedIndex>
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    12e6:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    12ea:	82 70       	andi	r24, 0x02	; 2
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	98 2f       	mov	r25, r24
    12f0:	88 27       	eor	r24, r24
    12f2:	82 2b       	or	r24, r18
    12f4:	ee 0f       	add	r30, r30
    12f6:	ff 1f       	adc	r31, r31
    12f8:	e9 58       	subi	r30, 0x89	; 137
    12fa:	fe 4f       	sbci	r31, 0xFE	; 254
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	0c c0       	rjmp	.+24     	; 0x131a <__vector_20+0x70>
	else
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = UDR0;
    1302:	e0 91 76 01 	lds	r30, 0x0176	; 0x800176 <u8_rx0LastReceivedIndex>
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	ee 0f       	add	r30, r30
    1310:	ff 1f       	adc	r31, r31
    1312:	e9 58       	subi	r30, 0x89	; 137
    1314:	fe 4f       	sbci	r31, 0xFE	; 254
    1316:	91 83       	std	Z+1, r25	; 0x01
    1318:	80 83       	st	Z, r24
	if (u8_rx0LastReceivedIndex < UART_RX0_BUFFER_MAX_SIZE - 1)
    131a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <u8_rx0LastReceivedIndex>
    131e:	89 30       	cpi	r24, 0x09	; 9
    1320:	30 f4       	brcc	.+12     	; 0x132e <__vector_20+0x84>
		u8_rx0LastReceivedIndex++;
    1322:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <u8_rx0LastReceivedIndex>
    1326:	8f 5f       	subi	r24, 0xFF	; 255
    1328:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <u8_rx0LastReceivedIndex>
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <__vector_20+0x88>
	else
		u8_rx0LastReceivedIndex = 0;
    132e:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <u8_rx0LastReceivedIndex>
	b_rx0Available = TRUE;
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <b_rx0Available>
}
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	7f 91       	pop	r23
    1346:	6f 91       	pop	r22
    1348:	5f 91       	pop	r21
    134a:	4f 91       	pop	r20
    134c:	3f 91       	pop	r19
    134e:	2f 91       	pop	r18
    1350:	0f 90       	pop	r0
    1352:	0b be       	out	0x3b, r0	; 59
    1354:	0f 90       	pop	r0
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	0f 90       	pop	r0
    135a:	1f 90       	pop	r1
    135c:	18 95       	reti

0000135e <__vector_21>:

ISR(USART0_UDRE_vect)
{
    135e:	1f 92       	push	r1
    1360:	0f 92       	push	r0
    1362:	0f b6       	in	r0, 0x3f	; 63
    1364:	0f 92       	push	r0
    1366:	11 24       	eor	r1, r1
    1368:	0b b6       	in	r0, 0x3b	; 59
    136a:	0f 92       	push	r0
    136c:	2f 93       	push	r18
    136e:	3f 93       	push	r19
    1370:	4f 93       	push	r20
    1372:	5f 93       	push	r21
    1374:	6f 93       	push	r22
    1376:	7f 93       	push	r23
    1378:	8f 93       	push	r24
    137a:	9f 93       	push	r25
    137c:	af 93       	push	r26
    137e:	bf 93       	push	r27
    1380:	ef 93       	push	r30
    1382:	ff 93       	push	r31
	if (u8_tx0LastTransmittedIndex != u8_tx0LastRequestedIndex)
    1384:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <u8_tx0LastTransmittedIndex>
    1388:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <u8_tx0LastRequestedIndex>
    138c:	98 17       	cp	r25, r24
    138e:	69 f1       	breq	.+90     	; 0x13ea <__vector_21+0x8c>
	{
		if (checkBit(UCSR0B, UCSZ02) == SET)
    1390:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1394:	62 e0       	ldi	r22, 0x02	; 2
    1396:	49 d8       	rcall	.-3950   	; 0x42a <checkBit>
    1398:	81 30       	cpi	r24, 0x01	; 1
    139a:	79 f4       	brne	.+30     	; 0x13ba <__vector_21+0x5c>
			UCSR0B |= (u8) (((au16_tx0Buffer[u8_tx0LastTransmittedIndex] >> 8) & 1) << TXB80);
    139c:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <u8_tx0LastTransmittedIndex>
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	ee 0f       	add	r30, r30
    13a4:	ff 1f       	adc	r31, r31
    13a6:	e3 57       	subi	r30, 0x73	; 115
    13a8:	fe 4f       	sbci	r31, 0xFE	; 254
    13aa:	80 81       	ld	r24, Z
    13ac:	91 81       	ldd	r25, Z+1	; 0x01
    13ae:	e1 ec       	ldi	r30, 0xC1	; 193
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	91 70       	andi	r25, 0x01	; 1
    13b6:	89 2b       	or	r24, r25
    13b8:	80 83       	st	Z, r24
		UDR0 = (u8) au16_tx0Buffer[u8_tx0LastTransmittedIndex];
    13ba:	e0 91 75 01 	lds	r30, 0x0175	; 0x800175 <u8_tx0LastTransmittedIndex>
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31
    13c4:	e3 57       	subi	r30, 0x73	; 115
    13c6:	fe 4f       	sbci	r31, 0xFE	; 254
    13c8:	80 81       	ld	r24, Z
    13ca:	91 81       	ldd	r25, Z+1	; 0x01
    13cc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    13d0:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <u8_tx0LastTransmittedIndex>
    13d4:	89 30       	cpi	r24, 0x09	; 9
    13d6:	30 f4       	brcc	.+12     	; 0x13e4 <__vector_21+0x86>
			u8_tx0LastTransmittedIndex++;
    13d8:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <u8_tx0LastTransmittedIndex>
    13dc:	8f 5f       	subi	r24, 0xFF	; 255
    13de:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <u8_tx0LastTransmittedIndex>
    13e2:	07 c0       	rjmp	.+14     	; 0x13f2 <__vector_21+0x94>
		else
			u8_tx0LastTransmittedIndex = 0;
    13e4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <u8_tx0LastTransmittedIndex>
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <__vector_21+0x94>
	}
	else
		clearBit(&UCSR0B, UDRIE0);
    13ea:	65 e0       	ldi	r22, 0x05	; 5
    13ec:	81 ec       	ldi	r24, 0xC1	; 193
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	0f d8       	rcall	.-4066   	; 0x410 <clearBit>
}
    13f2:	ff 91       	pop	r31
    13f4:	ef 91       	pop	r30
    13f6:	bf 91       	pop	r27
    13f8:	af 91       	pop	r26
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	7f 91       	pop	r23
    1400:	6f 91       	pop	r22
    1402:	5f 91       	pop	r21
    1404:	4f 91       	pop	r20
    1406:	3f 91       	pop	r19
    1408:	2f 91       	pop	r18
    140a:	0f 90       	pop	r0
    140c:	0b be       	out	0x3b, r0	; 59
    140e:	0f 90       	pop	r0
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	0f 90       	pop	r0
    1414:	1f 90       	pop	r1
    1416:	18 95       	reti

00001418 <__vector_22>:

ISR(USART0_TX_vect)
{
    1418:	1f 92       	push	r1
    141a:	0f 92       	push	r0
    141c:	0f b6       	in	r0, 0x3f	; 63
    141e:	0f 92       	push	r0
    1420:	11 24       	eor	r1, r1
    1422:	0b b6       	in	r0, 0x3b	; 59
    1424:	0f 92       	push	r0
    1426:	8f 93       	push	r24
    1428:	9f 93       	push	r25
    142a:	ef 93       	push	r30
    142c:	ff 93       	push	r31
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	90 e0       	ldi	r25, 0x00	; 0
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
		au16_tx0Buffer[i] = 0;
    1432:	fc 01       	movw	r30, r24
    1434:	ee 0f       	add	r30, r30
    1436:	ff 1f       	adc	r31, r31
    1438:	e3 57       	subi	r30, 0x73	; 115
    143a:	fe 4f       	sbci	r31, 0xFE	; 254
    143c:	11 82       	std	Z+1, r1	; 0x01
    143e:	10 82       	st	Z, r1
    1440:	01 96       	adiw	r24, 0x01	; 1
}

ISR(USART0_TX_vect)
{
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
    1442:	8a 30       	cpi	r24, 0x0A	; 10
    1444:	91 05       	cpc	r25, r1
    1446:	a9 f7       	brne	.-22     	; 0x1432 <__vector_22+0x1a>
		au16_tx0Buffer[i] = 0;
	u8_tx0LastTransmittedIndex = 0;
    1448:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <u8_tx0LastTransmittedIndex>
	u8_tx0LastRequestedIndex = 0;
    144c:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <u8_tx0LastRequestedIndex>
}
    1450:	ff 91       	pop	r31
    1452:	ef 91       	pop	r30
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	0f 90       	pop	r0
    145a:	0b be       	out	0x3b, r0	; 59
    145c:	0f 90       	pop	r0
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	0f 90       	pop	r0
    1462:	1f 90       	pop	r1
    1464:	18 95       	reti

00001466 <uart_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void uart_init(uart_struct_t s_uart)
{
    1466:	0f 93       	push	r16
    1468:	1f 93       	push	r17
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	2b 97       	sbiw	r28, 0x0b	; 11
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	0a 83       	std	Y+2, r16	; 0x02
    1480:	1b 83       	std	Y+3, r17	; 0x03
    1482:	2c 83       	std	Y+4, r18	; 0x04
    1484:	3d 83       	std	Y+5, r19	; 0x05
    1486:	4e 83       	std	Y+6, r20	; 0x06
    1488:	5f 83       	std	Y+7, r21	; 0x07
    148a:	68 87       	std	Y+8, r22	; 0x08
    148c:	79 87       	std	Y+9, r23	; 0x09
    148e:	8a 87       	std	Y+10, r24	; 0x0a
    1490:	9b 87       	std	Y+11, r25	; 0x0b
	u16 u16_ubrr;
	bool b_usingDoubleSpeed = FALSE;
    1492:	19 82       	std	Y+1, r1	; 0x01

	switch (s_uart.peripheral)
    1494:	01 11       	cpse	r16, r1
    1496:	ae c0       	rjmp	.+348    	; 0x15f4 <uart_init+0x18e>
    1498:	19 2f       	mov	r17, r25
	{
	case UART0:
	#ifdef USING_UART0
		/* Set asynchronous mode */
		UCSR0C &= ~(0b11 << UMSEL00);
    149a:	e2 ec       	ldi	r30, 0xC2	; 194
    149c:	f0 e0       	ldi	r31, 0x00	; 0
    149e:	80 81       	ld	r24, Z
    14a0:	8f 73       	andi	r24, 0x3F	; 63
    14a2:	80 83       	st	Z, r24
		/* Set baud rate */
		u16_ubrr = calculateUBRR(s_uart.baudRate, &b_usingDoubleSpeed);
    14a4:	6b 81       	ldd	r22, Y+3	; 0x03
    14a6:	7c 81       	ldd	r23, Y+4	; 0x04
    14a8:	8d 81       	ldd	r24, Y+5	; 0x05
    14aa:	9e 81       	ldd	r25, Y+6	; 0x06
    14ac:	ae 01       	movw	r20, r28
    14ae:	4f 5f       	subi	r20, 0xFF	; 255
    14b0:	5f 4f       	sbci	r21, 0xFF	; 255
    14b2:	ad de       	rcall	.-678    	; 0x120e <calculateUBRR>
		UBRR0 = u16_ubrr;
    14b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    14b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		updateBit(&UCSR0A, U2X0, b_usingDoubleSpeed);
    14bc:	49 81       	ldd	r20, Y+1	; 0x01
    14be:	61 e0       	ldi	r22, 0x01	; 1
    14c0:	80 ec       	ldi	r24, 0xC0	; 192
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <updateBit>
		/* Set frame size */
		switch (s_uart.frameSize)
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	61 f1       	breq	.+88     	; 0x1526 <uart_init+0xc0>
    14ce:	28 f4       	brcc	.+10     	; 0x14da <uart_init+0x74>
    14d0:	88 23       	and	r24, r24
    14d2:	49 f0       	breq	.+18     	; 0x14e6 <uart_init+0x80>
    14d4:	81 30       	cpi	r24, 0x01	; 1
    14d6:	b9 f0       	breq	.+46     	; 0x1506 <uart_init+0xa0>
    14d8:	55 c0       	rjmp	.+170    	; 0x1584 <uart_init+0x11e>
    14da:	83 30       	cpi	r24, 0x03	; 3
    14dc:	a1 f1       	breq	.+104    	; 0x1546 <uart_init+0xe0>
    14de:	84 30       	cpi	r24, 0x04	; 4
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <uart_init+0x7e>
    14e2:	41 c0       	rjmp	.+130    	; 0x1566 <uart_init+0x100>
    14e4:	4f c0       	rjmp	.+158    	; 0x1584 <uart_init+0x11e>
		{
			case _5BIT:
				clearBit(&UCSR0C, UCSZ00);
    14e6:	61 e0       	ldi	r22, 0x01	; 1
    14e8:	82 ec       	ldi	r24, 0xC2	; 194
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				clearBit(&UCSR0C, UCSZ01);
    14f0:	62 e0       	ldi	r22, 0x02	; 2
    14f2:	82 ec       	ldi	r24, 0xC2	; 194
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				clearBit(&UCSR0B, UCSZ02);
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	81 ec       	ldi	r24, 0xC1	; 193
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				break;
    1504:	3f c0       	rjmp	.+126    	; 0x1584 <uart_init+0x11e>
			case _6BIT:
				setBit(&UCSR0C, UCSZ00);
    1506:	61 e0       	ldi	r22, 0x01	; 1
    1508:	82 ec       	ldi	r24, 0xC2	; 194
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
				clearBit(&UCSR0C, UCSZ01);
    1510:	62 e0       	ldi	r22, 0x02	; 2
    1512:	82 ec       	ldi	r24, 0xC2	; 194
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				clearBit(&UCSR0B, UCSZ02);
    151a:	62 e0       	ldi	r22, 0x02	; 2
    151c:	81 ec       	ldi	r24, 0xC1	; 193
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				break;
    1524:	2f c0       	rjmp	.+94     	; 0x1584 <uart_init+0x11e>
			case _7BIT:
				clearBit(&UCSR0C, UCSZ00);
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	82 ec       	ldi	r24, 0xC2	; 194
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				setBit(&UCSR0C, UCSZ01);
    1530:	62 e0       	ldi	r22, 0x02	; 2
    1532:	82 ec       	ldi	r24, 0xC2	; 194
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
				clearBit(&UCSR0B, UCSZ02);
    153a:	62 e0       	ldi	r22, 0x02	; 2
    153c:	81 ec       	ldi	r24, 0xC1	; 193
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				break;
    1544:	1f c0       	rjmp	.+62     	; 0x1584 <uart_init+0x11e>
			case _8BIT:
				setBit(&UCSR0C, UCSZ00);
    1546:	61 e0       	ldi	r22, 0x01	; 1
    1548:	82 ec       	ldi	r24, 0xC2	; 194
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
				setBit(&UCSR0C, UCSZ01);
    1550:	62 e0       	ldi	r22, 0x02	; 2
    1552:	82 ec       	ldi	r24, 0xC2	; 194
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
				clearBit(&UCSR0B, UCSZ02);
    155a:	62 e0       	ldi	r22, 0x02	; 2
    155c:	81 ec       	ldi	r24, 0xC1	; 193
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 08 02 	call	0x410	; 0x410 <clearBit>
				break;
    1564:	0f c0       	rjmp	.+30     	; 0x1584 <uart_init+0x11e>
			case _9BIT:
				setBit(&UCSR0C, UCSZ00);
    1566:	61 e0       	ldi	r22, 0x01	; 1
    1568:	82 ec       	ldi	r24, 0xC2	; 194
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
				setBit(&UCSR0C, UCSZ01);
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	82 ec       	ldi	r24, 0xC2	; 194
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
				setBit(&UCSR0B, UCSZ02);
    157a:	62 e0       	ldi	r22, 0x02	; 2
    157c:	81 ec       	ldi	r24, 0xC1	; 193
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
				break;
		}
		/* Set number of stop bits */
		updateBit(&UCSR0C, USBS0, s_uart.stopBits);
    1584:	4a 85       	ldd	r20, Y+10	; 0x0a
    1586:	63 e0       	ldi	r22, 0x03	; 3
    1588:	82 ec       	ldi	r24, 0xC2	; 194
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <updateBit>
		/* Set parity check */
		if (s_uart.parityBit == NONE)
    1590:	12 30       	cpi	r17, 0x02	; 2
    1592:	31 f4       	brne	.+12     	; 0x15a0 <uart_init+0x13a>
			UCSR0C &= ~(0b11 << UPM00);
    1594:	e2 ec       	ldi	r30, 0xC2	; 194
    1596:	f0 e0       	ldi	r31, 0x00	; 0
    1598:	80 81       	ld	r24, Z
    159a:	8f 7c       	andi	r24, 0xCF	; 207
    159c:	80 83       	st	Z, r24
    159e:	0b c0       	rjmp	.+22     	; 0x15b6 <uart_init+0x150>
		else
		{
			setBit(&UCSR0C, UPM01);
    15a0:	65 e0       	ldi	r22, 0x05	; 5
    15a2:	82 ec       	ldi	r24, 0xC2	; 194
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
			updateBit(&UCSR0C, UPM00, s_uart.parityBit);
    15aa:	41 2f       	mov	r20, r17
    15ac:	64 e0       	ldi	r22, 0x04	; 4
    15ae:	82 ec       	ldi	r24, 0xC2	; 194
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <updateBit>
		}
	#ifdef UART0_INTERRUPT_MODE
		/* Set interrupts */
		if (s_uart.useRx)
    15b6:	8f 81       	ldd	r24, Y+7	; 0x07
    15b8:	88 23       	and	r24, r24
    15ba:	59 f0       	breq	.+22     	; 0x15d2 <uart_init+0x16c>
		{
			u8_rx0LastProcessedIndex = 0;
    15bc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <u8_rx0LastProcessedIndex>
			u8_rx0LastReceivedIndex = 0;
    15c0:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <u8_rx0LastReceivedIndex>
			b_rx0Available = FALSE;
    15c4:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <b_rx0Available>
			setBit(&UCSR0B, RXCIE0);
    15c8:	67 e0       	ldi	r22, 0x07	; 7
    15ca:	81 ec       	ldi	r24, 0xC1	; 193
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
		}
		if (s_uart.useTx)
    15d2:	88 85       	ldd	r24, Y+8	; 0x08
    15d4:	88 23       	and	r24, r24
    15d6:	71 f0       	breq	.+28     	; 0x15f4 <uart_init+0x18e>
		{
			u8_tx0LastRequestedIndex = 0;
    15d8:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <u8_tx0LastRequestedIndex>
			u8_tx0LastTransmittedIndex = 0;
    15dc:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <u8_tx0LastTransmittedIndex>
			setBit(&UCSR0B, TXCIE0);
    15e0:	66 e0       	ldi	r22, 0x06	; 6
    15e2:	81 ec       	ldi	r24, 0xC1	; 193
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
			setBit(&UCSR0B, UDRIE0);
    15ea:	65 e0       	ldi	r22, 0x05	; 5
    15ec:	81 ec       	ldi	r24, 0xC1	; 193
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <setBit>
		}
	#endif
#endif
		break;
	}
}
    15f4:	2b 96       	adiw	r28, 0x0b	; 11
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	de bf       	out	0x3e, r29	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	cd bf       	out	0x3d, r28	; 61
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	08 95       	ret

0000160a <uart_start>:

void uart_start(uart_struct_t s_uart)
{
    160a:	0f 93       	push	r16
    160c:	1f 93       	push	r17
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	2a 97       	sbiw	r28, 0x0a	; 10
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	de bf       	out	0x3e, r29	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	cd bf       	out	0x3d, r28	; 61
    1622:	6f 83       	std	Y+7, r22	; 0x07
	switch (s_uart.peripheral)
    1624:	01 11       	cpse	r16, r1
    1626:	0c c0       	rjmp	.+24     	; 0x1640 <uart_start+0x36>
	{
		case UART0:
		#ifdef USING_UART0
			updateBit(&UCSR0B, RXEN0, s_uart.useRx);
    1628:	45 2f       	mov	r20, r21
    162a:	64 e0       	ldi	r22, 0x04	; 4
    162c:	81 ec       	ldi	r24, 0xC1	; 193
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <updateBit>
			updateBit(&UCSR0B, TXEN0, s_uart.useTx);
    1634:	4f 81       	ldd	r20, Y+7	; 0x07
    1636:	63 e0       	ldi	r22, 0x03	; 3
    1638:	81 ec       	ldi	r24, 0xC1	; 193
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <updateBit>
			updateBit(&UCSR1B, RXEN1, s_uart.useRx);
			updateBit(&UCSR1B, TXEN1, s_uart.useTx);
		#endif
			break;
	}
}
    1640:	2a 96       	adiw	r28, 0x0a	; 10
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	df 91       	pop	r29
    164e:	cf 91       	pop	r28
    1650:	1f 91       	pop	r17
    1652:	0f 91       	pop	r16
    1654:	08 95       	ret

00001656 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	0b b6       	in	r0, 0x3b	; 59
    1662:	0f 92       	push	r0
    1664:	2f 93       	push	r18
    1666:	3f 93       	push	r19
    1668:	4f 93       	push	r20
    166a:	5f 93       	push	r21
    166c:	6f 93       	push	r22
    166e:	7f 93       	push	r23
    1670:	8f 93       	push	r24
    1672:	9f 93       	push	r25
    1674:	af 93       	push	r26
    1676:	bf 93       	push	r27
    1678:	ef 93       	push	r30
    167a:	ff 93       	push	r31
	p_wdgCallback();
    167c:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <p_wdgCallback>
    1680:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <p_wdgCallback+0x1>
    1684:	09 95       	icall
}
    1686:	ff 91       	pop	r31
    1688:	ef 91       	pop	r30
    168a:	bf 91       	pop	r27
    168c:	af 91       	pop	r26
    168e:	9f 91       	pop	r25
    1690:	8f 91       	pop	r24
    1692:	7f 91       	pop	r23
    1694:	6f 91       	pop	r22
    1696:	5f 91       	pop	r21
    1698:	4f 91       	pop	r20
    169a:	3f 91       	pop	r19
    169c:	2f 91       	pop	r18
    169e:	0f 90       	pop	r0
    16a0:	0b be       	out	0x3b, r0	; 59
    16a2:	0f 90       	pop	r0
    16a4:	0f be       	out	0x3f, r0	; 63
    16a6:	0f 90       	pop	r0
    16a8:	1f 90       	pop	r1
    16aa:	18 95       	reti

000016ac <p_pcInt2Callback>:

void encoder_stop(){
	gpio_disableInterrupt(encoderLA, INTERRUPT_TOGGLE);
	gpio_disableInterrupt(encoderLB, INTERRUPT_TOGGLE);
	gpio_disableInterrupt(encoderRA, INTERRUPT_TOGGLE);
	gpio_disableInterrupt(encoderRB, INTERRUPT_TOGGLE);
    16ac:	86 b1       	in	r24, 0x06	; 6
    16ae:	80 7f       	andi	r24, 0xF0	; 240
    16b0:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <currentState>
    16b4:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <lastState>
    16b8:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <currentState>
    16bc:	89 27       	eor	r24, r25
    16be:	80 32       	cpi	r24, 0x20	; 32
    16c0:	e9 f0       	breq	.+58     	; 0x16fc <p_pcInt2Callback+0x50>
    16c2:	18 f4       	brcc	.+6      	; 0x16ca <p_pcInt2Callback+0x1e>
    16c4:	80 31       	cpi	r24, 0x10	; 16
    16c6:	31 f0       	breq	.+12     	; 0x16d4 <p_pcInt2Callback+0x28>
    16c8:	54 c0       	rjmp	.+168    	; 0x1772 <p_pcInt2Callback+0xc6>
    16ca:	80 34       	cpi	r24, 0x40	; 64
    16cc:	59 f1       	breq	.+86     	; 0x1724 <p_pcInt2Callback+0x78>
    16ce:	80 38       	cpi	r24, 0x80	; 128
    16d0:	e9 f1       	breq	.+122    	; 0x174c <p_pcInt2Callback+0xa0>
    16d2:	4f c0       	rjmp	.+158    	; 0x1772 <p_pcInt2Callback+0xc6>
    16d4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <counterRight>
    16d8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <counterRight+0x1>
    16dc:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <counterRight+0x2>
    16e0:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <counterRight+0x3>
    16e4:	01 96       	adiw	r24, 0x01	; 1
    16e6:	a1 1d       	adc	r26, r1
    16e8:	b1 1d       	adc	r27, r1
    16ea:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <counterRight>
    16ee:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <counterRight+0x1>
    16f2:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <counterRight+0x2>
    16f6:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <counterRight+0x3>
    16fa:	3b c0       	rjmp	.+118    	; 0x1772 <p_pcInt2Callback+0xc6>
    16fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <counterRight>
    1700:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <counterRight+0x1>
    1704:	a0 91 b8 01 	lds	r26, 0x01B8	; 0x8001b8 <counterRight+0x2>
    1708:	b0 91 b9 01 	lds	r27, 0x01B9	; 0x8001b9 <counterRight+0x3>
    170c:	01 96       	adiw	r24, 0x01	; 1
    170e:	a1 1d       	adc	r26, r1
    1710:	b1 1d       	adc	r27, r1
    1712:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <counterRight>
    1716:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <counterRight+0x1>
    171a:	a0 93 b8 01 	sts	0x01B8, r26	; 0x8001b8 <counterRight+0x2>
    171e:	b0 93 b9 01 	sts	0x01B9, r27	; 0x8001b9 <counterRight+0x3>
    1722:	27 c0       	rjmp	.+78     	; 0x1772 <p_pcInt2Callback+0xc6>
    1724:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <counterLeft>
    1728:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <counterLeft+0x1>
    172c:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <counterLeft+0x2>
    1730:	b0 91 a6 01 	lds	r27, 0x01A6	; 0x8001a6 <counterLeft+0x3>
    1734:	01 96       	adiw	r24, 0x01	; 1
    1736:	a1 1d       	adc	r26, r1
    1738:	b1 1d       	adc	r27, r1
    173a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <counterLeft>
    173e:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <counterLeft+0x1>
    1742:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <counterLeft+0x2>
    1746:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <counterLeft+0x3>
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <p_pcInt2Callback+0xc6>
    174c:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <counterLeft>
    1750:	90 91 a4 01 	lds	r25, 0x01A4	; 0x8001a4 <counterLeft+0x1>
    1754:	a0 91 a5 01 	lds	r26, 0x01A5	; 0x8001a5 <counterLeft+0x2>
    1758:	b0 91 a6 01 	lds	r27, 0x01A6	; 0x8001a6 <counterLeft+0x3>
    175c:	01 96       	adiw	r24, 0x01	; 1
    175e:	a1 1d       	adc	r26, r1
    1760:	b1 1d       	adc	r27, r1
    1762:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <counterLeft>
    1766:	90 93 a4 01 	sts	0x01A4, r25	; 0x8001a4 <counterLeft+0x1>
    176a:	a0 93 a5 01 	sts	0x01A5, r26	; 0x8001a5 <counterLeft+0x2>
    176e:	b0 93 a6 01 	sts	0x01A6, r27	; 0x8001a6 <counterLeft+0x3>
    1772:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <currentState>
    1776:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <lastState>
    177a:	08 95       	ret

0000177c <encoder_init>:
    177c:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <counter>
    1780:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <counterLeft>
    1784:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <counterLeft+0x1>
    1788:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <counterLeft+0x2>
    178c:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <counterLeft+0x3>
    1790:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <counterRight>
    1794:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <counterRight+0x1>
    1798:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <counterRight+0x2>
    179c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <counterRight+0x3>
    17a0:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <lastState>
    17a4:	10 92 a7 01 	sts	0x01A7, r1	; 0x8001a7 <currentState>
    17a8:	e1 eb       	ldi	r30, 0xB1	; 177
    17aa:	f1 e0       	ldi	r31, 0x01	; 1
    17ac:	12 82       	std	Z+2, r1	; 0x02
    17ae:	82 e0       	ldi	r24, 0x02	; 2
    17b0:	80 83       	st	Z, r24
    17b2:	96 e0       	ldi	r25, 0x06	; 6
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	13 82       	std	Z+3, r1	; 0x03
    17b8:	ed ea       	ldi	r30, 0xAD	; 173
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	12 82       	std	Z+2, r1	; 0x02
    17be:	80 83       	st	Z, r24
    17c0:	97 e0       	ldi	r25, 0x07	; 7
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	13 82       	std	Z+3, r1	; 0x03
    17c6:	e9 ea       	ldi	r30, 0xA9	; 169
    17c8:	f1 e0       	ldi	r31, 0x01	; 1
    17ca:	12 82       	std	Z+2, r1	; 0x02
    17cc:	80 83       	st	Z, r24
    17ce:	94 e0       	ldi	r25, 0x04	; 4
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	13 82       	std	Z+3, r1	; 0x03
    17d4:	ea eb       	ldi	r30, 0xBA	; 186
    17d6:	f1 e0       	ldi	r31, 0x01	; 1
    17d8:	12 82       	std	Z+2, r1	; 0x02
    17da:	80 83       	st	Z, r24
    17dc:	85 e0       	ldi	r24, 0x05	; 5
    17de:	81 83       	std	Z+1, r24	; 0x01
    17e0:	13 82       	std	Z+3, r1	; 0x03
    17e2:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <encoderLA>
    17e6:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <encoderLA+0x1>
    17ea:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <encoderLA+0x2>
    17ee:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <encoderLA+0x3>
    17f2:	0e 94 3a 01 	call	0x274	; 0x274 <gpio_init>
    17f6:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <encoderLB>
    17fa:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <encoderLB+0x1>
    17fe:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <encoderLB+0x2>
    1802:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <encoderLB+0x3>
    1806:	0e 94 3a 01 	call	0x274	; 0x274 <gpio_init>
    180a:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <encoderRA>
    180e:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <encoderRA+0x1>
    1812:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <encoderRA+0x2>
    1816:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <encoderRA+0x3>
    181a:	0e 94 3a 01 	call	0x274	; 0x274 <gpio_init>
    181e:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <encoderRB>
    1822:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <encoderRB+0x1>
    1826:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <encoderRB+0x2>
    182a:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <encoderRB+0x3>
    182e:	0e 94 3a 01 	call	0x274	; 0x274 <gpio_init>
    1832:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <encoderLA>
    1836:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <encoderLA+0x1>
    183a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <encoderLA+0x2>
    183e:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <encoderLA+0x3>
    1842:	26 e5       	ldi	r18, 0x56	; 86
    1844:	3b e0       	ldi	r19, 0x0B	; 11
    1846:	41 e0       	ldi	r20, 0x01	; 1
    1848:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <gpio_attachInterrupt>
    184c:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <encoderLB>
    1850:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <encoderLB+0x1>
    1854:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <encoderLB+0x2>
    1858:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <encoderLB+0x3>
    185c:	26 e5       	ldi	r18, 0x56	; 86
    185e:	3b e0       	ldi	r19, 0x0B	; 11
    1860:	41 e0       	ldi	r20, 0x01	; 1
    1862:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <gpio_attachInterrupt>
    1866:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <encoderRA>
    186a:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <encoderRA+0x1>
    186e:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <encoderRA+0x2>
    1872:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <encoderRA+0x3>
    1876:	26 e5       	ldi	r18, 0x56	; 86
    1878:	3b e0       	ldi	r19, 0x0B	; 11
    187a:	41 e0       	ldi	r20, 0x01	; 1
    187c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <gpio_attachInterrupt>
    1880:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <encoderRB>
    1884:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <encoderRB+0x1>
    1888:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <encoderRB+0x2>
    188c:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <encoderRB+0x3>
    1890:	26 e5       	ldi	r18, 0x56	; 86
    1892:	3b e0       	ldi	r19, 0x0B	; 11
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0c 94 e3 01 	jmp	0x3c6	; 0x3c6 <gpio_attachInterrupt>
    189a:	08 95       	ret

0000189c <encoder_start>:
    189c:	60 91 b1 01 	lds	r22, 0x01B1	; 0x8001b1 <encoderLA>
    18a0:	70 91 b2 01 	lds	r23, 0x01B2	; 0x8001b2 <encoderLA+0x1>
    18a4:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <encoderLA+0x2>
    18a8:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <encoderLA+0x3>
    18ac:	41 e0       	ldi	r20, 0x01	; 1
    18ae:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <gpio_enableInterrupt>
    18b2:	60 91 ad 01 	lds	r22, 0x01AD	; 0x8001ad <encoderLB>
    18b6:	70 91 ae 01 	lds	r23, 0x01AE	; 0x8001ae <encoderLB+0x1>
    18ba:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <encoderLB+0x2>
    18be:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <encoderLB+0x3>
    18c2:	41 e0       	ldi	r20, 0x01	; 1
    18c4:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <gpio_enableInterrupt>
    18c8:	60 91 a9 01 	lds	r22, 0x01A9	; 0x8001a9 <encoderRA>
    18cc:	70 91 aa 01 	lds	r23, 0x01AA	; 0x8001aa <encoderRA+0x1>
    18d0:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <encoderRA+0x2>
    18d4:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <encoderRA+0x3>
    18d8:	41 e0       	ldi	r20, 0x01	; 1
    18da:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <gpio_enableInterrupt>
    18de:	60 91 ba 01 	lds	r22, 0x01BA	; 0x8001ba <encoderRB>
    18e2:	70 91 bb 01 	lds	r23, 0x01BB	; 0x8001bb <encoderRB+0x1>
    18e6:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <encoderRB+0x2>
    18ea:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <encoderRB+0x3>
    18ee:	41 e0       	ldi	r20, 0x01	; 1
    18f0:	0c 94 e2 01 	jmp	0x3c4	; 0x3c4 <gpio_enableInterrupt>
    18f4:	08 95       	ret

000018f6 <encoder_getRight>:
}

u32 encoder_getRight(){
	return counterRight;
    18f6:	60 91 b6 01 	lds	r22, 0x01B6	; 0x8001b6 <counterRight>
    18fa:	70 91 b7 01 	lds	r23, 0x01B7	; 0x8001b7 <counterRight+0x1>
    18fe:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <counterRight+0x2>
    1902:	90 91 b9 01 	lds	r25, 0x01B9	; 0x8001b9 <counterRight+0x3>
}
    1906:	08 95       	ret

00001908 <encoder_getLeft>:

u32 encoder_getLeft(){
	return counterLeft;
    1908:	60 91 a3 01 	lds	r22, 0x01A3	; 0x8001a3 <counterLeft>
    190c:	70 91 a4 01 	lds	r23, 0x01A4	; 0x8001a4 <counterLeft+0x1>
    1910:	80 91 a5 01 	lds	r24, 0x01A5	; 0x8001a5 <counterLeft+0x2>
    1914:	90 91 a6 01 	lds	r25, 0x01A6	; 0x8001a6 <counterLeft+0x3>
}
    1918:	08 95       	ret

0000191a <motor_init>:
			gpio_out_reset(motorDirectionA);
			gpio_out_set(motorDirectionB);
			break;
		case RIGHT:
			gpio_out_set(motorDirectionA);
			gpio_out_reset(motorDirectionB);
    191a:	e2 ec       	ldi	r30, 0xC2	; 194
    191c:	f1 e0       	ldi	r31, 0x01	; 1
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	82 83       	std	Z+2, r24	; 0x02
    1922:	93 e0       	ldi	r25, 0x03	; 3
    1924:	90 83       	st	Z, r25
    1926:	22 e0       	ldi	r18, 0x02	; 2
    1928:	21 83       	std	Z+1, r18	; 0x01
    192a:	13 82       	std	Z+3, r1	; 0x03
    192c:	ee eb       	ldi	r30, 0xBE	; 190
    192e:	f1 e0       	ldi	r31, 0x01	; 1
    1930:	82 83       	std	Z+2, r24	; 0x02
    1932:	90 83       	st	Z, r25
    1934:	26 e0       	ldi	r18, 0x06	; 6
    1936:	21 83       	std	Z+1, r18	; 0x01
    1938:	13 82       	std	Z+3, r1	; 0x03
    193a:	e6 ec       	ldi	r30, 0xC6	; 198
    193c:	f1 e0       	ldi	r31, 0x01	; 1
    193e:	82 83       	std	Z+2, r24	; 0x02
    1940:	90 83       	st	Z, r25
    1942:	91 83       	std	Z+1, r25	; 0x01
    1944:	13 82       	std	Z+3, r1	; 0x03
    1946:	ea ec       	ldi	r30, 0xCA	; 202
    1948:	f1 e0       	ldi	r31, 0x01	; 1
    194a:	40 e2       	ldi	r20, 0x20	; 32
    194c:	5e e4       	ldi	r21, 0x4E	; 78
    194e:	60 e0       	ldi	r22, 0x00	; 0
    1950:	70 e0       	ldi	r23, 0x00	; 0
    1952:	41 83       	std	Z+1, r20	; 0x01
    1954:	52 83       	std	Z+2, r21	; 0x02
    1956:	63 83       	std	Z+3, r22	; 0x03
    1958:	74 83       	std	Z+4, r23	; 0x04
    195a:	80 83       	st	Z, r24
    195c:	95 e0       	ldi	r25, 0x05	; 5
    195e:	af ec       	ldi	r26, 0xCF	; 207
    1960:	b1 e0       	ldi	r27, 0x01	; 1
    1962:	01 90       	ld	r0, Z+
    1964:	0d 92       	st	X+, r0
    1966:	9a 95       	dec	r25
    1968:	e1 f7       	brne	.-8      	; 0x1962 <motor_init+0x48>
    196a:	ef ec       	ldi	r30, 0xCF	; 207
    196c:	f1 e0       	ldi	r31, 0x01	; 1
    196e:	15 82       	std	Z+5, r1	; 0x05
    1970:	16 82       	std	Z+6, r1	; 0x06
    1972:	87 83       	std	Z+7, r24	; 0x07
    1974:	10 86       	std	Z+8, r1	; 0x08
    1976:	81 87       	std	Z+9, r24	; 0x09
    1978:	12 86       	std	Z+10, r1	; 0x0a
    197a:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <motorEnable>
    197e:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <motorEnable+0x1>
    1982:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <motorEnable+0x2>
    1986:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <motorEnable+0x3>
    198a:	0e 94 3a 01 	call	0x274	; 0x274 <gpio_init>
    198e:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <motorDirectionA>
    1992:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <motorDirectionA+0x1>
    1996:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <motorDirectionA+0x2>
    199a:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <motorDirectionA+0x3>
    199e:	0e 94 3a 01 	call	0x274	; 0x274 <gpio_init>
    19a2:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <motorDirectionB>
    19a6:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <motorDirectionB+0x1>
    19aa:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <motorDirectionB+0x2>
    19ae:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <motorDirectionB+0x3>
    19b2:	0e 94 3a 01 	call	0x274	; 0x274 <gpio_init>
    19b6:	40 91 ca 01 	lds	r20, 0x01CA	; 0x8001ca <motorTimer>
    19ba:	50 91 cb 01 	lds	r21, 0x01CB	; 0x8001cb <motorTimer+0x1>
    19be:	60 91 cc 01 	lds	r22, 0x01CC	; 0x8001cc <motorTimer+0x2>
    19c2:	70 91 cd 01 	lds	r23, 0x01CD	; 0x8001cd <motorTimer+0x3>
    19c6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <motorTimer+0x4>
    19ca:	ab d9       	rcall	.-3242   	; 0xd22 <timer_init>
    19cc:	8f ec       	ldi	r24, 0xCF	; 207
    19ce:	91 e0       	ldi	r25, 0x01	; 1
    19d0:	0c 94 49 02 	jmp	0x492	; 0x492 <pwm_init>
    19d4:	08 95       	ret

000019d6 <motor_start>:
    19d6:	af 92       	push	r10
    19d8:	cf 92       	push	r12
    19da:	ef 92       	push	r14
    19dc:	ff 92       	push	r15
    19de:	0f 93       	push	r16
    19e0:	1f 93       	push	r17
    19e2:	cf 93       	push	r28
    19e4:	60 91 be 01 	lds	r22, 0x01BE	; 0x8001be <motorDirectionA>
    19e8:	70 91 bf 01 	lds	r23, 0x01BF	; 0x8001bf <motorDirectionA+0x1>
    19ec:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <motorDirectionA+0x2>
    19f0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <motorDirectionA+0x3>
    19f4:	0e 94 c6 01 	call	0x38c	; 0x38c <gpio_out_reset>
    19f8:	60 91 c6 01 	lds	r22, 0x01C6	; 0x8001c6 <motorDirectionB>
    19fc:	70 91 c7 01 	lds	r23, 0x01C7	; 0x8001c7 <motorDirectionB+0x1>
    1a00:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <motorDirectionB+0x2>
    1a04:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <motorDirectionB+0x3>
    1a08:	0e 94 c6 01 	call	0x38c	; 0x38c <gpio_out_reset>
    1a0c:	60 91 c2 01 	lds	r22, 0x01C2	; 0x8001c2 <motorEnable>
    1a10:	70 91 c3 01 	lds	r23, 0x01C3	; 0x8001c3 <motorEnable+0x1>
    1a14:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <motorEnable+0x2>
    1a18:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <motorEnable+0x3>
    1a1c:	0e 94 aa 01 	call	0x354	; 0x354 <gpio_out_set>
    1a20:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <motorPWM>
    1a24:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <motorPWM+0x1>
    1a28:	00 91 d1 01 	lds	r16, 0x01D1	; 0x8001d1 <motorPWM+0x2>
    1a2c:	10 91 d2 01 	lds	r17, 0x01D2	; 0x8001d2 <motorPWM+0x3>
    1a30:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <motorPWM+0x4>
    1a34:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <motorPWM+0x5>
    1a38:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <motorPWM+0x6>
    1a3c:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <motorPWM+0x7>
    1a40:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <motorPWM+0x8>
    1a44:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <motorPWM+0x9>
    1a48:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <motorPWM+0xa>
    1a4c:	0e 94 bb 02 	call	0x576	; 0x576 <pwm_start>
    1a50:	c0 e0       	ldi	r28, 0x00	; 0
    1a52:	ac 2e       	mov	r10, r28
    1a54:	c1 2c       	mov	r12, r1
    1a56:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <motorPWM>
    1a5a:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <motorPWM+0x1>
    1a5e:	00 91 d1 01 	lds	r16, 0x01D1	; 0x8001d1 <motorPWM+0x2>
    1a62:	10 91 d2 01 	lds	r17, 0x01D2	; 0x8001d2 <motorPWM+0x3>
    1a66:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <motorPWM+0x4>
    1a6a:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <motorPWM+0x5>
    1a6e:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <motorPWM+0x6>
    1a72:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <motorPWM+0x7>
    1a76:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <motorPWM+0x8>
    1a7a:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <motorPWM+0x9>
    1a7e:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <motorPWM+0xa>
    1a82:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <pwm_setDutyCycle>
    1a86:	cc 24       	eor	r12, r12
    1a88:	c3 94       	inc	r12
    1a8a:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <motorPWM>
    1a8e:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <motorPWM+0x1>
    1a92:	00 91 d1 01 	lds	r16, 0x01D1	; 0x8001d1 <motorPWM+0x2>
    1a96:	10 91 d2 01 	lds	r17, 0x01D2	; 0x8001d2 <motorPWM+0x3>
    1a9a:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <motorPWM+0x4>
    1a9e:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <motorPWM+0x5>
    1aa2:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <motorPWM+0x6>
    1aa6:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <motorPWM+0x7>
    1aaa:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <motorPWM+0x8>
    1aae:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <motorPWM+0x9>
    1ab2:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <motorPWM+0xa>
    1ab6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <pwm_setDutyCycle>
    1aba:	c6 5f       	subi	r28, 0xF6	; 246
    1abc:	c8 32       	cpi	r28, 0x28	; 40
    1abe:	49 f6       	brne	.-110    	; 0x1a52 <motor_start+0x7c>
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	0f 91       	pop	r16
    1ac6:	ff 90       	pop	r15
    1ac8:	ef 90       	pop	r14
    1aca:	cf 90       	pop	r12
    1acc:	af 90       	pop	r10
    1ace:	08 95       	ret

00001ad0 <motor_speed>:
			break;
	}
}

void motor_speed(u8 speed){
    1ad0:	af 92       	push	r10
    1ad2:	cf 92       	push	r12
    1ad4:	ef 92       	push	r14
    1ad6:	ff 92       	push	r15
    1ad8:	0f 93       	push	r16
    1ada:	1f 93       	push	r17
    1adc:	cf 93       	push	r28
    1ade:	c8 2f       	mov	r28, r24
	pwm_setDutyCycle(motorPWM, CHANNEL_A, calibrateSpeed(speed));
    1ae0:	68 2f       	mov	r22, r24
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	14 d1       	rcall	.+552    	; 0x1d12 <__floatsisf>
    1aea:	23 ec       	ldi	r18, 0xC3	; 195
    1aec:	35 ef       	ldi	r19, 0xF5	; 245
    1aee:	48 e6       	ldi	r20, 0x68	; 104
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	9b d1       	rcall	.+822    	; 0x1e2a <__mulsf3>
    1af4:	e0 d0       	rcall	.+448    	; 0x1cb6 <__fixunssfsi>
    1af6:	a6 2e       	mov	r10, r22
    1af8:	c1 2c       	mov	r12, r1
    1afa:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <motorPWM>
    1afe:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <motorPWM+0x1>
    1b02:	00 91 d1 01 	lds	r16, 0x01D1	; 0x8001d1 <motorPWM+0x2>
    1b06:	10 91 d2 01 	lds	r17, 0x01D2	; 0x8001d2 <motorPWM+0x3>
    1b0a:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <motorPWM+0x4>
    1b0e:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <motorPWM+0x5>
    1b12:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <motorPWM+0x6>
    1b16:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <motorPWM+0x7>
    1b1a:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <motorPWM+0x8>
    1b1e:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <motorPWM+0x9>
    1b22:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <motorPWM+0xa>
    1b26:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <pwm_setDutyCycle>
	pwm_setDutyCycle(motorPWM, CHANNEL_B, speed);
    1b2a:	ac 2e       	mov	r10, r28
    1b2c:	cc 24       	eor	r12, r12
    1b2e:	c3 94       	inc	r12
    1b30:	e0 90 cf 01 	lds	r14, 0x01CF	; 0x8001cf <motorPWM>
    1b34:	f0 90 d0 01 	lds	r15, 0x01D0	; 0x8001d0 <motorPWM+0x1>
    1b38:	00 91 d1 01 	lds	r16, 0x01D1	; 0x8001d1 <motorPWM+0x2>
    1b3c:	10 91 d2 01 	lds	r17, 0x01D2	; 0x8001d2 <motorPWM+0x3>
    1b40:	20 91 d3 01 	lds	r18, 0x01D3	; 0x8001d3 <motorPWM+0x4>
    1b44:	30 91 d4 01 	lds	r19, 0x01D4	; 0x8001d4 <motorPWM+0x5>
    1b48:	40 91 d5 01 	lds	r20, 0x01D5	; 0x8001d5 <motorPWM+0x6>
    1b4c:	50 91 d6 01 	lds	r21, 0x01D6	; 0x8001d6 <motorPWM+0x7>
    1b50:	60 91 d7 01 	lds	r22, 0x01D7	; 0x8001d7 <motorPWM+0x8>
    1b54:	70 91 d8 01 	lds	r23, 0x01D8	; 0x8001d8 <motorPWM+0x9>
    1b58:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <motorPWM+0xa>
    1b5c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <pwm_setDutyCycle>
}
    1b60:	cf 91       	pop	r28
    1b62:	1f 91       	pop	r17
    1b64:	0f 91       	pop	r16
    1b66:	ff 90       	pop	r15
    1b68:	ef 90       	pop	r14
    1b6a:	cf 90       	pop	r12
    1b6c:	af 90       	pop	r10
    1b6e:	08 95       	ret

00001b70 <FlagUpdate>:
	task_table[taskId].timerValue = task_timer;
	task_timers[taskId] =task_table[taskId].timerValue;
}
void deactivate_task(u8 taskId)
{
	task_timers[taskId] = DEACTIVATE;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <timer_flag>
    1b76:	08 95       	ret

00001b78 <scheduler_inti>:
    1b78:	ff 92       	push	r15
    1b7a:	0f 93       	push	r16
    1b7c:	1f 93       	push	r17
    1b7e:	cf 93       	push	r28
    1b80:	df 93       	push	r29
    1b82:	00 d0       	rcall	.+0      	; 0x1b84 <scheduler_inti+0xc>
    1b84:	00 d0       	rcall	.+0      	; 0x1b86 <scheduler_inti+0xe>
    1b86:	1f 92       	push	r1
    1b88:	cd b7       	in	r28, 0x3d	; 61
    1b8a:	de b7       	in	r29, 0x3e	; 62
    1b8c:	49 83       	std	Y+1, r20	; 0x01
    1b8e:	5a 83       	std	Y+2, r21	; 0x02
    1b90:	6b 83       	std	Y+3, r22	; 0x03
    1b92:	7c 83       	std	Y+4, r23	; 0x04
    1b94:	8d 83       	std	Y+5, r24	; 0x05
    1b96:	f2 2e       	mov	r15, r18
    1b98:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <task_number>
    1b9c:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <timer_flag>
    1ba0:	c0 d8       	rcall	.-3712   	; 0xd22 <timer_init>
    1ba2:	08 eb       	ldi	r16, 0xB8	; 184
    1ba4:	1d e0       	ldi	r17, 0x0D	; 13
    1ba6:	2f 2d       	mov	r18, r15
    1ba8:	49 81       	ldd	r20, Y+1	; 0x01
    1baa:	5a 81       	ldd	r21, Y+2	; 0x02
    1bac:	6b 81       	ldd	r22, Y+3	; 0x03
    1bae:	7c 81       	ldd	r23, Y+4	; 0x04
    1bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb2:	04 db       	rcall	.-2552   	; 0x11bc <timer_attachInterrupt>
    1bb4:	2f 2d       	mov	r18, r15
    1bb6:	49 81       	ldd	r20, Y+1	; 0x01
    1bb8:	5a 81       	ldd	r21, Y+2	; 0x02
    1bba:	6b 81       	ldd	r22, Y+3	; 0x03
    1bbc:	7c 81       	ldd	r23, Y+4	; 0x04
    1bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc0:	41 da       	rcall	.-2942   	; 0x1044 <timer_enableInterrupt>
    1bc2:	49 81       	ldd	r20, Y+1	; 0x01
    1bc4:	5a 81       	ldd	r21, Y+2	; 0x02
    1bc6:	6b 81       	ldd	r22, Y+3	; 0x03
    1bc8:	7c 81       	ldd	r23, Y+4	; 0x04
    1bca:	8d 81       	ldd	r24, Y+5	; 0x05
    1bcc:	f6 d9       	rcall	.-3092   	; 0xfba <timer_start>
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	df 91       	pop	r29
    1bda:	cf 91       	pop	r28
    1bdc:	1f 91       	pop	r17
    1bde:	0f 91       	pop	r16
    1be0:	ff 90       	pop	r15
    1be2:	08 95       	ret

00001be4 <activate_task>:
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	9c 01       	movw	r18, r24
    1be8:	22 0f       	add	r18, r18
    1bea:	33 1f       	adc	r19, r19
    1bec:	82 0f       	add	r24, r18
    1bee:	93 1f       	adc	r25, r19
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	ec 5f       	subi	r30, 0xFC	; 252
    1bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    1bf6:	60 83       	st	Z, r22
    1bf8:	f9 01       	movw	r30, r18
    1bfa:	ee 5d       	subi	r30, 0xDE	; 222
    1bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    1bfe:	70 e0       	ldi	r23, 0x00	; 0
    1c00:	71 83       	std	Z+1, r23	; 0x01
    1c02:	60 83       	st	Z, r22
    1c04:	08 95       	ret

00001c06 <scheduler>:
}
void scheduler ()
{
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
	u8 task = 0u;
	if (timer_flag == TRUE)
    1c10:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <timer_flag>
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	b9 f5       	brne	.+110    	; 0x1c86 <scheduler+0x80>
	{
		timer_flag = FALSE;
    1c18:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <timer_flag>
		while(task < task_number)
    1c1c:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <task_number>
    1c20:	88 23       	and	r24, r24
    1c22:	89 f1       	breq	.+98     	; 0x1c86 <scheduler+0x80>
    1c24:	c0 e0       	ldi	r28, 0x00	; 0
		{
			if (task_timers[task] != 0)
    1c26:	2c 2f       	mov	r18, r28
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	f9 01       	movw	r30, r18
    1c2c:	ee 0f       	add	r30, r30
    1c2e:	ff 1f       	adc	r31, r31
    1c30:	ee 5d       	subi	r30, 0xDE	; 222
    1c32:	fe 4f       	sbci	r31, 0xFE	; 254
    1c34:	80 81       	ld	r24, Z
    1c36:	91 81       	ldd	r25, Z+1	; 0x01
    1c38:	00 97       	sbiw	r24, 0x00	; 0
    1c3a:	01 f1       	breq	.+64     	; 0x1c7c <scheduler+0x76>
			{
				task_timers[task] --;
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f9 01       	movw	r30, r18
    1c40:	ee 0f       	add	r30, r30
    1c42:	ff 1f       	adc	r31, r31
    1c44:	ee 5d       	subi	r30, 0xDE	; 222
    1c46:	fe 4f       	sbci	r31, 0xFE	; 254
    1c48:	91 83       	std	Z+1, r25	; 0x01
    1c4a:	80 83       	st	Z, r24
				if (task_timers[task] == 0)
    1c4c:	89 2b       	or	r24, r25
    1c4e:	b1 f4       	brne	.+44     	; 0x1c7c <scheduler+0x76>
				{
					task_table[task].pf_task();
    1c50:	79 01       	movw	r14, r18
    1c52:	ee 0c       	add	r14, r14
    1c54:	ff 1c       	adc	r15, r15
    1c56:	2e 0d       	add	r18, r14
    1c58:	3f 1d       	adc	r19, r15
    1c5a:	89 01       	movw	r16, r18
    1c5c:	0c 5f       	subi	r16, 0xFC	; 252
    1c5e:	1e 4f       	sbci	r17, 0xFE	; 254
    1c60:	d8 01       	movw	r26, r16
    1c62:	11 96       	adiw	r26, 0x01	; 1
    1c64:	ed 91       	ld	r30, X+
    1c66:	fc 91       	ld	r31, X
    1c68:	12 97       	sbiw	r26, 0x02	; 2
    1c6a:	09 95       	icall
					task_timers[task]= task_table[task].timerValue;
    1c6c:	f7 01       	movw	r30, r14
    1c6e:	ee 5d       	subi	r30, 0xDE	; 222
    1c70:	fe 4f       	sbci	r31, 0xFE	; 254
    1c72:	d8 01       	movw	r26, r16
    1c74:	8c 91       	ld	r24, X
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	80 83       	st	Z, r24
				}
			}
			task++;
    1c7c:	cf 5f       	subi	r28, 0xFF	; 255
{
	u8 task = 0u;
	if (timer_flag == TRUE)
	{
		timer_flag = FALSE;
		while(task < task_number)
    1c7e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <task_number>
    1c82:	c8 17       	cp	r28, r24
    1c84:	80 f2       	brcs	.-96     	; 0x1c26 <scheduler+0x20>
	}
	else 
	{
		
	}
}
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	ff 90       	pop	r15
    1c8e:	ef 90       	pop	r14
    1c90:	08 95       	ret

00001c92 <create_task>:
void create_task (taskIdType taskId, pf_TaskHandler pf_taskH )
{
	task_table[taskId].timerValue = DEACTIVATE;
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	fc 01       	movw	r30, r24
    1c96:	ee 0f       	add	r30, r30
    1c98:	ff 1f       	adc	r31, r31
    1c9a:	8e 0f       	add	r24, r30
    1c9c:	9f 1f       	adc	r25, r31
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	ec 5f       	subi	r30, 0xFC	; 252
    1ca2:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca4:	10 82       	st	Z, r1
	task_table[taskId].pf_task = pf_taskH;
    1ca6:	72 83       	std	Z+2, r23	; 0x02
    1ca8:	61 83       	std	Z+1, r22	; 0x01
	task_number++;
    1caa:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <task_number>
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <task_number>
    1cb4:	08 95       	ret

00001cb6 <__fixunssfsi>:
    1cb6:	98 d0       	rcall	.+304    	; 0x1de8 <__fp_splitA>
    1cb8:	88 f0       	brcs	.+34     	; 0x1cdc <__fixunssfsi+0x26>
    1cba:	9f 57       	subi	r25, 0x7F	; 127
    1cbc:	90 f0       	brcs	.+36     	; 0x1ce2 <__fixunssfsi+0x2c>
    1cbe:	b9 2f       	mov	r27, r25
    1cc0:	99 27       	eor	r25, r25
    1cc2:	b7 51       	subi	r27, 0x17	; 23
    1cc4:	a0 f0       	brcs	.+40     	; 0x1cee <__fixunssfsi+0x38>
    1cc6:	d1 f0       	breq	.+52     	; 0x1cfc <__fixunssfsi+0x46>
    1cc8:	66 0f       	add	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	88 1f       	adc	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	1a f0       	brmi	.+6      	; 0x1cd8 <__fixunssfsi+0x22>
    1cd2:	ba 95       	dec	r27
    1cd4:	c9 f7       	brne	.-14     	; 0x1cc8 <__fixunssfsi+0x12>
    1cd6:	12 c0       	rjmp	.+36     	; 0x1cfc <__fixunssfsi+0x46>
    1cd8:	b1 30       	cpi	r27, 0x01	; 1
    1cda:	81 f0       	breq	.+32     	; 0x1cfc <__fixunssfsi+0x46>
    1cdc:	9f d0       	rcall	.+318    	; 0x1e1c <__fp_zero>
    1cde:	b1 e0       	ldi	r27, 0x01	; 1
    1ce0:	08 95       	ret
    1ce2:	9c c0       	rjmp	.+312    	; 0x1e1c <__fp_zero>
    1ce4:	67 2f       	mov	r22, r23
    1ce6:	78 2f       	mov	r23, r24
    1ce8:	88 27       	eor	r24, r24
    1cea:	b8 5f       	subi	r27, 0xF8	; 248
    1cec:	39 f0       	breq	.+14     	; 0x1cfc <__fixunssfsi+0x46>
    1cee:	b9 3f       	cpi	r27, 0xF9	; 249
    1cf0:	cc f3       	brlt	.-14     	; 0x1ce4 <__fixunssfsi+0x2e>
    1cf2:	86 95       	lsr	r24
    1cf4:	77 95       	ror	r23
    1cf6:	67 95       	ror	r22
    1cf8:	b3 95       	inc	r27
    1cfa:	d9 f7       	brne	.-10     	; 0x1cf2 <__fixunssfsi+0x3c>
    1cfc:	3e f4       	brtc	.+14     	; 0x1d0c <__fixunssfsi+0x56>
    1cfe:	90 95       	com	r25
    1d00:	80 95       	com	r24
    1d02:	70 95       	com	r23
    1d04:	61 95       	neg	r22
    1d06:	7f 4f       	sbci	r23, 0xFF	; 255
    1d08:	8f 4f       	sbci	r24, 0xFF	; 255
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	08 95       	ret

00001d0e <__floatunsisf>:
    1d0e:	e8 94       	clt
    1d10:	09 c0       	rjmp	.+18     	; 0x1d24 <__floatsisf+0x12>

00001d12 <__floatsisf>:
    1d12:	97 fb       	bst	r25, 7
    1d14:	3e f4       	brtc	.+14     	; 0x1d24 <__floatsisf+0x12>
    1d16:	90 95       	com	r25
    1d18:	80 95       	com	r24
    1d1a:	70 95       	com	r23
    1d1c:	61 95       	neg	r22
    1d1e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d20:	8f 4f       	sbci	r24, 0xFF	; 255
    1d22:	9f 4f       	sbci	r25, 0xFF	; 255
    1d24:	99 23       	and	r25, r25
    1d26:	a9 f0       	breq	.+42     	; 0x1d52 <__floatsisf+0x40>
    1d28:	f9 2f       	mov	r31, r25
    1d2a:	96 e9       	ldi	r25, 0x96	; 150
    1d2c:	bb 27       	eor	r27, r27
    1d2e:	93 95       	inc	r25
    1d30:	f6 95       	lsr	r31
    1d32:	87 95       	ror	r24
    1d34:	77 95       	ror	r23
    1d36:	67 95       	ror	r22
    1d38:	b7 95       	ror	r27
    1d3a:	f1 11       	cpse	r31, r1
    1d3c:	f8 cf       	rjmp	.-16     	; 0x1d2e <__floatsisf+0x1c>
    1d3e:	fa f4       	brpl	.+62     	; 0x1d7e <__floatsisf+0x6c>
    1d40:	bb 0f       	add	r27, r27
    1d42:	11 f4       	brne	.+4      	; 0x1d48 <__floatsisf+0x36>
    1d44:	60 ff       	sbrs	r22, 0
    1d46:	1b c0       	rjmp	.+54     	; 0x1d7e <__floatsisf+0x6c>
    1d48:	6f 5f       	subi	r22, 0xFF	; 255
    1d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	16 c0       	rjmp	.+44     	; 0x1d7e <__floatsisf+0x6c>
    1d52:	88 23       	and	r24, r24
    1d54:	11 f0       	breq	.+4      	; 0x1d5a <__floatsisf+0x48>
    1d56:	96 e9       	ldi	r25, 0x96	; 150
    1d58:	11 c0       	rjmp	.+34     	; 0x1d7c <__floatsisf+0x6a>
    1d5a:	77 23       	and	r23, r23
    1d5c:	21 f0       	breq	.+8      	; 0x1d66 <__floatsisf+0x54>
    1d5e:	9e e8       	ldi	r25, 0x8E	; 142
    1d60:	87 2f       	mov	r24, r23
    1d62:	76 2f       	mov	r23, r22
    1d64:	05 c0       	rjmp	.+10     	; 0x1d70 <__floatsisf+0x5e>
    1d66:	66 23       	and	r22, r22
    1d68:	71 f0       	breq	.+28     	; 0x1d86 <__floatsisf+0x74>
    1d6a:	96 e8       	ldi	r25, 0x86	; 134
    1d6c:	86 2f       	mov	r24, r22
    1d6e:	70 e0       	ldi	r23, 0x00	; 0
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	2a f0       	brmi	.+10     	; 0x1d7e <__floatsisf+0x6c>
    1d74:	9a 95       	dec	r25
    1d76:	66 0f       	add	r22, r22
    1d78:	77 1f       	adc	r23, r23
    1d7a:	88 1f       	adc	r24, r24
    1d7c:	da f7       	brpl	.-10     	; 0x1d74 <__floatsisf+0x62>
    1d7e:	88 0f       	add	r24, r24
    1d80:	96 95       	lsr	r25
    1d82:	87 95       	ror	r24
    1d84:	97 f9       	bld	r25, 7
    1d86:	08 95       	ret

00001d88 <__fp_inf>:
    1d88:	97 f9       	bld	r25, 7
    1d8a:	9f 67       	ori	r25, 0x7F	; 127
    1d8c:	80 e8       	ldi	r24, 0x80	; 128
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	60 e0       	ldi	r22, 0x00	; 0
    1d92:	08 95       	ret

00001d94 <__fp_nan>:
    1d94:	9f ef       	ldi	r25, 0xFF	; 255
    1d96:	80 ec       	ldi	r24, 0xC0	; 192
    1d98:	08 95       	ret

00001d9a <__fp_pscA>:
    1d9a:	00 24       	eor	r0, r0
    1d9c:	0a 94       	dec	r0
    1d9e:	16 16       	cp	r1, r22
    1da0:	17 06       	cpc	r1, r23
    1da2:	18 06       	cpc	r1, r24
    1da4:	09 06       	cpc	r0, r25
    1da6:	08 95       	ret

00001da8 <__fp_pscB>:
    1da8:	00 24       	eor	r0, r0
    1daa:	0a 94       	dec	r0
    1dac:	12 16       	cp	r1, r18
    1dae:	13 06       	cpc	r1, r19
    1db0:	14 06       	cpc	r1, r20
    1db2:	05 06       	cpc	r0, r21
    1db4:	08 95       	ret

00001db6 <__fp_round>:
    1db6:	09 2e       	mov	r0, r25
    1db8:	03 94       	inc	r0
    1dba:	00 0c       	add	r0, r0
    1dbc:	11 f4       	brne	.+4      	; 0x1dc2 <__fp_round+0xc>
    1dbe:	88 23       	and	r24, r24
    1dc0:	52 f0       	brmi	.+20     	; 0x1dd6 <__fp_round+0x20>
    1dc2:	bb 0f       	add	r27, r27
    1dc4:	40 f4       	brcc	.+16     	; 0x1dd6 <__fp_round+0x20>
    1dc6:	bf 2b       	or	r27, r31
    1dc8:	11 f4       	brne	.+4      	; 0x1dce <__fp_round+0x18>
    1dca:	60 ff       	sbrs	r22, 0
    1dcc:	04 c0       	rjmp	.+8      	; 0x1dd6 <__fp_round+0x20>
    1dce:	6f 5f       	subi	r22, 0xFF	; 255
    1dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    1dd2:	8f 4f       	sbci	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	08 95       	ret

00001dd8 <__fp_split3>:
    1dd8:	57 fd       	sbrc	r21, 7
    1dda:	90 58       	subi	r25, 0x80	; 128
    1ddc:	44 0f       	add	r20, r20
    1dde:	55 1f       	adc	r21, r21
    1de0:	59 f0       	breq	.+22     	; 0x1df8 <__fp_splitA+0x10>
    1de2:	5f 3f       	cpi	r21, 0xFF	; 255
    1de4:	71 f0       	breq	.+28     	; 0x1e02 <__fp_splitA+0x1a>
    1de6:	47 95       	ror	r20

00001de8 <__fp_splitA>:
    1de8:	88 0f       	add	r24, r24
    1dea:	97 fb       	bst	r25, 7
    1dec:	99 1f       	adc	r25, r25
    1dee:	61 f0       	breq	.+24     	; 0x1e08 <__fp_splitA+0x20>
    1df0:	9f 3f       	cpi	r25, 0xFF	; 255
    1df2:	79 f0       	breq	.+30     	; 0x1e12 <__fp_splitA+0x2a>
    1df4:	87 95       	ror	r24
    1df6:	08 95       	ret
    1df8:	12 16       	cp	r1, r18
    1dfa:	13 06       	cpc	r1, r19
    1dfc:	14 06       	cpc	r1, r20
    1dfe:	55 1f       	adc	r21, r21
    1e00:	f2 cf       	rjmp	.-28     	; 0x1de6 <__fp_split3+0xe>
    1e02:	46 95       	lsr	r20
    1e04:	f1 df       	rcall	.-30     	; 0x1de8 <__fp_splitA>
    1e06:	08 c0       	rjmp	.+16     	; 0x1e18 <__fp_splitA+0x30>
    1e08:	16 16       	cp	r1, r22
    1e0a:	17 06       	cpc	r1, r23
    1e0c:	18 06       	cpc	r1, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	f1 cf       	rjmp	.-30     	; 0x1df4 <__fp_splitA+0xc>
    1e12:	86 95       	lsr	r24
    1e14:	71 05       	cpc	r23, r1
    1e16:	61 05       	cpc	r22, r1
    1e18:	08 94       	sec
    1e1a:	08 95       	ret

00001e1c <__fp_zero>:
    1e1c:	e8 94       	clt

00001e1e <__fp_szero>:
    1e1e:	bb 27       	eor	r27, r27
    1e20:	66 27       	eor	r22, r22
    1e22:	77 27       	eor	r23, r23
    1e24:	cb 01       	movw	r24, r22
    1e26:	97 f9       	bld	r25, 7
    1e28:	08 95       	ret

00001e2a <__mulsf3>:
    1e2a:	0b d0       	rcall	.+22     	; 0x1e42 <__mulsf3x>
    1e2c:	c4 cf       	rjmp	.-120    	; 0x1db6 <__fp_round>
    1e2e:	b5 df       	rcall	.-150    	; 0x1d9a <__fp_pscA>
    1e30:	28 f0       	brcs	.+10     	; 0x1e3c <__mulsf3+0x12>
    1e32:	ba df       	rcall	.-140    	; 0x1da8 <__fp_pscB>
    1e34:	18 f0       	brcs	.+6      	; 0x1e3c <__mulsf3+0x12>
    1e36:	95 23       	and	r25, r21
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <__mulsf3+0x12>
    1e3a:	a6 cf       	rjmp	.-180    	; 0x1d88 <__fp_inf>
    1e3c:	ab cf       	rjmp	.-170    	; 0x1d94 <__fp_nan>
    1e3e:	11 24       	eor	r1, r1
    1e40:	ee cf       	rjmp	.-36     	; 0x1e1e <__fp_szero>

00001e42 <__mulsf3x>:
    1e42:	ca df       	rcall	.-108    	; 0x1dd8 <__fp_split3>
    1e44:	a0 f3       	brcs	.-24     	; 0x1e2e <__mulsf3+0x4>

00001e46 <__mulsf3_pse>:
    1e46:	95 9f       	mul	r25, r21
    1e48:	d1 f3       	breq	.-12     	; 0x1e3e <__mulsf3+0x14>
    1e4a:	95 0f       	add	r25, r21
    1e4c:	50 e0       	ldi	r21, 0x00	; 0
    1e4e:	55 1f       	adc	r21, r21
    1e50:	62 9f       	mul	r22, r18
    1e52:	f0 01       	movw	r30, r0
    1e54:	72 9f       	mul	r23, r18
    1e56:	bb 27       	eor	r27, r27
    1e58:	f0 0d       	add	r31, r0
    1e5a:	b1 1d       	adc	r27, r1
    1e5c:	63 9f       	mul	r22, r19
    1e5e:	aa 27       	eor	r26, r26
    1e60:	f0 0d       	add	r31, r0
    1e62:	b1 1d       	adc	r27, r1
    1e64:	aa 1f       	adc	r26, r26
    1e66:	64 9f       	mul	r22, r20
    1e68:	66 27       	eor	r22, r22
    1e6a:	b0 0d       	add	r27, r0
    1e6c:	a1 1d       	adc	r26, r1
    1e6e:	66 1f       	adc	r22, r22
    1e70:	82 9f       	mul	r24, r18
    1e72:	22 27       	eor	r18, r18
    1e74:	b0 0d       	add	r27, r0
    1e76:	a1 1d       	adc	r26, r1
    1e78:	62 1f       	adc	r22, r18
    1e7a:	73 9f       	mul	r23, r19
    1e7c:	b0 0d       	add	r27, r0
    1e7e:	a1 1d       	adc	r26, r1
    1e80:	62 1f       	adc	r22, r18
    1e82:	83 9f       	mul	r24, r19
    1e84:	a0 0d       	add	r26, r0
    1e86:	61 1d       	adc	r22, r1
    1e88:	22 1f       	adc	r18, r18
    1e8a:	74 9f       	mul	r23, r20
    1e8c:	33 27       	eor	r19, r19
    1e8e:	a0 0d       	add	r26, r0
    1e90:	61 1d       	adc	r22, r1
    1e92:	23 1f       	adc	r18, r19
    1e94:	84 9f       	mul	r24, r20
    1e96:	60 0d       	add	r22, r0
    1e98:	21 1d       	adc	r18, r1
    1e9a:	82 2f       	mov	r24, r18
    1e9c:	76 2f       	mov	r23, r22
    1e9e:	6a 2f       	mov	r22, r26
    1ea0:	11 24       	eor	r1, r1
    1ea2:	9f 57       	subi	r25, 0x7F	; 127
    1ea4:	50 40       	sbci	r21, 0x00	; 0
    1ea6:	8a f0       	brmi	.+34     	; 0x1eca <__mulsf3_pse+0x84>
    1ea8:	e1 f0       	breq	.+56     	; 0x1ee2 <__mulsf3_pse+0x9c>
    1eaa:	88 23       	and	r24, r24
    1eac:	4a f0       	brmi	.+18     	; 0x1ec0 <__mulsf3_pse+0x7a>
    1eae:	ee 0f       	add	r30, r30
    1eb0:	ff 1f       	adc	r31, r31
    1eb2:	bb 1f       	adc	r27, r27
    1eb4:	66 1f       	adc	r22, r22
    1eb6:	77 1f       	adc	r23, r23
    1eb8:	88 1f       	adc	r24, r24
    1eba:	91 50       	subi	r25, 0x01	; 1
    1ebc:	50 40       	sbci	r21, 0x00	; 0
    1ebe:	a9 f7       	brne	.-22     	; 0x1eaa <__mulsf3_pse+0x64>
    1ec0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ec2:	51 05       	cpc	r21, r1
    1ec4:	70 f0       	brcs	.+28     	; 0x1ee2 <__mulsf3_pse+0x9c>
    1ec6:	60 cf       	rjmp	.-320    	; 0x1d88 <__fp_inf>
    1ec8:	aa cf       	rjmp	.-172    	; 0x1e1e <__fp_szero>
    1eca:	5f 3f       	cpi	r21, 0xFF	; 255
    1ecc:	ec f3       	brlt	.-6      	; 0x1ec8 <__mulsf3_pse+0x82>
    1ece:	98 3e       	cpi	r25, 0xE8	; 232
    1ed0:	dc f3       	brlt	.-10     	; 0x1ec8 <__mulsf3_pse+0x82>
    1ed2:	86 95       	lsr	r24
    1ed4:	77 95       	ror	r23
    1ed6:	67 95       	ror	r22
    1ed8:	b7 95       	ror	r27
    1eda:	f7 95       	ror	r31
    1edc:	e7 95       	ror	r30
    1ede:	9f 5f       	subi	r25, 0xFF	; 255
    1ee0:	c1 f7       	brne	.-16     	; 0x1ed2 <__mulsf3_pse+0x8c>
    1ee2:	fe 2b       	or	r31, r30
    1ee4:	88 0f       	add	r24, r24
    1ee6:	91 1d       	adc	r25, r1
    1ee8:	96 95       	lsr	r25
    1eea:	87 95       	ror	r24
    1eec:	97 f9       	bld	r25, 7
    1eee:	08 95       	ret

00001ef0 <__udivmodsi4>:
    1ef0:	a1 e2       	ldi	r26, 0x21	; 33
    1ef2:	1a 2e       	mov	r1, r26
    1ef4:	aa 1b       	sub	r26, r26
    1ef6:	bb 1b       	sub	r27, r27
    1ef8:	fd 01       	movw	r30, r26
    1efa:	0d c0       	rjmp	.+26     	; 0x1f16 <__udivmodsi4_ep>

00001efc <__udivmodsi4_loop>:
    1efc:	aa 1f       	adc	r26, r26
    1efe:	bb 1f       	adc	r27, r27
    1f00:	ee 1f       	adc	r30, r30
    1f02:	ff 1f       	adc	r31, r31
    1f04:	a2 17       	cp	r26, r18
    1f06:	b3 07       	cpc	r27, r19
    1f08:	e4 07       	cpc	r30, r20
    1f0a:	f5 07       	cpc	r31, r21
    1f0c:	20 f0       	brcs	.+8      	; 0x1f16 <__udivmodsi4_ep>
    1f0e:	a2 1b       	sub	r26, r18
    1f10:	b3 0b       	sbc	r27, r19
    1f12:	e4 0b       	sbc	r30, r20
    1f14:	f5 0b       	sbc	r31, r21

00001f16 <__udivmodsi4_ep>:
    1f16:	66 1f       	adc	r22, r22
    1f18:	77 1f       	adc	r23, r23
    1f1a:	88 1f       	adc	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	1a 94       	dec	r1
    1f20:	69 f7       	brne	.-38     	; 0x1efc <__udivmodsi4_loop>
    1f22:	60 95       	com	r22
    1f24:	70 95       	com	r23
    1f26:	80 95       	com	r24
    1f28:	90 95       	com	r25
    1f2a:	9b 01       	movw	r18, r22
    1f2c:	ac 01       	movw	r20, r24
    1f2e:	bd 01       	movw	r22, r26
    1f30:	cf 01       	movw	r24, r30
    1f32:	08 95       	ret

00001f34 <__tablejump2__>:
    1f34:	ee 0f       	add	r30, r30
    1f36:	ff 1f       	adc	r31, r31
    1f38:	00 24       	eor	r0, r0
    1f3a:	00 1c       	adc	r0, r0
    1f3c:	0b be       	out	0x3b, r0	; 59
    1f3e:	07 90       	elpm	r0, Z+
    1f40:	f6 91       	elpm	r31, Z
    1f42:	e0 2d       	mov	r30, r0
    1f44:	09 94       	ijmp

00001f46 <__umulhisi3>:
    1f46:	a2 9f       	mul	r26, r18
    1f48:	b0 01       	movw	r22, r0
    1f4a:	b3 9f       	mul	r27, r19
    1f4c:	c0 01       	movw	r24, r0
    1f4e:	a3 9f       	mul	r26, r19
    1f50:	70 0d       	add	r23, r0
    1f52:	81 1d       	adc	r24, r1
    1f54:	11 24       	eor	r1, r1
    1f56:	91 1d       	adc	r25, r1
    1f58:	b2 9f       	mul	r27, r18
    1f5a:	70 0d       	add	r23, r0
    1f5c:	81 1d       	adc	r24, r1
    1f5e:	11 24       	eor	r1, r1
    1f60:	91 1d       	adc	r25, r1
    1f62:	08 95       	ret

00001f64 <__muluhisi3>:
    1f64:	f0 df       	rcall	.-32     	; 0x1f46 <__umulhisi3>
    1f66:	a5 9f       	mul	r26, r21
    1f68:	90 0d       	add	r25, r0
    1f6a:	b4 9f       	mul	r27, r20
    1f6c:	90 0d       	add	r25, r0
    1f6e:	a4 9f       	mul	r26, r20
    1f70:	80 0d       	add	r24, r0
    1f72:	91 1d       	adc	r25, r1
    1f74:	11 24       	eor	r1, r1
    1f76:	08 95       	ret

00001f78 <_exit>:
    1f78:	f8 94       	cli

00001f7a <__stop_program>:
    1f7a:	ff cf       	rjmp	.-2      	; 0x1f7a <__stop_program>
