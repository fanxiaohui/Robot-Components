
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ea  00800100  000059b4  00005a48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000059b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000212  008007ea  008007ea  00006132  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006132  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006164  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a50  00000000  00000000  000061a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001202c  00000000  00000000  00006bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000255a  00000000  00000000  00018c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000670c  00000000  00000000  0001b17a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b14  00000000  00000000  00021888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a9e  00000000  00000000  0002439c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011e26  00000000  00000000  00028e3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000978  00000000  00000000  0003ac60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	f9 c0       	rjmp	.+498    	; 0x1f8 <__vector_1>
       6:	00 00       	nop
       8:	01 c1       	rjmp	.+514    	; 0x20c <__vector_2>
       a:	00 00       	nop
       c:	09 c1       	rjmp	.+530    	; 0x220 <__vector_3>
       e:	00 00       	nop
      10:	cb c0       	rjmp	.+406    	; 0x1a8 <__vector_4>
      12:	00 00       	nop
      14:	d3 c0       	rjmp	.+422    	; 0x1bc <__vector_5>
      16:	00 00       	nop
      18:	db c0       	rjmp	.+438    	; 0x1d0 <__vector_6>
      1a:	00 00       	nop
      1c:	e3 c0       	rjmp	.+454    	; 0x1e4 <__vector_7>
      1e:	00 00       	nop
      20:	80 c6       	rjmp	.+3328   	; 0xd22 <__vector_8>
      22:	00 00       	nop
      24:	c8 c4       	rjmp	.+2448   	; 0x9b6 <__vector_9>
      26:	00 00       	nop
      28:	02 c5       	rjmp	.+2564   	; 0xa2e <__vector_10>
      2a:	00 00       	nop
      2c:	99 c4       	rjmp	.+2354   	; 0x960 <__vector_11>
      2e:	00 00       	nop
      30:	3a c4       	rjmp	.+2164   	; 0x8a6 <__vector_12>
      32:	00 00       	nop
      34:	ad c3       	rjmp	.+1882   	; 0x790 <__vector_13>
      36:	00 00       	nop
      38:	0b c4       	rjmp	.+2070   	; 0x850 <__vector_14>
      3a:	00 00       	nop
      3c:	7e c3       	rjmp	.+1788   	; 0x73a <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	2d c3       	rjmp	.+1626   	; 0x6a8 <__vector_19>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	17 e0       	ldi	r17, 0x07	; 7
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 eb       	ldi	r30, 0xB4	; 180
      a0:	f9 e5       	ldi	r31, 0x59	; 89
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	29 e0       	ldi	r18, 0x09	; 9
      b4:	aa ee       	ldi	r26, 0xEA	; 234
      b6:	b7 e0       	ldi	r27, 0x07	; 7
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 3f       	cpi	r26, 0xFC	; 252
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	3b d0       	rcall	.+118    	; 0x13a <main>
      c4:	0c 94 d8 2c 	jmp	0x59b0	; 0x59b0 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <debug_init>:
}

void getCalibrationValues()
{
	surface_getCalibrationValues(sensor);
}
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
      ce:	eb ee       	ldi	r30, 0xEB	; 235
      d0:	f7 e0       	ldi	r31, 0x07	; 7
      d2:	80 e8       	ldi	r24, 0x80	; 128
      d4:	18 2f       	mov	r17, r24
      d6:	81 83       	std	Z+1, r24	; 0x01
      d8:	85 e2       	ldi	r24, 0x25	; 37
      da:	82 83       	std	Z+2, r24	; 0x02
      dc:	13 82       	std	Z+3, r1	; 0x03
      de:	14 82       	std	Z+4, r1	; 0x04
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	78 2f       	mov	r23, r24
      e4:	87 83       	std	Z+7, r24	; 0x07
      e6:	92 e0       	ldi	r25, 0x02	; 2
      e8:	91 87       	std	Z+9, r25	; 0x09
      ea:	10 82       	st	Z, r1
      ec:	10 86       	std	Z+8, r1	; 0x08
      ee:	15 82       	std	Z+5, r1	; 0x05
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	68 2f       	mov	r22, r24
      f4:	86 83       	std	Z+6, r24	; 0x06
      f6:	00 e0       	ldi	r16, 0x00	; 0
      f8:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
      fc:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     100:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     104:	50 e0       	ldi	r21, 0x00	; 0
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	0e d5       	rcall	.+2588   	; 0xb26 <uart_init>
     10a:	00 91 eb 07 	lds	r16, 0x07EB	; 0x8007eb <s_debugUart>
     10e:	10 91 ec 07 	lds	r17, 0x07EC	; 0x8007ec <s_debugUart+0x1>
     112:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
     116:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     11a:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     11e:	50 91 f0 07 	lds	r21, 0x07F0	; 0x8007f0 <s_debugUart+0x5>
     122:	60 91 f1 07 	lds	r22, 0x07F1	; 0x8007f1 <s_debugUart+0x6>
     126:	70 91 f2 07 	lds	r23, 0x07F2	; 0x8007f2 <s_debugUart+0x7>
     12a:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <s_debugUart+0x8>
     12e:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <s_debugUart+0x9>
     132:	99 d5       	rcall	.+2866   	; 0xc66 <uart_start>
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	08 95       	ret

0000013a <main>:
 
int main(void)
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	69 97       	sbiw	r28, 0x19	; 25
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
	VL53L0X_RangingMeasurementData_t measure;
	u8 data[10];
	data[9] = 0xbf;
	
	device_disableJTAG();	
	debug_init();
     14c:	cd bf       	out	0x3d, r28	; 61
	vl53l0x_begin(VL53L0X_I2C_ADDR);
     14e:	08 d0       	rcall	.+16     	; 0x160 <device_disableJTAG>
     150:	bc df       	rcall	.-136    	; 0xca <debug_init>
	sei();
	
    while (1)
    {
		vl53l0x_getSingleRangingMeasurement(&measure);
     152:	89 e2       	ldi	r24, 0x29	; 41
     154:	2b d6       	rcall	.+3158   	; 0xdac <vl53l0x_begin>
     156:	78 94       	sei
     158:	ce 01       	movw	r24, r28
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	01 d7       	rcall	.+3586   	; 0xf60 <vl53l0x_getSingleRangingMeasurement>
     15e:	fc cf       	rjmp	.-8      	; 0x158 <main+0x1e>

00000160 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     160:	80 e8       	ldi	r24, 0x80	; 128
     162:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     164:	85 bf       	out	0x35, r24	; 53
     166:	08 95       	ret

00000168 <gpio_changeDirection>:
/* Internal functions                                                   */
/************************************************************************/

void gpio_changeDirection(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     168:	61 30       	cpi	r22, 0x01	; 1
     16a:	61 f0       	breq	.+24     	; 0x184 <gpio_changeDirection+0x1c>
     16c:	28 f0       	brcs	.+10     	; 0x178 <gpio_changeDirection+0x10>
     16e:	62 30       	cpi	r22, 0x02	; 2
     170:	79 f0       	breq	.+30     	; 0x190 <gpio_changeDirection+0x28>
     172:	63 30       	cpi	r22, 0x03	; 3
     174:	99 f0       	breq	.+38     	; 0x19c <gpio_changeDirection+0x34>
     176:	08 95       	ret
	{
		case PA:
			updateBit(&DDRA, s_gpio.number, s_gpio.direction);
     178:	48 2f       	mov	r20, r24
     17a:	67 2f       	mov	r22, r23
     17c:	81 e2       	ldi	r24, 0x21	; 33
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	3a c2       	rjmp	.+1140   	; 0x5f6 <updateBit>
			break;
     182:	08 95       	ret
		case PB:
			updateBit(&DDRB, s_gpio.number, s_gpio.direction);
     184:	48 2f       	mov	r20, r24
     186:	67 2f       	mov	r22, r23
     188:	84 e2       	ldi	r24, 0x24	; 36
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	34 c2       	rjmp	.+1128   	; 0x5f6 <updateBit>
			break;
     18e:	08 95       	ret
		case PC:
			updateBit(&DDRC, s_gpio.number, s_gpio.direction);
     190:	48 2f       	mov	r20, r24
     192:	67 2f       	mov	r22, r23
     194:	87 e2       	ldi	r24, 0x27	; 39
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	2e c2       	rjmp	.+1116   	; 0x5f6 <updateBit>
			break;
     19a:	08 95       	ret
		case PD:
			updateBit(&DDRD, s_gpio.number, s_gpio.direction);
     19c:	48 2f       	mov	r20, r24
     19e:	67 2f       	mov	r22, r23
     1a0:	8a e2       	ldi	r24, 0x2A	; 42
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	28 c2       	rjmp	.+1104   	; 0x5f6 <updateBit>
     1a6:	08 95       	ret

000001a8 <__vector_4>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(PCINT0_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
#ifdef USING_PCINT0
	p_pcInt0Callback();
#endif
}
     1b2:	0f 90       	pop	r0
     1b4:	0f be       	out	0x3f, r0	; 63
     1b6:	0f 90       	pop	r0
     1b8:	1f 90       	pop	r1
     1ba:	18 95       	reti

000001bc <__vector_5>:

ISR(PCINT1_vect)
{
     1bc:	1f 92       	push	r1
     1be:	0f 92       	push	r0
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	0f 92       	push	r0
     1c4:	11 24       	eor	r1, r1
#ifdef USING_PCINT1
	p_pcInt1Callback();
#endif
}
     1c6:	0f 90       	pop	r0
     1c8:	0f be       	out	0x3f, r0	; 63
     1ca:	0f 90       	pop	r0
     1cc:	1f 90       	pop	r1
     1ce:	18 95       	reti

000001d0 <__vector_6>:

ISR(PCINT2_vect)
{
     1d0:	1f 92       	push	r1
     1d2:	0f 92       	push	r0
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	0f 92       	push	r0
     1d8:	11 24       	eor	r1, r1
#ifdef USING_PCINT2
	p_pcInt2Callback();
#endif
}
     1da:	0f 90       	pop	r0
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	0f 90       	pop	r0
     1e0:	1f 90       	pop	r1
     1e2:	18 95       	reti

000001e4 <__vector_7>:

ISR(PCINT3_vect)
{
     1e4:	1f 92       	push	r1
     1e6:	0f 92       	push	r0
     1e8:	0f b6       	in	r0, 0x3f	; 63
     1ea:	0f 92       	push	r0
     1ec:	11 24       	eor	r1, r1
#ifdef USING_PCINT3
	p_pcInt3Callback();
#endif
}
     1ee:	0f 90       	pop	r0
     1f0:	0f be       	out	0x3f, r0	; 63
     1f2:	0f 90       	pop	r0
     1f4:	1f 90       	pop	r1
     1f6:	18 95       	reti

000001f8 <__vector_1>:

ISR(INT0_vect)
{
     1f8:	1f 92       	push	r1
     1fa:	0f 92       	push	r0
     1fc:	0f b6       	in	r0, 0x3f	; 63
     1fe:	0f 92       	push	r0
     200:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[0]();
#endif
}
     202:	0f 90       	pop	r0
     204:	0f be       	out	0x3f, r0	; 63
     206:	0f 90       	pop	r0
     208:	1f 90       	pop	r1
     20a:	18 95       	reti

0000020c <__vector_2>:

ISR(INT1_vect)
{
     20c:	1f 92       	push	r1
     20e:	0f 92       	push	r0
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	0f 92       	push	r0
     214:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[1]();
#endif
}
     216:	0f 90       	pop	r0
     218:	0f be       	out	0x3f, r0	; 63
     21a:	0f 90       	pop	r0
     21c:	1f 90       	pop	r1
     21e:	18 95       	reti

00000220 <__vector_3>:

ISR(INT2_vect)
{
     220:	1f 92       	push	r1
     222:	0f 92       	push	r0
     224:	0f b6       	in	r0, 0x3f	; 63
     226:	0f 92       	push	r0
     228:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[2]();
#endif
}
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti

00000234 <gpio_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void gpio_init(gpio_struct_t s_gpio)
{
     234:	0f 93       	push	r16
     236:	1f 93       	push	r17
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	c6 2f       	mov	r28, r22
     23e:	17 2f       	mov	r17, r23
     240:	d8 2f       	mov	r29, r24
	/* Configure pin direction */
	gpio_changeDirection(s_gpio);
     242:	09 2f       	mov	r16, r25

	/* Configure pin pull-up */
	if (s_gpio.direction == INPUT)
     244:	91 df       	rcall	.-222    	; 0x168 <gpio_changeDirection>
     246:	d1 11       	cpse	r29, r1
	{
		switch (s_gpio.port)
     248:	23 c0       	rjmp	.+70     	; 0x290 <gpio_init+0x5c>
     24a:	c1 30       	cpi	r28, 0x01	; 1
     24c:	81 f0       	breq	.+32     	; 0x26e <gpio_init+0x3a>
     24e:	28 f0       	brcs	.+10     	; 0x25a <gpio_init+0x26>
     250:	c2 30       	cpi	r28, 0x02	; 2
     252:	99 f0       	breq	.+38     	; 0x27a <gpio_init+0x46>
     254:	c3 30       	cpi	r28, 0x03	; 3
     256:	b9 f0       	breq	.+46     	; 0x286 <gpio_init+0x52>
		{
			case PA:
				updateBit(&PORTA, s_gpio.number, s_gpio.pullUp);
     258:	1b c0       	rjmp	.+54     	; 0x290 <gpio_init+0x5c>
     25a:	40 2f       	mov	r20, r16
     25c:	61 2f       	mov	r22, r17
     25e:	82 e2       	ldi	r24, 0x22	; 34
     260:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&DIDR0, s_gpio.number);
     262:	c9 d1       	rcall	.+914    	; 0x5f6 <updateBit>
     264:	61 2f       	mov	r22, r17
     266:	8e e7       	ldi	r24, 0x7E	; 126
     268:	90 e0       	ldi	r25, 0x00	; 0
				break;
     26a:	e9 d1       	rcall	.+978    	; 0x63e <clearBit>
			case PB:
				updateBit(&PORTB, s_gpio.number, s_gpio.pullUp);
     26c:	11 c0       	rjmp	.+34     	; 0x290 <gpio_init+0x5c>
     26e:	40 2f       	mov	r20, r16
     270:	61 2f       	mov	r22, r17
     272:	85 e2       	ldi	r24, 0x25	; 37
     274:	90 e0       	ldi	r25, 0x00	; 0
				break;
			case PC:
				updateBit(&PORTC, s_gpio.number, s_gpio.pullUp);
     276:	bf d1       	rcall	.+894    	; 0x5f6 <updateBit>
     278:	0b c0       	rjmp	.+22     	; 0x290 <gpio_init+0x5c>
     27a:	40 2f       	mov	r20, r16
     27c:	61 2f       	mov	r22, r17
				break;
			case PD:
				updateBit(&PORTD, s_gpio.number, s_gpio.pullUp);
     27e:	88 e2       	ldi	r24, 0x28	; 40
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	b9 d1       	rcall	.+882    	; 0x5f6 <updateBit>
     284:	05 c0       	rjmp	.+10     	; 0x290 <gpio_init+0x5c>
     286:	40 2f       	mov	r20, r16
     288:	61 2f       	mov	r22, r17
				break;
		}
	}
}
     28a:	8b e2       	ldi	r24, 0x2B	; 43
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	b3 d1       	rcall	.+870    	; 0x5f6 <updateBit>
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	08 95       	ret

0000029a <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8b 01       	movw	r16, r22
     2a4:	9c 01       	movw	r18, r24
     2a6:	ea 01       	movw	r28, r20
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	72 e1       	ldi	r23, 0x12	; 18
     2ac:	8a e7       	ldi	r24, 0x7A	; 122
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	a9 01       	movw	r20, r18
     2b2:	98 01       	movw	r18, r16
     2b4:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
     2b8:	ba 01       	movw	r22, r20
     2ba:	a9 01       	movw	r20, r18
     2bc:	40 51       	subi	r20, 0x10	; 16
     2be:	51 09       	sbc	r21, r1
     2c0:	61 09       	sbc	r22, r1
     2c2:	71 09       	sbc	r23, r1
     2c4:	db 01       	movw	r26, r22
     2c6:	ca 01       	movw	r24, r20
     2c8:	b6 95       	lsr	r27
     2ca:	a7 95       	ror	r26
     2cc:	97 95       	ror	r25
     2ce:	87 95       	ror	r24
     2d0:	8f 3f       	cpi	r24, 0xFF	; 255
     2d2:	91 05       	cpc	r25, r1
     2d4:	a1 05       	cpc	r26, r1
     2d6:	b1 05       	cpc	r27, r1
     2d8:	09 f0       	breq	.+2      	; 0x2dc <calculateTWBR+0x42>
     2da:	10 f4       	brcc	.+4      	; 0x2e0 <calculateTWBR+0x46>
     2dc:	18 82       	st	Y, r1
     2de:	32 c0       	rjmp	.+100    	; 0x344 <calculateTWBR+0xaa>
     2e0:	db 01       	movw	r26, r22
     2e2:	ca 01       	movw	r24, r20
     2e4:	68 94       	set
     2e6:	12 f8       	bld	r1, 2
     2e8:	b6 95       	lsr	r27
     2ea:	a7 95       	ror	r26
     2ec:	97 95       	ror	r25
     2ee:	87 95       	ror	r24
     2f0:	16 94       	lsr	r1
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <calculateTWBR+0x4e>
     2f4:	8f 3f       	cpi	r24, 0xFF	; 255
     2f6:	91 05       	cpc	r25, r1
     2f8:	a1 05       	cpc	r26, r1
     2fa:	b1 05       	cpc	r27, r1
     2fc:	09 f0       	breq	.+2      	; 0x300 <calculateTWBR+0x66>
     2fe:	18 f4       	brcc	.+6      	; 0x306 <calculateTWBR+0x6c>
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	28 83       	st	Y, r18
     304:	1f c0       	rjmp	.+62     	; 0x344 <calculateTWBR+0xaa>
     306:	db 01       	movw	r26, r22
     308:	ca 01       	movw	r24, r20
     30a:	68 94       	set
     30c:	14 f8       	bld	r1, 4
     30e:	b6 95       	lsr	r27
     310:	a7 95       	ror	r26
     312:	97 95       	ror	r25
     314:	87 95       	ror	r24
     316:	16 94       	lsr	r1
     318:	d1 f7       	brne	.-12     	; 0x30e <calculateTWBR+0x74>
     31a:	8f 3f       	cpi	r24, 0xFF	; 255
     31c:	91 05       	cpc	r25, r1
     31e:	a1 05       	cpc	r26, r1
     320:	b1 05       	cpc	r27, r1
     322:	09 f0       	breq	.+2      	; 0x326 <calculateTWBR+0x8c>
     324:	18 f4       	brcc	.+6      	; 0x32c <calculateTWBR+0x92>
     326:	22 e0       	ldi	r18, 0x02	; 2
     328:	28 83       	st	Y, r18
     32a:	0c c0       	rjmp	.+24     	; 0x344 <calculateTWBR+0xaa>
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	88 83       	st	Y, r24
     330:	db 01       	movw	r26, r22
     332:	ca 01       	movw	r24, r20
     334:	68 94       	set
     336:	16 f8       	bld	r1, 6
     338:	b6 95       	lsr	r27
     33a:	a7 95       	ror	r26
     33c:	97 95       	ror	r25
     33e:	87 95       	ror	r24
     340:	16 94       	lsr	r1
     342:	d1 f7       	brne	.-12     	; 0x338 <calculateTWBR+0x9e>
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <stopAndGetErrorCode>:
     34e:	cf 93       	push	r28
     350:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     354:	64 e0       	ldi	r22, 0x04	; 4
     356:	8c eb       	ldi	r24, 0xBC	; 188
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	65 d1       	rcall	.+714    	; 0x626 <setBit>
     35c:	8c 2f       	mov	r24, r28
     35e:	88 7f       	andi	r24, 0xF8	; 248
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <i2c_init>:
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	00 d0       	rcall	.+0      	; 0x36a <i2c_init+0x6>
     36a:	00 d0       	rcall	.+0      	; 0x36c <i2c_init+0x8>
     36c:	00 d0       	rcall	.+0      	; 0x36e <i2c_init+0xa>
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	5b 83       	std	Y+3, r21	; 0x03
     374:	6c 83       	std	Y+4, r22	; 0x04
     376:	7d 83       	std	Y+5, r23	; 0x05
     378:	8e 83       	std	Y+6, r24	; 0x06
     37a:	6b 81       	ldd	r22, Y+3	; 0x03
     37c:	7c 81       	ldd	r23, Y+4	; 0x04
     37e:	8d 81       	ldd	r24, Y+5	; 0x05
     380:	9e 81       	ldd	r25, Y+6	; 0x06
     382:	ae 01       	movw	r20, r28
     384:	4f 5f       	subi	r20, 0xFF	; 255
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	88 df       	rcall	.-240    	; 0x29a <calculateTWBR>
     38a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	62 d1       	rcall	.+708    	; 0x658 <checkBit>
     394:	48 2f       	mov	r20, r24
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	89 eb       	ldi	r24, 0xB9	; 185
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2c d1       	rcall	.+600    	; 0x5f6 <updateBit>
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	5a d1       	rcall	.+692    	; 0x658 <checkBit>
     3a4:	48 2f       	mov	r20, r24
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	89 eb       	ldi	r24, 0xB9	; 185
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	24 d1       	rcall	.+584    	; 0x5f6 <updateBit>
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	71 e0       	ldi	r23, 0x01	; 1
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	3e df       	rcall	.-388    	; 0x234 <gpio_init>
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	39 df       	rcall	.-398    	; 0x234 <gpio_init>
     3c2:	26 96       	adiw	r28, 0x06	; 6
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <i2c_start>:
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	8c eb       	ldi	r24, 0xBC	; 188
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	25 c1       	rjmp	.+586    	; 0x626 <setBit>
     3dc:	08 95       	ret

000003de <i2c_transmit>:
}

u8 i2c_transmit(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     3de:	af 92       	push	r10
     3e0:	bf 92       	push	r11
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	18 2f       	mov	r17, r24
     3f4:	6b 01       	movw	r12, r22
     3f6:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     3f8:	65 e0       	ldi	r22, 0x05	; 5
     3fa:	8c eb       	ldi	r24, 0xBC	; 188
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	13 d1       	rcall	.+550    	; 0x626 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     400:	cc eb       	ldi	r28, 0xBC	; 188
     402:	d0 e0       	ldi	r29, 0x00	; 0
     404:	88 81       	ld	r24, Y
     406:	67 e0       	ldi	r22, 0x07	; 7
     408:	27 d1       	rcall	.+590    	; 0x658 <checkBit>
     40a:	88 23       	and	r24, r24
     40c:	d9 f3       	breq	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     40e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     412:	88 7f       	andi	r24, 0xF8	; 248
     414:	88 30       	cpi	r24, 0x08	; 8
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	47 c0       	rjmp	.+142    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     41a:	11 0f       	add	r17, r17
     41c:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		/* Set write mode */
		clearBit(&TWDR, TWD0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	8b eb       	ldi	r24, 0xBB	; 187
     424:	90 e0       	ldi	r25, 0x00	; 0
		/* Set repeated start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     426:	0b d1       	rcall	.+534    	; 0x63e <clearBit>
     428:	65 e0       	ldi	r22, 0x05	; 5
     42a:	8c eb       	ldi	r24, 0xBC	; 188
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	07 d1       	rcall	.+526    	; 0x63e <clearBit>
     430:	cc eb       	ldi	r28, 0xBC	; 188
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	88 81       	ld	r24, Y
     436:	67 e0       	ldi	r22, 0x07	; 7
     438:	0f d1       	rcall	.+542    	; 0x658 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
     43a:	88 23       	and	r24, r24
     43c:	d9 f3       	breq	.-10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     442:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Transmit data */
			while (i != u8_dataLength)
     444:	88 31       	cpi	r24, 0x18	; 24
     446:	71 f5       	brne	.+92     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     448:	ee 20       	and	r14, r14
     44a:	81 f1       	breq	.+96     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     44c:	86 01       	movw	r16, r12
     44e:	ea 94       	dec	r14
     450:	f1 2c       	mov	r15, r1
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	e8 1a       	sub	r14, r24
     456:	f8 0a       	sbc	r15, r24
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     458:	ec 0c       	add	r14, r12
     45a:	fd 1c       	adc	r15, r13
     45c:	0f 2e       	mov	r0, r31
     45e:	fb eb       	ldi	r31, 0xBB	; 187
     460:	af 2e       	mov	r10, r31
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     462:	b1 2c       	mov	r11, r1
     464:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     466:	cc eb       	ldi	r28, 0xBC	; 188
     468:	d0 e0       	ldi	r29, 0x00	; 0
     46a:	0f 2e       	mov	r0, r31
     46c:	f9 eb       	ldi	r31, 0xB9	; 185
     46e:	cf 2e       	mov	r12, r31
		{
			/* Transmit data */
			while (i != u8_dataLength)
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     470:	d1 2c       	mov	r13, r1
     472:	f0 2d       	mov	r31, r0
     474:	f8 01       	movw	r30, r16
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     476:	81 91       	ld	r24, Z+
     478:	8f 01       	movw	r16, r30
     47a:	f5 01       	movw	r30, r10
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     47c:	80 83       	st	Z, r24
     47e:	67 e0       	ldi	r22, 0x07	; 7
     480:	ce 01       	movw	r24, r28
     482:	d1 d0       	rcall	.+418    	; 0x626 <setBit>
     484:	88 81       	ld	r24, Y
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     486:	67 e0       	ldi	r22, 0x07	; 7
     488:	e7 d0       	rcall	.+462    	; 0x658 <checkBit>
     48a:	88 23       	and	r24, r24
     48c:	d9 f3       	breq	.-10     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
					return stopAndGetErrorCode();
     48e:	f6 01       	movw	r30, r12
     490:	80 81       	ld	r24, Z
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
		{
			/* Transmit data */
			while (i != u8_dataLength)
     492:	88 7f       	andi	r24, 0xF8	; 248
     494:	88 32       	cpi	r24, 0x28	; 40
     496:	11 f0       	breq	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					return stopAndGetErrorCode();
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     498:	5a df       	rcall	.-332    	; 0x34e <stopAndGetErrorCode>
     49a:	13 c0       	rjmp	.+38     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     49c:	0e 15       	cp	r16, r14
	}
	else
		return stopAndGetErrorCode();
     49e:	1f 05       	cpc	r17, r15
     4a0:	49 f7       	brne	.-46     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	
	/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
	setBit(&TWCR, TWSTO);
     4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4a4:	54 df       	rcall	.-344    	; 0x34e <stopAndGetErrorCode>
     4a6:	0d c0       	rjmp	.+26     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4a8:	52 df       	rcall	.-348    	; 0x34e <stopAndGetErrorCode>
     4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	/* Wait for stop condition to be sent. */
	while (checkBit(TWCR, TWSTO));
     4ac:	64 e0       	ldi	r22, 0x04	; 4
     4ae:	8c eb       	ldi	r24, 0xBC	; 188
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	b9 d0       	rcall	.+370    	; 0x626 <setBit>
     4b4:	cc eb       	ldi	r28, 0xBC	; 188
     4b6:	d0 e0       	ldi	r29, 0x00	; 0
     4b8:	88 81       	ld	r24, Y
     4ba:	64 e0       	ldi	r22, 0x04	; 4

	return I2C_NO_ERROR;
}
     4bc:	cd d0       	rcall	.+410    	; 0x658 <checkBit>
     4be:	81 11       	cpse	r24, r1
     4c0:	fb cf       	rjmp	.-10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	08 95       	ret

000004d8 <i2c_receive>:

u8 i2c_receive(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	18 2f       	mov	r17, r24
     4ee:	6b 01       	movw	r12, r22
     4f0:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     4f2:	65 e0       	ldi	r22, 0x05	; 5
     4f4:	8c eb       	ldi	r24, 0xBC	; 188
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	96 d0       	rcall	.+300    	; 0x626 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     4fa:	cc eb       	ldi	r28, 0xBC	; 188
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
     4fe:	88 81       	ld	r24, Y
     500:	67 e0       	ldi	r22, 0x07	; 7
     502:	aa d0       	rcall	.+340    	; 0x658 <checkBit>
     504:	88 23       	and	r24, r24
     506:	d9 f3       	breq	.-10     	; 0x4fe <i2c_receive+0x26>
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     508:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     50c:	88 7f       	andi	r24, 0xF8	; 248
     50e:	88 30       	cpi	r24, 0x08	; 8
     510:	09 f0       	breq	.+2      	; 0x514 <i2c_receive+0x3c>
     512:	47 c0       	rjmp	.+142    	; 0x5a2 <i2c_receive+0xca>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     514:	11 0f       	add	r17, r17
     516:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		/* Set read mode */
		setBit(&TWDR, TWD0);
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	8b eb       	ldi	r24, 0xBB	; 187
     51e:	90 e0       	ldi	r25, 0x00	; 0
		/* Set repeated start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     520:	82 d0       	rcall	.+260    	; 0x626 <setBit>
     522:	65 e0       	ldi	r22, 0x05	; 5
     524:	8c eb       	ldi	r24, 0xBC	; 188
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	8a d0       	rcall	.+276    	; 0x63e <clearBit>
     52a:	cc eb       	ldi	r28, 0xBC	; 188
     52c:	d0 e0       	ldi	r29, 0x00	; 0
     52e:	88 81       	ld	r24, Y
     530:	67 e0       	ldi	r22, 0x07	; 7
     532:	92 d0       	rcall	.+292    	; 0x658 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
     534:	88 23       	and	r24, r24
     536:	d9 f3       	breq	.-10     	; 0x52e <i2c_receive+0x56>
     538:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     53c:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Receive data */
			while (i != u8_dataLength)
     53e:	80 34       	cpi	r24, 0x40	; 64
     540:	71 f5       	brne	.+92     	; 0x59e <i2c_receive+0xc6>
     542:	ee 20       	and	r14, r14
     544:	81 f1       	breq	.+96     	; 0x5a6 <i2c_receive+0xce>
     546:	86 01       	movw	r16, r12
     548:	ea 94       	dec	r14
     54a:	f1 2c       	mov	r15, r1
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	e8 1a       	sub	r14, r24
     550:	f8 0a       	sbc	r15, r24
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     552:	ec 0c       	add	r14, r12
     554:	fd 1c       	adc	r15, r13
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     556:	cc eb       	ldi	r28, 0xBC	; 188
     558:	d0 e0       	ldi	r29, 0x00	; 0
     55a:	0f 2e       	mov	r0, r31
     55c:	f9 eb       	ldi	r31, 0xB9	; 185
     55e:	cf 2e       	mov	r12, r31
					return stopAndGetErrorCode();
				/* Read next byte */
				au8_data[i] = TWDR;
     560:	d1 2c       	mov	r13, r1
     562:	f0 2d       	mov	r31, r0
     564:	0f 2e       	mov	r0, r31
		{
			/* Receive data */
			while (i != u8_dataLength)
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     566:	fb eb       	ldi	r31, 0xBB	; 187
     568:	af 2e       	mov	r10, r31
     56a:	b1 2c       	mov	r11, r1
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     56c:	f0 2d       	mov	r31, r0
     56e:	66 e0       	ldi	r22, 0x06	; 6
     570:	ce 01       	movw	r24, r28
     572:	59 d0       	rcall	.+178    	; 0x626 <setBit>
     574:	88 81       	ld	r24, Y
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     576:	67 e0       	ldi	r22, 0x07	; 7
     578:	6f d0       	rcall	.+222    	; 0x658 <checkBit>
     57a:	88 23       	and	r24, r24
     57c:	d9 f3       	breq	.-10     	; 0x574 <i2c_receive+0x9c>
     57e:	f6 01       	movw	r30, r12
					return stopAndGetErrorCode();
     580:	80 81       	ld	r24, Z
     582:	88 7f       	andi	r24, 0xF8	; 248
     584:	80 35       	cpi	r24, 0x50	; 80
				/* Read next byte */
				au8_data[i] = TWDR;
     586:	11 f0       	breq	.+4      	; 0x58c <i2c_receive+0xb4>
     588:	e2 de       	rcall	.-572    	; 0x34e <stopAndGetErrorCode>
     58a:	2a c0       	rjmp	.+84     	; 0x5e0 <i2c_receive+0x108>
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
		{
			/* Receive data */
			while (i != u8_dataLength)
     58c:	f5 01       	movw	r30, r10
     58e:	80 81       	ld	r24, Z
     590:	f8 01       	movw	r30, r16
				au8_data[i] = TWDR;
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     592:	81 93       	st	Z+, r24
     594:	8f 01       	movw	r16, r30
     596:	ee 15       	cp	r30, r14
	}
	else
		return stopAndGetErrorCode();
     598:	ff 05       	cpc	r31, r15
     59a:	49 f7       	brne	.-46     	; 0x56e <i2c_receive+0x96>
	
	/* Send NACK after all expected transfers are done. Also clears I2C flag because it writes a 1 to it. */
	clearBit(&TWCR, TWEA);
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <i2c_receive+0xce>
     59e:	d7 de       	rcall	.-594    	; 0x34e <stopAndGetErrorCode>
     5a0:	1f c0       	rjmp	.+62     	; 0x5e0 <i2c_receive+0x108>
     5a2:	d5 de       	rcall	.-598    	; 0x34e <stopAndGetErrorCode>
     5a4:	1d c0       	rjmp	.+58     	; 0x5e0 <i2c_receive+0x108>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     5a6:	66 e0       	ldi	r22, 0x06	; 6
     5a8:	8c eb       	ldi	r24, 0xBC	; 188
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	48 d0       	rcall	.+144    	; 0x63e <clearBit>
     5ae:	cc eb       	ldi	r28, 0xBC	; 188
     5b0:	d0 e0       	ldi	r29, 0x00	; 0
     5b2:	88 81       	ld	r24, Y
	/* If NACK was sent, all is good */
	if ((TWSR & 0xF8) == I2C_DATA_READ_NACK)
     5b4:	67 e0       	ldi	r22, 0x07	; 7
     5b6:	50 d0       	rcall	.+160    	; 0x658 <checkBit>
     5b8:	88 23       	and	r24, r24
     5ba:	d9 f3       	breq	.-10     	; 0x5b2 <i2c_receive+0xda>
	{
		/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
		setBit(&TWCR, TWSTO);
     5bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5c0:	88 7f       	andi	r24, 0xF8	; 248
     5c2:	88 35       	cpi	r24, 0x58	; 88
     5c4:	61 f4       	brne	.+24     	; 0x5de <i2c_receive+0x106>
		/* Wait for stop condition to be sent. */
		while (checkBit(TWCR, TWSTO));
     5c6:	64 e0       	ldi	r22, 0x04	; 4
     5c8:	8c eb       	ldi	r24, 0xBC	; 188
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	2c d0       	rcall	.+88     	; 0x626 <setBit>
     5ce:	cc eb       	ldi	r28, 0xBC	; 188
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
     5d2:	88 81       	ld	r24, Y
     5d4:	64 e0       	ldi	r22, 0x04	; 4
     5d6:	40 d0       	rcall	.+128    	; 0x658 <checkBit>
	}

	return I2C_NO_ERROR;
     5d8:	81 11       	cpse	r24, r1
}
     5da:	fb cf       	rjmp	.-10     	; 0x5d2 <i2c_receive+0xfa>
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <i2c_receive+0x108>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	bf 90       	pop	r11
     5f2:	af 90       	pop	r10
     5f4:	08 95       	ret

000005f6 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     5f6:	fc 01       	movw	r30, r24
     5f8:	94 2f       	mov	r25, r20
     5fa:	20 81       	ld	r18, Z
     5fc:	41 e0       	ldi	r20, 0x01	; 1
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	06 2e       	mov	r0, r22
     602:	02 c0       	rjmp	.+4      	; 0x608 <updateBit+0x12>
     604:	44 0f       	add	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	e2 f7       	brpl	.-8      	; 0x604 <updateBit+0xe>
     60c:	40 95       	com	r20
     60e:	50 95       	com	r21
     610:	24 23       	and	r18, r20
     612:	49 2f       	mov	r20, r25
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	02 c0       	rjmp	.+4      	; 0x61c <updateBit+0x26>
     618:	44 0f       	add	r20, r20
     61a:	55 1f       	adc	r21, r21
     61c:	6a 95       	dec	r22
     61e:	e2 f7       	brpl	.-8      	; 0x618 <updateBit+0x22>
     620:	42 2b       	or	r20, r18
     622:	40 83       	st	Z, r20
     624:	08 95       	ret

00000626 <setBit>:
     626:	fc 01       	movw	r30, r24
     628:	40 81       	ld	r20, Z
     62a:	21 e0       	ldi	r18, 0x01	; 1
     62c:	30 e0       	ldi	r19, 0x00	; 0
     62e:	02 c0       	rjmp	.+4      	; 0x634 <setBit+0xe>
     630:	22 0f       	add	r18, r18
     632:	33 1f       	adc	r19, r19
     634:	6a 95       	dec	r22
     636:	e2 f7       	brpl	.-8      	; 0x630 <setBit+0xa>
     638:	24 2b       	or	r18, r20
     63a:	20 83       	st	Z, r18
     63c:	08 95       	ret

0000063e <clearBit>:
     63e:	fc 01       	movw	r30, r24
     640:	90 81       	ld	r25, Z
     642:	21 e0       	ldi	r18, 0x01	; 1
     644:	30 e0       	ldi	r19, 0x00	; 0
     646:	02 c0       	rjmp	.+4      	; 0x64c <clearBit+0xe>
     648:	22 0f       	add	r18, r18
     64a:	33 1f       	adc	r19, r19
     64c:	6a 95       	dec	r22
     64e:	e2 f7       	brpl	.-8      	; 0x648 <clearBit+0xa>
     650:	20 95       	com	r18
     652:	29 23       	and	r18, r25
     654:	20 83       	st	Z, r18
     656:	08 95       	ret

00000658 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	02 c0       	rjmp	.+4      	; 0x660 <checkBit+0x8>
     65c:	95 95       	asr	r25
     65e:	87 95       	ror	r24
     660:	6a 95       	dec	r22
     662:	e2 f7       	brpl	.-8      	; 0x65c <checkBit+0x4>
}
     664:	81 70       	andi	r24, 0x01	; 1
     666:	08 95       	ret

00000668 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     668:	cf 92       	push	r12
     66a:	df 92       	push	r13
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	69 01       	movw	r12, r18
     672:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	2c 19       	sub	r18, r12
     67a:	3d 09       	sbc	r19, r13
     67c:	4e 09       	sbc	r20, r14
     67e:	5f 09       	sbc	r21, r15
     680:	a8 ee       	ldi	r26, 0xE8	; 232
     682:	b3 e0       	ldi	r27, 0x03	; 3
     684:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
     688:	a7 01       	movw	r20, r14
     68a:	96 01       	movw	r18, r12
     68c:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
     690:	c9 01       	movw	r24, r18
     692:	99 23       	and	r25, r25
     694:	24 f4       	brge	.+8      	; 0x69e <calculateError+0x36>
     696:	88 27       	eor	r24, r24
     698:	99 27       	eor	r25, r25
     69a:	82 1b       	sub	r24, r18
     69c:	93 0b       	sbc	r25, r19
}
     69e:	ff 90       	pop	r15
     6a0:	ef 90       	pop	r14
     6a2:	df 90       	pop	r13
     6a4:	cf 90       	pop	r12
     6a6:	08 95       	ret

000006a8 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     6a8:	1f 92       	push	r1
     6aa:	0f 92       	push	r0
     6ac:	0f b6       	in	r0, 0x3f	; 63
     6ae:	0f 92       	push	r0
     6b0:	11 24       	eor	r1, r1
     6b2:	0b b6       	in	r0, 0x3b	; 59
     6b4:	0f 92       	push	r0
     6b6:	8f 93       	push	r24
     6b8:	9f 93       	push	r25
     6ba:	ef 93       	push	r30
     6bc:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     6be:	e0 91 24 08 	lds	r30, 0x0824	; 0x800824 <u8_RLastReceivedIndex>
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	8e b5       	in	r24, 0x2e	; 46
     6c6:	eb 5d       	subi	r30, 0xDB	; 219
     6c8:	f7 4f       	sbci	r31, 0xF7	; 247
     6ca:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     6cc:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <u8_RLastReceivedIndex>
     6d0:	89 30       	cpi	r24, 0x09	; 9
     6d2:	30 f4       	brcc	.+12     	; 0x6e0 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     6d4:	80 91 24 08 	lds	r24, 0x0824	; 0x800824 <u8_RLastReceivedIndex>
     6d8:	8f 5f       	subi	r24, 0xFF	; 255
     6da:	80 93 24 08 	sts	0x0824, r24	; 0x800824 <u8_RLastReceivedIndex>
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     6e0:	10 92 24 08 	sts	0x0824, r1	; 0x800824 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	80 93 23 08 	sts	0x0823, r24	; 0x800823 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     6ea:	90 91 21 08 	lds	r25, 0x0821	; 0x800821 <u8_TLastTransmittedIndex>
     6ee:	80 91 3a 08 	lds	r24, 0x083A	; 0x80083a <u8_TLastRequestedIndex>
     6f2:	98 17       	cp	r25, r24
     6f4:	a1 f0       	breq	.+40     	; 0x71e <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     6f6:	e0 91 21 08 	lds	r30, 0x0821	; 0x800821 <u8_TLastTransmittedIndex>
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	e1 5d       	subi	r30, 0xD1	; 209
     6fe:	f7 4f       	sbci	r31, 0xF7	; 247
     700:	80 81       	ld	r24, Z
     702:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     704:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <u8_TLastTransmittedIndex>
     708:	89 30       	cpi	r24, 0x09	; 9
     70a:	30 f4       	brcc	.+12     	; 0x718 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     70c:	80 91 21 08 	lds	r24, 0x0821	; 0x800821 <u8_TLastTransmittedIndex>
     710:	8f 5f       	subi	r24, 0xFF	; 255
     712:	80 93 21 08 	sts	0x0821, r24	; 0x800821 <u8_TLastTransmittedIndex>
     716:	06 c0       	rjmp	.+12     	; 0x724 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     718:	10 92 21 08 	sts	0x0821, r1	; 0x800821 <u8_TLastTransmittedIndex>
     71c:	03 c0       	rjmp	.+6      	; 0x724 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 39 08 	sts	0x0839, r24	; 0x800839 <b_TAvailable>
	}
}
     724:	ff 91       	pop	r31
     726:	ef 91       	pop	r30
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	0f 90       	pop	r0
     72e:	0b be       	out	0x3b, r0	; 59
     730:	0f 90       	pop	r0
     732:	0f be       	out	0x3f, r0	; 63
     734:	0f 90       	pop	r0
     736:	1f 90       	pop	r1
     738:	18 95       	reti

0000073a <__vector_15>:
}
#endif

#ifdef TIMER1_INTERRUPT_MODE
ISR(TIMER1_OVF_vect)
{
     73a:	1f 92       	push	r1
     73c:	0f 92       	push	r0
     73e:	0f b6       	in	r0, 0x3f	; 63
     740:	0f 92       	push	r0
     742:	11 24       	eor	r1, r1
     744:	0b b6       	in	r0, 0x3b	; 59
     746:	0f 92       	push	r0
     748:	2f 93       	push	r18
     74a:	3f 93       	push	r19
     74c:	4f 93       	push	r20
     74e:	5f 93       	push	r21
     750:	6f 93       	push	r22
     752:	7f 93       	push	r23
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	af 93       	push	r26
     75a:	bf 93       	push	r27
     75c:	ef 93       	push	r30
     75e:	ff 93       	push	r31
	p_timer1Callbacks[OVERFLOW]();
     760:	e0 91 3b 08 	lds	r30, 0x083B	; 0x80083b <p_timer1Callbacks>
     764:	f0 91 3c 08 	lds	r31, 0x083C	; 0x80083c <p_timer1Callbacks+0x1>
     768:	09 95       	icall
}
     76a:	ff 91       	pop	r31
     76c:	ef 91       	pop	r30
     76e:	bf 91       	pop	r27
     770:	af 91       	pop	r26
     772:	9f 91       	pop	r25
     774:	8f 91       	pop	r24
     776:	7f 91       	pop	r23
     778:	6f 91       	pop	r22
     77a:	5f 91       	pop	r21
     77c:	4f 91       	pop	r20
     77e:	3f 91       	pop	r19
     780:	2f 91       	pop	r18
     782:	0f 90       	pop	r0
     784:	0b be       	out	0x3b, r0	; 59
     786:	0f 90       	pop	r0
     788:	0f be       	out	0x3f, r0	; 63
     78a:	0f 90       	pop	r0
     78c:	1f 90       	pop	r1
     78e:	18 95       	reti

00000790 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
     790:	1f 92       	push	r1
     792:	0f 92       	push	r0
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	0f 92       	push	r0
     798:	11 24       	eor	r1, r1
     79a:	0b b6       	in	r0, 0x3b	; 59
     79c:	0f 92       	push	r0
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	2f 93       	push	r18
     7a4:	3f 93       	push	r19
     7a6:	4f 93       	push	r20
     7a8:	5f 93       	push	r21
     7aa:	6f 93       	push	r22
     7ac:	7f 93       	push	r23
     7ae:	8f 93       	push	r24
     7b0:	9f 93       	push	r25
     7b2:	af 93       	push	r26
     7b4:	bf 93       	push	r27
     7b6:	cf 93       	push	r28
     7b8:	df 93       	push	r29
     7ba:	ef 93       	push	r30
     7bc:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     7be:	c1 e8       	ldi	r28, 0x81	; 129
     7c0:	d0 e0       	ldi	r29, 0x00	; 0
     7c2:	88 81       	ld	r24, Y
     7c4:	64 e0       	ldi	r22, 0x04	; 4
     7c6:	48 df       	rcall	.-368    	; 0x658 <checkBit>
     7c8:	18 2f       	mov	r17, r24
     7ca:	88 81       	ld	r24, Y
     7cc:	63 e0       	ldi	r22, 0x03	; 3
     7ce:	44 df       	rcall	.-376    	; 0x658 <checkBit>
     7d0:	c1 2f       	mov	r28, r17
     7d2:	cc 0f       	add	r28, r28
     7d4:	cc 0f       	add	r28, r28
     7d6:	cc 0f       	add	r28, r28
     7d8:	24 e0       	ldi	r18, 0x04	; 4
     7da:	82 9f       	mul	r24, r18
     7dc:	c0 01       	movw	r24, r0
     7de:	11 24       	eor	r1, r1
     7e0:	c8 2b       	or	r28, r24
     7e2:	00 e8       	ldi	r16, 0x80	; 128
     7e4:	10 e0       	ldi	r17, 0x00	; 0
     7e6:	f8 01       	movw	r30, r16
     7e8:	80 81       	ld	r24, Z
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	35 df       	rcall	.-406    	; 0x658 <checkBit>
     7ee:	d8 2f       	mov	r29, r24
     7f0:	f8 01       	movw	r30, r16
     7f2:	80 81       	ld	r24, Z
     7f4:	60 e0       	ldi	r22, 0x00	; 0
     7f6:	30 df       	rcall	.-416    	; 0x658 <checkBit>
     7f8:	dd 0f       	add	r29, r29
     7fa:	8c 2b       	or	r24, r28
     7fc:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
     7fe:	88 30       	cpi	r24, 0x08	; 8
     800:	18 f4       	brcc	.+6      	; 0x808 <__vector_13+0x78>
     802:	84 30       	cpi	r24, 0x04	; 4
     804:	19 f4       	brne	.+6      	; 0x80c <__vector_13+0x7c>
     806:	08 c0       	rjmp	.+16     	; 0x818 <__vector_13+0x88>
     808:	80 fd       	sbrc	r24, 0
     80a:	06 c0       	rjmp	.+12     	; 0x818 <__vector_13+0x88>
		p_timer1Callbacks[COMPARE_MATCH_A]();
     80c:	e0 91 3d 08 	lds	r30, 0x083D	; 0x80083d <p_timer1Callbacks+0x2>
     810:	f0 91 3e 08 	lds	r31, 0x083E	; 0x80083e <p_timer1Callbacks+0x3>
     814:	09 95       	icall
     816:	05 c0       	rjmp	.+10     	; 0x822 <__vector_13+0x92>
	else
		p_timer1Callbacks[OVERFLOW]();
     818:	e0 91 3b 08 	lds	r30, 0x083B	; 0x80083b <p_timer1Callbacks>
     81c:	f0 91 3c 08 	lds	r31, 0x083C	; 0x80083c <p_timer1Callbacks+0x1>
     820:	09 95       	icall
}
     822:	ff 91       	pop	r31
     824:	ef 91       	pop	r30
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	bf 91       	pop	r27
     82c:	af 91       	pop	r26
     82e:	9f 91       	pop	r25
     830:	8f 91       	pop	r24
     832:	7f 91       	pop	r23
     834:	6f 91       	pop	r22
     836:	5f 91       	pop	r21
     838:	4f 91       	pop	r20
     83a:	3f 91       	pop	r19
     83c:	2f 91       	pop	r18
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	0f 90       	pop	r0
     844:	0b be       	out	0x3b, r0	; 59
     846:	0f 90       	pop	r0
     848:	0f be       	out	0x3f, r0	; 63
     84a:	0f 90       	pop	r0
     84c:	1f 90       	pop	r1
     84e:	18 95       	reti

00000850 <__vector_14>:

ISR(TIMER1_COMPB_vect)
{
     850:	1f 92       	push	r1
     852:	0f 92       	push	r0
     854:	0f b6       	in	r0, 0x3f	; 63
     856:	0f 92       	push	r0
     858:	11 24       	eor	r1, r1
     85a:	0b b6       	in	r0, 0x3b	; 59
     85c:	0f 92       	push	r0
     85e:	2f 93       	push	r18
     860:	3f 93       	push	r19
     862:	4f 93       	push	r20
     864:	5f 93       	push	r21
     866:	6f 93       	push	r22
     868:	7f 93       	push	r23
     86a:	8f 93       	push	r24
     86c:	9f 93       	push	r25
     86e:	af 93       	push	r26
     870:	bf 93       	push	r27
     872:	ef 93       	push	r30
     874:	ff 93       	push	r31
	p_timer1Callbacks[COMPARE_MATCH_B]();
     876:	e0 91 3f 08 	lds	r30, 0x083F	; 0x80083f <p_timer1Callbacks+0x4>
     87a:	f0 91 40 08 	lds	r31, 0x0840	; 0x800840 <p_timer1Callbacks+0x5>
     87e:	09 95       	icall
}
     880:	ff 91       	pop	r31
     882:	ef 91       	pop	r30
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0b be       	out	0x3b, r0	; 59
     89c:	0f 90       	pop	r0
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	0f 90       	pop	r0
     8a2:	1f 90       	pop	r1
     8a4:	18 95       	reti

000008a6 <__vector_12>:

ISR(TIMER1_CAPT_vect)
{
     8a6:	1f 92       	push	r1
     8a8:	0f 92       	push	r0
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	0f 92       	push	r0
     8ae:	11 24       	eor	r1, r1
     8b0:	0b b6       	in	r0, 0x3b	; 59
     8b2:	0f 92       	push	r0
     8b4:	0f 93       	push	r16
     8b6:	1f 93       	push	r17
     8b8:	2f 93       	push	r18
     8ba:	3f 93       	push	r19
     8bc:	4f 93       	push	r20
     8be:	5f 93       	push	r21
     8c0:	6f 93       	push	r22
     8c2:	7f 93       	push	r23
     8c4:	8f 93       	push	r24
     8c6:	9f 93       	push	r25
     8c8:	af 93       	push	r26
     8ca:	bf 93       	push	r27
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	ef 93       	push	r30
     8d2:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     8d4:	c1 e8       	ldi	r28, 0x81	; 129
     8d6:	d0 e0       	ldi	r29, 0x00	; 0
     8d8:	88 81       	ld	r24, Y
     8da:	64 e0       	ldi	r22, 0x04	; 4
     8dc:	bd de       	rcall	.-646    	; 0x658 <checkBit>
     8de:	18 2f       	mov	r17, r24
     8e0:	88 81       	ld	r24, Y
     8e2:	63 e0       	ldi	r22, 0x03	; 3
     8e4:	b9 de       	rcall	.-654    	; 0x658 <checkBit>
     8e6:	c1 2f       	mov	r28, r17
     8e8:	cc 0f       	add	r28, r28
     8ea:	cc 0f       	add	r28, r28
     8ec:	cc 0f       	add	r28, r28
     8ee:	24 e0       	ldi	r18, 0x04	; 4
     8f0:	82 9f       	mul	r24, r18
     8f2:	c0 01       	movw	r24, r0
     8f4:	11 24       	eor	r1, r1
     8f6:	c8 2b       	or	r28, r24
     8f8:	00 e8       	ldi	r16, 0x80	; 128
     8fa:	10 e0       	ldi	r17, 0x00	; 0
     8fc:	f8 01       	movw	r30, r16
     8fe:	80 81       	ld	r24, Z
     900:	61 e0       	ldi	r22, 0x01	; 1
     902:	aa de       	rcall	.-684    	; 0x658 <checkBit>
     904:	d8 2f       	mov	r29, r24
     906:	f8 01       	movw	r30, r16
     908:	80 81       	ld	r24, Z
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	a5 de       	rcall	.-694    	; 0x658 <checkBit>
     90e:	dd 0f       	add	r29, r29
     910:	8c 2b       	or	r24, r28
     912:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
     914:	88 30       	cpi	r24, 0x08	; 8
     916:	10 f0       	brcs	.+4      	; 0x91c <__vector_12+0x76>
     918:	80 ff       	sbrs	r24, 0
     91a:	06 c0       	rjmp	.+12     	; 0x928 <__vector_12+0x82>
		p_timer1Callbacks[EXTERNAL]();
     91c:	e0 91 41 08 	lds	r30, 0x0841	; 0x800841 <p_timer1Callbacks+0x6>
     920:	f0 91 42 08 	lds	r31, 0x0842	; 0x800842 <p_timer1Callbacks+0x7>
     924:	09 95       	icall
     926:	05 c0       	rjmp	.+10     	; 0x932 <__vector_12+0x8c>
	else
		p_timer1Callbacks[OVERFLOW]();
     928:	e0 91 3b 08 	lds	r30, 0x083B	; 0x80083b <p_timer1Callbacks>
     92c:	f0 91 3c 08 	lds	r31, 0x083C	; 0x80083c <p_timer1Callbacks+0x1>
     930:	09 95       	icall
}
     932:	ff 91       	pop	r31
     934:	ef 91       	pop	r30
     936:	df 91       	pop	r29
     938:	cf 91       	pop	r28
     93a:	bf 91       	pop	r27
     93c:	af 91       	pop	r26
     93e:	9f 91       	pop	r25
     940:	8f 91       	pop	r24
     942:	7f 91       	pop	r23
     944:	6f 91       	pop	r22
     946:	5f 91       	pop	r21
     948:	4f 91       	pop	r20
     94a:	3f 91       	pop	r19
     94c:	2f 91       	pop	r18
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	0f 90       	pop	r0
     954:	0b be       	out	0x3b, r0	; 59
     956:	0f 90       	pop	r0
     958:	0f be       	out	0x3f, r0	; 63
     95a:	0f 90       	pop	r0
     95c:	1f 90       	pop	r1
     95e:	18 95       	reti

00000960 <__vector_11>:
#endif

#ifdef TIMER2_INTERRUPT_MODE
ISR(TIMER2_OVF_vect)
{
     960:	1f 92       	push	r1
     962:	0f 92       	push	r0
     964:	0f b6       	in	r0, 0x3f	; 63
     966:	0f 92       	push	r0
     968:	11 24       	eor	r1, r1
     96a:	0b b6       	in	r0, 0x3b	; 59
     96c:	0f 92       	push	r0
     96e:	2f 93       	push	r18
     970:	3f 93       	push	r19
     972:	4f 93       	push	r20
     974:	5f 93       	push	r21
     976:	6f 93       	push	r22
     978:	7f 93       	push	r23
     97a:	8f 93       	push	r24
     97c:	9f 93       	push	r25
     97e:	af 93       	push	r26
     980:	bf 93       	push	r27
     982:	ef 93       	push	r30
     984:	ff 93       	push	r31
	p_timer2Callbacks[OVERFLOW]();
     986:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <p_timer2Callbacks>
     98a:	f0 91 46 08 	lds	r31, 0x0846	; 0x800846 <p_timer2Callbacks+0x1>
     98e:	09 95       	icall
}
     990:	ff 91       	pop	r31
     992:	ef 91       	pop	r30
     994:	bf 91       	pop	r27
     996:	af 91       	pop	r26
     998:	9f 91       	pop	r25
     99a:	8f 91       	pop	r24
     99c:	7f 91       	pop	r23
     99e:	6f 91       	pop	r22
     9a0:	5f 91       	pop	r21
     9a2:	4f 91       	pop	r20
     9a4:	3f 91       	pop	r19
     9a6:	2f 91       	pop	r18
     9a8:	0f 90       	pop	r0
     9aa:	0b be       	out	0x3b, r0	; 59
     9ac:	0f 90       	pop	r0
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	0f 90       	pop	r0
     9b2:	1f 90       	pop	r1
     9b4:	18 95       	reti

000009b6 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     9b6:	1f 92       	push	r1
     9b8:	0f 92       	push	r0
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	0f 92       	push	r0
     9be:	11 24       	eor	r1, r1
     9c0:	0b b6       	in	r0, 0x3b	; 59
     9c2:	0f 92       	push	r0
     9c4:	2f 93       	push	r18
     9c6:	3f 93       	push	r19
     9c8:	4f 93       	push	r20
     9ca:	5f 93       	push	r21
     9cc:	6f 93       	push	r22
     9ce:	7f 93       	push	r23
     9d0:	8f 93       	push	r24
     9d2:	9f 93       	push	r25
     9d4:	af 93       	push	r26
     9d6:	bf 93       	push	r27
     9d8:	ef 93       	push	r30
     9da:	ff 93       	push	r31
	if ((checkBit(TCCR2B, WGM22) == CLEAR) && ((TCCR2A & 0b11) != 0b10))
     9dc:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     9e0:	63 e0       	ldi	r22, 0x03	; 3
     9e2:	3a de       	rcall	.-908    	; 0x658 <checkBit>
     9e4:	81 11       	cpse	r24, r1
     9e6:	0b c0       	rjmp	.+22     	; 0x9fe <__vector_9+0x48>
     9e8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     9ec:	83 70       	andi	r24, 0x03	; 3
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	31 f0       	breq	.+12     	; 0x9fe <__vector_9+0x48>
		p_timer2Callbacks[COMPARE_MATCH_A]();
     9f2:	e0 91 47 08 	lds	r30, 0x0847	; 0x800847 <p_timer2Callbacks+0x2>
     9f6:	f0 91 48 08 	lds	r31, 0x0848	; 0x800848 <p_timer2Callbacks+0x3>
     9fa:	09 95       	icall
     9fc:	05 c0       	rjmp	.+10     	; 0xa08 <__vector_9+0x52>
	else
		p_timer2Callbacks[OVERFLOW]();
     9fe:	e0 91 45 08 	lds	r30, 0x0845	; 0x800845 <p_timer2Callbacks>
     a02:	f0 91 46 08 	lds	r31, 0x0846	; 0x800846 <p_timer2Callbacks+0x1>
     a06:	09 95       	icall
}
     a08:	ff 91       	pop	r31
     a0a:	ef 91       	pop	r30
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	0f 90       	pop	r0
     a22:	0b be       	out	0x3b, r0	; 59
     a24:	0f 90       	pop	r0
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	0f 90       	pop	r0
     a2a:	1f 90       	pop	r1
     a2c:	18 95       	reti

00000a2e <__vector_10>:

ISR(TIMER2_COMPB_vect)
{
     a2e:	1f 92       	push	r1
     a30:	0f 92       	push	r0
     a32:	0f b6       	in	r0, 0x3f	; 63
     a34:	0f 92       	push	r0
     a36:	11 24       	eor	r1, r1
     a38:	0b b6       	in	r0, 0x3b	; 59
     a3a:	0f 92       	push	r0
     a3c:	2f 93       	push	r18
     a3e:	3f 93       	push	r19
     a40:	4f 93       	push	r20
     a42:	5f 93       	push	r21
     a44:	6f 93       	push	r22
     a46:	7f 93       	push	r23
     a48:	8f 93       	push	r24
     a4a:	9f 93       	push	r25
     a4c:	af 93       	push	r26
     a4e:	bf 93       	push	r27
     a50:	ef 93       	push	r30
     a52:	ff 93       	push	r31
	p_timer2Callbacks[COMPARE_MATCH_B]();
     a54:	e0 91 49 08 	lds	r30, 0x0849	; 0x800849 <p_timer2Callbacks+0x4>
     a58:	f0 91 4a 08 	lds	r31, 0x084A	; 0x80084a <p_timer2Callbacks+0x5>
     a5c:	09 95       	icall
}
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	0f 90       	pop	r0
     a78:	0b be       	out	0x3b, r0	; 59
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
     a84:	4f 92       	push	r4
     a86:	5f 92       	push	r5
     a88:	6f 92       	push	r6
     a8a:	7f 92       	push	r7
     a8c:	8f 92       	push	r8
     a8e:	9f 92       	push	r9
     a90:	af 92       	push	r10
     a92:	bf 92       	push	r11
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	4b 01       	movw	r8, r22
     aa2:	5c 01       	movw	r10, r24
     aa4:	ea 01       	movw	r28, r20
     aa6:	0f 2e       	mov	r0, r31
     aa8:	f0 e2       	ldi	r31, 0x20	; 32
     aaa:	4f 2e       	mov	r4, r31
     aac:	f1 ea       	ldi	r31, 0xA1	; 161
     aae:	5f 2e       	mov	r5, r31
     ab0:	f7 e0       	ldi	r31, 0x07	; 7
     ab2:	6f 2e       	mov	r6, r31
     ab4:	71 2c       	mov	r7, r1
     ab6:	f0 2d       	mov	r31, r0
     ab8:	c3 01       	movw	r24, r6
     aba:	b2 01       	movw	r22, r4
     abc:	a5 01       	movw	r20, r10
     abe:	94 01       	movw	r18, r8
     ac0:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
     ac4:	69 01       	movw	r12, r18
     ac6:	7a 01       	movw	r14, r20
     ac8:	c3 01       	movw	r24, r6
     aca:	b2 01       	movw	r22, r4
     acc:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
     ad0:	ca 01       	movw	r24, r20
     ad2:	b9 01       	movw	r22, r18
     ad4:	a5 01       	movw	r20, r10
     ad6:	94 01       	movw	r18, r8
     ad8:	c7 dd       	rcall	.-1138   	; 0x668 <calculateError>
     ada:	44 97       	sbiw	r24, 0x14	; 20
     adc:	30 f4       	brcc	.+12     	; 0xaea <calculateUBRR+0x66>
     ade:	d7 01       	movw	r26, r14
     ae0:	c6 01       	movw	r24, r12
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	a1 09       	sbc	r26, r1
     ae6:	b1 09       	sbc	r27, r1
     ae8:	0f c0       	rjmp	.+30     	; 0xb08 <calculateUBRR+0x84>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	88 83       	st	Y, r24
     aee:	60 e4       	ldi	r22, 0x40	; 64
     af0:	72 e4       	ldi	r23, 0x42	; 66
     af2:	8f e0       	ldi	r24, 0x0F	; 15
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a5 01       	movw	r20, r10
     af8:	94 01       	movw	r18, r8
     afa:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
     afe:	da 01       	movw	r26, r20
     b00:	c9 01       	movw	r24, r18
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	a1 09       	sbc	r26, r1
     b06:	b1 09       	sbc	r27, r1
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	7f 90       	pop	r7
     b1e:	6f 90       	pop	r6
     b20:	5f 90       	pop	r5
     b22:	4f 90       	pop	r4
     b24:	08 95       	ret

00000b26 <uart_init>:
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	2b 97       	sbiw	r28, 0x0b	; 11
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	0a 83       	std	Y+2, r16	; 0x02
     b40:	1b 83       	std	Y+3, r17	; 0x03
     b42:	2c 83       	std	Y+4, r18	; 0x04
     b44:	3d 83       	std	Y+5, r19	; 0x05
     b46:	4e 83       	std	Y+6, r20	; 0x06
     b48:	5f 83       	std	Y+7, r21	; 0x07
     b4a:	68 87       	std	Y+8, r22	; 0x08
     b4c:	79 87       	std	Y+9, r23	; 0x09
     b4e:	8a 87       	std	Y+10, r24	; 0x0a
     b50:	9b 87       	std	Y+11, r25	; 0x0b
     b52:	19 82       	std	Y+1, r1	; 0x01
     b54:	01 11       	cpse	r16, r1
     b56:	7c c0       	rjmp	.+248    	; 0xc50 <uart_init+0x12a>
     b58:	19 2f       	mov	r17, r25
     b5a:	e2 ec       	ldi	r30, 0xC2	; 194
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8f 73       	andi	r24, 0x3F	; 63
     b62:	80 83       	st	Z, r24
     b64:	6b 81       	ldd	r22, Y+3	; 0x03
     b66:	7c 81       	ldd	r23, Y+4	; 0x04
     b68:	8d 81       	ldd	r24, Y+5	; 0x05
     b6a:	9e 81       	ldd	r25, Y+6	; 0x06
     b6c:	ae 01       	movw	r20, r28
     b6e:	4f 5f       	subi	r20, 0xFF	; 255
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
     b72:	88 df       	rcall	.-240    	; 0xa84 <calculateUBRR>
     b74:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     b78:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     b7c:	49 81       	ldd	r20, Y+1	; 0x01
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	80 ec       	ldi	r24, 0xC0	; 192
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	38 dd       	rcall	.-1424   	; 0x5f6 <updateBit>
     b86:	89 85       	ldd	r24, Y+9	; 0x09
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	31 f1       	breq	.+76     	; 0xbd8 <uart_init+0xb2>
     b8c:	28 f4       	brcc	.+10     	; 0xb98 <uart_init+0x72>
     b8e:	88 23       	and	r24, r24
     b90:	49 f0       	breq	.+18     	; 0xba4 <uart_init+0x7e>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	a1 f0       	breq	.+40     	; 0xbbe <uart_init+0x98>
     b96:	46 c0       	rjmp	.+140    	; 0xc24 <uart_init+0xfe>
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	59 f1       	breq	.+86     	; 0xbf2 <uart_init+0xcc>
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	09 f4       	brne	.+2      	; 0xba2 <uart_init+0x7c>
     ba0:	35 c0       	rjmp	.+106    	; 0xc0c <uart_init+0xe6>
     ba2:	40 c0       	rjmp	.+128    	; 0xc24 <uart_init+0xfe>
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	82 ec       	ldi	r24, 0xC2	; 194
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	49 dd       	rcall	.-1390   	; 0x63e <clearBit>
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	82 ec       	ldi	r24, 0xC2	; 194
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	45 dd       	rcall	.-1398   	; 0x63e <clearBit>
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	81 ec       	ldi	r24, 0xC1	; 193
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	41 dd       	rcall	.-1406   	; 0x63e <clearBit>
     bbc:	33 c0       	rjmp	.+102    	; 0xc24 <uart_init+0xfe>
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	82 ec       	ldi	r24, 0xC2	; 194
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	30 dd       	rcall	.-1440   	; 0x626 <setBit>
     bc6:	62 e0       	ldi	r22, 0x02	; 2
     bc8:	82 ec       	ldi	r24, 0xC2	; 194
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	38 dd       	rcall	.-1424   	; 0x63e <clearBit>
     bce:	62 e0       	ldi	r22, 0x02	; 2
     bd0:	81 ec       	ldi	r24, 0xC1	; 193
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	34 dd       	rcall	.-1432   	; 0x63e <clearBit>
     bd6:	26 c0       	rjmp	.+76     	; 0xc24 <uart_init+0xfe>
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	82 ec       	ldi	r24, 0xC2	; 194
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	2f dd       	rcall	.-1442   	; 0x63e <clearBit>
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	82 ec       	ldi	r24, 0xC2	; 194
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	1f dd       	rcall	.-1474   	; 0x626 <setBit>
     be8:	62 e0       	ldi	r22, 0x02	; 2
     bea:	81 ec       	ldi	r24, 0xC1	; 193
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	27 dd       	rcall	.-1458   	; 0x63e <clearBit>
     bf0:	19 c0       	rjmp	.+50     	; 0xc24 <uart_init+0xfe>
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	82 ec       	ldi	r24, 0xC2	; 194
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	16 dd       	rcall	.-1492   	; 0x626 <setBit>
     bfa:	62 e0       	ldi	r22, 0x02	; 2
     bfc:	82 ec       	ldi	r24, 0xC2	; 194
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	12 dd       	rcall	.-1500   	; 0x626 <setBit>
     c02:	62 e0       	ldi	r22, 0x02	; 2
     c04:	81 ec       	ldi	r24, 0xC1	; 193
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	1a dd       	rcall	.-1484   	; 0x63e <clearBit>
     c0a:	0c c0       	rjmp	.+24     	; 0xc24 <uart_init+0xfe>
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	82 ec       	ldi	r24, 0xC2	; 194
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	09 dd       	rcall	.-1518   	; 0x626 <setBit>
     c14:	62 e0       	ldi	r22, 0x02	; 2
     c16:	82 ec       	ldi	r24, 0xC2	; 194
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	05 dd       	rcall	.-1526   	; 0x626 <setBit>
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	81 ec       	ldi	r24, 0xC1	; 193
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	01 dd       	rcall	.-1534   	; 0x626 <setBit>
     c24:	4a 85       	ldd	r20, Y+10	; 0x0a
     c26:	63 e0       	ldi	r22, 0x03	; 3
     c28:	82 ec       	ldi	r24, 0xC2	; 194
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	e4 dc       	rcall	.-1592   	; 0x5f6 <updateBit>
     c2e:	12 30       	cpi	r17, 0x02	; 2
     c30:	31 f4       	brne	.+12     	; 0xc3e <uart_init+0x118>
     c32:	e2 ec       	ldi	r30, 0xC2	; 194
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8f 7c       	andi	r24, 0xCF	; 207
     c3a:	80 83       	st	Z, r24
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <uart_init+0x12a>
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	82 ec       	ldi	r24, 0xC2	; 194
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	f0 dc       	rcall	.-1568   	; 0x626 <setBit>
     c46:	41 2f       	mov	r20, r17
     c48:	64 e0       	ldi	r22, 0x04	; 4
     c4a:	82 ec       	ldi	r24, 0xC2	; 194
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	d3 dc       	rcall	.-1626   	; 0x5f6 <updateBit>
     c50:	2b 96       	adiw	r28, 0x0b	; 11
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <uart_start>:
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	2a 97       	sbiw	r28, 0x0a	; 10
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	6f 83       	std	Y+7, r22	; 0x07
     c80:	01 11       	cpse	r16, r1
     c82:	0a c0       	rjmp	.+20     	; 0xc98 <uart_start+0x32>
     c84:	45 2f       	mov	r20, r21
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	81 ec       	ldi	r24, 0xC1	; 193
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	b4 dc       	rcall	.-1688   	; 0x5f6 <updateBit>
     c8e:	4f 81       	ldd	r20, Y+7	; 0x07
     c90:	63 e0       	ldi	r22, 0x03	; 3
     c92:	81 ec       	ldi	r24, 0xC1	; 193
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	af dc       	rcall	.-1698   	; 0x5f6 <updateBit>
     c98:	2a 96       	adiw	r28, 0x0a	; 10
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
     cbe:	2a 97       	sbiw	r28, 0x0a	; 10
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	f8 94       	cli
     cc4:	de bf       	out	0x3e, r29	; 62
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	cd bf       	out	0x3d, r28	; 61
     cca:	09 83       	std	Y+1, r16	; 0x01
     ccc:	1a 83       	std	Y+2, r17	; 0x02
     cce:	2b 83       	std	Y+3, r18	; 0x03
     cd0:	3c 83       	std	Y+4, r19	; 0x04
     cd2:	4d 83       	std	Y+5, r20	; 0x05
     cd4:	5e 83       	std	Y+6, r21	; 0x06
     cd6:	6f 83       	std	Y+7, r22	; 0x07
     cd8:	78 87       	std	Y+8, r23	; 0x08
     cda:	89 87       	std	Y+9, r24	; 0x09
     cdc:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
     cde:	01 11       	cpse	r16, r1
     ce0:	13 c0       	rjmp	.+38     	; 0xd08 <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
     ce2:	00 ec       	ldi	r16, 0xC0	; 192
     ce4:	10 e0       	ldi	r17, 0x00	; 0
     ce6:	f8 01       	movw	r30, r16
     ce8:	80 81       	ld	r24, Z
     cea:	65 e0       	ldi	r22, 0x05	; 5
     cec:	b5 dc       	rcall	.-1686   	; 0x658 <checkBit>
     cee:	88 23       	and	r24, r24
     cf0:	d1 f3       	breq	.-12     	; 0xce6 <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
     cf2:	88 85       	ldd	r24, Y+8	; 0x08
     cf4:	84 30       	cpi	r24, 0x04	; 4
     cf6:	31 f4       	brne	.+12     	; 0xd04 <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
     cf8:	4f 2d       	mov	r20, r15
     cfa:	41 70       	andi	r20, 0x01	; 1
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	81 ec       	ldi	r24, 0xC1	; 193
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	79 dc       	rcall	.-1806   	; 0x5f6 <updateBit>
			UDR0 = (u8) u16_data;
     d04:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
     d08:	2a 96       	adiw	r28, 0x0a	; 10
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	ff 90       	pop	r15
     d1e:	ef 90       	pop	r14
     d20:	08 95       	ret

00000d22 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
     d22:	1f 92       	push	r1
     d24:	0f 92       	push	r0
     d26:	0f b6       	in	r0, 0x3f	; 63
     d28:	0f 92       	push	r0
     d2a:	11 24       	eor	r1, r1
     d2c:	0b b6       	in	r0, 0x3b	; 59
     d2e:	0f 92       	push	r0
     d30:	2f 93       	push	r18
     d32:	3f 93       	push	r19
     d34:	4f 93       	push	r20
     d36:	5f 93       	push	r21
     d38:	6f 93       	push	r22
     d3a:	7f 93       	push	r23
     d3c:	8f 93       	push	r24
     d3e:	9f 93       	push	r25
     d40:	af 93       	push	r26
     d42:	bf 93       	push	r27
     d44:	ef 93       	push	r30
     d46:	ff 93       	push	r31
	p_wdgCallback();
     d48:	e0 91 4b 08 	lds	r30, 0x084B	; 0x80084b <p_wdgCallback>
     d4c:	f0 91 4c 08 	lds	r31, 0x084C	; 0x80084c <p_wdgCallback+0x1>
     d50:	09 95       	icall
}
     d52:	ff 91       	pop	r31
     d54:	ef 91       	pop	r30
     d56:	bf 91       	pop	r27
     d58:	af 91       	pop	r26
     d5a:	9f 91       	pop	r25
     d5c:	8f 91       	pop	r24
     d5e:	7f 91       	pop	r23
     d60:	6f 91       	pop	r22
     d62:	5f 91       	pop	r21
     d64:	4f 91       	pop	r20
     d66:	3f 91       	pop	r19
     d68:	2f 91       	pop	r18
     d6a:	0f 90       	pop	r0
     d6c:	0b be       	out	0x3b, r0	; 59
     d6e:	0f 90       	pop	r0
     d70:	0f be       	out	0x3f, r0	; 63
     d72:	0f 90       	pop	r0
     d74:	1f 90       	pop	r1
     d76:	18 95       	reti

00000d78 <vl53l0x_setAddress>:
  } else {
      return FALSE;
  }
}

bool vl53l0x_setAddress(uint8_t newAddr) {
     d78:	cf 93       	push	r28
  newAddr &= 0x7F;
     d7a:	c8 2f       	mov	r28, r24
     d7c:	cf 77       	andi	r28, 0x7F	; 127

  Status = VL53L0X_SetDeviceAddress(pMyDevice, newAddr * 2); // 7->8 bit
     d7e:	6c 2f       	mov	r22, r28
     d80:	66 0f       	add	r22, r22
     d82:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d86:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d8a:	f5 d0       	rcall	.+490    	; 0xf76 <VL53L0X_SetDeviceAddress>
     d8c:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE ) {
     d90:	81 11       	cpse	r24, r1
     d92:	09 c0       	rjmp	.+18     	; 0xda6 <vl53l0x_setAddress+0x2e>
    pMyDevice->I2cDevAddr = newAddr;  // 7 bit addr
     d94:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     d98:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     d9c:	ef 5b       	subi	r30, 0xBF	; 191
     d9e:	fe 4f       	sbci	r31, 0xFE	; 254
     da0:	c0 83       	st	Z, r28
    return TRUE;
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <vl53l0x_setAddress+0x30>
  }
  return FALSE;
     da6:	80 e0       	ldi	r24, 0x00	; 0
}
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <vl53l0x_begin>:
VL53L0X_Dev_t                       *pMyDevice  = &MyDevice;
VL53L0X_Version_t                   Version;
VL53L0X_Version_t                   *pVersion   = &Version;
VL53L0X_DeviceInfo_t                DeviceInfo;

bool vl53l0x_begin(uint8_t i2c_addr) {
     dac:	df 92       	push	r13
     dae:	ef 92       	push	r14
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	cd b7       	in	r28, 0x3d	; 61
     dbc:	de b7       	in	r29, 0x3e	; 62
     dbe:	27 97       	sbiw	r28, 0x07	; 7
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	f8 94       	cli
     dc4:	de bf       	out	0x3e, r29	; 62
     dc6:	0f be       	out	0x3f, r0	; 63
     dc8:	cd bf       	out	0x3d, r28	; 61
     dca:	d8 2e       	mov	r13, r24
  uint8_t   isApertureSpads;
  uint8_t   VhvSettings;
  uint8_t   PhaseCal;

  // Initialize Comms
  pMyDevice->I2cDevAddr      =  VL53L0X_I2C_ADDR;  // default
     dcc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dd0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     dd4:	fc 01       	movw	r30, r24
     dd6:	ef 5b       	subi	r30, 0xBF	; 191
     dd8:	fe 4f       	sbci	r31, 0xFE	; 254
     dda:	29 e2       	ldi	r18, 0x29	; 41
     ddc:	20 83       	st	Z, r18
  pMyDevice->comms_type      =  1;
     dde:	31 96       	adiw	r30, 0x01	; 1
     de0:	21 e0       	ldi	r18, 0x01	; 1
     de2:	20 83       	st	Z, r18
  pMyDevice->comms_speed_khz =  400;
     de4:	31 96       	adiw	r30, 0x01	; 1
     de6:	20 e9       	ldi	r18, 0x90	; 144
     de8:	31 e0       	ldi	r19, 0x01	; 1
     dea:	31 83       	std	Z+1, r19	; 0x01
     dec:	20 83       	st	Z, r18
  
  uart_transmit(s_debugUart, 'a');
     dee:	0f 2e       	mov	r0, r31
     df0:	f1 e6       	ldi	r31, 0x61	; 97
     df2:	ef 2e       	mov	r14, r31
     df4:	f1 2c       	mov	r15, r1
     df6:	f0 2d       	mov	r31, r0
     df8:	00 91 eb 07 	lds	r16, 0x07EB	; 0x8007eb <s_debugUart>
     dfc:	10 91 ec 07 	lds	r17, 0x07EC	; 0x8007ec <s_debugUart+0x1>
     e00:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
     e04:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     e08:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     e0c:	50 91 f0 07 	lds	r21, 0x07F0	; 0x8007f0 <s_debugUart+0x5>
     e10:	60 91 f1 07 	lds	r22, 0x07F1	; 0x8007f1 <s_debugUart+0x6>
     e14:	70 91 f2 07 	lds	r23, 0x07F2	; 0x8007f2 <s_debugUart+0x7>
     e18:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <s_debugUart+0x8>
     e1c:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <s_debugUart+0x9>
     e20:	46 df       	rcall	.-372    	; 0xcae <uart_transmit>
  VL53L0X_i2c_init();
     e22:	0e 94 84 2a 	call	0x5508	; 0x5508 <VL53L0X_i2c_init>

  Status = VL53L0X_DataInit( &MyDevice );         // Data initialization
     e26:	8d e4       	ldi	r24, 0x4D	; 77
     e28:	98 e0       	ldi	r25, 0x08	; 8
     e2a:	da d4       	rcall	.+2484   	; 0x17e0 <VL53L0X_DataInit>
     e2c:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if (! vl53l0x_setAddress(i2c_addr) ) {
     e30:	8d 2d       	mov	r24, r13
     e32:	a2 df       	rcall	.-188    	; 0xd78 <vl53l0x_setAddress>
     e34:	88 23       	and	r24, r24
     e36:	09 f4       	brne	.+2      	; 0xe3a <vl53l0x_begin+0x8e>
     e38:	85 c0       	rjmp	.+266    	; 0xf44 <vl53l0x_begin+0x198>
    return FALSE;
  }

  Status = VL53L0X_GetDeviceInfo( &MyDevice, &DeviceInfo );
     e3a:	62 e9       	ldi	r22, 0x92	; 146
     e3c:	79 e0       	ldi	r23, 0x09	; 9
     e3e:	8d e4       	ldi	r24, 0x4D	; 77
     e40:	98 e0       	ldi	r25, 0x08	; 8
     e42:	96 d0       	rcall	.+300    	; 0xf70 <VL53L0X_GetDeviceInfo>
     e44:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE )  {
     e48:	81 11       	cpse	r24, r1
     e4a:	08 c0       	rjmp	.+16     	; 0xe5c <vl53l0x_begin+0xb0>
      if( ( DeviceInfo.ProductRevisionMinor != 1 ) && ( DeviceInfo.ProductRevisionMinor != 1 ) ) {
     e4c:	80 91 f4 09 	lds	r24, 0x09F4	; 0x8009f4 <DeviceInfo+0x62>
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	09 f4       	brne	.+2      	; 0xe56 <vl53l0x_begin+0xaa>
     e54:	6e c0       	rjmp	.+220    	; 0xf32 <vl53l0x_begin+0x186>
          Status = VL53L0X_ERROR_NOT_SUPPORTED;
     e56:	8b ef       	ldi	r24, 0xFB	; 251
     e58:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE ) {
      Status = VL53L0X_StaticInit( pMyDevice ); // Device Initialization
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     e5c:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     e60:	81 11       	cpse	r24, r1
     e62:	33 c0       	rjmp	.+102    	; 0xeca <vl53l0x_begin+0x11e>
      Status = VL53L0X_PerformRefSpadManagement( pMyDevice, &refSpadCount, &isApertureSpads ); // Device Initialization
     e64:	ae 01       	movw	r20, r28
     e66:	4b 5f       	subi	r20, 0xFB	; 251
     e68:	5f 4f       	sbci	r21, 0xFF	; 255
     e6a:	be 01       	movw	r22, r28
     e6c:	6f 5f       	subi	r22, 0xFF	; 255
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e74:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e78:	0e 94 53 12 	call	0x24a6	; 0x24a6 <VL53L0X_PerformRefSpadManagement>
     e7c:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     e80:	81 11       	cpse	r24, r1
     e82:	31 c0       	rjmp	.+98     	; 0xee6 <vl53l0x_begin+0x13a>
      Status = VL53L0X_PerformRefCalibration( pMyDevice, &VhvSettings, &PhaseCal );           // Device Initialization
     e84:	ae 01       	movw	r20, r28
     e86:	49 5f       	subi	r20, 0xF9	; 249
     e88:	5f 4f       	sbci	r21, 0xFF	; 255
     e8a:	be 01       	movw	r22, r28
     e8c:	6a 5f       	subi	r22, 0xFA	; 250
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e94:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e98:	cb d5       	rcall	.+2966   	; 0x1a30 <VL53L0X_PerformRefCalibration>
     e9a:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     e9e:	81 11       	cpse	r24, r1
      // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
      Status = VL53L0X_SetDeviceMode( pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING );        // Setup in single ranging mode
     ea0:	30 c0       	rjmp	.+96     	; 0xf02 <vl53l0x_begin+0x156>
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ea8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     eac:	6a d0       	rcall	.+212    	; 0xf82 <VL53L0X_SetDeviceMode>
     eae:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  // Enable/Disable Sigma and Signal check
  if( Status == VL53L0X_ERROR_NONE ) {
     eb2:	81 11       	cpse	r24, r1
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1 );
     eb4:	37 c0       	rjmp	.+110    	; 0xf24 <vl53l0x_begin+0x178>
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ec0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ec4:	72 d2       	rcall	.+1252   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
     ec6:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     eca:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1 );
     ece:	81 11       	cpse	r24, r1
     ed0:	29 c0       	rjmp	.+82     	; 0xf24 <vl53l0x_begin+0x178>
     ed2:	41 e0       	ldi	r20, 0x01	; 1
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     edc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     ee0:	64 d2       	rcall	.+1224   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     ee2:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
     ee6:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1 );
     eea:	81 11       	cpse	r24, r1
     eec:	1b c0       	rjmp	.+54     	; 0xf24 <vl53l0x_begin+0x178>
     eee:	41 e0       	ldi	r20, 0x01	; 1
     ef0:	63 e0       	ldi	r22, 0x03	; 3
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ef8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     efc:	56 d2       	rcall	.+1196   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     efe:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
     f02:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
      Status = VL53L0X_SetLimitCheckValue( pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)( 1.5 * 0.023 * 65536 ) );
     f06:	81 11       	cpse	r24, r1
     f08:	0d c0       	rjmp	.+26     	; 0xf24 <vl53l0x_begin+0x178>
     f0a:	24 ed       	ldi	r18, 0xD4	; 212
     f0c:	38 e0       	ldi	r19, 0x08	; 8
     f0e:	40 e0       	ldi	r20, 0x00	; 0
     f10:	50 e0       	ldi	r21, 0x00	; 0
     f12:	63 e0       	ldi	r22, 0x03	; 3
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f1a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f1e:	d2 d2       	rcall	.+1444   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
  VL53L0X_i2c_init();

  Status = VL53L0X_DataInit( &MyDevice );         // Data initialization

  if (! vl53l0x_setAddress(i2c_addr) ) {
    return FALSE;
     f20:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 91 ea 07 	lds	r25, 0x07EA	; 0x8007ea <__data_end>
     f2a:	99 23       	and	r25, r25
     f2c:	59 f0       	breq	.+22     	; 0xf44 <vl53l0x_begin+0x198>
          Status = VL53L0X_ERROR_NOT_SUPPORTED;
      }
  }

  if( Status == VL53L0X_ERROR_NONE ) {
      Status = VL53L0X_StaticInit( pMyDevice ); // Device Initialization
     f2e:	80 e0       	ldi	r24, 0x00	; 0
     f30:	09 c0       	rjmp	.+18     	; 0xf44 <vl53l0x_begin+0x198>
     f32:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f36:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f3a:	0e 94 c8 10 	call	0x2190	; 0x2190 <VL53L0X_StaticInit>
     f3e:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  if( Status == VL53L0X_ERROR_NONE ) {
      return TRUE;
  } else {
      return FALSE;
  }
}
     f42:	8c cf       	rjmp	.-232    	; 0xe5c <vl53l0x_begin+0xb0>
     f44:	27 96       	adiw	r28, 0x07	; 7
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	ff 90       	pop	r15
     f5a:	ef 90       	pop	r14
     f5c:	df 90       	pop	r13
     f5e:	08 95       	ret

00000f60 <vl53l0x_getSingleRangingMeasurement>:
    /*
     *  Step  4 : Test ranging mode
     */

    if( Status == VL53L0X_ERROR_NONE ) {
        Status = VL53L0X_PerformSingleRangingMeasurement( pMyDevice, pRangingMeasurementData );
     f60:	bc 01       	movw	r22, r24
     f62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f66:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f6a:	0c 94 fe 0f 	jmp	0x1ffc	; 0x1ffc <VL53L0X_PerformSingleRangingMeasurement>
    }

    return Status;
}
     f6e:	08 95       	ret

00000f70 <VL53L0X_GetDeviceInfo>:
	Status = VL53L0X_get_reference_spads(Dev, pSpadCount, pIsApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
}
     f70:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <VL53L0X_get_device_info>
     f74:	08 95       	ret

00000f76 <VL53L0X_SetDeviceAddress>:
     f76:	46 2f       	mov	r20, r22
     f78:	46 95       	lsr	r20
     f7a:	6a e8       	ldi	r22, 0x8A	; 138
     f7c:	0c 94 a6 2b 	jmp	0x574c	; 0x574c <VL53L0X_WrByte>
     f80:	08 95       	ret

00000f82 <VL53L0X_SetDeviceMode>:
     f82:	63 30       	cpi	r22, 0x03	; 3
     f84:	41 f0       	breq	.+16     	; 0xf96 <VL53L0X_SetDeviceMode+0x14>
     f86:	18 f4       	brcc	.+6      	; 0xf8e <VL53L0X_SetDeviceMode+0xc>
     f88:	62 30       	cpi	r22, 0x02	; 2
     f8a:	28 f0       	brcs	.+10     	; 0xf96 <VL53L0X_SetDeviceMode+0x14>
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <VL53L0X_SetDeviceMode+0x1c>
     f8e:	2c ee       	ldi	r18, 0xEC	; 236
     f90:	26 0f       	add	r18, r22
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	20 f4       	brcc	.+8      	; 0xf9e <VL53L0X_SetDeviceMode+0x1c>
     f96:	fc 01       	movw	r30, r24
     f98:	60 8b       	std	Z+16, r22	; 0x10
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
     f9e:	88 ef       	ldi	r24, 0xF8	; 248
     fa0:	08 95       	ret

00000fa2 <VL53L0X_GetFractionEnable>:
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	eb 01       	movw	r28, r22
     fa8:	ab 01       	movw	r20, r22
     faa:	69 e0       	ldi	r22, 0x09	; 9
     fac:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
     fb0:	81 11       	cpse	r24, r1
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <VL53L0X_GetFractionEnable+0x18>
     fb4:	98 81       	ld	r25, Y
     fb6:	91 70       	andi	r25, 0x01	; 1
     fb8:	98 83       	st	Y, r25
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
     fc0:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <VL53L0X_set_measurement_timing_budget_micro_seconds>
     fc4:	08 95       	ret

00000fc6 <VL53L0X_GetVcselPulsePeriod>:
     fc6:	0c 94 03 20 	jmp	0x4006	; 0x4006 <VL53L0X_get_vcsel_pulse_period>
     fca:	08 95       	ret

00000fcc <VL53L0X_SetSequenceStepEnable>:
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	1f 92       	push	r1
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	7c 01       	movw	r14, r24
     fe2:	06 2f       	mov	r16, r22
     fe4:	d4 2e       	mov	r13, r20
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	ae 01       	movw	r20, r28
     fea:	4f 5f       	subi	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
     ff4:	18 2f       	mov	r17, r24
     ff6:	81 11       	cpse	r24, r1
     ff8:	56 c0       	rjmp	.+172    	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	d9 12       	cpse	r13, r25
    1000:	1c c0       	rjmp	.+56     	; 0x103a <VL53L0X_SetSequenceStepEnable+0x6e>
    1002:	02 30       	cpi	r16, 0x02	; 2
    1004:	89 f0       	breq	.+34     	; 0x1028 <VL53L0X_SetSequenceStepEnable+0x5c>
    1006:	28 f4       	brcc	.+10     	; 0x1012 <VL53L0X_SetSequenceStepEnable+0x46>
    1008:	00 23       	and	r16, r16
    100a:	41 f0       	breq	.+16     	; 0x101c <VL53L0X_SetSequenceStepEnable+0x50>
    100c:	01 30       	cpi	r16, 0x01	; 1
    100e:	49 f0       	breq	.+18     	; 0x1022 <VL53L0X_SetSequenceStepEnable+0x56>
    1010:	44 c0       	rjmp	.+136    	; 0x109a <VL53L0X_SetSequenceStepEnable+0xce>
    1012:	03 30       	cpi	r16, 0x03	; 3
    1014:	61 f0       	breq	.+24     	; 0x102e <VL53L0X_SetSequenceStepEnable+0x62>
    1016:	04 30       	cpi	r16, 0x04	; 4
    1018:	69 f0       	breq	.+26     	; 0x1034 <VL53L0X_SetSequenceStepEnable+0x68>
    101a:	3f c0       	rjmp	.+126    	; 0x109a <VL53L0X_SetSequenceStepEnable+0xce>
    101c:	08 2f       	mov	r16, r24
    101e:	00 61       	ori	r16, 0x10	; 16
    1020:	40 c0       	rjmp	.+128    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1022:	08 2f       	mov	r16, r24
    1024:	08 62       	ori	r16, 0x28	; 40
    1026:	3d c0       	rjmp	.+122    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1028:	08 2f       	mov	r16, r24
    102a:	04 60       	ori	r16, 0x04	; 4
    102c:	3a c0       	rjmp	.+116    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    102e:	08 2f       	mov	r16, r24
    1030:	00 64       	ori	r16, 0x40	; 64
    1032:	37 c0       	rjmp	.+110    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1034:	08 2f       	mov	r16, r24
    1036:	00 68       	ori	r16, 0x80	; 128
    1038:	34 c0       	rjmp	.+104    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    103a:	02 30       	cpi	r16, 0x02	; 2
    103c:	89 f0       	breq	.+34     	; 0x1060 <VL53L0X_SetSequenceStepEnable+0x94>
    103e:	28 f4       	brcc	.+10     	; 0x104a <VL53L0X_SetSequenceStepEnable+0x7e>
    1040:	00 23       	and	r16, r16
    1042:	41 f0       	breq	.+16     	; 0x1054 <VL53L0X_SetSequenceStepEnable+0x88>
    1044:	01 30       	cpi	r16, 0x01	; 1
    1046:	49 f0       	breq	.+18     	; 0x105a <VL53L0X_SetSequenceStepEnable+0x8e>
    1048:	2a c0       	rjmp	.+84     	; 0x109e <VL53L0X_SetSequenceStepEnable+0xd2>
    104a:	03 30       	cpi	r16, 0x03	; 3
    104c:	61 f0       	breq	.+24     	; 0x1066 <VL53L0X_SetSequenceStepEnable+0x9a>
    104e:	04 30       	cpi	r16, 0x04	; 4
    1050:	69 f0       	breq	.+26     	; 0x106c <VL53L0X_SetSequenceStepEnable+0xa0>
    1052:	25 c0       	rjmp	.+74     	; 0x109e <VL53L0X_SetSequenceStepEnable+0xd2>
    1054:	08 2f       	mov	r16, r24
    1056:	0f 7e       	andi	r16, 0xEF	; 239
    1058:	24 c0       	rjmp	.+72     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    105a:	08 2f       	mov	r16, r24
    105c:	07 7d       	andi	r16, 0xD7	; 215
    105e:	21 c0       	rjmp	.+66     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1060:	08 2f       	mov	r16, r24
    1062:	0b 7f       	andi	r16, 0xFB	; 251
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1066:	08 2f       	mov	r16, r24
    1068:	0f 7b       	andi	r16, 0xBF	; 191
    106a:	1b c0       	rjmp	.+54     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    106c:	08 2f       	mov	r16, r24
    106e:	0f 77       	andi	r16, 0x7F	; 127
    1070:	18 c0       	rjmp	.+48     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1072:	40 2f       	mov	r20, r16
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	c7 01       	movw	r24, r14
    1078:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    107c:	18 2f       	mov	r17, r24
    107e:	81 11       	cpse	r24, r1
    1080:	12 c0       	rjmp	.+36     	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    1082:	f7 01       	movw	r30, r14
    1084:	e3 5e       	subi	r30, 0xE3	; 227
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	00 83       	st	Z, r16
    108a:	f7 01       	movw	r30, r14
    108c:	42 89       	ldd	r20, Z+18	; 0x12
    108e:	53 89       	ldd	r21, Z+19	; 0x13
    1090:	64 89       	ldd	r22, Z+20	; 0x14
    1092:	75 89       	ldd	r23, Z+21	; 0x15
    1094:	c7 01       	movw	r24, r14
    1096:	94 df       	rcall	.-216    	; 0xfc0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    1098:	06 c0       	rjmp	.+12     	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    109a:	1c ef       	ldi	r17, 0xFC	; 252
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    109e:	1c ef       	ldi	r17, 0xFC	; 252
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    10a2:	80 13       	cpse	r24, r16
    10a4:	e6 cf       	rjmp	.-52     	; 0x1072 <VL53L0X_SetSequenceStepEnable+0xa6>
    10a6:	81 2f       	mov	r24, r17
    10a8:	0f 90       	pop	r0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	ff 90       	pop	r15
    10b4:	ef 90       	pop	r14
    10b6:	df 90       	pop	r13
    10b8:	08 95       	ret

000010ba <sequence_step_enabled>:
    10ba:	62 30       	cpi	r22, 0x02	; 2
    10bc:	d9 f0       	breq	.+54     	; 0x10f4 <sequence_step_enabled+0x3a>
    10be:	28 f4       	brcc	.+10     	; 0x10ca <sequence_step_enabled+0x10>
    10c0:	66 23       	and	r22, r22
    10c2:	59 f0       	breq	.+22     	; 0x10da <sequence_step_enabled+0x20>
    10c4:	61 30       	cpi	r22, 0x01	; 1
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <sequence_step_enabled+0x2c>
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <sequence_step_enabled+0x18>
    10ca:	63 30       	cpi	r22, 0x03	; 3
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <sequence_step_enabled+0x48>
    10ce:	64 30       	cpi	r22, 0x04	; 4
    10d0:	f9 f0       	breq	.+62     	; 0x1110 <sequence_step_enabled+0x56>
    10d2:	f9 01       	movw	r30, r18
    10d4:	10 82       	st	Z, r1
    10d6:	8c ef       	ldi	r24, 0xFC	; 252
    10d8:	08 95       	ret
    10da:	42 95       	swap	r20
    10dc:	41 70       	andi	r20, 0x01	; 1
    10de:	f9 01       	movw	r30, r18
    10e0:	40 83       	st	Z, r20
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	08 95       	ret
    10e6:	43 fb       	bst	r20, 3
    10e8:	44 27       	eor	r20, r20
    10ea:	40 f9       	bld	r20, 0
    10ec:	f9 01       	movw	r30, r18
    10ee:	40 83       	st	Z, r20
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret
    10f4:	42 fb       	bst	r20, 2
    10f6:	44 27       	eor	r20, r20
    10f8:	40 f9       	bld	r20, 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	40 83       	st	Z, r20
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	08 95       	ret
    1102:	46 fb       	bst	r20, 6
    1104:	44 27       	eor	r20, r20
    1106:	40 f9       	bld	r20, 0
    1108:	f9 01       	movw	r30, r18
    110a:	40 83       	st	Z, r20
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret
    1110:	44 1f       	adc	r20, r20
    1112:	44 27       	eor	r20, r20
    1114:	44 1f       	adc	r20, r20
    1116:	f9 01       	movw	r30, r18
    1118:	40 83       	st	Z, r20
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	08 95       	ret

0000111e <VL53L0X_GetSequenceStepEnables>:
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	1f 92       	push	r1
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	8c 01       	movw	r16, r24
    1132:	7b 01       	movw	r14, r22
    1134:	19 82       	std	Y+1, r1	; 0x01
    1136:	ae 01       	movw	r20, r28
    1138:	4f 5f       	subi	r20, 0xFF	; 255
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    1142:	81 11       	cpse	r24, r1
    1144:	20 c0       	rjmp	.+64     	; 0x1186 <VL53L0X_GetSequenceStepEnables+0x68>
    1146:	97 01       	movw	r18, r14
    1148:	49 81       	ldd	r20, Y+1	; 0x01
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	c8 01       	movw	r24, r16
    114e:	b5 df       	rcall	.-150    	; 0x10ba <sequence_step_enabled>
    1150:	81 11       	cpse	r24, r1
    1152:	22 c0       	rjmp	.+68     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    1154:	97 01       	movw	r18, r14
    1156:	2e 5f       	subi	r18, 0xFE	; 254
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	49 81       	ldd	r20, Y+1	; 0x01
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	c8 01       	movw	r24, r16
    1160:	ac df       	rcall	.-168    	; 0x10ba <sequence_step_enabled>
    1162:	81 11       	cpse	r24, r1
    1164:	19 c0       	rjmp	.+50     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    1166:	97 01       	movw	r18, r14
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	49 81       	ldd	r20, Y+1	; 0x01
    116e:	62 e0       	ldi	r22, 0x02	; 2
    1170:	c8 01       	movw	r24, r16
    1172:	a3 df       	rcall	.-186    	; 0x10ba <sequence_step_enabled>
    1174:	81 11       	cpse	r24, r1
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    1178:	97 01       	movw	r18, r14
    117a:	2d 5f       	subi	r18, 0xFD	; 253
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	49 81       	ldd	r20, Y+1	; 0x01
    1180:	63 e0       	ldi	r22, 0x03	; 3
    1182:	c8 01       	movw	r24, r16
    1184:	9a df       	rcall	.-204    	; 0x10ba <sequence_step_enabled>
    1186:	81 11       	cpse	r24, r1
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    118a:	97 01       	movw	r18, r14
    118c:	2c 5f       	subi	r18, 0xFC	; 252
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	49 81       	ldd	r20, Y+1	; 0x01
    1192:	64 e0       	ldi	r22, 0x04	; 4
    1194:	c8 01       	movw	r24, r16
    1196:	91 df       	rcall	.-222    	; 0x10ba <sequence_step_enabled>
    1198:	0f 90       	pop	r0
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	08 95       	ret

000011a8 <VL53L0X_GetSequenceStepTimeout>:
    11a8:	3f 92       	push	r3
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <VL53L0X_GetSequenceStepTimeout+0x24>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <VL53L0X_GetSequenceStepTimeout+0x26>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	8a 01       	movw	r16, r20
    11d4:	ae 01       	movw	r20, r28
    11d6:	4f 5f       	subi	r20, 0xFF	; 255
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <get_sequence_step_timeout>
    11de:	38 2e       	mov	r3, r24
    11e0:	81 11       	cpse	r24, r1
    11e2:	38 c0       	rjmp	.+112    	; 0x1254 <VL53L0X_GetSequenceStepTimeout+0xac>
    11e4:	49 80       	ldd	r4, Y+1	; 0x01
    11e6:	5a 80       	ldd	r5, Y+2	; 0x02
    11e8:	6b 80       	ldd	r6, Y+3	; 0x03
    11ea:	7c 80       	ldd	r7, Y+4	; 0x04
    11ec:	0f 2e       	mov	r0, r31
    11ee:	f8 ee       	ldi	r31, 0xE8	; 232
    11f0:	8f 2e       	mov	r8, r31
    11f2:	f3 e0       	ldi	r31, 0x03	; 3
    11f4:	9f 2e       	mov	r9, r31
    11f6:	a1 2c       	mov	r10, r1
    11f8:	b1 2c       	mov	r11, r1
    11fa:	f0 2d       	mov	r31, r0
    11fc:	c3 01       	movw	r24, r6
    11fe:	b2 01       	movw	r22, r4
    1200:	a5 01       	movw	r20, r10
    1202:	94 01       	movw	r18, r8
    1204:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    1208:	69 01       	movw	r12, r18
    120a:	7a 01       	movw	r14, r20
    120c:	a8 ee       	ldi	r26, 0xE8	; 232
    120e:	b3 e0       	ldi	r27, 0x03	; 3
    1210:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    1214:	a3 01       	movw	r20, r6
    1216:	92 01       	movw	r18, r4
    1218:	26 1b       	sub	r18, r22
    121a:	37 0b       	sbc	r19, r23
    121c:	48 0b       	sbc	r20, r24
    121e:	59 0b       	sbc	r21, r25
    1220:	af ef       	ldi	r26, 0xFF	; 255
    1222:	bf ef       	ldi	r27, 0xFF	; 255
    1224:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    1228:	6c 50       	subi	r22, 0x0C	; 12
    122a:	7e 4f       	sbci	r23, 0xFE	; 254
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	a5 01       	movw	r20, r10
    1232:	94 01       	movw	r18, r8
    1234:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    1238:	76 01       	movw	r14, r12
    123a:	dd 24       	eor	r13, r13
    123c:	cc 24       	eor	r12, r12
    123e:	da 01       	movw	r26, r20
    1240:	c9 01       	movw	r24, r18
    1242:	8c 0d       	add	r24, r12
    1244:	9d 1d       	adc	r25, r13
    1246:	ae 1d       	adc	r26, r14
    1248:	bf 1d       	adc	r27, r15
    124a:	f8 01       	movw	r30, r16
    124c:	80 83       	st	Z, r24
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	a2 83       	std	Z+2, r26	; 0x02
    1252:	b3 83       	std	Z+3, r27	; 0x03
    1254:	83 2d       	mov	r24, r3
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	7f 90       	pop	r7
    1278:	6f 90       	pop	r6
    127a:	5f 90       	pop	r5
    127c:	4f 90       	pop	r4
    127e:	3f 90       	pop	r3
    1280:	08 95       	ret

00001282 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	00 d0       	rcall	.+0      	; 0x1292 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x10>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x12>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	7c 01       	movw	r14, r24
    129c:	6b 01       	movw	r12, r22
    129e:	ae 01       	movw	r20, r28
    12a0:	4f 5f       	subi	r20, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	68 ef       	ldi	r22, 0xF8	; 248
    12a6:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    12aa:	18 2f       	mov	r17, r24
    12ac:	81 11       	cpse	r24, r1
    12ae:	26 c0       	rjmp	.+76     	; 0x12fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    12b0:	ae 01       	movw	r20, r28
    12b2:	4d 5f       	subi	r20, 0xFD	; 253
    12b4:	5f 4f       	sbci	r21, 0xFF	; 255
    12b6:	64 e0       	ldi	r22, 0x04	; 4
    12b8:	c7 01       	movw	r24, r14
    12ba:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    12be:	18 2f       	mov	r17, r24
    12c0:	81 11       	cpse	r24, r1
    12c2:	1c c0       	rjmp	.+56     	; 0x12fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    12c4:	29 81       	ldd	r18, Y+1	; 0x01
    12c6:	3a 81       	ldd	r19, Y+2	; 0x02
    12c8:	21 15       	cp	r18, r1
    12ca:	31 05       	cpc	r19, r1
    12cc:	69 f0       	breq	.+26     	; 0x12e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x66>
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	6b 81       	ldd	r22, Y+3	; 0x03
    12d4:	7c 81       	ldd	r23, Y+4	; 0x04
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    12de:	f6 01       	movw	r30, r12
    12e0:	20 83       	st	Z, r18
    12e2:	31 83       	std	Z+1, r19	; 0x01
    12e4:	42 83       	std	Z+2, r20	; 0x02
    12e6:	53 83       	std	Z+3, r21	; 0x03
    12e8:	f6 01       	movw	r30, r12
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	a2 81       	ldd	r26, Z+2	; 0x02
    12f0:	b3 81       	ldd	r27, Z+3	; 0x03
    12f2:	f7 01       	movw	r30, r14
    12f4:	86 8b       	std	Z+22, r24	; 0x16
    12f6:	97 8b       	std	Z+23, r25	; 0x17
    12f8:	a0 8f       	std	Z+24, r26	; 0x18
    12fa:	b1 8f       	std	Z+25, r27	; 0x19
    12fc:	81 2f       	mov	r24, r17
    12fe:	26 96       	adiw	r28, 0x06	; 6
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	08 95       	ret

0000131a <VL53L0X_GetXTalkCompensationEnable>:
    131a:	fc 01       	movw	r30, r24
    131c:	82 8d       	ldd	r24, Z+26	; 0x1a
    131e:	fb 01       	movw	r30, r22
    1320:	80 83       	st	Z, r24
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	08 95       	ret

00001326 <VL53L0X_GetXTalkCompensationRateMegaCps>:
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 d0       	rcall	.+0      	; 0x1334 <VL53L0X_GetXTalkCompensationRateMegaCps+0xe>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	8c 01       	movw	r16, r24
    133a:	7b 01       	movw	r14, r22
    133c:	ae 01       	movw	r20, r28
    133e:	4f 5f       	subi	r20, 0xFF	; 255
    1340:	5f 4f       	sbci	r21, 0xFF	; 255
    1342:	60 e2       	ldi	r22, 0x20	; 32
    1344:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    1348:	81 11       	cpse	r24, r1
    134a:	26 c0       	rjmp	.+76     	; 0x1398 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    134c:	49 81       	ldd	r20, Y+1	; 0x01
    134e:	5a 81       	ldd	r21, Y+2	; 0x02
    1350:	41 15       	cp	r20, r1
    1352:	51 05       	cpc	r21, r1
    1354:	69 f4       	brne	.+26     	; 0x1370 <VL53L0X_GetXTalkCompensationRateMegaCps+0x4a>
    1356:	f8 01       	movw	r30, r16
    1358:	45 8d       	ldd	r20, Z+29	; 0x1d
    135a:	56 8d       	ldd	r21, Z+30	; 0x1e
    135c:	67 8d       	ldd	r22, Z+31	; 0x1f
    135e:	70 a1       	ldd	r23, Z+32	; 0x20
    1360:	f7 01       	movw	r30, r14
    1362:	40 83       	st	Z, r20
    1364:	51 83       	std	Z+1, r21	; 0x01
    1366:	62 83       	std	Z+2, r22	; 0x02
    1368:	73 83       	std	Z+3, r23	; 0x03
    136a:	f8 01       	movw	r30, r16
    136c:	12 8e       	std	Z+26, r1	; 0x1a
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    1370:	44 0f       	add	r20, r20
    1372:	55 1f       	adc	r21, r21
    1374:	44 0f       	add	r20, r20
    1376:	55 1f       	adc	r21, r21
    1378:	44 0f       	add	r20, r20
    137a:	55 1f       	adc	r21, r21
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	f7 01       	movw	r30, r14
    1382:	40 83       	st	Z, r20
    1384:	51 83       	std	Z+1, r21	; 0x01
    1386:	62 83       	std	Z+2, r22	; 0x02
    1388:	73 83       	std	Z+3, r23	; 0x03
    138a:	f8 01       	movw	r30, r16
    138c:	45 8f       	std	Z+29, r20	; 0x1d
    138e:	56 8f       	std	Z+30, r21	; 0x1e
    1390:	67 8f       	std	Z+31, r22	; 0x1f
    1392:	70 a3       	std	Z+32, r23	; 0x20
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	92 8f       	std	Z+26, r25	; 0x1a
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	08 95       	ret

000013aa <VL53L0X_SetLimitCheckEnable>:
    13aa:	8f 92       	push	r8
    13ac:	9f 92       	push	r9
    13ae:	af 92       	push	r10
    13b0:	bf 92       	push	r11
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	66 30       	cpi	r22, 0x06	; 6
    13be:	71 05       	cpc	r23, r1
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <VL53L0X_SetLimitCheckEnable+0x1a>
    13c2:	47 c0       	rjmp	.+142    	; 0x1452 <VL53L0X_SetLimitCheckEnable+0xa8>
    13c4:	44 23       	and	r20, r20
    13c6:	09 f4       	brne	.+2      	; 0x13ca <VL53L0X_SetLimitCheckEnable+0x20>
    13c8:	48 c0       	rjmp	.+144    	; 0x145a <VL53L0X_SetLimitCheckEnable+0xb0>
    13ca:	fb 01       	movw	r30, r22
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	e8 0f       	add	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	81 a8       	ldd	r8, Z+49	; 0x31
    13da:	92 a8       	ldd	r9, Z+50	; 0x32
    13dc:	a3 a8       	ldd	r10, Z+51	; 0x33
    13de:	b4 a8       	ldd	r11, Z+52	; 0x34
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	31 e0       	ldi	r19, 0x01	; 1
    13e4:	3f c0       	rjmp	.+126    	; 0x1464 <VL53L0X_SetLimitCheckEnable+0xba>
    13e6:	f7 01       	movw	r30, r14
    13e8:	35 a3       	std	Z+37, r19	; 0x25
    13ea:	26 c0       	rjmp	.+76     	; 0x1438 <VL53L0X_SetLimitCheckEnable+0x8e>
    13ec:	b5 01       	movw	r22, r10
    13ee:	a4 01       	movw	r20, r8
    13f0:	03 2e       	mov	r0, r19
    13f2:	39 e0       	ldi	r19, 0x09	; 9
    13f4:	76 95       	lsr	r23
    13f6:	67 95       	ror	r22
    13f8:	57 95       	ror	r21
    13fa:	47 95       	ror	r20
    13fc:	3a 95       	dec	r19
    13fe:	d1 f7       	brne	.-12     	; 0x13f4 <VL53L0X_SetLimitCheckEnable+0x4a>
    1400:	30 2d       	mov	r19, r0
    1402:	64 e4       	ldi	r22, 0x44	; 68
    1404:	c7 01       	movw	r24, r14
    1406:	0e 94 b1 2b 	call	0x5762	; 0x5762 <VL53L0X_WrWord>
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <VL53L0X_SetLimitCheckEnable+0x8a>
    140c:	f7 01       	movw	r30, r14
    140e:	37 a3       	std	Z+39, r19	; 0x27
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <VL53L0X_SetLimitCheckEnable+0x8e>
    1412:	f7 01       	movw	r30, r14
    1414:	30 a7       	std	Z+40, r19	; 0x28
    1416:	10 c0       	rjmp	.+32     	; 0x1438 <VL53L0X_SetLimitCheckEnable+0x8e>
    1418:	22 0f       	add	r18, r18
    141a:	4e ef       	ldi	r20, 0xFE	; 254
    141c:	60 e6       	ldi	r22, 0x60	; 96
    141e:	c7 01       	movw	r24, r14
    1420:	0e 94 bc 2b 	call	0x5778	; 0x5778 <VL53L0X_UpdateByte>
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <VL53L0X_SetLimitCheckEnable+0x8a>
    1426:	22 95       	swap	r18
    1428:	20 7f       	andi	r18, 0xF0	; 240
    142a:	4f ee       	ldi	r20, 0xEF	; 239
    142c:	60 e6       	ldi	r22, 0x60	; 96
    142e:	c7 01       	movw	r24, r14
    1430:	0e 94 bc 2b 	call	0x5778	; 0x5778 <VL53L0X_UpdateByte>
    1434:	81 11       	cpse	r24, r1
    1436:	2d c0       	rjmp	.+90     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1438:	11 11       	cpse	r17, r1
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <VL53L0X_SetLimitCheckEnable+0x9c>
    143c:	ce 0d       	add	r28, r14
    143e:	df 1d       	adc	r29, r15
    1440:	1d a2       	std	Y+37, r1	; 0x25
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	26 c0       	rjmp	.+76     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1446:	ce 0d       	add	r28, r14
    1448:	df 1d       	adc	r29, r15
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	8d a3       	std	Y+37, r24	; 0x25
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	20 c0       	rjmp	.+64     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1452:	8c ef       	ldi	r24, 0xFC	; 252
    1454:	1e c0       	rjmp	.+60     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1456:	8c ef       	ldi	r24, 0xFC	; 252
    1458:	1c c0       	rjmp	.+56     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 2c       	mov	r8, r1
    1460:	91 2c       	mov	r9, r1
    1462:	54 01       	movw	r10, r8
    1464:	14 2f       	mov	r17, r20
    1466:	eb 01       	movw	r28, r22
    1468:	7c 01       	movw	r14, r24
    146a:	62 30       	cpi	r22, 0x02	; 2
    146c:	71 05       	cpc	r23, r1
    146e:	71 f2       	breq	.-100    	; 0x140c <VL53L0X_SetLimitCheckEnable+0x62>
    1470:	40 f4       	brcc	.+16     	; 0x1482 <VL53L0X_SetLimitCheckEnable+0xd8>
    1472:	20 97       	sbiw	r28, 0x00	; 0
    1474:	09 f4       	brne	.+2      	; 0x1478 <VL53L0X_SetLimitCheckEnable+0xce>
    1476:	b7 cf       	rjmp	.-146    	; 0x13e6 <VL53L0X_SetLimitCheckEnable+0x3c>
    1478:	61 30       	cpi	r22, 0x01	; 1
    147a:	71 05       	cpc	r23, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <VL53L0X_SetLimitCheckEnable+0xd6>
    147e:	b6 cf       	rjmp	.-148    	; 0x13ec <VL53L0X_SetLimitCheckEnable+0x42>
    1480:	ea cf       	rjmp	.-44     	; 0x1456 <VL53L0X_SetLimitCheckEnable+0xac>
    1482:	64 30       	cpi	r22, 0x04	; 4
    1484:	71 05       	cpc	r23, r1
    1486:	41 f2       	breq	.-112    	; 0x1418 <VL53L0X_SetLimitCheckEnable+0x6e>
    1488:	20 f2       	brcs	.-120    	; 0x1412 <VL53L0X_SetLimitCheckEnable+0x68>
    148a:	65 30       	cpi	r22, 0x05	; 5
    148c:	71 05       	cpc	r23, r1
    148e:	59 f2       	breq	.-106    	; 0x1426 <VL53L0X_SetLimitCheckEnable+0x7c>
    1490:	e2 cf       	rjmp	.-60     	; 0x1456 <VL53L0X_SetLimitCheckEnable+0xac>
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	bf 90       	pop	r11
    149e:	af 90       	pop	r10
    14a0:	9f 90       	pop	r9
    14a2:	8f 90       	pop	r8
    14a4:	08 95       	ret

000014a6 <VL53L0X_GetLimitCheckEnable>:
    14a6:	66 30       	cpi	r22, 0x06	; 6
    14a8:	71 05       	cpc	r23, r1
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <VL53L0X_GetLimitCheckEnable+0xe>
    14ac:	fa 01       	movw	r30, r20
    14ae:	10 82       	st	Z, r1
    14b0:	8c ef       	ldi	r24, 0xFC	; 252
    14b2:	08 95       	ret
    14b4:	fc 01       	movw	r30, r24
    14b6:	e6 0f       	add	r30, r22
    14b8:	f7 1f       	adc	r31, r23
    14ba:	85 a1       	ldd	r24, Z+37	; 0x25
    14bc:	fa 01       	movw	r30, r20
    14be:	80 83       	st	Z, r24
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <VL53L0X_SetLimitCheckValue>:
    14c4:	cf 92       	push	r12
    14c6:	df 92       	push	r13
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	fc 01       	movw	r30, r24
    14d6:	e6 0f       	add	r30, r22
    14d8:	f7 1f       	adc	r31, r23
    14da:	e5 a1       	ldd	r30, Z+37	; 0x25
    14dc:	e1 11       	cpse	r30, r1
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <VL53L0X_SetLimitCheckValue+0x36>
    14e0:	66 0f       	add	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	ec 01       	movw	r28, r24
    14ea:	c6 0f       	add	r28, r22
    14ec:	d7 1f       	adc	r29, r23
    14ee:	29 ab       	std	Y+49, r18	; 0x31
    14f0:	3a ab       	std	Y+50, r19	; 0x32
    14f2:	4b ab       	std	Y+51, r20	; 0x33
    14f4:	5c ab       	std	Y+52, r21	; 0x34
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	56 c0       	rjmp	.+172    	; 0x15a6 <VL53L0X_SetLimitCheckValue+0xe2>
    14fa:	69 01       	movw	r12, r18
    14fc:	7a 01       	movw	r14, r20
    14fe:	eb 01       	movw	r28, r22
    1500:	8c 01       	movw	r16, r24
    1502:	62 30       	cpi	r22, 0x02	; 2
    1504:	71 05       	cpc	r23, r1
    1506:	19 f1       	breq	.+70     	; 0x154e <VL53L0X_SetLimitCheckValue+0x8a>
    1508:	30 f4       	brcc	.+12     	; 0x1516 <VL53L0X_SetLimitCheckValue+0x52>
    150a:	20 97       	sbiw	r28, 0x00	; 0
    150c:	59 f0       	breq	.+22     	; 0x1524 <VL53L0X_SetLimitCheckValue+0x60>
    150e:	61 30       	cpi	r22, 0x01	; 1
    1510:	71 05       	cpc	r23, r1
    1512:	71 f0       	breq	.+28     	; 0x1530 <VL53L0X_SetLimitCheckValue+0x6c>
    1514:	38 c0       	rjmp	.+112    	; 0x1586 <VL53L0X_SetLimitCheckValue+0xc2>
    1516:	63 30       	cpi	r22, 0x03	; 3
    1518:	71 05       	cpc	r23, r1
    151a:	f9 f0       	breq	.+62     	; 0x155a <VL53L0X_SetLimitCheckValue+0x96>
    151c:	66 30       	cpi	r22, 0x06	; 6
    151e:	71 05       	cpc	r23, r1
    1520:	18 f1       	brcs	.+70     	; 0x1568 <VL53L0X_SetLimitCheckValue+0xa4>
    1522:	31 c0       	rjmp	.+98     	; 0x1586 <VL53L0X_SetLimitCheckValue+0xc2>
    1524:	fc 01       	movw	r30, r24
    1526:	21 ab       	std	Z+49, r18	; 0x31
    1528:	32 ab       	std	Z+50, r19	; 0x32
    152a:	43 ab       	std	Z+51, r20	; 0x33
    152c:	54 ab       	std	Z+52, r21	; 0x34
    152e:	2e c0       	rjmp	.+92     	; 0x158c <VL53L0X_SetLimitCheckValue+0xc8>
    1530:	ba 01       	movw	r22, r20
    1532:	a9 01       	movw	r20, r18
    1534:	03 2e       	mov	r0, r19
    1536:	39 e0       	ldi	r19, 0x09	; 9
    1538:	76 95       	lsr	r23
    153a:	67 95       	ror	r22
    153c:	57 95       	ror	r21
    153e:	47 95       	ror	r20
    1540:	3a 95       	dec	r19
    1542:	d1 f7       	brne	.-12     	; 0x1538 <VL53L0X_SetLimitCheckValue+0x74>
    1544:	30 2d       	mov	r19, r0
    1546:	64 e4       	ldi	r22, 0x44	; 68
    1548:	0e 94 b1 2b 	call	0x5762	; 0x5762 <VL53L0X_WrWord>
    154c:	1d c0       	rjmp	.+58     	; 0x1588 <VL53L0X_SetLimitCheckValue+0xc4>
    154e:	fc 01       	movw	r30, r24
    1550:	21 af       	std	Z+57, r18	; 0x39
    1552:	32 af       	std	Z+58, r19	; 0x3a
    1554:	43 af       	std	Z+59, r20	; 0x3b
    1556:	54 af       	std	Z+60, r21	; 0x3c
    1558:	19 c0       	rjmp	.+50     	; 0x158c <VL53L0X_SetLimitCheckValue+0xc8>
    155a:	fc 01       	movw	r30, r24
    155c:	fd 96       	adiw	r30, 0x3d	; 61
    155e:	20 83       	st	Z, r18
    1560:	31 83       	std	Z+1, r19	; 0x01
    1562:	42 83       	std	Z+2, r20	; 0x02
    1564:	53 83       	std	Z+3, r21	; 0x03
    1566:	12 c0       	rjmp	.+36     	; 0x158c <VL53L0X_SetLimitCheckValue+0xc8>
    1568:	ba 01       	movw	r22, r20
    156a:	a9 01       	movw	r20, r18
    156c:	03 2e       	mov	r0, r19
    156e:	39 e0       	ldi	r19, 0x09	; 9
    1570:	76 95       	lsr	r23
    1572:	67 95       	ror	r22
    1574:	57 95       	ror	r21
    1576:	47 95       	ror	r20
    1578:	3a 95       	dec	r19
    157a:	d1 f7       	brne	.-12     	; 0x1570 <VL53L0X_SetLimitCheckValue+0xac>
    157c:	30 2d       	mov	r19, r0
    157e:	64 e6       	ldi	r22, 0x64	; 100
    1580:	0e 94 b1 2b 	call	0x5762	; 0x5762 <VL53L0X_WrWord>
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <VL53L0X_SetLimitCheckValue+0xc4>
    1586:	8c ef       	ldi	r24, 0xFC	; 252
    1588:	81 11       	cpse	r24, r1
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <VL53L0X_SetLimitCheckValue+0xe2>
    158c:	be 01       	movw	r22, r28
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	e8 01       	movw	r28, r16
    1598:	c6 0f       	add	r28, r22
    159a:	d7 1f       	adc	r29, r23
    159c:	c9 aa       	std	Y+49, r12	; 0x31
    159e:	da aa       	std	Y+50, r13	; 0x32
    15a0:	eb aa       	std	Y+51, r14	; 0x33
    15a2:	fc aa       	std	Y+52, r15	; 0x34
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	08 95       	ret

000015b8 <VL53L0X_GetLimitCheckValue>:
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <VL53L0X_GetLimitCheckValue+0xe>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8c 01       	movw	r16, r24
    15cc:	7a 01       	movw	r14, r20
    15ce:	62 30       	cpi	r22, 0x02	; 2
    15d0:	71 05       	cpc	r23, r1
    15d2:	51 f1       	breq	.+84     	; 0x1628 <VL53L0X_GetLimitCheckValue+0x70>
    15d4:	38 f4       	brcc	.+14     	; 0x15e4 <VL53L0X_GetLimitCheckValue+0x2c>
    15d6:	61 15       	cp	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	59 f0       	breq	.+22     	; 0x15f2 <VL53L0X_GetLimitCheckValue+0x3a>
    15dc:	61 30       	cpi	r22, 0x01	; 1
    15de:	71 05       	cpc	r23, r1
    15e0:	71 f0       	breq	.+28     	; 0x15fe <VL53L0X_GetLimitCheckValue+0x46>
    15e2:	59 c0       	rjmp	.+178    	; 0x1696 <VL53L0X_GetLimitCheckValue+0xde>
    15e4:	63 30       	cpi	r22, 0x03	; 3
    15e6:	71 05       	cpc	r23, r1
    15e8:	29 f1       	breq	.+74     	; 0x1634 <VL53L0X_GetLimitCheckValue+0x7c>
    15ea:	66 30       	cpi	r22, 0x06	; 6
    15ec:	71 05       	cpc	r23, r1
    15ee:	48 f1       	brcs	.+82     	; 0x1642 <VL53L0X_GetLimitCheckValue+0x8a>
    15f0:	52 c0       	rjmp	.+164    	; 0x1696 <VL53L0X_GetLimitCheckValue+0xde>
    15f2:	fc 01       	movw	r30, r24
    15f4:	81 a9       	ldd	r24, Z+49	; 0x31
    15f6:	92 a9       	ldd	r25, Z+50	; 0x32
    15f8:	a3 a9       	ldd	r26, Z+51	; 0x33
    15fa:	b4 a9       	ldd	r27, Z+52	; 0x34
    15fc:	4e c0       	rjmp	.+156    	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    15fe:	ae 01       	movw	r20, r28
    1600:	4f 5f       	subi	r20, 0xFF	; 255
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	64 e4       	ldi	r22, 0x44	; 68
    1606:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    160a:	81 11       	cpse	r24, r1
    160c:	4c c0       	rjmp	.+152    	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    160e:	99 81       	ldd	r25, Y+1	; 0x01
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	59 2f       	mov	r21, r25
    1616:	55 0f       	add	r21, r21
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	41 15       	cp	r20, r1
    161e:	51 05       	cpc	r21, r1
    1620:	61 05       	cpc	r22, r1
    1622:	71 05       	cpc	r23, r1
    1624:	f1 f0       	breq	.+60     	; 0x1662 <VL53L0X_GetLimitCheckValue+0xaa>
    1626:	2a c0       	rjmp	.+84     	; 0x167c <VL53L0X_GetLimitCheckValue+0xc4>
    1628:	fc 01       	movw	r30, r24
    162a:	81 ad       	ldd	r24, Z+57	; 0x39
    162c:	92 ad       	ldd	r25, Z+58	; 0x3a
    162e:	a3 ad       	ldd	r26, Z+59	; 0x3b
    1630:	b4 ad       	ldd	r27, Z+60	; 0x3c
    1632:	33 c0       	rjmp	.+102    	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    1634:	fc 01       	movw	r30, r24
    1636:	fd 96       	adiw	r30, 0x3d	; 61
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	a2 81       	ldd	r26, Z+2	; 0x02
    163e:	b3 81       	ldd	r27, Z+3	; 0x03
    1640:	2c c0       	rjmp	.+88     	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    1642:	ae 01       	movw	r20, r28
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	64 e6       	ldi	r22, 0x64	; 100
    164a:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    164e:	81 11       	cpse	r24, r1
    1650:	2a c0       	rjmp	.+84     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    1652:	29 81       	ldd	r18, Y+1	; 0x01
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	92 2f       	mov	r25, r18
    165a:	99 0f       	add	r25, r25
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	1c c0       	rjmp	.+56     	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    1662:	f8 01       	movw	r30, r16
    1664:	45 a9       	ldd	r20, Z+53	; 0x35
    1666:	56 a9       	ldd	r21, Z+54	; 0x36
    1668:	67 a9       	ldd	r22, Z+55	; 0x37
    166a:	70 ad       	ldd	r23, Z+56	; 0x38
    166c:	f7 01       	movw	r30, r14
    166e:	40 83       	st	Z, r20
    1670:	51 83       	std	Z+1, r21	; 0x01
    1672:	62 83       	std	Z+2, r22	; 0x02
    1674:	73 83       	std	Z+3, r23	; 0x03
    1676:	f8 01       	movw	r30, r16
    1678:	16 a2       	std	Z+38, r1	; 0x26
    167a:	15 c0       	rjmp	.+42     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    167c:	f7 01       	movw	r30, r14
    167e:	40 83       	st	Z, r20
    1680:	51 83       	std	Z+1, r21	; 0x01
    1682:	62 83       	std	Z+2, r22	; 0x02
    1684:	73 83       	std	Z+3, r23	; 0x03
    1686:	f8 01       	movw	r30, r16
    1688:	45 ab       	std	Z+53, r20	; 0x35
    168a:	56 ab       	std	Z+54, r21	; 0x36
    168c:	67 ab       	std	Z+55, r22	; 0x37
    168e:	70 af       	std	Z+56, r23	; 0x38
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	96 a3       	std	Z+38, r25	; 0x26
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    1696:	8c ef       	ldi	r24, 0xFC	; 252
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    169a:	f7 01       	movw	r30, r14
    169c:	80 83       	st	Z, r24
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	a2 83       	std	Z+2, r26	; 0x02
    16a2:	b3 83       	std	Z+3, r27	; 0x03
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	08 95       	ret

000016b8 <VL53L0X_GetWrapAroundCheckEnable>:
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	1f 92       	push	r1
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	8c 01       	movw	r16, r24
    16cc:	7b 01       	movw	r14, r22
    16ce:	ae 01       	movw	r20, r28
    16d0:	4f 5f       	subi	r20, 0xFF	; 255
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    16da:	81 11       	cpse	r24, r1
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <VL53L0X_GetWrapAroundCheckEnable+0x4c>
    16de:	99 81       	ldd	r25, Y+1	; 0x01
    16e0:	f8 01       	movw	r30, r16
    16e2:	e3 5e       	subi	r30, 0xE3	; 227
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	90 83       	st	Z, r25
    16e8:	99 23       	and	r25, r25
    16ea:	24 f4       	brge	.+8      	; 0x16f4 <VL53L0X_GetWrapAroundCheckEnable+0x3c>
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	f7 01       	movw	r30, r14
    16f0:	90 83       	st	Z, r25
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
    16f4:	f7 01       	movw	r30, r14
    16f6:	10 82       	st	Z, r1
    16f8:	f7 01       	movw	r30, r14
    16fa:	90 81       	ld	r25, Z
    16fc:	f8 01       	movw	r30, r16
    16fe:	e7 5b       	subi	r30, 0xB7	; 183
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	90 83       	st	Z, r25
    1704:	0f 90       	pop	r0
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	08 95       	ret

00001714 <VL53L0X_GetDeviceParameters>:
    1714:	8f 92       	push	r8
    1716:	9f 92       	push	r9
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	ec 01       	movw	r28, r24
    172e:	7b 01       	movw	r14, r22
    1730:	88 89       	ldd	r24, Y+16	; 0x10
    1732:	fb 01       	movw	r30, r22
    1734:	80 83       	st	Z, r24
    1736:	6a 5f       	subi	r22, 0xFA	; 250
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	ce 01       	movw	r24, r28
    173c:	a2 dd       	rcall	.-1212   	; 0x1282 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
    173e:	81 11       	cpse	r24, r1
    1740:	33 c0       	rjmp	.+102    	; 0x17a8 <VL53L0X_GetDeviceParameters+0x94>
    1742:	f7 01       	movw	r30, r14
    1744:	12 86       	std	Z+10, r1	; 0x0a
    1746:	b7 01       	movw	r22, r14
    1748:	63 5f       	subi	r22, 0xF3	; 243
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	ce 01       	movw	r24, r28
    174e:	eb dd       	rcall	.-1066   	; 0x1326 <VL53L0X_GetXTalkCompensationRateMegaCps>
    1750:	81 11       	cpse	r24, r1
    1752:	39 c0       	rjmp	.+114    	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    1754:	b7 01       	movw	r22, r14
    1756:	6f 5e       	subi	r22, 0xEF	; 239
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	ce 01       	movw	r24, r28
    175c:	a6 d6       	rcall	.+3404   	; 0x24aa <VL53L0X_get_offset_calibration_data_micro_meter>
    175e:	81 11       	cpse	r24, r1
    1760:	32 c0       	rjmp	.+100    	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    1762:	87 01       	movw	r16, r14
    1764:	0f 5d       	subi	r16, 0xDF	; 223
    1766:	1f 4f       	sbci	r17, 0xFF	; 255
    1768:	5e 01       	movw	r10, r28
    176a:	f5 e2       	ldi	r31, 0x25	; 37
    176c:	af 0e       	add	r10, r31
    176e:	b1 1c       	adc	r11, r1
    1770:	67 01       	movw	r12, r14
    1772:	85 e1       	ldi	r24, 0x15	; 21
    1774:	c8 0e       	add	r12, r24
    1776:	d1 1c       	adc	r13, r1
    1778:	81 2c       	mov	r8, r1
    177a:	91 2c       	mov	r9, r1
    177c:	a8 01       	movw	r20, r16
    177e:	b4 01       	movw	r22, r8
    1780:	ce 01       	movw	r24, r28
    1782:	1a df       	rcall	.-460    	; 0x15b8 <VL53L0X_GetLimitCheckValue>
    1784:	81 11       	cpse	r24, r1
    1786:	1f c0       	rjmp	.+62     	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    1788:	f5 01       	movw	r30, r10
    178a:	81 91       	ld	r24, Z+
    178c:	5f 01       	movw	r10, r30
    178e:	f6 01       	movw	r30, r12
    1790:	81 93       	st	Z+, r24
    1792:	6f 01       	movw	r12, r30
    1794:	ff ef       	ldi	r31, 0xFF	; 255
    1796:	8f 1a       	sub	r8, r31
    1798:	9f 0a       	sbc	r9, r31
    179a:	0c 5f       	subi	r16, 0xFC	; 252
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	86 e0       	ldi	r24, 0x06	; 6
    17a0:	88 16       	cp	r8, r24
    17a2:	91 04       	cpc	r9, r1
    17a4:	59 f7       	brne	.-42     	; 0x177c <VL53L0X_GetDeviceParameters+0x68>
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <VL53L0X_GetDeviceParameters+0x98>
    17a8:	81 11       	cpse	r24, r1
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    17ac:	b7 01       	movw	r22, r14
    17ae:	67 5c       	subi	r22, 0xC7	; 199
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	ce 01       	movw	r24, r28
    17b4:	81 df       	rcall	.-254    	; 0x16b8 <VL53L0X_GetWrapAroundCheckEnable>
    17b6:	81 11       	cpse	r24, r1
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    17ba:	b7 01       	movw	r22, r14
    17bc:	6e 5f       	subi	r22, 0xFE	; 254
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	ce 01       	movw	r24, r28
    17c2:	0e 94 11 21 	call	0x4222	; 0x4222 <VL53L0X_get_measurement_timing_budget_micro_seconds>
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	bf 90       	pop	r11
    17d8:	af 90       	pop	r10
    17da:	9f 90       	pop	r9
    17dc:	8f 90       	pop	r8
    17de:	08 95       	ret

000017e0 <VL53L0X_DataInit>:
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	ec 97       	sbiw	r28, 0x3c	; 60
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	8c 01       	movw	r16, r24
    17fe:	21 e0       	ldi	r18, 0x01	; 1
    1800:	4e ef       	ldi	r20, 0xFE	; 254
    1802:	69 e8       	ldi	r22, 0x89	; 137
    1804:	0e 94 bc 2b 	call	0x5778	; 0x5778 <VL53L0X_UpdateByte>
    1808:	81 11       	cpse	r24, r1
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <VL53L0X_DataInit+0x36>
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	68 e8       	ldi	r22, 0x88	; 136
    1810:	c8 01       	movw	r24, r16
    1812:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1816:	ae 01       	movw	r20, r28
    1818:	44 5c       	subi	r20, 0xC4	; 196
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	60 ec       	ldi	r22, 0xC0	; 192
    181e:	c8 01       	movw	r24, r16
    1820:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    1824:	f8 01       	movw	r30, r16
    1826:	e1 52       	subi	r30, 0x21	; 33
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	10 82       	st	Z, r1
    182c:	88 ee       	ldi	r24, 0xE8	; 232
    182e:	93 e0       	ldi	r25, 0x03	; 3
    1830:	e6 5a       	subi	r30, 0xA6	; 166
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	80 e9       	ldi	r24, 0x90	; 144
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	32 96       	adiw	r30, 0x02	; 2
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
    1842:	85 e8       	ldi	r24, 0x85	; 133
    1844:	9b e6       	ldi	r25, 0x6B	; 107
    1846:	a1 e0       	ldi	r26, 0x01	; 1
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	32 96       	adiw	r30, 0x02	; 2
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
    1854:	84 ea       	ldi	r24, 0xA4	; 164
    1856:	90 e7       	ldi	r25, 0x70	; 112
    1858:	a9 e0       	ldi	r26, 0x09	; 9
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 57       	subi	r30, 0x75	; 117
    185e:	f1 09       	sbc	r31, r1
    1860:	80 83       	st	Z, r24
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	a2 83       	std	Z+2, r26	; 0x02
    1866:	b3 83       	std	Z+3, r27	; 0x03
    1868:	f8 01       	movw	r30, r16
    186a:	15 8e       	std	Z+29, r1	; 0x1d
    186c:	16 8e       	std	Z+30, r1	; 0x1e
    186e:	17 8e       	std	Z+31, r1	; 0x1f
    1870:	10 a2       	std	Z+32, r1	; 0x20
    1872:	be 01       	movw	r22, r28
    1874:	6f 5f       	subi	r22, 0xFF	; 255
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	c8 01       	movw	r24, r16
    187a:	4c df       	rcall	.-360    	; 0x1714 <VL53L0X_GetDeviceParameters>
    187c:	f8 2e       	mov	r15, r24
    187e:	81 11       	cpse	r24, r1
    1880:	0b c0       	rjmp	.+22     	; 0x1898 <VL53L0X_DataInit+0xb8>
    1882:	19 82       	std	Y+1, r1	; 0x01
    1884:	1a 82       	std	Y+2, r1	; 0x02
    1886:	8a e3       	ldi	r24, 0x3A	; 58
    1888:	fe 01       	movw	r30, r28
    188a:	31 96       	adiw	r30, 0x01	; 1
    188c:	d8 01       	movw	r26, r16
    188e:	50 96       	adiw	r26, 0x10	; 16
    1890:	01 90       	ld	r0, Z+
    1892:	0d 92       	st	X+, r0
    1894:	8a 95       	dec	r24
    1896:	e1 f7       	brne	.-8      	; 0x1890 <VL53L0X_DataInit+0xb0>
    1898:	84 e6       	ldi	r24, 0x64	; 100
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	f8 01       	movw	r30, r16
    189e:	ef 5d       	subi	r30, 0xDF	; 223
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	84 e8       	ldi	r24, 0x84	; 132
    18a8:	93 e0       	ldi	r25, 0x03	; 3
    18aa:	32 96       	adiw	r30, 0x02	; 2
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	84 ef       	ldi	r24, 0xF4	; 244
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	32 96       	adiw	r30, 0x02	; 2
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	9a e0       	ldi	r25, 0x0A	; 10
    18be:	33 96       	adiw	r30, 0x03	; 3
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	70 96       	adiw	r30, 0x10	; 16
    18c8:	80 83       	st	Z, r24
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	60 e8       	ldi	r22, 0x80	; 128
    18ce:	c8 01       	movw	r24, r16
    18d0:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    18d4:	e8 2e       	mov	r14, r24
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	6f ef       	ldi	r22, 0xFF	; 255
    18da:	c8 01       	movw	r24, r16
    18dc:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    18e0:	8e 29       	or	r24, r14
    18e2:	f8 2a       	or	r15, r24
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	c8 01       	movw	r24, r16
    18ea:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    18ee:	f8 2a       	or	r15, r24
    18f0:	ae 01       	movw	r20, r28
    18f2:	45 5c       	subi	r20, 0xC5	; 197
    18f4:	5f 4f       	sbci	r21, 0xFF	; 255
    18f6:	61 e9       	ldi	r22, 0x91	; 145
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    18fe:	f8 2a       	or	r15, r24
    1900:	8b ad       	ldd	r24, Y+59	; 0x3b
    1902:	f8 01       	movw	r30, r16
    1904:	e9 5d       	subi	r30, 0xD9	; 217
    1906:	fe 4f       	sbci	r31, 0xFE	; 254
    1908:	80 83       	st	Z, r24
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	c8 01       	movw	r24, r16
    1910:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1914:	f8 2a       	or	r15, r24
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	6f ef       	ldi	r22, 0xFF	; 255
    191a:	c8 01       	movw	r24, r16
    191c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1920:	f8 2a       	or	r15, r24
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	60 e8       	ldi	r22, 0x80	; 128
    1926:	c8 01       	movw	r24, r16
    1928:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    192c:	8f 29       	or	r24, r15
    192e:	09 f4       	brne	.+2      	; 0x1932 <VL53L0X_DataInit+0x152>
    1930:	69 c0       	rjmp	.+210    	; 0x1a04 <VL53L0X_DataInit+0x224>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <VL53L0X_DataInit+0x17c>
    1934:	81 11       	cpse	r24, r1
    1936:	12 c0       	rjmp	.+36     	; 0x195c <VL53L0X_DataInit+0x17c>
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	b7 01       	movw	r22, r14
    193c:	c8 01       	movw	r24, r16
    193e:	35 dd       	rcall	.-1430   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1940:	ff ef       	ldi	r31, 0xFF	; 255
    1942:	ef 1a       	sub	r14, r31
    1944:	ff 0a       	sbc	r15, r31
    1946:	96 e0       	ldi	r25, 0x06	; 6
    1948:	e9 16       	cp	r14, r25
    194a:	f1 04       	cpc	r15, r1
    194c:	99 f7       	brne	.-26     	; 0x1934 <VL53L0X_DataInit+0x154>
    194e:	81 11       	cpse	r24, r1
    1950:	1a c0       	rjmp	.+52     	; 0x1986 <VL53L0X_DataInit+0x1a6>
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	c8 01       	movw	r24, r16
    195a:	27 dd       	rcall	.-1458   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    195c:	81 11       	cpse	r24, r1
    195e:	1d c0       	rjmp	.+58     	; 0x199a <VL53L0X_DataInit+0x1ba>
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	63 e0       	ldi	r22, 0x03	; 3
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	c8 01       	movw	r24, r16
    1968:	20 dd       	rcall	.-1472   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    196a:	81 11       	cpse	r24, r1
    196c:	20 c0       	rjmp	.+64     	; 0x19ae <VL53L0X_DataInit+0x1ce>
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	c8 01       	movw	r24, r16
    1976:	19 dd       	rcall	.-1486   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1978:	81 11       	cpse	r24, r1
    197a:	23 c0       	rjmp	.+70     	; 0x19c2 <VL53L0X_DataInit+0x1e2>
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	c8 01       	movw	r24, r16
    1984:	12 dd       	rcall	.-1500   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1986:	81 11       	cpse	r24, r1
    1988:	25 c0       	rjmp	.+74     	; 0x19d4 <VL53L0X_DataInit+0x1f4>
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	42 e1       	ldi	r20, 0x12	; 18
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	c8 01       	movw	r24, r16
    1998:	95 dd       	rcall	.-1238   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    199a:	81 11       	cpse	r24, r1
    199c:	2c c0       	rjmp	.+88     	; 0x19f6 <VL53L0X_DataInit+0x216>
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e4       	ldi	r19, 0x40	; 64
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	c8 01       	movw	r24, r16
    19ac:	8b dd       	rcall	.-1258   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    19ae:	81 11       	cpse	r24, r1
    19b0:	32 c0       	rjmp	.+100    	; 0x1a16 <VL53L0X_DataInit+0x236>
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	43 e2       	ldi	r20, 0x23	; 35
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	c8 01       	movw	r24, r16
    19c0:	81 dd       	rcall	.-1278   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    19c2:	81 11       	cpse	r24, r1
    19c4:	28 c0       	rjmp	.+80     	; 0x1a16 <VL53L0X_DataInit+0x236>
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	63 e0       	ldi	r22, 0x03	; 3
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	c8 01       	movw	r24, r16
    19d2:	78 dd       	rcall	.-1296   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    19d4:	81 11       	cpse	r24, r1
    19d6:	1f c0       	rjmp	.+62     	; 0x1a16 <VL53L0X_DataInit+0x236>
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	f8 01       	movw	r30, r16
    19dc:	e3 5e       	subi	r30, 0xE3	; 227
    19de:	fe 4f       	sbci	r31, 0xFE	; 254
    19e0:	80 83       	st	Z, r24
    19e2:	4f ef       	ldi	r20, 0xFF	; 255
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	c8 01       	movw	r24, r16
    19e8:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	f8 01       	movw	r30, r16
    19f0:	e1 5e       	subi	r30, 0xE1	; 225
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	90 83       	st	Z, r25
    19f6:	81 11       	cpse	r24, r1
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <VL53L0X_DataInit+0x236>
    19fa:	f8 01       	movw	r30, r16
    19fc:	ec 5f       	subi	r30, 0xFC	; 252
    19fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1a00:	10 82       	st	Z, r1
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <VL53L0X_DataInit+0x236>
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	ce dc       	rcall	.-1636   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1a0e:	ee 24       	eor	r14, r14
    1a10:	e3 94       	inc	r14
    1a12:	f1 2c       	mov	r15, r1
    1a14:	8f cf       	rjmp	.-226    	; 0x1934 <VL53L0X_DataInit+0x154>
    1a16:	ec 96       	adiw	r28, 0x3c	; 60
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	08 95       	ret

00001a30 <VL53L0X_PerformRefCalibration>:
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <VL53L0X_perform_ref_calibration>
    1a36:	08 95       	ret

00001a38 <VL53L0X_GetRangingMeasurementData>:
    1a38:	2f 92       	push	r2
    1a3a:	3f 92       	push	r3
    1a3c:	4f 92       	push	r4
    1a3e:	5f 92       	push	r5
    1a40:	6f 92       	push	r6
    1a42:	7f 92       	push	r7
    1a44:	8f 92       	push	r8
    1a46:	9f 92       	push	r9
    1a48:	af 92       	push	r10
    1a4a:	bf 92       	push	r11
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	a6 97       	sbiw	r28, 0x26	; 38
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	4c 01       	movw	r8, r24
    1a6e:	5b 01       	movw	r10, r22
    1a70:	0c e0       	ldi	r16, 0x0C	; 12
    1a72:	10 e0       	ldi	r17, 0x00	; 0
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	ae 01       	movw	r20, r28
    1a7a:	4e 5f       	subi	r20, 0xFE	; 254
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7e:	64 e1       	ldi	r22, 0x14	; 20
    1a80:	0e 94 8e 2b 	call	0x571c	; 0x571c <VL53L0X_ReadMulti>
    1a84:	81 11       	cpse	r24, r1
    1a86:	fb c0       	rjmp	.+502    	; 0x1c7e <VL53L0X_GetRangingMeasurementData+0x246>
    1a88:	d5 01       	movw	r26, r10
    1a8a:	56 96       	adiw	r26, 0x16	; 22
    1a8c:	1c 92       	st	X, r1
    1a8e:	56 97       	sbiw	r26, 0x16	; 22
    1a90:	f5 01       	movw	r30, r10
    1a92:	10 82       	st	Z, r1
    1a94:	11 82       	std	Z+1, r1	; 0x01
    1a96:	12 82       	std	Z+2, r1	; 0x02
    1a98:	13 82       	std	Z+3, r1	; 0x03
    1a9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	32 2f       	mov	r19, r18
    1aa0:	22 27       	eor	r18, r18
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	28 0f       	add	r18, r24
    1aa6:	31 1d       	adc	r19, r1
    1aa8:	14 96       	adiw	r26, 0x04	; 4
    1aaa:	1d 92       	st	X+, r1
    1aac:	1d 92       	st	X+, r1
    1aae:	1d 92       	st	X+, r1
    1ab0:	1c 92       	st	X, r1
    1ab2:	17 97       	sbiw	r26, 0x07	; 7
    1ab4:	49 84       	ldd	r4, Y+9	; 0x09
    1ab6:	51 2c       	mov	r5, r1
    1ab8:	54 2c       	mov	r5, r4
    1aba:	44 24       	eor	r4, r4
    1abc:	55 0c       	add	r5, r5
    1abe:	61 2c       	mov	r6, r1
    1ac0:	71 2c       	mov	r7, r1
    1ac2:	44 86       	std	Z+12, r4	; 0x0c
    1ac4:	55 86       	std	Z+13, r5	; 0x0d
    1ac6:	66 86       	std	Z+14, r6	; 0x0e
    1ac8:	77 86       	std	Z+15, r7	; 0x0f
    1aca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	98 2f       	mov	r25, r24
    1ad0:	88 27       	eor	r24, r24
    1ad2:	99 0f       	add	r25, r25
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	80 8b       	std	Z+16, r24	; 0x10
    1ada:	91 8b       	std	Z+17, r25	; 0x11
    1adc:	a2 8b       	std	Z+18, r26	; 0x12
    1ade:	b3 8b       	std	Z+19, r27	; 0x13
    1ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	10 2f       	mov	r17, r16
    1ae6:	00 27       	eor	r16, r16
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	08 0f       	add	r16, r24
    1aec:	11 1d       	adc	r17, r1
    1aee:	15 8b       	std	Z+21, r17	; 0x15
    1af0:	04 8b       	std	Z+20, r16	; 0x14
    1af2:	3a 80       	ldd	r3, Y+2	; 0x02
    1af4:	f4 01       	movw	r30, r8
    1af6:	e7 5c       	subi	r30, 0xC7	; 199
    1af8:	fe 4f       	sbci	r31, 0xFE	; 254
    1afa:	40 81       	ld	r20, Z
    1afc:	51 81       	ldd	r21, Z+1	; 0x01
    1afe:	7b 97       	sbiw	r30, 0x1b	; 27
    1b00:	20 80       	ld	r2, Z
    1b02:	48 3e       	cpi	r20, 0xE8	; 232
    1b04:	f3 e0       	ldi	r31, 0x03	; 3
    1b06:	5f 07       	cpc	r21, r31
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <VL53L0X_GetRangingMeasurementData+0xd4>
    1b0a:	46 c0       	rjmp	.+140    	; 0x1b98 <VL53L0X_GetRangingMeasurementData+0x160>
    1b0c:	24 9f       	mul	r18, r20
    1b0e:	c0 01       	movw	r24, r0
    1b10:	25 9f       	mul	r18, r21
    1b12:	90 0d       	add	r25, r0
    1b14:	34 9f       	mul	r19, r20
    1b16:	90 0d       	add	r25, r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	2c 50       	subi	r18, 0x0C	; 12
    1b1e:	3e 4f       	sbci	r19, 0xFE	; 254
    1b20:	36 95       	lsr	r19
    1b22:	27 95       	ror	r18
    1b24:	36 95       	lsr	r19
    1b26:	27 95       	ror	r18
    1b28:	36 95       	lsr	r19
    1b2a:	27 95       	ror	r18
    1b2c:	a5 ec       	ldi	r26, 0xC5	; 197
    1b2e:	b0 e2       	ldi	r27, 0x20	; 32
    1b30:	0e 94 6b 2c 	call	0x58d6	; 0x58d6 <__umulhisi3>
    1b34:	9c 01       	movw	r18, r24
    1b36:	32 95       	swap	r19
    1b38:	22 95       	swap	r18
    1b3a:	2f 70       	andi	r18, 0x0F	; 15
    1b3c:	23 27       	eor	r18, r19
    1b3e:	3f 70       	andi	r19, 0x0F	; 15
    1b40:	23 27       	eor	r18, r19
    1b42:	d4 01       	movw	r26, r8
    1b44:	5d 96       	adiw	r26, 0x1d	; 29
    1b46:	4d 91       	ld	r20, X+
    1b48:	5d 91       	ld	r21, X+
    1b4a:	6d 91       	ld	r22, X+
    1b4c:	7c 91       	ld	r23, X
    1b4e:	90 97       	sbiw	r26, 0x20	; 32
    1b50:	5a 96       	adiw	r26, 0x1a	; 26
    1b52:	8c 91       	ld	r24, X
    1b54:	88 23       	and	r24, r24
    1b56:	01 f1       	breq	.+64     	; 0x1b98 <VL53L0X_GetRangingMeasurementData+0x160>
    1b58:	04 9f       	mul	r16, r20
    1b5a:	60 01       	movw	r12, r0
    1b5c:	05 9f       	mul	r16, r21
    1b5e:	d0 0c       	add	r13, r0
    1b60:	14 9f       	mul	r17, r20
    1b62:	d0 0c       	add	r13, r0
    1b64:	11 24       	eor	r1, r1
    1b66:	cd 2c       	mov	r12, r13
    1b68:	dd 24       	eor	r13, r13
    1b6a:	e1 2c       	mov	r14, r1
    1b6c:	f1 2c       	mov	r15, r1
    1b6e:	4c 14       	cp	r4, r12
    1b70:	5d 04       	cpc	r5, r13
    1b72:	6e 04       	cpc	r6, r14
    1b74:	7f 04       	cpc	r7, r15
    1b76:	29 f4       	brne	.+10     	; 0x1b82 <VL53L0X_GetRangingMeasurementData+0x14a>
    1b78:	21 10       	cpse	r2, r1
    1b7a:	11 c0       	rjmp	.+34     	; 0x1b9e <VL53L0X_GetRangingMeasurementData+0x166>
    1b7c:	20 ee       	ldi	r18, 0xE0	; 224
    1b7e:	3a e8       	ldi	r19, 0x8A	; 138
    1b80:	1e c0       	rjmp	.+60     	; 0x1bbe <VL53L0X_GetRangingMeasurementData+0x186>
    1b82:	d9 01       	movw	r26, r18
    1b84:	a3 01       	movw	r20, r6
    1b86:	92 01       	movw	r18, r4
    1b88:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    1b8c:	2c 19       	sub	r18, r12
    1b8e:	3d 09       	sbc	r19, r13
    1b90:	4e 09       	sbc	r20, r14
    1b92:	5f 09       	sbc	r21, r15
    1b94:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    1b98:	22 20       	and	r2, r2
    1b9a:	89 f0       	breq	.+34     	; 0x1bbe <VL53L0X_GetRangingMeasurementData+0x186>
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <VL53L0X_GetRangingMeasurementData+0x16a>
    1b9e:	28 eb       	ldi	r18, 0xB8	; 184
    1ba0:	32 e2       	ldi	r19, 0x22	; 34
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	96 95       	lsr	r25
    1baa:	87 95       	ror	r24
    1bac:	f5 01       	movw	r30, r10
    1bae:	91 87       	std	Z+9, r25	; 0x09
    1bb0:	80 87       	std	Z+8, r24	; 0x08
    1bb2:	22 95       	swap	r18
    1bb4:	22 0f       	add	r18, r18
    1bb6:	22 0f       	add	r18, r18
    1bb8:	20 7c       	andi	r18, 0xC0	; 192
    1bba:	27 8b       	std	Z+23, r18	; 0x17
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <VL53L0X_GetRangingMeasurementData+0x194>
    1bbe:	d5 01       	movw	r26, r10
    1bc0:	19 96       	adiw	r26, 0x09	; 9
    1bc2:	3c 93       	st	X, r19
    1bc4:	2e 93       	st	-X, r18
    1bc6:	18 97       	sbiw	r26, 0x08	; 8
    1bc8:	57 96       	adiw	r26, 0x17	; 23
    1bca:	1c 92       	st	X, r1
    1bcc:	fe 01       	movw	r30, r28
    1bce:	31 96       	adiw	r30, 0x01	; 1
    1bd0:	6f 01       	movw	r12, r30
    1bd2:	75 01       	movw	r14, r10
    1bd4:	a3 01       	movw	r20, r6
    1bd6:	92 01       	movw	r18, r4
    1bd8:	63 2d       	mov	r22, r3
    1bda:	c4 01       	movw	r24, r8
    1bdc:	0e 94 07 28 	call	0x500e	; 0x500e <VL53L0X_get_pal_range_status>
    1be0:	81 11       	cpse	r24, r1
    1be2:	4d c0       	rjmp	.+154    	; 0x1c7e <VL53L0X_GetRangingMeasurementData+0x246>
    1be4:	99 81       	ldd	r25, Y+1	; 0x01
    1be6:	d5 01       	movw	r26, r10
    1be8:	58 96       	adiw	r26, 0x18	; 24
    1bea:	9c 93       	st	X, r25
    1bec:	ba e4       	ldi	r27, 0x4A	; 74
    1bee:	8b 0e       	add	r8, r27
    1bf0:	91 1c       	adc	r9, r1
    1bf2:	29 e1       	ldi	r18, 0x19	; 25
    1bf4:	f4 01       	movw	r30, r8
    1bf6:	de 01       	movw	r26, r28
    1bf8:	1e 96       	adiw	r26, 0x0e	; 14
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	0d 92       	st	X+, r0
    1bfe:	2a 95       	dec	r18
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <VL53L0X_GetRangingMeasurementData+0x1c2>
    1c02:	d5 01       	movw	r26, r10
    1c04:	18 96       	adiw	r26, 0x08	; 8
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	19 97       	sbiw	r26, 0x09	; 9
    1c0c:	57 96       	adiw	r26, 0x17	; 23
    1c0e:	3c 90       	ld	r3, X
    1c10:	57 97       	sbiw	r26, 0x17	; 23
    1c12:	1a 96       	adiw	r26, 0x0a	; 10
    1c14:	6d 91       	ld	r22, X+
    1c16:	7c 91       	ld	r23, X
    1c18:	1b 97       	sbiw	r26, 0x0b	; 11
    1c1a:	1c 96       	adiw	r26, 0x0c	; 12
    1c1c:	4d 90       	ld	r4, X+
    1c1e:	5d 90       	ld	r5, X+
    1c20:	6d 90       	ld	r6, X+
    1c22:	7c 90       	ld	r7, X
    1c24:	1f 97       	sbiw	r26, 0x0f	; 15
    1c26:	50 96       	adiw	r26, 0x10	; 16
    1c28:	cd 90       	ld	r12, X+
    1c2a:	dd 90       	ld	r13, X+
    1c2c:	ed 90       	ld	r14, X+
    1c2e:	fc 90       	ld	r15, X
    1c30:	53 97       	sbiw	r26, 0x13	; 19
    1c32:	54 96       	adiw	r26, 0x14	; 20
    1c34:	4d 91       	ld	r20, X+
    1c36:	5c 91       	ld	r21, X
    1c38:	55 97       	sbiw	r26, 0x15	; 21
    1c3a:	14 96       	adiw	r26, 0x04	; 4
    1c3c:	0d 91       	ld	r16, X+
    1c3e:	1d 91       	ld	r17, X+
    1c40:	2d 91       	ld	r18, X+
    1c42:	3c 91       	ld	r19, X
    1c44:	17 97       	sbiw	r26, 0x07	; 7
    1c46:	0a 8b       	std	Y+18, r16	; 0x12
    1c48:	1b 8b       	std	Y+19, r17	; 0x13
    1c4a:	2c 8b       	std	Y+20, r18	; 0x14
    1c4c:	3d 8b       	std	Y+21, r19	; 0x15
    1c4e:	ff 8b       	std	Y+23, r31	; 0x17
    1c50:	ee 8b       	std	Y+22, r30	; 0x16
    1c52:	79 8f       	std	Y+25, r23	; 0x19
    1c54:	68 8f       	std	Y+24, r22	; 0x18
    1c56:	4a 8e       	std	Y+26, r4	; 0x1a
    1c58:	5b 8e       	std	Y+27, r5	; 0x1b
    1c5a:	6c 8e       	std	Y+28, r6	; 0x1c
    1c5c:	7d 8e       	std	Y+29, r7	; 0x1d
    1c5e:	ce 8e       	std	Y+30, r12	; 0x1e
    1c60:	df 8e       	std	Y+31, r13	; 0x1f
    1c62:	e8 a2       	std	Y+32, r14	; 0x20
    1c64:	f9 a2       	std	Y+33, r15	; 0x21
    1c66:	5b a3       	std	Y+35, r21	; 0x23
    1c68:	4a a3       	std	Y+34, r20	; 0x22
    1c6a:	3d a2       	std	Y+37, r3	; 0x25
    1c6c:	9e a3       	std	Y+38, r25	; 0x26
    1c6e:	99 e1       	ldi	r25, 0x19	; 25
    1c70:	fe 01       	movw	r30, r28
    1c72:	3e 96       	adiw	r30, 0x0e	; 14
    1c74:	d4 01       	movw	r26, r8
    1c76:	01 90       	ld	r0, Z+
    1c78:	0d 92       	st	X+, r0
    1c7a:	9a 95       	dec	r25
    1c7c:	e1 f7       	brne	.-8      	; 0x1c76 <VL53L0X_GetRangingMeasurementData+0x23e>
    1c7e:	a6 96       	adiw	r28, 0x26	; 38
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	7f 90       	pop	r7
    1ca4:	6f 90       	pop	r6
    1ca6:	5f 90       	pop	r5
    1ca8:	4f 90       	pop	r4
    1caa:	3f 90       	pop	r3
    1cac:	2f 90       	pop	r2
    1cae:	08 95       	ret

00001cb0 <VL53L0X_GetInterruptThresholds>:
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <VL53L0X_GetInterruptThresholds+0x12>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	8c 01       	movw	r16, r24
    1cc8:	6a 01       	movw	r12, r20
    1cca:	79 01       	movw	r14, r18
    1ccc:	ae 01       	movw	r20, r28
    1cce:	4f 5f       	subi	r20, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	6e e0       	ldi	r22, 0x0E	; 14
    1cd4:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    1cd8:	49 81       	ldd	r20, Y+1	; 0x01
    1cda:	5a 81       	ldd	r21, Y+2	; 0x02
    1cdc:	5f 70       	andi	r21, 0x0F	; 15
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	03 2e       	mov	r0, r19
    1ce4:	31 e1       	ldi	r19, 0x11	; 17
    1ce6:	44 0f       	add	r20, r20
    1ce8:	55 1f       	adc	r21, r21
    1cea:	66 1f       	adc	r22, r22
    1cec:	77 1f       	adc	r23, r23
    1cee:	3a 95       	dec	r19
    1cf0:	d1 f7       	brne	.-12     	; 0x1ce6 <VL53L0X_GetInterruptThresholds+0x36>
    1cf2:	30 2d       	mov	r19, r0
    1cf4:	f6 01       	movw	r30, r12
    1cf6:	40 83       	st	Z, r20
    1cf8:	51 83       	std	Z+1, r21	; 0x01
    1cfa:	62 83       	std	Z+2, r22	; 0x02
    1cfc:	73 83       	std	Z+3, r23	; 0x03
    1cfe:	81 11       	cpse	r24, r1
    1d00:	1a c0       	rjmp	.+52     	; 0x1d36 <VL53L0X_GetInterruptThresholds+0x86>
    1d02:	ae 01       	movw	r20, r28
    1d04:	4f 5f       	subi	r20, 0xFF	; 255
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	6c e0       	ldi	r22, 0x0C	; 12
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    1d10:	49 81       	ldd	r20, Y+1	; 0x01
    1d12:	5a 81       	ldd	r21, Y+2	; 0x02
    1d14:	5f 70       	andi	r21, 0x0F	; 15
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	03 2e       	mov	r0, r19
    1d1c:	31 e1       	ldi	r19, 0x11	; 17
    1d1e:	44 0f       	add	r20, r20
    1d20:	55 1f       	adc	r21, r21
    1d22:	66 1f       	adc	r22, r22
    1d24:	77 1f       	adc	r23, r23
    1d26:	3a 95       	dec	r19
    1d28:	d1 f7       	brne	.-12     	; 0x1d1e <VL53L0X_GetInterruptThresholds+0x6e>
    1d2a:	30 2d       	mov	r19, r0
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	40 83       	st	Z, r20
    1d30:	51 83       	std	Z+1, r21	; 0x01
    1d32:	62 83       	std	Z+2, r22	; 0x02
    1d34:	73 83       	std	Z+3, r23	; 0x03
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <VL53L0X_CheckAndLoadInterruptSettings>:
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	28 97       	sbiw	r28, 0x08	; 8
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	9c 01       	movw	r18, r24
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e2 53       	subi	r30, 0x32	; 50
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	90 81       	ld	r25, Z
    1d70:	91 50       	subi	r25, 0x01	; 1
    1d72:	93 30       	cpi	r25, 0x03	; 3
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
    1d76:	40 c0       	rjmp	.+128    	; 0x1df8 <VL53L0X_CheckAndLoadInterruptSettings+0xac>
    1d78:	16 2f       	mov	r17, r22
    1d7a:	79 01       	movw	r14, r18
    1d7c:	9e 01       	movw	r18, r28
    1d7e:	2b 5f       	subi	r18, 0xFB	; 251
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	ae 01       	movw	r20, r28
    1d84:	4f 5f       	subi	r20, 0xFF	; 255
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	91 df       	rcall	.-222    	; 0x1cb0 <VL53L0X_GetInterruptThresholds>
    1d8e:	49 81       	ldd	r20, Y+1	; 0x01
    1d90:	5a 81       	ldd	r21, Y+2	; 0x02
    1d92:	6b 81       	ldd	r22, Y+3	; 0x03
    1d94:	7c 81       	ldd	r23, Y+4	; 0x04
    1d96:	41 30       	cpi	r20, 0x01	; 1
    1d98:	51 05       	cpc	r21, r1
    1d9a:	6f 4f       	sbci	r22, 0xFF	; 255
    1d9c:	71 05       	cpc	r23, r1
    1d9e:	48 f4       	brcc	.+18     	; 0x1db2 <VL53L0X_CheckAndLoadInterruptSettings+0x66>
    1da0:	4d 81       	ldd	r20, Y+5	; 0x05
    1da2:	5e 81       	ldd	r21, Y+6	; 0x06
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	41 30       	cpi	r20, 0x01	; 1
    1daa:	51 05       	cpc	r21, r1
    1dac:	6f 4f       	sbci	r22, 0xFF	; 255
    1dae:	71 05       	cpc	r23, r1
    1db0:	20 f1       	brcs	.+72     	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1db2:	81 11       	cpse	r24, r1
    1db4:	22 c0       	rjmp	.+68     	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1db6:	11 23       	and	r17, r17
    1db8:	31 f0       	breq	.+12     	; 0x1dc6 <VL53L0X_CheckAndLoadInterruptSettings+0x7a>
    1dba:	62 e0       	ldi	r22, 0x02	; 2
    1dbc:	71 e0       	ldi	r23, 0x01	; 1
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	0e 94 0a 22 	call	0x4414	; 0x4414 <VL53L0X_load_tuning_settings>
    1dc4:	1a c0       	rjmp	.+52     	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1dc6:	44 e0       	ldi	r20, 0x04	; 4
    1dc8:	6f ef       	ldi	r22, 0xFF	; 255
    1dca:	c7 01       	movw	r24, r14
    1dcc:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1dd0:	18 2f       	mov	r17, r24
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	60 e7       	ldi	r22, 0x70	; 112
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1ddc:	18 2b       	or	r17, r24
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	6f ef       	ldi	r22, 0xFF	; 255
    1de2:	c7 01       	movw	r24, r14
    1de4:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1de8:	18 2b       	or	r17, r24
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	60 e8       	ldi	r22, 0x80	; 128
    1dee:	c7 01       	movw	r24, r14
    1df0:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1df4:	81 2b       	or	r24, r17
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	28 96       	adiw	r28, 0x08	; 8
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	08 95       	ret

00001e12 <VL53L0X_StartMeasurement>:
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	1f 92       	push	r1
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	8c 01       	movw	r16, r24
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	f0 88       	ldd	r15, Z+16	; 0x10
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	60 e8       	ldi	r22, 0x80	; 128
    1e32:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	6f ef       	ldi	r22, 0xFF	; 255
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	c8 01       	movw	r24, r16
    1e46:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	e9 5d       	subi	r30, 0xD9	; 217
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e50:	40 81       	ld	r20, Z
    1e52:	61 e9       	ldi	r22, 0x91	; 145
    1e54:	c8 01       	movw	r24, r16
    1e56:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	c8 01       	movw	r24, r16
    1e60:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	6f ef       	ldi	r22, 0xFF	; 255
    1e68:	c8 01       	movw	r24, r16
    1e6a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	60 e8       	ldi	r22, 0x80	; 128
    1e72:	c8 01       	movw	r24, r16
    1e74:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e78:	f1 e0       	ldi	r31, 0x01	; 1
    1e7a:	ff 16       	cp	r15, r31
    1e7c:	d9 f1       	breq	.+118    	; 0x1ef4 <VL53L0X_StartMeasurement+0xe2>
    1e7e:	ff 16       	cp	r15, r31
    1e80:	28 f0       	brcs	.+10     	; 0x1e8c <VL53L0X_StartMeasurement+0x7a>
    1e82:	93 e0       	ldi	r25, 0x03	; 3
    1e84:	f9 16       	cp	r15, r25
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <VL53L0X_StartMeasurement+0x78>
    1e88:	47 c0       	rjmp	.+142    	; 0x1f18 <VL53L0X_StartMeasurement+0x106>
    1e8a:	58 c0       	rjmp	.+176    	; 0x1f3c <VL53L0X_StartMeasurement+0x12a>
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	c8 01       	movw	r24, r16
    1e92:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	99 83       	std	Y+1, r25	; 0x01
    1e9a:	88 23       	and	r24, r24
    1e9c:	71 f0       	breq	.+28     	; 0x1eba <VL53L0X_StartMeasurement+0xa8>
    1e9e:	4f c0       	rjmp	.+158    	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ea0:	c1 14       	cp	r12, r1
    1ea2:	d1 04       	cpc	r13, r1
    1ea4:	e1 04       	cpc	r14, r1
    1ea6:	f1 04       	cpc	r15, r1
    1ea8:	59 f0       	breq	.+22     	; 0x1ec0 <VL53L0X_StartMeasurement+0xae>
    1eaa:	ae 01       	movw	r20, r28
    1eac:	4f 5f       	subi	r20, 0xFF	; 255
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <VL53L0X_StartMeasurement+0xae>
    1eba:	c1 2c       	mov	r12, r1
    1ebc:	d1 2c       	mov	r13, r1
    1ebe:	76 01       	movw	r14, r12
    1ec0:	ef ef       	ldi	r30, 0xFF	; 255
    1ec2:	ce 1a       	sub	r12, r30
    1ec4:	de 0a       	sbc	r13, r30
    1ec6:	ee 0a       	sbc	r14, r30
    1ec8:	fe 0a       	sbc	r15, r30
    1eca:	99 81       	ldd	r25, Y+1	; 0x01
    1ecc:	90 ff       	sbrs	r25, 0
    1ece:	0a c0       	rjmp	.+20     	; 0x1ee4 <VL53L0X_StartMeasurement+0xd2>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	08 c0       	rjmp	.+16     	; 0x1ee4 <VL53L0X_StartMeasurement+0xd2>
    1ed4:	f8 ec       	ldi	r31, 0xC8	; 200
    1ed6:	cf 16       	cp	r12, r31
    1ed8:	d1 04       	cpc	r13, r1
    1eda:	e1 04       	cpc	r14, r1
    1edc:	f1 04       	cpc	r15, r1
    1ede:	01 f7       	brne	.-64     	; 0x1ea0 <VL53L0X_StartMeasurement+0x8e>
    1ee0:	89 ef       	ldi	r24, 0xF9	; 249
    1ee2:	2d c0       	rjmp	.+90     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ee4:	98 ec       	ldi	r25, 0xC8	; 200
    1ee6:	c9 16       	cp	r12, r25
    1ee8:	d1 04       	cpc	r13, r1
    1eea:	e1 04       	cpc	r14, r1
    1eec:	f1 04       	cpc	r15, r1
    1eee:	38 f1       	brcs	.+78     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ef0:	89 ef       	ldi	r24, 0xF9	; 249
    1ef2:	25 c0       	rjmp	.+74     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <VL53L0X_StartMeasurement+0xec>
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	c8 01       	movw	r24, r16
    1efc:	27 df       	rcall	.-434    	; 0x1d4c <VL53L0X_CheckAndLoadInterruptSettings>
    1efe:	42 e0       	ldi	r20, 0x02	; 2
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1f08:	81 11       	cpse	r24, r1
    1f0a:	19 c0       	rjmp	.+50     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	e1 5e       	subi	r30, 0xE1	; 225
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	94 e0       	ldi	r25, 0x04	; 4
    1f14:	90 83       	st	Z, r25
    1f16:	13 c0       	rjmp	.+38     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <VL53L0X_StartMeasurement+0x110>
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	c8 01       	movw	r24, r16
    1f20:	15 df       	rcall	.-470    	; 0x1d4c <VL53L0X_CheckAndLoadInterruptSettings>
    1f22:	44 e0       	ldi	r20, 0x04	; 4
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	c8 01       	movw	r24, r16
    1f28:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	07 c0       	rjmp	.+14     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f30:	f8 01       	movw	r30, r16
    1f32:	e1 5e       	subi	r30, 0xE1	; 225
    1f34:	fe 4f       	sbci	r31, 0xFE	; 254
    1f36:	94 e0       	ldi	r25, 0x04	; 4
    1f38:	90 83       	st	Z, r25
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f3c:	88 ef       	ldi	r24, 0xF8	; 248
    1f3e:	0f 90       	pop	r0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	08 95       	ret

00001f52 <VL53L0X_PerformSingleMeasurement>:
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
    1f5a:	18 89       	ldd	r17, Y+16	; 0x10
    1f5c:	11 11       	cpse	r17, r1
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <VL53L0X_PerformSingleMeasurement+0x16>
    1f60:	58 df       	rcall	.-336    	; 0x1e12 <VL53L0X_StartMeasurement>
    1f62:	81 11       	cpse	r24, r1
    1f64:	12 c0       	rjmp	.+36     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f66:	0c c0       	rjmp	.+24     	; 0x1f80 <VL53L0X_PerformSingleMeasurement+0x2e>
    1f68:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <VL53L0X_measurement_poll_for_completion>
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	0d c0       	rjmp	.+26     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f70:	11 11       	cpse	r17, r1
    1f72:	0b c0       	rjmp	.+22     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f74:	c1 5e       	subi	r28, 0xE1	; 225
    1f76:	de 4f       	sbci	r29, 0xFE	; 254
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	88 83       	st	Y, r24
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f80:	ce 01       	movw	r24, r28
    1f82:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <VL53L0X_measurement_poll_for_completion>
    1f86:	88 23       	and	r24, r24
    1f88:	a9 f3       	breq	.-22     	; 0x1f74 <VL53L0X_PerformSingleMeasurement+0x22>
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	08 95       	ret

00001f92 <VL53L0X_ClearInterruptMask>:
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	1f 92       	push	r1
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	7c 01       	movw	r14, r24
    1fa6:	00 e0       	ldi	r16, 0x00	; 0
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	6b e0       	ldi	r22, 0x0B	; 11
    1fac:	c7 01       	movw	r24, r14
    1fae:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1fb2:	18 2f       	mov	r17, r24
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	6b e0       	ldi	r22, 0x0B	; 11
    1fb8:	c7 01       	movw	r24, r14
    1fba:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    1fbe:	18 2b       	or	r17, r24
    1fc0:	ae 01       	movw	r20, r28
    1fc2:	4f 5f       	subi	r20, 0xFF	; 255
    1fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc6:	63 e1       	ldi	r22, 0x13	; 19
    1fc8:	c7 01       	movw	r24, r14
    1fca:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    1fce:	81 2b       	or	r24, r17
    1fd0:	0f 5f       	subi	r16, 0xFF	; 255
    1fd2:	99 81       	ldd	r25, Y+1	; 0x01
    1fd4:	97 70       	andi	r25, 0x07	; 7
    1fd6:	29 f0       	breq	.+10     	; 0x1fe2 <VL53L0X_ClearInterruptMask+0x50>
    1fd8:	03 30       	cpi	r16, 0x03	; 3
    1fda:	39 f0       	breq	.+14     	; 0x1fea <VL53L0X_ClearInterruptMask+0x58>
    1fdc:	88 23       	and	r24, r24
    1fde:	21 f3       	breq	.-56     	; 0x1fa8 <VL53L0X_ClearInterruptMask+0x16>
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <VL53L0X_ClearInterruptMask+0x5a>
    1fe2:	03 30       	cpi	r16, 0x03	; 3
    1fe4:	18 f0       	brcs	.+6      	; 0x1fec <VL53L0X_ClearInterruptMask+0x5a>
    1fe6:	84 ef       	ldi	r24, 0xF4	; 244
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <VL53L0X_ClearInterruptMask+0x5a>
    1fea:	84 ef       	ldi	r24, 0xF4	; 244
    1fec:	0f 90       	pop	r0
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	08 95       	ret

00001ffc <VL53L0X_PerformSingleRangingMeasurement>:
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	ec 01       	movw	r28, r24
    2006:	8b 01       	movw	r16, r22
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	0e 94 c1 07 	call	0xf82	; 0xf82 <VL53L0X_SetDeviceMode>
    200e:	81 11       	cpse	r24, r1
    2010:	0e c0       	rjmp	.+28     	; 0x202e <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2012:	ce 01       	movw	r24, r28
    2014:	9e df       	rcall	.-196    	; 0x1f52 <VL53L0X_PerformSingleMeasurement>
    2016:	81 11       	cpse	r24, r1
    2018:	0a c0       	rjmp	.+20     	; 0x202e <VL53L0X_PerformSingleRangingMeasurement+0x32>
    201a:	b8 01       	movw	r22, r16
    201c:	ce 01       	movw	r24, r28
    201e:	0c dd       	rcall	.-1512   	; 0x1a38 <VL53L0X_GetRangingMeasurementData>
    2020:	81 11       	cpse	r24, r1
    2022:	05 c0       	rjmp	.+10     	; 0x202e <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	ba 01       	movw	r22, r20
    202a:	ce 01       	movw	r24, r28
    202c:	b2 df       	rcall	.-156    	; 0x1f92 <VL53L0X_ClearInterruptMask>
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <VL53L0X_SetGpioConfig>:
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	61 11       	cpse	r22, r1
    2042:	9b c0       	rjmp	.+310    	; 0x217a <VL53L0X_SetGpioConfig+0x142>
    2044:	12 2f       	mov	r17, r18
    2046:	ec 01       	movw	r28, r24
    2048:	44 31       	cpi	r20, 0x14	; 20
    204a:	51 f4       	brne	.+20     	; 0x2060 <VL53L0X_SetGpioConfig+0x28>
    204c:	00 23       	and	r16, r16
    204e:	11 f0       	breq	.+4      	; 0x2054 <VL53L0X_SetGpioConfig+0x1c>
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <VL53L0X_SetGpioConfig+0x1e>
    2054:	40 e1       	ldi	r20, 0x10	; 16
    2056:	64 e8       	ldi	r22, 0x84	; 132
    2058:	ce 01       	movw	r24, r28
    205a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    205e:	93 c0       	rjmp	.+294    	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    2060:	45 31       	cpi	r20, 0x15	; 21
    2062:	09 f0       	breq	.+2      	; 0x2066 <VL53L0X_SetGpioConfig+0x2e>
    2064:	5a c0       	rjmp	.+180    	; 0x211a <VL53L0X_SetGpioConfig+0xe2>
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	6f ef       	ldi	r22, 0xFF	; 255
    206a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    206e:	18 2f       	mov	r17, r24
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	ce 01       	movw	r24, r28
    2076:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    207a:	18 2b       	or	r17, r24
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	6f ef       	ldi	r22, 0xFF	; 255
    2080:	ce 01       	movw	r24, r28
    2082:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2086:	18 2b       	or	r17, r24
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	60 e8       	ldi	r22, 0x80	; 128
    208c:	ce 01       	movw	r24, r28
    208e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2092:	18 2b       	or	r17, r24
    2094:	42 e0       	ldi	r20, 0x02	; 2
    2096:	65 e8       	ldi	r22, 0x85	; 133
    2098:	ce 01       	movw	r24, r28
    209a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    209e:	18 2b       	or	r17, r24
    20a0:	44 e0       	ldi	r20, 0x04	; 4
    20a2:	6f ef       	ldi	r22, 0xFF	; 255
    20a4:	ce 01       	movw	r24, r28
    20a6:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20aa:	18 2b       	or	r17, r24
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	6d ec       	ldi	r22, 0xCD	; 205
    20b0:	ce 01       	movw	r24, r28
    20b2:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20b6:	18 2b       	or	r17, r24
    20b8:	41 e1       	ldi	r20, 0x11	; 17
    20ba:	6c ec       	ldi	r22, 0xCC	; 204
    20bc:	ce 01       	movw	r24, r28
    20be:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20c2:	18 2b       	or	r17, r24
    20c4:	47 e0       	ldi	r20, 0x07	; 7
    20c6:	6f ef       	ldi	r22, 0xFF	; 255
    20c8:	ce 01       	movw	r24, r28
    20ca:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20ce:	18 2b       	or	r17, r24
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	6e eb       	ldi	r22, 0xBE	; 190
    20d4:	ce 01       	movw	r24, r28
    20d6:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20da:	18 2b       	or	r17, r24
    20dc:	46 e0       	ldi	r20, 0x06	; 6
    20de:	6f ef       	ldi	r22, 0xFF	; 255
    20e0:	ce 01       	movw	r24, r28
    20e2:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20e6:	18 2b       	or	r17, r24
    20e8:	49 e0       	ldi	r20, 0x09	; 9
    20ea:	6c ec       	ldi	r22, 0xCC	; 204
    20ec:	ce 01       	movw	r24, r28
    20ee:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20f2:	18 2b       	or	r17, r24
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	6f ef       	ldi	r22, 0xFF	; 255
    20f8:	ce 01       	movw	r24, r28
    20fa:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    20fe:	18 2b       	or	r17, r24
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	6f ef       	ldi	r22, 0xFF	; 255
    2104:	ce 01       	movw	r24, r28
    2106:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    210a:	18 2b       	or	r17, r24
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	ce 01       	movw	r24, r28
    2112:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2116:	81 2b       	or	r24, r17
    2118:	36 c0       	rjmp	.+108    	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    211a:	22 30       	cpi	r18, 0x02	; 2
    211c:	59 f0       	breq	.+22     	; 0x2134 <VL53L0X_SetGpioConfig+0xfc>
    211e:	28 f4       	brcc	.+10     	; 0x212a <VL53L0X_SetGpioConfig+0xf2>
    2120:	22 23       	and	r18, r18
    2122:	61 f0       	breq	.+24     	; 0x213c <VL53L0X_SetGpioConfig+0x104>
    2124:	21 30       	cpi	r18, 0x01	; 1
    2126:	59 f1       	breq	.+86     	; 0x217e <VL53L0X_SetGpioConfig+0x146>
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <VL53L0X_SetGpioConfig+0x110>
    212a:	23 30       	cpi	r18, 0x03	; 3
    212c:	51 f1       	breq	.+84     	; 0x2182 <VL53L0X_SetGpioConfig+0x14a>
    212e:	24 30       	cpi	r18, 0x04	; 4
    2130:	19 f0       	breq	.+6      	; 0x2138 <VL53L0X_SetGpioConfig+0x100>
    2132:	0a c0       	rjmp	.+20     	; 0x2148 <VL53L0X_SetGpioConfig+0x110>
    2134:	42 e0       	ldi	r20, 0x02	; 2
    2136:	03 c0       	rjmp	.+6      	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    2138:	44 e0       	ldi	r20, 0x04	; 4
    213a:	01 c0       	rjmp	.+2      	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	6a e0       	ldi	r22, 0x0A	; 10
    2140:	ce 01       	movw	r24, r28
    2142:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2146:	01 c0       	rjmp	.+2      	; 0x214a <VL53L0X_SetGpioConfig+0x112>
    2148:	85 ef       	ldi	r24, 0xF5	; 245
    214a:	81 11       	cpse	r24, r1
    214c:	1c c0       	rjmp	.+56     	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    214e:	00 23       	and	r16, r16
    2150:	11 f0       	breq	.+4      	; 0x2156 <VL53L0X_SetGpioConfig+0x11e>
    2152:	20 e1       	ldi	r18, 0x10	; 16
    2154:	01 c0       	rjmp	.+2      	; 0x2158 <VL53L0X_SetGpioConfig+0x120>
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	4f ee       	ldi	r20, 0xEF	; 239
    215a:	64 e8       	ldi	r22, 0x84	; 132
    215c:	ce 01       	movw	r24, r28
    215e:	0e 94 bc 2b 	call	0x5778	; 0x5778 <VL53L0X_UpdateByte>
    2162:	81 11       	cpse	r24, r1
    2164:	10 c0       	rjmp	.+32     	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    2166:	fe 01       	movw	r30, r28
    2168:	e2 53       	subi	r30, 0x32	; 50
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	10 83       	st	Z, r17
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	ba 01       	movw	r22, r20
    2174:	ce 01       	movw	r24, r28
    2176:	0d df       	rcall	.-486    	; 0x1f92 <VL53L0X_ClearInterruptMask>
    2178:	06 c0       	rjmp	.+12     	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    217a:	86 ef       	ldi	r24, 0xF6	; 246
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	de cf       	rjmp	.-68     	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    2182:	43 e0       	ldi	r20, 0x03	; 3
    2184:	dc cf       	rjmp	.-72     	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <VL53L0X_StaticInit>:
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	c7 54       	subi	r28, 0x47	; 71
    21a2:	d1 09       	sbc	r29, r1
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	7c 01       	movw	r14, r24
    21b0:	fe 01       	movw	r30, r28
    21b2:	31 96       	adiw	r30, 0x01	; 1
    21b4:	8a e3       	ldi	r24, 0x3A	; 58
    21b6:	df 01       	movw	r26, r30
    21b8:	1d 92       	st	X+, r1
    21ba:	8a 95       	dec	r24
    21bc:	e9 f7       	brne	.-6      	; 0x21b8 <VL53L0X_StaticInit+0x28>
    21be:	1c ae       	std	Y+60, r1	; 0x3c
    21c0:	1b ae       	std	Y+59, r1	; 0x3b
    21c2:	1d ae       	std	Y+61, r1	; 0x3d
    21c4:	1e ae       	std	Y+62, r1	; 0x3e
    21c6:	23 96       	adiw	r28, 0x03	; 3
    21c8:	1c ae       	std	Y+60, r1	; 0x3c
    21ca:	1d ae       	std	Y+61, r1	; 0x3d
    21cc:	1e ae       	std	Y+62, r1	; 0x3e
    21ce:	1f ae       	std	Y+63, r1	; 0x3f
    21d0:	23 97       	sbiw	r28, 0x03	; 3
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	c7 01       	movw	r24, r14
    21d6:	0e 94 cc 19 	call	0x3398	; 0x3398 <VL53L0X_get_info_from_device>
    21da:	f7 01       	movw	r30, r14
    21dc:	ed 5f       	subi	r30, 0xFD	; 253
    21de:	fe 4f       	sbci	r31, 0xFE	; 254
    21e0:	20 81       	ld	r18, Z
    21e2:	22 30       	cpi	r18, 0x02	; 2
    21e4:	a0 f4       	brcc	.+40     	; 0x220e <VL53L0X_StaticInit+0x7e>
    21e6:	31 97       	sbiw	r30, 0x01	; 1
    21e8:	40 81       	ld	r20, Z
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	21 30       	cpi	r18, 0x01	; 1
    21f2:	31 f4       	brne	.+12     	; 0x2200 <VL53L0X_StaticInit+0x70>
    21f4:	41 32       	cpi	r20, 0x21	; 33
    21f6:	51 05       	cpc	r21, r1
    21f8:	61 05       	cpc	r22, r1
    21fa:	71 05       	cpc	r23, r1
    21fc:	40 f4       	brcc	.+16     	; 0x220e <VL53L0X_StaticInit+0x7e>
    21fe:	10 c0       	rjmp	.+32     	; 0x2220 <VL53L0X_StaticInit+0x90>
    2200:	21 11       	cpse	r18, r1
    2202:	0e c0       	rjmp	.+28     	; 0x2220 <VL53L0X_StaticInit+0x90>
    2204:	4d 30       	cpi	r20, 0x0D	; 13
    2206:	51 05       	cpc	r21, r1
    2208:	61 05       	cpc	r22, r1
    220a:	71 05       	cpc	r23, r1
    220c:	48 f0       	brcs	.+18     	; 0x2220 <VL53L0X_StaticInit+0x90>
    220e:	ae 01       	movw	r20, r28
    2210:	42 5c       	subi	r20, 0xC2	; 194
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	be 01       	movw	r22, r28
    2216:	61 5c       	subi	r22, 0xC1	; 193
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	c7 01       	movw	r24, r14
    221c:	b5 d5       	rcall	.+2922   	; 0x2d88 <VL53L0X_perform_ref_spad_management>
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <VL53L0X_StaticInit+0x94>
    2220:	c7 01       	movw	r24, r14
    2222:	a3 d3       	rcall	.+1862   	; 0x296a <VL53L0X_set_reference_spads>
    2224:	81 11       	cpse	r24, r1
    2226:	26 c0       	rjmp	.+76     	; 0x2274 <VL53L0X_StaticInit+0xe4>
    2228:	f7 01       	movw	r30, r14
    222a:	e8 5c       	subi	r30, 0xC8	; 200
    222c:	fe 4f       	sbci	r31, 0xFE	; 254
    222e:	80 81       	ld	r24, Z
    2230:	81 11       	cpse	r24, r1
    2232:	be c0       	rjmp	.+380    	; 0x23b0 <VL53L0X_StaticInit+0x220>
    2234:	32 97       	sbiw	r30, 0x02	; 2
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	bc c0       	rjmp	.+376    	; 0x23b4 <VL53L0X_StaticInit+0x224>
    223c:	00 e0       	ldi	r16, 0x00	; 0
    223e:	24 e0       	ldi	r18, 0x04	; 4
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	c7 01       	movw	r24, r14
    2246:	f8 de       	rcall	.-528    	; 0x2038 <VL53L0X_SetGpioConfig>
    2248:	81 11       	cpse	r24, r1
    224a:	6c c0       	rjmp	.+216    	; 0x2324 <VL53L0X_StaticInit+0x194>
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	6f ef       	ldi	r22, 0xFF	; 255
    2250:	c7 01       	movw	r24, r14
    2252:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2256:	18 2f       	mov	r17, r24
    2258:	ae 01       	movw	r20, r28
    225a:	45 5c       	subi	r20, 0xC5	; 197
    225c:	5f 4f       	sbci	r21, 0xFF	; 255
    225e:	64 e8       	ldi	r22, 0x84	; 132
    2260:	c7 01       	movw	r24, r14
    2262:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    2266:	18 2b       	or	r17, r24
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	c7 01       	movw	r24, r14
    226e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2272:	81 2b       	or	r24, r17
    2274:	81 11       	cpse	r24, r1
    2276:	a5 c0       	rjmp	.+330    	; 0x23c2 <VL53L0X_StaticInit+0x232>
    2278:	f7 01       	movw	r30, r14
    227a:	e8 53       	subi	r30, 0x38	; 56
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2280:	9c ad       	ldd	r25, Y+60	; 0x3c
    2282:	82 95       	swap	r24
    2284:	92 95       	swap	r25
    2286:	90 7f       	andi	r25, 0xF0	; 240
    2288:	98 27       	eor	r25, r24
    228a:	80 7f       	andi	r24, 0xF0	; 240
    228c:	98 27       	eor	r25, r24
    228e:	a0 e0       	ldi	r26, 0x00	; 0
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	80 83       	st	Z, r24
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	a2 83       	std	Z+2, r26	; 0x02
    2298:	b3 83       	std	Z+3, r27	; 0x03
    229a:	be 01       	movw	r22, r28
    229c:	6f 5f       	subi	r22, 0xFF	; 255
    229e:	7f 4f       	sbci	r23, 0xFF	; 255
    22a0:	c7 01       	movw	r24, r14
    22a2:	38 da       	rcall	.-2960   	; 0x1714 <VL53L0X_GetDeviceParameters>
    22a4:	81 11       	cpse	r24, r1
    22a6:	29 c0       	rjmp	.+82     	; 0x22fa <VL53L0X_StaticInit+0x16a>
    22a8:	be 01       	movw	r22, r28
    22aa:	63 5c       	subi	r22, 0xC3	; 195
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
    22ae:	c7 01       	movw	r24, r14
    22b0:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <VL53L0X_GetFractionEnable>
    22b4:	81 11       	cpse	r24, r1
    22b6:	21 c0       	rjmp	.+66     	; 0x22fa <VL53L0X_StaticInit+0x16a>
    22b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ba:	f7 01       	movw	r30, r14
    22bc:	e2 5e       	subi	r30, 0xE2	; 226
    22be:	fe 4f       	sbci	r31, 0xFE	; 254
    22c0:	80 83       	st	Z, r24
    22c2:	8a e3       	ldi	r24, 0x3A	; 58
    22c4:	fe 01       	movw	r30, r28
    22c6:	31 96       	adiw	r30, 0x01	; 1
    22c8:	d7 01       	movw	r26, r14
    22ca:	50 96       	adiw	r26, 0x10	; 16
    22cc:	01 90       	ld	r0, Z+
    22ce:	0d 92       	st	X+, r0
    22d0:	8a 95       	dec	r24
    22d2:	e1 f7       	brne	.-8      	; 0x22cc <VL53L0X_StaticInit+0x13c>
    22d4:	ae 01       	movw	r20, r28
    22d6:	43 5c       	subi	r20, 0xC3	; 195
    22d8:	5f 4f       	sbci	r21, 0xFF	; 255
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	c7 01       	movw	r24, r14
    22de:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    22e2:	81 11       	cpse	r24, r1
    22e4:	71 c0       	rjmp	.+226    	; 0x23c8 <VL53L0X_StaticInit+0x238>
    22e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22e8:	f7 01       	movw	r30, r14
    22ea:	e3 5e       	subi	r30, 0xE3	; 227
    22ec:	fe 4f       	sbci	r31, 0xFE	; 254
    22ee:	80 83       	st	Z, r24
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	c7 01       	movw	r24, r14
    22f6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <VL53L0X_SetSequenceStepEnable>
    22fa:	81 11       	cpse	r24, r1
    22fc:	65 c0       	rjmp	.+202    	; 0x23c8 <VL53L0X_StaticInit+0x238>
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	62 e0       	ldi	r22, 0x02	; 2
    2302:	c7 01       	movw	r24, r14
    2304:	0e 94 e6 07 	call	0xfcc	; 0xfcc <VL53L0X_SetSequenceStepEnable>
    2308:	81 11       	cpse	r24, r1
    230a:	1c c0       	rjmp	.+56     	; 0x2344 <VL53L0X_StaticInit+0x1b4>
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	f7 01       	movw	r30, r14
    2310:	e1 5e       	subi	r30, 0xE1	; 225
    2312:	fe 4f       	sbci	r31, 0xFE	; 254
    2314:	80 83       	st	Z, r24
    2316:	ae 01       	movw	r20, r28
    2318:	4d 5b       	subi	r20, 0xBD	; 189
    231a:	5f 4f       	sbci	r21, 0xFF	; 255
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	c7 01       	movw	r24, r14
    2320:	0e 94 03 20 	call	0x4006	; 0x4006 <VL53L0X_get_vcsel_pulse_period>
    2324:	81 11       	cpse	r24, r1
    2326:	1e c0       	rjmp	.+60     	; 0x2364 <VL53L0X_StaticInit+0x1d4>
    2328:	24 96       	adiw	r28, 0x04	; 4
    232a:	8f ad       	ldd	r24, Y+63	; 0x3f
    232c:	24 97       	sbiw	r28, 0x04	; 4
    232e:	f7 01       	movw	r30, r14
    2330:	e8 52       	subi	r30, 0x28	; 40
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 83       	st	Z, r24
    2336:	ae 01       	movw	r20, r28
    2338:	4d 5b       	subi	r20, 0xBD	; 189
    233a:	5f 4f       	sbci	r21, 0xFF	; 255
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	c7 01       	movw	r24, r14
    2340:	0e 94 03 20 	call	0x4006	; 0x4006 <VL53L0X_get_vcsel_pulse_period>
    2344:	81 11       	cpse	r24, r1
    2346:	24 c0       	rjmp	.+72     	; 0x2390 <VL53L0X_StaticInit+0x200>
    2348:	24 96       	adiw	r28, 0x04	; 4
    234a:	8f ad       	ldd	r24, Y+63	; 0x3f
    234c:	24 97       	sbiw	r28, 0x04	; 4
    234e:	f7 01       	movw	r30, r14
    2350:	ed 52       	subi	r30, 0x2D	; 45
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 83       	st	Z, r24
    2356:	ae 01       	movw	r20, r28
    2358:	4c 5b       	subi	r20, 0xBC	; 188
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	63 e0       	ldi	r22, 0x03	; 3
    235e:	c7 01       	movw	r24, r14
    2360:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <VL53L0X_GetSequenceStepTimeout>
    2364:	81 11       	cpse	r24, r1
    2366:	30 c0       	rjmp	.+96     	; 0x23c8 <VL53L0X_StaticInit+0x238>
    2368:	28 96       	adiw	r28, 0x08	; 8
    236a:	8c ad       	ldd	r24, Y+60	; 0x3c
    236c:	9d ad       	ldd	r25, Y+61	; 0x3d
    236e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2370:	bf ad       	ldd	r27, Y+63	; 0x3f
    2372:	28 97       	sbiw	r28, 0x08	; 8
    2374:	f7 01       	movw	r30, r14
    2376:	ec 52       	subi	r30, 0x2C	; 44
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 83       	st	Z, r24
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	a2 83       	std	Z+2, r26	; 0x02
    2380:	b3 83       	std	Z+3, r27	; 0x03
    2382:	ae 01       	movw	r20, r28
    2384:	4c 5b       	subi	r20, 0xBC	; 188
    2386:	5f 4f       	sbci	r21, 0xFF	; 255
    2388:	64 e0       	ldi	r22, 0x04	; 4
    238a:	c7 01       	movw	r24, r14
    238c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <VL53L0X_GetSequenceStepTimeout>
    2390:	81 11       	cpse	r24, r1
    2392:	1a c0       	rjmp	.+52     	; 0x23c8 <VL53L0X_StaticInit+0x238>
    2394:	f7 01       	movw	r30, r14
    2396:	e1 53       	subi	r30, 0x31	; 49
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	28 96       	adiw	r28, 0x08	; 8
    239c:	4c ad       	ldd	r20, Y+60	; 0x3c
    239e:	5d ad       	ldd	r21, Y+61	; 0x3d
    23a0:	6e ad       	ldd	r22, Y+62	; 0x3e
    23a2:	7f ad       	ldd	r23, Y+63	; 0x3f
    23a4:	28 97       	sbiw	r28, 0x08	; 8
    23a6:	40 83       	st	Z, r20
    23a8:	51 83       	std	Z+1, r21	; 0x01
    23aa:	62 83       	std	Z+2, r22	; 0x02
    23ac:	73 83       	std	Z+3, r23	; 0x03
    23ae:	0c c0       	rjmp	.+24     	; 0x23c8 <VL53L0X_StaticInit+0x238>
    23b0:	68 eb       	ldi	r22, 0xB8	; 184
    23b2:	72 e0       	ldi	r23, 0x02	; 2
    23b4:	c7 01       	movw	r24, r14
    23b6:	0e 94 0a 22 	call	0x4414	; 0x4414 <VL53L0X_load_tuning_settings>
    23ba:	88 23       	and	r24, r24
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <VL53L0X_StaticInit+0x230>
    23be:	3e cf       	rjmp	.-388    	; 0x223c <VL53L0X_StaticInit+0xac>
    23c0:	71 cf       	rjmp	.-286    	; 0x22a4 <VL53L0X_StaticInit+0x114>
    23c2:	88 23       	and	r24, r24
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <VL53L0X_StaticInit+0x238>
    23c6:	86 cf       	rjmp	.-244    	; 0x22d4 <VL53L0X_StaticInit+0x144>
    23c8:	c9 5b       	subi	r28, 0xB9	; 185
    23ca:	df 4f       	sbci	r29, 0xFF	; 255
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	08 95       	ret

000023e4 <VL53L0X_GetInterruptMaskStatus>:
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	1f 92       	push	r1
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	8b 01       	movw	r16, r22
    23f4:	ae 01       	movw	r20, r28
    23f6:	4f 5f       	subi	r20, 0xFF	; 255
    23f8:	5f 4f       	sbci	r21, 0xFF	; 255
    23fa:	63 e1       	ldi	r22, 0x13	; 19
    23fc:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    2400:	99 81       	ldd	r25, Y+1	; 0x01
    2402:	49 2f       	mov	r20, r25
    2404:	47 70       	andi	r20, 0x07	; 7
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	f8 01       	movw	r30, r16
    240e:	40 83       	st	Z, r20
    2410:	51 83       	std	Z+1, r21	; 0x01
    2412:	62 83       	std	Z+2, r22	; 0x02
    2414:	73 83       	std	Z+3, r23	; 0x03
    2416:	98 71       	andi	r25, 0x18	; 24
    2418:	09 f0       	breq	.+2      	; 0x241c <VL53L0X_GetInterruptMaskStatus+0x38>
    241a:	8a ef       	ldi	r24, 0xFA	; 250
    241c:	0f 90       	pop	r0
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <VL53L0X_GetMeasurementDataReady>:
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	00 d0       	rcall	.+0      	; 0x2432 <VL53L0X_GetMeasurementDataReady+0xa>
    2432:	00 d0       	rcall	.+0      	; 0x2434 <VL53L0X_GetMeasurementDataReady+0xc>
    2434:	1f 92       	push	r1
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	8b 01       	movw	r16, r22
    243c:	fc 01       	movw	r30, r24
    243e:	e2 53       	subi	r30, 0x32	; 50
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	20 81       	ld	r18, Z
    2444:	24 30       	cpi	r18, 0x04	; 4
    2446:	a1 f4       	brne	.+40     	; 0x2470 <VL53L0X_GetMeasurementDataReady+0x48>
    2448:	be 01       	movw	r22, r28
    244a:	6e 5f       	subi	r22, 0xFE	; 254
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	ca df       	rcall	.-108    	; 0x23e4 <VL53L0X_GetInterruptMaskStatus>
    2450:	4a 81       	ldd	r20, Y+2	; 0x02
    2452:	5b 81       	ldd	r21, Y+3	; 0x03
    2454:	6c 81       	ldd	r22, Y+4	; 0x04
    2456:	7d 81       	ldd	r23, Y+5	; 0x05
    2458:	44 30       	cpi	r20, 0x04	; 4
    245a:	51 05       	cpc	r21, r1
    245c:	61 05       	cpc	r22, r1
    245e:	71 05       	cpc	r23, r1
    2460:	21 f4       	brne	.+8      	; 0x246a <VL53L0X_GetMeasurementDataReady+0x42>
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	f8 01       	movw	r30, r16
    2466:	90 83       	st	Z, r25
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    246a:	f8 01       	movw	r30, r16
    246c:	10 82       	st	Z, r1
    246e:	11 c0       	rjmp	.+34     	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    2470:	ae 01       	movw	r20, r28
    2472:	4f 5f       	subi	r20, 0xFF	; 255
    2474:	5f 4f       	sbci	r21, 0xFF	; 255
    2476:	64 e1       	ldi	r22, 0x14	; 20
    2478:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    247c:	81 11       	cpse	r24, r1
    247e:	09 c0       	rjmp	.+18     	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    2480:	99 81       	ldd	r25, Y+1	; 0x01
    2482:	90 ff       	sbrs	r25, 0
    2484:	04 c0       	rjmp	.+8      	; 0x248e <VL53L0X_GetMeasurementDataReady+0x66>
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	f8 01       	movw	r30, r16
    248a:	90 83       	st	Z, r25
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    248e:	f8 01       	movw	r30, r16
    2490:	10 82       	st	Z, r1
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	08 95       	ret

000024a6 <VL53L0X_PerformRefSpadManagement>:

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
    24a6:	70 c4       	rjmp	.+2272   	; 0x2d88 <VL53L0X_perform_ref_spad_management>
    24a8:	08 95       	ret

000024aa <VL53L0X_get_offset_calibration_data_micro_meter>:
			}
		}
	}

	return Status;
}
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <VL53L0X_get_offset_calibration_data_micro_meter+0xa>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	8b 01       	movw	r16, r22
    24ba:	ae 01       	movw	r20, r28
    24bc:	4f 5f       	subi	r20, 0xFF	; 255
    24be:	5f 4f       	sbci	r21, 0xFF	; 255
    24c0:	68 e2       	ldi	r22, 0x28	; 40
    24c2:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    24c6:	81 11       	cpse	r24, r1
    24c8:	27 c0       	rjmp	.+78     	; 0x2518 <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    24ca:	29 81       	ldd	r18, Y+1	; 0x01
    24cc:	3a 81       	ldd	r19, Y+2	; 0x02
    24ce:	3f 70       	andi	r19, 0x0F	; 15
    24d0:	21 15       	cp	r18, r1
    24d2:	98 e0       	ldi	r25, 0x08	; 8
    24d4:	39 07       	cpc	r19, r25
    24d6:	88 f0       	brcs	.+34     	; 0x24fa <VL53L0X_get_offset_calibration_data_micro_meter+0x50>
    24d8:	30 51       	subi	r19, 0x10	; 16
    24da:	9a ef       	ldi	r25, 0xFA	; 250
    24dc:	92 9f       	mul	r25, r18
    24de:	a0 01       	movw	r20, r0
    24e0:	93 9f       	mul	r25, r19
    24e2:	50 0d       	add	r21, r0
    24e4:	11 24       	eor	r1, r1
    24e6:	05 2e       	mov	r0, r21
    24e8:	00 0c       	add	r0, r0
    24ea:	66 0b       	sbc	r22, r22
    24ec:	77 0b       	sbc	r23, r23
    24ee:	f8 01       	movw	r30, r16
    24f0:	40 83       	st	Z, r20
    24f2:	51 83       	std	Z+1, r21	; 0x01
    24f4:	62 83       	std	Z+2, r22	; 0x02
    24f6:	73 83       	std	Z+3, r23	; 0x03
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    24fa:	9a ef       	ldi	r25, 0xFA	; 250
    24fc:	92 9f       	mul	r25, r18
    24fe:	a0 01       	movw	r20, r0
    2500:	93 9f       	mul	r25, r19
    2502:	50 0d       	add	r21, r0
    2504:	11 24       	eor	r1, r1
    2506:	05 2e       	mov	r0, r21
    2508:	00 0c       	add	r0, r0
    250a:	66 0b       	sbc	r22, r22
    250c:	77 0b       	sbc	r23, r23
    250e:	f8 01       	movw	r30, r16
    2510:	40 83       	st	Z, r20
    2512:	51 83       	std	Z+1, r21	; 0x01
    2514:	62 83       	std	Z+2, r22	; 0x02
    2516:	73 83       	std	Z+3, r23	; 0x03
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <get_next_good_spad>:
    2526:	7f 92       	push	r7
    2528:	8f 92       	push	r8
    252a:	9f 92       	push	r9
    252c:	af 92       	push	r10
    252e:	bf 92       	push	r11
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	e7 01       	movw	r28, r14
    2542:	cc 24       	eor	r12, r12
    2544:	ca 94       	dec	r12
    2546:	dc 2c       	mov	r13, r12
    2548:	76 01       	movw	r14, r12
    254a:	c8 82       	st	Y, r12
    254c:	d9 82       	std	Y+1, r13	; 0x01
    254e:	ea 82       	std	Y+2, r14	; 0x02
    2550:	fb 82       	std	Y+3, r15	; 0x03
    2552:	68 01       	movw	r12, r16
    2554:	79 01       	movw	r14, r18
    2556:	68 94       	set
    2558:	12 f8       	bld	r1, 2
    255a:	f6 94       	lsr	r15
    255c:	e7 94       	ror	r14
    255e:	d7 94       	ror	r13
    2560:	c7 94       	ror	r12
    2562:	16 94       	lsr	r1
    2564:	d1 f7       	brne	.-12     	; 0x255a <get_next_good_spad+0x34>
    2566:	48 01       	movw	r8, r16
    2568:	59 01       	movw	r10, r18
    256a:	e7 e0       	ldi	r30, 0x07	; 7
    256c:	8e 22       	and	r8, r30
    256e:	99 24       	eor	r9, r9
    2570:	aa 24       	eor	r10, r10
    2572:	bb 24       	eor	r11, r11
    2574:	c4 16       	cp	r12, r20
    2576:	d5 06       	cpc	r13, r21
    2578:	e6 06       	cpc	r14, r22
    257a:	f7 06       	cpc	r15, r23
    257c:	08 f0       	brcs	.+2      	; 0x2580 <get_next_good_spad+0x5a>
    257e:	47 c0       	rjmp	.+142    	; 0x260e <get_next_good_spad+0xe8>
    2580:	fc 01       	movw	r30, r24
    2582:	ec 0d       	add	r30, r12
    2584:	fd 1d       	adc	r31, r13
    2586:	d7 01       	movw	r26, r14
    2588:	c6 01       	movw	r24, r12
    258a:	71 90       	ld	r7, Z+
    258c:	c8 16       	cp	r12, r24
    258e:	d9 06       	cpc	r13, r25
    2590:	ea 06       	cpc	r14, r26
    2592:	fb 06       	cpc	r15, r27
    2594:	61 f4       	brne	.+24     	; 0x25ae <get_next_good_spad+0x88>
    2596:	27 2d       	mov	r18, r7
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	08 2c       	mov	r0, r8
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <get_next_good_spad+0x7c>
    259e:	35 95       	asr	r19
    25a0:	27 95       	ror	r18
    25a2:	0a 94       	dec	r0
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <get_next_good_spad+0x78>
    25a6:	72 2e       	mov	r7, r18
    25a8:	95 01       	movw	r18, r10
    25aa:	84 01       	movw	r16, r8
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <get_next_good_spad+0x8e>
    25ae:	00 e0       	ldi	r16, 0x00	; 0
    25b0:	10 e0       	ldi	r17, 0x00	; 0
    25b2:	98 01       	movw	r18, r16
    25b4:	70 fe       	sbrs	r7, 0
    25b6:	18 c0       	rjmp	.+48     	; 0x25e8 <get_next_good_spad+0xc2>
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <get_next_good_spad+0x98>
    25ba:	70 fe       	sbrs	r7, 0
    25bc:	15 c0       	rjmp	.+42     	; 0x25e8 <get_next_good_spad+0xc2>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	aa 1f       	adc	r26, r26
    25c4:	bb 1f       	adc	r27, r27
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	aa 1f       	adc	r26, r26
    25cc:	bb 1f       	adc	r27, r27
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	aa 1f       	adc	r26, r26
    25d4:	bb 1f       	adc	r27, r27
    25d6:	08 0f       	add	r16, r24
    25d8:	19 1f       	adc	r17, r25
    25da:	2a 1f       	adc	r18, r26
    25dc:	3b 1f       	adc	r19, r27
    25de:	08 83       	st	Y, r16
    25e0:	19 83       	std	Y+1, r17	; 0x01
    25e2:	2a 83       	std	Y+2, r18	; 0x02
    25e4:	3b 83       	std	Y+3, r19	; 0x03
    25e6:	13 c0       	rjmp	.+38     	; 0x260e <get_next_good_spad+0xe8>
    25e8:	76 94       	lsr	r7
    25ea:	0f 5f       	subi	r16, 0xFF	; 255
    25ec:	1f 4f       	sbci	r17, 0xFF	; 255
    25ee:	2f 4f       	sbci	r18, 0xFF	; 255
    25f0:	3f 4f       	sbci	r19, 0xFF	; 255
    25f2:	08 30       	cpi	r16, 0x08	; 8
    25f4:	11 05       	cpc	r17, r1
    25f6:	21 05       	cpc	r18, r1
    25f8:	31 05       	cpc	r19, r1
    25fa:	f8 f2       	brcs	.-66     	; 0x25ba <get_next_good_spad+0x94>
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	a1 1d       	adc	r26, r1
    2600:	b1 1d       	adc	r27, r1
    2602:	84 17       	cp	r24, r20
    2604:	95 07       	cpc	r25, r21
    2606:	a6 07       	cpc	r26, r22
    2608:	b7 07       	cpc	r27, r23
    260a:	08 f4       	brcc	.+2      	; 0x260e <get_next_good_spad+0xe8>
    260c:	be cf       	rjmp	.-132    	; 0x258a <get_next_good_spad+0x64>
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	ff 90       	pop	r15
    2618:	ef 90       	pop	r14
    261a:	df 90       	pop	r13
    261c:	cf 90       	pop	r12
    261e:	bf 90       	pop	r11
    2620:	af 90       	pop	r10
    2622:	9f 90       	pop	r9
    2624:	8f 90       	pop	r8
    2626:	7f 90       	pop	r7
    2628:	08 95       	ret

0000262a <is_aperture>:
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	68 94       	set
    2630:	15 f8       	bld	r1, 5
    2632:	b6 95       	lsr	r27
    2634:	a7 95       	ror	r26
    2636:	97 95       	ror	r25
    2638:	87 95       	ror	r24
    263a:	16 94       	lsr	r1
    263c:	d1 f7       	brne	.-12     	; 0x2632 <is_aperture+0x8>
    263e:	bc 01       	movw	r22, r24
    2640:	66 0f       	add	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	66 0f       	add	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	fb 01       	movw	r30, r22
    264a:	e5 55       	subi	r30, 0x55	; 85
    264c:	fc 4f       	sbci	r31, 0xFC	; 252
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	40 81       	ld	r20, Z
    2652:	51 81       	ldd	r21, Z+1	; 0x01
    2654:	62 81       	ldd	r22, Z+2	; 0x02
    2656:	73 81       	ldd	r23, Z+3	; 0x03
    2658:	45 2b       	or	r20, r21
    265a:	46 2b       	or	r20, r22
    265c:	47 2b       	or	r20, r23
    265e:	09 f4       	brne	.+2      	; 0x2662 <is_aperture+0x38>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	08 95       	ret

00002664 <enable_spad_bit>:
    2664:	cf 92       	push	r12
    2666:	df 92       	push	r13
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	68 01       	movw	r12, r16
    2672:	79 01       	movw	r14, r18
    2674:	68 94       	set
    2676:	12 f8       	bld	r1, 2
    2678:	f6 94       	lsr	r15
    267a:	e7 94       	ror	r14
    267c:	d7 94       	ror	r13
    267e:	c7 94       	ror	r12
    2680:	16 94       	lsr	r1
    2682:	d1 f7       	brne	.-12     	; 0x2678 <enable_spad_bit+0x14>
    2684:	07 70       	andi	r16, 0x07	; 7
    2686:	11 27       	eor	r17, r17
    2688:	22 27       	eor	r18, r18
    268a:	33 27       	eor	r19, r19
    268c:	c4 16       	cp	r12, r20
    268e:	d5 06       	cpc	r13, r21
    2690:	e6 06       	cpc	r14, r22
    2692:	f7 06       	cpc	r15, r23
    2694:	78 f4       	brcc	.+30     	; 0x26b4 <enable_spad_bit+0x50>
    2696:	fc 01       	movw	r30, r24
    2698:	ec 0d       	add	r30, r12
    269a:	fd 1d       	adc	r31, r13
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <enable_spad_bit+0x42>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	0a 95       	dec	r16
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <enable_spad_bit+0x3e>
    26aa:	90 81       	ld	r25, Z
    26ac:	89 2b       	or	r24, r25
    26ae:	80 83       	st	Z, r24
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <enable_spad_bit+0x52>
    26b4:	8e ec       	ldi	r24, 0xCE	; 206
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	df 90       	pop	r13
    26c0:	cf 90       	pop	r12
    26c2:	08 95       	ret

000026c4 <set_ref_spad_map>:
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	ab 01       	movw	r20, r22
    26ca:	06 e0       	ldi	r16, 0x06	; 6
    26cc:	10 e0       	ldi	r17, 0x00	; 0
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	60 eb       	ldi	r22, 0xB0	; 176
    26d4:	0e 94 76 2b 	call	0x56ec	; 0x56ec <VL53L0X_WriteMulti>
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <get_ref_spad_map>:
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	ab 01       	movw	r20, r22
    26e4:	06 e0       	ldi	r16, 0x06	; 6
    26e6:	10 e0       	ldi	r17, 0x00	; 0
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	60 eb       	ldi	r22, 0xB0	; 176
    26ee:	0e 94 8e 2b 	call	0x571c	; 0x571c <VL53L0X_ReadMulti>
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <enable_ref_spads>:
    26f8:	3f 92       	push	r3
    26fa:	4f 92       	push	r4
    26fc:	5f 92       	push	r5
    26fe:	6f 92       	push	r6
    2700:	7f 92       	push	r7
    2702:	8f 92       	push	r8
    2704:	9f 92       	push	r9
    2706:	af 92       	push	r10
    2708:	bf 92       	push	r11
    270a:	cf 92       	push	r12
    270c:	df 92       	push	r13
    270e:	ef 92       	push	r14
    2710:	ff 92       	push	r15
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	64 97       	sbiw	r28, 0x14	; 20
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	9c 8b       	std	Y+20, r25	; 0x14
    272c:	8b 8b       	std	Y+19, r24	; 0x13
    272e:	36 2e       	mov	r3, r22
    2730:	5a 8b       	std	Y+18, r21	; 0x12
    2732:	49 8b       	std	Y+17, r20	; 0x11
    2734:	38 8b       	std	Y+16, r19	; 0x10
    2736:	2f 87       	std	Y+15, r18	; 0x0f
    2738:	eb 86       	std	Y+11, r14	; 0x0b
    273a:	fc 86       	std	Y+12, r15	; 0x0c
    273c:	0d 87       	std	Y+13, r16	; 0x0d
    273e:	1e 87       	std	Y+14, r17	; 0x0e
    2740:	25 01       	movw	r4, r10
    2742:	36 01       	movw	r6, r12
    2744:	28 a5       	ldd	r18, Y+40	; 0x28
    2746:	39 a5       	ldd	r19, Y+41	; 0x29
    2748:	4a a5       	ldd	r20, Y+42	; 0x2a
    274a:	5b a5       	ldd	r21, Y+43	; 0x2b
    274c:	29 83       	std	Y+1, r18	; 0x01
    274e:	3a 83       	std	Y+2, r19	; 0x02
    2750:	4b 83       	std	Y+3, r20	; 0x03
    2752:	5c 83       	std	Y+4, r21	; 0x04
    2754:	8c a5       	ldd	r24, Y+44	; 0x2c
    2756:	9d a5       	ldd	r25, Y+45	; 0x2d
    2758:	ae a5       	ldd	r26, Y+46	; 0x2e
    275a:	bf a5       	ldd	r27, Y+47	; 0x2f
    275c:	89 2b       	or	r24, r25
    275e:	8a 2b       	or	r24, r26
    2760:	8b 2b       	or	r24, r27
    2762:	09 f4       	brne	.+2      	; 0x2766 <enable_ref_spads+0x6e>
    2764:	7a c0       	rjmp	.+244    	; 0x285a <enable_ref_spads+0x162>
    2766:	81 2c       	mov	r8, r1
    2768:	91 2c       	mov	r9, r1
    276a:	54 01       	movw	r10, r8
    276c:	de 01       	movw	r26, r28
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	7d 01       	movw	r14, r26
    2772:	08 a5       	ldd	r16, Y+40	; 0x28
    2774:	19 a5       	ldd	r17, Y+41	; 0x29
    2776:	2a a5       	ldd	r18, Y+42	; 0x2a
    2778:	3b a5       	ldd	r19, Y+43	; 0x2b
    277a:	4b 85       	ldd	r20, Y+11	; 0x0b
    277c:	5c 85       	ldd	r21, Y+12	; 0x0c
    277e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2780:	7e 85       	ldd	r23, Y+14	; 0x0e
    2782:	89 89       	ldd	r24, Y+17	; 0x11
    2784:	9a 89       	ldd	r25, Y+18	; 0x12
    2786:	cf de       	rcall	.-610    	; 0x2526 <get_next_good_spad>
    2788:	c9 80       	ldd	r12, Y+1	; 0x01
    278a:	da 80       	ldd	r13, Y+2	; 0x02
    278c:	eb 80       	ldd	r14, Y+3	; 0x03
    278e:	fc 80       	ldd	r15, Y+4	; 0x04
    2790:	bf ef       	ldi	r27, 0xFF	; 255
    2792:	cb 16       	cp	r12, r27
    2794:	db 06       	cpc	r13, r27
    2796:	eb 06       	cpc	r14, r27
    2798:	fb 06       	cpc	r15, r27
    279a:	09 f4       	brne	.+2      	; 0x279e <enable_ref_spads+0xa6>
    279c:	72 c0       	rjmp	.+228    	; 0x2882 <enable_ref_spads+0x18a>
    279e:	c7 01       	movw	r24, r14
    27a0:	b6 01       	movw	r22, r12
    27a2:	64 0d       	add	r22, r4
    27a4:	75 1d       	adc	r23, r5
    27a6:	86 1d       	adc	r24, r6
    27a8:	97 1d       	adc	r25, r7
    27aa:	3f df       	rcall	.-386    	; 0x262a <is_aperture>
    27ac:	83 11       	cpse	r24, r3
    27ae:	69 c0       	rjmp	.+210    	; 0x2882 <enable_ref_spads+0x18a>
    27b0:	97 01       	movw	r18, r14
    27b2:	86 01       	movw	r16, r12
    27b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    27b6:	5c 85       	ldd	r21, Y+12	; 0x0c
    27b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    27ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    27bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27be:	98 89       	ldd	r25, Y+16	; 0x10
    27c0:	51 df       	rcall	.-350    	; 0x2664 <enable_spad_bit>
    27c2:	a7 01       	movw	r20, r14
    27c4:	96 01       	movw	r18, r12
    27c6:	2f 5f       	subi	r18, 0xFF	; 255
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	4f 4f       	sbci	r20, 0xFF	; 255
    27cc:	5f 4f       	sbci	r21, 0xFF	; 255
    27ce:	28 a7       	std	Y+40, r18	; 0x28
    27d0:	39 a7       	std	Y+41, r19	; 0x29
    27d2:	4a a7       	std	Y+42, r20	; 0x2a
    27d4:	5b a7       	std	Y+43, r21	; 0x2b
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	83 1a       	sub	r8, r19
    27da:	93 0a       	sbc	r9, r19
    27dc:	a3 0a       	sbc	r10, r19
    27de:	b3 0a       	sbc	r11, r19
    27e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    27e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    27e4:	ae a5       	ldd	r26, Y+46	; 0x2e
    27e6:	bf a5       	ldd	r27, Y+47	; 0x2f
    27e8:	88 15       	cp	r24, r8
    27ea:	99 05       	cpc	r25, r9
    27ec:	aa 05       	cpc	r26, r10
    27ee:	bb 05       	cpc	r27, r11
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <enable_ref_spads+0xfc>
    27f2:	bc cf       	rjmp	.-136    	; 0x276c <enable_ref_spads+0x74>
    27f4:	32 c0       	rjmp	.+100    	; 0x285a <enable_ref_spads+0x162>
    27f6:	be 01       	movw	r22, r28
    27f8:	6b 5f       	subi	r22, 0xFB	; 251
    27fa:	7f 4f       	sbci	r23, 0xFF	; 255
    27fc:	8b 89       	ldd	r24, Y+19	; 0x13
    27fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2800:	6e df       	rcall	.-292    	; 0x26de <get_ref_spad_map>
    2802:	2b 85       	ldd	r18, Y+11	; 0x0b
    2804:	3c 85       	ldd	r19, Y+12	; 0x0c
    2806:	4d 85       	ldd	r20, Y+13	; 0x0d
    2808:	5e 85       	ldd	r21, Y+14	; 0x0e
    280a:	23 2b       	or	r18, r19
    280c:	24 2b       	or	r18, r20
    280e:	25 2b       	or	r18, r21
    2810:	09 f4       	brne	.+2      	; 0x2814 <enable_ref_spads+0x11c>
    2812:	43 c0       	rjmp	.+134    	; 0x289a <enable_ref_spads+0x1a2>
    2814:	af 85       	ldd	r26, Y+15	; 0x0f
    2816:	b8 89       	ldd	r27, Y+16	; 0x10
    2818:	2c 91       	ld	r18, X
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	29 13       	cpse	r18, r25
    281e:	19 c0       	rjmp	.+50     	; 0x2852 <enable_ref_spads+0x15a>
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	fe 01       	movw	r30, r28
    2824:	36 96       	adiw	r30, 0x06	; 6
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	ba 01       	movw	r22, r20
    282c:	cb 84       	ldd	r12, Y+11	; 0x0b
    282e:	dc 84       	ldd	r13, Y+12	; 0x0c
    2830:	ed 84       	ldd	r14, Y+13	; 0x0d
    2832:	fe 84       	ldd	r15, Y+14	; 0x0e
    2834:	04 c0       	rjmp	.+8      	; 0x283e <enable_ref_spads+0x146>
    2836:	2d 91       	ld	r18, X+
    2838:	91 91       	ld	r25, Z+
    283a:	29 13       	cpse	r18, r25
    283c:	0c c0       	rjmp	.+24     	; 0x2856 <enable_ref_spads+0x15e>
    283e:	4f 5f       	subi	r20, 0xFF	; 255
    2840:	5f 4f       	sbci	r21, 0xFF	; 255
    2842:	6f 4f       	sbci	r22, 0xFF	; 255
    2844:	7f 4f       	sbci	r23, 0xFF	; 255
    2846:	c4 16       	cp	r12, r20
    2848:	d5 06       	cpc	r13, r21
    284a:	e6 06       	cpc	r14, r22
    284c:	f7 06       	cpc	r15, r23
    284e:	99 f7       	brne	.-26     	; 0x2836 <enable_ref_spads+0x13e>
    2850:	24 c0       	rjmp	.+72     	; 0x289a <enable_ref_spads+0x1a2>
    2852:	8e ec       	ldi	r24, 0xCE	; 206
    2854:	22 c0       	rjmp	.+68     	; 0x289a <enable_ref_spads+0x1a2>
    2856:	8e ec       	ldi	r24, 0xCE	; 206
    2858:	20 c0       	rjmp	.+64     	; 0x289a <enable_ref_spads+0x1a2>
    285a:	28 a5       	ldd	r18, Y+40	; 0x28
    285c:	39 a5       	ldd	r19, Y+41	; 0x29
    285e:	4a a5       	ldd	r20, Y+42	; 0x2a
    2860:	5b a5       	ldd	r21, Y+43	; 0x2b
    2862:	a8 a9       	ldd	r26, Y+48	; 0x30
    2864:	b9 a9       	ldd	r27, Y+49	; 0x31
    2866:	2d 93       	st	X+, r18
    2868:	3d 93       	st	X+, r19
    286a:	4d 93       	st	X+, r20
    286c:	5c 93       	st	X, r21
    286e:	13 97       	sbiw	r26, 0x03	; 3
    2870:	6f 85       	ldd	r22, Y+15	; 0x0f
    2872:	78 89       	ldd	r23, Y+16	; 0x10
    2874:	8b 89       	ldd	r24, Y+19	; 0x13
    2876:	9c 89       	ldd	r25, Y+20	; 0x14
    2878:	25 df       	rcall	.-438    	; 0x26c4 <set_ref_spad_map>
    287a:	88 23       	and	r24, r24
    287c:	09 f4       	brne	.+2      	; 0x2880 <enable_ref_spads+0x188>
    287e:	bb cf       	rjmp	.-138    	; 0x27f6 <enable_ref_spads+0xfe>
    2880:	0c c0       	rjmp	.+24     	; 0x289a <enable_ref_spads+0x1a2>
    2882:	28 a5       	ldd	r18, Y+40	; 0x28
    2884:	39 a5       	ldd	r19, Y+41	; 0x29
    2886:	4a a5       	ldd	r20, Y+42	; 0x2a
    2888:	5b a5       	ldd	r21, Y+43	; 0x2b
    288a:	a8 a9       	ldd	r26, Y+48	; 0x30
    288c:	b9 a9       	ldd	r27, Y+49	; 0x31
    288e:	2d 93       	st	X+, r18
    2890:	3d 93       	st	X+, r19
    2892:	4d 93       	st	X+, r20
    2894:	5c 93       	st	X, r21
    2896:	13 97       	sbiw	r26, 0x03	; 3
    2898:	8e ec       	ldi	r24, 0xCE	; 206
    289a:	64 96       	adiw	r28, 0x14	; 20
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	ff 90       	pop	r15
    28b0:	ef 90       	pop	r14
    28b2:	df 90       	pop	r13
    28b4:	cf 90       	pop	r12
    28b6:	bf 90       	pop	r11
    28b8:	af 90       	pop	r10
    28ba:	9f 90       	pop	r9
    28bc:	8f 90       	pop	r8
    28be:	7f 90       	pop	r7
    28c0:	6f 90       	pop	r6
    28c2:	5f 90       	pop	r5
    28c4:	4f 90       	pop	r4
    28c6:	3f 90       	pop	r3
    28c8:	08 95       	ret

000028ca <perform_ref_signal_measurement>:
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ff 92       	push	r15
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	69 97       	sbiw	r28, 0x19	; 25
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	8c 01       	movw	r16, r24
    28ea:	6b 01       	movw	r12, r22
    28ec:	fc 01       	movw	r30, r24
    28ee:	e3 5e       	subi	r30, 0xE3	; 227
    28f0:	fe 4f       	sbci	r31, 0xFE	; 254
    28f2:	f0 80       	ld	r15, Z
    28f4:	40 ec       	ldi	r20, 0xC0	; 192
    28f6:	61 e0       	ldi	r22, 0x01	; 1
    28f8:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    28fc:	81 11       	cpse	r24, r1
    28fe:	1a c0       	rjmp	.+52     	; 0x2934 <perform_ref_signal_measurement+0x6a>
    2900:	be 01       	movw	r22, r28
    2902:	6f 5f       	subi	r22, 0xFF	; 255
    2904:	7f 4f       	sbci	r23, 0xFF	; 255
    2906:	c8 01       	movw	r24, r16
    2908:	79 db       	rcall	.-2318   	; 0x1ffc <VL53L0X_PerformSingleRangingMeasurement>
    290a:	81 11       	cpse	r24, r1
    290c:	20 c0       	rjmp	.+64     	; 0x294e <perform_ref_signal_measurement+0x84>
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	6f ef       	ldi	r22, 0xFF	; 255
    2912:	c8 01       	movw	r24, r16
    2914:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2918:	81 11       	cpse	r24, r1
    291a:	19 c0       	rjmp	.+50     	; 0x294e <perform_ref_signal_measurement+0x84>
    291c:	a6 01       	movw	r20, r12
    291e:	66 eb       	ldi	r22, 0xB6	; 182
    2920:	c8 01       	movw	r24, r16
    2922:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    2926:	81 11       	cpse	r24, r1
    2928:	12 c0       	rjmp	.+36     	; 0x294e <perform_ref_signal_measurement+0x84>
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	6f ef       	ldi	r22, 0xFF	; 255
    292e:	c8 01       	movw	r24, r16
    2930:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2934:	81 11       	cpse	r24, r1
    2936:	0b c0       	rjmp	.+22     	; 0x294e <perform_ref_signal_measurement+0x84>
    2938:	4f 2d       	mov	r20, r15
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	c8 01       	movw	r24, r16
    293e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2942:	81 11       	cpse	r24, r1
    2944:	04 c0       	rjmp	.+8      	; 0x294e <perform_ref_signal_measurement+0x84>
    2946:	f8 01       	movw	r30, r16
    2948:	e3 5e       	subi	r30, 0xE3	; 227
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	f0 82       	st	Z, r15
    294e:	69 96       	adiw	r28, 0x19	; 25
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
    2968:	08 95       	ret

0000296a <VL53L0X_set_reference_spads>:
    296a:	6f 92       	push	r6
    296c:	7f 92       	push	r7
    296e:	8f 92       	push	r8
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	00 d0       	rcall	.+0      	; 0x2988 <VL53L0X_set_reference_spads+0x1e>
    2988:	00 d0       	rcall	.+0      	; 0x298a <VL53L0X_set_reference_spads+0x20>
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	4c 01       	movw	r8, r24
    2990:	64 2e       	mov	r6, r20
    2992:	15 2f       	mov	r17, r21
    2994:	06 2f       	mov	r16, r22
    2996:	b7 2e       	mov	r11, r23
    2998:	72 2e       	mov	r7, r18
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	6f ef       	ldi	r22, 0xFF	; 255
    299e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    29a2:	81 11       	cpse	r24, r1
    29a4:	1a c0       	rjmp	.+52     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	6f e4       	ldi	r22, 0x4F	; 79
    29aa:	c4 01       	movw	r24, r8
    29ac:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    29b0:	81 11       	cpse	r24, r1
    29b2:	13 c0       	rjmp	.+38     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29b4:	4c e2       	ldi	r20, 0x2C	; 44
    29b6:	6e e4       	ldi	r22, 0x4E	; 78
    29b8:	c4 01       	movw	r24, r8
    29ba:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    29be:	81 11       	cpse	r24, r1
    29c0:	0c c0       	rjmp	.+24     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	6f ef       	ldi	r22, 0xFF	; 255
    29c6:	c4 01       	movw	r24, r8
    29c8:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    29cc:	81 11       	cpse	r24, r1
    29ce:	05 c0       	rjmp	.+10     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29d0:	44 eb       	ldi	r20, 0xB4	; 180
    29d2:	66 eb       	ldi	r22, 0xB6	; 182
    29d4:	c4 01       	movw	r24, r8
    29d6:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    29da:	f4 01       	movw	r30, r8
    29dc:	ef 5e       	subi	r30, 0xEF	; 239
    29de:	fe 4f       	sbci	r31, 0xFE	; 254
    29e0:	10 82       	st	Z, r1
    29e2:	31 96       	adiw	r30, 0x01	; 1
    29e4:	10 82       	st	Z, r1
    29e6:	31 96       	adiw	r30, 0x01	; 1
    29e8:	10 82       	st	Z, r1
    29ea:	31 96       	adiw	r30, 0x01	; 1
    29ec:	10 82       	st	Z, r1
    29ee:	31 96       	adiw	r30, 0x01	; 1
    29f0:	10 82       	st	Z, r1
    29f2:	31 96       	adiw	r30, 0x01	; 1
    29f4:	10 82       	st	Z, r1
    29f6:	71 10       	cpse	r7, r1
    29f8:	0a c0       	rjmp	.+20     	; 0x2a0e <VL53L0X_set_reference_spads+0xa4>
    29fa:	c1 2c       	mov	r12, r1
    29fc:	d1 2c       	mov	r13, r1
    29fe:	76 01       	movw	r14, r12
    2a00:	18 c0       	rjmp	.+48     	; 0x2a32 <VL53L0X_set_reference_spads+0xc8>
    2a02:	2f ef       	ldi	r18, 0xFF	; 255
    2a04:	c2 1a       	sub	r12, r18
    2a06:	d2 0a       	sbc	r13, r18
    2a08:	e2 0a       	sbc	r14, r18
    2a0a:	f2 0a       	sbc	r15, r18
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <VL53L0X_set_reference_spads+0xaa>
    2a0e:	c1 2c       	mov	r12, r1
    2a10:	d1 2c       	mov	r13, r1
    2a12:	76 01       	movw	r14, r12
    2a14:	c7 01       	movw	r24, r14
    2a16:	b6 01       	movw	r22, r12
    2a18:	6c 54       	subi	r22, 0x4C	; 76
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a20:	04 de       	rcall	.-1016   	; 0x262a <is_aperture>
    2a22:	81 11       	cpse	r24, r1
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <VL53L0X_set_reference_spads+0xc8>
    2a26:	3c e2       	ldi	r19, 0x2C	; 44
    2a28:	c3 16       	cp	r12, r19
    2a2a:	d1 04       	cpc	r13, r1
    2a2c:	e1 04       	cpc	r14, r1
    2a2e:	f1 04       	cpc	r15, r1
    2a30:	41 f7       	brne	.-48     	; 0x2a02 <VL53L0X_set_reference_spads+0x98>
    2a32:	ce 01       	movw	r24, r28
    2a34:	01 96       	adiw	r24, 0x01	; 1
    2a36:	9f 93       	push	r25
    2a38:	8f 93       	push	r24
    2a3a:	bf 92       	push	r11
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	6f 92       	push	r6
    2a42:	ff 92       	push	r15
    2a44:	ef 92       	push	r14
    2a46:	df 92       	push	r13
    2a48:	cf 92       	push	r12
    2a4a:	0f 2e       	mov	r0, r31
    2a4c:	f4 eb       	ldi	r31, 0xB4	; 180
    2a4e:	af 2e       	mov	r10, r31
    2a50:	b1 2c       	mov	r11, r1
    2a52:	c1 2c       	mov	r12, r1
    2a54:	d1 2c       	mov	r13, r1
    2a56:	f0 2d       	mov	r31, r0
    2a58:	16 e0       	ldi	r17, 0x06	; 6
    2a5a:	e1 2e       	mov	r14, r17
    2a5c:	f1 2c       	mov	r15, r1
    2a5e:	00 e0       	ldi	r16, 0x00	; 0
    2a60:	10 e0       	ldi	r17, 0x00	; 0
    2a62:	94 01       	movw	r18, r8
    2a64:	2f 5e       	subi	r18, 0xEF	; 239
    2a66:	3e 4f       	sbci	r19, 0xFE	; 254
    2a68:	a4 01       	movw	r20, r8
    2a6a:	49 5e       	subi	r20, 0xE9	; 233
    2a6c:	5e 4f       	sbci	r21, 0xFE	; 254
    2a6e:	67 2d       	mov	r22, r7
    2a70:	c4 01       	movw	r24, r8
    2a72:	42 de       	rcall	.-892    	; 0x26f8 <enable_ref_spads>
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	81 11       	cpse	r24, r1
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <VL53L0X_set_reference_spads+0x12a>
    2a82:	f4 01       	movw	r30, r8
    2a84:	ec 5f       	subi	r30, 0xFC	; 252
    2a86:	fe 4f       	sbci	r31, 0xFE	; 254
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	90 83       	st	Z, r25
    2a8c:	32 97       	sbiw	r30, 0x02	; 2
    2a8e:	60 82       	st	Z, r6
    2a90:	31 96       	adiw	r30, 0x01	; 1
    2a92:	70 82       	st	Z, r7
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	7f 90       	pop	r7
    2ab6:	6f 90       	pop	r6
    2ab8:	08 95       	ret

00002aba <VL53L0X_perform_single_ref_calibration>:


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	ec 01       	movw	r28, r24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
    2ac0:	46 2f       	mov	r20, r22
    2ac2:	41 60       	ori	r20, 0x01	; 1
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
    2aca:	81 11       	cpse	r24, r1
    2acc:	10 c0       	rjmp	.+32     	; 0x2aee <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
    2ace:	ce 01       	movw	r24, r28
    2ad0:	91 d3       	rcall	.+1826   	; 0x31f4 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
    2ad2:	81 11       	cpse	r24, r1
    2ad4:	0c c0       	rjmp	.+24     	; 0x2aee <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
    2ad6:	40 e0       	ldi	r20, 0x00	; 0
    2ad8:	50 e0       	ldi	r21, 0x00	; 0
    2ada:	ba 01       	movw	r22, r20
    2adc:	ce 01       	movw	r24, r28
    2ade:	59 da       	rcall	.-2894   	; 0x1f92 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
    2ae0:	81 11       	cpse	r24, r1
    2ae2:	05 c0       	rjmp	.+10     	; 0x2aee <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	ce 01       	movw	r24, r28
    2aea:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>

	return Status;
}
    2aee:	df 91       	pop	r29
    2af0:	cf 91       	pop	r28
    2af2:	08 95       	ret

00002af4 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
    2af4:	5f 92       	push	r5
    2af6:	6f 92       	push	r6
    2af8:	7f 92       	push	r7
    2afa:	8f 92       	push	r8
    2afc:	9f 92       	push	r9
    2afe:	af 92       	push	r10
    2b00:	bf 92       	push	r11
    2b02:	cf 92       	push	r12
    2b04:	df 92       	push	r13
    2b06:	ef 92       	push	r14
    2b08:	ff 92       	push	r15
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	1f 92       	push	r1
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	4c 01       	movw	r8, r24
    2b1a:	d6 2e       	mov	r13, r22
    2b1c:	54 2e       	mov	r5, r20
    2b1e:	b2 2e       	mov	r11, r18
    2b20:	38 01       	movw	r6, r16
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
    2b22:	19 82       	std	Y+1, r1	; 0x01

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	6f ef       	ldi	r22, 0xFF	; 255
    2b28:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2b2c:	18 2f       	mov	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	c4 01       	movw	r24, r8
    2b34:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2b38:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	6f ef       	ldi	r22, 0xFF	; 255
    2b3e:	c4 01       	movw	r24, r8
    2b40:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2b44:	18 2b       	or	r17, r24

	if (read_not_write) {
    2b46:	dd 20       	and	r13, r13
    2b48:	99 f0       	breq	.+38     	; 0x2b70 <VL53L0X_ref_calibration_io+0x7c>
		if (vhv_enable)
    2b4a:	cc 20       	and	r12, r12
    2b4c:	31 f0       	breq	.+12     	; 0x2b5a <VL53L0X_ref_calibration_io+0x66>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
    2b4e:	a3 01       	movw	r20, r6
    2b50:	6b ec       	ldi	r22, 0xCB	; 203
    2b52:	c4 01       	movw	r24, r8
    2b54:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    2b58:	18 2b       	or	r17, r24
		if (phase_enable)
    2b5a:	aa 20       	and	r10, r10
    2b5c:	d1 f0       	breq	.+52     	; 0x2b92 <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
    2b5e:	ae 01       	movw	r20, r28
    2b60:	4f 5f       	subi	r20, 0xFF	; 255
    2b62:	5f 4f       	sbci	r21, 0xFF	; 255
    2b64:	6e ee       	ldi	r22, 0xEE	; 238
    2b66:	c4 01       	movw	r24, r8
    2b68:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    2b6c:	18 2b       	or	r17, r24
    2b6e:	11 c0       	rjmp	.+34     	; 0x2b92 <VL53L0X_ref_calibration_io+0x9e>
	} else {
		if (vhv_enable)
    2b70:	cc 20       	and	r12, r12
    2b72:	31 f0       	breq	.+12     	; 0x2b80 <VL53L0X_ref_calibration_io+0x8c>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
    2b74:	45 2d       	mov	r20, r5
    2b76:	6b ec       	ldi	r22, 0xCB	; 203
    2b78:	c4 01       	movw	r24, r8
    2b7a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2b7e:	18 2b       	or	r17, r24
		if (phase_enable)
    2b80:	aa 20       	and	r10, r10
    2b82:	39 f0       	breq	.+14     	; 0x2b92 <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
    2b84:	2b 2d       	mov	r18, r11
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	6e ee       	ldi	r22, 0xEE	; 238
    2b8a:	c4 01       	movw	r24, r8
    2b8c:	0e 94 bc 2b 	call	0x5778	; 0x5778 <VL53L0X_UpdateByte>
    2b90:	18 2b       	or	r17, r24
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2b92:	41 e0       	ldi	r20, 0x01	; 1
    2b94:	6f ef       	ldi	r22, 0xFF	; 255
    2b96:	c4 01       	movw	r24, r8
    2b98:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2b9c:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	c4 01       	movw	r24, r8
    2ba4:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    2ba8:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	6f ef       	ldi	r22, 0xFF	; 255
    2bae:	c4 01       	movw	r24, r8
    2bb0:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
    2bb4:	99 81       	ldd	r25, Y+1	; 0x01
    2bb6:	9f 7e       	andi	r25, 0xEF	; 239
    2bb8:	f7 01       	movw	r30, r14
    2bba:	90 83       	st	Z, r25

	return Status;
}
    2bbc:	81 2b       	or	r24, r17
    2bbe:	0f 90       	pop	r0
    2bc0:	df 91       	pop	r29
    2bc2:	cf 91       	pop	r28
    2bc4:	1f 91       	pop	r17
    2bc6:	0f 91       	pop	r16
    2bc8:	ff 90       	pop	r15
    2bca:	ef 90       	pop	r14
    2bcc:	df 90       	pop	r13
    2bce:	cf 90       	pop	r12
    2bd0:	bf 90       	pop	r11
    2bd2:	af 90       	pop	r10
    2bd4:	9f 90       	pop	r9
    2bd6:	8f 90       	pop	r8
    2bd8:	7f 90       	pop	r7
    2bda:	6f 90       	pop	r6
    2bdc:	5f 90       	pop	r5
    2bde:	08 95       	ret

00002be0 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
    2be0:	8f 92       	push	r8
    2be2:	9f 92       	push	r9
    2be4:	af 92       	push	r10
    2be6:	bf 92       	push	r11
    2be8:	cf 92       	push	r12
    2bea:	df 92       	push	r13
    2bec:	ef 92       	push	r14
    2bee:	ff 92       	push	r15
    2bf0:	0f 93       	push	r16
    2bf2:	1f 93       	push	r17
    2bf4:	cf 93       	push	r28
    2bf6:	df 93       	push	r29
    2bf8:	1f 92       	push	r1
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	4c 01       	movw	r8, r24
    2c00:	8b 01       	movw	r16, r22
    2c02:	f4 2e       	mov	r15, r20
    2c04:	d2 2e       	mov	r13, r18
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
    2c06:	19 82       	std	Y+1, r1	; 0x01

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    2c08:	22 23       	and	r18, r18
    2c0a:	29 f0       	breq	.+10     	; 0x2c16 <VL53L0X_perform_vhv_calibration+0x36>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	e3 5e       	subi	r30, 0xE3	; 227
    2c10:	fe 4f       	sbci	r31, 0xFE	; 254
    2c12:	b0 80       	ld	r11, Z
    2c14:	01 c0       	rjmp	.+2      	; 0x2c18 <VL53L0X_perform_vhv_calibration+0x38>
VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
    2c16:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	c4 01       	movw	r24, r8
    2c1e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2c22:	81 11       	cpse	r24, r1
    2c24:	14 c0       	rjmp	.+40     	; 0x2c4e <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
    2c26:	60 e4       	ldi	r22, 0x40	; 64
    2c28:	c4 01       	movw	r24, r8
    2c2a:	47 df       	rcall	.-370    	; 0x2aba <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    2c2c:	81 11       	cpse	r24, r1
    2c2e:	0f c0       	rjmp	.+30     	; 0x2c4e <VL53L0X_perform_vhv_calibration+0x6e>
    2c30:	91 e0       	ldi	r25, 0x01	; 1
    2c32:	f9 12       	cpse	r15, r25
    2c34:	0c c0       	rjmp	.+24     	; 0x2c4e <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    2c36:	a1 2c       	mov	r10, r1
    2c38:	cc 24       	eor	r12, r12
    2c3a:	c3 94       	inc	r12
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	31 96       	adiw	r30, 0x01	; 1
    2c40:	7f 01       	movw	r14, r30
    2c42:	20 e0       	ldi	r18, 0x00	; 0
    2c44:	40 e0       	ldi	r20, 0x00	; 0
    2c46:	61 e0       	ldi	r22, 0x01	; 1
    2c48:	c4 01       	movw	r24, r8
    2c4a:	54 df       	rcall	.-344    	; 0x2af4 <VL53L0X_ref_calibration_io>
    2c4c:	02 c0       	rjmp	.+4      	; 0x2c52 <VL53L0X_perform_vhv_calibration+0x72>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
    2c4e:	f8 01       	movw	r30, r16
    2c50:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    2c52:	81 11       	cpse	r24, r1
    2c54:	0d c0       	rjmp	.+26     	; 0x2c70 <VL53L0X_perform_vhv_calibration+0x90>
    2c56:	dd 20       	and	r13, r13
    2c58:	59 f0       	breq	.+22     	; 0x2c70 <VL53L0X_perform_vhv_calibration+0x90>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    2c5a:	4b 2d       	mov	r20, r11
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	c4 01       	movw	r24, r8
    2c60:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2c64:	81 11       	cpse	r24, r1
    2c66:	04 c0       	rjmp	.+8      	; 0x2c70 <VL53L0X_perform_vhv_calibration+0x90>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2c68:	f4 01       	movw	r30, r8
    2c6a:	e3 5e       	subi	r30, 0xE3	; 227
    2c6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6e:	b0 82       	st	Z, r11

	}

	return Status;
}
    2c70:	0f 90       	pop	r0
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	bf 90       	pop	r11
    2c84:	af 90       	pop	r10
    2c86:	9f 90       	pop	r9
    2c88:	8f 90       	pop	r8
    2c8a:	08 95       	ret

00002c8c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
    2c8c:	8f 92       	push	r8
    2c8e:	9f 92       	push	r9
    2c90:	af 92       	push	r10
    2c92:	bf 92       	push	r11
    2c94:	cf 92       	push	r12
    2c96:	df 92       	push	r13
    2c98:	ef 92       	push	r14
    2c9a:	ff 92       	push	r15
    2c9c:	0f 93       	push	r16
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	1f 92       	push	r1
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	4c 01       	movw	r8, r24
    2cac:	7b 01       	movw	r14, r22
    2cae:	14 2f       	mov	r17, r20
    2cb0:	d2 2e       	mov	r13, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    2cb2:	22 23       	and	r18, r18
    2cb4:	29 f0       	breq	.+10     	; 0x2cc0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	e3 5e       	subi	r30, 0xE3	; 227
    2cba:	fe 4f       	sbci	r31, 0xFE	; 254
    2cbc:	b0 80       	ld	r11, Z
    2cbe:	01 c0       	rjmp	.+2      	; 0x2cc2 <VL53L0X_perform_phase_calibration+0x36>
VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
    2cc0:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
    2cc2:	42 e0       	ldi	r20, 0x02	; 2
    2cc4:	61 e0       	ldi	r22, 0x01	; 1
    2cc6:	c4 01       	movw	r24, r8
    2cc8:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2ccc:	81 11       	cpse	r24, r1
    2cce:	13 c0       	rjmp	.+38     	; 0x2cf6 <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
    2cd0:	60 e0       	ldi	r22, 0x00	; 0
    2cd2:	c4 01       	movw	r24, r8
    2cd4:	f2 de       	rcall	.-540    	; 0x2aba <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    2cd6:	81 11       	cpse	r24, r1
    2cd8:	0e c0       	rjmp	.+28     	; 0x2cf6 <VL53L0X_perform_phase_calibration+0x6a>
    2cda:	11 30       	cpi	r17, 0x01	; 1
    2cdc:	61 f4       	brne	.+24     	; 0x2cf6 <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    2cde:	aa 24       	eor	r10, r10
    2ce0:	a3 94       	inc	r10
    2ce2:	c1 2c       	mov	r12, r1
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	0f 5f       	subi	r16, 0xFF	; 255
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	40 e0       	ldi	r20, 0x00	; 0
    2cee:	61 e0       	ldi	r22, 0x01	; 1
    2cf0:	c4 01       	movw	r24, r8
    2cf2:	00 df       	rcall	.-512    	; 0x2af4 <VL53L0X_ref_calibration_io>
    2cf4:	02 c0       	rjmp	.+4      	; 0x2cfa <VL53L0X_perform_phase_calibration+0x6e>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
    2cf6:	f7 01       	movw	r30, r14
    2cf8:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    2cfa:	81 11       	cpse	r24, r1
    2cfc:	0d c0       	rjmp	.+26     	; 0x2d18 <VL53L0X_perform_phase_calibration+0x8c>
    2cfe:	dd 20       	and	r13, r13
    2d00:	59 f0       	breq	.+22     	; 0x2d18 <VL53L0X_perform_phase_calibration+0x8c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    2d02:	4b 2d       	mov	r20, r11
    2d04:	61 e0       	ldi	r22, 0x01	; 1
    2d06:	c4 01       	movw	r24, r8
    2d08:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2d0c:	81 11       	cpse	r24, r1
    2d0e:	04 c0       	rjmp	.+8      	; 0x2d18 <VL53L0X_perform_phase_calibration+0x8c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2d10:	f4 01       	movw	r30, r8
    2d12:	e3 5e       	subi	r30, 0xE3	; 227
    2d14:	fe 4f       	sbci	r31, 0xFE	; 254
    2d16:	b0 82       	st	Z, r11

	}

	return Status;
}
    2d18:	0f 90       	pop	r0
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	1f 91       	pop	r17
    2d20:	0f 91       	pop	r16
    2d22:	ff 90       	pop	r15
    2d24:	ef 90       	pop	r14
    2d26:	df 90       	pop	r13
    2d28:	cf 90       	pop	r12
    2d2a:	bf 90       	pop	r11
    2d2c:	af 90       	pop	r10
    2d2e:	9f 90       	pop	r9
    2d30:	8f 90       	pop	r8
    2d32:	08 95       	ret

00002d34 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
    2d34:	ef 92       	push	r14
    2d36:	ff 92       	push	r15
    2d38:	0f 93       	push	r16
    2d3a:	1f 93       	push	r17
    2d3c:	cf 93       	push	r28
    2d3e:	df 93       	push	r29
    2d40:	ec 01       	movw	r28, r24
    2d42:	7a 01       	movw	r14, r20
    2d44:	12 2f       	mov	r17, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2d46:	fc 01       	movw	r30, r24
    2d48:	e3 5e       	subi	r30, 0xE3	; 227
    2d4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2d4c:	00 81       	ld	r16, Z

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
    2d4e:	20 e0       	ldi	r18, 0x00	; 0
    2d50:	41 2f       	mov	r20, r17
    2d52:	46 df       	rcall	.-372    	; 0x2be0 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
    2d54:	81 11       	cpse	r24, r1
    2d56:	11 c0       	rjmp	.+34     	; 0x2d7a <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	41 2f       	mov	r20, r17
    2d5c:	b7 01       	movw	r22, r14
    2d5e:	ce 01       	movw	r24, r28
    2d60:	95 df       	rcall	.-214    	; 0x2c8c <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
    2d62:	81 11       	cpse	r24, r1
    2d64:	0a c0       	rjmp	.+20     	; 0x2d7a <VL53L0X_perform_ref_calibration+0x46>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    2d66:	40 2f       	mov	r20, r16
    2d68:	61 e0       	ldi	r22, 0x01	; 1
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2d70:	81 11       	cpse	r24, r1
    2d72:	03 c0       	rjmp	.+6      	; 0x2d7a <VL53L0X_perform_ref_calibration+0x46>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2d74:	c3 5e       	subi	r28, 0xE3	; 227
    2d76:	de 4f       	sbci	r29, 0xFE	; 254
    2d78:	08 83       	st	Y, r16

	}

	return Status;
}
    2d7a:	df 91       	pop	r29
    2d7c:	cf 91       	pop	r28
    2d7e:	1f 91       	pop	r17
    2d80:	0f 91       	pop	r16
    2d82:	ff 90       	pop	r15
    2d84:	ef 90       	pop	r14
    2d86:	08 95       	ret

00002d88 <VL53L0X_perform_ref_spad_management>:
}

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
    2d88:	2f 92       	push	r2
    2d8a:	3f 92       	push	r3
    2d8c:	4f 92       	push	r4
    2d8e:	5f 92       	push	r5
    2d90:	6f 92       	push	r6
    2d92:	7f 92       	push	r7
    2d94:	8f 92       	push	r8
    2d96:	9f 92       	push	r9
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
    2db0:	a7 97       	sbiw	r28, 0x27	; 39
    2db2:	0f b6       	in	r0, 0x3f	; 63
    2db4:	f8 94       	cli
    2db6:	de bf       	out	0x3e, r29	; 62
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	cd bf       	out	0x3d, r28	; 61
    2dbc:	4c 01       	movw	r8, r24
    2dbe:	7c a3       	std	Y+36, r23	; 0x24
    2dc0:	6b a3       	std	Y+35, r22	; 0x23
    2dc2:	5e a3       	std	Y+38, r21	; 0x26
    2dc4:	4d a3       	std	Y+37, r20	; 0x25
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
	uint32_t minimumSpadCount = 3;
	uint32_t maxSpadCount = 44;
	uint32_t currentSpadIndex = 0;
	uint32_t lastSpadIndex = 0;
    2dc6:	1f 82       	std	Y+7, r1	; 0x07
    2dc8:	18 86       	std	Y+8, r1	; 0x08
    2dca:	19 86       	std	Y+9, r1	; 0x09
    2dcc:	1a 86       	std	Y+10, r1	; 0x0a
	int32_t nextGoodSpad = 0;
    2dce:	1b 86       	std	Y+11, r1	; 0x0b
    2dd0:	1c 86       	std	Y+12, r1	; 0x0c
    2dd2:	1d 86       	std	Y+13, r1	; 0x0d
    2dd4:	1e 86       	std	Y+14, r1	; 0x0e
	uint32_t index = 0;
	uint32_t spadArraySize = 6;
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
    2dd6:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t PhaseCal = 0;
    2dd8:	1a 8a       	std	Y+18, r1	; 0x12
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
    2dda:	fc 01       	movw	r30, r24
    2ddc:	e8 5d       	subi	r30, 0xD8	; 216
    2dde:	fe 4f       	sbci	r31, 0xFE	; 254
    2de0:	60 80       	ld	r6, Z
    2de2:	71 80       	ldd	r7, Z+1	; 0x01
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
    2de4:	77 97       	sbiw	r30, 0x17	; 23
    2de6:	10 82       	st	Z, r1
    2de8:	31 96       	adiw	r30, 0x01	; 1
    2dea:	10 82       	st	Z, r1
    2dec:	31 96       	adiw	r30, 0x01	; 1
    2dee:	10 82       	st	Z, r1
    2df0:	31 96       	adiw	r30, 0x01	; 1
    2df2:	10 82       	st	Z, r1
    2df4:	31 96       	adiw	r30, 0x01	; 1
    2df6:	10 82       	st	Z, r1
    2df8:	31 96       	adiw	r30, 0x01	; 1
    2dfa:	10 82       	st	Z, r1


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	6f ef       	ldi	r22, 0xFF	; 255
    2e00:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2e04:	81 11       	cpse	r24, r1
    2e06:	1a c0       	rjmp	.+52     	; 0x2e3c <VL53L0X_perform_ref_spad_management+0xb4>
		Status = VL53L0X_WrByte(Dev,
    2e08:	40 e0       	ldi	r20, 0x00	; 0
    2e0a:	6f e4       	ldi	r22, 0x4F	; 79
    2e0c:	c4 01       	movw	r24, r8
    2e0e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
    2e12:	81 11       	cpse	r24, r1
    2e14:	1a c0       	rjmp	.+52     	; 0x2e4a <VL53L0X_perform_ref_spad_management+0xc2>
		Status = VL53L0X_WrByte(Dev,
    2e16:	4c e2       	ldi	r20, 0x2C	; 44
    2e18:	6e e4       	ldi	r22, 0x4E	; 78
    2e1a:	c4 01       	movw	r24, r8
    2e1c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
    2e20:	81 11       	cpse	r24, r1
    2e22:	1e c0       	rjmp	.+60     	; 0x2e60 <VL53L0X_perform_ref_spad_management+0xd8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	6f ef       	ldi	r22, 0xFF	; 255
    2e28:	c4 01       	movw	r24, r8
    2e2a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2e2e:	81 11       	cpse	r24, r1
    2e30:	44 c0       	rjmp	.+136    	; 0x2eba <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_WrByte(Dev,
    2e32:	44 eb       	ldi	r20, 0xB4	; 180
    2e34:	66 eb       	ldi	r22, 0xB6	; 182
    2e36:	c4 01       	movw	r24, r8
    2e38:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	c1 c1       	rjmp	.+898    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
		Status = VL53L0X_WrByte(Dev,
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	60 e8       	ldi	r22, 0x80	; 128
    2e44:	c4 01       	movw	r24, r8
    2e46:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
    2e4a:	81 11       	cpse	r24, r1
    2e4c:	76 c1       	rjmp	.+748    	; 0x313a <VL53L0X_perform_ref_spad_management+0x3b2>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
    2e4e:	20 e0       	ldi	r18, 0x00	; 0
    2e50:	ae 01       	movw	r20, r28
    2e52:	4e 5e       	subi	r20, 0xEE	; 238
    2e54:	5f 4f       	sbci	r21, 0xFF	; 255
    2e56:	be 01       	movw	r22, r28
    2e58:	6f 5e       	subi	r22, 0xEF	; 239
    2e5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e5c:	c4 01       	movw	r24, r8
    2e5e:	6a df       	rcall	.-300    	; 0x2d34 <VL53L0X_perform_ref_calibration>
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
    2e60:	81 11       	cpse	r24, r1
    2e62:	af c1       	rjmp	.+862    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
		lastSpadIndex = currentSpadIndex;
    2e64:	1f 82       	std	Y+7, r1	; 0x07
    2e66:	18 86       	std	Y+8, r1	; 0x08
    2e68:	19 86       	std	Y+9, r1	; 0x09
    2e6a:	1a 86       	std	Y+10, r1	; 0x0a
		needAptSpads = 0;
		Status = enable_ref_spads(Dev,
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	07 96       	adiw	r24, 0x07	; 7
    2e70:	9f 93       	push	r25
    2e72:	8f 93       	push	r24
    2e74:	1f 92       	push	r1
    2e76:	1f 92       	push	r1
    2e78:	1f 92       	push	r1
    2e7a:	83 e0       	ldi	r24, 0x03	; 3
    2e7c:	8f 93       	push	r24
    2e7e:	1f 92       	push	r1
    2e80:	1f 92       	push	r1
    2e82:	1f 92       	push	r1
    2e84:	1f 92       	push	r1
    2e86:	0f 2e       	mov	r0, r31
    2e88:	f4 eb       	ldi	r31, 0xB4	; 180
    2e8a:	af 2e       	mov	r10, r31
    2e8c:	b1 2c       	mov	r11, r1
    2e8e:	c1 2c       	mov	r12, r1
    2e90:	d1 2c       	mov	r13, r1
    2e92:	f0 2d       	mov	r31, r0
    2e94:	16 e0       	ldi	r17, 0x06	; 6
    2e96:	e1 2e       	mov	r14, r17
    2e98:	f1 2c       	mov	r15, r1
    2e9a:	00 e0       	ldi	r16, 0x00	; 0
    2e9c:	10 e0       	ldi	r17, 0x00	; 0
    2e9e:	94 01       	movw	r18, r8
    2ea0:	2f 5e       	subi	r18, 0xEF	; 239
    2ea2:	3e 4f       	sbci	r19, 0xFE	; 254
    2ea4:	a4 01       	movw	r20, r8
    2ea6:	49 5e       	subi	r20, 0xE9	; 233
    2ea8:	5e 4f       	sbci	r21, 0xFE	; 254
    2eaa:	60 e0       	ldi	r22, 0x00	; 0
    2eac:	c4 01       	movw	r24, r8
    2eae:	24 dc       	rcall	.-1976   	; 0x26f8 <enable_ref_spads>
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
    2eba:	81 11       	cpse	r24, r1
    2ebc:	82 c1       	rjmp	.+772    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
		currentSpadIndex = lastSpadIndex;
    2ebe:	af 80       	ldd	r10, Y+7	; 0x07
    2ec0:	b8 84       	ldd	r11, Y+8	; 0x08
    2ec2:	c9 84       	ldd	r12, Y+9	; 0x09
    2ec4:	da 84       	ldd	r13, Y+10	; 0x0a

		Status = perform_ref_signal_measurement(Dev,
    2ec6:	be 01       	movw	r22, r28
    2ec8:	61 5f       	subi	r22, 0xF1	; 241
    2eca:	7f 4f       	sbci	r23, 0xFF	; 255
    2ecc:	c4 01       	movw	r24, r8
    2ece:	fd dc       	rcall	.-1542   	; 0x28ca <perform_ref_signal_measurement>
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
    2ed0:	81 11       	cpse	r24, r1
    2ed2:	77 c1       	rjmp	.+750    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
    2ed4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed6:	98 89       	ldd	r25, Y+16	; 0x10
    2ed8:	68 16       	cp	r6, r24
    2eda:	79 06       	cpc	r7, r25
    2edc:	08 f0       	brcs	.+2      	; 0x2ee0 <VL53L0X_perform_ref_spad_management+0x158>
    2ede:	52 c1       	rjmp	.+676    	; 0x3184 <VL53L0X_perform_ref_spad_management+0x3fc>
			(peakSignalRateRef > targetRefRate)) {
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
    2ee0:	f4 01       	movw	r30, r8
    2ee2:	ef 5e       	subi	r30, 0xEF	; 239
    2ee4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ee6:	10 82       	st	Z, r1
    2ee8:	31 96       	adiw	r30, 0x01	; 1
    2eea:	10 82       	st	Z, r1
    2eec:	31 96       	adiw	r30, 0x01	; 1
    2eee:	10 82       	st	Z, r1
    2ef0:	31 96       	adiw	r30, 0x01	; 1
    2ef2:	10 82       	st	Z, r1
    2ef4:	31 96       	adiw	r30, 0x01	; 1
    2ef6:	10 82       	st	Z, r1
    2ef8:	31 96       	adiw	r30, 0x01	; 1
    2efa:	10 82       	st	Z, r1
    2efc:	05 c0       	rjmp	.+10     	; 0x2f08 <VL53L0X_perform_ref_spad_management+0x180>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
    2efe:	3f ef       	ldi	r19, 0xFF	; 255
    2f00:	a3 1a       	sub	r10, r19
    2f02:	b3 0a       	sbc	r11, r19
    2f04:	c3 0a       	sbc	r12, r19
    2f06:	d3 0a       	sbc	r13, r19
			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
    2f08:	c6 01       	movw	r24, r12
    2f0a:	b5 01       	movw	r22, r10
    2f0c:	6c 54       	subi	r22, 0x4C	; 76
    2f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f10:	8f 4f       	sbci	r24, 0xFF	; 255
    2f12:	9f 4f       	sbci	r25, 0xFF	; 255
    2f14:	8a db       	rcall	.-2284   	; 0x262a <is_aperture>
    2f16:	81 11       	cpse	r24, r1
    2f18:	06 c0       	rjmp	.+12     	; 0x2f26 <VL53L0X_perform_ref_spad_management+0x19e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
    2f1a:	4c e2       	ldi	r20, 0x2C	; 44
    2f1c:	a4 16       	cp	r10, r20
    2f1e:	b1 04       	cpc	r11, r1
    2f20:	c1 04       	cpc	r12, r1
    2f22:	d1 04       	cpc	r13, r1
    2f24:	60 f3       	brcs	.-40     	; 0x2efe <VL53L0X_perform_ref_spad_management+0x176>
				currentSpadIndex++;
			}

			needAptSpads = 1;

			Status = enable_ref_spads(Dev,
    2f26:	ce 01       	movw	r24, r28
    2f28:	07 96       	adiw	r24, 0x07	; 7
    2f2a:	9f 93       	push	r25
    2f2c:	8f 93       	push	r24
    2f2e:	1f 92       	push	r1
    2f30:	1f 92       	push	r1
    2f32:	1f 92       	push	r1
    2f34:	83 e0       	ldi	r24, 0x03	; 3
    2f36:	8f 93       	push	r24
    2f38:	df 92       	push	r13
    2f3a:	cf 92       	push	r12
    2f3c:	bf 92       	push	r11
    2f3e:	af 92       	push	r10
    2f40:	0f 2e       	mov	r0, r31
    2f42:	f4 eb       	ldi	r31, 0xB4	; 180
    2f44:	af 2e       	mov	r10, r31
    2f46:	b1 2c       	mov	r11, r1
    2f48:	c1 2c       	mov	r12, r1
    2f4a:	d1 2c       	mov	r13, r1
    2f4c:	f0 2d       	mov	r31, r0
    2f4e:	16 e0       	ldi	r17, 0x06	; 6
    2f50:	e1 2e       	mov	r14, r17
    2f52:	f1 2c       	mov	r15, r1
    2f54:	00 e0       	ldi	r16, 0x00	; 0
    2f56:	10 e0       	ldi	r17, 0x00	; 0
    2f58:	94 01       	movw	r18, r8
    2f5a:	2f 5e       	subi	r18, 0xEF	; 239
    2f5c:	3e 4f       	sbci	r19, 0xFE	; 254
    2f5e:	a4 01       	movw	r20, r8
    2f60:	49 5e       	subi	r20, 0xE9	; 233
    2f62:	5e 4f       	sbci	r21, 0xFE	; 254
    2f64:	61 e0       	ldi	r22, 0x01	; 1
    2f66:	c4 01       	movw	r24, r8
    2f68:	c7 db       	rcall	.-2162   	; 0x26f8 <enable_ref_spads>
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    2f6a:	0f b6       	in	r0, 0x3f	; 63
    2f6c:	f8 94       	cli
    2f6e:	de bf       	out	0x3e, r29	; 62
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	cd bf       	out	0x3d, r28	; 61
    2f74:	81 11       	cpse	r24, r1
    2f76:	25 c1       	rjmp	.+586    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
				currentSpadIndex = lastSpadIndex;
    2f78:	af 80       	ldd	r10, Y+7	; 0x07
    2f7a:	b8 84       	ldd	r11, Y+8	; 0x08
    2f7c:	c9 84       	ldd	r12, Y+9	; 0x09
				Status = perform_ref_signal_measurement(Dev,
    2f7e:	da 84       	ldd	r13, Y+10	; 0x0a
    2f80:	be 01       	movw	r22, r28
    2f82:	61 5f       	subi	r22, 0xF1	; 241
    2f84:	7f 4f       	sbci	r23, 0xFF	; 255
    2f86:	c4 01       	movw	r24, r8
    2f88:	a0 dc       	rcall	.-1728   	; 0x28ca <perform_ref_signal_measurement>
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
    2f8a:	81 11       	cpse	r24, r1
    2f8c:	1a c1       	rjmp	.+564    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
    2f8e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f90:	98 89       	ldd	r25, Y+16	; 0x10
    2f92:	68 16       	cp	r6, r24
    2f94:	79 06       	cpc	r7, r25
    2f96:	08 f0       	brcs	.+2      	; 0x2f9a <VL53L0X_perform_ref_spad_management+0x212>
    2f98:	fe c0       	rjmp	.+508    	; 0x3196 <VL53L0X_perform_ref_spad_management+0x40e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
    2f9a:	b1 e0       	ldi	r27, 0x01	; 1
    2f9c:	bf a3       	std	Y+39, r27	; 0x27
					refSpadCount_int = minimumSpadCount;
    2f9e:	0f 2e       	mov	r0, r31
    2fa0:	f3 e0       	ldi	r31, 0x03	; 3
    2fa2:	2f 2e       	mov	r2, r31
    2fa4:	31 2c       	mov	r3, r1
    2fa6:	41 2c       	mov	r4, r1
    2fa8:	51 2c       	mov	r5, r1
    2faa:	f0 2d       	mov	r31, r0
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    2fac:	21 e0       	ldi	r18, 0x01	; 1
    2fae:	30 e0       	ldi	r19, 0x00	; 0
    2fb0:	40 e0       	ldi	r20, 0x00	; 0
    2fb2:	50 e0       	ldi	r21, 0x00	; 0
    2fb4:	29 8f       	std	Y+25, r18	; 0x19
    2fb6:	3a 8f       	std	Y+26, r19	; 0x1a
    2fb8:	4b 8f       	std	Y+27, r20	; 0x1b
    2fba:	5c 8f       	std	Y+28, r21	; 0x1c
    2fbc:	f8 c0       	rjmp	.+496    	; 0x31ae <VL53L0X_perform_ref_spad_management+0x426>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
    2fbe:	39 8d       	ldd	r19, Y+25	; 0x19
    2fc0:	3f a3       	std	Y+39, r19	; 0x27
		refSpadCount_int	= minimumSpadCount;

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
    2fc2:	26 e0       	ldi	r18, 0x06	; 6
    2fc4:	f4 01       	movw	r30, r8
    2fc6:	ef 5e       	subi	r30, 0xEF	; 239
    2fc8:	fe 4f       	sbci	r31, 0xFE	; 254
    2fca:	de 01       	movw	r26, r28
    2fcc:	11 96       	adiw	r26, 0x01	; 1
    2fce:	01 90       	ld	r0, Z+
    2fd0:	0d 92       	st	X+, r0
    2fd2:	2a 95       	dec	r18
    2fd4:	e1 f7       	brne	.-8      	; 0x2fce <VL53L0X_perform_ref_spad_management+0x246>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
    2fd6:	86 19       	sub	r24, r6
    2fd8:	97 09       	sbc	r25, r7
    2fda:	9c 01       	movw	r18, r24
    2fdc:	22 f4       	brpl	.+8      	; 0x2fe6 <VL53L0X_perform_ref_spad_management+0x25e>
    2fde:	22 27       	eor	r18, r18
    2fe0:	33 27       	eor	r19, r19
    2fe2:	28 1b       	sub	r18, r24
    2fe4:	39 0b       	sbc	r19, r25
    2fe6:	c9 01       	movw	r24, r18
    2fe8:	33 0f       	add	r19, r19
    2fea:	aa 0b       	sbc	r26, r26
    2fec:	bb 0b       	sbc	r27, r27
    2fee:	8f 8f       	std	Y+31, r24	; 0x1f
    2ff0:	98 a3       	std	Y+32, r25	; 0x20
    2ff2:	a9 a3       	std	Y+33, r26	; 0x21
    2ff4:	ba a3       	std	Y+34, r27	; 0x22
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
		refSpadCount_int	= minimumSpadCount;
    2ff6:	23 e0       	ldi	r18, 0x03	; 3
    2ff8:	30 e0       	ldi	r19, 0x00	; 0
    2ffa:	40 e0       	ldi	r20, 0x00	; 0
    2ffc:	50 e0       	ldi	r21, 0x00	; 0
    2ffe:	2d 8b       	std	Y+21, r18	; 0x15
    3000:	3e 8b       	std	Y+22, r19	; 0x16
    3002:	4f 8b       	std	Y+23, r20	; 0x17
    3004:	58 8f       	std	Y+24, r21	; 0x18
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
    3006:	a4 01       	movw	r20, r8
    3008:	49 5e       	subi	r20, 0xE9	; 233
    300a:	5e 4f       	sbci	r21, 0xFE	; 254
    300c:	5e 8f       	std	Y+30, r21	; 0x1e
    300e:	4d 8f       	std	Y+29, r20	; 0x1d
				break;
			}

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
    3010:	c4 01       	movw	r24, r8
    3012:	8f 5e       	subi	r24, 0xEF	; 239
    3014:	9e 4f       	sbci	r25, 0xFE	; 254
    3016:	9c 8b       	std	Y+20, r25	; 0x14
    3018:	8b 8b       	std	Y+19, r24	; 0x13
		lastSignalRateDiff = abs(peakSignalRateRef -
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
    301a:	de 01       	movw	r26, r28
    301c:	1b 96       	adiw	r26, 0x0b	; 11
    301e:	7d 01       	movw	r14, r26
    3020:	96 01       	movw	r18, r12
    3022:	85 01       	movw	r16, r10
    3024:	46 e0       	ldi	r20, 0x06	; 6
    3026:	50 e0       	ldi	r21, 0x00	; 0
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	70 e0       	ldi	r23, 0x00	; 0
    302c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    302e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3030:	7a da       	rcall	.-2828   	; 0x2526 <get_next_good_spad>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
    3032:	cb 84       	ldd	r12, Y+11	; 0x0b
    3034:	dc 84       	ldd	r13, Y+12	; 0x0c
    3036:	ed 84       	ldd	r14, Y+13	; 0x0d
    3038:	fe 84       	ldd	r15, Y+14	; 0x0e
    303a:	bf ef       	ldi	r27, 0xFF	; 255
    303c:	cb 16       	cp	r12, r27
    303e:	db 06       	cpc	r13, r27
    3040:	eb 06       	cpc	r14, r27
    3042:	fb 06       	cpc	r15, r27
    3044:	09 f4       	brne	.+2      	; 0x3048 <VL53L0X_perform_ref_spad_management+0x2c0>
    3046:	ba c0       	rjmp	.+372    	; 0x31bc <VL53L0X_perform_ref_spad_management+0x434>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			(refSpadCount_int)++;
    3048:	2d 88       	ldd	r2, Y+21	; 0x15
    304a:	3e 88       	ldd	r3, Y+22	; 0x16
    304c:	4f 88       	ldd	r4, Y+23	; 0x17
    304e:	58 8c       	ldd	r5, Y+24	; 0x18
    3050:	ef ef       	ldi	r30, 0xFF	; 255
    3052:	2e 1a       	sub	r2, r30
    3054:	3e 0a       	sbc	r3, r30
    3056:	4e 0a       	sbc	r4, r30

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
    3058:	5e 0a       	sbc	r5, r30
    305a:	c7 01       	movw	r24, r14
    305c:	b6 01       	movw	r22, r12
    305e:	6c 54       	subi	r22, 0x4C	; 76
    3060:	7f 4f       	sbci	r23, 0xFF	; 255
    3062:	8f 4f       	sbci	r24, 0xFF	; 255
    3064:	9f 4f       	sbci	r25, 0xFF	; 255
    3066:	e1 da       	rcall	.-2622   	; 0x262a <is_aperture>
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	a0 e0       	ldi	r26, 0x00	; 0
    306c:	b0 e0       	ldi	r27, 0x00	; 0
    306e:	29 8d       	ldd	r18, Y+25	; 0x19
    3070:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3072:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3074:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3076:	82 17       	cp	r24, r18
    3078:	93 07       	cpc	r25, r19
    307a:	a4 07       	cpc	r26, r20
    307c:	b5 07       	cpc	r27, r21
    307e:	09 f0       	breq	.+2      	; 0x3082 <VL53L0X_perform_ref_spad_management+0x2fa>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
    3080:	9f c0       	rjmp	.+318    	; 0x31c0 <VL53L0X_perform_ref_spad_management+0x438>
    3082:	97 01       	movw	r18, r14
    3084:	86 01       	movw	r16, r12
    3086:	46 e0       	ldi	r20, 0x06	; 6
    3088:	50 e0       	ldi	r21, 0x00	; 0
    308a:	60 e0       	ldi	r22, 0x00	; 0
    308c:	70 e0       	ldi	r23, 0x00	; 0
    308e:	8b 89       	ldd	r24, Y+19	; 0x13
    3090:	9c 89       	ldd	r25, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables,
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    3092:	e8 da       	rcall	.-2608   	; 0x2664 <enable_spad_bit>
    3094:	81 11       	cpse	r24, r1
				currentSpadIndex++;
    3096:	95 c0       	rjmp	.+298    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
    3098:	56 01       	movw	r10, r12
    309a:	67 01       	movw	r12, r14
    309c:	3f ef       	ldi	r19, 0xFF	; 255
    309e:	a3 1a       	sub	r10, r19
    30a0:	b3 0a       	sbc	r11, r19
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
    30a2:	c3 0a       	sbc	r12, r19
    30a4:	d3 0a       	sbc	r13, r19
    30a6:	6b 89       	ldd	r22, Y+19	; 0x13
    30a8:	7c 89       	ldd	r23, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables);
			}

			if (Status != VL53L0X_ERROR_NONE)
    30aa:	c4 01       	movw	r24, r8
    30ac:	0b db       	rcall	.-2538   	; 0x26c4 <set_ref_spad_map>
				break;

			Status = perform_ref_signal_measurement(Dev,
    30ae:	81 11       	cpse	r24, r1
    30b0:	88 c0       	rjmp	.+272    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
    30b2:	be 01       	movw	r22, r28
    30b4:	61 5f       	subi	r22, 0xF1	; 241
    30b6:	7f 4f       	sbci	r23, 0xFF	; 255
    30b8:	c4 01       	movw	r24, r8
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
    30ba:	07 dc       	rcall	.-2034   	; 0x28ca <perform_ref_signal_measurement>
    30bc:	81 11       	cpse	r24, r1
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    30be:	81 c0       	rjmp	.+258    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
    30c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c2:	98 89       	ldd	r25, Y+16	; 0x10
    30c4:	9c 01       	movw	r18, r24
    30c6:	26 19       	sub	r18, r6
    30c8:	37 09       	sbc	r19, r7
    30ca:	a9 01       	movw	r20, r18
    30cc:	22 f4       	brpl	.+8      	; 0x30d6 <VL53L0X_perform_ref_spad_management+0x34e>
    30ce:	44 27       	eor	r20, r20
    30d0:	55 27       	eor	r21, r21
    30d2:	42 1b       	sub	r20, r18
    30d4:	53 0b       	sbc	r21, r19
    30d6:	05 2e       	mov	r0, r21
    30d8:	00 0c       	add	r0, r0
    30da:	66 0b       	sbc	r22, r22

			if (peakSignalRateRef > targetRefRate) {
    30dc:	77 0b       	sbc	r23, r23
    30de:	68 16       	cp	r6, r24
    30e0:	79 06       	cpc	r7, r25
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
    30e2:	c8 f4       	brcc	.+50     	; 0x3116 <VL53L0X_perform_ref_spad_management+0x38e>
    30e4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30e6:	98 a1       	ldd	r25, Y+32	; 0x20
    30e8:	a9 a1       	ldd	r26, Y+33	; 0x21
    30ea:	ba a1       	ldd	r27, Y+34	; 0x22
    30ec:	84 17       	cp	r24, r20
    30ee:	95 07       	cpc	r25, r21
    30f0:	a6 07       	cpc	r26, r22
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
    30f2:	b7 07       	cpc	r27, r23
    30f4:	68 f5       	brcc	.+90     	; 0x3150 <VL53L0X_perform_ref_spad_management+0x3c8>
    30f6:	be 01       	movw	r22, r28
    30f8:	6f 5f       	subi	r22, 0xFF	; 255
    30fa:	7f 4f       	sbci	r23, 0xFF	; 255
    30fc:	c4 01       	movw	r24, r8
							lastSpadArray);
					memcpy(
    30fe:	e2 da       	rcall	.-2620   	; 0x26c4 <set_ref_spad_map>
    3100:	96 e0       	ldi	r25, 0x06	; 6
    3102:	fe 01       	movw	r30, r28
    3104:	31 96       	adiw	r30, 0x01	; 1
    3106:	d4 01       	movw	r26, r8
    3108:	af 5e       	subi	r26, 0xEF	; 239
    310a:	be 4f       	sbci	r27, 0xFE	; 254
    310c:	01 90       	ld	r0, Z+
    310e:	0d 92       	st	X+, r0
    3110:	9a 95       	dec	r25
    3112:	e1 f7       	brne	.-8      	; 0x310c <VL53L0X_perform_ref_spad_management+0x384>
				}
				complete = 1;
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
				memcpy(lastSpadArray,
    3114:	17 c0       	rjmp	.+46     	; 0x3144 <VL53L0X_perform_ref_spad_management+0x3bc>
    3116:	86 e0       	ldi	r24, 0x06	; 6
    3118:	eb 89       	ldd	r30, Y+19	; 0x13
    311a:	fc 89       	ldd	r31, Y+20	; 0x14
    311c:	de 01       	movw	r26, r28
    311e:	11 96       	adiw	r26, 0x01	; 1
    3120:	01 90       	ld	r0, Z+
    3122:	0d 92       	st	X+, r0
    3124:	8a 95       	dec	r24
			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			(refSpadCount_int)++;
    3126:	e1 f7       	brne	.-8      	; 0x3120 <VL53L0X_perform_ref_spad_management+0x398>
    3128:	2d 8a       	std	Y+21, r2	; 0x15
    312a:	3e 8a       	std	Y+22, r3	; 0x16
    312c:	4f 8a       	std	Y+23, r4	; 0x17
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    312e:	58 8e       	std	Y+24, r5	; 0x18
    3130:	4f 8f       	std	Y+31, r20	; 0x1f
    3132:	58 a3       	std	Y+32, r21	; 0x20
    3134:	69 a3       	std	Y+33, r22	; 0x21
    3136:	7a a3       	std	Y+34, r23	; 0x22
    3138:	70 cf       	rjmp	.-288    	; 0x301a <VL53L0X_perform_ref_spad_management+0x292>
    313a:	1f a2       	std	Y+39, r1	; 0x27
    313c:	1d 8a       	std	Y+21, r1	; 0x15
    313e:	1e 8a       	std	Y+22, r1	; 0x16
    3140:	1f 8a       	std	Y+23, r1	; 0x17
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
    3142:	18 8e       	std	Y+24, r1	; 0x18
    3144:	81 11       	cpse	r24, r1
    3146:	3d c0       	rjmp	.+122    	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
    3148:	2d 88       	ldd	r2, Y+21	; 0x15
    314a:	3e 88       	ldd	r3, Y+22	; 0x16
    314c:	4f 88       	ldd	r4, Y+23	; 0x17
		*refSpadCount = refSpadCount_int;
    314e:	58 8c       	ldd	r5, Y+24	; 0x18
    3150:	ab a1       	ldd	r26, Y+35	; 0x23
    3152:	bc a1       	ldd	r27, Y+36	; 0x24
    3154:	2d 92       	st	X+, r2
    3156:	3d 92       	st	X+, r3
    3158:	4d 92       	st	X+, r4
    315a:	5c 92       	st	X, r5
		*isApertureSpads = isApertureSpads_int;
    315c:	13 97       	sbiw	r26, 0x03	; 3
    315e:	2f a1       	ldd	r18, Y+39	; 0x27
    3160:	ed a1       	ldd	r30, Y+37	; 0x25
    3162:	fe a1       	ldd	r31, Y+38	; 0x26

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
    3164:	20 83       	st	Z, r18
    3166:	f4 01       	movw	r30, r8
    3168:	ec 5f       	subi	r30, 0xFC	; 252
    316a:	fe 4f       	sbci	r31, 0xFE	; 254
    316c:	81 e0       	ldi	r24, 0x01	; 1
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    316e:	80 83       	st	Z, r24
    3170:	32 97       	sbiw	r30, 0x02	; 2
    3172:	8c 91       	ld	r24, X
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3174:	80 83       	st	Z, r24
    3176:	ad a1       	ldd	r26, Y+37	; 0x25
    3178:	be a1       	ldd	r27, Y+38	; 0x26
    317a:	8c 91       	ld	r24, X
    317c:	31 96       	adiw	r30, 0x01	; 1
    317e:	80 83       	st	Z, r24
    3180:	80 e0       	ldi	r24, 0x00	; 0
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
	uint8_t	 isApertureSpads_int = 0;
    3182:	1f c0       	rjmp	.+62     	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
    3184:	1f a2       	std	Y+39, r1	; 0x27
    3186:	21 2c       	mov	r2, r1
    3188:	31 2c       	mov	r3, r1
					isApertureSpads_int = 1;
					refSpadCount_int = minimumSpadCount;
				}
			}
		} else {
			needAptSpads = 0;
    318a:	21 01       	movw	r4, r2
    318c:	19 8e       	std	Y+25, r1	; 0x19
    318e:	1a 8e       	std	Y+26, r1	; 0x1a
    3190:	1b 8e       	std	Y+27, r1	; 0x1b
    3192:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
	uint8_t	 isApertureSpads_int = 0;
    3194:	0c c0       	rjmp	.+24     	; 0x31ae <VL53L0X_perform_ref_spad_management+0x426>
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
    3196:	1f a2       	std	Y+39, r1	; 0x27
    3198:	21 2c       	mov	r2, r1
    319a:	31 2c       	mov	r3, r1
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    319c:	21 01       	movw	r4, r2
    319e:	21 e0       	ldi	r18, 0x01	; 1
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	50 e0       	ldi	r21, 0x00	; 0
    31a6:	29 8f       	std	Y+25, r18	; 0x19
    31a8:	3a 8f       	std	Y+26, r19	; 0x1a
    31aa:	4b 8f       	std	Y+27, r20	; 0x1b
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
		(peakSignalRateRef < targetRefRate)) {
    31ac:	5c 8f       	std	Y+28, r21	; 0x1c
    31ae:	8f 85       	ldd	r24, Y+15	; 0x0f
		} else {
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
    31b0:	98 89       	ldd	r25, Y+16	; 0x10
    31b2:	86 15       	cp	r24, r6
    31b4:	97 05       	cpc	r25, r7
    31b6:	08 f4       	brcc	.+2      	; 0x31ba <VL53L0X_perform_ref_spad_management+0x432>
    31b8:	02 cf       	rjmp	.-508    	; 0x2fbe <VL53L0X_perform_ref_spad_management+0x236>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    31ba:	ca cf       	rjmp	.-108    	; 0x3150 <VL53L0X_perform_ref_spad_management+0x3c8>
    31bc:	8e ec       	ldi	r24, 0xCE	; 206
			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    31be:	01 c0       	rjmp	.+2      	; 0x31c2 <VL53L0X_perform_ref_spad_management+0x43a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
}
    31c0:	8e ec       	ldi	r24, 0xCE	; 206
    31c2:	a7 96       	adiw	r28, 0x27	; 39
    31c4:	0f b6       	in	r0, 0x3f	; 63
    31c6:	f8 94       	cli
    31c8:	de bf       	out	0x3e, r29	; 62
    31ca:	0f be       	out	0x3f, r0	; 63
    31cc:	cd bf       	out	0x3d, r28	; 61
    31ce:	df 91       	pop	r29
    31d0:	cf 91       	pop	r28
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	ff 90       	pop	r15
    31d8:	ef 90       	pop	r14
    31da:	df 90       	pop	r13
    31dc:	cf 90       	pop	r12
    31de:	bf 90       	pop	r11
    31e0:	af 90       	pop	r10
    31e2:	9f 90       	pop	r9
    31e4:	8f 90       	pop	r8
    31e6:	7f 90       	pop	r7
    31e8:	6f 90       	pop	r6
    31ea:	5f 90       	pop	r5
    31ec:	4f 90       	pop	r4
    31ee:	3f 90       	pop	r3
    31f0:	2f 90       	pop	r2
    31f2:	08 95       	ret

000031f4 <VL53L0X_measurement_poll_for_completion>:
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	1f 92       	push	r1
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	7c 01       	movw	r14, r24
    3208:	19 82       	std	Y+1, r1	; 0x01
    320a:	00 e0       	ldi	r16, 0x00	; 0
    320c:	10 e0       	ldi	r17, 0x00	; 0
    320e:	be 01       	movw	r22, r28
    3210:	6f 5f       	subi	r22, 0xFF	; 255
    3212:	7f 4f       	sbci	r23, 0xFF	; 255
    3214:	c7 01       	movw	r24, r14
    3216:	08 d9       	rcall	.-3568   	; 0x2428 <VL53L0X_GetMeasurementDataReady>
    3218:	81 11       	cpse	r24, r1
    321a:	0d c0       	rjmp	.+26     	; 0x3236 <VL53L0X_measurement_poll_for_completion+0x42>
    321c:	99 81       	ldd	r25, Y+1	; 0x01
    321e:	91 30       	cpi	r25, 0x01	; 1
    3220:	51 f0       	breq	.+20     	; 0x3236 <VL53L0X_measurement_poll_for_completion+0x42>
    3222:	0f 5f       	subi	r16, 0xFF	; 255
    3224:	1f 4f       	sbci	r17, 0xFF	; 255
    3226:	08 3c       	cpi	r16, 0xC8	; 200
    3228:	11 05       	cpc	r17, r1
    322a:	21 f0       	breq	.+8      	; 0x3234 <VL53L0X_measurement_poll_for_completion+0x40>
    322c:	c7 01       	movw	r24, r14
    322e:	0e 94 0a 2c 	call	0x5814	; 0x5814 <VL53L0X_PollingDelay>
    3232:	ed cf       	rjmp	.-38     	; 0x320e <VL53L0X_measurement_poll_for_completion+0x1a>
    3234:	89 ef       	ldi	r24, 0xF9	; 249
    3236:	0f 90       	pop	r0
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	08 95       	ret

00003246 <VL53L0X_isqrt>:
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	8b 01       	movw	r16, r22
    3254:	9c 01       	movw	r18, r24
    3256:	01 15       	cp	r16, r1
    3258:	11 05       	cpc	r17, r1
    325a:	21 05       	cpc	r18, r1
    325c:	80 e4       	ldi	r24, 0x40	; 64
    325e:	38 07       	cpc	r19, r24
    3260:	b0 f4       	brcc	.+44     	; 0x328e <VL53L0X_isqrt+0x48>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a0 e0       	ldi	r26, 0x00	; 0
    3268:	b0 e4       	ldi	r27, 0x40	; 64
    326a:	b6 95       	lsr	r27
    326c:	a7 95       	ror	r26
    326e:	97 95       	ror	r25
    3270:	87 95       	ror	r24
    3272:	b6 95       	lsr	r27
    3274:	a7 95       	ror	r26
    3276:	97 95       	ror	r25
    3278:	87 95       	ror	r24
    327a:	08 17       	cp	r16, r24
    327c:	19 07       	cpc	r17, r25
    327e:	2a 07       	cpc	r18, r26
    3280:	3b 07       	cpc	r19, r27
    3282:	98 f3       	brcs	.-26     	; 0x326a <VL53L0X_isqrt+0x24>
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	a1 05       	cpc	r26, r1
    3288:	b1 05       	cpc	r27, r1
    328a:	29 f4       	brne	.+10     	; 0x3296 <VL53L0X_isqrt+0x50>
    328c:	30 c0       	rjmp	.+96     	; 0x32ee <VL53L0X_isqrt+0xa8>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	a0 e0       	ldi	r26, 0x00	; 0
    3294:	b0 e4       	ldi	r27, 0x40	; 64
    3296:	40 e0       	ldi	r20, 0x00	; 0
    3298:	50 e0       	ldi	r21, 0x00	; 0
    329a:	ba 01       	movw	r22, r20
    329c:	6a 01       	movw	r12, r20
    329e:	7b 01       	movw	r14, r22
    32a0:	c8 0e       	add	r12, r24
    32a2:	d9 1e       	adc	r13, r25
    32a4:	ea 1e       	adc	r14, r26
    32a6:	fb 1e       	adc	r15, r27
    32a8:	0c 15       	cp	r16, r12
    32aa:	1d 05       	cpc	r17, r13
    32ac:	2e 05       	cpc	r18, r14
    32ae:	3f 05       	cpc	r19, r15
    32b0:	68 f0       	brcs	.+26     	; 0x32cc <VL53L0X_isqrt+0x86>
    32b2:	0c 19       	sub	r16, r12
    32b4:	1d 09       	sbc	r17, r13
    32b6:	2e 09       	sbc	r18, r14
    32b8:	3f 09       	sbc	r19, r15
    32ba:	76 95       	lsr	r23
    32bc:	67 95       	ror	r22
    32be:	57 95       	ror	r21
    32c0:	47 95       	ror	r20
    32c2:	48 0f       	add	r20, r24
    32c4:	59 1f       	adc	r21, r25
    32c6:	6a 1f       	adc	r22, r26
    32c8:	7b 1f       	adc	r23, r27
    32ca:	04 c0       	rjmp	.+8      	; 0x32d4 <VL53L0X_isqrt+0x8e>
    32cc:	76 95       	lsr	r23
    32ce:	67 95       	ror	r22
    32d0:	57 95       	ror	r21
    32d2:	47 95       	ror	r20
    32d4:	b6 95       	lsr	r27
    32d6:	a7 95       	ror	r26
    32d8:	97 95       	ror	r25
    32da:	87 95       	ror	r24
    32dc:	b6 95       	lsr	r27
    32de:	a7 95       	ror	r26
    32e0:	97 95       	ror	r25
    32e2:	87 95       	ror	r24
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	a1 05       	cpc	r26, r1
    32e8:	b1 05       	cpc	r27, r1
    32ea:	c1 f6       	brne	.-80     	; 0x329c <VL53L0X_isqrt+0x56>
    32ec:	03 c0       	rjmp	.+6      	; 0x32f4 <VL53L0X_isqrt+0xae>
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	ba 01       	movw	r22, r20
    32f4:	cb 01       	movw	r24, r22
    32f6:	ba 01       	movw	r22, r20
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	ff 90       	pop	r15
    32fe:	ef 90       	pop	r14
    3300:	df 90       	pop	r13
    3302:	cf 90       	pop	r12
    3304:	08 95       	ret

00003306 <VL53L0X_device_read_strobe>:
    3306:	af 92       	push	r10
    3308:	bf 92       	push	r11
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	1f 93       	push	r17
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	1f 92       	push	r1
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	5c 01       	movw	r10, r24
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	63 e8       	ldi	r22, 0x83	; 131
    3324:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3328:	18 2f       	mov	r17, r24
    332a:	81 11       	cpse	r24, r1
    332c:	24 c0       	rjmp	.+72     	; 0x3376 <VL53L0X_device_read_strobe+0x70>
    332e:	c1 2c       	mov	r12, r1
    3330:	d1 2c       	mov	r13, r1
    3332:	76 01       	movw	r14, r12
    3334:	ae 01       	movw	r20, r28
    3336:	4f 5f       	subi	r20, 0xFF	; 255
    3338:	5f 4f       	sbci	r21, 0xFF	; 255
    333a:	63 e8       	ldi	r22, 0x83	; 131
    333c:	c5 01       	movw	r24, r10
    333e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    3342:	18 2f       	mov	r17, r24
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	81 11       	cpse	r24, r1
    3348:	0f c0       	rjmp	.+30     	; 0x3368 <VL53L0X_device_read_strobe+0x62>
    334a:	11 11       	cpse	r17, r1
    334c:	0d c0       	rjmp	.+26     	; 0x3368 <VL53L0X_device_read_strobe+0x62>
    334e:	8f ef       	ldi	r24, 0xFF	; 255
    3350:	c8 1a       	sub	r12, r24
    3352:	d8 0a       	sbc	r13, r24
    3354:	e8 0a       	sbc	r14, r24
    3356:	f8 0a       	sbc	r15, r24
    3358:	88 ec       	ldi	r24, 0xC8	; 200
    335a:	c8 16       	cp	r12, r24
    335c:	d1 04       	cpc	r13, r1
    335e:	e1 04       	cpc	r14, r1
    3360:	f1 04       	cpc	r15, r1
    3362:	41 f7       	brne	.-48     	; 0x3334 <VL53L0X_device_read_strobe+0x2e>
    3364:	19 ef       	ldi	r17, 0xF9	; 249
    3366:	07 c0       	rjmp	.+14     	; 0x3376 <VL53L0X_device_read_strobe+0x70>
    3368:	88 ec       	ldi	r24, 0xC8	; 200
    336a:	c8 16       	cp	r12, r24
    336c:	d1 04       	cpc	r13, r1
    336e:	e1 04       	cpc	r14, r1
    3370:	f1 04       	cpc	r15, r1
    3372:	08 f0       	brcs	.+2      	; 0x3376 <VL53L0X_device_read_strobe+0x70>
    3374:	19 ef       	ldi	r17, 0xF9	; 249
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	63 e8       	ldi	r22, 0x83	; 131
    337a:	c5 01       	movw	r24, r10
    337c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3380:	81 2b       	or	r24, r17
    3382:	0f 90       	pop	r0
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	bf 90       	pop	r11
    3394:	af 90       	pop	r10
    3396:	08 95       	ret

00003398 <VL53L0X_get_info_from_device>:
    3398:	2f 92       	push	r2
    339a:	3f 92       	push	r3
    339c:	4f 92       	push	r4
    339e:	5f 92       	push	r5
    33a0:	6f 92       	push	r6
    33a2:	7f 92       	push	r7
    33a4:	8f 92       	push	r8
    33a6:	9f 92       	push	r9
    33a8:	af 92       	push	r10
    33aa:	bf 92       	push	r11
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	aa 97       	sbiw	r28, 0x2a	; 42
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	18 86       	std	Y+8, r1	; 0x08
    33ce:	19 86       	std	Y+9, r1	; 0x09
    33d0:	1a 86       	std	Y+10, r1	; 0x0a
    33d2:	1b 86       	std	Y+11, r1	; 0x0b
    33d4:	1c 86       	std	Y+12, r1	; 0x0c
    33d6:	1d 86       	std	Y+13, r1	; 0x0d
    33d8:	1e 86       	std	Y+14, r1	; 0x0e
    33da:	1f 86       	std	Y+15, r1	; 0x0f
    33dc:	fc 01       	movw	r30, r24
    33de:	e1 52       	subi	r30, 0x21	; 33
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	d0 80       	ld	r13, Z
    33e4:	27 e0       	ldi	r18, 0x07	; 7
    33e6:	d2 16       	cp	r13, r18
    33e8:	09 f4       	brne	.+2      	; 0x33ec <VL53L0X_get_info_from_device+0x54>
    33ea:	63 c3       	rjmp	.+1734   	; 0x3ab2 <VL53L0X_get_info_from_device+0x71a>
    33ec:	06 2f       	mov	r16, r22
    33ee:	7c 01       	movw	r14, r24
    33f0:	41 e0       	ldi	r20, 0x01	; 1
    33f2:	60 e8       	ldi	r22, 0x80	; 128
    33f4:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    33f8:	18 2f       	mov	r17, r24
    33fa:	41 e0       	ldi	r20, 0x01	; 1
    33fc:	6f ef       	ldi	r22, 0xFF	; 255
    33fe:	c7 01       	movw	r24, r14
    3400:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3404:	18 2b       	or	r17, r24
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	c7 01       	movw	r24, r14
    340c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3410:	18 2b       	or	r17, r24
    3412:	46 e0       	ldi	r20, 0x06	; 6
    3414:	6f ef       	ldi	r22, 0xFF	; 255
    3416:	c7 01       	movw	r24, r14
    3418:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    341c:	18 2b       	or	r17, r24
    341e:	ae 01       	movw	r20, r28
    3420:	4f 5f       	subi	r20, 0xFF	; 255
    3422:	5f 4f       	sbci	r21, 0xFF	; 255
    3424:	63 e8       	ldi	r22, 0x83	; 131
    3426:	c7 01       	movw	r24, r14
    3428:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    342c:	18 2b       	or	r17, r24
    342e:	49 81       	ldd	r20, Y+1	; 0x01
    3430:	44 60       	ori	r20, 0x04	; 4
    3432:	63 e8       	ldi	r22, 0x83	; 131
    3434:	c7 01       	movw	r24, r14
    3436:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    343a:	18 2b       	or	r17, r24
    343c:	47 e0       	ldi	r20, 0x07	; 7
    343e:	6f ef       	ldi	r22, 0xFF	; 255
    3440:	c7 01       	movw	r24, r14
    3442:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3446:	18 2b       	or	r17, r24
    3448:	41 e0       	ldi	r20, 0x01	; 1
    344a:	61 e8       	ldi	r22, 0x81	; 129
    344c:	c7 01       	movw	r24, r14
    344e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3452:	18 2b       	or	r17, r24
    3454:	c7 01       	movw	r24, r14
    3456:	0e 94 0a 2c 	call	0x5814	; 0x5814 <VL53L0X_PollingDelay>
    345a:	18 2b       	or	r17, r24
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	60 e8       	ldi	r22, 0x80	; 128
    3460:	c7 01       	movw	r24, r14
    3462:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3466:	18 2b       	or	r17, r24
    3468:	80 2f       	mov	r24, r16
    346a:	81 70       	andi	r24, 0x01	; 1
    346c:	28 2e       	mov	r2, r24
    346e:	00 ff       	sbrs	r16, 0
    3470:	56 c0       	rjmp	.+172    	; 0x351e <VL53L0X_get_info_from_device+0x186>
    3472:	d0 fc       	sbrc	r13, 0
    3474:	57 c0       	rjmp	.+174    	; 0x3524 <VL53L0X_get_info_from_device+0x18c>
    3476:	4b e6       	ldi	r20, 0x6B	; 107
    3478:	64 e9       	ldi	r22, 0x94	; 148
    347a:	c7 01       	movw	r24, r14
    347c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3480:	c8 2e       	mov	r12, r24
    3482:	c7 01       	movw	r24, r14
    3484:	40 df       	rcall	.-384    	; 0x3306 <VL53L0X_device_read_strobe>
    3486:	8c 29       	or	r24, r12
    3488:	18 2b       	or	r17, r24
    348a:	ae 01       	movw	r20, r28
    348c:	4e 5f       	subi	r20, 0xFE	; 254
    348e:	5f 4f       	sbci	r21, 0xFF	; 255
    3490:	60 e9       	ldi	r22, 0x90	; 144
    3492:	c7 01       	movw	r24, r14
    3494:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3498:	18 2b       	or	r17, r24
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	9b 81       	ldd	r25, Y+3	; 0x03
    349e:	ac 81       	ldd	r26, Y+4	; 0x04
    34a0:	bd 81       	ldd	r27, Y+5	; 0x05
    34a2:	e9 2f       	mov	r30, r25
    34a4:	ef 77       	andi	r30, 0x7F	; 127
    34a6:	e9 a7       	std	Y+41, r30	; 0x29
    34a8:	07 2e       	mov	r0, r23
    34aa:	7f e0       	ldi	r23, 0x0F	; 15
    34ac:	b6 95       	lsr	r27
    34ae:	a7 95       	ror	r26
    34b0:	97 95       	ror	r25
    34b2:	87 95       	ror	r24
    34b4:	7a 95       	dec	r23
    34b6:	d1 f7       	brne	.-12     	; 0x34ac <VL53L0X_get_info_from_device+0x114>
    34b8:	70 2d       	mov	r23, r0
    34ba:	f8 2f       	mov	r31, r24
    34bc:	f1 70       	andi	r31, 0x01	; 1
    34be:	fa a7       	std	Y+42, r31	; 0x2a
    34c0:	44 e2       	ldi	r20, 0x24	; 36
    34c2:	64 e9       	ldi	r22, 0x94	; 148
    34c4:	c7 01       	movw	r24, r14
    34c6:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    34ca:	18 2b       	or	r17, r24
    34cc:	c7 01       	movw	r24, r14
    34ce:	1b df       	rcall	.-458    	; 0x3306 <VL53L0X_device_read_strobe>
    34d0:	18 2b       	or	r17, r24
    34d2:	ae 01       	movw	r20, r28
    34d4:	4e 5f       	subi	r20, 0xFE	; 254
    34d6:	5f 4f       	sbci	r21, 0xFF	; 255
    34d8:	60 e9       	ldi	r22, 0x90	; 144
    34da:	c7 01       	movw	r24, r14
    34dc:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    34e0:	18 2b       	or	r17, r24
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	9b 81       	ldd	r25, Y+3	; 0x03
    34e6:	2c 81       	ldd	r18, Y+4	; 0x04
    34e8:	3d 81       	ldd	r19, Y+5	; 0x05
    34ea:	3b a3       	std	Y+35, r19	; 0x23
    34ec:	2c a3       	std	Y+36, r18	; 0x24
    34ee:	9d a3       	std	Y+37, r25	; 0x25
    34f0:	8e a3       	std	Y+38, r24	; 0x26
    34f2:	45 e2       	ldi	r20, 0x25	; 37
    34f4:	64 e9       	ldi	r22, 0x94	; 148
    34f6:	c7 01       	movw	r24, r14
    34f8:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    34fc:	18 2b       	or	r17, r24
    34fe:	c7 01       	movw	r24, r14
    3500:	02 df       	rcall	.-508    	; 0x3306 <VL53L0X_device_read_strobe>
    3502:	18 2b       	or	r17, r24
    3504:	ae 01       	movw	r20, r28
    3506:	4e 5f       	subi	r20, 0xFE	; 254
    3508:	5f 4f       	sbci	r21, 0xFF	; 255
    350a:	60 e9       	ldi	r22, 0x90	; 144
    350c:	c7 01       	movw	r24, r14
    350e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3512:	18 2b       	or	r17, r24
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	9d 81       	ldd	r25, Y+5	; 0x05
    3518:	9f a3       	std	Y+39, r25	; 0x27
    351a:	88 a7       	std	Y+40, r24	; 0x28
    351c:	05 c0       	rjmp	.+10     	; 0x3528 <VL53L0X_get_info_from_device+0x190>
    351e:	1a a6       	std	Y+42, r1	; 0x2a
    3520:	19 a6       	std	Y+41, r1	; 0x29
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <VL53L0X_get_info_from_device+0x190>
    3524:	1a a6       	std	Y+42, r1	; 0x2a
    3526:	19 a6       	std	Y+41, r1	; 0x29
    3528:	20 2f       	mov	r18, r16
    352a:	22 70       	andi	r18, 0x02	; 2
    352c:	32 2e       	mov	r3, r18
    352e:	01 ff       	sbrs	r16, 1
    3530:	60 c1       	rjmp	.+704    	; 0x37f2 <VL53L0X_get_info_from_device+0x45a>
    3532:	d1 fc       	sbrc	r13, 1
    3534:	5e c1       	rjmp	.+700    	; 0x37f2 <VL53L0X_get_info_from_device+0x45a>
    3536:	42 e0       	ldi	r20, 0x02	; 2
    3538:	64 e9       	ldi	r22, 0x94	; 148
    353a:	c7 01       	movw	r24, r14
    353c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3540:	c8 2e       	mov	r12, r24
    3542:	c7 01       	movw	r24, r14
    3544:	e0 de       	rcall	.-576    	; 0x3306 <VL53L0X_device_read_strobe>
    3546:	8c 29       	or	r24, r12
    3548:	18 2b       	or	r17, r24
    354a:	ae 01       	movw	r20, r28
    354c:	4a 5f       	subi	r20, 0xFA	; 250
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
    3550:	60 e9       	ldi	r22, 0x90	; 144
    3552:	c7 01       	movw	r24, r14
    3554:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    3558:	18 2b       	or	r17, r24
    355a:	4b e7       	ldi	r20, 0x7B	; 123
    355c:	64 e9       	ldi	r22, 0x94	; 148
    355e:	c7 01       	movw	r24, r14
    3560:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3564:	18 2b       	or	r17, r24
    3566:	c7 01       	movw	r24, r14
    3568:	ce de       	rcall	.-612    	; 0x3306 <VL53L0X_device_read_strobe>
    356a:	18 2b       	or	r17, r24
    356c:	ae 01       	movw	r20, r28
    356e:	49 5f       	subi	r20, 0xF9	; 249
    3570:	5f 4f       	sbci	r21, 0xFF	; 255
    3572:	60 e9       	ldi	r22, 0x90	; 144
    3574:	c7 01       	movw	r24, r14
    3576:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    357a:	18 2b       	or	r17, r24
    357c:	47 e7       	ldi	r20, 0x77	; 119
    357e:	64 e9       	ldi	r22, 0x94	; 148
    3580:	c7 01       	movw	r24, r14
    3582:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3586:	18 2b       	or	r17, r24
    3588:	c7 01       	movw	r24, r14
    358a:	bd de       	rcall	.-646    	; 0x3306 <VL53L0X_device_read_strobe>
    358c:	18 2b       	or	r17, r24
    358e:	ae 01       	movw	r20, r28
    3590:	4e 5f       	subi	r20, 0xFE	; 254
    3592:	5f 4f       	sbci	r21, 0xFF	; 255
    3594:	60 e9       	ldi	r22, 0x90	; 144
    3596:	c7 01       	movw	r24, r14
    3598:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    359c:	18 2b       	or	r17, r24
    359e:	4a 81       	ldd	r20, Y+2	; 0x02
    35a0:	5b 81       	ldd	r21, Y+3	; 0x03
    35a2:	6c 81       	ldd	r22, Y+4	; 0x04
    35a4:	7d 81       	ldd	r23, Y+5	; 0x05
    35a6:	db 01       	movw	r26, r22
    35a8:	ca 01       	movw	r24, r20
    35aa:	07 2e       	mov	r0, r23
    35ac:	79 e1       	ldi	r23, 0x19	; 25
    35ae:	b6 95       	lsr	r27
    35b0:	a7 95       	ror	r26
    35b2:	97 95       	ror	r25
    35b4:	87 95       	ror	r24
    35b6:	7a 95       	dec	r23
    35b8:	d1 f7       	brne	.-12     	; 0x35ae <VL53L0X_get_info_from_device+0x216>
    35ba:	70 2d       	mov	r23, r0
    35bc:	8f 77       	andi	r24, 0x7F	; 127
    35be:	88 8b       	std	Y+16, r24	; 0x10
    35c0:	db 01       	movw	r26, r22
    35c2:	ca 01       	movw	r24, r20
    35c4:	07 2e       	mov	r0, r23
    35c6:	72 e1       	ldi	r23, 0x12	; 18
    35c8:	b6 95       	lsr	r27
    35ca:	a7 95       	ror	r26
    35cc:	97 95       	ror	r25
    35ce:	87 95       	ror	r24
    35d0:	7a 95       	dec	r23
    35d2:	d1 f7       	brne	.-12     	; 0x35c8 <VL53L0X_get_info_from_device+0x230>
    35d4:	70 2d       	mov	r23, r0
    35d6:	8f 77       	andi	r24, 0x7F	; 127
    35d8:	89 8b       	std	Y+17, r24	; 0x11
    35da:	db 01       	movw	r26, r22
    35dc:	ca 01       	movw	r24, r20
    35de:	07 2e       	mov	r0, r23
    35e0:	7b e0       	ldi	r23, 0x0B	; 11
    35e2:	b6 95       	lsr	r27
    35e4:	a7 95       	ror	r26
    35e6:	97 95       	ror	r25
    35e8:	87 95       	ror	r24
    35ea:	7a 95       	dec	r23
    35ec:	d1 f7       	brne	.-12     	; 0x35e2 <VL53L0X_get_info_from_device+0x24a>
    35ee:	70 2d       	mov	r23, r0
    35f0:	8f 77       	andi	r24, 0x7F	; 127
    35f2:	8a 8b       	std	Y+18, r24	; 0x12
    35f4:	db 01       	movw	r26, r22
    35f6:	ca 01       	movw	r24, r20
    35f8:	68 94       	set
    35fa:	13 f8       	bld	r1, 3
    35fc:	b6 95       	lsr	r27
    35fe:	a7 95       	ror	r26
    3600:	97 95       	ror	r25
    3602:	87 95       	ror	r24
    3604:	16 94       	lsr	r1
    3606:	d1 f7       	brne	.-12     	; 0x35fc <VL53L0X_get_info_from_device+0x264>
    3608:	8f 77       	andi	r24, 0x7F	; 127
    360a:	8b 8b       	std	Y+19, r24	; 0x13
    360c:	4f 70       	andi	r20, 0x0F	; 15
    360e:	44 0f       	add	r20, r20
    3610:	44 0f       	add	r20, r20
    3612:	44 0f       	add	r20, r20
    3614:	49 83       	std	Y+1, r20	; 0x01
    3616:	48 e7       	ldi	r20, 0x78	; 120
    3618:	64 e9       	ldi	r22, 0x94	; 148
    361a:	c7 01       	movw	r24, r14
    361c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3620:	18 2b       	or	r17, r24
    3622:	c7 01       	movw	r24, r14
    3624:	70 de       	rcall	.-800    	; 0x3306 <VL53L0X_device_read_strobe>
    3626:	18 2b       	or	r17, r24
    3628:	ae 01       	movw	r20, r28
    362a:	4e 5f       	subi	r20, 0xFE	; 254
    362c:	5f 4f       	sbci	r21, 0xFF	; 255
    362e:	60 e9       	ldi	r22, 0x90	; 144
    3630:	c7 01       	movw	r24, r14
    3632:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3636:	18 2b       	or	r17, r24
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	9b 81       	ldd	r25, Y+3	; 0x03
    363c:	ac 81       	ldd	r26, Y+4	; 0x04
    363e:	bd 81       	ldd	r27, Y+5	; 0x05
    3640:	ac 01       	movw	r20, r24
    3642:	bd 01       	movw	r22, r26
    3644:	03 2e       	mov	r0, r19
    3646:	3d e1       	ldi	r19, 0x1D	; 29
    3648:	76 95       	lsr	r23
    364a:	67 95       	ror	r22
    364c:	57 95       	ror	r21
    364e:	47 95       	ror	r20
    3650:	3a 95       	dec	r19
    3652:	d1 f7       	brne	.-12     	; 0x3648 <VL53L0X_get_info_from_device+0x2b0>
    3654:	30 2d       	mov	r19, r0
    3656:	4f 77       	andi	r20, 0x7F	; 127
    3658:	39 81       	ldd	r19, Y+1	; 0x01
    365a:	24 2f       	mov	r18, r20
    365c:	23 0f       	add	r18, r19
    365e:	2c 8b       	std	Y+20, r18	; 0x14
    3660:	ac 01       	movw	r20, r24
    3662:	bd 01       	movw	r22, r26
    3664:	03 2e       	mov	r0, r19
    3666:	36 e1       	ldi	r19, 0x16	; 22
    3668:	76 95       	lsr	r23
    366a:	67 95       	ror	r22
    366c:	57 95       	ror	r21
    366e:	47 95       	ror	r20
    3670:	3a 95       	dec	r19
    3672:	d1 f7       	brne	.-12     	; 0x3668 <VL53L0X_get_info_from_device+0x2d0>
    3674:	30 2d       	mov	r19, r0
    3676:	4f 77       	andi	r20, 0x7F	; 127
    3678:	4d 8b       	std	Y+21, r20	; 0x15
    367a:	ac 01       	movw	r20, r24
    367c:	bd 01       	movw	r22, r26
    367e:	03 2e       	mov	r0, r19
    3680:	3f e0       	ldi	r19, 0x0F	; 15
    3682:	76 95       	lsr	r23
    3684:	67 95       	ror	r22
    3686:	57 95       	ror	r21
    3688:	47 95       	ror	r20
    368a:	3a 95       	dec	r19
    368c:	d1 f7       	brne	.-12     	; 0x3682 <VL53L0X_get_info_from_device+0x2ea>
    368e:	30 2d       	mov	r19, r0
    3690:	4f 77       	andi	r20, 0x7F	; 127
    3692:	4e 8b       	std	Y+22, r20	; 0x16
    3694:	29 2f       	mov	r18, r25
    3696:	2f 77       	andi	r18, 0x7F	; 127
    3698:	2f 8b       	std	Y+23, r18	; 0x17
    369a:	ac 01       	movw	r20, r24
    369c:	bd 01       	movw	r22, r26
    369e:	76 95       	lsr	r23
    36a0:	67 95       	ror	r22
    36a2:	57 95       	ror	r21
    36a4:	47 95       	ror	r20
    36a6:	4f 77       	andi	r20, 0x7F	; 127
    36a8:	48 8f       	std	Y+24, r20	; 0x18
    36aa:	98 2f       	mov	r25, r24
    36ac:	91 70       	andi	r25, 0x01	; 1
    36ae:	92 95       	swap	r25
    36b0:	99 0f       	add	r25, r25
    36b2:	99 0f       	add	r25, r25
    36b4:	90 7c       	andi	r25, 0xC0	; 192
    36b6:	99 83       	std	Y+1, r25	; 0x01
    36b8:	49 e7       	ldi	r20, 0x79	; 121
    36ba:	64 e9       	ldi	r22, 0x94	; 148
    36bc:	c7 01       	movw	r24, r14
    36be:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    36c2:	18 2b       	or	r17, r24
    36c4:	c7 01       	movw	r24, r14
    36c6:	1f de       	rcall	.-962    	; 0x3306 <VL53L0X_device_read_strobe>
    36c8:	18 2b       	or	r17, r24
    36ca:	ae 01       	movw	r20, r28
    36cc:	4e 5f       	subi	r20, 0xFE	; 254
    36ce:	5f 4f       	sbci	r21, 0xFF	; 255
    36d0:	60 e9       	ldi	r22, 0x90	; 144
    36d2:	c7 01       	movw	r24, r14
    36d4:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    36d8:	18 2b       	or	r17, r24
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	9b 81       	ldd	r25, Y+3	; 0x03
    36de:	ac 81       	ldd	r26, Y+4	; 0x04
    36e0:	bd 81       	ldd	r27, Y+5	; 0x05
    36e2:	ac 01       	movw	r20, r24
    36e4:	bd 01       	movw	r22, r26
    36e6:	03 2e       	mov	r0, r19
    36e8:	3a e1       	ldi	r19, 0x1A	; 26
    36ea:	76 95       	lsr	r23
    36ec:	67 95       	ror	r22
    36ee:	57 95       	ror	r21
    36f0:	47 95       	ror	r20
    36f2:	3a 95       	dec	r19
    36f4:	d1 f7       	brne	.-12     	; 0x36ea <VL53L0X_get_info_from_device+0x352>
    36f6:	30 2d       	mov	r19, r0
    36f8:	4f 77       	andi	r20, 0x7F	; 127
    36fa:	39 81       	ldd	r19, Y+1	; 0x01
    36fc:	24 2f       	mov	r18, r20
    36fe:	23 0f       	add	r18, r19
    3700:	29 8f       	std	Y+25, r18	; 0x19
    3702:	ac 01       	movw	r20, r24
    3704:	bd 01       	movw	r22, r26
    3706:	03 2e       	mov	r0, r19
    3708:	33 e1       	ldi	r19, 0x13	; 19
    370a:	76 95       	lsr	r23
    370c:	67 95       	ror	r22
    370e:	57 95       	ror	r21
    3710:	47 95       	ror	r20
    3712:	3a 95       	dec	r19
    3714:	d1 f7       	brne	.-12     	; 0x370a <VL53L0X_get_info_from_device+0x372>
    3716:	30 2d       	mov	r19, r0
    3718:	4f 77       	andi	r20, 0x7F	; 127
    371a:	4a 8f       	std	Y+26, r20	; 0x1a
    371c:	ac 01       	movw	r20, r24
    371e:	bd 01       	movw	r22, r26
    3720:	03 2e       	mov	r0, r19
    3722:	3c e0       	ldi	r19, 0x0C	; 12
    3724:	76 95       	lsr	r23
    3726:	67 95       	ror	r22
    3728:	57 95       	ror	r21
    372a:	47 95       	ror	r20
    372c:	3a 95       	dec	r19
    372e:	d1 f7       	brne	.-12     	; 0x3724 <VL53L0X_get_info_from_device+0x38c>
    3730:	30 2d       	mov	r19, r0
    3732:	4f 77       	andi	r20, 0x7F	; 127
    3734:	4b 8f       	std	Y+27, r20	; 0x1b
    3736:	ac 01       	movw	r20, r24
    3738:	bd 01       	movw	r22, r26
    373a:	68 94       	set
    373c:	14 f8       	bld	r1, 4
    373e:	76 95       	lsr	r23
    3740:	67 95       	ror	r22
    3742:	57 95       	ror	r21
    3744:	47 95       	ror	r20
    3746:	16 94       	lsr	r1
    3748:	d1 f7       	brne	.-12     	; 0x373e <VL53L0X_get_info_from_device+0x3a6>
    374a:	4f 77       	andi	r20, 0x7F	; 127
    374c:	4c 8f       	std	Y+28, r20	; 0x1c
    374e:	98 2f       	mov	r25, r24
    3750:	9f 71       	andi	r25, 0x1F	; 31
    3752:	99 0f       	add	r25, r25
    3754:	99 0f       	add	r25, r25
    3756:	99 83       	std	Y+1, r25	; 0x01
    3758:	4a e7       	ldi	r20, 0x7A	; 122
    375a:	64 e9       	ldi	r22, 0x94	; 148
    375c:	c7 01       	movw	r24, r14
    375e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3762:	18 2b       	or	r17, r24
    3764:	c7 01       	movw	r24, r14
    3766:	cf dd       	rcall	.-1122   	; 0x3306 <VL53L0X_device_read_strobe>
    3768:	18 2b       	or	r17, r24
    376a:	ae 01       	movw	r20, r28
    376c:	4e 5f       	subi	r20, 0xFE	; 254
    376e:	5f 4f       	sbci	r21, 0xFF	; 255
    3770:	60 e9       	ldi	r22, 0x90	; 144
    3772:	c7 01       	movw	r24, r14
    3774:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3778:	18 2b       	or	r17, r24
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	9b 81       	ldd	r25, Y+3	; 0x03
    377e:	ac 81       	ldd	r26, Y+4	; 0x04
    3780:	bd 81       	ldd	r27, Y+5	; 0x05
    3782:	ac 01       	movw	r20, r24
    3784:	bd 01       	movw	r22, r26
    3786:	03 2e       	mov	r0, r19
    3788:	3e e1       	ldi	r19, 0x1E	; 30
    378a:	76 95       	lsr	r23
    378c:	67 95       	ror	r22
    378e:	57 95       	ror	r21
    3790:	47 95       	ror	r20
    3792:	3a 95       	dec	r19
    3794:	d1 f7       	brne	.-12     	; 0x378a <VL53L0X_get_info_from_device+0x3f2>
    3796:	30 2d       	mov	r19, r0
    3798:	4f 77       	andi	r20, 0x7F	; 127
    379a:	39 81       	ldd	r19, Y+1	; 0x01
    379c:	24 2f       	mov	r18, r20
    379e:	23 0f       	add	r18, r19
    37a0:	2d 8f       	std	Y+29, r18	; 0x1d
    37a2:	ac 01       	movw	r20, r24
    37a4:	bd 01       	movw	r22, r26
    37a6:	03 2e       	mov	r0, r19
    37a8:	37 e1       	ldi	r19, 0x17	; 23
    37aa:	76 95       	lsr	r23
    37ac:	67 95       	ror	r22
    37ae:	57 95       	ror	r21
    37b0:	47 95       	ror	r20
    37b2:	3a 95       	dec	r19
    37b4:	d1 f7       	brne	.-12     	; 0x37aa <VL53L0X_get_info_from_device+0x412>
    37b6:	30 2d       	mov	r19, r0
    37b8:	4f 77       	andi	r20, 0x7F	; 127
    37ba:	4e 8f       	std	Y+30, r20	; 0x1e
    37bc:	2a 2f       	mov	r18, r26
    37be:	2f 77       	andi	r18, 0x7F	; 127
    37c0:	2f 8f       	std	Y+31, r18	; 0x1f
    37c2:	ac 01       	movw	r20, r24
    37c4:	bd 01       	movw	r22, r26
    37c6:	03 2e       	mov	r0, r19
    37c8:	39 e0       	ldi	r19, 0x09	; 9
    37ca:	76 95       	lsr	r23
    37cc:	67 95       	ror	r22
    37ce:	57 95       	ror	r21
    37d0:	47 95       	ror	r20
    37d2:	3a 95       	dec	r19
    37d4:	d1 f7       	brne	.-12     	; 0x37ca <VL53L0X_get_info_from_device+0x432>
    37d6:	30 2d       	mov	r19, r0
    37d8:	4f 77       	andi	r20, 0x7F	; 127
    37da:	48 a3       	std	Y+32, r20	; 0x20
    37dc:	b6 95       	lsr	r27
    37de:	a7 95       	ror	r26
    37e0:	97 95       	ror	r25
    37e2:	87 95       	ror	r24
    37e4:	b6 95       	lsr	r27
    37e6:	a7 95       	ror	r26
    37e8:	97 95       	ror	r25
    37ea:	87 95       	ror	r24
    37ec:	8f 77       	andi	r24, 0x7F	; 127
    37ee:	89 a3       	std	Y+33, r24	; 0x21
    37f0:	1a a2       	std	Y+34, r1	; 0x22
    37f2:	80 2f       	mov	r24, r16
    37f4:	84 70       	andi	r24, 0x04	; 4
    37f6:	c8 2e       	mov	r12, r24
    37f8:	02 ff       	sbrs	r16, 2
    37fa:	98 c0       	rjmp	.+304    	; 0x392c <VL53L0X_get_info_from_device+0x594>
    37fc:	d2 fc       	sbrc	r13, 2
    37fe:	9d c0       	rjmp	.+314    	; 0x393a <VL53L0X_get_info_from_device+0x5a2>
    3800:	4b e7       	ldi	r20, 0x7B	; 123
    3802:	64 e9       	ldi	r22, 0x94	; 148
    3804:	c7 01       	movw	r24, r14
    3806:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    380a:	b8 2e       	mov	r11, r24
    380c:	c7 01       	movw	r24, r14
    380e:	7b dd       	rcall	.-1290   	; 0x3306 <VL53L0X_device_read_strobe>
    3810:	8b 29       	or	r24, r11
    3812:	18 2b       	or	r17, r24
    3814:	ae 01       	movw	r20, r28
    3816:	48 5f       	subi	r20, 0xF8	; 248
    3818:	5f 4f       	sbci	r21, 0xFF	; 255
    381a:	60 e9       	ldi	r22, 0x90	; 144
    381c:	c7 01       	movw	r24, r14
    381e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3822:	18 2b       	or	r17, r24
    3824:	4c e7       	ldi	r20, 0x7C	; 124
    3826:	64 e9       	ldi	r22, 0x94	; 148
    3828:	c7 01       	movw	r24, r14
    382a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    382e:	18 2b       	or	r17, r24
    3830:	c7 01       	movw	r24, r14
    3832:	69 dd       	rcall	.-1326   	; 0x3306 <VL53L0X_device_read_strobe>
    3834:	18 2b       	or	r17, r24
    3836:	ae 01       	movw	r20, r28
    3838:	44 5f       	subi	r20, 0xF4	; 244
    383a:	5f 4f       	sbci	r21, 0xFF	; 255
    383c:	60 e9       	ldi	r22, 0x90	; 144
    383e:	c7 01       	movw	r24, r14
    3840:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3844:	18 2b       	or	r17, r24
    3846:	43 e7       	ldi	r20, 0x73	; 115
    3848:	64 e9       	ldi	r22, 0x94	; 148
    384a:	c7 01       	movw	r24, r14
    384c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3850:	18 2b       	or	r17, r24
    3852:	c7 01       	movw	r24, r14
    3854:	58 dd       	rcall	.-1360   	; 0x3306 <VL53L0X_device_read_strobe>
    3856:	18 2b       	or	r17, r24
    3858:	ae 01       	movw	r20, r28
    385a:	4e 5f       	subi	r20, 0xFE	; 254
    385c:	5f 4f       	sbci	r21, 0xFF	; 255
    385e:	60 e9       	ldi	r22, 0x90	; 144
    3860:	c7 01       	movw	r24, r14
    3862:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3866:	18 2b       	or	r17, r24
    3868:	8a 80       	ldd	r8, Y+2	; 0x02
    386a:	9b 80       	ldd	r9, Y+3	; 0x03
    386c:	ac 80       	ldd	r10, Y+4	; 0x04
    386e:	bd 80       	ldd	r11, Y+5	; 0x05
    3870:	ba 2c       	mov	r11, r10
    3872:	a9 2c       	mov	r10, r9
    3874:	98 2c       	mov	r9, r8
    3876:	88 24       	eor	r8, r8
    3878:	24 01       	movw	r4, r8
    387a:	35 01       	movw	r6, r10
    387c:	66 24       	eor	r6, r6
    387e:	77 24       	eor	r7, r7
    3880:	44 e7       	ldi	r20, 0x74	; 116
    3882:	64 e9       	ldi	r22, 0x94	; 148
    3884:	c7 01       	movw	r24, r14
    3886:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    388a:	18 2b       	or	r17, r24
    388c:	c7 01       	movw	r24, r14
    388e:	3b dd       	rcall	.-1418   	; 0x3306 <VL53L0X_device_read_strobe>
    3890:	18 2b       	or	r17, r24
    3892:	ae 01       	movw	r20, r28
    3894:	4e 5f       	subi	r20, 0xFE	; 254
    3896:	5f 4f       	sbci	r21, 0xFF	; 255
    3898:	60 e9       	ldi	r22, 0x90	; 144
    389a:	c7 01       	movw	r24, r14
    389c:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    38a0:	18 2b       	or	r17, r24
    38a2:	8a 80       	ldd	r8, Y+2	; 0x02
    38a4:	9b 80       	ldd	r9, Y+3	; 0x03
    38a6:	ac 80       	ldd	r10, Y+4	; 0x04
    38a8:	bd 80       	ldd	r11, Y+5	; 0x05
    38aa:	8b 2c       	mov	r8, r11
    38ac:	99 24       	eor	r9, r9
    38ae:	aa 24       	eor	r10, r10
    38b0:	bb 24       	eor	r11, r11
    38b2:	84 28       	or	r8, r4
    38b4:	95 28       	or	r9, r5
    38b6:	a6 28       	or	r10, r6
    38b8:	b7 28       	or	r11, r7
    38ba:	45 e7       	ldi	r20, 0x75	; 117
    38bc:	64 e9       	ldi	r22, 0x94	; 148
    38be:	c7 01       	movw	r24, r14
    38c0:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    38c4:	18 2b       	or	r17, r24
    38c6:	c7 01       	movw	r24, r14
    38c8:	1e dd       	rcall	.-1476   	; 0x3306 <VL53L0X_device_read_strobe>
    38ca:	18 2b       	or	r17, r24
    38cc:	ae 01       	movw	r20, r28
    38ce:	4e 5f       	subi	r20, 0xFE	; 254
    38d0:	5f 4f       	sbci	r21, 0xFF	; 255
    38d2:	60 e9       	ldi	r22, 0x90	; 144
    38d4:	c7 01       	movw	r24, r14
    38d6:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    38da:	18 2b       	or	r17, r24
    38dc:	4a 80       	ldd	r4, Y+2	; 0x02
    38de:	5b 80       	ldd	r5, Y+3	; 0x03
    38e0:	6c 80       	ldd	r6, Y+4	; 0x04
    38e2:	7d 80       	ldd	r7, Y+5	; 0x05
    38e4:	76 2c       	mov	r7, r6
    38e6:	65 2c       	mov	r6, r5
    38e8:	54 2c       	mov	r5, r4
    38ea:	44 24       	eor	r4, r4
    38ec:	66 24       	eor	r6, r6
    38ee:	77 24       	eor	r7, r7
    38f0:	46 e7       	ldi	r20, 0x76	; 118
    38f2:	64 e9       	ldi	r22, 0x94	; 148
    38f4:	c7 01       	movw	r24, r14
    38f6:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    38fa:	18 2b       	or	r17, r24
    38fc:	c7 01       	movw	r24, r14
    38fe:	03 dd       	rcall	.-1530   	; 0x3306 <VL53L0X_device_read_strobe>
    3900:	18 2b       	or	r17, r24
    3902:	ae 01       	movw	r20, r28
    3904:	4e 5f       	subi	r20, 0xFE	; 254
    3906:	5f 4f       	sbci	r21, 0xFF	; 255
    3908:	60 e9       	ldi	r22, 0x90	; 144
    390a:	c7 01       	movw	r24, r14
    390c:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <VL53L0X_RdDWord>
    3910:	18 2b       	or	r17, r24
    3912:	8a 81       	ldd	r24, Y+2	; 0x02
    3914:	9b 81       	ldd	r25, Y+3	; 0x03
    3916:	ac 81       	ldd	r26, Y+4	; 0x04
    3918:	bd 81       	ldd	r27, Y+5	; 0x05
    391a:	8b 2f       	mov	r24, r27
    391c:	99 27       	eor	r25, r25
    391e:	aa 27       	eor	r26, r26
    3920:	bb 27       	eor	r27, r27
    3922:	48 2a       	or	r4, r24
    3924:	59 2a       	or	r5, r25
    3926:	6a 2a       	or	r6, r26
    3928:	7b 2a       	or	r7, r27
    392a:	0d c0       	rjmp	.+26     	; 0x3946 <VL53L0X_get_info_from_device+0x5ae>
    392c:	81 2c       	mov	r8, r1
    392e:	91 2c       	mov	r9, r1
    3930:	54 01       	movw	r10, r8
    3932:	41 2c       	mov	r4, r1
    3934:	51 2c       	mov	r5, r1
    3936:	32 01       	movw	r6, r4
    3938:	06 c0       	rjmp	.+12     	; 0x3946 <VL53L0X_get_info_from_device+0x5ae>
    393a:	81 2c       	mov	r8, r1
    393c:	91 2c       	mov	r9, r1
    393e:	54 01       	movw	r10, r8
    3940:	41 2c       	mov	r4, r1
    3942:	51 2c       	mov	r5, r1
    3944:	32 01       	movw	r6, r4
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	61 e8       	ldi	r22, 0x81	; 129
    394a:	c7 01       	movw	r24, r14
    394c:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3950:	18 2b       	or	r17, r24
    3952:	46 e0       	ldi	r20, 0x06	; 6
    3954:	6f ef       	ldi	r22, 0xFF	; 255
    3956:	c7 01       	movw	r24, r14
    3958:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    395c:	18 2b       	or	r17, r24
    395e:	ae 01       	movw	r20, r28
    3960:	4f 5f       	subi	r20, 0xFF	; 255
    3962:	5f 4f       	sbci	r21, 0xFF	; 255
    3964:	63 e8       	ldi	r22, 0x83	; 131
    3966:	c7 01       	movw	r24, r14
    3968:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    396c:	18 2b       	or	r17, r24
    396e:	49 81       	ldd	r20, Y+1	; 0x01
    3970:	4b 7f       	andi	r20, 0xFB	; 251
    3972:	63 e8       	ldi	r22, 0x83	; 131
    3974:	c7 01       	movw	r24, r14
    3976:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    397a:	18 2b       	or	r17, r24
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	6f ef       	ldi	r22, 0xFF	; 255
    3980:	c7 01       	movw	r24, r14
    3982:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3986:	18 2b       	or	r17, r24
    3988:	41 e0       	ldi	r20, 0x01	; 1
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	c7 01       	movw	r24, r14
    398e:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3992:	18 2b       	or	r17, r24
    3994:	40 e0       	ldi	r20, 0x00	; 0
    3996:	6f ef       	ldi	r22, 0xFF	; 255
    3998:	c7 01       	movw	r24, r14
    399a:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    399e:	18 2b       	or	r17, r24
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	60 e8       	ldi	r22, 0x80	; 128
    39a4:	c7 01       	movw	r24, r14
    39a6:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    39aa:	18 2b       	or	r17, r24
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <VL53L0X_get_info_from_device+0x618>
    39ae:	82 c0       	rjmp	.+260    	; 0x3ab4 <VL53L0X_get_info_from_device+0x71c>
    39b0:	22 20       	and	r2, r2
    39b2:	b9 f0       	breq	.+46     	; 0x39e2 <VL53L0X_get_info_from_device+0x64a>
    39b4:	d0 fc       	sbrc	r13, 0
    39b6:	15 c0       	rjmp	.+42     	; 0x39e2 <VL53L0X_get_info_from_device+0x64a>
    39b8:	f7 01       	movw	r30, r14
    39ba:	ee 5f       	subi	r30, 0xFE	; 254
    39bc:	fe 4f       	sbci	r31, 0xFE	; 254
    39be:	29 a5       	ldd	r18, Y+41	; 0x29
    39c0:	20 83       	st	Z, r18
    39c2:	31 96       	adiw	r30, 0x01	; 1
    39c4:	8a a5       	ldd	r24, Y+42	; 0x2a
    39c6:	80 83       	st	Z, r24
    39c8:	fe 01       	movw	r30, r28
    39ca:	b3 96       	adiw	r30, 0x23	; 35
    39cc:	d7 01       	movw	r26, r14
    39ce:	a9 5e       	subi	r26, 0xE9	; 233
    39d0:	be 4f       	sbci	r27, 0xFE	; 254
    39d2:	9e 01       	movw	r18, r28
    39d4:	27 5d       	subi	r18, 0xD7	; 215
    39d6:	3f 4f       	sbci	r19, 0xFF	; 255
    39d8:	81 91       	ld	r24, Z+
    39da:	8d 93       	st	X+, r24
    39dc:	2e 17       	cp	r18, r30
    39de:	3f 07       	cpc	r19, r31
    39e0:	d9 f7       	brne	.-10     	; 0x39d8 <VL53L0X_get_info_from_device+0x640>
    39e2:	33 20       	and	r3, r3
    39e4:	91 f0       	breq	.+36     	; 0x3a0a <VL53L0X_get_info_from_device+0x672>
    39e6:	d1 fc       	sbrc	r13, 1
    39e8:	10 c0       	rjmp	.+32     	; 0x3a0a <VL53L0X_get_info_from_device+0x672>
    39ea:	8e 81       	ldd	r24, Y+6	; 0x06
    39ec:	f7 01       	movw	r30, r14
    39ee:	e0 52       	subi	r30, 0x20	; 32
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	80 83       	st	Z, r24
    39f4:	8f 81       	ldd	r24, Y+7	; 0x07
    39f6:	31 96       	adiw	r30, 0x01	; 1
    39f8:	80 83       	st	Z, r24
    39fa:	be 01       	movw	r22, r28
    39fc:	60 5f       	subi	r22, 0xF0	; 240
    39fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3a00:	c7 01       	movw	r24, r14
    3a02:	8e 51       	subi	r24, 0x1E	; 30
    3a04:	9f 4f       	sbci	r25, 0xFF	; 255
    3a06:	0e 94 d1 2c 	call	0x59a2	; 0x59a2 <strcpy>
    3a0a:	cc 20       	and	r12, r12
    3a0c:	09 f4       	brne	.+2      	; 0x3a10 <VL53L0X_get_info_from_device+0x678>
    3a0e:	4b c0       	rjmp	.+150    	; 0x3aa6 <VL53L0X_get_info_from_device+0x70e>
    3a10:	d2 fc       	sbrc	r13, 2
    3a12:	49 c0       	rjmp	.+146    	; 0x3aa6 <VL53L0X_get_info_from_device+0x70e>
    3a14:	88 85       	ldd	r24, Y+8	; 0x08
    3a16:	99 85       	ldd	r25, Y+9	; 0x09
    3a18:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a1a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a1c:	f7 01       	movw	r30, r14
    3a1e:	eb 5f       	subi	r30, 0xFB	; 251
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	80 83       	st	Z, r24
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	a2 83       	std	Z+2, r26	; 0x02
    3a28:	b3 83       	std	Z+3, r27	; 0x03
    3a2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a2e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3a30:	bf 85       	ldd	r27, Y+15	; 0x0f
    3a32:	34 96       	adiw	r30, 0x04	; 4
    3a34:	80 83       	st	Z, r24
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	a2 83       	std	Z+2, r26	; 0x02
    3a3a:	b3 83       	std	Z+3, r27	; 0x03
    3a3c:	34 96       	adiw	r30, 0x04	; 4
    3a3e:	07 2e       	mov	r0, r23
    3a40:	79 e0       	ldi	r23, 0x09	; 9
    3a42:	88 0c       	add	r8, r8
    3a44:	99 1c       	adc	r9, r9
    3a46:	aa 1c       	adc	r10, r10
    3a48:	bb 1c       	adc	r11, r11
    3a4a:	7a 95       	dec	r23
    3a4c:	d1 f7       	brne	.-12     	; 0x3a42 <VL53L0X_get_info_from_device+0x6aa>
    3a4e:	70 2d       	mov	r23, r0
    3a50:	80 82       	st	Z, r8
    3a52:	91 82       	std	Z+1, r9	; 0x01
    3a54:	a2 82       	std	Z+2, r10	; 0x02
    3a56:	b3 82       	std	Z+3, r11	; 0x03
    3a58:	41 14       	cp	r4, r1
    3a5a:	51 04       	cpc	r5, r1
    3a5c:	61 04       	cpc	r6, r1
    3a5e:	71 04       	cpc	r7, r1
    3a60:	b9 f0       	breq	.+46     	; 0x3a90 <VL53L0X_get_info_from_device+0x6f8>
    3a62:	a3 01       	movw	r20, r6
    3a64:	92 01       	movw	r18, r4
    3a66:	39 51       	subi	r19, 0x19	; 25
    3a68:	41 09       	sbc	r20, r1
    3a6a:	51 09       	sbc	r21, r1
    3a6c:	a8 ee       	ldi	r26, 0xE8	; 232
    3a6e:	b3 e0       	ldi	r27, 0x03	; 3
    3a70:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	68 94       	set
    3a7a:	13 f8       	bld	r1, 3
    3a7c:	b6 95       	lsr	r27
    3a7e:	a7 95       	ror	r26
    3a80:	97 95       	ror	r25
    3a82:	87 95       	ror	r24
    3a84:	16 94       	lsr	r1
    3a86:	d1 f7       	brne	.-12     	; 0x3a7c <VL53L0X_get_info_from_device+0x6e4>
    3a88:	91 95       	neg	r25
    3a8a:	81 95       	neg	r24
    3a8c:	91 09       	sbc	r25, r1
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <VL53L0X_get_info_from_device+0x6fc>
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	09 2e       	mov	r0, r25
    3a96:	00 0c       	add	r0, r0
    3a98:	aa 0b       	sbc	r26, r26
    3a9a:	bb 0b       	sbc	r27, r27
    3a9c:	f7 01       	movw	r30, r14
    3a9e:	84 87       	std	Z+12, r24	; 0x0c
    3aa0:	95 87       	std	Z+13, r25	; 0x0d
    3aa2:	a6 87       	std	Z+14, r26	; 0x0e
    3aa4:	b7 87       	std	Z+15, r27	; 0x0f
    3aa6:	f7 01       	movw	r30, r14
    3aa8:	e1 52       	subi	r30, 0x21	; 33
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	0d 29       	or	r16, r13
    3aae:	00 83       	st	Z, r16
    3ab0:	01 c0       	rjmp	.+2      	; 0x3ab4 <VL53L0X_get_info_from_device+0x71c>
    3ab2:	10 e0       	ldi	r17, 0x00	; 0
    3ab4:	81 2f       	mov	r24, r17
    3ab6:	aa 96       	adiw	r28, 0x2a	; 42
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	f8 94       	cli
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	1f 91       	pop	r17
    3ac8:	0f 91       	pop	r16
    3aca:	ff 90       	pop	r15
    3acc:	ef 90       	pop	r14
    3ace:	df 90       	pop	r13
    3ad0:	cf 90       	pop	r12
    3ad2:	bf 90       	pop	r11
    3ad4:	af 90       	pop	r10
    3ad6:	9f 90       	pop	r9
    3ad8:	8f 90       	pop	r8
    3ada:	7f 90       	pop	r7
    3adc:	6f 90       	pop	r6
    3ade:	5f 90       	pop	r5
    3ae0:	4f 90       	pop	r4
    3ae2:	3f 90       	pop	r3
    3ae4:	2f 90       	pop	r2
    3ae6:	08 95       	ret

00003ae8 <VL53L0X_encode_timeout>:
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	61 15       	cp	r22, r1
    3aee:	71 05       	cpc	r23, r1
    3af0:	81 05       	cpc	r24, r1
    3af2:	91 05       	cpc	r25, r1
    3af4:	21 f1       	breq	.+72     	; 0x3b3e <VL53L0X_encode_timeout+0x56>
    3af6:	ab 01       	movw	r20, r22
    3af8:	bc 01       	movw	r22, r24
    3afa:	41 50       	subi	r20, 0x01	; 1
    3afc:	51 09       	sbc	r21, r1
    3afe:	61 09       	sbc	r22, r1
    3b00:	71 09       	sbc	r23, r1
    3b02:	db 01       	movw	r26, r22
    3b04:	ca 01       	movw	r24, r20
    3b06:	88 27       	eor	r24, r24
    3b08:	89 2b       	or	r24, r25
    3b0a:	8a 2b       	or	r24, r26
    3b0c:	8b 2b       	or	r24, r27
    3b0e:	79 f0       	breq	.+30     	; 0x3b2e <VL53L0X_encode_timeout+0x46>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	76 95       	lsr	r23
    3b16:	67 95       	ror	r22
    3b18:	57 95       	ror	r21
    3b1a:	47 95       	ror	r20
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	8a 01       	movw	r16, r20
    3b20:	9b 01       	movw	r18, r22
    3b22:	00 27       	eor	r16, r16
    3b24:	01 2b       	or	r16, r17
    3b26:	02 2b       	or	r16, r18
    3b28:	03 2b       	or	r16, r19
    3b2a:	a1 f7       	brne	.-24     	; 0x3b14 <VL53L0X_encode_timeout+0x2c>
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <VL53L0X_encode_timeout+0x4a>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	98 2f       	mov	r25, r24
    3b34:	88 27       	eor	r24, r24
    3b36:	55 27       	eor	r21, r21
    3b38:	84 0f       	add	r24, r20
    3b3a:	95 1f       	adc	r25, r21
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <VL53L0X_encode_timeout+0x5a>
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	08 95       	ret

00003b48 <VL53L0X_calc_timeout_mclks>:
    3b48:	8f 92       	push	r8
    3b4a:	9f 92       	push	r9
    3b4c:	af 92       	push	r10
    3b4e:	bf 92       	push	r11
    3b50:	cf 92       	push	r12
    3b52:	df 92       	push	r13
    3b54:	ef 92       	push	r14
    3b56:	ff 92       	push	r15
    3b58:	4a 01       	movw	r8, r20
    3b5a:	5b 01       	movw	r10, r22
    3b5c:	a2 2f       	mov	r26, r18
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	3f e2       	ldi	r19, 0x2F	; 47
    3b64:	4a e3       	ldi	r20, 0x3A	; 58
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    3b6c:	6b 01       	movw	r12, r22
    3b6e:	7c 01       	movw	r14, r24
    3b70:	24 ef       	ldi	r18, 0xF4	; 244
    3b72:	c2 0e       	add	r12, r18
    3b74:	21 e0       	ldi	r18, 0x01	; 1
    3b76:	d2 1e       	adc	r13, r18
    3b78:	e1 1c       	adc	r14, r1
    3b7a:	f1 1c       	adc	r15, r1
    3b7c:	a8 ee       	ldi	r26, 0xE8	; 232
    3b7e:	b3 e0       	ldi	r27, 0x03	; 3
    3b80:	a5 01       	movw	r20, r10
    3b82:	94 01       	movw	r18, r8
    3b84:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    3b88:	4b 01       	movw	r8, r22
    3b8a:	5c 01       	movw	r10, r24
    3b8c:	c7 01       	movw	r24, r14
    3b8e:	b6 01       	movw	r22, r12
    3b90:	20 ed       	ldi	r18, 0xD0	; 208
    3b92:	37 e0       	ldi	r19, 0x07	; 7
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	50 e0       	ldi	r21, 0x00	; 0
    3b98:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    3b9c:	82 0e       	add	r8, r18
    3b9e:	93 1e       	adc	r9, r19
    3ba0:	a4 1e       	adc	r10, r20
    3ba2:	b5 1e       	adc	r11, r21
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	b6 01       	movw	r22, r12
    3ba8:	28 ee       	ldi	r18, 0xE8	; 232
    3baa:	33 e0       	ldi	r19, 0x03	; 3
    3bac:	40 e0       	ldi	r20, 0x00	; 0
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    3bb4:	c5 01       	movw	r24, r10
    3bb6:	b4 01       	movw	r22, r8
    3bb8:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    3bbc:	ca 01       	movw	r24, r20
    3bbe:	b9 01       	movw	r22, r18
    3bc0:	ff 90       	pop	r15
    3bc2:	ef 90       	pop	r14
    3bc4:	df 90       	pop	r13
    3bc6:	cf 90       	pop	r12
    3bc8:	bf 90       	pop	r11
    3bca:	af 90       	pop	r10
    3bcc:	9f 90       	pop	r9
    3bce:	8f 90       	pop	r8
    3bd0:	08 95       	ret

00003bd2 <VL53L0X_calc_timeout_us>:
    3bd2:	4f 92       	push	r4
    3bd4:	5f 92       	push	r5
    3bd6:	6f 92       	push	r6
    3bd8:	7f 92       	push	r7
    3bda:	8f 92       	push	r8
    3bdc:	9f 92       	push	r9
    3bde:	af 92       	push	r10
    3be0:	bf 92       	push	r11
    3be2:	cf 92       	push	r12
    3be4:	df 92       	push	r13
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	3b 01       	movw	r6, r22
    3bec:	a4 2f       	mov	r26, r20
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	3f e2       	ldi	r19, 0x2F	; 47
    3bf4:	4a e3       	ldi	r20, 0x3A	; 58
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    3bfc:	6b 01       	movw	r12, r22
    3bfe:	7c 01       	movw	r14, r24
    3c00:	24 ef       	ldi	r18, 0xF4	; 244
    3c02:	c2 0e       	add	r12, r18
    3c04:	21 e0       	ldi	r18, 0x01	; 1
    3c06:	d2 1e       	adc	r13, r18
    3c08:	e1 1c       	adc	r14, r1
    3c0a:	f1 1c       	adc	r15, r1
    3c0c:	0f 2e       	mov	r0, r31
    3c0e:	f8 ee       	ldi	r31, 0xE8	; 232
    3c10:	8f 2e       	mov	r8, r31
    3c12:	f3 e0       	ldi	r31, 0x03	; 3
    3c14:	9f 2e       	mov	r9, r31
    3c16:	a1 2c       	mov	r10, r1
    3c18:	b1 2c       	mov	r11, r1
    3c1a:	f0 2d       	mov	r31, r0
    3c1c:	c7 01       	movw	r24, r14
    3c1e:	b6 01       	movw	r22, r12
    3c20:	a5 01       	movw	r20, r10
    3c22:	94 01       	movw	r18, r8
    3c24:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    3c28:	d3 01       	movw	r26, r6
    3c2a:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    3c2e:	2b 01       	movw	r4, r22
    3c30:	3c 01       	movw	r6, r24
    3c32:	c7 01       	movw	r24, r14
    3c34:	b6 01       	movw	r22, r12
    3c36:	20 ed       	ldi	r18, 0xD0	; 208
    3c38:	37 e0       	ldi	r19, 0x07	; 7
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    3c42:	c3 01       	movw	r24, r6
    3c44:	b2 01       	movw	r22, r4
    3c46:	62 0f       	add	r22, r18
    3c48:	73 1f       	adc	r23, r19
    3c4a:	84 1f       	adc	r24, r20
    3c4c:	95 1f       	adc	r25, r21
    3c4e:	a5 01       	movw	r20, r10
    3c50:	94 01       	movw	r18, r8
    3c52:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>
    3c56:	ca 01       	movw	r24, r20
    3c58:	b9 01       	movw	r22, r18
    3c5a:	ff 90       	pop	r15
    3c5c:	ef 90       	pop	r14
    3c5e:	df 90       	pop	r13
    3c60:	cf 90       	pop	r12
    3c62:	bf 90       	pop	r11
    3c64:	af 90       	pop	r10
    3c66:	9f 90       	pop	r9
    3c68:	8f 90       	pop	r8
    3c6a:	7f 90       	pop	r7
    3c6c:	6f 90       	pop	r6
    3c6e:	5f 90       	pop	r5
    3c70:	4f 90       	pop	r4
    3c72:	08 95       	ret

00003c74 <get_sequence_step_timeout>:
    3c74:	af 92       	push	r10
    3c76:	bf 92       	push	r11
    3c78:	cf 92       	push	r12
    3c7a:	df 92       	push	r13
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	2b 97       	sbiw	r28, 0x0b	; 11
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	de bf       	out	0x3e, r29	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	7c 01       	movw	r14, r24
    3c98:	6a 01       	movw	r12, r20
    3c9a:	1a 82       	std	Y+2, r1	; 0x02
    3c9c:	1c 82       	std	Y+4, r1	; 0x04
    3c9e:	1b 82       	std	Y+3, r1	; 0x03
    3ca0:	63 30       	cpi	r22, 0x03	; 3
    3ca2:	00 f5       	brcc	.+64     	; 0x3ce4 <get_sequence_step_timeout+0x70>
    3ca4:	ae 01       	movw	r20, r28
    3ca6:	4f 5f       	subi	r20, 0xFF	; 255
    3ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3cb0:	18 2f       	mov	r17, r24
    3cb2:	81 11       	cpse	r24, r1
    3cb4:	08 c0       	rjmp	.+16     	; 0x3cc6 <get_sequence_step_timeout+0x52>
    3cb6:	ae 01       	movw	r20, r28
    3cb8:	4e 5f       	subi	r20, 0xFE	; 254
    3cba:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbc:	66 e4       	ldi	r22, 0x46	; 70
    3cbe:	c7 01       	movw	r24, r14
    3cc0:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
    3cc4:	18 2f       	mov	r17, r24
    3cc6:	6a 81       	ldd	r22, Y+2	; 0x02
    3cc8:	86 2f       	mov	r24, r22
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	a0 e0       	ldi	r26, 0x00	; 0
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	6f 5f       	subi	r22, 0xFF	; 255
    3cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cda:	9f 4f       	sbci	r25, 0xFF	; 255
    3cdc:	49 81       	ldd	r20, Y+1	; 0x01
    3cde:	c7 01       	movw	r24, r14
    3ce0:	78 df       	rcall	.-272    	; 0x3bd2 <VL53L0X_calc_timeout_us>
    3ce2:	a4 c0       	rjmp	.+328    	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3ce4:	63 30       	cpi	r22, 0x03	; 3
    3ce6:	99 f5       	brne	.+102    	; 0x3d4e <get_sequence_step_timeout+0xda>
    3ce8:	ae 01       	movw	r20, r28
    3cea:	4f 5f       	subi	r20, 0xFF	; 255
    3cec:	5f 4f       	sbci	r21, 0xFF	; 255
    3cee:	60 e0       	ldi	r22, 0x00	; 0
    3cf0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3cf4:	18 2f       	mov	r17, r24
    3cf6:	81 11       	cpse	r24, r1
    3cf8:	91 c0       	rjmp	.+290    	; 0x3e1c <get_sequence_step_timeout+0x1a8>
    3cfa:	ae 01       	movw	r20, r28
    3cfc:	4f 5f       	subi	r20, 0xFF	; 255
    3cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	c7 01       	movw	r24, r14
    3d04:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3d08:	18 2f       	mov	r17, r24
    3d0a:	81 11       	cpse	r24, r1
    3d0c:	08 c0       	rjmp	.+16     	; 0x3d1e <get_sequence_step_timeout+0xaa>
    3d0e:	ae 01       	movw	r20, r28
    3d10:	4d 5f       	subi	r20, 0xFD	; 253
    3d12:	5f 4f       	sbci	r21, 0xFF	; 255
    3d14:	61 e5       	ldi	r22, 0x51	; 81
    3d16:	c7 01       	movw	r24, r14
    3d18:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    3d1c:	18 2f       	mov	r17, r24
    3d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    3d20:	3c 81       	ldd	r19, Y+4	; 0x04
    3d22:	b9 01       	movw	r22, r18
    3d24:	77 27       	eor	r23, r23
    3d26:	cb 01       	movw	r24, r22
    3d28:	a0 e0       	ldi	r26, 0x00	; 0
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	04 c0       	rjmp	.+8      	; 0x3d36 <get_sequence_step_timeout+0xc2>
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	aa 1f       	adc	r26, r26
    3d34:	bb 1f       	adc	r27, r27
    3d36:	3a 95       	dec	r19
    3d38:	d2 f7       	brpl	.-12     	; 0x3d2e <get_sequence_step_timeout+0xba>
    3d3a:	bc 01       	movw	r22, r24
    3d3c:	cd 01       	movw	r24, r26
    3d3e:	6f 5f       	subi	r22, 0xFF	; 255
    3d40:	7f 4f       	sbci	r23, 0xFF	; 255
    3d42:	8f 4f       	sbci	r24, 0xFF	; 255
    3d44:	9f 4f       	sbci	r25, 0xFF	; 255
    3d46:	49 81       	ldd	r20, Y+1	; 0x01
    3d48:	c7 01       	movw	r24, r14
    3d4a:	43 df       	rcall	.-378    	; 0x3bd2 <VL53L0X_calc_timeout_us>
    3d4c:	6f c0       	rjmp	.+222    	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3d4e:	64 30       	cpi	r22, 0x04	; 4
    3d50:	09 f0       	breq	.+2      	; 0x3d54 <get_sequence_step_timeout+0xe0>
    3d52:	68 c0       	rjmp	.+208    	; 0x3e24 <get_sequence_step_timeout+0x1b0>
    3d54:	be 01       	movw	r22, r28
    3d56:	69 5f       	subi	r22, 0xF9	; 249
    3d58:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5a:	0e 94 8f 08 	call	0x111e	; 0x111e <VL53L0X_GetSequenceStepEnables>
    3d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d60:	88 23       	and	r24, r24
    3d62:	31 f1       	breq	.+76     	; 0x3db0 <get_sequence_step_timeout+0x13c>
    3d64:	ae 01       	movw	r20, r28
    3d66:	4f 5f       	subi	r20, 0xFF	; 255
    3d68:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6a:	60 e0       	ldi	r22, 0x00	; 0
    3d6c:	c7 01       	movw	r24, r14
    3d6e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3d72:	18 2f       	mov	r17, r24
    3d74:	81 11       	cpse	r24, r1
    3d76:	41 c0       	rjmp	.+130    	; 0x3dfa <get_sequence_step_timeout+0x186>
    3d78:	ae 01       	movw	r20, r28
    3d7a:	4d 5f       	subi	r20, 0xFD	; 253
    3d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d7e:	61 e5       	ldi	r22, 0x51	; 81
    3d80:	c7 01       	movw	r24, r14
    3d82:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    3d86:	18 2f       	mov	r17, r24
    3d88:	2b 81       	ldd	r18, Y+3	; 0x03
    3d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d8c:	c9 01       	movw	r24, r18
    3d8e:	99 27       	eor	r25, r25
    3d90:	a0 e0       	ldi	r26, 0x00	; 0
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	04 c0       	rjmp	.+8      	; 0x3d9e <get_sequence_step_timeout+0x12a>
    3d96:	88 0f       	add	r24, r24
    3d98:	99 1f       	adc	r25, r25
    3d9a:	aa 1f       	adc	r26, r26
    3d9c:	bb 1f       	adc	r27, r27
    3d9e:	3a 95       	dec	r19
    3da0:	d2 f7       	brpl	.-12     	; 0x3d96 <get_sequence_step_timeout+0x122>
    3da2:	01 96       	adiw	r24, 0x01	; 1
    3da4:	a1 1d       	adc	r26, r1
    3da6:	b1 1d       	adc	r27, r1
    3da8:	5c 01       	movw	r10, r24
    3daa:	11 11       	cpse	r17, r1
    3dac:	2b c0       	rjmp	.+86     	; 0x3e04 <get_sequence_step_timeout+0x190>
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <get_sequence_step_timeout+0x140>
    3db0:	a1 2c       	mov	r10, r1
    3db2:	b1 2c       	mov	r11, r1
    3db4:	ae 01       	movw	r20, r28
    3db6:	4f 5f       	subi	r20, 0xFF	; 255
    3db8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dba:	61 e0       	ldi	r22, 0x01	; 1
    3dbc:	c7 01       	movw	r24, r14
    3dbe:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3dc2:	18 2f       	mov	r17, r24
    3dc4:	81 11       	cpse	r24, r1
    3dc6:	21 c0       	rjmp	.+66     	; 0x3e0a <get_sequence_step_timeout+0x196>
    3dc8:	ae 01       	movw	r20, r28
    3dca:	4b 5f       	subi	r20, 0xFB	; 251
    3dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dce:	61 e7       	ldi	r22, 0x71	; 113
    3dd0:	c7 01       	movw	r24, r14
    3dd2:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    3dd6:	18 2f       	mov	r17, r24
    3dd8:	2d 81       	ldd	r18, Y+5	; 0x05
    3dda:	3e 81       	ldd	r19, Y+6	; 0x06
    3ddc:	c9 01       	movw	r24, r18
    3dde:	99 27       	eor	r25, r25
    3de0:	a0 e0       	ldi	r26, 0x00	; 0
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <get_sequence_step_timeout+0x17a>
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	aa 1f       	adc	r26, r26
    3dec:	bb 1f       	adc	r27, r27
    3dee:	3a 95       	dec	r19
    3df0:	d2 f7       	brpl	.-12     	; 0x3de6 <get_sequence_step_timeout+0x172>
    3df2:	01 96       	adiw	r24, 0x01	; 1
    3df4:	a1 1d       	adc	r26, r1
    3df6:	b1 1d       	adc	r27, r1
    3df8:	0a c0       	rjmp	.+20     	; 0x3e0e <get_sequence_step_timeout+0x19a>
    3dfa:	a1 2c       	mov	r10, r1
    3dfc:	b1 2c       	mov	r11, r1
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	05 c0       	rjmp	.+10     	; 0x3e0e <get_sequence_step_timeout+0x19a>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <get_sequence_step_timeout+0x19a>
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	bc 01       	movw	r22, r24
    3e10:	6a 19       	sub	r22, r10
    3e12:	7b 09       	sbc	r23, r11
    3e14:	49 81       	ldd	r20, Y+1	; 0x01
    3e16:	c7 01       	movw	r24, r14
    3e18:	dc de       	rcall	.-584    	; 0x3bd2 <VL53L0X_calc_timeout_us>
    3e1a:	08 c0       	rjmp	.+16     	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	cb 01       	movw	r24, r22
    3e22:	04 c0       	rjmp	.+8      	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	cb 01       	movw	r24, r22
    3e2a:	10 e0       	ldi	r17, 0x00	; 0
    3e2c:	f6 01       	movw	r30, r12
    3e2e:	60 83       	st	Z, r22
    3e30:	71 83       	std	Z+1, r23	; 0x01
    3e32:	82 83       	std	Z+2, r24	; 0x02
    3e34:	93 83       	std	Z+3, r25	; 0x03
    3e36:	81 2f       	mov	r24, r17
    3e38:	2b 96       	adiw	r28, 0x0b	; 11
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	ff 90       	pop	r15
    3e4c:	ef 90       	pop	r14
    3e4e:	df 90       	pop	r13
    3e50:	cf 90       	pop	r12
    3e52:	bf 90       	pop	r11
    3e54:	af 90       	pop	r10
    3e56:	08 95       	ret

00003e58 <set_sequence_step_timeout>:
    3e58:	8f 92       	push	r8
    3e5a:	9f 92       	push	r9
    3e5c:	af 92       	push	r10
    3e5e:	bf 92       	push	r11
    3e60:	cf 92       	push	r12
    3e62:	df 92       	push	r13
    3e64:	ef 92       	push	r14
    3e66:	ff 92       	push	r15
    3e68:	0f 93       	push	r16
    3e6a:	1f 93       	push	r17
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	28 97       	sbiw	r28, 0x08	; 8
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	8c 01       	movw	r16, r24
    3e82:	49 01       	movw	r8, r18
    3e84:	5a 01       	movw	r10, r20
    3e86:	63 30       	cpi	r22, 0x03	; 3
    3e88:	18 f5       	brcc	.+70     	; 0x3ed0 <set_sequence_step_timeout+0x78>
    3e8a:	ae 01       	movw	r20, r28
    3e8c:	4f 5f       	subi	r20, 0xFF	; 255
    3e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e90:	60 e0       	ldi	r22, 0x00	; 0
    3e92:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3e96:	f8 2e       	mov	r15, r24
    3e98:	81 11       	cpse	r24, r1
    3e9a:	a1 c0       	rjmp	.+322    	; 0x3fde <set_sequence_step_timeout+0x186>
    3e9c:	29 81       	ldd	r18, Y+1	; 0x01
    3e9e:	b5 01       	movw	r22, r10
    3ea0:	a4 01       	movw	r20, r8
    3ea2:	c8 01       	movw	r24, r16
    3ea4:	51 de       	rcall	.-862    	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    3ea6:	61 30       	cpi	r22, 0x01	; 1
    3ea8:	21 e0       	ldi	r18, 0x01	; 1
    3eaa:	72 07       	cpc	r23, r18
    3eac:	18 f4       	brcc	.+6      	; 0x3eb4 <set_sequence_step_timeout+0x5c>
    3eae:	4f ef       	ldi	r20, 0xFF	; 255
    3eb0:	46 0f       	add	r20, r22
    3eb2:	01 c0       	rjmp	.+2      	; 0x3eb6 <set_sequence_step_timeout+0x5e>
    3eb4:	4f ef       	ldi	r20, 0xFF	; 255
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	e4 53       	subi	r30, 0x34	; 52
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	84 2f       	mov	r24, r20
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	80 83       	st	Z, r24
    3ec4:	66 e4       	ldi	r22, 0x46	; 70
    3ec6:	c8 01       	movw	r24, r16
    3ec8:	0e 94 a6 2b 	call	0x574c	; 0x574c <VL53L0X_WrByte>
    3ecc:	f8 2e       	mov	r15, r24
    3ece:	87 c0       	rjmp	.+270    	; 0x3fde <set_sequence_step_timeout+0x186>
    3ed0:	63 30       	cpi	r22, 0x03	; 3
    3ed2:	41 f5       	brne	.+80     	; 0x3f24 <set_sequence_step_timeout+0xcc>
    3ed4:	ae 01       	movw	r20, r28
    3ed6:	4f 5f       	subi	r20, 0xFF	; 255
    3ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3ee0:	f8 2e       	mov	r15, r24
    3ee2:	29 81       	ldd	r18, Y+1	; 0x01
    3ee4:	b5 01       	movw	r22, r10
    3ee6:	a4 01       	movw	r20, r8
    3ee8:	c8 01       	movw	r24, r16
    3eea:	2e de       	rcall	.-932    	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    3eec:	88 27       	eor	r24, r24
    3eee:	99 27       	eor	r25, r25
    3ef0:	fb dd       	rcall	.-1034   	; 0x3ae8 <VL53L0X_encode_timeout>
    3ef2:	9b 83       	std	Y+3, r25	; 0x03
    3ef4:	8a 83       	std	Y+2, r24	; 0x02
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	e4 53       	subi	r30, 0x34	; 52
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	f1 10       	cpse	r15, r1
    3f02:	6d c0       	rjmp	.+218    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f04:	ac 01       	movw	r20, r24
    3f06:	61 e5       	ldi	r22, 0x51	; 81
    3f08:	c8 01       	movw	r24, r16
    3f0a:	0e 94 b1 2b 	call	0x5762	; 0x5762 <VL53L0X_WrWord>
    3f0e:	f8 2e       	mov	r15, r24
    3f10:	81 11       	cpse	r24, r1
    3f12:	65 c0       	rjmp	.+202    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f14:	f8 01       	movw	r30, r16
    3f16:	ec 52       	subi	r30, 0x2C	; 44
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	80 82       	st	Z, r8
    3f1c:	91 82       	std	Z+1, r9	; 0x01
    3f1e:	a2 82       	std	Z+2, r10	; 0x02
    3f20:	b3 82       	std	Z+3, r11	; 0x03
    3f22:	5d c0       	rjmp	.+186    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f24:	64 30       	cpi	r22, 0x04	; 4
    3f26:	09 f0       	breq	.+2      	; 0x3f2a <set_sequence_step_timeout+0xd2>
    3f28:	56 c0       	rjmp	.+172    	; 0x3fd6 <set_sequence_step_timeout+0x17e>
    3f2a:	be 01       	movw	r22, r28
    3f2c:	6c 5f       	subi	r22, 0xFC	; 252
    3f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f30:	0e 94 8f 08 	call	0x111e	; 0x111e <VL53L0X_GetSequenceStepEnables>
    3f34:	8f 81       	ldd	r24, Y+7	; 0x07
    3f36:	88 23       	and	r24, r24
    3f38:	41 f1       	breq	.+80     	; 0x3f8a <set_sequence_step_timeout+0x132>
    3f3a:	ae 01       	movw	r20, r28
    3f3c:	4f 5f       	subi	r20, 0xFF	; 255
    3f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	c8 01       	movw	r24, r16
    3f44:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3f48:	f8 2e       	mov	r15, r24
    3f4a:	81 11       	cpse	r24, r1
    3f4c:	48 c0       	rjmp	.+144    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f4e:	ae 01       	movw	r20, r28
    3f50:	4e 5f       	subi	r20, 0xFE	; 254
    3f52:	5f 4f       	sbci	r21, 0xFF	; 255
    3f54:	61 e5       	ldi	r22, 0x51	; 81
    3f56:	c8 01       	movw	r24, r16
    3f58:	0e 94 f4 2b 	call	0x57e8	; 0x57e8 <VL53L0X_RdWord>
    3f5c:	f8 2e       	mov	r15, r24
    3f5e:	81 11       	cpse	r24, r1
    3f60:	3e c0       	rjmp	.+124    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	9b 81       	ldd	r25, Y+3	; 0x03
    3f66:	6c 01       	movw	r12, r24
    3f68:	dd 24       	eor	r13, r13
    3f6a:	e1 2c       	mov	r14, r1
    3f6c:	f1 2c       	mov	r15, r1
    3f6e:	04 c0       	rjmp	.+8      	; 0x3f78 <set_sequence_step_timeout+0x120>
    3f70:	cc 0c       	add	r12, r12
    3f72:	dd 1c       	adc	r13, r13
    3f74:	ee 1c       	adc	r14, r14
    3f76:	ff 1c       	adc	r15, r15
    3f78:	9a 95       	dec	r25
    3f7a:	d2 f7       	brpl	.-12     	; 0x3f70 <set_sequence_step_timeout+0x118>
    3f7c:	d7 01       	movw	r26, r14
    3f7e:	c6 01       	movw	r24, r12
    3f80:	01 96       	adiw	r24, 0x01	; 1
    3f82:	a1 1d       	adc	r26, r1
    3f84:	b1 1d       	adc	r27, r1
    3f86:	6c 01       	movw	r12, r24
    3f88:	02 c0       	rjmp	.+4      	; 0x3f8e <set_sequence_step_timeout+0x136>
    3f8a:	c1 2c       	mov	r12, r1
    3f8c:	d1 2c       	mov	r13, r1
    3f8e:	ae 01       	movw	r20, r28
    3f90:	4f 5f       	subi	r20, 0xFF	; 255
    3f92:	5f 4f       	sbci	r21, 0xFF	; 255
    3f94:	61 e0       	ldi	r22, 0x01	; 1
    3f96:	c8 01       	movw	r24, r16
    3f98:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3f9c:	f8 2e       	mov	r15, r24
    3f9e:	81 11       	cpse	r24, r1
    3fa0:	1e c0       	rjmp	.+60     	; 0x3fde <set_sequence_step_timeout+0x186>
    3fa2:	29 81       	ldd	r18, Y+1	; 0x01
    3fa4:	b5 01       	movw	r22, r10
    3fa6:	a4 01       	movw	r20, r8
    3fa8:	c8 01       	movw	r24, r16
    3faa:	ce dd       	rcall	.-1124   	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    3fac:	6c 0d       	add	r22, r12
    3fae:	7d 1d       	adc	r23, r13
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	99 dd       	rcall	.-1230   	; 0x3ae8 <VL53L0X_encode_timeout>
    3fb6:	ac 01       	movw	r20, r24
    3fb8:	61 e7       	ldi	r22, 0x71	; 113
    3fba:	c8 01       	movw	r24, r16
    3fbc:	0e 94 b1 2b 	call	0x5762	; 0x5762 <VL53L0X_WrWord>
    3fc0:	f8 2e       	mov	r15, r24
    3fc2:	81 11       	cpse	r24, r1
    3fc4:	0c c0       	rjmp	.+24     	; 0x3fde <set_sequence_step_timeout+0x186>
    3fc6:	f8 01       	movw	r30, r16
    3fc8:	e1 53       	subi	r30, 0x31	; 49
    3fca:	ff 4f       	sbci	r31, 0xFF	; 255
    3fcc:	80 82       	st	Z, r8
    3fce:	91 82       	std	Z+1, r9	; 0x01
    3fd0:	a2 82       	std	Z+2, r10	; 0x02
    3fd2:	b3 82       	std	Z+3, r11	; 0x03
    3fd4:	04 c0       	rjmp	.+8      	; 0x3fde <set_sequence_step_timeout+0x186>
    3fd6:	0f 2e       	mov	r0, r31
    3fd8:	fc ef       	ldi	r31, 0xFC	; 252
    3fda:	ff 2e       	mov	r15, r31
    3fdc:	f0 2d       	mov	r31, r0
    3fde:	8f 2d       	mov	r24, r15
    3fe0:	28 96       	adiw	r28, 0x08	; 8
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	ef 90       	pop	r14
    3ff8:	df 90       	pop	r13
    3ffa:	cf 90       	pop	r12
    3ffc:	bf 90       	pop	r11
    3ffe:	af 90       	pop	r10
    4000:	9f 90       	pop	r9
    4002:	8f 90       	pop	r8
    4004:	08 95       	ret

00004006 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	1f 92       	push	r1
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    4014:	8a 01       	movw	r16, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
    4016:	66 23       	and	r22, r22
    4018:	19 f0       	breq	.+6      	; 0x4020 <VL53L0X_get_vcsel_pulse_period+0x1a>
    401a:	61 30       	cpi	r22, 0x01	; 1
    401c:	41 f0       	breq	.+16     	; 0x402e <VL53L0X_get_vcsel_pulse_period+0x28>
    401e:	0e c0       	rjmp	.+28     	; 0x403c <VL53L0X_get_vcsel_pulse_period+0x36>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
    4020:	ae 01       	movw	r20, r28
    4022:	4f 5f       	subi	r20, 0xFF	; 255
    4024:	5f 4f       	sbci	r21, 0xFF	; 255
    4026:	60 e5       	ldi	r22, 0x50	; 80
    4028:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    402c:	08 c0       	rjmp	.+16     	; 0x403e <VL53L0X_get_vcsel_pulse_period+0x38>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
    402e:	ae 01       	movw	r20, r28
    4030:	4f 5f       	subi	r20, 0xFF	; 255
    4032:	5f 4f       	sbci	r21, 0xFF	; 255
    4034:	60 e7       	ldi	r22, 0x70	; 112
    4036:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_RdByte>
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    403a:	01 c0       	rjmp	.+2      	; 0x403e <VL53L0X_get_vcsel_pulse_period+0x38>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
    403c:	8c ef       	ldi	r24, 0xFC	; 252
	}

	if (Status == VL53L0X_ERROR_NONE)
    403e:	81 11       	cpse	r24, r1
    4040:	05 c0       	rjmp	.+10     	; 0x404c <VL53L0X_get_vcsel_pulse_period+0x46>
		*pVCSELPulsePeriodPCLK =
    4042:	99 81       	ldd	r25, Y+1	; 0x01
    4044:	9f 5f       	subi	r25, 0xFF	; 255
    4046:	99 0f       	add	r25, r25
    4048:	f8 01       	movw	r30, r16
    404a:	90 83       	st	Z, r25
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
    404c:	0f 90       	pop	r0
    404e:	df 91       	pop	r29
    4050:	cf 91       	pop	r28
    4052:	1f 91       	pop	r17
    4054:	0f 91       	pop	r16
    4056:	08 95       	ret

00004058 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
    4058:	8f 92       	push	r8
    405a:	9f 92       	push	r9
    405c:	af 92       	push	r10
    405e:	bf 92       	push	r11
    4060:	cf 92       	push	r12
    4062:	df 92       	push	r13
    4064:	ef 92       	push	r14
    4066:	ff 92       	push	r15
    4068:	0f 93       	push	r16
    406a:	1f 93       	push	r17
    406c:	cf 93       	push	r28
    406e:	df 93       	push	r29
    4070:	cd b7       	in	r28, 0x3d	; 61
    4072:	de b7       	in	r29, 0x3e	; 62
    4074:	2d 97       	sbiw	r28, 0x0d	; 13
    4076:	0f b6       	in	r0, 0x3f	; 63
    4078:	f8 94       	cli
    407a:	de bf       	out	0x3e, r29	; 62
    407c:	0f be       	out	0x3f, r0	; 63
    407e:	cd bf       	out	0x3d, r28	; 61
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
    4080:	0f 2e       	mov	r0, r31
    4082:	f0 ed       	ldi	r31, 0xD0	; 208
    4084:	cf 2e       	mov	r12, r31
    4086:	f7 e0       	ldi	r31, 0x07	; 7
    4088:	df 2e       	mov	r13, r31
    408a:	e1 2c       	mov	r14, r1
    408c:	f1 2c       	mov	r15, r1
    408e:	f0 2d       	mov	r31, r0
    4090:	ce 82       	std	Y+6, r12	; 0x06
    4092:	df 82       	std	Y+7, r13	; 0x07
    4094:	e8 86       	std	Y+8, r14	; 0x08
    4096:	f9 86       	std	Y+9, r15	; 0x09
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
    4098:	1a 86       	std	Y+10, r1	; 0x0a
    409a:	1b 86       	std	Y+11, r1	; 0x0b
    409c:	1c 86       	std	Y+12, r1	; 0x0c
    409e:	1d 86       	std	Y+13, r1	; 0x0d
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
    40a0:	40 32       	cpi	r20, 0x20	; 32
    40a2:	2e e4       	ldi	r18, 0x4E	; 78
    40a4:	52 07       	cpc	r21, r18
    40a6:	61 05       	cpc	r22, r1
    40a8:	71 05       	cpc	r23, r1
    40aa:	08 f4       	brcc	.+2      	; 0x40ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x56>
    40ac:	94 c0       	rjmp	.+296    	; 0x41d6 <__stack+0xd7>
    40ae:	6a 01       	movw	r12, r20
    40b0:	7b 01       	movw	r14, r22
    40b2:	8c 01       	movw	r16, r24

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    40b4:	be 01       	movw	r22, r28
    40b6:	6f 5f       	subi	r22, 0xFF	; 255
    40b8:	7f 4f       	sbci	r23, 0xFF	; 255
    40ba:	0e 94 8f 08 	call	0x111e	; 0x111e <VL53L0X_GetSequenceStepEnables>

	if (Status == VL53L0X_ERROR_NONE &&
    40be:	81 11       	cpse	r24, r1
    40c0:	9d c0       	rjmp	.+314    	; 0x41fc <__stack+0xfd>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
	}

	FinalRangeTimingBudgetMicroSeconds =
    40c2:	46 01       	movw	r8, r12
    40c4:	57 01       	movw	r10, r14
    40c6:	88 ee       	ldi	r24, 0xE8	; 232
    40c8:	88 1a       	sub	r8, r24
    40ca:	88 e0       	ldi	r24, 0x08	; 8
    40cc:	98 0a       	sbc	r9, r24
    40ce:	a1 08       	sbc	r10, r1
    40d0:	b1 08       	sbc	r11, r1
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);

	if (Status == VL53L0X_ERROR_NONE &&
    40d2:	89 81       	ldd	r24, Y+1	; 0x01
    40d4:	81 11       	cpse	r24, r1
    40d6:	07 c0       	rjmp	.+14     	; 0x40e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		(SchedulerSequenceSteps.TccOn  ||
    40d8:	8a 81       	ldd	r24, Y+2	; 0x02
    40da:	81 11       	cpse	r24, r1
    40dc:	04 c0       	rjmp	.+8      	; 0x40e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		SchedulerSequenceSteps.MsrcOn ||
    40de:	8b 81       	ldd	r24, Y+3	; 0x03
    40e0:	88 23       	and	r24, r24
    40e2:	09 f4       	brne	.+2      	; 0x40e6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
    40e4:	84 c0       	rjmp	.+264    	; 0x41ee <__stack+0xef>
		SchedulerSequenceSteps.DssOn)) {

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
    40e6:	ae 01       	movw	r20, r28
    40e8:	4a 5f       	subi	r20, 0xFA	; 250
    40ea:	5f 4f       	sbci	r21, 0xFF	; 255
    40ec:	62 e0       	ldi	r22, 0x02	; 2
    40ee:	c8 01       	movw	r24, r16
    40f0:	c1 dd       	rcall	.-1150   	; 0x3c74 <get_sequence_step_timeout>
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
    40f2:	81 11       	cpse	r24, r1
    40f4:	83 c0       	rjmp	.+262    	; 0x41fc <__stack+0xfd>
			return Status;

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
    40f6:	89 81       	ldd	r24, Y+1	; 0x01
    40f8:	88 23       	and	r24, r24
    40fa:	09 f4       	brne	.+2      	; 0x40fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa6>
    40fc:	74 c0       	rjmp	.+232    	; 0x41e6 <__stack+0xe7>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
    40fe:	8e 81       	ldd	r24, Y+6	; 0x06
    4100:	9f 81       	ldd	r25, Y+7	; 0x07
    4102:	a8 85       	ldd	r26, Y+8	; 0x08
    4104:	b9 85       	ldd	r27, Y+9	; 0x09
    4106:	82 5b       	subi	r24, 0xB2	; 178
    4108:	9d 4f       	sbci	r25, 0xFD	; 253
    410a:	af 4f       	sbci	r26, 0xFF	; 255
    410c:	bf 4f       	sbci	r27, 0xFF	; 255
				+ TccOverheadMicroSeconds;

			if (SubTimeout <
    410e:	88 15       	cp	r24, r8
    4110:	99 05       	cpc	r25, r9
    4112:	aa 05       	cpc	r26, r10
    4114:	bb 05       	cpc	r27, r11
    4116:	08 f0       	brcs	.+2      	; 0x411a <__stack+0x1b>
    4118:	60 c0       	rjmp	.+192    	; 0x41da <__stack+0xdb>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
    411a:	88 1a       	sub	r8, r24
    411c:	99 0a       	sbc	r9, r25
    411e:	aa 0a       	sbc	r10, r26
    4120:	bb 0a       	sbc	r11, r27
    4122:	61 c0       	rjmp	.+194    	; 0x41e6 <__stack+0xe7>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
    4124:	8e 81       	ldd	r24, Y+6	; 0x06
    4126:	9f 81       	ldd	r25, Y+7	; 0x07
    4128:	a8 85       	ldd	r26, Y+8	; 0x08
    412a:	b9 85       	ldd	r27, Y+9	; 0x09
    412c:	8e 54       	subi	r24, 0x4E	; 78
    412e:	9d 4f       	sbci	r25, 0xFD	; 253
    4130:	af 4f       	sbci	r26, 0xFF	; 255
    4132:	bf 4f       	sbci	r27, 0xFF	; 255
    4134:	88 0f       	add	r24, r24
    4136:	99 1f       	adc	r25, r25
    4138:	aa 1f       	adc	r26, r26
    413a:	bb 1f       	adc	r27, r27
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    413c:	88 15       	cp	r24, r8
    413e:	99 05       	cpc	r25, r9
    4140:	aa 05       	cpc	r26, r10
    4142:	bb 05       	cpc	r27, r11
    4144:	08 f0       	brcs	.+2      	; 0x4148 <__stack+0x49>
    4146:	57 c0       	rjmp	.+174    	; 0x41f6 <__stack+0xf7>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    4148:	88 1a       	sub	r8, r24
    414a:	99 0a       	sbc	r9, r25
    414c:	aa 0a       	sbc	r10, r26
    414e:	bb 0a       	sbc	r11, r27
    4150:	4e c0       	rjmp	.+156    	; 0x41ee <__stack+0xef>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
    4152:	8a 81       	ldd	r24, Y+2	; 0x02
    4154:	88 23       	and	r24, r24
    4156:	09 f4       	brne	.+2      	; 0x415a <__stack+0x5b>
    4158:	4a c0       	rjmp	.+148    	; 0x41ee <__stack+0xef>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
    415a:	8e 81       	ldd	r24, Y+6	; 0x06
    415c:	9f 81       	ldd	r25, Y+7	; 0x07
    415e:	a8 85       	ldd	r26, Y+8	; 0x08
    4160:	b9 85       	ldd	r27, Y+9	; 0x09
    4162:	8c 56       	subi	r24, 0x6C	; 108
    4164:	9d 4f       	sbci	r25, 0xFD	; 253
    4166:	af 4f       	sbci	r26, 0xFF	; 255
    4168:	bf 4f       	sbci	r27, 0xFF	; 255
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    416a:	88 15       	cp	r24, r8
    416c:	99 05       	cpc	r25, r9
    416e:	aa 05       	cpc	r26, r10
    4170:	bb 05       	cpc	r27, r11
    4172:	08 f0       	brcs	.+2      	; 0x4176 <__stack+0x77>
    4174:	42 c0       	rjmp	.+132    	; 0x41fa <__stack+0xfb>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    4176:	88 1a       	sub	r8, r24
    4178:	99 0a       	sbc	r9, r25
    417a:	aa 0a       	sbc	r10, r26
    417c:	bb 0a       	sbc	r11, r27
    417e:	37 c0       	rjmp	.+110    	; 0x41ee <__stack+0xef>

	if (SchedulerSequenceSteps.PreRangeOn) {

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
    4180:	ae 01       	movw	r20, r28
    4182:	46 5f       	subi	r20, 0xF6	; 246
    4184:	5f 4f       	sbci	r21, 0xFF	; 255
    4186:	63 e0       	ldi	r22, 0x03	; 3
    4188:	c8 01       	movw	r24, r16
    418a:	74 dd       	rcall	.-1304   	; 0x3c74 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
    418c:	4a 85       	ldd	r20, Y+10	; 0x0a
    418e:	5b 85       	ldd	r21, Y+11	; 0x0b
    4190:	6c 85       	ldd	r22, Y+12	; 0x0c
    4192:	7d 85       	ldd	r23, Y+13	; 0x0d
    4194:	4c 56       	subi	r20, 0x6C	; 108
    4196:	5d 4f       	sbci	r21, 0xFD	; 253
    4198:	6f 4f       	sbci	r22, 0xFF	; 255
    419a:	7f 4f       	sbci	r23, 0xFF	; 255
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    419c:	48 15       	cp	r20, r8
    419e:	59 05       	cpc	r21, r9
    41a0:	6a 05       	cpc	r22, r10
    41a2:	7b 05       	cpc	r23, r11
    41a4:	e0 f4       	brcc	.+56     	; 0x41de <__stack+0xdf>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    41a6:	81 11       	cpse	r24, r1
    41a8:	29 c0       	rjmp	.+82     	; 0x41fc <__stack+0xfd>

		SubTimeout = PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
    41aa:	84 1a       	sub	r8, r20
    41ac:	95 0a       	sbc	r9, r21
    41ae:	a6 0a       	sbc	r10, r22
    41b0:	b7 0a       	sbc	r11, r23
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    41b2:	8d 81       	ldd	r24, Y+5	; 0x05
    41b4:	88 23       	and	r24, r24
    41b6:	a9 f0       	breq	.+42     	; 0x41e2 <__stack+0xe3>
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
    41b8:	a5 01       	movw	r20, r10
    41ba:	94 01       	movw	r18, r8
    41bc:	26 52       	subi	r18, 0x26	; 38
    41be:	32 40       	sbci	r19, 0x02	; 2
    41c0:	41 09       	sbc	r20, r1
    41c2:	51 09       	sbc	r21, r1
    41c4:	64 e0       	ldi	r22, 0x04	; 4
    41c6:	c8 01       	movw	r24, r16
    41c8:	47 de       	rcall	.-882    	; 0x3e58 <set_sequence_step_timeout>
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
    41ca:	f8 01       	movw	r30, r16
    41cc:	c2 8a       	std	Z+18, r12	; 0x12
    41ce:	d3 8a       	std	Z+19, r13	; 0x13
    41d0:	e4 8a       	std	Z+20, r14	; 0x14
    41d2:	f5 8a       	std	Z+21, r15	; 0x15
    41d4:	13 c0       	rjmp	.+38     	; 0x41fc <__stack+0xfd>
	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
    41d6:	8c ef       	ldi	r24, 0xFC	; 252
    41d8:	11 c0       	rjmp	.+34     	; 0x41fc <__stack+0xfd>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    41da:	8c ef       	ldi	r24, 0xFC	; 252
    41dc:	0f c0       	rjmp	.+30     	; 0x41fc <__stack+0xfd>

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    41de:	8c ef       	ldi	r24, 0xFC	; 252
    41e0:	0d c0       	rjmp	.+26     	; 0x41fc <__stack+0xfd>
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	0b c0       	rjmp	.+22     	; 0x41fc <__stack+0xfd>
			LOG_FUNCTION_END(Status);
			return Status;
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
    41e6:	8b 81       	ldd	r24, Y+3	; 0x03
    41e8:	81 11       	cpse	r24, r1
    41ea:	9c cf       	rjmp	.-200    	; 0x4124 <__stack+0x25>
    41ec:	b2 cf       	rjmp	.-156    	; 0x4152 <__stack+0x53>
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
    41ee:	8c 81       	ldd	r24, Y+4	; 0x04
    41f0:	88 23       	and	r24, r24
    41f2:	f9 f2       	breq	.-66     	; 0x41b2 <__stack+0xb3>
    41f4:	c5 cf       	rjmp	.-118    	; 0x4180 <__stack+0x81>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    41f6:	8c ef       	ldi	r24, 0xFC	; 252
    41f8:	01 c0       	rjmp	.+2      	; 0x41fc <__stack+0xfd>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    41fa:	8c ef       	ldi	r24, 0xFC	; 252
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
    41fc:	2d 96       	adiw	r28, 0x0d	; 13
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	df 91       	pop	r29
    420a:	cf 91       	pop	r28
    420c:	1f 91       	pop	r17
    420e:	0f 91       	pop	r16
    4210:	ff 90       	pop	r15
    4212:	ef 90       	pop	r14
    4214:	df 90       	pop	r13
    4216:	cf 90       	pop	r12
    4218:	bf 90       	pop	r11
    421a:	af 90       	pop	r10
    421c:	9f 90       	pop	r9
    421e:	8f 90       	pop	r8
    4220:	08 95       	ret

00004222 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
    4222:	8f 92       	push	r8
    4224:	9f 92       	push	r9
    4226:	af 92       	push	r10
    4228:	bf 92       	push	r11
    422a:	cf 92       	push	r12
    422c:	df 92       	push	r13
    422e:	ff 92       	push	r15
    4230:	0f 93       	push	r16
    4232:	1f 93       	push	r17
    4234:	cf 93       	push	r28
    4236:	df 93       	push	r29
    4238:	cd b7       	in	r28, 0x3d	; 61
    423a:	de b7       	in	r29, 0x3e	; 62
    423c:	61 97       	sbiw	r28, 0x11	; 17
    423e:	0f b6       	in	r0, 0x3f	; 63
    4240:	f8 94       	cli
    4242:	de bf       	out	0x3e, r29	; 62
    4244:	0f be       	out	0x3f, r0	; 63
    4246:	cd bf       	out	0x3d, r28	; 61
    4248:	6c 01       	movw	r12, r24
    424a:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
    424c:	80 ed       	ldi	r24, 0xD0	; 208
    424e:	97 e0       	ldi	r25, 0x07	; 7
    4250:	a0 e0       	ldi	r26, 0x00	; 0
    4252:	b0 e0       	ldi	r27, 0x00	; 0
    4254:	8a 87       	std	Y+10, r24	; 0x0a
    4256:	9b 87       	std	Y+11, r25	; 0x0b
    4258:	ac 87       	std	Y+12, r26	; 0x0c
    425a:	bd 87       	std	Y+13, r27	; 0x0d
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
    425c:	1e 86       	std	Y+14, r1	; 0x0e
    425e:	1f 86       	std	Y+15, r1	; 0x0f
    4260:	18 8a       	std	Y+16, r1	; 0x10
    4262:	19 8a       	std	Y+17, r1	; 0x11

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
    4264:	86 e3       	ldi	r24, 0x36	; 54
    4266:	9b e0       	ldi	r25, 0x0B	; 11
    4268:	a0 e0       	ldi	r26, 0x00	; 0
    426a:	b0 e0       	ldi	r27, 0x00	; 0
    426c:	fb 01       	movw	r30, r22
    426e:	80 83       	st	Z, r24
    4270:	91 83       	std	Z+1, r25	; 0x01
    4272:	a2 83       	std	Z+2, r26	; 0x02
    4274:	b3 83       	std	Z+3, r27	; 0x03

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    4276:	be 01       	movw	r22, r28
    4278:	6f 5f       	subi	r22, 0xFF	; 255
    427a:	7f 4f       	sbci	r23, 0xFF	; 255
    427c:	c6 01       	movw	r24, r12
    427e:	0e 94 8f 08 	call	0x111e	; 0x111e <VL53L0X_GetSequenceStepEnables>
    4282:	f8 2e       	mov	r15, r24

	if (Status != VL53L0X_ERROR_NONE) {
    4284:	81 11       	cpse	r24, r1
    4286:	b3 c0       	rjmp	.+358    	; 0x43ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
    4288:	89 81       	ldd	r24, Y+1	; 0x01
    428a:	81 11       	cpse	r24, r1
    428c:	07 c0       	rjmp	.+14     	; 0x429c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    428e:	8a 81       	ldd	r24, Y+2	; 0x02
    4290:	81 11       	cpse	r24, r1
    4292:	04 c0       	rjmp	.+8      	; 0x429c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
		SchedulerSequenceSteps.MsrcOn ||
    4294:	8b 81       	ldd	r24, Y+3	; 0x03
    4296:	88 23       	and	r24, r24
    4298:	09 f4       	brne	.+2      	; 0x429c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    429a:	a5 c0       	rjmp	.+330    	; 0x43e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    429c:	ae 01       	movw	r20, r28
    429e:	46 5f       	subi	r20, 0xF6	; 246
    42a0:	5f 4f       	sbci	r21, 0xFF	; 255
    42a2:	62 e0       	ldi	r22, 0x02	; 2
    42a4:	c6 01       	movw	r24, r12
    42a6:	e6 dc       	rcall	.-1588   	; 0x3c74 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
    42a8:	81 11       	cpse	r24, r1
    42aa:	97 c0       	rjmp	.+302    	; 0x43da <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1b8>
			if (SchedulerSequenceSteps.TccOn) {
    42ac:	89 81       	ldd	r24, Y+1	; 0x01
    42ae:	88 23       	and	r24, r24
    42b0:	a9 f0       	breq	.+42     	; 0x42dc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xba>
				*pMeasurementTimingBudgetMicroSeconds +=
    42b2:	8a 85       	ldd	r24, Y+10	; 0x0a
    42b4:	9b 85       	ldd	r25, Y+11	; 0x0b
    42b6:	ac 85       	ldd	r26, Y+12	; 0x0c
    42b8:	bd 85       	ldd	r27, Y+13	; 0x0d
    42ba:	82 5b       	subi	r24, 0xB2	; 178
    42bc:	9d 4f       	sbci	r25, 0xFD	; 253
    42be:	af 4f       	sbci	r26, 0xFF	; 255
    42c0:	bf 4f       	sbci	r27, 0xFF	; 255
    42c2:	f8 01       	movw	r30, r16
    42c4:	40 81       	ld	r20, Z
    42c6:	51 81       	ldd	r21, Z+1	; 0x01
    42c8:	62 81       	ldd	r22, Z+2	; 0x02
    42ca:	73 81       	ldd	r23, Z+3	; 0x03
    42cc:	84 0f       	add	r24, r20
    42ce:	95 1f       	adc	r25, r21
    42d0:	a6 1f       	adc	r26, r22
    42d2:	b7 1f       	adc	r27, r23
    42d4:	80 83       	st	Z, r24
    42d6:	91 83       	std	Z+1, r25	; 0x01
    42d8:	a2 83       	std	Z+2, r26	; 0x02
    42da:	b3 83       	std	Z+3, r27	; 0x03
					MsrcDccTccTimeoutMicroSeconds +
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
    42dc:	8b 81       	ldd	r24, Y+3	; 0x03
    42de:	88 23       	and	r24, r24
    42e0:	d1 f0       	breq	.+52     	; 0x4316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf4>
				*pMeasurementTimingBudgetMicroSeconds +=
    42e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    42e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    42e6:	ac 85       	ldd	r26, Y+12	; 0x0c
    42e8:	bd 85       	ldd	r27, Y+13	; 0x0d
    42ea:	8e 54       	subi	r24, 0x4E	; 78
    42ec:	9d 4f       	sbci	r25, 0xFD	; 253
    42ee:	af 4f       	sbci	r26, 0xFF	; 255
    42f0:	bf 4f       	sbci	r27, 0xFF	; 255
    42f2:	88 0f       	add	r24, r24
    42f4:	99 1f       	adc	r25, r25
    42f6:	aa 1f       	adc	r26, r26
    42f8:	bb 1f       	adc	r27, r27
    42fa:	f8 01       	movw	r30, r16
    42fc:	40 81       	ld	r20, Z
    42fe:	51 81       	ldd	r21, Z+1	; 0x01
    4300:	62 81       	ldd	r22, Z+2	; 0x02
    4302:	73 81       	ldd	r23, Z+3	; 0x03
    4304:	84 0f       	add	r24, r20
    4306:	95 1f       	adc	r25, r21
    4308:	a6 1f       	adc	r26, r22
    430a:	b7 1f       	adc	r27, r23
    430c:	80 83       	st	Z, r24
    430e:	91 83       	std	Z+1, r25	; 0x01
    4310:	a2 83       	std	Z+2, r26	; 0x02
    4312:	b3 83       	std	Z+3, r27	; 0x03
    4314:	68 c0       	rjmp	.+208    	; 0x43e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				2 * (MsrcDccTccTimeoutMicroSeconds +
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
    4316:	8a 81       	ldd	r24, Y+2	; 0x02
    4318:	88 23       	and	r24, r24
    431a:	09 f4       	brne	.+2      	; 0x431e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
    431c:	64 c0       	rjmp	.+200    	; 0x43e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				*pMeasurementTimingBudgetMicroSeconds +=
    431e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4320:	9b 85       	ldd	r25, Y+11	; 0x0b
    4322:	ac 85       	ldd	r26, Y+12	; 0x0c
    4324:	bd 85       	ldd	r27, Y+13	; 0x0d
    4326:	8c 56       	subi	r24, 0x6C	; 108
    4328:	9d 4f       	sbci	r25, 0xFD	; 253
    432a:	af 4f       	sbci	r26, 0xFF	; 255
    432c:	bf 4f       	sbci	r27, 0xFF	; 255
    432e:	f8 01       	movw	r30, r16
    4330:	40 81       	ld	r20, Z
    4332:	51 81       	ldd	r21, Z+1	; 0x01
    4334:	62 81       	ldd	r22, Z+2	; 0x02
    4336:	73 81       	ldd	r23, Z+3	; 0x03
    4338:	84 0f       	add	r24, r20
    433a:	95 1f       	adc	r25, r21
    433c:	a6 1f       	adc	r26, r22
    433e:	b7 1f       	adc	r27, r23
    4340:	80 83       	st	Z, r24
    4342:	91 83       	std	Z+1, r25	; 0x01
    4344:	a2 83       	std	Z+2, r26	; 0x02
    4346:	b3 83       	std	Z+3, r27	; 0x03
    4348:	4e c0       	rjmp	.+156    	; 0x43e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    434a:	ae 01       	movw	r20, r28
    434c:	42 5f       	subi	r20, 0xF2	; 242
    434e:	5f 4f       	sbci	r21, 0xFF	; 255
    4350:	63 e0       	ldi	r22, 0x03	; 3
    4352:	c6 01       	movw	r24, r12
    4354:	8f dc       	rcall	.-1762   	; 0x3c74 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    4356:	4e 85       	ldd	r20, Y+14	; 0x0e
    4358:	5f 85       	ldd	r21, Y+15	; 0x0f
    435a:	68 89       	ldd	r22, Y+16	; 0x10
    435c:	79 89       	ldd	r23, Y+17	; 0x11
    435e:	4c 56       	subi	r20, 0x6C	; 108
    4360:	5d 4f       	sbci	r21, 0xFD	; 253
    4362:	6f 4f       	sbci	r22, 0xFF	; 255
    4364:	7f 4f       	sbci	r23, 0xFF	; 255
    4366:	f8 01       	movw	r30, r16
    4368:	80 80       	ld	r8, Z
    436a:	91 80       	ldd	r9, Z+1	; 0x01
    436c:	a2 80       	ldd	r10, Z+2	; 0x02
    436e:	b3 80       	ldd	r11, Z+3	; 0x03
    4370:	48 0d       	add	r20, r8
    4372:	59 1d       	adc	r21, r9
    4374:	6a 1d       	adc	r22, r10
    4376:	7b 1d       	adc	r23, r11
    4378:	40 83       	st	Z, r20
    437a:	51 83       	std	Z+1, r21	; 0x01
    437c:	62 83       	std	Z+2, r22	; 0x02
    437e:	73 83       	std	Z+3, r23	; 0x03
				PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    4380:	81 11       	cpse	r24, r1
    4382:	2d c0       	rjmp	.+90     	; 0x43de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1bc>
		if (SchedulerSequenceSteps.FinalRangeOn) {
    4384:	8d 81       	ldd	r24, Y+5	; 0x05
    4386:	88 23       	and	r24, r24
    4388:	e9 f0       	breq	.+58     	; 0x43c4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a2>
			Status = get_sequence_step_timeout(Dev,
    438a:	ae 01       	movw	r20, r28
    438c:	4a 5f       	subi	r20, 0xFA	; 250
    438e:	5f 4f       	sbci	r21, 0xFF	; 255
    4390:	64 e0       	ldi	r22, 0x04	; 4
    4392:	c6 01       	movw	r24, r12
    4394:	6f dc       	rcall	.-1826   	; 0x3c74 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    4396:	4e 81       	ldd	r20, Y+6	; 0x06
    4398:	5f 81       	ldd	r21, Y+7	; 0x07
    439a:	68 85       	ldd	r22, Y+8	; 0x08
    439c:	79 85       	ldd	r23, Y+9	; 0x09
    439e:	4a 5d       	subi	r20, 0xDA	; 218
    43a0:	5d 4f       	sbci	r21, 0xFD	; 253
    43a2:	6f 4f       	sbci	r22, 0xFF	; 255
    43a4:	7f 4f       	sbci	r23, 0xFF	; 255
    43a6:	f8 01       	movw	r30, r16
    43a8:	80 80       	ld	r8, Z
    43aa:	91 80       	ldd	r9, Z+1	; 0x01
    43ac:	a2 80       	ldd	r10, Z+2	; 0x02
    43ae:	b3 80       	ldd	r11, Z+3	; 0x03
    43b0:	48 0d       	add	r20, r8
    43b2:	59 1d       	adc	r21, r9
    43b4:	6a 1d       	adc	r22, r10
    43b6:	7b 1d       	adc	r23, r11
    43b8:	40 83       	st	Z, r20
    43ba:	51 83       	std	Z+1, r21	; 0x01
    43bc:	62 83       	std	Z+2, r22	; 0x02
    43be:	73 83       	std	Z+3, r23	; 0x03
				(FinalRangeTimeoutMicroSeconds +
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    43c0:	81 11       	cpse	r24, r1
    43c2:	0f c0       	rjmp	.+30     	; 0x43e2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c0>
		VL53L0X_SETPARAMETERFIELD(Dev,
    43c4:	f8 01       	movw	r30, r16
    43c6:	80 81       	ld	r24, Z
    43c8:	91 81       	ldd	r25, Z+1	; 0x01
    43ca:	a2 81       	ldd	r26, Z+2	; 0x02
    43cc:	b3 81       	ldd	r27, Z+3	; 0x03
    43ce:	f6 01       	movw	r30, r12
    43d0:	82 8b       	std	Z+18, r24	; 0x12
    43d2:	93 8b       	std	Z+19, r25	; 0x13
    43d4:	a4 8b       	std	Z+20, r26	; 0x14
    43d6:	b5 8b       	std	Z+21, r27	; 0x15
    43d8:	0a c0       	rjmp	.+20     	; 0x43ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>

	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    43da:	f8 2e       	mov	r15, r24
    43dc:	08 c0       	rjmp	.+16     	; 0x43ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    43de:	f8 2e       	mov	r15, r24
    43e0:	06 c0       	rjmp	.+12     	; 0x43ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    43e2:	f8 2e       	mov	r15, r24
    43e4:	04 c0       	rjmp	.+8      	; 0x43ee <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
    43e6:	8c 81       	ldd	r24, Y+4	; 0x04
    43e8:	88 23       	and	r24, r24
    43ea:	61 f2       	breq	.-104    	; 0x4384 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x162>
    43ec:	ae cf       	rjmp	.-164    	; 0x434a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    43ee:	8f 2d       	mov	r24, r15
    43f0:	61 96       	adiw	r28, 0x11	; 17
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	f8 94       	cli
    43f6:	de bf       	out	0x3e, r29	; 62
    43f8:	0f be       	out	0x3f, r0	; 63
    43fa:	cd bf       	out	0x3d, r28	; 61
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	ff 90       	pop	r15
    4406:	df 90       	pop	r13
    4408:	cf 90       	pop	r12
    440a:	bf 90       	pop	r11
    440c:	af 90       	pop	r10
    440e:	9f 90       	pop	r9
    4410:	8f 90       	pop	r8
    4412:	08 95       	ret

00004414 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
    4414:	2f 92       	push	r2
    4416:	3f 92       	push	r3
    4418:	4f 92       	push	r4
    441a:	5f 92       	push	r5
    441c:	6f 92       	push	r6
    441e:	7f 92       	push	r7
    4420:	8f 92       	push	r8
    4422:	9f 92       	push	r9
    4424:	af 92       	push	r10
    4426:	bf 92       	push	r11
    4428:	cf 92       	push	r12
    442a:	df 92       	push	r13
    442c:	ef 92       	push	r14
    442e:	ff 92       	push	r15
    4430:	0f 93       	push	r16
    4432:	1f 93       	push	r17
    4434:	cf 93       	push	r28
    4436:	df 93       	push	r29
    4438:	00 d0       	rcall	.+0      	; 0x443a <VL53L0X_load_tuning_settings+0x26>
    443a:	00 d0       	rcall	.+0      	; 0x443c <VL53L0X_load_tuning_settings+0x28>
    443c:	cd b7       	in	r28, 0x3d	; 61
    443e:	de b7       	in	r29, 0x3e	; 62
    4440:	5c 01       	movw	r10, r24
    4442:	6b 01       	movw	r12, r22
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
    4444:	e1 2c       	mov	r14, r1
    4446:	f1 2c       	mov	r15, r1


VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    4448:	80 e0       	ldi	r24, 0x00	; 0
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    444a:	35 01       	movw	r6, r10
    444c:	2d ed       	ldi	r18, 0xDD	; 221
    444e:	62 1a       	sub	r6, r18
    4450:	2e ef       	ldi	r18, 0xFE	; 254
    4452:	72 0a       	sbc	r7, r18
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    4454:	45 01       	movw	r8, r10
    4456:	9f ed       	ldi	r25, 0xDF	; 223
    4458:	89 1a       	sub	r8, r25
    445a:	9e ef       	ldi	r25, 0xFE	; 254
    445c:	99 0a       	sbc	r9, r25
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    445e:	25 01       	movw	r4, r10
    4460:	eb ed       	ldi	r30, 0xDB	; 219
    4462:	4e 1a       	sub	r4, r30
    4464:	ee ef       	ldi	r30, 0xFE	; 254
    4466:	5e 0a       	sbc	r5, r30
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    4468:	15 01       	movw	r2, r10
    446a:	f8 ed       	ldi	r31, 0xD8	; 216
    446c:	2f 1a       	sub	r2, r31
    446e:	fe ef       	ldi	r31, 0xFE	; 254
    4470:	3f 0a       	sbc	r3, r31

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    4472:	91 c0       	rjmp	.+290    	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    4474:	97 01       	movw	r18, r14
    4476:	2f 5f       	subi	r18, 0xFF	; 255
    4478:	3f 4f       	sbci	r19, 0xFF	; 255
		if (NumberOfWrites == 0xFF) {
    447a:	0f 3f       	cpi	r16, 0xFF	; 255
    447c:	09 f0       	breq	.+2      	; 0x4480 <VL53L0X_load_tuning_settings+0x6c>
    447e:	5f c0       	rjmp	.+190    	; 0x453e <VL53L0X_load_tuning_settings+0x12a>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    4480:	a7 01       	movw	r20, r14
    4482:	4e 5f       	subi	r20, 0xFE	; 254
    4484:	5f 4f       	sbci	r21, 0xFF	; 255
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
    4486:	f6 01       	movw	r30, r12
    4488:	e2 0f       	add	r30, r18
    448a:	f3 1f       	adc	r31, r19
			Index++;
			switch (SelectParam) {
    448c:	90 81       	ld	r25, Z
    448e:	91 30       	cpi	r25, 0x01	; 1
    4490:	d1 f0       	breq	.+52     	; 0x44c6 <VL53L0X_load_tuning_settings+0xb2>
    4492:	28 f0       	brcs	.+10     	; 0x449e <VL53L0X_load_tuning_settings+0x8a>
    4494:	92 30       	cpi	r25, 0x02	; 2
    4496:	59 f1       	breq	.+86     	; 0x44ee <VL53L0X_load_tuning_settings+0xda>
    4498:	93 30       	cpi	r25, 0x03	; 3
    449a:	e9 f1       	breq	.+122    	; 0x4516 <VL53L0X_load_tuning_settings+0x102>
    449c:	77 c0       	rjmp	.+238    	; 0x458c <VL53L0X_load_tuning_settings+0x178>
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    449e:	f6 01       	movw	r30, r12
    44a0:	ee 0d       	add	r30, r14
    44a2:	ff 1d       	adc	r31, r15
    44a4:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    44a6:	24 e0       	ldi	r18, 0x04	; 4
    44a8:	e2 0e       	add	r14, r18
    44aa:	f1 1c       	adc	r15, r1
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
			switch (SelectParam) {
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    44ac:	f6 01       	movw	r30, r12
    44ae:	e4 0f       	add	r30, r20
    44b0:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    44b2:	20 81       	ld	r18, Z
    44b4:	30 e0       	ldi	r19, 0x00	; 0
    44b6:	32 2f       	mov	r19, r18
    44b8:	22 27       	eor	r18, r18
    44ba:	29 0f       	add	r18, r25
    44bc:	31 1d       	adc	r19, r1
    44be:	f4 01       	movw	r30, r8
    44c0:	31 83       	std	Z+1, r19	; 0x01
    44c2:	20 83       	st	Z, r18
				break;
    44c4:	68 c0       	rjmp	.+208    	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    44c6:	f6 01       	movw	r30, r12
    44c8:	ee 0d       	add	r30, r14
    44ca:	ff 1d       	adc	r31, r15
    44cc:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    44ce:	f4 e0       	ldi	r31, 0x04	; 4
    44d0:	ef 0e       	add	r14, r31
    44d2:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
				break;
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    44d4:	f6 01       	movw	r30, r12
    44d6:	e4 0f       	add	r30, r20
    44d8:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    44da:	20 81       	ld	r18, Z
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	32 2f       	mov	r19, r18
    44e0:	22 27       	eor	r18, r18
    44e2:	29 0f       	add	r18, r25
    44e4:	31 1d       	adc	r19, r1
    44e6:	f3 01       	movw	r30, r6
    44e8:	31 83       	std	Z+1, r19	; 0x01
    44ea:	20 83       	st	Z, r18
					Temp16);
				break;
    44ec:	54 c0       	rjmp	.+168    	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    44ee:	f6 01       	movw	r30, r12
    44f0:	ee 0d       	add	r30, r14
    44f2:	ff 1d       	adc	r31, r15
    44f4:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    44f6:	f4 e0       	ldi	r31, 0x04	; 4
    44f8:	ef 0e       	add	r14, r31
    44fa:	f1 1c       	adc	r15, r1
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
					Temp16);
				break;
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    44fc:	f6 01       	movw	r30, r12
    44fe:	e4 0f       	add	r30, r20
    4500:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    4502:	20 81       	ld	r18, Z
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	32 2f       	mov	r19, r18
    4508:	22 27       	eor	r18, r18
    450a:	29 0f       	add	r18, r25
    450c:	31 1d       	adc	r19, r1
    450e:	f2 01       	movw	r30, r4
    4510:	31 83       	std	Z+1, r19	; 0x01
    4512:	20 83       	st	Z, r18
				break;
    4514:	40 c0       	rjmp	.+128    	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    4516:	f6 01       	movw	r30, r12
    4518:	ee 0d       	add	r30, r14
    451a:	ff 1d       	adc	r31, r15
    451c:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    451e:	f4 e0       	ldi	r31, 0x04	; 4
    4520:	ef 0e       	add	r14, r31
    4522:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
				break;
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    4524:	f6 01       	movw	r30, r12
    4526:	e4 0f       	add	r30, r20
    4528:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    452a:	20 81       	ld	r18, Z
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	32 2f       	mov	r19, r18
    4530:	22 27       	eor	r18, r18
    4532:	29 0f       	add	r18, r25
    4534:	31 1d       	adc	r19, r1
    4536:	f1 01       	movw	r30, r2
    4538:	31 83       	std	Z+1, r19	; 0x01
    453a:	20 83       	st	Z, r18
				break;
    453c:	2c c0       	rjmp	.+88     	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}

		} else if (NumberOfWrites <= 4) {
    453e:	05 30       	cpi	r16, 0x05	; 5
    4540:	40 f5       	brcc	.+80     	; 0x4592 <VL53L0X_load_tuning_settings+0x17e>
			Address = *(pTuningSettingBuffer + Index);
    4542:	f6 01       	movw	r30, r12
    4544:	e2 0f       	add	r30, r18
    4546:	f3 1f       	adc	r31, r19
    4548:	60 81       	ld	r22, Z
			Index++;
    454a:	f2 e0       	ldi	r31, 0x02	; 2
    454c:	ef 0e       	add	r14, r31
    454e:	f1 1c       	adc	r15, r1

			for (i = 0; i < NumberOfWrites; i++) {
    4550:	00 23       	and	r16, r16
    4552:	91 f0       	breq	.+36     	; 0x4578 <VL53L0X_load_tuning_settings+0x164>
    4554:	97 01       	movw	r18, r14
    4556:	d6 01       	movw	r26, r12
    4558:	ae 0d       	add	r26, r14
    455a:	bf 1d       	adc	r27, r15
    455c:	fe 01       	movw	r30, r28
    455e:	31 96       	adiw	r30, 0x01	; 1
    4560:	e0 2e       	mov	r14, r16
    4562:	f1 2c       	mov	r15, r1
    4564:	cf 01       	movw	r24, r30
    4566:	8e 0d       	add	r24, r14
    4568:	9f 1d       	adc	r25, r15
				localBuffer[i] = *(pTuningSettingBuffer +
    456a:	4d 91       	ld	r20, X+
    456c:	41 93       	st	Z+, r20

		} else if (NumberOfWrites <= 4) {
			Address = *(pTuningSettingBuffer + Index);
			Index++;

			for (i = 0; i < NumberOfWrites; i++) {
    456e:	e8 17       	cp	r30, r24
    4570:	f9 07       	cpc	r31, r25
    4572:	d9 f7       	brne	.-10     	; 0x456a <VL53L0X_load_tuning_settings+0x156>
    4574:	e2 0e       	add	r14, r18
    4576:	f3 1e       	adc	r15, r19
				localBuffer[i] = *(pTuningSettingBuffer +
							Index);
				Index++;
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
    4578:	10 e0       	ldi	r17, 0x00	; 0
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	ae 01       	movw	r20, r28
    4580:	4f 5f       	subi	r20, 0xFF	; 255
    4582:	5f 4f       	sbci	r21, 0xFF	; 255
    4584:	c5 01       	movw	r24, r10
    4586:	0e 94 76 2b 	call	0x56ec	; 0x56ec <VL53L0X_WriteMulti>
    458a:	05 c0       	rjmp	.+10     	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    458c:	7a 01       	movw	r14, r20
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
				break;
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    458e:	8c ef       	ldi	r24, 0xFC	; 252
    4590:	02 c0       	rjmp	.+4      	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    4592:	79 01       	movw	r14, r18

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    4594:	8c ef       	ldi	r24, 0xFC	; 252

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    4596:	f6 01       	movw	r30, r12
    4598:	ee 0d       	add	r30, r14
    459a:	ff 1d       	adc	r31, r15
    459c:	00 81       	ld	r16, Z
    459e:	00 23       	and	r16, r16
    45a0:	19 f0       	breq	.+6      	; 0x45a8 <VL53L0X_load_tuning_settings+0x194>
    45a2:	88 23       	and	r24, r24
    45a4:	09 f4       	brne	.+2      	; 0x45a8 <VL53L0X_load_tuning_settings+0x194>
    45a6:	66 cf       	rjmp	.-308    	; 0x4474 <VL53L0X_load_tuning_settings+0x60>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    45a8:	0f 90       	pop	r0
    45aa:	0f 90       	pop	r0
    45ac:	0f 90       	pop	r0
    45ae:	0f 90       	pop	r0
    45b0:	df 91       	pop	r29
    45b2:	cf 91       	pop	r28
    45b4:	1f 91       	pop	r17
    45b6:	0f 91       	pop	r16
    45b8:	ff 90       	pop	r15
    45ba:	ef 90       	pop	r14
    45bc:	df 90       	pop	r13
    45be:	cf 90       	pop	r12
    45c0:	bf 90       	pop	r11
    45c2:	af 90       	pop	r10
    45c4:	9f 90       	pop	r9
    45c6:	8f 90       	pop	r8
    45c8:	7f 90       	pop	r7
    45ca:	6f 90       	pop	r6
    45cc:	5f 90       	pop	r5
    45ce:	4f 90       	pop	r4
    45d0:	3f 90       	pop	r3
    45d2:	2f 90       	pop	r2
    45d4:	08 95       	ret

000045d6 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
    45d6:	cf 92       	push	r12
    45d8:	df 92       	push	r13
    45da:	ef 92       	push	r14
    45dc:	ff 92       	push	r15
    45de:	0f 93       	push	r16
    45e0:	1f 93       	push	r17
    45e2:	cf 93       	push	r28
    45e4:	df 93       	push	r29
    45e6:	1f 92       	push	r1
    45e8:	cd b7       	in	r28, 0x3d	; 61
    45ea:	de b7       	in	r29, 0x3e	; 62
    45ec:	7c 01       	movw	r14, r24
    45ee:	6b 01       	movw	r12, r22
    45f0:	8a 01       	movw	r16, r20

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
    45f2:	da 01       	movw	r26, r20
    45f4:	1d 92       	st	X+, r1
    45f6:	1d 92       	st	X+, r1
    45f8:	1d 92       	st	X+, r1
    45fa:	1c 92       	st	X, r1
    45fc:	13 97       	sbiw	r26, 0x03	; 3

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
    45fe:	be 01       	movw	r22, r28
    4600:	6f 5f       	subi	r22, 0xFF	; 255
    4602:	7f 4f       	sbci	r23, 0xFF	; 255
    4604:	0e 94 8d 09 	call	0x131a	; 0x131a <VL53L0X_GetXTalkCompensationEnable>
    4608:	e8 2f       	mov	r30, r24
	if (Status == VL53L0X_ERROR_NONE) {
    460a:	81 11       	cpse	r24, r1
    460c:	22 c0       	rjmp	.+68     	; 0x4652 <VL53L0X_get_total_xtalk_rate+0x7c>

		if (xtalkCompEnable) {
    460e:	89 81       	ldd	r24, Y+1	; 0x01
    4610:	88 23       	and	r24, r24
    4612:	f9 f0       	breq	.+62     	; 0x4652 <VL53L0X_get_total_xtalk_rate+0x7c>
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
    4614:	d6 01       	movw	r26, r12
    4616:	54 96       	adiw	r26, 0x14	; 20
    4618:	8d 91       	ld	r24, X+
    461a:	9c 91       	ld	r25, X
    461c:	55 97       	sbiw	r26, 0x15	; 21
    461e:	d7 01       	movw	r26, r14
    4620:	5d 96       	adiw	r26, 0x1d	; 29
    4622:	2d 91       	ld	r18, X+
    4624:	3d 91       	ld	r19, X+
    4626:	4d 91       	ld	r20, X+
    4628:	5c 91       	ld	r21, X
    462a:	90 97       	sbiw	r26, 0x20	; 32
    462c:	dc 01       	movw	r26, r24
    462e:	0e 94 7a 2c 	call	0x58f4	; 0x58f4 <__muluhisi3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	80 58       	subi	r24, 0x80	; 128
    4638:	9f 4f       	sbci	r25, 0xFF	; 255
    463a:	af 4f       	sbci	r26, 0xFF	; 255
    463c:	bf 4f       	sbci	r27, 0xFF	; 255
    463e:	49 2f       	mov	r20, r25
    4640:	5a 2f       	mov	r21, r26
    4642:	6b 2f       	mov	r22, r27
    4644:	77 27       	eor	r23, r23
    4646:	d8 01       	movw	r26, r16
    4648:	4d 93       	st	X+, r20
    464a:	5d 93       	st	X+, r21
    464c:	6d 93       	st	X+, r22
    464e:	7c 93       	st	X, r23
    4650:	13 97       	sbiw	r26, 0x03	; 3
				(totalXtalkMegaCps + 0x80) >> 8;
		}
	}

	return Status;
}
    4652:	8e 2f       	mov	r24, r30
    4654:	0f 90       	pop	r0
    4656:	df 91       	pop	r29
    4658:	cf 91       	pop	r28
    465a:	1f 91       	pop	r17
    465c:	0f 91       	pop	r16
    465e:	ff 90       	pop	r15
    4660:	ef 90       	pop	r14
    4662:	df 90       	pop	r13
    4664:	cf 90       	pop	r12
    4666:	08 95       	ret

00004668 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
    4668:	cf 92       	push	r12
    466a:	df 92       	push	r13
    466c:	ef 92       	push	r14
    466e:	ff 92       	push	r15
    4670:	0f 93       	push	r16
    4672:	1f 93       	push	r17
    4674:	cf 93       	push	r28
    4676:	df 93       	push	r29
    4678:	00 d0       	rcall	.+0      	; 0x467a <VL53L0X_get_total_signal_rate+0x12>
    467a:	00 d0       	rcall	.+0      	; 0x467c <VL53L0X_get_total_signal_rate+0x14>
    467c:	cd b7       	in	r28, 0x3d	; 61
    467e:	de b7       	in	r29, 0x3e	; 62
    4680:	8a 01       	movw	r16, r20
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
    4682:	fb 01       	movw	r30, r22
    4684:	c4 84       	ldd	r12, Z+12	; 0x0c
    4686:	d5 84       	ldd	r13, Z+13	; 0x0d
    4688:	e6 84       	ldd	r14, Z+14	; 0x0e
    468a:	f7 84       	ldd	r15, Z+15	; 0x0f
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
    468c:	fa 01       	movw	r30, r20
    468e:	c0 82       	st	Z, r12
    4690:	d1 82       	std	Z+1, r13	; 0x01
    4692:	e2 82       	std	Z+2, r14	; 0x02
    4694:	f3 82       	std	Z+3, r15	; 0x03
		pRangingMeasurementData->SignalRateRtnMegaCps;

	Status = VL53L0X_get_total_xtalk_rate(
    4696:	ae 01       	movw	r20, r28
    4698:	4f 5f       	subi	r20, 0xFF	; 255
    469a:	5f 4f       	sbci	r21, 0xFF	; 255
    469c:	9c df       	rcall	.-200    	; 0x45d6 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
    469e:	81 11       	cpse	r24, r1
    46a0:	11 c0       	rjmp	.+34     	; 0x46c4 <VL53L0X_get_total_signal_rate+0x5c>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
    46a2:	f8 01       	movw	r30, r16
    46a4:	c0 80       	ld	r12, Z
    46a6:	d1 80       	ldd	r13, Z+1	; 0x01
    46a8:	e2 80       	ldd	r14, Z+2	; 0x02
    46aa:	f3 80       	ldd	r15, Z+3	; 0x03
    46ac:	49 81       	ldd	r20, Y+1	; 0x01
    46ae:	5a 81       	ldd	r21, Y+2	; 0x02
    46b0:	6b 81       	ldd	r22, Y+3	; 0x03
    46b2:	7c 81       	ldd	r23, Y+4	; 0x04
    46b4:	4c 0d       	add	r20, r12
    46b6:	5d 1d       	adc	r21, r13
    46b8:	6e 1d       	adc	r22, r14
    46ba:	7f 1d       	adc	r23, r15
    46bc:	40 83       	st	Z, r20
    46be:	51 83       	std	Z+1, r21	; 0x01
    46c0:	62 83       	std	Z+2, r22	; 0x02
    46c2:	73 83       	std	Z+3, r23	; 0x03

	return Status;
}
    46c4:	0f 90       	pop	r0
    46c6:	0f 90       	pop	r0
    46c8:	0f 90       	pop	r0
    46ca:	0f 90       	pop	r0
    46cc:	df 91       	pop	r29
    46ce:	cf 91       	pop	r28
    46d0:	1f 91       	pop	r17
    46d2:	0f 91       	pop	r16
    46d4:	ff 90       	pop	r15
    46d6:	ef 90       	pop	r14
    46d8:	df 90       	pop	r13
    46da:	cf 90       	pop	r12
    46dc:	08 95       	ret

000046de <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
    46de:	4f 92       	push	r4
    46e0:	5f 92       	push	r5
    46e2:	6f 92       	push	r6
    46e4:	7f 92       	push	r7
    46e6:	8f 92       	push	r8
    46e8:	9f 92       	push	r9
    46ea:	af 92       	push	r10
    46ec:	bf 92       	push	r11
    46ee:	cf 92       	push	r12
    46f0:	df 92       	push	r13
    46f2:	ef 92       	push	r14
    46f4:	ff 92       	push	r15
    46f6:	0f 93       	push	r16
    46f8:	1f 93       	push	r17
    46fa:	cf 93       	push	r28
    46fc:	df 93       	push	r29
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
    4702:	64 97       	sbiw	r28, 0x14	; 20
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	49 87       	std	Y+9, r20	; 0x09
    4710:	5a 87       	std	Y+10, r21	; 0x0a
    4712:	6b 87       	std	Y+11, r22	; 0x0b
    4714:	7c 87       	std	Y+12, r23	; 0x0c
    4716:	09 83       	std	Y+1, r16	; 0x01
    4718:	1a 83       	std	Y+2, r17	; 0x02
    471a:	2b 83       	std	Y+3, r18	; 0x03
    471c:	3c 83       	std	Y+4, r19	; 0x04
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
    471e:	fc 01       	movw	r30, r24
    4720:	e5 5c       	subi	r30, 0xC5	; 197
    4722:	fe 4f       	sbci	r31, 0xFE	; 254

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
    4724:	20 81       	ld	r18, Z
    4726:	31 81       	ldd	r19, Z+1	; 0x01
    4728:	29 01       	movw	r4, r18
    472a:	61 2c       	mov	r6, r1
    472c:	71 2c       	mov	r7, r1
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);

	dmaxCalSignalRateRtn_mcps =
    472e:	32 96       	adiw	r30, 0x02	; 2

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
    4730:	60 81       	ld	r22, Z
    4732:	71 81       	ldd	r23, Z+1	; 0x01
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	a3 01       	movw	r20, r6
    473a:	92 01       	movw	r18, r4
    473c:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__mulsi3>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	80 58       	subi	r24, 0x80	; 128
    4746:	9f 4f       	sbci	r25, 0xFF	; 255
    4748:	af 4f       	sbci	r26, 0xFF	; 255
    474a:	bf 4f       	sbci	r27, 0xFF	; 255
    474c:	69 2f       	mov	r22, r25
    474e:	7a 2f       	mov	r23, r26
    4750:	8b 2f       	mov	r24, r27
    4752:	99 27       	eor	r25, r25
	SignalAt0mm *= dmaxCalRange_mm;
    4754:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__mulsi3>
    4758:	6d 87       	std	Y+13, r22	; 0x0d
    475a:	7e 87       	std	Y+14, r23	; 0x0e
    475c:	8f 87       	std	Y+15, r24	; 0x0f
    475e:	98 8b       	std	Y+16, r25	; 0x10

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
    4760:	29 81       	ldd	r18, Y+1	; 0x01
    4762:	3a 81       	ldd	r19, Y+2	; 0x02
    4764:	4b 81       	ldd	r20, Y+3	; 0x03
    4766:	5c 81       	ldd	r21, Y+4	; 0x04
    4768:	21 15       	cp	r18, r1
    476a:	31 05       	cpc	r19, r1
    476c:	41 05       	cpc	r20, r1
    476e:	51 05       	cpc	r21, r1
    4770:	c1 f1       	breq	.+112    	; 0x47e2 <VL53L0X_calc_dmax+0x104>
		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
    4772:	49 84       	ldd	r4, Y+9	; 0x09
    4774:	5a 84       	ldd	r5, Y+10	; 0x0a
    4776:	6b 84       	ldd	r6, Y+11	; 0x0b
    4778:	7c 84       	ldd	r7, Y+12	; 0x0c
    477a:	03 2e       	mov	r0, r19
    477c:	3a e0       	ldi	r19, 0x0A	; 10
    477e:	44 0c       	add	r4, r4
    4780:	55 1c       	adc	r5, r5
    4782:	66 1c       	adc	r6, r6
    4784:	77 1c       	adc	r7, r7
    4786:	3a 95       	dec	r19
    4788:	d1 f7       	brne	.-12     	; 0x477e <VL53L0X_calc_dmax+0xa0>
    478a:	30 2d       	mov	r19, r0
    478c:	da 01       	movw	r26, r20
    478e:	c9 01       	movw	r24, r18
    4790:	b6 95       	lsr	r27
    4792:	a7 95       	ror	r26
    4794:	97 95       	ror	r25
    4796:	87 95       	ror	r24
    4798:	bc 01       	movw	r22, r24
    479a:	cd 01       	movw	r24, r26
    479c:	64 0d       	add	r22, r4
    479e:	75 1d       	adc	r23, r5
    47a0:	86 1d       	adc	r24, r6
    47a2:	97 1d       	adc	r25, r7
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
    47a4:	0e 94 49 2c 	call	0x5892	; 0x5892 <__udivmodsi4>

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
    47a8:	da 01       	movw	r26, r20
    47aa:	c9 01       	movw	r24, r18
    47ac:	88 0f       	add	r24, r24
    47ae:	99 1f       	adc	r25, r25
    47b0:	aa 1f       	adc	r26, r26
    47b2:	bb 1f       	adc	r27, r27
    47b4:	bc 01       	movw	r22, r24
    47b6:	cd 01       	movw	r24, r26
    47b8:	62 0f       	add	r22, r18
    47ba:	73 1f       	adc	r23, r19
    47bc:	84 1f       	adc	r24, r20
    47be:	95 1f       	adc	r25, r21

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
    47c0:	9b 01       	movw	r18, r22
    47c2:	ac 01       	movw	r20, r24
    47c4:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__mulsi3>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	90 58       	subi	r25, 0x80	; 128
    47ce:	af 4f       	sbci	r26, 0xFF	; 255
    47d0:	bf 4f       	sbci	r27, 0xFF	; 255
    47d2:	9d 01       	movw	r18, r26
    47d4:	44 27       	eor	r20, r20
    47d6:	55 27       	eor	r21, r21
    47d8:	29 87       	std	Y+9, r18	; 0x09
    47da:	3a 87       	std	Y+10, r19	; 0x0a
    47dc:	4b 87       	std	Y+11, r20	; 0x0b
    47de:	5c 87       	std	Y+12, r21	; 0x0c
    47e0:	04 c0       	rjmp	.+8      	; 0x47ea <VL53L0X_calc_dmax+0x10c>

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
	SignalAt0mm *= dmaxCalRange_mm;

	minSignalNeeded_p1 = 0;
    47e2:	19 86       	std	Y+9, r1	; 0x09
    47e4:	1a 86       	std	Y+10, r1	; 0x0a
    47e6:	1b 86       	std	Y+11, r1	; 0x0b
    47e8:	1c 86       	std	Y+12, r1	; 0x0c
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
    47ea:	a7 01       	movw	r20, r14
    47ec:	96 01       	movw	r18, r12
    47ee:	c5 01       	movw	r24, r10
    47f0:	b4 01       	movw	r22, r8
    47f2:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__mulsi3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	90 58       	subi	r25, 0x80	; 128
    47fc:	af 4f       	sbci	r26, 0xFF	; 255
    47fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4800:	bd 01       	movw	r22, r26
    4802:	88 27       	eor	r24, r24
    4804:	99 27       	eor	r25, r25

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
    4806:	9b 01       	movw	r18, r22
    4808:	ac 01       	movw	r20, r24
    480a:	0e 94 3a 2c 	call	0x5874	; 0x5874 <__mulsi3>
    480e:	69 8b       	std	Y+17, r22	; 0x11
    4810:	7a 8b       	std	Y+18, r23	; 0x12
    4812:	8b 8b       	std	Y+19, r24	; 0x13
    4814:	9c 8b       	std	Y+20, r25	; 0x14
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
    4816:	8f a1       	ldd	r24, Y+39	; 0x27
    4818:	98 a5       	ldd	r25, Y+40	; 0x28
    481a:	a9 a5       	ldd	r26, Y+41	; 0x29
    481c:	ba a5       	ldd	r27, Y+42	; 0x2a
    481e:	90 58       	subi	r25, 0x80	; 128
    4820:	af 4f       	sbci	r26, 0xFF	; 255
    4822:	bf 4f       	sbci	r27, 0xFF	; 255
    4824:	cd 01       	movw	r24, r26
    4826:	aa 27       	eor	r26, r26
    4828:	bb 27       	eor	r27, r27
    482a:	bc 01       	movw	r22, r24
    482c:	cd 01       	movw	r24, r26
    482e:	6d 5f       	subi	r22, 0xFD	; 253
    4830:	7f 4f       	sbci	r23, 0xFF	; 255
    4832:	8f 4f       	sbci	r24, 0xFF	; 255
    4834:	9f 4f       	sbci	r25, 0xFF	; 255
    4836:	2b ea       	ldi	r18, 0xAB	; 171
    4838:	3a ea       	ldi	r19, 0xAA	; 170
    483a:	4a ea       	ldi	r20, 0xAA	; 170
    483c:	5a ea       	ldi	r21, 0xAA	; 170
    483e:	0e 94 84 2c 	call	0x5908	; 0x5908 <__umulsidi3>
    4842:	00 e2       	ldi	r16, 0x20	; 32
    4844:	0e 94 ad 2c 	call	0x595a	; 0x595a <__lshrdi3>
    4848:	82 2e       	mov	r8, r18
    484a:	93 2e       	mov	r9, r19
    484c:	a4 2e       	mov	r10, r20
    484e:	b5 2e       	mov	r11, r21
    4850:	b5 01       	movw	r22, r10
    4852:	a4 01       	movw	r20, r8
    4854:	76 95       	lsr	r23
    4856:	67 95       	ror	r22
    4858:	57 95       	ror	r21
    485a:	47 95       	ror	r20
    485c:	76 95       	lsr	r23
    485e:	67 95       	ror	r22
    4860:	57 95       	ror	r21
    4862:	47 95       	ror	r20
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
    4864:	db 01       	movw	r26, r22
    4866:	ca 01       	movw	r24, r20
    4868:	88 0f       	add	r24, r24
    486a:	99 1f       	adc	r25, r25
    486c:	aa 1f       	adc	r26, r26
    486e:	bb 1f       	adc	r27, r27
    4870:	88 0f       	add	r24, r24
    4872:	99 1f       	adc	r25, r25
    4874:	aa 1f       	adc	r26, r26
    4876:	bb 1f       	adc	r27, r27
    4878:	88 0f       	add	r24, r24
    487a:	99 1f       	adc	r25, r25
    487c:	aa 1f       	adc	r26, r26
    487e:	bb 1f       	adc	r27, r27
    4880:	84 1b       	sub	r24, r20
    4882:	95 0b       	sbc	r25, r21
    4884:	a6 0b       	sbc	r26, r22
    4886:	b7 0b       	sbc	r27, r23
    4888:	00 97       	sbiw	r24, 0x00	; 0
    488a:	a1 40       	sbci	r26, 0x01	; 1
    488c:	b1 05       	cpc	r27, r1
    488e:	08 f0       	brcs	.+2      	; 0x4892 <VL53L0X_calc_dmax+0x1b4>
    4890:	40 c0       	rjmp	.+128    	; 0x4912 <VL53L0X_calc_dmax+0x234>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
    4892:	6f a1       	ldd	r22, Y+39	; 0x27
    4894:	78 a5       	ldd	r23, Y+40	; 0x28
    4896:	89 a5       	ldd	r24, Y+41	; 0x29
    4898:	9a a5       	ldd	r25, Y+42	; 0x2a
    489a:	6d 5f       	subi	r22, 0xFD	; 253
    489c:	7f 4f       	sbci	r23, 0xFF	; 255
    489e:	8f 4f       	sbci	r24, 0xFF	; 255
    48a0:	9f 4f       	sbci	r25, 0xFF	; 255
    48a2:	2b ea       	ldi	r18, 0xAB	; 171
    48a4:	3a ea       	ldi	r19, 0xAA	; 170
    48a6:	4a ea       	ldi	r20, 0xAA	; 170
    48a8:	5a ea       	ldi	r21, 0xAA	; 170
    48aa:	0e 94 84 2c 	call	0x5908	; 0x5908 <__umulsidi3>
    48ae:	0e 94 ad 2c 	call	0x595a	; 0x595a <__lshrdi3>
    48b2:	29 83       	std	Y+1, r18	; 0x01
    48b4:	3a 83       	std	Y+2, r19	; 0x02
    48b6:	4b 83       	std	Y+3, r20	; 0x03
    48b8:	5c 83       	std	Y+4, r21	; 0x04
    48ba:	6d 83       	std	Y+5, r22	; 0x05
    48bc:	7e 83       	std	Y+6, r23	; 0x06
    48be:	8f 83       	std	Y+7, r24	; 0x07
    48c0:	98 87       	std	Y+8, r25	; 0x08
    48c2:	49 80       	ldd	r4, Y+1	; 0x01
    48c4:	5a 80       	ldd	r5, Y+2	; 0x02
    48c6:	6b 80       	ldd	r6, Y+3	; 0x03
    48c8:	7c 80       	ldd	r7, Y+4	; 0x04
    48ca:	76 94       	lsr	r7
    48cc:	67 94       	ror	r6
    48ce:	57 94       	ror	r5
    48d0:	47 94       	ror	r4
    48d2:	76 94       	lsr	r7
    48d4:	67 94       	ror	r6
    48d6:	57 94       	ror	r5
    48d8:	47 94       	ror	r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
    48da:	d3 01       	movw	r26, r6
    48dc:	c2 01       	movw	r24, r4
    48de:	88 0f       	add	r24, r24
    48e0:	99 1f       	adc	r25, r25
    48e2:	aa 1f       	adc	r26, r26
    48e4:	bb 1f       	adc	r27, r27
    48e6:	88 0f       	add	r24, r24
    48e8:	99 1f       	adc	r25, r25
    48ea:	aa 1f       	adc	r26, r26
    48ec:	bb 1f       	adc	r27, r27
    48ee:	88 0f       	add	r24, r24
    48f0:	99 1f       	adc	r25, r25
    48f2:	aa 1f       	adc	r26, r26
    48f4:	bb 1f       	adc	r27, r27
    48f6:	84 19       	sub	r24, r4
    48f8:	95 09       	sbc	r25, r5
    48fa:	a6 09       	sbc	r26, r6
    48fc:	b7 09       	sbc	r27, r7
    48fe:	90 58       	subi	r25, 0x80	; 128
    4900:	af 4f       	sbci	r26, 0xFF	; 255
    4902:	bf 4f       	sbci	r27, 0xFF	; 255
    4904:	bd 01       	movw	r22, r26
    4906:	88 27       	eor	r24, r24
    4908:	99 27       	eor	r25, r25

		minSignalNeeded_p3 *= minSignalNeeded_p3;
    490a:	9b 01       	movw	r18, r22
    490c:	ac 01       	movw	r20, r24
    490e:	b2 d7       	rcall	.+3940   	; 0x5874 <__mulsi3>
    4910:	04 c0       	rjmp	.+8      	; 0x491a <VL53L0X_calc_dmax+0x23c>
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
		minSignalNeeded_p3 = 0xfff00000;
    4912:	60 e0       	ldi	r22, 0x00	; 0
    4914:	70 e0       	ldi	r23, 0x00	; 0
    4916:	80 ef       	ldi	r24, 0xF0	; 240
    4918:	9f ef       	ldi	r25, 0xFF	; 255

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
    491a:	4b a4       	ldd	r4, Y+43	; 0x2b
    491c:	5c a4       	ldd	r5, Y+44	; 0x2c
    491e:	6d a4       	ldd	r6, Y+45	; 0x2d
    4920:	7e a4       	ldd	r7, Y+46	; 0x2e
    4922:	76 94       	lsr	r7
    4924:	67 94       	ror	r6
    4926:	57 94       	ror	r5
    4928:	47 94       	ror	r4
    492a:	c9 88       	ldd	r12, Y+17	; 0x11
    492c:	da 88       	ldd	r13, Y+18	; 0x12
    492e:	eb 88       	ldd	r14, Y+19	; 0x13
    4930:	fc 88       	ldd	r15, Y+20	; 0x14
    4932:	c4 0c       	add	r12, r4
    4934:	d5 1c       	adc	r13, r5
    4936:	e6 1c       	adc	r14, r6
    4938:	f7 1c       	adc	r15, r7
    493a:	6c 0d       	add	r22, r12
    493c:	7d 1d       	adc	r23, r13
    493e:	8e 1d       	adc	r24, r14
    4940:	9f 1d       	adc	r25, r15
	minSignalNeeded /= peakVcselDuration_us;
    4942:	2b a5       	ldd	r18, Y+43	; 0x2b
    4944:	3c a5       	ldd	r19, Y+44	; 0x2c
    4946:	4d a5       	ldd	r20, Y+45	; 0x2d
    4948:	5e a5       	ldd	r21, Y+46	; 0x2e
    494a:	a3 d7       	rcall	.+3910   	; 0x5892 <__udivmodsi4>

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
    494c:	da 01       	movw	r26, r20
    494e:	c9 01       	movw	r24, r18
    4950:	07 2e       	mov	r0, r23
    4952:	7e e0       	ldi	r23, 0x0E	; 14
    4954:	88 0f       	add	r24, r24
    4956:	99 1f       	adc	r25, r25
    4958:	aa 1f       	adc	r26, r26
    495a:	bb 1f       	adc	r27, r27
    495c:	7a 95       	dec	r23
    495e:	d1 f7       	brne	.-12     	; 0x4954 <VL53L0X_calc_dmax+0x276>
    4960:	70 2d       	mov	r23, r0

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
    4962:	bc 01       	movw	r22, r24
    4964:	cd 01       	movw	r24, r26
    4966:	61 58       	subi	r22, 0x81	; 129
    4968:	7f 4f       	sbci	r23, 0xFF	; 255
    496a:	8f 4f       	sbci	r24, 0xFF	; 255
    496c:	9f 4f       	sbci	r25, 0xFF	; 255
	minSignalNeeded /= minSignalNeeded_p4;
    496e:	2e ef       	ldi	r18, 0xFE	; 254
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	40 e0       	ldi	r20, 0x00	; 0
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	8d d7       	rcall	.+3866   	; 0x5892 <__udivmodsi4>
    4978:	ca 01       	movw	r24, r20
    497a:	b9 01       	movw	r22, r18
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    497c:	29 85       	ldd	r18, Y+9	; 0x09
    497e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4980:	4b 85       	ldd	r20, Y+11	; 0x0b
    4982:	5c 85       	ldd	r21, Y+12	; 0x0c
    4984:	77 d7       	rcall	.+3822   	; 0x5874 <__mulsi3>
    4986:	6c 50       	subi	r22, 0x0C	; 12
    4988:	7e 4f       	sbci	r23, 0xFE	; 254
    498a:	8f 4f       	sbci	r24, 0xFF	; 255
    498c:	9f 4f       	sbci	r25, 0xFF	; 255
    498e:	0f 2e       	mov	r0, r31
    4990:	f8 ee       	ldi	r31, 0xE8	; 232
    4992:	8f 2e       	mov	r8, r31
    4994:	f3 e0       	ldi	r31, 0x03	; 3
    4996:	9f 2e       	mov	r9, r31
    4998:	a1 2c       	mov	r10, r1
    499a:	b1 2c       	mov	r11, r1
    499c:	f0 2d       	mov	r31, r0
    499e:	a5 01       	movw	r20, r10
    49a0:	94 01       	movw	r18, r8
    49a2:	77 d7       	rcall	.+3822   	; 0x5892 <__udivmodsi4>
	minSignalNeeded <<= 4;

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    49a4:	69 01       	movw	r12, r18
    49a6:	7a 01       	movw	r14, r20
    49a8:	cc 0c       	add	r12, r12
    49aa:	dd 1c       	adc	r13, r13
    49ac:	ee 1c       	adc	r14, r14
    49ae:	ff 1c       	adc	r15, r15
    49b0:	cc 0c       	add	r12, r12
    49b2:	dd 1c       	adc	r13, r13
    49b4:	ee 1c       	adc	r14, r14
    49b6:	ff 1c       	adc	r15, r15
    49b8:	cc 0c       	add	r12, r12
    49ba:	dd 1c       	adc	r13, r13
    49bc:	ee 1c       	adc	r14, r14
    49be:	ff 1c       	adc	r15, r15
    49c0:	cc 0c       	add	r12, r12
    49c2:	dd 1c       	adc	r13, r13
    49c4:	ee 1c       	adc	r14, r14
    49c6:	ff 1c       	adc	r15, r15
    49c8:	44 ef       	ldi	r20, 0xF4	; 244
    49ca:	c4 0e       	add	r12, r20
    49cc:	41 e0       	ldi	r20, 0x01	; 1
    49ce:	d4 1e       	adc	r13, r20
    49d0:	e1 1c       	adc	r14, r1
    49d2:	f1 1c       	adc	r15, r1
    49d4:	c7 01       	movw	r24, r14
    49d6:	b6 01       	movw	r22, r12
    49d8:	a5 01       	movw	r20, r10
    49da:	94 01       	movw	r18, r8
    49dc:	5a d7       	rcall	.+3764   	; 0x5892 <__udivmodsi4>
    49de:	49 01       	movw	r8, r18
    49e0:	5a 01       	movw	r10, r20
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
    49e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e6:	af 85       	ldd	r26, Y+15	; 0x0f
    49e8:	b8 89       	ldd	r27, Y+16	; 0x10
    49ea:	80 96       	adiw	r24, 0x20	; 32
    49ec:	a1 1d       	adc	r26, r1
    49ee:	b1 1d       	adc	r27, r1
    49f0:	bc 01       	movw	r22, r24
    49f2:	cd 01       	movw	r24, r26
    49f4:	68 94       	set
    49f6:	15 f8       	bld	r1, 5
    49f8:	96 95       	lsr	r25
    49fa:	87 95       	ror	r24
    49fc:	77 95       	ror	r23
    49fe:	67 95       	ror	r22
    4a00:	16 94       	lsr	r1
    4a02:	d1 f7       	brne	.-12     	; 0x49f8 <VL53L0X_calc_dmax+0x31a>
    4a04:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>
    4a08:	2b 01       	movw	r4, r22
    4a0a:	3c 01       	movw	r6, r24

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
    4a0c:	81 14       	cp	r8, r1
    4a0e:	91 04       	cpc	r9, r1
    4a10:	a1 04       	cpc	r10, r1
    4a12:	b1 04       	cpc	r11, r1
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
    4a14:	a9 f0       	breq	.+42     	; 0x4a40 <VL53L0X_calc_dmax+0x362>
    4a16:	c7 01       	movw	r24, r14
    4a18:	b6 01       	movw	r22, r12
    4a1a:	20 ed       	ldi	r18, 0xD0	; 208
    4a1c:	37 e0       	ldi	r19, 0x07	; 7
    4a1e:	40 e0       	ldi	r20, 0x00	; 0
    4a20:	50 e0       	ldi	r21, 0x00	; 0
    4a22:	37 d7       	rcall	.+3694   	; 0x5892 <__udivmodsi4>
    4a24:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a26:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a2a:	98 89       	ldd	r25, Y+16	; 0x10
    4a2c:	62 0f       	add	r22, r18
    4a2e:	73 1f       	adc	r23, r19
    4a30:	84 1f       	adc	r24, r20
    4a32:	95 1f       	adc	r25, r21
    4a34:	a5 01       	movw	r20, r10
    4a36:	94 01       	movw	r18, r8
    4a38:	2c d7       	rcall	.+3672   	; 0x5892 <__udivmodsi4>
    4a3a:	ca 01       	movw	r24, r20
    4a3c:	b9 01       	movw	r22, r18
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
    4a3e:	03 c0       	rjmp	.+6      	; 0x4a46 <VL53L0X_calc_dmax+0x368>
    4a40:	60 e0       	ldi	r22, 0x00	; 0
    4a42:	70 e0       	ldi	r23, 0x00	; 0

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
    4a44:	cb 01       	movw	r24, r22
    4a46:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
    4a4a:	64 15       	cp	r22, r4
    4a4c:	75 05       	cpc	r23, r5
    4a4e:	86 05       	cpc	r24, r6
    4a50:	97 05       	cpc	r25, r7
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);

	*pdmax_mm = dmaxDark;
    4a52:	40 f0       	brcs	.+16     	; 0x4a64 <VL53L0X_calc_dmax+0x386>
    4a54:	af a5       	ldd	r26, Y+47	; 0x2f
    4a56:	b8 a9       	ldd	r27, Y+48	; 0x30
    4a58:	4d 92       	st	X+, r4
    4a5a:	5d 92       	st	X+, r5
    4a5c:	6d 92       	st	X+, r6
    4a5e:	7c 92       	st	X, r7
    4a60:	13 97       	sbiw	r26, 0x03	; 3
	if (dmaxDark > dmaxAmbient)
		*pdmax_mm = dmaxAmbient;
    4a62:	06 c0       	rjmp	.+12     	; 0x4a70 <VL53L0X_calc_dmax+0x392>
    4a64:	ef a5       	ldd	r30, Y+47	; 0x2f
    4a66:	f8 a9       	ldd	r31, Y+48	; 0x30
    4a68:	60 83       	st	Z, r22
    4a6a:	71 83       	std	Z+1, r23	; 0x01
    4a6c:	82 83       	std	Z+2, r24	; 0x02

	LOG_FUNCTION_END(Status);

	return Status;
}
    4a6e:	93 83       	std	Z+3, r25	; 0x03
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	64 96       	adiw	r28, 0x14	; 20
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	df 91       	pop	r29
    4a80:	cf 91       	pop	r28
    4a82:	1f 91       	pop	r17
    4a84:	0f 91       	pop	r16
    4a86:	ff 90       	pop	r15
    4a88:	ef 90       	pop	r14
    4a8a:	df 90       	pop	r13
    4a8c:	cf 90       	pop	r12
    4a8e:	bf 90       	pop	r11
    4a90:	af 90       	pop	r10
    4a92:	9f 90       	pop	r9
    4a94:	8f 90       	pop	r8
    4a96:	7f 90       	pop	r7
    4a98:	6f 90       	pop	r6
    4a9a:	5f 90       	pop	r5
    4a9c:	4f 90       	pop	r4
    4a9e:	08 95       	ret

00004aa0 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
    4aa0:	2f 92       	push	r2
    4aa2:	3f 92       	push	r3
    4aa4:	4f 92       	push	r4
    4aa6:	5f 92       	push	r5
    4aa8:	6f 92       	push	r6
    4aaa:	7f 92       	push	r7
    4aac:	8f 92       	push	r8
    4aae:	9f 92       	push	r9
    4ab0:	af 92       	push	r10
    4ab2:	bf 92       	push	r11
    4ab4:	cf 92       	push	r12
    4ab6:	df 92       	push	r13
    4ab8:	ef 92       	push	r14
    4aba:	ff 92       	push	r15
    4abc:	0f 93       	push	r16
    4abe:	1f 93       	push	r17
    4ac0:	cf 93       	push	r28
    4ac2:	df 93       	push	r29
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
    4ac8:	a9 97       	sbiw	r28, 0x29	; 41
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	1c 01       	movw	r2, r24
    4ad6:	7a 87       	std	Y+10, r23	; 0x0a
    4ad8:	69 87       	std	Y+9, r22	; 0x09
    4ada:	58 a3       	std	Y+32, r21	; 0x20
    4adc:	4f 8f       	std	Y+31, r20	; 0x1f
    4ade:	3a 8f       	std	Y+26, r19	; 0x1a
    4ae0:	29 8f       	std	Y+25, r18	; 0x19
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
    4ae2:	fc 01       	movw	r30, r24
    4ae4:	85 8d       	ldd	r24, Z+29	; 0x1d
    4ae6:	96 8d       	ldd	r25, Z+30	; 0x1e
    4ae8:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4aea:	b0 a1       	ldd	r27, Z+32	; 0x20
    4aec:	89 83       	std	Y+1, r24	; 0x01
    4aee:	9a 83       	std	Y+2, r25	; 0x02
    4af0:	ab 83       	std	Y+3, r26	; 0x03
    4af2:	bc 83       	std	Y+4, r27	; 0x04
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
    4af4:	db 01       	movw	r26, r22
    4af6:	50 96       	adiw	r26, 0x10	; 16
    4af8:	2d 91       	ld	r18, X+
    4afa:	3d 91       	ld	r19, X+
    4afc:	4d 91       	ld	r20, X+
    4afe:	5c 91       	ld	r21, X
    4b00:	53 97       	sbiw	r26, 0x13	; 19
    4b02:	29 8b       	std	Y+17, r18	; 0x11
    4b04:	3a 8b       	std	Y+18, r19	; 0x12
    4b06:	4b 8b       	std	Y+19, r20	; 0x13
    4b08:	5c 8b       	std	Y+20, r21	; 0x14

	correctedSignalRate_mcps =
    4b0a:	1c 96       	adiw	r26, 0x0c	; 12
    4b0c:	2d 91       	ld	r18, X+
    4b0e:	3d 91       	ld	r19, X+
    4b10:	4d 91       	ld	r20, X+
    4b12:	5c 91       	ld	r21, X
    4b14:	1f 97       	sbiw	r26, 0x0f	; 15
    4b16:	2d a3       	std	Y+37, r18	; 0x25
    4b18:	3e a3       	std	Y+38, r19	; 0x26
    4b1a:	4f a3       	std	Y+39, r20	; 0x27
    4b1c:	58 a7       	std	Y+40, r21	; 0x28
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
    4b1e:	ae 01       	movw	r20, r28
    4b20:	4b 5f       	subi	r20, 0xFB	; 251
    4b22:	5f 4f       	sbci	r21, 0xFF	; 255
    4b24:	c1 01       	movw	r24, r2
    4b26:	a0 dd       	rcall	.-1216   	; 0x4668 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
    4b28:	ae 01       	movw	r20, r28
    4b2a:	4f 5f       	subi	r20, 0xFF	; 255
    4b2c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b2e:	69 85       	ldd	r22, Y+9	; 0x09
    4b30:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b32:	c1 01       	movw	r24, r2
    4b34:	50 dd       	rcall	.-1376   	; 0x45d6 <VL53L0X_get_total_xtalk_rate>
    4b36:	18 2f       	mov	r17, r24
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
    4b38:	81 11       	cpse	r24, r1
    4b3a:	4f c2       	rjmp	.+1182   	; 0x4fda <VL53L0X_calc_sigma_estimate+0x53a>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4b3c:	f1 01       	movw	r30, r2
    4b3e:	ed 52       	subi	r30, 0x2D	; 45
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	00 81       	ld	r16, Z
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4b44:	34 97       	sbiw	r30, 0x04	; 4
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    4b46:	40 81       	ld	r20, Z
    4b48:	51 81       	ldd	r21, Z+1	; 0x01
    4b4a:	62 81       	ldd	r22, Z+2	; 0x02
    4b4c:	73 81       	ldd	r23, Z+3	; 0x03
    4b4e:	20 2f       	mov	r18, r16
    4b50:	c1 01       	movw	r24, r2
    4b52:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    4b56:	2b 01       	movw	r4, r22
    4b58:	3c 01       	movw	r6, r24
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4b5a:	f1 01       	movw	r30, r2
    4b5c:	ec 52       	subi	r30, 0x2C	; 44
    4b5e:	ff 4f       	sbci	r31, 0xFF	; 255
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    4b60:	40 81       	ld	r20, Z
    4b62:	51 81       	ldd	r21, Z+1	; 0x01
    4b64:	62 81       	ldd	r22, Z+2	; 0x02
    4b66:	73 81       	ldd	r23, Z+3	; 0x03
    4b68:	34 96       	adiw	r30, 0x04	; 4
    4b6a:	20 81       	ld	r18, Z
    4b6c:	c1 01       	movw	r24, r2
    4b6e:	0e 94 a4 1d 	call	0x3b48	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    4b72:	4b 01       	movw	r8, r22
    4b74:	5c 01       	movw	r10, r24
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
    4b76:	08 30       	cpi	r16, 0x08	; 8
    4b78:	49 f4       	brne	.+18     	; 0x4b8c <VL53L0X_calc_sigma_estimate+0xec>
			vcselWidth = 2;
    4b7a:	22 e0       	ldi	r18, 0x02	; 2
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	40 e0       	ldi	r20, 0x00	; 0
    4b80:	50 e0       	ldi	r21, 0x00	; 0
    4b82:	2d 8b       	std	Y+21, r18	; 0x15
    4b84:	3e 8b       	std	Y+22, r19	; 0x16
    4b86:	4f 8b       	std	Y+23, r20	; 0x17
    4b88:	58 8f       	std	Y+24, r21	; 0x18
    4b8a:	08 c0       	rjmp	.+16     	; 0x4b9c <VL53L0X_calc_sigma_estimate+0xfc>
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
    4b8c:	83 e0       	ldi	r24, 0x03	; 3
    4b8e:	90 e0       	ldi	r25, 0x00	; 0
    4b90:	a0 e0       	ldi	r26, 0x00	; 0
    4b92:	b0 e0       	ldi	r27, 0x00	; 0
    4b94:	8d 8b       	std	Y+21, r24	; 0x15
    4b96:	9e 8b       	std	Y+22, r25	; 0x16
    4b98:	af 8b       	std	Y+23, r26	; 0x17
    4b9a:	b8 8f       	std	Y+24, r27	; 0x18


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
    4b9c:	cd 80       	ldd	r12, Y+5	; 0x05
    4b9e:	de 80       	ldd	r13, Y+6	; 0x06
    4ba0:	ef 80       	ldd	r14, Y+7	; 0x07
    4ba2:	f8 84       	ldd	r15, Y+8	; 0x08
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
    4ba4:	a8 ee       	ldi	r26, 0xE8	; 232
    4ba6:	b3 e0       	ldi	r27, 0x03	; 3
    4ba8:	a7 01       	movw	r20, r14
    4baa:	96 01       	movw	r18, r12
    4bac:	a3 d6       	rcall	.+3398   	; 0x58f4 <__muluhisi3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	90 58       	subi	r25, 0x80	; 128
    4bb4:	af 4f       	sbci	r26, 0xFF	; 255
    4bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb8:	9d 01       	movw	r18, r26
    4bba:	44 27       	eor	r20, r20
    4bbc:	55 27       	eor	r21, r21
    4bbe:	2d 87       	std	Y+13, r18	; 0x0d
    4bc0:	3e 87       	std	Y+14, r19	; 0x0e
    4bc2:	4f 87       	std	Y+15, r20	; 0x0f
    4bc4:	58 8b       	std	Y+16, r21	; 0x10

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
    4bc6:	89 81       	ldd	r24, Y+1	; 0x01
    4bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bca:	ab 81       	ldd	r26, Y+3	; 0x03
    4bcc:	bc 81       	ldd	r27, Y+4	; 0x04
    4bce:	8b 8f       	std	Y+27, r24	; 0x1b
    4bd0:	9c 8f       	std	Y+28, r25	; 0x1c
    4bd2:	ad 8f       	std	Y+29, r26	; 0x1d
    4bd4:	be 8f       	std	Y+30, r27	; 0x1e
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
    4bd6:	90 e8       	ldi	r25, 0x80	; 128
    4bd8:	c9 0e       	add	r12, r25
    4bda:	d1 1c       	adc	r13, r1
    4bdc:	e1 1c       	adc	r14, r1
    4bde:	f1 1c       	adc	r15, r1
    4be0:	cd 2c       	mov	r12, r13
    4be2:	de 2c       	mov	r13, r14
    4be4:	ef 2c       	mov	r14, r15
    4be6:	ff 24       	eor	r15, r15

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
    4be8:	5e 2d       	mov	r21, r14
    4bea:	4d 2d       	mov	r20, r13
    4bec:	3c 2d       	mov	r19, r12
    4bee:	22 27       	eor	r18, r18
    4bf0:	29 a3       	std	Y+33, r18	; 0x21
    4bf2:	3a a3       	std	Y+34, r19	; 0x22
    4bf4:	4b a3       	std	Y+35, r20	; 0x23
    4bf6:	5c a3       	std	Y+36, r21	; 0x24
    4bf8:	2d 83       	std	Y+5, r18	; 0x05
    4bfa:	3e 83       	std	Y+6, r19	; 0x06
    4bfc:	4f 83       	std	Y+7, r20	; 0x07
    4bfe:	58 87       	std	Y+8, r21	; 0x08
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
    4c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c04:	af 85       	ldd	r26, Y+15	; 0x0f
    4c06:	b8 89       	ldd	r27, Y+16	; 0x10
    4c08:	89 2b       	or	r24, r25
    4c0a:	8a 2b       	or	r24, r26
    4c0c:	8b 2b       	or	r24, r27
    4c0e:	c9 f4       	brne	.+50     	; 0x4c42 <VL53L0X_calc_sigma_estimate+0x1a2>
		*pSigmaEstimate = cSigmaEstMax;
    4c10:	8e ea       	ldi	r24, 0xAE	; 174
    4c12:	97 e8       	ldi	r25, 0x87	; 135
    4c14:	af e8       	ldi	r26, 0x8F	; 143
    4c16:	b2 e0       	ldi	r27, 0x02	; 2
    4c18:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4c1a:	f8 a1       	ldd	r31, Y+32	; 0x20
    4c1c:	80 83       	st	Z, r24
    4c1e:	91 83       	std	Z+1, r25	; 0x01
    4c20:	a2 83       	std	Z+2, r26	; 0x02
    4c22:	b3 83       	std	Z+3, r27	; 0x03
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
    4c24:	f1 01       	movw	r30, r2
    4c26:	e6 5d       	subi	r30, 0xD6	; 214
    4c28:	fe 4f       	sbci	r31, 0xFE	; 254
    4c2a:	80 83       	st	Z, r24
    4c2c:	91 83       	std	Z+1, r25	; 0x01
    4c2e:	a2 83       	std	Z+2, r26	; 0x02
    4c30:	b3 83       	std	Z+3, r27	; 0x03
		*pDmax_mm = 0;
    4c32:	a9 8d       	ldd	r26, Y+25	; 0x19
    4c34:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4c36:	1d 92       	st	X+, r1
    4c38:	1d 92       	st	X+, r1
    4c3a:	1d 92       	st	X+, r1
    4c3c:	1c 92       	st	X, r1
    4c3e:	13 97       	sbiw	r26, 0x03	; 3
    4c40:	cc c1       	rjmp	.+920    	; 0x4fda <VL53L0X_calc_sigma_estimate+0x53a>
			vcselWidth = 2;


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    4c42:	84 0c       	add	r8, r4
    4c44:	95 1c       	adc	r9, r5
    4c46:	a6 1c       	adc	r10, r6
    4c48:	b7 1c       	adc	r11, r7
    4c4a:	a5 01       	movw	r20, r10
    4c4c:	94 01       	movw	r18, r8
    4c4e:	01 2e       	mov	r0, r17
    4c50:	1b e0       	ldi	r17, 0x0B	; 11
    4c52:	22 0f       	add	r18, r18
    4c54:	33 1f       	adc	r19, r19
    4c56:	44 1f       	adc	r20, r20
    4c58:	55 1f       	adc	r21, r21
    4c5a:	1a 95       	dec	r17
    4c5c:	d1 f7       	brne	.-12     	; 0x4c52 <VL53L0X_calc_sigma_estimate+0x1b2>
    4c5e:	10 2d       	mov	r17, r0
    4c60:	6d 89       	ldd	r22, Y+21	; 0x15
    4c62:	7e 89       	ldd	r23, Y+22	; 0x16
    4c64:	8f 89       	ldd	r24, Y+23	; 0x17
    4c66:	98 8d       	ldd	r25, Y+24	; 0x18
    4c68:	05 d6       	rcall	.+3082   	; 0x5874 <__mulsi3>
    4c6a:	6c 50       	subi	r22, 0x0C	; 12
    4c6c:	7e 4f       	sbci	r23, 0xFE	; 254
    4c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c70:	9f 4f       	sbci	r25, 0xFF	; 255
    4c72:	0f 2e       	mov	r0, r31
    4c74:	f8 ee       	ldi	r31, 0xE8	; 232
    4c76:	8f 2e       	mov	r8, r31
    4c78:	f3 e0       	ldi	r31, 0x03	; 3
    4c7a:	9f 2e       	mov	r9, r31
    4c7c:	a1 2c       	mov	r10, r1
    4c7e:	b1 2c       	mov	r11, r1
    4c80:	f0 2d       	mov	r31, r0
    4c82:	a5 01       	movw	r20, r10
    4c84:	94 01       	movw	r18, r8
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    4c86:	05 d6       	rcall	.+3082   	; 0x5892 <__udivmodsi4>
    4c88:	a7 e7       	ldi	r26, 0x77	; 119
    4c8a:	b6 e0       	ldi	r27, 0x06	; 6
    4c8c:	33 d6       	rcall	.+3174   	; 0x58f4 <__muluhisi3>
    4c8e:	6c 50       	subi	r22, 0x0C	; 12
    4c90:	7e 4f       	sbci	r23, 0xFE	; 254
    4c92:	8f 4f       	sbci	r24, 0xFF	; 255
    4c94:	9f 4f       	sbci	r25, 0xFF	; 255
    4c96:	a5 01       	movw	r20, r10
    4c98:	94 01       	movw	r18, r8
    4c9a:	fb d5       	rcall	.+3062   	; 0x5892 <__udivmodsi4>
    4c9c:	2d 8b       	std	Y+21, r18	; 0x15
    4c9e:	39 a7       	std	Y+41, r19	; 0x29
    4ca0:	04 2f       	mov	r16, r20
		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
    4ca2:	15 2f       	mov	r17, r21
    4ca4:	c7 01       	movw	r24, r14
    4ca6:	b6 01       	movw	r22, r12
    4ca8:	e5 d5       	rcall	.+3018   	; 0x5874 <__mulsi3>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	80 58       	subi	r24, 0x80	; 128
    4cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb2:	af 4f       	sbci	r26, 0xFF	; 255
    4cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb6:	49 2e       	mov	r4, r25
    4cb8:	5a 2e       	mov	r5, r26
    4cba:	6b 2e       	mov	r6, r27
    4cbc:	77 24       	eor	r7, r7
	if (peakSignalRate_kcps == 0) {
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
	} else {
		if (vcselTotalEventsRtn < 1)
    4cbe:	41 14       	cp	r4, r1
    4cc0:	51 04       	cpc	r5, r1
    4cc2:	61 04       	cpc	r6, r1
    4cc4:	71 04       	cpc	r7, r1
    4cc6:	21 f4       	brne	.+8      	; 0x4cd0 <VL53L0X_calc_sigma_estimate+0x230>
			vcselTotalEventsRtn = 1;
    4cc8:	41 2c       	mov	r4, r1
    4cca:	51 2c       	mov	r5, r1
    4ccc:	32 01       	movw	r6, r4
    4cce:	43 94       	inc	r4
    4cd0:	a8 ee       	ldi	r26, 0xE8	; 232
    4cd2:	b3 e0       	ldi	r27, 0x03	; 3
    4cd4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4cd6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4cd8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4cda:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4cdc:	0b d6       	rcall	.+3094   	; 0x58f4 <__muluhisi3>
    4cde:	4b 01       	movw	r8, r22
    4ce0:	5c 01       	movw	r10, r24
    4ce2:	61 30       	cpi	r22, 0x01	; 1
    4ce4:	71 05       	cpc	r23, r1
    4ce6:	82 43       	sbci	r24, 0x32	; 50
    4ce8:	91 05       	cpc	r25, r1
    4cea:	38 f0       	brcs	.+14     	; 0x4cfa <VL53L0X_calc_sigma_estimate+0x25a>
    4cec:	0f 2e       	mov	r0, r31
    4cee:	81 2c       	mov	r8, r1
    4cf0:	91 2c       	mov	r9, r1
    4cf2:	f2 e3       	ldi	r31, 0x32	; 50
    4cf4:	af 2e       	mov	r10, r31
    4cf6:	b1 2c       	mov	r11, r1
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
    4cf8:	f0 2d       	mov	r31, r0
    4cfa:	a8 ee       	ldi	r26, 0xE8	; 232
    4cfc:	b3 e0       	ldi	r27, 0x03	; 3
    4cfe:	29 89       	ldd	r18, Y+17	; 0x11
    4d00:	3a 89       	ldd	r19, Y+18	; 0x12
    4d02:	4b 89       	ldd	r20, Y+19	; 0x13
    4d04:	5c 89       	ldd	r21, Y+20	; 0x14
    4d06:	f6 d5       	rcall	.+3052   	; 0x58f4 <__muluhisi3>
    4d08:	66 27       	eor	r22, r22
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
    4d0a:	77 27       	eor	r23, r23
    4d0c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d0e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d10:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d12:	58 89       	ldd	r21, Y+16	; 0x10
    4d14:	be d5       	rcall	.+2940   	; 0x5892 <__udivmodsi4>
    4d16:	27 36       	cpi	r18, 0x67	; 103
    4d18:	e6 e6       	ldi	r30, 0x66	; 102
    4d1a:	3e 07       	cpc	r19, r30
    4d1c:	4e 07       	cpc	r20, r30
    4d1e:	51 05       	cpc	r21, r1
    4d20:	20 f0       	brcs	.+8      	; 0x4d2a <VL53L0X_calc_sigma_estimate+0x28a>
    4d22:	26 e6       	ldi	r18, 0x66	; 102
    4d24:	36 e6       	ldi	r19, 0x66	; 102
    4d26:	46 e6       	ldi	r20, 0x66	; 102
    4d28:	50 e0       	ldi	r21, 0x00	; 0
    4d2a:	a8 e5       	ldi	r26, 0x58	; 88
    4d2c:	b2 e0       	ldi	r27, 0x02	; 2
    4d2e:	e2 d5       	rcall	.+3012   	; 0x58f4 <__muluhisi3>
    4d30:	69 8b       	std	Y+17, r22	; 0x11
    4d32:	7a 8b       	std	Y+18, r23	; 0x12
    4d34:	8b 8b       	std	Y+19, r24	; 0x13
    4d36:	9c 8b       	std	Y+20, r25	; 0x14

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
    4d38:	d3 01       	movw	r26, r6
    4d3a:	c2 01       	movw	r24, r4
    4d3c:	88 0f       	add	r24, r24
    4d3e:	99 1f       	adc	r25, r25
    4d40:	aa 1f       	adc	r26, r26
    4d42:	bb 1f       	adc	r27, r27
    4d44:	84 0d       	add	r24, r4
    4d46:	95 1d       	adc	r25, r5
    4d48:	a6 1d       	adc	r26, r6
    4d4a:	b7 1d       	adc	r27, r7
    4d4c:	bc 01       	movw	r22, r24
    4d4e:	cd 01       	movw	r24, r26
    4d50:	66 0f       	add	r22, r22
    4d52:	77 1f       	adc	r23, r23
    4d54:	88 1f       	adc	r24, r24
    4d56:	99 1f       	adc	r25, r25
    4d58:	66 0f       	add	r22, r22
    4d5a:	77 1f       	adc	r23, r23
    4d5c:	88 1f       	adc	r24, r24
    4d5e:	99 1f       	adc	r25, r25
    4d60:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>
    4d64:	6b 8f       	std	Y+27, r22	; 0x1b
    4d66:	7c 8f       	std	Y+28, r23	; 0x1c
    4d68:	8d 8f       	std	Y+29, r24	; 0x1d
    4d6a:	9e 8f       	std	Y+30, r25	; 0x1e
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
    4d6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d70:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d72:	58 89       	ldd	r21, Y+16	; 0x10
    4d74:	79 01       	movw	r14, r18
    4d76:	dd 24       	eor	r13, r13
    4d78:	cc 24       	eor	r12, r12
    4d7a:	d7 01       	movw	r26, r14
    4d7c:	c6 01       	movw	r24, r12
    4d7e:	88 19       	sub	r24, r8
    4d80:	99 09       	sbc	r25, r9
    4d82:	aa 09       	sbc	r26, r10
    4d84:	bb 09       	sbc	r27, r11
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	6c 50       	subi	r22, 0x0C	; 12
    4d8c:	7e 4f       	sbci	r23, 0xFE	; 254
    4d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d90:	9f 4f       	sbci	r25, 0xFF	; 255
    4d92:	28 ee       	ldi	r18, 0xE8	; 232
    4d94:	33 e0       	ldi	r19, 0x03	; 3
    4d96:	40 e0       	ldi	r20, 0x00	; 0
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	7b d5       	rcall	.+2806   	; 0x5892 <__udivmodsi4>
		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
    4d9c:	b4 2f       	mov	r27, r20
    4d9e:	a3 2f       	mov	r26, r19
    4da0:	92 2f       	mov	r25, r18
    4da2:	88 27       	eor	r24, r24
    4da4:	8d 87       	std	Y+13, r24	; 0x0d
    4da6:	9e 87       	std	Y+14, r25	; 0x0e
    4da8:	af 87       	std	Y+15, r26	; 0x0f
    4daa:	b8 8b       	std	Y+16, r27	; 0x10
    4dac:	94 ef       	ldi	r25, 0xF4	; 244
    4dae:	89 0e       	add	r8, r25
    4db0:	91 e0       	ldi	r25, 0x01	; 1
    4db2:	99 1e       	adc	r9, r25
    4db4:	a1 1c       	adc	r10, r1
    4db6:	b1 1c       	adc	r11, r1
    4db8:	c5 01       	movw	r24, r10
    4dba:	b4 01       	movw	r22, r8
    4dbc:	6c 0d       	add	r22, r12
    4dbe:	7d 1d       	adc	r23, r13
    4dc0:	8e 1d       	adc	r24, r14
    4dc2:	9f 1d       	adc	r25, r15
    4dc4:	28 ee       	ldi	r18, 0xE8	; 232
    4dc6:	33 e0       	ldi	r19, 0x03	; 3
    4dc8:	40 e0       	ldi	r20, 0x00	; 0
    4dca:	50 e0       	ldi	r21, 0x00	; 0
    4dcc:	62 d5       	rcall	.+2756   	; 0x5892 <__udivmodsi4>
    4dce:	6d 85       	ldd	r22, Y+13	; 0x0d
    4dd0:	7e 85       	ldd	r23, Y+14	; 0x0e
    4dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dd4:	98 89       	ldd	r25, Y+16	; 0x10
    4dd6:	5d d5       	rcall	.+2746   	; 0x5892 <__udivmodsi4>
    4dd8:	69 01       	movw	r12, r18
    4dda:	33 23       	and	r19, r19
    4ddc:	24 f4       	brge	.+8      	; 0x4de6 <VL53L0X_calc_sigma_estimate+0x346>
    4dde:	cc 24       	eor	r12, r12
    4de0:	dd 24       	eor	r13, r13
    4de2:	c2 1a       	sub	r12, r18
    4de4:	d3 0a       	sbc	r13, r19
    4de6:	0d 2c       	mov	r0, r13
    4de8:	00 0c       	add	r0, r0

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
    4dea:	ee 08       	sbc	r14, r14
    4dec:	ff 08       	sbc	r15, r15
    4dee:	e9 85       	ldd	r30, Y+9	; 0x09
    4df0:	fa 85       	ldd	r31, Y+10	; 0x0a
    4df2:	a0 85       	ldd	r26, Z+8	; 0x08
    4df4:	b1 85       	ldd	r27, Z+9	; 0x09
    4df6:	2a e9       	ldi	r18, 0x9A	; 154
    4df8:	39 e9       	ldi	r19, 0x99	; 153
    4dfa:	46 e0       	ldi	r20, 0x06	; 6
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	7a d5       	rcall	.+2804   	; 0x58f4 <__muluhisi3>
    4e00:	2c e5       	ldi	r18, 0x5C	; 92
    4e02:	32 e1       	ldi	r19, 0x12	; 18
    4e04:	40 e0       	ldi	r20, 0x00	; 0
    4e06:	50 e0       	ldi	r21, 0x00	; 0
    4e08:	44 d5       	rcall	.+2696   	; 0x5892 <__udivmodsi4>
    4e0a:	ca 01       	movw	r24, r20
		 * exceeded.
		 */
		pwMult *= (((uint32_t) 1 << 16) - xTalkCorrection);

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
    4e0c:	b9 01       	movw	r22, r18
    4e0e:	fe 2c       	mov	r15, r14
    4e10:	ed 2c       	mov	r14, r13
    4e12:	dc 2c       	mov	r13, r12
    4e14:	cc 24       	eor	r12, r12
    4e16:	81 2c       	mov	r8, r1
    4e18:	91 2c       	mov	r9, r1
    4e1a:	54 01       	movw	r10, r8
    4e1c:	a3 94       	inc	r10
    4e1e:	a5 01       	movw	r20, r10
    4e20:	94 01       	movw	r18, r8
    4e22:	2c 19       	sub	r18, r12
    4e24:	3d 09       	sbc	r19, r13
    4e26:	4e 09       	sbc	r20, r14
    4e28:	5f 09       	sbc	r21, r15
    4e2a:	24 d5       	rcall	.+2632   	; 0x5874 <__mulsi3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	90 58       	subi	r25, 0x80	; 128
    4e32:	af 4f       	sbci	r26, 0xFF	; 255
    4e34:	bf 4f       	sbci	r27, 0xFF	; 255
    4e36:	cd 01       	movw	r24, r26
    4e38:	aa 27       	eor	r26, r26

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += ((uint32_t) 1 << 16);
    4e3a:	bb 27       	eor	r27, r27
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
    4e3c:	11 96       	adiw	r26, 0x01	; 1
    4e3e:	bc 01       	movw	r22, r24
    4e40:	cd 01       	movw	r24, r26
    4e42:	96 95       	lsr	r25
    4e44:	87 95       	ror	r24
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
    4e46:	77 95       	ror	r23
    4e48:	67 95       	ror	r22
    4e4a:	9b 01       	movw	r18, r22

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
    4e4c:	ac 01       	movw	r20, r24
    4e4e:	12 d5       	rcall	.+2596   	; 0x5874 <__mulsi3>
    4e50:	6b 01       	movw	r12, r22
    4e52:	7c 01       	movw	r14, r24
    4e54:	0b 2e       	mov	r0, r27
    4e56:	be e0       	ldi	r27, 0x0E	; 14
    4e58:	f6 94       	lsr	r15
    4e5a:	e7 94       	ror	r14
    4e5c:	d7 94       	ror	r13
    4e5e:	c7 94       	ror	r12
    4e60:	ba 95       	dec	r27

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
    4e62:	d1 f7       	brne	.-12     	; 0x4e58 <VL53L0X_calc_sigma_estimate+0x3b8>
    4e64:	b0 2d       	mov	r27, r0
    4e66:	a0 e2       	ldi	r26, 0x20	; 32
    4e68:	b3 e0       	ldi	r27, 0x03	; 3
    4e6a:	a7 01       	movw	r20, r14
    4e6c:	96 01       	movw	r18, r12
    4e6e:	42 d5       	rcall	.+2692   	; 0x58f4 <__muluhisi3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	90 58       	subi	r25, 0x80	; 128
    4e76:	af 4f       	sbci	r26, 0xFF	; 255
    4e78:	bf 4f       	sbci	r27, 0xFF	; 255
    4e7a:	bd 01       	movw	r22, r26
		sqr1 *= sqr1;

		sqr2 = sigmaEstimateP2;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
    4e7c:	88 27       	eor	r24, r24
    4e7e:	99 27       	eor	r25, r25
    4e80:	89 88       	ldd	r8, Y+17	; 0x11
    4e82:	9a 88       	ldd	r9, Y+18	; 0x12
    4e84:	ab 88       	ldd	r10, Y+19	; 0x13
    4e86:	bc 88       	ldd	r11, Y+20	; 0x14
    4e88:	f0 e8       	ldi	r31, 0x80	; 128
    4e8a:	9f 0e       	add	r9, r31
    4e8c:	a1 1c       	adc	r10, r1
    4e8e:	b1 1c       	adc	r11, r1

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
    4e90:	45 01       	movw	r8, r10
    4e92:	aa 24       	eor	r10, r10
    4e94:	bb 24       	eor	r11, r11
    4e96:	9b 01       	movw	r18, r22
    4e98:	ac 01       	movw	r20, r24
    4e9a:	ec d4       	rcall	.+2520   	; 0x5874 <__mulsi3>
    4e9c:	69 87       	std	Y+9, r22	; 0x09
    4e9e:	7a 87       	std	Y+10, r23	; 0x0a
    4ea0:	8b 87       	std	Y+11, r24	; 0x0b
    4ea2:	9c 87       	std	Y+12, r25	; 0x0c
    4ea4:	a5 01       	movw	r20, r10
    4ea6:	94 01       	movw	r18, r8
    4ea8:	c5 01       	movw	r24, r10
    4eaa:	b4 01       	movw	r22, r8
    4eac:	e3 d4       	rcall	.+2502   	; 0x5874 <__mulsi3>
    4eae:	29 85       	ldd	r18, Y+9	; 0x09
    4eb0:	3a 85       	ldd	r19, Y+10	; 0x0a
    4eb2:	4b 85       	ldd	r20, Y+11	; 0x0b
    4eb4:	5c 85       	ldd	r21, Y+12	; 0x0c
    4eb6:	62 0f       	add	r22, r18
    4eb8:	73 1f       	adc	r23, r19
    4eba:	84 1f       	adc	r24, r20
    4ebc:	95 1f       	adc	r25, r21
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
    4ebe:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>
    4ec2:	db 01       	movw	r26, r22
    4ec4:	99 27       	eor	r25, r25
    4ec6:	88 27       	eor	r24, r24
    4ec8:	bc 01       	movw	r22, r24
    4eca:	cd 01       	movw	r24, r26
    4ecc:	6e 5c       	subi	r22, 0xCE	; 206
    4ece:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed4:	24 e6       	ldi	r18, 0x64	; 100
    4ed6:	30 e0       	ldi	r19, 0x00	; 0
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	50 e0       	ldi	r21, 0x00	; 0
    4edc:	da d4       	rcall	.+2484   	; 0x5892 <__udivmodsi4>
    4ede:	ca 01       	movw	r24, r20
    4ee0:	b9 01       	movw	r22, r18
    4ee2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4ee4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4ee6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4ee8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4eea:	22 0f       	add	r18, r18
    4eec:	33 1f       	adc	r19, r19
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
    4eee:	44 1f       	adc	r20, r20
    4ef0:	55 1f       	adc	r21, r21
    4ef2:	cf d4       	rcall	.+2462   	; 0x5892 <__udivmodsi4>

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
    4ef4:	a5 eb       	ldi	r26, 0xB5	; 181
    4ef6:	bb e0       	ldi	r27, 0x0B	; 11
    4ef8:	fd d4       	rcall	.+2554   	; 0x58f4 <__muluhisi3>
    4efa:	68 57       	subi	r22, 0x78	; 120
    4efc:	7c 4e       	sbci	r23, 0xEC	; 236
    4efe:	8f 4f       	sbci	r24, 0xFF	; 255
    4f00:	9f 4f       	sbci	r25, 0xFF	; 255
    4f02:	20 e1       	ldi	r18, 0x10	; 16
    4f04:	37 e2       	ldi	r19, 0x27	; 39
    4f06:	40 e0       	ldi	r20, 0x00	; 0
    4f08:	50 e0       	ldi	r21, 0x00	; 0
    4f0a:	c3 d4       	rcall	.+2438   	; 0x5892 <__udivmodsi4>
    4f0c:	ca 01       	movw	r24, r20
    4f0e:	b9 01       	movw	r22, r18
    4f10:	61 30       	cpi	r22, 0x01	; 1
    4f12:	30 ef       	ldi	r19, 0xF0	; 240
    4f14:	73 07       	cpc	r23, r19
    4f16:	81 05       	cpc	r24, r1
    4f18:	91 05       	cpc	r25, r1
    4f1a:	20 f0       	brcs	.+8      	; 0x4f24 <VL53L0X_calc_sigma_estimate+0x484>
    4f1c:	60 e0       	ldi	r22, 0x00	; 0
		sqr1 = sigmaEstRtn * sigmaEstRtn;
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
    4f1e:	70 ef       	ldi	r23, 0xF0	; 240
    4f20:	80 e0       	ldi	r24, 0x00	; 0
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	9b 01       	movw	r18, r22
    4f26:	ac 01       	movw	r20, r24
    4f28:	a5 d4       	rcall	.+2378   	; 0x5874 <__mulsi3>
    4f2a:	6c 5f       	subi	r22, 0xFC	; 252
    4f2c:	7e 4e       	sbci	r23, 0xEE	; 238
    4f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    4f30:	9f 4f       	sbci	r25, 0xFF	; 255
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
    4f32:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>
    4f36:	45 28       	or	r4, r5
    4f38:	46 28       	or	r4, r6
    4f3a:	47 28       	or	r4, r7
    4f3c:	91 f0       	breq	.+36     	; 0x4f62 <VL53L0X_calc_sigma_estimate+0x4c2>
    4f3e:	a8 ee       	ldi	r26, 0xE8	; 232
    4f40:	b3 e0       	ldi	r27, 0x03	; 3
    4f42:	9b 01       	movw	r18, r22
    4f44:	ac 01       	movw	r20, r24
    4f46:	d6 d4       	rcall	.+2476   	; 0x58f4 <__muluhisi3>
    4f48:	6f 3a       	cpi	r22, 0xAF	; 175
    4f4a:	47 e8       	ldi	r20, 0x87	; 135
    4f4c:	74 07       	cpc	r23, r20
    4f4e:	4f e8       	ldi	r20, 0x8F	; 143
    4f50:	84 07       	cpc	r24, r20
    4f52:	42 e0       	ldi	r20, 0x02	; 2
    4f54:	94 07       	cpc	r25, r20
    4f56:	48 f0       	brcs	.+18     	; 0x4f6a <VL53L0X_calc_sigma_estimate+0x4ca>
    4f58:	6e ea       	ldi	r22, 0xAE	; 174
    4f5a:	77 e8       	ldi	r23, 0x87	; 135
    4f5c:	8f e8       	ldi	r24, 0x8F	; 143
    4f5e:	92 e0       	ldi	r25, 0x02	; 2
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
    4f60:	04 c0       	rjmp	.+8      	; 0x4f6a <VL53L0X_calc_sigma_estimate+0x4ca>
    4f62:	6e ea       	ldi	r22, 0xAE	; 174
    4f64:	77 e8       	ldi	r23, 0x87	; 135
    4f66:	8f e8       	ldi	r24, 0x8F	; 143
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
    4f68:	92 e0       	ldi	r25, 0x02	; 2
    4f6a:	af 8d       	ldd	r26, Y+31	; 0x1f
    4f6c:	b8 a1       	ldd	r27, Y+32	; 0x20
    4f6e:	6d 93       	st	X+, r22
    4f70:	7d 93       	st	X+, r23
    4f72:	8d 93       	st	X+, r24
    4f74:	9c 93       	st	X, r25
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
    4f76:	13 97       	sbiw	r26, 0x03	; 3
    4f78:	f1 01       	movw	r30, r2
    4f7a:	e6 5d       	subi	r30, 0xD6	; 214
    4f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    4f7e:	60 83       	st	Z, r22
    4f80:	71 83       	std	Z+1, r23	; 0x01
    4f82:	82 83       	std	Z+2, r24	; 0x02
		Status = VL53L0X_calc_dmax(
    4f84:	93 83       	std	Z+3, r25	; 0x03
    4f86:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4f88:	bf 93       	push	r27
    4f8a:	e9 8d       	ldd	r30, Y+25	; 0x19
    4f8c:	ef 93       	push	r30
    4f8e:	1f 93       	push	r17
    4f90:	0f 93       	push	r16
    4f92:	f9 a5       	ldd	r31, Y+41	; 0x29
    4f94:	ff 93       	push	r31
    4f96:	2d 89       	ldd	r18, Y+21	; 0x15
    4f98:	2f 93       	push	r18
    4f9a:	3c 89       	ldd	r19, Y+20	; 0x14
    4f9c:	3f 93       	push	r19
    4f9e:	4b 89       	ldd	r20, Y+19	; 0x13
    4fa0:	4f 93       	push	r20
    4fa2:	5a 89       	ldd	r21, Y+18	; 0x12
    4fa4:	5f 93       	push	r21
    4fa6:	89 89       	ldd	r24, Y+17	; 0x11
    4fa8:	8f 93       	push	r24
    4faa:	0f 2e       	mov	r0, r31
    4fac:	f0 e2       	ldi	r31, 0x20	; 32
    4fae:	8f 2e       	mov	r8, r31
    4fb0:	f3 e0       	ldi	r31, 0x03	; 3
    4fb2:	9f 2e       	mov	r9, r31
    4fb4:	a1 2c       	mov	r10, r1
    4fb6:	b1 2c       	mov	r11, r1
    4fb8:	f0 2d       	mov	r31, r0
    4fba:	0d a1       	ldd	r16, Y+37	; 0x25
    4fbc:	1e a1       	ldd	r17, Y+38	; 0x26
    4fbe:	2f a1       	ldd	r18, Y+39	; 0x27
    4fc0:	38 a5       	ldd	r19, Y+40	; 0x28
    4fc2:	49 a1       	ldd	r20, Y+33	; 0x21
    4fc4:	5a a1       	ldd	r21, Y+34	; 0x22
    4fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    4fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    4fca:	c1 01       	movw	r24, r2
    4fcc:	88 db       	rcall	.-2288   	; 0x46de <VL53L0X_calc_dmax>
    4fce:	18 2f       	mov	r17, r24
    4fd0:	0f b6       	in	r0, 0x3f	; 63
    4fd2:	f8 94       	cli
    4fd4:	de bf       	out	0x3e, r29	; 62
    4fd6:	0f be       	out	0x3f, r0	; 63
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    4fd8:	cd bf       	out	0x3d, r28	; 61
    4fda:	81 2f       	mov	r24, r17
    4fdc:	a9 96       	adiw	r28, 0x29	; 41
    4fde:	0f b6       	in	r0, 0x3f	; 63
    4fe0:	f8 94       	cli
    4fe2:	de bf       	out	0x3e, r29	; 62
    4fe4:	0f be       	out	0x3f, r0	; 63
    4fe6:	cd bf       	out	0x3d, r28	; 61
    4fe8:	df 91       	pop	r29
    4fea:	cf 91       	pop	r28
    4fec:	1f 91       	pop	r17
    4fee:	0f 91       	pop	r16
    4ff0:	ff 90       	pop	r15
    4ff2:	ef 90       	pop	r14
    4ff4:	df 90       	pop	r13
    4ff6:	cf 90       	pop	r12
    4ff8:	bf 90       	pop	r11
    4ffa:	af 90       	pop	r10
    4ffc:	9f 90       	pop	r9
    4ffe:	8f 90       	pop	r8
    5000:	7f 90       	pop	r7
    5002:	6f 90       	pop	r6
    5004:	5f 90       	pop	r5
    5006:	4f 90       	pop	r4
    5008:	3f 90       	pop	r3
    500a:	2f 90       	pop	r2
    500c:	08 95       	ret

0000500e <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
    500e:	2f 92       	push	r2
    5010:	3f 92       	push	r3
    5012:	4f 92       	push	r4
    5014:	5f 92       	push	r5
    5016:	6f 92       	push	r6
    5018:	7f 92       	push	r7
    501a:	8f 92       	push	r8
    501c:	9f 92       	push	r9
    501e:	af 92       	push	r10
    5020:	bf 92       	push	r11
    5022:	cf 92       	push	r12
    5024:	df 92       	push	r13
    5026:	ef 92       	push	r14
    5028:	ff 92       	push	r15
    502a:	0f 93       	push	r16
    502c:	1f 93       	push	r17
    502e:	cf 93       	push	r28
    5030:	df 93       	push	r29
    5032:	cd b7       	in	r28, 0x3d	; 61
    5034:	de b7       	in	r29, 0x3e	; 62
    5036:	ab 97       	sbiw	r28, 0x2b	; 43
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	de bf       	out	0x3e, r29	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	cd bf       	out	0x3d, r28	; 61
    5042:	5c 01       	movw	r10, r24
    5044:	28 a3       	std	Y+32, r18	; 0x20
    5046:	39 a3       	std	Y+33, r19	; 0x21
    5048:	4a a3       	std	Y+34, r20	; 0x22
    504a:	5b a3       	std	Y+35, r21	; 0x23
    504c:	48 01       	movw	r8, r16
    504e:	f9 a6       	std	Y+41, r15	; 0x29
    5050:	e8 a6       	std	Y+40, r14	; 0x28
    5052:	db a6       	std	Y+43, r13	; 0x2b
    5054:	ca a6       	std	Y+42, r12	; 0x2a
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
    5056:	19 82       	std	Y+1, r1	; 0x01
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
    5058:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t SignalRefClipLimitCheckEnable = 0;
    505a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
    505c:	1c 82       	std	Y+4, r1	; 0x04
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
    505e:	1e 8a       	std	Y+22, r1	; 0x16
    5060:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
    5062:	1f 8a       	std	Y+23, r1	; 0x17
    5064:	18 8e       	std	Y+24, r1	; 0x18
    5066:	19 8e       	std	Y+25, r1	; 0x19
    5068:	1a 8e       	std	Y+26, r1	; 0x1a
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
    506a:	68 77       	andi	r22, 0x78	; 120
    506c:	06 2f       	mov	r16, r22
    506e:	10 e0       	ldi	r17, 0x00	; 0
    5070:	15 95       	asr	r17
    5072:	07 95       	ror	r16
    5074:	15 95       	asr	r17
    5076:	07 95       	ror	r16
    5078:	15 95       	asr	r17
    507a:	07 95       	ror	r16
    507c:	30 2e       	mov	r3, r16

	if (DeviceRangeStatusInternal == 0 ||
    507e:	00 23       	and	r16, r16
    5080:	61 f0       	breq	.+24     	; 0x509a <VL53L0X_get_pal_range_status+0x8c>
    5082:	80 2f       	mov	r24, r16
    5084:	8d 7f       	andi	r24, 0xFD	; 253
    5086:	85 30       	cpi	r24, 0x05	; 5
    5088:	59 f0       	breq	.+22     	; 0x50a0 <VL53L0X_get_pal_range_status+0x92>
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
    508a:	21 e0       	ldi	r18, 0x01	; 1
    508c:	2f 8f       	std	Y+31, r18	; 0x1f
    508e:	84 ef       	ldi	r24, 0xF4	; 244
    5090:	80 0f       	add	r24, r16
    5092:	84 30       	cpi	r24, 0x04	; 4
    5094:	38 f0       	brcs	.+14     	; 0x50a4 <VL53L0X_get_pal_range_status+0x96>
    5096:	1f 8e       	std	Y+31, r1	; 0x1f
    5098:	05 c0       	rjmp	.+10     	; 0x50a4 <VL53L0X_get_pal_range_status+0x96>
    509a:	31 e0       	ldi	r19, 0x01	; 1
    509c:	3f 8f       	std	Y+31, r19	; 0x1f
    509e:	02 c0       	rjmp	.+4      	; 0x50a4 <VL53L0X_get_pal_range_status+0x96>
    50a0:	41 e0       	ldi	r20, 0x01	; 1
    50a2:	4f 8f       	std	Y+31, r20	; 0x1f
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    50a4:	41 e0       	ldi	r20, 0x01	; 1
    50a6:	6f ef       	ldi	r22, 0xFF	; 255
    50a8:	c5 01       	movw	r24, r10
    50aa:	50 d3       	rcall	.+1696   	; 0x574c <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    50ac:	81 11       	cpse	r24, r1
    50ae:	5a c1       	rjmp	.+692    	; 0x5364 <VL53L0X_get_pal_range_status+0x356>
		Status = VL53L0X_RdWord(Dev,
    50b0:	ae 01       	movw	r20, r28
    50b2:	4b 5e       	subi	r20, 0xEB	; 235
    50b4:	5f 4f       	sbci	r21, 0xFF	; 255
    50b6:	66 eb       	ldi	r22, 0xB6	; 182
    50b8:	c5 01       	movw	r24, r10
    50ba:	96 d3       	rcall	.+1836   	; 0x57e8 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    50bc:	9d 89       	ldd	r25, Y+21	; 0x15
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	39 2f       	mov	r19, r25
    50c4:	33 0f       	add	r19, r19
    50c6:	29 01       	movw	r4, r18
    50c8:	61 2c       	mov	r6, r1
    50ca:	71 2c       	mov	r7, r1

	if (Status == VL53L0X_ERROR_NONE)
    50cc:	81 11       	cpse	r24, r1
    50ce:	5a c1       	rjmp	.+692    	; 0x5384 <VL53L0X_get_pal_range_status+0x376>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    50d0:	40 e0       	ldi	r20, 0x00	; 0
    50d2:	6f ef       	ldi	r22, 0xFF	; 255
    50d4:	c5 01       	movw	r24, r10
    50d6:	3a d3       	rcall	.+1652   	; 0x574c <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    50d8:	f5 01       	movw	r30, r10
    50da:	ee 5c       	subi	r30, 0xCE	; 206
    50dc:	fe 4f       	sbci	r31, 0xFE	; 254
    50de:	40 82       	st	Z, r4
    50e0:	51 82       	std	Z+1, r5	; 0x01
    50e2:	62 82       	std	Z+2, r6	; 0x02
    50e4:	73 82       	std	Z+3, r7	; 0x03

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    50e6:	81 11       	cpse	r24, r1
    50e8:	08 c0       	rjmp	.+16     	; 0x50fa <VL53L0X_get_pal_range_status+0xec>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    50ea:	ae 01       	movw	r20, r28
    50ec:	4f 5f       	subi	r20, 0xFF	; 255
    50ee:	5f 4f       	sbci	r21, 0xFF	; 255
    50f0:	60 e0       	ldi	r22, 0x00	; 0
    50f2:	70 e0       	ldi	r23, 0x00	; 0
    50f4:	c5 01       	movw	r24, r10
    50f6:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
    50fa:	99 81       	ldd	r25, Y+1	; 0x01
    50fc:	99 23       	and	r25, r25
    50fe:	b1 f1       	breq	.+108    	; 0x516c <VL53L0X_get_pal_range_status+0x15e>
    5100:	81 11       	cpse	r24, r1
    5102:	42 c0       	rjmp	.+132    	; 0x5188 <VL53L0X_get_pal_range_status+0x17a>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
    5104:	9e 01       	movw	r18, r28
    5106:	29 5e       	subi	r18, 0xE9	; 233
    5108:	3f 4f       	sbci	r19, 0xFF	; 255
    510a:	ae 01       	movw	r20, r28
    510c:	4b 5f       	subi	r20, 0xFB	; 251
    510e:	5f 4f       	sbci	r21, 0xFF	; 255
    5110:	68 a5       	ldd	r22, Y+40	; 0x28
    5112:	79 a5       	ldd	r23, Y+41	; 0x29
    5114:	c5 01       	movw	r24, r10
    5116:	c4 dc       	rcall	.-1656   	; 0x4aa0 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
    5118:	81 11       	cpse	r24, r1
    511a:	38 c0       	rjmp	.+112    	; 0x518c <VL53L0X_get_pal_range_status+0x17e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
    511c:	8f 89       	ldd	r24, Y+23	; 0x17
    511e:	98 8d       	ldd	r25, Y+24	; 0x18
    5120:	e8 a5       	ldd	r30, Y+40	; 0x28
    5122:	f9 a5       	ldd	r31, Y+41	; 0x29
    5124:	93 87       	std	Z+11, r25	; 0x0b
    5126:	82 87       	std	Z+10, r24	; 0x0a

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
    5128:	ae 01       	movw	r20, r28
    512a:	47 5f       	subi	r20, 0xF7	; 247
    512c:	5f 4f       	sbci	r21, 0xFF	; 255
    512e:	60 e0       	ldi	r22, 0x00	; 0
    5130:	70 e0       	ldi	r23, 0x00	; 0
    5132:	c5 01       	movw	r24, r10
    5134:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
    5138:	c9 84       	ldd	r12, Y+9	; 0x09
    513a:	da 84       	ldd	r13, Y+10	; 0x0a
    513c:	eb 84       	ldd	r14, Y+11	; 0x0b
    513e:	fc 84       	ldd	r15, Y+12	; 0x0c
    5140:	cc a2       	std	Y+36, r12	; 0x24
    5142:	dd a2       	std	Y+37, r13	; 0x25
    5144:	ee a2       	std	Y+38, r14	; 0x26
    5146:	ff a2       	std	Y+39, r15	; 0x27
    5148:	c1 14       	cp	r12, r1
    514a:	d1 04       	cpc	r13, r1
    514c:	e1 04       	cpc	r14, r1
    514e:	f1 04       	cpc	r15, r1
    5150:	79 f0       	breq	.+30     	; 0x5170 <VL53L0X_get_pal_range_status+0x162>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
    5152:	22 24       	eor	r2, r2
    5154:	23 94       	inc	r2
    5156:	2d 81       	ldd	r18, Y+5	; 0x05
    5158:	3e 81       	ldd	r19, Y+6	; 0x06
    515a:	4f 81       	ldd	r20, Y+7	; 0x07
    515c:	58 85       	ldd	r21, Y+8	; 0x08
    515e:	c2 16       	cp	r12, r18
    5160:	d3 06       	cpc	r13, r19
    5162:	e4 06       	cpc	r14, r20
    5164:	f5 06       	cpc	r15, r21
    5166:	28 f0       	brcs	.+10     	; 0x5172 <VL53L0X_get_pal_range_status+0x164>
    5168:	21 2c       	mov	r2, r1
    516a:	03 c0       	rjmp	.+6      	; 0x5172 <VL53L0X_get_pal_range_status+0x164>
    516c:	21 2c       	mov	r2, r1
    516e:	01 c0       	rjmp	.+2      	; 0x5172 <VL53L0X_get_pal_range_status+0x164>
    5170:	21 2c       	mov	r2, r1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    5172:	81 11       	cpse	r24, r1
    5174:	0c c0       	rjmp	.+24     	; 0x518e <VL53L0X_get_pal_range_status+0x180>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    5176:	ae 01       	movw	r20, r28
    5178:	4d 5f       	subi	r20, 0xFD	; 253
    517a:	5f 4f       	sbci	r21, 0xFF	; 255
    517c:	62 e0       	ldi	r22, 0x02	; 2
    517e:	70 e0       	ldi	r23, 0x00	; 0
    5180:	c5 01       	movw	r24, r10
    5182:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <VL53L0X_GetLimitCheckEnable>
    5186:	03 c0       	rjmp	.+6      	; 0x518e <VL53L0X_get_pal_range_status+0x180>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
    5188:	21 2c       	mov	r2, r1
    518a:	01 c0       	rjmp	.+2      	; 0x518e <VL53L0X_get_pal_range_status+0x180>
    518c:	21 2c       	mov	r2, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
    518e:	9b 81       	ldd	r25, Y+3	; 0x03
    5190:	99 23       	and	r25, r25
    5192:	e1 f0       	breq	.+56     	; 0x51cc <VL53L0X_get_pal_range_status+0x1be>
    5194:	81 11       	cpse	r24, r1
    5196:	fe c0       	rjmp	.+508    	; 0x5394 <VL53L0X_get_pal_range_status+0x386>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
    5198:	ae 01       	movw	r20, r28
    519a:	43 5f       	subi	r20, 0xF3	; 243
    519c:	5f 4f       	sbci	r21, 0xFF	; 255
    519e:	62 e0       	ldi	r22, 0x02	; 2
    51a0:	70 e0       	ldi	r23, 0x00	; 0
    51a2:	c5 01       	movw	r24, r10
    51a4:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
    51a8:	4d 85       	ldd	r20, Y+13	; 0x0d
    51aa:	5e 85       	ldd	r21, Y+14	; 0x0e
    51ac:	6f 85       	ldd	r22, Y+15	; 0x0f
    51ae:	78 89       	ldd	r23, Y+16	; 0x10
    51b0:	41 15       	cp	r20, r1
    51b2:	51 05       	cpc	r21, r1
    51b4:	61 05       	cpc	r22, r1
    51b6:	71 05       	cpc	r23, r1
    51b8:	59 f0       	breq	.+22     	; 0x51d0 <VL53L0X_get_pal_range_status+0x1c2>
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
    51ba:	ff 24       	eor	r15, r15
    51bc:	f3 94       	inc	r15
    51be:	44 15       	cp	r20, r4
    51c0:	55 05       	cpc	r21, r5
    51c2:	66 05       	cpc	r22, r6
    51c4:	77 05       	cpc	r23, r7
    51c6:	28 f0       	brcs	.+10     	; 0x51d2 <VL53L0X_get_pal_range_status+0x1c4>
    51c8:	f1 2c       	mov	r15, r1
    51ca:	03 c0       	rjmp	.+6      	; 0x51d2 <VL53L0X_get_pal_range_status+0x1c4>
    51cc:	f1 2c       	mov	r15, r1
    51ce:	01 c0       	rjmp	.+2      	; 0x51d2 <VL53L0X_get_pal_range_status+0x1c4>
    51d0:	f1 2c       	mov	r15, r1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
    51d2:	81 11       	cpse	r24, r1
    51d4:	e0 c0       	rjmp	.+448    	; 0x5396 <VL53L0X_get_pal_range_status+0x388>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    51d6:	ae 01       	movw	r20, r28
    51d8:	4c 5f       	subi	r20, 0xFC	; 252
    51da:	5f 4f       	sbci	r21, 0xFF	; 255
    51dc:	63 e0       	ldi	r22, 0x03	; 3
    51de:	70 e0       	ldi	r23, 0x00	; 0
    51e0:	c5 01       	movw	r24, r10
    51e2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    51e6:	9c 81       	ldd	r25, Y+4	; 0x04
    51e8:	99 23       	and	r25, r25
    51ea:	89 f1       	breq	.+98     	; 0x524e <VL53L0X_get_pal_range_status+0x240>
    51ec:	81 11       	cpse	r24, r1
    51ee:	76 c0       	rjmp	.+236    	; 0x52dc <VL53L0X_get_pal_range_status+0x2ce>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
    51f0:	81 14       	cp	r8, r1
    51f2:	91 04       	cpc	r9, r1
    51f4:	79 f0       	breq	.+30     	; 0x5214 <VL53L0X_get_pal_range_status+0x206>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
    51f6:	28 a1       	ldd	r18, Y+32	; 0x20
    51f8:	39 a1       	ldd	r19, Y+33	; 0x21
    51fa:	4a a1       	ldd	r20, Y+34	; 0x22
    51fc:	5b a1       	ldd	r21, Y+35	; 0x23
    51fe:	94 2f       	mov	r25, r20
    5200:	83 2f       	mov	r24, r19
    5202:	72 2f       	mov	r23, r18
    5204:	66 27       	eor	r22, r22
    5206:	94 01       	movw	r18, r8
    5208:	40 e0       	ldi	r20, 0x00	; 0
    520a:	50 e0       	ldi	r21, 0x00	; 0
    520c:	42 d3       	rcall	.+1668   	; 0x5892 <__udivmodsi4>
    520e:	29 01       	movw	r4, r18
    5210:	3a 01       	movw	r6, r20
    5212:	03 c0       	rjmp	.+6      	; 0x521a <VL53L0X_get_pal_range_status+0x20c>
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
			SignalRatePerSpad = 0;
    5214:	41 2c       	mov	r4, r1
    5216:	51 2c       	mov	r5, r1
    5218:	32 01       	movw	r6, r4
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
    521a:	ae 01       	movw	r20, r28
    521c:	4f 5e       	subi	r20, 0xEF	; 239
    521e:	5f 4f       	sbci	r21, 0xFF	; 255
    5220:	63 e0       	ldi	r22, 0x03	; 3
    5222:	70 e0       	ldi	r23, 0x00	; 0
    5224:	c5 01       	movw	r24, r10
    5226:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
    522a:	49 89       	ldd	r20, Y+17	; 0x11
    522c:	5a 89       	ldd	r21, Y+18	; 0x12
    522e:	6b 89       	ldd	r22, Y+19	; 0x13
    5230:	7c 89       	ldd	r23, Y+20	; 0x14
    5232:	41 15       	cp	r20, r1
    5234:	51 05       	cpc	r21, r1
    5236:	61 05       	cpc	r22, r1
    5238:	71 05       	cpc	r23, r1
    523a:	59 f0       	breq	.+22     	; 0x5252 <VL53L0X_get_pal_range_status+0x244>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    523c:	99 24       	eor	r9, r9
    523e:	93 94       	inc	r9
    5240:	44 16       	cp	r4, r20
    5242:	55 06       	cpc	r5, r21
    5244:	66 06       	cpc	r6, r22
    5246:	77 06       	cpc	r7, r23
    5248:	28 f0       	brcs	.+10     	; 0x5254 <VL53L0X_get_pal_range_status+0x246>
    524a:	91 2c       	mov	r9, r1
    524c:	03 c0       	rjmp	.+6      	; 0x5254 <VL53L0X_get_pal_range_status+0x246>
    524e:	91 2c       	mov	r9, r1
    5250:	01 c0       	rjmp	.+2      	; 0x5254 <VL53L0X_get_pal_range_status+0x246>
    5252:	91 2c       	mov	r9, r1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    5254:	81 11       	cpse	r24, r1
    5256:	45 c0       	rjmp	.+138    	; 0x52e2 <VL53L0X_get_pal_range_status+0x2d4>
		if (NoneFlag == 1) {
    5258:	3f 8d       	ldd	r19, Y+31	; 0x1f
    525a:	31 30       	cpi	r19, 0x01	; 1
    525c:	29 f4       	brne	.+10     	; 0x5268 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
    525e:	8f ef       	ldi	r24, 0xFF	; 255
    5260:	ea a5       	ldd	r30, Y+42	; 0x2a
    5262:	fb a5       	ldd	r31, Y+43	; 0x2b
    5264:	80 83       	st	Z, r24
    5266:	46 c0       	rjmp	.+140    	; 0x52f4 <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 1 ||
    5268:	8f ef       	ldi	r24, 0xFF	; 255
    526a:	80 0f       	add	r24, r16
    526c:	83 30       	cpi	r24, 0x03	; 3
    526e:	28 f4       	brcc	.+10     	; 0x527a <VL53L0X_get_pal_range_status+0x26c>
					DeviceRangeStatusInternal == 2 ||
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
    5270:	85 e0       	ldi	r24, 0x05	; 5
    5272:	ea a5       	ldd	r30, Y+42	; 0x2a
    5274:	fb a5       	ldd	r31, Y+43	; 0x2b
    5276:	80 83       	st	Z, r24
    5278:	3d c0       	rjmp	.+122    	; 0x52f4 <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 6 ||
    527a:	f6 e0       	ldi	r31, 0x06	; 6
    527c:	3f 16       	cp	r3, r31
    527e:	31 f0       	breq	.+12     	; 0x528c <VL53L0X_get_pal_range_status+0x27e>
    5280:	0f 2e       	mov	r0, r31
    5282:	f9 e0       	ldi	r31, 0x09	; 9
    5284:	cf 2e       	mov	r12, r31
    5286:	f0 2d       	mov	r31, r0
    5288:	3c 10       	cpse	r3, r12
    528a:	05 c0       	rjmp	.+10     	; 0x5296 <VL53L0X_get_pal_range_status+0x288>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
    528c:	84 e0       	ldi	r24, 0x04	; 4
    528e:	ea a5       	ldd	r30, Y+42	; 0x2a
    5290:	fb a5       	ldd	r31, Y+43	; 0x2b
    5292:	80 83       	st	Z, r24
    5294:	2f c0       	rjmp	.+94     	; 0x52f4 <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 8 ||
    5296:	0d 7f       	andi	r16, 0xFD	; 253
    5298:	08 30       	cpi	r16, 0x08	; 8
    529a:	19 f0       	breq	.+6      	; 0x52a2 <VL53L0X_get_pal_range_status+0x294>
					DeviceRangeStatusInternal == 10 ||
    529c:	f1 e0       	ldi	r31, 0x01	; 1
    529e:	ff 12       	cpse	r15, r31
    52a0:	05 c0       	rjmp	.+10     	; 0x52ac <VL53L0X_get_pal_range_status+0x29e>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
    52a2:	83 e0       	ldi	r24, 0x03	; 3
    52a4:	ea a5       	ldd	r30, Y+42	; 0x2a
    52a6:	fb a5       	ldd	r31, Y+43	; 0x2b
    52a8:	80 83       	st	Z, r24
    52aa:	24 c0       	rjmp	.+72     	; 0x52f4 <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 4 ||
    52ac:	f4 e0       	ldi	r31, 0x04	; 4
    52ae:	3f 16       	cp	r3, r31
    52b0:	21 f0       	breq	.+8      	; 0x52ba <VL53L0X_get_pal_range_status+0x2ac>
    52b2:	cc 24       	eor	r12, r12
    52b4:	c3 94       	inc	r12
    52b6:	9c 10       	cpse	r9, r12
    52b8:	05 c0       	rjmp	.+10     	; 0x52c4 <VL53L0X_get_pal_range_status+0x2b6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
    52ba:	82 e0       	ldi	r24, 0x02	; 2
    52bc:	ea a5       	ldd	r30, Y+42	; 0x2a
    52be:	fb a5       	ldd	r31, Y+43	; 0x2b
    52c0:	80 83       	st	Z, r24
    52c2:	18 c0       	rjmp	.+48     	; 0x52f4 <VL53L0X_get_pal_range_status+0x2e6>
		} else if (SigmaLimitflag == 1) {
    52c4:	f1 e0       	ldi	r31, 0x01	; 1
    52c6:	2f 12       	cpse	r2, r31
    52c8:	05 c0       	rjmp	.+10     	; 0x52d4 <VL53L0X_get_pal_range_status+0x2c6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
    52ca:	81 e0       	ldi	r24, 0x01	; 1
    52cc:	ea a5       	ldd	r30, Y+42	; 0x2a
    52ce:	fb a5       	ldd	r31, Y+43	; 0x2b
    52d0:	80 83       	st	Z, r24
    52d2:	10 c0       	rjmp	.+32     	; 0x52f4 <VL53L0X_get_pal_range_status+0x2e6>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
    52d4:	ea a5       	ldd	r30, Y+42	; 0x2a
    52d6:	fb a5       	ldd	r31, Y+43	; 0x2b
    52d8:	10 82       	st	Z, r1
    52da:	08 c0       	rjmp	.+16     	; 0x52ec <VL53L0X_get_pal_range_status+0x2de>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    52dc:	91 2c       	mov	r9, r1
    52de:	01 c0       	rjmp	.+2      	; 0x52e2 <VL53L0X_get_pal_range_status+0x2d4>
    52e0:	91 2c       	mov	r9, r1
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
    52e2:	ea a5       	ldd	r30, Y+42	; 0x2a
    52e4:	fb a5       	ldd	r31, Y+43	; 0x2b
    52e6:	80 81       	ld	r24, Z
    52e8:	81 11       	cpse	r24, r1
    52ea:	04 c0       	rjmp	.+8      	; 0x52f4 <VL53L0X_get_pal_range_status+0x2e6>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
    52ec:	e8 a5       	ldd	r30, Y+40	; 0x28
    52ee:	f9 a5       	ldd	r31, Y+41	; 0x29
    52f0:	13 86       	std	Z+11, r1	; 0x0b
    52f2:	12 86       	std	Z+10, r1	; 0x0a

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
    52f4:	ae 01       	movw	r20, r28
    52f6:	4e 5f       	subi	r20, 0xFE	; 254
    52f8:	5f 4f       	sbci	r21, 0xFF	; 255
    52fa:	61 e0       	ldi	r22, 0x01	; 1
    52fc:	70 e0       	ldi	r23, 0x00	; 0
    52fe:	c5 01       	movw	r24, r10
    5300:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
    5304:	81 11       	cpse	r24, r1
    5306:	4c c0       	rjmp	.+152    	; 0x53a0 <VL53L0X_get_pal_range_status+0x392>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
    5308:	99 81       	ldd	r25, Y+1	; 0x01
    530a:	99 23       	and	r25, r25
    530c:	29 f0       	breq	.+10     	; 0x5318 <VL53L0X_get_pal_range_status+0x30a>
			Temp8 = 1;
    530e:	91 e0       	ldi	r25, 0x01	; 1
    5310:	29 16       	cp	r2, r25
    5312:	19 f0       	breq	.+6      	; 0x531a <VL53L0X_get_pal_range_status+0x30c>
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	01 c0       	rjmp	.+2      	; 0x531a <VL53L0X_get_pal_range_status+0x30c>
    5318:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    531a:	f5 01       	movw	r30, r10
    531c:	93 a7       	std	Z+43, r25	; 0x2b
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
    531e:	f4 e0       	ldi	r31, 0x04	; 4
    5320:	3f 16       	cp	r3, r31
    5322:	31 f0       	breq	.+12     	; 0x5330 <VL53L0X_get_pal_range_status+0x322>
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
    5324:	91 e0       	ldi	r25, 0x01	; 1
    5326:	2a 81       	ldd	r18, Y+2	; 0x02
    5328:	22 23       	and	r18, r18
    532a:	19 f0       	breq	.+6      	; 0x5332 <VL53L0X_get_pal_range_status+0x324>
    532c:	90 e0       	ldi	r25, 0x00	; 0
    532e:	01 c0       	rjmp	.+2      	; 0x5332 <VL53L0X_get_pal_range_status+0x324>
    5330:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    5332:	f5 01       	movw	r30, r10
    5334:	94 a7       	std	Z+44, r25	; 0x2c
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
    5336:	9b 81       	ldd	r25, Y+3	; 0x03
    5338:	99 23       	and	r25, r25
    533a:	29 f0       	breq	.+10     	; 0x5346 <VL53L0X_get_pal_range_status+0x338>
					(SignalRefClipflag == 1))
			Temp8 = 1;
    533c:	91 e0       	ldi	r25, 0x01	; 1
    533e:	f9 16       	cp	r15, r25
    5340:	19 f0       	breq	.+6      	; 0x5348 <VL53L0X_get_pal_range_status+0x33a>
    5342:	90 e0       	ldi	r25, 0x00	; 0
    5344:	01 c0       	rjmp	.+2      	; 0x5348 <VL53L0X_get_pal_range_status+0x33a>
    5346:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    5348:	f5 01       	movw	r30, r10
    534a:	95 a7       	std	Z+45, r25	; 0x2d
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
    534c:	9c 81       	ldd	r25, Y+4	; 0x04
    534e:	99 23       	and	r25, r25
    5350:	29 f0       	breq	.+10     	; 0x535c <VL53L0X_get_pal_range_status+0x34e>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
    5352:	91 e0       	ldi	r25, 0x01	; 1
    5354:	99 16       	cp	r9, r25
    5356:	19 f0       	breq	.+6      	; 0x535e <VL53L0X_get_pal_range_status+0x350>
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	01 c0       	rjmp	.+2      	; 0x535e <VL53L0X_get_pal_range_status+0x350>
    535c:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    535e:	f5 01       	movw	r30, r10
    5360:	96 a7       	std	Z+46, r25	; 0x2e
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
    5362:	1e c0       	rjmp	.+60     	; 0x53a0 <VL53L0X_get_pal_range_status+0x392>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_RdWord(Dev,
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    5364:	9d 89       	ldd	r25, Y+21	; 0x15
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	39 2f       	mov	r19, r25
    536c:	33 0f       	add	r19, r19
    536e:	29 01       	movw	r4, r18
    5370:	61 2c       	mov	r6, r1
    5372:	71 2c       	mov	r7, r1

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    5374:	f5 01       	movw	r30, r10
    5376:	ee 5c       	subi	r30, 0xCE	; 206
    5378:	fe 4f       	sbci	r31, 0xFE	; 254
    537a:	40 82       	st	Z, r4
    537c:	51 82       	std	Z+1, r5	; 0x01
    537e:	62 82       	std	Z+2, r6	; 0x02
    5380:	73 82       	std	Z+3, r7	; 0x03
    5382:	bb ce       	rjmp	.-650    	; 0x50fa <VL53L0X_get_pal_range_status+0xec>
    5384:	f5 01       	movw	r30, r10
    5386:	ee 5c       	subi	r30, 0xCE	; 206
    5388:	fe 4f       	sbci	r31, 0xFE	; 254
    538a:	40 82       	st	Z, r4
    538c:	51 82       	std	Z+1, r5	; 0x01
    538e:	62 82       	std	Z+2, r6	; 0x02
    5390:	73 82       	std	Z+3, r7	; 0x03
    5392:	b3 ce       	rjmp	.-666    	; 0x50fa <VL53L0X_get_pal_range_status+0xec>
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
    5394:	f1 2c       	mov	r15, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    5396:	9c 81       	ldd	r25, Y+4	; 0x04
    5398:	91 11       	cpse	r25, r1
    539a:	a2 cf       	rjmp	.-188    	; 0x52e0 <VL53L0X_get_pal_range_status+0x2d2>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    539c:	91 2c       	mov	r9, r1
    539e:	5a cf       	rjmp	.-332    	; 0x5254 <VL53L0X_get_pal_range_status+0x246>
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
    53a0:	ab 96       	adiw	r28, 0x2b	; 43
    53a2:	0f b6       	in	r0, 0x3f	; 63
    53a4:	f8 94       	cli
    53a6:	de bf       	out	0x3e, r29	; 62
    53a8:	0f be       	out	0x3f, r0	; 63
    53aa:	cd bf       	out	0x3d, r28	; 61
    53ac:	df 91       	pop	r29
    53ae:	cf 91       	pop	r28
    53b0:	1f 91       	pop	r17
    53b2:	0f 91       	pop	r16
    53b4:	ff 90       	pop	r15
    53b6:	ef 90       	pop	r14
    53b8:	df 90       	pop	r13
    53ba:	cf 90       	pop	r12
    53bc:	bf 90       	pop	r11
    53be:	af 90       	pop	r10
    53c0:	9f 90       	pop	r9
    53c2:	8f 90       	pop	r8
    53c4:	7f 90       	pop	r7
    53c6:	6f 90       	pop	r6
    53c8:	5f 90       	pop	r5
    53ca:	4f 90       	pop	r4
    53cc:	3f 90       	pop	r3
    53ce:	2f 90       	pop	r2
    53d0:	08 95       	ret

000053d2 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
    53d2:	cf 92       	push	r12
    53d4:	df 92       	push	r13
    53d6:	ef 92       	push	r14
    53d8:	ff 92       	push	r15
    53da:	1f 93       	push	r17
    53dc:	cf 93       	push	r28
    53de:	df 93       	push	r29
    53e0:	ec 01       	movw	r28, r24
    53e2:	6b 01       	movw	r12, r22
    53e4:	7a 01       	movw	r14, r20
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
    53e6:	62 e0       	ldi	r22, 0x02	; 2
    53e8:	0e 94 cc 19 	call	0x3398	; 0x3398 <VL53L0X_get_info_from_device>
    53ec:	18 2f       	mov	r17, r24

	if (Status == VL53L0X_ERROR_NONE) {
    53ee:	81 11       	cpse	r24, r1
    53f0:	1a c0       	rjmp	.+52     	; 0x5426 <VL53L0X_check_part_used+0x54>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
    53f2:	fe 01       	movw	r30, r28
    53f4:	e0 52       	subi	r30, 0x20	; 32
    53f6:	ff 4f       	sbci	r31, 0xFF	; 255

	if (ModuleIdInt == 0) {
    53f8:	80 81       	ld	r24, Z
    53fa:	81 11       	cpse	r24, r1
    53fc:	07 c0       	rjmp	.+14     	; 0x540c <VL53L0X_check_part_used+0x3a>
		*Revision = 0;
    53fe:	f6 01       	movw	r30, r12
    5400:	10 82       	st	Z, r1
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
    5402:	f7 01       	movw	r30, r14
    5404:	e0 5c       	subi	r30, 0xC0	; 192
    5406:	ff 4f       	sbci	r31, 0xFF	; 255
    5408:	10 82       	st	Z, r1
    540a:	0d c0       	rjmp	.+26     	; 0x5426 <VL53L0X_check_part_used+0x54>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
    540c:	fe 01       	movw	r30, r28
    540e:	ef 51       	subi	r30, 0x1F	; 31
    5410:	ff 4f       	sbci	r31, 0xFF	; 255
    5412:	80 81       	ld	r24, Z
    5414:	f6 01       	movw	r30, r12
    5416:	80 83       	st	Z, r24
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
    5418:	be 01       	movw	r22, r28
    541a:	6e 51       	subi	r22, 0x1E	; 30
    541c:	7f 4f       	sbci	r23, 0xFF	; 255
    541e:	c7 01       	movw	r24, r14
    5420:	80 5c       	subi	r24, 0xC0	; 192
    5422:	9f 4f       	sbci	r25, 0xFF	; 255
    5424:	be d2       	rcall	.+1404   	; 0x59a2 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    5426:	81 2f       	mov	r24, r17
    5428:	df 91       	pop	r29
    542a:	cf 91       	pop	r28
    542c:	1f 91       	pop	r17
    542e:	ff 90       	pop	r15
    5430:	ef 90       	pop	r14
    5432:	df 90       	pop	r13
    5434:	cf 90       	pop	r12
    5436:	08 95       	ret

00005438 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
    5438:	ef 92       	push	r14
    543a:	ff 92       	push	r15
    543c:	0f 93       	push	r16
    543e:	1f 93       	push	r17
    5440:	cf 93       	push	r28
    5442:	df 93       	push	r29
    5444:	00 d0       	rcall	.+0      	; 0x5446 <VL53L0X_get_device_info+0xe>
    5446:	cd b7       	in	r28, 0x3d	; 61
    5448:	de b7       	in	r29, 0x3e	; 62
    544a:	7c 01       	movw	r14, r24
    544c:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
    544e:	ab 01       	movw	r20, r22
    5450:	be 01       	movw	r22, r28
    5452:	6e 5f       	subi	r22, 0xFE	; 254
    5454:	7f 4f       	sbci	r23, 0xFF	; 255
    5456:	bd df       	rcall	.-134    	; 0x53d2 <VL53L0X_check_part_used>
	if (Status == VL53L0X_ERROR_NONE) {
    5458:	81 11       	cpse	r24, r1
    545a:	4d c0       	rjmp	.+154    	; 0x54f6 <VL53L0X_get_device_info+0xbe>
		if (Revision == 0) {
    545c:	8a 81       	ldd	r24, Y+2	; 0x02
    545e:	81 11       	cpse	r24, r1
    5460:	09 c0       	rjmp	.+18     	; 0x5474 <VL53L0X_get_device_info+0x3c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    5462:	8c e0       	ldi	r24, 0x0C	; 12
    5464:	eb eb       	ldi	r30, 0xBB	; 187
    5466:	f3 e0       	ldi	r31, 0x03	; 3
    5468:	d8 01       	movw	r26, r16
    546a:	01 90       	ld	r0, Z+
    546c:	0d 92       	st	X+, r0
    546e:	8a 95       	dec	r24
    5470:	e1 f7       	brne	.-8      	; 0x546a <VL53L0X_get_device_info+0x32>
    5472:	20 c0       	rjmp	.+64     	; 0x54b4 <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
    5474:	83 32       	cpi	r24, 0x23	; 35
    5476:	58 f4       	brcc	.+22     	; 0x548e <VL53L0X_get_device_info+0x56>
    5478:	80 32       	cpi	r24, 0x20	; 32
    547a:	59 f0       	breq	.+22     	; 0x5492 <VL53L0X_get_device_info+0x5a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    547c:	8c e0       	ldi	r24, 0x0C	; 12
    547e:	e7 ec       	ldi	r30, 0xC7	; 199
    5480:	f3 e0       	ldi	r31, 0x03	; 3
    5482:	d8 01       	movw	r26, r16
    5484:	01 90       	ld	r0, Z+
    5486:	0d 92       	st	X+, r0
    5488:	8a 95       	dec	r24
    548a:	e1 f7       	brne	.-8      	; 0x5484 <VL53L0X_get_device_info+0x4c>
    548c:	13 c0       	rjmp	.+38     	; 0x54b4 <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
    548e:	87 32       	cpi	r24, 0x27	; 39
    5490:	48 f4       	brcc	.+18     	; 0x54a4 <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    5492:	8c e0       	ldi	r24, 0x0C	; 12
    5494:	e3 ed       	ldi	r30, 0xD3	; 211
    5496:	f3 e0       	ldi	r31, 0x03	; 3
    5498:	d8 01       	movw	r26, r16
    549a:	01 90       	ld	r0, Z+
    549c:	0d 92       	st	X+, r0
    549e:	8a 95       	dec	r24
    54a0:	e1 f7       	brne	.-8      	; 0x549a <VL53L0X_get_device_info+0x62>
    54a2:	08 c0       	rjmp	.+16     	; 0x54b4 <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    54a4:	85 e1       	ldi	r24, 0x15	; 21
    54a6:	ef ed       	ldi	r30, 0xDF	; 223
    54a8:	f3 e0       	ldi	r31, 0x03	; 3
    54aa:	d8 01       	movw	r26, r16
    54ac:	01 90       	ld	r0, Z+
    54ae:	0d 92       	st	X+, r0
    54b0:	8a 95       	dec	r24
    54b2:	e1 f7       	brne	.-8      	; 0x54ac <VL53L0X_get_device_info+0x74>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
    54b4:	88 e0       	ldi	r24, 0x08	; 8
    54b6:	e4 ef       	ldi	r30, 0xF4	; 244
    54b8:	f3 e0       	ldi	r31, 0x03	; 3
    54ba:	d8 01       	movw	r26, r16
    54bc:	90 96       	adiw	r26, 0x20	; 32
    54be:	01 90       	ld	r0, Z+
    54c0:	0d 92       	st	X+, r0
    54c2:	8a 95       	dec	r24
    54c4:	e1 f7       	brne	.-8      	; 0x54be <VL53L0X_get_device_info+0x86>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
    54c6:	a8 01       	movw	r20, r16
    54c8:	40 5a       	subi	r20, 0xA0	; 160
    54ca:	5f 4f       	sbci	r21, 0xFF	; 255
    54cc:	60 ec       	ldi	r22, 0xC0	; 192
    54ce:	c7 01       	movw	r24, r14
    54d0:	80 d1       	rcall	.+768    	; 0x57d2 <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}
	if (Status == VL53L0X_ERROR_NONE) {
    54d2:	81 11       	cpse	r24, r1
    54d4:	10 c0       	rjmp	.+32     	; 0x54f6 <VL53L0X_get_device_info+0xbe>
		Status = VL53L0X_RdByte(Dev,
    54d6:	ae 01       	movw	r20, r28
    54d8:	4f 5f       	subi	r20, 0xFF	; 255
    54da:	5f 4f       	sbci	r21, 0xFF	; 255
    54dc:	62 ec       	ldi	r22, 0xC2	; 194
    54de:	c7 01       	movw	r24, r14
    54e0:	78 d1       	rcall	.+752    	; 0x57d2 <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
    54e2:	f8 01       	movw	r30, r16
    54e4:	ef 59       	subi	r30, 0x9F	; 159
    54e6:	ff 4f       	sbci	r31, 0xFF	; 255
    54e8:	91 e0       	ldi	r25, 0x01	; 1
    54ea:	90 83       	st	Z, r25
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
    54ec:	31 96       	adiw	r30, 0x01	; 1
    54ee:	99 81       	ldd	r25, Y+1	; 0x01
    54f0:	92 95       	swap	r25
    54f2:	9f 70       	andi	r25, 0x0F	; 15
    54f4:	90 83       	st	Z, r25
					(revision_id & 0xF0) >> 4;
	}

	return Status;
}
    54f6:	0f 90       	pop	r0
    54f8:	0f 90       	pop	r0
    54fa:	df 91       	pop	r29
    54fc:	cf 91       	pop	r28
    54fe:	1f 91       	pop	r17
    5500:	0f 91       	pop	r16
    5502:	ff 90       	pop	r15
    5504:	ef 90       	pop	r14
    5506:	08 95       	ret

00005508 <VL53L0X_i2c_init>:
  buff[2] = data >> 8;
  buff[1] = data >> 16;
  buff[0] = data >> 24;

  return VL53L0X_write_multi(deviceAddress, index, buff, 4);
}
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	00 d0       	rcall	.+0      	; 0x550e <VL53L0X_i2c_init+0x6>
    550e:	00 d0       	rcall	.+0      	; 0x5510 <VL53L0X_i2c_init+0x8>
    5510:	1f 92       	push	r1
    5512:	cd b7       	in	r28, 0x3d	; 61
    5514:	de b7       	in	r29, 0x3e	; 62
    5516:	80 e8       	ldi	r24, 0x80	; 128
    5518:	58 2f       	mov	r21, r24
    551a:	41 e0       	ldi	r20, 0x01	; 1
    551c:	68 e3       	ldi	r22, 0x38	; 56
    551e:	71 e0       	ldi	r23, 0x01	; 1
    5520:	80 e0       	ldi	r24, 0x00	; 0
    5522:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_init>
    5526:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <i2c_start>
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	0f 90       	pop	r0
    5530:	0f 90       	pop	r0
    5532:	0f 90       	pop	r0
    5534:	0f 90       	pop	r0
    5536:	0f 90       	pop	r0
    5538:	df 91       	pop	r29
    553a:	cf 91       	pop	r28
    553c:	08 95       	ret

0000553e <VL53L0X_write_multi>:
    553e:	ef 92       	push	r14
    5540:	ff 92       	push	r15
    5542:	0f 93       	push	r16
    5544:	1f 93       	push	r17
    5546:	cf 93       	push	r28
    5548:	df 93       	push	r29
    554a:	1f 92       	push	r1
    554c:	cd b7       	in	r28, 0x3d	; 61
    554e:	de b7       	in	r29, 0x3e	; 62
    5550:	18 2f       	mov	r17, r24
    5552:	69 83       	std	Y+1, r22	; 0x01
    5554:	7a 01       	movw	r14, r20
    5556:	41 e0       	ldi	r20, 0x01	; 1
    5558:	be 01       	movw	r22, r28
    555a:	6f 5f       	subi	r22, 0xFF	; 255
    555c:	7f 4f       	sbci	r23, 0xFF	; 255
    555e:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_transmit>
    5562:	40 2f       	mov	r20, r16
    5564:	b7 01       	movw	r22, r14
    5566:	81 2f       	mov	r24, r17
    5568:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_transmit>
    556c:	80 e0       	ldi	r24, 0x00	; 0
    556e:	90 e0       	ldi	r25, 0x00	; 0
    5570:	0f 90       	pop	r0
    5572:	df 91       	pop	r29
    5574:	cf 91       	pop	r28
    5576:	1f 91       	pop	r17
    5578:	0f 91       	pop	r16
    557a:	ff 90       	pop	r15
    557c:	ef 90       	pop	r14
    557e:	08 95       	ret

00005580 <VL53L0X_read_multi>:
    5580:	ef 92       	push	r14
    5582:	ff 92       	push	r15
    5584:	0f 93       	push	r16
    5586:	1f 93       	push	r17
    5588:	cf 93       	push	r28
    558a:	df 93       	push	r29
    558c:	1f 92       	push	r1
    558e:	cd b7       	in	r28, 0x3d	; 61
    5590:	de b7       	in	r29, 0x3e	; 62
    5592:	18 2f       	mov	r17, r24
    5594:	69 83       	std	Y+1, r22	; 0x01
    5596:	7a 01       	movw	r14, r20
    5598:	41 e0       	ldi	r20, 0x01	; 1
    559a:	be 01       	movw	r22, r28
    559c:	6f 5f       	subi	r22, 0xFF	; 255
    559e:	7f 4f       	sbci	r23, 0xFF	; 255
    55a0:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_transmit>
    55a4:	40 2f       	mov	r20, r16
    55a6:	b7 01       	movw	r22, r14
    55a8:	81 2f       	mov	r24, r17
    55aa:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_receive>
    55ae:	80 e0       	ldi	r24, 0x00	; 0
    55b0:	90 e0       	ldi	r25, 0x00	; 0
    55b2:	0f 90       	pop	r0
    55b4:	df 91       	pop	r29
    55b6:	cf 91       	pop	r28
    55b8:	1f 91       	pop	r17
    55ba:	0f 91       	pop	r16
    55bc:	ff 90       	pop	r15
    55be:	ef 90       	pop	r14
    55c0:	08 95       	ret

000055c2 <VL53L0X_write_byte>:
    55c2:	0f 93       	push	r16
    55c4:	1f 93       	push	r17
    55c6:	cf 93       	push	r28
    55c8:	df 93       	push	r29
    55ca:	1f 92       	push	r1
    55cc:	cd b7       	in	r28, 0x3d	; 61
    55ce:	de b7       	in	r29, 0x3e	; 62
    55d0:	49 83       	std	Y+1, r20	; 0x01
    55d2:	01 e0       	ldi	r16, 0x01	; 1
    55d4:	10 e0       	ldi	r17, 0x00	; 0
    55d6:	20 e0       	ldi	r18, 0x00	; 0
    55d8:	30 e0       	ldi	r19, 0x00	; 0
    55da:	ae 01       	movw	r20, r28
    55dc:	4f 5f       	subi	r20, 0xFF	; 255
    55de:	5f 4f       	sbci	r21, 0xFF	; 255
    55e0:	ae df       	rcall	.-164    	; 0x553e <VL53L0X_write_multi>
    55e2:	0f 90       	pop	r0
    55e4:	df 91       	pop	r29
    55e6:	cf 91       	pop	r28
    55e8:	1f 91       	pop	r17
    55ea:	0f 91       	pop	r16
    55ec:	08 95       	ret

000055ee <VL53L0X_write_word>:
    55ee:	0f 93       	push	r16
    55f0:	1f 93       	push	r17
    55f2:	cf 93       	push	r28
    55f4:	df 93       	push	r29
    55f6:	00 d0       	rcall	.+0      	; 0x55f8 <VL53L0X_write_word+0xa>
    55f8:	cd b7       	in	r28, 0x3d	; 61
    55fa:	de b7       	in	r29, 0x3e	; 62
    55fc:	4a 83       	std	Y+2, r20	; 0x02
    55fe:	59 83       	std	Y+1, r21	; 0x01
    5600:	02 e0       	ldi	r16, 0x02	; 2
    5602:	10 e0       	ldi	r17, 0x00	; 0
    5604:	20 e0       	ldi	r18, 0x00	; 0
    5606:	30 e0       	ldi	r19, 0x00	; 0
    5608:	ae 01       	movw	r20, r28
    560a:	4f 5f       	subi	r20, 0xFF	; 255
    560c:	5f 4f       	sbci	r21, 0xFF	; 255
    560e:	97 df       	rcall	.-210    	; 0x553e <VL53L0X_write_multi>
    5610:	0f 90       	pop	r0
    5612:	0f 90       	pop	r0
    5614:	df 91       	pop	r29
    5616:	cf 91       	pop	r28
    5618:	1f 91       	pop	r17
    561a:	0f 91       	pop	r16
    561c:	08 95       	ret

0000561e <VL53L0X_read_byte>:

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data) {
    561e:	0f 93       	push	r16
    5620:	1f 93       	push	r17
  return VL53L0X_read_multi(deviceAddress, index, data, 1);
    5622:	01 e0       	ldi	r16, 0x01	; 1
    5624:	10 e0       	ldi	r17, 0x00	; 0
    5626:	20 e0       	ldi	r18, 0x00	; 0
    5628:	30 e0       	ldi	r19, 0x00	; 0
    562a:	aa df       	rcall	.-172    	; 0x5580 <VL53L0X_read_multi>
}
    562c:	1f 91       	pop	r17
    562e:	0f 91       	pop	r16
    5630:	08 95       	ret

00005632 <VL53L0X_read_word>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data) {
    5632:	ef 92       	push	r14
    5634:	ff 92       	push	r15
    5636:	0f 93       	push	r16
    5638:	1f 93       	push	r17
    563a:	cf 93       	push	r28
    563c:	df 93       	push	r29
    563e:	00 d0       	rcall	.+0      	; 0x5640 <VL53L0X_read_word+0xe>
    5640:	cd b7       	in	r28, 0x3d	; 61
    5642:	de b7       	in	r29, 0x3e	; 62
    5644:	7a 01       	movw	r14, r20
  uint8_t buff[2];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 2);
    5646:	02 e0       	ldi	r16, 0x02	; 2
    5648:	10 e0       	ldi	r17, 0x00	; 0
    564a:	20 e0       	ldi	r18, 0x00	; 0
    564c:	30 e0       	ldi	r19, 0x00	; 0
    564e:	ae 01       	movw	r20, r28
    5650:	4f 5f       	subi	r20, 0xFF	; 255
    5652:	5f 4f       	sbci	r21, 0xFF	; 255
    5654:	95 df       	rcall	.-214    	; 0x5580 <VL53L0X_read_multi>

  uint16_t tmp;
  tmp = buff[0];
    5656:	29 81       	ldd	r18, Y+1	; 0x01
    5658:	30 e0       	ldi	r19, 0x00	; 0
  tmp <<= 8;
    565a:	32 2f       	mov	r19, r18
    565c:	22 27       	eor	r18, r18
  tmp |= buff[1];
  *data = tmp;
    565e:	4a 81       	ldd	r20, Y+2	; 0x02
    5660:	24 2b       	or	r18, r20
    5662:	f7 01       	movw	r30, r14
    5664:	31 83       	std	Z+1, r19	; 0x01
    5666:	20 83       	st	Z, r18

  return r;
}
    5668:	0f 90       	pop	r0
    566a:	0f 90       	pop	r0
    566c:	df 91       	pop	r29
    566e:	cf 91       	pop	r28
    5670:	1f 91       	pop	r17
    5672:	0f 91       	pop	r16
    5674:	ff 90       	pop	r15
    5676:	ef 90       	pop	r14
    5678:	08 95       	ret

0000567a <VL53L0X_read_dword>:

int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data) {
    567a:	ef 92       	push	r14
    567c:	ff 92       	push	r15
    567e:	0f 93       	push	r16
    5680:	1f 93       	push	r17
    5682:	cf 93       	push	r28
    5684:	df 93       	push	r29
    5686:	00 d0       	rcall	.+0      	; 0x5688 <VL53L0X_read_dword+0xe>
    5688:	00 d0       	rcall	.+0      	; 0x568a <VL53L0X_read_dword+0x10>
    568a:	cd b7       	in	r28, 0x3d	; 61
    568c:	de b7       	in	r29, 0x3e	; 62
    568e:	7a 01       	movw	r14, r20
  uint8_t buff[4];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 4);
    5690:	04 e0       	ldi	r16, 0x04	; 4
    5692:	10 e0       	ldi	r17, 0x00	; 0
    5694:	20 e0       	ldi	r18, 0x00	; 0
    5696:	30 e0       	ldi	r19, 0x00	; 0
    5698:	ae 01       	movw	r20, r28
    569a:	4f 5f       	subi	r20, 0xFF	; 255
    569c:	5f 4f       	sbci	r21, 0xFF	; 255
    569e:	70 df       	rcall	.-288    	; 0x5580 <VL53L0X_read_multi>

  uint32_t tmp;
  tmp = buff[0];
    56a0:	49 81       	ldd	r20, Y+1	; 0x01
    56a2:	50 e0       	ldi	r21, 0x00	; 0
    56a4:	60 e0       	ldi	r22, 0x00	; 0
    56a6:	70 e0       	ldi	r23, 0x00	; 0
  tmp <<= 8;
    56a8:	76 2f       	mov	r23, r22
    56aa:	65 2f       	mov	r22, r21
    56ac:	54 2f       	mov	r21, r20
    56ae:	44 27       	eor	r20, r20
  tmp |= buff[1];
    56b0:	2a 81       	ldd	r18, Y+2	; 0x02
    56b2:	42 2b       	or	r20, r18
  tmp <<= 8;
    56b4:	76 2f       	mov	r23, r22
    56b6:	65 2f       	mov	r22, r21
    56b8:	54 2f       	mov	r21, r20
    56ba:	44 27       	eor	r20, r20
  tmp |= buff[2];
    56bc:	2b 81       	ldd	r18, Y+3	; 0x03
    56be:	42 2b       	or	r20, r18
  tmp <<= 8;
    56c0:	76 2f       	mov	r23, r22
    56c2:	65 2f       	mov	r22, r21
    56c4:	54 2f       	mov	r21, r20
    56c6:	44 27       	eor	r20, r20
  tmp |= buff[3];

  *data = tmp;
    56c8:	2c 81       	ldd	r18, Y+4	; 0x04
    56ca:	42 2b       	or	r20, r18
    56cc:	f7 01       	movw	r30, r14
    56ce:	40 83       	st	Z, r20
    56d0:	51 83       	std	Z+1, r21	; 0x01
    56d2:	62 83       	std	Z+2, r22	; 0x02
    56d4:	73 83       	std	Z+3, r23	; 0x03

  return r;
}
    56d6:	0f 90       	pop	r0
    56d8:	0f 90       	pop	r0
    56da:	0f 90       	pop	r0
    56dc:	0f 90       	pop	r0
    56de:	df 91       	pop	r29
    56e0:	cf 91       	pop	r28
    56e2:	1f 91       	pop	r17
    56e4:	0f 91       	pop	r16
    56e6:	ff 90       	pop	r15
    56e8:	ef 90       	pop	r14
    56ea:	08 95       	ret

000056ec <VL53L0X_WriteMulti>:

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    56ec:	0f 93       	push	r16
    56ee:	1f 93       	push	r17
    56f0:	cf 93       	push	r28
    56f2:	00 34       	cpi	r16, 0x40	; 64
    56f4:	11 05       	cpc	r17, r1
    56f6:	21 05       	cpc	r18, r1
    56f8:	31 05       	cpc	r19, r1
    56fa:	10 f0       	brcs	.+4      	; 0x5700 <VL53L0X_WriteMulti+0x14>
    56fc:	cc ef       	ldi	r28, 0xFC	; 252
    56fe:	01 c0       	rjmp	.+2      	; 0x5702 <VL53L0X_WriteMulti+0x16>
    5700:	c0 e0       	ldi	r28, 0x00	; 0
    5702:	fc 01       	movw	r30, r24
    5704:	ef 5b       	subi	r30, 0xBF	; 191
    5706:	fe 4f       	sbci	r31, 0xFE	; 254
    5708:	80 81       	ld	r24, Z
    570a:	19 df       	rcall	.-462    	; 0x553e <VL53L0X_write_multi>
    570c:	89 2b       	or	r24, r25
    570e:	09 f0       	breq	.+2      	; 0x5712 <VL53L0X_WriteMulti+0x26>
    5710:	cc ee       	ldi	r28, 0xEC	; 236
    5712:	8c 2f       	mov	r24, r28
    5714:	cf 91       	pop	r28
    5716:	1f 91       	pop	r17
    5718:	0f 91       	pop	r16
    571a:	08 95       	ret

0000571c <VL53L0X_ReadMulti>:
    571c:	0f 93       	push	r16
    571e:	1f 93       	push	r17
    5720:	cf 93       	push	r28
    5722:	00 34       	cpi	r16, 0x40	; 64
    5724:	11 05       	cpc	r17, r1
    5726:	21 05       	cpc	r18, r1
    5728:	31 05       	cpc	r19, r1
    572a:	10 f0       	brcs	.+4      	; 0x5730 <VL53L0X_ReadMulti+0x14>
    572c:	cc ef       	ldi	r28, 0xFC	; 252
    572e:	01 c0       	rjmp	.+2      	; 0x5732 <VL53L0X_ReadMulti+0x16>
    5730:	c0 e0       	ldi	r28, 0x00	; 0
    5732:	fc 01       	movw	r30, r24
    5734:	ef 5b       	subi	r30, 0xBF	; 191
    5736:	fe 4f       	sbci	r31, 0xFE	; 254
    5738:	80 81       	ld	r24, Z
    573a:	22 df       	rcall	.-444    	; 0x5580 <VL53L0X_read_multi>
    573c:	89 2b       	or	r24, r25
    573e:	09 f0       	breq	.+2      	; 0x5742 <VL53L0X_ReadMulti+0x26>
    5740:	cc ee       	ldi	r28, 0xEC	; 236
    5742:	8c 2f       	mov	r24, r28
    5744:	cf 91       	pop	r28
    5746:	1f 91       	pop	r17
    5748:	0f 91       	pop	r16
    574a:	08 95       	ret

0000574c <VL53L0X_WrByte>:
    574c:	8f 5b       	subi	r24, 0xBF	; 191
    574e:	9e 4f       	sbci	r25, 0xFE	; 254
    5750:	fc 01       	movw	r30, r24
    5752:	80 81       	ld	r24, Z
    5754:	36 df       	rcall	.-404    	; 0x55c2 <VL53L0X_write_byte>
    5756:	89 2b       	or	r24, r25
    5758:	11 f0       	breq	.+4      	; 0x575e <VL53L0X_WrByte+0x12>
    575a:	8c ee       	ldi	r24, 0xEC	; 236
    575c:	08 95       	ret
    575e:	80 e0       	ldi	r24, 0x00	; 0
    5760:	08 95       	ret

00005762 <VL53L0X_WrWord>:
    5762:	8f 5b       	subi	r24, 0xBF	; 191
    5764:	9e 4f       	sbci	r25, 0xFE	; 254
    5766:	fc 01       	movw	r30, r24
    5768:	80 81       	ld	r24, Z
    576a:	41 df       	rcall	.-382    	; 0x55ee <VL53L0X_write_word>
    576c:	89 2b       	or	r24, r25
    576e:	11 f0       	breq	.+4      	; 0x5774 <VL53L0X_WrWord+0x12>
    5770:	8c ee       	ldi	r24, 0xEC	; 236
    5772:	08 95       	ret
    5774:	80 e0       	ldi	r24, 0x00	; 0
    5776:	08 95       	ret

00005778 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
    5778:	ef 92       	push	r14
    577a:	ff 92       	push	r15
    577c:	0f 93       	push	r16
    577e:	1f 93       	push	r17
    5780:	cf 93       	push	r28
    5782:	df 93       	push	r29
    5784:	1f 92       	push	r1
    5786:	cd b7       	in	r28, 0x3d	; 61
    5788:	de b7       	in	r29, 0x3e	; 62
    578a:	f6 2e       	mov	r15, r22
    578c:	e4 2e       	mov	r14, r20
    578e:	12 2f       	mov	r17, r18
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
    5790:	8f 5b       	subi	r24, 0xBF	; 191
    5792:	9e 4f       	sbci	r25, 0xFE	; 254
    5794:	fc 01       	movw	r30, r24
    5796:	00 81       	ld	r16, Z

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
    5798:	ae 01       	movw	r20, r28
    579a:	4f 5f       	subi	r20, 0xFF	; 255
    579c:	5f 4f       	sbci	r21, 0xFF	; 255
    579e:	80 2f       	mov	r24, r16
    57a0:	3e df       	rcall	.-388    	; 0x561e <VL53L0X_read_byte>

    if (status_int != 0)
    57a2:	89 2b       	or	r24, r25
    57a4:	21 f0       	breq	.+8      	; 0x57ae <VL53L0X_UpdateByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    57a6:	8c ee       	ldi	r24, 0xEC	; 236
    57a8:	0c c0       	rjmp	.+24     	; 0x57c2 <VL53L0X_UpdateByte+0x4a>
    57aa:	80 e0       	ldi	r24, 0x00	; 0
    57ac:	0a c0       	rjmp	.+20     	; 0x57c2 <VL53L0X_UpdateByte+0x4a>

    if (Status == VL53L0X_ERROR_NONE) {
        data = (data & AndData) | OrData;
    57ae:	49 81       	ldd	r20, Y+1	; 0x01
    57b0:	4e 21       	and	r20, r14
    57b2:	41 2b       	or	r20, r17
    57b4:	49 83       	std	Y+1, r20	; 0x01
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
    57b6:	6f 2d       	mov	r22, r15
    57b8:	80 2f       	mov	r24, r16
    57ba:	03 df       	rcall	.-506    	; 0x55c2 <VL53L0X_write_byte>

        if (status_int != 0)
    57bc:	89 2b       	or	r24, r25
    57be:	a9 f3       	breq	.-22     	; 0x57aa <VL53L0X_UpdateByte+0x32>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    57c0:	8c ee       	ldi	r24, 0xEC	; 236
    }

    return Status;
}
    57c2:	0f 90       	pop	r0
    57c4:	df 91       	pop	r29
    57c6:	cf 91       	pop	r28
    57c8:	1f 91       	pop	r17
    57ca:	0f 91       	pop	r16
    57cc:	ff 90       	pop	r15
    57ce:	ef 90       	pop	r14
    57d0:	08 95       	ret

000057d2 <VL53L0X_RdByte>:
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
    57d2:	8f 5b       	subi	r24, 0xBF	; 191
    57d4:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
    57d6:	fc 01       	movw	r30, r24
    57d8:	80 81       	ld	r24, Z
    57da:	21 df       	rcall	.-446    	; 0x561e <VL53L0X_read_byte>

    if (status_int != 0)
    57dc:	89 2b       	or	r24, r25
    57de:	11 f0       	breq	.+4      	; 0x57e4 <VL53L0X_RdByte+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    57e0:	8c ee       	ldi	r24, 0xEC	; 236
    57e2:	08 95       	ret

    return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    57e4:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    57e6:	08 95       	ret

000057e8 <VL53L0X_RdWord>:
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
    57e8:	8f 5b       	subi	r24, 0xBF	; 191
    57ea:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_word(deviceAddress, index, data);
    57ec:	fc 01       	movw	r30, r24
    57ee:	80 81       	ld	r24, Z
    57f0:	20 df       	rcall	.-448    	; 0x5632 <VL53L0X_read_word>

    if (status_int != 0)
    57f2:	89 2b       	or	r24, r25
    57f4:	11 f0       	breq	.+4      	; 0x57fa <VL53L0X_RdWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    57f6:	8c ee       	ldi	r24, 0xEC	; 236
    57f8:	08 95       	ret

    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    57fa:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    57fc:	08 95       	ret

000057fe <VL53L0X_RdDWord>:
VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
    57fe:	8f 5b       	subi	r24, 0xBF	; 191
    5800:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
    5802:	fc 01       	movw	r30, r24
    5804:	80 81       	ld	r24, Z
    5806:	39 df       	rcall	.-398    	; 0x567a <VL53L0X_read_dword>

    if (status_int != 0)
    5808:	89 2b       	or	r24, r25
    580a:	11 f0       	breq	.+4      	; 0x5810 <VL53L0X_RdDWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    580c:	8c ee       	ldi	r24, 0xEC	; 236
    580e:	08 95       	ret

    return Status;
}

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    5810:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    5812:	08 95       	ret

00005814 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    5814:	cf 93       	push	r28
    5816:	df 93       	push	r29
    5818:	00 d0       	rcall	.+0      	; 0x581a <VL53L0X_PollingDelay+0x6>
    581a:	00 d0       	rcall	.+0      	; 0x581c <VL53L0X_PollingDelay+0x8>
    581c:	cd b7       	in	r28, 0x3d	; 61
    581e:	de b7       	in	r29, 0x3e	; 62
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
    volatile uint32_t i;
    LOG_FUNCTION_START("");

    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
    5820:	19 82       	std	Y+1, r1	; 0x01
    5822:	1a 82       	std	Y+2, r1	; 0x02
    5824:	1b 82       	std	Y+3, r1	; 0x03
    5826:	1c 82       	std	Y+4, r1	; 0x04
    5828:	89 81       	ldd	r24, Y+1	; 0x01
    582a:	9a 81       	ldd	r25, Y+2	; 0x02
    582c:	ab 81       	ldd	r26, Y+3	; 0x03
    582e:	bc 81       	ldd	r27, Y+4	; 0x04
    5830:	8a 3f       	cpi	r24, 0xFA	; 250
    5832:	91 05       	cpc	r25, r1
    5834:	a1 05       	cpc	r26, r1
    5836:	b1 05       	cpc	r27, r1
    5838:	a8 f4       	brcc	.+42     	; 0x5864 <VL53L0X_PollingDelay+0x50>
        //Do nothing
        asm("nop");
    583a:	00 00       	nop
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
    volatile uint32_t i;
    LOG_FUNCTION_START("");

    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
    583c:	89 81       	ldd	r24, Y+1	; 0x01
    583e:	9a 81       	ldd	r25, Y+2	; 0x02
    5840:	ab 81       	ldd	r26, Y+3	; 0x03
    5842:	bc 81       	ldd	r27, Y+4	; 0x04
    5844:	01 96       	adiw	r24, 0x01	; 1
    5846:	a1 1d       	adc	r26, r1
    5848:	b1 1d       	adc	r27, r1
    584a:	89 83       	std	Y+1, r24	; 0x01
    584c:	9a 83       	std	Y+2, r25	; 0x02
    584e:	ab 83       	std	Y+3, r26	; 0x03
    5850:	bc 83       	std	Y+4, r27	; 0x04
    5852:	89 81       	ldd	r24, Y+1	; 0x01
    5854:	9a 81       	ldd	r25, Y+2	; 0x02
    5856:	ab 81       	ldd	r26, Y+3	; 0x03
    5858:	bc 81       	ldd	r27, Y+4	; 0x04
    585a:	8a 3f       	cpi	r24, 0xFA	; 250
    585c:	91 05       	cpc	r25, r1
    585e:	a1 05       	cpc	r26, r1
    5860:	b1 05       	cpc	r27, r1
    5862:	58 f3       	brcs	.-42     	; 0x583a <VL53L0X_PollingDelay+0x26>
        asm("nop");
    }

    LOG_FUNCTION_END(status);
    return status;
}
    5864:	80 e0       	ldi	r24, 0x00	; 0
    5866:	0f 90       	pop	r0
    5868:	0f 90       	pop	r0
    586a:	0f 90       	pop	r0
    586c:	0f 90       	pop	r0
    586e:	df 91       	pop	r29
    5870:	cf 91       	pop	r28
    5872:	08 95       	ret

00005874 <__mulsi3>:
    5874:	db 01       	movw	r26, r22
    5876:	8f 93       	push	r24
    5878:	9f 93       	push	r25
    587a:	3c d0       	rcall	.+120    	; 0x58f4 <__muluhisi3>
    587c:	bf 91       	pop	r27
    587e:	af 91       	pop	r26
    5880:	a2 9f       	mul	r26, r18
    5882:	80 0d       	add	r24, r0
    5884:	91 1d       	adc	r25, r1
    5886:	a3 9f       	mul	r26, r19
    5888:	90 0d       	add	r25, r0
    588a:	b2 9f       	mul	r27, r18
    588c:	90 0d       	add	r25, r0
    588e:	11 24       	eor	r1, r1
    5890:	08 95       	ret

00005892 <__udivmodsi4>:
    5892:	a1 e2       	ldi	r26, 0x21	; 33
    5894:	1a 2e       	mov	r1, r26
    5896:	aa 1b       	sub	r26, r26
    5898:	bb 1b       	sub	r27, r27
    589a:	fd 01       	movw	r30, r26
    589c:	0d c0       	rjmp	.+26     	; 0x58b8 <__udivmodsi4_ep>

0000589e <__udivmodsi4_loop>:
    589e:	aa 1f       	adc	r26, r26
    58a0:	bb 1f       	adc	r27, r27
    58a2:	ee 1f       	adc	r30, r30
    58a4:	ff 1f       	adc	r31, r31
    58a6:	a2 17       	cp	r26, r18
    58a8:	b3 07       	cpc	r27, r19
    58aa:	e4 07       	cpc	r30, r20
    58ac:	f5 07       	cpc	r31, r21
    58ae:	20 f0       	brcs	.+8      	; 0x58b8 <__udivmodsi4_ep>
    58b0:	a2 1b       	sub	r26, r18
    58b2:	b3 0b       	sbc	r27, r19
    58b4:	e4 0b       	sbc	r30, r20
    58b6:	f5 0b       	sbc	r31, r21

000058b8 <__udivmodsi4_ep>:
    58b8:	66 1f       	adc	r22, r22
    58ba:	77 1f       	adc	r23, r23
    58bc:	88 1f       	adc	r24, r24
    58be:	99 1f       	adc	r25, r25
    58c0:	1a 94       	dec	r1
    58c2:	69 f7       	brne	.-38     	; 0x589e <__udivmodsi4_loop>
    58c4:	60 95       	com	r22
    58c6:	70 95       	com	r23
    58c8:	80 95       	com	r24
    58ca:	90 95       	com	r25
    58cc:	9b 01       	movw	r18, r22
    58ce:	ac 01       	movw	r20, r24
    58d0:	bd 01       	movw	r22, r26
    58d2:	cf 01       	movw	r24, r30
    58d4:	08 95       	ret

000058d6 <__umulhisi3>:
    58d6:	a2 9f       	mul	r26, r18
    58d8:	b0 01       	movw	r22, r0
    58da:	b3 9f       	mul	r27, r19
    58dc:	c0 01       	movw	r24, r0
    58de:	a3 9f       	mul	r26, r19
    58e0:	70 0d       	add	r23, r0
    58e2:	81 1d       	adc	r24, r1
    58e4:	11 24       	eor	r1, r1
    58e6:	91 1d       	adc	r25, r1
    58e8:	b2 9f       	mul	r27, r18
    58ea:	70 0d       	add	r23, r0
    58ec:	81 1d       	adc	r24, r1
    58ee:	11 24       	eor	r1, r1
    58f0:	91 1d       	adc	r25, r1
    58f2:	08 95       	ret

000058f4 <__muluhisi3>:
    58f4:	f0 df       	rcall	.-32     	; 0x58d6 <__umulhisi3>
    58f6:	a5 9f       	mul	r26, r21
    58f8:	90 0d       	add	r25, r0
    58fa:	b4 9f       	mul	r27, r20
    58fc:	90 0d       	add	r25, r0
    58fe:	a4 9f       	mul	r26, r20
    5900:	80 0d       	add	r24, r0
    5902:	91 1d       	adc	r25, r1
    5904:	11 24       	eor	r1, r1
    5906:	08 95       	ret

00005908 <__umulsidi3>:
    5908:	e8 94       	clt

0000590a <__umulsidi3_helper>:
    590a:	df 93       	push	r29
    590c:	cf 93       	push	r28
    590e:	fc 01       	movw	r30, r24
    5910:	db 01       	movw	r26, r22
    5912:	e1 df       	rcall	.-62     	; 0x58d6 <__umulhisi3>
    5914:	7f 93       	push	r23
    5916:	6f 93       	push	r22
    5918:	e9 01       	movw	r28, r18
    591a:	9a 01       	movw	r18, r20
    591c:	ac 01       	movw	r20, r24
    591e:	bf 93       	push	r27
    5920:	af 93       	push	r26
    5922:	3f 93       	push	r19
    5924:	2f 93       	push	r18
    5926:	df 01       	movw	r26, r30
    5928:	d6 df       	rcall	.-84     	; 0x58d6 <__umulhisi3>
    592a:	26 f4       	brtc	.+8      	; 0x5934 <__umulsidi3_helper+0x2a>
    592c:	6c 1b       	sub	r22, r28
    592e:	7d 0b       	sbc	r23, r29
    5930:	82 0b       	sbc	r24, r18
    5932:	93 0b       	sbc	r25, r19
    5934:	9e 01       	movw	r18, r28
    5936:	eb 01       	movw	r28, r22
    5938:	fc 01       	movw	r30, r24
    593a:	2b d0       	rcall	.+86     	; 0x5992 <__muldi3_6>
    593c:	af 91       	pop	r26
    593e:	bf 91       	pop	r27
    5940:	2f 91       	pop	r18
    5942:	3f 91       	pop	r19
    5944:	26 d0       	rcall	.+76     	; 0x5992 <__muldi3_6>
    5946:	be 01       	movw	r22, r28
    5948:	cf 01       	movw	r24, r30
    594a:	f9 01       	movw	r30, r18
    594c:	2f 91       	pop	r18
    594e:	3f 91       	pop	r19
    5950:	cf 91       	pop	r28
    5952:	df 91       	pop	r29
    5954:	08 95       	ret

00005956 <__ashrdi3>:
    5956:	97 fb       	bst	r25, 7
    5958:	10 f8       	bld	r1, 0

0000595a <__lshrdi3>:
    595a:	16 94       	lsr	r1
    595c:	00 08       	sbc	r0, r0
    595e:	0f 93       	push	r16
    5960:	08 30       	cpi	r16, 0x08	; 8
    5962:	98 f0       	brcs	.+38     	; 0x598a <__lshrdi3+0x30>
    5964:	08 50       	subi	r16, 0x08	; 8
    5966:	23 2f       	mov	r18, r19
    5968:	34 2f       	mov	r19, r20
    596a:	45 2f       	mov	r20, r21
    596c:	56 2f       	mov	r21, r22
    596e:	67 2f       	mov	r22, r23
    5970:	78 2f       	mov	r23, r24
    5972:	89 2f       	mov	r24, r25
    5974:	90 2d       	mov	r25, r0
    5976:	f4 cf       	rjmp	.-24     	; 0x5960 <__lshrdi3+0x6>
    5978:	05 94       	asr	r0
    597a:	97 95       	ror	r25
    597c:	87 95       	ror	r24
    597e:	77 95       	ror	r23
    5980:	67 95       	ror	r22
    5982:	57 95       	ror	r21
    5984:	47 95       	ror	r20
    5986:	37 95       	ror	r19
    5988:	27 95       	ror	r18
    598a:	0a 95       	dec	r16
    598c:	aa f7       	brpl	.-22     	; 0x5978 <__lshrdi3+0x1e>
    598e:	0f 91       	pop	r16
    5990:	08 95       	ret

00005992 <__muldi3_6>:
    5992:	a1 df       	rcall	.-190    	; 0x58d6 <__umulhisi3>
    5994:	46 0f       	add	r20, r22
    5996:	57 1f       	adc	r21, r23
    5998:	c8 1f       	adc	r28, r24
    599a:	d9 1f       	adc	r29, r25
    599c:	08 f4       	brcc	.+2      	; 0x59a0 <__muldi3_6+0xe>
    599e:	31 96       	adiw	r30, 0x01	; 1
    59a0:	08 95       	ret

000059a2 <strcpy>:
    59a2:	fb 01       	movw	r30, r22
    59a4:	dc 01       	movw	r26, r24
    59a6:	01 90       	ld	r0, Z+
    59a8:	0d 92       	st	X+, r0
    59aa:	00 20       	and	r0, r0
    59ac:	e1 f7       	brne	.-8      	; 0x59a6 <strcpy+0x4>
    59ae:	08 95       	ret

000059b0 <_exit>:
    59b0:	f8 94       	cli

000059b2 <__stop_program>:
    59b2:	ff cf       	rjmp	.-2      	; 0x59b2 <__stop_program>
