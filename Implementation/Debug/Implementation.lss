
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000abc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800100  00800100  00000b30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000448  00000000  00000000  00000ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000484b  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001778  00000000  00000000  00005833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000209e  00000000  00000000  00006fab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e64  00000000  00000000  0000904c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018c8  00000000  00000000  00009eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002aa4  00000000  00000000  0000b778  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000398  00000000  00000000  0000e21c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	2a c1       	rjmp	.+596    	; 0x25a <__vector_1>
   6:	00 00       	nop
   8:	32 c1       	rjmp	.+612    	; 0x26e <__vector_2>
   a:	00 00       	nop
   c:	3a c1       	rjmp	.+628    	; 0x282 <__vector_3>
   e:	00 00       	nop
  10:	fc c0       	rjmp	.+504    	; 0x20a <__vector_4>
  12:	00 00       	nop
  14:	04 c1       	rjmp	.+520    	; 0x21e <__vector_5>
  16:	00 00       	nop
  18:	0c c1       	rjmp	.+536    	; 0x232 <__vector_6>
  1a:	00 00       	nop
  1c:	14 c1       	rjmp	.+552    	; 0x246 <__vector_7>
  1e:	00 00       	nop
  20:	ad c4       	rjmp	.+2394   	; 0x97c <__vector_8>
  22:	00 00       	nop
  24:	32 c3       	rjmp	.+1636   	; 0x68a <__vector_9>
  26:	00 00       	nop
  28:	6c c3       	rjmp	.+1752   	; 0x702 <__vector_10>
  2a:	00 00       	nop
  2c:	03 c3       	rjmp	.+1542   	; 0x634 <__vector_11>
  2e:	00 00       	nop
  30:	a4 c2       	rjmp	.+1352   	; 0x57a <__vector_12>
  32:	00 00       	nop
  34:	17 c2       	rjmp	.+1070   	; 0x464 <__vector_13>
  36:	00 00       	nop
  38:	75 c2       	rjmp	.+1258   	; 0x524 <__vector_14>
  3a:	00 00       	nop
  3c:	e8 c1       	rjmp	.+976    	; 0x40e <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	97 c1       	rjmp	.+814    	; 0x37c <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec eb       	ldi	r30, 0xBC	; 188
  a0:	fa e0       	ldi	r31, 0x0A	; 10
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	f9 c4       	rjmp	.+2546   	; 0xab8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

#include <util/delay.h>

int main()
{
	device_disableJTAG();
  c8:	9c d0       	rcall	.+312    	; 0x202 <device_disableJTAG>
  ca:	83 d4       	rcall	.+2310   	; 0x9d2 <debug_init>
  cc:	2f d0       	rcall	.+94     	; 0x12c <surfaceSensor_init>
  ce:	e0 e0       	ldi	r30, 0x00	; 0
  d0:	f1 e0       	ldi	r31, 0x01	; 1
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	82 83       	std	Z+2, r24	; 0x02
  d6:	11 82       	std	Z+1, r1	; 0x01
  d8:	80 83       	st	Z, r24
  da:	13 82       	std	Z+3, r1	; 0x03
  dc:	e4 e0       	ldi	r30, 0x04	; 4
  de:	f1 e0       	ldi	r31, 0x01	; 1
  e0:	82 83       	std	Z+2, r24	; 0x02
  e2:	81 83       	std	Z+1, r24	; 0x01
  e4:	80 83       	st	Z, r24
  e6:	13 82       	std	Z+3, r1	; 0x03
  e8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
  ec:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end+0x2>
  f4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x3>
  f8:	ce d0       	rcall	.+412    	; 0x296 <gpio_out_set>
  fa:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <s_gpio2>
  fe:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <s_gpio2+0x1>
 102:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <s_gpio2+0x2>
 106:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <s_gpio2+0x3>
 10a:	c5 d0       	rcall	.+394    	; 0x296 <gpio_out_set>
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	89 e6       	ldi	r24, 0x69	; 105
 110:	98 e1       	ldi	r25, 0x18	; 24
 112:	21 50       	subi	r18, 0x01	; 1
 114:	80 40       	sbci	r24, 0x00	; 0
 116:	90 40       	sbci	r25, 0x00	; 0
 118:	e1 f7       	brne	.-8      	; 0x112 <main+0x4a>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x54>
 11c:	00 00       	nop
 11e:	f6 cf       	rjmp	.-20     	; 0x10c <main+0x44>

00000120 <surfaceSensor_start>:
void surfaceSensor_read(){
	u8 aux = 0;
	aux = surface_read(sensorOne);
	debug_writeChar(aux);
	aux = surface_read(sensorTwo);
	debug_writeChar(aux);
 120:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <s_adc>
 124:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <s_adc+0x1>
 128:	5e c0       	rjmp	.+188    	; 0x1e6 <adc_start>
 12a:	08 95       	ret

0000012c <surfaceSensor_init>:
}

void surfaceSensor_init(){
	s_adc.conversionMode = SINGLE_CONVERSION;
 12c:	ef e0       	ldi	r30, 0x0F	; 15
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	81 83       	std	Z+1, r24	; 0x01
	s_adc.prescaler = ADC_PRESCALER_128;
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	90 83       	st	Z, r25
	
	sensorOne.led_pin.direction = OUTPUT;
 138:	e1 e1       	ldi	r30, 0x11	; 17
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	85 83       	std	Z+5, r24	; 0x05
	sensorOne.led_pin.number = 1;
 140:	84 83       	std	Z+4, r24	; 0x04
	sensorOne.led_pin.port = PB;
 142:	83 83       	std	Z+3, r24	; 0x03
	sensorOne.led_pin.pullUp = NO_PULL;
 144:	16 82       	std	Z+6, r1	; 0x06
	sensorOne.transistor_channel.channel = 6;
 146:	26 e0       	ldi	r18, 0x06	; 6
 148:	22 83       	std	Z+2, r18	; 0x02
	sensorOne.transistor_channel.referenceVoltage = AVCC;
 14a:	81 83       	std	Z+1, r24	; 0x01
	sensorOne.transistor_channel.resolution = _8BIT_RES;
 14c:	80 83       	st	Z, r24
	
	sensorTwo.led_pin.direction = OUTPUT;
 14e:	e8 e0       	ldi	r30, 0x08	; 8
 150:	f1 e0       	ldi	r31, 0x01	; 1
 152:	85 83       	std	Z+5, r24	; 0x05
	sensorTwo.led_pin.number = 0;
 154:	14 82       	std	Z+4, r1	; 0x04
	sensorTwo.led_pin.port = PA;
 156:	13 82       	std	Z+3, r1	; 0x03
	sensorTwo.led_pin.pullUp = NO_PULL;
 158:	16 82       	std	Z+6, r1	; 0x06
	sensorTwo.transistor_channel.channel = 7;
 15a:	92 83       	std	Z+2, r25	; 0x02
	sensorTwo.transistor_channel.referenceVoltage = AVCC;
 15c:	81 83       	std	Z+1, r24	; 0x01
	sensorTwo.transistor_channel.resolution = _8BIT_RES;
 15e:	80 83       	st	Z, r24
	adc_init(s_adc);
 160:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <s_adc>
 164:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <s_adc+0x1>
	surfaceSensor_start();
 168:	02 d0       	rcall	.+4      	; 0x16e <adc_init>
 16a:	da cf       	rjmp	.-76     	; 0x120 <surfaceSensor_start>
 16c:	08 95       	ret

0000016e <adc_init>:
			temp = ADCH;
			readValue |= (temp << 8);
			break;
	}
	return readValue;
}
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	d8 2f       	mov	r29, r24
 176:	c9 2f       	mov	r28, r25
 178:	82 fb       	bst	r24, 2
 17a:	44 27       	eor	r20, r20
 17c:	40 f9       	bld	r20, 0
 17e:	62 e0       	ldi	r22, 0x02	; 2
 180:	8a e7       	ldi	r24, 0x7A	; 122
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	a4 d0       	rcall	.+328    	; 0x2ce <updateBit>
 186:	d1 fb       	bst	r29, 1
 188:	44 27       	eor	r20, r20
 18a:	40 f9       	bld	r20, 0
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	8a e7       	ldi	r24, 0x7A	; 122
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	9d d0       	rcall	.+314    	; 0x2ce <updateBit>
 194:	4d 2f       	mov	r20, r29
 196:	41 70       	andi	r20, 0x01	; 1
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	8a e7       	ldi	r24, 0x7A	; 122
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	97 d0       	rcall	.+302    	; 0x2ce <updateBit>
 1a0:	cf 3f       	cpi	r28, 0xFF	; 255
 1a2:	29 f4       	brne	.+10     	; 0x1ae <adc_init+0x40>
 1a4:	65 e0       	ldi	r22, 0x05	; 5
 1a6:	8a e7       	ldi	r24, 0x7A	; 122
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	b5 d0       	rcall	.+362    	; 0x316 <clearBit>
 1ac:	18 c0       	rjmp	.+48     	; 0x1de <adc_init+0x70>
 1ae:	65 e0       	ldi	r22, 0x05	; 5
 1b0:	8a e7       	ldi	r24, 0x7A	; 122
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	a4 d0       	rcall	.+328    	; 0x2fe <setBit>
 1b6:	c2 fb       	bst	r28, 2
 1b8:	44 27       	eor	r20, r20
 1ba:	40 f9       	bld	r20, 0
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	8b e7       	ldi	r24, 0x7B	; 123
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	85 d0       	rcall	.+266    	; 0x2ce <updateBit>
 1c4:	c1 fb       	bst	r28, 1
 1c6:	44 27       	eor	r20, r20
 1c8:	40 f9       	bld	r20, 0
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	8b e7       	ldi	r24, 0x7B	; 123
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	7e d0       	rcall	.+252    	; 0x2ce <updateBit>
 1d2:	4c 2f       	mov	r20, r28
 1d4:	41 70       	andi	r20, 0x01	; 1
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	8b e7       	ldi	r24, 0x7B	; 123
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	78 d0       	rcall	.+240    	; 0x2ce <updateBit>
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	1f 91       	pop	r17
 1e4:	08 95       	ret

000001e6 <adc_start>:
		readValue |= 0x200;
	}
}*/

void adc_start(adc_config_struct_t s_adc_config)
{
 1e6:	cf 93       	push	r28
 1e8:	c9 2f       	mov	r28, r25
	setBit(&ADCSRA, ADEN);
 1ea:	67 e0       	ldi	r22, 0x07	; 7
 1ec:	8a e7       	ldi	r24, 0x7A	; 122
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	86 d0       	rcall	.+268    	; 0x2fe <setBit>
	if (s_adc_config.conversionMode != SINGLE_CONVERSION)
 1f2:	cf 3f       	cpi	r28, 0xFF	; 255
 1f4:	21 f0       	breq	.+8      	; 0x1fe <adc_start+0x18>
		setBit(&ADCSRA, ADSC);
 1f6:	66 e0       	ldi	r22, 0x06	; 6
 1f8:	8a e7       	ldi	r24, 0x7A	; 122
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	80 d0       	rcall	.+256    	; 0x2fe <setBit>
}
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
 202:	80 e8       	ldi	r24, 0x80	; 128
 204:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
 206:	85 bf       	out	0x35, r24	; 53
 208:	08 95       	ret

0000020a <__vector_4>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
 20a:	1f 92       	push	r1
 20c:	0f 92       	push	r0
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	0f 92       	push	r0
 212:	11 24       	eor	r1, r1
 214:	0f 90       	pop	r0
 216:	0f be       	out	0x3f, r0	; 63
 218:	0f 90       	pop	r0
 21a:	1f 90       	pop	r1
 21c:	18 95       	reti

0000021e <__vector_5>:
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_6>:
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <__vector_7>:
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <__vector_1>:
 25a:	1f 92       	push	r1
 25c:	0f 92       	push	r0
 25e:	0f b6       	in	r0, 0x3f	; 63
 260:	0f 92       	push	r0
 262:	11 24       	eor	r1, r1
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <__vector_2>:
 26e:	1f 92       	push	r1
 270:	0f 92       	push	r0
 272:	0f b6       	in	r0, 0x3f	; 63
 274:	0f 92       	push	r0
 276:	11 24       	eor	r1, r1
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_3>:
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
 296:	61 30       	cpi	r22, 0x01	; 1
 298:	59 f0       	breq	.+22     	; 0x2b0 <gpio_out_set+0x1a>
 29a:	28 f0       	brcs	.+10     	; 0x2a6 <gpio_out_set+0x10>
 29c:	62 30       	cpi	r22, 0x02	; 2
 29e:	69 f0       	breq	.+26     	; 0x2ba <gpio_out_set+0x24>
 2a0:	63 30       	cpi	r22, 0x03	; 3
 2a2:	81 f0       	breq	.+32     	; 0x2c4 <gpio_out_set+0x2e>
 2a4:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
 2a6:	67 2f       	mov	r22, r23
 2a8:	82 e2       	ldi	r24, 0x22	; 34
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	28 c0       	rjmp	.+80     	; 0x2fe <setBit>
			break;
 2ae:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
 2b0:	67 2f       	mov	r22, r23
 2b2:	85 e2       	ldi	r24, 0x25	; 37
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	23 c0       	rjmp	.+70     	; 0x2fe <setBit>
			break;
 2b8:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
 2ba:	67 2f       	mov	r22, r23
 2bc:	88 e2       	ldi	r24, 0x28	; 40
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	1e c0       	rjmp	.+60     	; 0x2fe <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
 2c2:	08 95       	ret
 2c4:	67 2f       	mov	r22, r23
 2c6:	8b e2       	ldi	r24, 0x2B	; 43
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	19 c0       	rjmp	.+50     	; 0x2fe <setBit>
 2cc:	08 95       	ret

000002ce <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
 2ce:	fc 01       	movw	r30, r24
 2d0:	94 2f       	mov	r25, r20
 2d2:	20 81       	ld	r18, Z
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	06 2e       	mov	r0, r22
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <updateBit+0x12>
 2dc:	44 0f       	add	r20, r20
 2de:	55 1f       	adc	r21, r21
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <updateBit+0xe>
 2e4:	40 95       	com	r20
 2e6:	50 95       	com	r21
 2e8:	24 23       	and	r18, r20
 2ea:	49 2f       	mov	r20, r25
 2ec:	50 e0       	ldi	r21, 0x00	; 0
 2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <updateBit+0x26>
 2f0:	44 0f       	add	r20, r20
 2f2:	55 1f       	adc	r21, r21
 2f4:	6a 95       	dec	r22
 2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <updateBit+0x22>
 2f8:	42 2b       	or	r20, r18
 2fa:	40 83       	st	Z, r20
 2fc:	08 95       	ret

000002fe <setBit>:
 2fe:	fc 01       	movw	r30, r24
 300:	40 81       	ld	r20, Z
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <setBit+0xe>
 308:	22 0f       	add	r18, r18
 30a:	33 1f       	adc	r19, r19
 30c:	6a 95       	dec	r22
 30e:	e2 f7       	brpl	.-8      	; 0x308 <setBit+0xa>
 310:	24 2b       	or	r18, r20
 312:	20 83       	st	Z, r18
 314:	08 95       	ret

00000316 <clearBit>:
 316:	fc 01       	movw	r30, r24
 318:	90 81       	ld	r25, Z
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	30 e0       	ldi	r19, 0x00	; 0
 31e:	02 c0       	rjmp	.+4      	; 0x324 <clearBit+0xe>
 320:	22 0f       	add	r18, r18
 322:	33 1f       	adc	r19, r19
 324:	6a 95       	dec	r22
 326:	e2 f7       	brpl	.-8      	; 0x320 <clearBit+0xa>
 328:	20 95       	com	r18
 32a:	29 23       	and	r18, r25
 32c:	20 83       	st	Z, r18
 32e:	08 95       	ret

00000330 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 c0       	rjmp	.+4      	; 0x338 <checkBit+0x8>
 334:	95 95       	asr	r25
 336:	87 95       	ror	r24
 338:	6a 95       	dec	r22
 33a:	e2 f7       	brpl	.-8      	; 0x334 <checkBit+0x4>
}
 33c:	81 70       	andi	r24, 0x01	; 1
 33e:	08 95       	ret

00000340 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
 340:	cf 92       	push	r12
 342:	df 92       	push	r13
 344:	ef 92       	push	r14
 346:	ff 92       	push	r15
 348:	69 01       	movw	r12, r18
 34a:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
 34c:	9b 01       	movw	r18, r22
 34e:	ac 01       	movw	r20, r24
 350:	2c 19       	sub	r18, r12
 352:	3d 09       	sbc	r19, r13
 354:	4e 09       	sbc	r20, r14
 356:	5f 09       	sbc	r21, r15
 358:	a8 ee       	ldi	r26, 0xE8	; 232
 35a:	b3 e0       	ldi	r27, 0x03	; 3
 35c:	a3 d3       	rcall	.+1862   	; 0xaa4 <__muluhisi3>
 35e:	a7 01       	movw	r20, r14
 360:	96 01       	movw	r18, r12
 362:	6f d3       	rcall	.+1758   	; 0xa42 <__udivmodsi4>
 364:	c9 01       	movw	r24, r18
 366:	99 23       	and	r25, r25
 368:	24 f4       	brge	.+8      	; 0x372 <calculateError+0x32>
 36a:	88 27       	eor	r24, r24
 36c:	99 27       	eor	r25, r25
 36e:	82 1b       	sub	r24, r18
 370:	93 0b       	sbc	r25, r19
}
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	08 95       	ret

0000037c <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	0b b6       	in	r0, 0x3b	; 59
 388:	0f 92       	push	r0
 38a:	8f 93       	push	r24
 38c:	9f 93       	push	r25
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
 392:	e0 91 1d 01 	lds	r30, 0x011D	; 0x80011d <u8_RLastReceivedIndex>
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	8e b5       	in	r24, 0x2e	; 46
 39a:	e2 5e       	subi	r30, 0xE2	; 226
 39c:	fe 4f       	sbci	r31, 0xFE	; 254
 39e:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
 3a0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <u8_RLastReceivedIndex>
 3a4:	89 30       	cpi	r24, 0x09	; 9
 3a6:	30 f4       	brcc	.+12     	; 0x3b4 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
 3a8:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <u8_RLastReceivedIndex>
 3ac:	8f 5f       	subi	r24, 0xFF	; 255
 3ae:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <u8_RLastReceivedIndex>
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
 3b4:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
 3be:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
 3c2:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <u8_TLastRequestedIndex>
 3c6:	98 17       	cp	r25, r24
 3c8:	a1 f0       	breq	.+40     	; 0x3f2 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
 3ca:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	e8 5d       	subi	r30, 0xD8	; 216
 3d2:	fe 4f       	sbci	r31, 0xFE	; 254
 3d4:	80 81       	ld	r24, Z
 3d6:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
 3d8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
 3dc:	89 30       	cpi	r24, 0x09	; 9
 3de:	30 f4       	brcc	.+12     	; 0x3ec <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
 3e0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <u8_TLastTransmittedIndex>
 3e4:	8f 5f       	subi	r24, 0xFF	; 255
 3e6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <u8_TLastTransmittedIndex>
 3ea:	06 c0       	rjmp	.+12     	; 0x3f8 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
 3ec:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <u8_TLastTransmittedIndex>
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <b_TAvailable>
	}
}
 3f8:	ff 91       	pop	r31
 3fa:	ef 91       	pop	r30
 3fc:	9f 91       	pop	r25
 3fe:	8f 91       	pop	r24
 400:	0f 90       	pop	r0
 402:	0b be       	out	0x3b, r0	; 59
 404:	0f 90       	pop	r0
 406:	0f be       	out	0x3f, r0	; 63
 408:	0f 90       	pop	r0
 40a:	1f 90       	pop	r1
 40c:	18 95       	reti

0000040e <__vector_15>:
}
#endif

#ifdef TIMER1_INTERRUPT_MODE
ISR(TIMER1_OVF_vect)
{
 40e:	1f 92       	push	r1
 410:	0f 92       	push	r0
 412:	0f b6       	in	r0, 0x3f	; 63
 414:	0f 92       	push	r0
 416:	11 24       	eor	r1, r1
 418:	0b b6       	in	r0, 0x3b	; 59
 41a:	0f 92       	push	r0
 41c:	2f 93       	push	r18
 41e:	3f 93       	push	r19
 420:	4f 93       	push	r20
 422:	5f 93       	push	r21
 424:	6f 93       	push	r22
 426:	7f 93       	push	r23
 428:	8f 93       	push	r24
 42a:	9f 93       	push	r25
 42c:	af 93       	push	r26
 42e:	bf 93       	push	r27
 430:	ef 93       	push	r30
 432:	ff 93       	push	r31
	p_timer1Callbacks[OVERFLOW]();
 434:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks>
 438:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x1>
 43c:	09 95       	icall
}
 43e:	ff 91       	pop	r31
 440:	ef 91       	pop	r30
 442:	bf 91       	pop	r27
 444:	af 91       	pop	r26
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	7f 91       	pop	r23
 44c:	6f 91       	pop	r22
 44e:	5f 91       	pop	r21
 450:	4f 91       	pop	r20
 452:	3f 91       	pop	r19
 454:	2f 91       	pop	r18
 456:	0f 90       	pop	r0
 458:	0b be       	out	0x3b, r0	; 59
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	0b b6       	in	r0, 0x3b	; 59
 470:	0f 92       	push	r0
 472:	0f 93       	push	r16
 474:	1f 93       	push	r17
 476:	2f 93       	push	r18
 478:	3f 93       	push	r19
 47a:	4f 93       	push	r20
 47c:	5f 93       	push	r21
 47e:	6f 93       	push	r22
 480:	7f 93       	push	r23
 482:	8f 93       	push	r24
 484:	9f 93       	push	r25
 486:	af 93       	push	r26
 488:	bf 93       	push	r27
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
 492:	c1 e8       	ldi	r28, 0x81	; 129
 494:	d0 e0       	ldi	r29, 0x00	; 0
 496:	88 81       	ld	r24, Y
 498:	64 e0       	ldi	r22, 0x04	; 4
 49a:	4a df       	rcall	.-364    	; 0x330 <checkBit>
 49c:	18 2f       	mov	r17, r24
 49e:	88 81       	ld	r24, Y
 4a0:	63 e0       	ldi	r22, 0x03	; 3
 4a2:	46 df       	rcall	.-372    	; 0x330 <checkBit>
 4a4:	c1 2f       	mov	r28, r17
 4a6:	cc 0f       	add	r28, r28
 4a8:	cc 0f       	add	r28, r28
 4aa:	cc 0f       	add	r28, r28
 4ac:	24 e0       	ldi	r18, 0x04	; 4
 4ae:	82 9f       	mul	r24, r18
 4b0:	c0 01       	movw	r24, r0
 4b2:	11 24       	eor	r1, r1
 4b4:	c8 2b       	or	r28, r24
 4b6:	00 e8       	ldi	r16, 0x80	; 128
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	f8 01       	movw	r30, r16
 4bc:	80 81       	ld	r24, Z
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	37 df       	rcall	.-402    	; 0x330 <checkBit>
 4c2:	d8 2f       	mov	r29, r24
 4c4:	f8 01       	movw	r30, r16
 4c6:	80 81       	ld	r24, Z
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	32 df       	rcall	.-412    	; 0x330 <checkBit>
 4cc:	dd 0f       	add	r29, r29
 4ce:	8c 2b       	or	r24, r28
 4d0:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
 4d2:	88 30       	cpi	r24, 0x08	; 8
 4d4:	18 f4       	brcc	.+6      	; 0x4dc <__vector_13+0x78>
 4d6:	84 30       	cpi	r24, 0x04	; 4
 4d8:	19 f4       	brne	.+6      	; 0x4e0 <__vector_13+0x7c>
 4da:	08 c0       	rjmp	.+16     	; 0x4ec <__vector_13+0x88>
 4dc:	80 fd       	sbrc	r24, 0
 4de:	06 c0       	rjmp	.+12     	; 0x4ec <__vector_13+0x88>
		p_timer1Callbacks[COMPARE_MATCH_A]();
 4e0:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p_timer1Callbacks+0x2>
 4e4:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p_timer1Callbacks+0x3>
 4e8:	09 95       	icall
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <__vector_13+0x92>
	else
		p_timer1Callbacks[OVERFLOW]();
 4ec:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks>
 4f0:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x1>
 4f4:	09 95       	icall
}
 4f6:	ff 91       	pop	r31
 4f8:	ef 91       	pop	r30
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	bf 91       	pop	r27
 500:	af 91       	pop	r26
 502:	9f 91       	pop	r25
 504:	8f 91       	pop	r24
 506:	7f 91       	pop	r23
 508:	6f 91       	pop	r22
 50a:	5f 91       	pop	r21
 50c:	4f 91       	pop	r20
 50e:	3f 91       	pop	r19
 510:	2f 91       	pop	r18
 512:	1f 91       	pop	r17
 514:	0f 91       	pop	r16
 516:	0f 90       	pop	r0
 518:	0b be       	out	0x3b, r0	; 59
 51a:	0f 90       	pop	r0
 51c:	0f be       	out	0x3f, r0	; 63
 51e:	0f 90       	pop	r0
 520:	1f 90       	pop	r1
 522:	18 95       	reti

00000524 <__vector_14>:

ISR(TIMER1_COMPB_vect)
{
 524:	1f 92       	push	r1
 526:	0f 92       	push	r0
 528:	0f b6       	in	r0, 0x3f	; 63
 52a:	0f 92       	push	r0
 52c:	11 24       	eor	r1, r1
 52e:	0b b6       	in	r0, 0x3b	; 59
 530:	0f 92       	push	r0
 532:	2f 93       	push	r18
 534:	3f 93       	push	r19
 536:	4f 93       	push	r20
 538:	5f 93       	push	r21
 53a:	6f 93       	push	r22
 53c:	7f 93       	push	r23
 53e:	8f 93       	push	r24
 540:	9f 93       	push	r25
 542:	af 93       	push	r26
 544:	bf 93       	push	r27
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
	p_timer1Callbacks[COMPARE_MATCH_B]();
 54a:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <p_timer1Callbacks+0x4>
 54e:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <p_timer1Callbacks+0x5>
 552:	09 95       	icall
}
 554:	ff 91       	pop	r31
 556:	ef 91       	pop	r30
 558:	bf 91       	pop	r27
 55a:	af 91       	pop	r26
 55c:	9f 91       	pop	r25
 55e:	8f 91       	pop	r24
 560:	7f 91       	pop	r23
 562:	6f 91       	pop	r22
 564:	5f 91       	pop	r21
 566:	4f 91       	pop	r20
 568:	3f 91       	pop	r19
 56a:	2f 91       	pop	r18
 56c:	0f 90       	pop	r0
 56e:	0b be       	out	0x3b, r0	; 59
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti

0000057a <__vector_12>:

ISR(TIMER1_CAPT_vect)
{
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	0b b6       	in	r0, 0x3b	; 59
 586:	0f 92       	push	r0
 588:	0f 93       	push	r16
 58a:	1f 93       	push	r17
 58c:	2f 93       	push	r18
 58e:	3f 93       	push	r19
 590:	4f 93       	push	r20
 592:	5f 93       	push	r21
 594:	6f 93       	push	r22
 596:	7f 93       	push	r23
 598:	8f 93       	push	r24
 59a:	9f 93       	push	r25
 59c:	af 93       	push	r26
 59e:	bf 93       	push	r27
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	ef 93       	push	r30
 5a6:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
 5a8:	c1 e8       	ldi	r28, 0x81	; 129
 5aa:	d0 e0       	ldi	r29, 0x00	; 0
 5ac:	88 81       	ld	r24, Y
 5ae:	64 e0       	ldi	r22, 0x04	; 4
 5b0:	bf de       	rcall	.-642    	; 0x330 <checkBit>
 5b2:	18 2f       	mov	r17, r24
 5b4:	88 81       	ld	r24, Y
 5b6:	63 e0       	ldi	r22, 0x03	; 3
 5b8:	bb de       	rcall	.-650    	; 0x330 <checkBit>
 5ba:	c1 2f       	mov	r28, r17
 5bc:	cc 0f       	add	r28, r28
 5be:	cc 0f       	add	r28, r28
 5c0:	cc 0f       	add	r28, r28
 5c2:	24 e0       	ldi	r18, 0x04	; 4
 5c4:	82 9f       	mul	r24, r18
 5c6:	c0 01       	movw	r24, r0
 5c8:	11 24       	eor	r1, r1
 5ca:	c8 2b       	or	r28, r24
 5cc:	00 e8       	ldi	r16, 0x80	; 128
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	f8 01       	movw	r30, r16
 5d2:	80 81       	ld	r24, Z
 5d4:	61 e0       	ldi	r22, 0x01	; 1
 5d6:	ac de       	rcall	.-680    	; 0x330 <checkBit>
 5d8:	d8 2f       	mov	r29, r24
 5da:	f8 01       	movw	r30, r16
 5dc:	80 81       	ld	r24, Z
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	a7 de       	rcall	.-690    	; 0x330 <checkBit>
 5e2:	dd 0f       	add	r29, r29
 5e4:	8c 2b       	or	r24, r28
 5e6:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
 5e8:	88 30       	cpi	r24, 0x08	; 8
 5ea:	10 f0       	brcs	.+4      	; 0x5f0 <__vector_12+0x76>
 5ec:	80 ff       	sbrs	r24, 0
 5ee:	06 c0       	rjmp	.+12     	; 0x5fc <__vector_12+0x82>
		p_timer1Callbacks[EXTERNAL]();
 5f0:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p_timer1Callbacks+0x6>
 5f4:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <p_timer1Callbacks+0x7>
 5f8:	09 95       	icall
 5fa:	05 c0       	rjmp	.+10     	; 0x606 <__vector_12+0x8c>
	else
		p_timer1Callbacks[OVERFLOW]();
 5fc:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks>
 600:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x1>
 604:	09 95       	icall
}
 606:	ff 91       	pop	r31
 608:	ef 91       	pop	r30
 60a:	df 91       	pop	r29
 60c:	cf 91       	pop	r28
 60e:	bf 91       	pop	r27
 610:	af 91       	pop	r26
 612:	9f 91       	pop	r25
 614:	8f 91       	pop	r24
 616:	7f 91       	pop	r23
 618:	6f 91       	pop	r22
 61a:	5f 91       	pop	r21
 61c:	4f 91       	pop	r20
 61e:	3f 91       	pop	r19
 620:	2f 91       	pop	r18
 622:	1f 91       	pop	r17
 624:	0f 91       	pop	r16
 626:	0f 90       	pop	r0
 628:	0b be       	out	0x3b, r0	; 59
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <__vector_11>:
#endif

#ifdef TIMER2_INTERRUPT_MODE
ISR(TIMER2_OVF_vect)
{
 634:	1f 92       	push	r1
 636:	0f 92       	push	r0
 638:	0f b6       	in	r0, 0x3f	; 63
 63a:	0f 92       	push	r0
 63c:	11 24       	eor	r1, r1
 63e:	0b b6       	in	r0, 0x3b	; 59
 640:	0f 92       	push	r0
 642:	2f 93       	push	r18
 644:	3f 93       	push	r19
 646:	4f 93       	push	r20
 648:	5f 93       	push	r21
 64a:	6f 93       	push	r22
 64c:	7f 93       	push	r23
 64e:	8f 93       	push	r24
 650:	9f 93       	push	r25
 652:	af 93       	push	r26
 654:	bf 93       	push	r27
 656:	ef 93       	push	r30
 658:	ff 93       	push	r31
	p_timer2Callbacks[OVERFLOW]();
 65a:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <p_timer2Callbacks>
 65e:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <p_timer2Callbacks+0x1>
 662:	09 95       	icall
}
 664:	ff 91       	pop	r31
 666:	ef 91       	pop	r30
 668:	bf 91       	pop	r27
 66a:	af 91       	pop	r26
 66c:	9f 91       	pop	r25
 66e:	8f 91       	pop	r24
 670:	7f 91       	pop	r23
 672:	6f 91       	pop	r22
 674:	5f 91       	pop	r21
 676:	4f 91       	pop	r20
 678:	3f 91       	pop	r19
 67a:	2f 91       	pop	r18
 67c:	0f 90       	pop	r0
 67e:	0b be       	out	0x3b, r0	; 59
 680:	0f 90       	pop	r0
 682:	0f be       	out	0x3f, r0	; 63
 684:	0f 90       	pop	r0
 686:	1f 90       	pop	r1
 688:	18 95       	reti

0000068a <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
 68a:	1f 92       	push	r1
 68c:	0f 92       	push	r0
 68e:	0f b6       	in	r0, 0x3f	; 63
 690:	0f 92       	push	r0
 692:	11 24       	eor	r1, r1
 694:	0b b6       	in	r0, 0x3b	; 59
 696:	0f 92       	push	r0
 698:	2f 93       	push	r18
 69a:	3f 93       	push	r19
 69c:	4f 93       	push	r20
 69e:	5f 93       	push	r21
 6a0:	6f 93       	push	r22
 6a2:	7f 93       	push	r23
 6a4:	8f 93       	push	r24
 6a6:	9f 93       	push	r25
 6a8:	af 93       	push	r26
 6aa:	bf 93       	push	r27
 6ac:	ef 93       	push	r30
 6ae:	ff 93       	push	r31
	if ((checkBit(TCCR2B, WGM22) == CLEAR) && ((TCCR2A & 0b11) != 0b10))
 6b0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 6b4:	63 e0       	ldi	r22, 0x03	; 3
 6b6:	3c de       	rcall	.-904    	; 0x330 <checkBit>
 6b8:	81 11       	cpse	r24, r1
 6ba:	0b c0       	rjmp	.+22     	; 0x6d2 <__vector_9+0x48>
 6bc:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 6c0:	83 70       	andi	r24, 0x03	; 3
 6c2:	82 30       	cpi	r24, 0x02	; 2
 6c4:	31 f0       	breq	.+12     	; 0x6d2 <__vector_9+0x48>
		p_timer2Callbacks[COMPARE_MATCH_A]();
 6c6:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <p_timer2Callbacks+0x2>
 6ca:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <p_timer2Callbacks+0x3>
 6ce:	09 95       	icall
 6d0:	05 c0       	rjmp	.+10     	; 0x6dc <__vector_9+0x52>
	else
		p_timer2Callbacks[OVERFLOW]();
 6d2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <p_timer2Callbacks>
 6d6:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <p_timer2Callbacks+0x1>
 6da:	09 95       	icall
}
 6dc:	ff 91       	pop	r31
 6de:	ef 91       	pop	r30
 6e0:	bf 91       	pop	r27
 6e2:	af 91       	pop	r26
 6e4:	9f 91       	pop	r25
 6e6:	8f 91       	pop	r24
 6e8:	7f 91       	pop	r23
 6ea:	6f 91       	pop	r22
 6ec:	5f 91       	pop	r21
 6ee:	4f 91       	pop	r20
 6f0:	3f 91       	pop	r19
 6f2:	2f 91       	pop	r18
 6f4:	0f 90       	pop	r0
 6f6:	0b be       	out	0x3b, r0	; 59
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

00000702 <__vector_10>:

ISR(TIMER2_COMPB_vect)
{
 702:	1f 92       	push	r1
 704:	0f 92       	push	r0
 706:	0f b6       	in	r0, 0x3f	; 63
 708:	0f 92       	push	r0
 70a:	11 24       	eor	r1, r1
 70c:	0b b6       	in	r0, 0x3b	; 59
 70e:	0f 92       	push	r0
 710:	2f 93       	push	r18
 712:	3f 93       	push	r19
 714:	4f 93       	push	r20
 716:	5f 93       	push	r21
 718:	6f 93       	push	r22
 71a:	7f 93       	push	r23
 71c:	8f 93       	push	r24
 71e:	9f 93       	push	r25
 720:	af 93       	push	r26
 722:	bf 93       	push	r27
 724:	ef 93       	push	r30
 726:	ff 93       	push	r31
	p_timer2Callbacks[COMPARE_MATCH_B]();
 728:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <p_timer2Callbacks+0x4>
 72c:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <p_timer2Callbacks+0x5>
 730:	09 95       	icall
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0b be       	out	0x3b, r0	; 59
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <calculateUBRR>:
/************************************************************************/
/* Internal functions                                                   */
/************************************************************************/

u16 calculateUBRR(u32 u32_baudRate, bool *b_usingDoubleSpeed)
{
 758:	4f 92       	push	r4
 75a:	5f 92       	push	r5
 75c:	6f 92       	push	r6
 75e:	7f 92       	push	r7
 760:	8f 92       	push	r8
 762:	9f 92       	push	r9
 764:	af 92       	push	r10
 766:	bf 92       	push	r11
 768:	cf 92       	push	r12
 76a:	df 92       	push	r13
 76c:	ef 92       	push	r14
 76e:	ff 92       	push	r15
 770:	cf 93       	push	r28
 772:	df 93       	push	r29
 774:	4b 01       	movw	r8, r22
 776:	5c 01       	movw	r10, r24
 778:	ea 01       	movw	r28, r20
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = F_CPU / u8_divisor / u32_baudRate - 1;
 77a:	0f 2e       	mov	r0, r31
 77c:	f0 e2       	ldi	r31, 0x20	; 32
 77e:	4f 2e       	mov	r4, r31
 780:	f1 ea       	ldi	r31, 0xA1	; 161
 782:	5f 2e       	mov	r5, r31
 784:	f7 e0       	ldi	r31, 0x07	; 7
 786:	6f 2e       	mov	r6, r31
 788:	71 2c       	mov	r7, r1
 78a:	f0 2d       	mov	r31, r0
 78c:	c3 01       	movw	r24, r6
 78e:	b2 01       	movw	r22, r4
 790:	a5 01       	movw	r20, r10
 792:	94 01       	movw	r18, r8
 794:	56 d1       	rcall	.+684    	; 0xa42 <__udivmodsi4>
 796:	69 01       	movw	r12, r18
 798:	7a 01       	movw	r14, r20
	u32_actualBaudRate = F_CPU / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
 79a:	c3 01       	movw	r24, r6
 79c:	b2 01       	movw	r22, r4
 79e:	51 d1       	rcall	.+674    	; 0xa42 <__udivmodsi4>
 7a0:	ca 01       	movw	r24, r20
 7a2:	b9 01       	movw	r22, r18
 7a4:	a5 01       	movw	r20, r10
 7a6:	94 01       	movw	r18, r8
 7a8:	cb dd       	rcall	.-1130   	; 0x340 <calculateError>
 7aa:	44 97       	sbiw	r24, 0x14	; 20
 7ac:	30 f4       	brcc	.+12     	; 0x7ba <calculateUBRR+0x62>
{
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = F_CPU / u8_divisor / u32_baudRate - 1;
 7ae:	d7 01       	movw	r26, r14
 7b0:	c6 01       	movw	r24, r12
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	a1 09       	sbc	r26, r1
 7b6:	b1 09       	sbc	r27, r1
 7b8:	0e c0       	rjmp	.+28     	; 0x7d6 <calculateUBRR+0x7e>
	u32_actualBaudRate = F_CPU / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
	{
		u8_divisor = 8;
		*b_usingDoubleSpeed = TRUE;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	88 83       	st	Y, r24
		u32_ubrr = F_CPU / u8_divisor / u32_baudRate - 1;
 7be:	60 e4       	ldi	r22, 0x40	; 64
 7c0:	72 e4       	ldi	r23, 0x42	; 66
 7c2:	8f e0       	ldi	r24, 0x0F	; 15
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	a5 01       	movw	r20, r10
 7c8:	94 01       	movw	r18, r8
 7ca:	3b d1       	rcall	.+630    	; 0xa42 <__udivmodsi4>
 7cc:	da 01       	movw	r26, r20
 7ce:	c9 01       	movw	r24, r18
 7d0:	01 97       	sbiw	r24, 0x01	; 1
 7d2:	a1 09       	sbc	r26, r1
 7d4:	b1 09       	sbc	r27, r1
		u32_actualBaudRate = F_CPU / u8_divisor / (u32_ubrr + 1);
	}
	return u32_ubrr;
}
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	ff 90       	pop	r15
 7dc:	ef 90       	pop	r14
 7de:	df 90       	pop	r13
 7e0:	cf 90       	pop	r12
 7e2:	bf 90       	pop	r11
 7e4:	af 90       	pop	r10
 7e6:	9f 90       	pop	r9
 7e8:	8f 90       	pop	r8
 7ea:	7f 90       	pop	r7
 7ec:	6f 90       	pop	r6
 7ee:	5f 90       	pop	r5
 7f0:	4f 90       	pop	r4
 7f2:	08 95       	ret

000007f4 <uart_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void uart_init(uart_struct_t s_uart)
{
 7f4:	0f 93       	push	r16
 7f6:	1f 93       	push	r17
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	cd b7       	in	r28, 0x3d	; 61
 7fe:	de b7       	in	r29, 0x3e	; 62
 800:	2b 97       	sbiw	r28, 0x0b	; 11
 802:	0f b6       	in	r0, 0x3f	; 63
 804:	f8 94       	cli
 806:	de bf       	out	0x3e, r29	; 62
 808:	0f be       	out	0x3f, r0	; 63
 80a:	cd bf       	out	0x3d, r28	; 61
 80c:	0a 83       	std	Y+2, r16	; 0x02
 80e:	1b 83       	std	Y+3, r17	; 0x03
 810:	2c 83       	std	Y+4, r18	; 0x04
 812:	3d 83       	std	Y+5, r19	; 0x05
 814:	4e 83       	std	Y+6, r20	; 0x06
 816:	5f 83       	std	Y+7, r21	; 0x07
 818:	68 87       	std	Y+8, r22	; 0x08
 81a:	79 87       	std	Y+9, r23	; 0x09
 81c:	8a 87       	std	Y+10, r24	; 0x0a
 81e:	9b 87       	std	Y+11, r25	; 0x0b
	u16 u16_ubrr;
	bool b_usingDoubleSpeed = FALSE;
 820:	19 82       	std	Y+1, r1	; 0x01

	switch (s_uart.peripheral)
 822:	01 11       	cpse	r16, r1
 824:	7c c0       	rjmp	.+248    	; 0x91e <uart_init+0x12a>
 826:	19 2f       	mov	r17, r25
	{
	case UART0:
	#ifdef USING_UART0
		/* Set asynchronous mode */
		UCSR0C &= ~(0b11 << UMSEL00);
 828:	e2 ec       	ldi	r30, 0xC2	; 194
 82a:	f0 e0       	ldi	r31, 0x00	; 0
 82c:	80 81       	ld	r24, Z
 82e:	8f 73       	andi	r24, 0x3F	; 63
 830:	80 83       	st	Z, r24
		/* Set baud rate */
		u16_ubrr = calculateUBRR(s_uart.baudRate, &b_usingDoubleSpeed);
 832:	6b 81       	ldd	r22, Y+3	; 0x03
 834:	7c 81       	ldd	r23, Y+4	; 0x04
 836:	8d 81       	ldd	r24, Y+5	; 0x05
 838:	9e 81       	ldd	r25, Y+6	; 0x06
 83a:	ae 01       	movw	r20, r28
 83c:	4f 5f       	subi	r20, 0xFF	; 255
 83e:	5f 4f       	sbci	r21, 0xFF	; 255
 840:	8b df       	rcall	.-234    	; 0x758 <calculateUBRR>
		UBRR0 = u16_ubrr;
 842:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 846:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		updateBit(&UCSR0A, U2X0, b_usingDoubleSpeed);
 84a:	49 81       	ldd	r20, Y+1	; 0x01
 84c:	61 e0       	ldi	r22, 0x01	; 1
 84e:	80 ec       	ldi	r24, 0xC0	; 192
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	3d dd       	rcall	.-1414   	; 0x2ce <updateBit>
		/* Set frame size */
		switch (s_uart.frameSize)
 854:	89 85       	ldd	r24, Y+9	; 0x09
 856:	82 30       	cpi	r24, 0x02	; 2
 858:	31 f1       	breq	.+76     	; 0x8a6 <uart_init+0xb2>
 85a:	28 f4       	brcc	.+10     	; 0x866 <uart_init+0x72>
 85c:	88 23       	and	r24, r24
 85e:	49 f0       	breq	.+18     	; 0x872 <uart_init+0x7e>
 860:	81 30       	cpi	r24, 0x01	; 1
 862:	a1 f0       	breq	.+40     	; 0x88c <uart_init+0x98>
 864:	46 c0       	rjmp	.+140    	; 0x8f2 <uart_init+0xfe>
 866:	83 30       	cpi	r24, 0x03	; 3
 868:	59 f1       	breq	.+86     	; 0x8c0 <uart_init+0xcc>
 86a:	84 30       	cpi	r24, 0x04	; 4
 86c:	09 f4       	brne	.+2      	; 0x870 <uart_init+0x7c>
 86e:	35 c0       	rjmp	.+106    	; 0x8da <uart_init+0xe6>
 870:	40 c0       	rjmp	.+128    	; 0x8f2 <uart_init+0xfe>
		{
			case _5BIT:
				clearBit(&UCSR0C, UCSZ00);
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	82 ec       	ldi	r24, 0xC2	; 194
 876:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&UCSR0C, UCSZ01);
 878:	4e dd       	rcall	.-1380   	; 0x316 <clearBit>
 87a:	62 e0       	ldi	r22, 0x02	; 2
 87c:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	4a dd       	rcall	.-1388   	; 0x316 <clearBit>
 882:	62 e0       	ldi	r22, 0x02	; 2
 884:	81 ec       	ldi	r24, 0xC1	; 193
				break;
 886:	90 e0       	ldi	r25, 0x00	; 0
			case _6BIT:
				setBit(&UCSR0C, UCSZ00);
 888:	46 dd       	rcall	.-1396   	; 0x316 <clearBit>
 88a:	33 c0       	rjmp	.+102    	; 0x8f2 <uart_init+0xfe>
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0C, UCSZ01);
 890:	90 e0       	ldi	r25, 0x00	; 0
 892:	35 dd       	rcall	.-1430   	; 0x2fe <setBit>
 894:	62 e0       	ldi	r22, 0x02	; 2
 896:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
 898:	90 e0       	ldi	r25, 0x00	; 0
 89a:	3d dd       	rcall	.-1414   	; 0x316 <clearBit>
 89c:	62 e0       	ldi	r22, 0x02	; 2
				break;
			case _7BIT:
				clearBit(&UCSR0C, UCSZ00);
 89e:	81 ec       	ldi	r24, 0xC1	; 193
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	39 dd       	rcall	.-1422   	; 0x316 <clearBit>
 8a4:	26 c0       	rjmp	.+76     	; 0x8f2 <uart_init+0xfe>
				setBit(&UCSR0C, UCSZ01);
 8a6:	61 e0       	ldi	r22, 0x01	; 1
 8a8:	82 ec       	ldi	r24, 0xC2	; 194
 8aa:	90 e0       	ldi	r25, 0x00	; 0
 8ac:	34 dd       	rcall	.-1432   	; 0x316 <clearBit>
				clearBit(&UCSR0B, UCSZ02);
 8ae:	62 e0       	ldi	r22, 0x02	; 2
 8b0:	82 ec       	ldi	r24, 0xC2	; 194
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	24 dd       	rcall	.-1464   	; 0x2fe <setBit>
				break;
			case _8BIT:
				setBit(&UCSR0C, UCSZ00);
 8b6:	62 e0       	ldi	r22, 0x02	; 2
 8b8:	81 ec       	ldi	r24, 0xC1	; 193
 8ba:	90 e0       	ldi	r25, 0x00	; 0
				setBit(&UCSR0C, UCSZ01);
 8bc:	2c dd       	rcall	.-1448   	; 0x316 <clearBit>
 8be:	19 c0       	rjmp	.+50     	; 0x8f2 <uart_init+0xfe>
 8c0:	61 e0       	ldi	r22, 0x01	; 1
				clearBit(&UCSR0B, UCSZ02);
 8c2:	82 ec       	ldi	r24, 0xC2	; 194
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	1b dd       	rcall	.-1482   	; 0x2fe <setBit>
 8c8:	62 e0       	ldi	r22, 0x02	; 2
				break;
 8ca:	82 ec       	ldi	r24, 0xC2	; 194
			case _9BIT:
				setBit(&UCSR0C, UCSZ00);
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	17 dd       	rcall	.-1490   	; 0x2fe <setBit>
 8d0:	62 e0       	ldi	r22, 0x02	; 2
 8d2:	81 ec       	ldi	r24, 0xC1	; 193
				setBit(&UCSR0C, UCSZ01);
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	1f dd       	rcall	.-1474   	; 0x316 <clearBit>
 8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <uart_init+0xfe>
 8da:	61 e0       	ldi	r22, 0x01	; 1
 8dc:	82 ec       	ldi	r24, 0xC2	; 194
				setBit(&UCSR0B, UCSZ02);
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e dd       	rcall	.-1508   	; 0x2fe <setBit>
 8e2:	62 e0       	ldi	r22, 0x02	; 2
 8e4:	82 ec       	ldi	r24, 0xC2	; 194
				break;
		}
		/* Set number of stop bits */
		updateBit(&UCSR0C, USBS0, s_uart.stopBits);
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	0a dd       	rcall	.-1516   	; 0x2fe <setBit>
 8ea:	62 e0       	ldi	r22, 0x02	; 2
 8ec:	81 ec       	ldi	r24, 0xC1	; 193
 8ee:	90 e0       	ldi	r25, 0x00	; 0
		/* Set parity check */
		if (s_uart.parityBit == NONE)
 8f0:	06 dd       	rcall	.-1524   	; 0x2fe <setBit>
 8f2:	4a 85       	ldd	r20, Y+10	; 0x0a
			UCSR0C &= ~(0b11 << UPM00);
 8f4:	63 e0       	ldi	r22, 0x03	; 3
 8f6:	82 ec       	ldi	r24, 0xC2	; 194
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	e9 dc       	rcall	.-1582   	; 0x2ce <updateBit>
 8fc:	12 30       	cpi	r17, 0x02	; 2
 8fe:	31 f4       	brne	.+12     	; 0x90c <uart_init+0x118>
		else
		{
			setBit(&UCSR0C, UPM01);
 900:	e2 ec       	ldi	r30, 0xC2	; 194
 902:	f0 e0       	ldi	r31, 0x00	; 0
 904:	80 81       	ld	r24, Z
 906:	8f 7c       	andi	r24, 0xCF	; 207
 908:	80 83       	st	Z, r24
			updateBit(&UCSR0C, UPM00, s_uart.parityBit);
 90a:	09 c0       	rjmp	.+18     	; 0x91e <uart_init+0x12a>
 90c:	65 e0       	ldi	r22, 0x05	; 5
 90e:	82 ec       	ldi	r24, 0xC2	; 194
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	f5 dc       	rcall	.-1558   	; 0x2fe <setBit>
 914:	41 2f       	mov	r20, r17
		}
	#endif
#endif
		break;
	}
}
 916:	64 e0       	ldi	r22, 0x04	; 4
 918:	82 ec       	ldi	r24, 0xC2	; 194
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	d8 dc       	rcall	.-1616   	; 0x2ce <updateBit>
 91e:	2b 96       	adiw	r28, 0x0b	; 11
 920:	0f b6       	in	r0, 0x3f	; 63
 922:	f8 94       	cli
 924:	de bf       	out	0x3e, r29	; 62
 926:	0f be       	out	0x3f, r0	; 63
 928:	cd bf       	out	0x3d, r28	; 61
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	1f 91       	pop	r17
 930:	0f 91       	pop	r16
 932:	08 95       	ret

00000934 <uart_start>:

void uart_start(uart_struct_t s_uart)
{
 934:	0f 93       	push	r16
 936:	1f 93       	push	r17
 938:	cf 93       	push	r28
 93a:	df 93       	push	r29
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
 940:	2a 97       	sbiw	r28, 0x0a	; 10
 942:	0f b6       	in	r0, 0x3f	; 63
 944:	f8 94       	cli
 946:	de bf       	out	0x3e, r29	; 62
 948:	0f be       	out	0x3f, r0	; 63
 94a:	cd bf       	out	0x3d, r28	; 61
 94c:	6f 83       	std	Y+7, r22	; 0x07
	switch (s_uart.peripheral)
 94e:	01 11       	cpse	r16, r1
 950:	0a c0       	rjmp	.+20     	; 0x966 <uart_start+0x32>
	{
		case UART0:
		#ifdef USING_UART0
			updateBit(&UCSR0B, RXEN0, s_uart.useRx);
 952:	45 2f       	mov	r20, r21
 954:	64 e0       	ldi	r22, 0x04	; 4
 956:	81 ec       	ldi	r24, 0xC1	; 193
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	b9 dc       	rcall	.-1678   	; 0x2ce <updateBit>
			updateBit(&UCSR0B, TXEN0, s_uart.useTx);
 95c:	4f 81       	ldd	r20, Y+7	; 0x07
 95e:	63 e0       	ldi	r22, 0x03	; 3
 960:	81 ec       	ldi	r24, 0xC1	; 193
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	b4 dc       	rcall	.-1688   	; 0x2ce <updateBit>
			updateBit(&UCSR1B, RXEN1, s_uart.useRx);
			updateBit(&UCSR1B, TXEN1, s_uart.useTx);
		#endif
			break;
	}
}
 966:	2a 96       	adiw	r28, 0x0a	; 10
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	0f be       	out	0x3f, r0	; 63
 970:	cd bf       	out	0x3d, r28	; 61
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	08 95       	ret

0000097c <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
 97c:	1f 92       	push	r1
 97e:	0f 92       	push	r0
 980:	0f b6       	in	r0, 0x3f	; 63
 982:	0f 92       	push	r0
 984:	11 24       	eor	r1, r1
 986:	0b b6       	in	r0, 0x3b	; 59
 988:	0f 92       	push	r0
 98a:	2f 93       	push	r18
 98c:	3f 93       	push	r19
 98e:	4f 93       	push	r20
 990:	5f 93       	push	r21
 992:	6f 93       	push	r22
 994:	7f 93       	push	r23
 996:	8f 93       	push	r24
 998:	9f 93       	push	r25
 99a:	af 93       	push	r26
 99c:	bf 93       	push	r27
 99e:	ef 93       	push	r30
 9a0:	ff 93       	push	r31
	p_wdgCallback();
 9a2:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <p_wdgCallback>
 9a6:	f0 91 45 01 	lds	r31, 0x0145	; 0x800145 <p_wdgCallback+0x1>
 9aa:	09 95       	icall
}
 9ac:	ff 91       	pop	r31
 9ae:	ef 91       	pop	r30
 9b0:	bf 91       	pop	r27
 9b2:	af 91       	pop	r26
 9b4:	9f 91       	pop	r25
 9b6:	8f 91       	pop	r24
 9b8:	7f 91       	pop	r23
 9ba:	6f 91       	pop	r22
 9bc:	5f 91       	pop	r21
 9be:	4f 91       	pop	r20
 9c0:	3f 91       	pop	r19
 9c2:	2f 91       	pop	r18
 9c4:	0f 90       	pop	r0
 9c6:	0b be       	out	0x3b, r0	; 59
 9c8:	0f 90       	pop	r0
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	0f 90       	pop	r0
 9ce:	1f 90       	pop	r1
 9d0:	18 95       	reti

000009d2 <debug_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void debug_init()
{
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
	s_debugUart.baudRate = _19200;
 9d6:	e6 e4       	ldi	r30, 0x46	; 70
 9d8:	f1 e0       	ldi	r31, 0x01	; 1
 9da:	80 e0       	ldi	r24, 0x00	; 0
 9dc:	18 2f       	mov	r17, r24
 9de:	81 83       	std	Z+1, r24	; 0x01
 9e0:	8b e4       	ldi	r24, 0x4B	; 75
 9e2:	82 83       	std	Z+2, r24	; 0x02
 9e4:	13 82       	std	Z+3, r1	; 0x03
 9e6:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
 9e8:	83 e0       	ldi	r24, 0x03	; 3
 9ea:	78 2f       	mov	r23, r24
 9ec:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = EVEN;
 9ee:	11 86       	std	Z+9, r1	; 0x09
	s_debugUart.peripheral = UART0;
 9f0:	10 82       	st	Z, r1
	s_debugUart.stopBits = _1BIT;
 9f2:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
 9f4:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
 9f6:	81 e0       	ldi	r24, 0x01	; 1
 9f8:	68 2f       	mov	r22, r24
 9fa:	86 83       	std	Z+6, r24	; 0x06
	uart_init(s_debugUart);
 9fc:	00 e0       	ldi	r16, 0x00	; 0
 9fe:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
 a02:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
 a06:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	80 e0       	ldi	r24, 0x00	; 0
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	f1 de       	rcall	.-542    	; 0x7f4 <uart_init>
	uart_start(s_debugUart);
 a12:	00 91 46 01 	lds	r16, 0x0146	; 0x800146 <s_debugUart>
 a16:	10 91 47 01 	lds	r17, 0x0147	; 0x800147 <s_debugUart+0x1>
 a1a:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <s_debugUart+0x2>
 a1e:	30 91 49 01 	lds	r19, 0x0149	; 0x800149 <s_debugUart+0x3>
 a22:	40 91 4a 01 	lds	r20, 0x014A	; 0x80014a <s_debugUart+0x4>
 a26:	50 91 4b 01 	lds	r21, 0x014B	; 0x80014b <s_debugUart+0x5>
 a2a:	60 91 4c 01 	lds	r22, 0x014C	; 0x80014c <s_debugUart+0x6>
 a2e:	70 91 4d 01 	lds	r23, 0x014D	; 0x80014d <s_debugUart+0x7>
 a32:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <s_debugUart+0x8>
 a36:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <s_debugUart+0x9>
 a3a:	7c df       	rcall	.-264    	; 0x934 <uart_start>
}
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	08 95       	ret

00000a42 <__udivmodsi4>:
 a42:	a1 e2       	ldi	r26, 0x21	; 33
 a44:	1a 2e       	mov	r1, r26
 a46:	aa 1b       	sub	r26, r26
 a48:	bb 1b       	sub	r27, r27
 a4a:	fd 01       	movw	r30, r26
 a4c:	0d c0       	rjmp	.+26     	; 0xa68 <__udivmodsi4_ep>

00000a4e <__udivmodsi4_loop>:
 a4e:	aa 1f       	adc	r26, r26
 a50:	bb 1f       	adc	r27, r27
 a52:	ee 1f       	adc	r30, r30
 a54:	ff 1f       	adc	r31, r31
 a56:	a2 17       	cp	r26, r18
 a58:	b3 07       	cpc	r27, r19
 a5a:	e4 07       	cpc	r30, r20
 a5c:	f5 07       	cpc	r31, r21
 a5e:	20 f0       	brcs	.+8      	; 0xa68 <__udivmodsi4_ep>
 a60:	a2 1b       	sub	r26, r18
 a62:	b3 0b       	sbc	r27, r19
 a64:	e4 0b       	sbc	r30, r20
 a66:	f5 0b       	sbc	r31, r21

00000a68 <__udivmodsi4_ep>:
 a68:	66 1f       	adc	r22, r22
 a6a:	77 1f       	adc	r23, r23
 a6c:	88 1f       	adc	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	1a 94       	dec	r1
 a72:	69 f7       	brne	.-38     	; 0xa4e <__udivmodsi4_loop>
 a74:	60 95       	com	r22
 a76:	70 95       	com	r23
 a78:	80 95       	com	r24
 a7a:	90 95       	com	r25
 a7c:	9b 01       	movw	r18, r22
 a7e:	ac 01       	movw	r20, r24
 a80:	bd 01       	movw	r22, r26
 a82:	cf 01       	movw	r24, r30
 a84:	08 95       	ret

00000a86 <__umulhisi3>:
 a86:	a2 9f       	mul	r26, r18
 a88:	b0 01       	movw	r22, r0
 a8a:	b3 9f       	mul	r27, r19
 a8c:	c0 01       	movw	r24, r0
 a8e:	a3 9f       	mul	r26, r19
 a90:	70 0d       	add	r23, r0
 a92:	81 1d       	adc	r24, r1
 a94:	11 24       	eor	r1, r1
 a96:	91 1d       	adc	r25, r1
 a98:	b2 9f       	mul	r27, r18
 a9a:	70 0d       	add	r23, r0
 a9c:	81 1d       	adc	r24, r1
 a9e:	11 24       	eor	r1, r1
 aa0:	91 1d       	adc	r25, r1
 aa2:	08 95       	ret

00000aa4 <__muluhisi3>:
 aa4:	f0 df       	rcall	.-32     	; 0xa86 <__umulhisi3>
 aa6:	a5 9f       	mul	r26, r21
 aa8:	90 0d       	add	r25, r0
 aaa:	b4 9f       	mul	r27, r20
 aac:	90 0d       	add	r25, r0
 aae:	a4 9f       	mul	r26, r20
 ab0:	80 0d       	add	r24, r0
 ab2:	91 1d       	adc	r25, r1
 ab4:	11 24       	eor	r1, r1
 ab6:	08 95       	ret

00000ab8 <_exit>:
 ab8:	f8 94       	cli

00000aba <__stop_program>:
 aba:	ff cf       	rjmp	.-2      	; 0xaba <__stop_program>
