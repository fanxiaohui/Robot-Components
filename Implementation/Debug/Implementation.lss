
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ea  00800100  00005a0e  00005aa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ed  008007ea  008007ea  0000618c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000618c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000061bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a38  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011aed  00000000  00000000  00006c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000259d  00000000  00000000  00018721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000066dd  00000000  00000000  0001acbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002ab0  00000000  00000000  0002139c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000474e  00000000  00000000  00023e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011d7a  00000000  00000000  0002859a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000960  00000000  00000000  0003a314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	48 c1       	rjmp	.+656    	; 0x296 <__vector_1>
       6:	00 00       	nop
       8:	50 c1       	rjmp	.+672    	; 0x2aa <__vector_2>
       a:	00 00       	nop
       c:	58 c1       	rjmp	.+688    	; 0x2be <__vector_3>
       e:	00 00       	nop
      10:	1a c1       	rjmp	.+564    	; 0x246 <__vector_4>
      12:	00 00       	nop
      14:	22 c1       	rjmp	.+580    	; 0x25a <__vector_5>
      16:	00 00       	nop
      18:	2a c1       	rjmp	.+596    	; 0x26e <__vector_6>
      1a:	00 00       	nop
      1c:	32 c1       	rjmp	.+612    	; 0x282 <__vector_7>
      1e:	00 00       	nop
      20:	cf c6       	rjmp	.+3486   	; 0xdc0 <__vector_8>
      22:	00 00       	nop
      24:	17 c5       	rjmp	.+2606   	; 0xa54 <__vector_9>
      26:	00 00       	nop
      28:	51 c5       	rjmp	.+2722   	; 0xacc <__vector_10>
      2a:	00 00       	nop
      2c:	e8 c4       	rjmp	.+2512   	; 0x9fe <__vector_11>
      2e:	00 00       	nop
      30:	89 c4       	rjmp	.+2322   	; 0x944 <__vector_12>
      32:	00 00       	nop
      34:	fc c3       	rjmp	.+2040   	; 0x82e <__vector_13>
      36:	00 00       	nop
      38:	5a c4       	rjmp	.+2228   	; 0x8ee <__vector_14>
      3a:	00 00       	nop
      3c:	cd c3       	rjmp	.+1946   	; 0x7d8 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7c c3       	rjmp	.+1784   	; 0x746 <__vector_19>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	25 c0       	rjmp	.+74     	; 0xc8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	23 c0       	rjmp	.+70     	; 0xc8 <__bad_interrupt>
      82:	00 00       	nop
      84:	21 c0       	rjmp	.+66     	; 0xc8 <__bad_interrupt>
      86:	00 00       	nop
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	17 e0       	ldi	r17, 0x07	; 7
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e0       	ldi	r30, 0x0E	; 14
      a0:	fa e5       	ldi	r31, 0x5A	; 90
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	29 e0       	ldi	r18, 0x09	; 9
      b4:	aa ee       	ldi	r26, 0xEA	; 234
      b6:	b7 e0       	ldi	r27, 0x07	; 7
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a7 3d       	cpi	r26, 0xD7	; 215
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	3b d0       	rcall	.+118    	; 0x13a <main>
      c4:	0c 94 05 2d 	jmp	0x5a0a	; 0x5a0a <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <debug_init>:
{
	milliseconds++;
}

void debug_init()
{
      ca:	0f 93       	push	r16
      cc:	1f 93       	push	r17
	s_debugUart.baudRate = _9600;
      ce:	eb ee       	ldi	r30, 0xEB	; 235
      d0:	f7 e0       	ldi	r31, 0x07	; 7
      d2:	80 e8       	ldi	r24, 0x80	; 128
      d4:	18 2f       	mov	r17, r24
      d6:	81 83       	std	Z+1, r24	; 0x01
      d8:	85 e2       	ldi	r24, 0x25	; 37
      da:	82 83       	std	Z+2, r24	; 0x02
      dc:	13 82       	std	Z+3, r1	; 0x03
      de:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	78 2f       	mov	r23, r24
      e4:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
      e6:	92 e0       	ldi	r25, 0x02	; 2
      e8:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.peripheral = UART0;
      ea:	10 82       	st	Z, r1
	s_debugUart.stopBits = _1BIT;
      ec:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
      ee:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	68 2f       	mov	r22, r24
      f4:	86 83       	std	Z+6, r24	; 0x06
	uart_init(s_debugUart);
      f6:	00 e0       	ldi	r16, 0x00	; 0
      f8:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
      fc:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     100:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     104:	50 e0       	ldi	r21, 0x00	; 0
     106:	80 e0       	ldi	r24, 0x00	; 0
     108:	5d d5       	rcall	.+2746   	; 0xbc4 <uart_init>
	uart_start(s_debugUart);
     10a:	00 91 eb 07 	lds	r16, 0x07EB	; 0x8007eb <s_debugUart>
     10e:	10 91 ec 07 	lds	r17, 0x07EC	; 0x8007ec <s_debugUart+0x1>
     112:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
     116:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     11a:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     11e:	50 91 f0 07 	lds	r21, 0x07F0	; 0x8007f0 <s_debugUart+0x5>
     122:	60 91 f1 07 	lds	r22, 0x07F1	; 0x8007f1 <s_debugUart+0x6>
     126:	70 91 f2 07 	lds	r23, 0x07F2	; 0x8007f2 <s_debugUart+0x7>
     12a:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <s_debugUart+0x8>
     12e:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <s_debugUart+0x9>
     132:	e8 d5       	rcall	.+3024   	; 0xd04 <uart_start>
}
     134:	1f 91       	pop	r17
     136:	0f 91       	pop	r16
     138:	08 95       	ret

0000013a <main>:
extern VL53L0X_Dev_t MyDevice;
int main(void)
{
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	cd b7       	in	r28, 0x3d	; 61
     140:	de b7       	in	r29, 0x3e	; 62
     142:	69 97       	sbiw	r28, 0x19	; 25
     144:	0f b6       	in	r0, 0x3f	; 63
     146:	f8 94       	cli
     148:	de bf       	out	0x3e, r29	; 62
     14a:	0f be       	out	0x3f, r0	; 63
	VL53L0X_DeviceInfo_t pVL53L0X_DeviceInfo;
	u8 data[10];
	data[9] = 0xbf;
	
	device_disableJTAG();	
	debug_init();
     14c:	cd bf       	out	0x3d, r28	; 61
	vl53l0x_begin(VL53L0X_I2C_ADDR);
     14e:	57 d0       	rcall	.+174    	; 0x1fe <device_disableJTAG>
     150:	bc df       	rcall	.-136    	; 0xca <debug_init>
	
	sei();
	
    while (1)
    {
		vl53l0x_getSingleRangingMeasurement(&measure);
     152:	89 e2       	ldi	r24, 0x29	; 41
     154:	7a d6       	rcall	.+3316   	; 0xe4a <vl53l0x_begin>
     156:	78 94       	sei
     158:	ce 01       	movw	r24, r28
		uart_transmit(s_debugUart, measure.RangeStatus);
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	2e d7       	rcall	.+3676   	; 0xfba <vl53l0x_getSingleRangingMeasurement>
     15e:	e9 8c       	ldd	r14, Y+25	; 0x19
     160:	f1 2c       	mov	r15, r1
     162:	00 91 eb 07 	lds	r16, 0x07EB	; 0x8007eb <s_debugUart>
     166:	10 91 ec 07 	lds	r17, 0x07EC	; 0x8007ec <s_debugUart+0x1>
     16a:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
     16e:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     172:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     176:	50 91 f0 07 	lds	r21, 0x07F0	; 0x8007f0 <s_debugUart+0x5>
     17a:	60 91 f1 07 	lds	r22, 0x07F1	; 0x8007f1 <s_debugUart+0x6>
     17e:	70 91 f2 07 	lds	r23, 0x07F2	; 0x8007f2 <s_debugUart+0x7>
     182:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <s_debugUart+0x8>
     186:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <s_debugUart+0x9>
		uart_transmit(s_debugUart, measure.RangeMilliMeter >> 8);
     18a:	e0 d5       	rcall	.+3008   	; 0xd4c <uart_transmit>
     18c:	ea 84       	ldd	r14, Y+10	; 0x0a
     18e:	f1 2c       	mov	r15, r1
     190:	00 91 eb 07 	lds	r16, 0x07EB	; 0x8007eb <s_debugUart>
     194:	10 91 ec 07 	lds	r17, 0x07EC	; 0x8007ec <s_debugUart+0x1>
     198:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
     19c:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     1a0:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     1a4:	50 91 f0 07 	lds	r21, 0x07F0	; 0x8007f0 <s_debugUart+0x5>
     1a8:	60 91 f1 07 	lds	r22, 0x07F1	; 0x8007f1 <s_debugUart+0x6>
     1ac:	70 91 f2 07 	lds	r23, 0x07F2	; 0x8007f2 <s_debugUart+0x7>
     1b0:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <s_debugUart+0x8>
     1b4:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <s_debugUart+0x9>
		uart_transmit(s_debugUart, measure.RangeMilliMeter & 0xff);
     1b8:	c9 d5       	rcall	.+2962   	; 0xd4c <uart_transmit>
     1ba:	e9 84       	ldd	r14, Y+9	; 0x09
     1bc:	fa 84       	ldd	r15, Y+10	; 0x0a
     1be:	ff 24       	eor	r15, r15
     1c0:	00 91 eb 07 	lds	r16, 0x07EB	; 0x8007eb <s_debugUart>
     1c4:	10 91 ec 07 	lds	r17, 0x07EC	; 0x8007ec <s_debugUart+0x1>
     1c8:	20 91 ed 07 	lds	r18, 0x07ED	; 0x8007ed <s_debugUart+0x2>
     1cc:	30 91 ee 07 	lds	r19, 0x07EE	; 0x8007ee <s_debugUart+0x3>
     1d0:	40 91 ef 07 	lds	r20, 0x07EF	; 0x8007ef <s_debugUart+0x4>
     1d4:	50 91 f0 07 	lds	r21, 0x07F0	; 0x8007f0 <s_debugUart+0x5>
     1d8:	60 91 f1 07 	lds	r22, 0x07F1	; 0x8007f1 <s_debugUart+0x6>
     1dc:	70 91 f2 07 	lds	r23, 0x07F2	; 0x8007f2 <s_debugUart+0x7>
     1e0:	80 91 f3 07 	lds	r24, 0x07F3	; 0x8007f3 <s_debugUart+0x8>
     1e4:	90 91 f4 07 	lds	r25, 0x07F4	; 0x8007f4 <s_debugUart+0x9>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e8:	b1 d5       	rcall	.+2914   	; 0xd4c <uart_transmit>
     1ea:	2f ef       	ldi	r18, 0xFF	; 255
     1ec:	89 e6       	ldi	r24, 0x69	; 105
     1ee:	98 e1       	ldi	r25, 0x18	; 24
     1f0:	21 50       	subi	r18, 0x01	; 1
     1f2:	80 40       	sbci	r24, 0x00	; 0
     1f4:	90 40       	sbci	r25, 0x00	; 0
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <main+0xb6>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <main+0xc0>
     1fa:	00 00       	nop
     1fc:	ad cf       	rjmp	.-166    	; 0x158 <main+0x1e>

000001fe <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     1fe:	80 e8       	ldi	r24, 0x80	; 128
     200:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     202:	85 bf       	out	0x35, r24	; 53
     204:	08 95       	ret

00000206 <gpio_changeDirection>:
/* Internal functions                                                   */
/************************************************************************/

void gpio_changeDirection(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     206:	61 30       	cpi	r22, 0x01	; 1
     208:	61 f0       	breq	.+24     	; 0x222 <gpio_changeDirection+0x1c>
     20a:	28 f0       	brcs	.+10     	; 0x216 <gpio_changeDirection+0x10>
     20c:	62 30       	cpi	r22, 0x02	; 2
     20e:	79 f0       	breq	.+30     	; 0x22e <gpio_changeDirection+0x28>
     210:	63 30       	cpi	r22, 0x03	; 3
     212:	99 f0       	breq	.+38     	; 0x23a <gpio_changeDirection+0x34>
     214:	08 95       	ret
	{
		case PA:
			updateBit(&DDRA, s_gpio.number, s_gpio.direction);
     216:	48 2f       	mov	r20, r24
     218:	67 2f       	mov	r22, r23
     21a:	81 e2       	ldi	r24, 0x21	; 33
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	3a c2       	rjmp	.+1140   	; 0x694 <updateBit>
			break;
     220:	08 95       	ret
		case PB:
			updateBit(&DDRB, s_gpio.number, s_gpio.direction);
     222:	48 2f       	mov	r20, r24
     224:	67 2f       	mov	r22, r23
     226:	84 e2       	ldi	r24, 0x24	; 36
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	34 c2       	rjmp	.+1128   	; 0x694 <updateBit>
			break;
     22c:	08 95       	ret
		case PC:
			updateBit(&DDRC, s_gpio.number, s_gpio.direction);
     22e:	48 2f       	mov	r20, r24
     230:	67 2f       	mov	r22, r23
     232:	87 e2       	ldi	r24, 0x27	; 39
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	2e c2       	rjmp	.+1116   	; 0x694 <updateBit>
			break;
     238:	08 95       	ret
		case PD:
			updateBit(&DDRD, s_gpio.number, s_gpio.direction);
     23a:	48 2f       	mov	r20, r24
     23c:	67 2f       	mov	r22, r23
     23e:	8a e2       	ldi	r24, 0x2A	; 42
     240:	90 e0       	ldi	r25, 0x00	; 0
     242:	28 c2       	rjmp	.+1104   	; 0x694 <updateBit>
     244:	08 95       	ret

00000246 <__vector_4>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(PCINT0_vect)
{
     246:	1f 92       	push	r1
     248:	0f 92       	push	r0
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	0f 92       	push	r0
     24e:	11 24       	eor	r1, r1
#ifdef USING_PCINT0
	p_pcInt0Callback();
#endif
}
     250:	0f 90       	pop	r0
     252:	0f be       	out	0x3f, r0	; 63
     254:	0f 90       	pop	r0
     256:	1f 90       	pop	r1
     258:	18 95       	reti

0000025a <__vector_5>:

ISR(PCINT1_vect)
{
     25a:	1f 92       	push	r1
     25c:	0f 92       	push	r0
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	0f 92       	push	r0
     262:	11 24       	eor	r1, r1
#ifdef USING_PCINT1
	p_pcInt1Callback();
#endif
}
     264:	0f 90       	pop	r0
     266:	0f be       	out	0x3f, r0	; 63
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <__vector_6>:

ISR(PCINT2_vect)
{
     26e:	1f 92       	push	r1
     270:	0f 92       	push	r0
     272:	0f b6       	in	r0, 0x3f	; 63
     274:	0f 92       	push	r0
     276:	11 24       	eor	r1, r1
#ifdef USING_PCINT2
	p_pcInt2Callback();
#endif
}
     278:	0f 90       	pop	r0
     27a:	0f be       	out	0x3f, r0	; 63
     27c:	0f 90       	pop	r0
     27e:	1f 90       	pop	r1
     280:	18 95       	reti

00000282 <__vector_7>:

ISR(PCINT3_vect)
{
     282:	1f 92       	push	r1
     284:	0f 92       	push	r0
     286:	0f b6       	in	r0, 0x3f	; 63
     288:	0f 92       	push	r0
     28a:	11 24       	eor	r1, r1
#ifdef USING_PCINT3
	p_pcInt3Callback();
#endif
}
     28c:	0f 90       	pop	r0
     28e:	0f be       	out	0x3f, r0	; 63
     290:	0f 90       	pop	r0
     292:	1f 90       	pop	r1
     294:	18 95       	reti

00000296 <__vector_1>:

ISR(INT0_vect)
{
     296:	1f 92       	push	r1
     298:	0f 92       	push	r0
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	0f 92       	push	r0
     29e:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[0]();
#endif
}
     2a0:	0f 90       	pop	r0
     2a2:	0f be       	out	0x3f, r0	; 63
     2a4:	0f 90       	pop	r0
     2a6:	1f 90       	pop	r1
     2a8:	18 95       	reti

000002aa <__vector_2>:

ISR(INT1_vect)
{
     2aa:	1f 92       	push	r1
     2ac:	0f 92       	push	r0
     2ae:	0f b6       	in	r0, 0x3f	; 63
     2b0:	0f 92       	push	r0
     2b2:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[1]();
#endif
}
     2b4:	0f 90       	pop	r0
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	0f 90       	pop	r0
     2ba:	1f 90       	pop	r1
     2bc:	18 95       	reti

000002be <__vector_3>:

ISR(INT2_vect)
{
     2be:	1f 92       	push	r1
     2c0:	0f 92       	push	r0
     2c2:	0f b6       	in	r0, 0x3f	; 63
     2c4:	0f 92       	push	r0
     2c6:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[2]();
#endif
}
     2c8:	0f 90       	pop	r0
     2ca:	0f be       	out	0x3f, r0	; 63
     2cc:	0f 90       	pop	r0
     2ce:	1f 90       	pop	r1
     2d0:	18 95       	reti

000002d2 <gpio_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void gpio_init(gpio_struct_t s_gpio)
{
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	c6 2f       	mov	r28, r22
     2dc:	17 2f       	mov	r17, r23
     2de:	d8 2f       	mov	r29, r24
	/* Configure pin direction */
	gpio_changeDirection(s_gpio);
     2e0:	09 2f       	mov	r16, r25

	/* Configure pin pull-up */
	if (s_gpio.direction == INPUT)
     2e2:	91 df       	rcall	.-222    	; 0x206 <gpio_changeDirection>
     2e4:	d1 11       	cpse	r29, r1
	{
		switch (s_gpio.port)
     2e6:	23 c0       	rjmp	.+70     	; 0x32e <gpio_init+0x5c>
     2e8:	c1 30       	cpi	r28, 0x01	; 1
     2ea:	81 f0       	breq	.+32     	; 0x30c <gpio_init+0x3a>
     2ec:	28 f0       	brcs	.+10     	; 0x2f8 <gpio_init+0x26>
     2ee:	c2 30       	cpi	r28, 0x02	; 2
     2f0:	99 f0       	breq	.+38     	; 0x318 <gpio_init+0x46>
     2f2:	c3 30       	cpi	r28, 0x03	; 3
     2f4:	b9 f0       	breq	.+46     	; 0x324 <gpio_init+0x52>
		{
			case PA:
				updateBit(&PORTA, s_gpio.number, s_gpio.pullUp);
     2f6:	1b c0       	rjmp	.+54     	; 0x32e <gpio_init+0x5c>
     2f8:	40 2f       	mov	r20, r16
     2fa:	61 2f       	mov	r22, r17
     2fc:	82 e2       	ldi	r24, 0x22	; 34
     2fe:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&DIDR0, s_gpio.number);
     300:	c9 d1       	rcall	.+914    	; 0x694 <updateBit>
     302:	61 2f       	mov	r22, r17
     304:	8e e7       	ldi	r24, 0x7E	; 126
     306:	90 e0       	ldi	r25, 0x00	; 0
				break;
     308:	e9 d1       	rcall	.+978    	; 0x6dc <clearBit>
			case PB:
				updateBit(&PORTB, s_gpio.number, s_gpio.pullUp);
     30a:	11 c0       	rjmp	.+34     	; 0x32e <gpio_init+0x5c>
     30c:	40 2f       	mov	r20, r16
     30e:	61 2f       	mov	r22, r17
     310:	85 e2       	ldi	r24, 0x25	; 37
     312:	90 e0       	ldi	r25, 0x00	; 0
				break;
			case PC:
				updateBit(&PORTC, s_gpio.number, s_gpio.pullUp);
     314:	bf d1       	rcall	.+894    	; 0x694 <updateBit>
     316:	0b c0       	rjmp	.+22     	; 0x32e <gpio_init+0x5c>
     318:	40 2f       	mov	r20, r16
     31a:	61 2f       	mov	r22, r17
				break;
			case PD:
				updateBit(&PORTD, s_gpio.number, s_gpio.pullUp);
     31c:	88 e2       	ldi	r24, 0x28	; 40
     31e:	90 e0       	ldi	r25, 0x00	; 0
     320:	b9 d1       	rcall	.+882    	; 0x694 <updateBit>
     322:	05 c0       	rjmp	.+10     	; 0x32e <gpio_init+0x5c>
     324:	40 2f       	mov	r20, r16
     326:	61 2f       	mov	r22, r17
				break;
		}
	}
}
     328:	8b e2       	ldi	r24, 0x2B	; 43
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	b3 d1       	rcall	.+870    	; 0x694 <updateBit>
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	1f 91       	pop	r17
     334:	0f 91       	pop	r16
     336:	08 95       	ret

00000338 <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     338:	0f 93       	push	r16
     33a:	1f 93       	push	r17
     33c:	cf 93       	push	r28
     33e:	df 93       	push	r29
     340:	8b 01       	movw	r16, r22
     342:	9c 01       	movw	r18, r24
     344:	ea 01       	movw	r28, r20
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	72 e1       	ldi	r23, 0x12	; 18
     34a:	8a e7       	ldi	r24, 0x7A	; 122
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	a9 01       	movw	r20, r18
     350:	98 01       	movw	r18, r16
     352:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
     356:	ba 01       	movw	r22, r20
     358:	a9 01       	movw	r20, r18
     35a:	40 51       	subi	r20, 0x10	; 16
     35c:	51 09       	sbc	r21, r1
     35e:	61 09       	sbc	r22, r1
     360:	71 09       	sbc	r23, r1
     362:	db 01       	movw	r26, r22
     364:	ca 01       	movw	r24, r20
     366:	b6 95       	lsr	r27
     368:	a7 95       	ror	r26
     36a:	97 95       	ror	r25
     36c:	87 95       	ror	r24
     36e:	8f 3f       	cpi	r24, 0xFF	; 255
     370:	91 05       	cpc	r25, r1
     372:	a1 05       	cpc	r26, r1
     374:	b1 05       	cpc	r27, r1
     376:	09 f0       	breq	.+2      	; 0x37a <calculateTWBR+0x42>
     378:	10 f4       	brcc	.+4      	; 0x37e <calculateTWBR+0x46>
     37a:	18 82       	st	Y, r1
     37c:	32 c0       	rjmp	.+100    	; 0x3e2 <calculateTWBR+0xaa>
     37e:	db 01       	movw	r26, r22
     380:	ca 01       	movw	r24, r20
     382:	68 94       	set
     384:	12 f8       	bld	r1, 2
     386:	b6 95       	lsr	r27
     388:	a7 95       	ror	r26
     38a:	97 95       	ror	r25
     38c:	87 95       	ror	r24
     38e:	16 94       	lsr	r1
     390:	d1 f7       	brne	.-12     	; 0x386 <calculateTWBR+0x4e>
     392:	8f 3f       	cpi	r24, 0xFF	; 255
     394:	91 05       	cpc	r25, r1
     396:	a1 05       	cpc	r26, r1
     398:	b1 05       	cpc	r27, r1
     39a:	09 f0       	breq	.+2      	; 0x39e <calculateTWBR+0x66>
     39c:	18 f4       	brcc	.+6      	; 0x3a4 <calculateTWBR+0x6c>
     39e:	21 e0       	ldi	r18, 0x01	; 1
     3a0:	28 83       	st	Y, r18
     3a2:	1f c0       	rjmp	.+62     	; 0x3e2 <calculateTWBR+0xaa>
     3a4:	db 01       	movw	r26, r22
     3a6:	ca 01       	movw	r24, r20
     3a8:	68 94       	set
     3aa:	14 f8       	bld	r1, 4
     3ac:	b6 95       	lsr	r27
     3ae:	a7 95       	ror	r26
     3b0:	97 95       	ror	r25
     3b2:	87 95       	ror	r24
     3b4:	16 94       	lsr	r1
     3b6:	d1 f7       	brne	.-12     	; 0x3ac <calculateTWBR+0x74>
     3b8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ba:	91 05       	cpc	r25, r1
     3bc:	a1 05       	cpc	r26, r1
     3be:	b1 05       	cpc	r27, r1
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <calculateTWBR+0x8c>
     3c2:	18 f4       	brcc	.+6      	; 0x3ca <calculateTWBR+0x92>
     3c4:	22 e0       	ldi	r18, 0x02	; 2
     3c6:	28 83       	st	Y, r18
     3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <calculateTWBR+0xaa>
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	88 83       	st	Y, r24
     3ce:	db 01       	movw	r26, r22
     3d0:	ca 01       	movw	r24, r20
     3d2:	68 94       	set
     3d4:	16 f8       	bld	r1, 6
     3d6:	b6 95       	lsr	r27
     3d8:	a7 95       	ror	r26
     3da:	97 95       	ror	r25
     3dc:	87 95       	ror	r24
     3de:	16 94       	lsr	r1
     3e0:	d1 f7       	brne	.-12     	; 0x3d6 <calculateTWBR+0x9e>
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	08 95       	ret

000003ec <stopAndGetErrorCode>:
     3ec:	cf 93       	push	r28
     3ee:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     3f2:	64 e0       	ldi	r22, 0x04	; 4
     3f4:	8c eb       	ldi	r24, 0xBC	; 188
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	65 d1       	rcall	.+714    	; 0x6c4 <setBit>
     3fa:	8c 2f       	mov	r24, r28
     3fc:	88 7f       	andi	r24, 0xF8	; 248
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <i2c_init>:
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	00 d0       	rcall	.+0      	; 0x408 <i2c_init+0x6>
     408:	00 d0       	rcall	.+0      	; 0x40a <i2c_init+0x8>
     40a:	00 d0       	rcall	.+0      	; 0x40c <i2c_init+0xa>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
     410:	5b 83       	std	Y+3, r21	; 0x03
     412:	6c 83       	std	Y+4, r22	; 0x04
     414:	7d 83       	std	Y+5, r23	; 0x05
     416:	8e 83       	std	Y+6, r24	; 0x06
     418:	6b 81       	ldd	r22, Y+3	; 0x03
     41a:	7c 81       	ldd	r23, Y+4	; 0x04
     41c:	8d 81       	ldd	r24, Y+5	; 0x05
     41e:	9e 81       	ldd	r25, Y+6	; 0x06
     420:	ae 01       	movw	r20, r28
     422:	4f 5f       	subi	r20, 0xFF	; 255
     424:	5f 4f       	sbci	r21, 0xFF	; 255
     426:	88 df       	rcall	.-240    	; 0x338 <calculateTWBR>
     428:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	62 d1       	rcall	.+708    	; 0x6f6 <checkBit>
     432:	48 2f       	mov	r20, r24
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	89 eb       	ldi	r24, 0xB9	; 185
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	2c d1       	rcall	.+600    	; 0x694 <updateBit>
     43c:	61 e0       	ldi	r22, 0x01	; 1
     43e:	89 81       	ldd	r24, Y+1	; 0x01
     440:	5a d1       	rcall	.+692    	; 0x6f6 <checkBit>
     442:	48 2f       	mov	r20, r24
     444:	61 e0       	ldi	r22, 0x01	; 1
     446:	89 eb       	ldi	r24, 0xB9	; 185
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	24 d1       	rcall	.+584    	; 0x694 <updateBit>
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	71 e0       	ldi	r23, 0x01	; 1
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	91 e0       	ldi	r25, 0x01	; 1
     454:	3e df       	rcall	.-388    	; 0x2d2 <gpio_init>
     456:	62 e0       	ldi	r22, 0x02	; 2
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	39 df       	rcall	.-398    	; 0x2d2 <gpio_init>
     460:	26 96       	adiw	r28, 0x06	; 6
     462:	0f b6       	in	r0, 0x3f	; 63
     464:	f8 94       	cli
     466:	de bf       	out	0x3e, r29	; 62
     468:	0f be       	out	0x3f, r0	; 63
     46a:	cd bf       	out	0x3d, r28	; 61
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <i2c_start>:
     472:	62 e0       	ldi	r22, 0x02	; 2
     474:	8c eb       	ldi	r24, 0xBC	; 188
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	25 c1       	rjmp	.+586    	; 0x6c4 <setBit>
     47a:	08 95       	ret

0000047c <i2c_transmit>:
}

u8 i2c_transmit(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     47c:	af 92       	push	r10
     47e:	bf 92       	push	r11
     480:	cf 92       	push	r12
     482:	df 92       	push	r13
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	18 2f       	mov	r17, r24
     492:	6b 01       	movw	r12, r22
     494:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     496:	65 e0       	ldi	r22, 0x05	; 5
     498:	8c eb       	ldi	r24, 0xBC	; 188
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	13 d1       	rcall	.+550    	; 0x6c4 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     49e:	cc eb       	ldi	r28, 0xBC	; 188
     4a0:	d0 e0       	ldi	r29, 0x00	; 0
     4a2:	88 81       	ld	r24, Y
     4a4:	67 e0       	ldi	r22, 0x07	; 7
     4a6:	27 d1       	rcall	.+590    	; 0x6f6 <checkBit>
     4a8:	88 23       	and	r24, r24
     4aa:	d9 f3       	breq	.-10     	; 0x4a2 <i2c_transmit+0x26>
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     4ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4b0:	88 7f       	andi	r24, 0xF8	; 248
     4b2:	88 30       	cpi	r24, 0x08	; 8
     4b4:	09 f0       	breq	.+2      	; 0x4b8 <i2c_transmit+0x3c>
     4b6:	47 c0       	rjmp	.+142    	; 0x546 <i2c_transmit+0xca>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     4b8:	11 0f       	add	r17, r17
     4ba:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		/* Set write mode */
		clearBit(&TWDR, TWD0);
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	8b eb       	ldi	r24, 0xBB	; 187
     4c2:	90 e0       	ldi	r25, 0x00	; 0
		/* Set repeated start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     4c4:	0b d1       	rcall	.+534    	; 0x6dc <clearBit>
     4c6:	65 e0       	ldi	r22, 0x05	; 5
     4c8:	8c eb       	ldi	r24, 0xBC	; 188
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	07 d1       	rcall	.+526    	; 0x6dc <clearBit>
     4ce:	cc eb       	ldi	r28, 0xBC	; 188
     4d0:	d0 e0       	ldi	r29, 0x00	; 0
     4d2:	88 81       	ld	r24, Y
     4d4:	67 e0       	ldi	r22, 0x07	; 7
     4d6:	0f d1       	rcall	.+542    	; 0x6f6 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
     4d8:	88 23       	and	r24, r24
     4da:	d9 f3       	breq	.-10     	; 0x4d2 <i2c_transmit+0x56>
     4dc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4e0:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Transmit data */
			while (i != u8_dataLength)
     4e2:	88 31       	cpi	r24, 0x18	; 24
     4e4:	71 f5       	brne	.+92     	; 0x542 <i2c_transmit+0xc6>
     4e6:	ee 20       	and	r14, r14
     4e8:	81 f1       	breq	.+96     	; 0x54a <i2c_transmit+0xce>
     4ea:	86 01       	movw	r16, r12
     4ec:	ea 94       	dec	r14
     4ee:	f1 2c       	mov	r15, r1
     4f0:	8f ef       	ldi	r24, 0xFF	; 255
     4f2:	e8 1a       	sub	r14, r24
     4f4:	f8 0a       	sbc	r15, r24
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     4f6:	ec 0c       	add	r14, r12
     4f8:	fd 1c       	adc	r15, r13
     4fa:	0f 2e       	mov	r0, r31
     4fc:	fb eb       	ldi	r31, 0xBB	; 187
     4fe:	af 2e       	mov	r10, r31
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     500:	b1 2c       	mov	r11, r1
     502:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     504:	cc eb       	ldi	r28, 0xBC	; 188
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	0f 2e       	mov	r0, r31
     50a:	f9 eb       	ldi	r31, 0xB9	; 185
     50c:	cf 2e       	mov	r12, r31
		{
			/* Transmit data */
			while (i != u8_dataLength)
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     50e:	d1 2c       	mov	r13, r1
     510:	f0 2d       	mov	r31, r0
     512:	f8 01       	movw	r30, r16
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     514:	81 91       	ld	r24, Z+
     516:	8f 01       	movw	r16, r30
     518:	f5 01       	movw	r30, r10
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     51a:	80 83       	st	Z, r24
     51c:	67 e0       	ldi	r22, 0x07	; 7
     51e:	ce 01       	movw	r24, r28
     520:	d1 d0       	rcall	.+418    	; 0x6c4 <setBit>
     522:	88 81       	ld	r24, Y
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     524:	67 e0       	ldi	r22, 0x07	; 7
     526:	e7 d0       	rcall	.+462    	; 0x6f6 <checkBit>
     528:	88 23       	and	r24, r24
     52a:	d9 f3       	breq	.-10     	; 0x522 <i2c_transmit+0xa6>
					return stopAndGetErrorCode();
     52c:	f6 01       	movw	r30, r12
     52e:	80 81       	ld	r24, Z
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
		{
			/* Transmit data */
			while (i != u8_dataLength)
     530:	88 7f       	andi	r24, 0xF8	; 248
     532:	88 32       	cpi	r24, 0x28	; 40
     534:	11 f0       	breq	.+4      	; 0x53a <i2c_transmit+0xbe>
					return stopAndGetErrorCode();
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     536:	5a df       	rcall	.-332    	; 0x3ec <stopAndGetErrorCode>
     538:	13 c0       	rjmp	.+38     	; 0x560 <i2c_transmit+0xe4>
     53a:	0e 15       	cp	r16, r14
	}
	else
		return stopAndGetErrorCode();
     53c:	1f 05       	cpc	r17, r15
     53e:	49 f7       	brne	.-46     	; 0x512 <i2c_transmit+0x96>
	
	/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
	setBit(&TWCR, TWSTO);
     540:	04 c0       	rjmp	.+8      	; 0x54a <i2c_transmit+0xce>
     542:	54 df       	rcall	.-344    	; 0x3ec <stopAndGetErrorCode>
     544:	0d c0       	rjmp	.+26     	; 0x560 <i2c_transmit+0xe4>
     546:	52 df       	rcall	.-348    	; 0x3ec <stopAndGetErrorCode>
     548:	0b c0       	rjmp	.+22     	; 0x560 <i2c_transmit+0xe4>
	/* Wait for stop condition to be sent. */
	while (checkBit(TWCR, TWSTO));
     54a:	64 e0       	ldi	r22, 0x04	; 4
     54c:	8c eb       	ldi	r24, 0xBC	; 188
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	b9 d0       	rcall	.+370    	; 0x6c4 <setBit>
     552:	cc eb       	ldi	r28, 0xBC	; 188
     554:	d0 e0       	ldi	r29, 0x00	; 0
     556:	88 81       	ld	r24, Y
     558:	64 e0       	ldi	r22, 0x04	; 4

	return I2C_NO_ERROR;
}
     55a:	cd d0       	rcall	.+410    	; 0x6f6 <checkBit>
     55c:	81 11       	cpse	r24, r1
     55e:	fb cf       	rjmp	.-10     	; 0x556 <i2c_transmit+0xda>
     560:	df 91       	pop	r29
     562:	cf 91       	pop	r28
     564:	1f 91       	pop	r17
     566:	0f 91       	pop	r16
     568:	ff 90       	pop	r15
     56a:	ef 90       	pop	r14
     56c:	df 90       	pop	r13
     56e:	cf 90       	pop	r12
     570:	bf 90       	pop	r11
     572:	af 90       	pop	r10
     574:	08 95       	ret

00000576 <i2c_receive>:

u8 i2c_receive(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	18 2f       	mov	r17, r24
     58c:	6b 01       	movw	r12, r22
     58e:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     590:	65 e0       	ldi	r22, 0x05	; 5
     592:	8c eb       	ldi	r24, 0xBC	; 188
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	96 d0       	rcall	.+300    	; 0x6c4 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     598:	cc eb       	ldi	r28, 0xBC	; 188
     59a:	d0 e0       	ldi	r29, 0x00	; 0
     59c:	88 81       	ld	r24, Y
     59e:	67 e0       	ldi	r22, 0x07	; 7
     5a0:	aa d0       	rcall	.+340    	; 0x6f6 <checkBit>
     5a2:	88 23       	and	r24, r24
     5a4:	d9 f3       	breq	.-10     	; 0x59c <i2c_receive+0x26>
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     5a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5aa:	88 7f       	andi	r24, 0xF8	; 248
     5ac:	88 30       	cpi	r24, 0x08	; 8
     5ae:	09 f0       	breq	.+2      	; 0x5b2 <i2c_receive+0x3c>
     5b0:	47 c0       	rjmp	.+142    	; 0x640 <i2c_receive+0xca>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     5b2:	11 0f       	add	r17, r17
     5b4:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		/* Set read mode */
		setBit(&TWDR, TWD0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	8b eb       	ldi	r24, 0xBB	; 187
     5bc:	90 e0       	ldi	r25, 0x00	; 0
		/* Set repeated start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     5be:	82 d0       	rcall	.+260    	; 0x6c4 <setBit>
     5c0:	65 e0       	ldi	r22, 0x05	; 5
     5c2:	8c eb       	ldi	r24, 0xBC	; 188
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	8a d0       	rcall	.+276    	; 0x6dc <clearBit>
     5c8:	cc eb       	ldi	r28, 0xBC	; 188
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
     5cc:	88 81       	ld	r24, Y
     5ce:	67 e0       	ldi	r22, 0x07	; 7
     5d0:	92 d0       	rcall	.+292    	; 0x6f6 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
     5d2:	88 23       	and	r24, r24
     5d4:	d9 f3       	breq	.-10     	; 0x5cc <i2c_receive+0x56>
     5d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5da:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Receive data */
			while (i != u8_dataLength)
     5dc:	80 34       	cpi	r24, 0x40	; 64
     5de:	71 f5       	brne	.+92     	; 0x63c <i2c_receive+0xc6>
     5e0:	ee 20       	and	r14, r14
     5e2:	81 f1       	breq	.+96     	; 0x644 <i2c_receive+0xce>
     5e4:	86 01       	movw	r16, r12
     5e6:	ea 94       	dec	r14
     5e8:	f1 2c       	mov	r15, r1
     5ea:	8f ef       	ldi	r24, 0xFF	; 255
     5ec:	e8 1a       	sub	r14, r24
     5ee:	f8 0a       	sbc	r15, r24
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     5f0:	ec 0c       	add	r14, r12
     5f2:	fd 1c       	adc	r15, r13
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     5f4:	cc eb       	ldi	r28, 0xBC	; 188
     5f6:	d0 e0       	ldi	r29, 0x00	; 0
     5f8:	0f 2e       	mov	r0, r31
     5fa:	f9 eb       	ldi	r31, 0xB9	; 185
     5fc:	cf 2e       	mov	r12, r31
					return stopAndGetErrorCode();
				/* Read next byte */
				au8_data[i] = TWDR;
     5fe:	d1 2c       	mov	r13, r1
     600:	f0 2d       	mov	r31, r0
     602:	0f 2e       	mov	r0, r31
		{
			/* Receive data */
			while (i != u8_dataLength)
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     604:	fb eb       	ldi	r31, 0xBB	; 187
     606:	af 2e       	mov	r10, r31
     608:	b1 2c       	mov	r11, r1
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     60a:	f0 2d       	mov	r31, r0
     60c:	66 e0       	ldi	r22, 0x06	; 6
     60e:	ce 01       	movw	r24, r28
     610:	59 d0       	rcall	.+178    	; 0x6c4 <setBit>
     612:	88 81       	ld	r24, Y
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     614:	67 e0       	ldi	r22, 0x07	; 7
     616:	6f d0       	rcall	.+222    	; 0x6f6 <checkBit>
     618:	88 23       	and	r24, r24
     61a:	d9 f3       	breq	.-10     	; 0x612 <i2c_receive+0x9c>
     61c:	f6 01       	movw	r30, r12
					return stopAndGetErrorCode();
     61e:	80 81       	ld	r24, Z
     620:	88 7f       	andi	r24, 0xF8	; 248
     622:	80 35       	cpi	r24, 0x50	; 80
				/* Read next byte */
				au8_data[i] = TWDR;
     624:	11 f0       	breq	.+4      	; 0x62a <i2c_receive+0xb4>
     626:	e2 de       	rcall	.-572    	; 0x3ec <stopAndGetErrorCode>
     628:	2a c0       	rjmp	.+84     	; 0x67e <i2c_receive+0x108>
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
		{
			/* Receive data */
			while (i != u8_dataLength)
     62a:	f5 01       	movw	r30, r10
     62c:	80 81       	ld	r24, Z
     62e:	f8 01       	movw	r30, r16
				au8_data[i] = TWDR;
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     630:	81 93       	st	Z+, r24
     632:	8f 01       	movw	r16, r30
     634:	ee 15       	cp	r30, r14
	}
	else
		return stopAndGetErrorCode();
     636:	ff 05       	cpc	r31, r15
     638:	49 f7       	brne	.-46     	; 0x60c <i2c_receive+0x96>
	
	/* Send NACK after all expected transfers are done. Also clears I2C flag because it writes a 1 to it. */
	clearBit(&TWCR, TWEA);
     63a:	04 c0       	rjmp	.+8      	; 0x644 <i2c_receive+0xce>
     63c:	d7 de       	rcall	.-594    	; 0x3ec <stopAndGetErrorCode>
     63e:	1f c0       	rjmp	.+62     	; 0x67e <i2c_receive+0x108>
     640:	d5 de       	rcall	.-598    	; 0x3ec <stopAndGetErrorCode>
     642:	1d c0       	rjmp	.+58     	; 0x67e <i2c_receive+0x108>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     644:	66 e0       	ldi	r22, 0x06	; 6
     646:	8c eb       	ldi	r24, 0xBC	; 188
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	48 d0       	rcall	.+144    	; 0x6dc <clearBit>
     64c:	cc eb       	ldi	r28, 0xBC	; 188
     64e:	d0 e0       	ldi	r29, 0x00	; 0
     650:	88 81       	ld	r24, Y
	/* If NACK was sent, all is good */
	if ((TWSR & 0xF8) == I2C_DATA_READ_NACK)
     652:	67 e0       	ldi	r22, 0x07	; 7
     654:	50 d0       	rcall	.+160    	; 0x6f6 <checkBit>
     656:	88 23       	and	r24, r24
     658:	d9 f3       	breq	.-10     	; 0x650 <i2c_receive+0xda>
	{
		/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
		setBit(&TWCR, TWSTO);
     65a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     65e:	88 7f       	andi	r24, 0xF8	; 248
     660:	88 35       	cpi	r24, 0x58	; 88
     662:	61 f4       	brne	.+24     	; 0x67c <i2c_receive+0x106>
		/* Wait for stop condition to be sent. */
		while (checkBit(TWCR, TWSTO));
     664:	64 e0       	ldi	r22, 0x04	; 4
     666:	8c eb       	ldi	r24, 0xBC	; 188
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	2c d0       	rcall	.+88     	; 0x6c4 <setBit>
     66c:	cc eb       	ldi	r28, 0xBC	; 188
     66e:	d0 e0       	ldi	r29, 0x00	; 0
     670:	88 81       	ld	r24, Y
     672:	64 e0       	ldi	r22, 0x04	; 4
     674:	40 d0       	rcall	.+128    	; 0x6f6 <checkBit>
	}

	return I2C_NO_ERROR;
     676:	81 11       	cpse	r24, r1
}
     678:	fb cf       	rjmp	.-10     	; 0x670 <i2c_receive+0xfa>
     67a:	01 c0       	rjmp	.+2      	; 0x67e <i2c_receive+0x108>
     67c:	80 e0       	ldi	r24, 0x00	; 0
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	ff 90       	pop	r15
     688:	ef 90       	pop	r14
     68a:	df 90       	pop	r13
     68c:	cf 90       	pop	r12
     68e:	bf 90       	pop	r11
     690:	af 90       	pop	r10
     692:	08 95       	ret

00000694 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     694:	fc 01       	movw	r30, r24
     696:	94 2f       	mov	r25, r20
     698:	20 81       	ld	r18, Z
     69a:	41 e0       	ldi	r20, 0x01	; 1
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	06 2e       	mov	r0, r22
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <updateBit+0x12>
     6a2:	44 0f       	add	r20, r20
     6a4:	55 1f       	adc	r21, r21
     6a6:	0a 94       	dec	r0
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <updateBit+0xe>
     6aa:	40 95       	com	r20
     6ac:	50 95       	com	r21
     6ae:	24 23       	and	r18, r20
     6b0:	49 2f       	mov	r20, r25
     6b2:	50 e0       	ldi	r21, 0x00	; 0
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <updateBit+0x26>
     6b6:	44 0f       	add	r20, r20
     6b8:	55 1f       	adc	r21, r21
     6ba:	6a 95       	dec	r22
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <updateBit+0x22>
     6be:	42 2b       	or	r20, r18
     6c0:	40 83       	st	Z, r20
     6c2:	08 95       	ret

000006c4 <setBit>:
     6c4:	fc 01       	movw	r30, r24
     6c6:	40 81       	ld	r20, Z
     6c8:	21 e0       	ldi	r18, 0x01	; 1
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <setBit+0xe>
     6ce:	22 0f       	add	r18, r18
     6d0:	33 1f       	adc	r19, r19
     6d2:	6a 95       	dec	r22
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <setBit+0xa>
     6d6:	24 2b       	or	r18, r20
     6d8:	20 83       	st	Z, r18
     6da:	08 95       	ret

000006dc <clearBit>:
     6dc:	fc 01       	movw	r30, r24
     6de:	90 81       	ld	r25, Z
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <clearBit+0xe>
     6e6:	22 0f       	add	r18, r18
     6e8:	33 1f       	adc	r19, r19
     6ea:	6a 95       	dec	r22
     6ec:	e2 f7       	brpl	.-8      	; 0x6e6 <clearBit+0xa>
     6ee:	20 95       	com	r18
     6f0:	29 23       	and	r18, r25
     6f2:	20 83       	st	Z, r18
     6f4:	08 95       	ret

000006f6 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	02 c0       	rjmp	.+4      	; 0x6fe <checkBit+0x8>
     6fa:	95 95       	asr	r25
     6fc:	87 95       	ror	r24
     6fe:	6a 95       	dec	r22
     700:	e2 f7       	brpl	.-8      	; 0x6fa <checkBit+0x4>
}
     702:	81 70       	andi	r24, 0x01	; 1
     704:	08 95       	ret

00000706 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     706:	cf 92       	push	r12
     708:	df 92       	push	r13
     70a:	ef 92       	push	r14
     70c:	ff 92       	push	r15
     70e:	69 01       	movw	r12, r18
     710:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	2c 19       	sub	r18, r12
     718:	3d 09       	sbc	r19, r13
     71a:	4e 09       	sbc	r20, r14
     71c:	5f 09       	sbc	r21, r15
     71e:	a8 ee       	ldi	r26, 0xE8	; 232
     720:	b3 e0       	ldi	r27, 0x03	; 3
     722:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
     726:	a7 01       	movw	r20, r14
     728:	96 01       	movw	r18, r12
     72a:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
     72e:	c9 01       	movw	r24, r18
     730:	99 23       	and	r25, r25
     732:	24 f4       	brge	.+8      	; 0x73c <calculateError+0x36>
     734:	88 27       	eor	r24, r24
     736:	99 27       	eor	r25, r25
     738:	82 1b       	sub	r24, r18
     73a:	93 0b       	sbc	r25, r19
}
     73c:	ff 90       	pop	r15
     73e:	ef 90       	pop	r14
     740:	df 90       	pop	r13
     742:	cf 90       	pop	r12
     744:	08 95       	ret

00000746 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     746:	1f 92       	push	r1
     748:	0f 92       	push	r0
     74a:	0f b6       	in	r0, 0x3f	; 63
     74c:	0f 92       	push	r0
     74e:	11 24       	eor	r1, r1
     750:	0b b6       	in	r0, 0x3b	; 59
     752:	0f 92       	push	r0
     754:	8f 93       	push	r24
     756:	9f 93       	push	r25
     758:	ef 93       	push	r30
     75a:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     75c:	e0 91 ff 07 	lds	r30, 0x07FF	; 0x8007ff <u8_RLastReceivedIndex>
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	8e b5       	in	r24, 0x2e	; 46
     764:	e0 50       	subi	r30, 0x00	; 0
     766:	f8 4f       	sbci	r31, 0xF8	; 248
     768:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     76a:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <u8_RLastReceivedIndex>
     76e:	89 30       	cpi	r24, 0x09	; 9
     770:	30 f4       	brcc	.+12     	; 0x77e <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     772:	80 91 ff 07 	lds	r24, 0x07FF	; 0x8007ff <u8_RLastReceivedIndex>
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	80 93 ff 07 	sts	0x07FF, r24	; 0x8007ff <u8_RLastReceivedIndex>
     77c:	02 c0       	rjmp	.+4      	; 0x782 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     77e:	10 92 ff 07 	sts	0x07FF, r1	; 0x8007ff <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	80 93 fe 07 	sts	0x07FE, r24	; 0x8007fe <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     788:	90 91 fc 07 	lds	r25, 0x07FC	; 0x8007fc <u8_TLastTransmittedIndex>
     78c:	80 91 15 08 	lds	r24, 0x0815	; 0x800815 <u8_TLastRequestedIndex>
     790:	98 17       	cp	r25, r24
     792:	a1 f0       	breq	.+40     	; 0x7bc <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     794:	e0 91 fc 07 	lds	r30, 0x07FC	; 0x8007fc <u8_TLastTransmittedIndex>
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	e6 5f       	subi	r30, 0xF6	; 246
     79c:	f7 4f       	sbci	r31, 0xF7	; 247
     79e:	80 81       	ld	r24, Z
     7a0:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     7a2:	80 91 fc 07 	lds	r24, 0x07FC	; 0x8007fc <u8_TLastTransmittedIndex>
     7a6:	89 30       	cpi	r24, 0x09	; 9
     7a8:	30 f4       	brcc	.+12     	; 0x7b6 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     7aa:	80 91 fc 07 	lds	r24, 0x07FC	; 0x8007fc <u8_TLastTransmittedIndex>
     7ae:	8f 5f       	subi	r24, 0xFF	; 255
     7b0:	80 93 fc 07 	sts	0x07FC, r24	; 0x8007fc <u8_TLastTransmittedIndex>
     7b4:	06 c0       	rjmp	.+12     	; 0x7c2 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     7b6:	10 92 fc 07 	sts	0x07FC, r1	; 0x8007fc <u8_TLastTransmittedIndex>
     7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	80 93 14 08 	sts	0x0814, r24	; 0x800814 <b_TAvailable>
	}
}
     7c2:	ff 91       	pop	r31
     7c4:	ef 91       	pop	r30
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	0f 90       	pop	r0
     7cc:	0b be       	out	0x3b, r0	; 59
     7ce:	0f 90       	pop	r0
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	0f 90       	pop	r0
     7d4:	1f 90       	pop	r1
     7d6:	18 95       	reti

000007d8 <__vector_15>:
}
#endif

#ifdef TIMER1_INTERRUPT_MODE
ISR(TIMER1_OVF_vect)
{
     7d8:	1f 92       	push	r1
     7da:	0f 92       	push	r0
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	0f 92       	push	r0
     7e0:	11 24       	eor	r1, r1
     7e2:	0b b6       	in	r0, 0x3b	; 59
     7e4:	0f 92       	push	r0
     7e6:	2f 93       	push	r18
     7e8:	3f 93       	push	r19
     7ea:	4f 93       	push	r20
     7ec:	5f 93       	push	r21
     7ee:	6f 93       	push	r22
     7f0:	7f 93       	push	r23
     7f2:	8f 93       	push	r24
     7f4:	9f 93       	push	r25
     7f6:	af 93       	push	r26
     7f8:	bf 93       	push	r27
     7fa:	ef 93       	push	r30
     7fc:	ff 93       	push	r31
	p_timer1Callbacks[OVERFLOW]();
     7fe:	e0 91 16 08 	lds	r30, 0x0816	; 0x800816 <p_timer1Callbacks>
     802:	f0 91 17 08 	lds	r31, 0x0817	; 0x800817 <p_timer1Callbacks+0x1>
     806:	09 95       	icall
}
     808:	ff 91       	pop	r31
     80a:	ef 91       	pop	r30
     80c:	bf 91       	pop	r27
     80e:	af 91       	pop	r26
     810:	9f 91       	pop	r25
     812:	8f 91       	pop	r24
     814:	7f 91       	pop	r23
     816:	6f 91       	pop	r22
     818:	5f 91       	pop	r21
     81a:	4f 91       	pop	r20
     81c:	3f 91       	pop	r19
     81e:	2f 91       	pop	r18
     820:	0f 90       	pop	r0
     822:	0b be       	out	0x3b, r0	; 59
     824:	0f 90       	pop	r0
     826:	0f be       	out	0x3f, r0	; 63
     828:	0f 90       	pop	r0
     82a:	1f 90       	pop	r1
     82c:	18 95       	reti

0000082e <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	0b b6       	in	r0, 0x3b	; 59
     83a:	0f 92       	push	r0
     83c:	0f 93       	push	r16
     83e:	1f 93       	push	r17
     840:	2f 93       	push	r18
     842:	3f 93       	push	r19
     844:	4f 93       	push	r20
     846:	5f 93       	push	r21
     848:	6f 93       	push	r22
     84a:	7f 93       	push	r23
     84c:	8f 93       	push	r24
     84e:	9f 93       	push	r25
     850:	af 93       	push	r26
     852:	bf 93       	push	r27
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
     858:	ef 93       	push	r30
     85a:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     85c:	c1 e8       	ldi	r28, 0x81	; 129
     85e:	d0 e0       	ldi	r29, 0x00	; 0
     860:	88 81       	ld	r24, Y
     862:	64 e0       	ldi	r22, 0x04	; 4
     864:	48 df       	rcall	.-368    	; 0x6f6 <checkBit>
     866:	18 2f       	mov	r17, r24
     868:	88 81       	ld	r24, Y
     86a:	63 e0       	ldi	r22, 0x03	; 3
     86c:	44 df       	rcall	.-376    	; 0x6f6 <checkBit>
     86e:	c1 2f       	mov	r28, r17
     870:	cc 0f       	add	r28, r28
     872:	cc 0f       	add	r28, r28
     874:	cc 0f       	add	r28, r28
     876:	24 e0       	ldi	r18, 0x04	; 4
     878:	82 9f       	mul	r24, r18
     87a:	c0 01       	movw	r24, r0
     87c:	11 24       	eor	r1, r1
     87e:	c8 2b       	or	r28, r24
     880:	00 e8       	ldi	r16, 0x80	; 128
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	f8 01       	movw	r30, r16
     886:	80 81       	ld	r24, Z
     888:	61 e0       	ldi	r22, 0x01	; 1
     88a:	35 df       	rcall	.-406    	; 0x6f6 <checkBit>
     88c:	d8 2f       	mov	r29, r24
     88e:	f8 01       	movw	r30, r16
     890:	80 81       	ld	r24, Z
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	30 df       	rcall	.-416    	; 0x6f6 <checkBit>
     896:	dd 0f       	add	r29, r29
     898:	8c 2b       	or	r24, r28
     89a:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
     89c:	88 30       	cpi	r24, 0x08	; 8
     89e:	18 f4       	brcc	.+6      	; 0x8a6 <__vector_13+0x78>
     8a0:	84 30       	cpi	r24, 0x04	; 4
     8a2:	19 f4       	brne	.+6      	; 0x8aa <__vector_13+0x7c>
     8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <__vector_13+0x88>
     8a6:	80 fd       	sbrc	r24, 0
     8a8:	06 c0       	rjmp	.+12     	; 0x8b6 <__vector_13+0x88>
		p_timer1Callbacks[COMPARE_MATCH_A]();
     8aa:	e0 91 18 08 	lds	r30, 0x0818	; 0x800818 <p_timer1Callbacks+0x2>
     8ae:	f0 91 19 08 	lds	r31, 0x0819	; 0x800819 <p_timer1Callbacks+0x3>
     8b2:	09 95       	icall
     8b4:	05 c0       	rjmp	.+10     	; 0x8c0 <__vector_13+0x92>
	else
		p_timer1Callbacks[OVERFLOW]();
     8b6:	e0 91 16 08 	lds	r30, 0x0816	; 0x800816 <p_timer1Callbacks>
     8ba:	f0 91 17 08 	lds	r31, 0x0817	; 0x800817 <p_timer1Callbacks+0x1>
     8be:	09 95       	icall
}
     8c0:	ff 91       	pop	r31
     8c2:	ef 91       	pop	r30
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	bf 91       	pop	r27
     8ca:	af 91       	pop	r26
     8cc:	9f 91       	pop	r25
     8ce:	8f 91       	pop	r24
     8d0:	7f 91       	pop	r23
     8d2:	6f 91       	pop	r22
     8d4:	5f 91       	pop	r21
     8d6:	4f 91       	pop	r20
     8d8:	3f 91       	pop	r19
     8da:	2f 91       	pop	r18
     8dc:	1f 91       	pop	r17
     8de:	0f 91       	pop	r16
     8e0:	0f 90       	pop	r0
     8e2:	0b be       	out	0x3b, r0	; 59
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	0f 90       	pop	r0
     8ea:	1f 90       	pop	r1
     8ec:	18 95       	reti

000008ee <__vector_14>:

ISR(TIMER1_COMPB_vect)
{
     8ee:	1f 92       	push	r1
     8f0:	0f 92       	push	r0
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	0f 92       	push	r0
     8f6:	11 24       	eor	r1, r1
     8f8:	0b b6       	in	r0, 0x3b	; 59
     8fa:	0f 92       	push	r0
     8fc:	2f 93       	push	r18
     8fe:	3f 93       	push	r19
     900:	4f 93       	push	r20
     902:	5f 93       	push	r21
     904:	6f 93       	push	r22
     906:	7f 93       	push	r23
     908:	8f 93       	push	r24
     90a:	9f 93       	push	r25
     90c:	af 93       	push	r26
     90e:	bf 93       	push	r27
     910:	ef 93       	push	r30
     912:	ff 93       	push	r31
	p_timer1Callbacks[COMPARE_MATCH_B]();
     914:	e0 91 1a 08 	lds	r30, 0x081A	; 0x80081a <p_timer1Callbacks+0x4>
     918:	f0 91 1b 08 	lds	r31, 0x081B	; 0x80081b <p_timer1Callbacks+0x5>
     91c:	09 95       	icall
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0b be       	out	0x3b, r0	; 59
     93a:	0f 90       	pop	r0
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	0f 90       	pop	r0
     940:	1f 90       	pop	r1
     942:	18 95       	reti

00000944 <__vector_12>:

ISR(TIMER1_CAPT_vect)
{
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	0b b6       	in	r0, 0x3b	; 59
     950:	0f 92       	push	r0
     952:	0f 93       	push	r16
     954:	1f 93       	push	r17
     956:	2f 93       	push	r18
     958:	3f 93       	push	r19
     95a:	4f 93       	push	r20
     95c:	5f 93       	push	r21
     95e:	6f 93       	push	r22
     960:	7f 93       	push	r23
     962:	8f 93       	push	r24
     964:	9f 93       	push	r25
     966:	af 93       	push	r26
     968:	bf 93       	push	r27
     96a:	cf 93       	push	r28
     96c:	df 93       	push	r29
     96e:	ef 93       	push	r30
     970:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     972:	c1 e8       	ldi	r28, 0x81	; 129
     974:	d0 e0       	ldi	r29, 0x00	; 0
     976:	88 81       	ld	r24, Y
     978:	64 e0       	ldi	r22, 0x04	; 4
     97a:	bd de       	rcall	.-646    	; 0x6f6 <checkBit>
     97c:	18 2f       	mov	r17, r24
     97e:	88 81       	ld	r24, Y
     980:	63 e0       	ldi	r22, 0x03	; 3
     982:	b9 de       	rcall	.-654    	; 0x6f6 <checkBit>
     984:	c1 2f       	mov	r28, r17
     986:	cc 0f       	add	r28, r28
     988:	cc 0f       	add	r28, r28
     98a:	cc 0f       	add	r28, r28
     98c:	24 e0       	ldi	r18, 0x04	; 4
     98e:	82 9f       	mul	r24, r18
     990:	c0 01       	movw	r24, r0
     992:	11 24       	eor	r1, r1
     994:	c8 2b       	or	r28, r24
     996:	00 e8       	ldi	r16, 0x80	; 128
     998:	10 e0       	ldi	r17, 0x00	; 0
     99a:	f8 01       	movw	r30, r16
     99c:	80 81       	ld	r24, Z
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	aa de       	rcall	.-684    	; 0x6f6 <checkBit>
     9a2:	d8 2f       	mov	r29, r24
     9a4:	f8 01       	movw	r30, r16
     9a6:	80 81       	ld	r24, Z
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	a5 de       	rcall	.-694    	; 0x6f6 <checkBit>
     9ac:	dd 0f       	add	r29, r29
     9ae:	8c 2b       	or	r24, r28
     9b0:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
     9b2:	88 30       	cpi	r24, 0x08	; 8
     9b4:	10 f0       	brcs	.+4      	; 0x9ba <__vector_12+0x76>
     9b6:	80 ff       	sbrs	r24, 0
     9b8:	06 c0       	rjmp	.+12     	; 0x9c6 <__vector_12+0x82>
		p_timer1Callbacks[EXTERNAL]();
     9ba:	e0 91 1c 08 	lds	r30, 0x081C	; 0x80081c <p_timer1Callbacks+0x6>
     9be:	f0 91 1d 08 	lds	r31, 0x081D	; 0x80081d <p_timer1Callbacks+0x7>
     9c2:	09 95       	icall
     9c4:	05 c0       	rjmp	.+10     	; 0x9d0 <__vector_12+0x8c>
	else
		p_timer1Callbacks[OVERFLOW]();
     9c6:	e0 91 16 08 	lds	r30, 0x0816	; 0x800816 <p_timer1Callbacks>
     9ca:	f0 91 17 08 	lds	r31, 0x0817	; 0x800817 <p_timer1Callbacks+0x1>
     9ce:	09 95       	icall
}
     9d0:	ff 91       	pop	r31
     9d2:	ef 91       	pop	r30
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	1f 91       	pop	r17
     9ee:	0f 91       	pop	r16
     9f0:	0f 90       	pop	r0
     9f2:	0b be       	out	0x3b, r0	; 59
     9f4:	0f 90       	pop	r0
     9f6:	0f be       	out	0x3f, r0	; 63
     9f8:	0f 90       	pop	r0
     9fa:	1f 90       	pop	r1
     9fc:	18 95       	reti

000009fe <__vector_11>:
#endif

#ifdef TIMER2_INTERRUPT_MODE
ISR(TIMER2_OVF_vect)
{
     9fe:	1f 92       	push	r1
     a00:	0f 92       	push	r0
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	0f 92       	push	r0
     a06:	11 24       	eor	r1, r1
     a08:	0b b6       	in	r0, 0x3b	; 59
     a0a:	0f 92       	push	r0
     a0c:	2f 93       	push	r18
     a0e:	3f 93       	push	r19
     a10:	4f 93       	push	r20
     a12:	5f 93       	push	r21
     a14:	6f 93       	push	r22
     a16:	7f 93       	push	r23
     a18:	8f 93       	push	r24
     a1a:	9f 93       	push	r25
     a1c:	af 93       	push	r26
     a1e:	bf 93       	push	r27
     a20:	ef 93       	push	r30
     a22:	ff 93       	push	r31
	p_timer2Callbacks[OVERFLOW]();
     a24:	e0 91 20 08 	lds	r30, 0x0820	; 0x800820 <p_timer2Callbacks>
     a28:	f0 91 21 08 	lds	r31, 0x0821	; 0x800821 <p_timer2Callbacks+0x1>
     a2c:	09 95       	icall
}
     a2e:	ff 91       	pop	r31
     a30:	ef 91       	pop	r30
     a32:	bf 91       	pop	r27
     a34:	af 91       	pop	r26
     a36:	9f 91       	pop	r25
     a38:	8f 91       	pop	r24
     a3a:	7f 91       	pop	r23
     a3c:	6f 91       	pop	r22
     a3e:	5f 91       	pop	r21
     a40:	4f 91       	pop	r20
     a42:	3f 91       	pop	r19
     a44:	2f 91       	pop	r18
     a46:	0f 90       	pop	r0
     a48:	0b be       	out	0x3b, r0	; 59
     a4a:	0f 90       	pop	r0
     a4c:	0f be       	out	0x3f, r0	; 63
     a4e:	0f 90       	pop	r0
     a50:	1f 90       	pop	r1
     a52:	18 95       	reti

00000a54 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	0b b6       	in	r0, 0x3b	; 59
     a60:	0f 92       	push	r0
     a62:	2f 93       	push	r18
     a64:	3f 93       	push	r19
     a66:	4f 93       	push	r20
     a68:	5f 93       	push	r21
     a6a:	6f 93       	push	r22
     a6c:	7f 93       	push	r23
     a6e:	8f 93       	push	r24
     a70:	9f 93       	push	r25
     a72:	af 93       	push	r26
     a74:	bf 93       	push	r27
     a76:	ef 93       	push	r30
     a78:	ff 93       	push	r31
	if ((checkBit(TCCR2B, WGM22) == CLEAR) && ((TCCR2A & 0b11) != 0b10))
     a7a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     a7e:	63 e0       	ldi	r22, 0x03	; 3
     a80:	3a de       	rcall	.-908    	; 0x6f6 <checkBit>
     a82:	81 11       	cpse	r24, r1
     a84:	0b c0       	rjmp	.+22     	; 0xa9c <__vector_9+0x48>
     a86:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     a8a:	83 70       	andi	r24, 0x03	; 3
     a8c:	82 30       	cpi	r24, 0x02	; 2
     a8e:	31 f0       	breq	.+12     	; 0xa9c <__vector_9+0x48>
		p_timer2Callbacks[COMPARE_MATCH_A]();
     a90:	e0 91 22 08 	lds	r30, 0x0822	; 0x800822 <p_timer2Callbacks+0x2>
     a94:	f0 91 23 08 	lds	r31, 0x0823	; 0x800823 <p_timer2Callbacks+0x3>
     a98:	09 95       	icall
     a9a:	05 c0       	rjmp	.+10     	; 0xaa6 <__vector_9+0x52>
	else
		p_timer2Callbacks[OVERFLOW]();
     a9c:	e0 91 20 08 	lds	r30, 0x0820	; 0x800820 <p_timer2Callbacks>
     aa0:	f0 91 21 08 	lds	r31, 0x0821	; 0x800821 <p_timer2Callbacks+0x1>
     aa4:	09 95       	icall
}
     aa6:	ff 91       	pop	r31
     aa8:	ef 91       	pop	r30
     aaa:	bf 91       	pop	r27
     aac:	af 91       	pop	r26
     aae:	9f 91       	pop	r25
     ab0:	8f 91       	pop	r24
     ab2:	7f 91       	pop	r23
     ab4:	6f 91       	pop	r22
     ab6:	5f 91       	pop	r21
     ab8:	4f 91       	pop	r20
     aba:	3f 91       	pop	r19
     abc:	2f 91       	pop	r18
     abe:	0f 90       	pop	r0
     ac0:	0b be       	out	0x3b, r0	; 59
     ac2:	0f 90       	pop	r0
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <__vector_10>:

ISR(TIMER2_COMPB_vect)
{
     acc:	1f 92       	push	r1
     ace:	0f 92       	push	r0
     ad0:	0f b6       	in	r0, 0x3f	; 63
     ad2:	0f 92       	push	r0
     ad4:	11 24       	eor	r1, r1
     ad6:	0b b6       	in	r0, 0x3b	; 59
     ad8:	0f 92       	push	r0
     ada:	2f 93       	push	r18
     adc:	3f 93       	push	r19
     ade:	4f 93       	push	r20
     ae0:	5f 93       	push	r21
     ae2:	6f 93       	push	r22
     ae4:	7f 93       	push	r23
     ae6:	8f 93       	push	r24
     ae8:	9f 93       	push	r25
     aea:	af 93       	push	r26
     aec:	bf 93       	push	r27
     aee:	ef 93       	push	r30
     af0:	ff 93       	push	r31
	p_timer2Callbacks[COMPARE_MATCH_B]();
     af2:	e0 91 24 08 	lds	r30, 0x0824	; 0x800824 <p_timer2Callbacks+0x4>
     af6:	f0 91 25 08 	lds	r31, 0x0825	; 0x800825 <p_timer2Callbacks+0x5>
     afa:	09 95       	icall
}
     afc:	ff 91       	pop	r31
     afe:	ef 91       	pop	r30
     b00:	bf 91       	pop	r27
     b02:	af 91       	pop	r26
     b04:	9f 91       	pop	r25
     b06:	8f 91       	pop	r24
     b08:	7f 91       	pop	r23
     b0a:	6f 91       	pop	r22
     b0c:	5f 91       	pop	r21
     b0e:	4f 91       	pop	r20
     b10:	3f 91       	pop	r19
     b12:	2f 91       	pop	r18
     b14:	0f 90       	pop	r0
     b16:	0b be       	out	0x3b, r0	; 59
     b18:	0f 90       	pop	r0
     b1a:	0f be       	out	0x3f, r0	; 63
     b1c:	0f 90       	pop	r0
     b1e:	1f 90       	pop	r1
     b20:	18 95       	reti

00000b22 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
     b22:	4f 92       	push	r4
     b24:	5f 92       	push	r5
     b26:	6f 92       	push	r6
     b28:	7f 92       	push	r7
     b2a:	8f 92       	push	r8
     b2c:	9f 92       	push	r9
     b2e:	af 92       	push	r10
     b30:	bf 92       	push	r11
     b32:	cf 92       	push	r12
     b34:	df 92       	push	r13
     b36:	ef 92       	push	r14
     b38:	ff 92       	push	r15
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	4b 01       	movw	r8, r22
     b40:	5c 01       	movw	r10, r24
     b42:	ea 01       	movw	r28, r20
     b44:	0f 2e       	mov	r0, r31
     b46:	f0 e2       	ldi	r31, 0x20	; 32
     b48:	4f 2e       	mov	r4, r31
     b4a:	f1 ea       	ldi	r31, 0xA1	; 161
     b4c:	5f 2e       	mov	r5, r31
     b4e:	f7 e0       	ldi	r31, 0x07	; 7
     b50:	6f 2e       	mov	r6, r31
     b52:	71 2c       	mov	r7, r1
     b54:	f0 2d       	mov	r31, r0
     b56:	c3 01       	movw	r24, r6
     b58:	b2 01       	movw	r22, r4
     b5a:	a5 01       	movw	r20, r10
     b5c:	94 01       	movw	r18, r8
     b5e:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
     b62:	69 01       	movw	r12, r18
     b64:	7a 01       	movw	r14, r20
     b66:	c3 01       	movw	r24, r6
     b68:	b2 01       	movw	r22, r4
     b6a:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
     b6e:	ca 01       	movw	r24, r20
     b70:	b9 01       	movw	r22, r18
     b72:	a5 01       	movw	r20, r10
     b74:	94 01       	movw	r18, r8
     b76:	c7 dd       	rcall	.-1138   	; 0x706 <calculateError>
     b78:	44 97       	sbiw	r24, 0x14	; 20
     b7a:	30 f4       	brcc	.+12     	; 0xb88 <calculateUBRR+0x66>
     b7c:	d7 01       	movw	r26, r14
     b7e:	c6 01       	movw	r24, r12
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	a1 09       	sbc	r26, r1
     b84:	b1 09       	sbc	r27, r1
     b86:	0f c0       	rjmp	.+30     	; 0xba6 <calculateUBRR+0x84>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	88 83       	st	Y, r24
     b8c:	60 e4       	ldi	r22, 0x40	; 64
     b8e:	72 e4       	ldi	r23, 0x42	; 66
     b90:	8f e0       	ldi	r24, 0x0F	; 15
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a5 01       	movw	r20, r10
     b96:	94 01       	movw	r18, r8
     b98:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	a1 09       	sbc	r26, r1
     ba4:	b1 09       	sbc	r27, r1
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	bf 90       	pop	r11
     bb4:	af 90       	pop	r10
     bb6:	9f 90       	pop	r9
     bb8:	8f 90       	pop	r8
     bba:	7f 90       	pop	r7
     bbc:	6f 90       	pop	r6
     bbe:	5f 90       	pop	r5
     bc0:	4f 90       	pop	r4
     bc2:	08 95       	ret

00000bc4 <uart_init>:
     bc4:	0f 93       	push	r16
     bc6:	1f 93       	push	r17
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	cd b7       	in	r28, 0x3d	; 61
     bce:	de b7       	in	r29, 0x3e	; 62
     bd0:	2b 97       	sbiw	r28, 0x0b	; 11
     bd2:	0f b6       	in	r0, 0x3f	; 63
     bd4:	f8 94       	cli
     bd6:	de bf       	out	0x3e, r29	; 62
     bd8:	0f be       	out	0x3f, r0	; 63
     bda:	cd bf       	out	0x3d, r28	; 61
     bdc:	0a 83       	std	Y+2, r16	; 0x02
     bde:	1b 83       	std	Y+3, r17	; 0x03
     be0:	2c 83       	std	Y+4, r18	; 0x04
     be2:	3d 83       	std	Y+5, r19	; 0x05
     be4:	4e 83       	std	Y+6, r20	; 0x06
     be6:	5f 83       	std	Y+7, r21	; 0x07
     be8:	68 87       	std	Y+8, r22	; 0x08
     bea:	79 87       	std	Y+9, r23	; 0x09
     bec:	8a 87       	std	Y+10, r24	; 0x0a
     bee:	9b 87       	std	Y+11, r25	; 0x0b
     bf0:	19 82       	std	Y+1, r1	; 0x01
     bf2:	01 11       	cpse	r16, r1
     bf4:	7c c0       	rjmp	.+248    	; 0xcee <uart_init+0x12a>
     bf6:	19 2f       	mov	r17, r25
     bf8:	e2 ec       	ldi	r30, 0xC2	; 194
     bfa:	f0 e0       	ldi	r31, 0x00	; 0
     bfc:	80 81       	ld	r24, Z
     bfe:	8f 73       	andi	r24, 0x3F	; 63
     c00:	80 83       	st	Z, r24
     c02:	6b 81       	ldd	r22, Y+3	; 0x03
     c04:	7c 81       	ldd	r23, Y+4	; 0x04
     c06:	8d 81       	ldd	r24, Y+5	; 0x05
     c08:	9e 81       	ldd	r25, Y+6	; 0x06
     c0a:	ae 01       	movw	r20, r28
     c0c:	4f 5f       	subi	r20, 0xFF	; 255
     c0e:	5f 4f       	sbci	r21, 0xFF	; 255
     c10:	88 df       	rcall	.-240    	; 0xb22 <calculateUBRR>
     c12:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c16:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     c1a:	49 81       	ldd	r20, Y+1	; 0x01
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	80 ec       	ldi	r24, 0xC0	; 192
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	38 dd       	rcall	.-1424   	; 0x694 <updateBit>
     c24:	89 85       	ldd	r24, Y+9	; 0x09
     c26:	82 30       	cpi	r24, 0x02	; 2
     c28:	31 f1       	breq	.+76     	; 0xc76 <uart_init+0xb2>
     c2a:	28 f4       	brcc	.+10     	; 0xc36 <uart_init+0x72>
     c2c:	88 23       	and	r24, r24
     c2e:	49 f0       	breq	.+18     	; 0xc42 <uart_init+0x7e>
     c30:	81 30       	cpi	r24, 0x01	; 1
     c32:	a1 f0       	breq	.+40     	; 0xc5c <uart_init+0x98>
     c34:	46 c0       	rjmp	.+140    	; 0xcc2 <uart_init+0xfe>
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	59 f1       	breq	.+86     	; 0xc90 <uart_init+0xcc>
     c3a:	84 30       	cpi	r24, 0x04	; 4
     c3c:	09 f4       	brne	.+2      	; 0xc40 <uart_init+0x7c>
     c3e:	35 c0       	rjmp	.+106    	; 0xcaa <uart_init+0xe6>
     c40:	40 c0       	rjmp	.+128    	; 0xcc2 <uart_init+0xfe>
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	82 ec       	ldi	r24, 0xC2	; 194
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	49 dd       	rcall	.-1390   	; 0x6dc <clearBit>
     c4a:	62 e0       	ldi	r22, 0x02	; 2
     c4c:	82 ec       	ldi	r24, 0xC2	; 194
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	45 dd       	rcall	.-1398   	; 0x6dc <clearBit>
     c52:	62 e0       	ldi	r22, 0x02	; 2
     c54:	81 ec       	ldi	r24, 0xC1	; 193
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	41 dd       	rcall	.-1406   	; 0x6dc <clearBit>
     c5a:	33 c0       	rjmp	.+102    	; 0xcc2 <uart_init+0xfe>
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	82 ec       	ldi	r24, 0xC2	; 194
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	30 dd       	rcall	.-1440   	; 0x6c4 <setBit>
     c64:	62 e0       	ldi	r22, 0x02	; 2
     c66:	82 ec       	ldi	r24, 0xC2	; 194
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	38 dd       	rcall	.-1424   	; 0x6dc <clearBit>
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	81 ec       	ldi	r24, 0xC1	; 193
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	34 dd       	rcall	.-1432   	; 0x6dc <clearBit>
     c74:	26 c0       	rjmp	.+76     	; 0xcc2 <uart_init+0xfe>
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	82 ec       	ldi	r24, 0xC2	; 194
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	2f dd       	rcall	.-1442   	; 0x6dc <clearBit>
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	82 ec       	ldi	r24, 0xC2	; 194
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	1f dd       	rcall	.-1474   	; 0x6c4 <setBit>
     c86:	62 e0       	ldi	r22, 0x02	; 2
     c88:	81 ec       	ldi	r24, 0xC1	; 193
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	27 dd       	rcall	.-1458   	; 0x6dc <clearBit>
     c8e:	19 c0       	rjmp	.+50     	; 0xcc2 <uart_init+0xfe>
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	82 ec       	ldi	r24, 0xC2	; 194
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	16 dd       	rcall	.-1492   	; 0x6c4 <setBit>
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	82 ec       	ldi	r24, 0xC2	; 194
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	12 dd       	rcall	.-1500   	; 0x6c4 <setBit>
     ca0:	62 e0       	ldi	r22, 0x02	; 2
     ca2:	81 ec       	ldi	r24, 0xC1	; 193
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	1a dd       	rcall	.-1484   	; 0x6dc <clearBit>
     ca8:	0c c0       	rjmp	.+24     	; 0xcc2 <uart_init+0xfe>
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	82 ec       	ldi	r24, 0xC2	; 194
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	09 dd       	rcall	.-1518   	; 0x6c4 <setBit>
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	82 ec       	ldi	r24, 0xC2	; 194
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	05 dd       	rcall	.-1526   	; 0x6c4 <setBit>
     cba:	62 e0       	ldi	r22, 0x02	; 2
     cbc:	81 ec       	ldi	r24, 0xC1	; 193
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	01 dd       	rcall	.-1534   	; 0x6c4 <setBit>
     cc2:	4a 85       	ldd	r20, Y+10	; 0x0a
     cc4:	63 e0       	ldi	r22, 0x03	; 3
     cc6:	82 ec       	ldi	r24, 0xC2	; 194
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	e4 dc       	rcall	.-1592   	; 0x694 <updateBit>
     ccc:	12 30       	cpi	r17, 0x02	; 2
     cce:	31 f4       	brne	.+12     	; 0xcdc <uart_init+0x118>
     cd0:	e2 ec       	ldi	r30, 0xC2	; 194
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	8f 7c       	andi	r24, 0xCF	; 207
     cd8:	80 83       	st	Z, r24
     cda:	09 c0       	rjmp	.+18     	; 0xcee <uart_init+0x12a>
     cdc:	65 e0       	ldi	r22, 0x05	; 5
     cde:	82 ec       	ldi	r24, 0xC2	; 194
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	f0 dc       	rcall	.-1568   	; 0x6c4 <setBit>
     ce4:	41 2f       	mov	r20, r17
     ce6:	64 e0       	ldi	r22, 0x04	; 4
     ce8:	82 ec       	ldi	r24, 0xC2	; 194
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	d3 dc       	rcall	.-1626   	; 0x694 <updateBit>
     cee:	2b 96       	adiw	r28, 0x0b	; 11
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <uart_start>:
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	df 93       	push	r29
     d0c:	cd b7       	in	r28, 0x3d	; 61
     d0e:	de b7       	in	r29, 0x3e	; 62
     d10:	2a 97       	sbiw	r28, 0x0a	; 10
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	f8 94       	cli
     d16:	de bf       	out	0x3e, r29	; 62
     d18:	0f be       	out	0x3f, r0	; 63
     d1a:	cd bf       	out	0x3d, r28	; 61
     d1c:	6f 83       	std	Y+7, r22	; 0x07
     d1e:	01 11       	cpse	r16, r1
     d20:	0a c0       	rjmp	.+20     	; 0xd36 <uart_start+0x32>
     d22:	45 2f       	mov	r20, r21
     d24:	64 e0       	ldi	r22, 0x04	; 4
     d26:	81 ec       	ldi	r24, 0xC1	; 193
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	b4 dc       	rcall	.-1688   	; 0x694 <updateBit>
     d2c:	4f 81       	ldd	r20, Y+7	; 0x07
     d2e:	63 e0       	ldi	r22, 0x03	; 3
     d30:	81 ec       	ldi	r24, 0xC1	; 193
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	af dc       	rcall	.-1698   	; 0x694 <updateBit>
     d36:	2a 96       	adiw	r28, 0x0a	; 10
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	1f 91       	pop	r17
     d48:	0f 91       	pop	r16
     d4a:	08 95       	ret

00000d4c <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
     d4c:	ef 92       	push	r14
     d4e:	ff 92       	push	r15
     d50:	0f 93       	push	r16
     d52:	1f 93       	push	r17
     d54:	cf 93       	push	r28
     d56:	df 93       	push	r29
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	2a 97       	sbiw	r28, 0x0a	; 10
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	09 83       	std	Y+1, r16	; 0x01
     d6a:	1a 83       	std	Y+2, r17	; 0x02
     d6c:	2b 83       	std	Y+3, r18	; 0x03
     d6e:	3c 83       	std	Y+4, r19	; 0x04
     d70:	4d 83       	std	Y+5, r20	; 0x05
     d72:	5e 83       	std	Y+6, r21	; 0x06
     d74:	6f 83       	std	Y+7, r22	; 0x07
     d76:	78 87       	std	Y+8, r23	; 0x08
     d78:	89 87       	std	Y+9, r24	; 0x09
     d7a:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
     d7c:	01 11       	cpse	r16, r1
     d7e:	13 c0       	rjmp	.+38     	; 0xda6 <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
     d80:	00 ec       	ldi	r16, 0xC0	; 192
     d82:	10 e0       	ldi	r17, 0x00	; 0
     d84:	f8 01       	movw	r30, r16
     d86:	80 81       	ld	r24, Z
     d88:	65 e0       	ldi	r22, 0x05	; 5
     d8a:	b5 dc       	rcall	.-1686   	; 0x6f6 <checkBit>
     d8c:	88 23       	and	r24, r24
     d8e:	d1 f3       	breq	.-12     	; 0xd84 <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
     d90:	88 85       	ldd	r24, Y+8	; 0x08
     d92:	84 30       	cpi	r24, 0x04	; 4
     d94:	31 f4       	brne	.+12     	; 0xda2 <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
     d96:	4f 2d       	mov	r20, r15
     d98:	41 70       	andi	r20, 0x01	; 1
     d9a:	60 e0       	ldi	r22, 0x00	; 0
     d9c:	81 ec       	ldi	r24, 0xC1	; 193
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	79 dc       	rcall	.-1806   	; 0x694 <updateBit>
			UDR0 = (u8) u16_data;
     da2:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
     da6:	2a 96       	adiw	r28, 0x0a	; 10
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	df 91       	pop	r29
     db4:	cf 91       	pop	r28
     db6:	1f 91       	pop	r17
     db8:	0f 91       	pop	r16
     dba:	ff 90       	pop	r15
     dbc:	ef 90       	pop	r14
     dbe:	08 95       	ret

00000dc0 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	0b b6       	in	r0, 0x3b	; 59
     dcc:	0f 92       	push	r0
     dce:	2f 93       	push	r18
     dd0:	3f 93       	push	r19
     dd2:	4f 93       	push	r20
     dd4:	5f 93       	push	r21
     dd6:	6f 93       	push	r22
     dd8:	7f 93       	push	r23
     dda:	8f 93       	push	r24
     ddc:	9f 93       	push	r25
     dde:	af 93       	push	r26
     de0:	bf 93       	push	r27
     de2:	ef 93       	push	r30
     de4:	ff 93       	push	r31
	p_wdgCallback();
     de6:	e0 91 26 08 	lds	r30, 0x0826	; 0x800826 <p_wdgCallback>
     dea:	f0 91 27 08 	lds	r31, 0x0827	; 0x800827 <p_wdgCallback+0x1>
     dee:	09 95       	icall
}
     df0:	ff 91       	pop	r31
     df2:	ef 91       	pop	r30
     df4:	bf 91       	pop	r27
     df6:	af 91       	pop	r26
     df8:	9f 91       	pop	r25
     dfa:	8f 91       	pop	r24
     dfc:	7f 91       	pop	r23
     dfe:	6f 91       	pop	r22
     e00:	5f 91       	pop	r21
     e02:	4f 91       	pop	r20
     e04:	3f 91       	pop	r19
     e06:	2f 91       	pop	r18
     e08:	0f 90       	pop	r0
     e0a:	0b be       	out	0x3b, r0	; 59
     e0c:	0f 90       	pop	r0
     e0e:	0f be       	out	0x3f, r0	; 63
     e10:	0f 90       	pop	r0
     e12:	1f 90       	pop	r1
     e14:	18 95       	reti

00000e16 <vl53l0x_setAddress>:
  } else {
      return FALSE;
  }
}

bool vl53l0x_setAddress(uint8_t newAddr) {
     e16:	cf 93       	push	r28
  newAddr &= 0x7F;
     e18:	c8 2f       	mov	r28, r24
     e1a:	cf 77       	andi	r28, 0x7F	; 127

  Status = VL53L0X_SetDeviceAddress(pMyDevice, newAddr * 2); // 7->8 bit
     e1c:	6c 2f       	mov	r22, r28
     e1e:	66 0f       	add	r22, r22
     e20:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e24:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e28:	d3 d0       	rcall	.+422    	; 0xfd0 <VL53L0X_SetDeviceAddress>
     e2a:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE ) {
     e2e:	81 11       	cpse	r24, r1
     e30:	09 c0       	rjmp	.+18     	; 0xe44 <vl53l0x_setAddress+0x2e>
    pMyDevice->I2cDevAddr = newAddr;  // 7 bit addr
     e32:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     e36:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     e3a:	ef 5b       	subi	r30, 0xBF	; 191
     e3c:	fe 4f       	sbci	r31, 0xFE	; 254
     e3e:	c0 83       	st	Z, r28
    return TRUE;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	01 c0       	rjmp	.+2      	; 0xe46 <vl53l0x_setAddress+0x30>
  }
  return FALSE;
     e44:	80 e0       	ldi	r24, 0x00	; 0
}
     e46:	cf 91       	pop	r28
     e48:	08 95       	ret

00000e4a <vl53l0x_begin>:
VL53L0X_Dev_t                       *pMyDevice  = &MyDevice;
VL53L0X_Version_t                   Version;
VL53L0X_Version_t                   *pVersion   = &Version;
VL53L0X_DeviceInfo_t                DeviceInfo;

bool vl53l0x_begin(uint8_t i2c_addr) {
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	27 97       	sbiw	r28, 0x07	; 7
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	18 2f       	mov	r17, r24
  uint8_t   isApertureSpads;
  uint8_t   VhvSettings;
  uint8_t   PhaseCal;

  // Initialize Comms
  pMyDevice->I2cDevAddr      =  VL53L0X_I2C_ADDR;  // default
     e62:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e66:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     e6a:	fc 01       	movw	r30, r24
     e6c:	ef 5b       	subi	r30, 0xBF	; 191
     e6e:	fe 4f       	sbci	r31, 0xFE	; 254
     e70:	29 e2       	ldi	r18, 0x29	; 41
     e72:	20 83       	st	Z, r18
  pMyDevice->comms_type      =  1;
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	21 e0       	ldi	r18, 0x01	; 1
     e78:	20 83       	st	Z, r18
  pMyDevice->comms_speed_khz =  400;
     e7a:	31 96       	adiw	r30, 0x01	; 1
     e7c:	20 e9       	ldi	r18, 0x90	; 144
     e7e:	31 e0       	ldi	r19, 0x01	; 1
     e80:	31 83       	std	Z+1, r19	; 0x01
     e82:	20 83       	st	Z, r18

  VL53L0X_i2c_init();
     e84:	0e 94 b1 2a 	call	0x5562	; 0x5562 <VL53L0X_i2c_init>

  Status = VL53L0X_DataInit( &MyDevice );         // Data initialization
     e88:	88 e2       	ldi	r24, 0x28	; 40
     e8a:	98 e0       	ldi	r25, 0x08	; 8
     e8c:	d6 d4       	rcall	.+2476   	; 0x183a <VL53L0X_DataInit>
     e8e:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if (! vl53l0x_setAddress(i2c_addr) ) {
     e92:	81 2f       	mov	r24, r17
     e94:	c0 df       	rcall	.-128    	; 0xe16 <vl53l0x_setAddress>
     e96:	88 23       	and	r24, r24
     e98:	09 f4       	brne	.+2      	; 0xe9c <vl53l0x_begin+0x52>
    return FALSE;
  }

  Status = VL53L0X_GetDeviceInfo( &MyDevice, &DeviceInfo );
     e9a:	85 c0       	rjmp	.+266    	; 0xfa6 <vl53l0x_begin+0x15c>
     e9c:	6d e6       	ldi	r22, 0x6D	; 109
     e9e:	79 e0       	ldi	r23, 0x09	; 9
     ea0:	88 e2       	ldi	r24, 0x28	; 40
     ea2:	98 e0       	ldi	r25, 0x08	; 8
     ea4:	92 d0       	rcall	.+292    	; 0xfca <VL53L0X_GetDeviceInfo>
     ea6:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE )  {
     eaa:	81 11       	cpse	r24, r1
      if( ( DeviceInfo.ProductRevisionMinor != 1 ) && ( DeviceInfo.ProductRevisionMinor != 1 ) ) {
     eac:	08 c0       	rjmp	.+16     	; 0xebe <vl53l0x_begin+0x74>
     eae:	80 91 cf 09 	lds	r24, 0x09CF	; 0x8009cf <DeviceInfo+0x62>
     eb2:	81 30       	cpi	r24, 0x01	; 1
     eb4:	09 f4       	brne	.+2      	; 0xeb8 <vl53l0x_begin+0x6e>
          Status = VL53L0X_ERROR_NOT_SUPPORTED;
     eb6:	6e c0       	rjmp	.+220    	; 0xf94 <vl53l0x_begin+0x14a>
     eb8:	8b ef       	ldi	r24, 0xFB	; 251
     eba:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE ) {
      Status = VL53L0X_StaticInit( pMyDevice ); // Device Initialization
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     ebe:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     ec2:	81 11       	cpse	r24, r1
      Status = VL53L0X_PerformRefSpadManagement( pMyDevice, &refSpadCount, &isApertureSpads ); // Device Initialization
     ec4:	33 c0       	rjmp	.+102    	; 0xf2c <vl53l0x_begin+0xe2>
     ec6:	ae 01       	movw	r20, r28
     ec8:	4b 5f       	subi	r20, 0xFB	; 251
     eca:	5f 4f       	sbci	r21, 0xFF	; 255
     ecc:	be 01       	movw	r22, r28
     ece:	6f 5f       	subi	r22, 0xFF	; 255
     ed0:	7f 4f       	sbci	r23, 0xFF	; 255
     ed2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ed6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     eda:	0e 94 80 12 	call	0x2500	; 0x2500 <VL53L0X_PerformRefSpadManagement>
     ede:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     ee2:	81 11       	cpse	r24, r1
      Status = VL53L0X_PerformRefCalibration( pMyDevice, &VhvSettings, &PhaseCal );           // Device Initialization
     ee4:	31 c0       	rjmp	.+98     	; 0xf48 <vl53l0x_begin+0xfe>
     ee6:	ae 01       	movw	r20, r28
     ee8:	49 5f       	subi	r20, 0xF9	; 249
     eea:	5f 4f       	sbci	r21, 0xFF	; 255
     eec:	be 01       	movw	r22, r28
     eee:	6a 5f       	subi	r22, 0xFA	; 250
     ef0:	7f 4f       	sbci	r23, 0xFF	; 255
     ef2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     ef6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     efa:	c7 d5       	rcall	.+2958   	; 0x1a8a <VL53L0X_PerformRefCalibration>
     efc:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     f00:	81 11       	cpse	r24, r1
      // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
      Status = VL53L0X_SetDeviceMode( pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING );        // Setup in single ranging mode
     f02:	30 c0       	rjmp	.+96     	; 0xf64 <vl53l0x_begin+0x11a>
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f0a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f0e:	66 d0       	rcall	.+204    	; 0xfdc <VL53L0X_SetDeviceMode>
     f10:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  // Enable/Disable Sigma and Signal check
  if( Status == VL53L0X_ERROR_NONE ) {
     f14:	81 11       	cpse	r24, r1
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1 );
     f16:	37 c0       	rjmp	.+110    	; 0xf86 <vl53l0x_begin+0x13c>
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f22:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f26:	6e d2       	rcall	.+1244   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
     f28:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     f2c:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     f30:	81 11       	cpse	r24, r1
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1 );
     f32:	29 c0       	rjmp	.+82     	; 0xf86 <vl53l0x_begin+0x13c>
     f34:	41 e0       	ldi	r20, 0x01	; 1
     f36:	61 e0       	ldi	r22, 0x01	; 1
     f38:	70 e0       	ldi	r23, 0x00	; 0
     f3a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f3e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f42:	60 d2       	rcall	.+1216   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
     f44:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     f48:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1 );
     f4c:	81 11       	cpse	r24, r1
     f4e:	1b c0       	rjmp	.+54     	; 0xf86 <vl53l0x_begin+0x13c>
     f50:	41 e0       	ldi	r20, 0x01	; 1
     f52:	63 e0       	ldi	r22, 0x03	; 3
     f54:	70 e0       	ldi	r23, 0x00	; 0
     f56:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f5a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f5e:	52 d2       	rcall	.+1188   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     f60:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
     f64:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
      Status = VL53L0X_SetLimitCheckValue( pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)( 1.5 * 0.023 * 65536 ) );
     f68:	81 11       	cpse	r24, r1
     f6a:	0d c0       	rjmp	.+26     	; 0xf86 <vl53l0x_begin+0x13c>
     f6c:	24 ed       	ldi	r18, 0xD4	; 212
     f6e:	38 e0       	ldi	r19, 0x08	; 8
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	50 e0       	ldi	r21, 0x00	; 0
     f74:	63 e0       	ldi	r22, 0x03	; 3
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f7c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f80:	ce d2       	rcall	.+1436   	; 0x151e <VL53L0X_SetLimitCheckValue>
  VL53L0X_i2c_init();

  Status = VL53L0X_DataInit( &MyDevice );         // Data initialization

  if (! vl53l0x_setAddress(i2c_addr) ) {
    return FALSE;
     f82:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 91 ea 07 	lds	r25, 0x07EA	; 0x8007ea <__data_end>
     f8c:	99 23       	and	r25, r25
     f8e:	59 f0       	breq	.+22     	; 0xfa6 <vl53l0x_begin+0x15c>
          Status = VL53L0X_ERROR_NOT_SUPPORTED;
      }
  }

  if( Status == VL53L0X_ERROR_NONE ) {
      Status = VL53L0X_StaticInit( pMyDevice ); // Device Initialization
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	09 c0       	rjmp	.+18     	; 0xfa6 <vl53l0x_begin+0x15c>
     f94:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f98:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     f9c:	0e 94 f5 10 	call	0x21ea	; 0x21ea <VL53L0X_StaticInit>
     fa0:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  if( Status == VL53L0X_ERROR_NONE ) {
      return TRUE;
  } else {
      return FALSE;
  }
}
     fa4:	8c cf       	rjmp	.-232    	; 0xebe <vl53l0x_begin+0x74>
     fa6:	27 96       	adiw	r28, 0x07	; 7
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	1f 91       	pop	r17
     fb8:	08 95       	ret

00000fba <vl53l0x_getSingleRangingMeasurement>:
    /*
     *  Step  4 : Test ranging mode
     */

    if( Status == VL53L0X_ERROR_NONE ) {
        Status = VL53L0X_PerformSingleRangingMeasurement( pMyDevice, pRangingMeasurementData );
     fba:	bc 01       	movw	r22, r24
     fbc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     fc0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     fc4:	0c 94 2b 10 	jmp	0x2056	; 0x2056 <VL53L0X_PerformSingleRangingMeasurement>
    }

    return Status;
}
     fc8:	08 95       	ret

00000fca <VL53L0X_GetDeviceInfo>:
	Status = VL53L0X_get_reference_spads(Dev, pSpadCount, pIsApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
}
     fca:	0c 94 49 2a 	jmp	0x5492	; 0x5492 <VL53L0X_get_device_info>
     fce:	08 95       	ret

00000fd0 <VL53L0X_SetDeviceAddress>:
     fd0:	46 2f       	mov	r20, r22
     fd2:	46 95       	lsr	r20
     fd4:	6a e8       	ldi	r22, 0x8A	; 138
     fd6:	0c 94 d3 2b 	jmp	0x57a6	; 0x57a6 <VL53L0X_WrByte>
     fda:	08 95       	ret

00000fdc <VL53L0X_SetDeviceMode>:
     fdc:	63 30       	cpi	r22, 0x03	; 3
     fde:	41 f0       	breq	.+16     	; 0xff0 <VL53L0X_SetDeviceMode+0x14>
     fe0:	18 f4       	brcc	.+6      	; 0xfe8 <VL53L0X_SetDeviceMode+0xc>
     fe2:	62 30       	cpi	r22, 0x02	; 2
     fe4:	28 f0       	brcs	.+10     	; 0xff0 <VL53L0X_SetDeviceMode+0x14>
     fe6:	08 c0       	rjmp	.+16     	; 0xff8 <VL53L0X_SetDeviceMode+0x1c>
     fe8:	2c ee       	ldi	r18, 0xEC	; 236
     fea:	26 0f       	add	r18, r22
     fec:	22 30       	cpi	r18, 0x02	; 2
     fee:	20 f4       	brcc	.+8      	; 0xff8 <VL53L0X_SetDeviceMode+0x1c>
     ff0:	fc 01       	movw	r30, r24
     ff2:	60 8b       	std	Z+16, r22	; 0x10
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	08 95       	ret
     ff8:	88 ef       	ldi	r24, 0xF8	; 248
     ffa:	08 95       	ret

00000ffc <VL53L0X_GetFractionEnable>:
     ffc:	cf 93       	push	r28
     ffe:	df 93       	push	r29
    1000:	eb 01       	movw	r28, r22
    1002:	ab 01       	movw	r20, r22
    1004:	69 e0       	ldi	r22, 0x09	; 9
    1006:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    100a:	81 11       	cpse	r24, r1
    100c:	03 c0       	rjmp	.+6      	; 0x1014 <VL53L0X_GetFractionEnable+0x18>
    100e:	98 81       	ld	r25, Y
    1010:	91 70       	andi	r25, 0x01	; 1
    1012:	98 83       	st	Y, r25
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
    101a:	0c 94 59 20 	jmp	0x40b2	; 0x40b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
    101e:	08 95       	ret

00001020 <VL53L0X_GetVcselPulsePeriod>:
    1020:	0c 94 30 20 	jmp	0x4060	; 0x4060 <VL53L0X_get_vcsel_pulse_period>
    1024:	08 95       	ret

00001026 <VL53L0X_SetSequenceStepEnable>:
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	1f 92       	push	r1
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	7c 01       	movw	r14, r24
    103c:	06 2f       	mov	r16, r22
    103e:	d4 2e       	mov	r13, r20
    1040:	19 82       	std	Y+1, r1	; 0x01
    1042:	ae 01       	movw	r20, r28
    1044:	4f 5f       	subi	r20, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	61 e0       	ldi	r22, 0x01	; 1
    104a:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    104e:	18 2f       	mov	r17, r24
    1050:	81 11       	cpse	r24, r1
    1052:	56 c0       	rjmp	.+172    	; 0x1100 <VL53L0X_SetSequenceStepEnable+0xda>
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	d9 12       	cpse	r13, r25
    105a:	1c c0       	rjmp	.+56     	; 0x1094 <VL53L0X_SetSequenceStepEnable+0x6e>
    105c:	02 30       	cpi	r16, 0x02	; 2
    105e:	89 f0       	breq	.+34     	; 0x1082 <VL53L0X_SetSequenceStepEnable+0x5c>
    1060:	28 f4       	brcc	.+10     	; 0x106c <VL53L0X_SetSequenceStepEnable+0x46>
    1062:	00 23       	and	r16, r16
    1064:	41 f0       	breq	.+16     	; 0x1076 <VL53L0X_SetSequenceStepEnable+0x50>
    1066:	01 30       	cpi	r16, 0x01	; 1
    1068:	49 f0       	breq	.+18     	; 0x107c <VL53L0X_SetSequenceStepEnable+0x56>
    106a:	44 c0       	rjmp	.+136    	; 0x10f4 <VL53L0X_SetSequenceStepEnable+0xce>
    106c:	03 30       	cpi	r16, 0x03	; 3
    106e:	61 f0       	breq	.+24     	; 0x1088 <VL53L0X_SetSequenceStepEnable+0x62>
    1070:	04 30       	cpi	r16, 0x04	; 4
    1072:	69 f0       	breq	.+26     	; 0x108e <VL53L0X_SetSequenceStepEnable+0x68>
    1074:	3f c0       	rjmp	.+126    	; 0x10f4 <VL53L0X_SetSequenceStepEnable+0xce>
    1076:	08 2f       	mov	r16, r24
    1078:	00 61       	ori	r16, 0x10	; 16
    107a:	40 c0       	rjmp	.+128    	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    107c:	08 2f       	mov	r16, r24
    107e:	08 62       	ori	r16, 0x28	; 40
    1080:	3d c0       	rjmp	.+122    	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    1082:	08 2f       	mov	r16, r24
    1084:	04 60       	ori	r16, 0x04	; 4
    1086:	3a c0       	rjmp	.+116    	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    1088:	08 2f       	mov	r16, r24
    108a:	00 64       	ori	r16, 0x40	; 64
    108c:	37 c0       	rjmp	.+110    	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    108e:	08 2f       	mov	r16, r24
    1090:	00 68       	ori	r16, 0x80	; 128
    1092:	34 c0       	rjmp	.+104    	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    1094:	02 30       	cpi	r16, 0x02	; 2
    1096:	89 f0       	breq	.+34     	; 0x10ba <VL53L0X_SetSequenceStepEnable+0x94>
    1098:	28 f4       	brcc	.+10     	; 0x10a4 <VL53L0X_SetSequenceStepEnable+0x7e>
    109a:	00 23       	and	r16, r16
    109c:	41 f0       	breq	.+16     	; 0x10ae <VL53L0X_SetSequenceStepEnable+0x88>
    109e:	01 30       	cpi	r16, 0x01	; 1
    10a0:	49 f0       	breq	.+18     	; 0x10b4 <VL53L0X_SetSequenceStepEnable+0x8e>
    10a2:	2a c0       	rjmp	.+84     	; 0x10f8 <VL53L0X_SetSequenceStepEnable+0xd2>
    10a4:	03 30       	cpi	r16, 0x03	; 3
    10a6:	61 f0       	breq	.+24     	; 0x10c0 <VL53L0X_SetSequenceStepEnable+0x9a>
    10a8:	04 30       	cpi	r16, 0x04	; 4
    10aa:	69 f0       	breq	.+26     	; 0x10c6 <VL53L0X_SetSequenceStepEnable+0xa0>
    10ac:	25 c0       	rjmp	.+74     	; 0x10f8 <VL53L0X_SetSequenceStepEnable+0xd2>
    10ae:	08 2f       	mov	r16, r24
    10b0:	0f 7e       	andi	r16, 0xEF	; 239
    10b2:	24 c0       	rjmp	.+72     	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    10b4:	08 2f       	mov	r16, r24
    10b6:	07 7d       	andi	r16, 0xD7	; 215
    10b8:	21 c0       	rjmp	.+66     	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    10ba:	08 2f       	mov	r16, r24
    10bc:	0b 7f       	andi	r16, 0xFB	; 251
    10be:	1e c0       	rjmp	.+60     	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    10c0:	08 2f       	mov	r16, r24
    10c2:	0f 7b       	andi	r16, 0xBF	; 191
    10c4:	1b c0       	rjmp	.+54     	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    10c6:	08 2f       	mov	r16, r24
    10c8:	0f 77       	andi	r16, 0x7F	; 127
    10ca:	18 c0       	rjmp	.+48     	; 0x10fc <VL53L0X_SetSequenceStepEnable+0xd6>
    10cc:	40 2f       	mov	r20, r16
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	c7 01       	movw	r24, r14
    10d2:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    10d6:	18 2f       	mov	r17, r24
    10d8:	81 11       	cpse	r24, r1
    10da:	12 c0       	rjmp	.+36     	; 0x1100 <VL53L0X_SetSequenceStepEnable+0xda>
    10dc:	f7 01       	movw	r30, r14
    10de:	e3 5e       	subi	r30, 0xE3	; 227
    10e0:	fe 4f       	sbci	r31, 0xFE	; 254
    10e2:	00 83       	st	Z, r16
    10e4:	f7 01       	movw	r30, r14
    10e6:	42 89       	ldd	r20, Z+18	; 0x12
    10e8:	53 89       	ldd	r21, Z+19	; 0x13
    10ea:	64 89       	ldd	r22, Z+20	; 0x14
    10ec:	75 89       	ldd	r23, Z+21	; 0x15
    10ee:	c7 01       	movw	r24, r14
    10f0:	94 df       	rcall	.-216    	; 0x101a <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    10f2:	06 c0       	rjmp	.+12     	; 0x1100 <VL53L0X_SetSequenceStepEnable+0xda>
    10f4:	1c ef       	ldi	r17, 0xFC	; 252
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <VL53L0X_SetSequenceStepEnable+0xda>
    10f8:	1c ef       	ldi	r17, 0xFC	; 252
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <VL53L0X_SetSequenceStepEnable+0xda>
    10fc:	80 13       	cpse	r24, r16
    10fe:	e6 cf       	rjmp	.-52     	; 0x10cc <VL53L0X_SetSequenceStepEnable+0xa6>
    1100:	81 2f       	mov	r24, r17
    1102:	0f 90       	pop	r0
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	08 95       	ret

00001114 <sequence_step_enabled>:
    1114:	62 30       	cpi	r22, 0x02	; 2
    1116:	d9 f0       	breq	.+54     	; 0x114e <sequence_step_enabled+0x3a>
    1118:	28 f4       	brcc	.+10     	; 0x1124 <sequence_step_enabled+0x10>
    111a:	66 23       	and	r22, r22
    111c:	59 f0       	breq	.+22     	; 0x1134 <sequence_step_enabled+0x20>
    111e:	61 30       	cpi	r22, 0x01	; 1
    1120:	79 f0       	breq	.+30     	; 0x1140 <sequence_step_enabled+0x2c>
    1122:	04 c0       	rjmp	.+8      	; 0x112c <sequence_step_enabled+0x18>
    1124:	63 30       	cpi	r22, 0x03	; 3
    1126:	d1 f0       	breq	.+52     	; 0x115c <sequence_step_enabled+0x48>
    1128:	64 30       	cpi	r22, 0x04	; 4
    112a:	f9 f0       	breq	.+62     	; 0x116a <sequence_step_enabled+0x56>
    112c:	f9 01       	movw	r30, r18
    112e:	10 82       	st	Z, r1
    1130:	8c ef       	ldi	r24, 0xFC	; 252
    1132:	08 95       	ret
    1134:	42 95       	swap	r20
    1136:	41 70       	andi	r20, 0x01	; 1
    1138:	f9 01       	movw	r30, r18
    113a:	40 83       	st	Z, r20
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	08 95       	ret
    1140:	43 fb       	bst	r20, 3
    1142:	44 27       	eor	r20, r20
    1144:	40 f9       	bld	r20, 0
    1146:	f9 01       	movw	r30, r18
    1148:	40 83       	st	Z, r20
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	08 95       	ret
    114e:	42 fb       	bst	r20, 2
    1150:	44 27       	eor	r20, r20
    1152:	40 f9       	bld	r20, 0
    1154:	f9 01       	movw	r30, r18
    1156:	40 83       	st	Z, r20
    1158:	80 e0       	ldi	r24, 0x00	; 0
    115a:	08 95       	ret
    115c:	46 fb       	bst	r20, 6
    115e:	44 27       	eor	r20, r20
    1160:	40 f9       	bld	r20, 0
    1162:	f9 01       	movw	r30, r18
    1164:	40 83       	st	Z, r20
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	08 95       	ret
    116a:	44 1f       	adc	r20, r20
    116c:	44 27       	eor	r20, r20
    116e:	44 1f       	adc	r20, r20
    1170:	f9 01       	movw	r30, r18
    1172:	40 83       	st	Z, r20
    1174:	80 e0       	ldi	r24, 0x00	; 0
    1176:	08 95       	ret

00001178 <VL53L0X_GetSequenceStepEnables>:
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	1f 92       	push	r1
    1186:	cd b7       	in	r28, 0x3d	; 61
    1188:	de b7       	in	r29, 0x3e	; 62
    118a:	8c 01       	movw	r16, r24
    118c:	7b 01       	movw	r14, r22
    118e:	19 82       	std	Y+1, r1	; 0x01
    1190:	ae 01       	movw	r20, r28
    1192:	4f 5f       	subi	r20, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	61 e0       	ldi	r22, 0x01	; 1
    1198:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    119c:	81 11       	cpse	r24, r1
    119e:	20 c0       	rjmp	.+64     	; 0x11e0 <VL53L0X_GetSequenceStepEnables+0x68>
    11a0:	97 01       	movw	r18, r14
    11a2:	49 81       	ldd	r20, Y+1	; 0x01
    11a4:	60 e0       	ldi	r22, 0x00	; 0
    11a6:	c8 01       	movw	r24, r16
    11a8:	b5 df       	rcall	.-150    	; 0x1114 <sequence_step_enabled>
    11aa:	81 11       	cpse	r24, r1
    11ac:	22 c0       	rjmp	.+68     	; 0x11f2 <VL53L0X_GetSequenceStepEnables+0x7a>
    11ae:	97 01       	movw	r18, r14
    11b0:	2e 5f       	subi	r18, 0xFE	; 254
    11b2:	3f 4f       	sbci	r19, 0xFF	; 255
    11b4:	49 81       	ldd	r20, Y+1	; 0x01
    11b6:	61 e0       	ldi	r22, 0x01	; 1
    11b8:	c8 01       	movw	r24, r16
    11ba:	ac df       	rcall	.-168    	; 0x1114 <sequence_step_enabled>
    11bc:	81 11       	cpse	r24, r1
    11be:	19 c0       	rjmp	.+50     	; 0x11f2 <VL53L0X_GetSequenceStepEnables+0x7a>
    11c0:	97 01       	movw	r18, r14
    11c2:	2f 5f       	subi	r18, 0xFF	; 255
    11c4:	3f 4f       	sbci	r19, 0xFF	; 255
    11c6:	49 81       	ldd	r20, Y+1	; 0x01
    11c8:	62 e0       	ldi	r22, 0x02	; 2
    11ca:	c8 01       	movw	r24, r16
    11cc:	a3 df       	rcall	.-186    	; 0x1114 <sequence_step_enabled>
    11ce:	81 11       	cpse	r24, r1
    11d0:	10 c0       	rjmp	.+32     	; 0x11f2 <VL53L0X_GetSequenceStepEnables+0x7a>
    11d2:	97 01       	movw	r18, r14
    11d4:	2d 5f       	subi	r18, 0xFD	; 253
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	49 81       	ldd	r20, Y+1	; 0x01
    11da:	63 e0       	ldi	r22, 0x03	; 3
    11dc:	c8 01       	movw	r24, r16
    11de:	9a df       	rcall	.-204    	; 0x1114 <sequence_step_enabled>
    11e0:	81 11       	cpse	r24, r1
    11e2:	07 c0       	rjmp	.+14     	; 0x11f2 <VL53L0X_GetSequenceStepEnables+0x7a>
    11e4:	97 01       	movw	r18, r14
    11e6:	2c 5f       	subi	r18, 0xFC	; 252
    11e8:	3f 4f       	sbci	r19, 0xFF	; 255
    11ea:	49 81       	ldd	r20, Y+1	; 0x01
    11ec:	64 e0       	ldi	r22, 0x04	; 4
    11ee:	c8 01       	movw	r24, r16
    11f0:	91 df       	rcall	.-222    	; 0x1114 <sequence_step_enabled>
    11f2:	0f 90       	pop	r0
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	ff 90       	pop	r15
    11fe:	ef 90       	pop	r14
    1200:	08 95       	ret

00001202 <VL53L0X_GetSequenceStepTimeout>:
    1202:	3f 92       	push	r3
    1204:	4f 92       	push	r4
    1206:	5f 92       	push	r5
    1208:	6f 92       	push	r6
    120a:	7f 92       	push	r7
    120c:	8f 92       	push	r8
    120e:	9f 92       	push	r9
    1210:	af 92       	push	r10
    1212:	bf 92       	push	r11
    1214:	cf 92       	push	r12
    1216:	df 92       	push	r13
    1218:	ef 92       	push	r14
    121a:	ff 92       	push	r15
    121c:	0f 93       	push	r16
    121e:	1f 93       	push	r17
    1220:	cf 93       	push	r28
    1222:	df 93       	push	r29
    1224:	00 d0       	rcall	.+0      	; 0x1226 <VL53L0X_GetSequenceStepTimeout+0x24>
    1226:	00 d0       	rcall	.+0      	; 0x1228 <VL53L0X_GetSequenceStepTimeout+0x26>
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
    122c:	8a 01       	movw	r16, r20
    122e:	ae 01       	movw	r20, r28
    1230:	4f 5f       	subi	r20, 0xFF	; 255
    1232:	5f 4f       	sbci	r21, 0xFF	; 255
    1234:	0e 94 67 1e 	call	0x3cce	; 0x3cce <get_sequence_step_timeout>
    1238:	38 2e       	mov	r3, r24
    123a:	81 11       	cpse	r24, r1
    123c:	38 c0       	rjmp	.+112    	; 0x12ae <VL53L0X_GetSequenceStepTimeout+0xac>
    123e:	49 80       	ldd	r4, Y+1	; 0x01
    1240:	5a 80       	ldd	r5, Y+2	; 0x02
    1242:	6b 80       	ldd	r6, Y+3	; 0x03
    1244:	7c 80       	ldd	r7, Y+4	; 0x04
    1246:	0f 2e       	mov	r0, r31
    1248:	f8 ee       	ldi	r31, 0xE8	; 232
    124a:	8f 2e       	mov	r8, r31
    124c:	f3 e0       	ldi	r31, 0x03	; 3
    124e:	9f 2e       	mov	r9, r31
    1250:	a1 2c       	mov	r10, r1
    1252:	b1 2c       	mov	r11, r1
    1254:	f0 2d       	mov	r31, r0
    1256:	c3 01       	movw	r24, r6
    1258:	b2 01       	movw	r22, r4
    125a:	a5 01       	movw	r20, r10
    125c:	94 01       	movw	r18, r8
    125e:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    1262:	69 01       	movw	r12, r18
    1264:	7a 01       	movw	r14, r20
    1266:	a8 ee       	ldi	r26, 0xE8	; 232
    1268:	b3 e0       	ldi	r27, 0x03	; 3
    126a:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    126e:	a3 01       	movw	r20, r6
    1270:	92 01       	movw	r18, r4
    1272:	26 1b       	sub	r18, r22
    1274:	37 0b       	sbc	r19, r23
    1276:	48 0b       	sbc	r20, r24
    1278:	59 0b       	sbc	r21, r25
    127a:	af ef       	ldi	r26, 0xFF	; 255
    127c:	bf ef       	ldi	r27, 0xFF	; 255
    127e:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    1282:	6c 50       	subi	r22, 0x0C	; 12
    1284:	7e 4f       	sbci	r23, 0xFE	; 254
    1286:	8f 4f       	sbci	r24, 0xFF	; 255
    1288:	9f 4f       	sbci	r25, 0xFF	; 255
    128a:	a5 01       	movw	r20, r10
    128c:	94 01       	movw	r18, r8
    128e:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    1292:	76 01       	movw	r14, r12
    1294:	dd 24       	eor	r13, r13
    1296:	cc 24       	eor	r12, r12
    1298:	da 01       	movw	r26, r20
    129a:	c9 01       	movw	r24, r18
    129c:	8c 0d       	add	r24, r12
    129e:	9d 1d       	adc	r25, r13
    12a0:	ae 1d       	adc	r26, r14
    12a2:	bf 1d       	adc	r27, r15
    12a4:	f8 01       	movw	r30, r16
    12a6:	80 83       	st	Z, r24
    12a8:	91 83       	std	Z+1, r25	; 0x01
    12aa:	a2 83       	std	Z+2, r26	; 0x02
    12ac:	b3 83       	std	Z+3, r27	; 0x03
    12ae:	83 2d       	mov	r24, r3
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	0f 90       	pop	r0
    12b8:	df 91       	pop	r29
    12ba:	cf 91       	pop	r28
    12bc:	1f 91       	pop	r17
    12be:	0f 91       	pop	r16
    12c0:	ff 90       	pop	r15
    12c2:	ef 90       	pop	r14
    12c4:	df 90       	pop	r13
    12c6:	cf 90       	pop	r12
    12c8:	bf 90       	pop	r11
    12ca:	af 90       	pop	r10
    12cc:	9f 90       	pop	r9
    12ce:	8f 90       	pop	r8
    12d0:	7f 90       	pop	r7
    12d2:	6f 90       	pop	r6
    12d4:	5f 90       	pop	r5
    12d6:	4f 90       	pop	r4
    12d8:	3f 90       	pop	r3
    12da:	08 95       	ret

000012dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x10>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x12>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	7c 01       	movw	r14, r24
    12f6:	6b 01       	movw	r12, r22
    12f8:	ae 01       	movw	r20, r28
    12fa:	4f 5f       	subi	r20, 0xFF	; 255
    12fc:	5f 4f       	sbci	r21, 0xFF	; 255
    12fe:	68 ef       	ldi	r22, 0xF8	; 248
    1300:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    1304:	18 2f       	mov	r17, r24
    1306:	81 11       	cpse	r24, r1
    1308:	26 c0       	rjmp	.+76     	; 0x1356 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    130a:	ae 01       	movw	r20, r28
    130c:	4d 5f       	subi	r20, 0xFD	; 253
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	64 e0       	ldi	r22, 0x04	; 4
    1312:	c7 01       	movw	r24, r14
    1314:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    1318:	18 2f       	mov	r17, r24
    131a:	81 11       	cpse	r24, r1
    131c:	1c c0       	rjmp	.+56     	; 0x1356 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    131e:	29 81       	ldd	r18, Y+1	; 0x01
    1320:	3a 81       	ldd	r19, Y+2	; 0x02
    1322:	21 15       	cp	r18, r1
    1324:	31 05       	cpc	r19, r1
    1326:	69 f0       	breq	.+26     	; 0x1342 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x66>
    1328:	40 e0       	ldi	r20, 0x00	; 0
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	6b 81       	ldd	r22, Y+3	; 0x03
    132e:	7c 81       	ldd	r23, Y+4	; 0x04
    1330:	8d 81       	ldd	r24, Y+5	; 0x05
    1332:	9e 81       	ldd	r25, Y+6	; 0x06
    1334:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    1338:	f6 01       	movw	r30, r12
    133a:	20 83       	st	Z, r18
    133c:	31 83       	std	Z+1, r19	; 0x01
    133e:	42 83       	std	Z+2, r20	; 0x02
    1340:	53 83       	std	Z+3, r21	; 0x03
    1342:	f6 01       	movw	r30, r12
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	a2 81       	ldd	r26, Z+2	; 0x02
    134a:	b3 81       	ldd	r27, Z+3	; 0x03
    134c:	f7 01       	movw	r30, r14
    134e:	86 8b       	std	Z+22, r24	; 0x16
    1350:	97 8b       	std	Z+23, r25	; 0x17
    1352:	a0 8f       	std	Z+24, r26	; 0x18
    1354:	b1 8f       	std	Z+25, r27	; 0x19
    1356:	81 2f       	mov	r24, r17
    1358:	26 96       	adiw	r28, 0x06	; 6
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	df 91       	pop	r29
    1366:	cf 91       	pop	r28
    1368:	1f 91       	pop	r17
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	08 95       	ret

00001374 <VL53L0X_GetXTalkCompensationEnable>:
    1374:	fc 01       	movw	r30, r24
    1376:	82 8d       	ldd	r24, Z+26	; 0x1a
    1378:	fb 01       	movw	r30, r22
    137a:	80 83       	st	Z, r24
    137c:	80 e0       	ldi	r24, 0x00	; 0
    137e:	08 95       	ret

00001380 <VL53L0X_GetXTalkCompensationRateMegaCps>:
    1380:	ef 92       	push	r14
    1382:	ff 92       	push	r15
    1384:	0f 93       	push	r16
    1386:	1f 93       	push	r17
    1388:	cf 93       	push	r28
    138a:	df 93       	push	r29
    138c:	00 d0       	rcall	.+0      	; 0x138e <VL53L0X_GetXTalkCompensationRateMegaCps+0xe>
    138e:	cd b7       	in	r28, 0x3d	; 61
    1390:	de b7       	in	r29, 0x3e	; 62
    1392:	8c 01       	movw	r16, r24
    1394:	7b 01       	movw	r14, r22
    1396:	ae 01       	movw	r20, r28
    1398:	4f 5f       	subi	r20, 0xFF	; 255
    139a:	5f 4f       	sbci	r21, 0xFF	; 255
    139c:	60 e2       	ldi	r22, 0x20	; 32
    139e:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    13a2:	81 11       	cpse	r24, r1
    13a4:	26 c0       	rjmp	.+76     	; 0x13f2 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    13a6:	49 81       	ldd	r20, Y+1	; 0x01
    13a8:	5a 81       	ldd	r21, Y+2	; 0x02
    13aa:	41 15       	cp	r20, r1
    13ac:	51 05       	cpc	r21, r1
    13ae:	69 f4       	brne	.+26     	; 0x13ca <VL53L0X_GetXTalkCompensationRateMegaCps+0x4a>
    13b0:	f8 01       	movw	r30, r16
    13b2:	45 8d       	ldd	r20, Z+29	; 0x1d
    13b4:	56 8d       	ldd	r21, Z+30	; 0x1e
    13b6:	67 8d       	ldd	r22, Z+31	; 0x1f
    13b8:	70 a1       	ldd	r23, Z+32	; 0x20
    13ba:	f7 01       	movw	r30, r14
    13bc:	40 83       	st	Z, r20
    13be:	51 83       	std	Z+1, r21	; 0x01
    13c0:	62 83       	std	Z+2, r22	; 0x02
    13c2:	73 83       	std	Z+3, r23	; 0x03
    13c4:	f8 01       	movw	r30, r16
    13c6:	12 8e       	std	Z+26, r1	; 0x1a
    13c8:	14 c0       	rjmp	.+40     	; 0x13f2 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    13ca:	44 0f       	add	r20, r20
    13cc:	55 1f       	adc	r21, r21
    13ce:	44 0f       	add	r20, r20
    13d0:	55 1f       	adc	r21, r21
    13d2:	44 0f       	add	r20, r20
    13d4:	55 1f       	adc	r21, r21
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	70 e0       	ldi	r23, 0x00	; 0
    13da:	f7 01       	movw	r30, r14
    13dc:	40 83       	st	Z, r20
    13de:	51 83       	std	Z+1, r21	; 0x01
    13e0:	62 83       	std	Z+2, r22	; 0x02
    13e2:	73 83       	std	Z+3, r23	; 0x03
    13e4:	f8 01       	movw	r30, r16
    13e6:	45 8f       	std	Z+29, r20	; 0x1d
    13e8:	56 8f       	std	Z+30, r21	; 0x1e
    13ea:	67 8f       	std	Z+31, r22	; 0x1f
    13ec:	70 a3       	std	Z+32, r23	; 0x20
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	92 8f       	std	Z+26, r25	; 0x1a
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	df 91       	pop	r29
    13f8:	cf 91       	pop	r28
    13fa:	1f 91       	pop	r17
    13fc:	0f 91       	pop	r16
    13fe:	ff 90       	pop	r15
    1400:	ef 90       	pop	r14
    1402:	08 95       	ret

00001404 <VL53L0X_SetLimitCheckEnable>:
    1404:	8f 92       	push	r8
    1406:	9f 92       	push	r9
    1408:	af 92       	push	r10
    140a:	bf 92       	push	r11
    140c:	ef 92       	push	r14
    140e:	ff 92       	push	r15
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	66 30       	cpi	r22, 0x06	; 6
    1418:	71 05       	cpc	r23, r1
    141a:	08 f0       	brcs	.+2      	; 0x141e <VL53L0X_SetLimitCheckEnable+0x1a>
    141c:	47 c0       	rjmp	.+142    	; 0x14ac <VL53L0X_SetLimitCheckEnable+0xa8>
    141e:	44 23       	and	r20, r20
    1420:	09 f4       	brne	.+2      	; 0x1424 <VL53L0X_SetLimitCheckEnable+0x20>
    1422:	48 c0       	rjmp	.+144    	; 0x14b4 <VL53L0X_SetLimitCheckEnable+0xb0>
    1424:	fb 01       	movw	r30, r22
    1426:	ee 0f       	add	r30, r30
    1428:	ff 1f       	adc	r31, r31
    142a:	ee 0f       	add	r30, r30
    142c:	ff 1f       	adc	r31, r31
    142e:	e8 0f       	add	r30, r24
    1430:	f9 1f       	adc	r31, r25
    1432:	81 a8       	ldd	r8, Z+49	; 0x31
    1434:	92 a8       	ldd	r9, Z+50	; 0x32
    1436:	a3 a8       	ldd	r10, Z+51	; 0x33
    1438:	b4 a8       	ldd	r11, Z+52	; 0x34
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	31 e0       	ldi	r19, 0x01	; 1
    143e:	3f c0       	rjmp	.+126    	; 0x14be <VL53L0X_SetLimitCheckEnable+0xba>
    1440:	f7 01       	movw	r30, r14
    1442:	35 a3       	std	Z+37, r19	; 0x25
    1444:	26 c0       	rjmp	.+76     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0x8e>
    1446:	b5 01       	movw	r22, r10
    1448:	a4 01       	movw	r20, r8
    144a:	03 2e       	mov	r0, r19
    144c:	39 e0       	ldi	r19, 0x09	; 9
    144e:	76 95       	lsr	r23
    1450:	67 95       	ror	r22
    1452:	57 95       	ror	r21
    1454:	47 95       	ror	r20
    1456:	3a 95       	dec	r19
    1458:	d1 f7       	brne	.-12     	; 0x144e <VL53L0X_SetLimitCheckEnable+0x4a>
    145a:	30 2d       	mov	r19, r0
    145c:	64 e4       	ldi	r22, 0x44	; 68
    145e:	c7 01       	movw	r24, r14
    1460:	0e 94 de 2b 	call	0x57bc	; 0x57bc <VL53L0X_WrWord>
    1464:	14 c0       	rjmp	.+40     	; 0x148e <VL53L0X_SetLimitCheckEnable+0x8a>
    1466:	f7 01       	movw	r30, r14
    1468:	37 a3       	std	Z+39, r19	; 0x27
    146a:	13 c0       	rjmp	.+38     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0x8e>
    146c:	f7 01       	movw	r30, r14
    146e:	30 a7       	std	Z+40, r19	; 0x28
    1470:	10 c0       	rjmp	.+32     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0x8e>
    1472:	22 0f       	add	r18, r18
    1474:	4e ef       	ldi	r20, 0xFE	; 254
    1476:	60 e6       	ldi	r22, 0x60	; 96
    1478:	c7 01       	movw	r24, r14
    147a:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_UpdateByte>
    147e:	07 c0       	rjmp	.+14     	; 0x148e <VL53L0X_SetLimitCheckEnable+0x8a>
    1480:	22 95       	swap	r18
    1482:	20 7f       	andi	r18, 0xF0	; 240
    1484:	4f ee       	ldi	r20, 0xEF	; 239
    1486:	60 e6       	ldi	r22, 0x60	; 96
    1488:	c7 01       	movw	r24, r14
    148a:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_UpdateByte>
    148e:	81 11       	cpse	r24, r1
    1490:	2d c0       	rjmp	.+90     	; 0x14ec <VL53L0X_SetLimitCheckEnable+0xe8>
    1492:	11 11       	cpse	r17, r1
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <VL53L0X_SetLimitCheckEnable+0x9c>
    1496:	ce 0d       	add	r28, r14
    1498:	df 1d       	adc	r29, r15
    149a:	1d a2       	std	Y+37, r1	; 0x25
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	26 c0       	rjmp	.+76     	; 0x14ec <VL53L0X_SetLimitCheckEnable+0xe8>
    14a0:	ce 0d       	add	r28, r14
    14a2:	df 1d       	adc	r29, r15
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	8d a3       	std	Y+37, r24	; 0x25
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	20 c0       	rjmp	.+64     	; 0x14ec <VL53L0X_SetLimitCheckEnable+0xe8>
    14ac:	8c ef       	ldi	r24, 0xFC	; 252
    14ae:	1e c0       	rjmp	.+60     	; 0x14ec <VL53L0X_SetLimitCheckEnable+0xe8>
    14b0:	8c ef       	ldi	r24, 0xFC	; 252
    14b2:	1c c0       	rjmp	.+56     	; 0x14ec <VL53L0X_SetLimitCheckEnable+0xe8>
    14b4:	21 e0       	ldi	r18, 0x01	; 1
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 2c       	mov	r8, r1
    14ba:	91 2c       	mov	r9, r1
    14bc:	54 01       	movw	r10, r8
    14be:	14 2f       	mov	r17, r20
    14c0:	eb 01       	movw	r28, r22
    14c2:	7c 01       	movw	r14, r24
    14c4:	62 30       	cpi	r22, 0x02	; 2
    14c6:	71 05       	cpc	r23, r1
    14c8:	71 f2       	breq	.-100    	; 0x1466 <VL53L0X_SetLimitCheckEnable+0x62>
    14ca:	40 f4       	brcc	.+16     	; 0x14dc <VL53L0X_SetLimitCheckEnable+0xd8>
    14cc:	20 97       	sbiw	r28, 0x00	; 0
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <VL53L0X_SetLimitCheckEnable+0xce>
    14d0:	b7 cf       	rjmp	.-146    	; 0x1440 <VL53L0X_SetLimitCheckEnable+0x3c>
    14d2:	61 30       	cpi	r22, 0x01	; 1
    14d4:	71 05       	cpc	r23, r1
    14d6:	09 f4       	brne	.+2      	; 0x14da <VL53L0X_SetLimitCheckEnable+0xd6>
    14d8:	b6 cf       	rjmp	.-148    	; 0x1446 <VL53L0X_SetLimitCheckEnable+0x42>
    14da:	ea cf       	rjmp	.-44     	; 0x14b0 <VL53L0X_SetLimitCheckEnable+0xac>
    14dc:	64 30       	cpi	r22, 0x04	; 4
    14de:	71 05       	cpc	r23, r1
    14e0:	41 f2       	breq	.-112    	; 0x1472 <VL53L0X_SetLimitCheckEnable+0x6e>
    14e2:	20 f2       	brcs	.-120    	; 0x146c <VL53L0X_SetLimitCheckEnable+0x68>
    14e4:	65 30       	cpi	r22, 0x05	; 5
    14e6:	71 05       	cpc	r23, r1
    14e8:	59 f2       	breq	.-106    	; 0x1480 <VL53L0X_SetLimitCheckEnable+0x7c>
    14ea:	e2 cf       	rjmp	.-60     	; 0x14b0 <VL53L0X_SetLimitCheckEnable+0xac>
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	1f 91       	pop	r17
    14f2:	ff 90       	pop	r15
    14f4:	ef 90       	pop	r14
    14f6:	bf 90       	pop	r11
    14f8:	af 90       	pop	r10
    14fa:	9f 90       	pop	r9
    14fc:	8f 90       	pop	r8
    14fe:	08 95       	ret

00001500 <VL53L0X_GetLimitCheckEnable>:
    1500:	66 30       	cpi	r22, 0x06	; 6
    1502:	71 05       	cpc	r23, r1
    1504:	20 f0       	brcs	.+8      	; 0x150e <VL53L0X_GetLimitCheckEnable+0xe>
    1506:	fa 01       	movw	r30, r20
    1508:	10 82       	st	Z, r1
    150a:	8c ef       	ldi	r24, 0xFC	; 252
    150c:	08 95       	ret
    150e:	fc 01       	movw	r30, r24
    1510:	e6 0f       	add	r30, r22
    1512:	f7 1f       	adc	r31, r23
    1514:	85 a1       	ldd	r24, Z+37	; 0x25
    1516:	fa 01       	movw	r30, r20
    1518:	80 83       	st	Z, r24
    151a:	80 e0       	ldi	r24, 0x00	; 0
    151c:	08 95       	ret

0000151e <VL53L0X_SetLimitCheckValue>:
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	fc 01       	movw	r30, r24
    1530:	e6 0f       	add	r30, r22
    1532:	f7 1f       	adc	r31, r23
    1534:	e5 a1       	ldd	r30, Z+37	; 0x25
    1536:	e1 11       	cpse	r30, r1
    1538:	0d c0       	rjmp	.+26     	; 0x1554 <VL53L0X_SetLimitCheckValue+0x36>
    153a:	66 0f       	add	r22, r22
    153c:	77 1f       	adc	r23, r23
    153e:	66 0f       	add	r22, r22
    1540:	77 1f       	adc	r23, r23
    1542:	ec 01       	movw	r28, r24
    1544:	c6 0f       	add	r28, r22
    1546:	d7 1f       	adc	r29, r23
    1548:	29 ab       	std	Y+49, r18	; 0x31
    154a:	3a ab       	std	Y+50, r19	; 0x32
    154c:	4b ab       	std	Y+51, r20	; 0x33
    154e:	5c ab       	std	Y+52, r21	; 0x34
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	56 c0       	rjmp	.+172    	; 0x1600 <VL53L0X_SetLimitCheckValue+0xe2>
    1554:	69 01       	movw	r12, r18
    1556:	7a 01       	movw	r14, r20
    1558:	eb 01       	movw	r28, r22
    155a:	8c 01       	movw	r16, r24
    155c:	62 30       	cpi	r22, 0x02	; 2
    155e:	71 05       	cpc	r23, r1
    1560:	19 f1       	breq	.+70     	; 0x15a8 <VL53L0X_SetLimitCheckValue+0x8a>
    1562:	30 f4       	brcc	.+12     	; 0x1570 <VL53L0X_SetLimitCheckValue+0x52>
    1564:	20 97       	sbiw	r28, 0x00	; 0
    1566:	59 f0       	breq	.+22     	; 0x157e <VL53L0X_SetLimitCheckValue+0x60>
    1568:	61 30       	cpi	r22, 0x01	; 1
    156a:	71 05       	cpc	r23, r1
    156c:	71 f0       	breq	.+28     	; 0x158a <VL53L0X_SetLimitCheckValue+0x6c>
    156e:	38 c0       	rjmp	.+112    	; 0x15e0 <VL53L0X_SetLimitCheckValue+0xc2>
    1570:	63 30       	cpi	r22, 0x03	; 3
    1572:	71 05       	cpc	r23, r1
    1574:	f9 f0       	breq	.+62     	; 0x15b4 <VL53L0X_SetLimitCheckValue+0x96>
    1576:	66 30       	cpi	r22, 0x06	; 6
    1578:	71 05       	cpc	r23, r1
    157a:	18 f1       	brcs	.+70     	; 0x15c2 <VL53L0X_SetLimitCheckValue+0xa4>
    157c:	31 c0       	rjmp	.+98     	; 0x15e0 <VL53L0X_SetLimitCheckValue+0xc2>
    157e:	fc 01       	movw	r30, r24
    1580:	21 ab       	std	Z+49, r18	; 0x31
    1582:	32 ab       	std	Z+50, r19	; 0x32
    1584:	43 ab       	std	Z+51, r20	; 0x33
    1586:	54 ab       	std	Z+52, r21	; 0x34
    1588:	2e c0       	rjmp	.+92     	; 0x15e6 <VL53L0X_SetLimitCheckValue+0xc8>
    158a:	ba 01       	movw	r22, r20
    158c:	a9 01       	movw	r20, r18
    158e:	03 2e       	mov	r0, r19
    1590:	39 e0       	ldi	r19, 0x09	; 9
    1592:	76 95       	lsr	r23
    1594:	67 95       	ror	r22
    1596:	57 95       	ror	r21
    1598:	47 95       	ror	r20
    159a:	3a 95       	dec	r19
    159c:	d1 f7       	brne	.-12     	; 0x1592 <VL53L0X_SetLimitCheckValue+0x74>
    159e:	30 2d       	mov	r19, r0
    15a0:	64 e4       	ldi	r22, 0x44	; 68
    15a2:	0e 94 de 2b 	call	0x57bc	; 0x57bc <VL53L0X_WrWord>
    15a6:	1d c0       	rjmp	.+58     	; 0x15e2 <VL53L0X_SetLimitCheckValue+0xc4>
    15a8:	fc 01       	movw	r30, r24
    15aa:	21 af       	std	Z+57, r18	; 0x39
    15ac:	32 af       	std	Z+58, r19	; 0x3a
    15ae:	43 af       	std	Z+59, r20	; 0x3b
    15b0:	54 af       	std	Z+60, r21	; 0x3c
    15b2:	19 c0       	rjmp	.+50     	; 0x15e6 <VL53L0X_SetLimitCheckValue+0xc8>
    15b4:	fc 01       	movw	r30, r24
    15b6:	fd 96       	adiw	r30, 0x3d	; 61
    15b8:	20 83       	st	Z, r18
    15ba:	31 83       	std	Z+1, r19	; 0x01
    15bc:	42 83       	std	Z+2, r20	; 0x02
    15be:	53 83       	std	Z+3, r21	; 0x03
    15c0:	12 c0       	rjmp	.+36     	; 0x15e6 <VL53L0X_SetLimitCheckValue+0xc8>
    15c2:	ba 01       	movw	r22, r20
    15c4:	a9 01       	movw	r20, r18
    15c6:	03 2e       	mov	r0, r19
    15c8:	39 e0       	ldi	r19, 0x09	; 9
    15ca:	76 95       	lsr	r23
    15cc:	67 95       	ror	r22
    15ce:	57 95       	ror	r21
    15d0:	47 95       	ror	r20
    15d2:	3a 95       	dec	r19
    15d4:	d1 f7       	brne	.-12     	; 0x15ca <VL53L0X_SetLimitCheckValue+0xac>
    15d6:	30 2d       	mov	r19, r0
    15d8:	64 e6       	ldi	r22, 0x64	; 100
    15da:	0e 94 de 2b 	call	0x57bc	; 0x57bc <VL53L0X_WrWord>
    15de:	01 c0       	rjmp	.+2      	; 0x15e2 <VL53L0X_SetLimitCheckValue+0xc4>
    15e0:	8c ef       	ldi	r24, 0xFC	; 252
    15e2:	81 11       	cpse	r24, r1
    15e4:	0d c0       	rjmp	.+26     	; 0x1600 <VL53L0X_SetLimitCheckValue+0xe2>
    15e6:	be 01       	movw	r22, r28
    15e8:	66 0f       	add	r22, r22
    15ea:	77 1f       	adc	r23, r23
    15ec:	66 0f       	add	r22, r22
    15ee:	77 1f       	adc	r23, r23
    15f0:	e8 01       	movw	r28, r16
    15f2:	c6 0f       	add	r28, r22
    15f4:	d7 1f       	adc	r29, r23
    15f6:	c9 aa       	std	Y+49, r12	; 0x31
    15f8:	da aa       	std	Y+50, r13	; 0x32
    15fa:	eb aa       	std	Y+51, r14	; 0x33
    15fc:	fc aa       	std	Y+52, r15	; 0x34
    15fe:	80 e0       	ldi	r24, 0x00	; 0
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	1f 91       	pop	r17
    1606:	0f 91       	pop	r16
    1608:	ff 90       	pop	r15
    160a:	ef 90       	pop	r14
    160c:	df 90       	pop	r13
    160e:	cf 90       	pop	r12
    1610:	08 95       	ret

00001612 <VL53L0X_GetLimitCheckValue>:
    1612:	ef 92       	push	r14
    1614:	ff 92       	push	r15
    1616:	0f 93       	push	r16
    1618:	1f 93       	push	r17
    161a:	cf 93       	push	r28
    161c:	df 93       	push	r29
    161e:	00 d0       	rcall	.+0      	; 0x1620 <VL53L0X_GetLimitCheckValue+0xe>
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	8c 01       	movw	r16, r24
    1626:	7a 01       	movw	r14, r20
    1628:	62 30       	cpi	r22, 0x02	; 2
    162a:	71 05       	cpc	r23, r1
    162c:	51 f1       	breq	.+84     	; 0x1682 <VL53L0X_GetLimitCheckValue+0x70>
    162e:	38 f4       	brcc	.+14     	; 0x163e <VL53L0X_GetLimitCheckValue+0x2c>
    1630:	61 15       	cp	r22, r1
    1632:	71 05       	cpc	r23, r1
    1634:	59 f0       	breq	.+22     	; 0x164c <VL53L0X_GetLimitCheckValue+0x3a>
    1636:	61 30       	cpi	r22, 0x01	; 1
    1638:	71 05       	cpc	r23, r1
    163a:	71 f0       	breq	.+28     	; 0x1658 <VL53L0X_GetLimitCheckValue+0x46>
    163c:	59 c0       	rjmp	.+178    	; 0x16f0 <VL53L0X_GetLimitCheckValue+0xde>
    163e:	63 30       	cpi	r22, 0x03	; 3
    1640:	71 05       	cpc	r23, r1
    1642:	29 f1       	breq	.+74     	; 0x168e <VL53L0X_GetLimitCheckValue+0x7c>
    1644:	66 30       	cpi	r22, 0x06	; 6
    1646:	71 05       	cpc	r23, r1
    1648:	48 f1       	brcs	.+82     	; 0x169c <VL53L0X_GetLimitCheckValue+0x8a>
    164a:	52 c0       	rjmp	.+164    	; 0x16f0 <VL53L0X_GetLimitCheckValue+0xde>
    164c:	fc 01       	movw	r30, r24
    164e:	81 a9       	ldd	r24, Z+49	; 0x31
    1650:	92 a9       	ldd	r25, Z+50	; 0x32
    1652:	a3 a9       	ldd	r26, Z+51	; 0x33
    1654:	b4 a9       	ldd	r27, Z+52	; 0x34
    1656:	4e c0       	rjmp	.+156    	; 0x16f4 <VL53L0X_GetLimitCheckValue+0xe2>
    1658:	ae 01       	movw	r20, r28
    165a:	4f 5f       	subi	r20, 0xFF	; 255
    165c:	5f 4f       	sbci	r21, 0xFF	; 255
    165e:	64 e4       	ldi	r22, 0x44	; 68
    1660:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    1664:	81 11       	cpse	r24, r1
    1666:	4c c0       	rjmp	.+152    	; 0x1700 <VL53L0X_GetLimitCheckValue+0xee>
    1668:	99 81       	ldd	r25, Y+1	; 0x01
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	59 2f       	mov	r21, r25
    1670:	55 0f       	add	r21, r21
    1672:	60 e0       	ldi	r22, 0x00	; 0
    1674:	70 e0       	ldi	r23, 0x00	; 0
    1676:	41 15       	cp	r20, r1
    1678:	51 05       	cpc	r21, r1
    167a:	61 05       	cpc	r22, r1
    167c:	71 05       	cpc	r23, r1
    167e:	f1 f0       	breq	.+60     	; 0x16bc <VL53L0X_GetLimitCheckValue+0xaa>
    1680:	2a c0       	rjmp	.+84     	; 0x16d6 <VL53L0X_GetLimitCheckValue+0xc4>
    1682:	fc 01       	movw	r30, r24
    1684:	81 ad       	ldd	r24, Z+57	; 0x39
    1686:	92 ad       	ldd	r25, Z+58	; 0x3a
    1688:	a3 ad       	ldd	r26, Z+59	; 0x3b
    168a:	b4 ad       	ldd	r27, Z+60	; 0x3c
    168c:	33 c0       	rjmp	.+102    	; 0x16f4 <VL53L0X_GetLimitCheckValue+0xe2>
    168e:	fc 01       	movw	r30, r24
    1690:	fd 96       	adiw	r30, 0x3d	; 61
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	a2 81       	ldd	r26, Z+2	; 0x02
    1698:	b3 81       	ldd	r27, Z+3	; 0x03
    169a:	2c c0       	rjmp	.+88     	; 0x16f4 <VL53L0X_GetLimitCheckValue+0xe2>
    169c:	ae 01       	movw	r20, r28
    169e:	4f 5f       	subi	r20, 0xFF	; 255
    16a0:	5f 4f       	sbci	r21, 0xFF	; 255
    16a2:	64 e6       	ldi	r22, 0x64	; 100
    16a4:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    16a8:	81 11       	cpse	r24, r1
    16aa:	2a c0       	rjmp	.+84     	; 0x1700 <VL53L0X_GetLimitCheckValue+0xee>
    16ac:	29 81       	ldd	r18, Y+1	; 0x01
    16ae:	80 e0       	ldi	r24, 0x00	; 0
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	92 2f       	mov	r25, r18
    16b4:	99 0f       	add	r25, r25
    16b6:	a0 e0       	ldi	r26, 0x00	; 0
    16b8:	b0 e0       	ldi	r27, 0x00	; 0
    16ba:	1c c0       	rjmp	.+56     	; 0x16f4 <VL53L0X_GetLimitCheckValue+0xe2>
    16bc:	f8 01       	movw	r30, r16
    16be:	45 a9       	ldd	r20, Z+53	; 0x35
    16c0:	56 a9       	ldd	r21, Z+54	; 0x36
    16c2:	67 a9       	ldd	r22, Z+55	; 0x37
    16c4:	70 ad       	ldd	r23, Z+56	; 0x38
    16c6:	f7 01       	movw	r30, r14
    16c8:	40 83       	st	Z, r20
    16ca:	51 83       	std	Z+1, r21	; 0x01
    16cc:	62 83       	std	Z+2, r22	; 0x02
    16ce:	73 83       	std	Z+3, r23	; 0x03
    16d0:	f8 01       	movw	r30, r16
    16d2:	16 a2       	std	Z+38, r1	; 0x26
    16d4:	15 c0       	rjmp	.+42     	; 0x1700 <VL53L0X_GetLimitCheckValue+0xee>
    16d6:	f7 01       	movw	r30, r14
    16d8:	40 83       	st	Z, r20
    16da:	51 83       	std	Z+1, r21	; 0x01
    16dc:	62 83       	std	Z+2, r22	; 0x02
    16de:	73 83       	std	Z+3, r23	; 0x03
    16e0:	f8 01       	movw	r30, r16
    16e2:	45 ab       	std	Z+53, r20	; 0x35
    16e4:	56 ab       	std	Z+54, r21	; 0x36
    16e6:	67 ab       	std	Z+55, r22	; 0x37
    16e8:	70 af       	std	Z+56, r23	; 0x38
    16ea:	91 e0       	ldi	r25, 0x01	; 1
    16ec:	96 a3       	std	Z+38, r25	; 0x26
    16ee:	08 c0       	rjmp	.+16     	; 0x1700 <VL53L0X_GetLimitCheckValue+0xee>
    16f0:	8c ef       	ldi	r24, 0xFC	; 252
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <VL53L0X_GetLimitCheckValue+0xee>
    16f4:	f7 01       	movw	r30, r14
    16f6:	80 83       	st	Z, r24
    16f8:	91 83       	std	Z+1, r25	; 0x01
    16fa:	a2 83       	std	Z+2, r26	; 0x02
    16fc:	b3 83       	std	Z+3, r27	; 0x03
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	08 95       	ret

00001712 <VL53L0X_GetWrapAroundCheckEnable>:
    1712:	ef 92       	push	r14
    1714:	ff 92       	push	r15
    1716:	0f 93       	push	r16
    1718:	1f 93       	push	r17
    171a:	cf 93       	push	r28
    171c:	df 93       	push	r29
    171e:	1f 92       	push	r1
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	8c 01       	movw	r16, r24
    1726:	7b 01       	movw	r14, r22
    1728:	ae 01       	movw	r20, r28
    172a:	4f 5f       	subi	r20, 0xFF	; 255
    172c:	5f 4f       	sbci	r21, 0xFF	; 255
    172e:	61 e0       	ldi	r22, 0x01	; 1
    1730:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    1734:	81 11       	cpse	r24, r1
    1736:	13 c0       	rjmp	.+38     	; 0x175e <VL53L0X_GetWrapAroundCheckEnable+0x4c>
    1738:	99 81       	ldd	r25, Y+1	; 0x01
    173a:	f8 01       	movw	r30, r16
    173c:	e3 5e       	subi	r30, 0xE3	; 227
    173e:	fe 4f       	sbci	r31, 0xFE	; 254
    1740:	90 83       	st	Z, r25
    1742:	99 23       	and	r25, r25
    1744:	24 f4       	brge	.+8      	; 0x174e <VL53L0X_GetWrapAroundCheckEnable+0x3c>
    1746:	91 e0       	ldi	r25, 0x01	; 1
    1748:	f7 01       	movw	r30, r14
    174a:	90 83       	st	Z, r25
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <VL53L0X_GetWrapAroundCheckEnable+0x40>
    174e:	f7 01       	movw	r30, r14
    1750:	10 82       	st	Z, r1
    1752:	f7 01       	movw	r30, r14
    1754:	90 81       	ld	r25, Z
    1756:	f8 01       	movw	r30, r16
    1758:	e7 5b       	subi	r30, 0xB7	; 183
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	90 83       	st	Z, r25
    175e:	0f 90       	pop	r0
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	ff 90       	pop	r15
    176a:	ef 90       	pop	r14
    176c:	08 95       	ret

0000176e <VL53L0X_GetDeviceParameters>:
    176e:	8f 92       	push	r8
    1770:	9f 92       	push	r9
    1772:	af 92       	push	r10
    1774:	bf 92       	push	r11
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	ec 01       	movw	r28, r24
    1788:	7b 01       	movw	r14, r22
    178a:	88 89       	ldd	r24, Y+16	; 0x10
    178c:	fb 01       	movw	r30, r22
    178e:	80 83       	st	Z, r24
    1790:	6a 5f       	subi	r22, 0xFA	; 250
    1792:	7f 4f       	sbci	r23, 0xFF	; 255
    1794:	ce 01       	movw	r24, r28
    1796:	a2 dd       	rcall	.-1212   	; 0x12dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
    1798:	81 11       	cpse	r24, r1
    179a:	33 c0       	rjmp	.+102    	; 0x1802 <VL53L0X_GetDeviceParameters+0x94>
    179c:	f7 01       	movw	r30, r14
    179e:	12 86       	std	Z+10, r1	; 0x0a
    17a0:	b7 01       	movw	r22, r14
    17a2:	63 5f       	subi	r22, 0xF3	; 243
    17a4:	7f 4f       	sbci	r23, 0xFF	; 255
    17a6:	ce 01       	movw	r24, r28
    17a8:	eb dd       	rcall	.-1066   	; 0x1380 <VL53L0X_GetXTalkCompensationRateMegaCps>
    17aa:	81 11       	cpse	r24, r1
    17ac:	39 c0       	rjmp	.+114    	; 0x1820 <VL53L0X_GetDeviceParameters+0xb2>
    17ae:	b7 01       	movw	r22, r14
    17b0:	6f 5e       	subi	r22, 0xEF	; 239
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	ce 01       	movw	r24, r28
    17b6:	a6 d6       	rcall	.+3404   	; 0x2504 <VL53L0X_get_offset_calibration_data_micro_meter>
    17b8:	81 11       	cpse	r24, r1
    17ba:	32 c0       	rjmp	.+100    	; 0x1820 <VL53L0X_GetDeviceParameters+0xb2>
    17bc:	87 01       	movw	r16, r14
    17be:	0f 5d       	subi	r16, 0xDF	; 223
    17c0:	1f 4f       	sbci	r17, 0xFF	; 255
    17c2:	5e 01       	movw	r10, r28
    17c4:	f5 e2       	ldi	r31, 0x25	; 37
    17c6:	af 0e       	add	r10, r31
    17c8:	b1 1c       	adc	r11, r1
    17ca:	67 01       	movw	r12, r14
    17cc:	85 e1       	ldi	r24, 0x15	; 21
    17ce:	c8 0e       	add	r12, r24
    17d0:	d1 1c       	adc	r13, r1
    17d2:	81 2c       	mov	r8, r1
    17d4:	91 2c       	mov	r9, r1
    17d6:	a8 01       	movw	r20, r16
    17d8:	b4 01       	movw	r22, r8
    17da:	ce 01       	movw	r24, r28
    17dc:	1a df       	rcall	.-460    	; 0x1612 <VL53L0X_GetLimitCheckValue>
    17de:	81 11       	cpse	r24, r1
    17e0:	1f c0       	rjmp	.+62     	; 0x1820 <VL53L0X_GetDeviceParameters+0xb2>
    17e2:	f5 01       	movw	r30, r10
    17e4:	81 91       	ld	r24, Z+
    17e6:	5f 01       	movw	r10, r30
    17e8:	f6 01       	movw	r30, r12
    17ea:	81 93       	st	Z+, r24
    17ec:	6f 01       	movw	r12, r30
    17ee:	ff ef       	ldi	r31, 0xFF	; 255
    17f0:	8f 1a       	sub	r8, r31
    17f2:	9f 0a       	sbc	r9, r31
    17f4:	0c 5f       	subi	r16, 0xFC	; 252
    17f6:	1f 4f       	sbci	r17, 0xFF	; 255
    17f8:	86 e0       	ldi	r24, 0x06	; 6
    17fa:	88 16       	cp	r8, r24
    17fc:	91 04       	cpc	r9, r1
    17fe:	59 f7       	brne	.-42     	; 0x17d6 <VL53L0X_GetDeviceParameters+0x68>
    1800:	02 c0       	rjmp	.+4      	; 0x1806 <VL53L0X_GetDeviceParameters+0x98>
    1802:	81 11       	cpse	r24, r1
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <VL53L0X_GetDeviceParameters+0xb2>
    1806:	b7 01       	movw	r22, r14
    1808:	67 5c       	subi	r22, 0xC7	; 199
    180a:	7f 4f       	sbci	r23, 0xFF	; 255
    180c:	ce 01       	movw	r24, r28
    180e:	81 df       	rcall	.-254    	; 0x1712 <VL53L0X_GetWrapAroundCheckEnable>
    1810:	81 11       	cpse	r24, r1
    1812:	06 c0       	rjmp	.+12     	; 0x1820 <VL53L0X_GetDeviceParameters+0xb2>
    1814:	b7 01       	movw	r22, r14
    1816:	6e 5f       	subi	r22, 0xFE	; 254
    1818:	7f 4f       	sbci	r23, 0xFF	; 255
    181a:	ce 01       	movw	r24, r28
    181c:	0e 94 3e 21 	call	0x427c	; 0x427c <VL53L0X_get_measurement_timing_budget_micro_seconds>
    1820:	df 91       	pop	r29
    1822:	cf 91       	pop	r28
    1824:	1f 91       	pop	r17
    1826:	0f 91       	pop	r16
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	08 95       	ret

0000183a <VL53L0X_DataInit>:
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	ec 97       	sbiw	r28, 0x3c	; 60
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	8c 01       	movw	r16, r24
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	4e ef       	ldi	r20, 0xFE	; 254
    185c:	69 e8       	ldi	r22, 0x89	; 137
    185e:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_UpdateByte>
    1862:	81 11       	cpse	r24, r1
    1864:	05 c0       	rjmp	.+10     	; 0x1870 <VL53L0X_DataInit+0x36>
    1866:	40 e0       	ldi	r20, 0x00	; 0
    1868:	68 e8       	ldi	r22, 0x88	; 136
    186a:	c8 01       	movw	r24, r16
    186c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1870:	ae 01       	movw	r20, r28
    1872:	44 5c       	subi	r20, 0xC4	; 196
    1874:	5f 4f       	sbci	r21, 0xFF	; 255
    1876:	60 ec       	ldi	r22, 0xC0	; 192
    1878:	c8 01       	movw	r24, r16
    187a:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    187e:	f8 01       	movw	r30, r16
    1880:	e1 52       	subi	r30, 0x21	; 33
    1882:	ff 4f       	sbci	r31, 0xFF	; 255
    1884:	10 82       	st	Z, r1
    1886:	88 ee       	ldi	r24, 0xE8	; 232
    1888:	93 e0       	ldi	r25, 0x03	; 3
    188a:	e6 5a       	subi	r30, 0xA6	; 166
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	80 e9       	ldi	r24, 0x90	; 144
    1894:	91 e0       	ldi	r25, 0x01	; 1
    1896:	32 96       	adiw	r30, 0x02	; 2
    1898:	91 83       	std	Z+1, r25	; 0x01
    189a:	80 83       	st	Z, r24
    189c:	85 e8       	ldi	r24, 0x85	; 133
    189e:	9b e6       	ldi	r25, 0x6B	; 107
    18a0:	a1 e0       	ldi	r26, 0x01	; 1
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	32 96       	adiw	r30, 0x02	; 2
    18a6:	80 83       	st	Z, r24
    18a8:	91 83       	std	Z+1, r25	; 0x01
    18aa:	a2 83       	std	Z+2, r26	; 0x02
    18ac:	b3 83       	std	Z+3, r27	; 0x03
    18ae:	84 ea       	ldi	r24, 0xA4	; 164
    18b0:	90 e7       	ldi	r25, 0x70	; 112
    18b2:	a9 e0       	ldi	r26, 0x09	; 9
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	e5 57       	subi	r30, 0x75	; 117
    18b8:	f1 09       	sbc	r31, r1
    18ba:	80 83       	st	Z, r24
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	a2 83       	std	Z+2, r26	; 0x02
    18c0:	b3 83       	std	Z+3, r27	; 0x03
    18c2:	f8 01       	movw	r30, r16
    18c4:	15 8e       	std	Z+29, r1	; 0x1d
    18c6:	16 8e       	std	Z+30, r1	; 0x1e
    18c8:	17 8e       	std	Z+31, r1	; 0x1f
    18ca:	10 a2       	std	Z+32, r1	; 0x20
    18cc:	be 01       	movw	r22, r28
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	c8 01       	movw	r24, r16
    18d4:	4c df       	rcall	.-360    	; 0x176e <VL53L0X_GetDeviceParameters>
    18d6:	f8 2e       	mov	r15, r24
    18d8:	81 11       	cpse	r24, r1
    18da:	0b c0       	rjmp	.+22     	; 0x18f2 <VL53L0X_DataInit+0xb8>
    18dc:	19 82       	std	Y+1, r1	; 0x01
    18de:	1a 82       	std	Y+2, r1	; 0x02
    18e0:	8a e3       	ldi	r24, 0x3A	; 58
    18e2:	fe 01       	movw	r30, r28
    18e4:	31 96       	adiw	r30, 0x01	; 1
    18e6:	d8 01       	movw	r26, r16
    18e8:	50 96       	adiw	r26, 0x10	; 16
    18ea:	01 90       	ld	r0, Z+
    18ec:	0d 92       	st	X+, r0
    18ee:	8a 95       	dec	r24
    18f0:	e1 f7       	brne	.-8      	; 0x18ea <VL53L0X_DataInit+0xb0>
    18f2:	84 e6       	ldi	r24, 0x64	; 100
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	f8 01       	movw	r30, r16
    18f8:	ef 5d       	subi	r30, 0xDF	; 223
    18fa:	fe 4f       	sbci	r31, 0xFE	; 254
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
    1900:	84 e8       	ldi	r24, 0x84	; 132
    1902:	93 e0       	ldi	r25, 0x03	; 3
    1904:	32 96       	adiw	r30, 0x02	; 2
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
    190a:	84 ef       	ldi	r24, 0xF4	; 244
    190c:	91 e0       	ldi	r25, 0x01	; 1
    190e:	32 96       	adiw	r30, 0x02	; 2
    1910:	91 83       	std	Z+1, r25	; 0x01
    1912:	80 83       	st	Z, r24
    1914:	80 e0       	ldi	r24, 0x00	; 0
    1916:	9a e0       	ldi	r25, 0x0A	; 10
    1918:	33 96       	adiw	r30, 0x03	; 3
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	70 96       	adiw	r30, 0x10	; 16
    1922:	80 83       	st	Z, r24
    1924:	41 e0       	ldi	r20, 0x01	; 1
    1926:	60 e8       	ldi	r22, 0x80	; 128
    1928:	c8 01       	movw	r24, r16
    192a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    192e:	e8 2e       	mov	r14, r24
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	6f ef       	ldi	r22, 0xFF	; 255
    1934:	c8 01       	movw	r24, r16
    1936:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    193a:	8e 29       	or	r24, r14
    193c:	f8 2a       	or	r15, r24
    193e:	40 e0       	ldi	r20, 0x00	; 0
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	c8 01       	movw	r24, r16
    1944:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1948:	f8 2a       	or	r15, r24
    194a:	ae 01       	movw	r20, r28
    194c:	45 5c       	subi	r20, 0xC5	; 197
    194e:	5f 4f       	sbci	r21, 0xFF	; 255
    1950:	61 e9       	ldi	r22, 0x91	; 145
    1952:	c8 01       	movw	r24, r16
    1954:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    1958:	f8 2a       	or	r15, r24
    195a:	8b ad       	ldd	r24, Y+59	; 0x3b
    195c:	f8 01       	movw	r30, r16
    195e:	e9 5d       	subi	r30, 0xD9	; 217
    1960:	fe 4f       	sbci	r31, 0xFE	; 254
    1962:	80 83       	st	Z, r24
    1964:	41 e0       	ldi	r20, 0x01	; 1
    1966:	60 e0       	ldi	r22, 0x00	; 0
    1968:	c8 01       	movw	r24, r16
    196a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    196e:	f8 2a       	or	r15, r24
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	6f ef       	ldi	r22, 0xFF	; 255
    1974:	c8 01       	movw	r24, r16
    1976:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    197a:	f8 2a       	or	r15, r24
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	60 e8       	ldi	r22, 0x80	; 128
    1980:	c8 01       	movw	r24, r16
    1982:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1986:	8f 29       	or	r24, r15
    1988:	09 f4       	brne	.+2      	; 0x198c <VL53L0X_DataInit+0x152>
    198a:	69 c0       	rjmp	.+210    	; 0x1a5e <VL53L0X_DataInit+0x224>
    198c:	14 c0       	rjmp	.+40     	; 0x19b6 <VL53L0X_DataInit+0x17c>
    198e:	81 11       	cpse	r24, r1
    1990:	12 c0       	rjmp	.+36     	; 0x19b6 <VL53L0X_DataInit+0x17c>
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	b7 01       	movw	r22, r14
    1996:	c8 01       	movw	r24, r16
    1998:	35 dd       	rcall	.-1430   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
    199a:	ff ef       	ldi	r31, 0xFF	; 255
    199c:	ef 1a       	sub	r14, r31
    199e:	ff 0a       	sbc	r15, r31
    19a0:	96 e0       	ldi	r25, 0x06	; 6
    19a2:	e9 16       	cp	r14, r25
    19a4:	f1 04       	cpc	r15, r1
    19a6:	99 f7       	brne	.-26     	; 0x198e <VL53L0X_DataInit+0x154>
    19a8:	81 11       	cpse	r24, r1
    19aa:	1a c0       	rjmp	.+52     	; 0x19e0 <VL53L0X_DataInit+0x1a6>
    19ac:	40 e0       	ldi	r20, 0x00	; 0
    19ae:	62 e0       	ldi	r22, 0x02	; 2
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	c8 01       	movw	r24, r16
    19b4:	27 dd       	rcall	.-1458   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
    19b6:	81 11       	cpse	r24, r1
    19b8:	1d c0       	rjmp	.+58     	; 0x19f4 <VL53L0X_DataInit+0x1ba>
    19ba:	40 e0       	ldi	r20, 0x00	; 0
    19bc:	63 e0       	ldi	r22, 0x03	; 3
    19be:	70 e0       	ldi	r23, 0x00	; 0
    19c0:	c8 01       	movw	r24, r16
    19c2:	20 dd       	rcall	.-1472   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
    19c4:	81 11       	cpse	r24, r1
    19c6:	20 c0       	rjmp	.+64     	; 0x1a08 <VL53L0X_DataInit+0x1ce>
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	64 e0       	ldi	r22, 0x04	; 4
    19cc:	70 e0       	ldi	r23, 0x00	; 0
    19ce:	c8 01       	movw	r24, r16
    19d0:	19 dd       	rcall	.-1486   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
    19d2:	81 11       	cpse	r24, r1
    19d4:	23 c0       	rjmp	.+70     	; 0x1a1c <VL53L0X_DataInit+0x1e2>
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	65 e0       	ldi	r22, 0x05	; 5
    19da:	70 e0       	ldi	r23, 0x00	; 0
    19dc:	c8 01       	movw	r24, r16
    19de:	12 dd       	rcall	.-1500   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
    19e0:	81 11       	cpse	r24, r1
    19e2:	25 c0       	rjmp	.+74     	; 0x1a2e <VL53L0X_DataInit+0x1f4>
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	42 e1       	ldi	r20, 0x12	; 18
    19ea:	50 e0       	ldi	r21, 0x00	; 0
    19ec:	60 e0       	ldi	r22, 0x00	; 0
    19ee:	70 e0       	ldi	r23, 0x00	; 0
    19f0:	c8 01       	movw	r24, r16
    19f2:	95 dd       	rcall	.-1238   	; 0x151e <VL53L0X_SetLimitCheckValue>
    19f4:	81 11       	cpse	r24, r1
    19f6:	2c c0       	rjmp	.+88     	; 0x1a50 <VL53L0X_DataInit+0x216>
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e4       	ldi	r19, 0x40	; 64
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	61 e0       	ldi	r22, 0x01	; 1
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	c8 01       	movw	r24, r16
    1a06:	8b dd       	rcall	.-1258   	; 0x151e <VL53L0X_SetLimitCheckValue>
    1a08:	81 11       	cpse	r24, r1
    1a0a:	32 c0       	rjmp	.+100    	; 0x1a70 <VL53L0X_DataInit+0x236>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	30 e0       	ldi	r19, 0x00	; 0
    1a10:	43 e2       	ldi	r20, 0x23	; 35
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	62 e0       	ldi	r22, 0x02	; 2
    1a16:	70 e0       	ldi	r23, 0x00	; 0
    1a18:	c8 01       	movw	r24, r16
    1a1a:	81 dd       	rcall	.-1278   	; 0x151e <VL53L0X_SetLimitCheckValue>
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	28 c0       	rjmp	.+80     	; 0x1a70 <VL53L0X_DataInit+0x236>
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	a9 01       	movw	r20, r18
    1a26:	63 e0       	ldi	r22, 0x03	; 3
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	c8 01       	movw	r24, r16
    1a2c:	78 dd       	rcall	.-1296   	; 0x151e <VL53L0X_SetLimitCheckValue>
    1a2e:	81 11       	cpse	r24, r1
    1a30:	1f c0       	rjmp	.+62     	; 0x1a70 <VL53L0X_DataInit+0x236>
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	f8 01       	movw	r30, r16
    1a36:	e3 5e       	subi	r30, 0xE3	; 227
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	80 83       	st	Z, r24
    1a3c:	4f ef       	ldi	r20, 0xFF	; 255
    1a3e:	61 e0       	ldi	r22, 0x01	; 1
    1a40:	c8 01       	movw	r24, r16
    1a42:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1a46:	91 e0       	ldi	r25, 0x01	; 1
    1a48:	f8 01       	movw	r30, r16
    1a4a:	e1 5e       	subi	r30, 0xE1	; 225
    1a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a4e:	90 83       	st	Z, r25
    1a50:	81 11       	cpse	r24, r1
    1a52:	0e c0       	rjmp	.+28     	; 0x1a70 <VL53L0X_DataInit+0x236>
    1a54:	f8 01       	movw	r30, r16
    1a56:	ec 5f       	subi	r30, 0xFC	; 252
    1a58:	fe 4f       	sbci	r31, 0xFE	; 254
    1a5a:	10 82       	st	Z, r1
    1a5c:	09 c0       	rjmp	.+18     	; 0x1a70 <VL53L0X_DataInit+0x236>
    1a5e:	41 e0       	ldi	r20, 0x01	; 1
    1a60:	60 e0       	ldi	r22, 0x00	; 0
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	c8 01       	movw	r24, r16
    1a66:	ce dc       	rcall	.-1636   	; 0x1404 <VL53L0X_SetLimitCheckEnable>
    1a68:	ee 24       	eor	r14, r14
    1a6a:	e3 94       	inc	r14
    1a6c:	f1 2c       	mov	r15, r1
    1a6e:	8f cf       	rjmp	.-226    	; 0x198e <VL53L0X_DataInit+0x154>
    1a70:	ec 96       	adiw	r28, 0x3c	; 60
    1a72:	0f b6       	in	r0, 0x3f	; 63
    1a74:	f8 94       	cli
    1a76:	de bf       	out	0x3e, r29	; 62
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	cd bf       	out	0x3d, r28	; 61
    1a7c:	df 91       	pop	r29
    1a7e:	cf 91       	pop	r28
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	08 95       	ret

00001a8a <VL53L0X_PerformRefCalibration>:
    1a8a:	21 e0       	ldi	r18, 0x01	; 1
    1a8c:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <VL53L0X_perform_ref_calibration>
    1a90:	08 95       	ret

00001a92 <VL53L0X_GetRangingMeasurementData>:
    1a92:	2f 92       	push	r2
    1a94:	3f 92       	push	r3
    1a96:	4f 92       	push	r4
    1a98:	5f 92       	push	r5
    1a9a:	6f 92       	push	r6
    1a9c:	7f 92       	push	r7
    1a9e:	8f 92       	push	r8
    1aa0:	9f 92       	push	r9
    1aa2:	af 92       	push	r10
    1aa4:	bf 92       	push	r11
    1aa6:	cf 92       	push	r12
    1aa8:	df 92       	push	r13
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	cf 93       	push	r28
    1ab4:	df 93       	push	r29
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	a6 97       	sbiw	r28, 0x26	; 38
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	4c 01       	movw	r8, r24
    1ac8:	5b 01       	movw	r10, r22
    1aca:	0c e0       	ldi	r16, 0x0C	; 12
    1acc:	10 e0       	ldi	r17, 0x00	; 0
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	ae 01       	movw	r20, r28
    1ad4:	4e 5f       	subi	r20, 0xFE	; 254
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad8:	64 e1       	ldi	r22, 0x14	; 20
    1ada:	0e 94 bb 2b 	call	0x5776	; 0x5776 <VL53L0X_ReadMulti>
    1ade:	81 11       	cpse	r24, r1
    1ae0:	fb c0       	rjmp	.+502    	; 0x1cd8 <VL53L0X_GetRangingMeasurementData+0x246>
    1ae2:	d5 01       	movw	r26, r10
    1ae4:	56 96       	adiw	r26, 0x16	; 22
    1ae6:	1c 92       	st	X, r1
    1ae8:	56 97       	sbiw	r26, 0x16	; 22
    1aea:	f5 01       	movw	r30, r10
    1aec:	10 82       	st	Z, r1
    1aee:	11 82       	std	Z+1, r1	; 0x01
    1af0:	12 82       	std	Z+2, r1	; 0x02
    1af2:	13 82       	std	Z+3, r1	; 0x03
    1af4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	32 2f       	mov	r19, r18
    1afa:	22 27       	eor	r18, r18
    1afc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afe:	28 0f       	add	r18, r24
    1b00:	31 1d       	adc	r19, r1
    1b02:	14 96       	adiw	r26, 0x04	; 4
    1b04:	1d 92       	st	X+, r1
    1b06:	1d 92       	st	X+, r1
    1b08:	1d 92       	st	X+, r1
    1b0a:	1c 92       	st	X, r1
    1b0c:	17 97       	sbiw	r26, 0x07	; 7
    1b0e:	49 84       	ldd	r4, Y+9	; 0x09
    1b10:	51 2c       	mov	r5, r1
    1b12:	54 2c       	mov	r5, r4
    1b14:	44 24       	eor	r4, r4
    1b16:	55 0c       	add	r5, r5
    1b18:	61 2c       	mov	r6, r1
    1b1a:	71 2c       	mov	r7, r1
    1b1c:	44 86       	std	Z+12, r4	; 0x0c
    1b1e:	55 86       	std	Z+13, r5	; 0x0d
    1b20:	66 86       	std	Z+14, r6	; 0x0e
    1b22:	77 86       	std	Z+15, r7	; 0x0f
    1b24:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	98 2f       	mov	r25, r24
    1b2a:	88 27       	eor	r24, r24
    1b2c:	99 0f       	add	r25, r25
    1b2e:	a0 e0       	ldi	r26, 0x00	; 0
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	80 8b       	std	Z+16, r24	; 0x10
    1b34:	91 8b       	std	Z+17, r25	; 0x11
    1b36:	a2 8b       	std	Z+18, r26	; 0x12
    1b38:	b3 8b       	std	Z+19, r27	; 0x13
    1b3a:	0c 81       	ldd	r16, Y+4	; 0x04
    1b3c:	10 e0       	ldi	r17, 0x00	; 0
    1b3e:	10 2f       	mov	r17, r16
    1b40:	00 27       	eor	r16, r16
    1b42:	8d 81       	ldd	r24, Y+5	; 0x05
    1b44:	08 0f       	add	r16, r24
    1b46:	11 1d       	adc	r17, r1
    1b48:	15 8b       	std	Z+21, r17	; 0x15
    1b4a:	04 8b       	std	Z+20, r16	; 0x14
    1b4c:	3a 80       	ldd	r3, Y+2	; 0x02
    1b4e:	f4 01       	movw	r30, r8
    1b50:	e7 5c       	subi	r30, 0xC7	; 199
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	40 81       	ld	r20, Z
    1b56:	51 81       	ldd	r21, Z+1	; 0x01
    1b58:	7b 97       	sbiw	r30, 0x1b	; 27
    1b5a:	20 80       	ld	r2, Z
    1b5c:	48 3e       	cpi	r20, 0xE8	; 232
    1b5e:	f3 e0       	ldi	r31, 0x03	; 3
    1b60:	5f 07       	cpc	r21, r31
    1b62:	09 f4       	brne	.+2      	; 0x1b66 <VL53L0X_GetRangingMeasurementData+0xd4>
    1b64:	46 c0       	rjmp	.+140    	; 0x1bf2 <VL53L0X_GetRangingMeasurementData+0x160>
    1b66:	24 9f       	mul	r18, r20
    1b68:	c0 01       	movw	r24, r0
    1b6a:	25 9f       	mul	r18, r21
    1b6c:	90 0d       	add	r25, r0
    1b6e:	34 9f       	mul	r19, r20
    1b70:	90 0d       	add	r25, r0
    1b72:	11 24       	eor	r1, r1
    1b74:	9c 01       	movw	r18, r24
    1b76:	2c 50       	subi	r18, 0x0C	; 12
    1b78:	3e 4f       	sbci	r19, 0xFE	; 254
    1b7a:	36 95       	lsr	r19
    1b7c:	27 95       	ror	r18
    1b7e:	36 95       	lsr	r19
    1b80:	27 95       	ror	r18
    1b82:	36 95       	lsr	r19
    1b84:	27 95       	ror	r18
    1b86:	a5 ec       	ldi	r26, 0xC5	; 197
    1b88:	b0 e2       	ldi	r27, 0x20	; 32
    1b8a:	0e 94 98 2c 	call	0x5930	; 0x5930 <__umulhisi3>
    1b8e:	9c 01       	movw	r18, r24
    1b90:	32 95       	swap	r19
    1b92:	22 95       	swap	r18
    1b94:	2f 70       	andi	r18, 0x0F	; 15
    1b96:	23 27       	eor	r18, r19
    1b98:	3f 70       	andi	r19, 0x0F	; 15
    1b9a:	23 27       	eor	r18, r19
    1b9c:	d4 01       	movw	r26, r8
    1b9e:	5d 96       	adiw	r26, 0x1d	; 29
    1ba0:	4d 91       	ld	r20, X+
    1ba2:	5d 91       	ld	r21, X+
    1ba4:	6d 91       	ld	r22, X+
    1ba6:	7c 91       	ld	r23, X
    1ba8:	90 97       	sbiw	r26, 0x20	; 32
    1baa:	5a 96       	adiw	r26, 0x1a	; 26
    1bac:	8c 91       	ld	r24, X
    1bae:	88 23       	and	r24, r24
    1bb0:	01 f1       	breq	.+64     	; 0x1bf2 <VL53L0X_GetRangingMeasurementData+0x160>
    1bb2:	04 9f       	mul	r16, r20
    1bb4:	60 01       	movw	r12, r0
    1bb6:	05 9f       	mul	r16, r21
    1bb8:	d0 0c       	add	r13, r0
    1bba:	14 9f       	mul	r17, r20
    1bbc:	d0 0c       	add	r13, r0
    1bbe:	11 24       	eor	r1, r1
    1bc0:	cd 2c       	mov	r12, r13
    1bc2:	dd 24       	eor	r13, r13
    1bc4:	e1 2c       	mov	r14, r1
    1bc6:	f1 2c       	mov	r15, r1
    1bc8:	4c 14       	cp	r4, r12
    1bca:	5d 04       	cpc	r5, r13
    1bcc:	6e 04       	cpc	r6, r14
    1bce:	7f 04       	cpc	r7, r15
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <VL53L0X_GetRangingMeasurementData+0x14a>
    1bd2:	21 10       	cpse	r2, r1
    1bd4:	11 c0       	rjmp	.+34     	; 0x1bf8 <VL53L0X_GetRangingMeasurementData+0x166>
    1bd6:	20 ee       	ldi	r18, 0xE0	; 224
    1bd8:	3a e8       	ldi	r19, 0x8A	; 138
    1bda:	1e c0       	rjmp	.+60     	; 0x1c18 <VL53L0X_GetRangingMeasurementData+0x186>
    1bdc:	d9 01       	movw	r26, r18
    1bde:	a3 01       	movw	r20, r6
    1be0:	92 01       	movw	r18, r4
    1be2:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    1be6:	2c 19       	sub	r18, r12
    1be8:	3d 09       	sbc	r19, r13
    1bea:	4e 09       	sbc	r20, r14
    1bec:	5f 09       	sbc	r21, r15
    1bee:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    1bf2:	22 20       	and	r2, r2
    1bf4:	89 f0       	breq	.+34     	; 0x1c18 <VL53L0X_GetRangingMeasurementData+0x186>
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <VL53L0X_GetRangingMeasurementData+0x16a>
    1bf8:	28 eb       	ldi	r18, 0xB8	; 184
    1bfa:	32 e2       	ldi	r19, 0x22	; 34
    1bfc:	c9 01       	movw	r24, r18
    1bfe:	96 95       	lsr	r25
    1c00:	87 95       	ror	r24
    1c02:	96 95       	lsr	r25
    1c04:	87 95       	ror	r24
    1c06:	f5 01       	movw	r30, r10
    1c08:	91 87       	std	Z+9, r25	; 0x09
    1c0a:	80 87       	std	Z+8, r24	; 0x08
    1c0c:	22 95       	swap	r18
    1c0e:	22 0f       	add	r18, r18
    1c10:	22 0f       	add	r18, r18
    1c12:	20 7c       	andi	r18, 0xC0	; 192
    1c14:	27 8b       	std	Z+23, r18	; 0x17
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <VL53L0X_GetRangingMeasurementData+0x194>
    1c18:	d5 01       	movw	r26, r10
    1c1a:	19 96       	adiw	r26, 0x09	; 9
    1c1c:	3c 93       	st	X, r19
    1c1e:	2e 93       	st	-X, r18
    1c20:	18 97       	sbiw	r26, 0x08	; 8
    1c22:	57 96       	adiw	r26, 0x17	; 23
    1c24:	1c 92       	st	X, r1
    1c26:	fe 01       	movw	r30, r28
    1c28:	31 96       	adiw	r30, 0x01	; 1
    1c2a:	6f 01       	movw	r12, r30
    1c2c:	75 01       	movw	r14, r10
    1c2e:	a3 01       	movw	r20, r6
    1c30:	92 01       	movw	r18, r4
    1c32:	63 2d       	mov	r22, r3
    1c34:	c4 01       	movw	r24, r8
    1c36:	0e 94 34 28 	call	0x5068	; 0x5068 <VL53L0X_get_pal_range_status>
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	4d c0       	rjmp	.+154    	; 0x1cd8 <VL53L0X_GetRangingMeasurementData+0x246>
    1c3e:	99 81       	ldd	r25, Y+1	; 0x01
    1c40:	d5 01       	movw	r26, r10
    1c42:	58 96       	adiw	r26, 0x18	; 24
    1c44:	9c 93       	st	X, r25
    1c46:	ba e4       	ldi	r27, 0x4A	; 74
    1c48:	8b 0e       	add	r8, r27
    1c4a:	91 1c       	adc	r9, r1
    1c4c:	29 e1       	ldi	r18, 0x19	; 25
    1c4e:	f4 01       	movw	r30, r8
    1c50:	de 01       	movw	r26, r28
    1c52:	1e 96       	adiw	r26, 0x0e	; 14
    1c54:	01 90       	ld	r0, Z+
    1c56:	0d 92       	st	X+, r0
    1c58:	2a 95       	dec	r18
    1c5a:	e1 f7       	brne	.-8      	; 0x1c54 <VL53L0X_GetRangingMeasurementData+0x1c2>
    1c5c:	d5 01       	movw	r26, r10
    1c5e:	18 96       	adiw	r26, 0x08	; 8
    1c60:	ed 91       	ld	r30, X+
    1c62:	fc 91       	ld	r31, X
    1c64:	19 97       	sbiw	r26, 0x09	; 9
    1c66:	57 96       	adiw	r26, 0x17	; 23
    1c68:	3c 90       	ld	r3, X
    1c6a:	57 97       	sbiw	r26, 0x17	; 23
    1c6c:	1a 96       	adiw	r26, 0x0a	; 10
    1c6e:	6d 91       	ld	r22, X+
    1c70:	7c 91       	ld	r23, X
    1c72:	1b 97       	sbiw	r26, 0x0b	; 11
    1c74:	1c 96       	adiw	r26, 0x0c	; 12
    1c76:	4d 90       	ld	r4, X+
    1c78:	5d 90       	ld	r5, X+
    1c7a:	6d 90       	ld	r6, X+
    1c7c:	7c 90       	ld	r7, X
    1c7e:	1f 97       	sbiw	r26, 0x0f	; 15
    1c80:	50 96       	adiw	r26, 0x10	; 16
    1c82:	cd 90       	ld	r12, X+
    1c84:	dd 90       	ld	r13, X+
    1c86:	ed 90       	ld	r14, X+
    1c88:	fc 90       	ld	r15, X
    1c8a:	53 97       	sbiw	r26, 0x13	; 19
    1c8c:	54 96       	adiw	r26, 0x14	; 20
    1c8e:	4d 91       	ld	r20, X+
    1c90:	5c 91       	ld	r21, X
    1c92:	55 97       	sbiw	r26, 0x15	; 21
    1c94:	14 96       	adiw	r26, 0x04	; 4
    1c96:	0d 91       	ld	r16, X+
    1c98:	1d 91       	ld	r17, X+
    1c9a:	2d 91       	ld	r18, X+
    1c9c:	3c 91       	ld	r19, X
    1c9e:	17 97       	sbiw	r26, 0x07	; 7
    1ca0:	0a 8b       	std	Y+18, r16	; 0x12
    1ca2:	1b 8b       	std	Y+19, r17	; 0x13
    1ca4:	2c 8b       	std	Y+20, r18	; 0x14
    1ca6:	3d 8b       	std	Y+21, r19	; 0x15
    1ca8:	ff 8b       	std	Y+23, r31	; 0x17
    1caa:	ee 8b       	std	Y+22, r30	; 0x16
    1cac:	79 8f       	std	Y+25, r23	; 0x19
    1cae:	68 8f       	std	Y+24, r22	; 0x18
    1cb0:	4a 8e       	std	Y+26, r4	; 0x1a
    1cb2:	5b 8e       	std	Y+27, r5	; 0x1b
    1cb4:	6c 8e       	std	Y+28, r6	; 0x1c
    1cb6:	7d 8e       	std	Y+29, r7	; 0x1d
    1cb8:	ce 8e       	std	Y+30, r12	; 0x1e
    1cba:	df 8e       	std	Y+31, r13	; 0x1f
    1cbc:	e8 a2       	std	Y+32, r14	; 0x20
    1cbe:	f9 a2       	std	Y+33, r15	; 0x21
    1cc0:	5b a3       	std	Y+35, r21	; 0x23
    1cc2:	4a a3       	std	Y+34, r20	; 0x22
    1cc4:	3d a2       	std	Y+37, r3	; 0x25
    1cc6:	9e a3       	std	Y+38, r25	; 0x26
    1cc8:	99 e1       	ldi	r25, 0x19	; 25
    1cca:	fe 01       	movw	r30, r28
    1ccc:	3e 96       	adiw	r30, 0x0e	; 14
    1cce:	d4 01       	movw	r26, r8
    1cd0:	01 90       	ld	r0, Z+
    1cd2:	0d 92       	st	X+, r0
    1cd4:	9a 95       	dec	r25
    1cd6:	e1 f7       	brne	.-8      	; 0x1cd0 <VL53L0X_GetRangingMeasurementData+0x23e>
    1cd8:	a6 96       	adiw	r28, 0x26	; 38
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	de bf       	out	0x3e, r29	; 62
    1ce0:	0f be       	out	0x3f, r0	; 63
    1ce2:	cd bf       	out	0x3d, r28	; 61
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	1f 91       	pop	r17
    1cea:	0f 91       	pop	r16
    1cec:	ff 90       	pop	r15
    1cee:	ef 90       	pop	r14
    1cf0:	df 90       	pop	r13
    1cf2:	cf 90       	pop	r12
    1cf4:	bf 90       	pop	r11
    1cf6:	af 90       	pop	r10
    1cf8:	9f 90       	pop	r9
    1cfa:	8f 90       	pop	r8
    1cfc:	7f 90       	pop	r7
    1cfe:	6f 90       	pop	r6
    1d00:	5f 90       	pop	r5
    1d02:	4f 90       	pop	r4
    1d04:	3f 90       	pop	r3
    1d06:	2f 90       	pop	r2
    1d08:	08 95       	ret

00001d0a <VL53L0X_GetInterruptThresholds>:
    1d0a:	cf 92       	push	r12
    1d0c:	df 92       	push	r13
    1d0e:	ef 92       	push	r14
    1d10:	ff 92       	push	r15
    1d12:	0f 93       	push	r16
    1d14:	1f 93       	push	r17
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <VL53L0X_GetInterruptThresholds+0x12>
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	8c 01       	movw	r16, r24
    1d22:	6a 01       	movw	r12, r20
    1d24:	79 01       	movw	r14, r18
    1d26:	ae 01       	movw	r20, r28
    1d28:	4f 5f       	subi	r20, 0xFF	; 255
    1d2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1d2c:	6e e0       	ldi	r22, 0x0E	; 14
    1d2e:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    1d32:	49 81       	ldd	r20, Y+1	; 0x01
    1d34:	5a 81       	ldd	r21, Y+2	; 0x02
    1d36:	5f 70       	andi	r21, 0x0F	; 15
    1d38:	60 e0       	ldi	r22, 0x00	; 0
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	03 2e       	mov	r0, r19
    1d3e:	31 e1       	ldi	r19, 0x11	; 17
    1d40:	44 0f       	add	r20, r20
    1d42:	55 1f       	adc	r21, r21
    1d44:	66 1f       	adc	r22, r22
    1d46:	77 1f       	adc	r23, r23
    1d48:	3a 95       	dec	r19
    1d4a:	d1 f7       	brne	.-12     	; 0x1d40 <VL53L0X_GetInterruptThresholds+0x36>
    1d4c:	30 2d       	mov	r19, r0
    1d4e:	f6 01       	movw	r30, r12
    1d50:	40 83       	st	Z, r20
    1d52:	51 83       	std	Z+1, r21	; 0x01
    1d54:	62 83       	std	Z+2, r22	; 0x02
    1d56:	73 83       	std	Z+3, r23	; 0x03
    1d58:	81 11       	cpse	r24, r1
    1d5a:	1a c0       	rjmp	.+52     	; 0x1d90 <VL53L0X_GetInterruptThresholds+0x86>
    1d5c:	ae 01       	movw	r20, r28
    1d5e:	4f 5f       	subi	r20, 0xFF	; 255
    1d60:	5f 4f       	sbci	r21, 0xFF	; 255
    1d62:	6c e0       	ldi	r22, 0x0C	; 12
    1d64:	c8 01       	movw	r24, r16
    1d66:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    1d6a:	49 81       	ldd	r20, Y+1	; 0x01
    1d6c:	5a 81       	ldd	r21, Y+2	; 0x02
    1d6e:	5f 70       	andi	r21, 0x0F	; 15
    1d70:	60 e0       	ldi	r22, 0x00	; 0
    1d72:	70 e0       	ldi	r23, 0x00	; 0
    1d74:	03 2e       	mov	r0, r19
    1d76:	31 e1       	ldi	r19, 0x11	; 17
    1d78:	44 0f       	add	r20, r20
    1d7a:	55 1f       	adc	r21, r21
    1d7c:	66 1f       	adc	r22, r22
    1d7e:	77 1f       	adc	r23, r23
    1d80:	3a 95       	dec	r19
    1d82:	d1 f7       	brne	.-12     	; 0x1d78 <VL53L0X_GetInterruptThresholds+0x6e>
    1d84:	30 2d       	mov	r19, r0
    1d86:	f7 01       	movw	r30, r14
    1d88:	40 83       	st	Z, r20
    1d8a:	51 83       	std	Z+1, r21	; 0x01
    1d8c:	62 83       	std	Z+2, r22	; 0x02
    1d8e:	73 83       	std	Z+3, r23	; 0x03
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	ff 90       	pop	r15
    1d9e:	ef 90       	pop	r14
    1da0:	df 90       	pop	r13
    1da2:	cf 90       	pop	r12
    1da4:	08 95       	ret

00001da6 <VL53L0X_CheckAndLoadInterruptSettings>:
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	28 97       	sbiw	r28, 0x08	; 8
    1db6:	0f b6       	in	r0, 0x3f	; 63
    1db8:	f8 94       	cli
    1dba:	de bf       	out	0x3e, r29	; 62
    1dbc:	0f be       	out	0x3f, r0	; 63
    1dbe:	cd bf       	out	0x3d, r28	; 61
    1dc0:	9c 01       	movw	r18, r24
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	e2 53       	subi	r30, 0x32	; 50
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	90 81       	ld	r25, Z
    1dca:	91 50       	subi	r25, 0x01	; 1
    1dcc:	93 30       	cpi	r25, 0x03	; 3
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
    1dd0:	40 c0       	rjmp	.+128    	; 0x1e52 <VL53L0X_CheckAndLoadInterruptSettings+0xac>
    1dd2:	16 2f       	mov	r17, r22
    1dd4:	79 01       	movw	r14, r18
    1dd6:	9e 01       	movw	r18, r28
    1dd8:	2b 5f       	subi	r18, 0xFB	; 251
    1dda:	3f 4f       	sbci	r19, 0xFF	; 255
    1ddc:	ae 01       	movw	r20, r28
    1dde:	4f 5f       	subi	r20, 0xFF	; 255
    1de0:	5f 4f       	sbci	r21, 0xFF	; 255
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	c7 01       	movw	r24, r14
    1de6:	91 df       	rcall	.-222    	; 0x1d0a <VL53L0X_GetInterruptThresholds>
    1de8:	49 81       	ldd	r20, Y+1	; 0x01
    1dea:	5a 81       	ldd	r21, Y+2	; 0x02
    1dec:	6b 81       	ldd	r22, Y+3	; 0x03
    1dee:	7c 81       	ldd	r23, Y+4	; 0x04
    1df0:	41 30       	cpi	r20, 0x01	; 1
    1df2:	51 05       	cpc	r21, r1
    1df4:	6f 4f       	sbci	r22, 0xFF	; 255
    1df6:	71 05       	cpc	r23, r1
    1df8:	48 f4       	brcc	.+18     	; 0x1e0c <VL53L0X_CheckAndLoadInterruptSettings+0x66>
    1dfa:	4d 81       	ldd	r20, Y+5	; 0x05
    1dfc:	5e 81       	ldd	r21, Y+6	; 0x06
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	41 30       	cpi	r20, 0x01	; 1
    1e04:	51 05       	cpc	r21, r1
    1e06:	6f 4f       	sbci	r22, 0xFF	; 255
    1e08:	71 05       	cpc	r23, r1
    1e0a:	20 f1       	brcs	.+72     	; 0x1e54 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1e0c:	81 11       	cpse	r24, r1
    1e0e:	22 c0       	rjmp	.+68     	; 0x1e54 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1e10:	11 23       	and	r17, r17
    1e12:	31 f0       	breq	.+12     	; 0x1e20 <VL53L0X_CheckAndLoadInterruptSettings+0x7a>
    1e14:	62 e0       	ldi	r22, 0x02	; 2
    1e16:	71 e0       	ldi	r23, 0x01	; 1
    1e18:	c7 01       	movw	r24, r14
    1e1a:	0e 94 37 22 	call	0x446e	; 0x446e <VL53L0X_load_tuning_settings>
    1e1e:	1a c0       	rjmp	.+52     	; 0x1e54 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1e20:	44 e0       	ldi	r20, 0x04	; 4
    1e22:	6f ef       	ldi	r22, 0xFF	; 255
    1e24:	c7 01       	movw	r24, r14
    1e26:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1e2a:	18 2f       	mov	r17, r24
    1e2c:	40 e0       	ldi	r20, 0x00	; 0
    1e2e:	60 e7       	ldi	r22, 0x70	; 112
    1e30:	c7 01       	movw	r24, r14
    1e32:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1e36:	18 2b       	or	r17, r24
    1e38:	40 e0       	ldi	r20, 0x00	; 0
    1e3a:	6f ef       	ldi	r22, 0xFF	; 255
    1e3c:	c7 01       	movw	r24, r14
    1e3e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1e42:	18 2b       	or	r17, r24
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	60 e8       	ldi	r22, 0x80	; 128
    1e48:	c7 01       	movw	r24, r14
    1e4a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1e4e:	81 2b       	or	r24, r17
    1e50:	01 c0       	rjmp	.+2      	; 0x1e54 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	28 96       	adiw	r28, 0x08	; 8
    1e56:	0f b6       	in	r0, 0x3f	; 63
    1e58:	f8 94       	cli
    1e5a:	de bf       	out	0x3e, r29	; 62
    1e5c:	0f be       	out	0x3f, r0	; 63
    1e5e:	cd bf       	out	0x3d, r28	; 61
    1e60:	df 91       	pop	r29
    1e62:	cf 91       	pop	r28
    1e64:	1f 91       	pop	r17
    1e66:	ff 90       	pop	r15
    1e68:	ef 90       	pop	r14
    1e6a:	08 95       	ret

00001e6c <VL53L0X_StartMeasurement>:
    1e6c:	cf 92       	push	r12
    1e6e:	df 92       	push	r13
    1e70:	ef 92       	push	r14
    1e72:	ff 92       	push	r15
    1e74:	0f 93       	push	r16
    1e76:	1f 93       	push	r17
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	1f 92       	push	r1
    1e7e:	cd b7       	in	r28, 0x3d	; 61
    1e80:	de b7       	in	r29, 0x3e	; 62
    1e82:	8c 01       	movw	r16, r24
    1e84:	fc 01       	movw	r30, r24
    1e86:	f0 88       	ldd	r15, Z+16	; 0x10
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	60 e8       	ldi	r22, 0x80	; 128
    1e8c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	6f ef       	ldi	r22, 0xFF	; 255
    1e94:	c8 01       	movw	r24, r16
    1e96:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1e9a:	40 e0       	ldi	r20, 0x00	; 0
    1e9c:	60 e0       	ldi	r22, 0x00	; 0
    1e9e:	c8 01       	movw	r24, r16
    1ea0:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	e9 5d       	subi	r30, 0xD9	; 217
    1ea8:	fe 4f       	sbci	r31, 0xFE	; 254
    1eaa:	40 81       	ld	r20, Z
    1eac:	61 e9       	ldi	r22, 0x91	; 145
    1eae:	c8 01       	movw	r24, r16
    1eb0:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1eb4:	41 e0       	ldi	r20, 0x01	; 1
    1eb6:	60 e0       	ldi	r22, 0x00	; 0
    1eb8:	c8 01       	movw	r24, r16
    1eba:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	6f ef       	ldi	r22, 0xFF	; 255
    1ec2:	c8 01       	movw	r24, r16
    1ec4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	60 e8       	ldi	r22, 0x80	; 128
    1ecc:	c8 01       	movw	r24, r16
    1ece:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1ed2:	f1 e0       	ldi	r31, 0x01	; 1
    1ed4:	ff 16       	cp	r15, r31
    1ed6:	d9 f1       	breq	.+118    	; 0x1f4e <VL53L0X_StartMeasurement+0xe2>
    1ed8:	ff 16       	cp	r15, r31
    1eda:	28 f0       	brcs	.+10     	; 0x1ee6 <VL53L0X_StartMeasurement+0x7a>
    1edc:	93 e0       	ldi	r25, 0x03	; 3
    1ede:	f9 16       	cp	r15, r25
    1ee0:	09 f4       	brne	.+2      	; 0x1ee4 <VL53L0X_StartMeasurement+0x78>
    1ee2:	47 c0       	rjmp	.+142    	; 0x1f72 <VL53L0X_StartMeasurement+0x106>
    1ee4:	58 c0       	rjmp	.+176    	; 0x1f96 <VL53L0X_StartMeasurement+0x12a>
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	60 e0       	ldi	r22, 0x00	; 0
    1eea:	c8 01       	movw	r24, r16
    1eec:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1ef0:	91 e0       	ldi	r25, 0x01	; 1
    1ef2:	99 83       	std	Y+1, r25	; 0x01
    1ef4:	88 23       	and	r24, r24
    1ef6:	71 f0       	breq	.+28     	; 0x1f14 <VL53L0X_StartMeasurement+0xa8>
    1ef8:	4f c0       	rjmp	.+158    	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1efa:	c1 14       	cp	r12, r1
    1efc:	d1 04       	cpc	r13, r1
    1efe:	e1 04       	cpc	r14, r1
    1f00:	f1 04       	cpc	r15, r1
    1f02:	59 f0       	breq	.+22     	; 0x1f1a <VL53L0X_StartMeasurement+0xae>
    1f04:	ae 01       	movw	r20, r28
    1f06:	4f 5f       	subi	r20, 0xFF	; 255
    1f08:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0a:	60 e0       	ldi	r22, 0x00	; 0
    1f0c:	c8 01       	movw	r24, r16
    1f0e:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    1f12:	03 c0       	rjmp	.+6      	; 0x1f1a <VL53L0X_StartMeasurement+0xae>
    1f14:	c1 2c       	mov	r12, r1
    1f16:	d1 2c       	mov	r13, r1
    1f18:	76 01       	movw	r14, r12
    1f1a:	ef ef       	ldi	r30, 0xFF	; 255
    1f1c:	ce 1a       	sub	r12, r30
    1f1e:	de 0a       	sbc	r13, r30
    1f20:	ee 0a       	sbc	r14, r30
    1f22:	fe 0a       	sbc	r15, r30
    1f24:	99 81       	ldd	r25, Y+1	; 0x01
    1f26:	90 ff       	sbrs	r25, 0
    1f28:	0a c0       	rjmp	.+20     	; 0x1f3e <VL53L0X_StartMeasurement+0xd2>
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	08 c0       	rjmp	.+16     	; 0x1f3e <VL53L0X_StartMeasurement+0xd2>
    1f2e:	f8 ec       	ldi	r31, 0xC8	; 200
    1f30:	cf 16       	cp	r12, r31
    1f32:	d1 04       	cpc	r13, r1
    1f34:	e1 04       	cpc	r14, r1
    1f36:	f1 04       	cpc	r15, r1
    1f38:	01 f7       	brne	.-64     	; 0x1efa <VL53L0X_StartMeasurement+0x8e>
    1f3a:	89 ef       	ldi	r24, 0xF9	; 249
    1f3c:	2d c0       	rjmp	.+90     	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1f3e:	98 ec       	ldi	r25, 0xC8	; 200
    1f40:	c9 16       	cp	r12, r25
    1f42:	d1 04       	cpc	r13, r1
    1f44:	e1 04       	cpc	r14, r1
    1f46:	f1 04       	cpc	r15, r1
    1f48:	38 f1       	brcs	.+78     	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1f4a:	89 ef       	ldi	r24, 0xF9	; 249
    1f4c:	25 c0       	rjmp	.+74     	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1f4e:	81 11       	cpse	r24, r1
    1f50:	03 c0       	rjmp	.+6      	; 0x1f58 <VL53L0X_StartMeasurement+0xec>
    1f52:	61 e0       	ldi	r22, 0x01	; 1
    1f54:	c8 01       	movw	r24, r16
    1f56:	27 df       	rcall	.-434    	; 0x1da6 <VL53L0X_CheckAndLoadInterruptSettings>
    1f58:	42 e0       	ldi	r20, 0x02	; 2
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1f62:	81 11       	cpse	r24, r1
    1f64:	19 c0       	rjmp	.+50     	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1f66:	f8 01       	movw	r30, r16
    1f68:	e1 5e       	subi	r30, 0xE1	; 225
    1f6a:	fe 4f       	sbci	r31, 0xFE	; 254
    1f6c:	94 e0       	ldi	r25, 0x04	; 4
    1f6e:	90 83       	st	Z, r25
    1f70:	13 c0       	rjmp	.+38     	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1f72:	81 11       	cpse	r24, r1
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <VL53L0X_StartMeasurement+0x110>
    1f76:	61 e0       	ldi	r22, 0x01	; 1
    1f78:	c8 01       	movw	r24, r16
    1f7a:	15 df       	rcall	.-470    	; 0x1da6 <VL53L0X_CheckAndLoadInterruptSettings>
    1f7c:	44 e0       	ldi	r20, 0x04	; 4
    1f7e:	60 e0       	ldi	r22, 0x00	; 0
    1f80:	c8 01       	movw	r24, r16
    1f82:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    1f86:	81 11       	cpse	r24, r1
    1f88:	07 c0       	rjmp	.+14     	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1f8a:	f8 01       	movw	r30, r16
    1f8c:	e1 5e       	subi	r30, 0xE1	; 225
    1f8e:	fe 4f       	sbci	r31, 0xFE	; 254
    1f90:	94 e0       	ldi	r25, 0x04	; 4
    1f92:	90 83       	st	Z, r25
    1f94:	01 c0       	rjmp	.+2      	; 0x1f98 <VL53L0X_StartMeasurement+0x12c>
    1f96:	88 ef       	ldi	r24, 0xF8	; 248
    1f98:	0f 90       	pop	r0
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	08 95       	ret

00001fac <VL53L0X_PerformSingleMeasurement>:
    1fac:	1f 93       	push	r17
    1fae:	cf 93       	push	r28
    1fb0:	df 93       	push	r29
    1fb2:	ec 01       	movw	r28, r24
    1fb4:	18 89       	ldd	r17, Y+16	; 0x10
    1fb6:	11 11       	cpse	r17, r1
    1fb8:	04 c0       	rjmp	.+8      	; 0x1fc2 <VL53L0X_PerformSingleMeasurement+0x16>
    1fba:	58 df       	rcall	.-336    	; 0x1e6c <VL53L0X_StartMeasurement>
    1fbc:	81 11       	cpse	r24, r1
    1fbe:	12 c0       	rjmp	.+36     	; 0x1fe4 <VL53L0X_PerformSingleMeasurement+0x38>
    1fc0:	0c c0       	rjmp	.+24     	; 0x1fda <VL53L0X_PerformSingleMeasurement+0x2e>
    1fc2:	0e 94 27 19 	call	0x324e	; 0x324e <VL53L0X_measurement_poll_for_completion>
    1fc6:	81 11       	cpse	r24, r1
    1fc8:	0d c0       	rjmp	.+26     	; 0x1fe4 <VL53L0X_PerformSingleMeasurement+0x38>
    1fca:	11 11       	cpse	r17, r1
    1fcc:	0b c0       	rjmp	.+22     	; 0x1fe4 <VL53L0X_PerformSingleMeasurement+0x38>
    1fce:	c1 5e       	subi	r28, 0xE1	; 225
    1fd0:	de 4f       	sbci	r29, 0xFE	; 254
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	88 83       	st	Y, r24
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <VL53L0X_PerformSingleMeasurement+0x38>
    1fda:	ce 01       	movw	r24, r28
    1fdc:	0e 94 27 19 	call	0x324e	; 0x324e <VL53L0X_measurement_poll_for_completion>
    1fe0:	88 23       	and	r24, r24
    1fe2:	a9 f3       	breq	.-22     	; 0x1fce <VL53L0X_PerformSingleMeasurement+0x22>
    1fe4:	df 91       	pop	r29
    1fe6:	cf 91       	pop	r28
    1fe8:	1f 91       	pop	r17
    1fea:	08 95       	ret

00001fec <VL53L0X_ClearInterruptMask>:
    1fec:	ef 92       	push	r14
    1fee:	ff 92       	push	r15
    1ff0:	0f 93       	push	r16
    1ff2:	1f 93       	push	r17
    1ff4:	cf 93       	push	r28
    1ff6:	df 93       	push	r29
    1ff8:	1f 92       	push	r1
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	7c 01       	movw	r14, r24
    2000:	00 e0       	ldi	r16, 0x00	; 0
    2002:	41 e0       	ldi	r20, 0x01	; 1
    2004:	6b e0       	ldi	r22, 0x0B	; 11
    2006:	c7 01       	movw	r24, r14
    2008:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    200c:	18 2f       	mov	r17, r24
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	6b e0       	ldi	r22, 0x0B	; 11
    2012:	c7 01       	movw	r24, r14
    2014:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2018:	18 2b       	or	r17, r24
    201a:	ae 01       	movw	r20, r28
    201c:	4f 5f       	subi	r20, 0xFF	; 255
    201e:	5f 4f       	sbci	r21, 0xFF	; 255
    2020:	63 e1       	ldi	r22, 0x13	; 19
    2022:	c7 01       	movw	r24, r14
    2024:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    2028:	81 2b       	or	r24, r17
    202a:	0f 5f       	subi	r16, 0xFF	; 255
    202c:	99 81       	ldd	r25, Y+1	; 0x01
    202e:	97 70       	andi	r25, 0x07	; 7
    2030:	29 f0       	breq	.+10     	; 0x203c <VL53L0X_ClearInterruptMask+0x50>
    2032:	03 30       	cpi	r16, 0x03	; 3
    2034:	39 f0       	breq	.+14     	; 0x2044 <VL53L0X_ClearInterruptMask+0x58>
    2036:	88 23       	and	r24, r24
    2038:	21 f3       	breq	.-56     	; 0x2002 <VL53L0X_ClearInterruptMask+0x16>
    203a:	05 c0       	rjmp	.+10     	; 0x2046 <VL53L0X_ClearInterruptMask+0x5a>
    203c:	03 30       	cpi	r16, 0x03	; 3
    203e:	18 f0       	brcs	.+6      	; 0x2046 <VL53L0X_ClearInterruptMask+0x5a>
    2040:	84 ef       	ldi	r24, 0xF4	; 244
    2042:	01 c0       	rjmp	.+2      	; 0x2046 <VL53L0X_ClearInterruptMask+0x5a>
    2044:	84 ef       	ldi	r24, 0xF4	; 244
    2046:	0f 90       	pop	r0
    2048:	df 91       	pop	r29
    204a:	cf 91       	pop	r28
    204c:	1f 91       	pop	r17
    204e:	0f 91       	pop	r16
    2050:	ff 90       	pop	r15
    2052:	ef 90       	pop	r14
    2054:	08 95       	ret

00002056 <VL53L0X_PerformSingleRangingMeasurement>:
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
    205a:	cf 93       	push	r28
    205c:	df 93       	push	r29
    205e:	ec 01       	movw	r28, r24
    2060:	8b 01       	movw	r16, r22
    2062:	60 e0       	ldi	r22, 0x00	; 0
    2064:	0e 94 ee 07 	call	0xfdc	; 0xfdc <VL53L0X_SetDeviceMode>
    2068:	81 11       	cpse	r24, r1
    206a:	0e c0       	rjmp	.+28     	; 0x2088 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    206c:	ce 01       	movw	r24, r28
    206e:	9e df       	rcall	.-196    	; 0x1fac <VL53L0X_PerformSingleMeasurement>
    2070:	81 11       	cpse	r24, r1
    2072:	0a c0       	rjmp	.+20     	; 0x2088 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2074:	b8 01       	movw	r22, r16
    2076:	ce 01       	movw	r24, r28
    2078:	0c dd       	rcall	.-1512   	; 0x1a92 <VL53L0X_GetRangingMeasurementData>
    207a:	81 11       	cpse	r24, r1
    207c:	05 c0       	rjmp	.+10     	; 0x2088 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	ba 01       	movw	r22, r20
    2084:	ce 01       	movw	r24, r28
    2086:	b2 df       	rcall	.-156    	; 0x1fec <VL53L0X_ClearInterruptMask>
    2088:	df 91       	pop	r29
    208a:	cf 91       	pop	r28
    208c:	1f 91       	pop	r17
    208e:	0f 91       	pop	r16
    2090:	08 95       	ret

00002092 <VL53L0X_SetGpioConfig>:
    2092:	0f 93       	push	r16
    2094:	1f 93       	push	r17
    2096:	cf 93       	push	r28
    2098:	df 93       	push	r29
    209a:	61 11       	cpse	r22, r1
    209c:	9b c0       	rjmp	.+310    	; 0x21d4 <VL53L0X_SetGpioConfig+0x142>
    209e:	12 2f       	mov	r17, r18
    20a0:	ec 01       	movw	r28, r24
    20a2:	44 31       	cpi	r20, 0x14	; 20
    20a4:	51 f4       	brne	.+20     	; 0x20ba <VL53L0X_SetGpioConfig+0x28>
    20a6:	00 23       	and	r16, r16
    20a8:	11 f0       	breq	.+4      	; 0x20ae <VL53L0X_SetGpioConfig+0x1c>
    20aa:	41 e0       	ldi	r20, 0x01	; 1
    20ac:	01 c0       	rjmp	.+2      	; 0x20b0 <VL53L0X_SetGpioConfig+0x1e>
    20ae:	40 e1       	ldi	r20, 0x10	; 16
    20b0:	64 e8       	ldi	r22, 0x84	; 132
    20b2:	ce 01       	movw	r24, r28
    20b4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    20b8:	93 c0       	rjmp	.+294    	; 0x21e0 <VL53L0X_SetGpioConfig+0x14e>
    20ba:	45 31       	cpi	r20, 0x15	; 21
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <VL53L0X_SetGpioConfig+0x2e>
    20be:	5a c0       	rjmp	.+180    	; 0x2174 <VL53L0X_SetGpioConfig+0xe2>
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	6f ef       	ldi	r22, 0xFF	; 255
    20c4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    20c8:	18 2f       	mov	r17, r24
    20ca:	40 e0       	ldi	r20, 0x00	; 0
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	ce 01       	movw	r24, r28
    20d0:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    20d4:	18 2b       	or	r17, r24
    20d6:	40 e0       	ldi	r20, 0x00	; 0
    20d8:	6f ef       	ldi	r22, 0xFF	; 255
    20da:	ce 01       	movw	r24, r28
    20dc:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    20e0:	18 2b       	or	r17, r24
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	60 e8       	ldi	r22, 0x80	; 128
    20e6:	ce 01       	movw	r24, r28
    20e8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    20ec:	18 2b       	or	r17, r24
    20ee:	42 e0       	ldi	r20, 0x02	; 2
    20f0:	65 e8       	ldi	r22, 0x85	; 133
    20f2:	ce 01       	movw	r24, r28
    20f4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    20f8:	18 2b       	or	r17, r24
    20fa:	44 e0       	ldi	r20, 0x04	; 4
    20fc:	6f ef       	ldi	r22, 0xFF	; 255
    20fe:	ce 01       	movw	r24, r28
    2100:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2104:	18 2b       	or	r17, r24
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	6d ec       	ldi	r22, 0xCD	; 205
    210a:	ce 01       	movw	r24, r28
    210c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2110:	18 2b       	or	r17, r24
    2112:	41 e1       	ldi	r20, 0x11	; 17
    2114:	6c ec       	ldi	r22, 0xCC	; 204
    2116:	ce 01       	movw	r24, r28
    2118:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    211c:	18 2b       	or	r17, r24
    211e:	47 e0       	ldi	r20, 0x07	; 7
    2120:	6f ef       	ldi	r22, 0xFF	; 255
    2122:	ce 01       	movw	r24, r28
    2124:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2128:	18 2b       	or	r17, r24
    212a:	40 e0       	ldi	r20, 0x00	; 0
    212c:	6e eb       	ldi	r22, 0xBE	; 190
    212e:	ce 01       	movw	r24, r28
    2130:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2134:	18 2b       	or	r17, r24
    2136:	46 e0       	ldi	r20, 0x06	; 6
    2138:	6f ef       	ldi	r22, 0xFF	; 255
    213a:	ce 01       	movw	r24, r28
    213c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2140:	18 2b       	or	r17, r24
    2142:	49 e0       	ldi	r20, 0x09	; 9
    2144:	6c ec       	ldi	r22, 0xCC	; 204
    2146:	ce 01       	movw	r24, r28
    2148:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    214c:	18 2b       	or	r17, r24
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	6f ef       	ldi	r22, 0xFF	; 255
    2152:	ce 01       	movw	r24, r28
    2154:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2158:	18 2b       	or	r17, r24
    215a:	41 e0       	ldi	r20, 0x01	; 1
    215c:	6f ef       	ldi	r22, 0xFF	; 255
    215e:	ce 01       	movw	r24, r28
    2160:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2164:	18 2b       	or	r17, r24
    2166:	40 e0       	ldi	r20, 0x00	; 0
    2168:	60 e0       	ldi	r22, 0x00	; 0
    216a:	ce 01       	movw	r24, r28
    216c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2170:	81 2b       	or	r24, r17
    2172:	36 c0       	rjmp	.+108    	; 0x21e0 <VL53L0X_SetGpioConfig+0x14e>
    2174:	22 30       	cpi	r18, 0x02	; 2
    2176:	59 f0       	breq	.+22     	; 0x218e <VL53L0X_SetGpioConfig+0xfc>
    2178:	28 f4       	brcc	.+10     	; 0x2184 <VL53L0X_SetGpioConfig+0xf2>
    217a:	22 23       	and	r18, r18
    217c:	61 f0       	breq	.+24     	; 0x2196 <VL53L0X_SetGpioConfig+0x104>
    217e:	21 30       	cpi	r18, 0x01	; 1
    2180:	59 f1       	breq	.+86     	; 0x21d8 <VL53L0X_SetGpioConfig+0x146>
    2182:	0f c0       	rjmp	.+30     	; 0x21a2 <VL53L0X_SetGpioConfig+0x110>
    2184:	23 30       	cpi	r18, 0x03	; 3
    2186:	51 f1       	breq	.+84     	; 0x21dc <VL53L0X_SetGpioConfig+0x14a>
    2188:	24 30       	cpi	r18, 0x04	; 4
    218a:	19 f0       	breq	.+6      	; 0x2192 <VL53L0X_SetGpioConfig+0x100>
    218c:	0a c0       	rjmp	.+20     	; 0x21a2 <VL53L0X_SetGpioConfig+0x110>
    218e:	42 e0       	ldi	r20, 0x02	; 2
    2190:	03 c0       	rjmp	.+6      	; 0x2198 <VL53L0X_SetGpioConfig+0x106>
    2192:	44 e0       	ldi	r20, 0x04	; 4
    2194:	01 c0       	rjmp	.+2      	; 0x2198 <VL53L0X_SetGpioConfig+0x106>
    2196:	40 e0       	ldi	r20, 0x00	; 0
    2198:	6a e0       	ldi	r22, 0x0A	; 10
    219a:	ce 01       	movw	r24, r28
    219c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <VL53L0X_SetGpioConfig+0x112>
    21a2:	85 ef       	ldi	r24, 0xF5	; 245
    21a4:	81 11       	cpse	r24, r1
    21a6:	1c c0       	rjmp	.+56     	; 0x21e0 <VL53L0X_SetGpioConfig+0x14e>
    21a8:	00 23       	and	r16, r16
    21aa:	11 f0       	breq	.+4      	; 0x21b0 <VL53L0X_SetGpioConfig+0x11e>
    21ac:	20 e1       	ldi	r18, 0x10	; 16
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <VL53L0X_SetGpioConfig+0x120>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	4f ee       	ldi	r20, 0xEF	; 239
    21b4:	64 e8       	ldi	r22, 0x84	; 132
    21b6:	ce 01       	movw	r24, r28
    21b8:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_UpdateByte>
    21bc:	81 11       	cpse	r24, r1
    21be:	10 c0       	rjmp	.+32     	; 0x21e0 <VL53L0X_SetGpioConfig+0x14e>
    21c0:	fe 01       	movw	r30, r28
    21c2:	e2 53       	subi	r30, 0x32	; 50
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	10 83       	st	Z, r17
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	ba 01       	movw	r22, r20
    21ce:	ce 01       	movw	r24, r28
    21d0:	0d df       	rcall	.-486    	; 0x1fec <VL53L0X_ClearInterruptMask>
    21d2:	06 c0       	rjmp	.+12     	; 0x21e0 <VL53L0X_SetGpioConfig+0x14e>
    21d4:	86 ef       	ldi	r24, 0xF6	; 246
    21d6:	04 c0       	rjmp	.+8      	; 0x21e0 <VL53L0X_SetGpioConfig+0x14e>
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	de cf       	rjmp	.-68     	; 0x2198 <VL53L0X_SetGpioConfig+0x106>
    21dc:	43 e0       	ldi	r20, 0x03	; 3
    21de:	dc cf       	rjmp	.-72     	; 0x2198 <VL53L0X_SetGpioConfig+0x106>
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	1f 91       	pop	r17
    21e6:	0f 91       	pop	r16
    21e8:	08 95       	ret

000021ea <VL53L0X_StaticInit>:
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	cd b7       	in	r28, 0x3d	; 61
    21f8:	de b7       	in	r29, 0x3e	; 62
    21fa:	c7 54       	subi	r28, 0x47	; 71
    21fc:	d1 09       	sbc	r29, r1
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	7c 01       	movw	r14, r24
    220a:	fe 01       	movw	r30, r28
    220c:	31 96       	adiw	r30, 0x01	; 1
    220e:	8a e3       	ldi	r24, 0x3A	; 58
    2210:	df 01       	movw	r26, r30
    2212:	1d 92       	st	X+, r1
    2214:	8a 95       	dec	r24
    2216:	e9 f7       	brne	.-6      	; 0x2212 <VL53L0X_StaticInit+0x28>
    2218:	1c ae       	std	Y+60, r1	; 0x3c
    221a:	1b ae       	std	Y+59, r1	; 0x3b
    221c:	1d ae       	std	Y+61, r1	; 0x3d
    221e:	1e ae       	std	Y+62, r1	; 0x3e
    2220:	23 96       	adiw	r28, 0x03	; 3
    2222:	1c ae       	std	Y+60, r1	; 0x3c
    2224:	1d ae       	std	Y+61, r1	; 0x3d
    2226:	1e ae       	std	Y+62, r1	; 0x3e
    2228:	1f ae       	std	Y+63, r1	; 0x3f
    222a:	23 97       	sbiw	r28, 0x03	; 3
    222c:	61 e0       	ldi	r22, 0x01	; 1
    222e:	c7 01       	movw	r24, r14
    2230:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <VL53L0X_get_info_from_device>
    2234:	f7 01       	movw	r30, r14
    2236:	ed 5f       	subi	r30, 0xFD	; 253
    2238:	fe 4f       	sbci	r31, 0xFE	; 254
    223a:	20 81       	ld	r18, Z
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	a0 f4       	brcc	.+40     	; 0x2268 <VL53L0X_StaticInit+0x7e>
    2240:	31 97       	sbiw	r30, 0x01	; 1
    2242:	40 81       	ld	r20, Z
    2244:	50 e0       	ldi	r21, 0x00	; 0
    2246:	60 e0       	ldi	r22, 0x00	; 0
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	21 30       	cpi	r18, 0x01	; 1
    224c:	31 f4       	brne	.+12     	; 0x225a <VL53L0X_StaticInit+0x70>
    224e:	41 32       	cpi	r20, 0x21	; 33
    2250:	51 05       	cpc	r21, r1
    2252:	61 05       	cpc	r22, r1
    2254:	71 05       	cpc	r23, r1
    2256:	40 f4       	brcc	.+16     	; 0x2268 <VL53L0X_StaticInit+0x7e>
    2258:	10 c0       	rjmp	.+32     	; 0x227a <VL53L0X_StaticInit+0x90>
    225a:	21 11       	cpse	r18, r1
    225c:	0e c0       	rjmp	.+28     	; 0x227a <VL53L0X_StaticInit+0x90>
    225e:	4d 30       	cpi	r20, 0x0D	; 13
    2260:	51 05       	cpc	r21, r1
    2262:	61 05       	cpc	r22, r1
    2264:	71 05       	cpc	r23, r1
    2266:	48 f0       	brcs	.+18     	; 0x227a <VL53L0X_StaticInit+0x90>
    2268:	ae 01       	movw	r20, r28
    226a:	42 5c       	subi	r20, 0xC2	; 194
    226c:	5f 4f       	sbci	r21, 0xFF	; 255
    226e:	be 01       	movw	r22, r28
    2270:	61 5c       	subi	r22, 0xC1	; 193
    2272:	7f 4f       	sbci	r23, 0xFF	; 255
    2274:	c7 01       	movw	r24, r14
    2276:	b5 d5       	rcall	.+2922   	; 0x2de2 <VL53L0X_perform_ref_spad_management>
    2278:	02 c0       	rjmp	.+4      	; 0x227e <VL53L0X_StaticInit+0x94>
    227a:	c7 01       	movw	r24, r14
    227c:	a3 d3       	rcall	.+1862   	; 0x29c4 <VL53L0X_set_reference_spads>
    227e:	81 11       	cpse	r24, r1
    2280:	26 c0       	rjmp	.+76     	; 0x22ce <VL53L0X_StaticInit+0xe4>
    2282:	f7 01       	movw	r30, r14
    2284:	e8 5c       	subi	r30, 0xC8	; 200
    2286:	fe 4f       	sbci	r31, 0xFE	; 254
    2288:	80 81       	ld	r24, Z
    228a:	81 11       	cpse	r24, r1
    228c:	be c0       	rjmp	.+380    	; 0x240a <VL53L0X_StaticInit+0x220>
    228e:	32 97       	sbiw	r30, 0x02	; 2
    2290:	60 81       	ld	r22, Z
    2292:	71 81       	ldd	r23, Z+1	; 0x01
    2294:	bc c0       	rjmp	.+376    	; 0x240e <VL53L0X_StaticInit+0x224>
    2296:	00 e0       	ldi	r16, 0x00	; 0
    2298:	24 e0       	ldi	r18, 0x04	; 4
    229a:	40 e0       	ldi	r20, 0x00	; 0
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	c7 01       	movw	r24, r14
    22a0:	f8 de       	rcall	.-528    	; 0x2092 <VL53L0X_SetGpioConfig>
    22a2:	81 11       	cpse	r24, r1
    22a4:	6c c0       	rjmp	.+216    	; 0x237e <VL53L0X_StaticInit+0x194>
    22a6:	41 e0       	ldi	r20, 0x01	; 1
    22a8:	6f ef       	ldi	r22, 0xFF	; 255
    22aa:	c7 01       	movw	r24, r14
    22ac:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    22b0:	18 2f       	mov	r17, r24
    22b2:	ae 01       	movw	r20, r28
    22b4:	45 5c       	subi	r20, 0xC5	; 197
    22b6:	5f 4f       	sbci	r21, 0xFF	; 255
    22b8:	64 e8       	ldi	r22, 0x84	; 132
    22ba:	c7 01       	movw	r24, r14
    22bc:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    22c0:	18 2b       	or	r17, r24
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	6f ef       	ldi	r22, 0xFF	; 255
    22c6:	c7 01       	movw	r24, r14
    22c8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    22cc:	81 2b       	or	r24, r17
    22ce:	81 11       	cpse	r24, r1
    22d0:	a5 c0       	rjmp	.+330    	; 0x241c <VL53L0X_StaticInit+0x232>
    22d2:	f7 01       	movw	r30, r14
    22d4:	e8 53       	subi	r30, 0x38	; 56
    22d6:	ff 4f       	sbci	r31, 0xFF	; 255
    22d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    22da:	9c ad       	ldd	r25, Y+60	; 0x3c
    22dc:	82 95       	swap	r24
    22de:	92 95       	swap	r25
    22e0:	90 7f       	andi	r25, 0xF0	; 240
    22e2:	98 27       	eor	r25, r24
    22e4:	80 7f       	andi	r24, 0xF0	; 240
    22e6:	98 27       	eor	r25, r24
    22e8:	a0 e0       	ldi	r26, 0x00	; 0
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	80 83       	st	Z, r24
    22ee:	91 83       	std	Z+1, r25	; 0x01
    22f0:	a2 83       	std	Z+2, r26	; 0x02
    22f2:	b3 83       	std	Z+3, r27	; 0x03
    22f4:	be 01       	movw	r22, r28
    22f6:	6f 5f       	subi	r22, 0xFF	; 255
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	c7 01       	movw	r24, r14
    22fc:	38 da       	rcall	.-2960   	; 0x176e <VL53L0X_GetDeviceParameters>
    22fe:	81 11       	cpse	r24, r1
    2300:	29 c0       	rjmp	.+82     	; 0x2354 <VL53L0X_StaticInit+0x16a>
    2302:	be 01       	movw	r22, r28
    2304:	63 5c       	subi	r22, 0xC3	; 195
    2306:	7f 4f       	sbci	r23, 0xFF	; 255
    2308:	c7 01       	movw	r24, r14
    230a:	0e 94 fe 07 	call	0xffc	; 0xffc <VL53L0X_GetFractionEnable>
    230e:	81 11       	cpse	r24, r1
    2310:	21 c0       	rjmp	.+66     	; 0x2354 <VL53L0X_StaticInit+0x16a>
    2312:	8d ad       	ldd	r24, Y+61	; 0x3d
    2314:	f7 01       	movw	r30, r14
    2316:	e2 5e       	subi	r30, 0xE2	; 226
    2318:	fe 4f       	sbci	r31, 0xFE	; 254
    231a:	80 83       	st	Z, r24
    231c:	8a e3       	ldi	r24, 0x3A	; 58
    231e:	fe 01       	movw	r30, r28
    2320:	31 96       	adiw	r30, 0x01	; 1
    2322:	d7 01       	movw	r26, r14
    2324:	50 96       	adiw	r26, 0x10	; 16
    2326:	01 90       	ld	r0, Z+
    2328:	0d 92       	st	X+, r0
    232a:	8a 95       	dec	r24
    232c:	e1 f7       	brne	.-8      	; 0x2326 <VL53L0X_StaticInit+0x13c>
    232e:	ae 01       	movw	r20, r28
    2330:	43 5c       	subi	r20, 0xC3	; 195
    2332:	5f 4f       	sbci	r21, 0xFF	; 255
    2334:	61 e0       	ldi	r22, 0x01	; 1
    2336:	c7 01       	movw	r24, r14
    2338:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    233c:	81 11       	cpse	r24, r1
    233e:	71 c0       	rjmp	.+226    	; 0x2422 <VL53L0X_StaticInit+0x238>
    2340:	8d ad       	ldd	r24, Y+61	; 0x3d
    2342:	f7 01       	movw	r30, r14
    2344:	e3 5e       	subi	r30, 0xE3	; 227
    2346:	fe 4f       	sbci	r31, 0xFE	; 254
    2348:	80 83       	st	Z, r24
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	60 e0       	ldi	r22, 0x00	; 0
    234e:	c7 01       	movw	r24, r14
    2350:	0e 94 13 08 	call	0x1026	; 0x1026 <VL53L0X_SetSequenceStepEnable>
    2354:	81 11       	cpse	r24, r1
    2356:	65 c0       	rjmp	.+202    	; 0x2422 <VL53L0X_StaticInit+0x238>
    2358:	40 e0       	ldi	r20, 0x00	; 0
    235a:	62 e0       	ldi	r22, 0x02	; 2
    235c:	c7 01       	movw	r24, r14
    235e:	0e 94 13 08 	call	0x1026	; 0x1026 <VL53L0X_SetSequenceStepEnable>
    2362:	81 11       	cpse	r24, r1
    2364:	1c c0       	rjmp	.+56     	; 0x239e <VL53L0X_StaticInit+0x1b4>
    2366:	83 e0       	ldi	r24, 0x03	; 3
    2368:	f7 01       	movw	r30, r14
    236a:	e1 5e       	subi	r30, 0xE1	; 225
    236c:	fe 4f       	sbci	r31, 0xFE	; 254
    236e:	80 83       	st	Z, r24
    2370:	ae 01       	movw	r20, r28
    2372:	4d 5b       	subi	r20, 0xBD	; 189
    2374:	5f 4f       	sbci	r21, 0xFF	; 255
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	c7 01       	movw	r24, r14
    237a:	0e 94 30 20 	call	0x4060	; 0x4060 <VL53L0X_get_vcsel_pulse_period>
    237e:	81 11       	cpse	r24, r1
    2380:	1e c0       	rjmp	.+60     	; 0x23be <VL53L0X_StaticInit+0x1d4>
    2382:	24 96       	adiw	r28, 0x04	; 4
    2384:	8f ad       	ldd	r24, Y+63	; 0x3f
    2386:	24 97       	sbiw	r28, 0x04	; 4
    2388:	f7 01       	movw	r30, r14
    238a:	e8 52       	subi	r30, 0x28	; 40
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	80 83       	st	Z, r24
    2390:	ae 01       	movw	r20, r28
    2392:	4d 5b       	subi	r20, 0xBD	; 189
    2394:	5f 4f       	sbci	r21, 0xFF	; 255
    2396:	61 e0       	ldi	r22, 0x01	; 1
    2398:	c7 01       	movw	r24, r14
    239a:	0e 94 30 20 	call	0x4060	; 0x4060 <VL53L0X_get_vcsel_pulse_period>
    239e:	81 11       	cpse	r24, r1
    23a0:	24 c0       	rjmp	.+72     	; 0x23ea <VL53L0X_StaticInit+0x200>
    23a2:	24 96       	adiw	r28, 0x04	; 4
    23a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    23a6:	24 97       	sbiw	r28, 0x04	; 4
    23a8:	f7 01       	movw	r30, r14
    23aa:	ed 52       	subi	r30, 0x2D	; 45
    23ac:	ff 4f       	sbci	r31, 0xFF	; 255
    23ae:	80 83       	st	Z, r24
    23b0:	ae 01       	movw	r20, r28
    23b2:	4c 5b       	subi	r20, 0xBC	; 188
    23b4:	5f 4f       	sbci	r21, 0xFF	; 255
    23b6:	63 e0       	ldi	r22, 0x03	; 3
    23b8:	c7 01       	movw	r24, r14
    23ba:	0e 94 01 09 	call	0x1202	; 0x1202 <VL53L0X_GetSequenceStepTimeout>
    23be:	81 11       	cpse	r24, r1
    23c0:	30 c0       	rjmp	.+96     	; 0x2422 <VL53L0X_StaticInit+0x238>
    23c2:	28 96       	adiw	r28, 0x08	; 8
    23c4:	8c ad       	ldd	r24, Y+60	; 0x3c
    23c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    23c8:	ae ad       	ldd	r26, Y+62	; 0x3e
    23ca:	bf ad       	ldd	r27, Y+63	; 0x3f
    23cc:	28 97       	sbiw	r28, 0x08	; 8
    23ce:	f7 01       	movw	r30, r14
    23d0:	ec 52       	subi	r30, 0x2C	; 44
    23d2:	ff 4f       	sbci	r31, 0xFF	; 255
    23d4:	80 83       	st	Z, r24
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	a2 83       	std	Z+2, r26	; 0x02
    23da:	b3 83       	std	Z+3, r27	; 0x03
    23dc:	ae 01       	movw	r20, r28
    23de:	4c 5b       	subi	r20, 0xBC	; 188
    23e0:	5f 4f       	sbci	r21, 0xFF	; 255
    23e2:	64 e0       	ldi	r22, 0x04	; 4
    23e4:	c7 01       	movw	r24, r14
    23e6:	0e 94 01 09 	call	0x1202	; 0x1202 <VL53L0X_GetSequenceStepTimeout>
    23ea:	81 11       	cpse	r24, r1
    23ec:	1a c0       	rjmp	.+52     	; 0x2422 <VL53L0X_StaticInit+0x238>
    23ee:	f7 01       	movw	r30, r14
    23f0:	e1 53       	subi	r30, 0x31	; 49
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	28 96       	adiw	r28, 0x08	; 8
    23f6:	4c ad       	ldd	r20, Y+60	; 0x3c
    23f8:	5d ad       	ldd	r21, Y+61	; 0x3d
    23fa:	6e ad       	ldd	r22, Y+62	; 0x3e
    23fc:	7f ad       	ldd	r23, Y+63	; 0x3f
    23fe:	28 97       	sbiw	r28, 0x08	; 8
    2400:	40 83       	st	Z, r20
    2402:	51 83       	std	Z+1, r21	; 0x01
    2404:	62 83       	std	Z+2, r22	; 0x02
    2406:	73 83       	std	Z+3, r23	; 0x03
    2408:	0c c0       	rjmp	.+24     	; 0x2422 <VL53L0X_StaticInit+0x238>
    240a:	68 eb       	ldi	r22, 0xB8	; 184
    240c:	72 e0       	ldi	r23, 0x02	; 2
    240e:	c7 01       	movw	r24, r14
    2410:	0e 94 37 22 	call	0x446e	; 0x446e <VL53L0X_load_tuning_settings>
    2414:	88 23       	and	r24, r24
    2416:	09 f4       	brne	.+2      	; 0x241a <VL53L0X_StaticInit+0x230>
    2418:	3e cf       	rjmp	.-388    	; 0x2296 <VL53L0X_StaticInit+0xac>
    241a:	71 cf       	rjmp	.-286    	; 0x22fe <VL53L0X_StaticInit+0x114>
    241c:	88 23       	and	r24, r24
    241e:	09 f4       	brne	.+2      	; 0x2422 <VL53L0X_StaticInit+0x238>
    2420:	86 cf       	rjmp	.-244    	; 0x232e <VL53L0X_StaticInit+0x144>
    2422:	c9 5b       	subi	r28, 0xB9	; 185
    2424:	df 4f       	sbci	r29, 0xFF	; 255
    2426:	0f b6       	in	r0, 0x3f	; 63
    2428:	f8 94       	cli
    242a:	de bf       	out	0x3e, r29	; 62
    242c:	0f be       	out	0x3f, r0	; 63
    242e:	cd bf       	out	0x3d, r28	; 61
    2430:	df 91       	pop	r29
    2432:	cf 91       	pop	r28
    2434:	1f 91       	pop	r17
    2436:	0f 91       	pop	r16
    2438:	ff 90       	pop	r15
    243a:	ef 90       	pop	r14
    243c:	08 95       	ret

0000243e <VL53L0X_GetInterruptMaskStatus>:
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	1f 92       	push	r1
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	8b 01       	movw	r16, r22
    244e:	ae 01       	movw	r20, r28
    2450:	4f 5f       	subi	r20, 0xFF	; 255
    2452:	5f 4f       	sbci	r21, 0xFF	; 255
    2454:	63 e1       	ldi	r22, 0x13	; 19
    2456:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    245a:	99 81       	ldd	r25, Y+1	; 0x01
    245c:	49 2f       	mov	r20, r25
    245e:	47 70       	andi	r20, 0x07	; 7
    2460:	50 e0       	ldi	r21, 0x00	; 0
    2462:	60 e0       	ldi	r22, 0x00	; 0
    2464:	70 e0       	ldi	r23, 0x00	; 0
    2466:	f8 01       	movw	r30, r16
    2468:	40 83       	st	Z, r20
    246a:	51 83       	std	Z+1, r21	; 0x01
    246c:	62 83       	std	Z+2, r22	; 0x02
    246e:	73 83       	std	Z+3, r23	; 0x03
    2470:	98 71       	andi	r25, 0x18	; 24
    2472:	09 f0       	breq	.+2      	; 0x2476 <VL53L0X_GetInterruptMaskStatus+0x38>
    2474:	8a ef       	ldi	r24, 0xFA	; 250
    2476:	0f 90       	pop	r0
    2478:	df 91       	pop	r29
    247a:	cf 91       	pop	r28
    247c:	1f 91       	pop	r17
    247e:	0f 91       	pop	r16
    2480:	08 95       	ret

00002482 <VL53L0X_GetMeasurementDataReady>:
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
    248a:	00 d0       	rcall	.+0      	; 0x248c <VL53L0X_GetMeasurementDataReady+0xa>
    248c:	00 d0       	rcall	.+0      	; 0x248e <VL53L0X_GetMeasurementDataReady+0xc>
    248e:	1f 92       	push	r1
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	8b 01       	movw	r16, r22
    2496:	fc 01       	movw	r30, r24
    2498:	e2 53       	subi	r30, 0x32	; 50
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	20 81       	ld	r18, Z
    249e:	24 30       	cpi	r18, 0x04	; 4
    24a0:	a1 f4       	brne	.+40     	; 0x24ca <VL53L0X_GetMeasurementDataReady+0x48>
    24a2:	be 01       	movw	r22, r28
    24a4:	6e 5f       	subi	r22, 0xFE	; 254
    24a6:	7f 4f       	sbci	r23, 0xFF	; 255
    24a8:	ca df       	rcall	.-108    	; 0x243e <VL53L0X_GetInterruptMaskStatus>
    24aa:	4a 81       	ldd	r20, Y+2	; 0x02
    24ac:	5b 81       	ldd	r21, Y+3	; 0x03
    24ae:	6c 81       	ldd	r22, Y+4	; 0x04
    24b0:	7d 81       	ldd	r23, Y+5	; 0x05
    24b2:	44 30       	cpi	r20, 0x04	; 4
    24b4:	51 05       	cpc	r21, r1
    24b6:	61 05       	cpc	r22, r1
    24b8:	71 05       	cpc	r23, r1
    24ba:	21 f4       	brne	.+8      	; 0x24c4 <VL53L0X_GetMeasurementDataReady+0x42>
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	f8 01       	movw	r30, r16
    24c0:	90 83       	st	Z, r25
    24c2:	14 c0       	rjmp	.+40     	; 0x24ec <VL53L0X_GetMeasurementDataReady+0x6a>
    24c4:	f8 01       	movw	r30, r16
    24c6:	10 82       	st	Z, r1
    24c8:	11 c0       	rjmp	.+34     	; 0x24ec <VL53L0X_GetMeasurementDataReady+0x6a>
    24ca:	ae 01       	movw	r20, r28
    24cc:	4f 5f       	subi	r20, 0xFF	; 255
    24ce:	5f 4f       	sbci	r21, 0xFF	; 255
    24d0:	64 e1       	ldi	r22, 0x14	; 20
    24d2:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    24d6:	81 11       	cpse	r24, r1
    24d8:	09 c0       	rjmp	.+18     	; 0x24ec <VL53L0X_GetMeasurementDataReady+0x6a>
    24da:	99 81       	ldd	r25, Y+1	; 0x01
    24dc:	90 ff       	sbrs	r25, 0
    24de:	04 c0       	rjmp	.+8      	; 0x24e8 <VL53L0X_GetMeasurementDataReady+0x66>
    24e0:	91 e0       	ldi	r25, 0x01	; 1
    24e2:	f8 01       	movw	r30, r16
    24e4:	90 83       	st	Z, r25
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <VL53L0X_GetMeasurementDataReady+0x6a>
    24e8:	f8 01       	movw	r30, r16
    24ea:	10 82       	st	Z, r1
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	0f 90       	pop	r0
    24f2:	0f 90       	pop	r0
    24f4:	0f 90       	pop	r0
    24f6:	df 91       	pop	r29
    24f8:	cf 91       	pop	r28
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <VL53L0X_PerformRefSpadManagement>:

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
    2500:	70 c4       	rjmp	.+2272   	; 0x2de2 <VL53L0X_perform_ref_spad_management>
    2502:	08 95       	ret

00002504 <VL53L0X_get_offset_calibration_data_micro_meter>:
			}
		}
	}

	return Status;
}
    2504:	0f 93       	push	r16
    2506:	1f 93       	push	r17
    2508:	cf 93       	push	r28
    250a:	df 93       	push	r29
    250c:	00 d0       	rcall	.+0      	; 0x250e <VL53L0X_get_offset_calibration_data_micro_meter+0xa>
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
    2512:	8b 01       	movw	r16, r22
    2514:	ae 01       	movw	r20, r28
    2516:	4f 5f       	subi	r20, 0xFF	; 255
    2518:	5f 4f       	sbci	r21, 0xFF	; 255
    251a:	68 e2       	ldi	r22, 0x28	; 40
    251c:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    2520:	81 11       	cpse	r24, r1
    2522:	27 c0       	rjmp	.+78     	; 0x2572 <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    2524:	29 81       	ldd	r18, Y+1	; 0x01
    2526:	3a 81       	ldd	r19, Y+2	; 0x02
    2528:	3f 70       	andi	r19, 0x0F	; 15
    252a:	21 15       	cp	r18, r1
    252c:	98 e0       	ldi	r25, 0x08	; 8
    252e:	39 07       	cpc	r19, r25
    2530:	88 f0       	brcs	.+34     	; 0x2554 <VL53L0X_get_offset_calibration_data_micro_meter+0x50>
    2532:	30 51       	subi	r19, 0x10	; 16
    2534:	9a ef       	ldi	r25, 0xFA	; 250
    2536:	92 9f       	mul	r25, r18
    2538:	a0 01       	movw	r20, r0
    253a:	93 9f       	mul	r25, r19
    253c:	50 0d       	add	r21, r0
    253e:	11 24       	eor	r1, r1
    2540:	05 2e       	mov	r0, r21
    2542:	00 0c       	add	r0, r0
    2544:	66 0b       	sbc	r22, r22
    2546:	77 0b       	sbc	r23, r23
    2548:	f8 01       	movw	r30, r16
    254a:	40 83       	st	Z, r20
    254c:	51 83       	std	Z+1, r21	; 0x01
    254e:	62 83       	std	Z+2, r22	; 0x02
    2550:	73 83       	std	Z+3, r23	; 0x03
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    2554:	9a ef       	ldi	r25, 0xFA	; 250
    2556:	92 9f       	mul	r25, r18
    2558:	a0 01       	movw	r20, r0
    255a:	93 9f       	mul	r25, r19
    255c:	50 0d       	add	r21, r0
    255e:	11 24       	eor	r1, r1
    2560:	05 2e       	mov	r0, r21
    2562:	00 0c       	add	r0, r0
    2564:	66 0b       	sbc	r22, r22
    2566:	77 0b       	sbc	r23, r23
    2568:	f8 01       	movw	r30, r16
    256a:	40 83       	st	Z, r20
    256c:	51 83       	std	Z+1, r21	; 0x01
    256e:	62 83       	std	Z+2, r22	; 0x02
    2570:	73 83       	std	Z+3, r23	; 0x03
    2572:	0f 90       	pop	r0
    2574:	0f 90       	pop	r0
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	08 95       	ret

00002580 <get_next_good_spad>:
    2580:	7f 92       	push	r7
    2582:	8f 92       	push	r8
    2584:	9f 92       	push	r9
    2586:	af 92       	push	r10
    2588:	bf 92       	push	r11
    258a:	cf 92       	push	r12
    258c:	df 92       	push	r13
    258e:	ef 92       	push	r14
    2590:	ff 92       	push	r15
    2592:	0f 93       	push	r16
    2594:	1f 93       	push	r17
    2596:	cf 93       	push	r28
    2598:	df 93       	push	r29
    259a:	e7 01       	movw	r28, r14
    259c:	cc 24       	eor	r12, r12
    259e:	ca 94       	dec	r12
    25a0:	dc 2c       	mov	r13, r12
    25a2:	76 01       	movw	r14, r12
    25a4:	c8 82       	st	Y, r12
    25a6:	d9 82       	std	Y+1, r13	; 0x01
    25a8:	ea 82       	std	Y+2, r14	; 0x02
    25aa:	fb 82       	std	Y+3, r15	; 0x03
    25ac:	68 01       	movw	r12, r16
    25ae:	79 01       	movw	r14, r18
    25b0:	68 94       	set
    25b2:	12 f8       	bld	r1, 2
    25b4:	f6 94       	lsr	r15
    25b6:	e7 94       	ror	r14
    25b8:	d7 94       	ror	r13
    25ba:	c7 94       	ror	r12
    25bc:	16 94       	lsr	r1
    25be:	d1 f7       	brne	.-12     	; 0x25b4 <get_next_good_spad+0x34>
    25c0:	48 01       	movw	r8, r16
    25c2:	59 01       	movw	r10, r18
    25c4:	e7 e0       	ldi	r30, 0x07	; 7
    25c6:	8e 22       	and	r8, r30
    25c8:	99 24       	eor	r9, r9
    25ca:	aa 24       	eor	r10, r10
    25cc:	bb 24       	eor	r11, r11
    25ce:	c4 16       	cp	r12, r20
    25d0:	d5 06       	cpc	r13, r21
    25d2:	e6 06       	cpc	r14, r22
    25d4:	f7 06       	cpc	r15, r23
    25d6:	08 f0       	brcs	.+2      	; 0x25da <get_next_good_spad+0x5a>
    25d8:	47 c0       	rjmp	.+142    	; 0x2668 <get_next_good_spad+0xe8>
    25da:	fc 01       	movw	r30, r24
    25dc:	ec 0d       	add	r30, r12
    25de:	fd 1d       	adc	r31, r13
    25e0:	d7 01       	movw	r26, r14
    25e2:	c6 01       	movw	r24, r12
    25e4:	71 90       	ld	r7, Z+
    25e6:	c8 16       	cp	r12, r24
    25e8:	d9 06       	cpc	r13, r25
    25ea:	ea 06       	cpc	r14, r26
    25ec:	fb 06       	cpc	r15, r27
    25ee:	61 f4       	brne	.+24     	; 0x2608 <get_next_good_spad+0x88>
    25f0:	27 2d       	mov	r18, r7
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	08 2c       	mov	r0, r8
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <get_next_good_spad+0x7c>
    25f8:	35 95       	asr	r19
    25fa:	27 95       	ror	r18
    25fc:	0a 94       	dec	r0
    25fe:	e2 f7       	brpl	.-8      	; 0x25f8 <get_next_good_spad+0x78>
    2600:	72 2e       	mov	r7, r18
    2602:	95 01       	movw	r18, r10
    2604:	84 01       	movw	r16, r8
    2606:	03 c0       	rjmp	.+6      	; 0x260e <get_next_good_spad+0x8e>
    2608:	00 e0       	ldi	r16, 0x00	; 0
    260a:	10 e0       	ldi	r17, 0x00	; 0
    260c:	98 01       	movw	r18, r16
    260e:	70 fe       	sbrs	r7, 0
    2610:	18 c0       	rjmp	.+48     	; 0x2642 <get_next_good_spad+0xc2>
    2612:	02 c0       	rjmp	.+4      	; 0x2618 <get_next_good_spad+0x98>
    2614:	70 fe       	sbrs	r7, 0
    2616:	15 c0       	rjmp	.+42     	; 0x2642 <get_next_good_spad+0xc2>
    2618:	88 0f       	add	r24, r24
    261a:	99 1f       	adc	r25, r25
    261c:	aa 1f       	adc	r26, r26
    261e:	bb 1f       	adc	r27, r27
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	aa 1f       	adc	r26, r26
    2626:	bb 1f       	adc	r27, r27
    2628:	88 0f       	add	r24, r24
    262a:	99 1f       	adc	r25, r25
    262c:	aa 1f       	adc	r26, r26
    262e:	bb 1f       	adc	r27, r27
    2630:	08 0f       	add	r16, r24
    2632:	19 1f       	adc	r17, r25
    2634:	2a 1f       	adc	r18, r26
    2636:	3b 1f       	adc	r19, r27
    2638:	08 83       	st	Y, r16
    263a:	19 83       	std	Y+1, r17	; 0x01
    263c:	2a 83       	std	Y+2, r18	; 0x02
    263e:	3b 83       	std	Y+3, r19	; 0x03
    2640:	13 c0       	rjmp	.+38     	; 0x2668 <get_next_good_spad+0xe8>
    2642:	76 94       	lsr	r7
    2644:	0f 5f       	subi	r16, 0xFF	; 255
    2646:	1f 4f       	sbci	r17, 0xFF	; 255
    2648:	2f 4f       	sbci	r18, 0xFF	; 255
    264a:	3f 4f       	sbci	r19, 0xFF	; 255
    264c:	08 30       	cpi	r16, 0x08	; 8
    264e:	11 05       	cpc	r17, r1
    2650:	21 05       	cpc	r18, r1
    2652:	31 05       	cpc	r19, r1
    2654:	f8 f2       	brcs	.-66     	; 0x2614 <get_next_good_spad+0x94>
    2656:	01 96       	adiw	r24, 0x01	; 1
    2658:	a1 1d       	adc	r26, r1
    265a:	b1 1d       	adc	r27, r1
    265c:	84 17       	cp	r24, r20
    265e:	95 07       	cpc	r25, r21
    2660:	a6 07       	cpc	r26, r22
    2662:	b7 07       	cpc	r27, r23
    2664:	08 f4       	brcc	.+2      	; 0x2668 <get_next_good_spad+0xe8>
    2666:	be cf       	rjmp	.-132    	; 0x25e4 <get_next_good_spad+0x64>
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	bf 90       	pop	r11
    267a:	af 90       	pop	r10
    267c:	9f 90       	pop	r9
    267e:	8f 90       	pop	r8
    2680:	7f 90       	pop	r7
    2682:	08 95       	ret

00002684 <is_aperture>:
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	68 94       	set
    268a:	15 f8       	bld	r1, 5
    268c:	b6 95       	lsr	r27
    268e:	a7 95       	ror	r26
    2690:	97 95       	ror	r25
    2692:	87 95       	ror	r24
    2694:	16 94       	lsr	r1
    2696:	d1 f7       	brne	.-12     	; 0x268c <is_aperture+0x8>
    2698:	bc 01       	movw	r22, r24
    269a:	66 0f       	add	r22, r22
    269c:	77 1f       	adc	r23, r23
    269e:	66 0f       	add	r22, r22
    26a0:	77 1f       	adc	r23, r23
    26a2:	fb 01       	movw	r30, r22
    26a4:	e5 55       	subi	r30, 0x55	; 85
    26a6:	fc 4f       	sbci	r31, 0xFC	; 252
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	40 81       	ld	r20, Z
    26ac:	51 81       	ldd	r21, Z+1	; 0x01
    26ae:	62 81       	ldd	r22, Z+2	; 0x02
    26b0:	73 81       	ldd	r23, Z+3	; 0x03
    26b2:	45 2b       	or	r20, r21
    26b4:	46 2b       	or	r20, r22
    26b6:	47 2b       	or	r20, r23
    26b8:	09 f4       	brne	.+2      	; 0x26bc <is_aperture+0x38>
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	08 95       	ret

000026be <enable_spad_bit>:
    26be:	cf 92       	push	r12
    26c0:	df 92       	push	r13
    26c2:	ef 92       	push	r14
    26c4:	ff 92       	push	r15
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	68 01       	movw	r12, r16
    26cc:	79 01       	movw	r14, r18
    26ce:	68 94       	set
    26d0:	12 f8       	bld	r1, 2
    26d2:	f6 94       	lsr	r15
    26d4:	e7 94       	ror	r14
    26d6:	d7 94       	ror	r13
    26d8:	c7 94       	ror	r12
    26da:	16 94       	lsr	r1
    26dc:	d1 f7       	brne	.-12     	; 0x26d2 <enable_spad_bit+0x14>
    26de:	07 70       	andi	r16, 0x07	; 7
    26e0:	11 27       	eor	r17, r17
    26e2:	22 27       	eor	r18, r18
    26e4:	33 27       	eor	r19, r19
    26e6:	c4 16       	cp	r12, r20
    26e8:	d5 06       	cpc	r13, r21
    26ea:	e6 06       	cpc	r14, r22
    26ec:	f7 06       	cpc	r15, r23
    26ee:	78 f4       	brcc	.+30     	; 0x270e <enable_spad_bit+0x50>
    26f0:	fc 01       	movw	r30, r24
    26f2:	ec 0d       	add	r30, r12
    26f4:	fd 1d       	adc	r31, r13
    26f6:	81 e0       	ldi	r24, 0x01	; 1
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	02 c0       	rjmp	.+4      	; 0x2700 <enable_spad_bit+0x42>
    26fc:	88 0f       	add	r24, r24
    26fe:	99 1f       	adc	r25, r25
    2700:	0a 95       	dec	r16
    2702:	e2 f7       	brpl	.-8      	; 0x26fc <enable_spad_bit+0x3e>
    2704:	90 81       	ld	r25, Z
    2706:	89 2b       	or	r24, r25
    2708:	80 83       	st	Z, r24
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	01 c0       	rjmp	.+2      	; 0x2710 <enable_spad_bit+0x52>
    270e:	8e ec       	ldi	r24, 0xCE	; 206
    2710:	1f 91       	pop	r17
    2712:	0f 91       	pop	r16
    2714:	ff 90       	pop	r15
    2716:	ef 90       	pop	r14
    2718:	df 90       	pop	r13
    271a:	cf 90       	pop	r12
    271c:	08 95       	ret

0000271e <set_ref_spad_map>:
    271e:	0f 93       	push	r16
    2720:	1f 93       	push	r17
    2722:	ab 01       	movw	r20, r22
    2724:	06 e0       	ldi	r16, 0x06	; 6
    2726:	10 e0       	ldi	r17, 0x00	; 0
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	60 eb       	ldi	r22, 0xB0	; 176
    272e:	0e 94 a3 2b 	call	0x5746	; 0x5746 <VL53L0X_WriteMulti>
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	08 95       	ret

00002738 <get_ref_spad_map>:
    2738:	0f 93       	push	r16
    273a:	1f 93       	push	r17
    273c:	ab 01       	movw	r20, r22
    273e:	06 e0       	ldi	r16, 0x06	; 6
    2740:	10 e0       	ldi	r17, 0x00	; 0
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	60 eb       	ldi	r22, 0xB0	; 176
    2748:	0e 94 bb 2b 	call	0x5776	; 0x5776 <VL53L0X_ReadMulti>
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	08 95       	ret

00002752 <enable_ref_spads>:
    2752:	3f 92       	push	r3
    2754:	4f 92       	push	r4
    2756:	5f 92       	push	r5
    2758:	6f 92       	push	r6
    275a:	7f 92       	push	r7
    275c:	8f 92       	push	r8
    275e:	9f 92       	push	r9
    2760:	af 92       	push	r10
    2762:	bf 92       	push	r11
    2764:	cf 92       	push	r12
    2766:	df 92       	push	r13
    2768:	ef 92       	push	r14
    276a:	ff 92       	push	r15
    276c:	0f 93       	push	r16
    276e:	1f 93       	push	r17
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	64 97       	sbiw	r28, 0x14	; 20
    277a:	0f b6       	in	r0, 0x3f	; 63
    277c:	f8 94       	cli
    277e:	de bf       	out	0x3e, r29	; 62
    2780:	0f be       	out	0x3f, r0	; 63
    2782:	cd bf       	out	0x3d, r28	; 61
    2784:	9c 8b       	std	Y+20, r25	; 0x14
    2786:	8b 8b       	std	Y+19, r24	; 0x13
    2788:	36 2e       	mov	r3, r22
    278a:	5a 8b       	std	Y+18, r21	; 0x12
    278c:	49 8b       	std	Y+17, r20	; 0x11
    278e:	38 8b       	std	Y+16, r19	; 0x10
    2790:	2f 87       	std	Y+15, r18	; 0x0f
    2792:	eb 86       	std	Y+11, r14	; 0x0b
    2794:	fc 86       	std	Y+12, r15	; 0x0c
    2796:	0d 87       	std	Y+13, r16	; 0x0d
    2798:	1e 87       	std	Y+14, r17	; 0x0e
    279a:	25 01       	movw	r4, r10
    279c:	36 01       	movw	r6, r12
    279e:	28 a5       	ldd	r18, Y+40	; 0x28
    27a0:	39 a5       	ldd	r19, Y+41	; 0x29
    27a2:	4a a5       	ldd	r20, Y+42	; 0x2a
    27a4:	5b a5       	ldd	r21, Y+43	; 0x2b
    27a6:	29 83       	std	Y+1, r18	; 0x01
    27a8:	3a 83       	std	Y+2, r19	; 0x02
    27aa:	4b 83       	std	Y+3, r20	; 0x03
    27ac:	5c 83       	std	Y+4, r21	; 0x04
    27ae:	8c a5       	ldd	r24, Y+44	; 0x2c
    27b0:	9d a5       	ldd	r25, Y+45	; 0x2d
    27b2:	ae a5       	ldd	r26, Y+46	; 0x2e
    27b4:	bf a5       	ldd	r27, Y+47	; 0x2f
    27b6:	89 2b       	or	r24, r25
    27b8:	8a 2b       	or	r24, r26
    27ba:	8b 2b       	or	r24, r27
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <enable_ref_spads+0x6e>
    27be:	7a c0       	rjmp	.+244    	; 0x28b4 <enable_ref_spads+0x162>
    27c0:	81 2c       	mov	r8, r1
    27c2:	91 2c       	mov	r9, r1
    27c4:	54 01       	movw	r10, r8
    27c6:	de 01       	movw	r26, r28
    27c8:	11 96       	adiw	r26, 0x01	; 1
    27ca:	7d 01       	movw	r14, r26
    27cc:	08 a5       	ldd	r16, Y+40	; 0x28
    27ce:	19 a5       	ldd	r17, Y+41	; 0x29
    27d0:	2a a5       	ldd	r18, Y+42	; 0x2a
    27d2:	3b a5       	ldd	r19, Y+43	; 0x2b
    27d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    27d6:	5c 85       	ldd	r21, Y+12	; 0x0c
    27d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    27da:	7e 85       	ldd	r23, Y+14	; 0x0e
    27dc:	89 89       	ldd	r24, Y+17	; 0x11
    27de:	9a 89       	ldd	r25, Y+18	; 0x12
    27e0:	cf de       	rcall	.-610    	; 0x2580 <get_next_good_spad>
    27e2:	c9 80       	ldd	r12, Y+1	; 0x01
    27e4:	da 80       	ldd	r13, Y+2	; 0x02
    27e6:	eb 80       	ldd	r14, Y+3	; 0x03
    27e8:	fc 80       	ldd	r15, Y+4	; 0x04
    27ea:	bf ef       	ldi	r27, 0xFF	; 255
    27ec:	cb 16       	cp	r12, r27
    27ee:	db 06       	cpc	r13, r27
    27f0:	eb 06       	cpc	r14, r27
    27f2:	fb 06       	cpc	r15, r27
    27f4:	09 f4       	brne	.+2      	; 0x27f8 <enable_ref_spads+0xa6>
    27f6:	72 c0       	rjmp	.+228    	; 0x28dc <enable_ref_spads+0x18a>
    27f8:	c7 01       	movw	r24, r14
    27fa:	b6 01       	movw	r22, r12
    27fc:	64 0d       	add	r22, r4
    27fe:	75 1d       	adc	r23, r5
    2800:	86 1d       	adc	r24, r6
    2802:	97 1d       	adc	r25, r7
    2804:	3f df       	rcall	.-386    	; 0x2684 <is_aperture>
    2806:	83 11       	cpse	r24, r3
    2808:	69 c0       	rjmp	.+210    	; 0x28dc <enable_ref_spads+0x18a>
    280a:	97 01       	movw	r18, r14
    280c:	86 01       	movw	r16, r12
    280e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2810:	5c 85       	ldd	r21, Y+12	; 0x0c
    2812:	6d 85       	ldd	r22, Y+13	; 0x0d
    2814:	7e 85       	ldd	r23, Y+14	; 0x0e
    2816:	8f 85       	ldd	r24, Y+15	; 0x0f
    2818:	98 89       	ldd	r25, Y+16	; 0x10
    281a:	51 df       	rcall	.-350    	; 0x26be <enable_spad_bit>
    281c:	a7 01       	movw	r20, r14
    281e:	96 01       	movw	r18, r12
    2820:	2f 5f       	subi	r18, 0xFF	; 255
    2822:	3f 4f       	sbci	r19, 0xFF	; 255
    2824:	4f 4f       	sbci	r20, 0xFF	; 255
    2826:	5f 4f       	sbci	r21, 0xFF	; 255
    2828:	28 a7       	std	Y+40, r18	; 0x28
    282a:	39 a7       	std	Y+41, r19	; 0x29
    282c:	4a a7       	std	Y+42, r20	; 0x2a
    282e:	5b a7       	std	Y+43, r21	; 0x2b
    2830:	3f ef       	ldi	r19, 0xFF	; 255
    2832:	83 1a       	sub	r8, r19
    2834:	93 0a       	sbc	r9, r19
    2836:	a3 0a       	sbc	r10, r19
    2838:	b3 0a       	sbc	r11, r19
    283a:	8c a5       	ldd	r24, Y+44	; 0x2c
    283c:	9d a5       	ldd	r25, Y+45	; 0x2d
    283e:	ae a5       	ldd	r26, Y+46	; 0x2e
    2840:	bf a5       	ldd	r27, Y+47	; 0x2f
    2842:	88 15       	cp	r24, r8
    2844:	99 05       	cpc	r25, r9
    2846:	aa 05       	cpc	r26, r10
    2848:	bb 05       	cpc	r27, r11
    284a:	09 f0       	breq	.+2      	; 0x284e <enable_ref_spads+0xfc>
    284c:	bc cf       	rjmp	.-136    	; 0x27c6 <enable_ref_spads+0x74>
    284e:	32 c0       	rjmp	.+100    	; 0x28b4 <enable_ref_spads+0x162>
    2850:	be 01       	movw	r22, r28
    2852:	6b 5f       	subi	r22, 0xFB	; 251
    2854:	7f 4f       	sbci	r23, 0xFF	; 255
    2856:	8b 89       	ldd	r24, Y+19	; 0x13
    2858:	9c 89       	ldd	r25, Y+20	; 0x14
    285a:	6e df       	rcall	.-292    	; 0x2738 <get_ref_spad_map>
    285c:	2b 85       	ldd	r18, Y+11	; 0x0b
    285e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2860:	4d 85       	ldd	r20, Y+13	; 0x0d
    2862:	5e 85       	ldd	r21, Y+14	; 0x0e
    2864:	23 2b       	or	r18, r19
    2866:	24 2b       	or	r18, r20
    2868:	25 2b       	or	r18, r21
    286a:	09 f4       	brne	.+2      	; 0x286e <enable_ref_spads+0x11c>
    286c:	43 c0       	rjmp	.+134    	; 0x28f4 <enable_ref_spads+0x1a2>
    286e:	af 85       	ldd	r26, Y+15	; 0x0f
    2870:	b8 89       	ldd	r27, Y+16	; 0x10
    2872:	2c 91       	ld	r18, X
    2874:	9d 81       	ldd	r25, Y+5	; 0x05
    2876:	29 13       	cpse	r18, r25
    2878:	19 c0       	rjmp	.+50     	; 0x28ac <enable_ref_spads+0x15a>
    287a:	11 96       	adiw	r26, 0x01	; 1
    287c:	fe 01       	movw	r30, r28
    287e:	36 96       	adiw	r30, 0x06	; 6
    2880:	40 e0       	ldi	r20, 0x00	; 0
    2882:	50 e0       	ldi	r21, 0x00	; 0
    2884:	ba 01       	movw	r22, r20
    2886:	cb 84       	ldd	r12, Y+11	; 0x0b
    2888:	dc 84       	ldd	r13, Y+12	; 0x0c
    288a:	ed 84       	ldd	r14, Y+13	; 0x0d
    288c:	fe 84       	ldd	r15, Y+14	; 0x0e
    288e:	04 c0       	rjmp	.+8      	; 0x2898 <enable_ref_spads+0x146>
    2890:	2d 91       	ld	r18, X+
    2892:	91 91       	ld	r25, Z+
    2894:	29 13       	cpse	r18, r25
    2896:	0c c0       	rjmp	.+24     	; 0x28b0 <enable_ref_spads+0x15e>
    2898:	4f 5f       	subi	r20, 0xFF	; 255
    289a:	5f 4f       	sbci	r21, 0xFF	; 255
    289c:	6f 4f       	sbci	r22, 0xFF	; 255
    289e:	7f 4f       	sbci	r23, 0xFF	; 255
    28a0:	c4 16       	cp	r12, r20
    28a2:	d5 06       	cpc	r13, r21
    28a4:	e6 06       	cpc	r14, r22
    28a6:	f7 06       	cpc	r15, r23
    28a8:	99 f7       	brne	.-26     	; 0x2890 <enable_ref_spads+0x13e>
    28aa:	24 c0       	rjmp	.+72     	; 0x28f4 <enable_ref_spads+0x1a2>
    28ac:	8e ec       	ldi	r24, 0xCE	; 206
    28ae:	22 c0       	rjmp	.+68     	; 0x28f4 <enable_ref_spads+0x1a2>
    28b0:	8e ec       	ldi	r24, 0xCE	; 206
    28b2:	20 c0       	rjmp	.+64     	; 0x28f4 <enable_ref_spads+0x1a2>
    28b4:	28 a5       	ldd	r18, Y+40	; 0x28
    28b6:	39 a5       	ldd	r19, Y+41	; 0x29
    28b8:	4a a5       	ldd	r20, Y+42	; 0x2a
    28ba:	5b a5       	ldd	r21, Y+43	; 0x2b
    28bc:	a8 a9       	ldd	r26, Y+48	; 0x30
    28be:	b9 a9       	ldd	r27, Y+49	; 0x31
    28c0:	2d 93       	st	X+, r18
    28c2:	3d 93       	st	X+, r19
    28c4:	4d 93       	st	X+, r20
    28c6:	5c 93       	st	X, r21
    28c8:	13 97       	sbiw	r26, 0x03	; 3
    28ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    28cc:	78 89       	ldd	r23, Y+16	; 0x10
    28ce:	8b 89       	ldd	r24, Y+19	; 0x13
    28d0:	9c 89       	ldd	r25, Y+20	; 0x14
    28d2:	25 df       	rcall	.-438    	; 0x271e <set_ref_spad_map>
    28d4:	88 23       	and	r24, r24
    28d6:	09 f4       	brne	.+2      	; 0x28da <enable_ref_spads+0x188>
    28d8:	bb cf       	rjmp	.-138    	; 0x2850 <enable_ref_spads+0xfe>
    28da:	0c c0       	rjmp	.+24     	; 0x28f4 <enable_ref_spads+0x1a2>
    28dc:	28 a5       	ldd	r18, Y+40	; 0x28
    28de:	39 a5       	ldd	r19, Y+41	; 0x29
    28e0:	4a a5       	ldd	r20, Y+42	; 0x2a
    28e2:	5b a5       	ldd	r21, Y+43	; 0x2b
    28e4:	a8 a9       	ldd	r26, Y+48	; 0x30
    28e6:	b9 a9       	ldd	r27, Y+49	; 0x31
    28e8:	2d 93       	st	X+, r18
    28ea:	3d 93       	st	X+, r19
    28ec:	4d 93       	st	X+, r20
    28ee:	5c 93       	st	X, r21
    28f0:	13 97       	sbiw	r26, 0x03	; 3
    28f2:	8e ec       	ldi	r24, 0xCE	; 206
    28f4:	64 96       	adiw	r28, 0x14	; 20
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	de bf       	out	0x3e, r29	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	cd bf       	out	0x3d, r28	; 61
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	1f 91       	pop	r17
    2906:	0f 91       	pop	r16
    2908:	ff 90       	pop	r15
    290a:	ef 90       	pop	r14
    290c:	df 90       	pop	r13
    290e:	cf 90       	pop	r12
    2910:	bf 90       	pop	r11
    2912:	af 90       	pop	r10
    2914:	9f 90       	pop	r9
    2916:	8f 90       	pop	r8
    2918:	7f 90       	pop	r7
    291a:	6f 90       	pop	r6
    291c:	5f 90       	pop	r5
    291e:	4f 90       	pop	r4
    2920:	3f 90       	pop	r3
    2922:	08 95       	ret

00002924 <perform_ref_signal_measurement>:
    2924:	cf 92       	push	r12
    2926:	df 92       	push	r13
    2928:	ff 92       	push	r15
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	69 97       	sbiw	r28, 0x19	; 25
    2938:	0f b6       	in	r0, 0x3f	; 63
    293a:	f8 94       	cli
    293c:	de bf       	out	0x3e, r29	; 62
    293e:	0f be       	out	0x3f, r0	; 63
    2940:	cd bf       	out	0x3d, r28	; 61
    2942:	8c 01       	movw	r16, r24
    2944:	6b 01       	movw	r12, r22
    2946:	fc 01       	movw	r30, r24
    2948:	e3 5e       	subi	r30, 0xE3	; 227
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	f0 80       	ld	r15, Z
    294e:	40 ec       	ldi	r20, 0xC0	; 192
    2950:	61 e0       	ldi	r22, 0x01	; 1
    2952:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2956:	81 11       	cpse	r24, r1
    2958:	1a c0       	rjmp	.+52     	; 0x298e <perform_ref_signal_measurement+0x6a>
    295a:	be 01       	movw	r22, r28
    295c:	6f 5f       	subi	r22, 0xFF	; 255
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	c8 01       	movw	r24, r16
    2962:	79 db       	rcall	.-2318   	; 0x2056 <VL53L0X_PerformSingleRangingMeasurement>
    2964:	81 11       	cpse	r24, r1
    2966:	20 c0       	rjmp	.+64     	; 0x29a8 <perform_ref_signal_measurement+0x84>
    2968:	41 e0       	ldi	r20, 0x01	; 1
    296a:	6f ef       	ldi	r22, 0xFF	; 255
    296c:	c8 01       	movw	r24, r16
    296e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2972:	81 11       	cpse	r24, r1
    2974:	19 c0       	rjmp	.+50     	; 0x29a8 <perform_ref_signal_measurement+0x84>
    2976:	a6 01       	movw	r20, r12
    2978:	66 eb       	ldi	r22, 0xB6	; 182
    297a:	c8 01       	movw	r24, r16
    297c:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    2980:	81 11       	cpse	r24, r1
    2982:	12 c0       	rjmp	.+36     	; 0x29a8 <perform_ref_signal_measurement+0x84>
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	6f ef       	ldi	r22, 0xFF	; 255
    2988:	c8 01       	movw	r24, r16
    298a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    298e:	81 11       	cpse	r24, r1
    2990:	0b c0       	rjmp	.+22     	; 0x29a8 <perform_ref_signal_measurement+0x84>
    2992:	4f 2d       	mov	r20, r15
    2994:	61 e0       	ldi	r22, 0x01	; 1
    2996:	c8 01       	movw	r24, r16
    2998:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    299c:	81 11       	cpse	r24, r1
    299e:	04 c0       	rjmp	.+8      	; 0x29a8 <perform_ref_signal_measurement+0x84>
    29a0:	f8 01       	movw	r30, r16
    29a2:	e3 5e       	subi	r30, 0xE3	; 227
    29a4:	fe 4f       	sbci	r31, 0xFE	; 254
    29a6:	f0 82       	st	Z, r15
    29a8:	69 96       	adiw	r28, 0x19	; 25
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	df 91       	pop	r29
    29b6:	cf 91       	pop	r28
    29b8:	1f 91       	pop	r17
    29ba:	0f 91       	pop	r16
    29bc:	ff 90       	pop	r15
    29be:	df 90       	pop	r13
    29c0:	cf 90       	pop	r12
    29c2:	08 95       	ret

000029c4 <VL53L0X_set_reference_spads>:
    29c4:	6f 92       	push	r6
    29c6:	7f 92       	push	r7
    29c8:	8f 92       	push	r8
    29ca:	9f 92       	push	r9
    29cc:	af 92       	push	r10
    29ce:	bf 92       	push	r11
    29d0:	cf 92       	push	r12
    29d2:	df 92       	push	r13
    29d4:	ef 92       	push	r14
    29d6:	ff 92       	push	r15
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	cf 93       	push	r28
    29de:	df 93       	push	r29
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <VL53L0X_set_reference_spads+0x1e>
    29e2:	00 d0       	rcall	.+0      	; 0x29e4 <VL53L0X_set_reference_spads+0x20>
    29e4:	cd b7       	in	r28, 0x3d	; 61
    29e6:	de b7       	in	r29, 0x3e	; 62
    29e8:	4c 01       	movw	r8, r24
    29ea:	64 2e       	mov	r6, r20
    29ec:	15 2f       	mov	r17, r21
    29ee:	06 2f       	mov	r16, r22
    29f0:	b7 2e       	mov	r11, r23
    29f2:	72 2e       	mov	r7, r18
    29f4:	41 e0       	ldi	r20, 0x01	; 1
    29f6:	6f ef       	ldi	r22, 0xFF	; 255
    29f8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    29fc:	81 11       	cpse	r24, r1
    29fe:	1a c0       	rjmp	.+52     	; 0x2a34 <VL53L0X_set_reference_spads+0x70>
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	6f e4       	ldi	r22, 0x4F	; 79
    2a04:	c4 01       	movw	r24, r8
    2a06:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2a0a:	81 11       	cpse	r24, r1
    2a0c:	13 c0       	rjmp	.+38     	; 0x2a34 <VL53L0X_set_reference_spads+0x70>
    2a0e:	4c e2       	ldi	r20, 0x2C	; 44
    2a10:	6e e4       	ldi	r22, 0x4E	; 78
    2a12:	c4 01       	movw	r24, r8
    2a14:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2a18:	81 11       	cpse	r24, r1
    2a1a:	0c c0       	rjmp	.+24     	; 0x2a34 <VL53L0X_set_reference_spads+0x70>
    2a1c:	40 e0       	ldi	r20, 0x00	; 0
    2a1e:	6f ef       	ldi	r22, 0xFF	; 255
    2a20:	c4 01       	movw	r24, r8
    2a22:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2a26:	81 11       	cpse	r24, r1
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <VL53L0X_set_reference_spads+0x70>
    2a2a:	44 eb       	ldi	r20, 0xB4	; 180
    2a2c:	66 eb       	ldi	r22, 0xB6	; 182
    2a2e:	c4 01       	movw	r24, r8
    2a30:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2a34:	f4 01       	movw	r30, r8
    2a36:	ef 5e       	subi	r30, 0xEF	; 239
    2a38:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3a:	10 82       	st	Z, r1
    2a3c:	31 96       	adiw	r30, 0x01	; 1
    2a3e:	10 82       	st	Z, r1
    2a40:	31 96       	adiw	r30, 0x01	; 1
    2a42:	10 82       	st	Z, r1
    2a44:	31 96       	adiw	r30, 0x01	; 1
    2a46:	10 82       	st	Z, r1
    2a48:	31 96       	adiw	r30, 0x01	; 1
    2a4a:	10 82       	st	Z, r1
    2a4c:	31 96       	adiw	r30, 0x01	; 1
    2a4e:	10 82       	st	Z, r1
    2a50:	71 10       	cpse	r7, r1
    2a52:	0a c0       	rjmp	.+20     	; 0x2a68 <VL53L0X_set_reference_spads+0xa4>
    2a54:	c1 2c       	mov	r12, r1
    2a56:	d1 2c       	mov	r13, r1
    2a58:	76 01       	movw	r14, r12
    2a5a:	18 c0       	rjmp	.+48     	; 0x2a8c <VL53L0X_set_reference_spads+0xc8>
    2a5c:	2f ef       	ldi	r18, 0xFF	; 255
    2a5e:	c2 1a       	sub	r12, r18
    2a60:	d2 0a       	sbc	r13, r18
    2a62:	e2 0a       	sbc	r14, r18
    2a64:	f2 0a       	sbc	r15, r18
    2a66:	03 c0       	rjmp	.+6      	; 0x2a6e <VL53L0X_set_reference_spads+0xaa>
    2a68:	c1 2c       	mov	r12, r1
    2a6a:	d1 2c       	mov	r13, r1
    2a6c:	76 01       	movw	r14, r12
    2a6e:	c7 01       	movw	r24, r14
    2a70:	b6 01       	movw	r22, r12
    2a72:	6c 54       	subi	r22, 0x4C	; 76
    2a74:	7f 4f       	sbci	r23, 0xFF	; 255
    2a76:	8f 4f       	sbci	r24, 0xFF	; 255
    2a78:	9f 4f       	sbci	r25, 0xFF	; 255
    2a7a:	04 de       	rcall	.-1016   	; 0x2684 <is_aperture>
    2a7c:	81 11       	cpse	r24, r1
    2a7e:	06 c0       	rjmp	.+12     	; 0x2a8c <VL53L0X_set_reference_spads+0xc8>
    2a80:	3c e2       	ldi	r19, 0x2C	; 44
    2a82:	c3 16       	cp	r12, r19
    2a84:	d1 04       	cpc	r13, r1
    2a86:	e1 04       	cpc	r14, r1
    2a88:	f1 04       	cpc	r15, r1
    2a8a:	41 f7       	brne	.-48     	; 0x2a5c <VL53L0X_set_reference_spads+0x98>
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	01 96       	adiw	r24, 0x01	; 1
    2a90:	9f 93       	push	r25
    2a92:	8f 93       	push	r24
    2a94:	bf 92       	push	r11
    2a96:	0f 93       	push	r16
    2a98:	1f 93       	push	r17
    2a9a:	6f 92       	push	r6
    2a9c:	ff 92       	push	r15
    2a9e:	ef 92       	push	r14
    2aa0:	df 92       	push	r13
    2aa2:	cf 92       	push	r12
    2aa4:	0f 2e       	mov	r0, r31
    2aa6:	f4 eb       	ldi	r31, 0xB4	; 180
    2aa8:	af 2e       	mov	r10, r31
    2aaa:	b1 2c       	mov	r11, r1
    2aac:	c1 2c       	mov	r12, r1
    2aae:	d1 2c       	mov	r13, r1
    2ab0:	f0 2d       	mov	r31, r0
    2ab2:	16 e0       	ldi	r17, 0x06	; 6
    2ab4:	e1 2e       	mov	r14, r17
    2ab6:	f1 2c       	mov	r15, r1
    2ab8:	00 e0       	ldi	r16, 0x00	; 0
    2aba:	10 e0       	ldi	r17, 0x00	; 0
    2abc:	94 01       	movw	r18, r8
    2abe:	2f 5e       	subi	r18, 0xEF	; 239
    2ac0:	3e 4f       	sbci	r19, 0xFE	; 254
    2ac2:	a4 01       	movw	r20, r8
    2ac4:	49 5e       	subi	r20, 0xE9	; 233
    2ac6:	5e 4f       	sbci	r21, 0xFE	; 254
    2ac8:	67 2d       	mov	r22, r7
    2aca:	c4 01       	movw	r24, r8
    2acc:	42 de       	rcall	.-892    	; 0x2752 <enable_ref_spads>
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	81 11       	cpse	r24, r1
    2ada:	09 c0       	rjmp	.+18     	; 0x2aee <VL53L0X_set_reference_spads+0x12a>
    2adc:	f4 01       	movw	r30, r8
    2ade:	ec 5f       	subi	r30, 0xFC	; 252
    2ae0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ae2:	91 e0       	ldi	r25, 0x01	; 1
    2ae4:	90 83       	st	Z, r25
    2ae6:	32 97       	sbiw	r30, 0x02	; 2
    2ae8:	60 82       	st	Z, r6
    2aea:	31 96       	adiw	r30, 0x01	; 1
    2aec:	70 82       	st	Z, r7
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	bf 90       	pop	r11
    2b08:	af 90       	pop	r10
    2b0a:	9f 90       	pop	r9
    2b0c:	8f 90       	pop	r8
    2b0e:	7f 90       	pop	r7
    2b10:	6f 90       	pop	r6
    2b12:	08 95       	ret

00002b14 <VL53L0X_perform_single_ref_calibration>:


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
    2b14:	cf 93       	push	r28
    2b16:	df 93       	push	r29
    2b18:	ec 01       	movw	r28, r24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
    2b1a:	46 2f       	mov	r20, r22
    2b1c:	41 60       	ori	r20, 0x01	; 1
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
    2b24:	81 11       	cpse	r24, r1
    2b26:	10 c0       	rjmp	.+32     	; 0x2b48 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
    2b28:	ce 01       	movw	r24, r28
    2b2a:	91 d3       	rcall	.+1826   	; 0x324e <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
    2b2c:	81 11       	cpse	r24, r1
    2b2e:	0c c0       	rjmp	.+24     	; 0x2b48 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	ba 01       	movw	r22, r20
    2b36:	ce 01       	movw	r24, r28
    2b38:	59 da       	rcall	.-2894   	; 0x1fec <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
    2b3a:	81 11       	cpse	r24, r1
    2b3c:	05 c0       	rjmp	.+10     	; 0x2b48 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
    2b3e:	40 e0       	ldi	r20, 0x00	; 0
    2b40:	60 e0       	ldi	r22, 0x00	; 0
    2b42:	ce 01       	movw	r24, r28
    2b44:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>

	return Status;
}
    2b48:	df 91       	pop	r29
    2b4a:	cf 91       	pop	r28
    2b4c:	08 95       	ret

00002b4e <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
    2b4e:	5f 92       	push	r5
    2b50:	6f 92       	push	r6
    2b52:	7f 92       	push	r7
    2b54:	8f 92       	push	r8
    2b56:	9f 92       	push	r9
    2b58:	af 92       	push	r10
    2b5a:	bf 92       	push	r11
    2b5c:	cf 92       	push	r12
    2b5e:	df 92       	push	r13
    2b60:	ef 92       	push	r14
    2b62:	ff 92       	push	r15
    2b64:	0f 93       	push	r16
    2b66:	1f 93       	push	r17
    2b68:	cf 93       	push	r28
    2b6a:	df 93       	push	r29
    2b6c:	1f 92       	push	r1
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	4c 01       	movw	r8, r24
    2b74:	d6 2e       	mov	r13, r22
    2b76:	54 2e       	mov	r5, r20
    2b78:	b2 2e       	mov	r11, r18
    2b7a:	38 01       	movw	r6, r16
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
    2b7c:	19 82       	std	Y+1, r1	; 0x01

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2b7e:	41 e0       	ldi	r20, 0x01	; 1
    2b80:	6f ef       	ldi	r22, 0xFF	; 255
    2b82:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2b86:	18 2f       	mov	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
    2b88:	40 e0       	ldi	r20, 0x00	; 0
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	c4 01       	movw	r24, r8
    2b8e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2b92:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	6f ef       	ldi	r22, 0xFF	; 255
    2b98:	c4 01       	movw	r24, r8
    2b9a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2b9e:	18 2b       	or	r17, r24

	if (read_not_write) {
    2ba0:	dd 20       	and	r13, r13
    2ba2:	99 f0       	breq	.+38     	; 0x2bca <VL53L0X_ref_calibration_io+0x7c>
		if (vhv_enable)
    2ba4:	cc 20       	and	r12, r12
    2ba6:	31 f0       	breq	.+12     	; 0x2bb4 <VL53L0X_ref_calibration_io+0x66>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
    2ba8:	a3 01       	movw	r20, r6
    2baa:	6b ec       	ldi	r22, 0xCB	; 203
    2bac:	c4 01       	movw	r24, r8
    2bae:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    2bb2:	18 2b       	or	r17, r24
		if (phase_enable)
    2bb4:	aa 20       	and	r10, r10
    2bb6:	d1 f0       	breq	.+52     	; 0x2bec <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
    2bb8:	ae 01       	movw	r20, r28
    2bba:	4f 5f       	subi	r20, 0xFF	; 255
    2bbc:	5f 4f       	sbci	r21, 0xFF	; 255
    2bbe:	6e ee       	ldi	r22, 0xEE	; 238
    2bc0:	c4 01       	movw	r24, r8
    2bc2:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    2bc6:	18 2b       	or	r17, r24
    2bc8:	11 c0       	rjmp	.+34     	; 0x2bec <VL53L0X_ref_calibration_io+0x9e>
	} else {
		if (vhv_enable)
    2bca:	cc 20       	and	r12, r12
    2bcc:	31 f0       	breq	.+12     	; 0x2bda <VL53L0X_ref_calibration_io+0x8c>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
    2bce:	45 2d       	mov	r20, r5
    2bd0:	6b ec       	ldi	r22, 0xCB	; 203
    2bd2:	c4 01       	movw	r24, r8
    2bd4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2bd8:	18 2b       	or	r17, r24
		if (phase_enable)
    2bda:	aa 20       	and	r10, r10
    2bdc:	39 f0       	breq	.+14     	; 0x2bec <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
    2bde:	2b 2d       	mov	r18, r11
    2be0:	40 e8       	ldi	r20, 0x80	; 128
    2be2:	6e ee       	ldi	r22, 0xEE	; 238
    2be4:	c4 01       	movw	r24, r8
    2be6:	0e 94 e9 2b 	call	0x57d2	; 0x57d2 <VL53L0X_UpdateByte>
    2bea:	18 2b       	or	r17, r24
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	6f ef       	ldi	r22, 0xFF	; 255
    2bf0:	c4 01       	movw	r24, r8
    2bf2:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2bf6:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	c4 01       	movw	r24, r8
    2bfe:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    2c02:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	6f ef       	ldi	r22, 0xFF	; 255
    2c08:	c4 01       	movw	r24, r8
    2c0a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
    2c0e:	99 81       	ldd	r25, Y+1	; 0x01
    2c10:	9f 7e       	andi	r25, 0xEF	; 239
    2c12:	f7 01       	movw	r30, r14
    2c14:	90 83       	st	Z, r25

	return Status;
}
    2c16:	81 2b       	or	r24, r17
    2c18:	0f 90       	pop	r0
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	bf 90       	pop	r11
    2c2c:	af 90       	pop	r10
    2c2e:	9f 90       	pop	r9
    2c30:	8f 90       	pop	r8
    2c32:	7f 90       	pop	r7
    2c34:	6f 90       	pop	r6
    2c36:	5f 90       	pop	r5
    2c38:	08 95       	ret

00002c3a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
    2c3a:	8f 92       	push	r8
    2c3c:	9f 92       	push	r9
    2c3e:	af 92       	push	r10
    2c40:	bf 92       	push	r11
    2c42:	cf 92       	push	r12
    2c44:	df 92       	push	r13
    2c46:	ef 92       	push	r14
    2c48:	ff 92       	push	r15
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	1f 92       	push	r1
    2c54:	cd b7       	in	r28, 0x3d	; 61
    2c56:	de b7       	in	r29, 0x3e	; 62
    2c58:	4c 01       	movw	r8, r24
    2c5a:	8b 01       	movw	r16, r22
    2c5c:	f4 2e       	mov	r15, r20
    2c5e:	d2 2e       	mov	r13, r18
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
    2c60:	19 82       	std	Y+1, r1	; 0x01

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    2c62:	22 23       	and	r18, r18
    2c64:	29 f0       	breq	.+10     	; 0x2c70 <VL53L0X_perform_vhv_calibration+0x36>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2c66:	fc 01       	movw	r30, r24
    2c68:	e3 5e       	subi	r30, 0xE3	; 227
    2c6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c6c:	b0 80       	ld	r11, Z
    2c6e:	01 c0       	rjmp	.+2      	; 0x2c72 <VL53L0X_perform_vhv_calibration+0x38>
VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
    2c70:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
    2c72:	41 e0       	ldi	r20, 0x01	; 1
    2c74:	61 e0       	ldi	r22, 0x01	; 1
    2c76:	c4 01       	movw	r24, r8
    2c78:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2c7c:	81 11       	cpse	r24, r1
    2c7e:	14 c0       	rjmp	.+40     	; 0x2ca8 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
    2c80:	60 e4       	ldi	r22, 0x40	; 64
    2c82:	c4 01       	movw	r24, r8
    2c84:	47 df       	rcall	.-370    	; 0x2b14 <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    2c86:	81 11       	cpse	r24, r1
    2c88:	0f c0       	rjmp	.+30     	; 0x2ca8 <VL53L0X_perform_vhv_calibration+0x6e>
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	f9 12       	cpse	r15, r25
    2c8e:	0c c0       	rjmp	.+24     	; 0x2ca8 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    2c90:	a1 2c       	mov	r10, r1
    2c92:	cc 24       	eor	r12, r12
    2c94:	c3 94       	inc	r12
    2c96:	fe 01       	movw	r30, r28
    2c98:	31 96       	adiw	r30, 0x01	; 1
    2c9a:	7f 01       	movw	r14, r30
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	40 e0       	ldi	r20, 0x00	; 0
    2ca0:	61 e0       	ldi	r22, 0x01	; 1
    2ca2:	c4 01       	movw	r24, r8
    2ca4:	54 df       	rcall	.-344    	; 0x2b4e <VL53L0X_ref_calibration_io>
    2ca6:	02 c0       	rjmp	.+4      	; 0x2cac <VL53L0X_perform_vhv_calibration+0x72>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
    2ca8:	f8 01       	movw	r30, r16
    2caa:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    2cac:	81 11       	cpse	r24, r1
    2cae:	0d c0       	rjmp	.+26     	; 0x2cca <VL53L0X_perform_vhv_calibration+0x90>
    2cb0:	dd 20       	and	r13, r13
    2cb2:	59 f0       	breq	.+22     	; 0x2cca <VL53L0X_perform_vhv_calibration+0x90>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    2cb4:	4b 2d       	mov	r20, r11
    2cb6:	61 e0       	ldi	r22, 0x01	; 1
    2cb8:	c4 01       	movw	r24, r8
    2cba:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2cbe:	81 11       	cpse	r24, r1
    2cc0:	04 c0       	rjmp	.+8      	; 0x2cca <VL53L0X_perform_vhv_calibration+0x90>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2cc2:	f4 01       	movw	r30, r8
    2cc4:	e3 5e       	subi	r30, 0xE3	; 227
    2cc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc8:	b0 82       	st	Z, r11

	}

	return Status;
}
    2cca:	0f 90       	pop	r0
    2ccc:	df 91       	pop	r29
    2cce:	cf 91       	pop	r28
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	ff 90       	pop	r15
    2cd6:	ef 90       	pop	r14
    2cd8:	df 90       	pop	r13
    2cda:	cf 90       	pop	r12
    2cdc:	bf 90       	pop	r11
    2cde:	af 90       	pop	r10
    2ce0:	9f 90       	pop	r9
    2ce2:	8f 90       	pop	r8
    2ce4:	08 95       	ret

00002ce6 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
    2ce6:	8f 92       	push	r8
    2ce8:	9f 92       	push	r9
    2cea:	af 92       	push	r10
    2cec:	bf 92       	push	r11
    2cee:	cf 92       	push	r12
    2cf0:	df 92       	push	r13
    2cf2:	ef 92       	push	r14
    2cf4:	ff 92       	push	r15
    2cf6:	0f 93       	push	r16
    2cf8:	1f 93       	push	r17
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
    2cfe:	1f 92       	push	r1
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	4c 01       	movw	r8, r24
    2d06:	7b 01       	movw	r14, r22
    2d08:	14 2f       	mov	r17, r20
    2d0a:	d2 2e       	mov	r13, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    2d0c:	22 23       	and	r18, r18
    2d0e:	29 f0       	breq	.+10     	; 0x2d1a <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2d10:	fc 01       	movw	r30, r24
    2d12:	e3 5e       	subi	r30, 0xE3	; 227
    2d14:	fe 4f       	sbci	r31, 0xFE	; 254
    2d16:	b0 80       	ld	r11, Z
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <VL53L0X_perform_phase_calibration+0x36>
VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
    2d1a:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
    2d1c:	42 e0       	ldi	r20, 0x02	; 2
    2d1e:	61 e0       	ldi	r22, 0x01	; 1
    2d20:	c4 01       	movw	r24, r8
    2d22:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2d26:	81 11       	cpse	r24, r1
    2d28:	13 c0       	rjmp	.+38     	; 0x2d50 <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	c4 01       	movw	r24, r8
    2d2e:	f2 de       	rcall	.-540    	; 0x2b14 <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    2d30:	81 11       	cpse	r24, r1
    2d32:	0e c0       	rjmp	.+28     	; 0x2d50 <VL53L0X_perform_phase_calibration+0x6a>
    2d34:	11 30       	cpi	r17, 0x01	; 1
    2d36:	61 f4       	brne	.+24     	; 0x2d50 <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    2d38:	aa 24       	eor	r10, r10
    2d3a:	a3 94       	inc	r10
    2d3c:	c1 2c       	mov	r12, r1
    2d3e:	8e 01       	movw	r16, r28
    2d40:	0f 5f       	subi	r16, 0xFF	; 255
    2d42:	1f 4f       	sbci	r17, 0xFF	; 255
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	40 e0       	ldi	r20, 0x00	; 0
    2d48:	61 e0       	ldi	r22, 0x01	; 1
    2d4a:	c4 01       	movw	r24, r8
    2d4c:	00 df       	rcall	.-512    	; 0x2b4e <VL53L0X_ref_calibration_io>
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <VL53L0X_perform_phase_calibration+0x6e>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
    2d50:	f7 01       	movw	r30, r14
    2d52:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    2d54:	81 11       	cpse	r24, r1
    2d56:	0d c0       	rjmp	.+26     	; 0x2d72 <VL53L0X_perform_phase_calibration+0x8c>
    2d58:	dd 20       	and	r13, r13
    2d5a:	59 f0       	breq	.+22     	; 0x2d72 <VL53L0X_perform_phase_calibration+0x8c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    2d5c:	4b 2d       	mov	r20, r11
    2d5e:	61 e0       	ldi	r22, 0x01	; 1
    2d60:	c4 01       	movw	r24, r8
    2d62:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2d66:	81 11       	cpse	r24, r1
    2d68:	04 c0       	rjmp	.+8      	; 0x2d72 <VL53L0X_perform_phase_calibration+0x8c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2d6a:	f4 01       	movw	r30, r8
    2d6c:	e3 5e       	subi	r30, 0xE3	; 227
    2d6e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d70:	b0 82       	st	Z, r11

	}

	return Status;
}
    2d72:	0f 90       	pop	r0
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	df 90       	pop	r13
    2d82:	cf 90       	pop	r12
    2d84:	bf 90       	pop	r11
    2d86:	af 90       	pop	r10
    2d88:	9f 90       	pop	r9
    2d8a:	8f 90       	pop	r8
    2d8c:	08 95       	ret

00002d8e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
    2d8e:	ef 92       	push	r14
    2d90:	ff 92       	push	r15
    2d92:	0f 93       	push	r16
    2d94:	1f 93       	push	r17
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
    2d9a:	ec 01       	movw	r28, r24
    2d9c:	7a 01       	movw	r14, r20
    2d9e:	12 2f       	mov	r17, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2da0:	fc 01       	movw	r30, r24
    2da2:	e3 5e       	subi	r30, 0xE3	; 227
    2da4:	fe 4f       	sbci	r31, 0xFE	; 254
    2da6:	00 81       	ld	r16, Z

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	41 2f       	mov	r20, r17
    2dac:	46 df       	rcall	.-372    	; 0x2c3a <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
    2dae:	81 11       	cpse	r24, r1
    2db0:	11 c0       	rjmp	.+34     	; 0x2dd4 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	41 2f       	mov	r20, r17
    2db6:	b7 01       	movw	r22, r14
    2db8:	ce 01       	movw	r24, r28
    2dba:	95 df       	rcall	.-214    	; 0x2ce6 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
    2dbc:	81 11       	cpse	r24, r1
    2dbe:	0a c0       	rjmp	.+20     	; 0x2dd4 <VL53L0X_perform_ref_calibration+0x46>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    2dc0:	40 2f       	mov	r20, r16
    2dc2:	61 e0       	ldi	r22, 0x01	; 1
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2dca:	81 11       	cpse	r24, r1
    2dcc:	03 c0       	rjmp	.+6      	; 0x2dd4 <VL53L0X_perform_ref_calibration+0x46>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2dce:	c3 5e       	subi	r28, 0xE3	; 227
    2dd0:	de 4f       	sbci	r29, 0xFE	; 254
    2dd2:	08 83       	st	Y, r16

	}

	return Status;
}
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	ff 90       	pop	r15
    2dde:	ef 90       	pop	r14
    2de0:	08 95       	ret

00002de2 <VL53L0X_perform_ref_spad_management>:
}

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
    2de2:	2f 92       	push	r2
    2de4:	3f 92       	push	r3
    2de6:	4f 92       	push	r4
    2de8:	5f 92       	push	r5
    2dea:	6f 92       	push	r6
    2dec:	7f 92       	push	r7
    2dee:	8f 92       	push	r8
    2df0:	9f 92       	push	r9
    2df2:	af 92       	push	r10
    2df4:	bf 92       	push	r11
    2df6:	cf 92       	push	r12
    2df8:	df 92       	push	r13
    2dfa:	ef 92       	push	r14
    2dfc:	ff 92       	push	r15
    2dfe:	0f 93       	push	r16
    2e00:	1f 93       	push	r17
    2e02:	cf 93       	push	r28
    2e04:	df 93       	push	r29
    2e06:	cd b7       	in	r28, 0x3d	; 61
    2e08:	de b7       	in	r29, 0x3e	; 62
    2e0a:	a7 97       	sbiw	r28, 0x27	; 39
    2e0c:	0f b6       	in	r0, 0x3f	; 63
    2e0e:	f8 94       	cli
    2e10:	de bf       	out	0x3e, r29	; 62
    2e12:	0f be       	out	0x3f, r0	; 63
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	4c 01       	movw	r8, r24
    2e18:	7c a3       	std	Y+36, r23	; 0x24
    2e1a:	6b a3       	std	Y+35, r22	; 0x23
    2e1c:	5e a3       	std	Y+38, r21	; 0x26
    2e1e:	4d a3       	std	Y+37, r20	; 0x25
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
	uint32_t minimumSpadCount = 3;
	uint32_t maxSpadCount = 44;
	uint32_t currentSpadIndex = 0;
	uint32_t lastSpadIndex = 0;
    2e20:	1f 82       	std	Y+7, r1	; 0x07
    2e22:	18 86       	std	Y+8, r1	; 0x08
    2e24:	19 86       	std	Y+9, r1	; 0x09
    2e26:	1a 86       	std	Y+10, r1	; 0x0a
	int32_t nextGoodSpad = 0;
    2e28:	1b 86       	std	Y+11, r1	; 0x0b
    2e2a:	1c 86       	std	Y+12, r1	; 0x0c
    2e2c:	1d 86       	std	Y+13, r1	; 0x0d
    2e2e:	1e 86       	std	Y+14, r1	; 0x0e
	uint32_t index = 0;
	uint32_t spadArraySize = 6;
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
    2e30:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t PhaseCal = 0;
    2e32:	1a 8a       	std	Y+18, r1	; 0x12
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
    2e34:	fc 01       	movw	r30, r24
    2e36:	e8 5d       	subi	r30, 0xD8	; 216
    2e38:	fe 4f       	sbci	r31, 0xFE	; 254
    2e3a:	60 80       	ld	r6, Z
    2e3c:	71 80       	ldd	r7, Z+1	; 0x01
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
    2e3e:	77 97       	sbiw	r30, 0x17	; 23
    2e40:	10 82       	st	Z, r1
    2e42:	31 96       	adiw	r30, 0x01	; 1
    2e44:	10 82       	st	Z, r1
    2e46:	31 96       	adiw	r30, 0x01	; 1
    2e48:	10 82       	st	Z, r1
    2e4a:	31 96       	adiw	r30, 0x01	; 1
    2e4c:	10 82       	st	Z, r1
    2e4e:	31 96       	adiw	r30, 0x01	; 1
    2e50:	10 82       	st	Z, r1
    2e52:	31 96       	adiw	r30, 0x01	; 1
    2e54:	10 82       	st	Z, r1


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	6f ef       	ldi	r22, 0xFF	; 255
    2e5a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2e5e:	81 11       	cpse	r24, r1
    2e60:	1a c0       	rjmp	.+52     	; 0x2e96 <VL53L0X_perform_ref_spad_management+0xb4>
		Status = VL53L0X_WrByte(Dev,
    2e62:	40 e0       	ldi	r20, 0x00	; 0
    2e64:	6f e4       	ldi	r22, 0x4F	; 79
    2e66:	c4 01       	movw	r24, r8
    2e68:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
    2e6c:	81 11       	cpse	r24, r1
    2e6e:	1a c0       	rjmp	.+52     	; 0x2ea4 <VL53L0X_perform_ref_spad_management+0xc2>
		Status = VL53L0X_WrByte(Dev,
    2e70:	4c e2       	ldi	r20, 0x2C	; 44
    2e72:	6e e4       	ldi	r22, 0x4E	; 78
    2e74:	c4 01       	movw	r24, r8
    2e76:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
    2e7a:	81 11       	cpse	r24, r1
    2e7c:	1e c0       	rjmp	.+60     	; 0x2eba <VL53L0X_perform_ref_spad_management+0xd8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2e7e:	40 e0       	ldi	r20, 0x00	; 0
    2e80:	6f ef       	ldi	r22, 0xFF	; 255
    2e82:	c4 01       	movw	r24, r8
    2e84:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    2e88:	81 11       	cpse	r24, r1
    2e8a:	44 c0       	rjmp	.+136    	; 0x2f14 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_WrByte(Dev,
    2e8c:	44 eb       	ldi	r20, 0xB4	; 180
    2e8e:	66 eb       	ldi	r22, 0xB6	; 182
    2e90:	c4 01       	movw	r24, r8
    2e92:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
    2e96:	81 11       	cpse	r24, r1
    2e98:	c1 c1       	rjmp	.+898    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
		Status = VL53L0X_WrByte(Dev,
    2e9a:	40 e0       	ldi	r20, 0x00	; 0
    2e9c:	60 e8       	ldi	r22, 0x80	; 128
    2e9e:	c4 01       	movw	r24, r8
    2ea0:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
    2ea4:	81 11       	cpse	r24, r1
    2ea6:	76 c1       	rjmp	.+748    	; 0x3194 <VL53L0X_perform_ref_spad_management+0x3b2>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
    2ea8:	20 e0       	ldi	r18, 0x00	; 0
    2eaa:	ae 01       	movw	r20, r28
    2eac:	4e 5e       	subi	r20, 0xEE	; 238
    2eae:	5f 4f       	sbci	r21, 0xFF	; 255
    2eb0:	be 01       	movw	r22, r28
    2eb2:	6f 5e       	subi	r22, 0xEF	; 239
    2eb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb6:	c4 01       	movw	r24, r8
    2eb8:	6a df       	rcall	.-300    	; 0x2d8e <VL53L0X_perform_ref_calibration>
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
    2eba:	81 11       	cpse	r24, r1
    2ebc:	af c1       	rjmp	.+862    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
		lastSpadIndex = currentSpadIndex;
    2ebe:	1f 82       	std	Y+7, r1	; 0x07
    2ec0:	18 86       	std	Y+8, r1	; 0x08
    2ec2:	19 86       	std	Y+9, r1	; 0x09
    2ec4:	1a 86       	std	Y+10, r1	; 0x0a
		needAptSpads = 0;
		Status = enable_ref_spads(Dev,
    2ec6:	ce 01       	movw	r24, r28
    2ec8:	07 96       	adiw	r24, 0x07	; 7
    2eca:	9f 93       	push	r25
    2ecc:	8f 93       	push	r24
    2ece:	1f 92       	push	r1
    2ed0:	1f 92       	push	r1
    2ed2:	1f 92       	push	r1
    2ed4:	83 e0       	ldi	r24, 0x03	; 3
    2ed6:	8f 93       	push	r24
    2ed8:	1f 92       	push	r1
    2eda:	1f 92       	push	r1
    2edc:	1f 92       	push	r1
    2ede:	1f 92       	push	r1
    2ee0:	0f 2e       	mov	r0, r31
    2ee2:	f4 eb       	ldi	r31, 0xB4	; 180
    2ee4:	af 2e       	mov	r10, r31
    2ee6:	b1 2c       	mov	r11, r1
    2ee8:	c1 2c       	mov	r12, r1
    2eea:	d1 2c       	mov	r13, r1
    2eec:	f0 2d       	mov	r31, r0
    2eee:	16 e0       	ldi	r17, 0x06	; 6
    2ef0:	e1 2e       	mov	r14, r17
    2ef2:	f1 2c       	mov	r15, r1
    2ef4:	00 e0       	ldi	r16, 0x00	; 0
    2ef6:	10 e0       	ldi	r17, 0x00	; 0
    2ef8:	94 01       	movw	r18, r8
    2efa:	2f 5e       	subi	r18, 0xEF	; 239
    2efc:	3e 4f       	sbci	r19, 0xFE	; 254
    2efe:	a4 01       	movw	r20, r8
    2f00:	49 5e       	subi	r20, 0xE9	; 233
    2f02:	5e 4f       	sbci	r21, 0xFE	; 254
    2f04:	60 e0       	ldi	r22, 0x00	; 0
    2f06:	c4 01       	movw	r24, r8
    2f08:	24 dc       	rcall	.-1976   	; 0x2752 <enable_ref_spads>
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
    2f14:	81 11       	cpse	r24, r1
    2f16:	82 c1       	rjmp	.+772    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
		currentSpadIndex = lastSpadIndex;
    2f18:	af 80       	ldd	r10, Y+7	; 0x07
    2f1a:	b8 84       	ldd	r11, Y+8	; 0x08
    2f1c:	c9 84       	ldd	r12, Y+9	; 0x09
    2f1e:	da 84       	ldd	r13, Y+10	; 0x0a

		Status = perform_ref_signal_measurement(Dev,
    2f20:	be 01       	movw	r22, r28
    2f22:	61 5f       	subi	r22, 0xF1	; 241
    2f24:	7f 4f       	sbci	r23, 0xFF	; 255
    2f26:	c4 01       	movw	r24, r8
    2f28:	fd dc       	rcall	.-1542   	; 0x2924 <perform_ref_signal_measurement>
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
    2f2a:	81 11       	cpse	r24, r1
    2f2c:	77 c1       	rjmp	.+750    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
    2f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f30:	98 89       	ldd	r25, Y+16	; 0x10
    2f32:	68 16       	cp	r6, r24
    2f34:	79 06       	cpc	r7, r25
    2f36:	08 f0       	brcs	.+2      	; 0x2f3a <VL53L0X_perform_ref_spad_management+0x158>
    2f38:	52 c1       	rjmp	.+676    	; 0x31de <VL53L0X_perform_ref_spad_management+0x3fc>
			(peakSignalRateRef > targetRefRate)) {
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
    2f3a:	f4 01       	movw	r30, r8
    2f3c:	ef 5e       	subi	r30, 0xEF	; 239
    2f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f40:	10 82       	st	Z, r1
    2f42:	31 96       	adiw	r30, 0x01	; 1
    2f44:	10 82       	st	Z, r1
    2f46:	31 96       	adiw	r30, 0x01	; 1
    2f48:	10 82       	st	Z, r1
    2f4a:	31 96       	adiw	r30, 0x01	; 1
    2f4c:	10 82       	st	Z, r1
    2f4e:	31 96       	adiw	r30, 0x01	; 1
    2f50:	10 82       	st	Z, r1
    2f52:	31 96       	adiw	r30, 0x01	; 1
    2f54:	10 82       	st	Z, r1
    2f56:	05 c0       	rjmp	.+10     	; 0x2f62 <VL53L0X_perform_ref_spad_management+0x180>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
    2f58:	3f ef       	ldi	r19, 0xFF	; 255
    2f5a:	a3 1a       	sub	r10, r19
    2f5c:	b3 0a       	sbc	r11, r19
    2f5e:	c3 0a       	sbc	r12, r19
    2f60:	d3 0a       	sbc	r13, r19
			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
    2f62:	c6 01       	movw	r24, r12
    2f64:	b5 01       	movw	r22, r10
    2f66:	6c 54       	subi	r22, 0x4C	; 76
    2f68:	7f 4f       	sbci	r23, 0xFF	; 255
    2f6a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f6e:	8a db       	rcall	.-2284   	; 0x2684 <is_aperture>
    2f70:	81 11       	cpse	r24, r1
    2f72:	06 c0       	rjmp	.+12     	; 0x2f80 <VL53L0X_perform_ref_spad_management+0x19e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
    2f74:	4c e2       	ldi	r20, 0x2C	; 44
    2f76:	a4 16       	cp	r10, r20
    2f78:	b1 04       	cpc	r11, r1
    2f7a:	c1 04       	cpc	r12, r1
    2f7c:	d1 04       	cpc	r13, r1
    2f7e:	60 f3       	brcs	.-40     	; 0x2f58 <VL53L0X_perform_ref_spad_management+0x176>
				currentSpadIndex++;
			}

			needAptSpads = 1;

			Status = enable_ref_spads(Dev,
    2f80:	ce 01       	movw	r24, r28
    2f82:	07 96       	adiw	r24, 0x07	; 7
    2f84:	9f 93       	push	r25
    2f86:	8f 93       	push	r24
    2f88:	1f 92       	push	r1
    2f8a:	1f 92       	push	r1
    2f8c:	1f 92       	push	r1
    2f8e:	83 e0       	ldi	r24, 0x03	; 3
    2f90:	8f 93       	push	r24
    2f92:	df 92       	push	r13
    2f94:	cf 92       	push	r12
    2f96:	bf 92       	push	r11
    2f98:	af 92       	push	r10
    2f9a:	0f 2e       	mov	r0, r31
    2f9c:	f4 eb       	ldi	r31, 0xB4	; 180
    2f9e:	af 2e       	mov	r10, r31
    2fa0:	b1 2c       	mov	r11, r1
    2fa2:	c1 2c       	mov	r12, r1
    2fa4:	d1 2c       	mov	r13, r1
    2fa6:	f0 2d       	mov	r31, r0
    2fa8:	16 e0       	ldi	r17, 0x06	; 6
    2faa:	e1 2e       	mov	r14, r17
    2fac:	f1 2c       	mov	r15, r1
    2fae:	00 e0       	ldi	r16, 0x00	; 0
    2fb0:	10 e0       	ldi	r17, 0x00	; 0
    2fb2:	94 01       	movw	r18, r8
    2fb4:	2f 5e       	subi	r18, 0xEF	; 239
    2fb6:	3e 4f       	sbci	r19, 0xFE	; 254
    2fb8:	a4 01       	movw	r20, r8
    2fba:	49 5e       	subi	r20, 0xE9	; 233
    2fbc:	5e 4f       	sbci	r21, 0xFE	; 254
    2fbe:	61 e0       	ldi	r22, 0x01	; 1
    2fc0:	c4 01       	movw	r24, r8
    2fc2:	c7 db       	rcall	.-2162   	; 0x2752 <enable_ref_spads>
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    2fc4:	0f b6       	in	r0, 0x3f	; 63
    2fc6:	f8 94       	cli
    2fc8:	de bf       	out	0x3e, r29	; 62
    2fca:	0f be       	out	0x3f, r0	; 63
    2fcc:	cd bf       	out	0x3d, r28	; 61
    2fce:	81 11       	cpse	r24, r1
    2fd0:	25 c1       	rjmp	.+586    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
				currentSpadIndex = lastSpadIndex;
    2fd2:	af 80       	ldd	r10, Y+7	; 0x07
    2fd4:	b8 84       	ldd	r11, Y+8	; 0x08
    2fd6:	c9 84       	ldd	r12, Y+9	; 0x09
				Status = perform_ref_signal_measurement(Dev,
    2fd8:	da 84       	ldd	r13, Y+10	; 0x0a
    2fda:	be 01       	movw	r22, r28
    2fdc:	61 5f       	subi	r22, 0xF1	; 241
    2fde:	7f 4f       	sbci	r23, 0xFF	; 255
    2fe0:	c4 01       	movw	r24, r8
    2fe2:	a0 dc       	rcall	.-1728   	; 0x2924 <perform_ref_signal_measurement>
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
    2fe4:	81 11       	cpse	r24, r1
    2fe6:	1a c1       	rjmp	.+564    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
    2fe8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fea:	98 89       	ldd	r25, Y+16	; 0x10
    2fec:	68 16       	cp	r6, r24
    2fee:	79 06       	cpc	r7, r25
    2ff0:	08 f0       	brcs	.+2      	; 0x2ff4 <VL53L0X_perform_ref_spad_management+0x212>
    2ff2:	fe c0       	rjmp	.+508    	; 0x31f0 <VL53L0X_perform_ref_spad_management+0x40e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
    2ff4:	b1 e0       	ldi	r27, 0x01	; 1
    2ff6:	bf a3       	std	Y+39, r27	; 0x27
					refSpadCount_int = minimumSpadCount;
    2ff8:	0f 2e       	mov	r0, r31
    2ffa:	f3 e0       	ldi	r31, 0x03	; 3
    2ffc:	2f 2e       	mov	r2, r31
    2ffe:	31 2c       	mov	r3, r1
    3000:	41 2c       	mov	r4, r1
    3002:	51 2c       	mov	r5, r1
    3004:	f0 2d       	mov	r31, r0
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    3006:	21 e0       	ldi	r18, 0x01	; 1
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	40 e0       	ldi	r20, 0x00	; 0
    300c:	50 e0       	ldi	r21, 0x00	; 0
    300e:	29 8f       	std	Y+25, r18	; 0x19
    3010:	3a 8f       	std	Y+26, r19	; 0x1a
    3012:	4b 8f       	std	Y+27, r20	; 0x1b
    3014:	5c 8f       	std	Y+28, r21	; 0x1c
    3016:	f8 c0       	rjmp	.+496    	; 0x3208 <VL53L0X_perform_ref_spad_management+0x426>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
    3018:	39 8d       	ldd	r19, Y+25	; 0x19
    301a:	3f a3       	std	Y+39, r19	; 0x27
		refSpadCount_int	= minimumSpadCount;

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
    301c:	26 e0       	ldi	r18, 0x06	; 6
    301e:	f4 01       	movw	r30, r8
    3020:	ef 5e       	subi	r30, 0xEF	; 239
    3022:	fe 4f       	sbci	r31, 0xFE	; 254
    3024:	de 01       	movw	r26, r28
    3026:	11 96       	adiw	r26, 0x01	; 1
    3028:	01 90       	ld	r0, Z+
    302a:	0d 92       	st	X+, r0
    302c:	2a 95       	dec	r18
    302e:	e1 f7       	brne	.-8      	; 0x3028 <VL53L0X_perform_ref_spad_management+0x246>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
    3030:	86 19       	sub	r24, r6
    3032:	97 09       	sbc	r25, r7
    3034:	9c 01       	movw	r18, r24
    3036:	22 f4       	brpl	.+8      	; 0x3040 <VL53L0X_perform_ref_spad_management+0x25e>
    3038:	22 27       	eor	r18, r18
    303a:	33 27       	eor	r19, r19
    303c:	28 1b       	sub	r18, r24
    303e:	39 0b       	sbc	r19, r25
    3040:	c9 01       	movw	r24, r18
    3042:	33 0f       	add	r19, r19
    3044:	aa 0b       	sbc	r26, r26
    3046:	bb 0b       	sbc	r27, r27
    3048:	8f 8f       	std	Y+31, r24	; 0x1f
    304a:	98 a3       	std	Y+32, r25	; 0x20
    304c:	a9 a3       	std	Y+33, r26	; 0x21
    304e:	ba a3       	std	Y+34, r27	; 0x22
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
		refSpadCount_int	= minimumSpadCount;
    3050:	23 e0       	ldi	r18, 0x03	; 3
    3052:	30 e0       	ldi	r19, 0x00	; 0
    3054:	40 e0       	ldi	r20, 0x00	; 0
    3056:	50 e0       	ldi	r21, 0x00	; 0
    3058:	2d 8b       	std	Y+21, r18	; 0x15
    305a:	3e 8b       	std	Y+22, r19	; 0x16
    305c:	4f 8b       	std	Y+23, r20	; 0x17
    305e:	58 8f       	std	Y+24, r21	; 0x18
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
    3060:	a4 01       	movw	r20, r8
    3062:	49 5e       	subi	r20, 0xE9	; 233
    3064:	5e 4f       	sbci	r21, 0xFE	; 254
    3066:	5e 8f       	std	Y+30, r21	; 0x1e
    3068:	4d 8f       	std	Y+29, r20	; 0x1d
				break;
			}

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
    306a:	c4 01       	movw	r24, r8
    306c:	8f 5e       	subi	r24, 0xEF	; 239
    306e:	9e 4f       	sbci	r25, 0xFE	; 254
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
		lastSignalRateDiff = abs(peakSignalRateRef -
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
    3074:	de 01       	movw	r26, r28
    3076:	1b 96       	adiw	r26, 0x0b	; 11
    3078:	7d 01       	movw	r14, r26
    307a:	96 01       	movw	r18, r12
    307c:	85 01       	movw	r16, r10
    307e:	46 e0       	ldi	r20, 0x06	; 6
    3080:	50 e0       	ldi	r21, 0x00	; 0
    3082:	60 e0       	ldi	r22, 0x00	; 0
    3084:	70 e0       	ldi	r23, 0x00	; 0
    3086:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3088:	9e 8d       	ldd	r25, Y+30	; 0x1e
    308a:	7a da       	rcall	.-2828   	; 0x2580 <get_next_good_spad>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
    308c:	cb 84       	ldd	r12, Y+11	; 0x0b
    308e:	dc 84       	ldd	r13, Y+12	; 0x0c
    3090:	ed 84       	ldd	r14, Y+13	; 0x0d
    3092:	fe 84       	ldd	r15, Y+14	; 0x0e
    3094:	bf ef       	ldi	r27, 0xFF	; 255
    3096:	cb 16       	cp	r12, r27
    3098:	db 06       	cpc	r13, r27
    309a:	eb 06       	cpc	r14, r27
    309c:	fb 06       	cpc	r15, r27
    309e:	09 f4       	brne	.+2      	; 0x30a2 <VL53L0X_perform_ref_spad_management+0x2c0>
    30a0:	ba c0       	rjmp	.+372    	; 0x3216 <VL53L0X_perform_ref_spad_management+0x434>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			(refSpadCount_int)++;
    30a2:	2d 88       	ldd	r2, Y+21	; 0x15
    30a4:	3e 88       	ldd	r3, Y+22	; 0x16
    30a6:	4f 88       	ldd	r4, Y+23	; 0x17
    30a8:	58 8c       	ldd	r5, Y+24	; 0x18
    30aa:	ef ef       	ldi	r30, 0xFF	; 255
    30ac:	2e 1a       	sub	r2, r30
    30ae:	3e 0a       	sbc	r3, r30
    30b0:	4e 0a       	sbc	r4, r30

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
    30b2:	5e 0a       	sbc	r5, r30
    30b4:	c7 01       	movw	r24, r14
    30b6:	b6 01       	movw	r22, r12
    30b8:	6c 54       	subi	r22, 0x4C	; 76
    30ba:	7f 4f       	sbci	r23, 0xFF	; 255
    30bc:	8f 4f       	sbci	r24, 0xFF	; 255
    30be:	9f 4f       	sbci	r25, 0xFF	; 255
    30c0:	e1 da       	rcall	.-2622   	; 0x2684 <is_aperture>
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	a0 e0       	ldi	r26, 0x00	; 0
    30c6:	b0 e0       	ldi	r27, 0x00	; 0
    30c8:	29 8d       	ldd	r18, Y+25	; 0x19
    30ca:	3a 8d       	ldd	r19, Y+26	; 0x1a
    30cc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    30ce:	5c 8d       	ldd	r21, Y+28	; 0x1c
    30d0:	82 17       	cp	r24, r18
    30d2:	93 07       	cpc	r25, r19
    30d4:	a4 07       	cpc	r26, r20
    30d6:	b5 07       	cpc	r27, r21
    30d8:	09 f0       	breq	.+2      	; 0x30dc <VL53L0X_perform_ref_spad_management+0x2fa>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
    30da:	9f c0       	rjmp	.+318    	; 0x321a <VL53L0X_perform_ref_spad_management+0x438>
    30dc:	97 01       	movw	r18, r14
    30de:	86 01       	movw	r16, r12
    30e0:	46 e0       	ldi	r20, 0x06	; 6
    30e2:	50 e0       	ldi	r21, 0x00	; 0
    30e4:	60 e0       	ldi	r22, 0x00	; 0
    30e6:	70 e0       	ldi	r23, 0x00	; 0
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables,
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    30ec:	e8 da       	rcall	.-2608   	; 0x26be <enable_spad_bit>
    30ee:	81 11       	cpse	r24, r1
				currentSpadIndex++;
    30f0:	95 c0       	rjmp	.+298    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
    30f2:	56 01       	movw	r10, r12
    30f4:	67 01       	movw	r12, r14
    30f6:	3f ef       	ldi	r19, 0xFF	; 255
    30f8:	a3 1a       	sub	r10, r19
    30fa:	b3 0a       	sbc	r11, r19
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
    30fc:	c3 0a       	sbc	r12, r19
    30fe:	d3 0a       	sbc	r13, r19
    3100:	6b 89       	ldd	r22, Y+19	; 0x13
    3102:	7c 89       	ldd	r23, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables);
			}

			if (Status != VL53L0X_ERROR_NONE)
    3104:	c4 01       	movw	r24, r8
    3106:	0b db       	rcall	.-2538   	; 0x271e <set_ref_spad_map>
				break;

			Status = perform_ref_signal_measurement(Dev,
    3108:	81 11       	cpse	r24, r1
    310a:	88 c0       	rjmp	.+272    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
    310c:	be 01       	movw	r22, r28
    310e:	61 5f       	subi	r22, 0xF1	; 241
    3110:	7f 4f       	sbci	r23, 0xFF	; 255
    3112:	c4 01       	movw	r24, r8
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
    3114:	07 dc       	rcall	.-2034   	; 0x2924 <perform_ref_signal_measurement>
    3116:	81 11       	cpse	r24, r1
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    3118:	81 c0       	rjmp	.+258    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
    311a:	8f 85       	ldd	r24, Y+15	; 0x0f
    311c:	98 89       	ldd	r25, Y+16	; 0x10
    311e:	9c 01       	movw	r18, r24
    3120:	26 19       	sub	r18, r6
    3122:	37 09       	sbc	r19, r7
    3124:	a9 01       	movw	r20, r18
    3126:	22 f4       	brpl	.+8      	; 0x3130 <VL53L0X_perform_ref_spad_management+0x34e>
    3128:	44 27       	eor	r20, r20
    312a:	55 27       	eor	r21, r21
    312c:	42 1b       	sub	r20, r18
    312e:	53 0b       	sbc	r21, r19
    3130:	05 2e       	mov	r0, r21
    3132:	00 0c       	add	r0, r0
    3134:	66 0b       	sbc	r22, r22

			if (peakSignalRateRef > targetRefRate) {
    3136:	77 0b       	sbc	r23, r23
    3138:	68 16       	cp	r6, r24
    313a:	79 06       	cpc	r7, r25
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
    313c:	c8 f4       	brcc	.+50     	; 0x3170 <VL53L0X_perform_ref_spad_management+0x38e>
    313e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3140:	98 a1       	ldd	r25, Y+32	; 0x20
    3142:	a9 a1       	ldd	r26, Y+33	; 0x21
    3144:	ba a1       	ldd	r27, Y+34	; 0x22
    3146:	84 17       	cp	r24, r20
    3148:	95 07       	cpc	r25, r21
    314a:	a6 07       	cpc	r26, r22
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
    314c:	b7 07       	cpc	r27, r23
    314e:	68 f5       	brcc	.+90     	; 0x31aa <VL53L0X_perform_ref_spad_management+0x3c8>
    3150:	be 01       	movw	r22, r28
    3152:	6f 5f       	subi	r22, 0xFF	; 255
    3154:	7f 4f       	sbci	r23, 0xFF	; 255
    3156:	c4 01       	movw	r24, r8
							lastSpadArray);
					memcpy(
    3158:	e2 da       	rcall	.-2620   	; 0x271e <set_ref_spad_map>
    315a:	96 e0       	ldi	r25, 0x06	; 6
    315c:	fe 01       	movw	r30, r28
    315e:	31 96       	adiw	r30, 0x01	; 1
    3160:	d4 01       	movw	r26, r8
    3162:	af 5e       	subi	r26, 0xEF	; 239
    3164:	be 4f       	sbci	r27, 0xFE	; 254
    3166:	01 90       	ld	r0, Z+
    3168:	0d 92       	st	X+, r0
    316a:	9a 95       	dec	r25
    316c:	e1 f7       	brne	.-8      	; 0x3166 <VL53L0X_perform_ref_spad_management+0x384>
				}
				complete = 1;
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
				memcpy(lastSpadArray,
    316e:	17 c0       	rjmp	.+46     	; 0x319e <VL53L0X_perform_ref_spad_management+0x3bc>
    3170:	86 e0       	ldi	r24, 0x06	; 6
    3172:	eb 89       	ldd	r30, Y+19	; 0x13
    3174:	fc 89       	ldd	r31, Y+20	; 0x14
    3176:	de 01       	movw	r26, r28
    3178:	11 96       	adiw	r26, 0x01	; 1
    317a:	01 90       	ld	r0, Z+
    317c:	0d 92       	st	X+, r0
    317e:	8a 95       	dec	r24
			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			(refSpadCount_int)++;
    3180:	e1 f7       	brne	.-8      	; 0x317a <VL53L0X_perform_ref_spad_management+0x398>
    3182:	2d 8a       	std	Y+21, r2	; 0x15
    3184:	3e 8a       	std	Y+22, r3	; 0x16
    3186:	4f 8a       	std	Y+23, r4	; 0x17
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    3188:	58 8e       	std	Y+24, r5	; 0x18
    318a:	4f 8f       	std	Y+31, r20	; 0x1f
    318c:	58 a3       	std	Y+32, r21	; 0x20
    318e:	69 a3       	std	Y+33, r22	; 0x21
    3190:	7a a3       	std	Y+34, r23	; 0x22
    3192:	70 cf       	rjmp	.-288    	; 0x3074 <VL53L0X_perform_ref_spad_management+0x292>
    3194:	1f a2       	std	Y+39, r1	; 0x27
    3196:	1d 8a       	std	Y+21, r1	; 0x15
    3198:	1e 8a       	std	Y+22, r1	; 0x16
    319a:	1f 8a       	std	Y+23, r1	; 0x17
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
    319c:	18 8e       	std	Y+24, r1	; 0x18
    319e:	81 11       	cpse	r24, r1
    31a0:	3d c0       	rjmp	.+122    	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
    31a2:	2d 88       	ldd	r2, Y+21	; 0x15
    31a4:	3e 88       	ldd	r3, Y+22	; 0x16
    31a6:	4f 88       	ldd	r4, Y+23	; 0x17
		*refSpadCount = refSpadCount_int;
    31a8:	58 8c       	ldd	r5, Y+24	; 0x18
    31aa:	ab a1       	ldd	r26, Y+35	; 0x23
    31ac:	bc a1       	ldd	r27, Y+36	; 0x24
    31ae:	2d 92       	st	X+, r2
    31b0:	3d 92       	st	X+, r3
    31b2:	4d 92       	st	X+, r4
    31b4:	5c 92       	st	X, r5
		*isApertureSpads = isApertureSpads_int;
    31b6:	13 97       	sbiw	r26, 0x03	; 3
    31b8:	2f a1       	ldd	r18, Y+39	; 0x27
    31ba:	ed a1       	ldd	r30, Y+37	; 0x25
    31bc:	fe a1       	ldd	r31, Y+38	; 0x26

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
    31be:	20 83       	st	Z, r18
    31c0:	f4 01       	movw	r30, r8
    31c2:	ec 5f       	subi	r30, 0xFC	; 252
    31c4:	fe 4f       	sbci	r31, 0xFE	; 254
    31c6:	81 e0       	ldi	r24, 0x01	; 1
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    31c8:	80 83       	st	Z, r24
    31ca:	32 97       	sbiw	r30, 0x02	; 2
    31cc:	8c 91       	ld	r24, X
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    31ce:	80 83       	st	Z, r24
    31d0:	ad a1       	ldd	r26, Y+37	; 0x25
    31d2:	be a1       	ldd	r27, Y+38	; 0x26
    31d4:	8c 91       	ld	r24, X
    31d6:	31 96       	adiw	r30, 0x01	; 1
    31d8:	80 83       	st	Z, r24
    31da:	80 e0       	ldi	r24, 0x00	; 0
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
	uint8_t	 isApertureSpads_int = 0;
    31dc:	1f c0       	rjmp	.+62     	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
    31de:	1f a2       	std	Y+39, r1	; 0x27
    31e0:	21 2c       	mov	r2, r1
    31e2:	31 2c       	mov	r3, r1
					isApertureSpads_int = 1;
					refSpadCount_int = minimumSpadCount;
				}
			}
		} else {
			needAptSpads = 0;
    31e4:	21 01       	movw	r4, r2
    31e6:	19 8e       	std	Y+25, r1	; 0x19
    31e8:	1a 8e       	std	Y+26, r1	; 0x1a
    31ea:	1b 8e       	std	Y+27, r1	; 0x1b
    31ec:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
	uint8_t	 isApertureSpads_int = 0;
    31ee:	0c c0       	rjmp	.+24     	; 0x3208 <VL53L0X_perform_ref_spad_management+0x426>
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
    31f0:	1f a2       	std	Y+39, r1	; 0x27
    31f2:	21 2c       	mov	r2, r1
    31f4:	31 2c       	mov	r3, r1
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    31f6:	21 01       	movw	r4, r2
    31f8:	21 e0       	ldi	r18, 0x01	; 1
    31fa:	30 e0       	ldi	r19, 0x00	; 0
    31fc:	40 e0       	ldi	r20, 0x00	; 0
    31fe:	50 e0       	ldi	r21, 0x00	; 0
    3200:	29 8f       	std	Y+25, r18	; 0x19
    3202:	3a 8f       	std	Y+26, r19	; 0x1a
    3204:	4b 8f       	std	Y+27, r20	; 0x1b
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
		(peakSignalRateRef < targetRefRate)) {
    3206:	5c 8f       	std	Y+28, r21	; 0x1c
    3208:	8f 85       	ldd	r24, Y+15	; 0x0f
		} else {
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
    320a:	98 89       	ldd	r25, Y+16	; 0x10
    320c:	86 15       	cp	r24, r6
    320e:	97 05       	cpc	r25, r7
    3210:	08 f4       	brcc	.+2      	; 0x3214 <VL53L0X_perform_ref_spad_management+0x432>
    3212:	02 cf       	rjmp	.-508    	; 0x3018 <VL53L0X_perform_ref_spad_management+0x236>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    3214:	ca cf       	rjmp	.-108    	; 0x31aa <VL53L0X_perform_ref_spad_management+0x3c8>
    3216:	8e ec       	ldi	r24, 0xCE	; 206
			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    3218:	01 c0       	rjmp	.+2      	; 0x321c <VL53L0X_perform_ref_spad_management+0x43a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
}
    321a:	8e ec       	ldi	r24, 0xCE	; 206
    321c:	a7 96       	adiw	r28, 0x27	; 39
    321e:	0f b6       	in	r0, 0x3f	; 63
    3220:	f8 94       	cli
    3222:	de bf       	out	0x3e, r29	; 62
    3224:	0f be       	out	0x3f, r0	; 63
    3226:	cd bf       	out	0x3d, r28	; 61
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	ff 90       	pop	r15
    3232:	ef 90       	pop	r14
    3234:	df 90       	pop	r13
    3236:	cf 90       	pop	r12
    3238:	bf 90       	pop	r11
    323a:	af 90       	pop	r10
    323c:	9f 90       	pop	r9
    323e:	8f 90       	pop	r8
    3240:	7f 90       	pop	r7
    3242:	6f 90       	pop	r6
    3244:	5f 90       	pop	r5
    3246:	4f 90       	pop	r4
    3248:	3f 90       	pop	r3
    324a:	2f 90       	pop	r2
    324c:	08 95       	ret

0000324e <VL53L0X_measurement_poll_for_completion>:
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
    324e:	ef 92       	push	r14
    3250:	ff 92       	push	r15
    3252:	0f 93       	push	r16
    3254:	1f 93       	push	r17
    3256:	cf 93       	push	r28
    3258:	df 93       	push	r29
    325a:	1f 92       	push	r1
    325c:	cd b7       	in	r28, 0x3d	; 61
    325e:	de b7       	in	r29, 0x3e	; 62
    3260:	7c 01       	movw	r14, r24
    3262:	19 82       	std	Y+1, r1	; 0x01
    3264:	00 e0       	ldi	r16, 0x00	; 0
    3266:	10 e0       	ldi	r17, 0x00	; 0
    3268:	be 01       	movw	r22, r28
    326a:	6f 5f       	subi	r22, 0xFF	; 255
    326c:	7f 4f       	sbci	r23, 0xFF	; 255
    326e:	c7 01       	movw	r24, r14
    3270:	08 d9       	rcall	.-3568   	; 0x2482 <VL53L0X_GetMeasurementDataReady>
    3272:	81 11       	cpse	r24, r1
    3274:	0d c0       	rjmp	.+26     	; 0x3290 <VL53L0X_measurement_poll_for_completion+0x42>
    3276:	99 81       	ldd	r25, Y+1	; 0x01
    3278:	91 30       	cpi	r25, 0x01	; 1
    327a:	51 f0       	breq	.+20     	; 0x3290 <VL53L0X_measurement_poll_for_completion+0x42>
    327c:	0f 5f       	subi	r16, 0xFF	; 255
    327e:	1f 4f       	sbci	r17, 0xFF	; 255
    3280:	08 3c       	cpi	r16, 0xC8	; 200
    3282:	11 05       	cpc	r17, r1
    3284:	21 f0       	breq	.+8      	; 0x328e <VL53L0X_measurement_poll_for_completion+0x40>
    3286:	c7 01       	movw	r24, r14
    3288:	0e 94 37 2c 	call	0x586e	; 0x586e <VL53L0X_PollingDelay>
    328c:	ed cf       	rjmp	.-38     	; 0x3268 <VL53L0X_measurement_poll_for_completion+0x1a>
    328e:	89 ef       	ldi	r24, 0xF9	; 249
    3290:	0f 90       	pop	r0
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	ff 90       	pop	r15
    329c:	ef 90       	pop	r14
    329e:	08 95       	ret

000032a0 <VL53L0X_isqrt>:
    32a0:	cf 92       	push	r12
    32a2:	df 92       	push	r13
    32a4:	ef 92       	push	r14
    32a6:	ff 92       	push	r15
    32a8:	0f 93       	push	r16
    32aa:	1f 93       	push	r17
    32ac:	8b 01       	movw	r16, r22
    32ae:	9c 01       	movw	r18, r24
    32b0:	01 15       	cp	r16, r1
    32b2:	11 05       	cpc	r17, r1
    32b4:	21 05       	cpc	r18, r1
    32b6:	80 e4       	ldi	r24, 0x40	; 64
    32b8:	38 07       	cpc	r19, r24
    32ba:	b0 f4       	brcc	.+44     	; 0x32e8 <VL53L0X_isqrt+0x48>
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	a0 e0       	ldi	r26, 0x00	; 0
    32c2:	b0 e4       	ldi	r27, 0x40	; 64
    32c4:	b6 95       	lsr	r27
    32c6:	a7 95       	ror	r26
    32c8:	97 95       	ror	r25
    32ca:	87 95       	ror	r24
    32cc:	b6 95       	lsr	r27
    32ce:	a7 95       	ror	r26
    32d0:	97 95       	ror	r25
    32d2:	87 95       	ror	r24
    32d4:	08 17       	cp	r16, r24
    32d6:	19 07       	cpc	r17, r25
    32d8:	2a 07       	cpc	r18, r26
    32da:	3b 07       	cpc	r19, r27
    32dc:	98 f3       	brcs	.-26     	; 0x32c4 <VL53L0X_isqrt+0x24>
    32de:	00 97       	sbiw	r24, 0x00	; 0
    32e0:	a1 05       	cpc	r26, r1
    32e2:	b1 05       	cpc	r27, r1
    32e4:	29 f4       	brne	.+10     	; 0x32f0 <VL53L0X_isqrt+0x50>
    32e6:	30 c0       	rjmp	.+96     	; 0x3348 <VL53L0X_isqrt+0xa8>
    32e8:	80 e0       	ldi	r24, 0x00	; 0
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	a0 e0       	ldi	r26, 0x00	; 0
    32ee:	b0 e4       	ldi	r27, 0x40	; 64
    32f0:	40 e0       	ldi	r20, 0x00	; 0
    32f2:	50 e0       	ldi	r21, 0x00	; 0
    32f4:	ba 01       	movw	r22, r20
    32f6:	6a 01       	movw	r12, r20
    32f8:	7b 01       	movw	r14, r22
    32fa:	c8 0e       	add	r12, r24
    32fc:	d9 1e       	adc	r13, r25
    32fe:	ea 1e       	adc	r14, r26
    3300:	fb 1e       	adc	r15, r27
    3302:	0c 15       	cp	r16, r12
    3304:	1d 05       	cpc	r17, r13
    3306:	2e 05       	cpc	r18, r14
    3308:	3f 05       	cpc	r19, r15
    330a:	68 f0       	brcs	.+26     	; 0x3326 <VL53L0X_isqrt+0x86>
    330c:	0c 19       	sub	r16, r12
    330e:	1d 09       	sbc	r17, r13
    3310:	2e 09       	sbc	r18, r14
    3312:	3f 09       	sbc	r19, r15
    3314:	76 95       	lsr	r23
    3316:	67 95       	ror	r22
    3318:	57 95       	ror	r21
    331a:	47 95       	ror	r20
    331c:	48 0f       	add	r20, r24
    331e:	59 1f       	adc	r21, r25
    3320:	6a 1f       	adc	r22, r26
    3322:	7b 1f       	adc	r23, r27
    3324:	04 c0       	rjmp	.+8      	; 0x332e <VL53L0X_isqrt+0x8e>
    3326:	76 95       	lsr	r23
    3328:	67 95       	ror	r22
    332a:	57 95       	ror	r21
    332c:	47 95       	ror	r20
    332e:	b6 95       	lsr	r27
    3330:	a7 95       	ror	r26
    3332:	97 95       	ror	r25
    3334:	87 95       	ror	r24
    3336:	b6 95       	lsr	r27
    3338:	a7 95       	ror	r26
    333a:	97 95       	ror	r25
    333c:	87 95       	ror	r24
    333e:	00 97       	sbiw	r24, 0x00	; 0
    3340:	a1 05       	cpc	r26, r1
    3342:	b1 05       	cpc	r27, r1
    3344:	c1 f6       	brne	.-80     	; 0x32f6 <VL53L0X_isqrt+0x56>
    3346:	03 c0       	rjmp	.+6      	; 0x334e <VL53L0X_isqrt+0xae>
    3348:	40 e0       	ldi	r20, 0x00	; 0
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	ba 01       	movw	r22, r20
    334e:	cb 01       	movw	r24, r22
    3350:	ba 01       	movw	r22, r20
    3352:	1f 91       	pop	r17
    3354:	0f 91       	pop	r16
    3356:	ff 90       	pop	r15
    3358:	ef 90       	pop	r14
    335a:	df 90       	pop	r13
    335c:	cf 90       	pop	r12
    335e:	08 95       	ret

00003360 <VL53L0X_device_read_strobe>:
    3360:	af 92       	push	r10
    3362:	bf 92       	push	r11
    3364:	cf 92       	push	r12
    3366:	df 92       	push	r13
    3368:	ef 92       	push	r14
    336a:	ff 92       	push	r15
    336c:	1f 93       	push	r17
    336e:	cf 93       	push	r28
    3370:	df 93       	push	r29
    3372:	1f 92       	push	r1
    3374:	cd b7       	in	r28, 0x3d	; 61
    3376:	de b7       	in	r29, 0x3e	; 62
    3378:	5c 01       	movw	r10, r24
    337a:	40 e0       	ldi	r20, 0x00	; 0
    337c:	63 e8       	ldi	r22, 0x83	; 131
    337e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3382:	18 2f       	mov	r17, r24
    3384:	81 11       	cpse	r24, r1
    3386:	24 c0       	rjmp	.+72     	; 0x33d0 <VL53L0X_device_read_strobe+0x70>
    3388:	c1 2c       	mov	r12, r1
    338a:	d1 2c       	mov	r13, r1
    338c:	76 01       	movw	r14, r12
    338e:	ae 01       	movw	r20, r28
    3390:	4f 5f       	subi	r20, 0xFF	; 255
    3392:	5f 4f       	sbci	r21, 0xFF	; 255
    3394:	63 e8       	ldi	r22, 0x83	; 131
    3396:	c5 01       	movw	r24, r10
    3398:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    339c:	18 2f       	mov	r17, r24
    339e:	89 81       	ldd	r24, Y+1	; 0x01
    33a0:	81 11       	cpse	r24, r1
    33a2:	0f c0       	rjmp	.+30     	; 0x33c2 <VL53L0X_device_read_strobe+0x62>
    33a4:	11 11       	cpse	r17, r1
    33a6:	0d c0       	rjmp	.+26     	; 0x33c2 <VL53L0X_device_read_strobe+0x62>
    33a8:	8f ef       	ldi	r24, 0xFF	; 255
    33aa:	c8 1a       	sub	r12, r24
    33ac:	d8 0a       	sbc	r13, r24
    33ae:	e8 0a       	sbc	r14, r24
    33b0:	f8 0a       	sbc	r15, r24
    33b2:	88 ec       	ldi	r24, 0xC8	; 200
    33b4:	c8 16       	cp	r12, r24
    33b6:	d1 04       	cpc	r13, r1
    33b8:	e1 04       	cpc	r14, r1
    33ba:	f1 04       	cpc	r15, r1
    33bc:	41 f7       	brne	.-48     	; 0x338e <VL53L0X_device_read_strobe+0x2e>
    33be:	19 ef       	ldi	r17, 0xF9	; 249
    33c0:	07 c0       	rjmp	.+14     	; 0x33d0 <VL53L0X_device_read_strobe+0x70>
    33c2:	88 ec       	ldi	r24, 0xC8	; 200
    33c4:	c8 16       	cp	r12, r24
    33c6:	d1 04       	cpc	r13, r1
    33c8:	e1 04       	cpc	r14, r1
    33ca:	f1 04       	cpc	r15, r1
    33cc:	08 f0       	brcs	.+2      	; 0x33d0 <VL53L0X_device_read_strobe+0x70>
    33ce:	19 ef       	ldi	r17, 0xF9	; 249
    33d0:	41 e0       	ldi	r20, 0x01	; 1
    33d2:	63 e8       	ldi	r22, 0x83	; 131
    33d4:	c5 01       	movw	r24, r10
    33d6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    33da:	81 2b       	or	r24, r17
    33dc:	0f 90       	pop	r0
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	ff 90       	pop	r15
    33e6:	ef 90       	pop	r14
    33e8:	df 90       	pop	r13
    33ea:	cf 90       	pop	r12
    33ec:	bf 90       	pop	r11
    33ee:	af 90       	pop	r10
    33f0:	08 95       	ret

000033f2 <VL53L0X_get_info_from_device>:
    33f2:	2f 92       	push	r2
    33f4:	3f 92       	push	r3
    33f6:	4f 92       	push	r4
    33f8:	5f 92       	push	r5
    33fa:	6f 92       	push	r6
    33fc:	7f 92       	push	r7
    33fe:	8f 92       	push	r8
    3400:	9f 92       	push	r9
    3402:	af 92       	push	r10
    3404:	bf 92       	push	r11
    3406:	cf 92       	push	r12
    3408:	df 92       	push	r13
    340a:	ef 92       	push	r14
    340c:	ff 92       	push	r15
    340e:	0f 93       	push	r16
    3410:	1f 93       	push	r17
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
    3416:	cd b7       	in	r28, 0x3d	; 61
    3418:	de b7       	in	r29, 0x3e	; 62
    341a:	aa 97       	sbiw	r28, 0x2a	; 42
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	18 86       	std	Y+8, r1	; 0x08
    3428:	19 86       	std	Y+9, r1	; 0x09
    342a:	1a 86       	std	Y+10, r1	; 0x0a
    342c:	1b 86       	std	Y+11, r1	; 0x0b
    342e:	1c 86       	std	Y+12, r1	; 0x0c
    3430:	1d 86       	std	Y+13, r1	; 0x0d
    3432:	1e 86       	std	Y+14, r1	; 0x0e
    3434:	1f 86       	std	Y+15, r1	; 0x0f
    3436:	fc 01       	movw	r30, r24
    3438:	e1 52       	subi	r30, 0x21	; 33
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	d0 80       	ld	r13, Z
    343e:	27 e0       	ldi	r18, 0x07	; 7
    3440:	d2 16       	cp	r13, r18
    3442:	09 f4       	brne	.+2      	; 0x3446 <VL53L0X_get_info_from_device+0x54>
    3444:	63 c3       	rjmp	.+1734   	; 0x3b0c <VL53L0X_get_info_from_device+0x71a>
    3446:	06 2f       	mov	r16, r22
    3448:	7c 01       	movw	r14, r24
    344a:	41 e0       	ldi	r20, 0x01	; 1
    344c:	60 e8       	ldi	r22, 0x80	; 128
    344e:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3452:	18 2f       	mov	r17, r24
    3454:	41 e0       	ldi	r20, 0x01	; 1
    3456:	6f ef       	ldi	r22, 0xFF	; 255
    3458:	c7 01       	movw	r24, r14
    345a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    345e:	18 2b       	or	r17, r24
    3460:	40 e0       	ldi	r20, 0x00	; 0
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	c7 01       	movw	r24, r14
    3466:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    346a:	18 2b       	or	r17, r24
    346c:	46 e0       	ldi	r20, 0x06	; 6
    346e:	6f ef       	ldi	r22, 0xFF	; 255
    3470:	c7 01       	movw	r24, r14
    3472:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3476:	18 2b       	or	r17, r24
    3478:	ae 01       	movw	r20, r28
    347a:	4f 5f       	subi	r20, 0xFF	; 255
    347c:	5f 4f       	sbci	r21, 0xFF	; 255
    347e:	63 e8       	ldi	r22, 0x83	; 131
    3480:	c7 01       	movw	r24, r14
    3482:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    3486:	18 2b       	or	r17, r24
    3488:	49 81       	ldd	r20, Y+1	; 0x01
    348a:	44 60       	ori	r20, 0x04	; 4
    348c:	63 e8       	ldi	r22, 0x83	; 131
    348e:	c7 01       	movw	r24, r14
    3490:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3494:	18 2b       	or	r17, r24
    3496:	47 e0       	ldi	r20, 0x07	; 7
    3498:	6f ef       	ldi	r22, 0xFF	; 255
    349a:	c7 01       	movw	r24, r14
    349c:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    34a0:	18 2b       	or	r17, r24
    34a2:	41 e0       	ldi	r20, 0x01	; 1
    34a4:	61 e8       	ldi	r22, 0x81	; 129
    34a6:	c7 01       	movw	r24, r14
    34a8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    34ac:	18 2b       	or	r17, r24
    34ae:	c7 01       	movw	r24, r14
    34b0:	0e 94 37 2c 	call	0x586e	; 0x586e <VL53L0X_PollingDelay>
    34b4:	18 2b       	or	r17, r24
    34b6:	41 e0       	ldi	r20, 0x01	; 1
    34b8:	60 e8       	ldi	r22, 0x80	; 128
    34ba:	c7 01       	movw	r24, r14
    34bc:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    34c0:	18 2b       	or	r17, r24
    34c2:	80 2f       	mov	r24, r16
    34c4:	81 70       	andi	r24, 0x01	; 1
    34c6:	28 2e       	mov	r2, r24
    34c8:	00 ff       	sbrs	r16, 0
    34ca:	56 c0       	rjmp	.+172    	; 0x3578 <VL53L0X_get_info_from_device+0x186>
    34cc:	d0 fc       	sbrc	r13, 0
    34ce:	57 c0       	rjmp	.+174    	; 0x357e <VL53L0X_get_info_from_device+0x18c>
    34d0:	4b e6       	ldi	r20, 0x6B	; 107
    34d2:	64 e9       	ldi	r22, 0x94	; 148
    34d4:	c7 01       	movw	r24, r14
    34d6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    34da:	c8 2e       	mov	r12, r24
    34dc:	c7 01       	movw	r24, r14
    34de:	40 df       	rcall	.-384    	; 0x3360 <VL53L0X_device_read_strobe>
    34e0:	8c 29       	or	r24, r12
    34e2:	18 2b       	or	r17, r24
    34e4:	ae 01       	movw	r20, r28
    34e6:	4e 5f       	subi	r20, 0xFE	; 254
    34e8:	5f 4f       	sbci	r21, 0xFF	; 255
    34ea:	60 e9       	ldi	r22, 0x90	; 144
    34ec:	c7 01       	movw	r24, r14
    34ee:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    34f2:	18 2b       	or	r17, r24
    34f4:	8a 81       	ldd	r24, Y+2	; 0x02
    34f6:	9b 81       	ldd	r25, Y+3	; 0x03
    34f8:	ac 81       	ldd	r26, Y+4	; 0x04
    34fa:	bd 81       	ldd	r27, Y+5	; 0x05
    34fc:	e9 2f       	mov	r30, r25
    34fe:	ef 77       	andi	r30, 0x7F	; 127
    3500:	e9 a7       	std	Y+41, r30	; 0x29
    3502:	07 2e       	mov	r0, r23
    3504:	7f e0       	ldi	r23, 0x0F	; 15
    3506:	b6 95       	lsr	r27
    3508:	a7 95       	ror	r26
    350a:	97 95       	ror	r25
    350c:	87 95       	ror	r24
    350e:	7a 95       	dec	r23
    3510:	d1 f7       	brne	.-12     	; 0x3506 <VL53L0X_get_info_from_device+0x114>
    3512:	70 2d       	mov	r23, r0
    3514:	f8 2f       	mov	r31, r24
    3516:	f1 70       	andi	r31, 0x01	; 1
    3518:	fa a7       	std	Y+42, r31	; 0x2a
    351a:	44 e2       	ldi	r20, 0x24	; 36
    351c:	64 e9       	ldi	r22, 0x94	; 148
    351e:	c7 01       	movw	r24, r14
    3520:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3524:	18 2b       	or	r17, r24
    3526:	c7 01       	movw	r24, r14
    3528:	1b df       	rcall	.-458    	; 0x3360 <VL53L0X_device_read_strobe>
    352a:	18 2b       	or	r17, r24
    352c:	ae 01       	movw	r20, r28
    352e:	4e 5f       	subi	r20, 0xFE	; 254
    3530:	5f 4f       	sbci	r21, 0xFF	; 255
    3532:	60 e9       	ldi	r22, 0x90	; 144
    3534:	c7 01       	movw	r24, r14
    3536:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    353a:	18 2b       	or	r17, r24
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	9b 81       	ldd	r25, Y+3	; 0x03
    3540:	2c 81       	ldd	r18, Y+4	; 0x04
    3542:	3d 81       	ldd	r19, Y+5	; 0x05
    3544:	3b a3       	std	Y+35, r19	; 0x23
    3546:	2c a3       	std	Y+36, r18	; 0x24
    3548:	9d a3       	std	Y+37, r25	; 0x25
    354a:	8e a3       	std	Y+38, r24	; 0x26
    354c:	45 e2       	ldi	r20, 0x25	; 37
    354e:	64 e9       	ldi	r22, 0x94	; 148
    3550:	c7 01       	movw	r24, r14
    3552:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3556:	18 2b       	or	r17, r24
    3558:	c7 01       	movw	r24, r14
    355a:	02 df       	rcall	.-508    	; 0x3360 <VL53L0X_device_read_strobe>
    355c:	18 2b       	or	r17, r24
    355e:	ae 01       	movw	r20, r28
    3560:	4e 5f       	subi	r20, 0xFE	; 254
    3562:	5f 4f       	sbci	r21, 0xFF	; 255
    3564:	60 e9       	ldi	r22, 0x90	; 144
    3566:	c7 01       	movw	r24, r14
    3568:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    356c:	18 2b       	or	r17, r24
    356e:	8c 81       	ldd	r24, Y+4	; 0x04
    3570:	9d 81       	ldd	r25, Y+5	; 0x05
    3572:	9f a3       	std	Y+39, r25	; 0x27
    3574:	88 a7       	std	Y+40, r24	; 0x28
    3576:	05 c0       	rjmp	.+10     	; 0x3582 <VL53L0X_get_info_from_device+0x190>
    3578:	1a a6       	std	Y+42, r1	; 0x2a
    357a:	19 a6       	std	Y+41, r1	; 0x29
    357c:	02 c0       	rjmp	.+4      	; 0x3582 <VL53L0X_get_info_from_device+0x190>
    357e:	1a a6       	std	Y+42, r1	; 0x2a
    3580:	19 a6       	std	Y+41, r1	; 0x29
    3582:	20 2f       	mov	r18, r16
    3584:	22 70       	andi	r18, 0x02	; 2
    3586:	32 2e       	mov	r3, r18
    3588:	01 ff       	sbrs	r16, 1
    358a:	60 c1       	rjmp	.+704    	; 0x384c <VL53L0X_get_info_from_device+0x45a>
    358c:	d1 fc       	sbrc	r13, 1
    358e:	5e c1       	rjmp	.+700    	; 0x384c <VL53L0X_get_info_from_device+0x45a>
    3590:	42 e0       	ldi	r20, 0x02	; 2
    3592:	64 e9       	ldi	r22, 0x94	; 148
    3594:	c7 01       	movw	r24, r14
    3596:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    359a:	c8 2e       	mov	r12, r24
    359c:	c7 01       	movw	r24, r14
    359e:	e0 de       	rcall	.-576    	; 0x3360 <VL53L0X_device_read_strobe>
    35a0:	8c 29       	or	r24, r12
    35a2:	18 2b       	or	r17, r24
    35a4:	ae 01       	movw	r20, r28
    35a6:	4a 5f       	subi	r20, 0xFA	; 250
    35a8:	5f 4f       	sbci	r21, 0xFF	; 255
    35aa:	60 e9       	ldi	r22, 0x90	; 144
    35ac:	c7 01       	movw	r24, r14
    35ae:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    35b2:	18 2b       	or	r17, r24
    35b4:	4b e7       	ldi	r20, 0x7B	; 123
    35b6:	64 e9       	ldi	r22, 0x94	; 148
    35b8:	c7 01       	movw	r24, r14
    35ba:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    35be:	18 2b       	or	r17, r24
    35c0:	c7 01       	movw	r24, r14
    35c2:	ce de       	rcall	.-612    	; 0x3360 <VL53L0X_device_read_strobe>
    35c4:	18 2b       	or	r17, r24
    35c6:	ae 01       	movw	r20, r28
    35c8:	49 5f       	subi	r20, 0xF9	; 249
    35ca:	5f 4f       	sbci	r21, 0xFF	; 255
    35cc:	60 e9       	ldi	r22, 0x90	; 144
    35ce:	c7 01       	movw	r24, r14
    35d0:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    35d4:	18 2b       	or	r17, r24
    35d6:	47 e7       	ldi	r20, 0x77	; 119
    35d8:	64 e9       	ldi	r22, 0x94	; 148
    35da:	c7 01       	movw	r24, r14
    35dc:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    35e0:	18 2b       	or	r17, r24
    35e2:	c7 01       	movw	r24, r14
    35e4:	bd de       	rcall	.-646    	; 0x3360 <VL53L0X_device_read_strobe>
    35e6:	18 2b       	or	r17, r24
    35e8:	ae 01       	movw	r20, r28
    35ea:	4e 5f       	subi	r20, 0xFE	; 254
    35ec:	5f 4f       	sbci	r21, 0xFF	; 255
    35ee:	60 e9       	ldi	r22, 0x90	; 144
    35f0:	c7 01       	movw	r24, r14
    35f2:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    35f6:	18 2b       	or	r17, r24
    35f8:	4a 81       	ldd	r20, Y+2	; 0x02
    35fa:	5b 81       	ldd	r21, Y+3	; 0x03
    35fc:	6c 81       	ldd	r22, Y+4	; 0x04
    35fe:	7d 81       	ldd	r23, Y+5	; 0x05
    3600:	db 01       	movw	r26, r22
    3602:	ca 01       	movw	r24, r20
    3604:	07 2e       	mov	r0, r23
    3606:	79 e1       	ldi	r23, 0x19	; 25
    3608:	b6 95       	lsr	r27
    360a:	a7 95       	ror	r26
    360c:	97 95       	ror	r25
    360e:	87 95       	ror	r24
    3610:	7a 95       	dec	r23
    3612:	d1 f7       	brne	.-12     	; 0x3608 <VL53L0X_get_info_from_device+0x216>
    3614:	70 2d       	mov	r23, r0
    3616:	8f 77       	andi	r24, 0x7F	; 127
    3618:	88 8b       	std	Y+16, r24	; 0x10
    361a:	db 01       	movw	r26, r22
    361c:	ca 01       	movw	r24, r20
    361e:	07 2e       	mov	r0, r23
    3620:	72 e1       	ldi	r23, 0x12	; 18
    3622:	b6 95       	lsr	r27
    3624:	a7 95       	ror	r26
    3626:	97 95       	ror	r25
    3628:	87 95       	ror	r24
    362a:	7a 95       	dec	r23
    362c:	d1 f7       	brne	.-12     	; 0x3622 <VL53L0X_get_info_from_device+0x230>
    362e:	70 2d       	mov	r23, r0
    3630:	8f 77       	andi	r24, 0x7F	; 127
    3632:	89 8b       	std	Y+17, r24	; 0x11
    3634:	db 01       	movw	r26, r22
    3636:	ca 01       	movw	r24, r20
    3638:	07 2e       	mov	r0, r23
    363a:	7b e0       	ldi	r23, 0x0B	; 11
    363c:	b6 95       	lsr	r27
    363e:	a7 95       	ror	r26
    3640:	97 95       	ror	r25
    3642:	87 95       	ror	r24
    3644:	7a 95       	dec	r23
    3646:	d1 f7       	brne	.-12     	; 0x363c <VL53L0X_get_info_from_device+0x24a>
    3648:	70 2d       	mov	r23, r0
    364a:	8f 77       	andi	r24, 0x7F	; 127
    364c:	8a 8b       	std	Y+18, r24	; 0x12
    364e:	db 01       	movw	r26, r22
    3650:	ca 01       	movw	r24, r20
    3652:	68 94       	set
    3654:	13 f8       	bld	r1, 3
    3656:	b6 95       	lsr	r27
    3658:	a7 95       	ror	r26
    365a:	97 95       	ror	r25
    365c:	87 95       	ror	r24
    365e:	16 94       	lsr	r1
    3660:	d1 f7       	brne	.-12     	; 0x3656 <VL53L0X_get_info_from_device+0x264>
    3662:	8f 77       	andi	r24, 0x7F	; 127
    3664:	8b 8b       	std	Y+19, r24	; 0x13
    3666:	4f 70       	andi	r20, 0x0F	; 15
    3668:	44 0f       	add	r20, r20
    366a:	44 0f       	add	r20, r20
    366c:	44 0f       	add	r20, r20
    366e:	49 83       	std	Y+1, r20	; 0x01
    3670:	48 e7       	ldi	r20, 0x78	; 120
    3672:	64 e9       	ldi	r22, 0x94	; 148
    3674:	c7 01       	movw	r24, r14
    3676:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    367a:	18 2b       	or	r17, r24
    367c:	c7 01       	movw	r24, r14
    367e:	70 de       	rcall	.-800    	; 0x3360 <VL53L0X_device_read_strobe>
    3680:	18 2b       	or	r17, r24
    3682:	ae 01       	movw	r20, r28
    3684:	4e 5f       	subi	r20, 0xFE	; 254
    3686:	5f 4f       	sbci	r21, 0xFF	; 255
    3688:	60 e9       	ldi	r22, 0x90	; 144
    368a:	c7 01       	movw	r24, r14
    368c:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    3690:	18 2b       	or	r17, r24
    3692:	8a 81       	ldd	r24, Y+2	; 0x02
    3694:	9b 81       	ldd	r25, Y+3	; 0x03
    3696:	ac 81       	ldd	r26, Y+4	; 0x04
    3698:	bd 81       	ldd	r27, Y+5	; 0x05
    369a:	ac 01       	movw	r20, r24
    369c:	bd 01       	movw	r22, r26
    369e:	03 2e       	mov	r0, r19
    36a0:	3d e1       	ldi	r19, 0x1D	; 29
    36a2:	76 95       	lsr	r23
    36a4:	67 95       	ror	r22
    36a6:	57 95       	ror	r21
    36a8:	47 95       	ror	r20
    36aa:	3a 95       	dec	r19
    36ac:	d1 f7       	brne	.-12     	; 0x36a2 <VL53L0X_get_info_from_device+0x2b0>
    36ae:	30 2d       	mov	r19, r0
    36b0:	4f 77       	andi	r20, 0x7F	; 127
    36b2:	39 81       	ldd	r19, Y+1	; 0x01
    36b4:	24 2f       	mov	r18, r20
    36b6:	23 0f       	add	r18, r19
    36b8:	2c 8b       	std	Y+20, r18	; 0x14
    36ba:	ac 01       	movw	r20, r24
    36bc:	bd 01       	movw	r22, r26
    36be:	03 2e       	mov	r0, r19
    36c0:	36 e1       	ldi	r19, 0x16	; 22
    36c2:	76 95       	lsr	r23
    36c4:	67 95       	ror	r22
    36c6:	57 95       	ror	r21
    36c8:	47 95       	ror	r20
    36ca:	3a 95       	dec	r19
    36cc:	d1 f7       	brne	.-12     	; 0x36c2 <VL53L0X_get_info_from_device+0x2d0>
    36ce:	30 2d       	mov	r19, r0
    36d0:	4f 77       	andi	r20, 0x7F	; 127
    36d2:	4d 8b       	std	Y+21, r20	; 0x15
    36d4:	ac 01       	movw	r20, r24
    36d6:	bd 01       	movw	r22, r26
    36d8:	03 2e       	mov	r0, r19
    36da:	3f e0       	ldi	r19, 0x0F	; 15
    36dc:	76 95       	lsr	r23
    36de:	67 95       	ror	r22
    36e0:	57 95       	ror	r21
    36e2:	47 95       	ror	r20
    36e4:	3a 95       	dec	r19
    36e6:	d1 f7       	brne	.-12     	; 0x36dc <VL53L0X_get_info_from_device+0x2ea>
    36e8:	30 2d       	mov	r19, r0
    36ea:	4f 77       	andi	r20, 0x7F	; 127
    36ec:	4e 8b       	std	Y+22, r20	; 0x16
    36ee:	29 2f       	mov	r18, r25
    36f0:	2f 77       	andi	r18, 0x7F	; 127
    36f2:	2f 8b       	std	Y+23, r18	; 0x17
    36f4:	ac 01       	movw	r20, r24
    36f6:	bd 01       	movw	r22, r26
    36f8:	76 95       	lsr	r23
    36fa:	67 95       	ror	r22
    36fc:	57 95       	ror	r21
    36fe:	47 95       	ror	r20
    3700:	4f 77       	andi	r20, 0x7F	; 127
    3702:	48 8f       	std	Y+24, r20	; 0x18
    3704:	98 2f       	mov	r25, r24
    3706:	91 70       	andi	r25, 0x01	; 1
    3708:	92 95       	swap	r25
    370a:	99 0f       	add	r25, r25
    370c:	99 0f       	add	r25, r25
    370e:	90 7c       	andi	r25, 0xC0	; 192
    3710:	99 83       	std	Y+1, r25	; 0x01
    3712:	49 e7       	ldi	r20, 0x79	; 121
    3714:	64 e9       	ldi	r22, 0x94	; 148
    3716:	c7 01       	movw	r24, r14
    3718:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    371c:	18 2b       	or	r17, r24
    371e:	c7 01       	movw	r24, r14
    3720:	1f de       	rcall	.-962    	; 0x3360 <VL53L0X_device_read_strobe>
    3722:	18 2b       	or	r17, r24
    3724:	ae 01       	movw	r20, r28
    3726:	4e 5f       	subi	r20, 0xFE	; 254
    3728:	5f 4f       	sbci	r21, 0xFF	; 255
    372a:	60 e9       	ldi	r22, 0x90	; 144
    372c:	c7 01       	movw	r24, r14
    372e:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    3732:	18 2b       	or	r17, r24
    3734:	8a 81       	ldd	r24, Y+2	; 0x02
    3736:	9b 81       	ldd	r25, Y+3	; 0x03
    3738:	ac 81       	ldd	r26, Y+4	; 0x04
    373a:	bd 81       	ldd	r27, Y+5	; 0x05
    373c:	ac 01       	movw	r20, r24
    373e:	bd 01       	movw	r22, r26
    3740:	03 2e       	mov	r0, r19
    3742:	3a e1       	ldi	r19, 0x1A	; 26
    3744:	76 95       	lsr	r23
    3746:	67 95       	ror	r22
    3748:	57 95       	ror	r21
    374a:	47 95       	ror	r20
    374c:	3a 95       	dec	r19
    374e:	d1 f7       	brne	.-12     	; 0x3744 <VL53L0X_get_info_from_device+0x352>
    3750:	30 2d       	mov	r19, r0
    3752:	4f 77       	andi	r20, 0x7F	; 127
    3754:	39 81       	ldd	r19, Y+1	; 0x01
    3756:	24 2f       	mov	r18, r20
    3758:	23 0f       	add	r18, r19
    375a:	29 8f       	std	Y+25, r18	; 0x19
    375c:	ac 01       	movw	r20, r24
    375e:	bd 01       	movw	r22, r26
    3760:	03 2e       	mov	r0, r19
    3762:	33 e1       	ldi	r19, 0x13	; 19
    3764:	76 95       	lsr	r23
    3766:	67 95       	ror	r22
    3768:	57 95       	ror	r21
    376a:	47 95       	ror	r20
    376c:	3a 95       	dec	r19
    376e:	d1 f7       	brne	.-12     	; 0x3764 <VL53L0X_get_info_from_device+0x372>
    3770:	30 2d       	mov	r19, r0
    3772:	4f 77       	andi	r20, 0x7F	; 127
    3774:	4a 8f       	std	Y+26, r20	; 0x1a
    3776:	ac 01       	movw	r20, r24
    3778:	bd 01       	movw	r22, r26
    377a:	03 2e       	mov	r0, r19
    377c:	3c e0       	ldi	r19, 0x0C	; 12
    377e:	76 95       	lsr	r23
    3780:	67 95       	ror	r22
    3782:	57 95       	ror	r21
    3784:	47 95       	ror	r20
    3786:	3a 95       	dec	r19
    3788:	d1 f7       	brne	.-12     	; 0x377e <VL53L0X_get_info_from_device+0x38c>
    378a:	30 2d       	mov	r19, r0
    378c:	4f 77       	andi	r20, 0x7F	; 127
    378e:	4b 8f       	std	Y+27, r20	; 0x1b
    3790:	ac 01       	movw	r20, r24
    3792:	bd 01       	movw	r22, r26
    3794:	68 94       	set
    3796:	14 f8       	bld	r1, 4
    3798:	76 95       	lsr	r23
    379a:	67 95       	ror	r22
    379c:	57 95       	ror	r21
    379e:	47 95       	ror	r20
    37a0:	16 94       	lsr	r1
    37a2:	d1 f7       	brne	.-12     	; 0x3798 <VL53L0X_get_info_from_device+0x3a6>
    37a4:	4f 77       	andi	r20, 0x7F	; 127
    37a6:	4c 8f       	std	Y+28, r20	; 0x1c
    37a8:	98 2f       	mov	r25, r24
    37aa:	9f 71       	andi	r25, 0x1F	; 31
    37ac:	99 0f       	add	r25, r25
    37ae:	99 0f       	add	r25, r25
    37b0:	99 83       	std	Y+1, r25	; 0x01
    37b2:	4a e7       	ldi	r20, 0x7A	; 122
    37b4:	64 e9       	ldi	r22, 0x94	; 148
    37b6:	c7 01       	movw	r24, r14
    37b8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    37bc:	18 2b       	or	r17, r24
    37be:	c7 01       	movw	r24, r14
    37c0:	cf dd       	rcall	.-1122   	; 0x3360 <VL53L0X_device_read_strobe>
    37c2:	18 2b       	or	r17, r24
    37c4:	ae 01       	movw	r20, r28
    37c6:	4e 5f       	subi	r20, 0xFE	; 254
    37c8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ca:	60 e9       	ldi	r22, 0x90	; 144
    37cc:	c7 01       	movw	r24, r14
    37ce:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    37d2:	18 2b       	or	r17, r24
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	9b 81       	ldd	r25, Y+3	; 0x03
    37d8:	ac 81       	ldd	r26, Y+4	; 0x04
    37da:	bd 81       	ldd	r27, Y+5	; 0x05
    37dc:	ac 01       	movw	r20, r24
    37de:	bd 01       	movw	r22, r26
    37e0:	03 2e       	mov	r0, r19
    37e2:	3e e1       	ldi	r19, 0x1E	; 30
    37e4:	76 95       	lsr	r23
    37e6:	67 95       	ror	r22
    37e8:	57 95       	ror	r21
    37ea:	47 95       	ror	r20
    37ec:	3a 95       	dec	r19
    37ee:	d1 f7       	brne	.-12     	; 0x37e4 <VL53L0X_get_info_from_device+0x3f2>
    37f0:	30 2d       	mov	r19, r0
    37f2:	4f 77       	andi	r20, 0x7F	; 127
    37f4:	39 81       	ldd	r19, Y+1	; 0x01
    37f6:	24 2f       	mov	r18, r20
    37f8:	23 0f       	add	r18, r19
    37fa:	2d 8f       	std	Y+29, r18	; 0x1d
    37fc:	ac 01       	movw	r20, r24
    37fe:	bd 01       	movw	r22, r26
    3800:	03 2e       	mov	r0, r19
    3802:	37 e1       	ldi	r19, 0x17	; 23
    3804:	76 95       	lsr	r23
    3806:	67 95       	ror	r22
    3808:	57 95       	ror	r21
    380a:	47 95       	ror	r20
    380c:	3a 95       	dec	r19
    380e:	d1 f7       	brne	.-12     	; 0x3804 <VL53L0X_get_info_from_device+0x412>
    3810:	30 2d       	mov	r19, r0
    3812:	4f 77       	andi	r20, 0x7F	; 127
    3814:	4e 8f       	std	Y+30, r20	; 0x1e
    3816:	2a 2f       	mov	r18, r26
    3818:	2f 77       	andi	r18, 0x7F	; 127
    381a:	2f 8f       	std	Y+31, r18	; 0x1f
    381c:	ac 01       	movw	r20, r24
    381e:	bd 01       	movw	r22, r26
    3820:	03 2e       	mov	r0, r19
    3822:	39 e0       	ldi	r19, 0x09	; 9
    3824:	76 95       	lsr	r23
    3826:	67 95       	ror	r22
    3828:	57 95       	ror	r21
    382a:	47 95       	ror	r20
    382c:	3a 95       	dec	r19
    382e:	d1 f7       	brne	.-12     	; 0x3824 <VL53L0X_get_info_from_device+0x432>
    3830:	30 2d       	mov	r19, r0
    3832:	4f 77       	andi	r20, 0x7F	; 127
    3834:	48 a3       	std	Y+32, r20	; 0x20
    3836:	b6 95       	lsr	r27
    3838:	a7 95       	ror	r26
    383a:	97 95       	ror	r25
    383c:	87 95       	ror	r24
    383e:	b6 95       	lsr	r27
    3840:	a7 95       	ror	r26
    3842:	97 95       	ror	r25
    3844:	87 95       	ror	r24
    3846:	8f 77       	andi	r24, 0x7F	; 127
    3848:	89 a3       	std	Y+33, r24	; 0x21
    384a:	1a a2       	std	Y+34, r1	; 0x22
    384c:	80 2f       	mov	r24, r16
    384e:	84 70       	andi	r24, 0x04	; 4
    3850:	c8 2e       	mov	r12, r24
    3852:	02 ff       	sbrs	r16, 2
    3854:	98 c0       	rjmp	.+304    	; 0x3986 <VL53L0X_get_info_from_device+0x594>
    3856:	d2 fc       	sbrc	r13, 2
    3858:	9d c0       	rjmp	.+314    	; 0x3994 <VL53L0X_get_info_from_device+0x5a2>
    385a:	4b e7       	ldi	r20, 0x7B	; 123
    385c:	64 e9       	ldi	r22, 0x94	; 148
    385e:	c7 01       	movw	r24, r14
    3860:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3864:	b8 2e       	mov	r11, r24
    3866:	c7 01       	movw	r24, r14
    3868:	7b dd       	rcall	.-1290   	; 0x3360 <VL53L0X_device_read_strobe>
    386a:	8b 29       	or	r24, r11
    386c:	18 2b       	or	r17, r24
    386e:	ae 01       	movw	r20, r28
    3870:	48 5f       	subi	r20, 0xF8	; 248
    3872:	5f 4f       	sbci	r21, 0xFF	; 255
    3874:	60 e9       	ldi	r22, 0x90	; 144
    3876:	c7 01       	movw	r24, r14
    3878:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    387c:	18 2b       	or	r17, r24
    387e:	4c e7       	ldi	r20, 0x7C	; 124
    3880:	64 e9       	ldi	r22, 0x94	; 148
    3882:	c7 01       	movw	r24, r14
    3884:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3888:	18 2b       	or	r17, r24
    388a:	c7 01       	movw	r24, r14
    388c:	69 dd       	rcall	.-1326   	; 0x3360 <VL53L0X_device_read_strobe>
    388e:	18 2b       	or	r17, r24
    3890:	ae 01       	movw	r20, r28
    3892:	44 5f       	subi	r20, 0xF4	; 244
    3894:	5f 4f       	sbci	r21, 0xFF	; 255
    3896:	60 e9       	ldi	r22, 0x90	; 144
    3898:	c7 01       	movw	r24, r14
    389a:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    389e:	18 2b       	or	r17, r24
    38a0:	43 e7       	ldi	r20, 0x73	; 115
    38a2:	64 e9       	ldi	r22, 0x94	; 148
    38a4:	c7 01       	movw	r24, r14
    38a6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    38aa:	18 2b       	or	r17, r24
    38ac:	c7 01       	movw	r24, r14
    38ae:	58 dd       	rcall	.-1360   	; 0x3360 <VL53L0X_device_read_strobe>
    38b0:	18 2b       	or	r17, r24
    38b2:	ae 01       	movw	r20, r28
    38b4:	4e 5f       	subi	r20, 0xFE	; 254
    38b6:	5f 4f       	sbci	r21, 0xFF	; 255
    38b8:	60 e9       	ldi	r22, 0x90	; 144
    38ba:	c7 01       	movw	r24, r14
    38bc:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    38c0:	18 2b       	or	r17, r24
    38c2:	8a 80       	ldd	r8, Y+2	; 0x02
    38c4:	9b 80       	ldd	r9, Y+3	; 0x03
    38c6:	ac 80       	ldd	r10, Y+4	; 0x04
    38c8:	bd 80       	ldd	r11, Y+5	; 0x05
    38ca:	ba 2c       	mov	r11, r10
    38cc:	a9 2c       	mov	r10, r9
    38ce:	98 2c       	mov	r9, r8
    38d0:	88 24       	eor	r8, r8
    38d2:	24 01       	movw	r4, r8
    38d4:	35 01       	movw	r6, r10
    38d6:	66 24       	eor	r6, r6
    38d8:	77 24       	eor	r7, r7
    38da:	44 e7       	ldi	r20, 0x74	; 116
    38dc:	64 e9       	ldi	r22, 0x94	; 148
    38de:	c7 01       	movw	r24, r14
    38e0:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    38e4:	18 2b       	or	r17, r24
    38e6:	c7 01       	movw	r24, r14
    38e8:	3b dd       	rcall	.-1418   	; 0x3360 <VL53L0X_device_read_strobe>
    38ea:	18 2b       	or	r17, r24
    38ec:	ae 01       	movw	r20, r28
    38ee:	4e 5f       	subi	r20, 0xFE	; 254
    38f0:	5f 4f       	sbci	r21, 0xFF	; 255
    38f2:	60 e9       	ldi	r22, 0x90	; 144
    38f4:	c7 01       	movw	r24, r14
    38f6:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    38fa:	18 2b       	or	r17, r24
    38fc:	8a 80       	ldd	r8, Y+2	; 0x02
    38fe:	9b 80       	ldd	r9, Y+3	; 0x03
    3900:	ac 80       	ldd	r10, Y+4	; 0x04
    3902:	bd 80       	ldd	r11, Y+5	; 0x05
    3904:	8b 2c       	mov	r8, r11
    3906:	99 24       	eor	r9, r9
    3908:	aa 24       	eor	r10, r10
    390a:	bb 24       	eor	r11, r11
    390c:	84 28       	or	r8, r4
    390e:	95 28       	or	r9, r5
    3910:	a6 28       	or	r10, r6
    3912:	b7 28       	or	r11, r7
    3914:	45 e7       	ldi	r20, 0x75	; 117
    3916:	64 e9       	ldi	r22, 0x94	; 148
    3918:	c7 01       	movw	r24, r14
    391a:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    391e:	18 2b       	or	r17, r24
    3920:	c7 01       	movw	r24, r14
    3922:	1e dd       	rcall	.-1476   	; 0x3360 <VL53L0X_device_read_strobe>
    3924:	18 2b       	or	r17, r24
    3926:	ae 01       	movw	r20, r28
    3928:	4e 5f       	subi	r20, 0xFE	; 254
    392a:	5f 4f       	sbci	r21, 0xFF	; 255
    392c:	60 e9       	ldi	r22, 0x90	; 144
    392e:	c7 01       	movw	r24, r14
    3930:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    3934:	18 2b       	or	r17, r24
    3936:	4a 80       	ldd	r4, Y+2	; 0x02
    3938:	5b 80       	ldd	r5, Y+3	; 0x03
    393a:	6c 80       	ldd	r6, Y+4	; 0x04
    393c:	7d 80       	ldd	r7, Y+5	; 0x05
    393e:	76 2c       	mov	r7, r6
    3940:	65 2c       	mov	r6, r5
    3942:	54 2c       	mov	r5, r4
    3944:	44 24       	eor	r4, r4
    3946:	66 24       	eor	r6, r6
    3948:	77 24       	eor	r7, r7
    394a:	46 e7       	ldi	r20, 0x76	; 118
    394c:	64 e9       	ldi	r22, 0x94	; 148
    394e:	c7 01       	movw	r24, r14
    3950:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3954:	18 2b       	or	r17, r24
    3956:	c7 01       	movw	r24, r14
    3958:	03 dd       	rcall	.-1530   	; 0x3360 <VL53L0X_device_read_strobe>
    395a:	18 2b       	or	r17, r24
    395c:	ae 01       	movw	r20, r28
    395e:	4e 5f       	subi	r20, 0xFE	; 254
    3960:	5f 4f       	sbci	r21, 0xFF	; 255
    3962:	60 e9       	ldi	r22, 0x90	; 144
    3964:	c7 01       	movw	r24, r14
    3966:	0e 94 2c 2c 	call	0x5858	; 0x5858 <VL53L0X_RdDWord>
    396a:	18 2b       	or	r17, r24
    396c:	8a 81       	ldd	r24, Y+2	; 0x02
    396e:	9b 81       	ldd	r25, Y+3	; 0x03
    3970:	ac 81       	ldd	r26, Y+4	; 0x04
    3972:	bd 81       	ldd	r27, Y+5	; 0x05
    3974:	8b 2f       	mov	r24, r27
    3976:	99 27       	eor	r25, r25
    3978:	aa 27       	eor	r26, r26
    397a:	bb 27       	eor	r27, r27
    397c:	48 2a       	or	r4, r24
    397e:	59 2a       	or	r5, r25
    3980:	6a 2a       	or	r6, r26
    3982:	7b 2a       	or	r7, r27
    3984:	0d c0       	rjmp	.+26     	; 0x39a0 <VL53L0X_get_info_from_device+0x5ae>
    3986:	81 2c       	mov	r8, r1
    3988:	91 2c       	mov	r9, r1
    398a:	54 01       	movw	r10, r8
    398c:	41 2c       	mov	r4, r1
    398e:	51 2c       	mov	r5, r1
    3990:	32 01       	movw	r6, r4
    3992:	06 c0       	rjmp	.+12     	; 0x39a0 <VL53L0X_get_info_from_device+0x5ae>
    3994:	81 2c       	mov	r8, r1
    3996:	91 2c       	mov	r9, r1
    3998:	54 01       	movw	r10, r8
    399a:	41 2c       	mov	r4, r1
    399c:	51 2c       	mov	r5, r1
    399e:	32 01       	movw	r6, r4
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	61 e8       	ldi	r22, 0x81	; 129
    39a4:	c7 01       	movw	r24, r14
    39a6:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    39aa:	18 2b       	or	r17, r24
    39ac:	46 e0       	ldi	r20, 0x06	; 6
    39ae:	6f ef       	ldi	r22, 0xFF	; 255
    39b0:	c7 01       	movw	r24, r14
    39b2:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    39b6:	18 2b       	or	r17, r24
    39b8:	ae 01       	movw	r20, r28
    39ba:	4f 5f       	subi	r20, 0xFF	; 255
    39bc:	5f 4f       	sbci	r21, 0xFF	; 255
    39be:	63 e8       	ldi	r22, 0x83	; 131
    39c0:	c7 01       	movw	r24, r14
    39c2:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    39c6:	18 2b       	or	r17, r24
    39c8:	49 81       	ldd	r20, Y+1	; 0x01
    39ca:	4b 7f       	andi	r20, 0xFB	; 251
    39cc:	63 e8       	ldi	r22, 0x83	; 131
    39ce:	c7 01       	movw	r24, r14
    39d0:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    39d4:	18 2b       	or	r17, r24
    39d6:	41 e0       	ldi	r20, 0x01	; 1
    39d8:	6f ef       	ldi	r22, 0xFF	; 255
    39da:	c7 01       	movw	r24, r14
    39dc:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    39e0:	18 2b       	or	r17, r24
    39e2:	41 e0       	ldi	r20, 0x01	; 1
    39e4:	60 e0       	ldi	r22, 0x00	; 0
    39e6:	c7 01       	movw	r24, r14
    39e8:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    39ec:	18 2b       	or	r17, r24
    39ee:	40 e0       	ldi	r20, 0x00	; 0
    39f0:	6f ef       	ldi	r22, 0xFF	; 255
    39f2:	c7 01       	movw	r24, r14
    39f4:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    39f8:	18 2b       	or	r17, r24
    39fa:	40 e0       	ldi	r20, 0x00	; 0
    39fc:	60 e8       	ldi	r22, 0x80	; 128
    39fe:	c7 01       	movw	r24, r14
    3a00:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3a04:	18 2b       	or	r17, r24
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <VL53L0X_get_info_from_device+0x618>
    3a08:	82 c0       	rjmp	.+260    	; 0x3b0e <VL53L0X_get_info_from_device+0x71c>
    3a0a:	22 20       	and	r2, r2
    3a0c:	b9 f0       	breq	.+46     	; 0x3a3c <VL53L0X_get_info_from_device+0x64a>
    3a0e:	d0 fc       	sbrc	r13, 0
    3a10:	15 c0       	rjmp	.+42     	; 0x3a3c <VL53L0X_get_info_from_device+0x64a>
    3a12:	f7 01       	movw	r30, r14
    3a14:	ee 5f       	subi	r30, 0xFE	; 254
    3a16:	fe 4f       	sbci	r31, 0xFE	; 254
    3a18:	29 a5       	ldd	r18, Y+41	; 0x29
    3a1a:	20 83       	st	Z, r18
    3a1c:	31 96       	adiw	r30, 0x01	; 1
    3a1e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3a20:	80 83       	st	Z, r24
    3a22:	fe 01       	movw	r30, r28
    3a24:	b3 96       	adiw	r30, 0x23	; 35
    3a26:	d7 01       	movw	r26, r14
    3a28:	a9 5e       	subi	r26, 0xE9	; 233
    3a2a:	be 4f       	sbci	r27, 0xFE	; 254
    3a2c:	9e 01       	movw	r18, r28
    3a2e:	27 5d       	subi	r18, 0xD7	; 215
    3a30:	3f 4f       	sbci	r19, 0xFF	; 255
    3a32:	81 91       	ld	r24, Z+
    3a34:	8d 93       	st	X+, r24
    3a36:	2e 17       	cp	r18, r30
    3a38:	3f 07       	cpc	r19, r31
    3a3a:	d9 f7       	brne	.-10     	; 0x3a32 <VL53L0X_get_info_from_device+0x640>
    3a3c:	33 20       	and	r3, r3
    3a3e:	91 f0       	breq	.+36     	; 0x3a64 <VL53L0X_get_info_from_device+0x672>
    3a40:	d1 fc       	sbrc	r13, 1
    3a42:	10 c0       	rjmp	.+32     	; 0x3a64 <VL53L0X_get_info_from_device+0x672>
    3a44:	8e 81       	ldd	r24, Y+6	; 0x06
    3a46:	f7 01       	movw	r30, r14
    3a48:	e0 52       	subi	r30, 0x20	; 32
    3a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4c:	80 83       	st	Z, r24
    3a4e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a50:	31 96       	adiw	r30, 0x01	; 1
    3a52:	80 83       	st	Z, r24
    3a54:	be 01       	movw	r22, r28
    3a56:	60 5f       	subi	r22, 0xF0	; 240
    3a58:	7f 4f       	sbci	r23, 0xFF	; 255
    3a5a:	c7 01       	movw	r24, r14
    3a5c:	8e 51       	subi	r24, 0x1E	; 30
    3a5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a60:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <strcpy>
    3a64:	cc 20       	and	r12, r12
    3a66:	09 f4       	brne	.+2      	; 0x3a6a <VL53L0X_get_info_from_device+0x678>
    3a68:	4b c0       	rjmp	.+150    	; 0x3b00 <VL53L0X_get_info_from_device+0x70e>
    3a6a:	d2 fc       	sbrc	r13, 2
    3a6c:	49 c0       	rjmp	.+146    	; 0x3b00 <VL53L0X_get_info_from_device+0x70e>
    3a6e:	88 85       	ldd	r24, Y+8	; 0x08
    3a70:	99 85       	ldd	r25, Y+9	; 0x09
    3a72:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a74:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a76:	f7 01       	movw	r30, r14
    3a78:	eb 5f       	subi	r30, 0xFB	; 251
    3a7a:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7c:	80 83       	st	Z, r24
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	a2 83       	std	Z+2, r26	; 0x02
    3a82:	b3 83       	std	Z+3, r27	; 0x03
    3a84:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a86:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a88:	ae 85       	ldd	r26, Y+14	; 0x0e
    3a8a:	bf 85       	ldd	r27, Y+15	; 0x0f
    3a8c:	34 96       	adiw	r30, 0x04	; 4
    3a8e:	80 83       	st	Z, r24
    3a90:	91 83       	std	Z+1, r25	; 0x01
    3a92:	a2 83       	std	Z+2, r26	; 0x02
    3a94:	b3 83       	std	Z+3, r27	; 0x03
    3a96:	34 96       	adiw	r30, 0x04	; 4
    3a98:	07 2e       	mov	r0, r23
    3a9a:	79 e0       	ldi	r23, 0x09	; 9
    3a9c:	88 0c       	add	r8, r8
    3a9e:	99 1c       	adc	r9, r9
    3aa0:	aa 1c       	adc	r10, r10
    3aa2:	bb 1c       	adc	r11, r11
    3aa4:	7a 95       	dec	r23
    3aa6:	d1 f7       	brne	.-12     	; 0x3a9c <VL53L0X_get_info_from_device+0x6aa>
    3aa8:	70 2d       	mov	r23, r0
    3aaa:	80 82       	st	Z, r8
    3aac:	91 82       	std	Z+1, r9	; 0x01
    3aae:	a2 82       	std	Z+2, r10	; 0x02
    3ab0:	b3 82       	std	Z+3, r11	; 0x03
    3ab2:	41 14       	cp	r4, r1
    3ab4:	51 04       	cpc	r5, r1
    3ab6:	61 04       	cpc	r6, r1
    3ab8:	71 04       	cpc	r7, r1
    3aba:	b9 f0       	breq	.+46     	; 0x3aea <VL53L0X_get_info_from_device+0x6f8>
    3abc:	a3 01       	movw	r20, r6
    3abe:	92 01       	movw	r18, r4
    3ac0:	39 51       	subi	r19, 0x19	; 25
    3ac2:	41 09       	sbc	r20, r1
    3ac4:	51 09       	sbc	r21, r1
    3ac6:	a8 ee       	ldi	r26, 0xE8	; 232
    3ac8:	b3 e0       	ldi	r27, 0x03	; 3
    3aca:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    3ace:	dc 01       	movw	r26, r24
    3ad0:	cb 01       	movw	r24, r22
    3ad2:	68 94       	set
    3ad4:	13 f8       	bld	r1, 3
    3ad6:	b6 95       	lsr	r27
    3ad8:	a7 95       	ror	r26
    3ada:	97 95       	ror	r25
    3adc:	87 95       	ror	r24
    3ade:	16 94       	lsr	r1
    3ae0:	d1 f7       	brne	.-12     	; 0x3ad6 <VL53L0X_get_info_from_device+0x6e4>
    3ae2:	91 95       	neg	r25
    3ae4:	81 95       	neg	r24
    3ae6:	91 09       	sbc	r25, r1
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <VL53L0X_get_info_from_device+0x6fc>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	09 2e       	mov	r0, r25
    3af0:	00 0c       	add	r0, r0
    3af2:	aa 0b       	sbc	r26, r26
    3af4:	bb 0b       	sbc	r27, r27
    3af6:	f7 01       	movw	r30, r14
    3af8:	84 87       	std	Z+12, r24	; 0x0c
    3afa:	95 87       	std	Z+13, r25	; 0x0d
    3afc:	a6 87       	std	Z+14, r26	; 0x0e
    3afe:	b7 87       	std	Z+15, r27	; 0x0f
    3b00:	f7 01       	movw	r30, r14
    3b02:	e1 52       	subi	r30, 0x21	; 33
    3b04:	ff 4f       	sbci	r31, 0xFF	; 255
    3b06:	0d 29       	or	r16, r13
    3b08:	00 83       	st	Z, r16
    3b0a:	01 c0       	rjmp	.+2      	; 0x3b0e <VL53L0X_get_info_from_device+0x71c>
    3b0c:	10 e0       	ldi	r17, 0x00	; 0
    3b0e:	81 2f       	mov	r24, r17
    3b10:	aa 96       	adiw	r28, 0x2a	; 42
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	f8 94       	cli
    3b16:	de bf       	out	0x3e, r29	; 62
    3b18:	0f be       	out	0x3f, r0	; 63
    3b1a:	cd bf       	out	0x3d, r28	; 61
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	1f 91       	pop	r17
    3b22:	0f 91       	pop	r16
    3b24:	ff 90       	pop	r15
    3b26:	ef 90       	pop	r14
    3b28:	df 90       	pop	r13
    3b2a:	cf 90       	pop	r12
    3b2c:	bf 90       	pop	r11
    3b2e:	af 90       	pop	r10
    3b30:	9f 90       	pop	r9
    3b32:	8f 90       	pop	r8
    3b34:	7f 90       	pop	r7
    3b36:	6f 90       	pop	r6
    3b38:	5f 90       	pop	r5
    3b3a:	4f 90       	pop	r4
    3b3c:	3f 90       	pop	r3
    3b3e:	2f 90       	pop	r2
    3b40:	08 95       	ret

00003b42 <VL53L0X_encode_timeout>:
    3b42:	0f 93       	push	r16
    3b44:	1f 93       	push	r17
    3b46:	61 15       	cp	r22, r1
    3b48:	71 05       	cpc	r23, r1
    3b4a:	81 05       	cpc	r24, r1
    3b4c:	91 05       	cpc	r25, r1
    3b4e:	21 f1       	breq	.+72     	; 0x3b98 <VL53L0X_encode_timeout+0x56>
    3b50:	ab 01       	movw	r20, r22
    3b52:	bc 01       	movw	r22, r24
    3b54:	41 50       	subi	r20, 0x01	; 1
    3b56:	51 09       	sbc	r21, r1
    3b58:	61 09       	sbc	r22, r1
    3b5a:	71 09       	sbc	r23, r1
    3b5c:	db 01       	movw	r26, r22
    3b5e:	ca 01       	movw	r24, r20
    3b60:	88 27       	eor	r24, r24
    3b62:	89 2b       	or	r24, r25
    3b64:	8a 2b       	or	r24, r26
    3b66:	8b 2b       	or	r24, r27
    3b68:	79 f0       	breq	.+30     	; 0x3b88 <VL53L0X_encode_timeout+0x46>
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	76 95       	lsr	r23
    3b70:	67 95       	ror	r22
    3b72:	57 95       	ror	r21
    3b74:	47 95       	ror	r20
    3b76:	01 96       	adiw	r24, 0x01	; 1
    3b78:	8a 01       	movw	r16, r20
    3b7a:	9b 01       	movw	r18, r22
    3b7c:	00 27       	eor	r16, r16
    3b7e:	01 2b       	or	r16, r17
    3b80:	02 2b       	or	r16, r18
    3b82:	03 2b       	or	r16, r19
    3b84:	a1 f7       	brne	.-24     	; 0x3b6e <VL53L0X_encode_timeout+0x2c>
    3b86:	02 c0       	rjmp	.+4      	; 0x3b8c <VL53L0X_encode_timeout+0x4a>
    3b88:	80 e0       	ldi	r24, 0x00	; 0
    3b8a:	90 e0       	ldi	r25, 0x00	; 0
    3b8c:	98 2f       	mov	r25, r24
    3b8e:	88 27       	eor	r24, r24
    3b90:	55 27       	eor	r21, r21
    3b92:	84 0f       	add	r24, r20
    3b94:	95 1f       	adc	r25, r21
    3b96:	02 c0       	rjmp	.+4      	; 0x3b9c <VL53L0X_encode_timeout+0x5a>
    3b98:	80 e0       	ldi	r24, 0x00	; 0
    3b9a:	90 e0       	ldi	r25, 0x00	; 0
    3b9c:	1f 91       	pop	r17
    3b9e:	0f 91       	pop	r16
    3ba0:	08 95       	ret

00003ba2 <VL53L0X_calc_timeout_mclks>:
    3ba2:	8f 92       	push	r8
    3ba4:	9f 92       	push	r9
    3ba6:	af 92       	push	r10
    3ba8:	bf 92       	push	r11
    3baa:	cf 92       	push	r12
    3bac:	df 92       	push	r13
    3bae:	ef 92       	push	r14
    3bb0:	ff 92       	push	r15
    3bb2:	4a 01       	movw	r8, r20
    3bb4:	5b 01       	movw	r10, r22
    3bb6:	a2 2f       	mov	r26, r18
    3bb8:	b0 e0       	ldi	r27, 0x00	; 0
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	3f e2       	ldi	r19, 0x2F	; 47
    3bbe:	4a e3       	ldi	r20, 0x3A	; 58
    3bc0:	50 e0       	ldi	r21, 0x00	; 0
    3bc2:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    3bc6:	6b 01       	movw	r12, r22
    3bc8:	7c 01       	movw	r14, r24
    3bca:	24 ef       	ldi	r18, 0xF4	; 244
    3bcc:	c2 0e       	add	r12, r18
    3bce:	21 e0       	ldi	r18, 0x01	; 1
    3bd0:	d2 1e       	adc	r13, r18
    3bd2:	e1 1c       	adc	r14, r1
    3bd4:	f1 1c       	adc	r15, r1
    3bd6:	a8 ee       	ldi	r26, 0xE8	; 232
    3bd8:	b3 e0       	ldi	r27, 0x03	; 3
    3bda:	a5 01       	movw	r20, r10
    3bdc:	94 01       	movw	r18, r8
    3bde:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    3be2:	4b 01       	movw	r8, r22
    3be4:	5c 01       	movw	r10, r24
    3be6:	c7 01       	movw	r24, r14
    3be8:	b6 01       	movw	r22, r12
    3bea:	20 ed       	ldi	r18, 0xD0	; 208
    3bec:	37 e0       	ldi	r19, 0x07	; 7
    3bee:	40 e0       	ldi	r20, 0x00	; 0
    3bf0:	50 e0       	ldi	r21, 0x00	; 0
    3bf2:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    3bf6:	82 0e       	add	r8, r18
    3bf8:	93 1e       	adc	r9, r19
    3bfa:	a4 1e       	adc	r10, r20
    3bfc:	b5 1e       	adc	r11, r21
    3bfe:	c7 01       	movw	r24, r14
    3c00:	b6 01       	movw	r22, r12
    3c02:	28 ee       	ldi	r18, 0xE8	; 232
    3c04:	33 e0       	ldi	r19, 0x03	; 3
    3c06:	40 e0       	ldi	r20, 0x00	; 0
    3c08:	50 e0       	ldi	r21, 0x00	; 0
    3c0a:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    3c0e:	c5 01       	movw	r24, r10
    3c10:	b4 01       	movw	r22, r8
    3c12:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    3c16:	ca 01       	movw	r24, r20
    3c18:	b9 01       	movw	r22, r18
    3c1a:	ff 90       	pop	r15
    3c1c:	ef 90       	pop	r14
    3c1e:	df 90       	pop	r13
    3c20:	cf 90       	pop	r12
    3c22:	bf 90       	pop	r11
    3c24:	af 90       	pop	r10
    3c26:	9f 90       	pop	r9
    3c28:	8f 90       	pop	r8
    3c2a:	08 95       	ret

00003c2c <VL53L0X_calc_timeout_us>:
    3c2c:	4f 92       	push	r4
    3c2e:	5f 92       	push	r5
    3c30:	6f 92       	push	r6
    3c32:	7f 92       	push	r7
    3c34:	8f 92       	push	r8
    3c36:	9f 92       	push	r9
    3c38:	af 92       	push	r10
    3c3a:	bf 92       	push	r11
    3c3c:	cf 92       	push	r12
    3c3e:	df 92       	push	r13
    3c40:	ef 92       	push	r14
    3c42:	ff 92       	push	r15
    3c44:	3b 01       	movw	r6, r22
    3c46:	a4 2f       	mov	r26, r20
    3c48:	b0 e0       	ldi	r27, 0x00	; 0
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	3f e2       	ldi	r19, 0x2F	; 47
    3c4e:	4a e3       	ldi	r20, 0x3A	; 58
    3c50:	50 e0       	ldi	r21, 0x00	; 0
    3c52:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    3c56:	6b 01       	movw	r12, r22
    3c58:	7c 01       	movw	r14, r24
    3c5a:	24 ef       	ldi	r18, 0xF4	; 244
    3c5c:	c2 0e       	add	r12, r18
    3c5e:	21 e0       	ldi	r18, 0x01	; 1
    3c60:	d2 1e       	adc	r13, r18
    3c62:	e1 1c       	adc	r14, r1
    3c64:	f1 1c       	adc	r15, r1
    3c66:	0f 2e       	mov	r0, r31
    3c68:	f8 ee       	ldi	r31, 0xE8	; 232
    3c6a:	8f 2e       	mov	r8, r31
    3c6c:	f3 e0       	ldi	r31, 0x03	; 3
    3c6e:	9f 2e       	mov	r9, r31
    3c70:	a1 2c       	mov	r10, r1
    3c72:	b1 2c       	mov	r11, r1
    3c74:	f0 2d       	mov	r31, r0
    3c76:	c7 01       	movw	r24, r14
    3c78:	b6 01       	movw	r22, r12
    3c7a:	a5 01       	movw	r20, r10
    3c7c:	94 01       	movw	r18, r8
    3c7e:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    3c82:	d3 01       	movw	r26, r6
    3c84:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    3c88:	2b 01       	movw	r4, r22
    3c8a:	3c 01       	movw	r6, r24
    3c8c:	c7 01       	movw	r24, r14
    3c8e:	b6 01       	movw	r22, r12
    3c90:	20 ed       	ldi	r18, 0xD0	; 208
    3c92:	37 e0       	ldi	r19, 0x07	; 7
    3c94:	40 e0       	ldi	r20, 0x00	; 0
    3c96:	50 e0       	ldi	r21, 0x00	; 0
    3c98:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    3c9c:	c3 01       	movw	r24, r6
    3c9e:	b2 01       	movw	r22, r4
    3ca0:	62 0f       	add	r22, r18
    3ca2:	73 1f       	adc	r23, r19
    3ca4:	84 1f       	adc	r24, r20
    3ca6:	95 1f       	adc	r25, r21
    3ca8:	a5 01       	movw	r20, r10
    3caa:	94 01       	movw	r18, r8
    3cac:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>
    3cb0:	ca 01       	movw	r24, r20
    3cb2:	b9 01       	movw	r22, r18
    3cb4:	ff 90       	pop	r15
    3cb6:	ef 90       	pop	r14
    3cb8:	df 90       	pop	r13
    3cba:	cf 90       	pop	r12
    3cbc:	bf 90       	pop	r11
    3cbe:	af 90       	pop	r10
    3cc0:	9f 90       	pop	r9
    3cc2:	8f 90       	pop	r8
    3cc4:	7f 90       	pop	r7
    3cc6:	6f 90       	pop	r6
    3cc8:	5f 90       	pop	r5
    3cca:	4f 90       	pop	r4
    3ccc:	08 95       	ret

00003cce <get_sequence_step_timeout>:
    3cce:	af 92       	push	r10
    3cd0:	bf 92       	push	r11
    3cd2:	cf 92       	push	r12
    3cd4:	df 92       	push	r13
    3cd6:	ef 92       	push	r14
    3cd8:	ff 92       	push	r15
    3cda:	1f 93       	push	r17
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
    3ce4:	2b 97       	sbiw	r28, 0x0b	; 11
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	7c 01       	movw	r14, r24
    3cf2:	6a 01       	movw	r12, r20
    3cf4:	1a 82       	std	Y+2, r1	; 0x02
    3cf6:	1c 82       	std	Y+4, r1	; 0x04
    3cf8:	1b 82       	std	Y+3, r1	; 0x03
    3cfa:	63 30       	cpi	r22, 0x03	; 3
    3cfc:	00 f5       	brcc	.+64     	; 0x3d3e <get_sequence_step_timeout+0x70>
    3cfe:	ae 01       	movw	r20, r28
    3d00:	4f 5f       	subi	r20, 0xFF	; 255
    3d02:	5f 4f       	sbci	r21, 0xFF	; 255
    3d04:	60 e0       	ldi	r22, 0x00	; 0
    3d06:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3d0a:	18 2f       	mov	r17, r24
    3d0c:	81 11       	cpse	r24, r1
    3d0e:	08 c0       	rjmp	.+16     	; 0x3d20 <get_sequence_step_timeout+0x52>
    3d10:	ae 01       	movw	r20, r28
    3d12:	4e 5f       	subi	r20, 0xFE	; 254
    3d14:	5f 4f       	sbci	r21, 0xFF	; 255
    3d16:	66 e4       	ldi	r22, 0x46	; 70
    3d18:	c7 01       	movw	r24, r14
    3d1a:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
    3d1e:	18 2f       	mov	r17, r24
    3d20:	6a 81       	ldd	r22, Y+2	; 0x02
    3d22:	86 2f       	mov	r24, r22
    3d24:	90 e0       	ldi	r25, 0x00	; 0
    3d26:	a0 e0       	ldi	r26, 0x00	; 0
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	bc 01       	movw	r22, r24
    3d2c:	cd 01       	movw	r24, r26
    3d2e:	6f 5f       	subi	r22, 0xFF	; 255
    3d30:	7f 4f       	sbci	r23, 0xFF	; 255
    3d32:	8f 4f       	sbci	r24, 0xFF	; 255
    3d34:	9f 4f       	sbci	r25, 0xFF	; 255
    3d36:	49 81       	ldd	r20, Y+1	; 0x01
    3d38:	c7 01       	movw	r24, r14
    3d3a:	78 df       	rcall	.-272    	; 0x3c2c <VL53L0X_calc_timeout_us>
    3d3c:	a4 c0       	rjmp	.+328    	; 0x3e86 <get_sequence_step_timeout+0x1b8>
    3d3e:	63 30       	cpi	r22, 0x03	; 3
    3d40:	99 f5       	brne	.+102    	; 0x3da8 <get_sequence_step_timeout+0xda>
    3d42:	ae 01       	movw	r20, r28
    3d44:	4f 5f       	subi	r20, 0xFF	; 255
    3d46:	5f 4f       	sbci	r21, 0xFF	; 255
    3d48:	60 e0       	ldi	r22, 0x00	; 0
    3d4a:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3d4e:	18 2f       	mov	r17, r24
    3d50:	81 11       	cpse	r24, r1
    3d52:	91 c0       	rjmp	.+290    	; 0x3e76 <get_sequence_step_timeout+0x1a8>
    3d54:	ae 01       	movw	r20, r28
    3d56:	4f 5f       	subi	r20, 0xFF	; 255
    3d58:	5f 4f       	sbci	r21, 0xFF	; 255
    3d5a:	60 e0       	ldi	r22, 0x00	; 0
    3d5c:	c7 01       	movw	r24, r14
    3d5e:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3d62:	18 2f       	mov	r17, r24
    3d64:	81 11       	cpse	r24, r1
    3d66:	08 c0       	rjmp	.+16     	; 0x3d78 <get_sequence_step_timeout+0xaa>
    3d68:	ae 01       	movw	r20, r28
    3d6a:	4d 5f       	subi	r20, 0xFD	; 253
    3d6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6e:	61 e5       	ldi	r22, 0x51	; 81
    3d70:	c7 01       	movw	r24, r14
    3d72:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    3d76:	18 2f       	mov	r17, r24
    3d78:	2b 81       	ldd	r18, Y+3	; 0x03
    3d7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d7c:	b9 01       	movw	r22, r18
    3d7e:	77 27       	eor	r23, r23
    3d80:	cb 01       	movw	r24, r22
    3d82:	a0 e0       	ldi	r26, 0x00	; 0
    3d84:	b0 e0       	ldi	r27, 0x00	; 0
    3d86:	04 c0       	rjmp	.+8      	; 0x3d90 <get_sequence_step_timeout+0xc2>
    3d88:	88 0f       	add	r24, r24
    3d8a:	99 1f       	adc	r25, r25
    3d8c:	aa 1f       	adc	r26, r26
    3d8e:	bb 1f       	adc	r27, r27
    3d90:	3a 95       	dec	r19
    3d92:	d2 f7       	brpl	.-12     	; 0x3d88 <get_sequence_step_timeout+0xba>
    3d94:	bc 01       	movw	r22, r24
    3d96:	cd 01       	movw	r24, r26
    3d98:	6f 5f       	subi	r22, 0xFF	; 255
    3d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3d9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3da0:	49 81       	ldd	r20, Y+1	; 0x01
    3da2:	c7 01       	movw	r24, r14
    3da4:	43 df       	rcall	.-378    	; 0x3c2c <VL53L0X_calc_timeout_us>
    3da6:	6f c0       	rjmp	.+222    	; 0x3e86 <get_sequence_step_timeout+0x1b8>
    3da8:	64 30       	cpi	r22, 0x04	; 4
    3daa:	09 f0       	breq	.+2      	; 0x3dae <get_sequence_step_timeout+0xe0>
    3dac:	68 c0       	rjmp	.+208    	; 0x3e7e <get_sequence_step_timeout+0x1b0>
    3dae:	be 01       	movw	r22, r28
    3db0:	69 5f       	subi	r22, 0xF9	; 249
    3db2:	7f 4f       	sbci	r23, 0xFF	; 255
    3db4:	0e 94 bc 08 	call	0x1178	; 0x1178 <VL53L0X_GetSequenceStepEnables>
    3db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dba:	88 23       	and	r24, r24
    3dbc:	31 f1       	breq	.+76     	; 0x3e0a <get_sequence_step_timeout+0x13c>
    3dbe:	ae 01       	movw	r20, r28
    3dc0:	4f 5f       	subi	r20, 0xFF	; 255
    3dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	c7 01       	movw	r24, r14
    3dc8:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3dcc:	18 2f       	mov	r17, r24
    3dce:	81 11       	cpse	r24, r1
    3dd0:	41 c0       	rjmp	.+130    	; 0x3e54 <get_sequence_step_timeout+0x186>
    3dd2:	ae 01       	movw	r20, r28
    3dd4:	4d 5f       	subi	r20, 0xFD	; 253
    3dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    3dd8:	61 e5       	ldi	r22, 0x51	; 81
    3dda:	c7 01       	movw	r24, r14
    3ddc:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    3de0:	18 2f       	mov	r17, r24
    3de2:	2b 81       	ldd	r18, Y+3	; 0x03
    3de4:	3c 81       	ldd	r19, Y+4	; 0x04
    3de6:	c9 01       	movw	r24, r18
    3de8:	99 27       	eor	r25, r25
    3dea:	a0 e0       	ldi	r26, 0x00	; 0
    3dec:	b0 e0       	ldi	r27, 0x00	; 0
    3dee:	04 c0       	rjmp	.+8      	; 0x3df8 <get_sequence_step_timeout+0x12a>
    3df0:	88 0f       	add	r24, r24
    3df2:	99 1f       	adc	r25, r25
    3df4:	aa 1f       	adc	r26, r26
    3df6:	bb 1f       	adc	r27, r27
    3df8:	3a 95       	dec	r19
    3dfa:	d2 f7       	brpl	.-12     	; 0x3df0 <get_sequence_step_timeout+0x122>
    3dfc:	01 96       	adiw	r24, 0x01	; 1
    3dfe:	a1 1d       	adc	r26, r1
    3e00:	b1 1d       	adc	r27, r1
    3e02:	5c 01       	movw	r10, r24
    3e04:	11 11       	cpse	r17, r1
    3e06:	2b c0       	rjmp	.+86     	; 0x3e5e <get_sequence_step_timeout+0x190>
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <get_sequence_step_timeout+0x140>
    3e0a:	a1 2c       	mov	r10, r1
    3e0c:	b1 2c       	mov	r11, r1
    3e0e:	ae 01       	movw	r20, r28
    3e10:	4f 5f       	subi	r20, 0xFF	; 255
    3e12:	5f 4f       	sbci	r21, 0xFF	; 255
    3e14:	61 e0       	ldi	r22, 0x01	; 1
    3e16:	c7 01       	movw	r24, r14
    3e18:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3e1c:	18 2f       	mov	r17, r24
    3e1e:	81 11       	cpse	r24, r1
    3e20:	21 c0       	rjmp	.+66     	; 0x3e64 <get_sequence_step_timeout+0x196>
    3e22:	ae 01       	movw	r20, r28
    3e24:	4b 5f       	subi	r20, 0xFB	; 251
    3e26:	5f 4f       	sbci	r21, 0xFF	; 255
    3e28:	61 e7       	ldi	r22, 0x71	; 113
    3e2a:	c7 01       	movw	r24, r14
    3e2c:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    3e30:	18 2f       	mov	r17, r24
    3e32:	2d 81       	ldd	r18, Y+5	; 0x05
    3e34:	3e 81       	ldd	r19, Y+6	; 0x06
    3e36:	c9 01       	movw	r24, r18
    3e38:	99 27       	eor	r25, r25
    3e3a:	a0 e0       	ldi	r26, 0x00	; 0
    3e3c:	b0 e0       	ldi	r27, 0x00	; 0
    3e3e:	04 c0       	rjmp	.+8      	; 0x3e48 <get_sequence_step_timeout+0x17a>
    3e40:	88 0f       	add	r24, r24
    3e42:	99 1f       	adc	r25, r25
    3e44:	aa 1f       	adc	r26, r26
    3e46:	bb 1f       	adc	r27, r27
    3e48:	3a 95       	dec	r19
    3e4a:	d2 f7       	brpl	.-12     	; 0x3e40 <get_sequence_step_timeout+0x172>
    3e4c:	01 96       	adiw	r24, 0x01	; 1
    3e4e:	a1 1d       	adc	r26, r1
    3e50:	b1 1d       	adc	r27, r1
    3e52:	0a c0       	rjmp	.+20     	; 0x3e68 <get_sequence_step_timeout+0x19a>
    3e54:	a1 2c       	mov	r10, r1
    3e56:	b1 2c       	mov	r11, r1
    3e58:	80 e0       	ldi	r24, 0x00	; 0
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	05 c0       	rjmp	.+10     	; 0x3e68 <get_sequence_step_timeout+0x19a>
    3e5e:	80 e0       	ldi	r24, 0x00	; 0
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	02 c0       	rjmp	.+4      	; 0x3e68 <get_sequence_step_timeout+0x19a>
    3e64:	80 e0       	ldi	r24, 0x00	; 0
    3e66:	90 e0       	ldi	r25, 0x00	; 0
    3e68:	bc 01       	movw	r22, r24
    3e6a:	6a 19       	sub	r22, r10
    3e6c:	7b 09       	sbc	r23, r11
    3e6e:	49 81       	ldd	r20, Y+1	; 0x01
    3e70:	c7 01       	movw	r24, r14
    3e72:	dc de       	rcall	.-584    	; 0x3c2c <VL53L0X_calc_timeout_us>
    3e74:	08 c0       	rjmp	.+16     	; 0x3e86 <get_sequence_step_timeout+0x1b8>
    3e76:	60 e0       	ldi	r22, 0x00	; 0
    3e78:	70 e0       	ldi	r23, 0x00	; 0
    3e7a:	cb 01       	movw	r24, r22
    3e7c:	04 c0       	rjmp	.+8      	; 0x3e86 <get_sequence_step_timeout+0x1b8>
    3e7e:	60 e0       	ldi	r22, 0x00	; 0
    3e80:	70 e0       	ldi	r23, 0x00	; 0
    3e82:	cb 01       	movw	r24, r22
    3e84:	10 e0       	ldi	r17, 0x00	; 0
    3e86:	f6 01       	movw	r30, r12
    3e88:	60 83       	st	Z, r22
    3e8a:	71 83       	std	Z+1, r23	; 0x01
    3e8c:	82 83       	std	Z+2, r24	; 0x02
    3e8e:	93 83       	std	Z+3, r25	; 0x03
    3e90:	81 2f       	mov	r24, r17
    3e92:	2b 96       	adiw	r28, 0x0b	; 11
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	f8 94       	cli
    3e98:	de bf       	out	0x3e, r29	; 62
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	cd bf       	out	0x3d, r28	; 61
    3e9e:	df 91       	pop	r29
    3ea0:	cf 91       	pop	r28
    3ea2:	1f 91       	pop	r17
    3ea4:	ff 90       	pop	r15
    3ea6:	ef 90       	pop	r14
    3ea8:	df 90       	pop	r13
    3eaa:	cf 90       	pop	r12
    3eac:	bf 90       	pop	r11
    3eae:	af 90       	pop	r10
    3eb0:	08 95       	ret

00003eb2 <set_sequence_step_timeout>:
    3eb2:	8f 92       	push	r8
    3eb4:	9f 92       	push	r9
    3eb6:	af 92       	push	r10
    3eb8:	bf 92       	push	r11
    3eba:	cf 92       	push	r12
    3ebc:	df 92       	push	r13
    3ebe:	ef 92       	push	r14
    3ec0:	ff 92       	push	r15
    3ec2:	0f 93       	push	r16
    3ec4:	1f 93       	push	r17
    3ec6:	cf 93       	push	r28
    3ec8:	df 93       	push	r29
    3eca:	cd b7       	in	r28, 0x3d	; 61
    3ecc:	de b7       	in	r29, 0x3e	; 62
    3ece:	28 97       	sbiw	r28, 0x08	; 8
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	f8 94       	cli
    3ed4:	de bf       	out	0x3e, r29	; 62
    3ed6:	0f be       	out	0x3f, r0	; 63
    3ed8:	cd bf       	out	0x3d, r28	; 61
    3eda:	8c 01       	movw	r16, r24
    3edc:	49 01       	movw	r8, r18
    3ede:	5a 01       	movw	r10, r20
    3ee0:	63 30       	cpi	r22, 0x03	; 3
    3ee2:	18 f5       	brcc	.+70     	; 0x3f2a <set_sequence_step_timeout+0x78>
    3ee4:	ae 01       	movw	r20, r28
    3ee6:	4f 5f       	subi	r20, 0xFF	; 255
    3ee8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3ef0:	f8 2e       	mov	r15, r24
    3ef2:	81 11       	cpse	r24, r1
    3ef4:	a1 c0       	rjmp	.+322    	; 0x4038 <set_sequence_step_timeout+0x186>
    3ef6:	29 81       	ldd	r18, Y+1	; 0x01
    3ef8:	b5 01       	movw	r22, r10
    3efa:	a4 01       	movw	r20, r8
    3efc:	c8 01       	movw	r24, r16
    3efe:	51 de       	rcall	.-862    	; 0x3ba2 <VL53L0X_calc_timeout_mclks>
    3f00:	61 30       	cpi	r22, 0x01	; 1
    3f02:	21 e0       	ldi	r18, 0x01	; 1
    3f04:	72 07       	cpc	r23, r18
    3f06:	18 f4       	brcc	.+6      	; 0x3f0e <set_sequence_step_timeout+0x5c>
    3f08:	4f ef       	ldi	r20, 0xFF	; 255
    3f0a:	46 0f       	add	r20, r22
    3f0c:	01 c0       	rjmp	.+2      	; 0x3f10 <set_sequence_step_timeout+0x5e>
    3f0e:	4f ef       	ldi	r20, 0xFF	; 255
    3f10:	f8 01       	movw	r30, r16
    3f12:	e4 53       	subi	r30, 0x34	; 52
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	84 2f       	mov	r24, r20
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	91 83       	std	Z+1, r25	; 0x01
    3f1c:	80 83       	st	Z, r24
    3f1e:	66 e4       	ldi	r22, 0x46	; 70
    3f20:	c8 01       	movw	r24, r16
    3f22:	0e 94 d3 2b 	call	0x57a6	; 0x57a6 <VL53L0X_WrByte>
    3f26:	f8 2e       	mov	r15, r24
    3f28:	87 c0       	rjmp	.+270    	; 0x4038 <set_sequence_step_timeout+0x186>
    3f2a:	63 30       	cpi	r22, 0x03	; 3
    3f2c:	41 f5       	brne	.+80     	; 0x3f7e <set_sequence_step_timeout+0xcc>
    3f2e:	ae 01       	movw	r20, r28
    3f30:	4f 5f       	subi	r20, 0xFF	; 255
    3f32:	5f 4f       	sbci	r21, 0xFF	; 255
    3f34:	60 e0       	ldi	r22, 0x00	; 0
    3f36:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3f3a:	f8 2e       	mov	r15, r24
    3f3c:	29 81       	ldd	r18, Y+1	; 0x01
    3f3e:	b5 01       	movw	r22, r10
    3f40:	a4 01       	movw	r20, r8
    3f42:	c8 01       	movw	r24, r16
    3f44:	2e de       	rcall	.-932    	; 0x3ba2 <VL53L0X_calc_timeout_mclks>
    3f46:	88 27       	eor	r24, r24
    3f48:	99 27       	eor	r25, r25
    3f4a:	fb dd       	rcall	.-1034   	; 0x3b42 <VL53L0X_encode_timeout>
    3f4c:	9b 83       	std	Y+3, r25	; 0x03
    3f4e:	8a 83       	std	Y+2, r24	; 0x02
    3f50:	f8 01       	movw	r30, r16
    3f52:	e4 53       	subi	r30, 0x34	; 52
    3f54:	ff 4f       	sbci	r31, 0xFF	; 255
    3f56:	91 83       	std	Z+1, r25	; 0x01
    3f58:	80 83       	st	Z, r24
    3f5a:	f1 10       	cpse	r15, r1
    3f5c:	6d c0       	rjmp	.+218    	; 0x4038 <set_sequence_step_timeout+0x186>
    3f5e:	ac 01       	movw	r20, r24
    3f60:	61 e5       	ldi	r22, 0x51	; 81
    3f62:	c8 01       	movw	r24, r16
    3f64:	0e 94 de 2b 	call	0x57bc	; 0x57bc <VL53L0X_WrWord>
    3f68:	f8 2e       	mov	r15, r24
    3f6a:	81 11       	cpse	r24, r1
    3f6c:	65 c0       	rjmp	.+202    	; 0x4038 <set_sequence_step_timeout+0x186>
    3f6e:	f8 01       	movw	r30, r16
    3f70:	ec 52       	subi	r30, 0x2C	; 44
    3f72:	ff 4f       	sbci	r31, 0xFF	; 255
    3f74:	80 82       	st	Z, r8
    3f76:	91 82       	std	Z+1, r9	; 0x01
    3f78:	a2 82       	std	Z+2, r10	; 0x02
    3f7a:	b3 82       	std	Z+3, r11	; 0x03
    3f7c:	5d c0       	rjmp	.+186    	; 0x4038 <set_sequence_step_timeout+0x186>
    3f7e:	64 30       	cpi	r22, 0x04	; 4
    3f80:	09 f0       	breq	.+2      	; 0x3f84 <set_sequence_step_timeout+0xd2>
    3f82:	56 c0       	rjmp	.+172    	; 0x4030 <set_sequence_step_timeout+0x17e>
    3f84:	be 01       	movw	r22, r28
    3f86:	6c 5f       	subi	r22, 0xFC	; 252
    3f88:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8a:	0e 94 bc 08 	call	0x1178	; 0x1178 <VL53L0X_GetSequenceStepEnables>
    3f8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3f90:	88 23       	and	r24, r24
    3f92:	41 f1       	breq	.+80     	; 0x3fe4 <set_sequence_step_timeout+0x132>
    3f94:	ae 01       	movw	r20, r28
    3f96:	4f 5f       	subi	r20, 0xFF	; 255
    3f98:	5f 4f       	sbci	r21, 0xFF	; 255
    3f9a:	60 e0       	ldi	r22, 0x00	; 0
    3f9c:	c8 01       	movw	r24, r16
    3f9e:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3fa2:	f8 2e       	mov	r15, r24
    3fa4:	81 11       	cpse	r24, r1
    3fa6:	48 c0       	rjmp	.+144    	; 0x4038 <set_sequence_step_timeout+0x186>
    3fa8:	ae 01       	movw	r20, r28
    3faa:	4e 5f       	subi	r20, 0xFE	; 254
    3fac:	5f 4f       	sbci	r21, 0xFF	; 255
    3fae:	61 e5       	ldi	r22, 0x51	; 81
    3fb0:	c8 01       	movw	r24, r16
    3fb2:	0e 94 21 2c 	call	0x5842	; 0x5842 <VL53L0X_RdWord>
    3fb6:	f8 2e       	mov	r15, r24
    3fb8:	81 11       	cpse	r24, r1
    3fba:	3e c0       	rjmp	.+124    	; 0x4038 <set_sequence_step_timeout+0x186>
    3fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc0:	6c 01       	movw	r12, r24
    3fc2:	dd 24       	eor	r13, r13
    3fc4:	e1 2c       	mov	r14, r1
    3fc6:	f1 2c       	mov	r15, r1
    3fc8:	04 c0       	rjmp	.+8      	; 0x3fd2 <set_sequence_step_timeout+0x120>
    3fca:	cc 0c       	add	r12, r12
    3fcc:	dd 1c       	adc	r13, r13
    3fce:	ee 1c       	adc	r14, r14
    3fd0:	ff 1c       	adc	r15, r15
    3fd2:	9a 95       	dec	r25
    3fd4:	d2 f7       	brpl	.-12     	; 0x3fca <set_sequence_step_timeout+0x118>
    3fd6:	d7 01       	movw	r26, r14
    3fd8:	c6 01       	movw	r24, r12
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	a1 1d       	adc	r26, r1
    3fde:	b1 1d       	adc	r27, r1
    3fe0:	6c 01       	movw	r12, r24
    3fe2:	02 c0       	rjmp	.+4      	; 0x3fe8 <set_sequence_step_timeout+0x136>
    3fe4:	c1 2c       	mov	r12, r1
    3fe6:	d1 2c       	mov	r13, r1
    3fe8:	ae 01       	movw	r20, r28
    3fea:	4f 5f       	subi	r20, 0xFF	; 255
    3fec:	5f 4f       	sbci	r21, 0xFF	; 255
    3fee:	61 e0       	ldi	r22, 0x01	; 1
    3ff0:	c8 01       	movw	r24, r16
    3ff2:	0e 94 10 08 	call	0x1020	; 0x1020 <VL53L0X_GetVcselPulsePeriod>
    3ff6:	f8 2e       	mov	r15, r24
    3ff8:	81 11       	cpse	r24, r1
    3ffa:	1e c0       	rjmp	.+60     	; 0x4038 <set_sequence_step_timeout+0x186>
    3ffc:	29 81       	ldd	r18, Y+1	; 0x01
    3ffe:	b5 01       	movw	r22, r10
    4000:	a4 01       	movw	r20, r8
    4002:	c8 01       	movw	r24, r16
    4004:	ce dd       	rcall	.-1124   	; 0x3ba2 <VL53L0X_calc_timeout_mclks>
    4006:	6c 0d       	add	r22, r12
    4008:	7d 1d       	adc	r23, r13
    400a:	80 e0       	ldi	r24, 0x00	; 0
    400c:	90 e0       	ldi	r25, 0x00	; 0
    400e:	99 dd       	rcall	.-1230   	; 0x3b42 <VL53L0X_encode_timeout>
    4010:	ac 01       	movw	r20, r24
    4012:	61 e7       	ldi	r22, 0x71	; 113
    4014:	c8 01       	movw	r24, r16
    4016:	0e 94 de 2b 	call	0x57bc	; 0x57bc <VL53L0X_WrWord>
    401a:	f8 2e       	mov	r15, r24
    401c:	81 11       	cpse	r24, r1
    401e:	0c c0       	rjmp	.+24     	; 0x4038 <set_sequence_step_timeout+0x186>
    4020:	f8 01       	movw	r30, r16
    4022:	e1 53       	subi	r30, 0x31	; 49
    4024:	ff 4f       	sbci	r31, 0xFF	; 255
    4026:	80 82       	st	Z, r8
    4028:	91 82       	std	Z+1, r9	; 0x01
    402a:	a2 82       	std	Z+2, r10	; 0x02
    402c:	b3 82       	std	Z+3, r11	; 0x03
    402e:	04 c0       	rjmp	.+8      	; 0x4038 <set_sequence_step_timeout+0x186>
    4030:	0f 2e       	mov	r0, r31
    4032:	fc ef       	ldi	r31, 0xFC	; 252
    4034:	ff 2e       	mov	r15, r31
    4036:	f0 2d       	mov	r31, r0
    4038:	8f 2d       	mov	r24, r15
    403a:	28 96       	adiw	r28, 0x08	; 8
    403c:	0f b6       	in	r0, 0x3f	; 63
    403e:	f8 94       	cli
    4040:	de bf       	out	0x3e, r29	; 62
    4042:	0f be       	out	0x3f, r0	; 63
    4044:	cd bf       	out	0x3d, r28	; 61
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	1f 91       	pop	r17
    404c:	0f 91       	pop	r16
    404e:	ff 90       	pop	r15
    4050:	ef 90       	pop	r14
    4052:	df 90       	pop	r13
    4054:	cf 90       	pop	r12
    4056:	bf 90       	pop	r11
    4058:	af 90       	pop	r10
    405a:	9f 90       	pop	r9
    405c:	8f 90       	pop	r8
    405e:	08 95       	ret

00004060 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
    4060:	0f 93       	push	r16
    4062:	1f 93       	push	r17
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	1f 92       	push	r1
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62
    406e:	8a 01       	movw	r16, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
    4070:	66 23       	and	r22, r22
    4072:	19 f0       	breq	.+6      	; 0x407a <VL53L0X_get_vcsel_pulse_period+0x1a>
    4074:	61 30       	cpi	r22, 0x01	; 1
    4076:	41 f0       	breq	.+16     	; 0x4088 <VL53L0X_get_vcsel_pulse_period+0x28>
    4078:	0e c0       	rjmp	.+28     	; 0x4096 <VL53L0X_get_vcsel_pulse_period+0x36>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
    407a:	ae 01       	movw	r20, r28
    407c:	4f 5f       	subi	r20, 0xFF	; 255
    407e:	5f 4f       	sbci	r21, 0xFF	; 255
    4080:	60 e5       	ldi	r22, 0x50	; 80
    4082:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    4086:	08 c0       	rjmp	.+16     	; 0x4098 <VL53L0X_get_vcsel_pulse_period+0x38>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
    4088:	ae 01       	movw	r20, r28
    408a:	4f 5f       	subi	r20, 0xFF	; 255
    408c:	5f 4f       	sbci	r21, 0xFF	; 255
    408e:	60 e7       	ldi	r22, 0x70	; 112
    4090:	0e 94 16 2c 	call	0x582c	; 0x582c <VL53L0X_RdByte>
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    4094:	01 c0       	rjmp	.+2      	; 0x4098 <VL53L0X_get_vcsel_pulse_period+0x38>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
    4096:	8c ef       	ldi	r24, 0xFC	; 252
	}

	if (Status == VL53L0X_ERROR_NONE)
    4098:	81 11       	cpse	r24, r1
    409a:	05 c0       	rjmp	.+10     	; 0x40a6 <VL53L0X_get_vcsel_pulse_period+0x46>
		*pVCSELPulsePeriodPCLK =
    409c:	99 81       	ldd	r25, Y+1	; 0x01
    409e:	9f 5f       	subi	r25, 0xFF	; 255
    40a0:	99 0f       	add	r25, r25
    40a2:	f8 01       	movw	r30, r16
    40a4:	90 83       	st	Z, r25
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
    40a6:	0f 90       	pop	r0
    40a8:	df 91       	pop	r29
    40aa:	cf 91       	pop	r28
    40ac:	1f 91       	pop	r17
    40ae:	0f 91       	pop	r16
    40b0:	08 95       	ret

000040b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
    40b2:	8f 92       	push	r8
    40b4:	9f 92       	push	r9
    40b6:	af 92       	push	r10
    40b8:	bf 92       	push	r11
    40ba:	cf 92       	push	r12
    40bc:	df 92       	push	r13
    40be:	ef 92       	push	r14
    40c0:	ff 92       	push	r15
    40c2:	0f 93       	push	r16
    40c4:	1f 93       	push	r17
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	cd b7       	in	r28, 0x3d	; 61
    40cc:	de b7       	in	r29, 0x3e	; 62
    40ce:	2d 97       	sbiw	r28, 0x0d	; 13
    40d0:	0f b6       	in	r0, 0x3f	; 63
    40d2:	f8 94       	cli
    40d4:	de bf       	out	0x3e, r29	; 62
    40d6:	0f be       	out	0x3f, r0	; 63
    40d8:	cd bf       	out	0x3d, r28	; 61
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
    40da:	0f 2e       	mov	r0, r31
    40dc:	f0 ed       	ldi	r31, 0xD0	; 208
    40de:	cf 2e       	mov	r12, r31
    40e0:	f7 e0       	ldi	r31, 0x07	; 7
    40e2:	df 2e       	mov	r13, r31
    40e4:	e1 2c       	mov	r14, r1
    40e6:	f1 2c       	mov	r15, r1
    40e8:	f0 2d       	mov	r31, r0
    40ea:	ce 82       	std	Y+6, r12	; 0x06
    40ec:	df 82       	std	Y+7, r13	; 0x07
    40ee:	e8 86       	std	Y+8, r14	; 0x08
    40f0:	f9 86       	std	Y+9, r15	; 0x09
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
    40f2:	1a 86       	std	Y+10, r1	; 0x0a
    40f4:	1b 86       	std	Y+11, r1	; 0x0b
    40f6:	1c 86       	std	Y+12, r1	; 0x0c
    40f8:	1d 86       	std	Y+13, r1	; 0x0d
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
    40fa:	40 32       	cpi	r20, 0x20	; 32
    40fc:	2e e4       	ldi	r18, 0x4E	; 78
    40fe:	52 07       	cpc	r21, r18
    4100:	61 05       	cpc	r22, r1
    4102:	71 05       	cpc	r23, r1
    4104:	08 f4       	brcc	.+2      	; 0x4108 <__stack+0x9>
    4106:	94 c0       	rjmp	.+296    	; 0x4230 <__stack+0x131>
    4108:	6a 01       	movw	r12, r20
    410a:	7b 01       	movw	r14, r22
    410c:	8c 01       	movw	r16, r24

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    410e:	be 01       	movw	r22, r28
    4110:	6f 5f       	subi	r22, 0xFF	; 255
    4112:	7f 4f       	sbci	r23, 0xFF	; 255
    4114:	0e 94 bc 08 	call	0x1178	; 0x1178 <VL53L0X_GetSequenceStepEnables>

	if (Status == VL53L0X_ERROR_NONE &&
    4118:	81 11       	cpse	r24, r1
    411a:	9d c0       	rjmp	.+314    	; 0x4256 <__stack+0x157>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
	}

	FinalRangeTimingBudgetMicroSeconds =
    411c:	46 01       	movw	r8, r12
    411e:	57 01       	movw	r10, r14
    4120:	88 ee       	ldi	r24, 0xE8	; 232
    4122:	88 1a       	sub	r8, r24
    4124:	88 e0       	ldi	r24, 0x08	; 8
    4126:	98 0a       	sbc	r9, r24
    4128:	a1 08       	sbc	r10, r1
    412a:	b1 08       	sbc	r11, r1
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);

	if (Status == VL53L0X_ERROR_NONE &&
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	81 11       	cpse	r24, r1
    4130:	07 c0       	rjmp	.+14     	; 0x4140 <__stack+0x41>
		(SchedulerSequenceSteps.TccOn  ||
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	81 11       	cpse	r24, r1
    4136:	04 c0       	rjmp	.+8      	; 0x4140 <__stack+0x41>
		SchedulerSequenceSteps.MsrcOn ||
    4138:	8b 81       	ldd	r24, Y+3	; 0x03
    413a:	88 23       	and	r24, r24
    413c:	09 f4       	brne	.+2      	; 0x4140 <__stack+0x41>
    413e:	84 c0       	rjmp	.+264    	; 0x4248 <__stack+0x149>
		SchedulerSequenceSteps.DssOn)) {

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
    4140:	ae 01       	movw	r20, r28
    4142:	4a 5f       	subi	r20, 0xFA	; 250
    4144:	5f 4f       	sbci	r21, 0xFF	; 255
    4146:	62 e0       	ldi	r22, 0x02	; 2
    4148:	c8 01       	movw	r24, r16
    414a:	c1 dd       	rcall	.-1150   	; 0x3cce <get_sequence_step_timeout>
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
    414c:	81 11       	cpse	r24, r1
    414e:	83 c0       	rjmp	.+262    	; 0x4256 <__stack+0x157>
			return Status;

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
    4150:	89 81       	ldd	r24, Y+1	; 0x01
    4152:	88 23       	and	r24, r24
    4154:	09 f4       	brne	.+2      	; 0x4158 <__stack+0x59>
    4156:	74 c0       	rjmp	.+232    	; 0x4240 <__stack+0x141>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
    4158:	8e 81       	ldd	r24, Y+6	; 0x06
    415a:	9f 81       	ldd	r25, Y+7	; 0x07
    415c:	a8 85       	ldd	r26, Y+8	; 0x08
    415e:	b9 85       	ldd	r27, Y+9	; 0x09
    4160:	82 5b       	subi	r24, 0xB2	; 178
    4162:	9d 4f       	sbci	r25, 0xFD	; 253
    4164:	af 4f       	sbci	r26, 0xFF	; 255
    4166:	bf 4f       	sbci	r27, 0xFF	; 255
				+ TccOverheadMicroSeconds;

			if (SubTimeout <
    4168:	88 15       	cp	r24, r8
    416a:	99 05       	cpc	r25, r9
    416c:	aa 05       	cpc	r26, r10
    416e:	bb 05       	cpc	r27, r11
    4170:	08 f0       	brcs	.+2      	; 0x4174 <__stack+0x75>
    4172:	60 c0       	rjmp	.+192    	; 0x4234 <__stack+0x135>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
    4174:	88 1a       	sub	r8, r24
    4176:	99 0a       	sbc	r9, r25
    4178:	aa 0a       	sbc	r10, r26
    417a:	bb 0a       	sbc	r11, r27
    417c:	61 c0       	rjmp	.+194    	; 0x4240 <__stack+0x141>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
    417e:	8e 81       	ldd	r24, Y+6	; 0x06
    4180:	9f 81       	ldd	r25, Y+7	; 0x07
    4182:	a8 85       	ldd	r26, Y+8	; 0x08
    4184:	b9 85       	ldd	r27, Y+9	; 0x09
    4186:	8e 54       	subi	r24, 0x4E	; 78
    4188:	9d 4f       	sbci	r25, 0xFD	; 253
    418a:	af 4f       	sbci	r26, 0xFF	; 255
    418c:	bf 4f       	sbci	r27, 0xFF	; 255
    418e:	88 0f       	add	r24, r24
    4190:	99 1f       	adc	r25, r25
    4192:	aa 1f       	adc	r26, r26
    4194:	bb 1f       	adc	r27, r27
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    4196:	88 15       	cp	r24, r8
    4198:	99 05       	cpc	r25, r9
    419a:	aa 05       	cpc	r26, r10
    419c:	bb 05       	cpc	r27, r11
    419e:	08 f0       	brcs	.+2      	; 0x41a2 <__stack+0xa3>
    41a0:	57 c0       	rjmp	.+174    	; 0x4250 <__stack+0x151>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    41a2:	88 1a       	sub	r8, r24
    41a4:	99 0a       	sbc	r9, r25
    41a6:	aa 0a       	sbc	r10, r26
    41a8:	bb 0a       	sbc	r11, r27
    41aa:	4e c0       	rjmp	.+156    	; 0x4248 <__stack+0x149>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
    41ac:	8a 81       	ldd	r24, Y+2	; 0x02
    41ae:	88 23       	and	r24, r24
    41b0:	09 f4       	brne	.+2      	; 0x41b4 <__stack+0xb5>
    41b2:	4a c0       	rjmp	.+148    	; 0x4248 <__stack+0x149>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
    41b4:	8e 81       	ldd	r24, Y+6	; 0x06
    41b6:	9f 81       	ldd	r25, Y+7	; 0x07
    41b8:	a8 85       	ldd	r26, Y+8	; 0x08
    41ba:	b9 85       	ldd	r27, Y+9	; 0x09
    41bc:	8c 56       	subi	r24, 0x6C	; 108
    41be:	9d 4f       	sbci	r25, 0xFD	; 253
    41c0:	af 4f       	sbci	r26, 0xFF	; 255
    41c2:	bf 4f       	sbci	r27, 0xFF	; 255
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    41c4:	88 15       	cp	r24, r8
    41c6:	99 05       	cpc	r25, r9
    41c8:	aa 05       	cpc	r26, r10
    41ca:	bb 05       	cpc	r27, r11
    41cc:	08 f0       	brcs	.+2      	; 0x41d0 <__stack+0xd1>
    41ce:	42 c0       	rjmp	.+132    	; 0x4254 <__stack+0x155>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    41d0:	88 1a       	sub	r8, r24
    41d2:	99 0a       	sbc	r9, r25
    41d4:	aa 0a       	sbc	r10, r26
    41d6:	bb 0a       	sbc	r11, r27
    41d8:	37 c0       	rjmp	.+110    	; 0x4248 <__stack+0x149>

	if (SchedulerSequenceSteps.PreRangeOn) {

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
    41da:	ae 01       	movw	r20, r28
    41dc:	46 5f       	subi	r20, 0xF6	; 246
    41de:	5f 4f       	sbci	r21, 0xFF	; 255
    41e0:	63 e0       	ldi	r22, 0x03	; 3
    41e2:	c8 01       	movw	r24, r16
    41e4:	74 dd       	rcall	.-1304   	; 0x3cce <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
    41e6:	4a 85       	ldd	r20, Y+10	; 0x0a
    41e8:	5b 85       	ldd	r21, Y+11	; 0x0b
    41ea:	6c 85       	ldd	r22, Y+12	; 0x0c
    41ec:	7d 85       	ldd	r23, Y+13	; 0x0d
    41ee:	4c 56       	subi	r20, 0x6C	; 108
    41f0:	5d 4f       	sbci	r21, 0xFD	; 253
    41f2:	6f 4f       	sbci	r22, 0xFF	; 255
    41f4:	7f 4f       	sbci	r23, 0xFF	; 255
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    41f6:	48 15       	cp	r20, r8
    41f8:	59 05       	cpc	r21, r9
    41fa:	6a 05       	cpc	r22, r10
    41fc:	7b 05       	cpc	r23, r11
    41fe:	e0 f4       	brcc	.+56     	; 0x4238 <__stack+0x139>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    4200:	81 11       	cpse	r24, r1
    4202:	29 c0       	rjmp	.+82     	; 0x4256 <__stack+0x157>

		SubTimeout = PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
    4204:	84 1a       	sub	r8, r20
    4206:	95 0a       	sbc	r9, r21
    4208:	a6 0a       	sbc	r10, r22
    420a:	b7 0a       	sbc	r11, r23
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    420c:	8d 81       	ldd	r24, Y+5	; 0x05
    420e:	88 23       	and	r24, r24
    4210:	a9 f0       	breq	.+42     	; 0x423c <__stack+0x13d>
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
    4212:	a5 01       	movw	r20, r10
    4214:	94 01       	movw	r18, r8
    4216:	26 52       	subi	r18, 0x26	; 38
    4218:	32 40       	sbci	r19, 0x02	; 2
    421a:	41 09       	sbc	r20, r1
    421c:	51 09       	sbc	r21, r1
    421e:	64 e0       	ldi	r22, 0x04	; 4
    4220:	c8 01       	movw	r24, r16
    4222:	47 de       	rcall	.-882    	; 0x3eb2 <set_sequence_step_timeout>
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
    4224:	f8 01       	movw	r30, r16
    4226:	c2 8a       	std	Z+18, r12	; 0x12
    4228:	d3 8a       	std	Z+19, r13	; 0x13
    422a:	e4 8a       	std	Z+20, r14	; 0x14
    422c:	f5 8a       	std	Z+21, r15	; 0x15
    422e:	13 c0       	rjmp	.+38     	; 0x4256 <__stack+0x157>
	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
    4230:	8c ef       	ldi	r24, 0xFC	; 252
    4232:	11 c0       	rjmp	.+34     	; 0x4256 <__stack+0x157>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    4234:	8c ef       	ldi	r24, 0xFC	; 252
    4236:	0f c0       	rjmp	.+30     	; 0x4256 <__stack+0x157>

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    4238:	8c ef       	ldi	r24, 0xFC	; 252
    423a:	0d c0       	rjmp	.+26     	; 0x4256 <__stack+0x157>
    423c:	80 e0       	ldi	r24, 0x00	; 0
    423e:	0b c0       	rjmp	.+22     	; 0x4256 <__stack+0x157>
			LOG_FUNCTION_END(Status);
			return Status;
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
    4240:	8b 81       	ldd	r24, Y+3	; 0x03
    4242:	81 11       	cpse	r24, r1
    4244:	9c cf       	rjmp	.-200    	; 0x417e <__stack+0x7f>
    4246:	b2 cf       	rjmp	.-156    	; 0x41ac <__stack+0xad>
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
    4248:	8c 81       	ldd	r24, Y+4	; 0x04
    424a:	88 23       	and	r24, r24
    424c:	f9 f2       	breq	.-66     	; 0x420c <__stack+0x10d>
    424e:	c5 cf       	rjmp	.-118    	; 0x41da <__stack+0xdb>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    4250:	8c ef       	ldi	r24, 0xFC	; 252
    4252:	01 c0       	rjmp	.+2      	; 0x4256 <__stack+0x157>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    4254:	8c ef       	ldi	r24, 0xFC	; 252
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
    4256:	2d 96       	adiw	r28, 0x0d	; 13
    4258:	0f b6       	in	r0, 0x3f	; 63
    425a:	f8 94       	cli
    425c:	de bf       	out	0x3e, r29	; 62
    425e:	0f be       	out	0x3f, r0	; 63
    4260:	cd bf       	out	0x3d, r28	; 61
    4262:	df 91       	pop	r29
    4264:	cf 91       	pop	r28
    4266:	1f 91       	pop	r17
    4268:	0f 91       	pop	r16
    426a:	ff 90       	pop	r15
    426c:	ef 90       	pop	r14
    426e:	df 90       	pop	r13
    4270:	cf 90       	pop	r12
    4272:	bf 90       	pop	r11
    4274:	af 90       	pop	r10
    4276:	9f 90       	pop	r9
    4278:	8f 90       	pop	r8
    427a:	08 95       	ret

0000427c <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
    427c:	8f 92       	push	r8
    427e:	9f 92       	push	r9
    4280:	af 92       	push	r10
    4282:	bf 92       	push	r11
    4284:	cf 92       	push	r12
    4286:	df 92       	push	r13
    4288:	ff 92       	push	r15
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
    4296:	61 97       	sbiw	r28, 0x11	; 17
    4298:	0f b6       	in	r0, 0x3f	; 63
    429a:	f8 94       	cli
    429c:	de bf       	out	0x3e, r29	; 62
    429e:	0f be       	out	0x3f, r0	; 63
    42a0:	cd bf       	out	0x3d, r28	; 61
    42a2:	6c 01       	movw	r12, r24
    42a4:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
    42a6:	80 ed       	ldi	r24, 0xD0	; 208
    42a8:	97 e0       	ldi	r25, 0x07	; 7
    42aa:	a0 e0       	ldi	r26, 0x00	; 0
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	8a 87       	std	Y+10, r24	; 0x0a
    42b0:	9b 87       	std	Y+11, r25	; 0x0b
    42b2:	ac 87       	std	Y+12, r26	; 0x0c
    42b4:	bd 87       	std	Y+13, r27	; 0x0d
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
    42b6:	1e 86       	std	Y+14, r1	; 0x0e
    42b8:	1f 86       	std	Y+15, r1	; 0x0f
    42ba:	18 8a       	std	Y+16, r1	; 0x10
    42bc:	19 8a       	std	Y+17, r1	; 0x11

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
    42be:	86 e3       	ldi	r24, 0x36	; 54
    42c0:	9b e0       	ldi	r25, 0x0B	; 11
    42c2:	a0 e0       	ldi	r26, 0x00	; 0
    42c4:	b0 e0       	ldi	r27, 0x00	; 0
    42c6:	fb 01       	movw	r30, r22
    42c8:	80 83       	st	Z, r24
    42ca:	91 83       	std	Z+1, r25	; 0x01
    42cc:	a2 83       	std	Z+2, r26	; 0x02
    42ce:	b3 83       	std	Z+3, r27	; 0x03

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    42d0:	be 01       	movw	r22, r28
    42d2:	6f 5f       	subi	r22, 0xFF	; 255
    42d4:	7f 4f       	sbci	r23, 0xFF	; 255
    42d6:	c6 01       	movw	r24, r12
    42d8:	0e 94 bc 08 	call	0x1178	; 0x1178 <VL53L0X_GetSequenceStepEnables>
    42dc:	f8 2e       	mov	r15, r24

	if (Status != VL53L0X_ERROR_NONE) {
    42de:	81 11       	cpse	r24, r1
    42e0:	b3 c0       	rjmp	.+358    	; 0x4448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	81 11       	cpse	r24, r1
    42e6:	07 c0       	rjmp	.+14     	; 0x42f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    42e8:	8a 81       	ldd	r24, Y+2	; 0x02
    42ea:	81 11       	cpse	r24, r1
    42ec:	04 c0       	rjmp	.+8      	; 0x42f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
		SchedulerSequenceSteps.MsrcOn ||
    42ee:	8b 81       	ldd	r24, Y+3	; 0x03
    42f0:	88 23       	and	r24, r24
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    42f4:	a5 c0       	rjmp	.+330    	; 0x4440 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    42f6:	ae 01       	movw	r20, r28
    42f8:	46 5f       	subi	r20, 0xF6	; 246
    42fa:	5f 4f       	sbci	r21, 0xFF	; 255
    42fc:	62 e0       	ldi	r22, 0x02	; 2
    42fe:	c6 01       	movw	r24, r12
    4300:	e6 dc       	rcall	.-1588   	; 0x3cce <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
    4302:	81 11       	cpse	r24, r1
    4304:	97 c0       	rjmp	.+302    	; 0x4434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1b8>
			if (SchedulerSequenceSteps.TccOn) {
    4306:	89 81       	ldd	r24, Y+1	; 0x01
    4308:	88 23       	and	r24, r24
    430a:	a9 f0       	breq	.+42     	; 0x4336 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xba>
				*pMeasurementTimingBudgetMicroSeconds +=
    430c:	8a 85       	ldd	r24, Y+10	; 0x0a
    430e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4310:	ac 85       	ldd	r26, Y+12	; 0x0c
    4312:	bd 85       	ldd	r27, Y+13	; 0x0d
    4314:	82 5b       	subi	r24, 0xB2	; 178
    4316:	9d 4f       	sbci	r25, 0xFD	; 253
    4318:	af 4f       	sbci	r26, 0xFF	; 255
    431a:	bf 4f       	sbci	r27, 0xFF	; 255
    431c:	f8 01       	movw	r30, r16
    431e:	40 81       	ld	r20, Z
    4320:	51 81       	ldd	r21, Z+1	; 0x01
    4322:	62 81       	ldd	r22, Z+2	; 0x02
    4324:	73 81       	ldd	r23, Z+3	; 0x03
    4326:	84 0f       	add	r24, r20
    4328:	95 1f       	adc	r25, r21
    432a:	a6 1f       	adc	r26, r22
    432c:	b7 1f       	adc	r27, r23
    432e:	80 83       	st	Z, r24
    4330:	91 83       	std	Z+1, r25	; 0x01
    4332:	a2 83       	std	Z+2, r26	; 0x02
    4334:	b3 83       	std	Z+3, r27	; 0x03
					MsrcDccTccTimeoutMicroSeconds +
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
    4336:	8b 81       	ldd	r24, Y+3	; 0x03
    4338:	88 23       	and	r24, r24
    433a:	d1 f0       	breq	.+52     	; 0x4370 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf4>
				*pMeasurementTimingBudgetMicroSeconds +=
    433c:	8a 85       	ldd	r24, Y+10	; 0x0a
    433e:	9b 85       	ldd	r25, Y+11	; 0x0b
    4340:	ac 85       	ldd	r26, Y+12	; 0x0c
    4342:	bd 85       	ldd	r27, Y+13	; 0x0d
    4344:	8e 54       	subi	r24, 0x4E	; 78
    4346:	9d 4f       	sbci	r25, 0xFD	; 253
    4348:	af 4f       	sbci	r26, 0xFF	; 255
    434a:	bf 4f       	sbci	r27, 0xFF	; 255
    434c:	88 0f       	add	r24, r24
    434e:	99 1f       	adc	r25, r25
    4350:	aa 1f       	adc	r26, r26
    4352:	bb 1f       	adc	r27, r27
    4354:	f8 01       	movw	r30, r16
    4356:	40 81       	ld	r20, Z
    4358:	51 81       	ldd	r21, Z+1	; 0x01
    435a:	62 81       	ldd	r22, Z+2	; 0x02
    435c:	73 81       	ldd	r23, Z+3	; 0x03
    435e:	84 0f       	add	r24, r20
    4360:	95 1f       	adc	r25, r21
    4362:	a6 1f       	adc	r26, r22
    4364:	b7 1f       	adc	r27, r23
    4366:	80 83       	st	Z, r24
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	a2 83       	std	Z+2, r26	; 0x02
    436c:	b3 83       	std	Z+3, r27	; 0x03
    436e:	68 c0       	rjmp	.+208    	; 0x4440 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				2 * (MsrcDccTccTimeoutMicroSeconds +
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
    4370:	8a 81       	ldd	r24, Y+2	; 0x02
    4372:	88 23       	and	r24, r24
    4374:	09 f4       	brne	.+2      	; 0x4378 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
    4376:	64 c0       	rjmp	.+200    	; 0x4440 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				*pMeasurementTimingBudgetMicroSeconds +=
    4378:	8a 85       	ldd	r24, Y+10	; 0x0a
    437a:	9b 85       	ldd	r25, Y+11	; 0x0b
    437c:	ac 85       	ldd	r26, Y+12	; 0x0c
    437e:	bd 85       	ldd	r27, Y+13	; 0x0d
    4380:	8c 56       	subi	r24, 0x6C	; 108
    4382:	9d 4f       	sbci	r25, 0xFD	; 253
    4384:	af 4f       	sbci	r26, 0xFF	; 255
    4386:	bf 4f       	sbci	r27, 0xFF	; 255
    4388:	f8 01       	movw	r30, r16
    438a:	40 81       	ld	r20, Z
    438c:	51 81       	ldd	r21, Z+1	; 0x01
    438e:	62 81       	ldd	r22, Z+2	; 0x02
    4390:	73 81       	ldd	r23, Z+3	; 0x03
    4392:	84 0f       	add	r24, r20
    4394:	95 1f       	adc	r25, r21
    4396:	a6 1f       	adc	r26, r22
    4398:	b7 1f       	adc	r27, r23
    439a:	80 83       	st	Z, r24
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	a2 83       	std	Z+2, r26	; 0x02
    43a0:	b3 83       	std	Z+3, r27	; 0x03
    43a2:	4e c0       	rjmp	.+156    	; 0x4440 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    43a4:	ae 01       	movw	r20, r28
    43a6:	42 5f       	subi	r20, 0xF2	; 242
    43a8:	5f 4f       	sbci	r21, 0xFF	; 255
    43aa:	63 e0       	ldi	r22, 0x03	; 3
    43ac:	c6 01       	movw	r24, r12
    43ae:	8f dc       	rcall	.-1762   	; 0x3cce <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    43b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    43b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    43b4:	68 89       	ldd	r22, Y+16	; 0x10
    43b6:	79 89       	ldd	r23, Y+17	; 0x11
    43b8:	4c 56       	subi	r20, 0x6C	; 108
    43ba:	5d 4f       	sbci	r21, 0xFD	; 253
    43bc:	6f 4f       	sbci	r22, 0xFF	; 255
    43be:	7f 4f       	sbci	r23, 0xFF	; 255
    43c0:	f8 01       	movw	r30, r16
    43c2:	80 80       	ld	r8, Z
    43c4:	91 80       	ldd	r9, Z+1	; 0x01
    43c6:	a2 80       	ldd	r10, Z+2	; 0x02
    43c8:	b3 80       	ldd	r11, Z+3	; 0x03
    43ca:	48 0d       	add	r20, r8
    43cc:	59 1d       	adc	r21, r9
    43ce:	6a 1d       	adc	r22, r10
    43d0:	7b 1d       	adc	r23, r11
    43d2:	40 83       	st	Z, r20
    43d4:	51 83       	std	Z+1, r21	; 0x01
    43d6:	62 83       	std	Z+2, r22	; 0x02
    43d8:	73 83       	std	Z+3, r23	; 0x03
				PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    43da:	81 11       	cpse	r24, r1
    43dc:	2d c0       	rjmp	.+90     	; 0x4438 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1bc>
		if (SchedulerSequenceSteps.FinalRangeOn) {
    43de:	8d 81       	ldd	r24, Y+5	; 0x05
    43e0:	88 23       	and	r24, r24
    43e2:	e9 f0       	breq	.+58     	; 0x441e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a2>
			Status = get_sequence_step_timeout(Dev,
    43e4:	ae 01       	movw	r20, r28
    43e6:	4a 5f       	subi	r20, 0xFA	; 250
    43e8:	5f 4f       	sbci	r21, 0xFF	; 255
    43ea:	64 e0       	ldi	r22, 0x04	; 4
    43ec:	c6 01       	movw	r24, r12
    43ee:	6f dc       	rcall	.-1826   	; 0x3cce <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    43f0:	4e 81       	ldd	r20, Y+6	; 0x06
    43f2:	5f 81       	ldd	r21, Y+7	; 0x07
    43f4:	68 85       	ldd	r22, Y+8	; 0x08
    43f6:	79 85       	ldd	r23, Y+9	; 0x09
    43f8:	4a 5d       	subi	r20, 0xDA	; 218
    43fa:	5d 4f       	sbci	r21, 0xFD	; 253
    43fc:	6f 4f       	sbci	r22, 0xFF	; 255
    43fe:	7f 4f       	sbci	r23, 0xFF	; 255
    4400:	f8 01       	movw	r30, r16
    4402:	80 80       	ld	r8, Z
    4404:	91 80       	ldd	r9, Z+1	; 0x01
    4406:	a2 80       	ldd	r10, Z+2	; 0x02
    4408:	b3 80       	ldd	r11, Z+3	; 0x03
    440a:	48 0d       	add	r20, r8
    440c:	59 1d       	adc	r21, r9
    440e:	6a 1d       	adc	r22, r10
    4410:	7b 1d       	adc	r23, r11
    4412:	40 83       	st	Z, r20
    4414:	51 83       	std	Z+1, r21	; 0x01
    4416:	62 83       	std	Z+2, r22	; 0x02
    4418:	73 83       	std	Z+3, r23	; 0x03
				(FinalRangeTimeoutMicroSeconds +
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    441a:	81 11       	cpse	r24, r1
    441c:	0f c0       	rjmp	.+30     	; 0x443c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c0>
		VL53L0X_SETPARAMETERFIELD(Dev,
    441e:	f8 01       	movw	r30, r16
    4420:	80 81       	ld	r24, Z
    4422:	91 81       	ldd	r25, Z+1	; 0x01
    4424:	a2 81       	ldd	r26, Z+2	; 0x02
    4426:	b3 81       	ldd	r27, Z+3	; 0x03
    4428:	f6 01       	movw	r30, r12
    442a:	82 8b       	std	Z+18, r24	; 0x12
    442c:	93 8b       	std	Z+19, r25	; 0x13
    442e:	a4 8b       	std	Z+20, r26	; 0x14
    4430:	b5 8b       	std	Z+21, r27	; 0x15
    4432:	0a c0       	rjmp	.+20     	; 0x4448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>

	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    4434:	f8 2e       	mov	r15, r24
    4436:	08 c0       	rjmp	.+16     	; 0x4448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    4438:	f8 2e       	mov	r15, r24
    443a:	06 c0       	rjmp	.+12     	; 0x4448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    443c:	f8 2e       	mov	r15, r24
    443e:	04 c0       	rjmp	.+8      	; 0x4448 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
    4440:	8c 81       	ldd	r24, Y+4	; 0x04
    4442:	88 23       	and	r24, r24
    4444:	61 f2       	breq	.-104    	; 0x43de <VL53L0X_get_measurement_timing_budget_micro_seconds+0x162>
    4446:	ae cf       	rjmp	.-164    	; 0x43a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    4448:	8f 2d       	mov	r24, r15
    444a:	61 96       	adiw	r28, 0x11	; 17
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	f8 94       	cli
    4450:	de bf       	out	0x3e, r29	; 62
    4452:	0f be       	out	0x3f, r0	; 63
    4454:	cd bf       	out	0x3d, r28	; 61
    4456:	df 91       	pop	r29
    4458:	cf 91       	pop	r28
    445a:	1f 91       	pop	r17
    445c:	0f 91       	pop	r16
    445e:	ff 90       	pop	r15
    4460:	df 90       	pop	r13
    4462:	cf 90       	pop	r12
    4464:	bf 90       	pop	r11
    4466:	af 90       	pop	r10
    4468:	9f 90       	pop	r9
    446a:	8f 90       	pop	r8
    446c:	08 95       	ret

0000446e <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
    446e:	2f 92       	push	r2
    4470:	3f 92       	push	r3
    4472:	4f 92       	push	r4
    4474:	5f 92       	push	r5
    4476:	6f 92       	push	r6
    4478:	7f 92       	push	r7
    447a:	8f 92       	push	r8
    447c:	9f 92       	push	r9
    447e:	af 92       	push	r10
    4480:	bf 92       	push	r11
    4482:	cf 92       	push	r12
    4484:	df 92       	push	r13
    4486:	ef 92       	push	r14
    4488:	ff 92       	push	r15
    448a:	0f 93       	push	r16
    448c:	1f 93       	push	r17
    448e:	cf 93       	push	r28
    4490:	df 93       	push	r29
    4492:	00 d0       	rcall	.+0      	; 0x4494 <VL53L0X_load_tuning_settings+0x26>
    4494:	00 d0       	rcall	.+0      	; 0x4496 <VL53L0X_load_tuning_settings+0x28>
    4496:	cd b7       	in	r28, 0x3d	; 61
    4498:	de b7       	in	r29, 0x3e	; 62
    449a:	5c 01       	movw	r10, r24
    449c:	6b 01       	movw	r12, r22
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
    449e:	e1 2c       	mov	r14, r1
    44a0:	f1 2c       	mov	r15, r1


VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    44a2:	80 e0       	ldi	r24, 0x00	; 0
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    44a4:	35 01       	movw	r6, r10
    44a6:	2d ed       	ldi	r18, 0xDD	; 221
    44a8:	62 1a       	sub	r6, r18
    44aa:	2e ef       	ldi	r18, 0xFE	; 254
    44ac:	72 0a       	sbc	r7, r18
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    44ae:	45 01       	movw	r8, r10
    44b0:	9f ed       	ldi	r25, 0xDF	; 223
    44b2:	89 1a       	sub	r8, r25
    44b4:	9e ef       	ldi	r25, 0xFE	; 254
    44b6:	99 0a       	sbc	r9, r25
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    44b8:	25 01       	movw	r4, r10
    44ba:	eb ed       	ldi	r30, 0xDB	; 219
    44bc:	4e 1a       	sub	r4, r30
    44be:	ee ef       	ldi	r30, 0xFE	; 254
    44c0:	5e 0a       	sbc	r5, r30
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    44c2:	15 01       	movw	r2, r10
    44c4:	f8 ed       	ldi	r31, 0xD8	; 216
    44c6:	2f 1a       	sub	r2, r31
    44c8:	fe ef       	ldi	r31, 0xFE	; 254
    44ca:	3f 0a       	sbc	r3, r31

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    44cc:	91 c0       	rjmp	.+290    	; 0x45f0 <VL53L0X_load_tuning_settings+0x182>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    44ce:	97 01       	movw	r18, r14
    44d0:	2f 5f       	subi	r18, 0xFF	; 255
    44d2:	3f 4f       	sbci	r19, 0xFF	; 255
		if (NumberOfWrites == 0xFF) {
    44d4:	0f 3f       	cpi	r16, 0xFF	; 255
    44d6:	09 f0       	breq	.+2      	; 0x44da <VL53L0X_load_tuning_settings+0x6c>
    44d8:	5f c0       	rjmp	.+190    	; 0x4598 <VL53L0X_load_tuning_settings+0x12a>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    44da:	a7 01       	movw	r20, r14
    44dc:	4e 5f       	subi	r20, 0xFE	; 254
    44de:	5f 4f       	sbci	r21, 0xFF	; 255
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
    44e0:	f6 01       	movw	r30, r12
    44e2:	e2 0f       	add	r30, r18
    44e4:	f3 1f       	adc	r31, r19
			Index++;
			switch (SelectParam) {
    44e6:	90 81       	ld	r25, Z
    44e8:	91 30       	cpi	r25, 0x01	; 1
    44ea:	d1 f0       	breq	.+52     	; 0x4520 <VL53L0X_load_tuning_settings+0xb2>
    44ec:	28 f0       	brcs	.+10     	; 0x44f8 <VL53L0X_load_tuning_settings+0x8a>
    44ee:	92 30       	cpi	r25, 0x02	; 2
    44f0:	59 f1       	breq	.+86     	; 0x4548 <VL53L0X_load_tuning_settings+0xda>
    44f2:	93 30       	cpi	r25, 0x03	; 3
    44f4:	e9 f1       	breq	.+122    	; 0x4570 <VL53L0X_load_tuning_settings+0x102>
    44f6:	77 c0       	rjmp	.+238    	; 0x45e6 <VL53L0X_load_tuning_settings+0x178>
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    44f8:	f6 01       	movw	r30, r12
    44fa:	ee 0d       	add	r30, r14
    44fc:	ff 1d       	adc	r31, r15
    44fe:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    4500:	24 e0       	ldi	r18, 0x04	; 4
    4502:	e2 0e       	add	r14, r18
    4504:	f1 1c       	adc	r15, r1
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
			switch (SelectParam) {
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    4506:	f6 01       	movw	r30, r12
    4508:	e4 0f       	add	r30, r20
    450a:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    450c:	20 81       	ld	r18, Z
    450e:	30 e0       	ldi	r19, 0x00	; 0
    4510:	32 2f       	mov	r19, r18
    4512:	22 27       	eor	r18, r18
    4514:	29 0f       	add	r18, r25
    4516:	31 1d       	adc	r19, r1
    4518:	f4 01       	movw	r30, r8
    451a:	31 83       	std	Z+1, r19	; 0x01
    451c:	20 83       	st	Z, r18
				break;
    451e:	68 c0       	rjmp	.+208    	; 0x45f0 <VL53L0X_load_tuning_settings+0x182>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    4520:	f6 01       	movw	r30, r12
    4522:	ee 0d       	add	r30, r14
    4524:	ff 1d       	adc	r31, r15
    4526:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    4528:	f4 e0       	ldi	r31, 0x04	; 4
    452a:	ef 0e       	add	r14, r31
    452c:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
				break;
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    452e:	f6 01       	movw	r30, r12
    4530:	e4 0f       	add	r30, r20
    4532:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    4534:	20 81       	ld	r18, Z
    4536:	30 e0       	ldi	r19, 0x00	; 0
    4538:	32 2f       	mov	r19, r18
    453a:	22 27       	eor	r18, r18
    453c:	29 0f       	add	r18, r25
    453e:	31 1d       	adc	r19, r1
    4540:	f3 01       	movw	r30, r6
    4542:	31 83       	std	Z+1, r19	; 0x01
    4544:	20 83       	st	Z, r18
					Temp16);
				break;
    4546:	54 c0       	rjmp	.+168    	; 0x45f0 <VL53L0X_load_tuning_settings+0x182>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    4548:	f6 01       	movw	r30, r12
    454a:	ee 0d       	add	r30, r14
    454c:	ff 1d       	adc	r31, r15
    454e:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    4550:	f4 e0       	ldi	r31, 0x04	; 4
    4552:	ef 0e       	add	r14, r31
    4554:	f1 1c       	adc	r15, r1
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
					Temp16);
				break;
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    4556:	f6 01       	movw	r30, r12
    4558:	e4 0f       	add	r30, r20
    455a:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    455c:	20 81       	ld	r18, Z
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	32 2f       	mov	r19, r18
    4562:	22 27       	eor	r18, r18
    4564:	29 0f       	add	r18, r25
    4566:	31 1d       	adc	r19, r1
    4568:	f2 01       	movw	r30, r4
    456a:	31 83       	std	Z+1, r19	; 0x01
    456c:	20 83       	st	Z, r18
				break;
    456e:	40 c0       	rjmp	.+128    	; 0x45f0 <VL53L0X_load_tuning_settings+0x182>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    4570:	f6 01       	movw	r30, r12
    4572:	ee 0d       	add	r30, r14
    4574:	ff 1d       	adc	r31, r15
    4576:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    4578:	f4 e0       	ldi	r31, 0x04	; 4
    457a:	ef 0e       	add	r14, r31
    457c:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
				break;
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    457e:	f6 01       	movw	r30, r12
    4580:	e4 0f       	add	r30, r20
    4582:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    4584:	20 81       	ld	r18, Z
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	32 2f       	mov	r19, r18
    458a:	22 27       	eor	r18, r18
    458c:	29 0f       	add	r18, r25
    458e:	31 1d       	adc	r19, r1
    4590:	f1 01       	movw	r30, r2
    4592:	31 83       	std	Z+1, r19	; 0x01
    4594:	20 83       	st	Z, r18
				break;
    4596:	2c c0       	rjmp	.+88     	; 0x45f0 <VL53L0X_load_tuning_settings+0x182>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}

		} else if (NumberOfWrites <= 4) {
    4598:	05 30       	cpi	r16, 0x05	; 5
    459a:	40 f5       	brcc	.+80     	; 0x45ec <VL53L0X_load_tuning_settings+0x17e>
			Address = *(pTuningSettingBuffer + Index);
    459c:	f6 01       	movw	r30, r12
    459e:	e2 0f       	add	r30, r18
    45a0:	f3 1f       	adc	r31, r19
    45a2:	60 81       	ld	r22, Z
			Index++;
    45a4:	f2 e0       	ldi	r31, 0x02	; 2
    45a6:	ef 0e       	add	r14, r31
    45a8:	f1 1c       	adc	r15, r1

			for (i = 0; i < NumberOfWrites; i++) {
    45aa:	00 23       	and	r16, r16
    45ac:	91 f0       	breq	.+36     	; 0x45d2 <VL53L0X_load_tuning_settings+0x164>
    45ae:	97 01       	movw	r18, r14
    45b0:	d6 01       	movw	r26, r12
    45b2:	ae 0d       	add	r26, r14
    45b4:	bf 1d       	adc	r27, r15
    45b6:	fe 01       	movw	r30, r28
    45b8:	31 96       	adiw	r30, 0x01	; 1
    45ba:	e0 2e       	mov	r14, r16
    45bc:	f1 2c       	mov	r15, r1
    45be:	cf 01       	movw	r24, r30
    45c0:	8e 0d       	add	r24, r14
    45c2:	9f 1d       	adc	r25, r15
				localBuffer[i] = *(pTuningSettingBuffer +
    45c4:	4d 91       	ld	r20, X+
    45c6:	41 93       	st	Z+, r20

		} else if (NumberOfWrites <= 4) {
			Address = *(pTuningSettingBuffer + Index);
			Index++;

			for (i = 0; i < NumberOfWrites; i++) {
    45c8:	e8 17       	cp	r30, r24
    45ca:	f9 07       	cpc	r31, r25
    45cc:	d9 f7       	brne	.-10     	; 0x45c4 <VL53L0X_load_tuning_settings+0x156>
    45ce:	e2 0e       	add	r14, r18
    45d0:	f3 1e       	adc	r15, r19
				localBuffer[i] = *(pTuningSettingBuffer +
							Index);
				Index++;
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
    45d2:	10 e0       	ldi	r17, 0x00	; 0
    45d4:	20 e0       	ldi	r18, 0x00	; 0
    45d6:	30 e0       	ldi	r19, 0x00	; 0
    45d8:	ae 01       	movw	r20, r28
    45da:	4f 5f       	subi	r20, 0xFF	; 255
    45dc:	5f 4f       	sbci	r21, 0xFF	; 255
    45de:	c5 01       	movw	r24, r10
    45e0:	0e 94 a3 2b 	call	0x5746	; 0x5746 <VL53L0X_WriteMulti>
    45e4:	05 c0       	rjmp	.+10     	; 0x45f0 <VL53L0X_load_tuning_settings+0x182>
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    45e6:	7a 01       	movw	r14, r20
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
				break;
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    45e8:	8c ef       	ldi	r24, 0xFC	; 252
    45ea:	02 c0       	rjmp	.+4      	; 0x45f0 <VL53L0X_load_tuning_settings+0x182>
	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    45ec:	79 01       	movw	r14, r18

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    45ee:	8c ef       	ldi	r24, 0xFC	; 252

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    45f0:	f6 01       	movw	r30, r12
    45f2:	ee 0d       	add	r30, r14
    45f4:	ff 1d       	adc	r31, r15
    45f6:	00 81       	ld	r16, Z
    45f8:	00 23       	and	r16, r16
    45fa:	19 f0       	breq	.+6      	; 0x4602 <VL53L0X_load_tuning_settings+0x194>
    45fc:	88 23       	and	r24, r24
    45fe:	09 f4       	brne	.+2      	; 0x4602 <VL53L0X_load_tuning_settings+0x194>
    4600:	66 cf       	rjmp	.-308    	; 0x44ce <VL53L0X_load_tuning_settings+0x60>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    4602:	0f 90       	pop	r0
    4604:	0f 90       	pop	r0
    4606:	0f 90       	pop	r0
    4608:	0f 90       	pop	r0
    460a:	df 91       	pop	r29
    460c:	cf 91       	pop	r28
    460e:	1f 91       	pop	r17
    4610:	0f 91       	pop	r16
    4612:	ff 90       	pop	r15
    4614:	ef 90       	pop	r14
    4616:	df 90       	pop	r13
    4618:	cf 90       	pop	r12
    461a:	bf 90       	pop	r11
    461c:	af 90       	pop	r10
    461e:	9f 90       	pop	r9
    4620:	8f 90       	pop	r8
    4622:	7f 90       	pop	r7
    4624:	6f 90       	pop	r6
    4626:	5f 90       	pop	r5
    4628:	4f 90       	pop	r4
    462a:	3f 90       	pop	r3
    462c:	2f 90       	pop	r2
    462e:	08 95       	ret

00004630 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
    4630:	cf 92       	push	r12
    4632:	df 92       	push	r13
    4634:	ef 92       	push	r14
    4636:	ff 92       	push	r15
    4638:	0f 93       	push	r16
    463a:	1f 93       	push	r17
    463c:	cf 93       	push	r28
    463e:	df 93       	push	r29
    4640:	1f 92       	push	r1
    4642:	cd b7       	in	r28, 0x3d	; 61
    4644:	de b7       	in	r29, 0x3e	; 62
    4646:	7c 01       	movw	r14, r24
    4648:	6b 01       	movw	r12, r22
    464a:	8a 01       	movw	r16, r20

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
    464c:	da 01       	movw	r26, r20
    464e:	1d 92       	st	X+, r1
    4650:	1d 92       	st	X+, r1
    4652:	1d 92       	st	X+, r1
    4654:	1c 92       	st	X, r1
    4656:	13 97       	sbiw	r26, 0x03	; 3

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
    4658:	be 01       	movw	r22, r28
    465a:	6f 5f       	subi	r22, 0xFF	; 255
    465c:	7f 4f       	sbci	r23, 0xFF	; 255
    465e:	0e 94 ba 09 	call	0x1374	; 0x1374 <VL53L0X_GetXTalkCompensationEnable>
    4662:	e8 2f       	mov	r30, r24
	if (Status == VL53L0X_ERROR_NONE) {
    4664:	81 11       	cpse	r24, r1
    4666:	22 c0       	rjmp	.+68     	; 0x46ac <VL53L0X_get_total_xtalk_rate+0x7c>

		if (xtalkCompEnable) {
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	88 23       	and	r24, r24
    466c:	f9 f0       	breq	.+62     	; 0x46ac <VL53L0X_get_total_xtalk_rate+0x7c>
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
    466e:	d6 01       	movw	r26, r12
    4670:	54 96       	adiw	r26, 0x14	; 20
    4672:	8d 91       	ld	r24, X+
    4674:	9c 91       	ld	r25, X
    4676:	55 97       	sbiw	r26, 0x15	; 21
    4678:	d7 01       	movw	r26, r14
    467a:	5d 96       	adiw	r26, 0x1d	; 29
    467c:	2d 91       	ld	r18, X+
    467e:	3d 91       	ld	r19, X+
    4680:	4d 91       	ld	r20, X+
    4682:	5c 91       	ld	r21, X
    4684:	90 97       	sbiw	r26, 0x20	; 32
    4686:	dc 01       	movw	r26, r24
    4688:	0e 94 a7 2c 	call	0x594e	; 0x594e <__muluhisi3>
    468c:	dc 01       	movw	r26, r24
    468e:	cb 01       	movw	r24, r22
    4690:	80 58       	subi	r24, 0x80	; 128
    4692:	9f 4f       	sbci	r25, 0xFF	; 255
    4694:	af 4f       	sbci	r26, 0xFF	; 255
    4696:	bf 4f       	sbci	r27, 0xFF	; 255
    4698:	49 2f       	mov	r20, r25
    469a:	5a 2f       	mov	r21, r26
    469c:	6b 2f       	mov	r22, r27
    469e:	77 27       	eor	r23, r23
    46a0:	d8 01       	movw	r26, r16
    46a2:	4d 93       	st	X+, r20
    46a4:	5d 93       	st	X+, r21
    46a6:	6d 93       	st	X+, r22
    46a8:	7c 93       	st	X, r23
    46aa:	13 97       	sbiw	r26, 0x03	; 3
				(totalXtalkMegaCps + 0x80) >> 8;
		}
	}

	return Status;
}
    46ac:	8e 2f       	mov	r24, r30
    46ae:	0f 90       	pop	r0
    46b0:	df 91       	pop	r29
    46b2:	cf 91       	pop	r28
    46b4:	1f 91       	pop	r17
    46b6:	0f 91       	pop	r16
    46b8:	ff 90       	pop	r15
    46ba:	ef 90       	pop	r14
    46bc:	df 90       	pop	r13
    46be:	cf 90       	pop	r12
    46c0:	08 95       	ret

000046c2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
    46c2:	cf 92       	push	r12
    46c4:	df 92       	push	r13
    46c6:	ef 92       	push	r14
    46c8:	ff 92       	push	r15
    46ca:	0f 93       	push	r16
    46cc:	1f 93       	push	r17
    46ce:	cf 93       	push	r28
    46d0:	df 93       	push	r29
    46d2:	00 d0       	rcall	.+0      	; 0x46d4 <VL53L0X_get_total_signal_rate+0x12>
    46d4:	00 d0       	rcall	.+0      	; 0x46d6 <VL53L0X_get_total_signal_rate+0x14>
    46d6:	cd b7       	in	r28, 0x3d	; 61
    46d8:	de b7       	in	r29, 0x3e	; 62
    46da:	8a 01       	movw	r16, r20
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
    46dc:	fb 01       	movw	r30, r22
    46de:	c4 84       	ldd	r12, Z+12	; 0x0c
    46e0:	d5 84       	ldd	r13, Z+13	; 0x0d
    46e2:	e6 84       	ldd	r14, Z+14	; 0x0e
    46e4:	f7 84       	ldd	r15, Z+15	; 0x0f
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
    46e6:	fa 01       	movw	r30, r20
    46e8:	c0 82       	st	Z, r12
    46ea:	d1 82       	std	Z+1, r13	; 0x01
    46ec:	e2 82       	std	Z+2, r14	; 0x02
    46ee:	f3 82       	std	Z+3, r15	; 0x03
		pRangingMeasurementData->SignalRateRtnMegaCps;

	Status = VL53L0X_get_total_xtalk_rate(
    46f0:	ae 01       	movw	r20, r28
    46f2:	4f 5f       	subi	r20, 0xFF	; 255
    46f4:	5f 4f       	sbci	r21, 0xFF	; 255
    46f6:	9c df       	rcall	.-200    	; 0x4630 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
    46f8:	81 11       	cpse	r24, r1
    46fa:	11 c0       	rjmp	.+34     	; 0x471e <VL53L0X_get_total_signal_rate+0x5c>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
    46fc:	f8 01       	movw	r30, r16
    46fe:	c0 80       	ld	r12, Z
    4700:	d1 80       	ldd	r13, Z+1	; 0x01
    4702:	e2 80       	ldd	r14, Z+2	; 0x02
    4704:	f3 80       	ldd	r15, Z+3	; 0x03
    4706:	49 81       	ldd	r20, Y+1	; 0x01
    4708:	5a 81       	ldd	r21, Y+2	; 0x02
    470a:	6b 81       	ldd	r22, Y+3	; 0x03
    470c:	7c 81       	ldd	r23, Y+4	; 0x04
    470e:	4c 0d       	add	r20, r12
    4710:	5d 1d       	adc	r21, r13
    4712:	6e 1d       	adc	r22, r14
    4714:	7f 1d       	adc	r23, r15
    4716:	40 83       	st	Z, r20
    4718:	51 83       	std	Z+1, r21	; 0x01
    471a:	62 83       	std	Z+2, r22	; 0x02
    471c:	73 83       	std	Z+3, r23	; 0x03

	return Status;
}
    471e:	0f 90       	pop	r0
    4720:	0f 90       	pop	r0
    4722:	0f 90       	pop	r0
    4724:	0f 90       	pop	r0
    4726:	df 91       	pop	r29
    4728:	cf 91       	pop	r28
    472a:	1f 91       	pop	r17
    472c:	0f 91       	pop	r16
    472e:	ff 90       	pop	r15
    4730:	ef 90       	pop	r14
    4732:	df 90       	pop	r13
    4734:	cf 90       	pop	r12
    4736:	08 95       	ret

00004738 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
    4738:	4f 92       	push	r4
    473a:	5f 92       	push	r5
    473c:	6f 92       	push	r6
    473e:	7f 92       	push	r7
    4740:	8f 92       	push	r8
    4742:	9f 92       	push	r9
    4744:	af 92       	push	r10
    4746:	bf 92       	push	r11
    4748:	cf 92       	push	r12
    474a:	df 92       	push	r13
    474c:	ef 92       	push	r14
    474e:	ff 92       	push	r15
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	64 97       	sbiw	r28, 0x14	; 20
    475e:	0f b6       	in	r0, 0x3f	; 63
    4760:	f8 94       	cli
    4762:	de bf       	out	0x3e, r29	; 62
    4764:	0f be       	out	0x3f, r0	; 63
    4766:	cd bf       	out	0x3d, r28	; 61
    4768:	49 87       	std	Y+9, r20	; 0x09
    476a:	5a 87       	std	Y+10, r21	; 0x0a
    476c:	6b 87       	std	Y+11, r22	; 0x0b
    476e:	7c 87       	std	Y+12, r23	; 0x0c
    4770:	09 83       	std	Y+1, r16	; 0x01
    4772:	1a 83       	std	Y+2, r17	; 0x02
    4774:	2b 83       	std	Y+3, r18	; 0x03
    4776:	3c 83       	std	Y+4, r19	; 0x04
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
    4778:	fc 01       	movw	r30, r24
    477a:	e5 5c       	subi	r30, 0xC5	; 197
    477c:	fe 4f       	sbci	r31, 0xFE	; 254

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
    477e:	20 81       	ld	r18, Z
    4780:	31 81       	ldd	r19, Z+1	; 0x01
    4782:	29 01       	movw	r4, r18
    4784:	61 2c       	mov	r6, r1
    4786:	71 2c       	mov	r7, r1
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);

	dmaxCalSignalRateRtn_mcps =
    4788:	32 96       	adiw	r30, 0x02	; 2

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
    478a:	60 81       	ld	r22, Z
    478c:	71 81       	ldd	r23, Z+1	; 0x01
    478e:	82 81       	ldd	r24, Z+2	; 0x02
    4790:	93 81       	ldd	r25, Z+3	; 0x03
    4792:	a3 01       	movw	r20, r6
    4794:	92 01       	movw	r18, r4
    4796:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__mulsi3>
    479a:	dc 01       	movw	r26, r24
    479c:	cb 01       	movw	r24, r22
    479e:	80 58       	subi	r24, 0x80	; 128
    47a0:	9f 4f       	sbci	r25, 0xFF	; 255
    47a2:	af 4f       	sbci	r26, 0xFF	; 255
    47a4:	bf 4f       	sbci	r27, 0xFF	; 255
    47a6:	69 2f       	mov	r22, r25
    47a8:	7a 2f       	mov	r23, r26
    47aa:	8b 2f       	mov	r24, r27
    47ac:	99 27       	eor	r25, r25
	SignalAt0mm *= dmaxCalRange_mm;
    47ae:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__mulsi3>
    47b2:	6d 87       	std	Y+13, r22	; 0x0d
    47b4:	7e 87       	std	Y+14, r23	; 0x0e
    47b6:	8f 87       	std	Y+15, r24	; 0x0f
    47b8:	98 8b       	std	Y+16, r25	; 0x10

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
    47ba:	29 81       	ldd	r18, Y+1	; 0x01
    47bc:	3a 81       	ldd	r19, Y+2	; 0x02
    47be:	4b 81       	ldd	r20, Y+3	; 0x03
    47c0:	5c 81       	ldd	r21, Y+4	; 0x04
    47c2:	21 15       	cp	r18, r1
    47c4:	31 05       	cpc	r19, r1
    47c6:	41 05       	cpc	r20, r1
    47c8:	51 05       	cpc	r21, r1
    47ca:	c1 f1       	breq	.+112    	; 0x483c <VL53L0X_calc_dmax+0x104>
		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
    47cc:	49 84       	ldd	r4, Y+9	; 0x09
    47ce:	5a 84       	ldd	r5, Y+10	; 0x0a
    47d0:	6b 84       	ldd	r6, Y+11	; 0x0b
    47d2:	7c 84       	ldd	r7, Y+12	; 0x0c
    47d4:	03 2e       	mov	r0, r19
    47d6:	3a e0       	ldi	r19, 0x0A	; 10
    47d8:	44 0c       	add	r4, r4
    47da:	55 1c       	adc	r5, r5
    47dc:	66 1c       	adc	r6, r6
    47de:	77 1c       	adc	r7, r7
    47e0:	3a 95       	dec	r19
    47e2:	d1 f7       	brne	.-12     	; 0x47d8 <VL53L0X_calc_dmax+0xa0>
    47e4:	30 2d       	mov	r19, r0
    47e6:	da 01       	movw	r26, r20
    47e8:	c9 01       	movw	r24, r18
    47ea:	b6 95       	lsr	r27
    47ec:	a7 95       	ror	r26
    47ee:	97 95       	ror	r25
    47f0:	87 95       	ror	r24
    47f2:	bc 01       	movw	r22, r24
    47f4:	cd 01       	movw	r24, r26
    47f6:	64 0d       	add	r22, r4
    47f8:	75 1d       	adc	r23, r5
    47fa:	86 1d       	adc	r24, r6
    47fc:	97 1d       	adc	r25, r7
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
    47fe:	0e 94 76 2c 	call	0x58ec	; 0x58ec <__udivmodsi4>

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
    4802:	da 01       	movw	r26, r20
    4804:	c9 01       	movw	r24, r18
    4806:	88 0f       	add	r24, r24
    4808:	99 1f       	adc	r25, r25
    480a:	aa 1f       	adc	r26, r26
    480c:	bb 1f       	adc	r27, r27
    480e:	bc 01       	movw	r22, r24
    4810:	cd 01       	movw	r24, r26
    4812:	62 0f       	add	r22, r18
    4814:	73 1f       	adc	r23, r19
    4816:	84 1f       	adc	r24, r20
    4818:	95 1f       	adc	r25, r21

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
    481a:	9b 01       	movw	r18, r22
    481c:	ac 01       	movw	r20, r24
    481e:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__mulsi3>
    4822:	dc 01       	movw	r26, r24
    4824:	cb 01       	movw	r24, r22
    4826:	90 58       	subi	r25, 0x80	; 128
    4828:	af 4f       	sbci	r26, 0xFF	; 255
    482a:	bf 4f       	sbci	r27, 0xFF	; 255
    482c:	9d 01       	movw	r18, r26
    482e:	44 27       	eor	r20, r20
    4830:	55 27       	eor	r21, r21
    4832:	29 87       	std	Y+9, r18	; 0x09
    4834:	3a 87       	std	Y+10, r19	; 0x0a
    4836:	4b 87       	std	Y+11, r20	; 0x0b
    4838:	5c 87       	std	Y+12, r21	; 0x0c
    483a:	04 c0       	rjmp	.+8      	; 0x4844 <VL53L0X_calc_dmax+0x10c>

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
	SignalAt0mm *= dmaxCalRange_mm;

	minSignalNeeded_p1 = 0;
    483c:	19 86       	std	Y+9, r1	; 0x09
    483e:	1a 86       	std	Y+10, r1	; 0x0a
    4840:	1b 86       	std	Y+11, r1	; 0x0b
    4842:	1c 86       	std	Y+12, r1	; 0x0c
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
    4844:	a7 01       	movw	r20, r14
    4846:	96 01       	movw	r18, r12
    4848:	c5 01       	movw	r24, r10
    484a:	b4 01       	movw	r22, r8
    484c:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__mulsi3>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	90 58       	subi	r25, 0x80	; 128
    4856:	af 4f       	sbci	r26, 0xFF	; 255
    4858:	bf 4f       	sbci	r27, 0xFF	; 255
    485a:	bd 01       	movw	r22, r26
    485c:	88 27       	eor	r24, r24
    485e:	99 27       	eor	r25, r25

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
    4860:	9b 01       	movw	r18, r22
    4862:	ac 01       	movw	r20, r24
    4864:	0e 94 67 2c 	call	0x58ce	; 0x58ce <__mulsi3>
    4868:	69 8b       	std	Y+17, r22	; 0x11
    486a:	7a 8b       	std	Y+18, r23	; 0x12
    486c:	8b 8b       	std	Y+19, r24	; 0x13
    486e:	9c 8b       	std	Y+20, r25	; 0x14
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
    4870:	8f a1       	ldd	r24, Y+39	; 0x27
    4872:	98 a5       	ldd	r25, Y+40	; 0x28
    4874:	a9 a5       	ldd	r26, Y+41	; 0x29
    4876:	ba a5       	ldd	r27, Y+42	; 0x2a
    4878:	90 58       	subi	r25, 0x80	; 128
    487a:	af 4f       	sbci	r26, 0xFF	; 255
    487c:	bf 4f       	sbci	r27, 0xFF	; 255
    487e:	cd 01       	movw	r24, r26
    4880:	aa 27       	eor	r26, r26
    4882:	bb 27       	eor	r27, r27
    4884:	bc 01       	movw	r22, r24
    4886:	cd 01       	movw	r24, r26
    4888:	6d 5f       	subi	r22, 0xFD	; 253
    488a:	7f 4f       	sbci	r23, 0xFF	; 255
    488c:	8f 4f       	sbci	r24, 0xFF	; 255
    488e:	9f 4f       	sbci	r25, 0xFF	; 255
    4890:	2b ea       	ldi	r18, 0xAB	; 171
    4892:	3a ea       	ldi	r19, 0xAA	; 170
    4894:	4a ea       	ldi	r20, 0xAA	; 170
    4896:	5a ea       	ldi	r21, 0xAA	; 170
    4898:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__umulsidi3>
    489c:	00 e2       	ldi	r16, 0x20	; 32
    489e:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__lshrdi3>
    48a2:	82 2e       	mov	r8, r18
    48a4:	93 2e       	mov	r9, r19
    48a6:	a4 2e       	mov	r10, r20
    48a8:	b5 2e       	mov	r11, r21
    48aa:	b5 01       	movw	r22, r10
    48ac:	a4 01       	movw	r20, r8
    48ae:	76 95       	lsr	r23
    48b0:	67 95       	ror	r22
    48b2:	57 95       	ror	r21
    48b4:	47 95       	ror	r20
    48b6:	76 95       	lsr	r23
    48b8:	67 95       	ror	r22
    48ba:	57 95       	ror	r21
    48bc:	47 95       	ror	r20
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
    48be:	db 01       	movw	r26, r22
    48c0:	ca 01       	movw	r24, r20
    48c2:	88 0f       	add	r24, r24
    48c4:	99 1f       	adc	r25, r25
    48c6:	aa 1f       	adc	r26, r26
    48c8:	bb 1f       	adc	r27, r27
    48ca:	88 0f       	add	r24, r24
    48cc:	99 1f       	adc	r25, r25
    48ce:	aa 1f       	adc	r26, r26
    48d0:	bb 1f       	adc	r27, r27
    48d2:	88 0f       	add	r24, r24
    48d4:	99 1f       	adc	r25, r25
    48d6:	aa 1f       	adc	r26, r26
    48d8:	bb 1f       	adc	r27, r27
    48da:	84 1b       	sub	r24, r20
    48dc:	95 0b       	sbc	r25, r21
    48de:	a6 0b       	sbc	r26, r22
    48e0:	b7 0b       	sbc	r27, r23
    48e2:	00 97       	sbiw	r24, 0x00	; 0
    48e4:	a1 40       	sbci	r26, 0x01	; 1
    48e6:	b1 05       	cpc	r27, r1
    48e8:	08 f0       	brcs	.+2      	; 0x48ec <VL53L0X_calc_dmax+0x1b4>
    48ea:	40 c0       	rjmp	.+128    	; 0x496c <VL53L0X_calc_dmax+0x234>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
    48ec:	6f a1       	ldd	r22, Y+39	; 0x27
    48ee:	78 a5       	ldd	r23, Y+40	; 0x28
    48f0:	89 a5       	ldd	r24, Y+41	; 0x29
    48f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    48f4:	6d 5f       	subi	r22, 0xFD	; 253
    48f6:	7f 4f       	sbci	r23, 0xFF	; 255
    48f8:	8f 4f       	sbci	r24, 0xFF	; 255
    48fa:	9f 4f       	sbci	r25, 0xFF	; 255
    48fc:	2b ea       	ldi	r18, 0xAB	; 171
    48fe:	3a ea       	ldi	r19, 0xAA	; 170
    4900:	4a ea       	ldi	r20, 0xAA	; 170
    4902:	5a ea       	ldi	r21, 0xAA	; 170
    4904:	0e 94 b1 2c 	call	0x5962	; 0x5962 <__umulsidi3>
    4908:	0e 94 da 2c 	call	0x59b4	; 0x59b4 <__lshrdi3>
    490c:	29 83       	std	Y+1, r18	; 0x01
    490e:	3a 83       	std	Y+2, r19	; 0x02
    4910:	4b 83       	std	Y+3, r20	; 0x03
    4912:	5c 83       	std	Y+4, r21	; 0x04
    4914:	6d 83       	std	Y+5, r22	; 0x05
    4916:	7e 83       	std	Y+6, r23	; 0x06
    4918:	8f 83       	std	Y+7, r24	; 0x07
    491a:	98 87       	std	Y+8, r25	; 0x08
    491c:	49 80       	ldd	r4, Y+1	; 0x01
    491e:	5a 80       	ldd	r5, Y+2	; 0x02
    4920:	6b 80       	ldd	r6, Y+3	; 0x03
    4922:	7c 80       	ldd	r7, Y+4	; 0x04
    4924:	76 94       	lsr	r7
    4926:	67 94       	ror	r6
    4928:	57 94       	ror	r5
    492a:	47 94       	ror	r4
    492c:	76 94       	lsr	r7
    492e:	67 94       	ror	r6
    4930:	57 94       	ror	r5
    4932:	47 94       	ror	r4
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
    4934:	d3 01       	movw	r26, r6
    4936:	c2 01       	movw	r24, r4
    4938:	88 0f       	add	r24, r24
    493a:	99 1f       	adc	r25, r25
    493c:	aa 1f       	adc	r26, r26
    493e:	bb 1f       	adc	r27, r27
    4940:	88 0f       	add	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	aa 1f       	adc	r26, r26
    4946:	bb 1f       	adc	r27, r27
    4948:	88 0f       	add	r24, r24
    494a:	99 1f       	adc	r25, r25
    494c:	aa 1f       	adc	r26, r26
    494e:	bb 1f       	adc	r27, r27
    4950:	84 19       	sub	r24, r4
    4952:	95 09       	sbc	r25, r5
    4954:	a6 09       	sbc	r26, r6
    4956:	b7 09       	sbc	r27, r7
    4958:	90 58       	subi	r25, 0x80	; 128
    495a:	af 4f       	sbci	r26, 0xFF	; 255
    495c:	bf 4f       	sbci	r27, 0xFF	; 255
    495e:	bd 01       	movw	r22, r26
    4960:	88 27       	eor	r24, r24
    4962:	99 27       	eor	r25, r25

		minSignalNeeded_p3 *= minSignalNeeded_p3;
    4964:	9b 01       	movw	r18, r22
    4966:	ac 01       	movw	r20, r24
    4968:	b2 d7       	rcall	.+3940   	; 0x58ce <__mulsi3>
    496a:	04 c0       	rjmp	.+8      	; 0x4974 <VL53L0X_calc_dmax+0x23c>
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
		minSignalNeeded_p3 = 0xfff00000;
    496c:	60 e0       	ldi	r22, 0x00	; 0
    496e:	70 e0       	ldi	r23, 0x00	; 0
    4970:	80 ef       	ldi	r24, 0xF0	; 240
    4972:	9f ef       	ldi	r25, 0xFF	; 255

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
    4974:	4b a4       	ldd	r4, Y+43	; 0x2b
    4976:	5c a4       	ldd	r5, Y+44	; 0x2c
    4978:	6d a4       	ldd	r6, Y+45	; 0x2d
    497a:	7e a4       	ldd	r7, Y+46	; 0x2e
    497c:	76 94       	lsr	r7
    497e:	67 94       	ror	r6
    4980:	57 94       	ror	r5
    4982:	47 94       	ror	r4
    4984:	c9 88       	ldd	r12, Y+17	; 0x11
    4986:	da 88       	ldd	r13, Y+18	; 0x12
    4988:	eb 88       	ldd	r14, Y+19	; 0x13
    498a:	fc 88       	ldd	r15, Y+20	; 0x14
    498c:	c4 0c       	add	r12, r4
    498e:	d5 1c       	adc	r13, r5
    4990:	e6 1c       	adc	r14, r6
    4992:	f7 1c       	adc	r15, r7
    4994:	6c 0d       	add	r22, r12
    4996:	7d 1d       	adc	r23, r13
    4998:	8e 1d       	adc	r24, r14
    499a:	9f 1d       	adc	r25, r15
	minSignalNeeded /= peakVcselDuration_us;
    499c:	2b a5       	ldd	r18, Y+43	; 0x2b
    499e:	3c a5       	ldd	r19, Y+44	; 0x2c
    49a0:	4d a5       	ldd	r20, Y+45	; 0x2d
    49a2:	5e a5       	ldd	r21, Y+46	; 0x2e
    49a4:	a3 d7       	rcall	.+3910   	; 0x58ec <__udivmodsi4>

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
    49a6:	da 01       	movw	r26, r20
    49a8:	c9 01       	movw	r24, r18
    49aa:	07 2e       	mov	r0, r23
    49ac:	7e e0       	ldi	r23, 0x0E	; 14
    49ae:	88 0f       	add	r24, r24
    49b0:	99 1f       	adc	r25, r25
    49b2:	aa 1f       	adc	r26, r26
    49b4:	bb 1f       	adc	r27, r27
    49b6:	7a 95       	dec	r23
    49b8:	d1 f7       	brne	.-12     	; 0x49ae <VL53L0X_calc_dmax+0x276>
    49ba:	70 2d       	mov	r23, r0

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
    49bc:	bc 01       	movw	r22, r24
    49be:	cd 01       	movw	r24, r26
    49c0:	61 58       	subi	r22, 0x81	; 129
    49c2:	7f 4f       	sbci	r23, 0xFF	; 255
    49c4:	8f 4f       	sbci	r24, 0xFF	; 255
    49c6:	9f 4f       	sbci	r25, 0xFF	; 255
	minSignalNeeded /= minSignalNeeded_p4;
    49c8:	2e ef       	ldi	r18, 0xFE	; 254
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	40 e0       	ldi	r20, 0x00	; 0
    49ce:	50 e0       	ldi	r21, 0x00	; 0
    49d0:	8d d7       	rcall	.+3866   	; 0x58ec <__udivmodsi4>
    49d2:	ca 01       	movw	r24, r20
    49d4:	b9 01       	movw	r22, r18
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    49d6:	29 85       	ldd	r18, Y+9	; 0x09
    49d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    49da:	4b 85       	ldd	r20, Y+11	; 0x0b
    49dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    49de:	77 d7       	rcall	.+3822   	; 0x58ce <__mulsi3>
    49e0:	6c 50       	subi	r22, 0x0C	; 12
    49e2:	7e 4f       	sbci	r23, 0xFE	; 254
    49e4:	8f 4f       	sbci	r24, 0xFF	; 255
    49e6:	9f 4f       	sbci	r25, 0xFF	; 255
    49e8:	0f 2e       	mov	r0, r31
    49ea:	f8 ee       	ldi	r31, 0xE8	; 232
    49ec:	8f 2e       	mov	r8, r31
    49ee:	f3 e0       	ldi	r31, 0x03	; 3
    49f0:	9f 2e       	mov	r9, r31
    49f2:	a1 2c       	mov	r10, r1
    49f4:	b1 2c       	mov	r11, r1
    49f6:	f0 2d       	mov	r31, r0
    49f8:	a5 01       	movw	r20, r10
    49fa:	94 01       	movw	r18, r8
    49fc:	77 d7       	rcall	.+3822   	; 0x58ec <__udivmodsi4>
	minSignalNeeded <<= 4;

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    49fe:	69 01       	movw	r12, r18
    4a00:	7a 01       	movw	r14, r20
    4a02:	cc 0c       	add	r12, r12
    4a04:	dd 1c       	adc	r13, r13
    4a06:	ee 1c       	adc	r14, r14
    4a08:	ff 1c       	adc	r15, r15
    4a0a:	cc 0c       	add	r12, r12
    4a0c:	dd 1c       	adc	r13, r13
    4a0e:	ee 1c       	adc	r14, r14
    4a10:	ff 1c       	adc	r15, r15
    4a12:	cc 0c       	add	r12, r12
    4a14:	dd 1c       	adc	r13, r13
    4a16:	ee 1c       	adc	r14, r14
    4a18:	ff 1c       	adc	r15, r15
    4a1a:	cc 0c       	add	r12, r12
    4a1c:	dd 1c       	adc	r13, r13
    4a1e:	ee 1c       	adc	r14, r14
    4a20:	ff 1c       	adc	r15, r15
    4a22:	44 ef       	ldi	r20, 0xF4	; 244
    4a24:	c4 0e       	add	r12, r20
    4a26:	41 e0       	ldi	r20, 0x01	; 1
    4a28:	d4 1e       	adc	r13, r20
    4a2a:	e1 1c       	adc	r14, r1
    4a2c:	f1 1c       	adc	r15, r1
    4a2e:	c7 01       	movw	r24, r14
    4a30:	b6 01       	movw	r22, r12
    4a32:	a5 01       	movw	r20, r10
    4a34:	94 01       	movw	r18, r8
    4a36:	5a d7       	rcall	.+3764   	; 0x58ec <__udivmodsi4>
    4a38:	49 01       	movw	r8, r18
    4a3a:	5a 01       	movw	r10, r20
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
    4a3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a40:	af 85       	ldd	r26, Y+15	; 0x0f
    4a42:	b8 89       	ldd	r27, Y+16	; 0x10
    4a44:	80 96       	adiw	r24, 0x20	; 32
    4a46:	a1 1d       	adc	r26, r1
    4a48:	b1 1d       	adc	r27, r1
    4a4a:	bc 01       	movw	r22, r24
    4a4c:	cd 01       	movw	r24, r26
    4a4e:	68 94       	set
    4a50:	15 f8       	bld	r1, 5
    4a52:	96 95       	lsr	r25
    4a54:	87 95       	ror	r24
    4a56:	77 95       	ror	r23
    4a58:	67 95       	ror	r22
    4a5a:	16 94       	lsr	r1
    4a5c:	d1 f7       	brne	.-12     	; 0x4a52 <VL53L0X_calc_dmax+0x31a>
    4a5e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <VL53L0X_isqrt>
    4a62:	2b 01       	movw	r4, r22
    4a64:	3c 01       	movw	r6, r24

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
    4a66:	81 14       	cp	r8, r1
    4a68:	91 04       	cpc	r9, r1
    4a6a:	a1 04       	cpc	r10, r1
    4a6c:	b1 04       	cpc	r11, r1
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
    4a6e:	a9 f0       	breq	.+42     	; 0x4a9a <VL53L0X_calc_dmax+0x362>
    4a70:	c7 01       	movw	r24, r14
    4a72:	b6 01       	movw	r22, r12
    4a74:	20 ed       	ldi	r18, 0xD0	; 208
    4a76:	37 e0       	ldi	r19, 0x07	; 7
    4a78:	40 e0       	ldi	r20, 0x00	; 0
    4a7a:	50 e0       	ldi	r21, 0x00	; 0
    4a7c:	37 d7       	rcall	.+3694   	; 0x58ec <__udivmodsi4>
    4a7e:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a80:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a82:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a84:	98 89       	ldd	r25, Y+16	; 0x10
    4a86:	62 0f       	add	r22, r18
    4a88:	73 1f       	adc	r23, r19
    4a8a:	84 1f       	adc	r24, r20
    4a8c:	95 1f       	adc	r25, r21
    4a8e:	a5 01       	movw	r20, r10
    4a90:	94 01       	movw	r18, r8
    4a92:	2c d7       	rcall	.+3672   	; 0x58ec <__udivmodsi4>
    4a94:	ca 01       	movw	r24, r20
    4a96:	b9 01       	movw	r22, r18
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
    4a98:	03 c0       	rjmp	.+6      	; 0x4aa0 <VL53L0X_calc_dmax+0x368>
    4a9a:	60 e0       	ldi	r22, 0x00	; 0
    4a9c:	70 e0       	ldi	r23, 0x00	; 0

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
    4a9e:	cb 01       	movw	r24, r22
    4aa0:	0e 94 50 19 	call	0x32a0	; 0x32a0 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
    4aa4:	64 15       	cp	r22, r4
    4aa6:	75 05       	cpc	r23, r5
    4aa8:	86 05       	cpc	r24, r6
    4aaa:	97 05       	cpc	r25, r7
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);

	*pdmax_mm = dmaxDark;
    4aac:	40 f0       	brcs	.+16     	; 0x4abe <VL53L0X_calc_dmax+0x386>
    4aae:	af a5       	ldd	r26, Y+47	; 0x2f
    4ab0:	b8 a9       	ldd	r27, Y+48	; 0x30
    4ab2:	4d 92       	st	X+, r4
    4ab4:	5d 92       	st	X+, r5
    4ab6:	6d 92       	st	X+, r6
    4ab8:	7c 92       	st	X, r7
    4aba:	13 97       	sbiw	r26, 0x03	; 3
	if (dmaxDark > dmaxAmbient)
		*pdmax_mm = dmaxAmbient;
    4abc:	06 c0       	rjmp	.+12     	; 0x4aca <VL53L0X_calc_dmax+0x392>
    4abe:	ef a5       	ldd	r30, Y+47	; 0x2f
    4ac0:	f8 a9       	ldd	r31, Y+48	; 0x30
    4ac2:	60 83       	st	Z, r22
    4ac4:	71 83       	std	Z+1, r23	; 0x01
    4ac6:	82 83       	std	Z+2, r24	; 0x02

	LOG_FUNCTION_END(Status);

	return Status;
}
    4ac8:	93 83       	std	Z+3, r25	; 0x03
    4aca:	80 e0       	ldi	r24, 0x00	; 0
    4acc:	64 96       	adiw	r28, 0x14	; 20
    4ace:	0f b6       	in	r0, 0x3f	; 63
    4ad0:	f8 94       	cli
    4ad2:	de bf       	out	0x3e, r29	; 62
    4ad4:	0f be       	out	0x3f, r0	; 63
    4ad6:	cd bf       	out	0x3d, r28	; 61
    4ad8:	df 91       	pop	r29
    4ada:	cf 91       	pop	r28
    4adc:	1f 91       	pop	r17
    4ade:	0f 91       	pop	r16
    4ae0:	ff 90       	pop	r15
    4ae2:	ef 90       	pop	r14
    4ae4:	df 90       	pop	r13
    4ae6:	cf 90       	pop	r12
    4ae8:	bf 90       	pop	r11
    4aea:	af 90       	pop	r10
    4aec:	9f 90       	pop	r9
    4aee:	8f 90       	pop	r8
    4af0:	7f 90       	pop	r7
    4af2:	6f 90       	pop	r6
    4af4:	5f 90       	pop	r5
    4af6:	4f 90       	pop	r4
    4af8:	08 95       	ret

00004afa <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
    4afa:	2f 92       	push	r2
    4afc:	3f 92       	push	r3
    4afe:	4f 92       	push	r4
    4b00:	5f 92       	push	r5
    4b02:	6f 92       	push	r6
    4b04:	7f 92       	push	r7
    4b06:	8f 92       	push	r8
    4b08:	9f 92       	push	r9
    4b0a:	af 92       	push	r10
    4b0c:	bf 92       	push	r11
    4b0e:	cf 92       	push	r12
    4b10:	df 92       	push	r13
    4b12:	ef 92       	push	r14
    4b14:	ff 92       	push	r15
    4b16:	0f 93       	push	r16
    4b18:	1f 93       	push	r17
    4b1a:	cf 93       	push	r28
    4b1c:	df 93       	push	r29
    4b1e:	cd b7       	in	r28, 0x3d	; 61
    4b20:	de b7       	in	r29, 0x3e	; 62
    4b22:	a9 97       	sbiw	r28, 0x29	; 41
    4b24:	0f b6       	in	r0, 0x3f	; 63
    4b26:	f8 94       	cli
    4b28:	de bf       	out	0x3e, r29	; 62
    4b2a:	0f be       	out	0x3f, r0	; 63
    4b2c:	cd bf       	out	0x3d, r28	; 61
    4b2e:	1c 01       	movw	r2, r24
    4b30:	7a 87       	std	Y+10, r23	; 0x0a
    4b32:	69 87       	std	Y+9, r22	; 0x09
    4b34:	58 a3       	std	Y+32, r21	; 0x20
    4b36:	4f 8f       	std	Y+31, r20	; 0x1f
    4b38:	3a 8f       	std	Y+26, r19	; 0x1a
    4b3a:	29 8f       	std	Y+25, r18	; 0x19
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
    4b3c:	fc 01       	movw	r30, r24
    4b3e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4b40:	96 8d       	ldd	r25, Z+30	; 0x1e
    4b42:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4b44:	b0 a1       	ldd	r27, Z+32	; 0x20
    4b46:	89 83       	std	Y+1, r24	; 0x01
    4b48:	9a 83       	std	Y+2, r25	; 0x02
    4b4a:	ab 83       	std	Y+3, r26	; 0x03
    4b4c:	bc 83       	std	Y+4, r27	; 0x04
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
    4b4e:	db 01       	movw	r26, r22
    4b50:	50 96       	adiw	r26, 0x10	; 16
    4b52:	2d 91       	ld	r18, X+
    4b54:	3d 91       	ld	r19, X+
    4b56:	4d 91       	ld	r20, X+
    4b58:	5c 91       	ld	r21, X
    4b5a:	53 97       	sbiw	r26, 0x13	; 19
    4b5c:	29 8b       	std	Y+17, r18	; 0x11
    4b5e:	3a 8b       	std	Y+18, r19	; 0x12
    4b60:	4b 8b       	std	Y+19, r20	; 0x13
    4b62:	5c 8b       	std	Y+20, r21	; 0x14

	correctedSignalRate_mcps =
    4b64:	1c 96       	adiw	r26, 0x0c	; 12
    4b66:	2d 91       	ld	r18, X+
    4b68:	3d 91       	ld	r19, X+
    4b6a:	4d 91       	ld	r20, X+
    4b6c:	5c 91       	ld	r21, X
    4b6e:	1f 97       	sbiw	r26, 0x0f	; 15
    4b70:	2d a3       	std	Y+37, r18	; 0x25
    4b72:	3e a3       	std	Y+38, r19	; 0x26
    4b74:	4f a3       	std	Y+39, r20	; 0x27
    4b76:	58 a7       	std	Y+40, r21	; 0x28
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
    4b78:	ae 01       	movw	r20, r28
    4b7a:	4b 5f       	subi	r20, 0xFB	; 251
    4b7c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b7e:	c1 01       	movw	r24, r2
    4b80:	a0 dd       	rcall	.-1216   	; 0x46c2 <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
    4b82:	ae 01       	movw	r20, r28
    4b84:	4f 5f       	subi	r20, 0xFF	; 255
    4b86:	5f 4f       	sbci	r21, 0xFF	; 255
    4b88:	69 85       	ldd	r22, Y+9	; 0x09
    4b8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    4b8c:	c1 01       	movw	r24, r2
    4b8e:	50 dd       	rcall	.-1376   	; 0x4630 <VL53L0X_get_total_xtalk_rate>
    4b90:	18 2f       	mov	r17, r24
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
    4b92:	81 11       	cpse	r24, r1
    4b94:	4f c2       	rjmp	.+1182   	; 0x5034 <VL53L0X_calc_sigma_estimate+0x53a>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4b96:	f1 01       	movw	r30, r2
    4b98:	ed 52       	subi	r30, 0x2D	; 45
    4b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9c:	00 81       	ld	r16, Z
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4b9e:	34 97       	sbiw	r30, 0x04	; 4
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    4ba0:	40 81       	ld	r20, Z
    4ba2:	51 81       	ldd	r21, Z+1	; 0x01
    4ba4:	62 81       	ldd	r22, Z+2	; 0x02
    4ba6:	73 81       	ldd	r23, Z+3	; 0x03
    4ba8:	20 2f       	mov	r18, r16
    4baa:	c1 01       	movw	r24, r2
    4bac:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <VL53L0X_calc_timeout_mclks>
    4bb0:	2b 01       	movw	r4, r22
    4bb2:	3c 01       	movw	r6, r24
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4bb4:	f1 01       	movw	r30, r2
    4bb6:	ec 52       	subi	r30, 0x2C	; 44
    4bb8:	ff 4f       	sbci	r31, 0xFF	; 255
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    4bba:	40 81       	ld	r20, Z
    4bbc:	51 81       	ldd	r21, Z+1	; 0x01
    4bbe:	62 81       	ldd	r22, Z+2	; 0x02
    4bc0:	73 81       	ldd	r23, Z+3	; 0x03
    4bc2:	34 96       	adiw	r30, 0x04	; 4
    4bc4:	20 81       	ld	r18, Z
    4bc6:	c1 01       	movw	r24, r2
    4bc8:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <VL53L0X_calc_timeout_mclks>
    4bcc:	4b 01       	movw	r8, r22
    4bce:	5c 01       	movw	r10, r24
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
    4bd0:	08 30       	cpi	r16, 0x08	; 8
    4bd2:	49 f4       	brne	.+18     	; 0x4be6 <VL53L0X_calc_sigma_estimate+0xec>
			vcselWidth = 2;
    4bd4:	22 e0       	ldi	r18, 0x02	; 2
    4bd6:	30 e0       	ldi	r19, 0x00	; 0
    4bd8:	40 e0       	ldi	r20, 0x00	; 0
    4bda:	50 e0       	ldi	r21, 0x00	; 0
    4bdc:	2d 8b       	std	Y+21, r18	; 0x15
    4bde:	3e 8b       	std	Y+22, r19	; 0x16
    4be0:	4f 8b       	std	Y+23, r20	; 0x17
    4be2:	58 8f       	std	Y+24, r21	; 0x18
    4be4:	08 c0       	rjmp	.+16     	; 0x4bf6 <VL53L0X_calc_sigma_estimate+0xfc>
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
    4be6:	83 e0       	ldi	r24, 0x03	; 3
    4be8:	90 e0       	ldi	r25, 0x00	; 0
    4bea:	a0 e0       	ldi	r26, 0x00	; 0
    4bec:	b0 e0       	ldi	r27, 0x00	; 0
    4bee:	8d 8b       	std	Y+21, r24	; 0x15
    4bf0:	9e 8b       	std	Y+22, r25	; 0x16
    4bf2:	af 8b       	std	Y+23, r26	; 0x17
    4bf4:	b8 8f       	std	Y+24, r27	; 0x18


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
    4bf6:	cd 80       	ldd	r12, Y+5	; 0x05
    4bf8:	de 80       	ldd	r13, Y+6	; 0x06
    4bfa:	ef 80       	ldd	r14, Y+7	; 0x07
    4bfc:	f8 84       	ldd	r15, Y+8	; 0x08
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
    4bfe:	a8 ee       	ldi	r26, 0xE8	; 232
    4c00:	b3 e0       	ldi	r27, 0x03	; 3
    4c02:	a7 01       	movw	r20, r14
    4c04:	96 01       	movw	r18, r12
    4c06:	a3 d6       	rcall	.+3398   	; 0x594e <__muluhisi3>
    4c08:	dc 01       	movw	r26, r24
    4c0a:	cb 01       	movw	r24, r22
    4c0c:	90 58       	subi	r25, 0x80	; 128
    4c0e:	af 4f       	sbci	r26, 0xFF	; 255
    4c10:	bf 4f       	sbci	r27, 0xFF	; 255
    4c12:	9d 01       	movw	r18, r26
    4c14:	44 27       	eor	r20, r20
    4c16:	55 27       	eor	r21, r21
    4c18:	2d 87       	std	Y+13, r18	; 0x0d
    4c1a:	3e 87       	std	Y+14, r19	; 0x0e
    4c1c:	4f 87       	std	Y+15, r20	; 0x0f
    4c1e:	58 8b       	std	Y+16, r21	; 0x10

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
    4c20:	89 81       	ldd	r24, Y+1	; 0x01
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	ab 81       	ldd	r26, Y+3	; 0x03
    4c26:	bc 81       	ldd	r27, Y+4	; 0x04
    4c28:	8b 8f       	std	Y+27, r24	; 0x1b
    4c2a:	9c 8f       	std	Y+28, r25	; 0x1c
    4c2c:	ad 8f       	std	Y+29, r26	; 0x1d
    4c2e:	be 8f       	std	Y+30, r27	; 0x1e
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
    4c30:	90 e8       	ldi	r25, 0x80	; 128
    4c32:	c9 0e       	add	r12, r25
    4c34:	d1 1c       	adc	r13, r1
    4c36:	e1 1c       	adc	r14, r1
    4c38:	f1 1c       	adc	r15, r1
    4c3a:	cd 2c       	mov	r12, r13
    4c3c:	de 2c       	mov	r13, r14
    4c3e:	ef 2c       	mov	r14, r15
    4c40:	ff 24       	eor	r15, r15

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
    4c42:	5e 2d       	mov	r21, r14
    4c44:	4d 2d       	mov	r20, r13
    4c46:	3c 2d       	mov	r19, r12
    4c48:	22 27       	eor	r18, r18
    4c4a:	29 a3       	std	Y+33, r18	; 0x21
    4c4c:	3a a3       	std	Y+34, r19	; 0x22
    4c4e:	4b a3       	std	Y+35, r20	; 0x23
    4c50:	5c a3       	std	Y+36, r21	; 0x24
    4c52:	2d 83       	std	Y+5, r18	; 0x05
    4c54:	3e 83       	std	Y+6, r19	; 0x06
    4c56:	4f 83       	std	Y+7, r20	; 0x07
    4c58:	58 87       	std	Y+8, r21	; 0x08
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
    4c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c5e:	af 85       	ldd	r26, Y+15	; 0x0f
    4c60:	b8 89       	ldd	r27, Y+16	; 0x10
    4c62:	89 2b       	or	r24, r25
    4c64:	8a 2b       	or	r24, r26
    4c66:	8b 2b       	or	r24, r27
    4c68:	c9 f4       	brne	.+50     	; 0x4c9c <VL53L0X_calc_sigma_estimate+0x1a2>
		*pSigmaEstimate = cSigmaEstMax;
    4c6a:	8e ea       	ldi	r24, 0xAE	; 174
    4c6c:	97 e8       	ldi	r25, 0x87	; 135
    4c6e:	af e8       	ldi	r26, 0x8F	; 143
    4c70:	b2 e0       	ldi	r27, 0x02	; 2
    4c72:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4c74:	f8 a1       	ldd	r31, Y+32	; 0x20
    4c76:	80 83       	st	Z, r24
    4c78:	91 83       	std	Z+1, r25	; 0x01
    4c7a:	a2 83       	std	Z+2, r26	; 0x02
    4c7c:	b3 83       	std	Z+3, r27	; 0x03
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
    4c7e:	f1 01       	movw	r30, r2
    4c80:	e6 5d       	subi	r30, 0xD6	; 214
    4c82:	fe 4f       	sbci	r31, 0xFE	; 254
    4c84:	80 83       	st	Z, r24
    4c86:	91 83       	std	Z+1, r25	; 0x01
    4c88:	a2 83       	std	Z+2, r26	; 0x02
    4c8a:	b3 83       	std	Z+3, r27	; 0x03
		*pDmax_mm = 0;
    4c8c:	a9 8d       	ldd	r26, Y+25	; 0x19
    4c8e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4c90:	1d 92       	st	X+, r1
    4c92:	1d 92       	st	X+, r1
    4c94:	1d 92       	st	X+, r1
    4c96:	1c 92       	st	X, r1
    4c98:	13 97       	sbiw	r26, 0x03	; 3
    4c9a:	cc c1       	rjmp	.+920    	; 0x5034 <VL53L0X_calc_sigma_estimate+0x53a>
			vcselWidth = 2;


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    4c9c:	84 0c       	add	r8, r4
    4c9e:	95 1c       	adc	r9, r5
    4ca0:	a6 1c       	adc	r10, r6
    4ca2:	b7 1c       	adc	r11, r7
    4ca4:	a5 01       	movw	r20, r10
    4ca6:	94 01       	movw	r18, r8
    4ca8:	01 2e       	mov	r0, r17
    4caa:	1b e0       	ldi	r17, 0x0B	; 11
    4cac:	22 0f       	add	r18, r18
    4cae:	33 1f       	adc	r19, r19
    4cb0:	44 1f       	adc	r20, r20
    4cb2:	55 1f       	adc	r21, r21
    4cb4:	1a 95       	dec	r17
    4cb6:	d1 f7       	brne	.-12     	; 0x4cac <VL53L0X_calc_sigma_estimate+0x1b2>
    4cb8:	10 2d       	mov	r17, r0
    4cba:	6d 89       	ldd	r22, Y+21	; 0x15
    4cbc:	7e 89       	ldd	r23, Y+22	; 0x16
    4cbe:	8f 89       	ldd	r24, Y+23	; 0x17
    4cc0:	98 8d       	ldd	r25, Y+24	; 0x18
    4cc2:	05 d6       	rcall	.+3082   	; 0x58ce <__mulsi3>
    4cc4:	6c 50       	subi	r22, 0x0C	; 12
    4cc6:	7e 4f       	sbci	r23, 0xFE	; 254
    4cc8:	8f 4f       	sbci	r24, 0xFF	; 255
    4cca:	9f 4f       	sbci	r25, 0xFF	; 255
    4ccc:	0f 2e       	mov	r0, r31
    4cce:	f8 ee       	ldi	r31, 0xE8	; 232
    4cd0:	8f 2e       	mov	r8, r31
    4cd2:	f3 e0       	ldi	r31, 0x03	; 3
    4cd4:	9f 2e       	mov	r9, r31
    4cd6:	a1 2c       	mov	r10, r1
    4cd8:	b1 2c       	mov	r11, r1
    4cda:	f0 2d       	mov	r31, r0
    4cdc:	a5 01       	movw	r20, r10
    4cde:	94 01       	movw	r18, r8
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    4ce0:	05 d6       	rcall	.+3082   	; 0x58ec <__udivmodsi4>
    4ce2:	a7 e7       	ldi	r26, 0x77	; 119
    4ce4:	b6 e0       	ldi	r27, 0x06	; 6
    4ce6:	33 d6       	rcall	.+3174   	; 0x594e <__muluhisi3>
    4ce8:	6c 50       	subi	r22, 0x0C	; 12
    4cea:	7e 4f       	sbci	r23, 0xFE	; 254
    4cec:	8f 4f       	sbci	r24, 0xFF	; 255
    4cee:	9f 4f       	sbci	r25, 0xFF	; 255
    4cf0:	a5 01       	movw	r20, r10
    4cf2:	94 01       	movw	r18, r8
    4cf4:	fb d5       	rcall	.+3062   	; 0x58ec <__udivmodsi4>
    4cf6:	2d 8b       	std	Y+21, r18	; 0x15
    4cf8:	39 a7       	std	Y+41, r19	; 0x29
    4cfa:	04 2f       	mov	r16, r20
		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
    4cfc:	15 2f       	mov	r17, r21
    4cfe:	c7 01       	movw	r24, r14
    4d00:	b6 01       	movw	r22, r12
    4d02:	e5 d5       	rcall	.+3018   	; 0x58ce <__mulsi3>
    4d04:	dc 01       	movw	r26, r24
    4d06:	cb 01       	movw	r24, r22
    4d08:	80 58       	subi	r24, 0x80	; 128
    4d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    4d0c:	af 4f       	sbci	r26, 0xFF	; 255
    4d0e:	bf 4f       	sbci	r27, 0xFF	; 255
    4d10:	49 2e       	mov	r4, r25
    4d12:	5a 2e       	mov	r5, r26
    4d14:	6b 2e       	mov	r6, r27
    4d16:	77 24       	eor	r7, r7
	if (peakSignalRate_kcps == 0) {
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
	} else {
		if (vcselTotalEventsRtn < 1)
    4d18:	41 14       	cp	r4, r1
    4d1a:	51 04       	cpc	r5, r1
    4d1c:	61 04       	cpc	r6, r1
    4d1e:	71 04       	cpc	r7, r1
    4d20:	21 f4       	brne	.+8      	; 0x4d2a <VL53L0X_calc_sigma_estimate+0x230>
			vcselTotalEventsRtn = 1;
    4d22:	41 2c       	mov	r4, r1
    4d24:	51 2c       	mov	r5, r1
    4d26:	32 01       	movw	r6, r4
    4d28:	43 94       	inc	r4
    4d2a:	a8 ee       	ldi	r26, 0xE8	; 232
    4d2c:	b3 e0       	ldi	r27, 0x03	; 3
    4d2e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4d30:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4d32:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4d34:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4d36:	0b d6       	rcall	.+3094   	; 0x594e <__muluhisi3>
    4d38:	4b 01       	movw	r8, r22
    4d3a:	5c 01       	movw	r10, r24
    4d3c:	61 30       	cpi	r22, 0x01	; 1
    4d3e:	71 05       	cpc	r23, r1
    4d40:	82 43       	sbci	r24, 0x32	; 50
    4d42:	91 05       	cpc	r25, r1
    4d44:	38 f0       	brcs	.+14     	; 0x4d54 <VL53L0X_calc_sigma_estimate+0x25a>
    4d46:	0f 2e       	mov	r0, r31
    4d48:	81 2c       	mov	r8, r1
    4d4a:	91 2c       	mov	r9, r1
    4d4c:	f2 e3       	ldi	r31, 0x32	; 50
    4d4e:	af 2e       	mov	r10, r31
    4d50:	b1 2c       	mov	r11, r1
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
    4d52:	f0 2d       	mov	r31, r0
    4d54:	a8 ee       	ldi	r26, 0xE8	; 232
    4d56:	b3 e0       	ldi	r27, 0x03	; 3
    4d58:	29 89       	ldd	r18, Y+17	; 0x11
    4d5a:	3a 89       	ldd	r19, Y+18	; 0x12
    4d5c:	4b 89       	ldd	r20, Y+19	; 0x13
    4d5e:	5c 89       	ldd	r21, Y+20	; 0x14
    4d60:	f6 d5       	rcall	.+3052   	; 0x594e <__muluhisi3>
    4d62:	66 27       	eor	r22, r22
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
    4d64:	77 27       	eor	r23, r23
    4d66:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d68:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d6a:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d6c:	58 89       	ldd	r21, Y+16	; 0x10
    4d6e:	be d5       	rcall	.+2940   	; 0x58ec <__udivmodsi4>
    4d70:	27 36       	cpi	r18, 0x67	; 103
    4d72:	e6 e6       	ldi	r30, 0x66	; 102
    4d74:	3e 07       	cpc	r19, r30
    4d76:	4e 07       	cpc	r20, r30
    4d78:	51 05       	cpc	r21, r1
    4d7a:	20 f0       	brcs	.+8      	; 0x4d84 <VL53L0X_calc_sigma_estimate+0x28a>
    4d7c:	26 e6       	ldi	r18, 0x66	; 102
    4d7e:	36 e6       	ldi	r19, 0x66	; 102
    4d80:	46 e6       	ldi	r20, 0x66	; 102
    4d82:	50 e0       	ldi	r21, 0x00	; 0
    4d84:	a8 e5       	ldi	r26, 0x58	; 88
    4d86:	b2 e0       	ldi	r27, 0x02	; 2
    4d88:	e2 d5       	rcall	.+3012   	; 0x594e <__muluhisi3>
    4d8a:	69 8b       	std	Y+17, r22	; 0x11
    4d8c:	7a 8b       	std	Y+18, r23	; 0x12
    4d8e:	8b 8b       	std	Y+19, r24	; 0x13
    4d90:	9c 8b       	std	Y+20, r25	; 0x14

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
    4d92:	d3 01       	movw	r26, r6
    4d94:	c2 01       	movw	r24, r4
    4d96:	88 0f       	add	r24, r24
    4d98:	99 1f       	adc	r25, r25
    4d9a:	aa 1f       	adc	r26, r26
    4d9c:	bb 1f       	adc	r27, r27
    4d9e:	84 0d       	add	r24, r4
    4da0:	95 1d       	adc	r25, r5
    4da2:	a6 1d       	adc	r26, r6
    4da4:	b7 1d       	adc	r27, r7
    4da6:	bc 01       	movw	r22, r24
    4da8:	cd 01       	movw	r24, r26
    4daa:	66 0f       	add	r22, r22
    4dac:	77 1f       	adc	r23, r23
    4dae:	88 1f       	adc	r24, r24
    4db0:	99 1f       	adc	r25, r25
    4db2:	66 0f       	add	r22, r22
    4db4:	77 1f       	adc	r23, r23
    4db6:	88 1f       	adc	r24, r24
    4db8:	99 1f       	adc	r25, r25
    4dba:	0e 94 50 19 	call	0x32a0	; 0x32a0 <VL53L0X_isqrt>
    4dbe:	6b 8f       	std	Y+27, r22	; 0x1b
    4dc0:	7c 8f       	std	Y+28, r23	; 0x1c
    4dc2:	8d 8f       	std	Y+29, r24	; 0x1d
    4dc4:	9e 8f       	std	Y+30, r25	; 0x1e
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
    4dc6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4dc8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4dca:	4f 85       	ldd	r20, Y+15	; 0x0f
    4dcc:	58 89       	ldd	r21, Y+16	; 0x10
    4dce:	79 01       	movw	r14, r18
    4dd0:	dd 24       	eor	r13, r13
    4dd2:	cc 24       	eor	r12, r12
    4dd4:	d7 01       	movw	r26, r14
    4dd6:	c6 01       	movw	r24, r12
    4dd8:	88 19       	sub	r24, r8
    4dda:	99 09       	sbc	r25, r9
    4ddc:	aa 09       	sbc	r26, r10
    4dde:	bb 09       	sbc	r27, r11
    4de0:	bc 01       	movw	r22, r24
    4de2:	cd 01       	movw	r24, r26
    4de4:	6c 50       	subi	r22, 0x0C	; 12
    4de6:	7e 4f       	sbci	r23, 0xFE	; 254
    4de8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dea:	9f 4f       	sbci	r25, 0xFF	; 255
    4dec:	28 ee       	ldi	r18, 0xE8	; 232
    4dee:	33 e0       	ldi	r19, 0x03	; 3
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	50 e0       	ldi	r21, 0x00	; 0
    4df4:	7b d5       	rcall	.+2806   	; 0x58ec <__udivmodsi4>
		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
    4df6:	b4 2f       	mov	r27, r20
    4df8:	a3 2f       	mov	r26, r19
    4dfa:	92 2f       	mov	r25, r18
    4dfc:	88 27       	eor	r24, r24
    4dfe:	8d 87       	std	Y+13, r24	; 0x0d
    4e00:	9e 87       	std	Y+14, r25	; 0x0e
    4e02:	af 87       	std	Y+15, r26	; 0x0f
    4e04:	b8 8b       	std	Y+16, r27	; 0x10
    4e06:	94 ef       	ldi	r25, 0xF4	; 244
    4e08:	89 0e       	add	r8, r25
    4e0a:	91 e0       	ldi	r25, 0x01	; 1
    4e0c:	99 1e       	adc	r9, r25
    4e0e:	a1 1c       	adc	r10, r1
    4e10:	b1 1c       	adc	r11, r1
    4e12:	c5 01       	movw	r24, r10
    4e14:	b4 01       	movw	r22, r8
    4e16:	6c 0d       	add	r22, r12
    4e18:	7d 1d       	adc	r23, r13
    4e1a:	8e 1d       	adc	r24, r14
    4e1c:	9f 1d       	adc	r25, r15
    4e1e:	28 ee       	ldi	r18, 0xE8	; 232
    4e20:	33 e0       	ldi	r19, 0x03	; 3
    4e22:	40 e0       	ldi	r20, 0x00	; 0
    4e24:	50 e0       	ldi	r21, 0x00	; 0
    4e26:	62 d5       	rcall	.+2756   	; 0x58ec <__udivmodsi4>
    4e28:	6d 85       	ldd	r22, Y+13	; 0x0d
    4e2a:	7e 85       	ldd	r23, Y+14	; 0x0e
    4e2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e2e:	98 89       	ldd	r25, Y+16	; 0x10
    4e30:	5d d5       	rcall	.+2746   	; 0x58ec <__udivmodsi4>
    4e32:	69 01       	movw	r12, r18
    4e34:	33 23       	and	r19, r19
    4e36:	24 f4       	brge	.+8      	; 0x4e40 <VL53L0X_calc_sigma_estimate+0x346>
    4e38:	cc 24       	eor	r12, r12
    4e3a:	dd 24       	eor	r13, r13
    4e3c:	c2 1a       	sub	r12, r18
    4e3e:	d3 0a       	sbc	r13, r19
    4e40:	0d 2c       	mov	r0, r13
    4e42:	00 0c       	add	r0, r0

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
    4e44:	ee 08       	sbc	r14, r14
    4e46:	ff 08       	sbc	r15, r15
    4e48:	e9 85       	ldd	r30, Y+9	; 0x09
    4e4a:	fa 85       	ldd	r31, Y+10	; 0x0a
    4e4c:	a0 85       	ldd	r26, Z+8	; 0x08
    4e4e:	b1 85       	ldd	r27, Z+9	; 0x09
    4e50:	2a e9       	ldi	r18, 0x9A	; 154
    4e52:	39 e9       	ldi	r19, 0x99	; 153
    4e54:	46 e0       	ldi	r20, 0x06	; 6
    4e56:	50 e0       	ldi	r21, 0x00	; 0
    4e58:	7a d5       	rcall	.+2804   	; 0x594e <__muluhisi3>
    4e5a:	2c e5       	ldi	r18, 0x5C	; 92
    4e5c:	32 e1       	ldi	r19, 0x12	; 18
    4e5e:	40 e0       	ldi	r20, 0x00	; 0
    4e60:	50 e0       	ldi	r21, 0x00	; 0
    4e62:	44 d5       	rcall	.+2696   	; 0x58ec <__udivmodsi4>
    4e64:	ca 01       	movw	r24, r20
		 * exceeded.
		 */
		pwMult *= (((uint32_t) 1 << 16) - xTalkCorrection);

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
    4e66:	b9 01       	movw	r22, r18
    4e68:	fe 2c       	mov	r15, r14
    4e6a:	ed 2c       	mov	r14, r13
    4e6c:	dc 2c       	mov	r13, r12
    4e6e:	cc 24       	eor	r12, r12
    4e70:	81 2c       	mov	r8, r1
    4e72:	91 2c       	mov	r9, r1
    4e74:	54 01       	movw	r10, r8
    4e76:	a3 94       	inc	r10
    4e78:	a5 01       	movw	r20, r10
    4e7a:	94 01       	movw	r18, r8
    4e7c:	2c 19       	sub	r18, r12
    4e7e:	3d 09       	sbc	r19, r13
    4e80:	4e 09       	sbc	r20, r14
    4e82:	5f 09       	sbc	r21, r15
    4e84:	24 d5       	rcall	.+2632   	; 0x58ce <__mulsi3>
    4e86:	dc 01       	movw	r26, r24
    4e88:	cb 01       	movw	r24, r22
    4e8a:	90 58       	subi	r25, 0x80	; 128
    4e8c:	af 4f       	sbci	r26, 0xFF	; 255
    4e8e:	bf 4f       	sbci	r27, 0xFF	; 255
    4e90:	cd 01       	movw	r24, r26
    4e92:	aa 27       	eor	r26, r26

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += ((uint32_t) 1 << 16);
    4e94:	bb 27       	eor	r27, r27
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
    4e96:	11 96       	adiw	r26, 0x01	; 1
    4e98:	bc 01       	movw	r22, r24
    4e9a:	cd 01       	movw	r24, r26
    4e9c:	96 95       	lsr	r25
    4e9e:	87 95       	ror	r24
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
    4ea0:	77 95       	ror	r23
    4ea2:	67 95       	ror	r22
    4ea4:	9b 01       	movw	r18, r22

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
    4ea6:	ac 01       	movw	r20, r24
    4ea8:	12 d5       	rcall	.+2596   	; 0x58ce <__mulsi3>
    4eaa:	6b 01       	movw	r12, r22
    4eac:	7c 01       	movw	r14, r24
    4eae:	0b 2e       	mov	r0, r27
    4eb0:	be e0       	ldi	r27, 0x0E	; 14
    4eb2:	f6 94       	lsr	r15
    4eb4:	e7 94       	ror	r14
    4eb6:	d7 94       	ror	r13
    4eb8:	c7 94       	ror	r12
    4eba:	ba 95       	dec	r27

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
    4ebc:	d1 f7       	brne	.-12     	; 0x4eb2 <VL53L0X_calc_sigma_estimate+0x3b8>
    4ebe:	b0 2d       	mov	r27, r0
    4ec0:	a0 e2       	ldi	r26, 0x20	; 32
    4ec2:	b3 e0       	ldi	r27, 0x03	; 3
    4ec4:	a7 01       	movw	r20, r14
    4ec6:	96 01       	movw	r18, r12
    4ec8:	42 d5       	rcall	.+2692   	; 0x594e <__muluhisi3>
    4eca:	dc 01       	movw	r26, r24
    4ecc:	cb 01       	movw	r24, r22
    4ece:	90 58       	subi	r25, 0x80	; 128
    4ed0:	af 4f       	sbci	r26, 0xFF	; 255
    4ed2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ed4:	bd 01       	movw	r22, r26
		sqr1 *= sqr1;

		sqr2 = sigmaEstimateP2;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
    4ed6:	88 27       	eor	r24, r24
    4ed8:	99 27       	eor	r25, r25
    4eda:	89 88       	ldd	r8, Y+17	; 0x11
    4edc:	9a 88       	ldd	r9, Y+18	; 0x12
    4ede:	ab 88       	ldd	r10, Y+19	; 0x13
    4ee0:	bc 88       	ldd	r11, Y+20	; 0x14
    4ee2:	f0 e8       	ldi	r31, 0x80	; 128
    4ee4:	9f 0e       	add	r9, r31
    4ee6:	a1 1c       	adc	r10, r1
    4ee8:	b1 1c       	adc	r11, r1

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
    4eea:	45 01       	movw	r8, r10
    4eec:	aa 24       	eor	r10, r10
    4eee:	bb 24       	eor	r11, r11
    4ef0:	9b 01       	movw	r18, r22
    4ef2:	ac 01       	movw	r20, r24
    4ef4:	ec d4       	rcall	.+2520   	; 0x58ce <__mulsi3>
    4ef6:	69 87       	std	Y+9, r22	; 0x09
    4ef8:	7a 87       	std	Y+10, r23	; 0x0a
    4efa:	8b 87       	std	Y+11, r24	; 0x0b
    4efc:	9c 87       	std	Y+12, r25	; 0x0c
    4efe:	a5 01       	movw	r20, r10
    4f00:	94 01       	movw	r18, r8
    4f02:	c5 01       	movw	r24, r10
    4f04:	b4 01       	movw	r22, r8
    4f06:	e3 d4       	rcall	.+2502   	; 0x58ce <__mulsi3>
    4f08:	29 85       	ldd	r18, Y+9	; 0x09
    4f0a:	3a 85       	ldd	r19, Y+10	; 0x0a
    4f0c:	4b 85       	ldd	r20, Y+11	; 0x0b
    4f0e:	5c 85       	ldd	r21, Y+12	; 0x0c
    4f10:	62 0f       	add	r22, r18
    4f12:	73 1f       	adc	r23, r19
    4f14:	84 1f       	adc	r24, r20
    4f16:	95 1f       	adc	r25, r21
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
    4f18:	0e 94 50 19 	call	0x32a0	; 0x32a0 <VL53L0X_isqrt>
    4f1c:	db 01       	movw	r26, r22
    4f1e:	99 27       	eor	r25, r25
    4f20:	88 27       	eor	r24, r24
    4f22:	bc 01       	movw	r22, r24
    4f24:	cd 01       	movw	r24, r26
    4f26:	6e 5c       	subi	r22, 0xCE	; 206
    4f28:	7f 4f       	sbci	r23, 0xFF	; 255
    4f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    4f2c:	9f 4f       	sbci	r25, 0xFF	; 255
    4f2e:	24 e6       	ldi	r18, 0x64	; 100
    4f30:	30 e0       	ldi	r19, 0x00	; 0
    4f32:	40 e0       	ldi	r20, 0x00	; 0
    4f34:	50 e0       	ldi	r21, 0x00	; 0
    4f36:	da d4       	rcall	.+2484   	; 0x58ec <__udivmodsi4>
    4f38:	ca 01       	movw	r24, r20
    4f3a:	b9 01       	movw	r22, r18
    4f3c:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4f3e:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4f40:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4f42:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4f44:	22 0f       	add	r18, r18
    4f46:	33 1f       	adc	r19, r19
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
    4f48:	44 1f       	adc	r20, r20
    4f4a:	55 1f       	adc	r21, r21
    4f4c:	cf d4       	rcall	.+2462   	; 0x58ec <__udivmodsi4>

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
    4f4e:	a5 eb       	ldi	r26, 0xB5	; 181
    4f50:	bb e0       	ldi	r27, 0x0B	; 11
    4f52:	fd d4       	rcall	.+2554   	; 0x594e <__muluhisi3>
    4f54:	68 57       	subi	r22, 0x78	; 120
    4f56:	7c 4e       	sbci	r23, 0xEC	; 236
    4f58:	8f 4f       	sbci	r24, 0xFF	; 255
    4f5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f5c:	20 e1       	ldi	r18, 0x10	; 16
    4f5e:	37 e2       	ldi	r19, 0x27	; 39
    4f60:	40 e0       	ldi	r20, 0x00	; 0
    4f62:	50 e0       	ldi	r21, 0x00	; 0
    4f64:	c3 d4       	rcall	.+2438   	; 0x58ec <__udivmodsi4>
    4f66:	ca 01       	movw	r24, r20
    4f68:	b9 01       	movw	r22, r18
    4f6a:	61 30       	cpi	r22, 0x01	; 1
    4f6c:	30 ef       	ldi	r19, 0xF0	; 240
    4f6e:	73 07       	cpc	r23, r19
    4f70:	81 05       	cpc	r24, r1
    4f72:	91 05       	cpc	r25, r1
    4f74:	20 f0       	brcs	.+8      	; 0x4f7e <VL53L0X_calc_sigma_estimate+0x484>
    4f76:	60 e0       	ldi	r22, 0x00	; 0
		sqr1 = sigmaEstRtn * sigmaEstRtn;
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
    4f78:	70 ef       	ldi	r23, 0xF0	; 240
    4f7a:	80 e0       	ldi	r24, 0x00	; 0
    4f7c:	90 e0       	ldi	r25, 0x00	; 0
    4f7e:	9b 01       	movw	r18, r22
    4f80:	ac 01       	movw	r20, r24
    4f82:	a5 d4       	rcall	.+2378   	; 0x58ce <__mulsi3>
    4f84:	6c 5f       	subi	r22, 0xFC	; 252
    4f86:	7e 4e       	sbci	r23, 0xEE	; 238
    4f88:	8f 4f       	sbci	r24, 0xFF	; 255
    4f8a:	9f 4f       	sbci	r25, 0xFF	; 255
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
    4f8c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <VL53L0X_isqrt>
    4f90:	45 28       	or	r4, r5
    4f92:	46 28       	or	r4, r6
    4f94:	47 28       	or	r4, r7
    4f96:	91 f0       	breq	.+36     	; 0x4fbc <VL53L0X_calc_sigma_estimate+0x4c2>
    4f98:	a8 ee       	ldi	r26, 0xE8	; 232
    4f9a:	b3 e0       	ldi	r27, 0x03	; 3
    4f9c:	9b 01       	movw	r18, r22
    4f9e:	ac 01       	movw	r20, r24
    4fa0:	d6 d4       	rcall	.+2476   	; 0x594e <__muluhisi3>
    4fa2:	6f 3a       	cpi	r22, 0xAF	; 175
    4fa4:	47 e8       	ldi	r20, 0x87	; 135
    4fa6:	74 07       	cpc	r23, r20
    4fa8:	4f e8       	ldi	r20, 0x8F	; 143
    4faa:	84 07       	cpc	r24, r20
    4fac:	42 e0       	ldi	r20, 0x02	; 2
    4fae:	94 07       	cpc	r25, r20
    4fb0:	48 f0       	brcs	.+18     	; 0x4fc4 <VL53L0X_calc_sigma_estimate+0x4ca>
    4fb2:	6e ea       	ldi	r22, 0xAE	; 174
    4fb4:	77 e8       	ldi	r23, 0x87	; 135
    4fb6:	8f e8       	ldi	r24, 0x8F	; 143
    4fb8:	92 e0       	ldi	r25, 0x02	; 2
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
    4fba:	04 c0       	rjmp	.+8      	; 0x4fc4 <VL53L0X_calc_sigma_estimate+0x4ca>
    4fbc:	6e ea       	ldi	r22, 0xAE	; 174
    4fbe:	77 e8       	ldi	r23, 0x87	; 135
    4fc0:	8f e8       	ldi	r24, 0x8F	; 143
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
    4fc2:	92 e0       	ldi	r25, 0x02	; 2
    4fc4:	af 8d       	ldd	r26, Y+31	; 0x1f
    4fc6:	b8 a1       	ldd	r27, Y+32	; 0x20
    4fc8:	6d 93       	st	X+, r22
    4fca:	7d 93       	st	X+, r23
    4fcc:	8d 93       	st	X+, r24
    4fce:	9c 93       	st	X, r25
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
    4fd0:	13 97       	sbiw	r26, 0x03	; 3
    4fd2:	f1 01       	movw	r30, r2
    4fd4:	e6 5d       	subi	r30, 0xD6	; 214
    4fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    4fd8:	60 83       	st	Z, r22
    4fda:	71 83       	std	Z+1, r23	; 0x01
    4fdc:	82 83       	std	Z+2, r24	; 0x02
		Status = VL53L0X_calc_dmax(
    4fde:	93 83       	std	Z+3, r25	; 0x03
    4fe0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4fe2:	bf 93       	push	r27
    4fe4:	e9 8d       	ldd	r30, Y+25	; 0x19
    4fe6:	ef 93       	push	r30
    4fe8:	1f 93       	push	r17
    4fea:	0f 93       	push	r16
    4fec:	f9 a5       	ldd	r31, Y+41	; 0x29
    4fee:	ff 93       	push	r31
    4ff0:	2d 89       	ldd	r18, Y+21	; 0x15
    4ff2:	2f 93       	push	r18
    4ff4:	3c 89       	ldd	r19, Y+20	; 0x14
    4ff6:	3f 93       	push	r19
    4ff8:	4b 89       	ldd	r20, Y+19	; 0x13
    4ffa:	4f 93       	push	r20
    4ffc:	5a 89       	ldd	r21, Y+18	; 0x12
    4ffe:	5f 93       	push	r21
    5000:	89 89       	ldd	r24, Y+17	; 0x11
    5002:	8f 93       	push	r24
    5004:	0f 2e       	mov	r0, r31
    5006:	f0 e2       	ldi	r31, 0x20	; 32
    5008:	8f 2e       	mov	r8, r31
    500a:	f3 e0       	ldi	r31, 0x03	; 3
    500c:	9f 2e       	mov	r9, r31
    500e:	a1 2c       	mov	r10, r1
    5010:	b1 2c       	mov	r11, r1
    5012:	f0 2d       	mov	r31, r0
    5014:	0d a1       	ldd	r16, Y+37	; 0x25
    5016:	1e a1       	ldd	r17, Y+38	; 0x26
    5018:	2f a1       	ldd	r18, Y+39	; 0x27
    501a:	38 a5       	ldd	r19, Y+40	; 0x28
    501c:	49 a1       	ldd	r20, Y+33	; 0x21
    501e:	5a a1       	ldd	r21, Y+34	; 0x22
    5020:	6b a1       	ldd	r22, Y+35	; 0x23
    5022:	7c a1       	ldd	r23, Y+36	; 0x24
    5024:	c1 01       	movw	r24, r2
    5026:	88 db       	rcall	.-2288   	; 0x4738 <VL53L0X_calc_dmax>
    5028:	18 2f       	mov	r17, r24
    502a:	0f b6       	in	r0, 0x3f	; 63
    502c:	f8 94       	cli
    502e:	de bf       	out	0x3e, r29	; 62
    5030:	0f be       	out	0x3f, r0	; 63
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    5032:	cd bf       	out	0x3d, r28	; 61
    5034:	81 2f       	mov	r24, r17
    5036:	a9 96       	adiw	r28, 0x29	; 41
    5038:	0f b6       	in	r0, 0x3f	; 63
    503a:	f8 94       	cli
    503c:	de bf       	out	0x3e, r29	; 62
    503e:	0f be       	out	0x3f, r0	; 63
    5040:	cd bf       	out	0x3d, r28	; 61
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	1f 91       	pop	r17
    5048:	0f 91       	pop	r16
    504a:	ff 90       	pop	r15
    504c:	ef 90       	pop	r14
    504e:	df 90       	pop	r13
    5050:	cf 90       	pop	r12
    5052:	bf 90       	pop	r11
    5054:	af 90       	pop	r10
    5056:	9f 90       	pop	r9
    5058:	8f 90       	pop	r8
    505a:	7f 90       	pop	r7
    505c:	6f 90       	pop	r6
    505e:	5f 90       	pop	r5
    5060:	4f 90       	pop	r4
    5062:	3f 90       	pop	r3
    5064:	2f 90       	pop	r2
    5066:	08 95       	ret

00005068 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
    5068:	2f 92       	push	r2
    506a:	3f 92       	push	r3
    506c:	4f 92       	push	r4
    506e:	5f 92       	push	r5
    5070:	6f 92       	push	r6
    5072:	7f 92       	push	r7
    5074:	8f 92       	push	r8
    5076:	9f 92       	push	r9
    5078:	af 92       	push	r10
    507a:	bf 92       	push	r11
    507c:	cf 92       	push	r12
    507e:	df 92       	push	r13
    5080:	ef 92       	push	r14
    5082:	ff 92       	push	r15
    5084:	0f 93       	push	r16
    5086:	1f 93       	push	r17
    5088:	cf 93       	push	r28
    508a:	df 93       	push	r29
    508c:	cd b7       	in	r28, 0x3d	; 61
    508e:	de b7       	in	r29, 0x3e	; 62
    5090:	ab 97       	sbiw	r28, 0x2b	; 43
    5092:	0f b6       	in	r0, 0x3f	; 63
    5094:	f8 94       	cli
    5096:	de bf       	out	0x3e, r29	; 62
    5098:	0f be       	out	0x3f, r0	; 63
    509a:	cd bf       	out	0x3d, r28	; 61
    509c:	5c 01       	movw	r10, r24
    509e:	28 a3       	std	Y+32, r18	; 0x20
    50a0:	39 a3       	std	Y+33, r19	; 0x21
    50a2:	4a a3       	std	Y+34, r20	; 0x22
    50a4:	5b a3       	std	Y+35, r21	; 0x23
    50a6:	48 01       	movw	r8, r16
    50a8:	f9 a6       	std	Y+41, r15	; 0x29
    50aa:	e8 a6       	std	Y+40, r14	; 0x28
    50ac:	db a6       	std	Y+43, r13	; 0x2b
    50ae:	ca a6       	std	Y+42, r12	; 0x2a
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
    50b0:	19 82       	std	Y+1, r1	; 0x01
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
    50b2:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t SignalRefClipLimitCheckEnable = 0;
    50b4:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
    50b6:	1c 82       	std	Y+4, r1	; 0x04
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
    50b8:	1e 8a       	std	Y+22, r1	; 0x16
    50ba:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
    50bc:	1f 8a       	std	Y+23, r1	; 0x17
    50be:	18 8e       	std	Y+24, r1	; 0x18
    50c0:	19 8e       	std	Y+25, r1	; 0x19
    50c2:	1a 8e       	std	Y+26, r1	; 0x1a
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
    50c4:	68 77       	andi	r22, 0x78	; 120
    50c6:	06 2f       	mov	r16, r22
    50c8:	10 e0       	ldi	r17, 0x00	; 0
    50ca:	15 95       	asr	r17
    50cc:	07 95       	ror	r16
    50ce:	15 95       	asr	r17
    50d0:	07 95       	ror	r16
    50d2:	15 95       	asr	r17
    50d4:	07 95       	ror	r16
    50d6:	30 2e       	mov	r3, r16

	if (DeviceRangeStatusInternal == 0 ||
    50d8:	00 23       	and	r16, r16
    50da:	61 f0       	breq	.+24     	; 0x50f4 <VL53L0X_get_pal_range_status+0x8c>
    50dc:	80 2f       	mov	r24, r16
    50de:	8d 7f       	andi	r24, 0xFD	; 253
    50e0:	85 30       	cpi	r24, 0x05	; 5
    50e2:	59 f0       	breq	.+22     	; 0x50fa <VL53L0X_get_pal_range_status+0x92>
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
    50e4:	21 e0       	ldi	r18, 0x01	; 1
    50e6:	2f 8f       	std	Y+31, r18	; 0x1f
    50e8:	84 ef       	ldi	r24, 0xF4	; 244
    50ea:	80 0f       	add	r24, r16
    50ec:	84 30       	cpi	r24, 0x04	; 4
    50ee:	38 f0       	brcs	.+14     	; 0x50fe <VL53L0X_get_pal_range_status+0x96>
    50f0:	1f 8e       	std	Y+31, r1	; 0x1f
    50f2:	05 c0       	rjmp	.+10     	; 0x50fe <VL53L0X_get_pal_range_status+0x96>
    50f4:	31 e0       	ldi	r19, 0x01	; 1
    50f6:	3f 8f       	std	Y+31, r19	; 0x1f
    50f8:	02 c0       	rjmp	.+4      	; 0x50fe <VL53L0X_get_pal_range_status+0x96>
    50fa:	41 e0       	ldi	r20, 0x01	; 1
    50fc:	4f 8f       	std	Y+31, r20	; 0x1f
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    50fe:	41 e0       	ldi	r20, 0x01	; 1
    5100:	6f ef       	ldi	r22, 0xFF	; 255
    5102:	c5 01       	movw	r24, r10
    5104:	50 d3       	rcall	.+1696   	; 0x57a6 <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    5106:	81 11       	cpse	r24, r1
    5108:	5a c1       	rjmp	.+692    	; 0x53be <VL53L0X_get_pal_range_status+0x356>
		Status = VL53L0X_RdWord(Dev,
    510a:	ae 01       	movw	r20, r28
    510c:	4b 5e       	subi	r20, 0xEB	; 235
    510e:	5f 4f       	sbci	r21, 0xFF	; 255
    5110:	66 eb       	ldi	r22, 0xB6	; 182
    5112:	c5 01       	movw	r24, r10
    5114:	96 d3       	rcall	.+1836   	; 0x5842 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    5116:	9d 89       	ldd	r25, Y+21	; 0x15
    5118:	20 e0       	ldi	r18, 0x00	; 0
    511a:	30 e0       	ldi	r19, 0x00	; 0
    511c:	39 2f       	mov	r19, r25
    511e:	33 0f       	add	r19, r19
    5120:	29 01       	movw	r4, r18
    5122:	61 2c       	mov	r6, r1
    5124:	71 2c       	mov	r7, r1

	if (Status == VL53L0X_ERROR_NONE)
    5126:	81 11       	cpse	r24, r1
    5128:	5a c1       	rjmp	.+692    	; 0x53de <VL53L0X_get_pal_range_status+0x376>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    512a:	40 e0       	ldi	r20, 0x00	; 0
    512c:	6f ef       	ldi	r22, 0xFF	; 255
    512e:	c5 01       	movw	r24, r10
    5130:	3a d3       	rcall	.+1652   	; 0x57a6 <VL53L0X_WrByte>

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    5132:	f5 01       	movw	r30, r10
    5134:	ee 5c       	subi	r30, 0xCE	; 206
    5136:	fe 4f       	sbci	r31, 0xFE	; 254
    5138:	40 82       	st	Z, r4
    513a:	51 82       	std	Z+1, r5	; 0x01
    513c:	62 82       	std	Z+2, r6	; 0x02
    513e:	73 82       	std	Z+3, r7	; 0x03

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    5140:	81 11       	cpse	r24, r1
    5142:	08 c0       	rjmp	.+16     	; 0x5154 <VL53L0X_get_pal_range_status+0xec>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    5144:	ae 01       	movw	r20, r28
    5146:	4f 5f       	subi	r20, 0xFF	; 255
    5148:	5f 4f       	sbci	r21, 0xFF	; 255
    514a:	60 e0       	ldi	r22, 0x00	; 0
    514c:	70 e0       	ldi	r23, 0x00	; 0
    514e:	c5 01       	movw	r24, r10
    5150:	0e 94 80 0a 	call	0x1500	; 0x1500 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
    5154:	99 81       	ldd	r25, Y+1	; 0x01
    5156:	99 23       	and	r25, r25
    5158:	b1 f1       	breq	.+108    	; 0x51c6 <VL53L0X_get_pal_range_status+0x15e>
    515a:	81 11       	cpse	r24, r1
    515c:	42 c0       	rjmp	.+132    	; 0x51e2 <VL53L0X_get_pal_range_status+0x17a>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
    515e:	9e 01       	movw	r18, r28
    5160:	29 5e       	subi	r18, 0xE9	; 233
    5162:	3f 4f       	sbci	r19, 0xFF	; 255
    5164:	ae 01       	movw	r20, r28
    5166:	4b 5f       	subi	r20, 0xFB	; 251
    5168:	5f 4f       	sbci	r21, 0xFF	; 255
    516a:	68 a5       	ldd	r22, Y+40	; 0x28
    516c:	79 a5       	ldd	r23, Y+41	; 0x29
    516e:	c5 01       	movw	r24, r10
    5170:	c4 dc       	rcall	.-1656   	; 0x4afa <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
    5172:	81 11       	cpse	r24, r1
    5174:	38 c0       	rjmp	.+112    	; 0x51e6 <VL53L0X_get_pal_range_status+0x17e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
    5176:	8f 89       	ldd	r24, Y+23	; 0x17
    5178:	98 8d       	ldd	r25, Y+24	; 0x18
    517a:	e8 a5       	ldd	r30, Y+40	; 0x28
    517c:	f9 a5       	ldd	r31, Y+41	; 0x29
    517e:	93 87       	std	Z+11, r25	; 0x0b
    5180:	82 87       	std	Z+10, r24	; 0x0a

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
    5182:	ae 01       	movw	r20, r28
    5184:	47 5f       	subi	r20, 0xF7	; 247
    5186:	5f 4f       	sbci	r21, 0xFF	; 255
    5188:	60 e0       	ldi	r22, 0x00	; 0
    518a:	70 e0       	ldi	r23, 0x00	; 0
    518c:	c5 01       	movw	r24, r10
    518e:	0e 94 09 0b 	call	0x1612	; 0x1612 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
    5192:	c9 84       	ldd	r12, Y+9	; 0x09
    5194:	da 84       	ldd	r13, Y+10	; 0x0a
    5196:	eb 84       	ldd	r14, Y+11	; 0x0b
    5198:	fc 84       	ldd	r15, Y+12	; 0x0c
    519a:	cc a2       	std	Y+36, r12	; 0x24
    519c:	dd a2       	std	Y+37, r13	; 0x25
    519e:	ee a2       	std	Y+38, r14	; 0x26
    51a0:	ff a2       	std	Y+39, r15	; 0x27
    51a2:	c1 14       	cp	r12, r1
    51a4:	d1 04       	cpc	r13, r1
    51a6:	e1 04       	cpc	r14, r1
    51a8:	f1 04       	cpc	r15, r1
    51aa:	79 f0       	breq	.+30     	; 0x51ca <VL53L0X_get_pal_range_status+0x162>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
    51ac:	22 24       	eor	r2, r2
    51ae:	23 94       	inc	r2
    51b0:	2d 81       	ldd	r18, Y+5	; 0x05
    51b2:	3e 81       	ldd	r19, Y+6	; 0x06
    51b4:	4f 81       	ldd	r20, Y+7	; 0x07
    51b6:	58 85       	ldd	r21, Y+8	; 0x08
    51b8:	c2 16       	cp	r12, r18
    51ba:	d3 06       	cpc	r13, r19
    51bc:	e4 06       	cpc	r14, r20
    51be:	f5 06       	cpc	r15, r21
    51c0:	28 f0       	brcs	.+10     	; 0x51cc <VL53L0X_get_pal_range_status+0x164>
    51c2:	21 2c       	mov	r2, r1
    51c4:	03 c0       	rjmp	.+6      	; 0x51cc <VL53L0X_get_pal_range_status+0x164>
    51c6:	21 2c       	mov	r2, r1
    51c8:	01 c0       	rjmp	.+2      	; 0x51cc <VL53L0X_get_pal_range_status+0x164>
    51ca:	21 2c       	mov	r2, r1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    51cc:	81 11       	cpse	r24, r1
    51ce:	0c c0       	rjmp	.+24     	; 0x51e8 <VL53L0X_get_pal_range_status+0x180>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    51d0:	ae 01       	movw	r20, r28
    51d2:	4d 5f       	subi	r20, 0xFD	; 253
    51d4:	5f 4f       	sbci	r21, 0xFF	; 255
    51d6:	62 e0       	ldi	r22, 0x02	; 2
    51d8:	70 e0       	ldi	r23, 0x00	; 0
    51da:	c5 01       	movw	r24, r10
    51dc:	0e 94 80 0a 	call	0x1500	; 0x1500 <VL53L0X_GetLimitCheckEnable>
    51e0:	03 c0       	rjmp	.+6      	; 0x51e8 <VL53L0X_get_pal_range_status+0x180>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
    51e2:	21 2c       	mov	r2, r1
    51e4:	01 c0       	rjmp	.+2      	; 0x51e8 <VL53L0X_get_pal_range_status+0x180>
    51e6:	21 2c       	mov	r2, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
    51e8:	9b 81       	ldd	r25, Y+3	; 0x03
    51ea:	99 23       	and	r25, r25
    51ec:	e1 f0       	breq	.+56     	; 0x5226 <VL53L0X_get_pal_range_status+0x1be>
    51ee:	81 11       	cpse	r24, r1
    51f0:	fe c0       	rjmp	.+508    	; 0x53ee <VL53L0X_get_pal_range_status+0x386>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
    51f2:	ae 01       	movw	r20, r28
    51f4:	43 5f       	subi	r20, 0xF3	; 243
    51f6:	5f 4f       	sbci	r21, 0xFF	; 255
    51f8:	62 e0       	ldi	r22, 0x02	; 2
    51fa:	70 e0       	ldi	r23, 0x00	; 0
    51fc:	c5 01       	movw	r24, r10
    51fe:	0e 94 09 0b 	call	0x1612	; 0x1612 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
    5202:	4d 85       	ldd	r20, Y+13	; 0x0d
    5204:	5e 85       	ldd	r21, Y+14	; 0x0e
    5206:	6f 85       	ldd	r22, Y+15	; 0x0f
    5208:	78 89       	ldd	r23, Y+16	; 0x10
    520a:	41 15       	cp	r20, r1
    520c:	51 05       	cpc	r21, r1
    520e:	61 05       	cpc	r22, r1
    5210:	71 05       	cpc	r23, r1
    5212:	59 f0       	breq	.+22     	; 0x522a <VL53L0X_get_pal_range_status+0x1c2>
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
    5214:	ff 24       	eor	r15, r15
    5216:	f3 94       	inc	r15
    5218:	44 15       	cp	r20, r4
    521a:	55 05       	cpc	r21, r5
    521c:	66 05       	cpc	r22, r6
    521e:	77 05       	cpc	r23, r7
    5220:	28 f0       	brcs	.+10     	; 0x522c <VL53L0X_get_pal_range_status+0x1c4>
    5222:	f1 2c       	mov	r15, r1
    5224:	03 c0       	rjmp	.+6      	; 0x522c <VL53L0X_get_pal_range_status+0x1c4>
    5226:	f1 2c       	mov	r15, r1
    5228:	01 c0       	rjmp	.+2      	; 0x522c <VL53L0X_get_pal_range_status+0x1c4>
    522a:	f1 2c       	mov	r15, r1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
    522c:	81 11       	cpse	r24, r1
    522e:	e0 c0       	rjmp	.+448    	; 0x53f0 <VL53L0X_get_pal_range_status+0x388>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    5230:	ae 01       	movw	r20, r28
    5232:	4c 5f       	subi	r20, 0xFC	; 252
    5234:	5f 4f       	sbci	r21, 0xFF	; 255
    5236:	63 e0       	ldi	r22, 0x03	; 3
    5238:	70 e0       	ldi	r23, 0x00	; 0
    523a:	c5 01       	movw	r24, r10
    523c:	0e 94 80 0a 	call	0x1500	; 0x1500 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    5240:	9c 81       	ldd	r25, Y+4	; 0x04
    5242:	99 23       	and	r25, r25
    5244:	89 f1       	breq	.+98     	; 0x52a8 <VL53L0X_get_pal_range_status+0x240>
    5246:	81 11       	cpse	r24, r1
    5248:	76 c0       	rjmp	.+236    	; 0x5336 <VL53L0X_get_pal_range_status+0x2ce>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
    524a:	81 14       	cp	r8, r1
    524c:	91 04       	cpc	r9, r1
    524e:	79 f0       	breq	.+30     	; 0x526e <VL53L0X_get_pal_range_status+0x206>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
    5250:	28 a1       	ldd	r18, Y+32	; 0x20
    5252:	39 a1       	ldd	r19, Y+33	; 0x21
    5254:	4a a1       	ldd	r20, Y+34	; 0x22
    5256:	5b a1       	ldd	r21, Y+35	; 0x23
    5258:	94 2f       	mov	r25, r20
    525a:	83 2f       	mov	r24, r19
    525c:	72 2f       	mov	r23, r18
    525e:	66 27       	eor	r22, r22
    5260:	94 01       	movw	r18, r8
    5262:	40 e0       	ldi	r20, 0x00	; 0
    5264:	50 e0       	ldi	r21, 0x00	; 0
    5266:	42 d3       	rcall	.+1668   	; 0x58ec <__udivmodsi4>
    5268:	29 01       	movw	r4, r18
    526a:	3a 01       	movw	r6, r20
    526c:	03 c0       	rjmp	.+6      	; 0x5274 <VL53L0X_get_pal_range_status+0x20c>
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
			SignalRatePerSpad = 0;
    526e:	41 2c       	mov	r4, r1
    5270:	51 2c       	mov	r5, r1
    5272:	32 01       	movw	r6, r4
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
    5274:	ae 01       	movw	r20, r28
    5276:	4f 5e       	subi	r20, 0xEF	; 239
    5278:	5f 4f       	sbci	r21, 0xFF	; 255
    527a:	63 e0       	ldi	r22, 0x03	; 3
    527c:	70 e0       	ldi	r23, 0x00	; 0
    527e:	c5 01       	movw	r24, r10
    5280:	0e 94 09 0b 	call	0x1612	; 0x1612 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
    5284:	49 89       	ldd	r20, Y+17	; 0x11
    5286:	5a 89       	ldd	r21, Y+18	; 0x12
    5288:	6b 89       	ldd	r22, Y+19	; 0x13
    528a:	7c 89       	ldd	r23, Y+20	; 0x14
    528c:	41 15       	cp	r20, r1
    528e:	51 05       	cpc	r21, r1
    5290:	61 05       	cpc	r22, r1
    5292:	71 05       	cpc	r23, r1
    5294:	59 f0       	breq	.+22     	; 0x52ac <VL53L0X_get_pal_range_status+0x244>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    5296:	99 24       	eor	r9, r9
    5298:	93 94       	inc	r9
    529a:	44 16       	cp	r4, r20
    529c:	55 06       	cpc	r5, r21
    529e:	66 06       	cpc	r6, r22
    52a0:	77 06       	cpc	r7, r23
    52a2:	28 f0       	brcs	.+10     	; 0x52ae <VL53L0X_get_pal_range_status+0x246>
    52a4:	91 2c       	mov	r9, r1
    52a6:	03 c0       	rjmp	.+6      	; 0x52ae <VL53L0X_get_pal_range_status+0x246>
    52a8:	91 2c       	mov	r9, r1
    52aa:	01 c0       	rjmp	.+2      	; 0x52ae <VL53L0X_get_pal_range_status+0x246>
    52ac:	91 2c       	mov	r9, r1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    52ae:	81 11       	cpse	r24, r1
    52b0:	45 c0       	rjmp	.+138    	; 0x533c <VL53L0X_get_pal_range_status+0x2d4>
		if (NoneFlag == 1) {
    52b2:	3f 8d       	ldd	r19, Y+31	; 0x1f
    52b4:	31 30       	cpi	r19, 0x01	; 1
    52b6:	29 f4       	brne	.+10     	; 0x52c2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
    52b8:	8f ef       	ldi	r24, 0xFF	; 255
    52ba:	ea a5       	ldd	r30, Y+42	; 0x2a
    52bc:	fb a5       	ldd	r31, Y+43	; 0x2b
    52be:	80 83       	st	Z, r24
    52c0:	46 c0       	rjmp	.+140    	; 0x534e <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 1 ||
    52c2:	8f ef       	ldi	r24, 0xFF	; 255
    52c4:	80 0f       	add	r24, r16
    52c6:	83 30       	cpi	r24, 0x03	; 3
    52c8:	28 f4       	brcc	.+10     	; 0x52d4 <VL53L0X_get_pal_range_status+0x26c>
					DeviceRangeStatusInternal == 2 ||
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
    52ca:	85 e0       	ldi	r24, 0x05	; 5
    52cc:	ea a5       	ldd	r30, Y+42	; 0x2a
    52ce:	fb a5       	ldd	r31, Y+43	; 0x2b
    52d0:	80 83       	st	Z, r24
    52d2:	3d c0       	rjmp	.+122    	; 0x534e <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 6 ||
    52d4:	f6 e0       	ldi	r31, 0x06	; 6
    52d6:	3f 16       	cp	r3, r31
    52d8:	31 f0       	breq	.+12     	; 0x52e6 <VL53L0X_get_pal_range_status+0x27e>
    52da:	0f 2e       	mov	r0, r31
    52dc:	f9 e0       	ldi	r31, 0x09	; 9
    52de:	cf 2e       	mov	r12, r31
    52e0:	f0 2d       	mov	r31, r0
    52e2:	3c 10       	cpse	r3, r12
    52e4:	05 c0       	rjmp	.+10     	; 0x52f0 <VL53L0X_get_pal_range_status+0x288>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
    52e6:	84 e0       	ldi	r24, 0x04	; 4
    52e8:	ea a5       	ldd	r30, Y+42	; 0x2a
    52ea:	fb a5       	ldd	r31, Y+43	; 0x2b
    52ec:	80 83       	st	Z, r24
    52ee:	2f c0       	rjmp	.+94     	; 0x534e <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 8 ||
    52f0:	0d 7f       	andi	r16, 0xFD	; 253
    52f2:	08 30       	cpi	r16, 0x08	; 8
    52f4:	19 f0       	breq	.+6      	; 0x52fc <VL53L0X_get_pal_range_status+0x294>
					DeviceRangeStatusInternal == 10 ||
    52f6:	f1 e0       	ldi	r31, 0x01	; 1
    52f8:	ff 12       	cpse	r15, r31
    52fa:	05 c0       	rjmp	.+10     	; 0x5306 <VL53L0X_get_pal_range_status+0x29e>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
    52fc:	83 e0       	ldi	r24, 0x03	; 3
    52fe:	ea a5       	ldd	r30, Y+42	; 0x2a
    5300:	fb a5       	ldd	r31, Y+43	; 0x2b
    5302:	80 83       	st	Z, r24
    5304:	24 c0       	rjmp	.+72     	; 0x534e <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 4 ||
    5306:	f4 e0       	ldi	r31, 0x04	; 4
    5308:	3f 16       	cp	r3, r31
    530a:	21 f0       	breq	.+8      	; 0x5314 <VL53L0X_get_pal_range_status+0x2ac>
    530c:	cc 24       	eor	r12, r12
    530e:	c3 94       	inc	r12
    5310:	9c 10       	cpse	r9, r12
    5312:	05 c0       	rjmp	.+10     	; 0x531e <VL53L0X_get_pal_range_status+0x2b6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
    5314:	82 e0       	ldi	r24, 0x02	; 2
    5316:	ea a5       	ldd	r30, Y+42	; 0x2a
    5318:	fb a5       	ldd	r31, Y+43	; 0x2b
    531a:	80 83       	st	Z, r24
    531c:	18 c0       	rjmp	.+48     	; 0x534e <VL53L0X_get_pal_range_status+0x2e6>
		} else if (SigmaLimitflag == 1) {
    531e:	f1 e0       	ldi	r31, 0x01	; 1
    5320:	2f 12       	cpse	r2, r31
    5322:	05 c0       	rjmp	.+10     	; 0x532e <VL53L0X_get_pal_range_status+0x2c6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
    5324:	81 e0       	ldi	r24, 0x01	; 1
    5326:	ea a5       	ldd	r30, Y+42	; 0x2a
    5328:	fb a5       	ldd	r31, Y+43	; 0x2b
    532a:	80 83       	st	Z, r24
    532c:	10 c0       	rjmp	.+32     	; 0x534e <VL53L0X_get_pal_range_status+0x2e6>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
    532e:	ea a5       	ldd	r30, Y+42	; 0x2a
    5330:	fb a5       	ldd	r31, Y+43	; 0x2b
    5332:	10 82       	st	Z, r1
    5334:	08 c0       	rjmp	.+16     	; 0x5346 <VL53L0X_get_pal_range_status+0x2de>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    5336:	91 2c       	mov	r9, r1
    5338:	01 c0       	rjmp	.+2      	; 0x533c <VL53L0X_get_pal_range_status+0x2d4>
    533a:	91 2c       	mov	r9, r1
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
    533c:	ea a5       	ldd	r30, Y+42	; 0x2a
    533e:	fb a5       	ldd	r31, Y+43	; 0x2b
    5340:	80 81       	ld	r24, Z
    5342:	81 11       	cpse	r24, r1
    5344:	04 c0       	rjmp	.+8      	; 0x534e <VL53L0X_get_pal_range_status+0x2e6>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
    5346:	e8 a5       	ldd	r30, Y+40	; 0x28
    5348:	f9 a5       	ldd	r31, Y+41	; 0x29
    534a:	13 86       	std	Z+11, r1	; 0x0b
    534c:	12 86       	std	Z+10, r1	; 0x0a

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
    534e:	ae 01       	movw	r20, r28
    5350:	4e 5f       	subi	r20, 0xFE	; 254
    5352:	5f 4f       	sbci	r21, 0xFF	; 255
    5354:	61 e0       	ldi	r22, 0x01	; 1
    5356:	70 e0       	ldi	r23, 0x00	; 0
    5358:	c5 01       	movw	r24, r10
    535a:	0e 94 80 0a 	call	0x1500	; 0x1500 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
    535e:	81 11       	cpse	r24, r1
    5360:	4c c0       	rjmp	.+152    	; 0x53fa <VL53L0X_get_pal_range_status+0x392>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
    5362:	99 81       	ldd	r25, Y+1	; 0x01
    5364:	99 23       	and	r25, r25
    5366:	29 f0       	breq	.+10     	; 0x5372 <VL53L0X_get_pal_range_status+0x30a>
			Temp8 = 1;
    5368:	91 e0       	ldi	r25, 0x01	; 1
    536a:	29 16       	cp	r2, r25
    536c:	19 f0       	breq	.+6      	; 0x5374 <VL53L0X_get_pal_range_status+0x30c>
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	01 c0       	rjmp	.+2      	; 0x5374 <VL53L0X_get_pal_range_status+0x30c>
    5372:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    5374:	f5 01       	movw	r30, r10
    5376:	93 a7       	std	Z+43, r25	; 0x2b
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
    5378:	f4 e0       	ldi	r31, 0x04	; 4
    537a:	3f 16       	cp	r3, r31
    537c:	31 f0       	breq	.+12     	; 0x538a <VL53L0X_get_pal_range_status+0x322>
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
    537e:	91 e0       	ldi	r25, 0x01	; 1
    5380:	2a 81       	ldd	r18, Y+2	; 0x02
    5382:	22 23       	and	r18, r18
    5384:	19 f0       	breq	.+6      	; 0x538c <VL53L0X_get_pal_range_status+0x324>
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	01 c0       	rjmp	.+2      	; 0x538c <VL53L0X_get_pal_range_status+0x324>
    538a:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    538c:	f5 01       	movw	r30, r10
    538e:	94 a7       	std	Z+44, r25	; 0x2c
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
    5390:	9b 81       	ldd	r25, Y+3	; 0x03
    5392:	99 23       	and	r25, r25
    5394:	29 f0       	breq	.+10     	; 0x53a0 <VL53L0X_get_pal_range_status+0x338>
					(SignalRefClipflag == 1))
			Temp8 = 1;
    5396:	91 e0       	ldi	r25, 0x01	; 1
    5398:	f9 16       	cp	r15, r25
    539a:	19 f0       	breq	.+6      	; 0x53a2 <VL53L0X_get_pal_range_status+0x33a>
    539c:	90 e0       	ldi	r25, 0x00	; 0
    539e:	01 c0       	rjmp	.+2      	; 0x53a2 <VL53L0X_get_pal_range_status+0x33a>
    53a0:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    53a2:	f5 01       	movw	r30, r10
    53a4:	95 a7       	std	Z+45, r25	; 0x2d
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
    53a6:	9c 81       	ldd	r25, Y+4	; 0x04
    53a8:	99 23       	and	r25, r25
    53aa:	29 f0       	breq	.+10     	; 0x53b6 <VL53L0X_get_pal_range_status+0x34e>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
    53ac:	91 e0       	ldi	r25, 0x01	; 1
    53ae:	99 16       	cp	r9, r25
    53b0:	19 f0       	breq	.+6      	; 0x53b8 <VL53L0X_get_pal_range_status+0x350>
    53b2:	90 e0       	ldi	r25, 0x00	; 0
    53b4:	01 c0       	rjmp	.+2      	; 0x53b8 <VL53L0X_get_pal_range_status+0x350>
    53b6:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    53b8:	f5 01       	movw	r30, r10
    53ba:	96 a7       	std	Z+46, r25	; 0x2e
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
    53bc:	1e c0       	rjmp	.+60     	; 0x53fa <VL53L0X_get_pal_range_status+0x392>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_RdWord(Dev,
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    53be:	9d 89       	ldd	r25, Y+21	; 0x15
    53c0:	20 e0       	ldi	r18, 0x00	; 0
    53c2:	30 e0       	ldi	r19, 0x00	; 0
    53c4:	39 2f       	mov	r19, r25
    53c6:	33 0f       	add	r19, r19
    53c8:	29 01       	movw	r4, r18
    53ca:	61 2c       	mov	r6, r1
    53cc:	71 2c       	mov	r7, r1

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    53ce:	f5 01       	movw	r30, r10
    53d0:	ee 5c       	subi	r30, 0xCE	; 206
    53d2:	fe 4f       	sbci	r31, 0xFE	; 254
    53d4:	40 82       	st	Z, r4
    53d6:	51 82       	std	Z+1, r5	; 0x01
    53d8:	62 82       	std	Z+2, r6	; 0x02
    53da:	73 82       	std	Z+3, r7	; 0x03
    53dc:	bb ce       	rjmp	.-650    	; 0x5154 <VL53L0X_get_pal_range_status+0xec>
    53de:	f5 01       	movw	r30, r10
    53e0:	ee 5c       	subi	r30, 0xCE	; 206
    53e2:	fe 4f       	sbci	r31, 0xFE	; 254
    53e4:	40 82       	st	Z, r4
    53e6:	51 82       	std	Z+1, r5	; 0x01
    53e8:	62 82       	std	Z+2, r6	; 0x02
    53ea:	73 82       	std	Z+3, r7	; 0x03
    53ec:	b3 ce       	rjmp	.-666    	; 0x5154 <VL53L0X_get_pal_range_status+0xec>
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
    53ee:	f1 2c       	mov	r15, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    53f0:	9c 81       	ldd	r25, Y+4	; 0x04
    53f2:	91 11       	cpse	r25, r1
    53f4:	a2 cf       	rjmp	.-188    	; 0x533a <VL53L0X_get_pal_range_status+0x2d2>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    53f6:	91 2c       	mov	r9, r1
    53f8:	5a cf       	rjmp	.-332    	; 0x52ae <VL53L0X_get_pal_range_status+0x246>
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
    53fa:	ab 96       	adiw	r28, 0x2b	; 43
    53fc:	0f b6       	in	r0, 0x3f	; 63
    53fe:	f8 94       	cli
    5400:	de bf       	out	0x3e, r29	; 62
    5402:	0f be       	out	0x3f, r0	; 63
    5404:	cd bf       	out	0x3d, r28	; 61
    5406:	df 91       	pop	r29
    5408:	cf 91       	pop	r28
    540a:	1f 91       	pop	r17
    540c:	0f 91       	pop	r16
    540e:	ff 90       	pop	r15
    5410:	ef 90       	pop	r14
    5412:	df 90       	pop	r13
    5414:	cf 90       	pop	r12
    5416:	bf 90       	pop	r11
    5418:	af 90       	pop	r10
    541a:	9f 90       	pop	r9
    541c:	8f 90       	pop	r8
    541e:	7f 90       	pop	r7
    5420:	6f 90       	pop	r6
    5422:	5f 90       	pop	r5
    5424:	4f 90       	pop	r4
    5426:	3f 90       	pop	r3
    5428:	2f 90       	pop	r2
    542a:	08 95       	ret

0000542c <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
    542c:	cf 92       	push	r12
    542e:	df 92       	push	r13
    5430:	ef 92       	push	r14
    5432:	ff 92       	push	r15
    5434:	1f 93       	push	r17
    5436:	cf 93       	push	r28
    5438:	df 93       	push	r29
    543a:	ec 01       	movw	r28, r24
    543c:	6b 01       	movw	r12, r22
    543e:	7a 01       	movw	r14, r20
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
    5440:	62 e0       	ldi	r22, 0x02	; 2
    5442:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <VL53L0X_get_info_from_device>
    5446:	18 2f       	mov	r17, r24

	if (Status == VL53L0X_ERROR_NONE) {
    5448:	81 11       	cpse	r24, r1
    544a:	1a c0       	rjmp	.+52     	; 0x5480 <VL53L0X_check_part_used+0x54>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
    544c:	fe 01       	movw	r30, r28
    544e:	e0 52       	subi	r30, 0x20	; 32
    5450:	ff 4f       	sbci	r31, 0xFF	; 255

	if (ModuleIdInt == 0) {
    5452:	80 81       	ld	r24, Z
    5454:	81 11       	cpse	r24, r1
    5456:	07 c0       	rjmp	.+14     	; 0x5466 <VL53L0X_check_part_used+0x3a>
		*Revision = 0;
    5458:	f6 01       	movw	r30, r12
    545a:	10 82       	st	Z, r1
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
    545c:	f7 01       	movw	r30, r14
    545e:	e0 5c       	subi	r30, 0xC0	; 192
    5460:	ff 4f       	sbci	r31, 0xFF	; 255
    5462:	10 82       	st	Z, r1
    5464:	0d c0       	rjmp	.+26     	; 0x5480 <VL53L0X_check_part_used+0x54>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
    5466:	fe 01       	movw	r30, r28
    5468:	ef 51       	subi	r30, 0x1F	; 31
    546a:	ff 4f       	sbci	r31, 0xFF	; 255
    546c:	80 81       	ld	r24, Z
    546e:	f6 01       	movw	r30, r12
    5470:	80 83       	st	Z, r24
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
    5472:	be 01       	movw	r22, r28
    5474:	6e 51       	subi	r22, 0x1E	; 30
    5476:	7f 4f       	sbci	r23, 0xFF	; 255
    5478:	c7 01       	movw	r24, r14
    547a:	80 5c       	subi	r24, 0xC0	; 192
    547c:	9f 4f       	sbci	r25, 0xFF	; 255
    547e:	be d2       	rcall	.+1404   	; 0x59fc <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    5480:	81 2f       	mov	r24, r17
    5482:	df 91       	pop	r29
    5484:	cf 91       	pop	r28
    5486:	1f 91       	pop	r17
    5488:	ff 90       	pop	r15
    548a:	ef 90       	pop	r14
    548c:	df 90       	pop	r13
    548e:	cf 90       	pop	r12
    5490:	08 95       	ret

00005492 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
    5492:	ef 92       	push	r14
    5494:	ff 92       	push	r15
    5496:	0f 93       	push	r16
    5498:	1f 93       	push	r17
    549a:	cf 93       	push	r28
    549c:	df 93       	push	r29
    549e:	00 d0       	rcall	.+0      	; 0x54a0 <VL53L0X_get_device_info+0xe>
    54a0:	cd b7       	in	r28, 0x3d	; 61
    54a2:	de b7       	in	r29, 0x3e	; 62
    54a4:	7c 01       	movw	r14, r24
    54a6:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
    54a8:	ab 01       	movw	r20, r22
    54aa:	be 01       	movw	r22, r28
    54ac:	6e 5f       	subi	r22, 0xFE	; 254
    54ae:	7f 4f       	sbci	r23, 0xFF	; 255
    54b0:	bd df       	rcall	.-134    	; 0x542c <VL53L0X_check_part_used>
	if (Status == VL53L0X_ERROR_NONE) {
    54b2:	81 11       	cpse	r24, r1
    54b4:	4d c0       	rjmp	.+154    	; 0x5550 <VL53L0X_get_device_info+0xbe>
		if (Revision == 0) {
    54b6:	8a 81       	ldd	r24, Y+2	; 0x02
    54b8:	81 11       	cpse	r24, r1
    54ba:	09 c0       	rjmp	.+18     	; 0x54ce <VL53L0X_get_device_info+0x3c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    54bc:	8c e0       	ldi	r24, 0x0C	; 12
    54be:	eb eb       	ldi	r30, 0xBB	; 187
    54c0:	f3 e0       	ldi	r31, 0x03	; 3
    54c2:	d8 01       	movw	r26, r16
    54c4:	01 90       	ld	r0, Z+
    54c6:	0d 92       	st	X+, r0
    54c8:	8a 95       	dec	r24
    54ca:	e1 f7       	brne	.-8      	; 0x54c4 <VL53L0X_get_device_info+0x32>
    54cc:	20 c0       	rjmp	.+64     	; 0x550e <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
    54ce:	83 32       	cpi	r24, 0x23	; 35
    54d0:	58 f4       	brcc	.+22     	; 0x54e8 <VL53L0X_get_device_info+0x56>
    54d2:	80 32       	cpi	r24, 0x20	; 32
    54d4:	59 f0       	breq	.+22     	; 0x54ec <VL53L0X_get_device_info+0x5a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    54d6:	8c e0       	ldi	r24, 0x0C	; 12
    54d8:	e7 ec       	ldi	r30, 0xC7	; 199
    54da:	f3 e0       	ldi	r31, 0x03	; 3
    54dc:	d8 01       	movw	r26, r16
    54de:	01 90       	ld	r0, Z+
    54e0:	0d 92       	st	X+, r0
    54e2:	8a 95       	dec	r24
    54e4:	e1 f7       	brne	.-8      	; 0x54de <VL53L0X_get_device_info+0x4c>
    54e6:	13 c0       	rjmp	.+38     	; 0x550e <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
    54e8:	87 32       	cpi	r24, 0x27	; 39
    54ea:	48 f4       	brcc	.+18     	; 0x54fe <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    54ec:	8c e0       	ldi	r24, 0x0C	; 12
    54ee:	e3 ed       	ldi	r30, 0xD3	; 211
    54f0:	f3 e0       	ldi	r31, 0x03	; 3
    54f2:	d8 01       	movw	r26, r16
    54f4:	01 90       	ld	r0, Z+
    54f6:	0d 92       	st	X+, r0
    54f8:	8a 95       	dec	r24
    54fa:	e1 f7       	brne	.-8      	; 0x54f4 <VL53L0X_get_device_info+0x62>
    54fc:	08 c0       	rjmp	.+16     	; 0x550e <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    54fe:	85 e1       	ldi	r24, 0x15	; 21
    5500:	ef ed       	ldi	r30, 0xDF	; 223
    5502:	f3 e0       	ldi	r31, 0x03	; 3
    5504:	d8 01       	movw	r26, r16
    5506:	01 90       	ld	r0, Z+
    5508:	0d 92       	st	X+, r0
    550a:	8a 95       	dec	r24
    550c:	e1 f7       	brne	.-8      	; 0x5506 <VL53L0X_get_device_info+0x74>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
    550e:	88 e0       	ldi	r24, 0x08	; 8
    5510:	e4 ef       	ldi	r30, 0xF4	; 244
    5512:	f3 e0       	ldi	r31, 0x03	; 3
    5514:	d8 01       	movw	r26, r16
    5516:	90 96       	adiw	r26, 0x20	; 32
    5518:	01 90       	ld	r0, Z+
    551a:	0d 92       	st	X+, r0
    551c:	8a 95       	dec	r24
    551e:	e1 f7       	brne	.-8      	; 0x5518 <VL53L0X_get_device_info+0x86>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
    5520:	a8 01       	movw	r20, r16
    5522:	40 5a       	subi	r20, 0xA0	; 160
    5524:	5f 4f       	sbci	r21, 0xFF	; 255
    5526:	60 ec       	ldi	r22, 0xC0	; 192
    5528:	c7 01       	movw	r24, r14
    552a:	80 d1       	rcall	.+768    	; 0x582c <VL53L0X_RdByte>
				&pVL53L0X_DeviceInfo->ProductType);
	}
	if (Status == VL53L0X_ERROR_NONE) {
    552c:	81 11       	cpse	r24, r1
    552e:	10 c0       	rjmp	.+32     	; 0x5550 <VL53L0X_get_device_info+0xbe>
		Status = VL53L0X_RdByte(Dev,
    5530:	ae 01       	movw	r20, r28
    5532:	4f 5f       	subi	r20, 0xFF	; 255
    5534:	5f 4f       	sbci	r21, 0xFF	; 255
    5536:	62 ec       	ldi	r22, 0xC2	; 194
    5538:	c7 01       	movw	r24, r14
    553a:	78 d1       	rcall	.+752    	; 0x582c <VL53L0X_RdByte>
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
    553c:	f8 01       	movw	r30, r16
    553e:	ef 59       	subi	r30, 0x9F	; 159
    5540:	ff 4f       	sbci	r31, 0xFF	; 255
    5542:	91 e0       	ldi	r25, 0x01	; 1
    5544:	90 83       	st	Z, r25
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
    5546:	31 96       	adiw	r30, 0x01	; 1
    5548:	99 81       	ldd	r25, Y+1	; 0x01
    554a:	92 95       	swap	r25
    554c:	9f 70       	andi	r25, 0x0F	; 15
    554e:	90 83       	st	Z, r25
					(revision_id & 0xF0) >> 4;
	}

	return Status;
}
    5550:	0f 90       	pop	r0
    5552:	0f 90       	pop	r0
    5554:	df 91       	pop	r29
    5556:	cf 91       	pop	r28
    5558:	1f 91       	pop	r17
    555a:	0f 91       	pop	r16
    555c:	ff 90       	pop	r15
    555e:	ef 90       	pop	r14
    5560:	08 95       	ret

00005562 <VL53L0X_i2c_init>:
  buff[2] = data >> 8;
  buff[1] = data >> 16;
  buff[0] = data >> 24;

  return VL53L0X_write_multi(deviceAddress, index, buff, 4);
}
    5562:	cf 93       	push	r28
    5564:	df 93       	push	r29
    5566:	00 d0       	rcall	.+0      	; 0x5568 <VL53L0X_i2c_init+0x6>
    5568:	00 d0       	rcall	.+0      	; 0x556a <VL53L0X_i2c_init+0x8>
    556a:	1f 92       	push	r1
    556c:	cd b7       	in	r28, 0x3d	; 61
    556e:	de b7       	in	r29, 0x3e	; 62
    5570:	80 e8       	ldi	r24, 0x80	; 128
    5572:	58 2f       	mov	r21, r24
    5574:	41 e0       	ldi	r20, 0x01	; 1
    5576:	68 e3       	ldi	r22, 0x38	; 56
    5578:	71 e0       	ldi	r23, 0x01	; 1
    557a:	80 e0       	ldi	r24, 0x00	; 0
    557c:	0e 94 01 02 	call	0x402	; 0x402 <i2c_init>
    5580:	0e 94 39 02 	call	0x472	; 0x472 <i2c_start>
    5584:	80 e0       	ldi	r24, 0x00	; 0
    5586:	90 e0       	ldi	r25, 0x00	; 0
    5588:	0f 90       	pop	r0
    558a:	0f 90       	pop	r0
    558c:	0f 90       	pop	r0
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	df 91       	pop	r29
    5594:	cf 91       	pop	r28
    5596:	08 95       	ret

00005598 <VL53L0X_write_multi>:
    5598:	ef 92       	push	r14
    559a:	ff 92       	push	r15
    559c:	0f 93       	push	r16
    559e:	1f 93       	push	r17
    55a0:	cf 93       	push	r28
    55a2:	df 93       	push	r29
    55a4:	1f 92       	push	r1
    55a6:	cd b7       	in	r28, 0x3d	; 61
    55a8:	de b7       	in	r29, 0x3e	; 62
    55aa:	18 2f       	mov	r17, r24
    55ac:	69 83       	std	Y+1, r22	; 0x01
    55ae:	7a 01       	movw	r14, r20
    55b0:	41 e0       	ldi	r20, 0x01	; 1
    55b2:	be 01       	movw	r22, r28
    55b4:	6f 5f       	subi	r22, 0xFF	; 255
    55b6:	7f 4f       	sbci	r23, 0xFF	; 255
    55b8:	0e 94 3e 02 	call	0x47c	; 0x47c <i2c_transmit>
    55bc:	40 2f       	mov	r20, r16
    55be:	b7 01       	movw	r22, r14
    55c0:	81 2f       	mov	r24, r17
    55c2:	0e 94 3e 02 	call	0x47c	; 0x47c <i2c_transmit>
    55c6:	80 e0       	ldi	r24, 0x00	; 0
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	0f 90       	pop	r0
    55cc:	df 91       	pop	r29
    55ce:	cf 91       	pop	r28
    55d0:	1f 91       	pop	r17
    55d2:	0f 91       	pop	r16
    55d4:	ff 90       	pop	r15
    55d6:	ef 90       	pop	r14
    55d8:	08 95       	ret

000055da <VL53L0X_read_multi>:
    55da:	ef 92       	push	r14
    55dc:	ff 92       	push	r15
    55de:	0f 93       	push	r16
    55e0:	1f 93       	push	r17
    55e2:	cf 93       	push	r28
    55e4:	df 93       	push	r29
    55e6:	1f 92       	push	r1
    55e8:	cd b7       	in	r28, 0x3d	; 61
    55ea:	de b7       	in	r29, 0x3e	; 62
    55ec:	18 2f       	mov	r17, r24
    55ee:	69 83       	std	Y+1, r22	; 0x01
    55f0:	7a 01       	movw	r14, r20
    55f2:	41 e0       	ldi	r20, 0x01	; 1
    55f4:	be 01       	movw	r22, r28
    55f6:	6f 5f       	subi	r22, 0xFF	; 255
    55f8:	7f 4f       	sbci	r23, 0xFF	; 255
    55fa:	0e 94 3e 02 	call	0x47c	; 0x47c <i2c_transmit>
    55fe:	40 2f       	mov	r20, r16
    5600:	b7 01       	movw	r22, r14
    5602:	81 2f       	mov	r24, r17
    5604:	0e 94 bb 02 	call	0x576	; 0x576 <i2c_receive>
    5608:	80 e0       	ldi	r24, 0x00	; 0
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	0f 90       	pop	r0
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	1f 91       	pop	r17
    5614:	0f 91       	pop	r16
    5616:	ff 90       	pop	r15
    5618:	ef 90       	pop	r14
    561a:	08 95       	ret

0000561c <VL53L0X_write_byte>:
    561c:	0f 93       	push	r16
    561e:	1f 93       	push	r17
    5620:	cf 93       	push	r28
    5622:	df 93       	push	r29
    5624:	1f 92       	push	r1
    5626:	cd b7       	in	r28, 0x3d	; 61
    5628:	de b7       	in	r29, 0x3e	; 62
    562a:	49 83       	std	Y+1, r20	; 0x01
    562c:	01 e0       	ldi	r16, 0x01	; 1
    562e:	10 e0       	ldi	r17, 0x00	; 0
    5630:	20 e0       	ldi	r18, 0x00	; 0
    5632:	30 e0       	ldi	r19, 0x00	; 0
    5634:	ae 01       	movw	r20, r28
    5636:	4f 5f       	subi	r20, 0xFF	; 255
    5638:	5f 4f       	sbci	r21, 0xFF	; 255
    563a:	ae df       	rcall	.-164    	; 0x5598 <VL53L0X_write_multi>
    563c:	0f 90       	pop	r0
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	1f 91       	pop	r17
    5644:	0f 91       	pop	r16
    5646:	08 95       	ret

00005648 <VL53L0X_write_word>:
    5648:	0f 93       	push	r16
    564a:	1f 93       	push	r17
    564c:	cf 93       	push	r28
    564e:	df 93       	push	r29
    5650:	00 d0       	rcall	.+0      	; 0x5652 <VL53L0X_write_word+0xa>
    5652:	cd b7       	in	r28, 0x3d	; 61
    5654:	de b7       	in	r29, 0x3e	; 62
    5656:	4a 83       	std	Y+2, r20	; 0x02
    5658:	59 83       	std	Y+1, r21	; 0x01
    565a:	02 e0       	ldi	r16, 0x02	; 2
    565c:	10 e0       	ldi	r17, 0x00	; 0
    565e:	20 e0       	ldi	r18, 0x00	; 0
    5660:	30 e0       	ldi	r19, 0x00	; 0
    5662:	ae 01       	movw	r20, r28
    5664:	4f 5f       	subi	r20, 0xFF	; 255
    5666:	5f 4f       	sbci	r21, 0xFF	; 255
    5668:	97 df       	rcall	.-210    	; 0x5598 <VL53L0X_write_multi>
    566a:	0f 90       	pop	r0
    566c:	0f 90       	pop	r0
    566e:	df 91       	pop	r29
    5670:	cf 91       	pop	r28
    5672:	1f 91       	pop	r17
    5674:	0f 91       	pop	r16
    5676:	08 95       	ret

00005678 <VL53L0X_read_byte>:

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data) {
    5678:	0f 93       	push	r16
    567a:	1f 93       	push	r17
  return VL53L0X_read_multi(deviceAddress, index, data, 1);
    567c:	01 e0       	ldi	r16, 0x01	; 1
    567e:	10 e0       	ldi	r17, 0x00	; 0
    5680:	20 e0       	ldi	r18, 0x00	; 0
    5682:	30 e0       	ldi	r19, 0x00	; 0
    5684:	aa df       	rcall	.-172    	; 0x55da <VL53L0X_read_multi>
}
    5686:	1f 91       	pop	r17
    5688:	0f 91       	pop	r16
    568a:	08 95       	ret

0000568c <VL53L0X_read_word>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data) {
    568c:	ef 92       	push	r14
    568e:	ff 92       	push	r15
    5690:	0f 93       	push	r16
    5692:	1f 93       	push	r17
    5694:	cf 93       	push	r28
    5696:	df 93       	push	r29
    5698:	00 d0       	rcall	.+0      	; 0x569a <VL53L0X_read_word+0xe>
    569a:	cd b7       	in	r28, 0x3d	; 61
    569c:	de b7       	in	r29, 0x3e	; 62
    569e:	7a 01       	movw	r14, r20
  uint8_t buff[2];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 2);
    56a0:	02 e0       	ldi	r16, 0x02	; 2
    56a2:	10 e0       	ldi	r17, 0x00	; 0
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	ae 01       	movw	r20, r28
    56aa:	4f 5f       	subi	r20, 0xFF	; 255
    56ac:	5f 4f       	sbci	r21, 0xFF	; 255
    56ae:	95 df       	rcall	.-214    	; 0x55da <VL53L0X_read_multi>

  uint16_t tmp;
  tmp = buff[0];
    56b0:	29 81       	ldd	r18, Y+1	; 0x01
    56b2:	30 e0       	ldi	r19, 0x00	; 0
  tmp <<= 8;
    56b4:	32 2f       	mov	r19, r18
    56b6:	22 27       	eor	r18, r18
  tmp |= buff[1];
  *data = tmp;
    56b8:	4a 81       	ldd	r20, Y+2	; 0x02
    56ba:	24 2b       	or	r18, r20
    56bc:	f7 01       	movw	r30, r14
    56be:	31 83       	std	Z+1, r19	; 0x01
    56c0:	20 83       	st	Z, r18

  return r;
}
    56c2:	0f 90       	pop	r0
    56c4:	0f 90       	pop	r0
    56c6:	df 91       	pop	r29
    56c8:	cf 91       	pop	r28
    56ca:	1f 91       	pop	r17
    56cc:	0f 91       	pop	r16
    56ce:	ff 90       	pop	r15
    56d0:	ef 90       	pop	r14
    56d2:	08 95       	ret

000056d4 <VL53L0X_read_dword>:

int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data) {
    56d4:	ef 92       	push	r14
    56d6:	ff 92       	push	r15
    56d8:	0f 93       	push	r16
    56da:	1f 93       	push	r17
    56dc:	cf 93       	push	r28
    56de:	df 93       	push	r29
    56e0:	00 d0       	rcall	.+0      	; 0x56e2 <VL53L0X_read_dword+0xe>
    56e2:	00 d0       	rcall	.+0      	; 0x56e4 <VL53L0X_read_dword+0x10>
    56e4:	cd b7       	in	r28, 0x3d	; 61
    56e6:	de b7       	in	r29, 0x3e	; 62
    56e8:	7a 01       	movw	r14, r20
  uint8_t buff[4];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 4);
    56ea:	04 e0       	ldi	r16, 0x04	; 4
    56ec:	10 e0       	ldi	r17, 0x00	; 0
    56ee:	20 e0       	ldi	r18, 0x00	; 0
    56f0:	30 e0       	ldi	r19, 0x00	; 0
    56f2:	ae 01       	movw	r20, r28
    56f4:	4f 5f       	subi	r20, 0xFF	; 255
    56f6:	5f 4f       	sbci	r21, 0xFF	; 255
    56f8:	70 df       	rcall	.-288    	; 0x55da <VL53L0X_read_multi>

  uint32_t tmp;
  tmp = buff[0];
    56fa:	49 81       	ldd	r20, Y+1	; 0x01
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	60 e0       	ldi	r22, 0x00	; 0
    5700:	70 e0       	ldi	r23, 0x00	; 0
  tmp <<= 8;
    5702:	76 2f       	mov	r23, r22
    5704:	65 2f       	mov	r22, r21
    5706:	54 2f       	mov	r21, r20
    5708:	44 27       	eor	r20, r20
  tmp |= buff[1];
    570a:	2a 81       	ldd	r18, Y+2	; 0x02
    570c:	42 2b       	or	r20, r18
  tmp <<= 8;
    570e:	76 2f       	mov	r23, r22
    5710:	65 2f       	mov	r22, r21
    5712:	54 2f       	mov	r21, r20
    5714:	44 27       	eor	r20, r20
  tmp |= buff[2];
    5716:	2b 81       	ldd	r18, Y+3	; 0x03
    5718:	42 2b       	or	r20, r18
  tmp <<= 8;
    571a:	76 2f       	mov	r23, r22
    571c:	65 2f       	mov	r22, r21
    571e:	54 2f       	mov	r21, r20
    5720:	44 27       	eor	r20, r20
  tmp |= buff[3];

  *data = tmp;
    5722:	2c 81       	ldd	r18, Y+4	; 0x04
    5724:	42 2b       	or	r20, r18
    5726:	f7 01       	movw	r30, r14
    5728:	40 83       	st	Z, r20
    572a:	51 83       	std	Z+1, r21	; 0x01
    572c:	62 83       	std	Z+2, r22	; 0x02
    572e:	73 83       	std	Z+3, r23	; 0x03

  return r;
}
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
    5736:	0f 90       	pop	r0
    5738:	df 91       	pop	r29
    573a:	cf 91       	pop	r28
    573c:	1f 91       	pop	r17
    573e:	0f 91       	pop	r16
    5740:	ff 90       	pop	r15
    5742:	ef 90       	pop	r14
    5744:	08 95       	ret

00005746 <VL53L0X_WriteMulti>:

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    5746:	0f 93       	push	r16
    5748:	1f 93       	push	r17
    574a:	cf 93       	push	r28
    574c:	00 34       	cpi	r16, 0x40	; 64
    574e:	11 05       	cpc	r17, r1
    5750:	21 05       	cpc	r18, r1
    5752:	31 05       	cpc	r19, r1
    5754:	10 f0       	brcs	.+4      	; 0x575a <VL53L0X_WriteMulti+0x14>
    5756:	cc ef       	ldi	r28, 0xFC	; 252
    5758:	01 c0       	rjmp	.+2      	; 0x575c <VL53L0X_WriteMulti+0x16>
    575a:	c0 e0       	ldi	r28, 0x00	; 0
    575c:	fc 01       	movw	r30, r24
    575e:	ef 5b       	subi	r30, 0xBF	; 191
    5760:	fe 4f       	sbci	r31, 0xFE	; 254
    5762:	80 81       	ld	r24, Z
    5764:	19 df       	rcall	.-462    	; 0x5598 <VL53L0X_write_multi>
    5766:	89 2b       	or	r24, r25
    5768:	09 f0       	breq	.+2      	; 0x576c <VL53L0X_WriteMulti+0x26>
    576a:	cc ee       	ldi	r28, 0xEC	; 236
    576c:	8c 2f       	mov	r24, r28
    576e:	cf 91       	pop	r28
    5770:	1f 91       	pop	r17
    5772:	0f 91       	pop	r16
    5774:	08 95       	ret

00005776 <VL53L0X_ReadMulti>:
    5776:	0f 93       	push	r16
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	00 34       	cpi	r16, 0x40	; 64
    577e:	11 05       	cpc	r17, r1
    5780:	21 05       	cpc	r18, r1
    5782:	31 05       	cpc	r19, r1
    5784:	10 f0       	brcs	.+4      	; 0x578a <VL53L0X_ReadMulti+0x14>
    5786:	cc ef       	ldi	r28, 0xFC	; 252
    5788:	01 c0       	rjmp	.+2      	; 0x578c <VL53L0X_ReadMulti+0x16>
    578a:	c0 e0       	ldi	r28, 0x00	; 0
    578c:	fc 01       	movw	r30, r24
    578e:	ef 5b       	subi	r30, 0xBF	; 191
    5790:	fe 4f       	sbci	r31, 0xFE	; 254
    5792:	80 81       	ld	r24, Z
    5794:	22 df       	rcall	.-444    	; 0x55da <VL53L0X_read_multi>
    5796:	89 2b       	or	r24, r25
    5798:	09 f0       	breq	.+2      	; 0x579c <VL53L0X_ReadMulti+0x26>
    579a:	cc ee       	ldi	r28, 0xEC	; 236
    579c:	8c 2f       	mov	r24, r28
    579e:	cf 91       	pop	r28
    57a0:	1f 91       	pop	r17
    57a2:	0f 91       	pop	r16
    57a4:	08 95       	ret

000057a6 <VL53L0X_WrByte>:
    57a6:	8f 5b       	subi	r24, 0xBF	; 191
    57a8:	9e 4f       	sbci	r25, 0xFE	; 254
    57aa:	fc 01       	movw	r30, r24
    57ac:	80 81       	ld	r24, Z
    57ae:	36 df       	rcall	.-404    	; 0x561c <VL53L0X_write_byte>
    57b0:	89 2b       	or	r24, r25
    57b2:	11 f0       	breq	.+4      	; 0x57b8 <VL53L0X_WrByte+0x12>
    57b4:	8c ee       	ldi	r24, 0xEC	; 236
    57b6:	08 95       	ret
    57b8:	80 e0       	ldi	r24, 0x00	; 0
    57ba:	08 95       	ret

000057bc <VL53L0X_WrWord>:
    57bc:	8f 5b       	subi	r24, 0xBF	; 191
    57be:	9e 4f       	sbci	r25, 0xFE	; 254
    57c0:	fc 01       	movw	r30, r24
    57c2:	80 81       	ld	r24, Z
    57c4:	41 df       	rcall	.-382    	; 0x5648 <VL53L0X_write_word>
    57c6:	89 2b       	or	r24, r25
    57c8:	11 f0       	breq	.+4      	; 0x57ce <VL53L0X_WrWord+0x12>
    57ca:	8c ee       	ldi	r24, 0xEC	; 236
    57cc:	08 95       	ret
    57ce:	80 e0       	ldi	r24, 0x00	; 0
    57d0:	08 95       	ret

000057d2 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
    57d2:	ef 92       	push	r14
    57d4:	ff 92       	push	r15
    57d6:	0f 93       	push	r16
    57d8:	1f 93       	push	r17
    57da:	cf 93       	push	r28
    57dc:	df 93       	push	r29
    57de:	1f 92       	push	r1
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
    57e4:	f6 2e       	mov	r15, r22
    57e6:	e4 2e       	mov	r14, r20
    57e8:	12 2f       	mov	r17, r18
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
    57ea:	8f 5b       	subi	r24, 0xBF	; 191
    57ec:	9e 4f       	sbci	r25, 0xFE	; 254
    57ee:	fc 01       	movw	r30, r24
    57f0:	00 81       	ld	r16, Z

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
    57f2:	ae 01       	movw	r20, r28
    57f4:	4f 5f       	subi	r20, 0xFF	; 255
    57f6:	5f 4f       	sbci	r21, 0xFF	; 255
    57f8:	80 2f       	mov	r24, r16
    57fa:	3e df       	rcall	.-388    	; 0x5678 <VL53L0X_read_byte>

    if (status_int != 0)
    57fc:	89 2b       	or	r24, r25
    57fe:	21 f0       	breq	.+8      	; 0x5808 <VL53L0X_UpdateByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5800:	8c ee       	ldi	r24, 0xEC	; 236
    5802:	0c c0       	rjmp	.+24     	; 0x581c <VL53L0X_UpdateByte+0x4a>
    5804:	80 e0       	ldi	r24, 0x00	; 0
    5806:	0a c0       	rjmp	.+20     	; 0x581c <VL53L0X_UpdateByte+0x4a>

    if (Status == VL53L0X_ERROR_NONE) {
        data = (data & AndData) | OrData;
    5808:	49 81       	ldd	r20, Y+1	; 0x01
    580a:	4e 21       	and	r20, r14
    580c:	41 2b       	or	r20, r17
    580e:	49 83       	std	Y+1, r20	; 0x01
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
    5810:	6f 2d       	mov	r22, r15
    5812:	80 2f       	mov	r24, r16
    5814:	03 df       	rcall	.-506    	; 0x561c <VL53L0X_write_byte>

        if (status_int != 0)
    5816:	89 2b       	or	r24, r25
    5818:	a9 f3       	breq	.-22     	; 0x5804 <VL53L0X_UpdateByte+0x32>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    581a:	8c ee       	ldi	r24, 0xEC	; 236
    }

    return Status;
}
    581c:	0f 90       	pop	r0
    581e:	df 91       	pop	r29
    5820:	cf 91       	pop	r28
    5822:	1f 91       	pop	r17
    5824:	0f 91       	pop	r16
    5826:	ff 90       	pop	r15
    5828:	ef 90       	pop	r14
    582a:	08 95       	ret

0000582c <VL53L0X_RdByte>:
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
    582c:	8f 5b       	subi	r24, 0xBF	; 191
    582e:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
    5830:	fc 01       	movw	r30, r24
    5832:	80 81       	ld	r24, Z
    5834:	21 df       	rcall	.-446    	; 0x5678 <VL53L0X_read_byte>

    if (status_int != 0)
    5836:	89 2b       	or	r24, r25
    5838:	11 f0       	breq	.+4      	; 0x583e <VL53L0X_RdByte+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    583a:	8c ee       	ldi	r24, 0xEC	; 236
    583c:	08 95       	ret

    return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    583e:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    5840:	08 95       	ret

00005842 <VL53L0X_RdWord>:
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
    5842:	8f 5b       	subi	r24, 0xBF	; 191
    5844:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_word(deviceAddress, index, data);
    5846:	fc 01       	movw	r30, r24
    5848:	80 81       	ld	r24, Z
    584a:	20 df       	rcall	.-448    	; 0x568c <VL53L0X_read_word>

    if (status_int != 0)
    584c:	89 2b       	or	r24, r25
    584e:	11 f0       	breq	.+4      	; 0x5854 <VL53L0X_RdWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5850:	8c ee       	ldi	r24, 0xEC	; 236
    5852:	08 95       	ret

    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    5854:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    5856:	08 95       	ret

00005858 <VL53L0X_RdDWord>:
VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
    5858:	8f 5b       	subi	r24, 0xBF	; 191
    585a:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
    585c:	fc 01       	movw	r30, r24
    585e:	80 81       	ld	r24, Z
    5860:	39 df       	rcall	.-398    	; 0x56d4 <VL53L0X_read_dword>

    if (status_int != 0)
    5862:	89 2b       	or	r24, r25
    5864:	11 f0       	breq	.+4      	; 0x586a <VL53L0X_RdDWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5866:	8c ee       	ldi	r24, 0xEC	; 236
    5868:	08 95       	ret

    return Status;
}

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    586a:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    586c:	08 95       	ret

0000586e <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    586e:	cf 93       	push	r28
    5870:	df 93       	push	r29
    5872:	00 d0       	rcall	.+0      	; 0x5874 <VL53L0X_PollingDelay+0x6>
    5874:	00 d0       	rcall	.+0      	; 0x5876 <VL53L0X_PollingDelay+0x8>
    5876:	cd b7       	in	r28, 0x3d	; 61
    5878:	de b7       	in	r29, 0x3e	; 62
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
    volatile uint32_t i;
    LOG_FUNCTION_START("");

    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
    587a:	19 82       	std	Y+1, r1	; 0x01
    587c:	1a 82       	std	Y+2, r1	; 0x02
    587e:	1b 82       	std	Y+3, r1	; 0x03
    5880:	1c 82       	std	Y+4, r1	; 0x04
    5882:	89 81       	ldd	r24, Y+1	; 0x01
    5884:	9a 81       	ldd	r25, Y+2	; 0x02
    5886:	ab 81       	ldd	r26, Y+3	; 0x03
    5888:	bc 81       	ldd	r27, Y+4	; 0x04
    588a:	8a 3f       	cpi	r24, 0xFA	; 250
    588c:	91 05       	cpc	r25, r1
    588e:	a1 05       	cpc	r26, r1
    5890:	b1 05       	cpc	r27, r1
    5892:	a8 f4       	brcc	.+42     	; 0x58be <VL53L0X_PollingDelay+0x50>
        //Do nothing
        asm("nop");
    5894:	00 00       	nop
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
    volatile uint32_t i;
    LOG_FUNCTION_START("");

    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
    5896:	89 81       	ldd	r24, Y+1	; 0x01
    5898:	9a 81       	ldd	r25, Y+2	; 0x02
    589a:	ab 81       	ldd	r26, Y+3	; 0x03
    589c:	bc 81       	ldd	r27, Y+4	; 0x04
    589e:	01 96       	adiw	r24, 0x01	; 1
    58a0:	a1 1d       	adc	r26, r1
    58a2:	b1 1d       	adc	r27, r1
    58a4:	89 83       	std	Y+1, r24	; 0x01
    58a6:	9a 83       	std	Y+2, r25	; 0x02
    58a8:	ab 83       	std	Y+3, r26	; 0x03
    58aa:	bc 83       	std	Y+4, r27	; 0x04
    58ac:	89 81       	ldd	r24, Y+1	; 0x01
    58ae:	9a 81       	ldd	r25, Y+2	; 0x02
    58b0:	ab 81       	ldd	r26, Y+3	; 0x03
    58b2:	bc 81       	ldd	r27, Y+4	; 0x04
    58b4:	8a 3f       	cpi	r24, 0xFA	; 250
    58b6:	91 05       	cpc	r25, r1
    58b8:	a1 05       	cpc	r26, r1
    58ba:	b1 05       	cpc	r27, r1
    58bc:	58 f3       	brcs	.-42     	; 0x5894 <VL53L0X_PollingDelay+0x26>
        asm("nop");
    }

    LOG_FUNCTION_END(status);
    return status;
}
    58be:	80 e0       	ldi	r24, 0x00	; 0
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	0f 90       	pop	r0
    58c6:	0f 90       	pop	r0
    58c8:	df 91       	pop	r29
    58ca:	cf 91       	pop	r28
    58cc:	08 95       	ret

000058ce <__mulsi3>:
    58ce:	db 01       	movw	r26, r22
    58d0:	8f 93       	push	r24
    58d2:	9f 93       	push	r25
    58d4:	3c d0       	rcall	.+120    	; 0x594e <__muluhisi3>
    58d6:	bf 91       	pop	r27
    58d8:	af 91       	pop	r26
    58da:	a2 9f       	mul	r26, r18
    58dc:	80 0d       	add	r24, r0
    58de:	91 1d       	adc	r25, r1
    58e0:	a3 9f       	mul	r26, r19
    58e2:	90 0d       	add	r25, r0
    58e4:	b2 9f       	mul	r27, r18
    58e6:	90 0d       	add	r25, r0
    58e8:	11 24       	eor	r1, r1
    58ea:	08 95       	ret

000058ec <__udivmodsi4>:
    58ec:	a1 e2       	ldi	r26, 0x21	; 33
    58ee:	1a 2e       	mov	r1, r26
    58f0:	aa 1b       	sub	r26, r26
    58f2:	bb 1b       	sub	r27, r27
    58f4:	fd 01       	movw	r30, r26
    58f6:	0d c0       	rjmp	.+26     	; 0x5912 <__udivmodsi4_ep>

000058f8 <__udivmodsi4_loop>:
    58f8:	aa 1f       	adc	r26, r26
    58fa:	bb 1f       	adc	r27, r27
    58fc:	ee 1f       	adc	r30, r30
    58fe:	ff 1f       	adc	r31, r31
    5900:	a2 17       	cp	r26, r18
    5902:	b3 07       	cpc	r27, r19
    5904:	e4 07       	cpc	r30, r20
    5906:	f5 07       	cpc	r31, r21
    5908:	20 f0       	brcs	.+8      	; 0x5912 <__udivmodsi4_ep>
    590a:	a2 1b       	sub	r26, r18
    590c:	b3 0b       	sbc	r27, r19
    590e:	e4 0b       	sbc	r30, r20
    5910:	f5 0b       	sbc	r31, r21

00005912 <__udivmodsi4_ep>:
    5912:	66 1f       	adc	r22, r22
    5914:	77 1f       	adc	r23, r23
    5916:	88 1f       	adc	r24, r24
    5918:	99 1f       	adc	r25, r25
    591a:	1a 94       	dec	r1
    591c:	69 f7       	brne	.-38     	; 0x58f8 <__udivmodsi4_loop>
    591e:	60 95       	com	r22
    5920:	70 95       	com	r23
    5922:	80 95       	com	r24
    5924:	90 95       	com	r25
    5926:	9b 01       	movw	r18, r22
    5928:	ac 01       	movw	r20, r24
    592a:	bd 01       	movw	r22, r26
    592c:	cf 01       	movw	r24, r30
    592e:	08 95       	ret

00005930 <__umulhisi3>:
    5930:	a2 9f       	mul	r26, r18
    5932:	b0 01       	movw	r22, r0
    5934:	b3 9f       	mul	r27, r19
    5936:	c0 01       	movw	r24, r0
    5938:	a3 9f       	mul	r26, r19
    593a:	70 0d       	add	r23, r0
    593c:	81 1d       	adc	r24, r1
    593e:	11 24       	eor	r1, r1
    5940:	91 1d       	adc	r25, r1
    5942:	b2 9f       	mul	r27, r18
    5944:	70 0d       	add	r23, r0
    5946:	81 1d       	adc	r24, r1
    5948:	11 24       	eor	r1, r1
    594a:	91 1d       	adc	r25, r1
    594c:	08 95       	ret

0000594e <__muluhisi3>:
    594e:	f0 df       	rcall	.-32     	; 0x5930 <__umulhisi3>
    5950:	a5 9f       	mul	r26, r21
    5952:	90 0d       	add	r25, r0
    5954:	b4 9f       	mul	r27, r20
    5956:	90 0d       	add	r25, r0
    5958:	a4 9f       	mul	r26, r20
    595a:	80 0d       	add	r24, r0
    595c:	91 1d       	adc	r25, r1
    595e:	11 24       	eor	r1, r1
    5960:	08 95       	ret

00005962 <__umulsidi3>:
    5962:	e8 94       	clt

00005964 <__umulsidi3_helper>:
    5964:	df 93       	push	r29
    5966:	cf 93       	push	r28
    5968:	fc 01       	movw	r30, r24
    596a:	db 01       	movw	r26, r22
    596c:	e1 df       	rcall	.-62     	; 0x5930 <__umulhisi3>
    596e:	7f 93       	push	r23
    5970:	6f 93       	push	r22
    5972:	e9 01       	movw	r28, r18
    5974:	9a 01       	movw	r18, r20
    5976:	ac 01       	movw	r20, r24
    5978:	bf 93       	push	r27
    597a:	af 93       	push	r26
    597c:	3f 93       	push	r19
    597e:	2f 93       	push	r18
    5980:	df 01       	movw	r26, r30
    5982:	d6 df       	rcall	.-84     	; 0x5930 <__umulhisi3>
    5984:	26 f4       	brtc	.+8      	; 0x598e <__umulsidi3_helper+0x2a>
    5986:	6c 1b       	sub	r22, r28
    5988:	7d 0b       	sbc	r23, r29
    598a:	82 0b       	sbc	r24, r18
    598c:	93 0b       	sbc	r25, r19
    598e:	9e 01       	movw	r18, r28
    5990:	eb 01       	movw	r28, r22
    5992:	fc 01       	movw	r30, r24
    5994:	2b d0       	rcall	.+86     	; 0x59ec <__muldi3_6>
    5996:	af 91       	pop	r26
    5998:	bf 91       	pop	r27
    599a:	2f 91       	pop	r18
    599c:	3f 91       	pop	r19
    599e:	26 d0       	rcall	.+76     	; 0x59ec <__muldi3_6>
    59a0:	be 01       	movw	r22, r28
    59a2:	cf 01       	movw	r24, r30
    59a4:	f9 01       	movw	r30, r18
    59a6:	2f 91       	pop	r18
    59a8:	3f 91       	pop	r19
    59aa:	cf 91       	pop	r28
    59ac:	df 91       	pop	r29
    59ae:	08 95       	ret

000059b0 <__ashrdi3>:
    59b0:	97 fb       	bst	r25, 7
    59b2:	10 f8       	bld	r1, 0

000059b4 <__lshrdi3>:
    59b4:	16 94       	lsr	r1
    59b6:	00 08       	sbc	r0, r0
    59b8:	0f 93       	push	r16
    59ba:	08 30       	cpi	r16, 0x08	; 8
    59bc:	98 f0       	brcs	.+38     	; 0x59e4 <__lshrdi3+0x30>
    59be:	08 50       	subi	r16, 0x08	; 8
    59c0:	23 2f       	mov	r18, r19
    59c2:	34 2f       	mov	r19, r20
    59c4:	45 2f       	mov	r20, r21
    59c6:	56 2f       	mov	r21, r22
    59c8:	67 2f       	mov	r22, r23
    59ca:	78 2f       	mov	r23, r24
    59cc:	89 2f       	mov	r24, r25
    59ce:	90 2d       	mov	r25, r0
    59d0:	f4 cf       	rjmp	.-24     	; 0x59ba <__lshrdi3+0x6>
    59d2:	05 94       	asr	r0
    59d4:	97 95       	ror	r25
    59d6:	87 95       	ror	r24
    59d8:	77 95       	ror	r23
    59da:	67 95       	ror	r22
    59dc:	57 95       	ror	r21
    59de:	47 95       	ror	r20
    59e0:	37 95       	ror	r19
    59e2:	27 95       	ror	r18
    59e4:	0a 95       	dec	r16
    59e6:	aa f7       	brpl	.-22     	; 0x59d2 <__lshrdi3+0x1e>
    59e8:	0f 91       	pop	r16
    59ea:	08 95       	ret

000059ec <__muldi3_6>:
    59ec:	a1 df       	rcall	.-190    	; 0x5930 <__umulhisi3>
    59ee:	46 0f       	add	r20, r22
    59f0:	57 1f       	adc	r21, r23
    59f2:	c8 1f       	adc	r28, r24
    59f4:	d9 1f       	adc	r29, r25
    59f6:	08 f4       	brcc	.+2      	; 0x59fa <__muldi3_6+0xe>
    59f8:	31 96       	adiw	r30, 0x01	; 1
    59fa:	08 95       	ret

000059fc <strcpy>:
    59fc:	fb 01       	movw	r30, r22
    59fe:	dc 01       	movw	r26, r24
    5a00:	01 90       	ld	r0, Z+
    5a02:	0d 92       	st	X+, r0
    5a04:	00 20       	and	r0, r0
    5a06:	e1 f7       	brne	.-8      	; 0x5a00 <strcpy+0x4>
    5a08:	08 95       	ret

00005a0a <_exit>:
    5a0a:	f8 94       	cli

00005a0c <__stop_program>:
    5a0c:	ff cf       	rjmp	.-2      	; 0x5a0c <__stop_program>
