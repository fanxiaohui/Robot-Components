
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ba  00800100  000066f6  0000678a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  008003ba  008003ba  00006a44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006a44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006a74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00006ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010c6a  00000000  00000000  0000747c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002317  00000000  00000000  000180e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000060b0  00000000  00000000  0001a3fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029e8  00000000  00000000  000204b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004751  00000000  00000000  00022e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011465  00000000  00000000  000275e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  00038a4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	8a c1       	rjmp	.+788    	; 0x31a <__vector_1>
       6:	00 00       	nop
       8:	92 c1       	rjmp	.+804    	; 0x32e <__vector_2>
       a:	00 00       	nop
       c:	9a c1       	rjmp	.+820    	; 0x342 <__vector_3>
       e:	00 00       	nop
      10:	5c c1       	rjmp	.+696    	; 0x2ca <__vector_4>
      12:	00 00       	nop
      14:	64 c1       	rjmp	.+712    	; 0x2de <__vector_5>
      16:	00 00       	nop
      18:	6c c1       	rjmp	.+728    	; 0x2f2 <__vector_6>
      1a:	00 00       	nop
      1c:	74 c1       	rjmp	.+744    	; 0x306 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <__vector_8>
      24:	f3 c6       	rjmp	.+3558   	; 0xe0c <__vector_9>
      26:	00 00       	nop
      28:	2d c7       	rjmp	.+3674   	; 0xe84 <__vector_10>
      2a:	00 00       	nop
      2c:	c4 c6       	rjmp	.+3464   	; 0xdb6 <__vector_11>
      2e:	00 00       	nop
      30:	65 c6       	rjmp	.+3274   	; 0xcfc <__vector_12>
      32:	00 00       	nop
      34:	d8 c5       	rjmp	.+2992   	; 0xbe6 <__vector_13>
      36:	00 00       	nop
      38:	36 c6       	rjmp	.+3180   	; 0xca6 <__vector_14>
      3a:	00 00       	nop
      3c:	a9 c5       	rjmp	.+2898   	; 0xb90 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e2 c3       	rjmp	.+1988   	; 0x812 <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <__vector_20>
      54:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__vector_21>
      58:	0c 94 eb 0a 	jmp	0x15d6	; 0x15d6 <__vector_22>
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a 08       	sbc	r4, r10
      8e:	53 08       	sbc	r5, r3
      90:	5c 08       	sbc	r5, r12
      92:	65 08       	sbc	r6, r5
      94:	6e 08       	sbc	r6, r14
      96:	77 08       	sbc	r7, r7
      98:	80 08       	sbc	r8, r0

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	13 e0       	ldi	r17, 0x03	; 3
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e6 ef       	ldi	r30, 0xF6	; 246
      ae:	f6 e6       	ldi	r31, 0x66	; 102
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	aa 3b       	cpi	r26, 0xBA	; 186
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	aa eb       	ldi	r26, 0xBA	; 186
      c4:	b3 e0       	ldi	r27, 0x03	; 3
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 36       	cpi	r26, 0x6E	; 110
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	90 d0       	rcall	.+288    	; 0x1f2 <main>
      d2:	0c 94 79 33 	jmp	0x66f2	; 0x66f2 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <incrementMillis>:
	uart_start(s_debugUart);
}

void incrementMillis()
{
	milliseconds++;
      d8:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <__data_end>
      dc:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <__data_end+0x1>
      e0:	a0 91 bc 03 	lds	r26, 0x03BC	; 0x8003bc <__data_end+0x2>
      e4:	b0 91 bd 03 	lds	r27, 0x03BD	; 0x8003bd <__data_end+0x3>
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	a1 1d       	adc	r26, r1
      ec:	b1 1d       	adc	r27, r1
      ee:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__data_end>
      f2:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <__data_end+0x1>
      f6:	a0 93 bc 03 	sts	0x03BC, r26	; 0x8003bc <__data_end+0x2>
      fa:	b0 93 bd 03 	sts	0x03BD, r27	; 0x8003bd <__data_end+0x3>
      fe:	08 95       	ret

00000100 <debug_init>:
timer_struct_t s_schedulerTimer;

volatile u32 milliseconds = 0;

void debug_init()
{
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
	s_debugUart.peripheral = UART0;
     104:	ee eb       	ldi	r30, 0xBE	; 190
     106:	f3 e0       	ldi	r31, 0x03	; 3
     108:	10 82       	st	Z, r1
	s_debugUart.baudRate = _19200;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	18 2f       	mov	r17, r24
     10e:	81 83       	std	Z+1, r24	; 0x01
     110:	8b e4       	ldi	r24, 0x4B	; 75
     112:	82 83       	std	Z+2, r24	; 0x02
     114:	13 82       	std	Z+3, r1	; 0x03
     116:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
     118:	83 e0       	ldi	r24, 0x03	; 3
     11a:	78 2f       	mov	r23, r24
     11c:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
     11e:	92 e0       	ldi	r25, 0x02	; 2
     120:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.stopBits = _1BIT;
     122:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = TRUE;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	58 2f       	mov	r21, r24
     128:	85 83       	std	Z+5, r24	; 0x05
	s_debugUart.useTx = TRUE;
     12a:	68 2f       	mov	r22, r24
     12c:	86 83       	std	Z+6, r24	; 0x06

	uart_init(s_debugUart);
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     134:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     138:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 12 0b 	call	0x1624	; 0x1624 <uart_init>
	uart_start(s_debugUart);
     142:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <s_debugUart>
     146:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <s_debugUart+0x1>
     14a:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     14e:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     152:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     156:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <s_debugUart+0x5>
     15a:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <s_debugUart+0x6>
     15e:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <s_debugUart+0x7>
     162:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <s_debugUart+0x8>
     166:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <s_debugUart+0x9>
     16a:	0e 94 ce 0b 	call	0x179c	; 0x179c <uart_start>
}
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	08 95       	ret

00000174 <scheduler_init>:
{
	milliseconds++;
}

void scheduler_init()
{
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
	s_schedulerTimer.frequency = 1000;
     178:	e8 ec       	ldi	r30, 0xC8	; 200
     17a:	f3 e0       	ldi	r31, 0x03	; 3
     17c:	88 ee       	ldi	r24, 0xE8	; 232
     17e:	58 2f       	mov	r21, r24
     180:	81 83       	std	Z+1, r24	; 0x01
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	82 83       	std	Z+2, r24	; 0x02
     186:	13 82       	std	Z+3, r1	; 0x03
     188:	14 82       	std	Z+4, r1	; 0x04
	s_schedulerTimer.peripheral = TIMER1;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	48 2f       	mov	r20, r24
     18e:	80 83       	st	Z, r24

	timer_init(s_schedulerTimer);
     190:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     194:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     198:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     19c:	9e d6       	rcall	.+3388   	; 0xeda <timer_init>
	timer_attachInterrupt(s_schedulerTimer, OVERFLOW, incrementMillis);
     19e:	0c e6       	ldi	r16, 0x6C	; 108
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <s_schedulerTimer>
     1a8:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <s_schedulerTimer+0x1>
     1ac:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     1b0:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     1b4:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     1b8:	0e 94 ba 09 	call	0x1374	; 0x1374 <timer_attachInterrupt>
	timer_enableInterrupt(s_schedulerTimer, OVERFLOW);
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <s_schedulerTimer>
     1c2:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <s_schedulerTimer+0x1>
     1c6:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     1ca:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     1ce:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     1d2:	0e 94 fe 08 	call	0x11fc	; 0x11fc <timer_enableInterrupt>
	timer_start(s_schedulerTimer);
     1d6:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <s_schedulerTimer>
     1da:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <s_schedulerTimer+0x1>
     1de:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     1e2:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     1e6:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     1ea:	c3 d7       	rcall	.+3974   	; 0x1172 <timer_start>
}
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	08 95       	ret

000001f2 <main>:

int main(void)
{
	device_disableJTAG();
     1f2:	47 d0       	rcall	.+142    	; 0x282 <device_disableJTAG>
     1f4:	85 df       	rcall	.-246    	; 0x100 <debug_init>
     1f6:	be df       	rcall	.-132    	; 0x174 <scheduler_init>
     1f8:	78 94       	sei
     1fa:	0e 94 88 0c 	call	0x1910	; 0x1910 <vl53l0x_init>
     1fe:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vl53l0x_calibrate>
     202:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vl53l0x_start>
     206:	0f 2e       	mov	r0, r31
     208:	f1 e6       	ldi	r31, 0x61	; 97
     20a:	ef 2e       	mov	r14, r31
     20c:	f1 2c       	mov	r15, r1
     20e:	f0 2d       	mov	r31, r0
     210:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <s_debugUart>
     214:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <s_debugUart+0x1>
     218:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     21c:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     220:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     224:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <s_debugUart+0x5>
     228:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <s_debugUart+0x6>
     22c:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <s_debugUart+0x7>
     230:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <s_debugUart+0x8>
     234:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <s_debugUart+0x9>
     238:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <uart_transmit>
     23c:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <vl53l0x_getDistance>
     240:	7c 01       	movw	r14, r24
     242:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <s_debugUart>
     246:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <s_debugUart+0x1>
     24a:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     24e:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     252:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     256:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <s_debugUart+0x5>
     25a:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <s_debugUart+0x6>
     25e:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <s_debugUart+0x7>
     262:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <s_debugUart+0x8>
     266:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <s_debugUart+0x9>
     26a:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <uart_transmit>
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	80 e7       	ldi	r24, 0x70	; 112
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	21 50       	subi	r18, 0x01	; 1
     276:	80 40       	sbci	r24, 0x00	; 0
     278:	90 40       	sbci	r25, 0x00	; 0
     27a:	e1 f7       	brne	.-8      	; 0x274 <main+0x82>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <main+0x8c>
     27e:	00 00       	nop
     280:	dd cf       	rjmp	.-70     	; 0x23c <main+0x4a>

00000282 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     282:	80 e8       	ldi	r24, 0x80	; 128
     284:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     286:	85 bf       	out	0x35, r24	; 53
     288:	08 95       	ret

0000028a <gpio_changeDirection>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
     28a:	61 30       	cpi	r22, 0x01	; 1
     28c:	61 f0       	breq	.+24     	; 0x2a6 <gpio_changeDirection+0x1c>
     28e:	28 f0       	brcs	.+10     	; 0x29a <gpio_changeDirection+0x10>
     290:	62 30       	cpi	r22, 0x02	; 2
     292:	79 f0       	breq	.+30     	; 0x2b2 <gpio_changeDirection+0x28>
     294:	63 30       	cpi	r22, 0x03	; 3
     296:	99 f0       	breq	.+38     	; 0x2be <gpio_changeDirection+0x34>
     298:	08 95       	ret
     29a:	48 2f       	mov	r20, r24
     29c:	67 2f       	mov	r22, r23
     29e:	81 e2       	ldi	r24, 0x21	; 33
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	5e c2       	rjmp	.+1212   	; 0x760 <updateBit>
     2a4:	08 95       	ret
     2a6:	48 2f       	mov	r20, r24
     2a8:	67 2f       	mov	r22, r23
     2aa:	84 e2       	ldi	r24, 0x24	; 36
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	58 c2       	rjmp	.+1200   	; 0x760 <updateBit>
     2b0:	08 95       	ret
     2b2:	48 2f       	mov	r20, r24
     2b4:	67 2f       	mov	r22, r23
     2b6:	87 e2       	ldi	r24, 0x27	; 39
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	52 c2       	rjmp	.+1188   	; 0x760 <updateBit>
     2bc:	08 95       	ret
     2be:	48 2f       	mov	r20, r24
     2c0:	67 2f       	mov	r22, r23
     2c2:	8a e2       	ldi	r24, 0x2A	; 42
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	4c c2       	rjmp	.+1176   	; 0x760 <updateBit>
     2c8:	08 95       	ret

000002ca <__vector_4>:
     2ca:	1f 92       	push	r1
     2cc:	0f 92       	push	r0
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	0f 92       	push	r0
     2d2:	11 24       	eor	r1, r1
     2d4:	0f 90       	pop	r0
     2d6:	0f be       	out	0x3f, r0	; 63
     2d8:	0f 90       	pop	r0
     2da:	1f 90       	pop	r1
     2dc:	18 95       	reti

000002de <__vector_5>:
     2de:	1f 92       	push	r1
     2e0:	0f 92       	push	r0
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	0f 92       	push	r0
     2e6:	11 24       	eor	r1, r1
     2e8:	0f 90       	pop	r0
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	0f 90       	pop	r0
     2ee:	1f 90       	pop	r1
     2f0:	18 95       	reti

000002f2 <__vector_6>:
     2f2:	1f 92       	push	r1
     2f4:	0f 92       	push	r0
     2f6:	0f b6       	in	r0, 0x3f	; 63
     2f8:	0f 92       	push	r0
     2fa:	11 24       	eor	r1, r1
     2fc:	0f 90       	pop	r0
     2fe:	0f be       	out	0x3f, r0	; 63
     300:	0f 90       	pop	r0
     302:	1f 90       	pop	r1
     304:	18 95       	reti

00000306 <__vector_7>:
     306:	1f 92       	push	r1
     308:	0f 92       	push	r0
     30a:	0f b6       	in	r0, 0x3f	; 63
     30c:	0f 92       	push	r0
     30e:	11 24       	eor	r1, r1
     310:	0f 90       	pop	r0
     312:	0f be       	out	0x3f, r0	; 63
     314:	0f 90       	pop	r0
     316:	1f 90       	pop	r1
     318:	18 95       	reti

0000031a <__vector_1>:
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <__vector_2>:
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	0f 90       	pop	r0
     33a:	0f be       	out	0x3f, r0	; 63
     33c:	0f 90       	pop	r0
     33e:	1f 90       	pop	r1
     340:	18 95       	reti

00000342 <__vector_3>:
     342:	1f 92       	push	r1
     344:	0f 92       	push	r0
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	0f 92       	push	r0
     34a:	11 24       	eor	r1, r1
     34c:	0f 90       	pop	r0
     34e:	0f be       	out	0x3f, r0	; 63
     350:	0f 90       	pop	r0
     352:	1f 90       	pop	r1
     354:	18 95       	reti

00000356 <gpio_init>:
     356:	0f 93       	push	r16
     358:	1f 93       	push	r17
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
     35e:	c6 2f       	mov	r28, r22
     360:	17 2f       	mov	r17, r23
     362:	d8 2f       	mov	r29, r24
     364:	09 2f       	mov	r16, r25
     366:	91 df       	rcall	.-222    	; 0x28a <gpio_changeDirection>
     368:	d1 11       	cpse	r29, r1
     36a:	23 c0       	rjmp	.+70     	; 0x3b2 <gpio_init+0x5c>
     36c:	c1 30       	cpi	r28, 0x01	; 1
     36e:	81 f0       	breq	.+32     	; 0x390 <gpio_init+0x3a>
     370:	28 f0       	brcs	.+10     	; 0x37c <gpio_init+0x26>
     372:	c2 30       	cpi	r28, 0x02	; 2
     374:	99 f0       	breq	.+38     	; 0x39c <gpio_init+0x46>
     376:	c3 30       	cpi	r28, 0x03	; 3
     378:	b9 f0       	breq	.+46     	; 0x3a8 <gpio_init+0x52>
     37a:	1b c0       	rjmp	.+54     	; 0x3b2 <gpio_init+0x5c>
     37c:	40 2f       	mov	r20, r16
     37e:	61 2f       	mov	r22, r17
     380:	82 e2       	ldi	r24, 0x22	; 34
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	ed d1       	rcall	.+986    	; 0x760 <updateBit>
     386:	61 2f       	mov	r22, r17
     388:	8e e7       	ldi	r24, 0x7E	; 126
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0d d2       	rcall	.+1050   	; 0x7a8 <clearBit>
     38e:	11 c0       	rjmp	.+34     	; 0x3b2 <gpio_init+0x5c>
     390:	40 2f       	mov	r20, r16
     392:	61 2f       	mov	r22, r17
     394:	85 e2       	ldi	r24, 0x25	; 37
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	e3 d1       	rcall	.+966    	; 0x760 <updateBit>
     39a:	0b c0       	rjmp	.+22     	; 0x3b2 <gpio_init+0x5c>
     39c:	40 2f       	mov	r20, r16
     39e:	61 2f       	mov	r22, r17
     3a0:	88 e2       	ldi	r24, 0x28	; 40
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	dd d1       	rcall	.+954    	; 0x760 <updateBit>
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <gpio_init+0x5c>
     3a8:	40 2f       	mov	r20, r16
     3aa:	61 2f       	mov	r22, r17
     3ac:	8b e2       	ldi	r24, 0x2B	; 43
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	d7 d1       	rcall	.+942    	; 0x760 <updateBit>
     3b2:	df 91       	pop	r29
     3b4:	cf 91       	pop	r28
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	08 95       	ret

000003bc <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     3bc:	61 30       	cpi	r22, 0x01	; 1
     3be:	59 f0       	breq	.+22     	; 0x3d6 <gpio_out_set+0x1a>
     3c0:	28 f0       	brcs	.+10     	; 0x3cc <gpio_out_set+0x10>
     3c2:	62 30       	cpi	r22, 0x02	; 2
     3c4:	69 f0       	breq	.+26     	; 0x3e0 <gpio_out_set+0x24>
     3c6:	63 30       	cpi	r22, 0x03	; 3
     3c8:	81 f0       	breq	.+32     	; 0x3ea <gpio_out_set+0x2e>
     3ca:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     3cc:	67 2f       	mov	r22, r23
     3ce:	82 e2       	ldi	r24, 0x22	; 34
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	de c1       	rjmp	.+956    	; 0x790 <setBit>
			break;
     3d4:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     3d6:	67 2f       	mov	r22, r23
     3d8:	85 e2       	ldi	r24, 0x25	; 37
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	d9 c1       	rjmp	.+946    	; 0x790 <setBit>
			break;
     3de:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     3e0:	67 2f       	mov	r22, r23
     3e2:	88 e2       	ldi	r24, 0x28	; 40
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	d4 c1       	rjmp	.+936    	; 0x790 <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
     3e8:	08 95       	ret
     3ea:	67 2f       	mov	r22, r23
     3ec:	8b e2       	ldi	r24, 0x2B	; 43
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	cf c1       	rjmp	.+926    	; 0x790 <setBit>
     3f2:	08 95       	ret

000003f4 <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     3f4:	0f 93       	push	r16
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	8b 01       	movw	r16, r22
     3fe:	9c 01       	movw	r18, r24
     400:	ea 01       	movw	r28, r20
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	72 e1       	ldi	r23, 0x12	; 18
     406:	8a e7       	ldi	r24, 0x7A	; 122
     408:	90 e0       	ldi	r25, 0x00	; 0
     40a:	a9 01       	movw	r20, r18
     40c:	98 01       	movw	r18, r16
     40e:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     412:	ba 01       	movw	r22, r20
     414:	a9 01       	movw	r20, r18
     416:	40 51       	subi	r20, 0x10	; 16
     418:	51 09       	sbc	r21, r1
     41a:	61 09       	sbc	r22, r1
     41c:	71 09       	sbc	r23, r1
     41e:	db 01       	movw	r26, r22
     420:	ca 01       	movw	r24, r20
     422:	b6 95       	lsr	r27
     424:	a7 95       	ror	r26
     426:	97 95       	ror	r25
     428:	87 95       	ror	r24
     42a:	8f 3f       	cpi	r24, 0xFF	; 255
     42c:	91 05       	cpc	r25, r1
     42e:	a1 05       	cpc	r26, r1
     430:	b1 05       	cpc	r27, r1
     432:	09 f0       	breq	.+2      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
     434:	10 f4       	brcc	.+4      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     436:	18 82       	st	Y, r1
     438:	32 c0       	rjmp	.+100    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     43a:	db 01       	movw	r26, r22
     43c:	ca 01       	movw	r24, r20
     43e:	68 94       	set
     440:	12 f8       	bld	r1, 2
     442:	b6 95       	lsr	r27
     444:	a7 95       	ror	r26
     446:	97 95       	ror	r25
     448:	87 95       	ror	r24
     44a:	16 94       	lsr	r1
     44c:	d1 f7       	brne	.-12     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     44e:	8f 3f       	cpi	r24, 0xFF	; 255
     450:	91 05       	cpc	r25, r1
     452:	a1 05       	cpc	r26, r1
     454:	b1 05       	cpc	r27, r1
     456:	09 f0       	breq	.+2      	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     458:	18 f4       	brcc	.+6      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45a:	21 e0       	ldi	r18, 0x01	; 1
     45c:	28 83       	st	Y, r18
     45e:	1f c0       	rjmp	.+62     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     460:	db 01       	movw	r26, r22
     462:	ca 01       	movw	r24, r20
     464:	68 94       	set
     466:	14 f8       	bld	r1, 4
     468:	b6 95       	lsr	r27
     46a:	a7 95       	ror	r26
     46c:	97 95       	ror	r25
     46e:	87 95       	ror	r24
     470:	16 94       	lsr	r1
     472:	d1 f7       	brne	.-12     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     474:	8f 3f       	cpi	r24, 0xFF	; 255
     476:	91 05       	cpc	r25, r1
     478:	a1 05       	cpc	r26, r1
     47a:	b1 05       	cpc	r27, r1
     47c:	09 f0       	breq	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	18 f4       	brcc	.+6      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     480:	22 e0       	ldi	r18, 0x02	; 2
     482:	28 83       	st	Y, r18
     484:	0c c0       	rjmp	.+24     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
     486:	83 e0       	ldi	r24, 0x03	; 3
     488:	88 83       	st	Y, r24
     48a:	db 01       	movw	r26, r22
     48c:	ca 01       	movw	r24, r20
     48e:	68 94       	set
     490:	16 f8       	bld	r1, 6
     492:	b6 95       	lsr	r27
     494:	a7 95       	ror	r26
     496:	97 95       	ror	r25
     498:	87 95       	ror	r24
     49a:	16 94       	lsr	r1
     49c:	d1 f7       	brne	.-12     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	1f 91       	pop	r17
     4a4:	0f 91       	pop	r16
     4a6:	08 95       	ret

000004a8 <stopAndGetErrorCode>:
     4a8:	cf 93       	push	r28
     4aa:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4ae:	64 e0       	ldi	r22, 0x04	; 4
     4b0:	8c eb       	ldi	r24, 0xBC	; 188
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	6d d1       	rcall	.+730    	; 0x790 <setBit>
     4b6:	8c 2f       	mov	r24, r28
     4b8:	88 7f       	andi	r24, 0xF8	; 248
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <i2c_init>:
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	00 d0       	rcall	.+0      	; 0x4c4 <i2c_init+0x6>
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <i2c_init+0x8>
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <i2c_init+0xa>
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	5b 83       	std	Y+3, r21	; 0x03
     4ce:	6c 83       	std	Y+4, r22	; 0x04
     4d0:	7d 83       	std	Y+5, r23	; 0x05
     4d2:	8e 83       	std	Y+6, r24	; 0x06
     4d4:	6b 81       	ldd	r22, Y+3	; 0x03
     4d6:	7c 81       	ldd	r23, Y+4	; 0x04
     4d8:	8d 81       	ldd	r24, Y+5	; 0x05
     4da:	9e 81       	ldd	r25, Y+6	; 0x06
     4dc:	ae 01       	movw	r20, r28
     4de:	4f 5f       	subi	r20, 0xFF	; 255
     4e0:	5f 4f       	sbci	r21, 0xFF	; 255
     4e2:	88 df       	rcall	.-240    	; 0x3f4 <calculateTWBR>
     4e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	89 81       	ldd	r24, Y+1	; 0x01
     4ec:	6a d1       	rcall	.+724    	; 0x7c2 <checkBit>
     4ee:	48 2f       	mov	r20, r24
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	89 eb       	ldi	r24, 0xB9	; 185
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	34 d1       	rcall	.+616    	; 0x760 <updateBit>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	89 81       	ldd	r24, Y+1	; 0x01
     4fc:	62 d1       	rcall	.+708    	; 0x7c2 <checkBit>
     4fe:	48 2f       	mov	r20, r24
     500:	61 e0       	ldi	r22, 0x01	; 1
     502:	89 eb       	ldi	r24, 0xB9	; 185
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	2c d1       	rcall	.+600    	; 0x760 <updateBit>
     508:	62 e0       	ldi	r22, 0x02	; 2
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	22 df       	rcall	.-444    	; 0x356 <gpio_init>
     512:	62 e0       	ldi	r22, 0x02	; 2
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	91 e0       	ldi	r25, 0x01	; 1
     51a:	1d df       	rcall	.-454    	; 0x356 <gpio_init>
     51c:	26 96       	adiw	r28, 0x06	; 6
     51e:	0f b6       	in	r0, 0x3f	; 63
     520:	f8 94       	cli
     522:	de bf       	out	0x3e, r29	; 62
     524:	0f be       	out	0x3f, r0	; 63
     526:	cd bf       	out	0x3d, r28	; 61
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <i2c_start>:
     52e:	62 e0       	ldi	r22, 0x02	; 2
     530:	8c eb       	ldi	r24, 0xBC	; 188
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2d c1       	rjmp	.+602    	; 0x790 <setBit>
     536:	08 95       	ret

00000538 <i2c_transmit>:
}

u8 i2c_transmit(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     538:	af 92       	push	r10
     53a:	bf 92       	push	r11
     53c:	cf 92       	push	r12
     53e:	df 92       	push	r13
     540:	ef 92       	push	r14
     542:	ff 92       	push	r15
     544:	0f 93       	push	r16
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	18 2f       	mov	r17, r24
     54e:	6b 01       	movw	r12, r22
     550:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     552:	65 e0       	ldi	r22, 0x05	; 5
     554:	8c eb       	ldi	r24, 0xBC	; 188
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	1b d1       	rcall	.+566    	; 0x790 <setBit>
	/* Clear I2C flag */
	setBit(&TWCR, TWINT);
     55a:	67 e0       	ldi	r22, 0x07	; 7
     55c:	8c eb       	ldi	r24, 0xBC	; 188
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	17 d1       	rcall	.+558    	; 0x790 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     562:	cc eb       	ldi	r28, 0xBC	; 188
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	88 81       	ld	r24, Y
     568:	67 e0       	ldi	r22, 0x07	; 7
     56a:	2b d1       	rcall	.+598    	; 0x7c2 <checkBit>
     56c:	88 23       	and	r24, r24
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     56e:	d9 f3       	breq	.-10     	; 0x566 <i2c_transmit+0x2e>
     570:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     574:	88 7f       	andi	r24, 0xF8	; 248
     576:	88 30       	cpi	r24, 0x08	; 8
     578:	09 f0       	breq	.+2      	; 0x57c <i2c_transmit+0x44>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     57a:	47 c0       	rjmp	.+142    	; 0x60a <i2c_transmit+0xd2>
     57c:	11 0f       	add	r17, r17
		/* Set write mode */
		clearBit(&TWDR, TWD0);
     57e:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     582:	60 e0       	ldi	r22, 0x00	; 0
		/* Clear start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     584:	8b eb       	ldi	r24, 0xBB	; 187
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0f d1       	rcall	.+542    	; 0x7a8 <clearBit>
     58a:	65 e0       	ldi	r22, 0x05	; 5
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     58c:	8c eb       	ldi	r24, 0xBC	; 188
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	0b d1       	rcall	.+534    	; 0x7a8 <clearBit>
     592:	cc eb       	ldi	r28, 0xBC	; 188
     594:	d0 e0       	ldi	r29, 0x00	; 0
     596:	88 81       	ld	r24, Y
     598:	67 e0       	ldi	r22, 0x07	; 7
     59a:	13 d1       	rcall	.+550    	; 0x7c2 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
     59c:	88 23       	and	r24, r24
     59e:	d9 f3       	breq	.-10     	; 0x596 <i2c_transmit+0x5e>
     5a0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a4:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Transmit data */
			while (i != u8_dataLength)
     5a6:	88 31       	cpi	r24, 0x18	; 24
     5a8:	71 f5       	brne	.+92     	; 0x606 <i2c_transmit+0xce>
     5aa:	ee 20       	and	r14, r14
     5ac:	81 f1       	breq	.+96     	; 0x60e <i2c_transmit+0xd6>
     5ae:	86 01       	movw	r16, r12
     5b0:	ea 94       	dec	r14
     5b2:	f1 2c       	mov	r15, r1
     5b4:	8f ef       	ldi	r24, 0xFF	; 255
     5b6:	e8 1a       	sub	r14, r24
     5b8:	f8 0a       	sbc	r15, r24
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     5ba:	ec 0c       	add	r14, r12
     5bc:	fd 1c       	adc	r15, r13
     5be:	0f 2e       	mov	r0, r31
     5c0:	fb eb       	ldi	r31, 0xBB	; 187
     5c2:	af 2e       	mov	r10, r31
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     5c4:	b1 2c       	mov	r11, r1
     5c6:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     5c8:	cc eb       	ldi	r28, 0xBC	; 188
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
     5cc:	0f 2e       	mov	r0, r31
     5ce:	f9 eb       	ldi	r31, 0xB9	; 185
     5d0:	cf 2e       	mov	r12, r31
		{
			/* Transmit data */
			while (i != u8_dataLength)
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     5d2:	d1 2c       	mov	r13, r1
     5d4:	f0 2d       	mov	r31, r0
     5d6:	f8 01       	movw	r30, r16
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     5d8:	81 91       	ld	r24, Z+
     5da:	8f 01       	movw	r16, r30
     5dc:	f5 01       	movw	r30, r10
     5de:	80 83       	st	Z, r24
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     5e0:	67 e0       	ldi	r22, 0x07	; 7
     5e2:	ce 01       	movw	r24, r28
     5e4:	d5 d0       	rcall	.+426    	; 0x790 <setBit>
     5e6:	88 81       	ld	r24, Y
     5e8:	67 e0       	ldi	r22, 0x07	; 7
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     5ea:	eb d0       	rcall	.+470    	; 0x7c2 <checkBit>
     5ec:	88 23       	and	r24, r24
     5ee:	d9 f3       	breq	.-10     	; 0x5e6 <i2c_transmit+0xae>
					return stopAndGetErrorCode();
     5f0:	f6 01       	movw	r30, r12
     5f2:	80 81       	ld	r24, Z
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
		{
			/* Transmit data */
			while (i != u8_dataLength)
     5f4:	88 7f       	andi	r24, 0xF8	; 248
     5f6:	88 32       	cpi	r24, 0x28	; 40
     5f8:	11 f0       	breq	.+4      	; 0x5fe <i2c_transmit+0xc6>
					return stopAndGetErrorCode();
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     5fa:	56 df       	rcall	.-340    	; 0x4a8 <stopAndGetErrorCode>
     5fc:	13 c0       	rjmp	.+38     	; 0x624 <i2c_transmit+0xec>
	}
	else
		return stopAndGetErrorCode();
     5fe:	0e 15       	cp	r16, r14
     600:	1f 05       	cpc	r17, r15

	/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
	setBit(&TWCR, TWSTO);
     602:	49 f7       	brne	.-46     	; 0x5d6 <i2c_transmit+0x9e>
     604:	04 c0       	rjmp	.+8      	; 0x60e <i2c_transmit+0xd6>
     606:	50 df       	rcall	.-352    	; 0x4a8 <stopAndGetErrorCode>
     608:	0d c0       	rjmp	.+26     	; 0x624 <i2c_transmit+0xec>
     60a:	4e df       	rcall	.-356    	; 0x4a8 <stopAndGetErrorCode>
	/* Wait for stop condition to be sent. */
	while (checkBit(TWCR, TWSTO));
     60c:	0b c0       	rjmp	.+22     	; 0x624 <i2c_transmit+0xec>
     60e:	64 e0       	ldi	r22, 0x04	; 4
     610:	8c eb       	ldi	r24, 0xBC	; 188
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	bd d0       	rcall	.+378    	; 0x790 <setBit>
     616:	cc eb       	ldi	r28, 0xBC	; 188
     618:	d0 e0       	ldi	r29, 0x00	; 0
     61a:	88 81       	ld	r24, Y

	return I2C_NO_ERROR;
}
     61c:	64 e0       	ldi	r22, 0x04	; 4
     61e:	d1 d0       	rcall	.+418    	; 0x7c2 <checkBit>
     620:	81 11       	cpse	r24, r1
     622:	fb cf       	rjmp	.-10     	; 0x61a <i2c_transmit+0xe2>
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	ff 90       	pop	r15
     62e:	ef 90       	pop	r14
     630:	df 90       	pop	r13
     632:	cf 90       	pop	r12
     634:	bf 90       	pop	r11
     636:	af 90       	pop	r10
     638:	08 95       	ret

0000063a <i2c_receive>:

u8 i2c_receive(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     63a:	af 92       	push	r10
     63c:	bf 92       	push	r11
     63e:	cf 92       	push	r12
     640:	df 92       	push	r13
     642:	ef 92       	push	r14
     644:	ff 92       	push	r15
     646:	0f 93       	push	r16
     648:	1f 93       	push	r17
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	18 2f       	mov	r17, r24
     650:	6b 01       	movw	r12, r22
     652:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     654:	65 e0       	ldi	r22, 0x05	; 5
     656:	8c eb       	ldi	r24, 0xBC	; 188
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	9a d0       	rcall	.+308    	; 0x790 <setBit>
	/* Clear I2C flag */
	setBit(&TWCR, TWINT);
     65c:	67 e0       	ldi	r22, 0x07	; 7
     65e:	8c eb       	ldi	r24, 0xBC	; 188
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	96 d0       	rcall	.+300    	; 0x790 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     664:	cc eb       	ldi	r28, 0xBC	; 188
     666:	d0 e0       	ldi	r29, 0x00	; 0
     668:	88 81       	ld	r24, Y
     66a:	67 e0       	ldi	r22, 0x07	; 7
     66c:	aa d0       	rcall	.+340    	; 0x7c2 <checkBit>
     66e:	88 23       	and	r24, r24
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     670:	d9 f3       	breq	.-10     	; 0x668 <i2c_receive+0x2e>
     672:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     676:	88 7f       	andi	r24, 0xF8	; 248
     678:	88 30       	cpi	r24, 0x08	; 8
     67a:	09 f0       	breq	.+2      	; 0x67e <i2c_receive+0x44>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     67c:	47 c0       	rjmp	.+142    	; 0x70c <i2c_receive+0xd2>
     67e:	11 0f       	add	r17, r17
		/* Set read mode */
		setBit(&TWDR, TWD0);
     680:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     684:	60 e0       	ldi	r22, 0x00	; 0
		/* Clear start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     686:	8b eb       	ldi	r24, 0xBB	; 187
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	82 d0       	rcall	.+260    	; 0x790 <setBit>
     68c:	65 e0       	ldi	r22, 0x05	; 5
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     68e:	8c eb       	ldi	r24, 0xBC	; 188
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	8a d0       	rcall	.+276    	; 0x7a8 <clearBit>
     694:	cc eb       	ldi	r28, 0xBC	; 188
     696:	d0 e0       	ldi	r29, 0x00	; 0
     698:	88 81       	ld	r24, Y
     69a:	67 e0       	ldi	r22, 0x07	; 7
     69c:	92 d0       	rcall	.+292    	; 0x7c2 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
     69e:	88 23       	and	r24, r24
     6a0:	d9 f3       	breq	.-10     	; 0x698 <i2c_receive+0x5e>
     6a2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6a6:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Receive data */
			while (i != u8_dataLength)
     6a8:	80 34       	cpi	r24, 0x40	; 64
     6aa:	71 f5       	brne	.+92     	; 0x708 <i2c_receive+0xce>
     6ac:	ee 20       	and	r14, r14
     6ae:	81 f1       	breq	.+96     	; 0x710 <i2c_receive+0xd6>
     6b0:	86 01       	movw	r16, r12
     6b2:	ea 94       	dec	r14
     6b4:	f1 2c       	mov	r15, r1
     6b6:	8f ef       	ldi	r24, 0xFF	; 255
     6b8:	e8 1a       	sub	r14, r24
     6ba:	f8 0a       	sbc	r15, r24
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     6bc:	ec 0c       	add	r14, r12
     6be:	fd 1c       	adc	r15, r13
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     6c0:	cc eb       	ldi	r28, 0xBC	; 188
     6c2:	d0 e0       	ldi	r29, 0x00	; 0
     6c4:	0f 2e       	mov	r0, r31
     6c6:	f9 eb       	ldi	r31, 0xB9	; 185
     6c8:	cf 2e       	mov	r12, r31
					return stopAndGetErrorCode();
				/* Read next byte */
				au8_data[i] = TWDR;
     6ca:	d1 2c       	mov	r13, r1
     6cc:	f0 2d       	mov	r31, r0
     6ce:	0f 2e       	mov	r0, r31
		{
			/* Receive data */
			while (i != u8_dataLength)
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     6d0:	fb eb       	ldi	r31, 0xBB	; 187
     6d2:	af 2e       	mov	r10, r31
     6d4:	b1 2c       	mov	r11, r1
     6d6:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     6d8:	66 e0       	ldi	r22, 0x06	; 6
     6da:	ce 01       	movw	r24, r28
     6dc:	59 d0       	rcall	.+178    	; 0x790 <setBit>
     6de:	88 81       	ld	r24, Y
     6e0:	67 e0       	ldi	r22, 0x07	; 7
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     6e2:	6f d0       	rcall	.+222    	; 0x7c2 <checkBit>
     6e4:	88 23       	and	r24, r24
     6e6:	d9 f3       	breq	.-10     	; 0x6de <i2c_receive+0xa4>
     6e8:	f6 01       	movw	r30, r12
     6ea:	80 81       	ld	r24, Z
					return stopAndGetErrorCode();
     6ec:	88 7f       	andi	r24, 0xF8	; 248
     6ee:	80 35       	cpi	r24, 0x50	; 80
				/* Read next byte */
				au8_data[i] = TWDR;
     6f0:	11 f0       	breq	.+4      	; 0x6f6 <i2c_receive+0xbc>
     6f2:	da de       	rcall	.-588    	; 0x4a8 <stopAndGetErrorCode>
     6f4:	2a c0       	rjmp	.+84     	; 0x74a <i2c_receive+0x110>
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
		{
			/* Receive data */
			while (i != u8_dataLength)
     6f6:	f5 01       	movw	r30, r10
     6f8:	80 81       	ld	r24, Z
     6fa:	f8 01       	movw	r30, r16
				au8_data[i] = TWDR;
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     6fc:	81 93       	st	Z+, r24
     6fe:	8f 01       	movw	r16, r30
	}
	else
		return stopAndGetErrorCode();
     700:	ee 15       	cp	r30, r14
     702:	ff 05       	cpc	r31, r15

	/* Send NACK after all expected transfers are done. Also clears I2C flag because it writes a 1 to it. */
	clearBit(&TWCR, TWEA);
     704:	49 f7       	brne	.-46     	; 0x6d8 <i2c_receive+0x9e>
     706:	04 c0       	rjmp	.+8      	; 0x710 <i2c_receive+0xd6>
     708:	cf de       	rcall	.-610    	; 0x4a8 <stopAndGetErrorCode>
     70a:	1f c0       	rjmp	.+62     	; 0x74a <i2c_receive+0x110>
     70c:	cd de       	rcall	.-614    	; 0x4a8 <stopAndGetErrorCode>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     70e:	1d c0       	rjmp	.+58     	; 0x74a <i2c_receive+0x110>
     710:	66 e0       	ldi	r22, 0x06	; 6
     712:	8c eb       	ldi	r24, 0xBC	; 188
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	48 d0       	rcall	.+144    	; 0x7a8 <clearBit>
     718:	cc eb       	ldi	r28, 0xBC	; 188
	/* If NACK was sent, all is good */
	if ((TWSR & 0xF8) == I2C_DATA_READ_NACK)
     71a:	d0 e0       	ldi	r29, 0x00	; 0
     71c:	88 81       	ld	r24, Y
     71e:	67 e0       	ldi	r22, 0x07	; 7
     720:	50 d0       	rcall	.+160    	; 0x7c2 <checkBit>
	{
		/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
		setBit(&TWCR, TWSTO);
     722:	88 23       	and	r24, r24
     724:	d9 f3       	breq	.-10     	; 0x71c <i2c_receive+0xe2>
     726:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     72a:	88 7f       	andi	r24, 0xF8	; 248
		/* Wait for stop condition to be sent. */
		while (checkBit(TWCR, TWSTO));
     72c:	88 35       	cpi	r24, 0x58	; 88
     72e:	61 f4       	brne	.+24     	; 0x748 <i2c_receive+0x10e>
     730:	64 e0       	ldi	r22, 0x04	; 4
     732:	8c eb       	ldi	r24, 0xBC	; 188
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	2c d0       	rcall	.+88     	; 0x790 <setBit>
     738:	cc eb       	ldi	r28, 0xBC	; 188
     73a:	d0 e0       	ldi	r29, 0x00	; 0
     73c:	88 81       	ld	r24, Y
	}

	return I2C_NO_ERROR;
     73e:	64 e0       	ldi	r22, 0x04	; 4
}
     740:	40 d0       	rcall	.+128    	; 0x7c2 <checkBit>
     742:	81 11       	cpse	r24, r1
     744:	fb cf       	rjmp	.-10     	; 0x73c <i2c_receive+0x102>
     746:	01 c0       	rjmp	.+2      	; 0x74a <i2c_receive+0x110>
     748:	80 e0       	ldi	r24, 0x00	; 0
     74a:	df 91       	pop	r29
     74c:	cf 91       	pop	r28
     74e:	1f 91       	pop	r17
     750:	0f 91       	pop	r16
     752:	ff 90       	pop	r15
     754:	ef 90       	pop	r14
     756:	df 90       	pop	r13
     758:	cf 90       	pop	r12
     75a:	bf 90       	pop	r11
     75c:	af 90       	pop	r10
     75e:	08 95       	ret

00000760 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     760:	fc 01       	movw	r30, r24
     762:	94 2f       	mov	r25, r20
     764:	20 81       	ld	r18, Z
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	50 e0       	ldi	r21, 0x00	; 0
     76a:	06 2e       	mov	r0, r22
     76c:	02 c0       	rjmp	.+4      	; 0x772 <updateBit+0x12>
     76e:	44 0f       	add	r20, r20
     770:	55 1f       	adc	r21, r21
     772:	0a 94       	dec	r0
     774:	e2 f7       	brpl	.-8      	; 0x76e <updateBit+0xe>
     776:	40 95       	com	r20
     778:	50 95       	com	r21
     77a:	24 23       	and	r18, r20
     77c:	49 2f       	mov	r20, r25
     77e:	50 e0       	ldi	r21, 0x00	; 0
     780:	02 c0       	rjmp	.+4      	; 0x786 <updateBit+0x26>
     782:	44 0f       	add	r20, r20
     784:	55 1f       	adc	r21, r21
     786:	6a 95       	dec	r22
     788:	e2 f7       	brpl	.-8      	; 0x782 <updateBit+0x22>
     78a:	42 2b       	or	r20, r18
     78c:	40 83       	st	Z, r20
     78e:	08 95       	ret

00000790 <setBit>:
     790:	fc 01       	movw	r30, r24
     792:	40 81       	ld	r20, Z
     794:	21 e0       	ldi	r18, 0x01	; 1
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <setBit+0xe>
     79a:	22 0f       	add	r18, r18
     79c:	33 1f       	adc	r19, r19
     79e:	6a 95       	dec	r22
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <setBit+0xa>
     7a2:	24 2b       	or	r18, r20
     7a4:	20 83       	st	Z, r18
     7a6:	08 95       	ret

000007a8 <clearBit>:
     7a8:	fc 01       	movw	r30, r24
     7aa:	90 81       	ld	r25, Z
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <clearBit+0xe>
     7b2:	22 0f       	add	r18, r18
     7b4:	33 1f       	adc	r19, r19
     7b6:	6a 95       	dec	r22
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <clearBit+0xa>
     7ba:	20 95       	com	r18
     7bc:	29 23       	and	r18, r25
     7be:	20 83       	st	Z, r18
     7c0:	08 95       	ret

000007c2 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	02 c0       	rjmp	.+4      	; 0x7ca <checkBit+0x8>
     7c6:	95 95       	asr	r25
     7c8:	87 95       	ror	r24
     7ca:	6a 95       	dec	r22
     7cc:	e2 f7       	brpl	.-8      	; 0x7c6 <checkBit+0x4>
}
     7ce:	81 70       	andi	r24, 0x01	; 1
     7d0:	08 95       	ret

000007d2 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     7d2:	cf 92       	push	r12
     7d4:	df 92       	push	r13
     7d6:	ef 92       	push	r14
     7d8:	ff 92       	push	r15
     7da:	69 01       	movw	r12, r18
     7dc:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     7de:	9b 01       	movw	r18, r22
     7e0:	ac 01       	movw	r20, r24
     7e2:	2c 19       	sub	r18, r12
     7e4:	3d 09       	sbc	r19, r13
     7e6:	4e 09       	sbc	r20, r14
     7e8:	5f 09       	sbc	r21, r15
     7ea:	a8 ee       	ldi	r26, 0xE8	; 232
     7ec:	b3 e0       	ldi	r27, 0x03	; 3
     7ee:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
     7f2:	a7 01       	movw	r20, r14
     7f4:	96 01       	movw	r18, r12
     7f6:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     7fa:	c9 01       	movw	r24, r18
     7fc:	99 23       	and	r25, r25
     7fe:	24 f4       	brge	.+8      	; 0x808 <calculateError+0x36>
     800:	88 27       	eor	r24, r24
     802:	99 27       	eor	r25, r25
     804:	82 1b       	sub	r24, r18
     806:	93 0b       	sbc	r25, r19
}
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	df 90       	pop	r13
     80e:	cf 90       	pop	r12
     810:	08 95       	ret

00000812 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	0b b6       	in	r0, 0x3b	; 59
     81e:	0f 92       	push	r0
     820:	8f 93       	push	r24
     822:	9f 93       	push	r25
     824:	ef 93       	push	r30
     826:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     828:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <u8_RLastReceivedIndex>
     82c:	f0 e0       	ldi	r31, 0x00	; 0
     82e:	8e b5       	in	r24, 0x2e	; 46
     830:	ed 52       	subi	r30, 0x2D	; 45
     832:	fc 4f       	sbci	r31, 0xFC	; 252
     834:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     836:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <u8_RLastReceivedIndex>
     83a:	89 30       	cpi	r24, 0x09	; 9
     83c:	30 f4       	brcc	.+12     	; 0x84a <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     83e:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <u8_RLastReceivedIndex>
     842:	8f 5f       	subi	r24, 0xFF	; 255
     844:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <u8_RLastReceivedIndex>
     848:	02 c0       	rjmp	.+4      	; 0x84e <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     84a:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     854:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     858:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <u8_TLastRequestedIndex>
     85c:	98 17       	cp	r25, r24
     85e:	a1 f0       	breq	.+40     	; 0x888 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     860:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	e3 52       	subi	r30, 0x23	; 35
     868:	fc 4f       	sbci	r31, 0xFC	; 252
     86a:	80 81       	ld	r24, Z
     86c:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     86e:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     872:	89 30       	cpi	r24, 0x09	; 9
     874:	30 f4       	brcc	.+12     	; 0x882 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     876:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     87a:	8f 5f       	subi	r24, 0xFF	; 255
     87c:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <u8_TLastTransmittedIndex>
     880:	06 c0       	rjmp	.+12     	; 0x88e <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     882:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <u8_TLastTransmittedIndex>
     886:	03 c0       	rjmp	.+6      	; 0x88e <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <b_TAvailable>
	}
}
     88e:	ff 91       	pop	r31
     890:	ef 91       	pop	r30
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	0f 90       	pop	r0
     898:	0b be       	out	0x3b, r0	; 59
     89a:	0f 90       	pop	r0
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	0f 90       	pop	r0
     8a0:	1f 90       	pop	r1
     8a2:	18 95       	reti

000008a4 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     8a4:	8f 92       	push	r8
     8a6:	9f 92       	push	r9
     8a8:	af 92       	push	r10
     8aa:	bf 92       	push	r11
     8ac:	ef 92       	push	r14
     8ae:	ff 92       	push	r15
     8b0:	0f 93       	push	r16
     8b2:	1f 93       	push	r17
     8b4:	cf 93       	push	r28
     8b6:	df 93       	push	r29
     8b8:	00 d0       	rcall	.+0      	; 0x8ba <calculateTopRegister+0x16>
     8ba:	00 d0       	rcall	.+0      	; 0x8bc <calculateTopRegister+0x18>
     8bc:	1f 92       	push	r1
     8be:	cd b7       	in	r28, 0x3d	; 61
     8c0:	de b7       	in	r29, 0x3e	; 62
     8c2:	48 01       	movw	r8, r16
     8c4:	59 01       	movw	r10, r18
     8c6:	41 30       	cpi	r20, 0x01	; 1
     8c8:	21 f0       	breq	.+8      	; 0x8d2 <calculateTopRegister+0x2e>
     8ca:	42 30       	cpi	r20, 0x02	; 2
     8cc:	09 f4       	brne	.+2      	; 0x8d0 <calculateTopRegister+0x2c>
     8ce:	88 c0       	rjmp	.+272    	; 0x9e0 <calculateTopRegister+0x13c>
     8d0:	4c c1       	rjmp	.+664    	; 0xb6a <calculateTopRegister+0x2c6>
     8d2:	60 e0       	ldi	r22, 0x00	; 0
     8d4:	72 e1       	ldi	r23, 0x12	; 18
     8d6:	8a e7       	ldi	r24, 0x7A	; 122
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a9 01       	movw	r20, r18
     8dc:	98 01       	movw	r18, r16
     8de:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     8e2:	da 01       	movw	r26, r20
     8e4:	c9 01       	movw	r24, r18
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	a1 09       	sbc	r26, r1
     8ea:	b1 09       	sbc	r27, r1
     8ec:	00 97       	sbiw	r24, 0x00	; 0
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	a2 07       	cpc	r26, r18
     8f2:	b1 05       	cpc	r27, r1
     8f4:	50 f4       	brcc	.+20     	; 0x90a <calculateTopRegister+0x66>
     8f6:	49 ef       	ldi	r20, 0xF9	; 249
     8f8:	5f ef       	ldi	r21, 0xFF	; 255
     8fa:	6f ef       	ldi	r22, 0xFF	; 255
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	f7 01       	movw	r30, r14
     900:	40 83       	st	Z, r20
     902:	51 83       	std	Z+1, r21	; 0x01
     904:	62 83       	std	Z+2, r22	; 0x02
     906:	73 83       	std	Z+3, r23	; 0x03
     908:	33 c1       	rjmp	.+614    	; 0xb70 <calculateTopRegister+0x2cc>
     90a:	60 e4       	ldi	r22, 0x40	; 64
     90c:	72 e4       	ldi	r23, 0x42	; 66
     90e:	8f e0       	ldi	r24, 0x0F	; 15
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a5 01       	movw	r20, r10
     914:	94 01       	movw	r18, r8
     916:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     91a:	da 01       	movw	r26, r20
     91c:	c9 01       	movw	r24, r18
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	a1 09       	sbc	r26, r1
     922:	b1 09       	sbc	r27, r1
     924:	00 97       	sbiw	r24, 0x00	; 0
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	af 07       	cpc	r26, r31
     92a:	b1 05       	cpc	r27, r1
     92c:	50 f4       	brcc	.+20     	; 0x942 <calculateTopRegister+0x9e>
     92e:	4a ef       	ldi	r20, 0xFA	; 250
     930:	5f ef       	ldi	r21, 0xFF	; 255
     932:	6f ef       	ldi	r22, 0xFF	; 255
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	f7 01       	movw	r30, r14
     938:	40 83       	st	Z, r20
     93a:	51 83       	std	Z+1, r21	; 0x01
     93c:	62 83       	std	Z+2, r22	; 0x02
     93e:	73 83       	std	Z+3, r23	; 0x03
     940:	17 c1       	rjmp	.+558    	; 0xb70 <calculateTopRegister+0x2cc>
     942:	68 e4       	ldi	r22, 0x48	; 72
     944:	78 ee       	ldi	r23, 0xE8	; 232
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	a5 01       	movw	r20, r10
     94c:	94 01       	movw	r18, r8
     94e:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     952:	da 01       	movw	r26, r20
     954:	c9 01       	movw	r24, r18
     956:	01 97       	sbiw	r24, 0x01	; 1
     958:	a1 09       	sbc	r26, r1
     95a:	b1 09       	sbc	r27, r1
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	f1 e0       	ldi	r31, 0x01	; 1
     960:	af 07       	cpc	r26, r31
     962:	b1 05       	cpc	r27, r1
     964:	50 f4       	brcc	.+20     	; 0x97a <calculateTopRegister+0xd6>
     966:	4c ef       	ldi	r20, 0xFC	; 252
     968:	5f ef       	ldi	r21, 0xFF	; 255
     96a:	6f ef       	ldi	r22, 0xFF	; 255
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	f7 01       	movw	r30, r14
     970:	40 83       	st	Z, r20
     972:	51 83       	std	Z+1, r21	; 0x01
     974:	62 83       	std	Z+2, r22	; 0x02
     976:	73 83       	std	Z+3, r23	; 0x03
     978:	fb c0       	rjmp	.+502    	; 0xb70 <calculateTopRegister+0x2cc>
     97a:	62 e1       	ldi	r22, 0x12	; 18
     97c:	7a e7       	ldi	r23, 0x7A	; 122
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	a5 01       	movw	r20, r10
     984:	94 01       	movw	r18, r8
     986:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     98a:	da 01       	movw	r26, r20
     98c:	c9 01       	movw	r24, r18
     98e:	01 97       	sbiw	r24, 0x01	; 1
     990:	a1 09       	sbc	r26, r1
     992:	b1 09       	sbc	r27, r1
     994:	00 97       	sbiw	r24, 0x00	; 0
     996:	f1 e0       	ldi	r31, 0x01	; 1
     998:	af 07       	cpc	r26, r31
     99a:	b1 05       	cpc	r27, r1
     99c:	50 f4       	brcc	.+20     	; 0x9b2 <calculateTopRegister+0x10e>
     99e:	4e ef       	ldi	r20, 0xFE	; 254
     9a0:	5f ef       	ldi	r21, 0xFF	; 255
     9a2:	6f ef       	ldi	r22, 0xFF	; 255
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	f7 01       	movw	r30, r14
     9a8:	40 83       	st	Z, r20
     9aa:	51 83       	std	Z+1, r21	; 0x01
     9ac:	62 83       	std	Z+2, r22	; 0x02
     9ae:	73 83       	std	Z+3, r23	; 0x03
     9b0:	df c0       	rjmp	.+446    	; 0xb70 <calculateTopRegister+0x2cc>
     9b2:	8f ef       	ldi	r24, 0xFF	; 255
     9b4:	9f ef       	ldi	r25, 0xFF	; 255
     9b6:	af ef       	ldi	r26, 0xFF	; 255
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	f7 01       	movw	r30, r14
     9bc:	80 83       	st	Z, r24
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	a2 83       	std	Z+2, r26	; 0x02
     9c2:	b3 83       	std	Z+3, r27	; 0x03
     9c4:	64 e8       	ldi	r22, 0x84	; 132
     9c6:	7e e1       	ldi	r23, 0x1E	; 30
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	a5 01       	movw	r20, r10
     9ce:	94 01       	movw	r18, r8
     9d0:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     9d4:	da 01       	movw	r26, r20
     9d6:	c9 01       	movw	r24, r18
     9d8:	01 97       	sbiw	r24, 0x01	; 1
     9da:	a1 09       	sbc	r26, r1
     9dc:	b1 09       	sbc	r27, r1
     9de:	c8 c0       	rjmp	.+400    	; 0xb70 <calculateTopRegister+0x2cc>
     9e0:	60 e0       	ldi	r22, 0x00	; 0
     9e2:	72 e1       	ldi	r23, 0x12	; 18
     9e4:	8a e7       	ldi	r24, 0x7A	; 122
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	a9 01       	movw	r20, r18
     9ea:	98 01       	movw	r18, r16
     9ec:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     9f0:	da 01       	movw	r26, r20
     9f2:	c9 01       	movw	r24, r18
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8f 3f       	cpi	r24, 0xFF	; 255
     9fc:	91 05       	cpc	r25, r1
     9fe:	a1 05       	cpc	r26, r1
     a00:	b1 05       	cpc	r27, r1
     a02:	09 f0       	breq	.+2      	; 0xa06 <calculateTopRegister+0x162>
     a04:	50 f4       	brcc	.+20     	; 0xa1a <calculateTopRegister+0x176>
     a06:	49 ef       	ldi	r20, 0xF9	; 249
     a08:	5f ef       	ldi	r21, 0xFF	; 255
     a0a:	6f ef       	ldi	r22, 0xFF	; 255
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	f7 01       	movw	r30, r14
     a10:	40 83       	st	Z, r20
     a12:	51 83       	std	Z+1, r21	; 0x01
     a14:	62 83       	std	Z+2, r22	; 0x02
     a16:	73 83       	std	Z+3, r23	; 0x03
     a18:	ab c0       	rjmp	.+342    	; 0xb70 <calculateTopRegister+0x2cc>
     a1a:	60 e4       	ldi	r22, 0x40	; 64
     a1c:	72 e4       	ldi	r23, 0x42	; 66
     a1e:	8f e0       	ldi	r24, 0x0F	; 15
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	a5 01       	movw	r20, r10
     a24:	94 01       	movw	r18, r8
     a26:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     a2a:	da 01       	movw	r26, r20
     a2c:	c9 01       	movw	r24, r18
     a2e:	01 97       	sbiw	r24, 0x01	; 1
     a30:	a1 09       	sbc	r26, r1
     a32:	b1 09       	sbc	r27, r1
     a34:	8f 3f       	cpi	r24, 0xFF	; 255
     a36:	91 05       	cpc	r25, r1
     a38:	a1 05       	cpc	r26, r1
     a3a:	b1 05       	cpc	r27, r1
     a3c:	09 f0       	breq	.+2      	; 0xa40 <calculateTopRegister+0x19c>
     a3e:	50 f4       	brcc	.+20     	; 0xa54 <calculateTopRegister+0x1b0>
     a40:	4a ef       	ldi	r20, 0xFA	; 250
     a42:	5f ef       	ldi	r21, 0xFF	; 255
     a44:	6f ef       	ldi	r22, 0xFF	; 255
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	f7 01       	movw	r30, r14
     a4a:	40 83       	st	Z, r20
     a4c:	51 83       	std	Z+1, r21	; 0x01
     a4e:	62 83       	std	Z+2, r22	; 0x02
     a50:	73 83       	std	Z+3, r23	; 0x03
     a52:	8e c0       	rjmp	.+284    	; 0xb70 <calculateTopRegister+0x2cc>
     a54:	60 e9       	ldi	r22, 0x90	; 144
     a56:	70 ed       	ldi	r23, 0xD0	; 208
     a58:	83 e0       	ldi	r24, 0x03	; 3
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	a5 01       	movw	r20, r10
     a5e:	94 01       	movw	r18, r8
     a60:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     a64:	da 01       	movw	r26, r20
     a66:	c9 01       	movw	r24, r18
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	a1 09       	sbc	r26, r1
     a6c:	b1 09       	sbc	r27, r1
     a6e:	8f 3f       	cpi	r24, 0xFF	; 255
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	09 f0       	breq	.+2      	; 0xa7a <calculateTopRegister+0x1d6>
     a78:	50 f4       	brcc	.+20     	; 0xa8e <calculateTopRegister+0x1ea>
     a7a:	4b ef       	ldi	r20, 0xFB	; 251
     a7c:	5f ef       	ldi	r21, 0xFF	; 255
     a7e:	6f ef       	ldi	r22, 0xFF	; 255
     a80:	70 e0       	ldi	r23, 0x00	; 0
     a82:	f7 01       	movw	r30, r14
     a84:	40 83       	st	Z, r20
     a86:	51 83       	std	Z+1, r21	; 0x01
     a88:	62 83       	std	Z+2, r22	; 0x02
     a8a:	73 83       	std	Z+3, r23	; 0x03
     a8c:	71 c0       	rjmp	.+226    	; 0xb70 <calculateTopRegister+0x2cc>
     a8e:	68 e4       	ldi	r22, 0x48	; 72
     a90:	78 ee       	ldi	r23, 0xE8	; 232
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	a5 01       	movw	r20, r10
     a98:	94 01       	movw	r18, r8
     a9a:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     a9e:	da 01       	movw	r26, r20
     aa0:	c9 01       	movw	r24, r18
     aa2:	01 97       	sbiw	r24, 0x01	; 1
     aa4:	a1 09       	sbc	r26, r1
     aa6:	b1 09       	sbc	r27, r1
     aa8:	8f 3f       	cpi	r24, 0xFF	; 255
     aaa:	91 05       	cpc	r25, r1
     aac:	a1 05       	cpc	r26, r1
     aae:	b1 05       	cpc	r27, r1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <calculateTopRegister+0x210>
     ab2:	50 f4       	brcc	.+20     	; 0xac8 <calculateTopRegister+0x224>
     ab4:	4c ef       	ldi	r20, 0xFC	; 252
     ab6:	5f ef       	ldi	r21, 0xFF	; 255
     ab8:	6f ef       	ldi	r22, 0xFF	; 255
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	f7 01       	movw	r30, r14
     abe:	40 83       	st	Z, r20
     ac0:	51 83       	std	Z+1, r21	; 0x01
     ac2:	62 83       	std	Z+2, r22	; 0x02
     ac4:	73 83       	std	Z+3, r23	; 0x03
     ac6:	54 c0       	rjmp	.+168    	; 0xb70 <calculateTopRegister+0x2cc>
     ac8:	64 e2       	ldi	r22, 0x24	; 36
     aca:	74 ef       	ldi	r23, 0xF4	; 244
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	a5 01       	movw	r20, r10
     ad2:	94 01       	movw	r18, r8
     ad4:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     ad8:	da 01       	movw	r26, r20
     ada:	c9 01       	movw	r24, r18
     adc:	01 97       	sbiw	r24, 0x01	; 1
     ade:	a1 09       	sbc	r26, r1
     ae0:	b1 09       	sbc	r27, r1
     ae2:	8f 3f       	cpi	r24, 0xFF	; 255
     ae4:	91 05       	cpc	r25, r1
     ae6:	a1 05       	cpc	r26, r1
     ae8:	b1 05       	cpc	r27, r1
     aea:	09 f0       	breq	.+2      	; 0xaee <calculateTopRegister+0x24a>
     aec:	50 f4       	brcc	.+20     	; 0xb02 <calculateTopRegister+0x25e>
     aee:	4d ef       	ldi	r20, 0xFD	; 253
     af0:	5f ef       	ldi	r21, 0xFF	; 255
     af2:	6f ef       	ldi	r22, 0xFF	; 255
     af4:	70 e0       	ldi	r23, 0x00	; 0
     af6:	f7 01       	movw	r30, r14
     af8:	40 83       	st	Z, r20
     afa:	51 83       	std	Z+1, r21	; 0x01
     afc:	62 83       	std	Z+2, r22	; 0x02
     afe:	73 83       	std	Z+3, r23	; 0x03
     b00:	37 c0       	rjmp	.+110    	; 0xb70 <calculateTopRegister+0x2cc>
     b02:	62 e1       	ldi	r22, 0x12	; 18
     b04:	7a e7       	ldi	r23, 0x7A	; 122
     b06:	80 e0       	ldi	r24, 0x00	; 0
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	a5 01       	movw	r20, r10
     b0c:	94 01       	movw	r18, r8
     b0e:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     b12:	da 01       	movw	r26, r20
     b14:	c9 01       	movw	r24, r18
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	a1 09       	sbc	r26, r1
     b1a:	b1 09       	sbc	r27, r1
     b1c:	8f 3f       	cpi	r24, 0xFF	; 255
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	09 f0       	breq	.+2      	; 0xb28 <calculateTopRegister+0x284>
     b26:	50 f4       	brcc	.+20     	; 0xb3c <calculateTopRegister+0x298>
     b28:	4e ef       	ldi	r20, 0xFE	; 254
     b2a:	5f ef       	ldi	r21, 0xFF	; 255
     b2c:	6f ef       	ldi	r22, 0xFF	; 255
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	f7 01       	movw	r30, r14
     b32:	40 83       	st	Z, r20
     b34:	51 83       	std	Z+1, r21	; 0x01
     b36:	62 83       	std	Z+2, r22	; 0x02
     b38:	73 83       	std	Z+3, r23	; 0x03
     b3a:	1a c0       	rjmp	.+52     	; 0xb70 <calculateTopRegister+0x2cc>
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
     b40:	af ef       	ldi	r26, 0xFF	; 255
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	f7 01       	movw	r30, r14
     b46:	80 83       	st	Z, r24
     b48:	91 83       	std	Z+1, r25	; 0x01
     b4a:	a2 83       	std	Z+2, r26	; 0x02
     b4c:	b3 83       	std	Z+3, r27	; 0x03
     b4e:	64 e8       	ldi	r22, 0x84	; 132
     b50:	7e e1       	ldi	r23, 0x1E	; 30
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a5 01       	movw	r20, r10
     b58:	94 01       	movw	r18, r8
     b5a:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
     b5e:	da 01       	movw	r26, r20
     b60:	c9 01       	movw	r24, r18
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	a1 09       	sbc	r26, r1
     b66:	b1 09       	sbc	r27, r1
     b68:	03 c0       	rjmp	.+6      	; 0xb70 <calculateTopRegister+0x2cc>
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	dc 01       	movw	r26, r24
     b70:	0f 90       	pop	r0
     b72:	0f 90       	pop	r0
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	df 91       	pop	r29
     b7c:	cf 91       	pop	r28
     b7e:	1f 91       	pop	r17
     b80:	0f 91       	pop	r16
     b82:	ff 90       	pop	r15
     b84:	ef 90       	pop	r14
     b86:	bf 90       	pop	r11
     b88:	af 90       	pop	r10
     b8a:	9f 90       	pop	r9
     b8c:	8f 90       	pop	r8
     b8e:	08 95       	ret

00000b90 <__vector_15>:
     b90:	1f 92       	push	r1
     b92:	0f 92       	push	r0
     b94:	0f b6       	in	r0, 0x3f	; 63
     b96:	0f 92       	push	r0
     b98:	11 24       	eor	r1, r1
     b9a:	0b b6       	in	r0, 0x3b	; 59
     b9c:	0f 92       	push	r0
     b9e:	2f 93       	push	r18
     ba0:	3f 93       	push	r19
     ba2:	4f 93       	push	r20
     ba4:	5f 93       	push	r21
     ba6:	6f 93       	push	r22
     ba8:	7f 93       	push	r23
     baa:	8f 93       	push	r24
     bac:	9f 93       	push	r25
     bae:	af 93       	push	r26
     bb0:	bf 93       	push	r27
     bb2:	ef 93       	push	r30
     bb4:	ff 93       	push	r31
     bb6:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <p_timer1Callbacks>
     bba:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <p_timer1Callbacks+0x1>
     bbe:	09 95       	icall
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <__vector_13>:
     be6:	1f 92       	push	r1
     be8:	0f 92       	push	r0
     bea:	0f b6       	in	r0, 0x3f	; 63
     bec:	0f 92       	push	r0
     bee:	11 24       	eor	r1, r1
     bf0:	0b b6       	in	r0, 0x3b	; 59
     bf2:	0f 92       	push	r0
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	2f 93       	push	r18
     bfa:	3f 93       	push	r19
     bfc:	4f 93       	push	r20
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	cf 93       	push	r28
     c0e:	df 93       	push	r29
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
     c14:	c1 e8       	ldi	r28, 0x81	; 129
     c16:	d0 e0       	ldi	r29, 0x00	; 0
     c18:	88 81       	ld	r24, Y
     c1a:	64 e0       	ldi	r22, 0x04	; 4
     c1c:	d2 dd       	rcall	.-1116   	; 0x7c2 <checkBit>
     c1e:	18 2f       	mov	r17, r24
     c20:	88 81       	ld	r24, Y
     c22:	63 e0       	ldi	r22, 0x03	; 3
     c24:	ce dd       	rcall	.-1124   	; 0x7c2 <checkBit>
     c26:	c1 2f       	mov	r28, r17
     c28:	cc 0f       	add	r28, r28
     c2a:	cc 0f       	add	r28, r28
     c2c:	cc 0f       	add	r28, r28
     c2e:	24 e0       	ldi	r18, 0x04	; 4
     c30:	82 9f       	mul	r24, r18
     c32:	c0 01       	movw	r24, r0
     c34:	11 24       	eor	r1, r1
     c36:	c8 2b       	or	r28, r24
     c38:	00 e8       	ldi	r16, 0x80	; 128
     c3a:	10 e0       	ldi	r17, 0x00	; 0
     c3c:	f8 01       	movw	r30, r16
     c3e:	80 81       	ld	r24, Z
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	bf dd       	rcall	.-1154   	; 0x7c2 <checkBit>
     c44:	d8 2f       	mov	r29, r24
     c46:	f8 01       	movw	r30, r16
     c48:	80 81       	ld	r24, Z
     c4a:	60 e0       	ldi	r22, 0x00	; 0
     c4c:	ba dd       	rcall	.-1164   	; 0x7c2 <checkBit>
     c4e:	dd 0f       	add	r29, r29
     c50:	8c 2b       	or	r24, r28
     c52:	8d 2b       	or	r24, r29
     c54:	88 30       	cpi	r24, 0x08	; 8
     c56:	18 f4       	brcc	.+6      	; 0xc5e <__vector_13+0x78>
     c58:	84 30       	cpi	r24, 0x04	; 4
     c5a:	19 f4       	brne	.+6      	; 0xc62 <__vector_13+0x7c>
     c5c:	08 c0       	rjmp	.+16     	; 0xc6e <__vector_13+0x88>
     c5e:	80 fd       	sbrc	r24, 0
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <__vector_13+0x88>
     c62:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <p_timer1Callbacks+0x2>
     c66:	f0 91 ec 03 	lds	r31, 0x03EC	; 0x8003ec <p_timer1Callbacks+0x3>
     c6a:	09 95       	icall
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__vector_13+0x92>
     c6e:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <p_timer1Callbacks>
     c72:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <p_timer1Callbacks+0x1>
     c76:	09 95       	icall
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	9f 91       	pop	r25
     c86:	8f 91       	pop	r24
     c88:	7f 91       	pop	r23
     c8a:	6f 91       	pop	r22
     c8c:	5f 91       	pop	r21
     c8e:	4f 91       	pop	r20
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	0f 90       	pop	r0
     c9a:	0b be       	out	0x3b, r0	; 59
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <__vector_14>:
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	0b b6       	in	r0, 0x3b	; 59
     cb2:	0f 92       	push	r0
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <p_timer1Callbacks+0x4>
     cd0:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <p_timer1Callbacks+0x5>
     cd4:	09 95       	icall
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0b be       	out	0x3b, r0	; 59
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_12>:
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	0b b6       	in	r0, 0x3b	; 59
     d08:	0f 92       	push	r0
     d0a:	0f 93       	push	r16
     d0c:	1f 93       	push	r17
     d0e:	2f 93       	push	r18
     d10:	3f 93       	push	r19
     d12:	4f 93       	push	r20
     d14:	5f 93       	push	r21
     d16:	6f 93       	push	r22
     d18:	7f 93       	push	r23
     d1a:	8f 93       	push	r24
     d1c:	9f 93       	push	r25
     d1e:	af 93       	push	r26
     d20:	bf 93       	push	r27
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	ef 93       	push	r30
     d28:	ff 93       	push	r31
     d2a:	c1 e8       	ldi	r28, 0x81	; 129
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
     d2e:	88 81       	ld	r24, Y
     d30:	64 e0       	ldi	r22, 0x04	; 4
     d32:	47 dd       	rcall	.-1394   	; 0x7c2 <checkBit>
     d34:	18 2f       	mov	r17, r24
     d36:	88 81       	ld	r24, Y
     d38:	63 e0       	ldi	r22, 0x03	; 3
     d3a:	43 dd       	rcall	.-1402   	; 0x7c2 <checkBit>
     d3c:	c1 2f       	mov	r28, r17
     d3e:	cc 0f       	add	r28, r28
     d40:	cc 0f       	add	r28, r28
     d42:	cc 0f       	add	r28, r28
     d44:	24 e0       	ldi	r18, 0x04	; 4
     d46:	82 9f       	mul	r24, r18
     d48:	c0 01       	movw	r24, r0
     d4a:	11 24       	eor	r1, r1
     d4c:	c8 2b       	or	r28, r24
     d4e:	00 e8       	ldi	r16, 0x80	; 128
     d50:	10 e0       	ldi	r17, 0x00	; 0
     d52:	f8 01       	movw	r30, r16
     d54:	80 81       	ld	r24, Z
     d56:	61 e0       	ldi	r22, 0x01	; 1
     d58:	34 dd       	rcall	.-1432   	; 0x7c2 <checkBit>
     d5a:	d8 2f       	mov	r29, r24
     d5c:	f8 01       	movw	r30, r16
     d5e:	80 81       	ld	r24, Z
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	2f dd       	rcall	.-1442   	; 0x7c2 <checkBit>
     d64:	dd 0f       	add	r29, r29
     d66:	8c 2b       	or	r24, r28
     d68:	8d 2b       	or	r24, r29
     d6a:	88 30       	cpi	r24, 0x08	; 8
     d6c:	10 f0       	brcs	.+4      	; 0xd72 <__vector_12+0x76>
     d6e:	80 ff       	sbrs	r24, 0
     d70:	06 c0       	rjmp	.+12     	; 0xd7e <__vector_12+0x82>
     d72:	e0 91 ef 03 	lds	r30, 0x03EF	; 0x8003ef <p_timer1Callbacks+0x6>
     d76:	f0 91 f0 03 	lds	r31, 0x03F0	; 0x8003f0 <p_timer1Callbacks+0x7>
     d7a:	09 95       	icall
     d7c:	05 c0       	rjmp	.+10     	; 0xd88 <__vector_12+0x8c>
     d7e:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <p_timer1Callbacks>
     d82:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <p_timer1Callbacks+0x1>
     d86:	09 95       	icall
     d88:	ff 91       	pop	r31
     d8a:	ef 91       	pop	r30
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	bf 91       	pop	r27
     d92:	af 91       	pop	r26
     d94:	9f 91       	pop	r25
     d96:	8f 91       	pop	r24
     d98:	7f 91       	pop	r23
     d9a:	6f 91       	pop	r22
     d9c:	5f 91       	pop	r21
     d9e:	4f 91       	pop	r20
     da0:	3f 91       	pop	r19
     da2:	2f 91       	pop	r18
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	0f 90       	pop	r0
     daa:	0b be       	out	0x3b, r0	; 59
     dac:	0f 90       	pop	r0
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	0f 90       	pop	r0
     db2:	1f 90       	pop	r1
     db4:	18 95       	reti

00000db6 <__vector_11>:
     db6:	1f 92       	push	r1
     db8:	0f 92       	push	r0
     dba:	0f b6       	in	r0, 0x3f	; 63
     dbc:	0f 92       	push	r0
     dbe:	11 24       	eor	r1, r1
     dc0:	0b b6       	in	r0, 0x3b	; 59
     dc2:	0f 92       	push	r0
     dc4:	2f 93       	push	r18
     dc6:	3f 93       	push	r19
     dc8:	4f 93       	push	r20
     dca:	5f 93       	push	r21
     dcc:	6f 93       	push	r22
     dce:	7f 93       	push	r23
     dd0:	8f 93       	push	r24
     dd2:	9f 93       	push	r25
     dd4:	af 93       	push	r26
     dd6:	bf 93       	push	r27
     dd8:	ef 93       	push	r30
     dda:	ff 93       	push	r31
     ddc:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <p_timer2Callbacks>
     de0:	f0 91 f4 03 	lds	r31, 0x03F4	; 0x8003f4 <p_timer2Callbacks+0x1>
     de4:	09 95       	icall
     de6:	ff 91       	pop	r31
     de8:	ef 91       	pop	r30
     dea:	bf 91       	pop	r27
     dec:	af 91       	pop	r26
     dee:	9f 91       	pop	r25
     df0:	8f 91       	pop	r24
     df2:	7f 91       	pop	r23
     df4:	6f 91       	pop	r22
     df6:	5f 91       	pop	r21
     df8:	4f 91       	pop	r20
     dfa:	3f 91       	pop	r19
     dfc:	2f 91       	pop	r18
     dfe:	0f 90       	pop	r0
     e00:	0b be       	out	0x3b, r0	; 59
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <__vector_9>:
     e0c:	1f 92       	push	r1
     e0e:	0f 92       	push	r0
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	0f 92       	push	r0
     e14:	11 24       	eor	r1, r1
     e16:	0b b6       	in	r0, 0x3b	; 59
     e18:	0f 92       	push	r0
     e1a:	2f 93       	push	r18
     e1c:	3f 93       	push	r19
     e1e:	4f 93       	push	r20
     e20:	5f 93       	push	r21
     e22:	6f 93       	push	r22
     e24:	7f 93       	push	r23
     e26:	8f 93       	push	r24
     e28:	9f 93       	push	r25
     e2a:	af 93       	push	r26
     e2c:	bf 93       	push	r27
     e2e:	ef 93       	push	r30
     e30:	ff 93       	push	r31
     e32:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     e36:	63 e0       	ldi	r22, 0x03	; 3
     e38:	c4 dc       	rcall	.-1656   	; 0x7c2 <checkBit>
     e3a:	81 11       	cpse	r24, r1
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <__vector_9+0x48>
     e3e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e42:	83 70       	andi	r24, 0x03	; 3
     e44:	82 30       	cpi	r24, 0x02	; 2
     e46:	31 f0       	breq	.+12     	; 0xe54 <__vector_9+0x48>
     e48:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <p_timer2Callbacks+0x2>
     e4c:	f0 91 f6 03 	lds	r31, 0x03F6	; 0x8003f6 <p_timer2Callbacks+0x3>
     e50:	09 95       	icall
     e52:	05 c0       	rjmp	.+10     	; 0xe5e <__vector_9+0x52>
     e54:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <p_timer2Callbacks>
     e58:	f0 91 f4 03 	lds	r31, 0x03F4	; 0x8003f4 <p_timer2Callbacks+0x1>
     e5c:	09 95       	icall
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0b be       	out	0x3b, r0	; 59
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_10>:
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	0b b6       	in	r0, 0x3b	; 59
     e90:	0f 92       	push	r0
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
     eaa:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <p_timer2Callbacks+0x4>
     eae:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <p_timer2Callbacks+0x5>
     eb2:	09 95       	icall
     eb4:	ff 91       	pop	r31
     eb6:	ef 91       	pop	r30
     eb8:	bf 91       	pop	r27
     eba:	af 91       	pop	r26
     ebc:	9f 91       	pop	r25
     ebe:	8f 91       	pop	r24
     ec0:	7f 91       	pop	r23
     ec2:	6f 91       	pop	r22
     ec4:	5f 91       	pop	r21
     ec6:	4f 91       	pop	r20
     ec8:	3f 91       	pop	r19
     eca:	2f 91       	pop	r18
     ecc:	0f 90       	pop	r0
     ece:	0b be       	out	0x3b, r0	; 59
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <timer_init>:
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	29 97       	sbiw	r28, 0x09	; 9
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	4d 83       	std	Y+5, r20	; 0x05
     ef8:	5e 83       	std	Y+6, r21	; 0x06
     efa:	6f 83       	std	Y+7, r22	; 0x07
     efc:	78 87       	std	Y+8, r23	; 0x08
     efe:	89 87       	std	Y+9, r24	; 0x09
     f00:	0e 81       	ldd	r16, Y+6	; 0x06
     f02:	1f 81       	ldd	r17, Y+7	; 0x07
     f04:	28 85       	ldd	r18, Y+8	; 0x08
     f06:	39 85       	ldd	r19, Y+9	; 0x09
     f08:	19 82       	std	Y+1, r1	; 0x01
     f0a:	1a 82       	std	Y+2, r1	; 0x02
     f0c:	1b 82       	std	Y+3, r1	; 0x03
     f0e:	1c 82       	std	Y+4, r1	; 0x04
     f10:	41 30       	cpi	r20, 0x01	; 1
     f12:	21 f0       	breq	.+8      	; 0xf1c <timer_init+0x42>
     f14:	42 30       	cpi	r20, 0x02	; 2
     f16:	09 f4       	brne	.+2      	; 0xf1a <timer_init+0x40>
     f18:	95 c0       	rjmp	.+298    	; 0x1044 <timer_init+0x16a>
     f1a:	1e c1       	rjmp	.+572    	; 0x1158 <timer_init+0x27e>
     f1c:	09 3f       	cpi	r16, 0xF9	; 249
     f1e:	8f ef       	ldi	r24, 0xFF	; 255
     f20:	18 07       	cpc	r17, r24
     f22:	28 07       	cpc	r18, r24
     f24:	31 05       	cpc	r19, r1
     f26:	28 f0       	brcs	.+10     	; 0xf32 <timer_init+0x58>
     f28:	09 83       	std	Y+1, r16	; 0x01
     f2a:	1a 83       	std	Y+2, r17	; 0x02
     f2c:	2b 83       	std	Y+3, r18	; 0x03
     f2e:	3c 83       	std	Y+4, r19	; 0x04
     f30:	15 c0       	rjmp	.+42     	; 0xf5c <timer_init+0x82>
     f32:	ce 01       	movw	r24, r28
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	7c 01       	movw	r14, r24
     f38:	4d 81       	ldd	r20, Y+5	; 0x05
     f3a:	5e 81       	ldd	r21, Y+6	; 0x06
     f3c:	6f 81       	ldd	r22, Y+7	; 0x07
     f3e:	78 85       	ldd	r23, Y+8	; 0x08
     f40:	89 85       	ldd	r24, Y+9	; 0x09
     f42:	b0 dc       	rcall	.-1696   	; 0x8a4 <calculateTopRegister>
     f44:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     f48:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     f4c:	64 e0       	ldi	r22, 0x04	; 4
     f4e:	81 e8       	ldi	r24, 0x81	; 129
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	1e dc       	rcall	.-1988   	; 0x790 <setBit>
     f54:	63 e0       	ldi	r22, 0x03	; 3
     f56:	81 e8       	ldi	r24, 0x81	; 129
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	1a dc       	rcall	.-1996   	; 0x790 <setBit>
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	ab 81       	ldd	r26, Y+3	; 0x03
     f62:	bc 81       	ldd	r27, Y+4	; 0x04
     f64:	8c 3f       	cpi	r24, 0xFC	; 252
     f66:	2f ef       	ldi	r18, 0xFF	; 255
     f68:	92 07       	cpc	r25, r18
     f6a:	a2 07       	cpc	r26, r18
     f6c:	b1 05       	cpc	r27, r1
     f6e:	59 f1       	breq	.+86     	; 0xfc6 <timer_init+0xec>
     f70:	60 f4       	brcc	.+24     	; 0xf8a <timer_init+0xb0>
     f72:	89 3f       	cpi	r24, 0xF9	; 249
     f74:	2f ef       	ldi	r18, 0xFF	; 255
     f76:	92 07       	cpc	r25, r18
     f78:	a2 07       	cpc	r26, r18
     f7a:	b1 05       	cpc	r27, r1
     f7c:	91 f0       	breq	.+36     	; 0xfa2 <timer_init+0xc8>
     f7e:	8a 3f       	cpi	r24, 0xFA	; 250
     f80:	9f 4f       	sbci	r25, 0xFF	; 255
     f82:	af 4f       	sbci	r26, 0xFF	; 255
     f84:	b1 05       	cpc	r27, r1
     f86:	b1 f0       	breq	.+44     	; 0xfb4 <timer_init+0xda>
     f88:	38 c0       	rjmp	.+112    	; 0xffa <timer_init+0x120>
     f8a:	8e 3f       	cpi	r24, 0xFE	; 254
     f8c:	2f ef       	ldi	r18, 0xFF	; 255
     f8e:	92 07       	cpc	r25, r18
     f90:	a2 07       	cpc	r26, r18
     f92:	b1 05       	cpc	r27, r1
     f94:	09 f1       	breq	.+66     	; 0xfd8 <timer_init+0xfe>
     f96:	8f 3f       	cpi	r24, 0xFF	; 255
     f98:	9f 4f       	sbci	r25, 0xFF	; 255
     f9a:	af 4f       	sbci	r26, 0xFF	; 255
     f9c:	b1 05       	cpc	r27, r1
     f9e:	29 f1       	breq	.+74     	; 0xfea <timer_init+0x110>
     fa0:	2c c0       	rjmp	.+88     	; 0xffa <timer_init+0x120>
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a0 e0       	ldi	r26, 0x00	; 0
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	89 83       	std	Y+1, r24	; 0x01
     fac:	9a 83       	std	Y+2, r25	; 0x02
     fae:	ab 83       	std	Y+3, r26	; 0x03
     fb0:	bc 83       	std	Y+4, r27	; 0x04
     fb2:	23 c0       	rjmp	.+70     	; 0xffa <timer_init+0x120>
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	89 83       	std	Y+1, r24	; 0x01
     fbe:	9a 83       	std	Y+2, r25	; 0x02
     fc0:	ab 83       	std	Y+3, r26	; 0x03
     fc2:	bc 83       	std	Y+4, r27	; 0x04
     fc4:	1a c0       	rjmp	.+52     	; 0xffa <timer_init+0x120>
     fc6:	83 e0       	ldi	r24, 0x03	; 3
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a0 e0       	ldi	r26, 0x00	; 0
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	89 83       	std	Y+1, r24	; 0x01
     fd0:	9a 83       	std	Y+2, r25	; 0x02
     fd2:	ab 83       	std	Y+3, r26	; 0x03
     fd4:	bc 83       	std	Y+4, r27	; 0x04
     fd6:	11 c0       	rjmp	.+34     	; 0xffa <timer_init+0x120>
     fd8:	84 e0       	ldi	r24, 0x04	; 4
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a0 e0       	ldi	r26, 0x00	; 0
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	9a 83       	std	Y+2, r25	; 0x02
     fe4:	ab 83       	std	Y+3, r26	; 0x03
     fe6:	bc 83       	std	Y+4, r27	; 0x04
     fe8:	08 c0       	rjmp	.+16     	; 0xffa <timer_init+0x120>
     fea:	85 e0       	ldi	r24, 0x05	; 5
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	89 83       	std	Y+1, r24	; 0x01
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	ab 83       	std	Y+3, r26	; 0x03
     ff8:	bc 83       	std	Y+4, r27	; 0x04
     ffa:	49 81       	ldd	r20, Y+1	; 0x01
     ffc:	5a 81       	ldd	r21, Y+2	; 0x02
     ffe:	6b 81       	ldd	r22, Y+3	; 0x03
    1000:	7c 81       	ldd	r23, Y+4	; 0x04
    1002:	76 95       	lsr	r23
    1004:	67 95       	ror	r22
    1006:	57 95       	ror	r21
    1008:	47 95       	ror	r20
    100a:	76 95       	lsr	r23
    100c:	67 95       	ror	r22
    100e:	57 95       	ror	r21
    1010:	47 95       	ror	r20
    1012:	41 70       	andi	r20, 0x01	; 1
    1014:	62 e0       	ldi	r22, 0x02	; 2
    1016:	81 ef       	ldi	r24, 0xF1	; 241
    1018:	93 e0       	ldi	r25, 0x03	; 3
    101a:	a2 db       	rcall	.-2236   	; 0x760 <updateBit>
    101c:	49 81       	ldd	r20, Y+1	; 0x01
    101e:	5a 81       	ldd	r21, Y+2	; 0x02
    1020:	6b 81       	ldd	r22, Y+3	; 0x03
    1022:	7c 81       	ldd	r23, Y+4	; 0x04
    1024:	76 95       	lsr	r23
    1026:	67 95       	ror	r22
    1028:	57 95       	ror	r21
    102a:	47 95       	ror	r20
    102c:	41 70       	andi	r20, 0x01	; 1
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	81 ef       	ldi	r24, 0xF1	; 241
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	95 db       	rcall	.-2262   	; 0x760 <updateBit>
    1036:	49 81       	ldd	r20, Y+1	; 0x01
    1038:	41 70       	andi	r20, 0x01	; 1
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	81 ef       	ldi	r24, 0xF1	; 241
    103e:	93 e0       	ldi	r25, 0x03	; 3
    1040:	8f db       	rcall	.-2274   	; 0x760 <updateBit>
    1042:	8a c0       	rjmp	.+276    	; 0x1158 <timer_init+0x27e>
    1044:	09 3f       	cpi	r16, 0xF9	; 249
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	18 07       	cpc	r17, r24
    104a:	28 07       	cpc	r18, r24
    104c:	31 05       	cpc	r19, r1
    104e:	28 f0       	brcs	.+10     	; 0x105a <timer_init+0x180>
    1050:	09 83       	std	Y+1, r16	; 0x01
    1052:	1a 83       	std	Y+2, r17	; 0x02
    1054:	2b 83       	std	Y+3, r18	; 0x03
    1056:	3c 83       	std	Y+4, r19	; 0x04
    1058:	0f c0       	rjmp	.+30     	; 0x1078 <timer_init+0x19e>
    105a:	ce 01       	movw	r24, r28
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	7c 01       	movw	r14, r24
    1060:	4d 81       	ldd	r20, Y+5	; 0x05
    1062:	5e 81       	ldd	r21, Y+6	; 0x06
    1064:	6f 81       	ldd	r22, Y+7	; 0x07
    1066:	78 85       	ldd	r23, Y+8	; 0x08
    1068:	89 85       	ldd	r24, Y+9	; 0x09
    106a:	1c dc       	rcall	.-1992   	; 0x8a4 <calculateTopRegister>
    106c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1070:	61 e0       	ldi	r22, 0x01	; 1
    1072:	80 eb       	ldi	r24, 0xB0	; 176
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	8c db       	rcall	.-2280   	; 0x790 <setBit>
    1078:	89 81       	ldd	r24, Y+1	; 0x01
    107a:	9a 81       	ldd	r25, Y+2	; 0x02
    107c:	ab 81       	ldd	r26, Y+3	; 0x03
    107e:	bc 81       	ldd	r27, Y+4	; 0x04
    1080:	fc 01       	movw	r30, r24
    1082:	37 96       	adiw	r30, 0x07	; 7
    1084:	e7 30       	cpi	r30, 0x07	; 7
    1086:	f1 05       	cpc	r31, r1
    1088:	08 f0       	brcs	.+2      	; 0x108c <timer_init+0x1b2>
    108a:	42 c0       	rjmp	.+132    	; 0x1110 <timer_init+0x236>
    108c:	ea 5b       	subi	r30, 0xBA	; 186
    108e:	ff 4f       	sbci	r31, 0xFF	; 255
    1090:	0c 94 0a 33 	jmp	0x6614	; 0x6614 <__tablejump2__>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	a0 e0       	ldi	r26, 0x00	; 0
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	89 83       	std	Y+1, r24	; 0x01
    109e:	9a 83       	std	Y+2, r25	; 0x02
    10a0:	ab 83       	std	Y+3, r26	; 0x03
    10a2:	bc 83       	std	Y+4, r27	; 0x04
    10a4:	35 c0       	rjmp	.+106    	; 0x1110 <timer_init+0x236>
    10a6:	82 e0       	ldi	r24, 0x02	; 2
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	a0 e0       	ldi	r26, 0x00	; 0
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	89 83       	std	Y+1, r24	; 0x01
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	ab 83       	std	Y+3, r26	; 0x03
    10b4:	bc 83       	std	Y+4, r27	; 0x04
    10b6:	2c c0       	rjmp	.+88     	; 0x1110 <timer_init+0x236>
    10b8:	83 e0       	ldi	r24, 0x03	; 3
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	a0 e0       	ldi	r26, 0x00	; 0
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	9a 83       	std	Y+2, r25	; 0x02
    10c4:	ab 83       	std	Y+3, r26	; 0x03
    10c6:	bc 83       	std	Y+4, r27	; 0x04
    10c8:	23 c0       	rjmp	.+70     	; 0x1110 <timer_init+0x236>
    10ca:	84 e0       	ldi	r24, 0x04	; 4
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	89 83       	std	Y+1, r24	; 0x01
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	ab 83       	std	Y+3, r26	; 0x03
    10d8:	bc 83       	std	Y+4, r27	; 0x04
    10da:	1a c0       	rjmp	.+52     	; 0x1110 <timer_init+0x236>
    10dc:	85 e0       	ldi	r24, 0x05	; 5
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	9a 83       	std	Y+2, r25	; 0x02
    10e8:	ab 83       	std	Y+3, r26	; 0x03
    10ea:	bc 83       	std	Y+4, r27	; 0x04
    10ec:	11 c0       	rjmp	.+34     	; 0x1110 <timer_init+0x236>
    10ee:	86 e0       	ldi	r24, 0x06	; 6
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	89 83       	std	Y+1, r24	; 0x01
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	ab 83       	std	Y+3, r26	; 0x03
    10fc:	bc 83       	std	Y+4, r27	; 0x04
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <timer_init+0x236>
    1100:	87 e0       	ldi	r24, 0x07	; 7
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	a0 e0       	ldi	r26, 0x00	; 0
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	ab 83       	std	Y+3, r26	; 0x03
    110e:	bc 83       	std	Y+4, r27	; 0x04
    1110:	49 81       	ldd	r20, Y+1	; 0x01
    1112:	5a 81       	ldd	r21, Y+2	; 0x02
    1114:	6b 81       	ldd	r22, Y+3	; 0x03
    1116:	7c 81       	ldd	r23, Y+4	; 0x04
    1118:	76 95       	lsr	r23
    111a:	67 95       	ror	r22
    111c:	57 95       	ror	r21
    111e:	47 95       	ror	r20
    1120:	76 95       	lsr	r23
    1122:	67 95       	ror	r22
    1124:	57 95       	ror	r21
    1126:	47 95       	ror	r20
    1128:	41 70       	andi	r20, 0x01	; 1
    112a:	62 e0       	ldi	r22, 0x02	; 2
    112c:	82 ef       	ldi	r24, 0xF2	; 242
    112e:	93 e0       	ldi	r25, 0x03	; 3
    1130:	17 db       	rcall	.-2514   	; 0x760 <updateBit>
    1132:	49 81       	ldd	r20, Y+1	; 0x01
    1134:	5a 81       	ldd	r21, Y+2	; 0x02
    1136:	6b 81       	ldd	r22, Y+3	; 0x03
    1138:	7c 81       	ldd	r23, Y+4	; 0x04
    113a:	76 95       	lsr	r23
    113c:	67 95       	ror	r22
    113e:	57 95       	ror	r21
    1140:	47 95       	ror	r20
    1142:	41 70       	andi	r20, 0x01	; 1
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	82 ef       	ldi	r24, 0xF2	; 242
    1148:	93 e0       	ldi	r25, 0x03	; 3
    114a:	0a db       	rcall	.-2540   	; 0x760 <updateBit>
    114c:	49 81       	ldd	r20, Y+1	; 0x01
    114e:	41 70       	andi	r20, 0x01	; 1
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	82 ef       	ldi	r24, 0xF2	; 242
    1154:	93 e0       	ldi	r25, 0x03	; 3
    1156:	04 db       	rcall	.-2552   	; 0x760 <updateBit>
    1158:	29 96       	adiw	r28, 0x09	; 9
    115a:	0f b6       	in	r0, 0x3f	; 63
    115c:	f8 94       	cli
    115e:	de bf       	out	0x3e, r29	; 62
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	cd bf       	out	0x3d, r28	; 61
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	08 95       	ret

00001172 <timer_start>:
    1172:	cf 93       	push	r28
    1174:	df 93       	push	r29
    1176:	00 d0       	rcall	.+0      	; 0x1178 <timer_start+0x6>
    1178:	00 d0       	rcall	.+0      	; 0x117a <timer_start+0x8>
    117a:	1f 92       	push	r1
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	41 30       	cpi	r20, 0x01	; 1
    1182:	19 f0       	breq	.+6      	; 0x118a <timer_start+0x18>
    1184:	42 30       	cpi	r20, 0x02	; 2
    1186:	d1 f0       	breq	.+52     	; 0x11bc <timer_start+0x4a>
    1188:	31 c0       	rjmp	.+98     	; 0x11ec <timer_start+0x7a>
    118a:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <u8_timer1ClockSource>
    118e:	42 fb       	bst	r20, 2
    1190:	44 27       	eor	r20, r20
    1192:	40 f9       	bld	r20, 0
    1194:	62 e0       	ldi	r22, 0x02	; 2
    1196:	81 e8       	ldi	r24, 0x81	; 129
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	e2 da       	rcall	.-2620   	; 0x760 <updateBit>
    119c:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <u8_timer1ClockSource>
    11a0:	46 95       	lsr	r20
    11a2:	41 70       	andi	r20, 0x01	; 1
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	81 e8       	ldi	r24, 0x81	; 129
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	da da       	rcall	.-2636   	; 0x760 <updateBit>
    11ac:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <u8_timer1ClockSource>
    11b0:	41 70       	andi	r20, 0x01	; 1
    11b2:	60 e0       	ldi	r22, 0x00	; 0
    11b4:	81 e8       	ldi	r24, 0x81	; 129
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	d3 da       	rcall	.-2650   	; 0x760 <updateBit>
    11ba:	18 c0       	rjmp	.+48     	; 0x11ec <timer_start+0x7a>
    11bc:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <u8_timer2ClockSource>
    11c0:	42 fb       	bst	r20, 2
    11c2:	44 27       	eor	r20, r20
    11c4:	40 f9       	bld	r20, 0
    11c6:	62 e0       	ldi	r22, 0x02	; 2
    11c8:	81 eb       	ldi	r24, 0xB1	; 177
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	c9 da       	rcall	.-2670   	; 0x760 <updateBit>
    11ce:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <u8_timer2ClockSource>
    11d2:	46 95       	lsr	r20
    11d4:	41 70       	andi	r20, 0x01	; 1
    11d6:	61 e0       	ldi	r22, 0x01	; 1
    11d8:	81 eb       	ldi	r24, 0xB1	; 177
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	c1 da       	rcall	.-2686   	; 0x760 <updateBit>
    11de:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <u8_timer2ClockSource>
    11e2:	41 70       	andi	r20, 0x01	; 1
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	81 eb       	ldi	r24, 0xB1	; 177
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	ba da       	rcall	.-2700   	; 0x760 <updateBit>
    11ec:	0f 90       	pop	r0
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <timer_enableInterrupt>:
    11fc:	cf 92       	push	r12
    11fe:	df 92       	push	r13
    1200:	ef 92       	push	r14
    1202:	ff 92       	push	r15
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 d0       	rcall	.+0      	; 0x120e <timer_enableInterrupt+0x12>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <timer_enableInterrupt+0x14>
    1210:	1f 92       	push	r1
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	49 83       	std	Y+1, r20	; 0x01
    1218:	5a 83       	std	Y+2, r21	; 0x02
    121a:	6b 83       	std	Y+3, r22	; 0x03
    121c:	7c 83       	std	Y+4, r23	; 0x04
    121e:	8d 83       	std	Y+5, r24	; 0x05
    1220:	02 2f       	mov	r16, r18
    1222:	41 30       	cpi	r20, 0x01	; 1
    1224:	21 f0       	breq	.+8      	; 0x122e <timer_enableInterrupt+0x32>
    1226:	42 30       	cpi	r20, 0x02	; 2
    1228:	09 f4       	brne	.+2      	; 0x122c <timer_enableInterrupt+0x30>
    122a:	5e c0       	rjmp	.+188    	; 0x12e8 <timer_enableInterrupt+0xec>
    122c:	95 c0       	rjmp	.+298    	; 0x1358 <timer_enableInterrupt+0x15c>
    122e:	0f 2e       	mov	r0, r31
    1230:	f1 e8       	ldi	r31, 0x81	; 129
    1232:	ef 2e       	mov	r14, r31
    1234:	f1 2c       	mov	r15, r1
    1236:	f0 2d       	mov	r31, r0
    1238:	f7 01       	movw	r30, r14
    123a:	80 81       	ld	r24, Z
    123c:	64 e0       	ldi	r22, 0x04	; 4
    123e:	c1 da       	rcall	.-2686   	; 0x7c2 <checkBit>
    1240:	18 2f       	mov	r17, r24
    1242:	f7 01       	movw	r30, r14
    1244:	80 81       	ld	r24, Z
    1246:	63 e0       	ldi	r22, 0x03	; 3
    1248:	bc da       	rcall	.-2696   	; 0x7c2 <checkBit>
    124a:	11 0f       	add	r17, r17
    124c:	11 0f       	add	r17, r17
    124e:	11 0f       	add	r17, r17
    1250:	f4 e0       	ldi	r31, 0x04	; 4
    1252:	8f 9f       	mul	r24, r31
    1254:	c0 01       	movw	r24, r0
    1256:	11 24       	eor	r1, r1
    1258:	18 2b       	or	r17, r24
    125a:	68 94       	set
    125c:	cc 24       	eor	r12, r12
    125e:	c7 f8       	bld	r12, 7
    1260:	d1 2c       	mov	r13, r1
    1262:	f6 01       	movw	r30, r12
    1264:	80 81       	ld	r24, Z
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	ac da       	rcall	.-2728   	; 0x7c2 <checkBit>
    126a:	f8 2e       	mov	r15, r24
    126c:	f6 01       	movw	r30, r12
    126e:	80 81       	ld	r24, Z
    1270:	60 e0       	ldi	r22, 0x00	; 0
    1272:	a7 da       	rcall	.-2738   	; 0x7c2 <checkBit>
    1274:	ff 0c       	add	r15, r15
    1276:	81 2b       	or	r24, r17
    1278:	8f 29       	or	r24, r15
    127a:	01 30       	cpi	r16, 0x01	; 1
    127c:	d9 f0       	breq	.+54     	; 0x12b4 <timer_enableInterrupt+0xb8>
    127e:	28 f0       	brcs	.+10     	; 0x128a <timer_enableInterrupt+0x8e>
    1280:	02 30       	cpi	r16, 0x02	; 2
    1282:	21 f1       	breq	.+72     	; 0x12cc <timer_enableInterrupt+0xd0>
    1284:	03 30       	cpi	r16, 0x03	; 3
    1286:	39 f1       	breq	.+78     	; 0x12d6 <timer_enableInterrupt+0xda>
    1288:	67 c0       	rjmp	.+206    	; 0x1358 <timer_enableInterrupt+0x15c>
    128a:	88 30       	cpi	r24, 0x08	; 8
    128c:	38 f4       	brcc	.+14     	; 0x129c <timer_enableInterrupt+0xa0>
    128e:	84 30       	cpi	r24, 0x04	; 4
    1290:	61 f0       	breq	.+24     	; 0x12aa <timer_enableInterrupt+0xae>
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	8f e6       	ldi	r24, 0x6F	; 111
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	7b da       	rcall	.-2826   	; 0x790 <setBit>
    129a:	5e c0       	rjmp	.+188    	; 0x1358 <timer_enableInterrupt+0x15c>
    129c:	80 fd       	sbrc	r24, 0
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <timer_enableInterrupt+0xae>
    12a0:	65 e0       	ldi	r22, 0x05	; 5
    12a2:	8f e6       	ldi	r24, 0x6F	; 111
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	74 da       	rcall	.-2840   	; 0x790 <setBit>
    12a8:	57 c0       	rjmp	.+174    	; 0x1358 <timer_enableInterrupt+0x15c>
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	8f e6       	ldi	r24, 0x6F	; 111
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	6f da       	rcall	.-2850   	; 0x790 <setBit>
    12b2:	52 c0       	rjmp	.+164    	; 0x1358 <timer_enableInterrupt+0x15c>
    12b4:	88 30       	cpi	r24, 0x08	; 8
    12b6:	18 f4       	brcc	.+6      	; 0x12be <timer_enableInterrupt+0xc2>
    12b8:	84 30       	cpi	r24, 0x04	; 4
    12ba:	19 f4       	brne	.+6      	; 0x12c2 <timer_enableInterrupt+0xc6>
    12bc:	4d c0       	rjmp	.+154    	; 0x1358 <timer_enableInterrupt+0x15c>
    12be:	80 fd       	sbrc	r24, 0
    12c0:	4b c0       	rjmp	.+150    	; 0x1358 <timer_enableInterrupt+0x15c>
    12c2:	61 e0       	ldi	r22, 0x01	; 1
    12c4:	8f e6       	ldi	r24, 0x6F	; 111
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	63 da       	rcall	.-2874   	; 0x790 <setBit>
    12ca:	46 c0       	rjmp	.+140    	; 0x1358 <timer_enableInterrupt+0x15c>
    12cc:	62 e0       	ldi	r22, 0x02	; 2
    12ce:	8f e6       	ldi	r24, 0x6F	; 111
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	5e da       	rcall	.-2884   	; 0x790 <setBit>
    12d4:	41 c0       	rjmp	.+130    	; 0x1358 <timer_enableInterrupt+0x15c>
    12d6:	88 30       	cpi	r24, 0x08	; 8
    12d8:	10 f0       	brcs	.+4      	; 0x12de <timer_enableInterrupt+0xe2>
    12da:	80 ff       	sbrs	r24, 0
    12dc:	3d c0       	rjmp	.+122    	; 0x1358 <timer_enableInterrupt+0x15c>
    12de:	65 e0       	ldi	r22, 0x05	; 5
    12e0:	8f e6       	ldi	r24, 0x6F	; 111
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	55 da       	rcall	.-2902   	; 0x790 <setBit>
    12e6:	38 c0       	rjmp	.+112    	; 0x1358 <timer_enableInterrupt+0x15c>
    12e8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    12ec:	63 e0       	ldi	r22, 0x03	; 3
    12ee:	69 da       	rcall	.-2862   	; 0x7c2 <checkBit>
    12f0:	18 2f       	mov	r17, r24
    12f2:	0f 2e       	mov	r0, r31
    12f4:	f0 eb       	ldi	r31, 0xB0	; 176
    12f6:	ef 2e       	mov	r14, r31
    12f8:	f1 2c       	mov	r15, r1
    12fa:	f0 2d       	mov	r31, r0
    12fc:	f7 01       	movw	r30, r14
    12fe:	80 81       	ld	r24, Z
    1300:	61 e0       	ldi	r22, 0x01	; 1
    1302:	5f da       	rcall	.-2882   	; 0x7c2 <checkBit>
    1304:	11 0f       	add	r17, r17
    1306:	11 0f       	add	r17, r17
    1308:	88 0f       	add	r24, r24
    130a:	18 2b       	or	r17, r24
    130c:	f7 01       	movw	r30, r14
    130e:	80 81       	ld	r24, Z
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	57 da       	rcall	.-2898   	; 0x7c2 <checkBit>
    1314:	81 2b       	or	r24, r17
    1316:	01 30       	cpi	r16, 0x01	; 1
    1318:	91 f0       	breq	.+36     	; 0x133e <timer_enableInterrupt+0x142>
    131a:	18 f0       	brcs	.+6      	; 0x1322 <timer_enableInterrupt+0x126>
    131c:	02 30       	cpi	r16, 0x02	; 2
    131e:	c1 f0       	breq	.+48     	; 0x1350 <timer_enableInterrupt+0x154>
    1320:	1b c0       	rjmp	.+54     	; 0x1358 <timer_enableInterrupt+0x15c>
    1322:	84 30       	cpi	r24, 0x04	; 4
    1324:	38 f4       	brcc	.+14     	; 0x1334 <timer_enableInterrupt+0x138>
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	29 f0       	breq	.+10     	; 0x1334 <timer_enableInterrupt+0x138>
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	80 e7       	ldi	r24, 0x70	; 112
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	2f da       	rcall	.-2978   	; 0x790 <setBit>
    1332:	12 c0       	rjmp	.+36     	; 0x1358 <timer_enableInterrupt+0x15c>
    1334:	61 e0       	ldi	r22, 0x01	; 1
    1336:	80 e7       	ldi	r24, 0x70	; 112
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	2a da       	rcall	.-2988   	; 0x790 <setBit>
    133c:	0d c0       	rjmp	.+26     	; 0x1358 <timer_enableInterrupt+0x15c>
    133e:	84 30       	cpi	r24, 0x04	; 4
    1340:	58 f4       	brcc	.+22     	; 0x1358 <timer_enableInterrupt+0x15c>
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	49 f0       	breq	.+18     	; 0x1358 <timer_enableInterrupt+0x15c>
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	80 e7       	ldi	r24, 0x70	; 112
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	21 da       	rcall	.-3006   	; 0x790 <setBit>
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <timer_enableInterrupt+0x15c>
    1350:	62 e0       	ldi	r22, 0x02	; 2
    1352:	80 e7       	ldi	r24, 0x70	; 112
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	1c da       	rcall	.-3016   	; 0x790 <setBit>
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	08 95       	ret

00001374 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	00 d0       	rcall	.+0      	; 0x137e <timer_attachInterrupt+0xa>
    137e:	00 d0       	rcall	.+0      	; 0x1380 <timer_attachInterrupt+0xc>
    1380:	1f 92       	push	r1
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    1386:	41 30       	cpi	r20, 0x01	; 1
    1388:	19 f0       	breq	.+6      	; 0x1390 <timer_attachInterrupt+0x1c>
    138a:	42 30       	cpi	r20, 0x02	; 2
    138c:	51 f0       	breq	.+20     	; 0x13a2 <timer_attachInterrupt+0x2e>
    138e:	11 c0       	rjmp	.+34     	; 0x13b2 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    1390:	e2 2f       	mov	r30, r18
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	e7 51       	subi	r30, 0x17	; 23
    139a:	fc 4f       	sbci	r31, 0xFC	; 252
    139c:	11 83       	std	Z+1, r17	; 0x01
    139e:	00 83       	st	Z, r16
		#endif
			break;
    13a0:	08 c0       	rjmp	.+16     	; 0x13b2 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    13a2:	e2 2f       	mov	r30, r18
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	ee 0f       	add	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	ed 50       	subi	r30, 0x0D	; 13
    13ac:	fc 4f       	sbci	r31, 0xFC	; 252
    13ae:	11 83       	std	Z+1, r17	; 0x01
    13b0:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	1f 91       	pop	r17
    13c2:	0f 91       	pop	r16
    13c4:	08 95       	ret

000013c6 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    13c6:	4f 92       	push	r4
    13c8:	5f 92       	push	r5
    13ca:	6f 92       	push	r6
    13cc:	7f 92       	push	r7
    13ce:	8f 92       	push	r8
    13d0:	9f 92       	push	r9
    13d2:	af 92       	push	r10
    13d4:	bf 92       	push	r11
    13d6:	cf 92       	push	r12
    13d8:	df 92       	push	r13
    13da:	ef 92       	push	r14
    13dc:	ff 92       	push	r15
    13de:	cf 93       	push	r28
    13e0:	df 93       	push	r29
    13e2:	4b 01       	movw	r8, r22
    13e4:	5c 01       	movw	r10, r24
    13e6:	ea 01       	movw	r28, r20
    13e8:	0f 2e       	mov	r0, r31
    13ea:	f0 e2       	ldi	r31, 0x20	; 32
    13ec:	4f 2e       	mov	r4, r31
    13ee:	f1 ea       	ldi	r31, 0xA1	; 161
    13f0:	5f 2e       	mov	r5, r31
    13f2:	f7 e0       	ldi	r31, 0x07	; 7
    13f4:	6f 2e       	mov	r6, r31
    13f6:	71 2c       	mov	r7, r1
    13f8:	f0 2d       	mov	r31, r0
    13fa:	c3 01       	movw	r24, r6
    13fc:	b2 01       	movw	r22, r4
    13fe:	a5 01       	movw	r20, r10
    1400:	94 01       	movw	r18, r8
    1402:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    1406:	69 01       	movw	r12, r18
    1408:	7a 01       	movw	r14, r20
    140a:	c3 01       	movw	r24, r6
    140c:	b2 01       	movw	r22, r4
    140e:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    1412:	ca 01       	movw	r24, r20
    1414:	b9 01       	movw	r22, r18
    1416:	a5 01       	movw	r20, r10
    1418:	94 01       	movw	r18, r8
    141a:	db d9       	rcall	.-3146   	; 0x7d2 <calculateError>
    141c:	44 97       	sbiw	r24, 0x14	; 20
    141e:	30 f4       	brcc	.+12     	; 0x142c <calculateUBRR+0x66>
    1420:	d7 01       	movw	r26, r14
    1422:	c6 01       	movw	r24, r12
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	a1 09       	sbc	r26, r1
    1428:	b1 09       	sbc	r27, r1
    142a:	0f c0       	rjmp	.+30     	; 0x144a <calculateUBRR+0x84>
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	88 83       	st	Y, r24
    1430:	60 e4       	ldi	r22, 0x40	; 64
    1432:	72 e4       	ldi	r23, 0x42	; 66
    1434:	8f e0       	ldi	r24, 0x0F	; 15
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a5 01       	movw	r20, r10
    143a:	94 01       	movw	r18, r8
    143c:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    1440:	da 01       	movw	r26, r20
    1442:	c9 01       	movw	r24, r18
    1444:	01 97       	sbiw	r24, 0x01	; 1
    1446:	a1 09       	sbc	r26, r1
    1448:	b1 09       	sbc	r27, r1
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	bf 90       	pop	r11
    1458:	af 90       	pop	r10
    145a:	9f 90       	pop	r9
    145c:	8f 90       	pop	r8
    145e:	7f 90       	pop	r7
    1460:	6f 90       	pop	r6
    1462:	5f 90       	pop	r5
    1464:	4f 90       	pop	r4
    1466:	08 95       	ret

00001468 <__vector_20>:
    1468:	1f 92       	push	r1
    146a:	0f 92       	push	r0
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	0f 92       	push	r0
    1470:	11 24       	eor	r1, r1
    1472:	0b b6       	in	r0, 0x3b	; 59
    1474:	0f 92       	push	r0
    1476:	2f 93       	push	r18
    1478:	3f 93       	push	r19
    147a:	4f 93       	push	r20
    147c:	5f 93       	push	r21
    147e:	6f 93       	push	r22
    1480:	7f 93       	push	r23
    1482:	8f 93       	push	r24
    1484:	9f 93       	push	r25
    1486:	af 93       	push	r26
    1488:	bf 93       	push	r27
    148a:	ef 93       	push	r30
    148c:	ff 93       	push	r31
    148e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1492:	62 e0       	ldi	r22, 0x02	; 2
    1494:	96 d9       	rcall	.-3284   	; 0x7c2 <checkBit>
    1496:	81 30       	cpi	r24, 0x01	; 1
    1498:	99 f4       	brne	.+38     	; 0x14c0 <__vector_20+0x58>
    149a:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14a4:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14a8:	82 70       	andi	r24, 0x02	; 2
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	98 2f       	mov	r25, r24
    14ae:	88 27       	eor	r24, r24
    14b0:	82 2b       	or	r24, r18
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	e4 50       	subi	r30, 0x04	; 4
    14b8:	fc 4f       	sbci	r31, 0xFC	; 252
    14ba:	91 83       	std	Z+1, r25	; 0x01
    14bc:	80 83       	st	Z, r24
    14be:	0c c0       	rjmp	.+24     	; 0x14d8 <__vector_20+0x70>
    14c0:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	ee 0f       	add	r30, r30
    14ce:	ff 1f       	adc	r31, r31
    14d0:	e4 50       	subi	r30, 0x04	; 4
    14d2:	fc 4f       	sbci	r31, 0xFC	; 252
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	80 83       	st	Z, r24
    14d8:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    14dc:	89 30       	cpi	r24, 0x09	; 9
    14de:	30 f4       	brcc	.+12     	; 0x14ec <__vector_20+0x84>
    14e0:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    14e4:	8f 5f       	subi	r24, 0xFF	; 255
    14e6:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <u8_rx0LastReceivedIndex>
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <__vector_20+0x88>
    14ec:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <u8_rx0LastReceivedIndex>
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <b_rx0Available>
    14f6:	ff 91       	pop	r31
    14f8:	ef 91       	pop	r30
    14fa:	bf 91       	pop	r27
    14fc:	af 91       	pop	r26
    14fe:	9f 91       	pop	r25
    1500:	8f 91       	pop	r24
    1502:	7f 91       	pop	r23
    1504:	6f 91       	pop	r22
    1506:	5f 91       	pop	r21
    1508:	4f 91       	pop	r20
    150a:	3f 91       	pop	r19
    150c:	2f 91       	pop	r18
    150e:	0f 90       	pop	r0
    1510:	0b be       	out	0x3b, r0	; 59
    1512:	0f 90       	pop	r0
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	0f 90       	pop	r0
    1518:	1f 90       	pop	r1
    151a:	18 95       	reti

0000151c <__vector_21>:
    151c:	1f 92       	push	r1
    151e:	0f 92       	push	r0
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	0f 92       	push	r0
    1524:	11 24       	eor	r1, r1
    1526:	0b b6       	in	r0, 0x3b	; 59
    1528:	0f 92       	push	r0
    152a:	2f 93       	push	r18
    152c:	3f 93       	push	r19
    152e:	4f 93       	push	r20
    1530:	5f 93       	push	r21
    1532:	6f 93       	push	r22
    1534:	7f 93       	push	r23
    1536:	8f 93       	push	r24
    1538:	9f 93       	push	r25
    153a:	af 93       	push	r26
    153c:	bf 93       	push	r27
    153e:	ef 93       	push	r30
    1540:	ff 93       	push	r31
    1542:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1546:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    154a:	98 17       	cp	r25, r24
    154c:	69 f1       	breq	.+90     	; 0x15a8 <__vector_21+0x8c>
    154e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1552:	62 e0       	ldi	r22, 0x02	; 2
    1554:	36 d9       	rcall	.-3476   	; 0x7c2 <checkBit>
    1556:	81 30       	cpi	r24, 0x01	; 1
    1558:	79 f4       	brne	.+30     	; 0x1578 <__vector_21+0x5c>
    155a:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	ee 0f       	add	r30, r30
    1562:	ff 1f       	adc	r31, r31
    1564:	ee 5e       	subi	r30, 0xEE	; 238
    1566:	fb 4f       	sbci	r31, 0xFB	; 251
    1568:	80 81       	ld	r24, Z
    156a:	91 81       	ldd	r25, Z+1	; 0x01
    156c:	e1 ec       	ldi	r30, 0xC1	; 193
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	91 70       	andi	r25, 0x01	; 1
    1574:	89 2b       	or	r24, r25
    1576:	80 83       	st	Z, r24
    1578:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	ee 0f       	add	r30, r30
    1580:	ff 1f       	adc	r31, r31
    1582:	ee 5e       	subi	r30, 0xEE	; 238
    1584:	fb 4f       	sbci	r31, 0xFB	; 251
    1586:	80 81       	ld	r24, Z
    1588:	91 81       	ldd	r25, Z+1	; 0x01
    158a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    158e:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1592:	89 30       	cpi	r24, 0x09	; 9
    1594:	30 f4       	brcc	.+12     	; 0x15a2 <__vector_21+0x86>
    1596:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_tx0LastTransmittedIndex>
    15a0:	07 c0       	rjmp	.+14     	; 0x15b0 <__vector_21+0x94>
    15a2:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <__vector_21+0x94>
    15a8:	65 e0       	ldi	r22, 0x05	; 5
    15aa:	81 ec       	ldi	r24, 0xC1	; 193
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	fc d8       	rcall	.-3592   	; 0x7a8 <clearBit>
    15b0:	ff 91       	pop	r31
    15b2:	ef 91       	pop	r30
    15b4:	bf 91       	pop	r27
    15b6:	af 91       	pop	r26
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	7f 91       	pop	r23
    15be:	6f 91       	pop	r22
    15c0:	5f 91       	pop	r21
    15c2:	4f 91       	pop	r20
    15c4:	3f 91       	pop	r19
    15c6:	2f 91       	pop	r18
    15c8:	0f 90       	pop	r0
    15ca:	0b be       	out	0x3b, r0	; 59
    15cc:	0f 90       	pop	r0
    15ce:	0f be       	out	0x3f, r0	; 63
    15d0:	0f 90       	pop	r0
    15d2:	1f 90       	pop	r1
    15d4:	18 95       	reti

000015d6 <__vector_22>:
    15d6:	1f 92       	push	r1
    15d8:	0f 92       	push	r0
    15da:	0f b6       	in	r0, 0x3f	; 63
    15dc:	0f 92       	push	r0
    15de:	11 24       	eor	r1, r1
    15e0:	0b b6       	in	r0, 0x3b	; 59
    15e2:	0f 92       	push	r0
    15e4:	8f 93       	push	r24
    15e6:	9f 93       	push	r25
    15e8:	ef 93       	push	r30
    15ea:	ff 93       	push	r31
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	fc 01       	movw	r30, r24
    15f2:	ee 0f       	add	r30, r30
    15f4:	ff 1f       	adc	r31, r31
    15f6:	ee 5e       	subi	r30, 0xEE	; 238
    15f8:	fb 4f       	sbci	r31, 0xFB	; 251
    15fa:	11 82       	std	Z+1, r1	; 0x01
    15fc:	10 82       	st	Z, r1
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	8a 30       	cpi	r24, 0x0A	; 10
    1602:	91 05       	cpc	r25, r1
    1604:	a9 f7       	brne	.-22     	; 0x15f0 <__vector_22+0x1a>
    1606:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
    160a:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <u8_tx0LastRequestedIndex>
    160e:	ff 91       	pop	r31
    1610:	ef 91       	pop	r30
    1612:	9f 91       	pop	r25
    1614:	8f 91       	pop	r24
    1616:	0f 90       	pop	r0
    1618:	0b be       	out	0x3b, r0	; 59
    161a:	0f 90       	pop	r0
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	0f 90       	pop	r0
    1620:	1f 90       	pop	r1
    1622:	18 95       	reti

00001624 <uart_init>:
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	2b 97       	sbiw	r28, 0x0b	; 11
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	0a 83       	std	Y+2, r16	; 0x02
    163e:	1b 83       	std	Y+3, r17	; 0x03
    1640:	2c 83       	std	Y+4, r18	; 0x04
    1642:	3d 83       	std	Y+5, r19	; 0x05
    1644:	4e 83       	std	Y+6, r20	; 0x06
    1646:	5f 83       	std	Y+7, r21	; 0x07
    1648:	68 87       	std	Y+8, r22	; 0x08
    164a:	79 87       	std	Y+9, r23	; 0x09
    164c:	8a 87       	std	Y+10, r24	; 0x0a
    164e:	9b 87       	std	Y+11, r25	; 0x0b
    1650:	19 82       	std	Y+1, r1	; 0x01
    1652:	01 11       	cpse	r16, r1
    1654:	98 c0       	rjmp	.+304    	; 0x1786 <uart_init+0x162>
    1656:	19 2f       	mov	r17, r25
    1658:	e2 ec       	ldi	r30, 0xC2	; 194
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	8f 73       	andi	r24, 0x3F	; 63
    1660:	80 83       	st	Z, r24
    1662:	6b 81       	ldd	r22, Y+3	; 0x03
    1664:	7c 81       	ldd	r23, Y+4	; 0x04
    1666:	8d 81       	ldd	r24, Y+5	; 0x05
    1668:	9e 81       	ldd	r25, Y+6	; 0x06
    166a:	ae 01       	movw	r20, r28
    166c:	4f 5f       	subi	r20, 0xFF	; 255
    166e:	5f 4f       	sbci	r21, 0xFF	; 255
    1670:	aa de       	rcall	.-684    	; 0x13c6 <calculateUBRR>
    1672:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1676:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    167a:	49 81       	ldd	r20, Y+1	; 0x01
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	80 ec       	ldi	r24, 0xC0	; 192
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	6e d8       	rcall	.-3876   	; 0x760 <updateBit>
    1684:	89 85       	ldd	r24, Y+9	; 0x09
    1686:	82 30       	cpi	r24, 0x02	; 2
    1688:	31 f1       	breq	.+76     	; 0x16d6 <uart_init+0xb2>
    168a:	28 f4       	brcc	.+10     	; 0x1696 <uart_init+0x72>
    168c:	88 23       	and	r24, r24
    168e:	49 f0       	breq	.+18     	; 0x16a2 <uart_init+0x7e>
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	a1 f0       	breq	.+40     	; 0x16bc <uart_init+0x98>
    1694:	46 c0       	rjmp	.+140    	; 0x1722 <uart_init+0xfe>
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	59 f1       	breq	.+86     	; 0x16f0 <uart_init+0xcc>
    169a:	84 30       	cpi	r24, 0x04	; 4
    169c:	09 f4       	brne	.+2      	; 0x16a0 <uart_init+0x7c>
    169e:	35 c0       	rjmp	.+106    	; 0x170a <uart_init+0xe6>
    16a0:	40 c0       	rjmp	.+128    	; 0x1722 <uart_init+0xfe>
    16a2:	61 e0       	ldi	r22, 0x01	; 1
    16a4:	82 ec       	ldi	r24, 0xC2	; 194
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	7f d8       	rcall	.-3842   	; 0x7a8 <clearBit>
    16aa:	62 e0       	ldi	r22, 0x02	; 2
    16ac:	82 ec       	ldi	r24, 0xC2	; 194
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	7b d8       	rcall	.-3850   	; 0x7a8 <clearBit>
    16b2:	62 e0       	ldi	r22, 0x02	; 2
    16b4:	81 ec       	ldi	r24, 0xC1	; 193
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	77 d8       	rcall	.-3858   	; 0x7a8 <clearBit>
    16ba:	33 c0       	rjmp	.+102    	; 0x1722 <uart_init+0xfe>
    16bc:	61 e0       	ldi	r22, 0x01	; 1
    16be:	82 ec       	ldi	r24, 0xC2	; 194
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	66 d8       	rcall	.-3892   	; 0x790 <setBit>
    16c4:	62 e0       	ldi	r22, 0x02	; 2
    16c6:	82 ec       	ldi	r24, 0xC2	; 194
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	6e d8       	rcall	.-3876   	; 0x7a8 <clearBit>
    16cc:	62 e0       	ldi	r22, 0x02	; 2
    16ce:	81 ec       	ldi	r24, 0xC1	; 193
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	6a d8       	rcall	.-3884   	; 0x7a8 <clearBit>
    16d4:	26 c0       	rjmp	.+76     	; 0x1722 <uart_init+0xfe>
    16d6:	61 e0       	ldi	r22, 0x01	; 1
    16d8:	82 ec       	ldi	r24, 0xC2	; 194
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	65 d8       	rcall	.-3894   	; 0x7a8 <clearBit>
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	82 ec       	ldi	r24, 0xC2	; 194
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	55 d8       	rcall	.-3926   	; 0x790 <setBit>
    16e6:	62 e0       	ldi	r22, 0x02	; 2
    16e8:	81 ec       	ldi	r24, 0xC1	; 193
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	5d d8       	rcall	.-3910   	; 0x7a8 <clearBit>
    16ee:	19 c0       	rjmp	.+50     	; 0x1722 <uart_init+0xfe>
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	82 ec       	ldi	r24, 0xC2	; 194
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	4c d8       	rcall	.-3944   	; 0x790 <setBit>
    16f8:	62 e0       	ldi	r22, 0x02	; 2
    16fa:	82 ec       	ldi	r24, 0xC2	; 194
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	48 d8       	rcall	.-3952   	; 0x790 <setBit>
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	81 ec       	ldi	r24, 0xC1	; 193
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	50 d8       	rcall	.-3936   	; 0x7a8 <clearBit>
    1708:	0c c0       	rjmp	.+24     	; 0x1722 <uart_init+0xfe>
    170a:	61 e0       	ldi	r22, 0x01	; 1
    170c:	82 ec       	ldi	r24, 0xC2	; 194
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	3f d8       	rcall	.-3970   	; 0x790 <setBit>
    1712:	62 e0       	ldi	r22, 0x02	; 2
    1714:	82 ec       	ldi	r24, 0xC2	; 194
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	3b d8       	rcall	.-3978   	; 0x790 <setBit>
    171a:	62 e0       	ldi	r22, 0x02	; 2
    171c:	81 ec       	ldi	r24, 0xC1	; 193
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	37 d8       	rcall	.-3986   	; 0x790 <setBit>
    1722:	4a 85       	ldd	r20, Y+10	; 0x0a
    1724:	63 e0       	ldi	r22, 0x03	; 3
    1726:	82 ec       	ldi	r24, 0xC2	; 194
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	1a d8       	rcall	.-4044   	; 0x760 <updateBit>
    172c:	12 30       	cpi	r17, 0x02	; 2
    172e:	31 f4       	brne	.+12     	; 0x173c <uart_init+0x118>
    1730:	e2 ec       	ldi	r30, 0xC2	; 194
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 7c       	andi	r24, 0xCF	; 207
    1738:	80 83       	st	Z, r24
    173a:	09 c0       	rjmp	.+18     	; 0x174e <uart_init+0x12a>
    173c:	65 e0       	ldi	r22, 0x05	; 5
    173e:	82 ec       	ldi	r24, 0xC2	; 194
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	26 d8       	rcall	.-4020   	; 0x790 <setBit>
    1744:	41 2f       	mov	r20, r17
    1746:	64 e0       	ldi	r22, 0x04	; 4
    1748:	82 ec       	ldi	r24, 0xC2	; 194
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	09 d8       	rcall	.-4078   	; 0x760 <updateBit>
    174e:	8f 81       	ldd	r24, Y+7	; 0x07
    1750:	88 23       	and	r24, r24
    1752:	51 f0       	breq	.+20     	; 0x1768 <uart_init+0x144>
    1754:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <u8_rx0LastProcessedIndex>
    1758:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <u8_rx0LastReceivedIndex>
    175c:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <b_rx0Available>
    1760:	67 e0       	ldi	r22, 0x07	; 7
    1762:	81 ec       	ldi	r24, 0xC1	; 193
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	14 d8       	rcall	.-4056   	; 0x790 <setBit>
    1768:	88 85       	ldd	r24, Y+8	; 0x08
    176a:	88 23       	and	r24, r24
    176c:	61 f0       	breq	.+24     	; 0x1786 <uart_init+0x162>
    176e:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1772:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1776:	66 e0       	ldi	r22, 0x06	; 6
    1778:	81 ec       	ldi	r24, 0xC1	; 193
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	09 d8       	rcall	.-4078   	; 0x790 <setBit>
    177e:	65 e0       	ldi	r22, 0x05	; 5
    1780:	81 ec       	ldi	r24, 0xC1	; 193
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	05 d8       	rcall	.-4086   	; 0x790 <setBit>
    1786:	2b 96       	adiw	r28, 0x0b	; 11
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	08 95       	ret

0000179c <uart_start>:
    179c:	0f 93       	push	r16
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	2a 97       	sbiw	r28, 0x0a	; 10
    17aa:	0f b6       	in	r0, 0x3f	; 63
    17ac:	f8 94       	cli
    17ae:	de bf       	out	0x3e, r29	; 62
    17b0:	0f be       	out	0x3f, r0	; 63
    17b2:	cd bf       	out	0x3d, r28	; 61
    17b4:	6f 83       	std	Y+7, r22	; 0x07
    17b6:	01 11       	cpse	r16, r1
    17b8:	0c c0       	rjmp	.+24     	; 0x17d2 <uart_start+0x36>
    17ba:	45 2f       	mov	r20, r21
    17bc:	64 e0       	ldi	r22, 0x04	; 4
    17be:	81 ec       	ldi	r24, 0xC1	; 193
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 b0 03 	call	0x760	; 0x760 <updateBit>
    17c6:	4f 81       	ldd	r20, Y+7	; 0x07
    17c8:	63 e0       	ldi	r22, 0x03	; 3
    17ca:	81 ec       	ldi	r24, 0xC1	; 193
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 b0 03 	call	0x760	; 0x760 <updateBit>
    17d2:	2a 96       	adiw	r28, 0x0a	; 10
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	1f 91       	pop	r17
    17e4:	0f 91       	pop	r16
    17e6:	08 95       	ret

000017e8 <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    17e8:	ef 92       	push	r14
    17ea:	ff 92       	push	r15
    17ec:	0f 93       	push	r16
    17ee:	1f 93       	push	r17
    17f0:	cf 93       	push	r28
    17f2:	df 93       	push	r29
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	2a 97       	sbiw	r28, 0x0a	; 10
    17fa:	0f b6       	in	r0, 0x3f	; 63
    17fc:	f8 94       	cli
    17fe:	de bf       	out	0x3e, r29	; 62
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	cd bf       	out	0x3d, r28	; 61
    1804:	09 83       	std	Y+1, r16	; 0x01
    1806:	1a 83       	std	Y+2, r17	; 0x02
    1808:	2b 83       	std	Y+3, r18	; 0x03
    180a:	3c 83       	std	Y+4, r19	; 0x04
    180c:	4d 83       	std	Y+5, r20	; 0x05
    180e:	5e 83       	std	Y+6, r21	; 0x06
    1810:	6f 83       	std	Y+7, r22	; 0x07
    1812:	78 87       	std	Y+8, r23	; 0x08
    1814:	89 87       	std	Y+9, r24	; 0x09
    1816:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    1818:	01 11       	cpse	r16, r1
    181a:	42 c0       	rjmp	.+132    	; 0x18a0 <uart_transmit+0xb8>
	{
		case UART0:
		#ifdef USING_UART0
		#ifdef UART0_INTERRUPT_MODE
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    181c:	00 ec       	ldi	r16, 0xC0	; 192
    181e:	10 e0       	ldi	r17, 0x00	; 0
    1820:	f8 01       	movw	r30, r16
    1822:	80 81       	ld	r24, Z
    1824:	65 e0       	ldi	r22, 0x05	; 5
    1826:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <checkBit>
    182a:	88 23       	and	r24, r24
    182c:	c9 f3       	breq	.-14     	; 0x1820 <uart_transmit+0x38>
			au16_tx0Buffer[u8_tx0LastRequestedIndex] = u16_data;
    182e:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	ee 5e       	subi	r30, 0xEE	; 238
    183a:	fb 4f       	sbci	r31, 0xFB	; 251
    183c:	f1 82       	std	Z+1, r15	; 0x01
    183e:	e0 82       	st	Z, r14
			if (u8_tx0LastRequestedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1840:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1844:	89 30       	cpi	r24, 0x09	; 9
    1846:	30 f4       	brcc	.+12     	; 0x1854 <uart_transmit+0x6c>
				u8_tx0LastRequestedIndex++;
    1848:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    184c:	8f 5f       	subi	r24, 0xFF	; 255
    184e:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <uart_transmit+0x70>
			else
				u8_tx0LastRequestedIndex = 0;
    1854:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <u8_tx0LastRequestedIndex>
			if (checkBit(UCSR0A, UDRE0) == SET)
    1858:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    185c:	65 e0       	ldi	r22, 0x05	; 5
    185e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <checkBit>
    1862:	81 30       	cpi	r24, 0x01	; 1
    1864:	e9 f4       	brne	.+58     	; 0x18a0 <uart_transmit+0xb8>
			{
				if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1866:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    186a:	89 30       	cpi	r24, 0x09	; 9
    186c:	30 f4       	brcc	.+12     	; 0x187a <uart_transmit+0x92>
					u8_tx0LastTransmittedIndex++;
    186e:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1872:	8f 5f       	subi	r24, 0xFF	; 255
    1874:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1878:	02 c0       	rjmp	.+4      	; 0x187e <uart_transmit+0x96>
				else
					u8_tx0LastTransmittedIndex = 0;
    187a:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
				setBit(&UCSR0B, UDRIE0);
    187e:	65 e0       	ldi	r22, 0x05	; 5
    1880:	81 ec       	ldi	r24, 0xC1	; 193
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 c8 03 	call	0x790	; 0x790 <setBit>
				if (s_uart.frameSize == _9BIT)
    1888:	88 85       	ldd	r24, Y+8	; 0x08
    188a:	84 30       	cpi	r24, 0x04	; 4
    188c:	39 f4       	brne	.+14     	; 0x189c <uart_transmit+0xb4>
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
    188e:	e1 ec       	ldi	r30, 0xC1	; 193
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	9f 2d       	mov	r25, r15
    1896:	91 70       	andi	r25, 0x01	; 1
    1898:	89 2b       	or	r24, r25
    189a:	80 83       	st	Z, r24
				UDR0 = (u8) u16_data;
    189c:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    18a0:	2a 96       	adiw	r28, 0x0a	; 10
    18a2:	0f b6       	in	r0, 0x3f	; 63
    18a4:	f8 94       	cli
    18a6:	de bf       	out	0x3e, r29	; 62
    18a8:	0f be       	out	0x3f, r0	; 63
    18aa:	cd bf       	out	0x3d, r28	; 61
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	08 95       	ret

000018ba <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    18ba:	1f 92       	push	r1
    18bc:	0f 92       	push	r0
    18be:	0f b6       	in	r0, 0x3f	; 63
    18c0:	0f 92       	push	r0
    18c2:	11 24       	eor	r1, r1
    18c4:	0b b6       	in	r0, 0x3b	; 59
    18c6:	0f 92       	push	r0
    18c8:	2f 93       	push	r18
    18ca:	3f 93       	push	r19
    18cc:	4f 93       	push	r20
    18ce:	5f 93       	push	r21
    18d0:	6f 93       	push	r22
    18d2:	7f 93       	push	r23
    18d4:	8f 93       	push	r24
    18d6:	9f 93       	push	r25
    18d8:	af 93       	push	r26
    18da:	bf 93       	push	r27
    18dc:	ef 93       	push	r30
    18de:	ff 93       	push	r31
	p_wdgCallback();
    18e0:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <p_wdgCallback>
    18e4:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <p_wdgCallback+0x1>
    18e8:	09 95       	icall
}
    18ea:	ff 91       	pop	r31
    18ec:	ef 91       	pop	r30
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	0f 90       	pop	r0
    1904:	0b be       	out	0x3b, r0	; 59
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <vl53l0x_init>:
		return 0;
}

void vl53l0x_getDeviceID(u8 *major, u8* minor)
{
	VL53L0X_GetProductRevision(&frontSensor, major, minor);
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	00 d0       	rcall	.+0      	; 0x1918 <vl53l0x_init+0x8>
    1918:	00 d0       	rcall	.+0      	; 0x191a <vl53l0x_init+0xa>
    191a:	1f 92       	push	r1
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	e8 e2       	ldi	r30, 0x28	; 40
    1922:	f4 e0       	ldi	r31, 0x04	; 4
    1924:	82 e0       	ldi	r24, 0x02	; 2
    1926:	80 83       	st	Z, r24
    1928:	81 83       	std	Z+1, r24	; 0x01
    192a:	11 e0       	ldi	r17, 0x01	; 1
    192c:	12 83       	std	Z+2, r17	; 0x02
    192e:	13 82       	std	Z+3, r1	; 0x03
    1930:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <s_xshutPin>
    1934:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <s_xshutPin+0x1>
    1938:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <s_xshutPin+0x2>
    193c:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <s_xshutPin+0x3>
    1940:	0e 94 ab 01 	call	0x356	; 0x356 <gpio_init>
    1944:	80 e8       	ldi	r24, 0x80	; 128
    1946:	58 2f       	mov	r21, r24
    1948:	8a 83       	std	Y+2, r24	; 0x02
    194a:	88 e3       	ldi	r24, 0x38	; 56
    194c:	8b 83       	std	Y+3, r24	; 0x03
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	8c 83       	std	Y+4, r24	; 0x04
    1952:	1d 82       	std	Y+5, r1	; 0x05
    1954:	19 83       	std	Y+1, r17	; 0x01
    1956:	41 e0       	ldi	r20, 0x01	; 1
    1958:	68 e3       	ldi	r22, 0x38	; 56
    195a:	71 e0       	ldi	r23, 0x01	; 1
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	0e 94 5f 02 	call	0x4be	; 0x4be <i2c_init>
    1962:	0e 94 97 02 	call	0x52e	; 0x52e <i2c_start>
    1966:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <s_xshutPin>
    196a:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <s_xshutPin+0x1>
    196e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <s_xshutPin+0x2>
    1972:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <s_xshutPin+0x3>
    1976:	0e 94 de 01 	call	0x3bc	; 0x3bc <gpio_out_set>
    197a:	8f ec       	ldi	r24, 0xCF	; 207
    197c:	97 e0       	ldi	r25, 0x07	; 7
    197e:	01 97       	sbiw	r24, 0x01	; 1
    1980:	f1 f7       	brne	.-4      	; 0x197e <vl53l0x_init+0x6e>
    1982:	00 c0       	rjmp	.+0      	; 0x1984 <vl53l0x_init+0x74>
    1984:	00 00       	nop
    1986:	8f e8       	ldi	r24, 0x8F	; 143
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	01 97       	sbiw	r24, 0x01	; 1
    198c:	f1 f7       	brne	.-4      	; 0x198a <vl53l0x_init+0x7a>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <vl53l0x_init+0x80>
    1990:	00 00       	nop
    1992:	89 e2       	ldi	r24, 0x29	; 41
    1994:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <frontSensor+0x141>
    1998:	8c e2       	ldi	r24, 0x2C	; 44
    199a:	94 e0       	ldi	r25, 0x04	; 4
    199c:	05 d5       	rcall	.+2570   	; 0x23a8 <VL53L0X_DataInit>
    199e:	8c e2       	ldi	r24, 0x2C	; 44
    19a0:	94 e0       	ldi	r25, 0x04	; 4
    19a2:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <VL53L0X_StaticInit>
    19a6:	0f 90       	pop	r0
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	df 91       	pop	r29
    19b2:	cf 91       	pop	r28
    19b4:	1f 91       	pop	r17
    19b6:	08 95       	ret

000019b8 <vl53l0x_calibrate>:
    19b8:	cf 93       	push	r28
    19ba:	df 93       	push	r29
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62
    19c0:	2f 97       	sbiw	r28, 0x0f	; 15
    19c2:	0f b6       	in	r0, 0x3f	; 63
    19c4:	f8 94       	cli
    19c6:	de bf       	out	0x3e, r29	; 62
    19c8:	0f be       	out	0x3f, r0	; 63
    19ca:	cd bf       	out	0x3d, r28	; 61
    19cc:	ae 01       	movw	r20, r28
    19ce:	4b 5f       	subi	r20, 0xFB	; 251
    19d0:	5f 4f       	sbci	r21, 0xFF	; 255
    19d2:	be 01       	movw	r22, r28
    19d4:	6f 5f       	subi	r22, 0xFF	; 255
    19d6:	7f 4f       	sbci	r23, 0xFF	; 255
    19d8:	8c e2       	ldi	r24, 0x2C	; 44
    19da:	94 e0       	ldi	r25, 0x04	; 4
    19dc:	0e 94 30 18 	call	0x3060	; 0x3060 <VL53L0X_GetReferenceSpads>
    19e0:	49 81       	ldd	r20, Y+1	; 0x01
    19e2:	5a 81       	ldd	r21, Y+2	; 0x02
    19e4:	6b 81       	ldd	r22, Y+3	; 0x03
    19e6:	7c 81       	ldd	r23, Y+4	; 0x04
    19e8:	2d 81       	ldd	r18, Y+5	; 0x05
    19ea:	8c e2       	ldi	r24, 0x2C	; 44
    19ec:	94 e0       	ldi	r25, 0x04	; 4
    19ee:	0e 94 2e 18 	call	0x305c	; 0x305c <VL53L0X_SetReferenceSpads>
    19f2:	ae 01       	movw	r20, r28
    19f4:	49 5f       	subi	r20, 0xF9	; 249
    19f6:	5f 4f       	sbci	r21, 0xFF	; 255
    19f8:	be 01       	movw	r22, r28
    19fa:	6a 5f       	subi	r22, 0xFA	; 250
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	8c e2       	ldi	r24, 0x2C	; 44
    1a00:	94 e0       	ldi	r25, 0x04	; 4
    1a02:	b4 d2       	rcall	.+1384   	; 0x1f6c <VL53L0X_GetRefCalibration>
    1a04:	4f 81       	ldd	r20, Y+7	; 0x07
    1a06:	6e 81       	ldd	r22, Y+6	; 0x06
    1a08:	8c e2       	ldi	r24, 0x2C	; 44
    1a0a:	94 e0       	ldi	r25, 0x04	; 4
    1a0c:	ac d2       	rcall	.+1368   	; 0x1f66 <VL53L0X_SetRefCalibration>
    1a0e:	be 01       	movw	r22, r28
    1a10:	68 5f       	subi	r22, 0xF8	; 248
    1a12:	7f 4f       	sbci	r23, 0xFF	; 255
    1a14:	8c e2       	ldi	r24, 0x2C	; 44
    1a16:	94 e0       	ldi	r25, 0x04	; 4
    1a18:	8f d0       	rcall	.+286    	; 0x1b38 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
    1a1a:	48 85       	ldd	r20, Y+8	; 0x08
    1a1c:	59 85       	ldd	r21, Y+9	; 0x09
    1a1e:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a20:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a22:	8c e2       	ldi	r24, 0x2C	; 44
    1a24:	94 e0       	ldi	r25, 0x04	; 4
    1a26:	85 d0       	rcall	.+266    	; 0x1b32 <VL53L0X_SetOffsetCalibrationDataMicroMeter>
    1a28:	be 01       	movw	r22, r28
    1a2a:	64 5f       	subi	r22, 0xF4	; 244
    1a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a2e:	8c e2       	ldi	r24, 0x2C	; 44
    1a30:	94 e0       	ldi	r25, 0x04	; 4
    1a32:	57 d2       	rcall	.+1198   	; 0x1ee2 <VL53L0X_GetXTalkCompensationRateMegaCps>
    1a34:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a36:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a38:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a3a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a3c:	8c e2       	ldi	r24, 0x2C	; 44
    1a3e:	94 e0       	ldi	r25, 0x04	; 4
    1a40:	16 d2       	rcall	.+1068   	; 0x1e6e <VL53L0X_SetXTalkCompensationRateMegaCps>
    1a42:	61 e0       	ldi	r22, 0x01	; 1
    1a44:	8c e2       	ldi	r24, 0x2C	; 44
    1a46:	94 e0       	ldi	r25, 0x04	; 4
    1a48:	d9 d1       	rcall	.+946    	; 0x1dfc <VL53L0X_SetXTalkCompensationEnable>
    1a4a:	2f 96       	adiw	r28, 0x0f	; 15
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	f8 94       	cli
    1a50:	de bf       	out	0x3e, r29	; 62
    1a52:	0f be       	out	0x3f, r0	; 63
    1a54:	cd bf       	out	0x3d, r28	; 61
    1a56:	df 91       	pop	r29
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <vl53l0x_start>:
    1a5c:	61 e0       	ldi	r22, 0x01	; 1
    1a5e:	8c e2       	ldi	r24, 0x2C	; 44
    1a60:	94 e0       	ldi	r25, 0x04	; 4
    1a62:	6d d0       	rcall	.+218    	; 0x1b3e <VL53L0X_SetDeviceMode>
    1a64:	8c e2       	ldi	r24, 0x2C	; 44
    1a66:	94 e0       	ldi	r25, 0x04	; 4
    1a68:	ad c7       	rjmp	.+3930   	; 0x29c4 <VL53L0X_StartMeasurement>
    1a6a:	08 95       	ret

00001a6c <vl53l0x_writeRegister>:
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	1f 92       	push	r1
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	18 2f       	mov	r17, r24
    1a82:	69 83       	std	Y+1, r22	; 0x01
    1a84:	7a 01       	movw	r14, r20
    1a86:	d2 2e       	mov	r13, r18
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	be 01       	movw	r22, r28
    1a8c:	6f 5f       	subi	r22, 0xFF	; 255
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	0e 94 9c 02 	call	0x538	; 0x538 <i2c_transmit>
    1a94:	08 2f       	mov	r16, r24
    1a96:	4d 2d       	mov	r20, r13
    1a98:	b7 01       	movw	r22, r14
    1a9a:	81 2f       	mov	r24, r17
    1a9c:	0e 94 9c 02 	call	0x538	; 0x538 <i2c_transmit>
    1aa0:	80 2b       	or	r24, r16
    1aa2:	0f 90       	pop	r0
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	08 95       	ret

00001ab4 <vl53l0x_readRegister>:
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	1f 92       	push	r1
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	18 2f       	mov	r17, r24
    1aca:	69 83       	std	Y+1, r22	; 0x01
    1acc:	7a 01       	movw	r14, r20
    1ace:	d2 2e       	mov	r13, r18
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	be 01       	movw	r22, r28
    1ad4:	6f 5f       	subi	r22, 0xFF	; 255
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	0e 94 9c 02 	call	0x538	; 0x538 <i2c_transmit>
    1adc:	08 2f       	mov	r16, r24
    1ade:	4d 2d       	mov	r20, r13
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	81 2f       	mov	r24, r17
    1ae4:	0e 94 1d 03 	call	0x63a	; 0x63a <i2c_receive>
    1ae8:	80 2b       	or	r24, r16
    1aea:	0f 90       	pop	r0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	08 95       	ret

00001afc <vl53l0x_getDistance>:
}

u16 vl53l0x_getDistance()
{
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	69 97       	sbiw	r28, 0x19	; 25
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
	u16 u16_returnValue = 0;
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	VL53L0X_GetRangingMeasurementData(&frontSensor, &rangingMeasurementData);
    1b10:	be 01       	movw	r22, r28
    1b12:	6f 5f       	subi	r22, 0xFF	; 255
    1b14:	7f 4f       	sbci	r23, 0xFF	; 255
    1b16:	8c e2       	ldi	r24, 0x2C	; 44
    1b18:	94 e0       	ldi	r25, 0x04	; 4
    1b1a:	67 d5       	rcall	.+2766   	; 0x25ea <VL53L0X_GetRangingMeasurementData>
	u16_returnValue = rangingMeasurementData.RangeStatus;
    1b1c:	89 8d       	ldd	r24, Y+25	; 0x19

	return u16_returnValue;
}
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	69 96       	adiw	r28, 0x19	; 25
    1b22:	0f b6       	in	r0, 0x3f	; 63
    1b24:	f8 94       	cli
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	df 91       	pop	r29
    1b2e:	cf 91       	pop	r28
    1b30:	08 95       	ret

00001b32 <VL53L0X_SetOffsetCalibrationDataMicroMeter>:
    1b32:	0c 94 32 18 	jmp	0x3064	; 0x3064 <VL53L0X_set_offset_calibration_data_micro_meter>
    1b36:	08 95       	ret

00001b38 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
    1b38:	0c 94 68 18 	jmp	0x30d0	; 0x30d0 <VL53L0X_get_offset_calibration_data_micro_meter>
    1b3c:	08 95       	ret

00001b3e <VL53L0X_SetDeviceMode>:
    1b3e:	63 30       	cpi	r22, 0x03	; 3
    1b40:	41 f0       	breq	.+16     	; 0x1b52 <VL53L0X_SetDeviceMode+0x14>
    1b42:	18 f4       	brcc	.+6      	; 0x1b4a <VL53L0X_SetDeviceMode+0xc>
    1b44:	62 30       	cpi	r22, 0x02	; 2
    1b46:	28 f0       	brcs	.+10     	; 0x1b52 <VL53L0X_SetDeviceMode+0x14>
    1b48:	08 c0       	rjmp	.+16     	; 0x1b5a <VL53L0X_SetDeviceMode+0x1c>
    1b4a:	2c ee       	ldi	r18, 0xEC	; 236
    1b4c:	26 0f       	add	r18, r22
    1b4e:	22 30       	cpi	r18, 0x02	; 2
    1b50:	20 f4       	brcc	.+8      	; 0x1b5a <VL53L0X_SetDeviceMode+0x1c>
    1b52:	fc 01       	movw	r30, r24
    1b54:	60 8b       	std	Z+16, r22	; 0x10
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	08 95       	ret
    1b5a:	88 ef       	ldi	r24, 0xF8	; 248
    1b5c:	08 95       	ret

00001b5e <VL53L0X_GetFractionEnable>:
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	eb 01       	movw	r28, r22
    1b64:	ab 01       	movw	r20, r22
    1b66:	69 e0       	ldi	r22, 0x09	; 9
    1b68:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <VL53L0X_GetFractionEnable+0x18>
    1b70:	98 81       	ld	r25, Y
    1b72:	91 70       	andi	r25, 0x01	; 1
    1b74:	98 83       	st	Y, r25
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	08 95       	ret

00001b7c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
    1b7c:	0c 94 c8 27 	jmp	0x4f90	; 0x4f90 <VL53L0X_set_measurement_timing_budget_micro_seconds>
    1b80:	08 95       	ret

00001b82 <VL53L0X_GetVcselPulsePeriod>:
    1b82:	0c 94 9f 27 	jmp	0x4f3e	; 0x4f3e <VL53L0X_get_vcsel_pulse_period>
    1b86:	08 95       	ret

00001b88 <VL53L0X_SetSequenceStepEnable>:
    1b88:	df 92       	push	r13
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
    1b96:	1f 92       	push	r1
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
    1b9c:	7c 01       	movw	r14, r24
    1b9e:	06 2f       	mov	r16, r22
    1ba0:	d4 2e       	mov	r13, r20
    1ba2:	19 82       	std	Y+1, r1	; 0x01
    1ba4:	ae 01       	movw	r20, r28
    1ba6:	4f 5f       	subi	r20, 0xFF	; 255
    1ba8:	5f 4f       	sbci	r21, 0xFF	; 255
    1baa:	61 e0       	ldi	r22, 0x01	; 1
    1bac:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    1bb0:	18 2f       	mov	r17, r24
    1bb2:	81 11       	cpse	r24, r1
    1bb4:	56 c0       	rjmp	.+172    	; 0x1c62 <VL53L0X_SetSequenceStepEnable+0xda>
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	91 e0       	ldi	r25, 0x01	; 1
    1bba:	d9 12       	cpse	r13, r25
    1bbc:	1c c0       	rjmp	.+56     	; 0x1bf6 <VL53L0X_SetSequenceStepEnable+0x6e>
    1bbe:	02 30       	cpi	r16, 0x02	; 2
    1bc0:	89 f0       	breq	.+34     	; 0x1be4 <VL53L0X_SetSequenceStepEnable+0x5c>
    1bc2:	28 f4       	brcc	.+10     	; 0x1bce <VL53L0X_SetSequenceStepEnable+0x46>
    1bc4:	00 23       	and	r16, r16
    1bc6:	41 f0       	breq	.+16     	; 0x1bd8 <VL53L0X_SetSequenceStepEnable+0x50>
    1bc8:	01 30       	cpi	r16, 0x01	; 1
    1bca:	49 f0       	breq	.+18     	; 0x1bde <VL53L0X_SetSequenceStepEnable+0x56>
    1bcc:	44 c0       	rjmp	.+136    	; 0x1c56 <VL53L0X_SetSequenceStepEnable+0xce>
    1bce:	03 30       	cpi	r16, 0x03	; 3
    1bd0:	61 f0       	breq	.+24     	; 0x1bea <VL53L0X_SetSequenceStepEnable+0x62>
    1bd2:	04 30       	cpi	r16, 0x04	; 4
    1bd4:	69 f0       	breq	.+26     	; 0x1bf0 <VL53L0X_SetSequenceStepEnable+0x68>
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <VL53L0X_SetSequenceStepEnable+0xce>
    1bd8:	08 2f       	mov	r16, r24
    1bda:	00 61       	ori	r16, 0x10	; 16
    1bdc:	40 c0       	rjmp	.+128    	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1bde:	08 2f       	mov	r16, r24
    1be0:	08 62       	ori	r16, 0x28	; 40
    1be2:	3d c0       	rjmp	.+122    	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1be4:	08 2f       	mov	r16, r24
    1be6:	04 60       	ori	r16, 0x04	; 4
    1be8:	3a c0       	rjmp	.+116    	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1bea:	08 2f       	mov	r16, r24
    1bec:	00 64       	ori	r16, 0x40	; 64
    1bee:	37 c0       	rjmp	.+110    	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1bf0:	08 2f       	mov	r16, r24
    1bf2:	00 68       	ori	r16, 0x80	; 128
    1bf4:	34 c0       	rjmp	.+104    	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1bf6:	02 30       	cpi	r16, 0x02	; 2
    1bf8:	89 f0       	breq	.+34     	; 0x1c1c <VL53L0X_SetSequenceStepEnable+0x94>
    1bfa:	28 f4       	brcc	.+10     	; 0x1c06 <VL53L0X_SetSequenceStepEnable+0x7e>
    1bfc:	00 23       	and	r16, r16
    1bfe:	41 f0       	breq	.+16     	; 0x1c10 <VL53L0X_SetSequenceStepEnable+0x88>
    1c00:	01 30       	cpi	r16, 0x01	; 1
    1c02:	49 f0       	breq	.+18     	; 0x1c16 <VL53L0X_SetSequenceStepEnable+0x8e>
    1c04:	2a c0       	rjmp	.+84     	; 0x1c5a <VL53L0X_SetSequenceStepEnable+0xd2>
    1c06:	03 30       	cpi	r16, 0x03	; 3
    1c08:	61 f0       	breq	.+24     	; 0x1c22 <VL53L0X_SetSequenceStepEnable+0x9a>
    1c0a:	04 30       	cpi	r16, 0x04	; 4
    1c0c:	69 f0       	breq	.+26     	; 0x1c28 <VL53L0X_SetSequenceStepEnable+0xa0>
    1c0e:	25 c0       	rjmp	.+74     	; 0x1c5a <VL53L0X_SetSequenceStepEnable+0xd2>
    1c10:	08 2f       	mov	r16, r24
    1c12:	0f 7e       	andi	r16, 0xEF	; 239
    1c14:	24 c0       	rjmp	.+72     	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1c16:	08 2f       	mov	r16, r24
    1c18:	07 7d       	andi	r16, 0xD7	; 215
    1c1a:	21 c0       	rjmp	.+66     	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1c1c:	08 2f       	mov	r16, r24
    1c1e:	0b 7f       	andi	r16, 0xFB	; 251
    1c20:	1e c0       	rjmp	.+60     	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1c22:	08 2f       	mov	r16, r24
    1c24:	0f 7b       	andi	r16, 0xBF	; 191
    1c26:	1b c0       	rjmp	.+54     	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1c28:	08 2f       	mov	r16, r24
    1c2a:	0f 77       	andi	r16, 0x7F	; 127
    1c2c:	18 c0       	rjmp	.+48     	; 0x1c5e <VL53L0X_SetSequenceStepEnable+0xd6>
    1c2e:	40 2f       	mov	r20, r16
    1c30:	61 e0       	ldi	r22, 0x01	; 1
    1c32:	c7 01       	movw	r24, r14
    1c34:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    1c38:	18 2f       	mov	r17, r24
    1c3a:	81 11       	cpse	r24, r1
    1c3c:	12 c0       	rjmp	.+36     	; 0x1c62 <VL53L0X_SetSequenceStepEnable+0xda>
    1c3e:	f7 01       	movw	r30, r14
    1c40:	e3 5e       	subi	r30, 0xE3	; 227
    1c42:	fe 4f       	sbci	r31, 0xFE	; 254
    1c44:	00 83       	st	Z, r16
    1c46:	f7 01       	movw	r30, r14
    1c48:	42 89       	ldd	r20, Z+18	; 0x12
    1c4a:	53 89       	ldd	r21, Z+19	; 0x13
    1c4c:	64 89       	ldd	r22, Z+20	; 0x14
    1c4e:	75 89       	ldd	r23, Z+21	; 0x15
    1c50:	c7 01       	movw	r24, r14
    1c52:	94 df       	rcall	.-216    	; 0x1b7c <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    1c54:	06 c0       	rjmp	.+12     	; 0x1c62 <VL53L0X_SetSequenceStepEnable+0xda>
    1c56:	1c ef       	ldi	r17, 0xFC	; 252
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <VL53L0X_SetSequenceStepEnable+0xda>
    1c5a:	1c ef       	ldi	r17, 0xFC	; 252
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <VL53L0X_SetSequenceStepEnable+0xda>
    1c5e:	80 13       	cpse	r24, r16
    1c60:	e6 cf       	rjmp	.-52     	; 0x1c2e <VL53L0X_SetSequenceStepEnable+0xa6>
    1c62:	81 2f       	mov	r24, r17
    1c64:	0f 90       	pop	r0
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	ff 90       	pop	r15
    1c70:	ef 90       	pop	r14
    1c72:	df 90       	pop	r13
    1c74:	08 95       	ret

00001c76 <sequence_step_enabled>:
    1c76:	62 30       	cpi	r22, 0x02	; 2
    1c78:	d9 f0       	breq	.+54     	; 0x1cb0 <sequence_step_enabled+0x3a>
    1c7a:	28 f4       	brcc	.+10     	; 0x1c86 <sequence_step_enabled+0x10>
    1c7c:	66 23       	and	r22, r22
    1c7e:	59 f0       	breq	.+22     	; 0x1c96 <sequence_step_enabled+0x20>
    1c80:	61 30       	cpi	r22, 0x01	; 1
    1c82:	79 f0       	breq	.+30     	; 0x1ca2 <sequence_step_enabled+0x2c>
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <sequence_step_enabled+0x18>
    1c86:	63 30       	cpi	r22, 0x03	; 3
    1c88:	d1 f0       	breq	.+52     	; 0x1cbe <sequence_step_enabled+0x48>
    1c8a:	64 30       	cpi	r22, 0x04	; 4
    1c8c:	f9 f0       	breq	.+62     	; 0x1ccc <sequence_step_enabled+0x56>
    1c8e:	f9 01       	movw	r30, r18
    1c90:	10 82       	st	Z, r1
    1c92:	8c ef       	ldi	r24, 0xFC	; 252
    1c94:	08 95       	ret
    1c96:	42 95       	swap	r20
    1c98:	41 70       	andi	r20, 0x01	; 1
    1c9a:	f9 01       	movw	r30, r18
    1c9c:	40 83       	st	Z, r20
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	08 95       	ret
    1ca2:	43 fb       	bst	r20, 3
    1ca4:	44 27       	eor	r20, r20
    1ca6:	40 f9       	bld	r20, 0
    1ca8:	f9 01       	movw	r30, r18
    1caa:	40 83       	st	Z, r20
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	08 95       	ret
    1cb0:	42 fb       	bst	r20, 2
    1cb2:	44 27       	eor	r20, r20
    1cb4:	40 f9       	bld	r20, 0
    1cb6:	f9 01       	movw	r30, r18
    1cb8:	40 83       	st	Z, r20
    1cba:	80 e0       	ldi	r24, 0x00	; 0
    1cbc:	08 95       	ret
    1cbe:	46 fb       	bst	r20, 6
    1cc0:	44 27       	eor	r20, r20
    1cc2:	40 f9       	bld	r20, 0
    1cc4:	f9 01       	movw	r30, r18
    1cc6:	40 83       	st	Z, r20
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	08 95       	ret
    1ccc:	44 1f       	adc	r20, r20
    1cce:	44 27       	eor	r20, r20
    1cd0:	44 1f       	adc	r20, r20
    1cd2:	f9 01       	movw	r30, r18
    1cd4:	40 83       	st	Z, r20
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	08 95       	ret

00001cda <VL53L0X_GetSequenceStepEnables>:
    1cda:	ef 92       	push	r14
    1cdc:	ff 92       	push	r15
    1cde:	0f 93       	push	r16
    1ce0:	1f 93       	push	r17
    1ce2:	cf 93       	push	r28
    1ce4:	df 93       	push	r29
    1ce6:	1f 92       	push	r1
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
    1cec:	8c 01       	movw	r16, r24
    1cee:	7b 01       	movw	r14, r22
    1cf0:	19 82       	std	Y+1, r1	; 0x01
    1cf2:	ae 01       	movw	r20, r28
    1cf4:	4f 5f       	subi	r20, 0xFF	; 255
    1cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    1cf8:	61 e0       	ldi	r22, 0x01	; 1
    1cfa:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    1cfe:	81 11       	cpse	r24, r1
    1d00:	20 c0       	rjmp	.+64     	; 0x1d42 <VL53L0X_GetSequenceStepEnables+0x68>
    1d02:	97 01       	movw	r18, r14
    1d04:	49 81       	ldd	r20, Y+1	; 0x01
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	c8 01       	movw	r24, r16
    1d0a:	b5 df       	rcall	.-150    	; 0x1c76 <sequence_step_enabled>
    1d0c:	81 11       	cpse	r24, r1
    1d0e:	22 c0       	rjmp	.+68     	; 0x1d54 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d10:	97 01       	movw	r18, r14
    1d12:	2e 5f       	subi	r18, 0xFE	; 254
    1d14:	3f 4f       	sbci	r19, 0xFF	; 255
    1d16:	49 81       	ldd	r20, Y+1	; 0x01
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	ac df       	rcall	.-168    	; 0x1c76 <sequence_step_enabled>
    1d1e:	81 11       	cpse	r24, r1
    1d20:	19 c0       	rjmp	.+50     	; 0x1d54 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d22:	97 01       	movw	r18, r14
    1d24:	2f 5f       	subi	r18, 0xFF	; 255
    1d26:	3f 4f       	sbci	r19, 0xFF	; 255
    1d28:	49 81       	ldd	r20, Y+1	; 0x01
    1d2a:	62 e0       	ldi	r22, 0x02	; 2
    1d2c:	c8 01       	movw	r24, r16
    1d2e:	a3 df       	rcall	.-186    	; 0x1c76 <sequence_step_enabled>
    1d30:	81 11       	cpse	r24, r1
    1d32:	10 c0       	rjmp	.+32     	; 0x1d54 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d34:	97 01       	movw	r18, r14
    1d36:	2d 5f       	subi	r18, 0xFD	; 253
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	49 81       	ldd	r20, Y+1	; 0x01
    1d3c:	63 e0       	ldi	r22, 0x03	; 3
    1d3e:	c8 01       	movw	r24, r16
    1d40:	9a df       	rcall	.-204    	; 0x1c76 <sequence_step_enabled>
    1d42:	81 11       	cpse	r24, r1
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d46:	97 01       	movw	r18, r14
    1d48:	2c 5f       	subi	r18, 0xFC	; 252
    1d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d4c:	49 81       	ldd	r20, Y+1	; 0x01
    1d4e:	64 e0       	ldi	r22, 0x04	; 4
    1d50:	c8 01       	movw	r24, r16
    1d52:	91 df       	rcall	.-222    	; 0x1c76 <sequence_step_enabled>
    1d54:	0f 90       	pop	r0
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	08 95       	ret

00001d64 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
    1d64:	cf 92       	push	r12
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	00 d0       	rcall	.+0      	; 0x1d74 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x10>
    1d74:	00 d0       	rcall	.+0      	; 0x1d76 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x12>
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
    1d7c:	7c 01       	movw	r14, r24
    1d7e:	6b 01       	movw	r12, r22
    1d80:	ae 01       	movw	r20, r28
    1d82:	4f 5f       	subi	r20, 0xFF	; 255
    1d84:	5f 4f       	sbci	r21, 0xFF	; 255
    1d86:	68 ef       	ldi	r22, 0xF8	; 248
    1d88:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    1d8c:	18 2f       	mov	r17, r24
    1d8e:	81 11       	cpse	r24, r1
    1d90:	26 c0       	rjmp	.+76     	; 0x1dde <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    1d92:	ae 01       	movw	r20, r28
    1d94:	4d 5f       	subi	r20, 0xFD	; 253
    1d96:	5f 4f       	sbci	r21, 0xFF	; 255
    1d98:	64 e0       	ldi	r22, 0x04	; 4
    1d9a:	c7 01       	movw	r24, r14
    1d9c:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    1da0:	18 2f       	mov	r17, r24
    1da2:	81 11       	cpse	r24, r1
    1da4:	1c c0       	rjmp	.+56     	; 0x1dde <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    1da6:	29 81       	ldd	r18, Y+1	; 0x01
    1da8:	3a 81       	ldd	r19, Y+2	; 0x02
    1daa:	21 15       	cp	r18, r1
    1dac:	31 05       	cpc	r19, r1
    1dae:	69 f0       	breq	.+26     	; 0x1dca <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x66>
    1db0:	40 e0       	ldi	r20, 0x00	; 0
    1db2:	50 e0       	ldi	r21, 0x00	; 0
    1db4:	6b 81       	ldd	r22, Y+3	; 0x03
    1db6:	7c 81       	ldd	r23, Y+4	; 0x04
    1db8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dba:	9e 81       	ldd	r25, Y+6	; 0x06
    1dbc:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    1dc0:	f6 01       	movw	r30, r12
    1dc2:	20 83       	st	Z, r18
    1dc4:	31 83       	std	Z+1, r19	; 0x01
    1dc6:	42 83       	std	Z+2, r20	; 0x02
    1dc8:	53 83       	std	Z+3, r21	; 0x03
    1dca:	f6 01       	movw	r30, r12
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	a2 81       	ldd	r26, Z+2	; 0x02
    1dd2:	b3 81       	ldd	r27, Z+3	; 0x03
    1dd4:	f7 01       	movw	r30, r14
    1dd6:	86 8b       	std	Z+22, r24	; 0x16
    1dd8:	97 8b       	std	Z+23, r25	; 0x17
    1dda:	a0 8f       	std	Z+24, r26	; 0x18
    1ddc:	b1 8f       	std	Z+25, r27	; 0x19
    1dde:	81 2f       	mov	r24, r17
    1de0:	26 96       	adiw	r28, 0x06	; 6
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	df 90       	pop	r13
    1df8:	cf 90       	pop	r12
    1dfa:	08 95       	ret

00001dfc <VL53L0X_SetXTalkCompensationEnable>:
    1dfc:	cf 93       	push	r28
    1dfe:	df 93       	push	r29
    1e00:	ec 01       	movw	r28, r24
    1e02:	66 23       	and	r22, r22
    1e04:	91 f0       	breq	.+36     	; 0x1e2a <VL53L0X_SetXTalkCompensationEnable+0x2e>
    1e06:	fc 01       	movw	r30, r24
    1e08:	e7 5c       	subi	r30, 0xC7	; 199
    1e0a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	88 3e       	cpi	r24, 0xE8	; 232
    1e12:	93 40       	sbci	r25, 0x03	; 3
    1e14:	91 f4       	brne	.+36     	; 0x1e3a <VL53L0X_SetXTalkCompensationEnable+0x3e>
    1e16:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1e18:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1e1a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e1c:	78 a1       	ldd	r23, Y+32	; 0x20
    1e1e:	10 c0       	rjmp	.+32     	; 0x1e40 <VL53L0X_SetXTalkCompensationEnable+0x44>
    1e20:	1a 8e       	std	Y+26, r1	; 0x1a
    1e22:	1c c0       	rjmp	.+56     	; 0x1e5c <VL53L0X_SetXTalkCompensationEnable+0x60>
    1e24:	91 e0       	ldi	r25, 0x01	; 1
    1e26:	9a 8f       	std	Y+26, r25	; 0x1a
    1e28:	19 c0       	rjmp	.+50     	; 0x1e5c <VL53L0X_SetXTalkCompensationEnable+0x60>
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	50 e0       	ldi	r21, 0x00	; 0
    1e2e:	60 e2       	ldi	r22, 0x20	; 32
    1e30:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    1e34:	81 11       	cpse	r24, r1
    1e36:	12 c0       	rjmp	.+36     	; 0x1e5c <VL53L0X_SetXTalkCompensationEnable+0x60>
    1e38:	f3 cf       	rjmp	.-26     	; 0x1e20 <VL53L0X_SetXTalkCompensationEnable+0x24>
    1e3a:	40 e0       	ldi	r20, 0x00	; 0
    1e3c:	50 e0       	ldi	r21, 0x00	; 0
    1e3e:	ba 01       	movw	r22, r20
    1e40:	68 94       	set
    1e42:	12 f8       	bld	r1, 2
    1e44:	76 95       	lsr	r23
    1e46:	67 95       	ror	r22
    1e48:	57 95       	ror	r21
    1e4a:	47 95       	ror	r20
    1e4c:	16 94       	lsr	r1
    1e4e:	d1 f7       	brne	.-12     	; 0x1e44 <VL53L0X_SetXTalkCompensationEnable+0x48>
    1e50:	60 e2       	ldi	r22, 0x20	; 32
    1e52:	ce 01       	movw	r24, r28
    1e54:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    1e58:	88 23       	and	r24, r24
    1e5a:	21 f3       	breq	.-56     	; 0x1e24 <VL53L0X_SetXTalkCompensationEnable+0x28>
    1e5c:	df 91       	pop	r29
    1e5e:	cf 91       	pop	r28
    1e60:	08 95       	ret

00001e62 <VL53L0X_GetXTalkCompensationEnable>:
    1e62:	fc 01       	movw	r30, r24
    1e64:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e66:	fb 01       	movw	r30, r22
    1e68:	80 83       	st	Z, r24
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	08 95       	ret

00001e6e <VL53L0X_SetXTalkCompensationRateMegaCps>:
    1e6e:	cf 92       	push	r12
    1e70:	df 92       	push	r13
    1e72:	ef 92       	push	r14
    1e74:	ff 92       	push	r15
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	fc 01       	movw	r30, r24
    1e7c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e7e:	21 11       	cpse	r18, r1
    1e80:	06 c0       	rjmp	.+12     	; 0x1e8e <VL53L0X_SetXTalkCompensationRateMegaCps+0x20>
    1e82:	45 8f       	std	Z+29, r20	; 0x1d
    1e84:	56 8f       	std	Z+30, r21	; 0x1e
    1e86:	67 8f       	std	Z+31, r22	; 0x1f
    1e88:	70 a3       	std	Z+32, r23	; 0x20
    1e8a:	80 e0       	ldi	r24, 0x00	; 0
    1e8c:	23 c0       	rjmp	.+70     	; 0x1ed4 <VL53L0X_SetXTalkCompensationRateMegaCps+0x66>
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e7 5c       	subi	r30, 0xC7	; 199
    1e92:	fe 4f       	sbci	r31, 0xFE	; 254
    1e94:	20 81       	ld	r18, Z
    1e96:	31 81       	ldd	r19, Z+1	; 0x01
    1e98:	28 3e       	cpi	r18, 0xE8	; 232
    1e9a:	33 40       	sbci	r19, 0x03	; 3
    1e9c:	61 f4       	brne	.+24     	; 0x1eb6 <VL53L0X_SetXTalkCompensationRateMegaCps+0x48>
    1e9e:	6a 01       	movw	r12, r20
    1ea0:	7b 01       	movw	r14, r22
    1ea2:	68 94       	set
    1ea4:	12 f8       	bld	r1, 2
    1ea6:	f6 94       	lsr	r15
    1ea8:	e7 94       	ror	r14
    1eaa:	d7 94       	ror	r13
    1eac:	c7 94       	ror	r12
    1eae:	16 94       	lsr	r1
    1eb0:	d1 f7       	brne	.-12     	; 0x1ea6 <VL53L0X_SetXTalkCompensationRateMegaCps+0x38>
    1eb2:	96 01       	movw	r18, r12
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <VL53L0X_SetXTalkCompensationRateMegaCps+0x4c>
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	6a 01       	movw	r12, r20
    1ebc:	7b 01       	movw	r14, r22
    1ebe:	ec 01       	movw	r28, r24
    1ec0:	a9 01       	movw	r20, r18
    1ec2:	60 e2       	ldi	r22, 0x20	; 32
    1ec4:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    1ec8:	81 11       	cpse	r24, r1
    1eca:	04 c0       	rjmp	.+8      	; 0x1ed4 <VL53L0X_SetXTalkCompensationRateMegaCps+0x66>
    1ecc:	cd 8e       	std	Y+29, r12	; 0x1d
    1ece:	de 8e       	std	Y+30, r13	; 0x1e
    1ed0:	ef 8e       	std	Y+31, r14	; 0x1f
    1ed2:	f8 a2       	std	Y+32, r15	; 0x20
    1ed4:	df 91       	pop	r29
    1ed6:	cf 91       	pop	r28
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	08 95       	ret

00001ee2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
    1ee2:	ef 92       	push	r14
    1ee4:	ff 92       	push	r15
    1ee6:	0f 93       	push	r16
    1ee8:	1f 93       	push	r17
    1eea:	cf 93       	push	r28
    1eec:	df 93       	push	r29
    1eee:	00 d0       	rcall	.+0      	; 0x1ef0 <VL53L0X_GetXTalkCompensationRateMegaCps+0xe>
    1ef0:	cd b7       	in	r28, 0x3d	; 61
    1ef2:	de b7       	in	r29, 0x3e	; 62
    1ef4:	8c 01       	movw	r16, r24
    1ef6:	7b 01       	movw	r14, r22
    1ef8:	ae 01       	movw	r20, r28
    1efa:	4f 5f       	subi	r20, 0xFF	; 255
    1efc:	5f 4f       	sbci	r21, 0xFF	; 255
    1efe:	60 e2       	ldi	r22, 0x20	; 32
    1f00:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    1f04:	81 11       	cpse	r24, r1
    1f06:	26 c0       	rjmp	.+76     	; 0x1f54 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    1f08:	49 81       	ldd	r20, Y+1	; 0x01
    1f0a:	5a 81       	ldd	r21, Y+2	; 0x02
    1f0c:	41 15       	cp	r20, r1
    1f0e:	51 05       	cpc	r21, r1
    1f10:	69 f4       	brne	.+26     	; 0x1f2c <VL53L0X_GetXTalkCompensationRateMegaCps+0x4a>
    1f12:	f8 01       	movw	r30, r16
    1f14:	45 8d       	ldd	r20, Z+29	; 0x1d
    1f16:	56 8d       	ldd	r21, Z+30	; 0x1e
    1f18:	67 8d       	ldd	r22, Z+31	; 0x1f
    1f1a:	70 a1       	ldd	r23, Z+32	; 0x20
    1f1c:	f7 01       	movw	r30, r14
    1f1e:	40 83       	st	Z, r20
    1f20:	51 83       	std	Z+1, r21	; 0x01
    1f22:	62 83       	std	Z+2, r22	; 0x02
    1f24:	73 83       	std	Z+3, r23	; 0x03
    1f26:	f8 01       	movw	r30, r16
    1f28:	12 8e       	std	Z+26, r1	; 0x1a
    1f2a:	14 c0       	rjmp	.+40     	; 0x1f54 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    1f2c:	44 0f       	add	r20, r20
    1f2e:	55 1f       	adc	r21, r21
    1f30:	44 0f       	add	r20, r20
    1f32:	55 1f       	adc	r21, r21
    1f34:	44 0f       	add	r20, r20
    1f36:	55 1f       	adc	r21, r21
    1f38:	60 e0       	ldi	r22, 0x00	; 0
    1f3a:	70 e0       	ldi	r23, 0x00	; 0
    1f3c:	f7 01       	movw	r30, r14
    1f3e:	40 83       	st	Z, r20
    1f40:	51 83       	std	Z+1, r21	; 0x01
    1f42:	62 83       	std	Z+2, r22	; 0x02
    1f44:	73 83       	std	Z+3, r23	; 0x03
    1f46:	f8 01       	movw	r30, r16
    1f48:	45 8f       	std	Z+29, r20	; 0x1d
    1f4a:	56 8f       	std	Z+30, r21	; 0x1e
    1f4c:	67 8f       	std	Z+31, r22	; 0x1f
    1f4e:	70 a3       	std	Z+32, r23	; 0x20
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	92 8f       	std	Z+26, r25	; 0x1a
    1f54:	0f 90       	pop	r0
    1f56:	0f 90       	pop	r0
    1f58:	df 91       	pop	r29
    1f5a:	cf 91       	pop	r28
    1f5c:	1f 91       	pop	r17
    1f5e:	0f 91       	pop	r16
    1f60:	ff 90       	pop	r15
    1f62:	ef 90       	pop	r14
    1f64:	08 95       	ret

00001f66 <VL53L0X_SetRefCalibration>:
    1f66:	0c 94 61 20 	jmp	0x40c2	; 0x40c2 <VL53L0X_set_ref_calibration>
    1f6a:	08 95       	ret

00001f6c <VL53L0X_GetRefCalibration>:
    1f6c:	0c 94 86 20 	jmp	0x410c	; 0x410c <VL53L0X_get_ref_calibration>
    1f70:	08 95       	ret

00001f72 <VL53L0X_SetLimitCheckEnable>:
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	ef 92       	push	r14
    1f7c:	ff 92       	push	r15
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	66 30       	cpi	r22, 0x06	; 6
    1f86:	71 05       	cpc	r23, r1
    1f88:	08 f0       	brcs	.+2      	; 0x1f8c <VL53L0X_SetLimitCheckEnable+0x1a>
    1f8a:	47 c0       	rjmp	.+142    	; 0x201a <VL53L0X_SetLimitCheckEnable+0xa8>
    1f8c:	44 23       	and	r20, r20
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <VL53L0X_SetLimitCheckEnable+0x20>
    1f90:	48 c0       	rjmp	.+144    	; 0x2022 <VL53L0X_SetLimitCheckEnable+0xb0>
    1f92:	fb 01       	movw	r30, r22
    1f94:	ee 0f       	add	r30, r30
    1f96:	ff 1f       	adc	r31, r31
    1f98:	ee 0f       	add	r30, r30
    1f9a:	ff 1f       	adc	r31, r31
    1f9c:	e8 0f       	add	r30, r24
    1f9e:	f9 1f       	adc	r31, r25
    1fa0:	81 a8       	ldd	r8, Z+49	; 0x31
    1fa2:	92 a8       	ldd	r9, Z+50	; 0x32
    1fa4:	a3 a8       	ldd	r10, Z+51	; 0x33
    1fa6:	b4 a8       	ldd	r11, Z+52	; 0x34
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	31 e0       	ldi	r19, 0x01	; 1
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <VL53L0X_SetLimitCheckEnable+0xba>
    1fae:	f7 01       	movw	r30, r14
    1fb0:	35 a3       	std	Z+37, r19	; 0x25
    1fb2:	26 c0       	rjmp	.+76     	; 0x2000 <VL53L0X_SetLimitCheckEnable+0x8e>
    1fb4:	b5 01       	movw	r22, r10
    1fb6:	a4 01       	movw	r20, r8
    1fb8:	03 2e       	mov	r0, r19
    1fba:	39 e0       	ldi	r19, 0x09	; 9
    1fbc:	76 95       	lsr	r23
    1fbe:	67 95       	ror	r22
    1fc0:	57 95       	ror	r21
    1fc2:	47 95       	ror	r20
    1fc4:	3a 95       	dec	r19
    1fc6:	d1 f7       	brne	.-12     	; 0x1fbc <VL53L0X_SetLimitCheckEnable+0x4a>
    1fc8:	30 2d       	mov	r19, r0
    1fca:	64 e4       	ldi	r22, 0x44	; 68
    1fcc:	c7 01       	movw	r24, r14
    1fce:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    1fd2:	14 c0       	rjmp	.+40     	; 0x1ffc <VL53L0X_SetLimitCheckEnable+0x8a>
    1fd4:	f7 01       	movw	r30, r14
    1fd6:	37 a3       	std	Z+39, r19	; 0x27
    1fd8:	13 c0       	rjmp	.+38     	; 0x2000 <VL53L0X_SetLimitCheckEnable+0x8e>
    1fda:	f7 01       	movw	r30, r14
    1fdc:	30 a7       	std	Z+40, r19	; 0x28
    1fde:	10 c0       	rjmp	.+32     	; 0x2000 <VL53L0X_SetLimitCheckEnable+0x8e>
    1fe0:	22 0f       	add	r18, r18
    1fe2:	4e ef       	ldi	r20, 0xFE	; 254
    1fe4:	60 e6       	ldi	r22, 0x60	; 96
    1fe6:	c7 01       	movw	r24, r14
    1fe8:	0e 94 1b 32 	call	0x6436	; 0x6436 <VL53L0X_UpdateByte>
    1fec:	07 c0       	rjmp	.+14     	; 0x1ffc <VL53L0X_SetLimitCheckEnable+0x8a>
    1fee:	22 95       	swap	r18
    1ff0:	20 7f       	andi	r18, 0xF0	; 240
    1ff2:	4f ee       	ldi	r20, 0xEF	; 239
    1ff4:	60 e6       	ldi	r22, 0x60	; 96
    1ff6:	c7 01       	movw	r24, r14
    1ff8:	0e 94 1b 32 	call	0x6436	; 0x6436 <VL53L0X_UpdateByte>
    1ffc:	81 11       	cpse	r24, r1
    1ffe:	2d c0       	rjmp	.+90     	; 0x205a <VL53L0X_SetLimitCheckEnable+0xe8>
    2000:	11 11       	cpse	r17, r1
    2002:	05 c0       	rjmp	.+10     	; 0x200e <VL53L0X_SetLimitCheckEnable+0x9c>
    2004:	ce 0d       	add	r28, r14
    2006:	df 1d       	adc	r29, r15
    2008:	1d a2       	std	Y+37, r1	; 0x25
    200a:	80 e0       	ldi	r24, 0x00	; 0
    200c:	26 c0       	rjmp	.+76     	; 0x205a <VL53L0X_SetLimitCheckEnable+0xe8>
    200e:	ce 0d       	add	r28, r14
    2010:	df 1d       	adc	r29, r15
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	8d a3       	std	Y+37, r24	; 0x25
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	20 c0       	rjmp	.+64     	; 0x205a <VL53L0X_SetLimitCheckEnable+0xe8>
    201a:	8c ef       	ldi	r24, 0xFC	; 252
    201c:	1e c0       	rjmp	.+60     	; 0x205a <VL53L0X_SetLimitCheckEnable+0xe8>
    201e:	8c ef       	ldi	r24, 0xFC	; 252
    2020:	1c c0       	rjmp	.+56     	; 0x205a <VL53L0X_SetLimitCheckEnable+0xe8>
    2022:	21 e0       	ldi	r18, 0x01	; 1
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	81 2c       	mov	r8, r1
    2028:	91 2c       	mov	r9, r1
    202a:	54 01       	movw	r10, r8
    202c:	14 2f       	mov	r17, r20
    202e:	eb 01       	movw	r28, r22
    2030:	7c 01       	movw	r14, r24
    2032:	62 30       	cpi	r22, 0x02	; 2
    2034:	71 05       	cpc	r23, r1
    2036:	71 f2       	breq	.-100    	; 0x1fd4 <VL53L0X_SetLimitCheckEnable+0x62>
    2038:	40 f4       	brcc	.+16     	; 0x204a <VL53L0X_SetLimitCheckEnable+0xd8>
    203a:	20 97       	sbiw	r28, 0x00	; 0
    203c:	09 f4       	brne	.+2      	; 0x2040 <VL53L0X_SetLimitCheckEnable+0xce>
    203e:	b7 cf       	rjmp	.-146    	; 0x1fae <VL53L0X_SetLimitCheckEnable+0x3c>
    2040:	61 30       	cpi	r22, 0x01	; 1
    2042:	71 05       	cpc	r23, r1
    2044:	09 f4       	brne	.+2      	; 0x2048 <VL53L0X_SetLimitCheckEnable+0xd6>
    2046:	b6 cf       	rjmp	.-148    	; 0x1fb4 <VL53L0X_SetLimitCheckEnable+0x42>
    2048:	ea cf       	rjmp	.-44     	; 0x201e <VL53L0X_SetLimitCheckEnable+0xac>
    204a:	64 30       	cpi	r22, 0x04	; 4
    204c:	71 05       	cpc	r23, r1
    204e:	41 f2       	breq	.-112    	; 0x1fe0 <VL53L0X_SetLimitCheckEnable+0x6e>
    2050:	20 f2       	brcs	.-120    	; 0x1fda <VL53L0X_SetLimitCheckEnable+0x68>
    2052:	65 30       	cpi	r22, 0x05	; 5
    2054:	71 05       	cpc	r23, r1
    2056:	59 f2       	breq	.-106    	; 0x1fee <VL53L0X_SetLimitCheckEnable+0x7c>
    2058:	e2 cf       	rjmp	.-60     	; 0x201e <VL53L0X_SetLimitCheckEnable+0xac>
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	ff 90       	pop	r15
    2062:	ef 90       	pop	r14
    2064:	bf 90       	pop	r11
    2066:	af 90       	pop	r10
    2068:	9f 90       	pop	r9
    206a:	8f 90       	pop	r8
    206c:	08 95       	ret

0000206e <VL53L0X_GetLimitCheckEnable>:
    206e:	66 30       	cpi	r22, 0x06	; 6
    2070:	71 05       	cpc	r23, r1
    2072:	20 f0       	brcs	.+8      	; 0x207c <VL53L0X_GetLimitCheckEnable+0xe>
    2074:	fa 01       	movw	r30, r20
    2076:	10 82       	st	Z, r1
    2078:	8c ef       	ldi	r24, 0xFC	; 252
    207a:	08 95       	ret
    207c:	fc 01       	movw	r30, r24
    207e:	e6 0f       	add	r30, r22
    2080:	f7 1f       	adc	r31, r23
    2082:	85 a1       	ldd	r24, Z+37	; 0x25
    2084:	fa 01       	movw	r30, r20
    2086:	80 83       	st	Z, r24
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	08 95       	ret

0000208c <VL53L0X_SetLimitCheckValue>:
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
    209c:	fc 01       	movw	r30, r24
    209e:	e6 0f       	add	r30, r22
    20a0:	f7 1f       	adc	r31, r23
    20a2:	e5 a1       	ldd	r30, Z+37	; 0x25
    20a4:	e1 11       	cpse	r30, r1
    20a6:	0d c0       	rjmp	.+26     	; 0x20c2 <VL53L0X_SetLimitCheckValue+0x36>
    20a8:	66 0f       	add	r22, r22
    20aa:	77 1f       	adc	r23, r23
    20ac:	66 0f       	add	r22, r22
    20ae:	77 1f       	adc	r23, r23
    20b0:	ec 01       	movw	r28, r24
    20b2:	c6 0f       	add	r28, r22
    20b4:	d7 1f       	adc	r29, r23
    20b6:	29 ab       	std	Y+49, r18	; 0x31
    20b8:	3a ab       	std	Y+50, r19	; 0x32
    20ba:	4b ab       	std	Y+51, r20	; 0x33
    20bc:	5c ab       	std	Y+52, r21	; 0x34
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	56 c0       	rjmp	.+172    	; 0x216e <VL53L0X_SetLimitCheckValue+0xe2>
    20c2:	69 01       	movw	r12, r18
    20c4:	7a 01       	movw	r14, r20
    20c6:	eb 01       	movw	r28, r22
    20c8:	8c 01       	movw	r16, r24
    20ca:	62 30       	cpi	r22, 0x02	; 2
    20cc:	71 05       	cpc	r23, r1
    20ce:	19 f1       	breq	.+70     	; 0x2116 <VL53L0X_SetLimitCheckValue+0x8a>
    20d0:	30 f4       	brcc	.+12     	; 0x20de <VL53L0X_SetLimitCheckValue+0x52>
    20d2:	20 97       	sbiw	r28, 0x00	; 0
    20d4:	59 f0       	breq	.+22     	; 0x20ec <VL53L0X_SetLimitCheckValue+0x60>
    20d6:	61 30       	cpi	r22, 0x01	; 1
    20d8:	71 05       	cpc	r23, r1
    20da:	71 f0       	breq	.+28     	; 0x20f8 <VL53L0X_SetLimitCheckValue+0x6c>
    20dc:	38 c0       	rjmp	.+112    	; 0x214e <VL53L0X_SetLimitCheckValue+0xc2>
    20de:	63 30       	cpi	r22, 0x03	; 3
    20e0:	71 05       	cpc	r23, r1
    20e2:	f9 f0       	breq	.+62     	; 0x2122 <VL53L0X_SetLimitCheckValue+0x96>
    20e4:	66 30       	cpi	r22, 0x06	; 6
    20e6:	71 05       	cpc	r23, r1
    20e8:	18 f1       	brcs	.+70     	; 0x2130 <VL53L0X_SetLimitCheckValue+0xa4>
    20ea:	31 c0       	rjmp	.+98     	; 0x214e <VL53L0X_SetLimitCheckValue+0xc2>
    20ec:	fc 01       	movw	r30, r24
    20ee:	21 ab       	std	Z+49, r18	; 0x31
    20f0:	32 ab       	std	Z+50, r19	; 0x32
    20f2:	43 ab       	std	Z+51, r20	; 0x33
    20f4:	54 ab       	std	Z+52, r21	; 0x34
    20f6:	2e c0       	rjmp	.+92     	; 0x2154 <VL53L0X_SetLimitCheckValue+0xc8>
    20f8:	ba 01       	movw	r22, r20
    20fa:	a9 01       	movw	r20, r18
    20fc:	03 2e       	mov	r0, r19
    20fe:	39 e0       	ldi	r19, 0x09	; 9
    2100:	76 95       	lsr	r23
    2102:	67 95       	ror	r22
    2104:	57 95       	ror	r21
    2106:	47 95       	ror	r20
    2108:	3a 95       	dec	r19
    210a:	d1 f7       	brne	.-12     	; 0x2100 <VL53L0X_SetLimitCheckValue+0x74>
    210c:	30 2d       	mov	r19, r0
    210e:	64 e4       	ldi	r22, 0x44	; 68
    2110:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    2114:	1d c0       	rjmp	.+58     	; 0x2150 <VL53L0X_SetLimitCheckValue+0xc4>
    2116:	fc 01       	movw	r30, r24
    2118:	21 af       	std	Z+57, r18	; 0x39
    211a:	32 af       	std	Z+58, r19	; 0x3a
    211c:	43 af       	std	Z+59, r20	; 0x3b
    211e:	54 af       	std	Z+60, r21	; 0x3c
    2120:	19 c0       	rjmp	.+50     	; 0x2154 <VL53L0X_SetLimitCheckValue+0xc8>
    2122:	fc 01       	movw	r30, r24
    2124:	fd 96       	adiw	r30, 0x3d	; 61
    2126:	20 83       	st	Z, r18
    2128:	31 83       	std	Z+1, r19	; 0x01
    212a:	42 83       	std	Z+2, r20	; 0x02
    212c:	53 83       	std	Z+3, r21	; 0x03
    212e:	12 c0       	rjmp	.+36     	; 0x2154 <VL53L0X_SetLimitCheckValue+0xc8>
    2130:	ba 01       	movw	r22, r20
    2132:	a9 01       	movw	r20, r18
    2134:	03 2e       	mov	r0, r19
    2136:	39 e0       	ldi	r19, 0x09	; 9
    2138:	76 95       	lsr	r23
    213a:	67 95       	ror	r22
    213c:	57 95       	ror	r21
    213e:	47 95       	ror	r20
    2140:	3a 95       	dec	r19
    2142:	d1 f7       	brne	.-12     	; 0x2138 <VL53L0X_SetLimitCheckValue+0xac>
    2144:	30 2d       	mov	r19, r0
    2146:	64 e6       	ldi	r22, 0x64	; 100
    2148:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    214c:	01 c0       	rjmp	.+2      	; 0x2150 <VL53L0X_SetLimitCheckValue+0xc4>
    214e:	8c ef       	ldi	r24, 0xFC	; 252
    2150:	81 11       	cpse	r24, r1
    2152:	0d c0       	rjmp	.+26     	; 0x216e <VL53L0X_SetLimitCheckValue+0xe2>
    2154:	be 01       	movw	r22, r28
    2156:	66 0f       	add	r22, r22
    2158:	77 1f       	adc	r23, r23
    215a:	66 0f       	add	r22, r22
    215c:	77 1f       	adc	r23, r23
    215e:	e8 01       	movw	r28, r16
    2160:	c6 0f       	add	r28, r22
    2162:	d7 1f       	adc	r29, r23
    2164:	c9 aa       	std	Y+49, r12	; 0x31
    2166:	da aa       	std	Y+50, r13	; 0x32
    2168:	eb aa       	std	Y+51, r14	; 0x33
    216a:	fc aa       	std	Y+52, r15	; 0x34
    216c:	80 e0       	ldi	r24, 0x00	; 0
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	ff 90       	pop	r15
    2178:	ef 90       	pop	r14
    217a:	df 90       	pop	r13
    217c:	cf 90       	pop	r12
    217e:	08 95       	ret

00002180 <VL53L0X_GetLimitCheckValue>:
    2180:	ef 92       	push	r14
    2182:	ff 92       	push	r15
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	00 d0       	rcall	.+0      	; 0x218e <VL53L0X_GetLimitCheckValue+0xe>
    218e:	cd b7       	in	r28, 0x3d	; 61
    2190:	de b7       	in	r29, 0x3e	; 62
    2192:	8c 01       	movw	r16, r24
    2194:	7a 01       	movw	r14, r20
    2196:	62 30       	cpi	r22, 0x02	; 2
    2198:	71 05       	cpc	r23, r1
    219a:	51 f1       	breq	.+84     	; 0x21f0 <VL53L0X_GetLimitCheckValue+0x70>
    219c:	38 f4       	brcc	.+14     	; 0x21ac <VL53L0X_GetLimitCheckValue+0x2c>
    219e:	61 15       	cp	r22, r1
    21a0:	71 05       	cpc	r23, r1
    21a2:	59 f0       	breq	.+22     	; 0x21ba <VL53L0X_GetLimitCheckValue+0x3a>
    21a4:	61 30       	cpi	r22, 0x01	; 1
    21a6:	71 05       	cpc	r23, r1
    21a8:	71 f0       	breq	.+28     	; 0x21c6 <VL53L0X_GetLimitCheckValue+0x46>
    21aa:	59 c0       	rjmp	.+178    	; 0x225e <VL53L0X_GetLimitCheckValue+0xde>
    21ac:	63 30       	cpi	r22, 0x03	; 3
    21ae:	71 05       	cpc	r23, r1
    21b0:	29 f1       	breq	.+74     	; 0x21fc <VL53L0X_GetLimitCheckValue+0x7c>
    21b2:	66 30       	cpi	r22, 0x06	; 6
    21b4:	71 05       	cpc	r23, r1
    21b6:	48 f1       	brcs	.+82     	; 0x220a <VL53L0X_GetLimitCheckValue+0x8a>
    21b8:	52 c0       	rjmp	.+164    	; 0x225e <VL53L0X_GetLimitCheckValue+0xde>
    21ba:	fc 01       	movw	r30, r24
    21bc:	81 a9       	ldd	r24, Z+49	; 0x31
    21be:	92 a9       	ldd	r25, Z+50	; 0x32
    21c0:	a3 a9       	ldd	r26, Z+51	; 0x33
    21c2:	b4 a9       	ldd	r27, Z+52	; 0x34
    21c4:	4e c0       	rjmp	.+156    	; 0x2262 <VL53L0X_GetLimitCheckValue+0xe2>
    21c6:	ae 01       	movw	r20, r28
    21c8:	4f 5f       	subi	r20, 0xFF	; 255
    21ca:	5f 4f       	sbci	r21, 0xFF	; 255
    21cc:	64 e4       	ldi	r22, 0x44	; 68
    21ce:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    21d2:	81 11       	cpse	r24, r1
    21d4:	4c c0       	rjmp	.+152    	; 0x226e <VL53L0X_GetLimitCheckValue+0xee>
    21d6:	99 81       	ldd	r25, Y+1	; 0x01
    21d8:	40 e0       	ldi	r20, 0x00	; 0
    21da:	50 e0       	ldi	r21, 0x00	; 0
    21dc:	59 2f       	mov	r21, r25
    21de:	55 0f       	add	r21, r21
    21e0:	60 e0       	ldi	r22, 0x00	; 0
    21e2:	70 e0       	ldi	r23, 0x00	; 0
    21e4:	41 15       	cp	r20, r1
    21e6:	51 05       	cpc	r21, r1
    21e8:	61 05       	cpc	r22, r1
    21ea:	71 05       	cpc	r23, r1
    21ec:	f1 f0       	breq	.+60     	; 0x222a <VL53L0X_GetLimitCheckValue+0xaa>
    21ee:	2a c0       	rjmp	.+84     	; 0x2244 <VL53L0X_GetLimitCheckValue+0xc4>
    21f0:	fc 01       	movw	r30, r24
    21f2:	81 ad       	ldd	r24, Z+57	; 0x39
    21f4:	92 ad       	ldd	r25, Z+58	; 0x3a
    21f6:	a3 ad       	ldd	r26, Z+59	; 0x3b
    21f8:	b4 ad       	ldd	r27, Z+60	; 0x3c
    21fa:	33 c0       	rjmp	.+102    	; 0x2262 <VL53L0X_GetLimitCheckValue+0xe2>
    21fc:	fc 01       	movw	r30, r24
    21fe:	fd 96       	adiw	r30, 0x3d	; 61
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	a2 81       	ldd	r26, Z+2	; 0x02
    2206:	b3 81       	ldd	r27, Z+3	; 0x03
    2208:	2c c0       	rjmp	.+88     	; 0x2262 <VL53L0X_GetLimitCheckValue+0xe2>
    220a:	ae 01       	movw	r20, r28
    220c:	4f 5f       	subi	r20, 0xFF	; 255
    220e:	5f 4f       	sbci	r21, 0xFF	; 255
    2210:	64 e6       	ldi	r22, 0x64	; 100
    2212:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    2216:	81 11       	cpse	r24, r1
    2218:	2a c0       	rjmp	.+84     	; 0x226e <VL53L0X_GetLimitCheckValue+0xee>
    221a:	29 81       	ldd	r18, Y+1	; 0x01
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	92 2f       	mov	r25, r18
    2222:	99 0f       	add	r25, r25
    2224:	a0 e0       	ldi	r26, 0x00	; 0
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	1c c0       	rjmp	.+56     	; 0x2262 <VL53L0X_GetLimitCheckValue+0xe2>
    222a:	f8 01       	movw	r30, r16
    222c:	45 a9       	ldd	r20, Z+53	; 0x35
    222e:	56 a9       	ldd	r21, Z+54	; 0x36
    2230:	67 a9       	ldd	r22, Z+55	; 0x37
    2232:	70 ad       	ldd	r23, Z+56	; 0x38
    2234:	f7 01       	movw	r30, r14
    2236:	40 83       	st	Z, r20
    2238:	51 83       	std	Z+1, r21	; 0x01
    223a:	62 83       	std	Z+2, r22	; 0x02
    223c:	73 83       	std	Z+3, r23	; 0x03
    223e:	f8 01       	movw	r30, r16
    2240:	16 a2       	std	Z+38, r1	; 0x26
    2242:	15 c0       	rjmp	.+42     	; 0x226e <VL53L0X_GetLimitCheckValue+0xee>
    2244:	f7 01       	movw	r30, r14
    2246:	40 83       	st	Z, r20
    2248:	51 83       	std	Z+1, r21	; 0x01
    224a:	62 83       	std	Z+2, r22	; 0x02
    224c:	73 83       	std	Z+3, r23	; 0x03
    224e:	f8 01       	movw	r30, r16
    2250:	45 ab       	std	Z+53, r20	; 0x35
    2252:	56 ab       	std	Z+54, r21	; 0x36
    2254:	67 ab       	std	Z+55, r22	; 0x37
    2256:	70 af       	std	Z+56, r23	; 0x38
    2258:	91 e0       	ldi	r25, 0x01	; 1
    225a:	96 a3       	std	Z+38, r25	; 0x26
    225c:	08 c0       	rjmp	.+16     	; 0x226e <VL53L0X_GetLimitCheckValue+0xee>
    225e:	8c ef       	ldi	r24, 0xFC	; 252
    2260:	06 c0       	rjmp	.+12     	; 0x226e <VL53L0X_GetLimitCheckValue+0xee>
    2262:	f7 01       	movw	r30, r14
    2264:	80 83       	st	Z, r24
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	a2 83       	std	Z+2, r26	; 0x02
    226a:	b3 83       	std	Z+3, r27	; 0x03
    226c:	80 e0       	ldi	r24, 0x00	; 0
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
    2276:	1f 91       	pop	r17
    2278:	0f 91       	pop	r16
    227a:	ff 90       	pop	r15
    227c:	ef 90       	pop	r14
    227e:	08 95       	ret

00002280 <VL53L0X_GetWrapAroundCheckEnable>:
    2280:	ef 92       	push	r14
    2282:	ff 92       	push	r15
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	1f 92       	push	r1
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	8c 01       	movw	r16, r24
    2294:	7b 01       	movw	r14, r22
    2296:	ae 01       	movw	r20, r28
    2298:	4f 5f       	subi	r20, 0xFF	; 255
    229a:	5f 4f       	sbci	r21, 0xFF	; 255
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    22a2:	81 11       	cpse	r24, r1
    22a4:	13 c0       	rjmp	.+38     	; 0x22cc <VL53L0X_GetWrapAroundCheckEnable+0x4c>
    22a6:	99 81       	ldd	r25, Y+1	; 0x01
    22a8:	f8 01       	movw	r30, r16
    22aa:	e3 5e       	subi	r30, 0xE3	; 227
    22ac:	fe 4f       	sbci	r31, 0xFE	; 254
    22ae:	90 83       	st	Z, r25
    22b0:	99 23       	and	r25, r25
    22b2:	24 f4       	brge	.+8      	; 0x22bc <VL53L0X_GetWrapAroundCheckEnable+0x3c>
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	f7 01       	movw	r30, r14
    22b8:	90 83       	st	Z, r25
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
    22bc:	f7 01       	movw	r30, r14
    22be:	10 82       	st	Z, r1
    22c0:	f7 01       	movw	r30, r14
    22c2:	90 81       	ld	r25, Z
    22c4:	f8 01       	movw	r30, r16
    22c6:	e7 5b       	subi	r30, 0xB7	; 183
    22c8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ca:	90 83       	st	Z, r25
    22cc:	0f 90       	pop	r0
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	ff 90       	pop	r15
    22d8:	ef 90       	pop	r14
    22da:	08 95       	ret

000022dc <VL53L0X_GetDeviceParameters>:
    22dc:	8f 92       	push	r8
    22de:	9f 92       	push	r9
    22e0:	af 92       	push	r10
    22e2:	bf 92       	push	r11
    22e4:	cf 92       	push	r12
    22e6:	df 92       	push	r13
    22e8:	ef 92       	push	r14
    22ea:	ff 92       	push	r15
    22ec:	0f 93       	push	r16
    22ee:	1f 93       	push	r17
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	ec 01       	movw	r28, r24
    22f6:	7b 01       	movw	r14, r22
    22f8:	88 89       	ldd	r24, Y+16	; 0x10
    22fa:	fb 01       	movw	r30, r22
    22fc:	80 83       	st	Z, r24
    22fe:	6a 5f       	subi	r22, 0xFA	; 250
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	ce 01       	movw	r24, r28
    2304:	2f dd       	rcall	.-1442   	; 0x1d64 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
    2306:	81 11       	cpse	r24, r1
    2308:	33 c0       	rjmp	.+102    	; 0x2370 <VL53L0X_GetDeviceParameters+0x94>
    230a:	f7 01       	movw	r30, r14
    230c:	12 86       	std	Z+10, r1	; 0x0a
    230e:	b7 01       	movw	r22, r14
    2310:	63 5f       	subi	r22, 0xF3	; 243
    2312:	7f 4f       	sbci	r23, 0xFF	; 255
    2314:	ce 01       	movw	r24, r28
    2316:	e5 dd       	rcall	.-1078   	; 0x1ee2 <VL53L0X_GetXTalkCompensationRateMegaCps>
    2318:	81 11       	cpse	r24, r1
    231a:	39 c0       	rjmp	.+114    	; 0x238e <VL53L0X_GetDeviceParameters+0xb2>
    231c:	b7 01       	movw	r22, r14
    231e:	6f 5e       	subi	r22, 0xEF	; 239
    2320:	7f 4f       	sbci	r23, 0xFF	; 255
    2322:	ce 01       	movw	r24, r28
    2324:	d5 d6       	rcall	.+3498   	; 0x30d0 <VL53L0X_get_offset_calibration_data_micro_meter>
    2326:	81 11       	cpse	r24, r1
    2328:	32 c0       	rjmp	.+100    	; 0x238e <VL53L0X_GetDeviceParameters+0xb2>
    232a:	87 01       	movw	r16, r14
    232c:	0f 5d       	subi	r16, 0xDF	; 223
    232e:	1f 4f       	sbci	r17, 0xFF	; 255
    2330:	5e 01       	movw	r10, r28
    2332:	f5 e2       	ldi	r31, 0x25	; 37
    2334:	af 0e       	add	r10, r31
    2336:	b1 1c       	adc	r11, r1
    2338:	67 01       	movw	r12, r14
    233a:	85 e1       	ldi	r24, 0x15	; 21
    233c:	c8 0e       	add	r12, r24
    233e:	d1 1c       	adc	r13, r1
    2340:	81 2c       	mov	r8, r1
    2342:	91 2c       	mov	r9, r1
    2344:	a8 01       	movw	r20, r16
    2346:	b4 01       	movw	r22, r8
    2348:	ce 01       	movw	r24, r28
    234a:	1a df       	rcall	.-460    	; 0x2180 <VL53L0X_GetLimitCheckValue>
    234c:	81 11       	cpse	r24, r1
    234e:	1f c0       	rjmp	.+62     	; 0x238e <VL53L0X_GetDeviceParameters+0xb2>
    2350:	f5 01       	movw	r30, r10
    2352:	81 91       	ld	r24, Z+
    2354:	5f 01       	movw	r10, r30
    2356:	f6 01       	movw	r30, r12
    2358:	81 93       	st	Z+, r24
    235a:	6f 01       	movw	r12, r30
    235c:	ff ef       	ldi	r31, 0xFF	; 255
    235e:	8f 1a       	sub	r8, r31
    2360:	9f 0a       	sbc	r9, r31
    2362:	0c 5f       	subi	r16, 0xFC	; 252
    2364:	1f 4f       	sbci	r17, 0xFF	; 255
    2366:	86 e0       	ldi	r24, 0x06	; 6
    2368:	88 16       	cp	r8, r24
    236a:	91 04       	cpc	r9, r1
    236c:	59 f7       	brne	.-42     	; 0x2344 <VL53L0X_GetDeviceParameters+0x68>
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <VL53L0X_GetDeviceParameters+0x98>
    2370:	81 11       	cpse	r24, r1
    2372:	0d c0       	rjmp	.+26     	; 0x238e <VL53L0X_GetDeviceParameters+0xb2>
    2374:	b7 01       	movw	r22, r14
    2376:	67 5c       	subi	r22, 0xC7	; 199
    2378:	7f 4f       	sbci	r23, 0xFF	; 255
    237a:	ce 01       	movw	r24, r28
    237c:	81 df       	rcall	.-254    	; 0x2280 <VL53L0X_GetWrapAroundCheckEnable>
    237e:	81 11       	cpse	r24, r1
    2380:	06 c0       	rjmp	.+12     	; 0x238e <VL53L0X_GetDeviceParameters+0xb2>
    2382:	b7 01       	movw	r22, r14
    2384:	6e 5f       	subi	r22, 0xFE	; 254
    2386:	7f 4f       	sbci	r23, 0xFF	; 255
    2388:	ce 01       	movw	r24, r28
    238a:	0e 94 ad 28 	call	0x515a	; 0x515a <VL53L0X_get_measurement_timing_budget_micro_seconds>
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	0f 91       	pop	r16
    2396:	ff 90       	pop	r15
    2398:	ef 90       	pop	r14
    239a:	df 90       	pop	r13
    239c:	cf 90       	pop	r12
    239e:	bf 90       	pop	r11
    23a0:	af 90       	pop	r10
    23a2:	9f 90       	pop	r9
    23a4:	8f 90       	pop	r8
    23a6:	08 95       	ret

000023a8 <VL53L0X_DataInit>:
    23a8:	ef 92       	push	r14
    23aa:	ff 92       	push	r15
    23ac:	0f 93       	push	r16
    23ae:	1f 93       	push	r17
    23b0:	cf 93       	push	r28
    23b2:	df 93       	push	r29
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	eb 97       	sbiw	r28, 0x3b	; 59
    23ba:	0f b6       	in	r0, 0x3f	; 63
    23bc:	f8 94       	cli
    23be:	de bf       	out	0x3e, r29	; 62
    23c0:	0f be       	out	0x3f, r0	; 63
    23c2:	cd bf       	out	0x3d, r28	; 61
    23c4:	8c 01       	movw	r16, r24
    23c6:	21 e0       	ldi	r18, 0x01	; 1
    23c8:	4e ef       	ldi	r20, 0xFE	; 254
    23ca:	69 e8       	ldi	r22, 0x89	; 137
    23cc:	0e 94 1b 32 	call	0x6436	; 0x6436 <VL53L0X_UpdateByte>
    23d0:	81 11       	cpse	r24, r1
    23d2:	05 c0       	rjmp	.+10     	; 0x23de <VL53L0X_DataInit+0x36>
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	68 e8       	ldi	r22, 0x88	; 136
    23d8:	c8 01       	movw	r24, r16
    23da:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    23de:	f8 01       	movw	r30, r16
    23e0:	e1 52       	subi	r30, 0x21	; 33
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	10 82       	st	Z, r1
    23e6:	88 ee       	ldi	r24, 0xE8	; 232
    23e8:	93 e0       	ldi	r25, 0x03	; 3
    23ea:	e6 5a       	subi	r30, 0xA6	; 166
    23ec:	ff 4f       	sbci	r31, 0xFF	; 255
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	80 83       	st	Z, r24
    23f2:	80 e9       	ldi	r24, 0x90	; 144
    23f4:	91 e0       	ldi	r25, 0x01	; 1
    23f6:	32 96       	adiw	r30, 0x02	; 2
    23f8:	91 83       	std	Z+1, r25	; 0x01
    23fa:	80 83       	st	Z, r24
    23fc:	85 e8       	ldi	r24, 0x85	; 133
    23fe:	9b e6       	ldi	r25, 0x6B	; 107
    2400:	a1 e0       	ldi	r26, 0x01	; 1
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	32 96       	adiw	r30, 0x02	; 2
    2406:	80 83       	st	Z, r24
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	a2 83       	std	Z+2, r26	; 0x02
    240c:	b3 83       	std	Z+3, r27	; 0x03
    240e:	84 ea       	ldi	r24, 0xA4	; 164
    2410:	90 e7       	ldi	r25, 0x70	; 112
    2412:	a9 e0       	ldi	r26, 0x09	; 9
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e5 57       	subi	r30, 0x75	; 117
    2418:	f1 09       	sbc	r31, r1
    241a:	80 83       	st	Z, r24
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	a2 83       	std	Z+2, r26	; 0x02
    2420:	b3 83       	std	Z+3, r27	; 0x03
    2422:	f8 01       	movw	r30, r16
    2424:	15 8e       	std	Z+29, r1	; 0x1d
    2426:	16 8e       	std	Z+30, r1	; 0x1e
    2428:	17 8e       	std	Z+31, r1	; 0x1f
    242a:	10 a2       	std	Z+32, r1	; 0x20
    242c:	be 01       	movw	r22, r28
    242e:	6f 5f       	subi	r22, 0xFF	; 255
    2430:	7f 4f       	sbci	r23, 0xFF	; 255
    2432:	c8 01       	movw	r24, r16
    2434:	53 df       	rcall	.-346    	; 0x22dc <VL53L0X_GetDeviceParameters>
    2436:	f8 2e       	mov	r15, r24
    2438:	81 11       	cpse	r24, r1
    243a:	0b c0       	rjmp	.+22     	; 0x2452 <VL53L0X_DataInit+0xaa>
    243c:	19 82       	std	Y+1, r1	; 0x01
    243e:	1a 82       	std	Y+2, r1	; 0x02
    2440:	8a e3       	ldi	r24, 0x3A	; 58
    2442:	fe 01       	movw	r30, r28
    2444:	31 96       	adiw	r30, 0x01	; 1
    2446:	d8 01       	movw	r26, r16
    2448:	50 96       	adiw	r26, 0x10	; 16
    244a:	01 90       	ld	r0, Z+
    244c:	0d 92       	st	X+, r0
    244e:	8a 95       	dec	r24
    2450:	e1 f7       	brne	.-8      	; 0x244a <VL53L0X_DataInit+0xa2>
    2452:	84 e6       	ldi	r24, 0x64	; 100
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	f8 01       	movw	r30, r16
    2458:	ef 5d       	subi	r30, 0xDF	; 223
    245a:	fe 4f       	sbci	r31, 0xFE	; 254
    245c:	91 83       	std	Z+1, r25	; 0x01
    245e:	80 83       	st	Z, r24
    2460:	84 e8       	ldi	r24, 0x84	; 132
    2462:	93 e0       	ldi	r25, 0x03	; 3
    2464:	32 96       	adiw	r30, 0x02	; 2
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	80 83       	st	Z, r24
    246a:	84 ef       	ldi	r24, 0xF4	; 244
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	32 96       	adiw	r30, 0x02	; 2
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	9a e0       	ldi	r25, 0x0A	; 10
    2478:	33 96       	adiw	r30, 0x03	; 3
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	70 96       	adiw	r30, 0x10	; 16
    2482:	80 83       	st	Z, r24
    2484:	41 e0       	ldi	r20, 0x01	; 1
    2486:	60 e8       	ldi	r22, 0x80	; 128
    2488:	c8 01       	movw	r24, r16
    248a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    248e:	e8 2e       	mov	r14, r24
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	6f ef       	ldi	r22, 0xFF	; 255
    2494:	c8 01       	movw	r24, r16
    2496:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    249a:	8e 29       	or	r24, r14
    249c:	f8 2a       	or	r15, r24
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	60 e0       	ldi	r22, 0x00	; 0
    24a2:	c8 01       	movw	r24, r16
    24a4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    24a8:	f8 2a       	or	r15, r24
    24aa:	ae 01       	movw	r20, r28
    24ac:	45 5c       	subi	r20, 0xC5	; 197
    24ae:	5f 4f       	sbci	r21, 0xFF	; 255
    24b0:	61 e9       	ldi	r22, 0x91	; 145
    24b2:	c8 01       	movw	r24, r16
    24b4:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    24b8:	f8 2a       	or	r15, r24
    24ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    24bc:	f8 01       	movw	r30, r16
    24be:	e9 5d       	subi	r30, 0xD9	; 217
    24c0:	fe 4f       	sbci	r31, 0xFE	; 254
    24c2:	80 83       	st	Z, r24
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	c8 01       	movw	r24, r16
    24ca:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    24ce:	f8 2a       	or	r15, r24
    24d0:	40 e0       	ldi	r20, 0x00	; 0
    24d2:	6f ef       	ldi	r22, 0xFF	; 255
    24d4:	c8 01       	movw	r24, r16
    24d6:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    24da:	f8 2a       	or	r15, r24
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	60 e8       	ldi	r22, 0x80	; 128
    24e0:	c8 01       	movw	r24, r16
    24e2:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    24e6:	8f 29       	or	r24, r15
    24e8:	09 f4       	brne	.+2      	; 0x24ec <VL53L0X_DataInit+0x144>
    24ea:	69 c0       	rjmp	.+210    	; 0x25be <VL53L0X_DataInit+0x216>
    24ec:	14 c0       	rjmp	.+40     	; 0x2516 <VL53L0X_DataInit+0x16e>
    24ee:	81 11       	cpse	r24, r1
    24f0:	12 c0       	rjmp	.+36     	; 0x2516 <VL53L0X_DataInit+0x16e>
    24f2:	41 e0       	ldi	r20, 0x01	; 1
    24f4:	b7 01       	movw	r22, r14
    24f6:	c8 01       	movw	r24, r16
    24f8:	3c dd       	rcall	.-1416   	; 0x1f72 <VL53L0X_SetLimitCheckEnable>
    24fa:	ff ef       	ldi	r31, 0xFF	; 255
    24fc:	ef 1a       	sub	r14, r31
    24fe:	ff 0a       	sbc	r15, r31
    2500:	96 e0       	ldi	r25, 0x06	; 6
    2502:	e9 16       	cp	r14, r25
    2504:	f1 04       	cpc	r15, r1
    2506:	99 f7       	brne	.-26     	; 0x24ee <VL53L0X_DataInit+0x146>
    2508:	81 11       	cpse	r24, r1
    250a:	1a c0       	rjmp	.+52     	; 0x2540 <VL53L0X_DataInit+0x198>
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	62 e0       	ldi	r22, 0x02	; 2
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	c8 01       	movw	r24, r16
    2514:	2e dd       	rcall	.-1444   	; 0x1f72 <VL53L0X_SetLimitCheckEnable>
    2516:	81 11       	cpse	r24, r1
    2518:	1d c0       	rjmp	.+58     	; 0x2554 <VL53L0X_DataInit+0x1ac>
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	63 e0       	ldi	r22, 0x03	; 3
    251e:	70 e0       	ldi	r23, 0x00	; 0
    2520:	c8 01       	movw	r24, r16
    2522:	27 dd       	rcall	.-1458   	; 0x1f72 <VL53L0X_SetLimitCheckEnable>
    2524:	81 11       	cpse	r24, r1
    2526:	20 c0       	rjmp	.+64     	; 0x2568 <VL53L0X_DataInit+0x1c0>
    2528:	40 e0       	ldi	r20, 0x00	; 0
    252a:	64 e0       	ldi	r22, 0x04	; 4
    252c:	70 e0       	ldi	r23, 0x00	; 0
    252e:	c8 01       	movw	r24, r16
    2530:	20 dd       	rcall	.-1472   	; 0x1f72 <VL53L0X_SetLimitCheckEnable>
    2532:	81 11       	cpse	r24, r1
    2534:	23 c0       	rjmp	.+70     	; 0x257c <VL53L0X_DataInit+0x1d4>
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	65 e0       	ldi	r22, 0x05	; 5
    253a:	70 e0       	ldi	r23, 0x00	; 0
    253c:	c8 01       	movw	r24, r16
    253e:	19 dd       	rcall	.-1486   	; 0x1f72 <VL53L0X_SetLimitCheckEnable>
    2540:	81 11       	cpse	r24, r1
    2542:	25 c0       	rjmp	.+74     	; 0x258e <VL53L0X_DataInit+0x1e6>
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	42 e1       	ldi	r20, 0x12	; 18
    254a:	50 e0       	ldi	r21, 0x00	; 0
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	70 e0       	ldi	r23, 0x00	; 0
    2550:	c8 01       	movw	r24, r16
    2552:	9c dd       	rcall	.-1224   	; 0x208c <VL53L0X_SetLimitCheckValue>
    2554:	81 11       	cpse	r24, r1
    2556:	2c c0       	rjmp	.+88     	; 0x25b0 <VL53L0X_DataInit+0x208>
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e4       	ldi	r19, 0x40	; 64
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	50 e0       	ldi	r21, 0x00	; 0
    2560:	61 e0       	ldi	r22, 0x01	; 1
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	c8 01       	movw	r24, r16
    2566:	92 dd       	rcall	.-1244   	; 0x208c <VL53L0X_SetLimitCheckValue>
    2568:	81 11       	cpse	r24, r1
    256a:	32 c0       	rjmp	.+100    	; 0x25d0 <VL53L0X_DataInit+0x228>
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	43 e2       	ldi	r20, 0x23	; 35
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	62 e0       	ldi	r22, 0x02	; 2
    2576:	70 e0       	ldi	r23, 0x00	; 0
    2578:	c8 01       	movw	r24, r16
    257a:	88 dd       	rcall	.-1264   	; 0x208c <VL53L0X_SetLimitCheckValue>
    257c:	81 11       	cpse	r24, r1
    257e:	28 c0       	rjmp	.+80     	; 0x25d0 <VL53L0X_DataInit+0x228>
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	a9 01       	movw	r20, r18
    2586:	63 e0       	ldi	r22, 0x03	; 3
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	c8 01       	movw	r24, r16
    258c:	7f dd       	rcall	.-1282   	; 0x208c <VL53L0X_SetLimitCheckValue>
    258e:	81 11       	cpse	r24, r1
    2590:	1f c0       	rjmp	.+62     	; 0x25d0 <VL53L0X_DataInit+0x228>
    2592:	8f ef       	ldi	r24, 0xFF	; 255
    2594:	f8 01       	movw	r30, r16
    2596:	e3 5e       	subi	r30, 0xE3	; 227
    2598:	fe 4f       	sbci	r31, 0xFE	; 254
    259a:	80 83       	st	Z, r24
    259c:	4f ef       	ldi	r20, 0xFF	; 255
    259e:	61 e0       	ldi	r22, 0x01	; 1
    25a0:	c8 01       	movw	r24, r16
    25a2:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	f8 01       	movw	r30, r16
    25aa:	e1 5e       	subi	r30, 0xE1	; 225
    25ac:	fe 4f       	sbci	r31, 0xFE	; 254
    25ae:	90 83       	st	Z, r25
    25b0:	81 11       	cpse	r24, r1
    25b2:	0e c0       	rjmp	.+28     	; 0x25d0 <VL53L0X_DataInit+0x228>
    25b4:	f8 01       	movw	r30, r16
    25b6:	ec 5f       	subi	r30, 0xFC	; 252
    25b8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ba:	10 82       	st	Z, r1
    25bc:	09 c0       	rjmp	.+18     	; 0x25d0 <VL53L0X_DataInit+0x228>
    25be:	41 e0       	ldi	r20, 0x01	; 1
    25c0:	60 e0       	ldi	r22, 0x00	; 0
    25c2:	70 e0       	ldi	r23, 0x00	; 0
    25c4:	c8 01       	movw	r24, r16
    25c6:	d5 dc       	rcall	.-1622   	; 0x1f72 <VL53L0X_SetLimitCheckEnable>
    25c8:	ee 24       	eor	r14, r14
    25ca:	e3 94       	inc	r14
    25cc:	f1 2c       	mov	r15, r1
    25ce:	8f cf       	rjmp	.-226    	; 0x24ee <VL53L0X_DataInit+0x146>
    25d0:	eb 96       	adiw	r28, 0x3b	; 59
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
    25dc:	df 91       	pop	r29
    25de:	cf 91       	pop	r28
    25e0:	1f 91       	pop	r17
    25e2:	0f 91       	pop	r16
    25e4:	ff 90       	pop	r15
    25e6:	ef 90       	pop	r14
    25e8:	08 95       	ret

000025ea <VL53L0X_GetRangingMeasurementData>:
    25ea:	2f 92       	push	r2
    25ec:	3f 92       	push	r3
    25ee:	4f 92       	push	r4
    25f0:	5f 92       	push	r5
    25f2:	6f 92       	push	r6
    25f4:	7f 92       	push	r7
    25f6:	8f 92       	push	r8
    25f8:	9f 92       	push	r9
    25fa:	af 92       	push	r10
    25fc:	bf 92       	push	r11
    25fe:	cf 92       	push	r12
    2600:	df 92       	push	r13
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	cf 93       	push	r28
    260c:	df 93       	push	r29
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
    2612:	a6 97       	sbiw	r28, 0x26	; 38
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	de bf       	out	0x3e, r29	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	cd bf       	out	0x3d, r28	; 61
    261e:	4c 01       	movw	r8, r24
    2620:	5b 01       	movw	r10, r22
    2622:	0c e0       	ldi	r16, 0x0C	; 12
    2624:	10 e0       	ldi	r17, 0x00	; 0
    2626:	20 e0       	ldi	r18, 0x00	; 0
    2628:	30 e0       	ldi	r19, 0x00	; 0
    262a:	ae 01       	movw	r20, r28
    262c:	4e 5f       	subi	r20, 0xFE	; 254
    262e:	5f 4f       	sbci	r21, 0xFF	; 255
    2630:	64 e1       	ldi	r22, 0x14	; 20
    2632:	0e 94 ce 31 	call	0x639c	; 0x639c <VL53L0X_ReadMulti>
    2636:	81 11       	cpse	r24, r1
    2638:	fb c0       	rjmp	.+502    	; 0x2830 <VL53L0X_GetRangingMeasurementData+0x246>
    263a:	d5 01       	movw	r26, r10
    263c:	56 96       	adiw	r26, 0x16	; 22
    263e:	1c 92       	st	X, r1
    2640:	56 97       	sbiw	r26, 0x16	; 22
    2642:	f5 01       	movw	r30, r10
    2644:	10 82       	st	Z, r1
    2646:	11 82       	std	Z+1, r1	; 0x01
    2648:	12 82       	std	Z+2, r1	; 0x02
    264a:	13 82       	std	Z+3, r1	; 0x03
    264c:	2c 85       	ldd	r18, Y+12	; 0x0c
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	32 2f       	mov	r19, r18
    2652:	22 27       	eor	r18, r18
    2654:	8d 85       	ldd	r24, Y+13	; 0x0d
    2656:	28 0f       	add	r18, r24
    2658:	31 1d       	adc	r19, r1
    265a:	14 96       	adiw	r26, 0x04	; 4
    265c:	1d 92       	st	X+, r1
    265e:	1d 92       	st	X+, r1
    2660:	1d 92       	st	X+, r1
    2662:	1c 92       	st	X, r1
    2664:	17 97       	sbiw	r26, 0x07	; 7
    2666:	49 84       	ldd	r4, Y+9	; 0x09
    2668:	51 2c       	mov	r5, r1
    266a:	54 2c       	mov	r5, r4
    266c:	44 24       	eor	r4, r4
    266e:	55 0c       	add	r5, r5
    2670:	61 2c       	mov	r6, r1
    2672:	71 2c       	mov	r7, r1
    2674:	44 86       	std	Z+12, r4	; 0x0c
    2676:	55 86       	std	Z+13, r5	; 0x0d
    2678:	66 86       	std	Z+14, r6	; 0x0e
    267a:	77 86       	std	Z+15, r7	; 0x0f
    267c:	8b 85       	ldd	r24, Y+11	; 0x0b
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	98 2f       	mov	r25, r24
    2682:	88 27       	eor	r24, r24
    2684:	99 0f       	add	r25, r25
    2686:	a0 e0       	ldi	r26, 0x00	; 0
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	80 8b       	std	Z+16, r24	; 0x10
    268c:	91 8b       	std	Z+17, r25	; 0x11
    268e:	a2 8b       	std	Z+18, r26	; 0x12
    2690:	b3 8b       	std	Z+19, r27	; 0x13
    2692:	0c 81       	ldd	r16, Y+4	; 0x04
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	10 2f       	mov	r17, r16
    2698:	00 27       	eor	r16, r16
    269a:	8d 81       	ldd	r24, Y+5	; 0x05
    269c:	08 0f       	add	r16, r24
    269e:	11 1d       	adc	r17, r1
    26a0:	15 8b       	std	Z+21, r17	; 0x15
    26a2:	04 8b       	std	Z+20, r16	; 0x14
    26a4:	3a 80       	ldd	r3, Y+2	; 0x02
    26a6:	f4 01       	movw	r30, r8
    26a8:	e7 5c       	subi	r30, 0xC7	; 199
    26aa:	fe 4f       	sbci	r31, 0xFE	; 254
    26ac:	40 81       	ld	r20, Z
    26ae:	51 81       	ldd	r21, Z+1	; 0x01
    26b0:	7b 97       	sbiw	r30, 0x1b	; 27
    26b2:	20 80       	ld	r2, Z
    26b4:	48 3e       	cpi	r20, 0xE8	; 232
    26b6:	f3 e0       	ldi	r31, 0x03	; 3
    26b8:	5f 07       	cpc	r21, r31
    26ba:	09 f4       	brne	.+2      	; 0x26be <VL53L0X_GetRangingMeasurementData+0xd4>
    26bc:	46 c0       	rjmp	.+140    	; 0x274a <VL53L0X_GetRangingMeasurementData+0x160>
    26be:	24 9f       	mul	r18, r20
    26c0:	c0 01       	movw	r24, r0
    26c2:	25 9f       	mul	r18, r21
    26c4:	90 0d       	add	r25, r0
    26c6:	34 9f       	mul	r19, r20
    26c8:	90 0d       	add	r25, r0
    26ca:	11 24       	eor	r1, r1
    26cc:	9c 01       	movw	r18, r24
    26ce:	2c 50       	subi	r18, 0x0C	; 12
    26d0:	3e 4f       	sbci	r19, 0xFE	; 254
    26d2:	36 95       	lsr	r19
    26d4:	27 95       	ror	r18
    26d6:	36 95       	lsr	r19
    26d8:	27 95       	ror	r18
    26da:	36 95       	lsr	r19
    26dc:	27 95       	ror	r18
    26de:	a5 ec       	ldi	r26, 0xC5	; 197
    26e0:	b0 e2       	ldi	r27, 0x20	; 32
    26e2:	0e 94 13 33 	call	0x6626	; 0x6626 <__umulhisi3>
    26e6:	9c 01       	movw	r18, r24
    26e8:	32 95       	swap	r19
    26ea:	22 95       	swap	r18
    26ec:	2f 70       	andi	r18, 0x0F	; 15
    26ee:	23 27       	eor	r18, r19
    26f0:	3f 70       	andi	r19, 0x0F	; 15
    26f2:	23 27       	eor	r18, r19
    26f4:	d4 01       	movw	r26, r8
    26f6:	5d 96       	adiw	r26, 0x1d	; 29
    26f8:	4d 91       	ld	r20, X+
    26fa:	5d 91       	ld	r21, X+
    26fc:	6d 91       	ld	r22, X+
    26fe:	7c 91       	ld	r23, X
    2700:	90 97       	sbiw	r26, 0x20	; 32
    2702:	5a 96       	adiw	r26, 0x1a	; 26
    2704:	8c 91       	ld	r24, X
    2706:	88 23       	and	r24, r24
    2708:	01 f1       	breq	.+64     	; 0x274a <VL53L0X_GetRangingMeasurementData+0x160>
    270a:	04 9f       	mul	r16, r20
    270c:	60 01       	movw	r12, r0
    270e:	05 9f       	mul	r16, r21
    2710:	d0 0c       	add	r13, r0
    2712:	14 9f       	mul	r17, r20
    2714:	d0 0c       	add	r13, r0
    2716:	11 24       	eor	r1, r1
    2718:	cd 2c       	mov	r12, r13
    271a:	dd 24       	eor	r13, r13
    271c:	e1 2c       	mov	r14, r1
    271e:	f1 2c       	mov	r15, r1
    2720:	4c 14       	cp	r4, r12
    2722:	5d 04       	cpc	r5, r13
    2724:	6e 04       	cpc	r6, r14
    2726:	7f 04       	cpc	r7, r15
    2728:	29 f4       	brne	.+10     	; 0x2734 <VL53L0X_GetRangingMeasurementData+0x14a>
    272a:	21 10       	cpse	r2, r1
    272c:	11 c0       	rjmp	.+34     	; 0x2750 <VL53L0X_GetRangingMeasurementData+0x166>
    272e:	20 ee       	ldi	r18, 0xE0	; 224
    2730:	3a e8       	ldi	r19, 0x8A	; 138
    2732:	1e c0       	rjmp	.+60     	; 0x2770 <VL53L0X_GetRangingMeasurementData+0x186>
    2734:	d9 01       	movw	r26, r18
    2736:	a3 01       	movw	r20, r6
    2738:	92 01       	movw	r18, r4
    273a:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
    273e:	2c 19       	sub	r18, r12
    2740:	3d 09       	sbc	r19, r13
    2742:	4e 09       	sbc	r20, r14
    2744:	5f 09       	sbc	r21, r15
    2746:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    274a:	22 20       	and	r2, r2
    274c:	89 f0       	breq	.+34     	; 0x2770 <VL53L0X_GetRangingMeasurementData+0x186>
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <VL53L0X_GetRangingMeasurementData+0x16a>
    2750:	28 eb       	ldi	r18, 0xB8	; 184
    2752:	32 e2       	ldi	r19, 0x22	; 34
    2754:	c9 01       	movw	r24, r18
    2756:	96 95       	lsr	r25
    2758:	87 95       	ror	r24
    275a:	96 95       	lsr	r25
    275c:	87 95       	ror	r24
    275e:	f5 01       	movw	r30, r10
    2760:	91 87       	std	Z+9, r25	; 0x09
    2762:	80 87       	std	Z+8, r24	; 0x08
    2764:	22 95       	swap	r18
    2766:	22 0f       	add	r18, r18
    2768:	22 0f       	add	r18, r18
    276a:	20 7c       	andi	r18, 0xC0	; 192
    276c:	27 8b       	std	Z+23, r18	; 0x17
    276e:	07 c0       	rjmp	.+14     	; 0x277e <VL53L0X_GetRangingMeasurementData+0x194>
    2770:	d5 01       	movw	r26, r10
    2772:	19 96       	adiw	r26, 0x09	; 9
    2774:	3c 93       	st	X, r19
    2776:	2e 93       	st	-X, r18
    2778:	18 97       	sbiw	r26, 0x08	; 8
    277a:	57 96       	adiw	r26, 0x17	; 23
    277c:	1c 92       	st	X, r1
    277e:	fe 01       	movw	r30, r28
    2780:	31 96       	adiw	r30, 0x01	; 1
    2782:	6f 01       	movw	r12, r30
    2784:	75 01       	movw	r14, r10
    2786:	a3 01       	movw	r20, r6
    2788:	92 01       	movw	r18, r4
    278a:	63 2d       	mov	r22, r3
    278c:	c4 01       	movw	r24, r8
    278e:	0e 94 01 30 	call	0x6002	; 0x6002 <VL53L0X_get_pal_range_status>
    2792:	81 11       	cpse	r24, r1
    2794:	4d c0       	rjmp	.+154    	; 0x2830 <VL53L0X_GetRangingMeasurementData+0x246>
    2796:	99 81       	ldd	r25, Y+1	; 0x01
    2798:	d5 01       	movw	r26, r10
    279a:	58 96       	adiw	r26, 0x18	; 24
    279c:	9c 93       	st	X, r25
    279e:	ba e4       	ldi	r27, 0x4A	; 74
    27a0:	8b 0e       	add	r8, r27
    27a2:	91 1c       	adc	r9, r1
    27a4:	29 e1       	ldi	r18, 0x19	; 25
    27a6:	f4 01       	movw	r30, r8
    27a8:	de 01       	movw	r26, r28
    27aa:	1e 96       	adiw	r26, 0x0e	; 14
    27ac:	01 90       	ld	r0, Z+
    27ae:	0d 92       	st	X+, r0
    27b0:	2a 95       	dec	r18
    27b2:	e1 f7       	brne	.-8      	; 0x27ac <VL53L0X_GetRangingMeasurementData+0x1c2>
    27b4:	d5 01       	movw	r26, r10
    27b6:	18 96       	adiw	r26, 0x08	; 8
    27b8:	ed 91       	ld	r30, X+
    27ba:	fc 91       	ld	r31, X
    27bc:	19 97       	sbiw	r26, 0x09	; 9
    27be:	57 96       	adiw	r26, 0x17	; 23
    27c0:	3c 90       	ld	r3, X
    27c2:	57 97       	sbiw	r26, 0x17	; 23
    27c4:	1a 96       	adiw	r26, 0x0a	; 10
    27c6:	6d 91       	ld	r22, X+
    27c8:	7c 91       	ld	r23, X
    27ca:	1b 97       	sbiw	r26, 0x0b	; 11
    27cc:	1c 96       	adiw	r26, 0x0c	; 12
    27ce:	4d 90       	ld	r4, X+
    27d0:	5d 90       	ld	r5, X+
    27d2:	6d 90       	ld	r6, X+
    27d4:	7c 90       	ld	r7, X
    27d6:	1f 97       	sbiw	r26, 0x0f	; 15
    27d8:	50 96       	adiw	r26, 0x10	; 16
    27da:	cd 90       	ld	r12, X+
    27dc:	dd 90       	ld	r13, X+
    27de:	ed 90       	ld	r14, X+
    27e0:	fc 90       	ld	r15, X
    27e2:	53 97       	sbiw	r26, 0x13	; 19
    27e4:	54 96       	adiw	r26, 0x14	; 20
    27e6:	4d 91       	ld	r20, X+
    27e8:	5c 91       	ld	r21, X
    27ea:	55 97       	sbiw	r26, 0x15	; 21
    27ec:	14 96       	adiw	r26, 0x04	; 4
    27ee:	0d 91       	ld	r16, X+
    27f0:	1d 91       	ld	r17, X+
    27f2:	2d 91       	ld	r18, X+
    27f4:	3c 91       	ld	r19, X
    27f6:	17 97       	sbiw	r26, 0x07	; 7
    27f8:	0a 8b       	std	Y+18, r16	; 0x12
    27fa:	1b 8b       	std	Y+19, r17	; 0x13
    27fc:	2c 8b       	std	Y+20, r18	; 0x14
    27fe:	3d 8b       	std	Y+21, r19	; 0x15
    2800:	ff 8b       	std	Y+23, r31	; 0x17
    2802:	ee 8b       	std	Y+22, r30	; 0x16
    2804:	79 8f       	std	Y+25, r23	; 0x19
    2806:	68 8f       	std	Y+24, r22	; 0x18
    2808:	4a 8e       	std	Y+26, r4	; 0x1a
    280a:	5b 8e       	std	Y+27, r5	; 0x1b
    280c:	6c 8e       	std	Y+28, r6	; 0x1c
    280e:	7d 8e       	std	Y+29, r7	; 0x1d
    2810:	ce 8e       	std	Y+30, r12	; 0x1e
    2812:	df 8e       	std	Y+31, r13	; 0x1f
    2814:	e8 a2       	std	Y+32, r14	; 0x20
    2816:	f9 a2       	std	Y+33, r15	; 0x21
    2818:	5b a3       	std	Y+35, r21	; 0x23
    281a:	4a a3       	std	Y+34, r20	; 0x22
    281c:	3d a2       	std	Y+37, r3	; 0x25
    281e:	9e a3       	std	Y+38, r25	; 0x26
    2820:	99 e1       	ldi	r25, 0x19	; 25
    2822:	fe 01       	movw	r30, r28
    2824:	3e 96       	adiw	r30, 0x0e	; 14
    2826:	d4 01       	movw	r26, r8
    2828:	01 90       	ld	r0, Z+
    282a:	0d 92       	st	X+, r0
    282c:	9a 95       	dec	r25
    282e:	e1 f7       	brne	.-8      	; 0x2828 <VL53L0X_GetRangingMeasurementData+0x23e>
    2830:	a6 96       	adiw	r28, 0x26	; 38
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	f8 94       	cli
    2836:	de bf       	out	0x3e, r29	; 62
    2838:	0f be       	out	0x3f, r0	; 63
    283a:	cd bf       	out	0x3d, r28	; 61
    283c:	df 91       	pop	r29
    283e:	cf 91       	pop	r28
    2840:	1f 91       	pop	r17
    2842:	0f 91       	pop	r16
    2844:	ff 90       	pop	r15
    2846:	ef 90       	pop	r14
    2848:	df 90       	pop	r13
    284a:	cf 90       	pop	r12
    284c:	bf 90       	pop	r11
    284e:	af 90       	pop	r10
    2850:	9f 90       	pop	r9
    2852:	8f 90       	pop	r8
    2854:	7f 90       	pop	r7
    2856:	6f 90       	pop	r6
    2858:	5f 90       	pop	r5
    285a:	4f 90       	pop	r4
    285c:	3f 90       	pop	r3
    285e:	2f 90       	pop	r2
    2860:	08 95       	ret

00002862 <VL53L0X_GetInterruptThresholds>:
    2862:	cf 92       	push	r12
    2864:	df 92       	push	r13
    2866:	ef 92       	push	r14
    2868:	ff 92       	push	r15
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	00 d0       	rcall	.+0      	; 0x2874 <VL53L0X_GetInterruptThresholds+0x12>
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	8c 01       	movw	r16, r24
    287a:	6a 01       	movw	r12, r20
    287c:	79 01       	movw	r14, r18
    287e:	ae 01       	movw	r20, r28
    2880:	4f 5f       	subi	r20, 0xFF	; 255
    2882:	5f 4f       	sbci	r21, 0xFF	; 255
    2884:	6e e0       	ldi	r22, 0x0E	; 14
    2886:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    288a:	49 81       	ldd	r20, Y+1	; 0x01
    288c:	5a 81       	ldd	r21, Y+2	; 0x02
    288e:	5f 70       	andi	r21, 0x0F	; 15
    2890:	60 e0       	ldi	r22, 0x00	; 0
    2892:	70 e0       	ldi	r23, 0x00	; 0
    2894:	03 2e       	mov	r0, r19
    2896:	31 e1       	ldi	r19, 0x11	; 17
    2898:	44 0f       	add	r20, r20
    289a:	55 1f       	adc	r21, r21
    289c:	66 1f       	adc	r22, r22
    289e:	77 1f       	adc	r23, r23
    28a0:	3a 95       	dec	r19
    28a2:	d1 f7       	brne	.-12     	; 0x2898 <VL53L0X_GetInterruptThresholds+0x36>
    28a4:	30 2d       	mov	r19, r0
    28a6:	f6 01       	movw	r30, r12
    28a8:	40 83       	st	Z, r20
    28aa:	51 83       	std	Z+1, r21	; 0x01
    28ac:	62 83       	std	Z+2, r22	; 0x02
    28ae:	73 83       	std	Z+3, r23	; 0x03
    28b0:	81 11       	cpse	r24, r1
    28b2:	1a c0       	rjmp	.+52     	; 0x28e8 <VL53L0X_GetInterruptThresholds+0x86>
    28b4:	ae 01       	movw	r20, r28
    28b6:	4f 5f       	subi	r20, 0xFF	; 255
    28b8:	5f 4f       	sbci	r21, 0xFF	; 255
    28ba:	6c e0       	ldi	r22, 0x0C	; 12
    28bc:	c8 01       	movw	r24, r16
    28be:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    28c2:	49 81       	ldd	r20, Y+1	; 0x01
    28c4:	5a 81       	ldd	r21, Y+2	; 0x02
    28c6:	5f 70       	andi	r21, 0x0F	; 15
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	03 2e       	mov	r0, r19
    28ce:	31 e1       	ldi	r19, 0x11	; 17
    28d0:	44 0f       	add	r20, r20
    28d2:	55 1f       	adc	r21, r21
    28d4:	66 1f       	adc	r22, r22
    28d6:	77 1f       	adc	r23, r23
    28d8:	3a 95       	dec	r19
    28da:	d1 f7       	brne	.-12     	; 0x28d0 <VL53L0X_GetInterruptThresholds+0x6e>
    28dc:	30 2d       	mov	r19, r0
    28de:	f7 01       	movw	r30, r14
    28e0:	40 83       	st	Z, r20
    28e2:	51 83       	std	Z+1, r21	; 0x01
    28e4:	62 83       	std	Z+2, r22	; 0x02
    28e6:	73 83       	std	Z+3, r23	; 0x03
    28e8:	0f 90       	pop	r0
    28ea:	0f 90       	pop	r0
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	0f 91       	pop	r16
    28f4:	ff 90       	pop	r15
    28f6:	ef 90       	pop	r14
    28f8:	df 90       	pop	r13
    28fa:	cf 90       	pop	r12
    28fc:	08 95       	ret

000028fe <VL53L0X_CheckAndLoadInterruptSettings>:
    28fe:	ef 92       	push	r14
    2900:	ff 92       	push	r15
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	28 97       	sbiw	r28, 0x08	; 8
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	9c 01       	movw	r18, r24
    291a:	fc 01       	movw	r30, r24
    291c:	e2 53       	subi	r30, 0x32	; 50
    291e:	ff 4f       	sbci	r31, 0xFF	; 255
    2920:	90 81       	ld	r25, Z
    2922:	91 50       	subi	r25, 0x01	; 1
    2924:	93 30       	cpi	r25, 0x03	; 3
    2926:	08 f0       	brcs	.+2      	; 0x292a <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
    2928:	40 c0       	rjmp	.+128    	; 0x29aa <VL53L0X_CheckAndLoadInterruptSettings+0xac>
    292a:	16 2f       	mov	r17, r22
    292c:	79 01       	movw	r14, r18
    292e:	9e 01       	movw	r18, r28
    2930:	2b 5f       	subi	r18, 0xFB	; 251
    2932:	3f 4f       	sbci	r19, 0xFF	; 255
    2934:	ae 01       	movw	r20, r28
    2936:	4f 5f       	subi	r20, 0xFF	; 255
    2938:	5f 4f       	sbci	r21, 0xFF	; 255
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	c7 01       	movw	r24, r14
    293e:	91 df       	rcall	.-222    	; 0x2862 <VL53L0X_GetInterruptThresholds>
    2940:	49 81       	ldd	r20, Y+1	; 0x01
    2942:	5a 81       	ldd	r21, Y+2	; 0x02
    2944:	6b 81       	ldd	r22, Y+3	; 0x03
    2946:	7c 81       	ldd	r23, Y+4	; 0x04
    2948:	41 30       	cpi	r20, 0x01	; 1
    294a:	51 05       	cpc	r21, r1
    294c:	6f 4f       	sbci	r22, 0xFF	; 255
    294e:	71 05       	cpc	r23, r1
    2950:	48 f4       	brcc	.+18     	; 0x2964 <VL53L0X_CheckAndLoadInterruptSettings+0x66>
    2952:	4d 81       	ldd	r20, Y+5	; 0x05
    2954:	5e 81       	ldd	r21, Y+6	; 0x06
    2956:	6f 81       	ldd	r22, Y+7	; 0x07
    2958:	78 85       	ldd	r23, Y+8	; 0x08
    295a:	41 30       	cpi	r20, 0x01	; 1
    295c:	51 05       	cpc	r21, r1
    295e:	6f 4f       	sbci	r22, 0xFF	; 255
    2960:	71 05       	cpc	r23, r1
    2962:	20 f1       	brcs	.+72     	; 0x29ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2964:	81 11       	cpse	r24, r1
    2966:	22 c0       	rjmp	.+68     	; 0x29ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2968:	11 23       	and	r17, r17
    296a:	31 f0       	breq	.+12     	; 0x2978 <VL53L0X_CheckAndLoadInterruptSettings+0x7a>
    296c:	60 e0       	ldi	r22, 0x00	; 0
    296e:	71 e0       	ldi	r23, 0x01	; 1
    2970:	c7 01       	movw	r24, r14
    2972:	0e 94 a6 29 	call	0x534c	; 0x534c <VL53L0X_load_tuning_settings>
    2976:	1a c0       	rjmp	.+52     	; 0x29ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2978:	44 e0       	ldi	r20, 0x04	; 4
    297a:	6f ef       	ldi	r22, 0xFF	; 255
    297c:	c7 01       	movw	r24, r14
    297e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2982:	18 2f       	mov	r17, r24
    2984:	40 e0       	ldi	r20, 0x00	; 0
    2986:	60 e7       	ldi	r22, 0x70	; 112
    2988:	c7 01       	movw	r24, r14
    298a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    298e:	18 2b       	or	r17, r24
    2990:	40 e0       	ldi	r20, 0x00	; 0
    2992:	6f ef       	ldi	r22, 0xFF	; 255
    2994:	c7 01       	movw	r24, r14
    2996:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    299a:	18 2b       	or	r17, r24
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	60 e8       	ldi	r22, 0x80	; 128
    29a0:	c7 01       	movw	r24, r14
    29a2:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    29a6:	81 2b       	or	r24, r17
    29a8:	01 c0       	rjmp	.+2      	; 0x29ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    29aa:	80 e0       	ldi	r24, 0x00	; 0
    29ac:	28 96       	adiw	r28, 0x08	; 8
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	de bf       	out	0x3e, r29	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	cd bf       	out	0x3d, r28	; 61
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	ff 90       	pop	r15
    29c0:	ef 90       	pop	r14
    29c2:	08 95       	ret

000029c4 <VL53L0X_StartMeasurement>:
    29c4:	cf 92       	push	r12
    29c6:	df 92       	push	r13
    29c8:	ef 92       	push	r14
    29ca:	ff 92       	push	r15
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
    29d4:	1f 92       	push	r1
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	8c 01       	movw	r16, r24
    29dc:	fc 01       	movw	r30, r24
    29de:	f0 88       	ldd	r15, Z+16	; 0x10
    29e0:	41 e0       	ldi	r20, 0x01	; 1
    29e2:	60 e8       	ldi	r22, 0x80	; 128
    29e4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    29e8:	41 e0       	ldi	r20, 0x01	; 1
    29ea:	6f ef       	ldi	r22, 0xFF	; 255
    29ec:	c8 01       	movw	r24, r16
    29ee:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    29f2:	40 e0       	ldi	r20, 0x00	; 0
    29f4:	60 e0       	ldi	r22, 0x00	; 0
    29f6:	c8 01       	movw	r24, r16
    29f8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    29fc:	f8 01       	movw	r30, r16
    29fe:	e9 5d       	subi	r30, 0xD9	; 217
    2a00:	fe 4f       	sbci	r31, 0xFE	; 254
    2a02:	40 81       	ld	r20, Z
    2a04:	61 e9       	ldi	r22, 0x91	; 145
    2a06:	c8 01       	movw	r24, r16
    2a08:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	c8 01       	movw	r24, r16
    2a12:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	6f ef       	ldi	r22, 0xFF	; 255
    2a1a:	c8 01       	movw	r24, r16
    2a1c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2a20:	40 e0       	ldi	r20, 0x00	; 0
    2a22:	60 e8       	ldi	r22, 0x80	; 128
    2a24:	c8 01       	movw	r24, r16
    2a26:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2a2a:	f1 e0       	ldi	r31, 0x01	; 1
    2a2c:	ff 16       	cp	r15, r31
    2a2e:	e9 f1       	breq	.+122    	; 0x2aaa <VL53L0X_StartMeasurement+0xe6>
    2a30:	ff 16       	cp	r15, r31
    2a32:	28 f0       	brcs	.+10     	; 0x2a3e <VL53L0X_StartMeasurement+0x7a>
    2a34:	93 e0       	ldi	r25, 0x03	; 3
    2a36:	f9 16       	cp	r15, r25
    2a38:	09 f4       	brne	.+2      	; 0x2a3c <VL53L0X_StartMeasurement+0x78>
    2a3a:	49 c0       	rjmp	.+146    	; 0x2ace <VL53L0X_StartMeasurement+0x10a>
    2a3c:	5a c0       	rjmp	.+180    	; 0x2af2 <VL53L0X_StartMeasurement+0x12e>
    2a3e:	41 e0       	ldi	r20, 0x01	; 1
    2a40:	60 e0       	ldi	r22, 0x00	; 0
    2a42:	c8 01       	movw	r24, r16
    2a44:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2a48:	91 e0       	ldi	r25, 0x01	; 1
    2a4a:	99 83       	std	Y+1, r25	; 0x01
    2a4c:	88 23       	and	r24, r24
    2a4e:	71 f0       	breq	.+28     	; 0x2a6c <VL53L0X_StartMeasurement+0xa8>
    2a50:	51 c0       	rjmp	.+162    	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2a52:	c1 14       	cp	r12, r1
    2a54:	d1 04       	cpc	r13, r1
    2a56:	e1 04       	cpc	r14, r1
    2a58:	f1 04       	cpc	r15, r1
    2a5a:	59 f0       	breq	.+22     	; 0x2a72 <VL53L0X_StartMeasurement+0xae>
    2a5c:	ae 01       	movw	r20, r28
    2a5e:	4f 5f       	subi	r20, 0xFF	; 255
    2a60:	5f 4f       	sbci	r21, 0xFF	; 255
    2a62:	60 e0       	ldi	r22, 0x00	; 0
    2a64:	c8 01       	movw	r24, r16
    2a66:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    2a6a:	03 c0       	rjmp	.+6      	; 0x2a72 <VL53L0X_StartMeasurement+0xae>
    2a6c:	c1 2c       	mov	r12, r1
    2a6e:	d1 2c       	mov	r13, r1
    2a70:	76 01       	movw	r14, r12
    2a72:	ef ef       	ldi	r30, 0xFF	; 255
    2a74:	ce 1a       	sub	r12, r30
    2a76:	de 0a       	sbc	r13, r30
    2a78:	ee 0a       	sbc	r14, r30
    2a7a:	fe 0a       	sbc	r15, r30
    2a7c:	99 81       	ldd	r25, Y+1	; 0x01
    2a7e:	90 ff       	sbrs	r25, 0
    2a80:	0b c0       	rjmp	.+22     	; 0x2a98 <VL53L0X_StartMeasurement+0xd4>
    2a82:	81 11       	cpse	r24, r1
    2a84:	09 c0       	rjmp	.+18     	; 0x2a98 <VL53L0X_StartMeasurement+0xd4>
    2a86:	f0 ed       	ldi	r31, 0xD0	; 208
    2a88:	cf 16       	cp	r12, r31
    2a8a:	f7 e0       	ldi	r31, 0x07	; 7
    2a8c:	df 06       	cpc	r13, r31
    2a8e:	e1 04       	cpc	r14, r1
    2a90:	f1 04       	cpc	r15, r1
    2a92:	f9 f6       	brne	.-66     	; 0x2a52 <VL53L0X_StartMeasurement+0x8e>
    2a94:	89 ef       	ldi	r24, 0xF9	; 249
    2a96:	2e c0       	rjmp	.+92     	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2a98:	90 ed       	ldi	r25, 0xD0	; 208
    2a9a:	c9 16       	cp	r12, r25
    2a9c:	97 e0       	ldi	r25, 0x07	; 7
    2a9e:	d9 06       	cpc	r13, r25
    2aa0:	e1 04       	cpc	r14, r1
    2aa2:	f1 04       	cpc	r15, r1
    2aa4:	38 f1       	brcs	.+78     	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2aa6:	89 ef       	ldi	r24, 0xF9	; 249
    2aa8:	25 c0       	rjmp	.+74     	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2aaa:	81 11       	cpse	r24, r1
    2aac:	03 c0       	rjmp	.+6      	; 0x2ab4 <VL53L0X_StartMeasurement+0xf0>
    2aae:	61 e0       	ldi	r22, 0x01	; 1
    2ab0:	c8 01       	movw	r24, r16
    2ab2:	25 df       	rcall	.-438    	; 0x28fe <VL53L0X_CheckAndLoadInterruptSettings>
    2ab4:	42 e0       	ldi	r20, 0x02	; 2
    2ab6:	60 e0       	ldi	r22, 0x00	; 0
    2ab8:	c8 01       	movw	r24, r16
    2aba:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2abe:	81 11       	cpse	r24, r1
    2ac0:	19 c0       	rjmp	.+50     	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	e1 5e       	subi	r30, 0xE1	; 225
    2ac6:	fe 4f       	sbci	r31, 0xFE	; 254
    2ac8:	94 e0       	ldi	r25, 0x04	; 4
    2aca:	90 83       	st	Z, r25
    2acc:	13 c0       	rjmp	.+38     	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2ace:	81 11       	cpse	r24, r1
    2ad0:	03 c0       	rjmp	.+6      	; 0x2ad8 <VL53L0X_StartMeasurement+0x114>
    2ad2:	61 e0       	ldi	r22, 0x01	; 1
    2ad4:	c8 01       	movw	r24, r16
    2ad6:	13 df       	rcall	.-474    	; 0x28fe <VL53L0X_CheckAndLoadInterruptSettings>
    2ad8:	44 e0       	ldi	r20, 0x04	; 4
    2ada:	60 e0       	ldi	r22, 0x00	; 0
    2adc:	c8 01       	movw	r24, r16
    2ade:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2ae2:	81 11       	cpse	r24, r1
    2ae4:	07 c0       	rjmp	.+14     	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2ae6:	f8 01       	movw	r30, r16
    2ae8:	e1 5e       	subi	r30, 0xE1	; 225
    2aea:	fe 4f       	sbci	r31, 0xFE	; 254
    2aec:	94 e0       	ldi	r25, 0x04	; 4
    2aee:	90 83       	st	Z, r25
    2af0:	01 c0       	rjmp	.+2      	; 0x2af4 <VL53L0X_StartMeasurement+0x130>
    2af2:	88 ef       	ldi	r24, 0xF8	; 248
    2af4:	0f 90       	pop	r0
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	08 95       	ret

00002b08 <VL53L0X_PerformSingleMeasurement>:
    2b08:	1f 93       	push	r17
    2b0a:	cf 93       	push	r28
    2b0c:	df 93       	push	r29
    2b0e:	ec 01       	movw	r28, r24
    2b10:	18 89       	ldd	r17, Y+16	; 0x10
    2b12:	11 11       	cpse	r17, r1
    2b14:	04 c0       	rjmp	.+8      	; 0x2b1e <VL53L0X_PerformSingleMeasurement+0x16>
    2b16:	56 df       	rcall	.-340    	; 0x29c4 <VL53L0X_StartMeasurement>
    2b18:	81 11       	cpse	r24, r1
    2b1a:	12 c0       	rjmp	.+36     	; 0x2b40 <VL53L0X_PerformSingleMeasurement+0x38>
    2b1c:	0c c0       	rjmp	.+24     	; 0x2b36 <VL53L0X_PerformSingleMeasurement+0x2e>
    2b1e:	0e 94 9d 20 	call	0x413a	; 0x413a <VL53L0X_measurement_poll_for_completion>
    2b22:	81 11       	cpse	r24, r1
    2b24:	0d c0       	rjmp	.+26     	; 0x2b40 <VL53L0X_PerformSingleMeasurement+0x38>
    2b26:	11 11       	cpse	r17, r1
    2b28:	0b c0       	rjmp	.+22     	; 0x2b40 <VL53L0X_PerformSingleMeasurement+0x38>
    2b2a:	c1 5e       	subi	r28, 0xE1	; 225
    2b2c:	de 4f       	sbci	r29, 0xFE	; 254
    2b2e:	83 e0       	ldi	r24, 0x03	; 3
    2b30:	88 83       	st	Y, r24
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	05 c0       	rjmp	.+10     	; 0x2b40 <VL53L0X_PerformSingleMeasurement+0x38>
    2b36:	ce 01       	movw	r24, r28
    2b38:	0e 94 9d 20 	call	0x413a	; 0x413a <VL53L0X_measurement_poll_for_completion>
    2b3c:	88 23       	and	r24, r24
    2b3e:	a9 f3       	breq	.-22     	; 0x2b2a <VL53L0X_PerformSingleMeasurement+0x22>
    2b40:	df 91       	pop	r29
    2b42:	cf 91       	pop	r28
    2b44:	1f 91       	pop	r17
    2b46:	08 95       	ret

00002b48 <VL53L0X_ClearInterruptMask>:
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	1f 92       	push	r1
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	7c 01       	movw	r14, r24
    2b5c:	00 e0       	ldi	r16, 0x00	; 0
    2b5e:	41 e0       	ldi	r20, 0x01	; 1
    2b60:	6b e0       	ldi	r22, 0x0B	; 11
    2b62:	c7 01       	movw	r24, r14
    2b64:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2b68:	18 2f       	mov	r17, r24
    2b6a:	40 e0       	ldi	r20, 0x00	; 0
    2b6c:	6b e0       	ldi	r22, 0x0B	; 11
    2b6e:	c7 01       	movw	r24, r14
    2b70:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2b74:	18 2b       	or	r17, r24
    2b76:	ae 01       	movw	r20, r28
    2b78:	4f 5f       	subi	r20, 0xFF	; 255
    2b7a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b7c:	63 e1       	ldi	r22, 0x13	; 19
    2b7e:	c7 01       	movw	r24, r14
    2b80:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    2b84:	81 2b       	or	r24, r17
    2b86:	0f 5f       	subi	r16, 0xFF	; 255
    2b88:	99 81       	ldd	r25, Y+1	; 0x01
    2b8a:	97 70       	andi	r25, 0x07	; 7
    2b8c:	29 f0       	breq	.+10     	; 0x2b98 <VL53L0X_ClearInterruptMask+0x50>
    2b8e:	03 30       	cpi	r16, 0x03	; 3
    2b90:	39 f0       	breq	.+14     	; 0x2ba0 <VL53L0X_ClearInterruptMask+0x58>
    2b92:	88 23       	and	r24, r24
    2b94:	21 f3       	breq	.-56     	; 0x2b5e <VL53L0X_ClearInterruptMask+0x16>
    2b96:	05 c0       	rjmp	.+10     	; 0x2ba2 <VL53L0X_ClearInterruptMask+0x5a>
    2b98:	03 30       	cpi	r16, 0x03	; 3
    2b9a:	18 f0       	brcs	.+6      	; 0x2ba2 <VL53L0X_ClearInterruptMask+0x5a>
    2b9c:	84 ef       	ldi	r24, 0xF4	; 244
    2b9e:	01 c0       	rjmp	.+2      	; 0x2ba2 <VL53L0X_ClearInterruptMask+0x5a>
    2ba0:	84 ef       	ldi	r24, 0xF4	; 244
    2ba2:	0f 90       	pop	r0
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	ff 90       	pop	r15
    2bae:	ef 90       	pop	r14
    2bb0:	08 95       	ret

00002bb2 <VL53L0X_PerformSingleRangingMeasurement>:
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	ec 01       	movw	r28, r24
    2bbc:	8b 01       	movw	r16, r22
    2bbe:	60 e0       	ldi	r22, 0x00	; 0
    2bc0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <VL53L0X_SetDeviceMode>
    2bc4:	81 11       	cpse	r24, r1
    2bc6:	0e c0       	rjmp	.+28     	; 0x2be4 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2bc8:	ce 01       	movw	r24, r28
    2bca:	9e df       	rcall	.-196    	; 0x2b08 <VL53L0X_PerformSingleMeasurement>
    2bcc:	81 11       	cpse	r24, r1
    2bce:	0a c0       	rjmp	.+20     	; 0x2be4 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2bd0:	b8 01       	movw	r22, r16
    2bd2:	ce 01       	movw	r24, r28
    2bd4:	0a dd       	rcall	.-1516   	; 0x25ea <VL53L0X_GetRangingMeasurementData>
    2bd6:	81 11       	cpse	r24, r1
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2bda:	40 e0       	ldi	r20, 0x00	; 0
    2bdc:	50 e0       	ldi	r21, 0x00	; 0
    2bde:	ba 01       	movw	r22, r20
    2be0:	ce 01       	movw	r24, r28
    2be2:	b2 df       	rcall	.-156    	; 0x2b48 <VL53L0X_ClearInterruptMask>
    2be4:	df 91       	pop	r29
    2be6:	cf 91       	pop	r28
    2be8:	1f 91       	pop	r17
    2bea:	0f 91       	pop	r16
    2bec:	08 95       	ret

00002bee <VL53L0X_SetGpioConfig>:
    2bee:	0f 93       	push	r16
    2bf0:	1f 93       	push	r17
    2bf2:	cf 93       	push	r28
    2bf4:	df 93       	push	r29
    2bf6:	61 11       	cpse	r22, r1
    2bf8:	9b c0       	rjmp	.+310    	; 0x2d30 <VL53L0X_SetGpioConfig+0x142>
    2bfa:	12 2f       	mov	r17, r18
    2bfc:	ec 01       	movw	r28, r24
    2bfe:	44 31       	cpi	r20, 0x14	; 20
    2c00:	51 f4       	brne	.+20     	; 0x2c16 <VL53L0X_SetGpioConfig+0x28>
    2c02:	00 23       	and	r16, r16
    2c04:	11 f0       	breq	.+4      	; 0x2c0a <VL53L0X_SetGpioConfig+0x1c>
    2c06:	41 e0       	ldi	r20, 0x01	; 1
    2c08:	01 c0       	rjmp	.+2      	; 0x2c0c <VL53L0X_SetGpioConfig+0x1e>
    2c0a:	40 e1       	ldi	r20, 0x10	; 16
    2c0c:	64 e8       	ldi	r22, 0x84	; 132
    2c0e:	ce 01       	movw	r24, r28
    2c10:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c14:	93 c0       	rjmp	.+294    	; 0x2d3c <VL53L0X_SetGpioConfig+0x14e>
    2c16:	45 31       	cpi	r20, 0x15	; 21
    2c18:	09 f0       	breq	.+2      	; 0x2c1c <VL53L0X_SetGpioConfig+0x2e>
    2c1a:	5a c0       	rjmp	.+180    	; 0x2cd0 <VL53L0X_SetGpioConfig+0xe2>
    2c1c:	41 e0       	ldi	r20, 0x01	; 1
    2c1e:	6f ef       	ldi	r22, 0xFF	; 255
    2c20:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c24:	18 2f       	mov	r17, r24
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	60 e0       	ldi	r22, 0x00	; 0
    2c2a:	ce 01       	movw	r24, r28
    2c2c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c30:	18 2b       	or	r17, r24
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	6f ef       	ldi	r22, 0xFF	; 255
    2c36:	ce 01       	movw	r24, r28
    2c38:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c3c:	18 2b       	or	r17, r24
    2c3e:	41 e0       	ldi	r20, 0x01	; 1
    2c40:	60 e8       	ldi	r22, 0x80	; 128
    2c42:	ce 01       	movw	r24, r28
    2c44:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c48:	18 2b       	or	r17, r24
    2c4a:	42 e0       	ldi	r20, 0x02	; 2
    2c4c:	65 e8       	ldi	r22, 0x85	; 133
    2c4e:	ce 01       	movw	r24, r28
    2c50:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c54:	18 2b       	or	r17, r24
    2c56:	44 e0       	ldi	r20, 0x04	; 4
    2c58:	6f ef       	ldi	r22, 0xFF	; 255
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c60:	18 2b       	or	r17, r24
    2c62:	40 e0       	ldi	r20, 0x00	; 0
    2c64:	6d ec       	ldi	r22, 0xCD	; 205
    2c66:	ce 01       	movw	r24, r28
    2c68:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c6c:	18 2b       	or	r17, r24
    2c6e:	41 e1       	ldi	r20, 0x11	; 17
    2c70:	6c ec       	ldi	r22, 0xCC	; 204
    2c72:	ce 01       	movw	r24, r28
    2c74:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c78:	18 2b       	or	r17, r24
    2c7a:	47 e0       	ldi	r20, 0x07	; 7
    2c7c:	6f ef       	ldi	r22, 0xFF	; 255
    2c7e:	ce 01       	movw	r24, r28
    2c80:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c84:	18 2b       	or	r17, r24
    2c86:	40 e0       	ldi	r20, 0x00	; 0
    2c88:	6e eb       	ldi	r22, 0xBE	; 190
    2c8a:	ce 01       	movw	r24, r28
    2c8c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c90:	18 2b       	or	r17, r24
    2c92:	46 e0       	ldi	r20, 0x06	; 6
    2c94:	6f ef       	ldi	r22, 0xFF	; 255
    2c96:	ce 01       	movw	r24, r28
    2c98:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2c9c:	18 2b       	or	r17, r24
    2c9e:	49 e0       	ldi	r20, 0x09	; 9
    2ca0:	6c ec       	ldi	r22, 0xCC	; 204
    2ca2:	ce 01       	movw	r24, r28
    2ca4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2ca8:	18 2b       	or	r17, r24
    2caa:	40 e0       	ldi	r20, 0x00	; 0
    2cac:	6f ef       	ldi	r22, 0xFF	; 255
    2cae:	ce 01       	movw	r24, r28
    2cb0:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2cb4:	18 2b       	or	r17, r24
    2cb6:	41 e0       	ldi	r20, 0x01	; 1
    2cb8:	6f ef       	ldi	r22, 0xFF	; 255
    2cba:	ce 01       	movw	r24, r28
    2cbc:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2cc0:	18 2b       	or	r17, r24
    2cc2:	40 e0       	ldi	r20, 0x00	; 0
    2cc4:	60 e0       	ldi	r22, 0x00	; 0
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2ccc:	81 2b       	or	r24, r17
    2cce:	36 c0       	rjmp	.+108    	; 0x2d3c <VL53L0X_SetGpioConfig+0x14e>
    2cd0:	22 30       	cpi	r18, 0x02	; 2
    2cd2:	59 f0       	breq	.+22     	; 0x2cea <VL53L0X_SetGpioConfig+0xfc>
    2cd4:	28 f4       	brcc	.+10     	; 0x2ce0 <VL53L0X_SetGpioConfig+0xf2>
    2cd6:	22 23       	and	r18, r18
    2cd8:	61 f0       	breq	.+24     	; 0x2cf2 <VL53L0X_SetGpioConfig+0x104>
    2cda:	21 30       	cpi	r18, 0x01	; 1
    2cdc:	59 f1       	breq	.+86     	; 0x2d34 <VL53L0X_SetGpioConfig+0x146>
    2cde:	0f c0       	rjmp	.+30     	; 0x2cfe <VL53L0X_SetGpioConfig+0x110>
    2ce0:	23 30       	cpi	r18, 0x03	; 3
    2ce2:	51 f1       	breq	.+84     	; 0x2d38 <VL53L0X_SetGpioConfig+0x14a>
    2ce4:	24 30       	cpi	r18, 0x04	; 4
    2ce6:	19 f0       	breq	.+6      	; 0x2cee <VL53L0X_SetGpioConfig+0x100>
    2ce8:	0a c0       	rjmp	.+20     	; 0x2cfe <VL53L0X_SetGpioConfig+0x110>
    2cea:	42 e0       	ldi	r20, 0x02	; 2
    2cec:	03 c0       	rjmp	.+6      	; 0x2cf4 <VL53L0X_SetGpioConfig+0x106>
    2cee:	44 e0       	ldi	r20, 0x04	; 4
    2cf0:	01 c0       	rjmp	.+2      	; 0x2cf4 <VL53L0X_SetGpioConfig+0x106>
    2cf2:	40 e0       	ldi	r20, 0x00	; 0
    2cf4:	6a e0       	ldi	r22, 0x0A	; 10
    2cf6:	ce 01       	movw	r24, r28
    2cf8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2cfc:	01 c0       	rjmp	.+2      	; 0x2d00 <VL53L0X_SetGpioConfig+0x112>
    2cfe:	85 ef       	ldi	r24, 0xF5	; 245
    2d00:	81 11       	cpse	r24, r1
    2d02:	1c c0       	rjmp	.+56     	; 0x2d3c <VL53L0X_SetGpioConfig+0x14e>
    2d04:	00 23       	and	r16, r16
    2d06:	11 f0       	breq	.+4      	; 0x2d0c <VL53L0X_SetGpioConfig+0x11e>
    2d08:	20 e1       	ldi	r18, 0x10	; 16
    2d0a:	01 c0       	rjmp	.+2      	; 0x2d0e <VL53L0X_SetGpioConfig+0x120>
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	4f ee       	ldi	r20, 0xEF	; 239
    2d10:	64 e8       	ldi	r22, 0x84	; 132
    2d12:	ce 01       	movw	r24, r28
    2d14:	0e 94 1b 32 	call	0x6436	; 0x6436 <VL53L0X_UpdateByte>
    2d18:	81 11       	cpse	r24, r1
    2d1a:	10 c0       	rjmp	.+32     	; 0x2d3c <VL53L0X_SetGpioConfig+0x14e>
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	e2 53       	subi	r30, 0x32	; 50
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	10 83       	st	Z, r17
    2d24:	40 e0       	ldi	r20, 0x00	; 0
    2d26:	50 e0       	ldi	r21, 0x00	; 0
    2d28:	ba 01       	movw	r22, r20
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	0d df       	rcall	.-486    	; 0x2b48 <VL53L0X_ClearInterruptMask>
    2d2e:	06 c0       	rjmp	.+12     	; 0x2d3c <VL53L0X_SetGpioConfig+0x14e>
    2d30:	86 ef       	ldi	r24, 0xF6	; 246
    2d32:	04 c0       	rjmp	.+8      	; 0x2d3c <VL53L0X_SetGpioConfig+0x14e>
    2d34:	41 e0       	ldi	r20, 0x01	; 1
    2d36:	de cf       	rjmp	.-68     	; 0x2cf4 <VL53L0X_SetGpioConfig+0x106>
    2d38:	43 e0       	ldi	r20, 0x03	; 3
    2d3a:	dc cf       	rjmp	.-72     	; 0x2cf4 <VL53L0X_SetGpioConfig+0x106>
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	0f 91       	pop	r16
    2d44:	08 95       	ret

00002d46 <VL53L0X_StaticInit>:
    2d46:	ef 92       	push	r14
    2d48:	ff 92       	push	r15
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	c7 54       	subi	r28, 0x47	; 71
    2d58:	d1 09       	sbc	r29, r1
    2d5a:	0f b6       	in	r0, 0x3f	; 63
    2d5c:	f8 94       	cli
    2d5e:	de bf       	out	0x3e, r29	; 62
    2d60:	0f be       	out	0x3f, r0	; 63
    2d62:	cd bf       	out	0x3d, r28	; 61
    2d64:	7c 01       	movw	r14, r24
    2d66:	fe 01       	movw	r30, r28
    2d68:	31 96       	adiw	r30, 0x01	; 1
    2d6a:	8a e3       	ldi	r24, 0x3A	; 58
    2d6c:	df 01       	movw	r26, r30
    2d6e:	1d 92       	st	X+, r1
    2d70:	8a 95       	dec	r24
    2d72:	e9 f7       	brne	.-6      	; 0x2d6e <VL53L0X_StaticInit+0x28>
    2d74:	1c ae       	std	Y+60, r1	; 0x3c
    2d76:	1b ae       	std	Y+59, r1	; 0x3b
    2d78:	1d ae       	std	Y+61, r1	; 0x3d
    2d7a:	1e ae       	std	Y+62, r1	; 0x3e
    2d7c:	23 96       	adiw	r28, 0x03	; 3
    2d7e:	1c ae       	std	Y+60, r1	; 0x3c
    2d80:	1d ae       	std	Y+61, r1	; 0x3d
    2d82:	1e ae       	std	Y+62, r1	; 0x3e
    2d84:	1f ae       	std	Y+63, r1	; 0x3f
    2d86:	23 97       	sbiw	r28, 0x03	; 3
    2d88:	61 e0       	ldi	r22, 0x01	; 1
    2d8a:	c7 01       	movw	r24, r14
    2d8c:	0e 94 73 21 	call	0x42e6	; 0x42e6 <VL53L0X_get_info_from_device>
    2d90:	f7 01       	movw	r30, r14
    2d92:	ed 5f       	subi	r30, 0xFD	; 253
    2d94:	fe 4f       	sbci	r31, 0xFE	; 254
    2d96:	20 81       	ld	r18, Z
    2d98:	22 30       	cpi	r18, 0x02	; 2
    2d9a:	a0 f4       	brcc	.+40     	; 0x2dc4 <VL53L0X_StaticInit+0x7e>
    2d9c:	31 97       	sbiw	r30, 0x01	; 1
    2d9e:	40 81       	ld	r20, Z
    2da0:	50 e0       	ldi	r21, 0x00	; 0
    2da2:	60 e0       	ldi	r22, 0x00	; 0
    2da4:	70 e0       	ldi	r23, 0x00	; 0
    2da6:	21 30       	cpi	r18, 0x01	; 1
    2da8:	31 f4       	brne	.+12     	; 0x2db6 <VL53L0X_StaticInit+0x70>
    2daa:	41 32       	cpi	r20, 0x21	; 33
    2dac:	51 05       	cpc	r21, r1
    2dae:	61 05       	cpc	r22, r1
    2db0:	71 05       	cpc	r23, r1
    2db2:	40 f4       	brcc	.+16     	; 0x2dc4 <VL53L0X_StaticInit+0x7e>
    2db4:	10 c0       	rjmp	.+32     	; 0x2dd6 <VL53L0X_StaticInit+0x90>
    2db6:	21 11       	cpse	r18, r1
    2db8:	0e c0       	rjmp	.+28     	; 0x2dd6 <VL53L0X_StaticInit+0x90>
    2dba:	4d 30       	cpi	r20, 0x0D	; 13
    2dbc:	51 05       	cpc	r21, r1
    2dbe:	61 05       	cpc	r22, r1
    2dc0:	71 05       	cpc	r23, r1
    2dc2:	48 f0       	brcs	.+18     	; 0x2dd6 <VL53L0X_StaticInit+0x90>
    2dc4:	ae 01       	movw	r20, r28
    2dc6:	42 5c       	subi	r20, 0xC2	; 194
    2dc8:	5f 4f       	sbci	r21, 0xFF	; 255
    2dca:	be 01       	movw	r22, r28
    2dcc:	61 5c       	subi	r22, 0xC1	; 193
    2dce:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd0:	c7 01       	movw	r24, r14
    2dd2:	3e d7       	rcall	.+3708   	; 0x3c50 <VL53L0X_perform_ref_spad_management>
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <VL53L0X_StaticInit+0x94>
    2dd6:	c7 01       	movw	r24, r14
    2dd8:	b8 d4       	rcall	.+2416   	; 0x374a <VL53L0X_set_reference_spads>
    2dda:	81 11       	cpse	r24, r1
    2ddc:	26 c0       	rjmp	.+76     	; 0x2e2a <VL53L0X_StaticInit+0xe4>
    2dde:	f7 01       	movw	r30, r14
    2de0:	e8 5c       	subi	r30, 0xC8	; 200
    2de2:	fe 4f       	sbci	r31, 0xFE	; 254
    2de4:	80 81       	ld	r24, Z
    2de6:	81 11       	cpse	r24, r1
    2de8:	be c0       	rjmp	.+380    	; 0x2f66 <VL53L0X_StaticInit+0x220>
    2dea:	32 97       	sbiw	r30, 0x02	; 2
    2dec:	60 81       	ld	r22, Z
    2dee:	71 81       	ldd	r23, Z+1	; 0x01
    2df0:	bc c0       	rjmp	.+376    	; 0x2f6a <VL53L0X_StaticInit+0x224>
    2df2:	00 e0       	ldi	r16, 0x00	; 0
    2df4:	24 e0       	ldi	r18, 0x04	; 4
    2df6:	40 e0       	ldi	r20, 0x00	; 0
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	c7 01       	movw	r24, r14
    2dfc:	f8 de       	rcall	.-528    	; 0x2bee <VL53L0X_SetGpioConfig>
    2dfe:	81 11       	cpse	r24, r1
    2e00:	6c c0       	rjmp	.+216    	; 0x2eda <VL53L0X_StaticInit+0x194>
    2e02:	41 e0       	ldi	r20, 0x01	; 1
    2e04:	6f ef       	ldi	r22, 0xFF	; 255
    2e06:	c7 01       	movw	r24, r14
    2e08:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2e0c:	18 2f       	mov	r17, r24
    2e0e:	ae 01       	movw	r20, r28
    2e10:	45 5c       	subi	r20, 0xC5	; 197
    2e12:	5f 4f       	sbci	r21, 0xFF	; 255
    2e14:	64 e8       	ldi	r22, 0x84	; 132
    2e16:	c7 01       	movw	r24, r14
    2e18:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    2e1c:	18 2b       	or	r17, r24
    2e1e:	40 e0       	ldi	r20, 0x00	; 0
    2e20:	6f ef       	ldi	r22, 0xFF	; 255
    2e22:	c7 01       	movw	r24, r14
    2e24:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    2e28:	81 2b       	or	r24, r17
    2e2a:	81 11       	cpse	r24, r1
    2e2c:	a5 c0       	rjmp	.+330    	; 0x2f78 <VL53L0X_StaticInit+0x232>
    2e2e:	f7 01       	movw	r30, r14
    2e30:	e8 53       	subi	r30, 0x38	; 56
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e36:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e38:	82 95       	swap	r24
    2e3a:	92 95       	swap	r25
    2e3c:	90 7f       	andi	r25, 0xF0	; 240
    2e3e:	98 27       	eor	r25, r24
    2e40:	80 7f       	andi	r24, 0xF0	; 240
    2e42:	98 27       	eor	r25, r24
    2e44:	a0 e0       	ldi	r26, 0x00	; 0
    2e46:	b0 e0       	ldi	r27, 0x00	; 0
    2e48:	80 83       	st	Z, r24
    2e4a:	91 83       	std	Z+1, r25	; 0x01
    2e4c:	a2 83       	std	Z+2, r26	; 0x02
    2e4e:	b3 83       	std	Z+3, r27	; 0x03
    2e50:	be 01       	movw	r22, r28
    2e52:	6f 5f       	subi	r22, 0xFF	; 255
    2e54:	7f 4f       	sbci	r23, 0xFF	; 255
    2e56:	c7 01       	movw	r24, r14
    2e58:	41 da       	rcall	.-2942   	; 0x22dc <VL53L0X_GetDeviceParameters>
    2e5a:	81 11       	cpse	r24, r1
    2e5c:	29 c0       	rjmp	.+82     	; 0x2eb0 <VL53L0X_StaticInit+0x16a>
    2e5e:	be 01       	movw	r22, r28
    2e60:	63 5c       	subi	r22, 0xC3	; 195
    2e62:	7f 4f       	sbci	r23, 0xFF	; 255
    2e64:	c7 01       	movw	r24, r14
    2e66:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <VL53L0X_GetFractionEnable>
    2e6a:	81 11       	cpse	r24, r1
    2e6c:	21 c0       	rjmp	.+66     	; 0x2eb0 <VL53L0X_StaticInit+0x16a>
    2e6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e70:	f7 01       	movw	r30, r14
    2e72:	e2 5e       	subi	r30, 0xE2	; 226
    2e74:	fe 4f       	sbci	r31, 0xFE	; 254
    2e76:	80 83       	st	Z, r24
    2e78:	8a e3       	ldi	r24, 0x3A	; 58
    2e7a:	fe 01       	movw	r30, r28
    2e7c:	31 96       	adiw	r30, 0x01	; 1
    2e7e:	d7 01       	movw	r26, r14
    2e80:	50 96       	adiw	r26, 0x10	; 16
    2e82:	01 90       	ld	r0, Z+
    2e84:	0d 92       	st	X+, r0
    2e86:	8a 95       	dec	r24
    2e88:	e1 f7       	brne	.-8      	; 0x2e82 <VL53L0X_StaticInit+0x13c>
    2e8a:	ae 01       	movw	r20, r28
    2e8c:	43 5c       	subi	r20, 0xC3	; 195
    2e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e90:	61 e0       	ldi	r22, 0x01	; 1
    2e92:	c7 01       	movw	r24, r14
    2e94:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    2e98:	81 11       	cpse	r24, r1
    2e9a:	71 c0       	rjmp	.+226    	; 0x2f7e <VL53L0X_StaticInit+0x238>
    2e9c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e9e:	f7 01       	movw	r30, r14
    2ea0:	e3 5e       	subi	r30, 0xE3	; 227
    2ea2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea4:	80 83       	st	Z, r24
    2ea6:	40 e0       	ldi	r20, 0x00	; 0
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	c7 01       	movw	r24, r14
    2eac:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <VL53L0X_SetSequenceStepEnable>
    2eb0:	81 11       	cpse	r24, r1
    2eb2:	65 c0       	rjmp	.+202    	; 0x2f7e <VL53L0X_StaticInit+0x238>
    2eb4:	40 e0       	ldi	r20, 0x00	; 0
    2eb6:	62 e0       	ldi	r22, 0x02	; 2
    2eb8:	c7 01       	movw	r24, r14
    2eba:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <VL53L0X_SetSequenceStepEnable>
    2ebe:	81 11       	cpse	r24, r1
    2ec0:	1c c0       	rjmp	.+56     	; 0x2efa <VL53L0X_StaticInit+0x1b4>
    2ec2:	83 e0       	ldi	r24, 0x03	; 3
    2ec4:	f7 01       	movw	r30, r14
    2ec6:	e1 5e       	subi	r30, 0xE1	; 225
    2ec8:	fe 4f       	sbci	r31, 0xFE	; 254
    2eca:	80 83       	st	Z, r24
    2ecc:	ae 01       	movw	r20, r28
    2ece:	4d 5b       	subi	r20, 0xBD	; 189
    2ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	c7 01       	movw	r24, r14
    2ed6:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <VL53L0X_get_vcsel_pulse_period>
    2eda:	81 11       	cpse	r24, r1
    2edc:	1e c0       	rjmp	.+60     	; 0x2f1a <VL53L0X_StaticInit+0x1d4>
    2ede:	24 96       	adiw	r28, 0x04	; 4
    2ee0:	8f ad       	ldd	r24, Y+63	; 0x3f
    2ee2:	24 97       	sbiw	r28, 0x04	; 4
    2ee4:	f7 01       	movw	r30, r14
    2ee6:	e8 52       	subi	r30, 0x28	; 40
    2ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eea:	80 83       	st	Z, r24
    2eec:	ae 01       	movw	r20, r28
    2eee:	4d 5b       	subi	r20, 0xBD	; 189
    2ef0:	5f 4f       	sbci	r21, 0xFF	; 255
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	c7 01       	movw	r24, r14
    2ef6:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <VL53L0X_get_vcsel_pulse_period>
    2efa:	81 11       	cpse	r24, r1
    2efc:	24 c0       	rjmp	.+72     	; 0x2f46 <VL53L0X_StaticInit+0x200>
    2efe:	24 96       	adiw	r28, 0x04	; 4
    2f00:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f02:	24 97       	sbiw	r28, 0x04	; 4
    2f04:	f7 01       	movw	r30, r14
    2f06:	ed 52       	subi	r30, 0x2D	; 45
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 83       	st	Z, r24
    2f0c:	ae 01       	movw	r20, r28
    2f0e:	4c 5b       	subi	r20, 0xBC	; 188
    2f10:	5f 4f       	sbci	r21, 0xFF	; 255
    2f12:	63 e0       	ldi	r22, 0x03	; 3
    2f14:	c7 01       	movw	r24, r14
    2f16:	0e 94 d6 25 	call	0x4bac	; 0x4bac <get_sequence_step_timeout>
    2f1a:	81 11       	cpse	r24, r1
    2f1c:	30 c0       	rjmp	.+96     	; 0x2f7e <VL53L0X_StaticInit+0x238>
    2f1e:	28 96       	adiw	r28, 0x08	; 8
    2f20:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f22:	9d ad       	ldd	r25, Y+61	; 0x3d
    2f24:	ae ad       	ldd	r26, Y+62	; 0x3e
    2f26:	bf ad       	ldd	r27, Y+63	; 0x3f
    2f28:	28 97       	sbiw	r28, 0x08	; 8
    2f2a:	f7 01       	movw	r30, r14
    2f2c:	ec 52       	subi	r30, 0x2C	; 44
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 83       	st	Z, r24
    2f32:	91 83       	std	Z+1, r25	; 0x01
    2f34:	a2 83       	std	Z+2, r26	; 0x02
    2f36:	b3 83       	std	Z+3, r27	; 0x03
    2f38:	ae 01       	movw	r20, r28
    2f3a:	4c 5b       	subi	r20, 0xBC	; 188
    2f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3e:	64 e0       	ldi	r22, 0x04	; 4
    2f40:	c7 01       	movw	r24, r14
    2f42:	0e 94 d6 25 	call	0x4bac	; 0x4bac <get_sequence_step_timeout>
    2f46:	81 11       	cpse	r24, r1
    2f48:	1a c0       	rjmp	.+52     	; 0x2f7e <VL53L0X_StaticInit+0x238>
    2f4a:	f7 01       	movw	r30, r14
    2f4c:	e1 53       	subi	r30, 0x31	; 49
    2f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f50:	28 96       	adiw	r28, 0x08	; 8
    2f52:	4c ad       	ldd	r20, Y+60	; 0x3c
    2f54:	5d ad       	ldd	r21, Y+61	; 0x3d
    2f56:	6e ad       	ldd	r22, Y+62	; 0x3e
    2f58:	7f ad       	ldd	r23, Y+63	; 0x3f
    2f5a:	28 97       	sbiw	r28, 0x08	; 8
    2f5c:	40 83       	st	Z, r20
    2f5e:	51 83       	std	Z+1, r21	; 0x01
    2f60:	62 83       	std	Z+2, r22	; 0x02
    2f62:	73 83       	std	Z+3, r23	; 0x03
    2f64:	0c c0       	rjmp	.+24     	; 0x2f7e <VL53L0X_StaticInit+0x238>
    2f66:	66 eb       	ldi	r22, 0xB6	; 182
    2f68:	72 e0       	ldi	r23, 0x02	; 2
    2f6a:	c7 01       	movw	r24, r14
    2f6c:	0e 94 a6 29 	call	0x534c	; 0x534c <VL53L0X_load_tuning_settings>
    2f70:	88 23       	and	r24, r24
    2f72:	09 f4       	brne	.+2      	; 0x2f76 <VL53L0X_StaticInit+0x230>
    2f74:	3e cf       	rjmp	.-388    	; 0x2df2 <VL53L0X_StaticInit+0xac>
    2f76:	71 cf       	rjmp	.-286    	; 0x2e5a <VL53L0X_StaticInit+0x114>
    2f78:	88 23       	and	r24, r24
    2f7a:	09 f4       	brne	.+2      	; 0x2f7e <VL53L0X_StaticInit+0x238>
    2f7c:	86 cf       	rjmp	.-244    	; 0x2e8a <VL53L0X_StaticInit+0x144>
    2f7e:	c9 5b       	subi	r28, 0xB9	; 185
    2f80:	df 4f       	sbci	r29, 0xFF	; 255
    2f82:	0f b6       	in	r0, 0x3f	; 63
    2f84:	f8 94       	cli
    2f86:	de bf       	out	0x3e, r29	; 62
    2f88:	0f be       	out	0x3f, r0	; 63
    2f8a:	cd bf       	out	0x3d, r28	; 61
    2f8c:	df 91       	pop	r29
    2f8e:	cf 91       	pop	r28
    2f90:	1f 91       	pop	r17
    2f92:	0f 91       	pop	r16
    2f94:	ff 90       	pop	r15
    2f96:	ef 90       	pop	r14
    2f98:	08 95       	ret

00002f9a <VL53L0X_GetInterruptMaskStatus>:
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
    2f9e:	cf 93       	push	r28
    2fa0:	df 93       	push	r29
    2fa2:	1f 92       	push	r1
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	8b 01       	movw	r16, r22
    2faa:	ae 01       	movw	r20, r28
    2fac:	4f 5f       	subi	r20, 0xFF	; 255
    2fae:	5f 4f       	sbci	r21, 0xFF	; 255
    2fb0:	63 e1       	ldi	r22, 0x13	; 19
    2fb2:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    2fb6:	99 81       	ldd	r25, Y+1	; 0x01
    2fb8:	49 2f       	mov	r20, r25
    2fba:	47 70       	andi	r20, 0x07	; 7
    2fbc:	50 e0       	ldi	r21, 0x00	; 0
    2fbe:	60 e0       	ldi	r22, 0x00	; 0
    2fc0:	70 e0       	ldi	r23, 0x00	; 0
    2fc2:	f8 01       	movw	r30, r16
    2fc4:	40 83       	st	Z, r20
    2fc6:	51 83       	std	Z+1, r21	; 0x01
    2fc8:	62 83       	std	Z+2, r22	; 0x02
    2fca:	73 83       	std	Z+3, r23	; 0x03
    2fcc:	98 71       	andi	r25, 0x18	; 24
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <VL53L0X_GetInterruptMaskStatus+0x38>
    2fd0:	8a ef       	ldi	r24, 0xFA	; 250
    2fd2:	0f 90       	pop	r0
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	08 95       	ret

00002fde <VL53L0X_GetMeasurementDataReady>:
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	00 d0       	rcall	.+0      	; 0x2fe8 <VL53L0X_GetMeasurementDataReady+0xa>
    2fe8:	00 d0       	rcall	.+0      	; 0x2fea <VL53L0X_GetMeasurementDataReady+0xc>
    2fea:	1f 92       	push	r1
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
    2ff0:	8b 01       	movw	r16, r22
    2ff2:	fc 01       	movw	r30, r24
    2ff4:	e2 53       	subi	r30, 0x32	; 50
    2ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff8:	20 81       	ld	r18, Z
    2ffa:	24 30       	cpi	r18, 0x04	; 4
    2ffc:	a1 f4       	brne	.+40     	; 0x3026 <VL53L0X_GetMeasurementDataReady+0x48>
    2ffe:	be 01       	movw	r22, r28
    3000:	6e 5f       	subi	r22, 0xFE	; 254
    3002:	7f 4f       	sbci	r23, 0xFF	; 255
    3004:	ca df       	rcall	.-108    	; 0x2f9a <VL53L0X_GetInterruptMaskStatus>
    3006:	4a 81       	ldd	r20, Y+2	; 0x02
    3008:	5b 81       	ldd	r21, Y+3	; 0x03
    300a:	6c 81       	ldd	r22, Y+4	; 0x04
    300c:	7d 81       	ldd	r23, Y+5	; 0x05
    300e:	44 30       	cpi	r20, 0x04	; 4
    3010:	51 05       	cpc	r21, r1
    3012:	61 05       	cpc	r22, r1
    3014:	71 05       	cpc	r23, r1
    3016:	21 f4       	brne	.+8      	; 0x3020 <VL53L0X_GetMeasurementDataReady+0x42>
    3018:	91 e0       	ldi	r25, 0x01	; 1
    301a:	f8 01       	movw	r30, r16
    301c:	90 83       	st	Z, r25
    301e:	14 c0       	rjmp	.+40     	; 0x3048 <VL53L0X_GetMeasurementDataReady+0x6a>
    3020:	f8 01       	movw	r30, r16
    3022:	10 82       	st	Z, r1
    3024:	11 c0       	rjmp	.+34     	; 0x3048 <VL53L0X_GetMeasurementDataReady+0x6a>
    3026:	ae 01       	movw	r20, r28
    3028:	4f 5f       	subi	r20, 0xFF	; 255
    302a:	5f 4f       	sbci	r21, 0xFF	; 255
    302c:	64 e1       	ldi	r22, 0x14	; 20
    302e:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    3032:	81 11       	cpse	r24, r1
    3034:	09 c0       	rjmp	.+18     	; 0x3048 <VL53L0X_GetMeasurementDataReady+0x6a>
    3036:	99 81       	ldd	r25, Y+1	; 0x01
    3038:	90 ff       	sbrs	r25, 0
    303a:	04 c0       	rjmp	.+8      	; 0x3044 <VL53L0X_GetMeasurementDataReady+0x66>
    303c:	91 e0       	ldi	r25, 0x01	; 1
    303e:	f8 01       	movw	r30, r16
    3040:	90 83       	st	Z, r25
    3042:	02 c0       	rjmp	.+4      	; 0x3048 <VL53L0X_GetMeasurementDataReady+0x6a>
    3044:	f8 01       	movw	r30, r16
    3046:	10 82       	st	Z, r1
    3048:	0f 90       	pop	r0
    304a:	0f 90       	pop	r0
    304c:	0f 90       	pop	r0
    304e:	0f 90       	pop	r0
    3050:	0f 90       	pop	r0
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	1f 91       	pop	r17
    3058:	0f 91       	pop	r16
    305a:	08 95       	ret

0000305c <VL53L0X_SetReferenceSpads>:
    305c:	76 c3       	rjmp	.+1772   	; 0x374a <VL53L0X_set_reference_spads>
    305e:	08 95       	ret

00003060 <VL53L0X_GetReferenceSpads>:
    3060:	1c c4       	rjmp	.+2104   	; 0x389a <VL53L0X_get_reference_spads>
    3062:	08 95       	ret

00003064 <VL53L0X_set_offset_calibration_data_micro_meter>:
					CorrectedOffsetMicroMeters);
		}
	}

	return Status;
}
    3064:	cf 93       	push	r28
    3066:	df 93       	push	r29
    3068:	ec 01       	movw	r28, r24
    306a:	41 15       	cp	r20, r1
    306c:	20 e3       	ldi	r18, 0x30	; 48
    306e:	52 07       	cpc	r21, r18
    3070:	28 ef       	ldi	r18, 0xF8	; 248
    3072:	62 07       	cpc	r22, r18
    3074:	2f ef       	ldi	r18, 0xFF	; 255
    3076:	72 07       	cpc	r23, r18
    3078:	24 f4       	brge	.+8      	; 0x3082 <VL53L0X_set_offset_calibration_data_micro_meter+0x1e>
    307a:	40 e0       	ldi	r20, 0x00	; 0
    307c:	50 e3       	ldi	r21, 0x30	; 48
    307e:	68 ef       	ldi	r22, 0xF8	; 248
    3080:	7f ef       	ldi	r23, 0xFF	; 255
    3082:	cb 01       	movw	r24, r22
    3084:	ba 01       	movw	r22, r20
    3086:	69 31       	cpi	r22, 0x19	; 25
    3088:	2c ec       	ldi	r18, 0xCC	; 204
    308a:	72 07       	cpc	r23, r18
    308c:	27 e0       	ldi	r18, 0x07	; 7
    308e:	82 07       	cpc	r24, r18
    3090:	91 05       	cpc	r25, r1
    3092:	24 f0       	brlt	.+8      	; 0x309c <VL53L0X_set_offset_calibration_data_micro_meter+0x38>
    3094:	68 e1       	ldi	r22, 0x18	; 24
    3096:	7c ec       	ldi	r23, 0xCC	; 204
    3098:	87 e0       	ldi	r24, 0x07	; 7
    309a:	90 e0       	ldi	r25, 0x00	; 0
    309c:	99 23       	and	r25, r25
    309e:	3c f0       	brlt	.+14     	; 0x30ae <VL53L0X_set_offset_calibration_data_micro_meter+0x4a>
    30a0:	2a ef       	ldi	r18, 0xFA	; 250
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	50 e0       	ldi	r21, 0x00	; 0
    30a8:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divmodsi4>
    30ac:	09 c0       	rjmp	.+18     	; 0x30c0 <VL53L0X_set_offset_calibration_data_micro_meter+0x5c>
    30ae:	2a ef       	ldi	r18, 0xFA	; 250
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	40 e0       	ldi	r20, 0x00	; 0
    30b4:	50 e0       	ldi	r21, 0x00	; 0
    30b6:	0e 94 ee 32 	call	0x65dc	; 0x65dc <__divmodsi4>
    30ba:	30 5f       	subi	r19, 0xF0	; 240
    30bc:	4f 4f       	sbci	r20, 0xFF	; 255
    30be:	5f 4f       	sbci	r21, 0xFF	; 255
    30c0:	a9 01       	movw	r20, r18
    30c2:	68 e2       	ldi	r22, 0x28	; 40
    30c4:	ce 01       	movw	r24, r28
    30c6:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    30ca:	df 91       	pop	r29
    30cc:	cf 91       	pop	r28
    30ce:	08 95       	ret

000030d0 <VL53L0X_get_offset_calibration_data_micro_meter>:
    30d0:	0f 93       	push	r16
    30d2:	1f 93       	push	r17
    30d4:	cf 93       	push	r28
    30d6:	df 93       	push	r29
    30d8:	00 d0       	rcall	.+0      	; 0x30da <VL53L0X_get_offset_calibration_data_micro_meter+0xa>
    30da:	cd b7       	in	r28, 0x3d	; 61
    30dc:	de b7       	in	r29, 0x3e	; 62
    30de:	8b 01       	movw	r16, r22
    30e0:	ae 01       	movw	r20, r28
    30e2:	4f 5f       	subi	r20, 0xFF	; 255
    30e4:	5f 4f       	sbci	r21, 0xFF	; 255
    30e6:	68 e2       	ldi	r22, 0x28	; 40
    30e8:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    30ec:	81 11       	cpse	r24, r1
    30ee:	27 c0       	rjmp	.+78     	; 0x313e <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    30f0:	29 81       	ldd	r18, Y+1	; 0x01
    30f2:	3a 81       	ldd	r19, Y+2	; 0x02
    30f4:	3f 70       	andi	r19, 0x0F	; 15
    30f6:	21 15       	cp	r18, r1
    30f8:	98 e0       	ldi	r25, 0x08	; 8
    30fa:	39 07       	cpc	r19, r25
    30fc:	88 f0       	brcs	.+34     	; 0x3120 <VL53L0X_get_offset_calibration_data_micro_meter+0x50>
    30fe:	30 51       	subi	r19, 0x10	; 16
    3100:	9a ef       	ldi	r25, 0xFA	; 250
    3102:	92 9f       	mul	r25, r18
    3104:	a0 01       	movw	r20, r0
    3106:	93 9f       	mul	r25, r19
    3108:	50 0d       	add	r21, r0
    310a:	11 24       	eor	r1, r1
    310c:	05 2e       	mov	r0, r21
    310e:	00 0c       	add	r0, r0
    3110:	66 0b       	sbc	r22, r22
    3112:	77 0b       	sbc	r23, r23
    3114:	f8 01       	movw	r30, r16
    3116:	40 83       	st	Z, r20
    3118:	51 83       	std	Z+1, r21	; 0x01
    311a:	62 83       	std	Z+2, r22	; 0x02
    311c:	73 83       	std	Z+3, r23	; 0x03
    311e:	0f c0       	rjmp	.+30     	; 0x313e <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    3120:	9a ef       	ldi	r25, 0xFA	; 250
    3122:	92 9f       	mul	r25, r18
    3124:	a0 01       	movw	r20, r0
    3126:	93 9f       	mul	r25, r19
    3128:	50 0d       	add	r21, r0
    312a:	11 24       	eor	r1, r1
    312c:	05 2e       	mov	r0, r21
    312e:	00 0c       	add	r0, r0
    3130:	66 0b       	sbc	r22, r22
    3132:	77 0b       	sbc	r23, r23
    3134:	f8 01       	movw	r30, r16
    3136:	40 83       	st	Z, r20
    3138:	51 83       	std	Z+1, r21	; 0x01
    313a:	62 83       	std	Z+2, r22	; 0x02
    313c:	73 83       	std	Z+3, r23	; 0x03
    313e:	0f 90       	pop	r0
    3140:	0f 90       	pop	r0
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	1f 91       	pop	r17
    3148:	0f 91       	pop	r16
    314a:	08 95       	ret

0000314c <get_next_good_spad>:

void get_next_good_spad(u8 goodSpadArray[], u32 size,
			u32 curr, s32 *next)
{
    314c:	7f 92       	push	r7
    314e:	8f 92       	push	r8
    3150:	9f 92       	push	r9
    3152:	af 92       	push	r10
    3154:	bf 92       	push	r11
    3156:	cf 92       	push	r12
    3158:	df 92       	push	r13
    315a:	ef 92       	push	r14
    315c:	ff 92       	push	r15
    315e:	0f 93       	push	r16
    3160:	1f 93       	push	r17
    3162:	cf 93       	push	r28
    3164:	df 93       	push	r29
    3166:	e7 01       	movw	r28, r14
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
    3168:	cc 24       	eor	r12, r12
    316a:	ca 94       	dec	r12
    316c:	dc 2c       	mov	r13, r12
    316e:	76 01       	movw	r14, r12
    3170:	c8 82       	st	Y, r12
    3172:	d9 82       	std	Y+1, r13	; 0x01
    3174:	ea 82       	std	Y+2, r14	; 0x02
    3176:	fb 82       	std	Y+3, r15	; 0x03

	startIndex = curr / cSpadsPerByte;
    3178:	68 01       	movw	r12, r16
    317a:	79 01       	movw	r14, r18
    317c:	68 94       	set
    317e:	12 f8       	bld	r1, 2
    3180:	f6 94       	lsr	r15
    3182:	e7 94       	ror	r14
    3184:	d7 94       	ror	r13
    3186:	c7 94       	ror	r12
    3188:	16 94       	lsr	r1
    318a:	d1 f7       	brne	.-12     	; 0x3180 <get_next_good_spad+0x34>
	fineOffset = curr % cSpadsPerByte;
    318c:	48 01       	movw	r8, r16
    318e:	59 01       	movw	r10, r18
    3190:	e7 e0       	ldi	r30, 0x07	; 7
    3192:	8e 22       	and	r8, r30
    3194:	99 24       	eor	r9, r9
    3196:	aa 24       	eor	r10, r10
    3198:	bb 24       	eor	r11, r11

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
    319a:	c4 16       	cp	r12, r20
    319c:	d5 06       	cpc	r13, r21
    319e:	e6 06       	cpc	r14, r22
    31a0:	f7 06       	cpc	r15, r23
    31a2:	08 f0       	brcs	.+2      	; 0x31a6 <get_next_good_spad+0x5a>
    31a4:	47 c0       	rjmp	.+142    	; 0x3234 <get_next_good_spad+0xe8>
    31a6:	fc 01       	movw	r30, r24
    31a8:	ec 0d       	add	r30, r12
    31aa:	fd 1d       	adc	r31, r13
    31ac:	d7 01       	movw	r26, r14
    31ae:	c6 01       	movw	r24, r12
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
    31b0:	71 90       	ld	r7, Z+

		if (coarseIndex == startIndex) {
    31b2:	c8 16       	cp	r12, r24
    31b4:	d9 06       	cpc	r13, r25
    31b6:	ea 06       	cpc	r14, r26
    31b8:	fb 06       	cpc	r15, r27
    31ba:	61 f4       	brne	.+24     	; 0x31d4 <get_next_good_spad+0x88>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
    31bc:	27 2d       	mov	r18, r7
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	08 2c       	mov	r0, r8
    31c2:	02 c0       	rjmp	.+4      	; 0x31c8 <get_next_good_spad+0x7c>
    31c4:	35 95       	asr	r19
    31c6:	27 95       	ror	r18
    31c8:	0a 94       	dec	r0
    31ca:	e2 f7       	brpl	.-8      	; 0x31c4 <get_next_good_spad+0x78>
    31cc:	72 2e       	mov	r7, r18
			fineIndex = fineOffset;
    31ce:	95 01       	movw	r18, r10
    31d0:	84 01       	movw	r16, r8
    31d2:	03 c0       	rjmp	.+6      	; 0x31da <get_next_good_spad+0x8e>
	startIndex = curr / cSpadsPerByte;
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
				coarseIndex++) {
		fineIndex = 0;
    31d4:	00 e0       	ldi	r16, 0x00	; 0
    31d6:	10 e0       	ldi	r17, 0x00	; 0
    31d8:	98 01       	movw	r18, r16
			dataByte >>= fineOffset;
			fineIndex = fineOffset;
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
    31da:	70 fe       	sbrs	r7, 0
    31dc:	18 c0       	rjmp	.+48     	; 0x320e <get_next_good_spad+0xc2>
    31de:	02 c0       	rjmp	.+4      	; 0x31e4 <get_next_good_spad+0x98>
    31e0:	70 fe       	sbrs	r7, 0
    31e2:	15 c0       	rjmp	.+42     	; 0x320e <get_next_good_spad+0xc2>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
    31e4:	88 0f       	add	r24, r24
    31e6:	99 1f       	adc	r25, r25
    31e8:	aa 1f       	adc	r26, r26
    31ea:	bb 1f       	adc	r27, r27
    31ec:	88 0f       	add	r24, r24
    31ee:	99 1f       	adc	r25, r25
    31f0:	aa 1f       	adc	r26, r26
    31f2:	bb 1f       	adc	r27, r27
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	aa 1f       	adc	r26, r26
    31fa:	bb 1f       	adc	r27, r27
    31fc:	08 0f       	add	r16, r24
    31fe:	19 1f       	adc	r17, r25
    3200:	2a 1f       	adc	r18, r26
    3202:	3b 1f       	adc	r19, r27
    3204:	08 83       	st	Y, r16
    3206:	19 83       	std	Y+1, r17	; 0x01
    3208:	2a 83       	std	Y+2, r18	; 0x02
    320a:	3b 83       	std	Y+3, r19	; 0x03
    320c:	13 c0       	rjmp	.+38     	; 0x3234 <get_next_good_spad+0xe8>
				break;
			}
			dataByte >>= 1;
    320e:	76 94       	lsr	r7
			fineIndex++;
    3210:	0f 5f       	subi	r16, 0xFF	; 255
    3212:	1f 4f       	sbci	r17, 0xFF	; 255
    3214:	2f 4f       	sbci	r18, 0xFF	; 255
    3216:	3f 4f       	sbci	r19, 0xFF	; 255
			 * spad bit before iterating */
			dataByte >>= fineOffset;
			fineIndex = fineOffset;
		}

		while (fineIndex < cSpadsPerByte) {
    3218:	08 30       	cpi	r16, 0x08	; 8
    321a:	11 05       	cpc	r17, r1
    321c:	21 05       	cpc	r18, r1
    321e:	31 05       	cpc	r19, r1
    3220:	f8 f2       	brcs	.-66     	; 0x31e0 <get_next_good_spad+0x94>

	startIndex = curr / cSpadsPerByte;
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
				coarseIndex++) {
    3222:	01 96       	adiw	r24, 0x01	; 1
    3224:	a1 1d       	adc	r26, r1
    3226:	b1 1d       	adc	r27, r1
	*next = -1;

	startIndex = curr / cSpadsPerByte;
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
    3228:	84 17       	cp	r24, r20
    322a:	95 07       	cpc	r25, r21
    322c:	a6 07       	cpc	r26, r22
    322e:	b7 07       	cpc	r27, r23
    3230:	08 f4       	brcc	.+2      	; 0x3234 <get_next_good_spad+0xe8>
    3232:	be cf       	rjmp	.-132    	; 0x31b0 <get_next_good_spad+0x64>
			}
			dataByte >>= 1;
			fineIndex++;
		}
	}
}
    3234:	df 91       	pop	r29
    3236:	cf 91       	pop	r28
    3238:	1f 91       	pop	r17
    323a:	0f 91       	pop	r16
    323c:	ff 90       	pop	r15
    323e:	ef 90       	pop	r14
    3240:	df 90       	pop	r13
    3242:	cf 90       	pop	r12
    3244:	bf 90       	pop	r11
    3246:	af 90       	pop	r10
    3248:	9f 90       	pop	r9
    324a:	8f 90       	pop	r8
    324c:	7f 90       	pop	r7
    324e:	08 95       	ret

00003250 <is_aperture>:
	 * deriving the quadrant.
	 */
	u32 quadrant;
	u8 isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	68 94       	set
    3256:	15 f8       	bld	r1, 5
    3258:	b6 95       	lsr	r27
    325a:	a7 95       	ror	r26
    325c:	97 95       	ror	r25
    325e:	87 95       	ror	r24
    3260:	16 94       	lsr	r1
    3262:	d1 f7       	brne	.-12     	; 0x3258 <is_aperture+0x8>
    3264:	bc 01       	movw	r22, r24
    3266:	66 0f       	add	r22, r22
    3268:	77 1f       	adc	r23, r23
    326a:	66 0f       	add	r22, r22
    326c:	77 1f       	adc	r23, r23
    326e:	fb 01       	movw	r30, r22
    3270:	e7 55       	subi	r30, 0x57	; 87
    3272:	fc 4f       	sbci	r31, 0xFC	; 252
		isAperture = 0;

	return isAperture;
    3274:	81 e0       	ldi	r24, 0x01	; 1
    3276:	40 81       	ld	r20, Z
    3278:	51 81       	ldd	r21, Z+1	; 0x01
    327a:	62 81       	ldd	r22, Z+2	; 0x02
    327c:	73 81       	ldd	r23, Z+3	; 0x03
    327e:	45 2b       	or	r20, r21
    3280:	46 2b       	or	r20, r22
    3282:	47 2b       	or	r20, r23
    3284:	09 f4       	brne	.+2      	; 0x3288 <is_aperture+0x38>
    3286:	80 e0       	ldi	r24, 0x00	; 0
}
    3288:	08 95       	ret

0000328a <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(u8 spadArray[], u32 size,
	u32 spadIndex)
{
    328a:	cf 92       	push	r12
    328c:	df 92       	push	r13
    328e:	ef 92       	push	r14
    3290:	ff 92       	push	r15
    3292:	0f 93       	push	r16
    3294:	1f 93       	push	r17
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	u32 cSpadsPerByte = 8;
	u32 coarseIndex;
	u32 fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
    3296:	68 01       	movw	r12, r16
    3298:	79 01       	movw	r14, r18
    329a:	68 94       	set
    329c:	12 f8       	bld	r1, 2
    329e:	f6 94       	lsr	r15
    32a0:	e7 94       	ror	r14
    32a2:	d7 94       	ror	r13
    32a4:	c7 94       	ror	r12
    32a6:	16 94       	lsr	r1
    32a8:	d1 f7       	brne	.-12     	; 0x329e <enable_spad_bit+0x14>
	fineIndex = spadIndex % cSpadsPerByte;
    32aa:	07 70       	andi	r16, 0x07	; 7
    32ac:	11 27       	eor	r17, r17
    32ae:	22 27       	eor	r18, r18
    32b0:	33 27       	eor	r19, r19
	if (coarseIndex >= size)
    32b2:	c4 16       	cp	r12, r20
    32b4:	d5 06       	cpc	r13, r21
    32b6:	e6 06       	cpc	r14, r22
    32b8:	f7 06       	cpc	r15, r23
    32ba:	78 f4       	brcc	.+30     	; 0x32da <enable_spad_bit+0x50>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
    32bc:	fc 01       	movw	r30, r24
    32be:	ec 0d       	add	r30, r12
    32c0:	fd 1d       	adc	r31, r13
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <enable_spad_bit+0x42>
    32c8:	88 0f       	add	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	0a 95       	dec	r16
    32ce:	e2 f7       	brpl	.-8      	; 0x32c8 <enable_spad_bit+0x3e>
    32d0:	90 81       	ld	r25, Z
    32d2:	89 2b       	or	r24, r25
    32d4:	80 83       	st	Z, r24


VL53L0X_Error enable_spad_bit(u8 spadArray[], u32 size,
	u32 spadIndex)
{
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	01 c0       	rjmp	.+2      	; 0x32dc <enable_spad_bit+0x52>
	u32 fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
		status = VL53L0X_ERROR_REF_SPAD_INIT;
    32da:	8e ec       	ldi	r24, 0xCE	; 206
	else
		spadArray[coarseIndex] |= (1 << fineIndex);

	return status;
}
    32dc:	1f 91       	pop	r17
    32de:	0f 91       	pop	r16
    32e0:	ff 90       	pop	r15
    32e2:	ef 90       	pop	r14
    32e4:	df 90       	pop	r13
    32e6:	cf 90       	pop	r12
    32e8:	08 95       	ret

000032ea <count_enabled_spads>:

VL53L0X_Error count_enabled_spads(u8 spadArray[],
		u32 byteCount, u32 maxSpads,
		u32 *pTotalSpadsEnabled, u8 *pIsAperture)
{
    32ea:	2f 92       	push	r2
    32ec:	3f 92       	push	r3
    32ee:	4f 92       	push	r4
    32f0:	5f 92       	push	r5
    32f2:	6f 92       	push	r6
    32f4:	7f 92       	push	r7
    32f6:	8f 92       	push	r8
    32f8:	9f 92       	push	r9
    32fa:	af 92       	push	r10
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	2b 97       	sbiw	r28, 0x0b	; 11
    3314:	0f b6       	in	r0, 0x3f	; 63
    3316:	f8 94       	cli
    3318:	de bf       	out	0x3e, r29	; 62
    331a:	0f be       	out	0x3f, r0	; 63
    331c:	cd bf       	out	0x3d, r28	; 61
    331e:	9e 83       	std	Y+6, r25	; 0x06
    3320:	8d 83       	std	Y+5, r24	; 0x05
    3322:	f7 01       	movw	r30, r14
    3324:	d9 86       	std	Y+9, r13	; 0x09
    3326:	c8 86       	std	Y+8, r12	; 0x08

	/* The entire array will not be used for spads, therefore the last
	 * byte and last bit is determined from the max spads value.
	 */

	lastByte = maxSpads / cSpadsPerByte;
    3328:	d9 01       	movw	r26, r18
    332a:	c8 01       	movw	r24, r16
    332c:	68 94       	set
    332e:	12 f8       	bld	r1, 2
    3330:	b6 95       	lsr	r27
    3332:	a7 95       	ror	r26
    3334:	97 95       	ror	r25
    3336:	87 95       	ror	r24
    3338:	16 94       	lsr	r1
    333a:	d1 f7       	brne	.-12     	; 0x3330 <count_enabled_spads+0x46>
    333c:	89 83       	std	Y+1, r24	; 0x01
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	ab 83       	std	Y+3, r26	; 0x03
    3342:	bc 83       	std	Y+4, r27	; 0x04
	lastBit = maxSpads % cSpadsPerByte;
    3344:	28 01       	movw	r4, r16
    3346:	39 01       	movw	r6, r18
    3348:	97 e0       	ldi	r25, 0x07	; 7
    334a:	49 22       	and	r4, r25
    334c:	55 24       	eor	r5, r5
    334e:	66 24       	eor	r6, r6
    3350:	77 24       	eor	r7, r7

	/* Check that the max spads value does not exceed the array bounds. */
	if (lastByte >= byteCount)
    3352:	89 81       	ldd	r24, Y+1	; 0x01
    3354:	9a 81       	ldd	r25, Y+2	; 0x02
    3356:	ab 81       	ldd	r26, Y+3	; 0x03
    3358:	bc 81       	ldd	r27, Y+4	; 0x04
    335a:	84 17       	cp	r24, r20
    335c:	95 07       	cpc	r25, r21
    335e:	a6 07       	cpc	r26, r22
    3360:	b7 07       	cpc	r27, r23
    3362:	18 f0       	brcs	.+6      	; 0x336a <count_enabled_spads+0x80>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
    3364:	9e ec       	ldi	r25, 0xCE	; 206
    3366:	9f 83       	std	Y+7, r25	; 0x07
    3368:	01 c0       	rjmp	.+2      	; 0x336c <count_enabled_spads+0x82>

VL53L0X_Error count_enabled_spads(u8 spadArray[],
		u32 byteCount, u32 maxSpads,
		u32 *pTotalSpadsEnabled, u8 *pIsAperture)
{
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
    336a:	1f 82       	std	Y+7, r1	; 0x07

	/* Check that the max spads value does not exceed the array bounds. */
	if (lastByte >= byteCount)
		status = VL53L0X_ERROR_REF_SPAD_INIT;

	*pTotalSpadsEnabled = 0;
    336c:	10 82       	st	Z, r1
    336e:	11 82       	std	Z+1, r1	; 0x01
    3370:	12 82       	std	Z+2, r1	; 0x02
    3372:	13 82       	std	Z+3, r1	; 0x03

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
    3374:	89 80       	ldd	r8, Y+1	; 0x01
    3376:	9a 80       	ldd	r9, Y+2	; 0x02
    3378:	ab 80       	ldd	r10, Y+3	; 0x03
    337a:	bc 80       	ldd	r11, Y+4	; 0x04
    337c:	a1 e0       	ldi	r26, 0x01	; 1
    337e:	8a 1a       	sub	r8, r26
    3380:	91 08       	sbc	r9, r1
    3382:	a1 08       	sbc	r10, r1
    3384:	b1 08       	sbc	r11, r1
    3386:	2d 80       	ldd	r2, Y+5	; 0x05
    3388:	3e 80       	ldd	r3, Y+6	; 0x06
	u32 lastByte;
	u32 lastBit;
	u32 byteIndex = 0;
	u32 bitIndex = 0;
	u8 tempByte;
	u8 spadTypeIdentified = 0;
    338a:	30 e0       	ldi	r19, 0x00	; 0
		status = VL53L0X_ERROR_REF_SPAD_INIT;

	*pTotalSpadsEnabled = 0;

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
    338c:	c1 2c       	mov	r12, r1
    338e:	d1 2c       	mov	r13, r1
    3390:	76 01       	movw	r14, r12
		for (bitIndex = 0; bitIndex <= cSpadsPerByte; bitIndex++) {
			if ((tempByte & 0x01) == 1) {
				(*pTotalSpadsEnabled)++;

				if (!spadTypeIdentified) {
					*pIsAperture = 1;
    3392:	11 e0       	ldi	r17, 0x01	; 1
    3394:	01 2f       	mov	r16, r17
    3396:	68 85       	ldd	r22, Y+8	; 0x08
    3398:	79 85       	ldd	r23, Y+9	; 0x09

	*pTotalSpadsEnabled = 0;

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
		tempByte = spadArray[byteIndex];
    339a:	d1 01       	movw	r26, r2
    339c:	2d 91       	ld	r18, X+
    339e:	1d 01       	movw	r2, r26

		for (bitIndex = 0; bitIndex <= cSpadsPerByte; bitIndex++) {
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	90 e0       	ldi	r25, 0x00	; 0
    33a4:	dc 01       	movw	r26, r24
    33a6:	fb 87       	std	Y+11, r31	; 0x0b
    33a8:	ea 87       	std	Y+10, r30	; 0x0a
    33aa:	79 87       	std	Y+9, r23	; 0x09
    33ac:	68 87       	std	Y+8, r22	; 0x08
			if ((tempByte & 0x01) == 1) {
    33ae:	20 ff       	sbrs	r18, 0
    33b0:	26 c0       	rjmp	.+76     	; 0x33fe <count_enabled_spads+0x114>
				(*pTotalSpadsEnabled)++;
    33b2:	ea 85       	ldd	r30, Y+10	; 0x0a
    33b4:	fb 85       	ldd	r31, Y+11	; 0x0b
    33b6:	40 81       	ld	r20, Z
    33b8:	51 81       	ldd	r21, Z+1	; 0x01
    33ba:	62 81       	ldd	r22, Z+2	; 0x02
    33bc:	73 81       	ldd	r23, Z+3	; 0x03
    33be:	4f 5f       	subi	r20, 0xFF	; 255
    33c0:	5f 4f       	sbci	r21, 0xFF	; 255
    33c2:	6f 4f       	sbci	r22, 0xFF	; 255
    33c4:	7f 4f       	sbci	r23, 0xFF	; 255
    33c6:	40 83       	st	Z, r20
    33c8:	51 83       	std	Z+1, r21	; 0x01
    33ca:	62 83       	std	Z+2, r22	; 0x02
    33cc:	73 83       	std	Z+3, r23	; 0x03

				if (!spadTypeIdentified) {
    33ce:	31 11       	cpse	r19, r1
    33d0:	16 c0       	rjmp	.+44     	; 0x33fe <count_enabled_spads+0x114>
					*pIsAperture = 1;
    33d2:	e8 85       	ldd	r30, Y+8	; 0x08
    33d4:	f9 85       	ldd	r31, Y+9	; 0x09
    33d6:	10 83       	st	Z, r17
					if ((byteIndex < 2) && (bitIndex < 4))
    33d8:	f2 e0       	ldi	r31, 0x02	; 2
    33da:	cf 16       	cp	r12, r31
    33dc:	d1 04       	cpc	r13, r1
    33de:	e1 04       	cpc	r14, r1
    33e0:	f1 04       	cpc	r15, r1
    33e2:	50 f4       	brcc	.+20     	; 0x33f8 <count_enabled_spads+0x10e>
    33e4:	84 30       	cpi	r24, 0x04	; 4
    33e6:	91 05       	cpc	r25, r1
    33e8:	a1 05       	cpc	r26, r1
    33ea:	b1 05       	cpc	r27, r1
    33ec:	38 f4       	brcc	.+14     	; 0x33fc <count_enabled_spads+0x112>
							*pIsAperture = 0;
    33ee:	e8 85       	ldd	r30, Y+8	; 0x08
    33f0:	f9 85       	ldd	r31, Y+9	; 0x09
    33f2:	10 82       	st	Z, r1
					spadTypeIdentified = 1;
    33f4:	30 2f       	mov	r19, r16
    33f6:	03 c0       	rjmp	.+6      	; 0x33fe <count_enabled_spads+0x114>
    33f8:	30 2f       	mov	r19, r16
    33fa:	01 c0       	rjmp	.+2      	; 0x33fe <count_enabled_spads+0x114>
    33fc:	30 2f       	mov	r19, r16
				}
			}
			tempByte >>= 1;
    33fe:	26 95       	lsr	r18

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
		tempByte = spadArray[byteIndex];

		for (bitIndex = 0; bitIndex <= cSpadsPerByte; bitIndex++) {
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	a1 1d       	adc	r26, r1
    3404:	b1 1d       	adc	r27, r1
    3406:	89 30       	cpi	r24, 0x09	; 9
    3408:	91 05       	cpc	r25, r1
    340a:	a1 05       	cpc	r26, r1
    340c:	b1 05       	cpc	r27, r1
    340e:	79 f6       	brne	.-98     	; 0x33ae <count_enabled_spads+0xc4>
    3410:	ea 85       	ldd	r30, Y+10	; 0x0a
    3412:	fb 85       	ldd	r31, Y+11	; 0x0b
    3414:	68 85       	ldd	r22, Y+8	; 0x08
    3416:	79 85       	ldd	r23, Y+9	; 0x09
		status = VL53L0X_ERROR_REF_SPAD_INIT;

	*pTotalSpadsEnabled = 0;

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
    3418:	4f ef       	ldi	r20, 0xFF	; 255
    341a:	c4 1a       	sub	r12, r20
    341c:	d4 0a       	sbc	r13, r20
    341e:	e4 0a       	sbc	r14, r20
    3420:	f4 0a       	sbc	r15, r20
    3422:	8c 14       	cp	r8, r12
    3424:	9d 04       	cpc	r9, r13
    3426:	ae 04       	cpc	r10, r14
    3428:	bf 04       	cpc	r11, r15
    342a:	08 f0       	brcs	.+2      	; 0x342e <count_enabled_spads+0x144>
    342c:	b6 cf       	rjmp	.-148    	; 0x339a <count_enabled_spads+0xb0>
	}

	/* Count the number of bits enabled in the last byte accounting
	 * for the fact that not all bits in the byte may be used.
	 */
	tempByte = spadArray[lastByte];
    342e:	ad 81       	ldd	r26, Y+5	; 0x05
    3430:	be 81       	ldd	r27, Y+6	; 0x06
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	9a 81       	ldd	r25, Y+2	; 0x02
    3436:	a8 0f       	add	r26, r24
    3438:	b9 1f       	adc	r27, r25
    343a:	2c 91       	ld	r18, X

	for (bitIndex = 0; bitIndex <= lastBit; bitIndex++) {
    343c:	80 e0       	ldi	r24, 0x00	; 0
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	dc 01       	movw	r26, r24
		if ((tempByte & 0x01) == 1)
    3442:	21 70       	andi	r18, 0x01	; 1
    3444:	22 23       	and	r18, r18
    3446:	61 f0       	breq	.+24     	; 0x3460 <count_enabled_spads+0x176>
			(*pTotalSpadsEnabled)++;
    3448:	40 81       	ld	r20, Z
    344a:	51 81       	ldd	r21, Z+1	; 0x01
    344c:	62 81       	ldd	r22, Z+2	; 0x02
    344e:	73 81       	ldd	r23, Z+3	; 0x03
    3450:	4f 5f       	subi	r20, 0xFF	; 255
    3452:	5f 4f       	sbci	r21, 0xFF	; 255
    3454:	6f 4f       	sbci	r22, 0xFF	; 255
    3456:	7f 4f       	sbci	r23, 0xFF	; 255
    3458:	40 83       	st	Z, r20
    345a:	51 83       	std	Z+1, r21	; 0x01
    345c:	62 83       	std	Z+2, r22	; 0x02
    345e:	73 83       	std	Z+3, r23	; 0x03
	/* Count the number of bits enabled in the last byte accounting
	 * for the fact that not all bits in the byte may be used.
	 */
	tempByte = spadArray[lastByte];

	for (bitIndex = 0; bitIndex <= lastBit; bitIndex++) {
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	a1 1d       	adc	r26, r1
    3464:	b1 1d       	adc	r27, r1
    3466:	48 16       	cp	r4, r24
    3468:	59 06       	cpc	r5, r25
    346a:	6a 06       	cpc	r6, r26
    346c:	7b 06       	cpc	r7, r27
    346e:	50 f7       	brcc	.-44     	; 0x3444 <count_enabled_spads+0x15a>
		if ((tempByte & 0x01) == 1)
			(*pTotalSpadsEnabled)++;
	}

	return status;
}
    3470:	8f 81       	ldd	r24, Y+7	; 0x07
    3472:	2b 96       	adiw	r28, 0x0b	; 11
    3474:	0f b6       	in	r0, 0x3f	; 63
    3476:	f8 94       	cli
    3478:	de bf       	out	0x3e, r29	; 62
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	cd bf       	out	0x3d, r28	; 61
    347e:	df 91       	pop	r29
    3480:	cf 91       	pop	r28
    3482:	1f 91       	pop	r17
    3484:	0f 91       	pop	r16
    3486:	ff 90       	pop	r15
    3488:	ef 90       	pop	r14
    348a:	df 90       	pop	r13
    348c:	cf 90       	pop	r12
    348e:	bf 90       	pop	r11
    3490:	af 90       	pop	r10
    3492:	9f 90       	pop	r9
    3494:	8f 90       	pop	r8
    3496:	7f 90       	pop	r7
    3498:	6f 90       	pop	r6
    349a:	5f 90       	pop	r5
    349c:	4f 90       	pop	r4
    349e:	3f 90       	pop	r3
    34a0:	2f 90       	pop	r2
    34a2:	08 95       	ret

000034a4 <set_ref_spad_map>:

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, u8 *refSpadArray)
{
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	ab 01       	movw	r20, r22
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
    34aa:	06 e0       	ldi	r16, 0x06	; 6
    34ac:	10 e0       	ldi	r17, 0x00	; 0
    34ae:	20 e0       	ldi	r18, 0x00	; 0
    34b0:	30 e0       	ldi	r19, 0x00	; 0
    34b2:	60 eb       	ldi	r22, 0xB0	; 176
    34b4:	0e 94 b5 31 	call	0x636a	; 0x636a <VL53L0X_WriteMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
}
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	08 95       	ret

000034be <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, u8 *refSpadArray)
{
    34be:	0f 93       	push	r16
    34c0:	1f 93       	push	r17
    34c2:	ab 01       	movw	r20, r22
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
    34c4:	06 e0       	ldi	r16, 0x06	; 6
    34c6:	10 e0       	ldi	r17, 0x00	; 0
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	60 eb       	ldi	r22, 0xB0	; 176
    34ce:	0e 94 ce 31 	call	0x639c	; 0x639c <VL53L0X_ReadMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
}
    34d2:	1f 91       	pop	r17
    34d4:	0f 91       	pop	r16
    34d6:	08 95       	ret

000034d8 <enable_ref_spads>:
				u32 size,
				u32 start,
				u32 offset,
				u32 spadCount,
				u32 *lastSpad)
{
    34d8:	3f 92       	push	r3
    34da:	4f 92       	push	r4
    34dc:	5f 92       	push	r5
    34de:	6f 92       	push	r6
    34e0:	7f 92       	push	r7
    34e2:	8f 92       	push	r8
    34e4:	9f 92       	push	r9
    34e6:	af 92       	push	r10
    34e8:	bf 92       	push	r11
    34ea:	cf 92       	push	r12
    34ec:	df 92       	push	r13
    34ee:	ef 92       	push	r14
    34f0:	ff 92       	push	r15
    34f2:	0f 93       	push	r16
    34f4:	1f 93       	push	r17
    34f6:	cf 93       	push	r28
    34f8:	df 93       	push	r29
    34fa:	cd b7       	in	r28, 0x3d	; 61
    34fc:	de b7       	in	r29, 0x3e	; 62
    34fe:	64 97       	sbiw	r28, 0x14	; 20
    3500:	0f b6       	in	r0, 0x3f	; 63
    3502:	f8 94       	cli
    3504:	de bf       	out	0x3e, r29	; 62
    3506:	0f be       	out	0x3f, r0	; 63
    3508:	cd bf       	out	0x3d, r28	; 61
    350a:	9c 8b       	std	Y+20, r25	; 0x14
    350c:	8b 8b       	std	Y+19, r24	; 0x13
    350e:	36 2e       	mov	r3, r22
    3510:	5a 8b       	std	Y+18, r21	; 0x12
    3512:	49 8b       	std	Y+17, r20	; 0x11
    3514:	38 8b       	std	Y+16, r19	; 0x10
    3516:	2f 87       	std	Y+15, r18	; 0x0f
    3518:	eb 86       	std	Y+11, r14	; 0x0b
    351a:	fc 86       	std	Y+12, r15	; 0x0c
    351c:	0d 87       	std	Y+13, r16	; 0x0d
    351e:	1e 87       	std	Y+14, r17	; 0x0e
    3520:	25 01       	movw	r4, r10
    3522:	36 01       	movw	r6, r12
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	u32 index;
	u32 i;
	s32 nextGoodSpad = offset;
    3524:	28 a5       	ldd	r18, Y+40	; 0x28
    3526:	39 a5       	ldd	r19, Y+41	; 0x29
    3528:	4a a5       	ldd	r20, Y+42	; 0x2a
    352a:	5b a5       	ldd	r21, Y+43	; 0x2b
    352c:	29 83       	std	Y+1, r18	; 0x01
    352e:	3a 83       	std	Y+2, r19	; 0x02
    3530:	4b 83       	std	Y+3, r20	; 0x03
    3532:	5c 83       	std	Y+4, r21	; 0x04
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
    3534:	8c a5       	ldd	r24, Y+44	; 0x2c
    3536:	9d a5       	ldd	r25, Y+45	; 0x2d
    3538:	ae a5       	ldd	r26, Y+46	; 0x2e
    353a:	bf a5       	ldd	r27, Y+47	; 0x2f
    353c:	89 2b       	or	r24, r25
    353e:	8a 2b       	or	r24, r26
    3540:	8b 2b       	or	r24, r27
    3542:	09 f4       	brne	.+2      	; 0x3546 <enable_ref_spads+0x6e>
    3544:	7a c0       	rjmp	.+244    	; 0x363a <enable_ref_spads+0x162>
    3546:	81 2c       	mov	r8, r1
    3548:	91 2c       	mov	r9, r1
    354a:	54 01       	movw	r10, r8
		get_next_good_spad(goodSpadArray, size, currentSpad,
    354c:	de 01       	movw	r26, r28
    354e:	11 96       	adiw	r26, 0x01	; 1
    3550:	7d 01       	movw	r14, r26
    3552:	08 a5       	ldd	r16, Y+40	; 0x28
    3554:	19 a5       	ldd	r17, Y+41	; 0x29
    3556:	2a a5       	ldd	r18, Y+42	; 0x2a
    3558:	3b a5       	ldd	r19, Y+43	; 0x2b
    355a:	4b 85       	ldd	r20, Y+11	; 0x0b
    355c:	5c 85       	ldd	r21, Y+12	; 0x0c
    355e:	6d 85       	ldd	r22, Y+13	; 0x0d
    3560:	7e 85       	ldd	r23, Y+14	; 0x0e
    3562:	89 89       	ldd	r24, Y+17	; 0x11
    3564:	9a 89       	ldd	r25, Y+18	; 0x12
    3566:	f2 dd       	rcall	.-1052   	; 0x314c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
    3568:	c9 80       	ldd	r12, Y+1	; 0x01
    356a:	da 80       	ldd	r13, Y+2	; 0x02
    356c:	eb 80       	ldd	r14, Y+3	; 0x03
    356e:	fc 80       	ldd	r15, Y+4	; 0x04
    3570:	bf ef       	ldi	r27, 0xFF	; 255
    3572:	cb 16       	cp	r12, r27
    3574:	db 06       	cpc	r13, r27
    3576:	eb 06       	cpc	r14, r27
    3578:	fb 06       	cpc	r15, r27
    357a:	09 f4       	brne	.+2      	; 0x357e <enable_ref_spads+0xa6>
    357c:	72 c0       	rjmp	.+228    	; 0x3662 <enable_ref_spads+0x18a>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
    357e:	c7 01       	movw	r24, r14
    3580:	b6 01       	movw	r22, r12
    3582:	64 0d       	add	r22, r4
    3584:	75 1d       	adc	r23, r5
    3586:	86 1d       	adc	r24, r6
    3588:	97 1d       	adc	r25, r7
    358a:	62 de       	rcall	.-828    	; 0x3250 <is_aperture>
    358c:	83 11       	cpse	r24, r3
    358e:	69 c0       	rjmp	.+210    	; 0x3662 <enable_ref_spads+0x18a>
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}
		currentSpad = (u32)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
    3590:	97 01       	movw	r18, r14
    3592:	86 01       	movw	r16, r12
    3594:	4b 85       	ldd	r20, Y+11	; 0x0b
    3596:	5c 85       	ldd	r21, Y+12	; 0x0c
    3598:	6d 85       	ldd	r22, Y+13	; 0x0d
    359a:	7e 85       	ldd	r23, Y+14	; 0x0e
    359c:	8f 85       	ldd	r24, Y+15	; 0x0f
    359e:	98 89       	ldd	r25, Y+16	; 0x10
    35a0:	74 de       	rcall	.-792    	; 0x328a <enable_spad_bit>
		currentSpad++;
    35a2:	a7 01       	movw	r20, r14
    35a4:	96 01       	movw	r18, r12
    35a6:	2f 5f       	subi	r18, 0xFF	; 255
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	4f 4f       	sbci	r20, 0xFF	; 255
    35ac:	5f 4f       	sbci	r21, 0xFF	; 255
    35ae:	28 a7       	std	Y+40, r18	; 0x28
    35b0:	39 a7       	std	Y+41, r19	; 0x29
    35b2:	4a a7       	std	Y+42, r20	; 0x2a
    35b4:	5b a7       	std	Y+43, r21	; 0x2b
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
    35b6:	3f ef       	ldi	r19, 0xFF	; 255
    35b8:	83 1a       	sub	r8, r19
    35ba:	93 0a       	sbc	r9, r19
    35bc:	a3 0a       	sbc	r10, r19
    35be:	b3 0a       	sbc	r11, r19
    35c0:	8c a5       	ldd	r24, Y+44	; 0x2c
    35c2:	9d a5       	ldd	r25, Y+45	; 0x2d
    35c4:	ae a5       	ldd	r26, Y+46	; 0x2e
    35c6:	bf a5       	ldd	r27, Y+47	; 0x2f
    35c8:	88 15       	cp	r24, r8
    35ca:	99 05       	cpc	r25, r9
    35cc:	aa 05       	cpc	r26, r10
    35ce:	bb 05       	cpc	r27, r11
    35d0:	09 f0       	breq	.+2      	; 0x35d4 <enable_ref_spads+0xfc>
    35d2:	bc cf       	rjmp	.-136    	; 0x354c <enable_ref_spads+0x74>
    35d4:	32 c0       	rjmp	.+100    	; 0x363a <enable_ref_spads+0x162>
	if (status == VL53L0X_ERROR_NONE)
		status = set_ref_spad_map(Dev, spadArray);


	if (status == VL53L0X_ERROR_NONE) {
		status = get_ref_spad_map(Dev, checkSpadArray);
    35d6:	be 01       	movw	r22, r28
    35d8:	6b 5f       	subi	r22, 0xFB	; 251
    35da:	7f 4f       	sbci	r23, 0xFF	; 255
    35dc:	8b 89       	ldd	r24, Y+19	; 0x13
    35de:	9c 89       	ldd	r25, Y+20	; 0x14
    35e0:	6e df       	rcall	.-292    	; 0x34be <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
    35e2:	2b 85       	ldd	r18, Y+11	; 0x0b
    35e4:	3c 85       	ldd	r19, Y+12	; 0x0c
    35e6:	4d 85       	ldd	r20, Y+13	; 0x0d
    35e8:	5e 85       	ldd	r21, Y+14	; 0x0e
    35ea:	23 2b       	or	r18, r19
    35ec:	24 2b       	or	r18, r20
    35ee:	25 2b       	or	r18, r21
    35f0:	09 f4       	brne	.+2      	; 0x35f4 <enable_ref_spads+0x11c>
    35f2:	43 c0       	rjmp	.+134    	; 0x367a <enable_ref_spads+0x1a2>
			if (spadArray[i] != checkSpadArray[i]) {
    35f4:	af 85       	ldd	r26, Y+15	; 0x0f
    35f6:	b8 89       	ldd	r27, Y+16	; 0x10
    35f8:	2c 91       	ld	r18, X
    35fa:	9d 81       	ldd	r25, Y+5	; 0x05
    35fc:	29 13       	cpse	r18, r25
    35fe:	19 c0       	rjmp	.+50     	; 0x3632 <enable_ref_spads+0x15a>
    3600:	11 96       	adiw	r26, 0x01	; 1
    3602:	fe 01       	movw	r30, r28
    3604:	36 96       	adiw	r30, 0x06	; 6
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	50 e0       	ldi	r21, 0x00	; 0
    360a:	ba 01       	movw	r22, r20
    360c:	cb 84       	ldd	r12, Y+11	; 0x0b
    360e:	dc 84       	ldd	r13, Y+12	; 0x0c
    3610:	ed 84       	ldd	r14, Y+13	; 0x0d
    3612:	fe 84       	ldd	r15, Y+14	; 0x0e
    3614:	04 c0       	rjmp	.+8      	; 0x361e <enable_ref_spads+0x146>
    3616:	2d 91       	ld	r18, X+
    3618:	91 91       	ld	r25, Z+
    361a:	29 13       	cpse	r18, r25
    361c:	0c c0       	rjmp	.+24     	; 0x3636 <enable_ref_spads+0x15e>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}
			i++;
    361e:	4f 5f       	subi	r20, 0xFF	; 255
    3620:	5f 4f       	sbci	r21, 0xFF	; 255
    3622:	6f 4f       	sbci	r22, 0xFF	; 255
    3624:	7f 4f       	sbci	r23, 0xFF	; 255
		status = get_ref_spad_map(Dev, checkSpadArray);

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
    3626:	c4 16       	cp	r12, r20
    3628:	d5 06       	cpc	r13, r21
    362a:	e6 06       	cpc	r14, r22
    362c:	f7 06       	cpc	r15, r23
    362e:	99 f7       	brne	.-26     	; 0x3616 <enable_ref_spads+0x13e>
    3630:	24 c0       	rjmp	.+72     	; 0x367a <enable_ref_spads+0x1a2>
			if (spadArray[i] != checkSpadArray[i]) {
				status = VL53L0X_ERROR_REF_SPAD_INIT;
    3632:	8e ec       	ldi	r24, 0xCE	; 206
    3634:	22 c0       	rjmp	.+68     	; 0x367a <enable_ref_spads+0x1a2>
    3636:	8e ec       	ldi	r24, 0xCE	; 206
    3638:	20 c0       	rjmp	.+64     	; 0x367a <enable_ref_spads+0x1a2>
		}
		currentSpad = (u32)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
    363a:	28 a5       	ldd	r18, Y+40	; 0x28
    363c:	39 a5       	ldd	r19, Y+41	; 0x29
    363e:	4a a5       	ldd	r20, Y+42	; 0x2a
    3640:	5b a5       	ldd	r21, Y+43	; 0x2b
    3642:	a8 a9       	ldd	r26, Y+48	; 0x30
    3644:	b9 a9       	ldd	r27, Y+49	; 0x31
    3646:	2d 93       	st	X+, r18
    3648:	3d 93       	st	X+, r19
    364a:	4d 93       	st	X+, r20
    364c:	5c 93       	st	X, r21

	if (status == VL53L0X_ERROR_NONE)
		status = set_ref_spad_map(Dev, spadArray);
    364e:	13 97       	sbiw	r26, 0x03	; 3
    3650:	6f 85       	ldd	r22, Y+15	; 0x0f
    3652:	78 89       	ldd	r23, Y+16	; 0x10
    3654:	8b 89       	ldd	r24, Y+19	; 0x13
    3656:	9c 89       	ldd	r25, Y+20	; 0x14


	if (status == VL53L0X_ERROR_NONE) {
    3658:	25 df       	rcall	.-438    	; 0x34a4 <set_ref_spad_map>
    365a:	88 23       	and	r24, r24
    365c:	09 f4       	brne	.+2      	; 0x3660 <enable_ref_spads+0x188>
    365e:	bb cf       	rjmp	.-138    	; 0x35d6 <enable_ref_spads+0xfe>
		}
		currentSpad = (u32)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
    3660:	0c c0       	rjmp	.+24     	; 0x367a <enable_ref_spads+0x1a2>
    3662:	28 a5       	ldd	r18, Y+40	; 0x28
    3664:	39 a5       	ldd	r19, Y+41	; 0x29
    3666:	4a a5       	ldd	r20, Y+42	; 0x2a
    3668:	5b a5       	ldd	r21, Y+43	; 0x2b
    366a:	a8 a9       	ldd	r26, Y+48	; 0x30
    366c:	b9 a9       	ldd	r27, Y+49	; 0x31
    366e:	2d 93       	st	X+, r18
    3670:	3d 93       	st	X+, r19
    3672:	4d 93       	st	X+, r20
    3674:	5c 93       	st	X, r21
    3676:	13 97       	sbiw	r26, 0x03	; 3
			}
			i++;
		}
	}
	return status;
}
    3678:	8e ec       	ldi	r24, 0xCE	; 206
    367a:	64 96       	adiw	r28, 0x14	; 20
    367c:	0f b6       	in	r0, 0x3f	; 63
    367e:	f8 94       	cli
    3680:	de bf       	out	0x3e, r29	; 62
    3682:	0f be       	out	0x3f, r0	; 63
    3684:	cd bf       	out	0x3d, r28	; 61
    3686:	df 91       	pop	r29
    3688:	cf 91       	pop	r28
    368a:	1f 91       	pop	r17
    368c:	0f 91       	pop	r16
    368e:	ff 90       	pop	r15
    3690:	ef 90       	pop	r14
    3692:	df 90       	pop	r13
    3694:	cf 90       	pop	r12
    3696:	bf 90       	pop	r11
    3698:	af 90       	pop	r10
    369a:	9f 90       	pop	r9
    369c:	8f 90       	pop	r8
    369e:	7f 90       	pop	r7
    36a0:	6f 90       	pop	r6
    36a2:	5f 90       	pop	r5
    36a4:	4f 90       	pop	r4
    36a6:	3f 90       	pop	r3
    36a8:	08 95       	ret

000036aa <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		u16 *refSignalRate)
{
    36aa:	cf 92       	push	r12
    36ac:	df 92       	push	r13
    36ae:	ff 92       	push	r15
    36b0:	0f 93       	push	r16
    36b2:	1f 93       	push	r17
    36b4:	cf 93       	push	r28
    36b6:	df 93       	push	r29
    36b8:	cd b7       	in	r28, 0x3d	; 61
    36ba:	de b7       	in	r29, 0x3e	; 62
    36bc:	69 97       	sbiw	r28, 0x19	; 25
    36be:	0f b6       	in	r0, 0x3f	; 63
    36c0:	f8 94       	cli
    36c2:	de bf       	out	0x3e, r29	; 62
    36c4:	0f be       	out	0x3f, r0	; 63
    36c6:	cd bf       	out	0x3d, r28	; 61
    36c8:	8c 01       	movw	r16, r24
    36ca:	6b 01       	movw	r12, r22

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    36cc:	fc 01       	movw	r30, r24
    36ce:	e3 5e       	subi	r30, 0xE3	; 227
    36d0:	fe 4f       	sbci	r31, 0xFE	; 254
    36d2:	f0 80       	ld	r15, Z

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
    36d4:	40 ec       	ldi	r20, 0xC0	; 192
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
    36dc:	81 11       	cpse	r24, r1
    36de:	1a c0       	rjmp	.+52     	; 0x3714 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
    36e0:	be 01       	movw	r22, r28
    36e2:	6f 5f       	subi	r22, 0xFF	; 255
    36e4:	7f 4f       	sbci	r23, 0xFF	; 255
    36e6:	c8 01       	movw	r24, r16
    36e8:	64 da       	rcall	.-2872   	; 0x2bb2 <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
    36ea:	81 11       	cpse	r24, r1
    36ec:	20 c0       	rjmp	.+64     	; 0x372e <perform_ref_signal_measurement+0x84>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    36ee:	41 e0       	ldi	r20, 0x01	; 1
    36f0:	6f ef       	ldi	r22, 0xFF	; 255
    36f2:	c8 01       	movw	r24, r16
    36f4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
    36f8:	81 11       	cpse	r24, r1
    36fa:	19 c0       	rjmp	.+50     	; 0x372e <perform_ref_signal_measurement+0x84>
		status = VL53L0X_RdWord(Dev,
    36fc:	a6 01       	movw	r20, r12
    36fe:	66 eb       	ldi	r22, 0xB6	; 182
    3700:	c8 01       	movw	r24, r16
    3702:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
    3706:	81 11       	cpse	r24, r1
    3708:	12 c0       	rjmp	.+36     	; 0x372e <perform_ref_signal_measurement+0x84>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    370a:	40 e0       	ldi	r20, 0x00	; 0
    370c:	6f ef       	ldi	r22, 0xFF	; 255
    370e:	c8 01       	movw	r24, r16
    3710:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
    3714:	81 11       	cpse	r24, r1
    3716:	0b c0       	rjmp	.+22     	; 0x372e <perform_ref_signal_measurement+0x84>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3718:	4f 2d       	mov	r20, r15
    371a:	61 e0       	ldi	r22, 0x01	; 1
    371c:	c8 01       	movw	r24, r16
    371e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
    3722:	81 11       	cpse	r24, r1
    3724:	04 c0       	rjmp	.+8      	; 0x372e <perform_ref_signal_measurement+0x84>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3726:	f8 01       	movw	r30, r16
    3728:	e3 5e       	subi	r30, 0xE3	; 227
    372a:	fe 4f       	sbci	r31, 0xFE	; 254
    372c:	f0 82       	st	Z, r15
	}

	return status;
}
    372e:	69 96       	adiw	r28, 0x19	; 25
    3730:	0f b6       	in	r0, 0x3f	; 63
    3732:	f8 94       	cli
    3734:	de bf       	out	0x3e, r29	; 62
    3736:	0f be       	out	0x3f, r0	; 63
    3738:	cd bf       	out	0x3d, r28	; 61
    373a:	df 91       	pop	r29
    373c:	cf 91       	pop	r28
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	ff 90       	pop	r15
    3744:	df 90       	pop	r13
    3746:	cf 90       	pop	r12
    3748:	08 95       	ret

0000374a <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 u32 count, u8 isApertureSpads)
{
    374a:	6f 92       	push	r6
    374c:	7f 92       	push	r7
    374e:	8f 92       	push	r8
    3750:	9f 92       	push	r9
    3752:	af 92       	push	r10
    3754:	bf 92       	push	r11
    3756:	cf 92       	push	r12
    3758:	df 92       	push	r13
    375a:	ef 92       	push	r14
    375c:	ff 92       	push	r15
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	00 d0       	rcall	.+0      	; 0x3768 <VL53L0X_set_reference_spads+0x1e>
    3768:	00 d0       	rcall	.+0      	; 0x376a <VL53L0X_set_reference_spads+0x20>
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	4c 01       	movw	r8, r24
    3770:	64 2e       	mov	r6, r20
    3772:	15 2f       	mov	r17, r21
    3774:	06 2f       	mov	r16, r22
    3776:	b7 2e       	mov	r11, r23
    3778:	72 2e       	mov	r7, r18
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    377a:	41 e0       	ldi	r20, 0x01	; 1
    377c:	6f ef       	ldi	r22, 0xFF	; 255
    377e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3782:	81 11       	cpse	r24, r1
    3784:	1a c0       	rjmp	.+52     	; 0x37ba <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev,
    3786:	40 e0       	ldi	r20, 0x00	; 0
    3788:	6f e4       	ldi	r22, 0x4F	; 79
    378a:	c4 01       	movw	r24, r8
    378c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
    3790:	81 11       	cpse	r24, r1
    3792:	13 c0       	rjmp	.+38     	; 0x37ba <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev,
    3794:	4c e2       	ldi	r20, 0x2C	; 44
    3796:	6e e4       	ldi	r22, 0x4E	; 78
    3798:	c4 01       	movw	r24, r8
    379a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
    379e:	81 11       	cpse	r24, r1
    37a0:	0c c0       	rjmp	.+24     	; 0x37ba <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    37a2:	40 e0       	ldi	r20, 0x00	; 0
    37a4:	6f ef       	ldi	r22, 0xFF	; 255
    37a6:	c4 01       	movw	r24, r8
    37a8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    37ac:	81 11       	cpse	r24, r1
    37ae:	05 c0       	rjmp	.+10     	; 0x37ba <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev,
    37b0:	44 eb       	ldi	r20, 0xB4	; 180
    37b2:	66 eb       	ldi	r22, 0xB6	; 182
    37b4:	c4 01       	movw	r24, r8
    37b6:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
    37ba:	f4 01       	movw	r30, r8
    37bc:	ef 5e       	subi	r30, 0xEF	; 239
    37be:	fe 4f       	sbci	r31, 0xFE	; 254
    37c0:	10 82       	st	Z, r1
    37c2:	31 96       	adiw	r30, 0x01	; 1
    37c4:	10 82       	st	Z, r1
    37c6:	31 96       	adiw	r30, 0x01	; 1
    37c8:	10 82       	st	Z, r1
    37ca:	31 96       	adiw	r30, 0x01	; 1
    37cc:	10 82       	st	Z, r1
    37ce:	31 96       	adiw	r30, 0x01	; 1
    37d0:	10 82       	st	Z, r1
    37d2:	31 96       	adiw	r30, 0x01	; 1
    37d4:	10 82       	st	Z, r1

	if (isApertureSpads) {
    37d6:	71 10       	cpse	r7, r1
    37d8:	0a c0       	rjmp	.+20     	; 0x37ee <VL53L0X_set_reference_spads+0xa4>

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 u32 count, u8 isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u32 currentSpadIndex = 0;
    37da:	c1 2c       	mov	r12, r1
    37dc:	d1 2c       	mov	r13, r1
    37de:	76 01       	movw	r14, r12
    37e0:	18 c0       	rjmp	.+48     	; 0x3812 <VL53L0X_set_reference_spads+0xc8>

	if (isApertureSpads) {
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
    37e2:	2f ef       	ldi	r18, 0xFF	; 255
    37e4:	c2 1a       	sub	r12, r18
    37e6:	d2 0a       	sbc	r13, r18
    37e8:	e2 0a       	sbc	r14, r18
    37ea:	f2 0a       	sbc	r15, r18
    37ec:	03 c0       	rjmp	.+6      	; 0x37f4 <VL53L0X_set_reference_spads+0xaa>
    37ee:	c1 2c       	mov	r12, r1
    37f0:	d1 2c       	mov	r13, r1
    37f2:	76 01       	movw	r14, r12
	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;

	if (isApertureSpads) {
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
    37f4:	c7 01       	movw	r24, r14
    37f6:	b6 01       	movw	r22, r12
    37f8:	6c 54       	subi	r22, 0x4C	; 76
    37fa:	7f 4f       	sbci	r23, 0xFF	; 255
    37fc:	8f 4f       	sbci	r24, 0xFF	; 255
    37fe:	9f 4f       	sbci	r25, 0xFF	; 255
    3800:	27 dd       	rcall	.-1458   	; 0x3250 <is_aperture>
    3802:	81 11       	cpse	r24, r1
    3804:	06 c0       	rjmp	.+12     	; 0x3812 <VL53L0X_set_reference_spads+0xc8>
    3806:	3c e2       	ldi	r19, 0x2C	; 44
    3808:	c3 16       	cp	r12, r19
    380a:	d1 04       	cpc	r13, r1
    380c:	e1 04       	cpc	r14, r1
    380e:	f1 04       	cpc	r15, r1
    3810:	41 f7       	brne	.-48     	; 0x37e2 <VL53L0X_set_reference_spads+0x98>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
    3812:	ce 01       	movw	r24, r28
    3814:	01 96       	adiw	r24, 0x01	; 1
    3816:	9f 93       	push	r25
    3818:	8f 93       	push	r24
    381a:	bf 92       	push	r11
    381c:	0f 93       	push	r16
    381e:	1f 93       	push	r17
    3820:	6f 92       	push	r6
    3822:	ff 92       	push	r15
    3824:	ef 92       	push	r14
    3826:	df 92       	push	r13
    3828:	cf 92       	push	r12
    382a:	0f 2e       	mov	r0, r31
    382c:	f4 eb       	ldi	r31, 0xB4	; 180
    382e:	af 2e       	mov	r10, r31
    3830:	b1 2c       	mov	r11, r1
    3832:	c1 2c       	mov	r12, r1
    3834:	d1 2c       	mov	r13, r1
    3836:	f0 2d       	mov	r31, r0
    3838:	16 e0       	ldi	r17, 0x06	; 6
    383a:	e1 2e       	mov	r14, r17
    383c:	f1 2c       	mov	r15, r1
    383e:	00 e0       	ldi	r16, 0x00	; 0
    3840:	10 e0       	ldi	r17, 0x00	; 0
    3842:	94 01       	movw	r18, r8
    3844:	2f 5e       	subi	r18, 0xEF	; 239
    3846:	3e 4f       	sbci	r19, 0xFE	; 254
    3848:	a4 01       	movw	r20, r8
    384a:	49 5e       	subi	r20, 0xE9	; 233
    384c:	5e 4f       	sbci	r21, 0xFE	; 254
    384e:	67 2d       	mov	r22, r7
    3850:	c4 01       	movw	r24, r8
    3852:	42 de       	rcall	.-892    	; 0x34d8 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
    3854:	0f b6       	in	r0, 0x3f	; 63
    3856:	f8 94       	cli
    3858:	de bf       	out	0x3e, r29	; 62
    385a:	0f be       	out	0x3f, r0	; 63
    385c:	cd bf       	out	0x3d, r28	; 61
    385e:	81 11       	cpse	r24, r1
    3860:	09 c0       	rjmp	.+18     	; 0x3874 <VL53L0X_set_reference_spads+0x12a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
    3862:	f4 01       	movw	r30, r8
    3864:	ec 5f       	subi	r30, 0xFC	; 252
    3866:	fe 4f       	sbci	r31, 0xFE	; 254
    3868:	91 e0       	ldi	r25, 0x01	; 1
    386a:	90 83       	st	Z, r25
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    386c:	32 97       	sbiw	r30, 0x02	; 2
    386e:	60 82       	st	Z, r6
			ReferenceSpadCount, (u8)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3870:	31 96       	adiw	r30, 0x01	; 1
    3872:	70 82       	st	Z, r7
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	0f 90       	pop	r0
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	1f 91       	pop	r17
    3882:	0f 91       	pop	r16
    3884:	ff 90       	pop	r15
    3886:	ef 90       	pop	r14
    3888:	df 90       	pop	r13
    388a:	cf 90       	pop	r12
    388c:	bf 90       	pop	r11
    388e:	af 90       	pop	r10
    3890:	9f 90       	pop	r9
    3892:	8f 90       	pop	r8
    3894:	7f 90       	pop	r7
    3896:	6f 90       	pop	r6
    3898:	08 95       	ret

0000389a <VL53L0X_get_reference_spads>:

VL53L0X_Error VL53L0X_get_reference_spads(VL53L0X_DEV Dev,
			u32 *pSpadCount, u8 *pIsApertureSpads)
{
    389a:	6f 92       	push	r6
    389c:	7f 92       	push	r7
    389e:	8f 92       	push	r8
    38a0:	9f 92       	push	r9
    38a2:	af 92       	push	r10
    38a4:	bf 92       	push	r11
    38a6:	cf 92       	push	r12
    38a8:	df 92       	push	r13
    38aa:	ef 92       	push	r14
    38ac:	ff 92       	push	r15
    38ae:	0f 93       	push	r16
    38b0:	1f 93       	push	r17
    38b2:	cf 93       	push	r28
    38b4:	df 93       	push	r29
    38b6:	cd b7       	in	r28, 0x3d	; 61
    38b8:	de b7       	in	r29, 0x3e	; 62
    38ba:	2b 97       	sbiw	r28, 0x0b	; 11
    38bc:	0f b6       	in	r0, 0x3f	; 63
    38be:	f8 94       	cli
    38c0:	de bf       	out	0x3e, r29	; 62
    38c2:	0f be       	out	0x3f, r0	; 63
    38c4:	cd bf       	out	0x3d, r28	; 61
	u8 refSpadsInitialised;
	u8 refSpadArray[6];
	u32 cMaxSpadCount = 44;
	u32 cSpadArraySize = 6;
	u32 spadsEnabled;
	u8 isApertureSpads = 0;
    38c6:	1b 86       	std	Y+11, r1	; 0x0b

	refSpadsInitialised = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
    38c8:	fc 01       	movw	r30, r24
    38ca:	ec 5f       	subi	r30, 0xFC	; 252
    38cc:	fe 4f       	sbci	r31, 0xFE	; 254
					RefSpadsInitialised);

	if (refSpadsInitialised == 1) {
    38ce:	20 81       	ld	r18, Z
    38d0:	21 30       	cpi	r18, 0x01	; 1
    38d2:	91 f4       	brne	.+36     	; 0x38f8 <VL53L0X_get_reference_spads+0x5e>

		*pSpadCount = (u32)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
    38d4:	32 97       	sbiw	r30, 0x02	; 2
    38d6:	80 80       	ld	r8, Z
    38d8:	91 2c       	mov	r9, r1
    38da:	a1 2c       	mov	r10, r1
    38dc:	b1 2c       	mov	r11, r1
    38de:	fb 01       	movw	r30, r22
    38e0:	80 82       	st	Z, r8
    38e2:	91 82       	std	Z+1, r9	; 0x01
    38e4:	a2 82       	std	Z+2, r10	; 0x02
    38e6:	b3 82       	std	Z+3, r11	; 0x03
			ReferenceSpadCount);
		*pIsApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
    38e8:	fc 01       	movw	r30, r24
    38ea:	ed 5f       	subi	r30, 0xFD	; 253
    38ec:	fe 4f       	sbci	r31, 0xFE	; 254
    38ee:	80 81       	ld	r24, Z
    38f0:	fa 01       	movw	r30, r20
    38f2:	80 83       	st	Z, r24
}

VL53L0X_Error VL53L0X_get_reference_spads(VL53L0X_DEV Dev,
			u32 *pSpadCount, u8 *pIsApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    38f4:	80 e0       	ldi	r24, 0x00	; 0
    38f6:	30 c0       	rjmp	.+96     	; 0x3958 <VL53L0X_get_reference_spads+0xbe>
    38f8:	5a 01       	movw	r10, r20
    38fa:	4b 01       	movw	r8, r22
    38fc:	3c 01       	movw	r6, r24
		*pIsApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ReferenceSpadType);
	} else {

		/* obtain spad info from device.*/
		Status = get_ref_spad_map(Dev, refSpadArray);
    38fe:	be 01       	movw	r22, r28
    3900:	6f 5f       	subi	r22, 0xFF	; 255
    3902:	7f 4f       	sbci	r23, 0xFF	; 255
    3904:	dc dd       	rcall	.-1096   	; 0x34be <get_ref_spad_map>

		if (Status == VL53L0X_ERROR_NONE) {
    3906:	81 11       	cpse	r24, r1
    3908:	27 c0       	rjmp	.+78     	; 0x3958 <VL53L0X_get_reference_spads+0xbe>
			/* count enabled spads within spad map array and
			 * determine if Aperture or Non-Aperture.
			 */
			Status = count_enabled_spads(refSpadArray,
    390a:	ce 01       	movw	r24, r28
    390c:	0b 96       	adiw	r24, 0x0b	; 11
    390e:	6c 01       	movw	r12, r24
    3910:	fe 01       	movw	r30, r28
    3912:	37 96       	adiw	r30, 0x07	; 7
    3914:	7f 01       	movw	r14, r30
    3916:	0c e2       	ldi	r16, 0x2C	; 44
    3918:	10 e0       	ldi	r17, 0x00	; 0
    391a:	20 e0       	ldi	r18, 0x00	; 0
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	46 e0       	ldi	r20, 0x06	; 6
    3920:	50 e0       	ldi	r21, 0x00	; 0
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	70 e0       	ldi	r23, 0x00	; 0
    3926:	0a 97       	sbiw	r24, 0x0a	; 10
    3928:	e0 dc       	rcall	.-1600   	; 0x32ea <count_enabled_spads>
							cSpadArraySize,
							cMaxSpadCount,
							&spadsEnabled,
							&isApertureSpads);

			if (Status == VL53L0X_ERROR_NONE) {
    392a:	81 11       	cpse	r24, r1
    392c:	15 c0       	rjmp	.+42     	; 0x3958 <VL53L0X_get_reference_spads+0xbe>

				*pSpadCount = spadsEnabled;
    392e:	2f 81       	ldd	r18, Y+7	; 0x07
    3930:	48 85       	ldd	r20, Y+8	; 0x08
    3932:	39 85       	ldd	r19, Y+9	; 0x09
    3934:	9a 85       	ldd	r25, Y+10	; 0x0a
    3936:	f4 01       	movw	r30, r8
    3938:	20 83       	st	Z, r18
    393a:	41 83       	std	Z+1, r20	; 0x01
    393c:	32 83       	std	Z+2, r19	; 0x02
    393e:	93 83       	std	Z+3, r25	; 0x03
				*pIsApertureSpads = isApertureSpads;
    3940:	9b 85       	ldd	r25, Y+11	; 0x0b
    3942:	f5 01       	movw	r30, r10
    3944:	90 83       	st	Z, r25

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3946:	f3 01       	movw	r30, r6
    3948:	ec 5f       	subi	r30, 0xFC	; 252
    394a:	fe 4f       	sbci	r31, 0xFE	; 254
    394c:	31 e0       	ldi	r19, 0x01	; 1
    394e:	30 83       	st	Z, r19
					RefSpadsInitialised, 1);
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3950:	32 97       	sbiw	r30, 0x02	; 2
    3952:	20 83       	st	Z, r18
					ReferenceSpadCount,
					(u8)spadsEnabled);
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3954:	31 96       	adiw	r30, 0x01	; 1
    3956:	90 83       	st	Z, r25
			}
		}
	}

	return Status;
}
    3958:	2b 96       	adiw	r28, 0x0b	; 11
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	1f 91       	pop	r17
    396a:	0f 91       	pop	r16
    396c:	ff 90       	pop	r15
    396e:	ef 90       	pop	r14
    3970:	df 90       	pop	r13
    3972:	cf 90       	pop	r12
    3974:	bf 90       	pop	r11
    3976:	af 90       	pop	r10
    3978:	9f 90       	pop	r9
    397a:	8f 90       	pop	r8
    397c:	7f 90       	pop	r7
    397e:	6f 90       	pop	r6
    3980:	08 95       	ret

00003982 <VL53L0X_perform_single_ref_calibration>:


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		u8 vhv_init_byte)
{
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	ec 01       	movw	r28, r24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
    3988:	46 2f       	mov	r20, r22
    398a:	41 60       	ori	r20, 0x01	; 1
    398c:	60 e0       	ldi	r22, 0x00	; 0
    398e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
    3992:	81 11       	cpse	r24, r1
    3994:	10 c0       	rjmp	.+32     	; 0x39b6 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
    3996:	ce 01       	movw	r24, r28
    3998:	d0 d3       	rcall	.+1952   	; 0x413a <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
    399a:	81 11       	cpse	r24, r1
    399c:	0c c0       	rjmp	.+24     	; 0x39b6 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
    399e:	40 e0       	ldi	r20, 0x00	; 0
    39a0:	50 e0       	ldi	r21, 0x00	; 0
    39a2:	ba 01       	movw	r22, r20
    39a4:	ce 01       	movw	r24, r28
    39a6:	d0 d8       	rcall	.-3680   	; 0x2b48 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
    39a8:	81 11       	cpse	r24, r1
    39aa:	05 c0       	rjmp	.+10     	; 0x39b6 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
    39ac:	40 e0       	ldi	r20, 0x00	; 0
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	ce 01       	movw	r24, r28
    39b2:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	return Status;
}
    39b6:	df 91       	pop	r29
    39b8:	cf 91       	pop	r28
    39ba:	08 95       	ret

000039bc <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, u8 read_not_write,
	u8 VhvSettings, u8 PhaseCal,
	u8 *pVhvSettings, u8 *pPhaseCal,
	const u8 vhv_enable, const u8 phase_enable)
{
    39bc:	5f 92       	push	r5
    39be:	6f 92       	push	r6
    39c0:	7f 92       	push	r7
    39c2:	8f 92       	push	r8
    39c4:	9f 92       	push	r9
    39c6:	af 92       	push	r10
    39c8:	bf 92       	push	r11
    39ca:	cf 92       	push	r12
    39cc:	df 92       	push	r13
    39ce:	ef 92       	push	r14
    39d0:	ff 92       	push	r15
    39d2:	0f 93       	push	r16
    39d4:	1f 93       	push	r17
    39d6:	cf 93       	push	r28
    39d8:	df 93       	push	r29
    39da:	1f 92       	push	r1
    39dc:	cd b7       	in	r28, 0x3d	; 61
    39de:	de b7       	in	r29, 0x3e	; 62
    39e0:	4c 01       	movw	r8, r24
    39e2:	d6 2e       	mov	r13, r22
    39e4:	54 2e       	mov	r5, r20
    39e6:	b2 2e       	mov	r11, r18
    39e8:	38 01       	movw	r6, r16
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 PhaseCalint = 0;
    39ea:	19 82       	std	Y+1, r1	; 0x01

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    39ec:	41 e0       	ldi	r20, 0x01	; 1
    39ee:	6f ef       	ldi	r22, 0xFF	; 255
    39f0:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    39f4:	18 2f       	mov	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
    39f6:	40 e0       	ldi	r20, 0x00	; 0
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	c4 01       	movw	r24, r8
    39fc:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    3a00:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	6f ef       	ldi	r22, 0xFF	; 255
    3a06:	c4 01       	movw	r24, r8
    3a08:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    3a0c:	18 2b       	or	r17, r24

	if (read_not_write) {
    3a0e:	dd 20       	and	r13, r13
    3a10:	99 f0       	breq	.+38     	; 0x3a38 <VL53L0X_ref_calibration_io+0x7c>
		if (vhv_enable)
    3a12:	cc 20       	and	r12, r12
    3a14:	31 f0       	breq	.+12     	; 0x3a22 <VL53L0X_ref_calibration_io+0x66>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
    3a16:	a3 01       	movw	r20, r6
    3a18:	6b ec       	ldi	r22, 0xCB	; 203
    3a1a:	c4 01       	movw	r24, r8
    3a1c:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    3a20:	18 2b       	or	r17, r24
		if (phase_enable)
    3a22:	aa 20       	and	r10, r10
    3a24:	d1 f0       	breq	.+52     	; 0x3a5a <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
    3a26:	ae 01       	movw	r20, r28
    3a28:	4f 5f       	subi	r20, 0xFF	; 255
    3a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    3a2c:	6e ee       	ldi	r22, 0xEE	; 238
    3a2e:	c4 01       	movw	r24, r8
    3a30:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    3a34:	18 2b       	or	r17, r24
    3a36:	11 c0       	rjmp	.+34     	; 0x3a5a <VL53L0X_ref_calibration_io+0x9e>
	} else {
		if (vhv_enable)
    3a38:	cc 20       	and	r12, r12
    3a3a:	31 f0       	breq	.+12     	; 0x3a48 <VL53L0X_ref_calibration_io+0x8c>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
    3a3c:	45 2d       	mov	r20, r5
    3a3e:	6b ec       	ldi	r22, 0xCB	; 203
    3a40:	c4 01       	movw	r24, r8
    3a42:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    3a46:	18 2b       	or	r17, r24
		if (phase_enable)
    3a48:	aa 20       	and	r10, r10
    3a4a:	39 f0       	breq	.+14     	; 0x3a5a <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
    3a4c:	2b 2d       	mov	r18, r11
    3a4e:	40 e8       	ldi	r20, 0x80	; 128
    3a50:	6e ee       	ldi	r22, 0xEE	; 238
    3a52:	c4 01       	movw	r24, r8
    3a54:	0e 94 1b 32 	call	0x6436	; 0x6436 <VL53L0X_UpdateByte>
    3a58:	18 2b       	or	r17, r24
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    3a5a:	41 e0       	ldi	r20, 0x01	; 1
    3a5c:	6f ef       	ldi	r22, 0xFF	; 255
    3a5e:	c4 01       	movw	r24, r8
    3a60:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    3a64:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
    3a66:	41 e0       	ldi	r20, 0x01	; 1
    3a68:	60 e0       	ldi	r22, 0x00	; 0
    3a6a:	c4 01       	movw	r24, r8
    3a6c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    3a70:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    3a72:	40 e0       	ldi	r20, 0x00	; 0
    3a74:	6f ef       	ldi	r22, 0xFF	; 255
    3a76:	c4 01       	movw	r24, r8
    3a78:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	*pPhaseCal = (u8)(PhaseCalint&0xEF);
    3a7c:	99 81       	ldd	r25, Y+1	; 0x01
    3a7e:	9f 7e       	andi	r25, 0xEF	; 239
    3a80:	f7 01       	movw	r30, r14
    3a82:	90 83       	st	Z, r25

	return Status;
}
    3a84:	81 2b       	or	r24, r17
    3a86:	0f 90       	pop	r0
    3a88:	df 91       	pop	r29
    3a8a:	cf 91       	pop	r28
    3a8c:	1f 91       	pop	r17
    3a8e:	0f 91       	pop	r16
    3a90:	ff 90       	pop	r15
    3a92:	ef 90       	pop	r14
    3a94:	df 90       	pop	r13
    3a96:	cf 90       	pop	r12
    3a98:	bf 90       	pop	r11
    3a9a:	af 90       	pop	r10
    3a9c:	9f 90       	pop	r9
    3a9e:	8f 90       	pop	r8
    3aa0:	7f 90       	pop	r7
    3aa2:	6f 90       	pop	r6
    3aa4:	5f 90       	pop	r5
    3aa6:	08 95       	ret

00003aa8 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	u8 *pVhvSettings, const u8 get_data_enable,
	const u8 restore_config)
{
    3aa8:	8f 92       	push	r8
    3aaa:	9f 92       	push	r9
    3aac:	af 92       	push	r10
    3aae:	bf 92       	push	r11
    3ab0:	cf 92       	push	r12
    3ab2:	df 92       	push	r13
    3ab4:	ef 92       	push	r14
    3ab6:	ff 92       	push	r15
    3ab8:	0f 93       	push	r16
    3aba:	1f 93       	push	r17
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	1f 92       	push	r1
    3ac2:	cd b7       	in	r28, 0x3d	; 61
    3ac4:	de b7       	in	r29, 0x3e	; 62
    3ac6:	4c 01       	movw	r8, r24
    3ac8:	8b 01       	movw	r16, r22
    3aca:	f4 2e       	mov	r15, r20
    3acc:	d2 2e       	mov	r13, r18
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 SequenceConfig = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u8 PhaseCalInt = 0;
    3ace:	19 82       	std	Y+1, r1	; 0x01

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    3ad0:	22 23       	and	r18, r18
    3ad2:	29 f0       	breq	.+10     	; 0x3ade <VL53L0X_perform_vhv_calibration+0x36>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    3ad4:	fc 01       	movw	r30, r24
    3ad6:	e3 5e       	subi	r30, 0xE3	; 227
    3ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    3ada:	b0 80       	ld	r11, Z
    3adc:	01 c0       	rjmp	.+2      	; 0x3ae0 <VL53L0X_perform_vhv_calibration+0x38>
VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	u8 *pVhvSettings, const u8 get_data_enable,
	const u8 restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 SequenceConfig = 0;
    3ade:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
    3ae0:	41 e0       	ldi	r20, 0x01	; 1
    3ae2:	61 e0       	ldi	r22, 0x01	; 1
    3ae4:	c4 01       	movw	r24, r8
    3ae6:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3aea:	81 11       	cpse	r24, r1
    3aec:	14 c0       	rjmp	.+40     	; 0x3b16 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
    3aee:	60 e4       	ldi	r22, 0x40	; 64
    3af0:	c4 01       	movw	r24, r8
    3af2:	47 df       	rcall	.-370    	; 0x3982 <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    3af4:	81 11       	cpse	r24, r1
    3af6:	0f c0       	rjmp	.+30     	; 0x3b16 <VL53L0X_perform_vhv_calibration+0x6e>
    3af8:	91 e0       	ldi	r25, 0x01	; 1
    3afa:	f9 12       	cpse	r15, r25
    3afc:	0c c0       	rjmp	.+24     	; 0x3b16 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    3afe:	a1 2c       	mov	r10, r1
    3b00:	cc 24       	eor	r12, r12
    3b02:	c3 94       	inc	r12
    3b04:	fe 01       	movw	r30, r28
    3b06:	31 96       	adiw	r30, 0x01	; 1
    3b08:	7f 01       	movw	r14, r30
    3b0a:	20 e0       	ldi	r18, 0x00	; 0
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	61 e0       	ldi	r22, 0x01	; 1
    3b10:	c4 01       	movw	r24, r8
    3b12:	54 df       	rcall	.-344    	; 0x39bc <VL53L0X_ref_calibration_io>
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <VL53L0X_perform_vhv_calibration+0x72>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
    3b16:	f8 01       	movw	r30, r16
    3b18:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    3b1a:	81 11       	cpse	r24, r1
    3b1c:	0d c0       	rjmp	.+26     	; 0x3b38 <VL53L0X_perform_vhv_calibration+0x90>
    3b1e:	dd 20       	and	r13, r13
    3b20:	59 f0       	breq	.+22     	; 0x3b38 <VL53L0X_perform_vhv_calibration+0x90>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3b22:	4b 2d       	mov	r20, r11
    3b24:	61 e0       	ldi	r22, 0x01	; 1
    3b26:	c4 01       	movw	r24, r8
    3b28:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    3b2c:	81 11       	cpse	r24, r1
    3b2e:	04 c0       	rjmp	.+8      	; 0x3b38 <VL53L0X_perform_vhv_calibration+0x90>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3b30:	f4 01       	movw	r30, r8
    3b32:	e3 5e       	subi	r30, 0xE3	; 227
    3b34:	fe 4f       	sbci	r31, 0xFE	; 254
    3b36:	b0 82       	st	Z, r11

	}

	return Status;
}
    3b38:	0f 90       	pop	r0
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	df 90       	pop	r13
    3b48:	cf 90       	pop	r12
    3b4a:	bf 90       	pop	r11
    3b4c:	af 90       	pop	r10
    3b4e:	9f 90       	pop	r9
    3b50:	8f 90       	pop	r8
    3b52:	08 95       	ret

00003b54 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	u8 *pPhaseCal, const u8 get_data_enable,
	const u8 restore_config)
{
    3b54:	8f 92       	push	r8
    3b56:	9f 92       	push	r9
    3b58:	af 92       	push	r10
    3b5a:	bf 92       	push	r11
    3b5c:	cf 92       	push	r12
    3b5e:	df 92       	push	r13
    3b60:	ef 92       	push	r14
    3b62:	ff 92       	push	r15
    3b64:	0f 93       	push	r16
    3b66:	1f 93       	push	r17
    3b68:	cf 93       	push	r28
    3b6a:	df 93       	push	r29
    3b6c:	1f 92       	push	r1
    3b6e:	cd b7       	in	r28, 0x3d	; 61
    3b70:	de b7       	in	r29, 0x3e	; 62
    3b72:	4c 01       	movw	r8, r24
    3b74:	7b 01       	movw	r14, r22
    3b76:	14 2f       	mov	r17, r20
    3b78:	d2 2e       	mov	r13, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    3b7a:	22 23       	and	r18, r18
    3b7c:	29 f0       	breq	.+10     	; 0x3b88 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    3b7e:	fc 01       	movw	r30, r24
    3b80:	e3 5e       	subi	r30, 0xE3	; 227
    3b82:	fe 4f       	sbci	r31, 0xFE	; 254
    3b84:	b0 80       	ld	r11, Z
    3b86:	01 c0       	rjmp	.+2      	; 0x3b8a <VL53L0X_perform_phase_calibration+0x36>
VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	u8 *pPhaseCal, const u8 get_data_enable,
	const u8 restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 SequenceConfig = 0;
    3b88:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
    3b8a:	42 e0       	ldi	r20, 0x02	; 2
    3b8c:	61 e0       	ldi	r22, 0x01	; 1
    3b8e:	c4 01       	movw	r24, r8
    3b90:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3b94:	81 11       	cpse	r24, r1
    3b96:	13 c0       	rjmp	.+38     	; 0x3bbe <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
    3b98:	60 e0       	ldi	r22, 0x00	; 0
    3b9a:	c4 01       	movw	r24, r8
    3b9c:	f2 de       	rcall	.-540    	; 0x3982 <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    3b9e:	81 11       	cpse	r24, r1
    3ba0:	0e c0       	rjmp	.+28     	; 0x3bbe <VL53L0X_perform_phase_calibration+0x6a>
    3ba2:	11 30       	cpi	r17, 0x01	; 1
    3ba4:	61 f4       	brne	.+24     	; 0x3bbe <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    3ba6:	aa 24       	eor	r10, r10
    3ba8:	a3 94       	inc	r10
    3baa:	c1 2c       	mov	r12, r1
    3bac:	8e 01       	movw	r16, r28
    3bae:	0f 5f       	subi	r16, 0xFF	; 255
    3bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	40 e0       	ldi	r20, 0x00	; 0
    3bb6:	61 e0       	ldi	r22, 0x01	; 1
    3bb8:	c4 01       	movw	r24, r8
    3bba:	00 df       	rcall	.-512    	; 0x39bc <VL53L0X_ref_calibration_io>
    3bbc:	02 c0       	rjmp	.+4      	; 0x3bc2 <VL53L0X_perform_phase_calibration+0x6e>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
    3bbe:	f7 01       	movw	r30, r14
    3bc0:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    3bc2:	81 11       	cpse	r24, r1
    3bc4:	0d c0       	rjmp	.+26     	; 0x3be0 <VL53L0X_perform_phase_calibration+0x8c>
    3bc6:	dd 20       	and	r13, r13
    3bc8:	59 f0       	breq	.+22     	; 0x3be0 <VL53L0X_perform_phase_calibration+0x8c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3bca:	4b 2d       	mov	r20, r11
    3bcc:	61 e0       	ldi	r22, 0x01	; 1
    3bce:	c4 01       	movw	r24, r8
    3bd0:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    3bd4:	81 11       	cpse	r24, r1
    3bd6:	04 c0       	rjmp	.+8      	; 0x3be0 <VL53L0X_perform_phase_calibration+0x8c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3bd8:	f4 01       	movw	r30, r8
    3bda:	e3 5e       	subi	r30, 0xE3	; 227
    3bdc:	fe 4f       	sbci	r31, 0xFE	; 254
    3bde:	b0 82       	st	Z, r11

	}

	return Status;
}
    3be0:	0f 90       	pop	r0
    3be2:	df 91       	pop	r29
    3be4:	cf 91       	pop	r28
    3be6:	1f 91       	pop	r17
    3be8:	0f 91       	pop	r16
    3bea:	ff 90       	pop	r15
    3bec:	ef 90       	pop	r14
    3bee:	df 90       	pop	r13
    3bf0:	cf 90       	pop	r12
    3bf2:	bf 90       	pop	r11
    3bf4:	af 90       	pop	r10
    3bf6:	9f 90       	pop	r9
    3bf8:	8f 90       	pop	r8
    3bfa:	08 95       	ret

00003bfc <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	u8 *pVhvSettings, u8 *pPhaseCal, u8 get_data_enable)
{
    3bfc:	ef 92       	push	r14
    3bfe:	ff 92       	push	r15
    3c00:	0f 93       	push	r16
    3c02:	1f 93       	push	r17
    3c04:	cf 93       	push	r28
    3c06:	df 93       	push	r29
    3c08:	ec 01       	movw	r28, r24
    3c0a:	7a 01       	movw	r14, r20
    3c0c:	12 2f       	mov	r17, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    3c0e:	fc 01       	movw	r30, r24
    3c10:	e3 5e       	subi	r30, 0xE3	; 227
    3c12:	fe 4f       	sbci	r31, 0xFE	; 254
    3c14:	00 81       	ld	r16, Z

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	41 2f       	mov	r20, r17
    3c1a:	46 df       	rcall	.-372    	; 0x3aa8 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
    3c1c:	81 11       	cpse	r24, r1
    3c1e:	11 c0       	rjmp	.+34     	; 0x3c42 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	41 2f       	mov	r20, r17
    3c24:	b7 01       	movw	r22, r14
    3c26:	ce 01       	movw	r24, r28
    3c28:	95 df       	rcall	.-214    	; 0x3b54 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
    3c2a:	81 11       	cpse	r24, r1
    3c2c:	0a c0       	rjmp	.+20     	; 0x3c42 <VL53L0X_perform_ref_calibration+0x46>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3c2e:	40 2f       	mov	r20, r16
    3c30:	61 e0       	ldi	r22, 0x01	; 1
    3c32:	ce 01       	movw	r24, r28
    3c34:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    3c38:	81 11       	cpse	r24, r1
    3c3a:	03 c0       	rjmp	.+6      	; 0x3c42 <VL53L0X_perform_ref_calibration+0x46>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3c3c:	c3 5e       	subi	r28, 0xE3	; 227
    3c3e:	de 4f       	sbci	r29, 0xFE	; 254
    3c40:	08 83       	st	Y, r16

	}

	return Status;
}
    3c42:	df 91       	pop	r29
    3c44:	cf 91       	pop	r28
    3c46:	1f 91       	pop	r17
    3c48:	0f 91       	pop	r16
    3c4a:	ff 90       	pop	r15
    3c4c:	ef 90       	pop	r14
    3c4e:	08 95       	ret

00003c50 <VL53L0X_perform_ref_spad_management>:
}

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				u32 *refSpadCount,
				u8 *isApertureSpads)
{
    3c50:	2f 92       	push	r2
    3c52:	3f 92       	push	r3
    3c54:	4f 92       	push	r4
    3c56:	5f 92       	push	r5
    3c58:	6f 92       	push	r6
    3c5a:	7f 92       	push	r7
    3c5c:	8f 92       	push	r8
    3c5e:	9f 92       	push	r9
    3c60:	af 92       	push	r10
    3c62:	bf 92       	push	r11
    3c64:	cf 92       	push	r12
    3c66:	df 92       	push	r13
    3c68:	ef 92       	push	r14
    3c6a:	ff 92       	push	r15
    3c6c:	0f 93       	push	r16
    3c6e:	1f 93       	push	r17
    3c70:	cf 93       	push	r28
    3c72:	df 93       	push	r29
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	a7 97       	sbiw	r28, 0x27	; 39
    3c7a:	0f b6       	in	r0, 0x3f	; 63
    3c7c:	f8 94       	cli
    3c7e:	de bf       	out	0x3e, r29	; 62
    3c80:	0f be       	out	0x3f, r0	; 63
    3c82:	cd bf       	out	0x3d, r28	; 61
    3c84:	4c 01       	movw	r8, r24
    3c86:	7c a3       	std	Y+36, r23	; 0x24
    3c88:	6b a3       	std	Y+35, r22	; 0x23
    3c8a:	5e a3       	std	Y+38, r21	; 0x26
    3c8c:	4d a3       	std	Y+37, r20	; 0x25
	u8 lastSpadArray[6];
	u8 startSelect = 0xB4;
	u32 minimumSpadCount = 3;
	u32 maxSpadCount = 44;
	u32 currentSpadIndex = 0;
	u32 lastSpadIndex = 0;
    3c8e:	1f 82       	std	Y+7, r1	; 0x07
    3c90:	18 86       	std	Y+8, r1	; 0x08
    3c92:	19 86       	std	Y+9, r1	; 0x09
    3c94:	1a 86       	std	Y+10, r1	; 0x0a
	s32 nextGoodSpad = 0;
    3c96:	1b 86       	std	Y+11, r1	; 0x0b
    3c98:	1c 86       	std	Y+12, r1	; 0x0c
    3c9a:	1d 86       	std	Y+13, r1	; 0x0d
    3c9c:	1e 86       	std	Y+14, r1	; 0x0e
	u32 index = 0;
	u32 spadArraySize = 6;
	u32 signalRateDiff = 0;
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
    3c9e:	19 8a       	std	Y+17, r1	; 0x11
	u8 PhaseCal = 0;
    3ca0:	1a 8a       	std	Y+18, r1	; 0x12
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	e8 5d       	subi	r30, 0xD8	; 216
    3ca6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ca8:	60 80       	ld	r6, Z
    3caa:	71 80       	ldd	r7, Z+1	; 0x01
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
    3cac:	77 97       	sbiw	r30, 0x17	; 23
    3cae:	10 82       	st	Z, r1
    3cb0:	31 96       	adiw	r30, 0x01	; 1
    3cb2:	10 82       	st	Z, r1
    3cb4:	31 96       	adiw	r30, 0x01	; 1
    3cb6:	10 82       	st	Z, r1
    3cb8:	31 96       	adiw	r30, 0x01	; 1
    3cba:	10 82       	st	Z, r1
    3cbc:	31 96       	adiw	r30, 0x01	; 1
    3cbe:	10 82       	st	Z, r1
    3cc0:	31 96       	adiw	r30, 0x01	; 1
    3cc2:	10 82       	st	Z, r1


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    3cc4:	41 e0       	ldi	r20, 0x01	; 1
    3cc6:	6f ef       	ldi	r22, 0xFF	; 255
    3cc8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3ccc:	81 11       	cpse	r24, r1
    3cce:	1a c0       	rjmp	.+52     	; 0x3d04 <VL53L0X_perform_ref_spad_management+0xb4>
		Status = VL53L0X_WrByte(Dev,
    3cd0:	40 e0       	ldi	r20, 0x00	; 0
    3cd2:	6f e4       	ldi	r22, 0x4F	; 79
    3cd4:	c4 01       	movw	r24, r8
    3cd6:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
    3cda:	81 11       	cpse	r24, r1
    3cdc:	1a c0       	rjmp	.+52     	; 0x3d12 <VL53L0X_perform_ref_spad_management+0xc2>
		Status = VL53L0X_WrByte(Dev,
    3cde:	4c e2       	ldi	r20, 0x2C	; 44
    3ce0:	6e e4       	ldi	r22, 0x4E	; 78
    3ce2:	c4 01       	movw	r24, r8
    3ce4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
    3ce8:	81 11       	cpse	r24, r1
    3cea:	1e c0       	rjmp	.+60     	; 0x3d28 <VL53L0X_perform_ref_spad_management+0xd8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    3cec:	40 e0       	ldi	r20, 0x00	; 0
    3cee:	6f ef       	ldi	r22, 0xFF	; 255
    3cf0:	c4 01       	movw	r24, r8
    3cf2:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3cf6:	81 11       	cpse	r24, r1
    3cf8:	44 c0       	rjmp	.+136    	; 0x3d82 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_WrByte(Dev,
    3cfa:	44 eb       	ldi	r20, 0xB4	; 180
    3cfc:	66 eb       	ldi	r22, 0xB6	; 182
    3cfe:	c4 01       	movw	r24, r8
    3d00:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
    3d04:	81 11       	cpse	r24, r1
    3d06:	c4 c1       	rjmp	.+904    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
		Status = VL53L0X_WrByte(Dev,
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	60 e8       	ldi	r22, 0x80	; 128
    3d0c:	c4 01       	movw	r24, r8
    3d0e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
    3d12:	81 11       	cpse	r24, r1
    3d14:	76 c1       	rjmp	.+748    	; 0x4002 <VL53L0X_perform_ref_spad_management+0x3b2>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	ae 01       	movw	r20, r28
    3d1a:	4e 5e       	subi	r20, 0xEE	; 238
    3d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d1e:	be 01       	movw	r22, r28
    3d20:	6f 5e       	subi	r22, 0xEF	; 239
    3d22:	7f 4f       	sbci	r23, 0xFF	; 255
    3d24:	c4 01       	movw	r24, r8
    3d26:	6a df       	rcall	.-300    	; 0x3bfc <VL53L0X_perform_ref_calibration>
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
    3d28:	81 11       	cpse	r24, r1
    3d2a:	b2 c1       	rjmp	.+868    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
		lastSpadIndex = currentSpadIndex;
    3d2c:	1f 82       	std	Y+7, r1	; 0x07
    3d2e:	18 86       	std	Y+8, r1	; 0x08
    3d30:	19 86       	std	Y+9, r1	; 0x09
    3d32:	1a 86       	std	Y+10, r1	; 0x0a
		needAptSpads = 0;
		Status = enable_ref_spads(Dev,
    3d34:	ce 01       	movw	r24, r28
    3d36:	07 96       	adiw	r24, 0x07	; 7
    3d38:	9f 93       	push	r25
    3d3a:	8f 93       	push	r24
    3d3c:	1f 92       	push	r1
    3d3e:	1f 92       	push	r1
    3d40:	1f 92       	push	r1
    3d42:	83 e0       	ldi	r24, 0x03	; 3
    3d44:	8f 93       	push	r24
    3d46:	1f 92       	push	r1
    3d48:	1f 92       	push	r1
    3d4a:	1f 92       	push	r1
    3d4c:	1f 92       	push	r1
    3d4e:	0f 2e       	mov	r0, r31
    3d50:	f4 eb       	ldi	r31, 0xB4	; 180
    3d52:	af 2e       	mov	r10, r31
    3d54:	b1 2c       	mov	r11, r1
    3d56:	c1 2c       	mov	r12, r1
    3d58:	d1 2c       	mov	r13, r1
    3d5a:	f0 2d       	mov	r31, r0
    3d5c:	16 e0       	ldi	r17, 0x06	; 6
    3d5e:	e1 2e       	mov	r14, r17
    3d60:	f1 2c       	mov	r15, r1
    3d62:	00 e0       	ldi	r16, 0x00	; 0
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	94 01       	movw	r18, r8
    3d68:	2f 5e       	subi	r18, 0xEF	; 239
    3d6a:	3e 4f       	sbci	r19, 0xFE	; 254
    3d6c:	a4 01       	movw	r20, r8
    3d6e:	49 5e       	subi	r20, 0xE9	; 233
    3d70:	5e 4f       	sbci	r21, 0xFE	; 254
    3d72:	60 e0       	ldi	r22, 0x00	; 0
    3d74:	c4 01       	movw	r24, r8
    3d76:	b0 db       	rcall	.-2208   	; 0x34d8 <enable_ref_spads>
    3d78:	0f b6       	in	r0, 0x3f	; 63
    3d7a:	f8 94       	cli
    3d7c:	de bf       	out	0x3e, r29	; 62
    3d7e:	0f be       	out	0x3f, r0	; 63
    3d80:	cd bf       	out	0x3d, r28	; 61
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
    3d82:	81 11       	cpse	r24, r1
    3d84:	85 c1       	rjmp	.+778    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
		currentSpadIndex = lastSpadIndex;
    3d86:	af 80       	ldd	r10, Y+7	; 0x07
    3d88:	b8 84       	ldd	r11, Y+8	; 0x08
    3d8a:	c9 84       	ldd	r12, Y+9	; 0x09
    3d8c:	da 84       	ldd	r13, Y+10	; 0x0a

		Status = perform_ref_signal_measurement(Dev,
    3d8e:	be 01       	movw	r22, r28
    3d90:	61 5f       	subi	r22, 0xF1	; 241
    3d92:	7f 4f       	sbci	r23, 0xFF	; 255
    3d94:	c4 01       	movw	r24, r8
    3d96:	89 dc       	rcall	.-1774   	; 0x36aa <perform_ref_signal_measurement>
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
    3d98:	81 11       	cpse	r24, r1
    3d9a:	7a c1       	rjmp	.+756    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
    3d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d9e:	98 89       	ldd	r25, Y+16	; 0x10
    3da0:	68 16       	cp	r6, r24
    3da2:	79 06       	cpc	r7, r25
    3da4:	08 f0       	brcs	.+2      	; 0x3da8 <VL53L0X_perform_ref_spad_management+0x158>
    3da6:	57 c1       	rjmp	.+686    	; 0x4056 <VL53L0X_perform_ref_spad_management+0x406>
			(peakSignalRateRef > targetRefRate)) {
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
    3da8:	f4 01       	movw	r30, r8
    3daa:	ef 5e       	subi	r30, 0xEF	; 239
    3dac:	fe 4f       	sbci	r31, 0xFE	; 254
    3dae:	10 82       	st	Z, r1
    3db0:	31 96       	adiw	r30, 0x01	; 1
    3db2:	10 82       	st	Z, r1
    3db4:	31 96       	adiw	r30, 0x01	; 1
    3db6:	10 82       	st	Z, r1
    3db8:	31 96       	adiw	r30, 0x01	; 1
    3dba:	10 82       	st	Z, r1
    3dbc:	31 96       	adiw	r30, 0x01	; 1
    3dbe:	10 82       	st	Z, r1
    3dc0:	31 96       	adiw	r30, 0x01	; 1
    3dc2:	10 82       	st	Z, r1
    3dc4:	05 c0       	rjmp	.+10     	; 0x3dd0 <VL53L0X_perform_ref_spad_management+0x180>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
    3dc6:	3f ef       	ldi	r19, 0xFF	; 255
    3dc8:	a3 1a       	sub	r10, r19
    3dca:	b3 0a       	sbc	r11, r19
    3dcc:	c3 0a       	sbc	r12, r19
    3dce:	d3 0a       	sbc	r13, r19
			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
    3dd0:	c6 01       	movw	r24, r12
    3dd2:	b5 01       	movw	r22, r10
    3dd4:	6c 54       	subi	r22, 0x4C	; 76
    3dd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3dd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3dda:	9f 4f       	sbci	r25, 0xFF	; 255
    3ddc:	39 da       	rcall	.-2958   	; 0x3250 <is_aperture>
    3dde:	81 11       	cpse	r24, r1
    3de0:	06 c0       	rjmp	.+12     	; 0x3dee <VL53L0X_perform_ref_spad_management+0x19e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
    3de2:	4c e2       	ldi	r20, 0x2C	; 44
    3de4:	a4 16       	cp	r10, r20
    3de6:	b1 04       	cpc	r11, r1
    3de8:	c1 04       	cpc	r12, r1
    3dea:	d1 04       	cpc	r13, r1
    3dec:	60 f3       	brcs	.-40     	; 0x3dc6 <VL53L0X_perform_ref_spad_management+0x176>
				currentSpadIndex++;
			}

			needAptSpads = 1;

			Status = enable_ref_spads(Dev,
    3dee:	ce 01       	movw	r24, r28
    3df0:	07 96       	adiw	r24, 0x07	; 7
    3df2:	9f 93       	push	r25
    3df4:	8f 93       	push	r24
    3df6:	1f 92       	push	r1
    3df8:	1f 92       	push	r1
    3dfa:	1f 92       	push	r1
    3dfc:	83 e0       	ldi	r24, 0x03	; 3
    3dfe:	8f 93       	push	r24
    3e00:	df 92       	push	r13
    3e02:	cf 92       	push	r12
    3e04:	bf 92       	push	r11
    3e06:	af 92       	push	r10
    3e08:	0f 2e       	mov	r0, r31
    3e0a:	f4 eb       	ldi	r31, 0xB4	; 180
    3e0c:	af 2e       	mov	r10, r31
    3e0e:	b1 2c       	mov	r11, r1
    3e10:	c1 2c       	mov	r12, r1
    3e12:	d1 2c       	mov	r13, r1
    3e14:	f0 2d       	mov	r31, r0
    3e16:	16 e0       	ldi	r17, 0x06	; 6
    3e18:	e1 2e       	mov	r14, r17
    3e1a:	f1 2c       	mov	r15, r1
    3e1c:	00 e0       	ldi	r16, 0x00	; 0
    3e1e:	10 e0       	ldi	r17, 0x00	; 0
    3e20:	94 01       	movw	r18, r8
    3e22:	2f 5e       	subi	r18, 0xEF	; 239
    3e24:	3e 4f       	sbci	r19, 0xFE	; 254
    3e26:	a4 01       	movw	r20, r8
    3e28:	49 5e       	subi	r20, 0xE9	; 233
    3e2a:	5e 4f       	sbci	r21, 0xFE	; 254
    3e2c:	61 e0       	ldi	r22, 0x01	; 1
    3e2e:	c4 01       	movw	r24, r8
    3e30:	53 db       	rcall	.-2394   	; 0x34d8 <enable_ref_spads>
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    3e32:	0f b6       	in	r0, 0x3f	; 63
    3e34:	f8 94       	cli
    3e36:	de bf       	out	0x3e, r29	; 62
    3e38:	0f be       	out	0x3f, r0	; 63
    3e3a:	cd bf       	out	0x3d, r28	; 61
    3e3c:	81 11       	cpse	r24, r1
    3e3e:	28 c1       	rjmp	.+592    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
				currentSpadIndex = lastSpadIndex;
    3e40:	af 80       	ldd	r10, Y+7	; 0x07
    3e42:	b8 84       	ldd	r11, Y+8	; 0x08
    3e44:	c9 84       	ldd	r12, Y+9	; 0x09
				Status = perform_ref_signal_measurement(Dev,
    3e46:	da 84       	ldd	r13, Y+10	; 0x0a
    3e48:	be 01       	movw	r22, r28
    3e4a:	61 5f       	subi	r22, 0xF1	; 241
    3e4c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e4e:	c4 01       	movw	r24, r8
    3e50:	2c dc       	rcall	.-1960   	; 0x36aa <perform_ref_signal_measurement>
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
    3e52:	81 11       	cpse	r24, r1
    3e54:	1d c1       	rjmp	.+570    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
    3e56:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e58:	98 89       	ldd	r25, Y+16	; 0x10
    3e5a:	68 16       	cp	r6, r24
    3e5c:	79 06       	cpc	r7, r25
    3e5e:	08 f0       	brcs	.+2      	; 0x3e62 <VL53L0X_perform_ref_spad_management+0x212>
    3e60:	03 c1       	rjmp	.+518    	; 0x4068 <VL53L0X_perform_ref_spad_management+0x418>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
    3e62:	b1 e0       	ldi	r27, 0x01	; 1
    3e64:	bf a3       	std	Y+39, r27	; 0x27
					refSpadCount_int = minimumSpadCount;
    3e66:	0f 2e       	mov	r0, r31
    3e68:	f3 e0       	ldi	r31, 0x03	; 3
    3e6a:	2f 2e       	mov	r2, r31
    3e6c:	31 2c       	mov	r3, r1
    3e6e:	41 2c       	mov	r4, r1
    3e70:	51 2c       	mov	r5, r1
    3e72:	f0 2d       	mov	r31, r0
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    3e74:	21 e0       	ldi	r18, 0x01	; 1
    3e76:	30 e0       	ldi	r19, 0x00	; 0
    3e78:	40 e0       	ldi	r20, 0x00	; 0
    3e7a:	50 e0       	ldi	r21, 0x00	; 0
    3e7c:	29 8f       	std	Y+25, r18	; 0x19
    3e7e:	3a 8f       	std	Y+26, r19	; 0x1a
    3e80:	4b 8f       	std	Y+27, r20	; 0x1b
    3e82:	5c 8f       	std	Y+28, r21	; 0x1c
    3e84:	fd c0       	rjmp	.+506    	; 0x4080 <VL53L0X_perform_ref_spad_management+0x430>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
    3e86:	39 8d       	ldd	r19, Y+25	; 0x19
    3e88:	3f a3       	std	Y+39, r19	; 0x27
		refSpadCount_int	= minimumSpadCount;

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
    3e8a:	26 e0       	ldi	r18, 0x06	; 6
    3e8c:	f4 01       	movw	r30, r8
    3e8e:	ef 5e       	subi	r30, 0xEF	; 239
    3e90:	fe 4f       	sbci	r31, 0xFE	; 254
    3e92:	de 01       	movw	r26, r28
    3e94:	11 96       	adiw	r26, 0x01	; 1
    3e96:	01 90       	ld	r0, Z+
    3e98:	0d 92       	st	X+, r0
    3e9a:	2a 95       	dec	r18
    3e9c:	e1 f7       	brne	.-8      	; 0x3e96 <VL53L0X_perform_ref_spad_management+0x246>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
    3e9e:	86 19       	sub	r24, r6
    3ea0:	97 09       	sbc	r25, r7
    3ea2:	9c 01       	movw	r18, r24
    3ea4:	22 f4       	brpl	.+8      	; 0x3eae <VL53L0X_perform_ref_spad_management+0x25e>
    3ea6:	22 27       	eor	r18, r18
    3ea8:	33 27       	eor	r19, r19
    3eaa:	28 1b       	sub	r18, r24
    3eac:	39 0b       	sbc	r19, r25
    3eae:	c9 01       	movw	r24, r18
    3eb0:	33 0f       	add	r19, r19
    3eb2:	aa 0b       	sbc	r26, r26
    3eb4:	bb 0b       	sbc	r27, r27
    3eb6:	8f 8f       	std	Y+31, r24	; 0x1f
    3eb8:	98 a3       	std	Y+32, r25	; 0x20
    3eba:	a9 a3       	std	Y+33, r26	; 0x21
    3ebc:	ba a3       	std	Y+34, r27	; 0x22
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
		refSpadCount_int	= minimumSpadCount;
    3ebe:	23 e0       	ldi	r18, 0x03	; 3
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	40 e0       	ldi	r20, 0x00	; 0
    3ec4:	50 e0       	ldi	r21, 0x00	; 0
    3ec6:	2d 8b       	std	Y+21, r18	; 0x15
    3ec8:	3e 8b       	std	Y+22, r19	; 0x16
    3eca:	4f 8b       	std	Y+23, r20	; 0x17
    3ecc:	58 8f       	std	Y+24, r21	; 0x18
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
    3ece:	a4 01       	movw	r20, r8
    3ed0:	49 5e       	subi	r20, 0xE9	; 233
    3ed2:	5e 4f       	sbci	r21, 0xFE	; 254
    3ed4:	5e 8f       	std	Y+30, r21	; 0x1e
    3ed6:	4d 8f       	std	Y+29, r20	; 0x1d

			(refSpadCount_int)++;

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
    3ed8:	c4 01       	movw	r24, r8
    3eda:	8f 5e       	subi	r24, 0xEF	; 239
    3edc:	9e 4f       	sbci	r25, 0xFE	; 254
    3ede:	9c 8b       	std	Y+20, r25	; 0x14
    3ee0:	8b 8b       	std	Y+19, r24	; 0x13
		lastSignalRateDiff = abs(peakSignalRateRef -
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
    3ee2:	de 01       	movw	r26, r28
    3ee4:	1b 96       	adiw	r26, 0x0b	; 11
    3ee6:	7d 01       	movw	r14, r26
    3ee8:	96 01       	movw	r18, r12
    3eea:	85 01       	movw	r16, r10
    3eec:	46 e0       	ldi	r20, 0x06	; 6
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	60 e0       	ldi	r22, 0x00	; 0
    3ef2:	70 e0       	ldi	r23, 0x00	; 0
    3ef4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3ef6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ef8:	29 d9       	rcall	.-3502   	; 0x314c <get_next_good_spad>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
    3efa:	cb 84       	ldd	r12, Y+11	; 0x0b
    3efc:	dc 84       	ldd	r13, Y+12	; 0x0c
    3efe:	ed 84       	ldd	r14, Y+13	; 0x0d
    3f00:	fe 84       	ldd	r15, Y+14	; 0x0e
    3f02:	bf ef       	ldi	r27, 0xFF	; 255
    3f04:	cb 16       	cp	r12, r27
    3f06:	db 06       	cpc	r13, r27
    3f08:	eb 06       	cpc	r14, r27
    3f0a:	fb 06       	cpc	r15, r27
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <VL53L0X_perform_ref_spad_management+0x2c0>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((u32)startSelect + nextGoodSpad) !=
    3f0e:	bf c0       	rjmp	.+382    	; 0x408e <VL53L0X_perform_ref_spad_management+0x43e>
    3f10:	c7 01       	movw	r24, r14
    3f12:	b6 01       	movw	r22, r12
    3f14:	6c 54       	subi	r22, 0x4C	; 76
    3f16:	7f 4f       	sbci	r23, 0xFF	; 255
    3f18:	8f 4f       	sbci	r24, 0xFF	; 255
    3f1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f1c:	99 d9       	rcall	.-3278   	; 0x3250 <is_aperture>
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	a0 e0       	ldi	r26, 0x00	; 0
    3f22:	b0 e0       	ldi	r27, 0x00	; 0
    3f24:	29 8d       	ldd	r18, Y+25	; 0x19
    3f26:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3f28:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3f2a:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3f2c:	82 17       	cp	r24, r18
    3f2e:	93 07       	cpc	r25, r19
    3f30:	a4 07       	cpc	r26, r20
    3f32:	b5 07       	cpc	r27, r21
    3f34:	09 f0       	breq	.+2      	; 0x3f38 <VL53L0X_perform_ref_spad_management+0x2e8>
    3f36:	71 c0       	rjmp	.+226    	; 0x401a <VL53L0X_perform_ref_spad_management+0x3ca>
				 */
				complete = 1;
				break;
			}

			(refSpadCount_int)++;
    3f38:	2d 88       	ldd	r2, Y+21	; 0x15
    3f3a:	3e 88       	ldd	r3, Y+22	; 0x16
    3f3c:	4f 88       	ldd	r4, Y+23	; 0x17
    3f3e:	58 8c       	ldd	r5, Y+24	; 0x18
    3f40:	3f ef       	ldi	r19, 0xFF	; 255
    3f42:	23 1a       	sub	r2, r19
    3f44:	33 0a       	sbc	r3, r19
    3f46:	43 0a       	sbc	r4, r19

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
    3f48:	53 0a       	sbc	r5, r19
    3f4a:	97 01       	movw	r18, r14
    3f4c:	86 01       	movw	r16, r12
    3f4e:	46 e0       	ldi	r20, 0x06	; 6
    3f50:	50 e0       	ldi	r21, 0x00	; 0
    3f52:	60 e0       	ldi	r22, 0x00	; 0
    3f54:	70 e0       	ldi	r23, 0x00	; 0
    3f56:	8b 89       	ldd	r24, Y+19	; 0x13
    3f58:	9c 89       	ldd	r25, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables,
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    3f5a:	97 d9       	rcall	.-3282   	; 0x328a <enable_spad_bit>
    3f5c:	81 11       	cpse	r24, r1
				currentSpadIndex++;
    3f5e:	98 c0       	rjmp	.+304    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
    3f60:	56 01       	movw	r10, r12
    3f62:	67 01       	movw	r12, r14
    3f64:	4f ef       	ldi	r20, 0xFF	; 255
    3f66:	a4 1a       	sub	r10, r20
    3f68:	b4 0a       	sbc	r11, r20
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
    3f6a:	c4 0a       	sbc	r12, r20
    3f6c:	d4 0a       	sbc	r13, r20
    3f6e:	6b 89       	ldd	r22, Y+19	; 0x13
    3f70:	7c 89       	ldd	r23, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables);
			}

			if (Status != VL53L0X_ERROR_NONE)
    3f72:	c4 01       	movw	r24, r8
    3f74:	97 da       	rcall	.-2770   	; 0x34a4 <set_ref_spad_map>
				break;

			Status = perform_ref_signal_measurement(Dev,
    3f76:	81 11       	cpse	r24, r1
    3f78:	8b c0       	rjmp	.+278    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
    3f7a:	be 01       	movw	r22, r28
    3f7c:	61 5f       	subi	r22, 0xF1	; 241
    3f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f80:	c4 01       	movw	r24, r8
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
    3f82:	93 db       	rcall	.-2266   	; 0x36aa <perform_ref_signal_measurement>
    3f84:	81 11       	cpse	r24, r1
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    3f86:	84 c0       	rjmp	.+264    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
    3f88:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f8a:	98 89       	ldd	r25, Y+16	; 0x10
    3f8c:	9c 01       	movw	r18, r24
    3f8e:	26 19       	sub	r18, r6
    3f90:	37 09       	sbc	r19, r7
    3f92:	a9 01       	movw	r20, r18
    3f94:	22 f4       	brpl	.+8      	; 0x3f9e <VL53L0X_perform_ref_spad_management+0x34e>
    3f96:	44 27       	eor	r20, r20
    3f98:	55 27       	eor	r21, r21
    3f9a:	42 1b       	sub	r20, r18
    3f9c:	53 0b       	sbc	r21, r19
    3f9e:	05 2e       	mov	r0, r21
    3fa0:	00 0c       	add	r0, r0
    3fa2:	66 0b       	sbc	r22, r22

			if (peakSignalRateRef > targetRefRate) {
    3fa4:	77 0b       	sbc	r23, r23
    3fa6:	68 16       	cp	r6, r24
    3fa8:	79 06       	cpc	r7, r25
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
    3faa:	c8 f4       	brcc	.+50     	; 0x3fde <VL53L0X_perform_ref_spad_management+0x38e>
    3fac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fae:	98 a1       	ldd	r25, Y+32	; 0x20
    3fb0:	a9 a1       	ldd	r26, Y+33	; 0x21
    3fb2:	ba a1       	ldd	r27, Y+34	; 0x22
    3fb4:	84 17       	cp	r24, r20
    3fb6:	95 07       	cpc	r25, r21
    3fb8:	a6 07       	cpc	r26, r22
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
    3fba:	b7 07       	cpc	r27, r23
    3fbc:	90 f5       	brcc	.+100    	; 0x4022 <VL53L0X_perform_ref_spad_management+0x3d2>
    3fbe:	be 01       	movw	r22, r28
    3fc0:	6f 5f       	subi	r22, 0xFF	; 255
    3fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc4:	c4 01       	movw	r24, r8
							lastSpadArray);
					memcpy(
    3fc6:	6e da       	rcall	.-2852   	; 0x34a4 <set_ref_spad_map>
    3fc8:	96 e0       	ldi	r25, 0x06	; 6
    3fca:	fe 01       	movw	r30, r28
    3fcc:	31 96       	adiw	r30, 0x01	; 1
    3fce:	d4 01       	movw	r26, r8
    3fd0:	af 5e       	subi	r26, 0xEF	; 239
    3fd2:	be 4f       	sbci	r27, 0xFE	; 254
    3fd4:	01 90       	ld	r0, Z+
    3fd6:	0d 92       	st	X+, r0
    3fd8:	9a 95       	dec	r25
    3fda:	e1 f7       	brne	.-8      	; 0x3fd4 <VL53L0X_perform_ref_spad_management+0x384>
				}
				complete = 1;
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
				memcpy(lastSpadArray,
    3fdc:	17 c0       	rjmp	.+46     	; 0x400c <VL53L0X_perform_ref_spad_management+0x3bc>
    3fde:	86 e0       	ldi	r24, 0x06	; 6
    3fe0:	eb 89       	ldd	r30, Y+19	; 0x13
    3fe2:	fc 89       	ldd	r31, Y+20	; 0x14
    3fe4:	de 01       	movw	r26, r28
    3fe6:	11 96       	adiw	r26, 0x01	; 1
    3fe8:	01 90       	ld	r0, Z+
    3fea:	0d 92       	st	X+, r0
    3fec:	8a 95       	dec	r24
				 */
				complete = 1;
				break;
			}

			(refSpadCount_int)++;
    3fee:	e1 f7       	brne	.-8      	; 0x3fe8 <VL53L0X_perform_ref_spad_management+0x398>
    3ff0:	2d 8a       	std	Y+21, r2	; 0x15
    3ff2:	3e 8a       	std	Y+22, r3	; 0x16
    3ff4:	4f 8a       	std	Y+23, r4	; 0x17
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    3ff6:	58 8e       	std	Y+24, r5	; 0x18
    3ff8:	4f 8f       	std	Y+31, r20	; 0x1f
    3ffa:	58 a3       	std	Y+32, r21	; 0x20
    3ffc:	69 a3       	std	Y+33, r22	; 0x21
    3ffe:	7a a3       	std	Y+34, r23	; 0x22
    4000:	70 cf       	rjmp	.-288    	; 0x3ee2 <VL53L0X_perform_ref_spad_management+0x292>
    4002:	1f a2       	std	Y+39, r1	; 0x27
    4004:	1d 8a       	std	Y+21, r1	; 0x15
    4006:	1e 8a       	std	Y+22, r1	; 0x16
    4008:	1f 8a       	std	Y+23, r1	; 0x17
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
    400a:	18 8e       	std	Y+24, r1	; 0x18
    400c:	81 11       	cpse	r24, r1
    400e:	40 c0       	rjmp	.+128    	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
    4010:	2d 88       	ldd	r2, Y+21	; 0x15
    4012:	3e 88       	ldd	r3, Y+22	; 0x16
    4014:	4f 88       	ldd	r4, Y+23	; 0x17
    4016:	58 8c       	ldd	r5, Y+24	; 0x18
    4018:	04 c0       	rjmp	.+8      	; 0x4022 <VL53L0X_perform_ref_spad_management+0x3d2>
    401a:	2d 88       	ldd	r2, Y+21	; 0x15
    401c:	3e 88       	ldd	r3, Y+22	; 0x16
    401e:	4f 88       	ldd	r4, Y+23	; 0x17
		*refSpadCount = refSpadCount_int;
    4020:	58 8c       	ldd	r5, Y+24	; 0x18
    4022:	ab a1       	ldd	r26, Y+35	; 0x23
    4024:	bc a1       	ldd	r27, Y+36	; 0x24
    4026:	2d 92       	st	X+, r2
    4028:	3d 92       	st	X+, r3
    402a:	4d 92       	st	X+, r4
    402c:	5c 92       	st	X, r5
		*isApertureSpads = isApertureSpads_int;
    402e:	13 97       	sbiw	r26, 0x03	; 3
    4030:	2f a1       	ldd	r18, Y+39	; 0x27
    4032:	ed a1       	ldd	r30, Y+37	; 0x25
    4034:	fe a1       	ldd	r31, Y+38	; 0x26

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
    4036:	20 83       	st	Z, r18
    4038:	f4 01       	movw	r30, r8
    403a:	ec 5f       	subi	r30, 0xFC	; 252
    403c:	fe 4f       	sbci	r31, 0xFE	; 254
    403e:	81 e0       	ldi	r24, 0x01	; 1
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    4040:	80 83       	st	Z, r24
    4042:	32 97       	sbiw	r30, 0x02	; 2
    4044:	8c 91       	ld	r24, X
			ReferenceSpadCount, (u8)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    4046:	80 83       	st	Z, r24
    4048:	ad a1       	ldd	r26, Y+37	; 0x25
    404a:	be a1       	ldd	r27, Y+38	; 0x26
    404c:	8c 91       	ld	r24, X
    404e:	31 96       	adiw	r30, 0x01	; 1
    4050:	80 83       	st	Z, r24
    4052:	80 e0       	ldi	r24, 0x00	; 0
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
	u8	 isApertureSpads_int = 0;
    4054:	1d c0       	rjmp	.+58     	; 0x4090 <VL53L0X_perform_ref_spad_management+0x440>
	u32 signalRateDiff = 0;
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
    4056:	1f a2       	std	Y+39, r1	; 0x27
    4058:	21 2c       	mov	r2, r1
    405a:	31 2c       	mov	r3, r1
					isApertureSpads_int = 1;
					refSpadCount_int = minimumSpadCount;
				}
			}
		} else {
			needAptSpads = 0;
    405c:	21 01       	movw	r4, r2
    405e:	19 8e       	std	Y+25, r1	; 0x19
    4060:	1a 8e       	std	Y+26, r1	; 0x1a
    4062:	1b 8e       	std	Y+27, r1	; 0x1b
    4064:	1c 8e       	std	Y+28, r1	; 0x1c
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
	u8	 isApertureSpads_int = 0;
    4066:	0c c0       	rjmp	.+24     	; 0x4080 <VL53L0X_perform_ref_spad_management+0x430>
	u32 signalRateDiff = 0;
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
    4068:	1f a2       	std	Y+39, r1	; 0x27
    406a:	21 2c       	mov	r2, r1
    406c:	31 2c       	mov	r3, r1
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    406e:	21 01       	movw	r4, r2
    4070:	21 e0       	ldi	r18, 0x01	; 1
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	40 e0       	ldi	r20, 0x00	; 0
    4076:	50 e0       	ldi	r21, 0x00	; 0
    4078:	29 8f       	std	Y+25, r18	; 0x19
    407a:	3a 8f       	std	Y+26, r19	; 0x1a
    407c:	4b 8f       	std	Y+27, r20	; 0x1b
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
		(peakSignalRateRef < targetRefRate)) {
    407e:	5c 8f       	std	Y+28, r21	; 0x1c
    4080:	8f 85       	ldd	r24, Y+15	; 0x0f
		} else {
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
    4082:	98 89       	ldd	r25, Y+16	; 0x10
    4084:	86 15       	cp	r24, r6
    4086:	97 05       	cpc	r25, r7
    4088:	08 f4       	brcc	.+2      	; 0x408c <VL53L0X_perform_ref_spad_management+0x43c>
    408a:	fd ce       	rjmp	.-518    	; 0x3e86 <VL53L0X_perform_ref_spad_management+0x236>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    408c:	ca cf       	rjmp	.-108    	; 0x4022 <VL53L0X_perform_ref_spad_management+0x3d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
}
    408e:	8e ec       	ldi	r24, 0xCE	; 206
    4090:	a7 96       	adiw	r28, 0x27	; 39
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	f8 94       	cli
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	cd bf       	out	0x3d, r28	; 61
    409c:	df 91       	pop	r29
    409e:	cf 91       	pop	r28
    40a0:	1f 91       	pop	r17
    40a2:	0f 91       	pop	r16
    40a4:	ff 90       	pop	r15
    40a6:	ef 90       	pop	r14
    40a8:	df 90       	pop	r13
    40aa:	cf 90       	pop	r12
    40ac:	bf 90       	pop	r11
    40ae:	af 90       	pop	r10
    40b0:	9f 90       	pop	r9
    40b2:	8f 90       	pop	r8
    40b4:	7f 90       	pop	r7
    40b6:	6f 90       	pop	r6
    40b8:	5f 90       	pop	r5
    40ba:	4f 90       	pop	r4
    40bc:	3f 90       	pop	r3
    40be:	2f 90       	pop	r2
    40c0:	08 95       	ret

000040c2 <VL53L0X_set_ref_calibration>:
	return Status;
}

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		u8 VhvSettings, u8 PhaseCal)
{
    40c2:	af 92       	push	r10
    40c4:	cf 92       	push	r12
    40c6:	ef 92       	push	r14
    40c8:	ff 92       	push	r15
    40ca:	0f 93       	push	r16
    40cc:	1f 93       	push	r17
    40ce:	cf 93       	push	r28
    40d0:	df 93       	push	r29
    40d2:	00 d0       	rcall	.+0      	; 0x40d4 <VL53L0X_set_ref_calibration+0x12>
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	24 2f       	mov	r18, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 pVhvSettings;
	u8 pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
    40da:	aa 24       	eor	r10, r10
    40dc:	a3 94       	inc	r10
    40de:	cc 24       	eor	r12, r12
    40e0:	c3 94       	inc	r12
    40e2:	ae 01       	movw	r20, r28
    40e4:	4e 5f       	subi	r20, 0xFE	; 254
    40e6:	5f 4f       	sbci	r21, 0xFF	; 255
    40e8:	7a 01       	movw	r14, r20
    40ea:	8e 01       	movw	r16, r28
    40ec:	0f 5f       	subi	r16, 0xFF	; 255
    40ee:	1f 4f       	sbci	r17, 0xFF	; 255
    40f0:	46 2f       	mov	r20, r22
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	63 dc       	rcall	.-1850   	; 0x39bc <VL53L0X_ref_calibration_io>
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
}
    40f6:	0f 90       	pop	r0
    40f8:	0f 90       	pop	r0
    40fa:	df 91       	pop	r29
    40fc:	cf 91       	pop	r28
    40fe:	1f 91       	pop	r17
    4100:	0f 91       	pop	r16
    4102:	ff 90       	pop	r15
    4104:	ef 90       	pop	r14
    4106:	cf 90       	pop	r12
    4108:	af 90       	pop	r10
    410a:	08 95       	ret

0000410c <VL53L0X_get_ref_calibration>:

VL53L0X_Error VL53L0X_get_ref_calibration(VL53L0X_DEV Dev,
		u8 *pVhvSettings, u8 *pPhaseCal)
{
    410c:	af 92       	push	r10
    410e:	cf 92       	push	r12
    4110:	ef 92       	push	r14
    4112:	ff 92       	push	r15
    4114:	0f 93       	push	r16
    4116:	1f 93       	push	r17
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;

	Status = VL53L0X_ref_calibration_io(Dev, 1,
    4118:	aa 24       	eor	r10, r10
    411a:	a3 94       	inc	r10
    411c:	cc 24       	eor	r12, r12
    411e:	c3 94       	inc	r12
    4120:	7a 01       	movw	r14, r20
    4122:	8b 01       	movw	r16, r22
    4124:	20 e0       	ldi	r18, 0x00	; 0
    4126:	40 e0       	ldi	r20, 0x00	; 0
    4128:	61 e0       	ldi	r22, 0x01	; 1
    412a:	48 dc       	rcall	.-1904   	; 0x39bc <VL53L0X_ref_calibration_io>
		VhvSettings, PhaseCal,
		pVhvSettings, pPhaseCal,
		1, 1);

	return Status;
}
    412c:	1f 91       	pop	r17
    412e:	0f 91       	pop	r16
    4130:	ff 90       	pop	r15
    4132:	ef 90       	pop	r14
    4134:	cf 90       	pop	r12
    4136:	af 90       	pop	r10
    4138:	08 95       	ret

0000413a <VL53L0X_measurement_poll_for_completion>:
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
    413a:	ef 92       	push	r14
    413c:	ff 92       	push	r15
    413e:	0f 93       	push	r16
    4140:	1f 93       	push	r17
    4142:	cf 93       	push	r28
    4144:	df 93       	push	r29
    4146:	1f 92       	push	r1
    4148:	cd b7       	in	r28, 0x3d	; 61
    414a:	de b7       	in	r29, 0x3e	; 62
    414c:	7c 01       	movw	r14, r24
    414e:	19 82       	std	Y+1, r1	; 0x01
    4150:	00 e0       	ldi	r16, 0x00	; 0
    4152:	10 e0       	ldi	r17, 0x00	; 0
    4154:	be 01       	movw	r22, r28
    4156:	6f 5f       	subi	r22, 0xFF	; 255
    4158:	7f 4f       	sbci	r23, 0xFF	; 255
    415a:	c7 01       	movw	r24, r14
    415c:	0e 94 ef 17 	call	0x2fde	; 0x2fde <VL53L0X_GetMeasurementDataReady>
    4160:	81 11       	cpse	r24, r1
    4162:	0e c0       	rjmp	.+28     	; 0x4180 <VL53L0X_measurement_poll_for_completion+0x46>
    4164:	99 81       	ldd	r25, Y+1	; 0x01
    4166:	91 30       	cpi	r25, 0x01	; 1
    4168:	59 f0       	breq	.+22     	; 0x4180 <VL53L0X_measurement_poll_for_completion+0x46>
    416a:	0f 5f       	subi	r16, 0xFF	; 255
    416c:	1f 4f       	sbci	r17, 0xFF	; 255
    416e:	00 3d       	cpi	r16, 0xD0	; 208
    4170:	87 e0       	ldi	r24, 0x07	; 7
    4172:	18 07       	cpc	r17, r24
    4174:	21 f0       	breq	.+8      	; 0x417e <VL53L0X_measurement_poll_for_completion+0x44>
    4176:	c7 01       	movw	r24, r14
    4178:	0e 94 bb 32 	call	0x6576	; 0x6576 <VL53L0X_PollingDelay>
    417c:	eb cf       	rjmp	.-42     	; 0x4154 <VL53L0X_measurement_poll_for_completion+0x1a>
    417e:	89 ef       	ldi	r24, 0xF9	; 249
    4180:	0f 90       	pop	r0
    4182:	df 91       	pop	r29
    4184:	cf 91       	pop	r28
    4186:	1f 91       	pop	r17
    4188:	0f 91       	pop	r16
    418a:	ff 90       	pop	r15
    418c:	ef 90       	pop	r14
    418e:	08 95       	ret

00004190 <VL53L0X_isqrt>:
    4190:	cf 92       	push	r12
    4192:	df 92       	push	r13
    4194:	ef 92       	push	r14
    4196:	ff 92       	push	r15
    4198:	0f 93       	push	r16
    419a:	1f 93       	push	r17
    419c:	8b 01       	movw	r16, r22
    419e:	9c 01       	movw	r18, r24
    41a0:	01 15       	cp	r16, r1
    41a2:	11 05       	cpc	r17, r1
    41a4:	21 05       	cpc	r18, r1
    41a6:	80 e4       	ldi	r24, 0x40	; 64
    41a8:	38 07       	cpc	r19, r24
    41aa:	b0 f4       	brcc	.+44     	; 0x41d8 <VL53L0X_isqrt+0x48>
    41ac:	80 e0       	ldi	r24, 0x00	; 0
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	a0 e0       	ldi	r26, 0x00	; 0
    41b2:	b0 e4       	ldi	r27, 0x40	; 64
    41b4:	b6 95       	lsr	r27
    41b6:	a7 95       	ror	r26
    41b8:	97 95       	ror	r25
    41ba:	87 95       	ror	r24
    41bc:	b6 95       	lsr	r27
    41be:	a7 95       	ror	r26
    41c0:	97 95       	ror	r25
    41c2:	87 95       	ror	r24
    41c4:	08 17       	cp	r16, r24
    41c6:	19 07       	cpc	r17, r25
    41c8:	2a 07       	cpc	r18, r26
    41ca:	3b 07       	cpc	r19, r27
    41cc:	98 f3       	brcs	.-26     	; 0x41b4 <VL53L0X_isqrt+0x24>
    41ce:	00 97       	sbiw	r24, 0x00	; 0
    41d0:	a1 05       	cpc	r26, r1
    41d2:	b1 05       	cpc	r27, r1
    41d4:	29 f4       	brne	.+10     	; 0x41e0 <VL53L0X_isqrt+0x50>
    41d6:	30 c0       	rjmp	.+96     	; 0x4238 <VL53L0X_isqrt+0xa8>
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	a0 e0       	ldi	r26, 0x00	; 0
    41de:	b0 e4       	ldi	r27, 0x40	; 64
    41e0:	40 e0       	ldi	r20, 0x00	; 0
    41e2:	50 e0       	ldi	r21, 0x00	; 0
    41e4:	ba 01       	movw	r22, r20
    41e6:	6a 01       	movw	r12, r20
    41e8:	7b 01       	movw	r14, r22
    41ea:	c8 0e       	add	r12, r24
    41ec:	d9 1e       	adc	r13, r25
    41ee:	ea 1e       	adc	r14, r26
    41f0:	fb 1e       	adc	r15, r27
    41f2:	0c 15       	cp	r16, r12
    41f4:	1d 05       	cpc	r17, r13
    41f6:	2e 05       	cpc	r18, r14
    41f8:	3f 05       	cpc	r19, r15
    41fa:	68 f0       	brcs	.+26     	; 0x4216 <VL53L0X_isqrt+0x86>
    41fc:	0c 19       	sub	r16, r12
    41fe:	1d 09       	sbc	r17, r13
    4200:	2e 09       	sbc	r18, r14
    4202:	3f 09       	sbc	r19, r15
    4204:	76 95       	lsr	r23
    4206:	67 95       	ror	r22
    4208:	57 95       	ror	r21
    420a:	47 95       	ror	r20
    420c:	48 0f       	add	r20, r24
    420e:	59 1f       	adc	r21, r25
    4210:	6a 1f       	adc	r22, r26
    4212:	7b 1f       	adc	r23, r27
    4214:	04 c0       	rjmp	.+8      	; 0x421e <VL53L0X_isqrt+0x8e>
    4216:	76 95       	lsr	r23
    4218:	67 95       	ror	r22
    421a:	57 95       	ror	r21
    421c:	47 95       	ror	r20
    421e:	b6 95       	lsr	r27
    4220:	a7 95       	ror	r26
    4222:	97 95       	ror	r25
    4224:	87 95       	ror	r24
    4226:	b6 95       	lsr	r27
    4228:	a7 95       	ror	r26
    422a:	97 95       	ror	r25
    422c:	87 95       	ror	r24
    422e:	00 97       	sbiw	r24, 0x00	; 0
    4230:	a1 05       	cpc	r26, r1
    4232:	b1 05       	cpc	r27, r1
    4234:	c1 f6       	brne	.-80     	; 0x41e6 <VL53L0X_isqrt+0x56>
    4236:	03 c0       	rjmp	.+6      	; 0x423e <VL53L0X_isqrt+0xae>
    4238:	40 e0       	ldi	r20, 0x00	; 0
    423a:	50 e0       	ldi	r21, 0x00	; 0
    423c:	ba 01       	movw	r22, r20
    423e:	cb 01       	movw	r24, r22
    4240:	ba 01       	movw	r22, r20
    4242:	1f 91       	pop	r17
    4244:	0f 91       	pop	r16
    4246:	ff 90       	pop	r15
    4248:	ef 90       	pop	r14
    424a:	df 90       	pop	r13
    424c:	cf 90       	pop	r12
    424e:	08 95       	ret

00004250 <VL53L0X_device_read_strobe>:
    4250:	af 92       	push	r10
    4252:	bf 92       	push	r11
    4254:	cf 92       	push	r12
    4256:	df 92       	push	r13
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	1f 93       	push	r17
    425e:	cf 93       	push	r28
    4260:	df 93       	push	r29
    4262:	1f 92       	push	r1
    4264:	cd b7       	in	r28, 0x3d	; 61
    4266:	de b7       	in	r29, 0x3e	; 62
    4268:	5c 01       	movw	r10, r24
    426a:	40 e0       	ldi	r20, 0x00	; 0
    426c:	63 e8       	ldi	r22, 0x83	; 131
    426e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4272:	18 2f       	mov	r17, r24
    4274:	81 11       	cpse	r24, r1
    4276:	26 c0       	rjmp	.+76     	; 0x42c4 <VL53L0X_device_read_strobe+0x74>
    4278:	c1 2c       	mov	r12, r1
    427a:	d1 2c       	mov	r13, r1
    427c:	76 01       	movw	r14, r12
    427e:	ae 01       	movw	r20, r28
    4280:	4f 5f       	subi	r20, 0xFF	; 255
    4282:	5f 4f       	sbci	r21, 0xFF	; 255
    4284:	63 e8       	ldi	r22, 0x83	; 131
    4286:	c5 01       	movw	r24, r10
    4288:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    428c:	18 2f       	mov	r17, r24
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	81 11       	cpse	r24, r1
    4292:	10 c0       	rjmp	.+32     	; 0x42b4 <VL53L0X_device_read_strobe+0x64>
    4294:	11 11       	cpse	r17, r1
    4296:	0e c0       	rjmp	.+28     	; 0x42b4 <VL53L0X_device_read_strobe+0x64>
    4298:	8f ef       	ldi	r24, 0xFF	; 255
    429a:	c8 1a       	sub	r12, r24
    429c:	d8 0a       	sbc	r13, r24
    429e:	e8 0a       	sbc	r14, r24
    42a0:	f8 0a       	sbc	r15, r24
    42a2:	80 ed       	ldi	r24, 0xD0	; 208
    42a4:	c8 16       	cp	r12, r24
    42a6:	87 e0       	ldi	r24, 0x07	; 7
    42a8:	d8 06       	cpc	r13, r24
    42aa:	e1 04       	cpc	r14, r1
    42ac:	f1 04       	cpc	r15, r1
    42ae:	39 f7       	brne	.-50     	; 0x427e <VL53L0X_device_read_strobe+0x2e>
    42b0:	19 ef       	ldi	r17, 0xF9	; 249
    42b2:	08 c0       	rjmp	.+16     	; 0x42c4 <VL53L0X_device_read_strobe+0x74>
    42b4:	80 ed       	ldi	r24, 0xD0	; 208
    42b6:	c8 16       	cp	r12, r24
    42b8:	87 e0       	ldi	r24, 0x07	; 7
    42ba:	d8 06       	cpc	r13, r24
    42bc:	e1 04       	cpc	r14, r1
    42be:	f1 04       	cpc	r15, r1
    42c0:	08 f0       	brcs	.+2      	; 0x42c4 <VL53L0X_device_read_strobe+0x74>
    42c2:	19 ef       	ldi	r17, 0xF9	; 249
    42c4:	41 e0       	ldi	r20, 0x01	; 1
    42c6:	63 e8       	ldi	r22, 0x83	; 131
    42c8:	c5 01       	movw	r24, r10
    42ca:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    42ce:	81 2b       	or	r24, r17
    42d0:	0f 90       	pop	r0
    42d2:	df 91       	pop	r29
    42d4:	cf 91       	pop	r28
    42d6:	1f 91       	pop	r17
    42d8:	ff 90       	pop	r15
    42da:	ef 90       	pop	r14
    42dc:	df 90       	pop	r13
    42de:	cf 90       	pop	r12
    42e0:	bf 90       	pop	r11
    42e2:	af 90       	pop	r10
    42e4:	08 95       	ret

000042e6 <VL53L0X_get_info_from_device>:
    42e6:	2f 92       	push	r2
    42e8:	3f 92       	push	r3
    42ea:	4f 92       	push	r4
    42ec:	5f 92       	push	r5
    42ee:	6f 92       	push	r6
    42f0:	7f 92       	push	r7
    42f2:	8f 92       	push	r8
    42f4:	9f 92       	push	r9
    42f6:	af 92       	push	r10
    42f8:	bf 92       	push	r11
    42fa:	cf 92       	push	r12
    42fc:	df 92       	push	r13
    42fe:	ef 92       	push	r14
    4300:	ff 92       	push	r15
    4302:	0f 93       	push	r16
    4304:	1f 93       	push	r17
    4306:	cf 93       	push	r28
    4308:	df 93       	push	r29
    430a:	cd b7       	in	r28, 0x3d	; 61
    430c:	de b7       	in	r29, 0x3e	; 62
    430e:	aa 97       	sbiw	r28, 0x2a	; 42
    4310:	0f b6       	in	r0, 0x3f	; 63
    4312:	f8 94       	cli
    4314:	de bf       	out	0x3e, r29	; 62
    4316:	0f be       	out	0x3f, r0	; 63
    4318:	cd bf       	out	0x3d, r28	; 61
    431a:	18 86       	std	Y+8, r1	; 0x08
    431c:	19 86       	std	Y+9, r1	; 0x09
    431e:	1a 86       	std	Y+10, r1	; 0x0a
    4320:	1b 86       	std	Y+11, r1	; 0x0b
    4322:	1c 86       	std	Y+12, r1	; 0x0c
    4324:	1d 86       	std	Y+13, r1	; 0x0d
    4326:	1e 86       	std	Y+14, r1	; 0x0e
    4328:	1f 86       	std	Y+15, r1	; 0x0f
    432a:	fc 01       	movw	r30, r24
    432c:	e1 52       	subi	r30, 0x21	; 33
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	d0 80       	ld	r13, Z
    4332:	27 e0       	ldi	r18, 0x07	; 7
    4334:	d2 16       	cp	r13, r18
    4336:	09 f4       	brne	.+2      	; 0x433a <VL53L0X_get_info_from_device+0x54>
    4338:	76 c3       	rjmp	.+1772   	; 0x4a26 <VL53L0X_get_info_from_device+0x740>
    433a:	06 2f       	mov	r16, r22
    433c:	7c 01       	movw	r14, r24
    433e:	41 e0       	ldi	r20, 0x01	; 1
    4340:	60 e8       	ldi	r22, 0x80	; 128
    4342:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4346:	18 2f       	mov	r17, r24
    4348:	41 e0       	ldi	r20, 0x01	; 1
    434a:	6f ef       	ldi	r22, 0xFF	; 255
    434c:	c7 01       	movw	r24, r14
    434e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4352:	18 2b       	or	r17, r24
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	60 e0       	ldi	r22, 0x00	; 0
    4358:	c7 01       	movw	r24, r14
    435a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    435e:	18 2b       	or	r17, r24
    4360:	46 e0       	ldi	r20, 0x06	; 6
    4362:	6f ef       	ldi	r22, 0xFF	; 255
    4364:	c7 01       	movw	r24, r14
    4366:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    436a:	18 2b       	or	r17, r24
    436c:	ae 01       	movw	r20, r28
    436e:	4f 5f       	subi	r20, 0xFF	; 255
    4370:	5f 4f       	sbci	r21, 0xFF	; 255
    4372:	63 e8       	ldi	r22, 0x83	; 131
    4374:	c7 01       	movw	r24, r14
    4376:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    437a:	18 2b       	or	r17, r24
    437c:	49 81       	ldd	r20, Y+1	; 0x01
    437e:	44 60       	ori	r20, 0x04	; 4
    4380:	63 e8       	ldi	r22, 0x83	; 131
    4382:	c7 01       	movw	r24, r14
    4384:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4388:	18 2b       	or	r17, r24
    438a:	47 e0       	ldi	r20, 0x07	; 7
    438c:	6f ef       	ldi	r22, 0xFF	; 255
    438e:	c7 01       	movw	r24, r14
    4390:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4394:	18 2b       	or	r17, r24
    4396:	41 e0       	ldi	r20, 0x01	; 1
    4398:	61 e8       	ldi	r22, 0x81	; 129
    439a:	c7 01       	movw	r24, r14
    439c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    43a0:	18 2b       	or	r17, r24
    43a2:	c7 01       	movw	r24, r14
    43a4:	0e 94 bb 32 	call	0x6576	; 0x6576 <VL53L0X_PollingDelay>
    43a8:	18 2b       	or	r17, r24
    43aa:	41 e0       	ldi	r20, 0x01	; 1
    43ac:	60 e8       	ldi	r22, 0x80	; 128
    43ae:	c7 01       	movw	r24, r14
    43b0:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    43b4:	18 2b       	or	r17, r24
    43b6:	80 2f       	mov	r24, r16
    43b8:	81 70       	andi	r24, 0x01	; 1
    43ba:	28 2e       	mov	r2, r24
    43bc:	00 ff       	sbrs	r16, 0
    43be:	56 c0       	rjmp	.+172    	; 0x446c <VL53L0X_get_info_from_device+0x186>
    43c0:	d0 fc       	sbrc	r13, 0
    43c2:	57 c0       	rjmp	.+174    	; 0x4472 <VL53L0X_get_info_from_device+0x18c>
    43c4:	4b e6       	ldi	r20, 0x6B	; 107
    43c6:	64 e9       	ldi	r22, 0x94	; 148
    43c8:	c7 01       	movw	r24, r14
    43ca:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    43ce:	c8 2e       	mov	r12, r24
    43d0:	c7 01       	movw	r24, r14
    43d2:	3e df       	rcall	.-388    	; 0x4250 <VL53L0X_device_read_strobe>
    43d4:	8c 29       	or	r24, r12
    43d6:	18 2b       	or	r17, r24
    43d8:	ae 01       	movw	r20, r28
    43da:	4e 5f       	subi	r20, 0xFE	; 254
    43dc:	5f 4f       	sbci	r21, 0xFF	; 255
    43de:	60 e9       	ldi	r22, 0x90	; 144
    43e0:	c7 01       	movw	r24, r14
    43e2:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    43e6:	18 2b       	or	r17, r24
    43e8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ea:	9b 81       	ldd	r25, Y+3	; 0x03
    43ec:	ac 81       	ldd	r26, Y+4	; 0x04
    43ee:	bd 81       	ldd	r27, Y+5	; 0x05
    43f0:	e9 2f       	mov	r30, r25
    43f2:	ef 77       	andi	r30, 0x7F	; 127
    43f4:	e9 a7       	std	Y+41, r30	; 0x29
    43f6:	07 2e       	mov	r0, r23
    43f8:	7f e0       	ldi	r23, 0x0F	; 15
    43fa:	b6 95       	lsr	r27
    43fc:	a7 95       	ror	r26
    43fe:	97 95       	ror	r25
    4400:	87 95       	ror	r24
    4402:	7a 95       	dec	r23
    4404:	d1 f7       	brne	.-12     	; 0x43fa <VL53L0X_get_info_from_device+0x114>
    4406:	70 2d       	mov	r23, r0
    4408:	f8 2f       	mov	r31, r24
    440a:	f1 70       	andi	r31, 0x01	; 1
    440c:	fa a7       	std	Y+42, r31	; 0x2a
    440e:	44 e2       	ldi	r20, 0x24	; 36
    4410:	64 e9       	ldi	r22, 0x94	; 148
    4412:	c7 01       	movw	r24, r14
    4414:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4418:	18 2b       	or	r17, r24
    441a:	c7 01       	movw	r24, r14
    441c:	19 df       	rcall	.-462    	; 0x4250 <VL53L0X_device_read_strobe>
    441e:	18 2b       	or	r17, r24
    4420:	ae 01       	movw	r20, r28
    4422:	4e 5f       	subi	r20, 0xFE	; 254
    4424:	5f 4f       	sbci	r21, 0xFF	; 255
    4426:	60 e9       	ldi	r22, 0x90	; 144
    4428:	c7 01       	movw	r24, r14
    442a:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    442e:	18 2b       	or	r17, r24
    4430:	8a 81       	ldd	r24, Y+2	; 0x02
    4432:	9b 81       	ldd	r25, Y+3	; 0x03
    4434:	2c 81       	ldd	r18, Y+4	; 0x04
    4436:	3d 81       	ldd	r19, Y+5	; 0x05
    4438:	3b a3       	std	Y+35, r19	; 0x23
    443a:	2c a3       	std	Y+36, r18	; 0x24
    443c:	9d a3       	std	Y+37, r25	; 0x25
    443e:	8e a3       	std	Y+38, r24	; 0x26
    4440:	45 e2       	ldi	r20, 0x25	; 37
    4442:	64 e9       	ldi	r22, 0x94	; 148
    4444:	c7 01       	movw	r24, r14
    4446:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    444a:	18 2b       	or	r17, r24
    444c:	c7 01       	movw	r24, r14
    444e:	00 df       	rcall	.-512    	; 0x4250 <VL53L0X_device_read_strobe>
    4450:	18 2b       	or	r17, r24
    4452:	ae 01       	movw	r20, r28
    4454:	4e 5f       	subi	r20, 0xFE	; 254
    4456:	5f 4f       	sbci	r21, 0xFF	; 255
    4458:	60 e9       	ldi	r22, 0x90	; 144
    445a:	c7 01       	movw	r24, r14
    445c:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    4460:	18 2b       	or	r17, r24
    4462:	8c 81       	ldd	r24, Y+4	; 0x04
    4464:	9d 81       	ldd	r25, Y+5	; 0x05
    4466:	9f a3       	std	Y+39, r25	; 0x27
    4468:	88 a7       	std	Y+40, r24	; 0x28
    446a:	05 c0       	rjmp	.+10     	; 0x4476 <VL53L0X_get_info_from_device+0x190>
    446c:	1a a6       	std	Y+42, r1	; 0x2a
    446e:	19 a6       	std	Y+41, r1	; 0x29
    4470:	02 c0       	rjmp	.+4      	; 0x4476 <VL53L0X_get_info_from_device+0x190>
    4472:	1a a6       	std	Y+42, r1	; 0x2a
    4474:	19 a6       	std	Y+41, r1	; 0x29
    4476:	20 2f       	mov	r18, r16
    4478:	22 70       	andi	r18, 0x02	; 2
    447a:	32 2e       	mov	r3, r18
    447c:	01 ff       	sbrs	r16, 1
    447e:	60 c1       	rjmp	.+704    	; 0x4740 <VL53L0X_get_info_from_device+0x45a>
    4480:	d1 fc       	sbrc	r13, 1
    4482:	5e c1       	rjmp	.+700    	; 0x4740 <VL53L0X_get_info_from_device+0x45a>
    4484:	42 e0       	ldi	r20, 0x02	; 2
    4486:	64 e9       	ldi	r22, 0x94	; 148
    4488:	c7 01       	movw	r24, r14
    448a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    448e:	c8 2e       	mov	r12, r24
    4490:	c7 01       	movw	r24, r14
    4492:	de de       	rcall	.-580    	; 0x4250 <VL53L0X_device_read_strobe>
    4494:	8c 29       	or	r24, r12
    4496:	18 2b       	or	r17, r24
    4498:	ae 01       	movw	r20, r28
    449a:	4a 5f       	subi	r20, 0xFA	; 250
    449c:	5f 4f       	sbci	r21, 0xFF	; 255
    449e:	60 e9       	ldi	r22, 0x90	; 144
    44a0:	c7 01       	movw	r24, r14
    44a2:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    44a6:	18 2b       	or	r17, r24
    44a8:	4b e7       	ldi	r20, 0x7B	; 123
    44aa:	64 e9       	ldi	r22, 0x94	; 148
    44ac:	c7 01       	movw	r24, r14
    44ae:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    44b2:	18 2b       	or	r17, r24
    44b4:	c7 01       	movw	r24, r14
    44b6:	cc de       	rcall	.-616    	; 0x4250 <VL53L0X_device_read_strobe>
    44b8:	18 2b       	or	r17, r24
    44ba:	ae 01       	movw	r20, r28
    44bc:	49 5f       	subi	r20, 0xF9	; 249
    44be:	5f 4f       	sbci	r21, 0xFF	; 255
    44c0:	60 e9       	ldi	r22, 0x90	; 144
    44c2:	c7 01       	movw	r24, r14
    44c4:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    44c8:	18 2b       	or	r17, r24
    44ca:	47 e7       	ldi	r20, 0x77	; 119
    44cc:	64 e9       	ldi	r22, 0x94	; 148
    44ce:	c7 01       	movw	r24, r14
    44d0:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    44d4:	18 2b       	or	r17, r24
    44d6:	c7 01       	movw	r24, r14
    44d8:	bb de       	rcall	.-650    	; 0x4250 <VL53L0X_device_read_strobe>
    44da:	18 2b       	or	r17, r24
    44dc:	ae 01       	movw	r20, r28
    44de:	4e 5f       	subi	r20, 0xFE	; 254
    44e0:	5f 4f       	sbci	r21, 0xFF	; 255
    44e2:	60 e9       	ldi	r22, 0x90	; 144
    44e4:	c7 01       	movw	r24, r14
    44e6:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    44ea:	18 2b       	or	r17, r24
    44ec:	4a 81       	ldd	r20, Y+2	; 0x02
    44ee:	5b 81       	ldd	r21, Y+3	; 0x03
    44f0:	6c 81       	ldd	r22, Y+4	; 0x04
    44f2:	7d 81       	ldd	r23, Y+5	; 0x05
    44f4:	db 01       	movw	r26, r22
    44f6:	ca 01       	movw	r24, r20
    44f8:	07 2e       	mov	r0, r23
    44fa:	79 e1       	ldi	r23, 0x19	; 25
    44fc:	b6 95       	lsr	r27
    44fe:	a7 95       	ror	r26
    4500:	97 95       	ror	r25
    4502:	87 95       	ror	r24
    4504:	7a 95       	dec	r23
    4506:	d1 f7       	brne	.-12     	; 0x44fc <VL53L0X_get_info_from_device+0x216>
    4508:	70 2d       	mov	r23, r0
    450a:	8f 77       	andi	r24, 0x7F	; 127
    450c:	88 8b       	std	Y+16, r24	; 0x10
    450e:	db 01       	movw	r26, r22
    4510:	ca 01       	movw	r24, r20
    4512:	07 2e       	mov	r0, r23
    4514:	72 e1       	ldi	r23, 0x12	; 18
    4516:	b6 95       	lsr	r27
    4518:	a7 95       	ror	r26
    451a:	97 95       	ror	r25
    451c:	87 95       	ror	r24
    451e:	7a 95       	dec	r23
    4520:	d1 f7       	brne	.-12     	; 0x4516 <VL53L0X_get_info_from_device+0x230>
    4522:	70 2d       	mov	r23, r0
    4524:	8f 77       	andi	r24, 0x7F	; 127
    4526:	89 8b       	std	Y+17, r24	; 0x11
    4528:	db 01       	movw	r26, r22
    452a:	ca 01       	movw	r24, r20
    452c:	07 2e       	mov	r0, r23
    452e:	7b e0       	ldi	r23, 0x0B	; 11
    4530:	b6 95       	lsr	r27
    4532:	a7 95       	ror	r26
    4534:	97 95       	ror	r25
    4536:	87 95       	ror	r24
    4538:	7a 95       	dec	r23
    453a:	d1 f7       	brne	.-12     	; 0x4530 <VL53L0X_get_info_from_device+0x24a>
    453c:	70 2d       	mov	r23, r0
    453e:	8f 77       	andi	r24, 0x7F	; 127
    4540:	8a 8b       	std	Y+18, r24	; 0x12
    4542:	db 01       	movw	r26, r22
    4544:	ca 01       	movw	r24, r20
    4546:	68 94       	set
    4548:	13 f8       	bld	r1, 3
    454a:	b6 95       	lsr	r27
    454c:	a7 95       	ror	r26
    454e:	97 95       	ror	r25
    4550:	87 95       	ror	r24
    4552:	16 94       	lsr	r1
    4554:	d1 f7       	brne	.-12     	; 0x454a <VL53L0X_get_info_from_device+0x264>
    4556:	8f 77       	andi	r24, 0x7F	; 127
    4558:	8b 8b       	std	Y+19, r24	; 0x13
    455a:	4f 70       	andi	r20, 0x0F	; 15
    455c:	44 0f       	add	r20, r20
    455e:	44 0f       	add	r20, r20
    4560:	44 0f       	add	r20, r20
    4562:	49 83       	std	Y+1, r20	; 0x01
    4564:	48 e7       	ldi	r20, 0x78	; 120
    4566:	64 e9       	ldi	r22, 0x94	; 148
    4568:	c7 01       	movw	r24, r14
    456a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    456e:	18 2b       	or	r17, r24
    4570:	c7 01       	movw	r24, r14
    4572:	6e de       	rcall	.-804    	; 0x4250 <VL53L0X_device_read_strobe>
    4574:	18 2b       	or	r17, r24
    4576:	ae 01       	movw	r20, r28
    4578:	4e 5f       	subi	r20, 0xFE	; 254
    457a:	5f 4f       	sbci	r21, 0xFF	; 255
    457c:	60 e9       	ldi	r22, 0x90	; 144
    457e:	c7 01       	movw	r24, r14
    4580:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    4584:	18 2b       	or	r17, r24
    4586:	8a 81       	ldd	r24, Y+2	; 0x02
    4588:	9b 81       	ldd	r25, Y+3	; 0x03
    458a:	ac 81       	ldd	r26, Y+4	; 0x04
    458c:	bd 81       	ldd	r27, Y+5	; 0x05
    458e:	ac 01       	movw	r20, r24
    4590:	bd 01       	movw	r22, r26
    4592:	03 2e       	mov	r0, r19
    4594:	3d e1       	ldi	r19, 0x1D	; 29
    4596:	76 95       	lsr	r23
    4598:	67 95       	ror	r22
    459a:	57 95       	ror	r21
    459c:	47 95       	ror	r20
    459e:	3a 95       	dec	r19
    45a0:	d1 f7       	brne	.-12     	; 0x4596 <VL53L0X_get_info_from_device+0x2b0>
    45a2:	30 2d       	mov	r19, r0
    45a4:	4f 77       	andi	r20, 0x7F	; 127
    45a6:	39 81       	ldd	r19, Y+1	; 0x01
    45a8:	24 2f       	mov	r18, r20
    45aa:	23 0f       	add	r18, r19
    45ac:	2c 8b       	std	Y+20, r18	; 0x14
    45ae:	ac 01       	movw	r20, r24
    45b0:	bd 01       	movw	r22, r26
    45b2:	03 2e       	mov	r0, r19
    45b4:	36 e1       	ldi	r19, 0x16	; 22
    45b6:	76 95       	lsr	r23
    45b8:	67 95       	ror	r22
    45ba:	57 95       	ror	r21
    45bc:	47 95       	ror	r20
    45be:	3a 95       	dec	r19
    45c0:	d1 f7       	brne	.-12     	; 0x45b6 <VL53L0X_get_info_from_device+0x2d0>
    45c2:	30 2d       	mov	r19, r0
    45c4:	4f 77       	andi	r20, 0x7F	; 127
    45c6:	4d 8b       	std	Y+21, r20	; 0x15
    45c8:	ac 01       	movw	r20, r24
    45ca:	bd 01       	movw	r22, r26
    45cc:	03 2e       	mov	r0, r19
    45ce:	3f e0       	ldi	r19, 0x0F	; 15
    45d0:	76 95       	lsr	r23
    45d2:	67 95       	ror	r22
    45d4:	57 95       	ror	r21
    45d6:	47 95       	ror	r20
    45d8:	3a 95       	dec	r19
    45da:	d1 f7       	brne	.-12     	; 0x45d0 <VL53L0X_get_info_from_device+0x2ea>
    45dc:	30 2d       	mov	r19, r0
    45de:	4f 77       	andi	r20, 0x7F	; 127
    45e0:	4e 8b       	std	Y+22, r20	; 0x16
    45e2:	29 2f       	mov	r18, r25
    45e4:	2f 77       	andi	r18, 0x7F	; 127
    45e6:	2f 8b       	std	Y+23, r18	; 0x17
    45e8:	ac 01       	movw	r20, r24
    45ea:	bd 01       	movw	r22, r26
    45ec:	76 95       	lsr	r23
    45ee:	67 95       	ror	r22
    45f0:	57 95       	ror	r21
    45f2:	47 95       	ror	r20
    45f4:	4f 77       	andi	r20, 0x7F	; 127
    45f6:	48 8f       	std	Y+24, r20	; 0x18
    45f8:	98 2f       	mov	r25, r24
    45fa:	91 70       	andi	r25, 0x01	; 1
    45fc:	92 95       	swap	r25
    45fe:	99 0f       	add	r25, r25
    4600:	99 0f       	add	r25, r25
    4602:	90 7c       	andi	r25, 0xC0	; 192
    4604:	99 83       	std	Y+1, r25	; 0x01
    4606:	49 e7       	ldi	r20, 0x79	; 121
    4608:	64 e9       	ldi	r22, 0x94	; 148
    460a:	c7 01       	movw	r24, r14
    460c:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4610:	18 2b       	or	r17, r24
    4612:	c7 01       	movw	r24, r14
    4614:	1d de       	rcall	.-966    	; 0x4250 <VL53L0X_device_read_strobe>
    4616:	18 2b       	or	r17, r24
    4618:	ae 01       	movw	r20, r28
    461a:	4e 5f       	subi	r20, 0xFE	; 254
    461c:	5f 4f       	sbci	r21, 0xFF	; 255
    461e:	60 e9       	ldi	r22, 0x90	; 144
    4620:	c7 01       	movw	r24, r14
    4622:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    4626:	18 2b       	or	r17, r24
    4628:	8a 81       	ldd	r24, Y+2	; 0x02
    462a:	9b 81       	ldd	r25, Y+3	; 0x03
    462c:	ac 81       	ldd	r26, Y+4	; 0x04
    462e:	bd 81       	ldd	r27, Y+5	; 0x05
    4630:	ac 01       	movw	r20, r24
    4632:	bd 01       	movw	r22, r26
    4634:	03 2e       	mov	r0, r19
    4636:	3a e1       	ldi	r19, 0x1A	; 26
    4638:	76 95       	lsr	r23
    463a:	67 95       	ror	r22
    463c:	57 95       	ror	r21
    463e:	47 95       	ror	r20
    4640:	3a 95       	dec	r19
    4642:	d1 f7       	brne	.-12     	; 0x4638 <VL53L0X_get_info_from_device+0x352>
    4644:	30 2d       	mov	r19, r0
    4646:	4f 77       	andi	r20, 0x7F	; 127
    4648:	39 81       	ldd	r19, Y+1	; 0x01
    464a:	24 2f       	mov	r18, r20
    464c:	23 0f       	add	r18, r19
    464e:	29 8f       	std	Y+25, r18	; 0x19
    4650:	ac 01       	movw	r20, r24
    4652:	bd 01       	movw	r22, r26
    4654:	03 2e       	mov	r0, r19
    4656:	33 e1       	ldi	r19, 0x13	; 19
    4658:	76 95       	lsr	r23
    465a:	67 95       	ror	r22
    465c:	57 95       	ror	r21
    465e:	47 95       	ror	r20
    4660:	3a 95       	dec	r19
    4662:	d1 f7       	brne	.-12     	; 0x4658 <VL53L0X_get_info_from_device+0x372>
    4664:	30 2d       	mov	r19, r0
    4666:	4f 77       	andi	r20, 0x7F	; 127
    4668:	4a 8f       	std	Y+26, r20	; 0x1a
    466a:	ac 01       	movw	r20, r24
    466c:	bd 01       	movw	r22, r26
    466e:	03 2e       	mov	r0, r19
    4670:	3c e0       	ldi	r19, 0x0C	; 12
    4672:	76 95       	lsr	r23
    4674:	67 95       	ror	r22
    4676:	57 95       	ror	r21
    4678:	47 95       	ror	r20
    467a:	3a 95       	dec	r19
    467c:	d1 f7       	brne	.-12     	; 0x4672 <VL53L0X_get_info_from_device+0x38c>
    467e:	30 2d       	mov	r19, r0
    4680:	4f 77       	andi	r20, 0x7F	; 127
    4682:	4b 8f       	std	Y+27, r20	; 0x1b
    4684:	ac 01       	movw	r20, r24
    4686:	bd 01       	movw	r22, r26
    4688:	68 94       	set
    468a:	14 f8       	bld	r1, 4
    468c:	76 95       	lsr	r23
    468e:	67 95       	ror	r22
    4690:	57 95       	ror	r21
    4692:	47 95       	ror	r20
    4694:	16 94       	lsr	r1
    4696:	d1 f7       	brne	.-12     	; 0x468c <VL53L0X_get_info_from_device+0x3a6>
    4698:	4f 77       	andi	r20, 0x7F	; 127
    469a:	4c 8f       	std	Y+28, r20	; 0x1c
    469c:	98 2f       	mov	r25, r24
    469e:	9f 71       	andi	r25, 0x1F	; 31
    46a0:	99 0f       	add	r25, r25
    46a2:	99 0f       	add	r25, r25
    46a4:	99 83       	std	Y+1, r25	; 0x01
    46a6:	4a e7       	ldi	r20, 0x7A	; 122
    46a8:	64 e9       	ldi	r22, 0x94	; 148
    46aa:	c7 01       	movw	r24, r14
    46ac:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    46b0:	18 2b       	or	r17, r24
    46b2:	c7 01       	movw	r24, r14
    46b4:	cd dd       	rcall	.-1126   	; 0x4250 <VL53L0X_device_read_strobe>
    46b6:	18 2b       	or	r17, r24
    46b8:	ae 01       	movw	r20, r28
    46ba:	4e 5f       	subi	r20, 0xFE	; 254
    46bc:	5f 4f       	sbci	r21, 0xFF	; 255
    46be:	60 e9       	ldi	r22, 0x90	; 144
    46c0:	c7 01       	movw	r24, r14
    46c2:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    46c6:	18 2b       	or	r17, r24
    46c8:	8a 81       	ldd	r24, Y+2	; 0x02
    46ca:	9b 81       	ldd	r25, Y+3	; 0x03
    46cc:	ac 81       	ldd	r26, Y+4	; 0x04
    46ce:	bd 81       	ldd	r27, Y+5	; 0x05
    46d0:	ac 01       	movw	r20, r24
    46d2:	bd 01       	movw	r22, r26
    46d4:	03 2e       	mov	r0, r19
    46d6:	3e e1       	ldi	r19, 0x1E	; 30
    46d8:	76 95       	lsr	r23
    46da:	67 95       	ror	r22
    46dc:	57 95       	ror	r21
    46de:	47 95       	ror	r20
    46e0:	3a 95       	dec	r19
    46e2:	d1 f7       	brne	.-12     	; 0x46d8 <VL53L0X_get_info_from_device+0x3f2>
    46e4:	30 2d       	mov	r19, r0
    46e6:	4f 77       	andi	r20, 0x7F	; 127
    46e8:	39 81       	ldd	r19, Y+1	; 0x01
    46ea:	24 2f       	mov	r18, r20
    46ec:	23 0f       	add	r18, r19
    46ee:	2d 8f       	std	Y+29, r18	; 0x1d
    46f0:	ac 01       	movw	r20, r24
    46f2:	bd 01       	movw	r22, r26
    46f4:	03 2e       	mov	r0, r19
    46f6:	37 e1       	ldi	r19, 0x17	; 23
    46f8:	76 95       	lsr	r23
    46fa:	67 95       	ror	r22
    46fc:	57 95       	ror	r21
    46fe:	47 95       	ror	r20
    4700:	3a 95       	dec	r19
    4702:	d1 f7       	brne	.-12     	; 0x46f8 <VL53L0X_get_info_from_device+0x412>
    4704:	30 2d       	mov	r19, r0
    4706:	4f 77       	andi	r20, 0x7F	; 127
    4708:	4e 8f       	std	Y+30, r20	; 0x1e
    470a:	2a 2f       	mov	r18, r26
    470c:	2f 77       	andi	r18, 0x7F	; 127
    470e:	2f 8f       	std	Y+31, r18	; 0x1f
    4710:	ac 01       	movw	r20, r24
    4712:	bd 01       	movw	r22, r26
    4714:	03 2e       	mov	r0, r19
    4716:	39 e0       	ldi	r19, 0x09	; 9
    4718:	76 95       	lsr	r23
    471a:	67 95       	ror	r22
    471c:	57 95       	ror	r21
    471e:	47 95       	ror	r20
    4720:	3a 95       	dec	r19
    4722:	d1 f7       	brne	.-12     	; 0x4718 <VL53L0X_get_info_from_device+0x432>
    4724:	30 2d       	mov	r19, r0
    4726:	4f 77       	andi	r20, 0x7F	; 127
    4728:	48 a3       	std	Y+32, r20	; 0x20
    472a:	b6 95       	lsr	r27
    472c:	a7 95       	ror	r26
    472e:	97 95       	ror	r25
    4730:	87 95       	ror	r24
    4732:	b6 95       	lsr	r27
    4734:	a7 95       	ror	r26
    4736:	97 95       	ror	r25
    4738:	87 95       	ror	r24
    473a:	8f 77       	andi	r24, 0x7F	; 127
    473c:	89 a3       	std	Y+33, r24	; 0x21
    473e:	1a a2       	std	Y+34, r1	; 0x22
    4740:	80 2f       	mov	r24, r16
    4742:	84 70       	andi	r24, 0x04	; 4
    4744:	c8 2e       	mov	r12, r24
    4746:	02 ff       	sbrs	r16, 2
    4748:	98 c0       	rjmp	.+304    	; 0x487a <VL53L0X_get_info_from_device+0x594>
    474a:	d2 fc       	sbrc	r13, 2
    474c:	9d c0       	rjmp	.+314    	; 0x4888 <VL53L0X_get_info_from_device+0x5a2>
    474e:	4b e7       	ldi	r20, 0x7B	; 123
    4750:	64 e9       	ldi	r22, 0x94	; 148
    4752:	c7 01       	movw	r24, r14
    4754:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4758:	b8 2e       	mov	r11, r24
    475a:	c7 01       	movw	r24, r14
    475c:	79 dd       	rcall	.-1294   	; 0x4250 <VL53L0X_device_read_strobe>
    475e:	8b 29       	or	r24, r11
    4760:	18 2b       	or	r17, r24
    4762:	ae 01       	movw	r20, r28
    4764:	48 5f       	subi	r20, 0xF8	; 248
    4766:	5f 4f       	sbci	r21, 0xFF	; 255
    4768:	60 e9       	ldi	r22, 0x90	; 144
    476a:	c7 01       	movw	r24, r14
    476c:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    4770:	18 2b       	or	r17, r24
    4772:	4c e7       	ldi	r20, 0x7C	; 124
    4774:	64 e9       	ldi	r22, 0x94	; 148
    4776:	c7 01       	movw	r24, r14
    4778:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    477c:	18 2b       	or	r17, r24
    477e:	c7 01       	movw	r24, r14
    4780:	67 dd       	rcall	.-1330   	; 0x4250 <VL53L0X_device_read_strobe>
    4782:	18 2b       	or	r17, r24
    4784:	ae 01       	movw	r20, r28
    4786:	44 5f       	subi	r20, 0xF4	; 244
    4788:	5f 4f       	sbci	r21, 0xFF	; 255
    478a:	60 e9       	ldi	r22, 0x90	; 144
    478c:	c7 01       	movw	r24, r14
    478e:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    4792:	18 2b       	or	r17, r24
    4794:	43 e7       	ldi	r20, 0x73	; 115
    4796:	64 e9       	ldi	r22, 0x94	; 148
    4798:	c7 01       	movw	r24, r14
    479a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    479e:	18 2b       	or	r17, r24
    47a0:	c7 01       	movw	r24, r14
    47a2:	56 dd       	rcall	.-1364   	; 0x4250 <VL53L0X_device_read_strobe>
    47a4:	18 2b       	or	r17, r24
    47a6:	ae 01       	movw	r20, r28
    47a8:	4e 5f       	subi	r20, 0xFE	; 254
    47aa:	5f 4f       	sbci	r21, 0xFF	; 255
    47ac:	60 e9       	ldi	r22, 0x90	; 144
    47ae:	c7 01       	movw	r24, r14
    47b0:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    47b4:	18 2b       	or	r17, r24
    47b6:	8a 80       	ldd	r8, Y+2	; 0x02
    47b8:	9b 80       	ldd	r9, Y+3	; 0x03
    47ba:	ac 80       	ldd	r10, Y+4	; 0x04
    47bc:	bd 80       	ldd	r11, Y+5	; 0x05
    47be:	ba 2c       	mov	r11, r10
    47c0:	a9 2c       	mov	r10, r9
    47c2:	98 2c       	mov	r9, r8
    47c4:	88 24       	eor	r8, r8
    47c6:	24 01       	movw	r4, r8
    47c8:	35 01       	movw	r6, r10
    47ca:	66 24       	eor	r6, r6
    47cc:	77 24       	eor	r7, r7
    47ce:	44 e7       	ldi	r20, 0x74	; 116
    47d0:	64 e9       	ldi	r22, 0x94	; 148
    47d2:	c7 01       	movw	r24, r14
    47d4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    47d8:	18 2b       	or	r17, r24
    47da:	c7 01       	movw	r24, r14
    47dc:	39 dd       	rcall	.-1422   	; 0x4250 <VL53L0X_device_read_strobe>
    47de:	18 2b       	or	r17, r24
    47e0:	ae 01       	movw	r20, r28
    47e2:	4e 5f       	subi	r20, 0xFE	; 254
    47e4:	5f 4f       	sbci	r21, 0xFF	; 255
    47e6:	60 e9       	ldi	r22, 0x90	; 144
    47e8:	c7 01       	movw	r24, r14
    47ea:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    47ee:	18 2b       	or	r17, r24
    47f0:	8a 80       	ldd	r8, Y+2	; 0x02
    47f2:	9b 80       	ldd	r9, Y+3	; 0x03
    47f4:	ac 80       	ldd	r10, Y+4	; 0x04
    47f6:	bd 80       	ldd	r11, Y+5	; 0x05
    47f8:	8b 2c       	mov	r8, r11
    47fa:	99 24       	eor	r9, r9
    47fc:	aa 24       	eor	r10, r10
    47fe:	bb 24       	eor	r11, r11
    4800:	84 28       	or	r8, r4
    4802:	95 28       	or	r9, r5
    4804:	a6 28       	or	r10, r6
    4806:	b7 28       	or	r11, r7
    4808:	45 e7       	ldi	r20, 0x75	; 117
    480a:	64 e9       	ldi	r22, 0x94	; 148
    480c:	c7 01       	movw	r24, r14
    480e:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4812:	18 2b       	or	r17, r24
    4814:	c7 01       	movw	r24, r14
    4816:	1c dd       	rcall	.-1480   	; 0x4250 <VL53L0X_device_read_strobe>
    4818:	18 2b       	or	r17, r24
    481a:	ae 01       	movw	r20, r28
    481c:	4e 5f       	subi	r20, 0xFE	; 254
    481e:	5f 4f       	sbci	r21, 0xFF	; 255
    4820:	60 e9       	ldi	r22, 0x90	; 144
    4822:	c7 01       	movw	r24, r14
    4824:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    4828:	18 2b       	or	r17, r24
    482a:	4a 80       	ldd	r4, Y+2	; 0x02
    482c:	5b 80       	ldd	r5, Y+3	; 0x03
    482e:	6c 80       	ldd	r6, Y+4	; 0x04
    4830:	7d 80       	ldd	r7, Y+5	; 0x05
    4832:	76 2c       	mov	r7, r6
    4834:	65 2c       	mov	r6, r5
    4836:	54 2c       	mov	r5, r4
    4838:	44 24       	eor	r4, r4
    483a:	66 24       	eor	r6, r6
    483c:	77 24       	eor	r7, r7
    483e:	46 e7       	ldi	r20, 0x76	; 118
    4840:	64 e9       	ldi	r22, 0x94	; 148
    4842:	c7 01       	movw	r24, r14
    4844:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4848:	18 2b       	or	r17, r24
    484a:	c7 01       	movw	r24, r14
    484c:	01 dd       	rcall	.-1534   	; 0x4250 <VL53L0X_device_read_strobe>
    484e:	18 2b       	or	r17, r24
    4850:	ae 01       	movw	r20, r28
    4852:	4e 5f       	subi	r20, 0xFE	; 254
    4854:	5f 4f       	sbci	r21, 0xFF	; 255
    4856:	60 e9       	ldi	r22, 0x90	; 144
    4858:	c7 01       	movw	r24, r14
    485a:	0e 94 88 32 	call	0x6510	; 0x6510 <VL53L0X_RdDWord>
    485e:	18 2b       	or	r17, r24
    4860:	8a 81       	ldd	r24, Y+2	; 0x02
    4862:	9b 81       	ldd	r25, Y+3	; 0x03
    4864:	ac 81       	ldd	r26, Y+4	; 0x04
    4866:	bd 81       	ldd	r27, Y+5	; 0x05
    4868:	8b 2f       	mov	r24, r27
    486a:	99 27       	eor	r25, r25
    486c:	aa 27       	eor	r26, r26
    486e:	bb 27       	eor	r27, r27
    4870:	48 2a       	or	r4, r24
    4872:	59 2a       	or	r5, r25
    4874:	6a 2a       	or	r6, r26
    4876:	7b 2a       	or	r7, r27
    4878:	0d c0       	rjmp	.+26     	; 0x4894 <VL53L0X_get_info_from_device+0x5ae>
    487a:	81 2c       	mov	r8, r1
    487c:	91 2c       	mov	r9, r1
    487e:	54 01       	movw	r10, r8
    4880:	41 2c       	mov	r4, r1
    4882:	51 2c       	mov	r5, r1
    4884:	32 01       	movw	r6, r4
    4886:	06 c0       	rjmp	.+12     	; 0x4894 <VL53L0X_get_info_from_device+0x5ae>
    4888:	81 2c       	mov	r8, r1
    488a:	91 2c       	mov	r9, r1
    488c:	54 01       	movw	r10, r8
    488e:	41 2c       	mov	r4, r1
    4890:	51 2c       	mov	r5, r1
    4892:	32 01       	movw	r6, r4
    4894:	40 e0       	ldi	r20, 0x00	; 0
    4896:	61 e8       	ldi	r22, 0x81	; 129
    4898:	c7 01       	movw	r24, r14
    489a:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    489e:	18 2b       	or	r17, r24
    48a0:	46 e0       	ldi	r20, 0x06	; 6
    48a2:	6f ef       	ldi	r22, 0xFF	; 255
    48a4:	c7 01       	movw	r24, r14
    48a6:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    48aa:	18 2b       	or	r17, r24
    48ac:	ae 01       	movw	r20, r28
    48ae:	4f 5f       	subi	r20, 0xFF	; 255
    48b0:	5f 4f       	sbci	r21, 0xFF	; 255
    48b2:	63 e8       	ldi	r22, 0x83	; 131
    48b4:	c7 01       	movw	r24, r14
    48b6:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    48ba:	18 2b       	or	r17, r24
    48bc:	49 81       	ldd	r20, Y+1	; 0x01
    48be:	4b 7f       	andi	r20, 0xFB	; 251
    48c0:	63 e8       	ldi	r22, 0x83	; 131
    48c2:	c7 01       	movw	r24, r14
    48c4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    48c8:	18 2b       	or	r17, r24
    48ca:	41 e0       	ldi	r20, 0x01	; 1
    48cc:	6f ef       	ldi	r22, 0xFF	; 255
    48ce:	c7 01       	movw	r24, r14
    48d0:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    48d4:	18 2b       	or	r17, r24
    48d6:	41 e0       	ldi	r20, 0x01	; 1
    48d8:	60 e0       	ldi	r22, 0x00	; 0
    48da:	c7 01       	movw	r24, r14
    48dc:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    48e0:	18 2b       	or	r17, r24
    48e2:	40 e0       	ldi	r20, 0x00	; 0
    48e4:	6f ef       	ldi	r22, 0xFF	; 255
    48e6:	c7 01       	movw	r24, r14
    48e8:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    48ec:	18 2b       	or	r17, r24
    48ee:	40 e0       	ldi	r20, 0x00	; 0
    48f0:	60 e8       	ldi	r22, 0x80	; 128
    48f2:	c7 01       	movw	r24, r14
    48f4:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    48f8:	18 2b       	or	r17, r24
    48fa:	09 f0       	breq	.+2      	; 0x48fe <VL53L0X_get_info_from_device+0x618>
    48fc:	95 c0       	rjmp	.+298    	; 0x4a28 <VL53L0X_get_info_from_device+0x742>
    48fe:	22 20       	and	r2, r2
    4900:	b9 f0       	breq	.+46     	; 0x4930 <VL53L0X_get_info_from_device+0x64a>
    4902:	d0 fc       	sbrc	r13, 0
    4904:	15 c0       	rjmp	.+42     	; 0x4930 <VL53L0X_get_info_from_device+0x64a>
    4906:	f7 01       	movw	r30, r14
    4908:	ee 5f       	subi	r30, 0xFE	; 254
    490a:	fe 4f       	sbci	r31, 0xFE	; 254
    490c:	29 a5       	ldd	r18, Y+41	; 0x29
    490e:	20 83       	st	Z, r18
    4910:	31 96       	adiw	r30, 0x01	; 1
    4912:	8a a5       	ldd	r24, Y+42	; 0x2a
    4914:	80 83       	st	Z, r24
    4916:	fe 01       	movw	r30, r28
    4918:	b3 96       	adiw	r30, 0x23	; 35
    491a:	d7 01       	movw	r26, r14
    491c:	a9 5e       	subi	r26, 0xE9	; 233
    491e:	be 4f       	sbci	r27, 0xFE	; 254
    4920:	9e 01       	movw	r18, r28
    4922:	27 5d       	subi	r18, 0xD7	; 215
    4924:	3f 4f       	sbci	r19, 0xFF	; 255
    4926:	81 91       	ld	r24, Z+
    4928:	8d 93       	st	X+, r24
    492a:	2e 17       	cp	r18, r30
    492c:	3f 07       	cpc	r19, r31
    492e:	d9 f7       	brne	.-10     	; 0x4926 <VL53L0X_get_info_from_device+0x640>
    4930:	33 20       	and	r3, r3
    4932:	29 f1       	breq	.+74     	; 0x497e <VL53L0X_get_info_from_device+0x698>
    4934:	d1 fc       	sbrc	r13, 1
    4936:	23 c0       	rjmp	.+70     	; 0x497e <VL53L0X_get_info_from_device+0x698>
    4938:	8e 81       	ldd	r24, Y+6	; 0x06
    493a:	f7 01       	movw	r30, r14
    493c:	e0 52       	subi	r30, 0x20	; 32
    493e:	ff 4f       	sbci	r31, 0xFF	; 255
    4940:	80 83       	st	Z, r24
    4942:	8f 81       	ldd	r24, Y+7	; 0x07
    4944:	31 96       	adiw	r30, 0x01	; 1
    4946:	80 83       	st	Z, r24
    4948:	97 01       	movw	r18, r14
    494a:	2e 51       	subi	r18, 0x1E	; 30
    494c:	3f 4f       	sbci	r19, 0xFF	; 255
    494e:	98 89       	ldd	r25, Y+16	; 0x10
    4950:	99 23       	and	r25, r25
    4952:	81 f0       	breq	.+32     	; 0x4974 <VL53L0X_get_info_from_device+0x68e>
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	f9 01       	movw	r30, r18
    4958:	e8 0f       	add	r30, r24
    495a:	f1 1d       	adc	r31, r1
    495c:	90 83       	st	Z, r25
    495e:	8f 5f       	subi	r24, 0xFF	; 255
    4960:	e0 e1       	ldi	r30, 0x10	; 16
    4962:	f0 e0       	ldi	r31, 0x00	; 0
    4964:	ec 0f       	add	r30, r28
    4966:	fd 1f       	adc	r31, r29
    4968:	e8 0f       	add	r30, r24
    496a:	f1 1d       	adc	r31, r1
    496c:	90 81       	ld	r25, Z
    496e:	91 11       	cpse	r25, r1
    4970:	f2 cf       	rjmp	.-28     	; 0x4956 <VL53L0X_get_info_from_device+0x670>
    4972:	01 c0       	rjmp	.+2      	; 0x4976 <VL53L0X_get_info_from_device+0x690>
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	f9 01       	movw	r30, r18
    4978:	e8 0f       	add	r30, r24
    497a:	f1 1d       	adc	r31, r1
    497c:	10 82       	st	Z, r1
    497e:	cc 20       	and	r12, r12
    4980:	09 f4       	brne	.+2      	; 0x4984 <VL53L0X_get_info_from_device+0x69e>
    4982:	4b c0       	rjmp	.+150    	; 0x4a1a <VL53L0X_get_info_from_device+0x734>
    4984:	d2 fc       	sbrc	r13, 2
    4986:	49 c0       	rjmp	.+146    	; 0x4a1a <VL53L0X_get_info_from_device+0x734>
    4988:	88 85       	ldd	r24, Y+8	; 0x08
    498a:	99 85       	ldd	r25, Y+9	; 0x09
    498c:	aa 85       	ldd	r26, Y+10	; 0x0a
    498e:	bb 85       	ldd	r27, Y+11	; 0x0b
    4990:	f7 01       	movw	r30, r14
    4992:	eb 5f       	subi	r30, 0xFB	; 251
    4994:	fe 4f       	sbci	r31, 0xFE	; 254
    4996:	80 83       	st	Z, r24
    4998:	91 83       	std	Z+1, r25	; 0x01
    499a:	a2 83       	std	Z+2, r26	; 0x02
    499c:	b3 83       	std	Z+3, r27	; 0x03
    499e:	8c 85       	ldd	r24, Y+12	; 0x0c
    49a0:	9d 85       	ldd	r25, Y+13	; 0x0d
    49a2:	ae 85       	ldd	r26, Y+14	; 0x0e
    49a4:	bf 85       	ldd	r27, Y+15	; 0x0f
    49a6:	34 96       	adiw	r30, 0x04	; 4
    49a8:	80 83       	st	Z, r24
    49aa:	91 83       	std	Z+1, r25	; 0x01
    49ac:	a2 83       	std	Z+2, r26	; 0x02
    49ae:	b3 83       	std	Z+3, r27	; 0x03
    49b0:	34 96       	adiw	r30, 0x04	; 4
    49b2:	07 2e       	mov	r0, r23
    49b4:	79 e0       	ldi	r23, 0x09	; 9
    49b6:	88 0c       	add	r8, r8
    49b8:	99 1c       	adc	r9, r9
    49ba:	aa 1c       	adc	r10, r10
    49bc:	bb 1c       	adc	r11, r11
    49be:	7a 95       	dec	r23
    49c0:	d1 f7       	brne	.-12     	; 0x49b6 <VL53L0X_get_info_from_device+0x6d0>
    49c2:	70 2d       	mov	r23, r0
    49c4:	80 82       	st	Z, r8
    49c6:	91 82       	std	Z+1, r9	; 0x01
    49c8:	a2 82       	std	Z+2, r10	; 0x02
    49ca:	b3 82       	std	Z+3, r11	; 0x03
    49cc:	41 14       	cp	r4, r1
    49ce:	51 04       	cpc	r5, r1
    49d0:	61 04       	cpc	r6, r1
    49d2:	71 04       	cpc	r7, r1
    49d4:	b9 f0       	breq	.+46     	; 0x4a04 <VL53L0X_get_info_from_device+0x71e>
    49d6:	a3 01       	movw	r20, r6
    49d8:	92 01       	movw	r18, r4
    49da:	39 51       	subi	r19, 0x19	; 25
    49dc:	41 09       	sbc	r20, r1
    49de:	51 09       	sbc	r21, r1
    49e0:	a8 ee       	ldi	r26, 0xE8	; 232
    49e2:	b3 e0       	ldi	r27, 0x03	; 3
    49e4:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
    49e8:	dc 01       	movw	r26, r24
    49ea:	cb 01       	movw	r24, r22
    49ec:	68 94       	set
    49ee:	13 f8       	bld	r1, 3
    49f0:	b6 95       	lsr	r27
    49f2:	a7 95       	ror	r26
    49f4:	97 95       	ror	r25
    49f6:	87 95       	ror	r24
    49f8:	16 94       	lsr	r1
    49fa:	d1 f7       	brne	.-12     	; 0x49f0 <VL53L0X_get_info_from_device+0x70a>
    49fc:	91 95       	neg	r25
    49fe:	81 95       	neg	r24
    4a00:	91 09       	sbc	r25, r1
    4a02:	02 c0       	rjmp	.+4      	; 0x4a08 <VL53L0X_get_info_from_device+0x722>
    4a04:	80 e0       	ldi	r24, 0x00	; 0
    4a06:	90 e0       	ldi	r25, 0x00	; 0
    4a08:	09 2e       	mov	r0, r25
    4a0a:	00 0c       	add	r0, r0
    4a0c:	aa 0b       	sbc	r26, r26
    4a0e:	bb 0b       	sbc	r27, r27
    4a10:	f7 01       	movw	r30, r14
    4a12:	84 87       	std	Z+12, r24	; 0x0c
    4a14:	95 87       	std	Z+13, r25	; 0x0d
    4a16:	a6 87       	std	Z+14, r26	; 0x0e
    4a18:	b7 87       	std	Z+15, r27	; 0x0f
    4a1a:	f7 01       	movw	r30, r14
    4a1c:	e1 52       	subi	r30, 0x21	; 33
    4a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a20:	0d 29       	or	r16, r13
    4a22:	00 83       	st	Z, r16
    4a24:	01 c0       	rjmp	.+2      	; 0x4a28 <VL53L0X_get_info_from_device+0x742>
    4a26:	10 e0       	ldi	r17, 0x00	; 0
    4a28:	81 2f       	mov	r24, r17
    4a2a:	aa 96       	adiw	r28, 0x2a	; 42
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	de bf       	out	0x3e, r29	; 62
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	cd bf       	out	0x3d, r28	; 61
    4a36:	df 91       	pop	r29
    4a38:	cf 91       	pop	r28
    4a3a:	1f 91       	pop	r17
    4a3c:	0f 91       	pop	r16
    4a3e:	ff 90       	pop	r15
    4a40:	ef 90       	pop	r14
    4a42:	df 90       	pop	r13
    4a44:	cf 90       	pop	r12
    4a46:	bf 90       	pop	r11
    4a48:	af 90       	pop	r10
    4a4a:	9f 90       	pop	r9
    4a4c:	8f 90       	pop	r8
    4a4e:	7f 90       	pop	r7
    4a50:	6f 90       	pop	r6
    4a52:	5f 90       	pop	r5
    4a54:	4f 90       	pop	r4
    4a56:	3f 90       	pop	r3
    4a58:	2f 90       	pop	r2
    4a5a:	08 95       	ret

00004a5c <VL53L0X_encode_timeout>:
    4a5c:	0f 93       	push	r16
    4a5e:	1f 93       	push	r17
    4a60:	61 15       	cp	r22, r1
    4a62:	71 05       	cpc	r23, r1
    4a64:	81 05       	cpc	r24, r1
    4a66:	91 05       	cpc	r25, r1
    4a68:	21 f1       	breq	.+72     	; 0x4ab2 <VL53L0X_encode_timeout+0x56>
    4a6a:	ab 01       	movw	r20, r22
    4a6c:	bc 01       	movw	r22, r24
    4a6e:	41 50       	subi	r20, 0x01	; 1
    4a70:	51 09       	sbc	r21, r1
    4a72:	61 09       	sbc	r22, r1
    4a74:	71 09       	sbc	r23, r1
    4a76:	db 01       	movw	r26, r22
    4a78:	ca 01       	movw	r24, r20
    4a7a:	88 27       	eor	r24, r24
    4a7c:	89 2b       	or	r24, r25
    4a7e:	8a 2b       	or	r24, r26
    4a80:	8b 2b       	or	r24, r27
    4a82:	79 f0       	breq	.+30     	; 0x4aa2 <VL53L0X_encode_timeout+0x46>
    4a84:	80 e0       	ldi	r24, 0x00	; 0
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	76 95       	lsr	r23
    4a8a:	67 95       	ror	r22
    4a8c:	57 95       	ror	r21
    4a8e:	47 95       	ror	r20
    4a90:	01 96       	adiw	r24, 0x01	; 1
    4a92:	8a 01       	movw	r16, r20
    4a94:	9b 01       	movw	r18, r22
    4a96:	00 27       	eor	r16, r16
    4a98:	01 2b       	or	r16, r17
    4a9a:	02 2b       	or	r16, r18
    4a9c:	03 2b       	or	r16, r19
    4a9e:	a1 f7       	brne	.-24     	; 0x4a88 <VL53L0X_encode_timeout+0x2c>
    4aa0:	02 c0       	rjmp	.+4      	; 0x4aa6 <VL53L0X_encode_timeout+0x4a>
    4aa2:	80 e0       	ldi	r24, 0x00	; 0
    4aa4:	90 e0       	ldi	r25, 0x00	; 0
    4aa6:	98 2f       	mov	r25, r24
    4aa8:	88 27       	eor	r24, r24
    4aaa:	55 27       	eor	r21, r21
    4aac:	84 0f       	add	r24, r20
    4aae:	95 1f       	adc	r25, r21
    4ab0:	02 c0       	rjmp	.+4      	; 0x4ab6 <VL53L0X_encode_timeout+0x5a>
    4ab2:	80 e0       	ldi	r24, 0x00	; 0
    4ab4:	90 e0       	ldi	r25, 0x00	; 0
    4ab6:	1f 91       	pop	r17
    4ab8:	0f 91       	pop	r16
    4aba:	08 95       	ret

00004abc <VL53L0X_calc_timeout_mclks>:
    4abc:	8f 92       	push	r8
    4abe:	9f 92       	push	r9
    4ac0:	af 92       	push	r10
    4ac2:	bf 92       	push	r11
    4ac4:	cf 92       	push	r12
    4ac6:	df 92       	push	r13
    4ac8:	ef 92       	push	r14
    4aca:	ff 92       	push	r15
    4acc:	4a 01       	movw	r8, r20
    4ace:	5b 01       	movw	r10, r22
    4ad0:	a2 2f       	mov	r26, r18
    4ad2:	b0 e0       	ldi	r27, 0x00	; 0
    4ad4:	20 e0       	ldi	r18, 0x00	; 0
    4ad6:	3f e2       	ldi	r19, 0x2F	; 47
    4ad8:	4a e3       	ldi	r20, 0x3A	; 58
    4ada:	50 e0       	ldi	r21, 0x00	; 0
    4adc:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
    4ae0:	6b 01       	movw	r12, r22
    4ae2:	7c 01       	movw	r14, r24
    4ae4:	24 ef       	ldi	r18, 0xF4	; 244
    4ae6:	c2 0e       	add	r12, r18
    4ae8:	21 e0       	ldi	r18, 0x01	; 1
    4aea:	d2 1e       	adc	r13, r18
    4aec:	e1 1c       	adc	r14, r1
    4aee:	f1 1c       	adc	r15, r1
    4af0:	a8 ee       	ldi	r26, 0xE8	; 232
    4af2:	b3 e0       	ldi	r27, 0x03	; 3
    4af4:	a5 01       	movw	r20, r10
    4af6:	94 01       	movw	r18, r8
    4af8:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
    4afc:	4b 01       	movw	r8, r22
    4afe:	5c 01       	movw	r10, r24
    4b00:	c7 01       	movw	r24, r14
    4b02:	b6 01       	movw	r22, r12
    4b04:	20 ed       	ldi	r18, 0xD0	; 208
    4b06:	37 e0       	ldi	r19, 0x07	; 7
    4b08:	40 e0       	ldi	r20, 0x00	; 0
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    4b10:	82 0e       	add	r8, r18
    4b12:	93 1e       	adc	r9, r19
    4b14:	a4 1e       	adc	r10, r20
    4b16:	b5 1e       	adc	r11, r21
    4b18:	c7 01       	movw	r24, r14
    4b1a:	b6 01       	movw	r22, r12
    4b1c:	28 ee       	ldi	r18, 0xE8	; 232
    4b1e:	33 e0       	ldi	r19, 0x03	; 3
    4b20:	40 e0       	ldi	r20, 0x00	; 0
    4b22:	50 e0       	ldi	r21, 0x00	; 0
    4b24:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    4b28:	c5 01       	movw	r24, r10
    4b2a:	b4 01       	movw	r22, r8
    4b2c:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    4b30:	ca 01       	movw	r24, r20
    4b32:	b9 01       	movw	r22, r18
    4b34:	ff 90       	pop	r15
    4b36:	ef 90       	pop	r14
    4b38:	df 90       	pop	r13
    4b3a:	cf 90       	pop	r12
    4b3c:	bf 90       	pop	r11
    4b3e:	af 90       	pop	r10
    4b40:	9f 90       	pop	r9
    4b42:	8f 90       	pop	r8
    4b44:	08 95       	ret

00004b46 <VL53L0X_calc_timeout_us>:
    4b46:	cf 92       	push	r12
    4b48:	df 92       	push	r13
    4b4a:	ef 92       	push	r14
    4b4c:	ff 92       	push	r15
    4b4e:	cf 93       	push	r28
    4b50:	df 93       	push	r29
    4b52:	eb 01       	movw	r28, r22
    4b54:	a4 2f       	mov	r26, r20
    4b56:	b0 e0       	ldi	r27, 0x00	; 0
    4b58:	20 e0       	ldi	r18, 0x00	; 0
    4b5a:	3f e2       	ldi	r19, 0x2F	; 47
    4b5c:	4a e3       	ldi	r20, 0x3A	; 58
    4b5e:	50 e0       	ldi	r21, 0x00	; 0
    4b60:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
    4b64:	6c 50       	subi	r22, 0x0C	; 12
    4b66:	7e 4f       	sbci	r23, 0xFE	; 254
    4b68:	8f 4f       	sbci	r24, 0xFF	; 255
    4b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6c:	0f 2e       	mov	r0, r31
    4b6e:	f8 ee       	ldi	r31, 0xE8	; 232
    4b70:	cf 2e       	mov	r12, r31
    4b72:	f3 e0       	ldi	r31, 0x03	; 3
    4b74:	df 2e       	mov	r13, r31
    4b76:	e1 2c       	mov	r14, r1
    4b78:	f1 2c       	mov	r15, r1
    4b7a:	f0 2d       	mov	r31, r0
    4b7c:	a7 01       	movw	r20, r14
    4b7e:	96 01       	movw	r18, r12
    4b80:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    4b84:	de 01       	movw	r26, r28
    4b86:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
    4b8a:	6c 50       	subi	r22, 0x0C	; 12
    4b8c:	7e 4f       	sbci	r23, 0xFE	; 254
    4b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    4b90:	9f 4f       	sbci	r25, 0xFF	; 255
    4b92:	a7 01       	movw	r20, r14
    4b94:	96 01       	movw	r18, r12
    4b96:	0e 94 cc 32 	call	0x6598	; 0x6598 <__udivmodsi4>
    4b9a:	ca 01       	movw	r24, r20
    4b9c:	b9 01       	movw	r22, r18
    4b9e:	df 91       	pop	r29
    4ba0:	cf 91       	pop	r28
    4ba2:	ff 90       	pop	r15
    4ba4:	ef 90       	pop	r14
    4ba6:	df 90       	pop	r13
    4ba8:	cf 90       	pop	r12
    4baa:	08 95       	ret

00004bac <get_sequence_step_timeout>:
    4bac:	af 92       	push	r10
    4bae:	bf 92       	push	r11
    4bb0:	cf 92       	push	r12
    4bb2:	df 92       	push	r13
    4bb4:	ef 92       	push	r14
    4bb6:	ff 92       	push	r15
    4bb8:	1f 93       	push	r17
    4bba:	cf 93       	push	r28
    4bbc:	df 93       	push	r29
    4bbe:	cd b7       	in	r28, 0x3d	; 61
    4bc0:	de b7       	in	r29, 0x3e	; 62
    4bc2:	2b 97       	sbiw	r28, 0x0b	; 11
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	f8 94       	cli
    4bc8:	de bf       	out	0x3e, r29	; 62
    4bca:	0f be       	out	0x3f, r0	; 63
    4bcc:	cd bf       	out	0x3d, r28	; 61
    4bce:	7c 01       	movw	r14, r24
    4bd0:	6a 01       	movw	r12, r20
    4bd2:	1a 82       	std	Y+2, r1	; 0x02
    4bd4:	1c 82       	std	Y+4, r1	; 0x04
    4bd6:	1b 82       	std	Y+3, r1	; 0x03
    4bd8:	63 30       	cpi	r22, 0x03	; 3
    4bda:	00 f5       	brcc	.+64     	; 0x4c1c <get_sequence_step_timeout+0x70>
    4bdc:	ae 01       	movw	r20, r28
    4bde:	4f 5f       	subi	r20, 0xFF	; 255
    4be0:	5f 4f       	sbci	r21, 0xFF	; 255
    4be2:	60 e0       	ldi	r22, 0x00	; 0
    4be4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4be8:	18 2f       	mov	r17, r24
    4bea:	81 11       	cpse	r24, r1
    4bec:	08 c0       	rjmp	.+16     	; 0x4bfe <get_sequence_step_timeout+0x52>
    4bee:	ae 01       	movw	r20, r28
    4bf0:	4e 5f       	subi	r20, 0xFE	; 254
    4bf2:	5f 4f       	sbci	r21, 0xFF	; 255
    4bf4:	66 e4       	ldi	r22, 0x46	; 70
    4bf6:	c7 01       	movw	r24, r14
    4bf8:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
    4bfc:	18 2f       	mov	r17, r24
    4bfe:	6a 81       	ldd	r22, Y+2	; 0x02
    4c00:	86 2f       	mov	r24, r22
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	a0 e0       	ldi	r26, 0x00	; 0
    4c06:	b0 e0       	ldi	r27, 0x00	; 0
    4c08:	bc 01       	movw	r22, r24
    4c0a:	cd 01       	movw	r24, r26
    4c0c:	6f 5f       	subi	r22, 0xFF	; 255
    4c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c10:	8f 4f       	sbci	r24, 0xFF	; 255
    4c12:	9f 4f       	sbci	r25, 0xFF	; 255
    4c14:	49 81       	ldd	r20, Y+1	; 0x01
    4c16:	c7 01       	movw	r24, r14
    4c18:	96 df       	rcall	.-212    	; 0x4b46 <VL53L0X_calc_timeout_us>
    4c1a:	a4 c0       	rjmp	.+328    	; 0x4d64 <get_sequence_step_timeout+0x1b8>
    4c1c:	63 30       	cpi	r22, 0x03	; 3
    4c1e:	99 f5       	brne	.+102    	; 0x4c86 <get_sequence_step_timeout+0xda>
    4c20:	ae 01       	movw	r20, r28
    4c22:	4f 5f       	subi	r20, 0xFF	; 255
    4c24:	5f 4f       	sbci	r21, 0xFF	; 255
    4c26:	60 e0       	ldi	r22, 0x00	; 0
    4c28:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4c2c:	18 2f       	mov	r17, r24
    4c2e:	81 11       	cpse	r24, r1
    4c30:	91 c0       	rjmp	.+290    	; 0x4d54 <get_sequence_step_timeout+0x1a8>
    4c32:	ae 01       	movw	r20, r28
    4c34:	4f 5f       	subi	r20, 0xFF	; 255
    4c36:	5f 4f       	sbci	r21, 0xFF	; 255
    4c38:	60 e0       	ldi	r22, 0x00	; 0
    4c3a:	c7 01       	movw	r24, r14
    4c3c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4c40:	18 2f       	mov	r17, r24
    4c42:	81 11       	cpse	r24, r1
    4c44:	08 c0       	rjmp	.+16     	; 0x4c56 <get_sequence_step_timeout+0xaa>
    4c46:	ae 01       	movw	r20, r28
    4c48:	4d 5f       	subi	r20, 0xFD	; 253
    4c4a:	5f 4f       	sbci	r21, 0xFF	; 255
    4c4c:	61 e5       	ldi	r22, 0x51	; 81
    4c4e:	c7 01       	movw	r24, r14
    4c50:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    4c54:	18 2f       	mov	r17, r24
    4c56:	2b 81       	ldd	r18, Y+3	; 0x03
    4c58:	3c 81       	ldd	r19, Y+4	; 0x04
    4c5a:	b9 01       	movw	r22, r18
    4c5c:	77 27       	eor	r23, r23
    4c5e:	cb 01       	movw	r24, r22
    4c60:	a0 e0       	ldi	r26, 0x00	; 0
    4c62:	b0 e0       	ldi	r27, 0x00	; 0
    4c64:	04 c0       	rjmp	.+8      	; 0x4c6e <get_sequence_step_timeout+0xc2>
    4c66:	88 0f       	add	r24, r24
    4c68:	99 1f       	adc	r25, r25
    4c6a:	aa 1f       	adc	r26, r26
    4c6c:	bb 1f       	adc	r27, r27
    4c6e:	3a 95       	dec	r19
    4c70:	d2 f7       	brpl	.-12     	; 0x4c66 <get_sequence_step_timeout+0xba>
    4c72:	bc 01       	movw	r22, r24
    4c74:	cd 01       	movw	r24, r26
    4c76:	6f 5f       	subi	r22, 0xFF	; 255
    4c78:	7f 4f       	sbci	r23, 0xFF	; 255
    4c7a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c7c:	9f 4f       	sbci	r25, 0xFF	; 255
    4c7e:	49 81       	ldd	r20, Y+1	; 0x01
    4c80:	c7 01       	movw	r24, r14
    4c82:	61 df       	rcall	.-318    	; 0x4b46 <VL53L0X_calc_timeout_us>
    4c84:	6f c0       	rjmp	.+222    	; 0x4d64 <get_sequence_step_timeout+0x1b8>
    4c86:	64 30       	cpi	r22, 0x04	; 4
    4c88:	09 f0       	breq	.+2      	; 0x4c8c <get_sequence_step_timeout+0xe0>
    4c8a:	68 c0       	rjmp	.+208    	; 0x4d5c <get_sequence_step_timeout+0x1b0>
    4c8c:	be 01       	movw	r22, r28
    4c8e:	69 5f       	subi	r22, 0xF9	; 249
    4c90:	7f 4f       	sbci	r23, 0xFF	; 255
    4c92:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <VL53L0X_GetSequenceStepEnables>
    4c96:	8a 85       	ldd	r24, Y+10	; 0x0a
    4c98:	88 23       	and	r24, r24
    4c9a:	31 f1       	breq	.+76     	; 0x4ce8 <get_sequence_step_timeout+0x13c>
    4c9c:	ae 01       	movw	r20, r28
    4c9e:	4f 5f       	subi	r20, 0xFF	; 255
    4ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ca2:	60 e0       	ldi	r22, 0x00	; 0
    4ca4:	c7 01       	movw	r24, r14
    4ca6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4caa:	18 2f       	mov	r17, r24
    4cac:	81 11       	cpse	r24, r1
    4cae:	41 c0       	rjmp	.+130    	; 0x4d32 <get_sequence_step_timeout+0x186>
    4cb0:	ae 01       	movw	r20, r28
    4cb2:	4d 5f       	subi	r20, 0xFD	; 253
    4cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    4cb6:	61 e5       	ldi	r22, 0x51	; 81
    4cb8:	c7 01       	movw	r24, r14
    4cba:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    4cbe:	18 2f       	mov	r17, r24
    4cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    4cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    4cc4:	c9 01       	movw	r24, r18
    4cc6:	99 27       	eor	r25, r25
    4cc8:	a0 e0       	ldi	r26, 0x00	; 0
    4cca:	b0 e0       	ldi	r27, 0x00	; 0
    4ccc:	04 c0       	rjmp	.+8      	; 0x4cd6 <get_sequence_step_timeout+0x12a>
    4cce:	88 0f       	add	r24, r24
    4cd0:	99 1f       	adc	r25, r25
    4cd2:	aa 1f       	adc	r26, r26
    4cd4:	bb 1f       	adc	r27, r27
    4cd6:	3a 95       	dec	r19
    4cd8:	d2 f7       	brpl	.-12     	; 0x4cce <get_sequence_step_timeout+0x122>
    4cda:	01 96       	adiw	r24, 0x01	; 1
    4cdc:	a1 1d       	adc	r26, r1
    4cde:	b1 1d       	adc	r27, r1
    4ce0:	5c 01       	movw	r10, r24
    4ce2:	11 11       	cpse	r17, r1
    4ce4:	2b c0       	rjmp	.+86     	; 0x4d3c <get_sequence_step_timeout+0x190>
    4ce6:	02 c0       	rjmp	.+4      	; 0x4cec <get_sequence_step_timeout+0x140>
    4ce8:	a1 2c       	mov	r10, r1
    4cea:	b1 2c       	mov	r11, r1
    4cec:	ae 01       	movw	r20, r28
    4cee:	4f 5f       	subi	r20, 0xFF	; 255
    4cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf2:	61 e0       	ldi	r22, 0x01	; 1
    4cf4:	c7 01       	movw	r24, r14
    4cf6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4cfa:	18 2f       	mov	r17, r24
    4cfc:	81 11       	cpse	r24, r1
    4cfe:	21 c0       	rjmp	.+66     	; 0x4d42 <get_sequence_step_timeout+0x196>
    4d00:	ae 01       	movw	r20, r28
    4d02:	4b 5f       	subi	r20, 0xFB	; 251
    4d04:	5f 4f       	sbci	r21, 0xFF	; 255
    4d06:	61 e7       	ldi	r22, 0x71	; 113
    4d08:	c7 01       	movw	r24, r14
    4d0a:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    4d0e:	18 2f       	mov	r17, r24
    4d10:	2d 81       	ldd	r18, Y+5	; 0x05
    4d12:	3e 81       	ldd	r19, Y+6	; 0x06
    4d14:	c9 01       	movw	r24, r18
    4d16:	99 27       	eor	r25, r25
    4d18:	a0 e0       	ldi	r26, 0x00	; 0
    4d1a:	b0 e0       	ldi	r27, 0x00	; 0
    4d1c:	04 c0       	rjmp	.+8      	; 0x4d26 <get_sequence_step_timeout+0x17a>
    4d1e:	88 0f       	add	r24, r24
    4d20:	99 1f       	adc	r25, r25
    4d22:	aa 1f       	adc	r26, r26
    4d24:	bb 1f       	adc	r27, r27
    4d26:	3a 95       	dec	r19
    4d28:	d2 f7       	brpl	.-12     	; 0x4d1e <get_sequence_step_timeout+0x172>
    4d2a:	01 96       	adiw	r24, 0x01	; 1
    4d2c:	a1 1d       	adc	r26, r1
    4d2e:	b1 1d       	adc	r27, r1
    4d30:	0a c0       	rjmp	.+20     	; 0x4d46 <get_sequence_step_timeout+0x19a>
    4d32:	a1 2c       	mov	r10, r1
    4d34:	b1 2c       	mov	r11, r1
    4d36:	80 e0       	ldi	r24, 0x00	; 0
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	05 c0       	rjmp	.+10     	; 0x4d46 <get_sequence_step_timeout+0x19a>
    4d3c:	80 e0       	ldi	r24, 0x00	; 0
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <get_sequence_step_timeout+0x19a>
    4d42:	80 e0       	ldi	r24, 0x00	; 0
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	bc 01       	movw	r22, r24
    4d48:	6a 19       	sub	r22, r10
    4d4a:	7b 09       	sbc	r23, r11
    4d4c:	49 81       	ldd	r20, Y+1	; 0x01
    4d4e:	c7 01       	movw	r24, r14
    4d50:	fa de       	rcall	.-524    	; 0x4b46 <VL53L0X_calc_timeout_us>
    4d52:	08 c0       	rjmp	.+16     	; 0x4d64 <get_sequence_step_timeout+0x1b8>
    4d54:	60 e0       	ldi	r22, 0x00	; 0
    4d56:	70 e0       	ldi	r23, 0x00	; 0
    4d58:	cb 01       	movw	r24, r22
    4d5a:	04 c0       	rjmp	.+8      	; 0x4d64 <get_sequence_step_timeout+0x1b8>
    4d5c:	60 e0       	ldi	r22, 0x00	; 0
    4d5e:	70 e0       	ldi	r23, 0x00	; 0
    4d60:	cb 01       	movw	r24, r22
    4d62:	10 e0       	ldi	r17, 0x00	; 0
    4d64:	f6 01       	movw	r30, r12
    4d66:	60 83       	st	Z, r22
    4d68:	71 83       	std	Z+1, r23	; 0x01
    4d6a:	82 83       	std	Z+2, r24	; 0x02
    4d6c:	93 83       	std	Z+3, r25	; 0x03
    4d6e:	81 2f       	mov	r24, r17
    4d70:	2b 96       	adiw	r28, 0x0b	; 11
    4d72:	0f b6       	in	r0, 0x3f	; 63
    4d74:	f8 94       	cli
    4d76:	de bf       	out	0x3e, r29	; 62
    4d78:	0f be       	out	0x3f, r0	; 63
    4d7a:	cd bf       	out	0x3d, r28	; 61
    4d7c:	df 91       	pop	r29
    4d7e:	cf 91       	pop	r28
    4d80:	1f 91       	pop	r17
    4d82:	ff 90       	pop	r15
    4d84:	ef 90       	pop	r14
    4d86:	df 90       	pop	r13
    4d88:	cf 90       	pop	r12
    4d8a:	bf 90       	pop	r11
    4d8c:	af 90       	pop	r10
    4d8e:	08 95       	ret

00004d90 <set_sequence_step_timeout>:
    4d90:	8f 92       	push	r8
    4d92:	9f 92       	push	r9
    4d94:	af 92       	push	r10
    4d96:	bf 92       	push	r11
    4d98:	cf 92       	push	r12
    4d9a:	df 92       	push	r13
    4d9c:	ef 92       	push	r14
    4d9e:	ff 92       	push	r15
    4da0:	0f 93       	push	r16
    4da2:	1f 93       	push	r17
    4da4:	cf 93       	push	r28
    4da6:	df 93       	push	r29
    4da8:	cd b7       	in	r28, 0x3d	; 61
    4daa:	de b7       	in	r29, 0x3e	; 62
    4dac:	28 97       	sbiw	r28, 0x08	; 8
    4dae:	0f b6       	in	r0, 0x3f	; 63
    4db0:	f8 94       	cli
    4db2:	de bf       	out	0x3e, r29	; 62
    4db4:	0f be       	out	0x3f, r0	; 63
    4db6:	cd bf       	out	0x3d, r28	; 61
    4db8:	8c 01       	movw	r16, r24
    4dba:	49 01       	movw	r8, r18
    4dbc:	5a 01       	movw	r10, r20
    4dbe:	63 30       	cpi	r22, 0x03	; 3
    4dc0:	18 f5       	brcc	.+70     	; 0x4e08 <set_sequence_step_timeout+0x78>
    4dc2:	ae 01       	movw	r20, r28
    4dc4:	4f 5f       	subi	r20, 0xFF	; 255
    4dc6:	5f 4f       	sbci	r21, 0xFF	; 255
    4dc8:	60 e0       	ldi	r22, 0x00	; 0
    4dca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4dce:	f8 2e       	mov	r15, r24
    4dd0:	81 11       	cpse	r24, r1
    4dd2:	a1 c0       	rjmp	.+322    	; 0x4f16 <set_sequence_step_timeout+0x186>
    4dd4:	29 81       	ldd	r18, Y+1	; 0x01
    4dd6:	b5 01       	movw	r22, r10
    4dd8:	a4 01       	movw	r20, r8
    4dda:	c8 01       	movw	r24, r16
    4ddc:	6f de       	rcall	.-802    	; 0x4abc <VL53L0X_calc_timeout_mclks>
    4dde:	61 30       	cpi	r22, 0x01	; 1
    4de0:	21 e0       	ldi	r18, 0x01	; 1
    4de2:	72 07       	cpc	r23, r18
    4de4:	18 f4       	brcc	.+6      	; 0x4dec <set_sequence_step_timeout+0x5c>
    4de6:	4f ef       	ldi	r20, 0xFF	; 255
    4de8:	46 0f       	add	r20, r22
    4dea:	01 c0       	rjmp	.+2      	; 0x4dee <set_sequence_step_timeout+0x5e>
    4dec:	4f ef       	ldi	r20, 0xFF	; 255
    4dee:	f8 01       	movw	r30, r16
    4df0:	e4 53       	subi	r30, 0x34	; 52
    4df2:	ff 4f       	sbci	r31, 0xFF	; 255
    4df4:	84 2f       	mov	r24, r20
    4df6:	90 e0       	ldi	r25, 0x00	; 0
    4df8:	91 83       	std	Z+1, r25	; 0x01
    4dfa:	80 83       	st	Z, r24
    4dfc:	66 e4       	ldi	r22, 0x46	; 70
    4dfe:	c8 01       	movw	r24, r16
    4e00:	0e 94 e7 31 	call	0x63ce	; 0x63ce <VL53L0X_WrByte>
    4e04:	f8 2e       	mov	r15, r24
    4e06:	87 c0       	rjmp	.+270    	; 0x4f16 <set_sequence_step_timeout+0x186>
    4e08:	63 30       	cpi	r22, 0x03	; 3
    4e0a:	41 f5       	brne	.+80     	; 0x4e5c <set_sequence_step_timeout+0xcc>
    4e0c:	ae 01       	movw	r20, r28
    4e0e:	4f 5f       	subi	r20, 0xFF	; 255
    4e10:	5f 4f       	sbci	r21, 0xFF	; 255
    4e12:	60 e0       	ldi	r22, 0x00	; 0
    4e14:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4e18:	f8 2e       	mov	r15, r24
    4e1a:	29 81       	ldd	r18, Y+1	; 0x01
    4e1c:	b5 01       	movw	r22, r10
    4e1e:	a4 01       	movw	r20, r8
    4e20:	c8 01       	movw	r24, r16
    4e22:	4c de       	rcall	.-872    	; 0x4abc <VL53L0X_calc_timeout_mclks>
    4e24:	88 27       	eor	r24, r24
    4e26:	99 27       	eor	r25, r25
    4e28:	19 de       	rcall	.-974    	; 0x4a5c <VL53L0X_encode_timeout>
    4e2a:	9b 83       	std	Y+3, r25	; 0x03
    4e2c:	8a 83       	std	Y+2, r24	; 0x02
    4e2e:	f8 01       	movw	r30, r16
    4e30:	e4 53       	subi	r30, 0x34	; 52
    4e32:	ff 4f       	sbci	r31, 0xFF	; 255
    4e34:	91 83       	std	Z+1, r25	; 0x01
    4e36:	80 83       	st	Z, r24
    4e38:	f1 10       	cpse	r15, r1
    4e3a:	6d c0       	rjmp	.+218    	; 0x4f16 <set_sequence_step_timeout+0x186>
    4e3c:	ac 01       	movw	r20, r24
    4e3e:	61 e5       	ldi	r22, 0x51	; 81
    4e40:	c8 01       	movw	r24, r16
    4e42:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    4e46:	f8 2e       	mov	r15, r24
    4e48:	81 11       	cpse	r24, r1
    4e4a:	65 c0       	rjmp	.+202    	; 0x4f16 <set_sequence_step_timeout+0x186>
    4e4c:	f8 01       	movw	r30, r16
    4e4e:	ec 52       	subi	r30, 0x2C	; 44
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	80 82       	st	Z, r8
    4e54:	91 82       	std	Z+1, r9	; 0x01
    4e56:	a2 82       	std	Z+2, r10	; 0x02
    4e58:	b3 82       	std	Z+3, r11	; 0x03
    4e5a:	5d c0       	rjmp	.+186    	; 0x4f16 <set_sequence_step_timeout+0x186>
    4e5c:	64 30       	cpi	r22, 0x04	; 4
    4e5e:	09 f0       	breq	.+2      	; 0x4e62 <set_sequence_step_timeout+0xd2>
    4e60:	56 c0       	rjmp	.+172    	; 0x4f0e <set_sequence_step_timeout+0x17e>
    4e62:	be 01       	movw	r22, r28
    4e64:	6c 5f       	subi	r22, 0xFC	; 252
    4e66:	7f 4f       	sbci	r23, 0xFF	; 255
    4e68:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <VL53L0X_GetSequenceStepEnables>
    4e6c:	8f 81       	ldd	r24, Y+7	; 0x07
    4e6e:	88 23       	and	r24, r24
    4e70:	41 f1       	breq	.+80     	; 0x4ec2 <set_sequence_step_timeout+0x132>
    4e72:	ae 01       	movw	r20, r28
    4e74:	4f 5f       	subi	r20, 0xFF	; 255
    4e76:	5f 4f       	sbci	r21, 0xFF	; 255
    4e78:	60 e0       	ldi	r22, 0x00	; 0
    4e7a:	c8 01       	movw	r24, r16
    4e7c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4e80:	f8 2e       	mov	r15, r24
    4e82:	81 11       	cpse	r24, r1
    4e84:	48 c0       	rjmp	.+144    	; 0x4f16 <set_sequence_step_timeout+0x186>
    4e86:	ae 01       	movw	r20, r28
    4e88:	4e 5f       	subi	r20, 0xFE	; 254
    4e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    4e8c:	61 e5       	ldi	r22, 0x51	; 81
    4e8e:	c8 01       	movw	r24, r16
    4e90:	0e 94 61 32 	call	0x64c2	; 0x64c2 <VL53L0X_RdWord>
    4e94:	f8 2e       	mov	r15, r24
    4e96:	81 11       	cpse	r24, r1
    4e98:	3e c0       	rjmp	.+124    	; 0x4f16 <set_sequence_step_timeout+0x186>
    4e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4e9e:	6c 01       	movw	r12, r24
    4ea0:	dd 24       	eor	r13, r13
    4ea2:	e1 2c       	mov	r14, r1
    4ea4:	f1 2c       	mov	r15, r1
    4ea6:	04 c0       	rjmp	.+8      	; 0x4eb0 <set_sequence_step_timeout+0x120>
    4ea8:	cc 0c       	add	r12, r12
    4eaa:	dd 1c       	adc	r13, r13
    4eac:	ee 1c       	adc	r14, r14
    4eae:	ff 1c       	adc	r15, r15
    4eb0:	9a 95       	dec	r25
    4eb2:	d2 f7       	brpl	.-12     	; 0x4ea8 <set_sequence_step_timeout+0x118>
    4eb4:	d7 01       	movw	r26, r14
    4eb6:	c6 01       	movw	r24, r12
    4eb8:	01 96       	adiw	r24, 0x01	; 1
    4eba:	a1 1d       	adc	r26, r1
    4ebc:	b1 1d       	adc	r27, r1
    4ebe:	6c 01       	movw	r12, r24
    4ec0:	02 c0       	rjmp	.+4      	; 0x4ec6 <set_sequence_step_timeout+0x136>
    4ec2:	c1 2c       	mov	r12, r1
    4ec4:	d1 2c       	mov	r13, r1
    4ec6:	ae 01       	movw	r20, r28
    4ec8:	4f 5f       	subi	r20, 0xFF	; 255
    4eca:	5f 4f       	sbci	r21, 0xFF	; 255
    4ecc:	61 e0       	ldi	r22, 0x01	; 1
    4ece:	c8 01       	movw	r24, r16
    4ed0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <VL53L0X_GetVcselPulsePeriod>
    4ed4:	f8 2e       	mov	r15, r24
    4ed6:	81 11       	cpse	r24, r1
    4ed8:	1e c0       	rjmp	.+60     	; 0x4f16 <set_sequence_step_timeout+0x186>
    4eda:	29 81       	ldd	r18, Y+1	; 0x01
    4edc:	b5 01       	movw	r22, r10
    4ede:	a4 01       	movw	r20, r8
    4ee0:	c8 01       	movw	r24, r16
    4ee2:	ec dd       	rcall	.-1064   	; 0x4abc <VL53L0X_calc_timeout_mclks>
    4ee4:	6c 0d       	add	r22, r12
    4ee6:	7d 1d       	adc	r23, r13
    4ee8:	81 1d       	adc	r24, r1
    4eea:	91 1d       	adc	r25, r1
    4eec:	b7 dd       	rcall	.-1170   	; 0x4a5c <VL53L0X_encode_timeout>
    4eee:	ac 01       	movw	r20, r24
    4ef0:	61 e7       	ldi	r22, 0x71	; 113
    4ef2:	c8 01       	movw	r24, r16
    4ef4:	0e 94 00 32 	call	0x6400	; 0x6400 <VL53L0X_WrWord>
    4ef8:	f8 2e       	mov	r15, r24
    4efa:	81 11       	cpse	r24, r1
    4efc:	0c c0       	rjmp	.+24     	; 0x4f16 <set_sequence_step_timeout+0x186>
    4efe:	f8 01       	movw	r30, r16
    4f00:	e1 53       	subi	r30, 0x31	; 49
    4f02:	ff 4f       	sbci	r31, 0xFF	; 255
    4f04:	80 82       	st	Z, r8
    4f06:	91 82       	std	Z+1, r9	; 0x01
    4f08:	a2 82       	std	Z+2, r10	; 0x02
    4f0a:	b3 82       	std	Z+3, r11	; 0x03
    4f0c:	04 c0       	rjmp	.+8      	; 0x4f16 <set_sequence_step_timeout+0x186>
    4f0e:	0f 2e       	mov	r0, r31
    4f10:	fc ef       	ldi	r31, 0xFC	; 252
    4f12:	ff 2e       	mov	r15, r31
    4f14:	f0 2d       	mov	r31, r0
    4f16:	8f 2d       	mov	r24, r15
    4f18:	28 96       	adiw	r28, 0x08	; 8
    4f1a:	0f b6       	in	r0, 0x3f	; 63
    4f1c:	f8 94       	cli
    4f1e:	de bf       	out	0x3e, r29	; 62
    4f20:	0f be       	out	0x3f, r0	; 63
    4f22:	cd bf       	out	0x3d, r28	; 61
    4f24:	df 91       	pop	r29
    4f26:	cf 91       	pop	r28
    4f28:	1f 91       	pop	r17
    4f2a:	0f 91       	pop	r16
    4f2c:	ff 90       	pop	r15
    4f2e:	ef 90       	pop	r14
    4f30:	df 90       	pop	r13
    4f32:	cf 90       	pop	r12
    4f34:	bf 90       	pop	r11
    4f36:	af 90       	pop	r10
    4f38:	9f 90       	pop	r9
    4f3a:	8f 90       	pop	r8
    4f3c:	08 95       	ret

00004f3e <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, u8 *pVCSELPulsePeriodPCLK)
{
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	1f 92       	push	r1
    4f48:	cd b7       	in	r28, 0x3d	; 61
    4f4a:	de b7       	in	r29, 0x3e	; 62
    4f4c:	8a 01       	movw	r16, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 vcsel_period_reg;

	switch (VcselPeriodType) {
    4f4e:	66 23       	and	r22, r22
    4f50:	19 f0       	breq	.+6      	; 0x4f58 <VL53L0X_get_vcsel_pulse_period+0x1a>
    4f52:	61 30       	cpi	r22, 0x01	; 1
    4f54:	41 f0       	breq	.+16     	; 0x4f66 <VL53L0X_get_vcsel_pulse_period+0x28>
    4f56:	0e c0       	rjmp	.+28     	; 0x4f74 <VL53L0X_get_vcsel_pulse_period+0x36>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
    4f58:	ae 01       	movw	r20, r28
    4f5a:	4f 5f       	subi	r20, 0xFF	; 255
    4f5c:	5f 4f       	sbci	r21, 0xFF	; 255
    4f5e:	60 e5       	ldi	r22, 0x50	; 80
    4f60:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    4f64:	08 c0       	rjmp	.+16     	; 0x4f76 <VL53L0X_get_vcsel_pulse_period+0x38>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
    4f66:	ae 01       	movw	r20, r28
    4f68:	4f 5f       	subi	r20, 0xFF	; 255
    4f6a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f6c:	60 e7       	ldi	r22, 0x70	; 112
    4f6e:	0e 94 54 32 	call	0x64a8	; 0x64a8 <VL53L0X_RdByte>
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    4f72:	01 c0       	rjmp	.+2      	; 0x4f76 <VL53L0X_get_vcsel_pulse_period+0x38>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
    4f74:	8c ef       	ldi	r24, 0xFC	; 252
	}

	if (Status == VL53L0X_ERROR_NONE)
    4f76:	81 11       	cpse	r24, r1
    4f78:	05 c0       	rjmp	.+10     	; 0x4f84 <VL53L0X_get_vcsel_pulse_period+0x46>
		*pVCSELPulsePeriodPCLK =
    4f7a:	99 81       	ldd	r25, Y+1	; 0x01
    4f7c:	9f 5f       	subi	r25, 0xFF	; 255
    4f7e:	99 0f       	add	r25, r25
    4f80:	f8 01       	movw	r30, r16
    4f82:	90 83       	st	Z, r25
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
    4f84:	0f 90       	pop	r0
    4f86:	df 91       	pop	r29
    4f88:	cf 91       	pop	r28
    4f8a:	1f 91       	pop	r17
    4f8c:	0f 91       	pop	r16
    4f8e:	08 95       	ret

00004f90 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		u32 MeasurementTimingBudgetMicroSeconds)
{
    4f90:	8f 92       	push	r8
    4f92:	9f 92       	push	r9
    4f94:	af 92       	push	r10
    4f96:	bf 92       	push	r11
    4f98:	cf 92       	push	r12
    4f9a:	df 92       	push	r13
    4f9c:	ef 92       	push	r14
    4f9e:	ff 92       	push	r15
    4fa0:	0f 93       	push	r16
    4fa2:	1f 93       	push	r17
    4fa4:	cf 93       	push	r28
    4fa6:	df 93       	push	r29
    4fa8:	cd b7       	in	r28, 0x3d	; 61
    4faa:	de b7       	in	r29, 0x3e	; 62
    4fac:	2d 97       	sbiw	r28, 0x0d	; 13
    4fae:	0f b6       	in	r0, 0x3f	; 63
    4fb0:	f8 94       	cli
    4fb2:	de bf       	out	0x3e, r29	; 62
    4fb4:	0f be       	out	0x3f, r0	; 63
    4fb6:	cd bf       	out	0x3d, r28	; 61
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u32 FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	u32 MsrcDccTccTimeoutMicroSeconds	= 2000;
    4fb8:	0f 2e       	mov	r0, r31
    4fba:	f0 ed       	ldi	r31, 0xD0	; 208
    4fbc:	cf 2e       	mov	r12, r31
    4fbe:	f7 e0       	ldi	r31, 0x07	; 7
    4fc0:	df 2e       	mov	r13, r31
    4fc2:	e1 2c       	mov	r14, r1
    4fc4:	f1 2c       	mov	r15, r1
    4fc6:	f0 2d       	mov	r31, r0
    4fc8:	ce 82       	std	Y+6, r12	; 0x06
    4fca:	df 82       	std	Y+7, r13	; 0x07
    4fcc:	e8 86       	std	Y+8, r14	; 0x08
    4fce:	f9 86       	std	Y+9, r15	; 0x09
	u32 MsrcOverheadMicroSeconds		= 660;
	u32 TccOverheadMicroSeconds		= 590;
	u32 DssOverheadMicroSeconds		= 690;
	u32 PreRangeOverheadMicroSeconds	= 660;
	u32 FinalRangeOverheadMicroSeconds = 550;
	u32 PreRangeTimeoutMicroSeconds	= 0;
    4fd0:	1a 86       	std	Y+10, r1	; 0x0a
    4fd2:	1b 86       	std	Y+11, r1	; 0x0b
    4fd4:	1c 86       	std	Y+12, r1	; 0x0c
    4fd6:	1d 86       	std	Y+13, r1	; 0x0d
	u32 cMinTimingBudgetMicroSeconds	= 20000;
	u32 SubTimeout = 0;

	if (MeasurementTimingBudgetMicroSeconds
    4fd8:	40 32       	cpi	r20, 0x20	; 32
    4fda:	2e e4       	ldi	r18, 0x4E	; 78
    4fdc:	52 07       	cpc	r21, r18
    4fde:	61 05       	cpc	r22, r1
    4fe0:	71 05       	cpc	r23, r1
    4fe2:	08 f4       	brcc	.+2      	; 0x4fe6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x56>
    4fe4:	94 c0       	rjmp	.+296    	; 0x510e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x17e>
    4fe6:	6a 01       	movw	r12, r20
    4fe8:	7b 01       	movw	r14, r22
    4fea:	8c 01       	movw	r16, r24

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    4fec:	be 01       	movw	r22, r28
    4fee:	6f 5f       	subi	r22, 0xFF	; 255
    4ff0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ff2:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <VL53L0X_GetSequenceStepEnables>

	if (Status == VL53L0X_ERROR_NONE &&
    4ff6:	81 11       	cpse	r24, r1
    4ff8:	9d c0       	rjmp	.+314    	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
	}

	FinalRangeTimingBudgetMicroSeconds =
    4ffa:	46 01       	movw	r8, r12
    4ffc:	57 01       	movw	r10, r14
    4ffe:	86 e3       	ldi	r24, 0x36	; 54
    5000:	88 1a       	sub	r8, r24
    5002:	8b e0       	ldi	r24, 0x0B	; 11
    5004:	98 0a       	sbc	r9, r24
    5006:	a1 08       	sbc	r10, r1
    5008:	b1 08       	sbc	r11, r1
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);

	if (Status == VL53L0X_ERROR_NONE &&
    500a:	89 81       	ldd	r24, Y+1	; 0x01
    500c:	81 11       	cpse	r24, r1
    500e:	07 c0       	rjmp	.+14     	; 0x501e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		(SchedulerSequenceSteps.TccOn  ||
    5010:	8a 81       	ldd	r24, Y+2	; 0x02
    5012:	81 11       	cpse	r24, r1
    5014:	04 c0       	rjmp	.+8      	; 0x501e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		SchedulerSequenceSteps.MsrcOn ||
    5016:	8b 81       	ldd	r24, Y+3	; 0x03
    5018:	88 23       	and	r24, r24
    501a:	09 f4       	brne	.+2      	; 0x501e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
    501c:	84 c0       	rjmp	.+264    	; 0x5126 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
		SchedulerSequenceSteps.DssOn)) {

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
    501e:	ae 01       	movw	r20, r28
    5020:	4a 5f       	subi	r20, 0xFA	; 250
    5022:	5f 4f       	sbci	r21, 0xFF	; 255
    5024:	62 e0       	ldi	r22, 0x02	; 2
    5026:	c8 01       	movw	r24, r16
    5028:	c1 dd       	rcall	.-1150   	; 0x4bac <get_sequence_step_timeout>
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
    502a:	81 11       	cpse	r24, r1
    502c:	83 c0       	rjmp	.+262    	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			return Status;

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
    502e:	89 81       	ldd	r24, Y+1	; 0x01
    5030:	88 23       	and	r24, r24
    5032:	09 f4       	brne	.+2      	; 0x5036 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa6>
    5034:	74 c0       	rjmp	.+232    	; 0x511e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18e>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
    5036:	8e 81       	ldd	r24, Y+6	; 0x06
    5038:	9f 81       	ldd	r25, Y+7	; 0x07
    503a:	a8 85       	ldd	r26, Y+8	; 0x08
    503c:	b9 85       	ldd	r27, Y+9	; 0x09
    503e:	82 5b       	subi	r24, 0xB2	; 178
    5040:	9d 4f       	sbci	r25, 0xFD	; 253
    5042:	af 4f       	sbci	r26, 0xFF	; 255
    5044:	bf 4f       	sbci	r27, 0xFF	; 255
				+ TccOverheadMicroSeconds;

			if (SubTimeout <
    5046:	88 15       	cp	r24, r8
    5048:	99 05       	cpc	r25, r9
    504a:	aa 05       	cpc	r26, r10
    504c:	bb 05       	cpc	r27, r11
    504e:	08 f0       	brcs	.+2      	; 0x5052 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
    5050:	60 c0       	rjmp	.+192    	; 0x5112 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
    5052:	88 1a       	sub	r8, r24
    5054:	99 0a       	sbc	r9, r25
    5056:	aa 0a       	sbc	r10, r26
    5058:	bb 0a       	sbc	r11, r27
    505a:	61 c0       	rjmp	.+194    	; 0x511e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
    505c:	8e 81       	ldd	r24, Y+6	; 0x06
    505e:	9f 81       	ldd	r25, Y+7	; 0x07
    5060:	a8 85       	ldd	r26, Y+8	; 0x08
    5062:	b9 85       	ldd	r27, Y+9	; 0x09
    5064:	8e 54       	subi	r24, 0x4E	; 78
    5066:	9d 4f       	sbci	r25, 0xFD	; 253
    5068:	af 4f       	sbci	r26, 0xFF	; 255
    506a:	bf 4f       	sbci	r27, 0xFF	; 255
    506c:	88 0f       	add	r24, r24
    506e:	99 1f       	adc	r25, r25
    5070:	aa 1f       	adc	r26, r26
    5072:	bb 1f       	adc	r27, r27
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    5074:	88 15       	cp	r24, r8
    5076:	99 05       	cpc	r25, r9
    5078:	aa 05       	cpc	r26, r10
    507a:	bb 05       	cpc	r27, r11
    507c:	08 f0       	brcs	.+2      	; 0x5080 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
    507e:	57 c0       	rjmp	.+174    	; 0x512e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    5080:	88 1a       	sub	r8, r24
    5082:	99 0a       	sbc	r9, r25
    5084:	aa 0a       	sbc	r10, r26
    5086:	bb 0a       	sbc	r11, r27
    5088:	4e c0       	rjmp	.+156    	; 0x5126 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
    508a:	8a 81       	ldd	r24, Y+2	; 0x02
    508c:	88 23       	and	r24, r24
    508e:	09 f4       	brne	.+2      	; 0x5092 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
    5090:	4a c0       	rjmp	.+148    	; 0x5126 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
    5092:	8e 81       	ldd	r24, Y+6	; 0x06
    5094:	9f 81       	ldd	r25, Y+7	; 0x07
    5096:	a8 85       	ldd	r26, Y+8	; 0x08
    5098:	b9 85       	ldd	r27, Y+9	; 0x09
    509a:	8c 56       	subi	r24, 0x6C	; 108
    509c:	9d 4f       	sbci	r25, 0xFD	; 253
    509e:	af 4f       	sbci	r26, 0xFF	; 255
    50a0:	bf 4f       	sbci	r27, 0xFF	; 255
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    50a2:	88 15       	cp	r24, r8
    50a4:	99 05       	cpc	r25, r9
    50a6:	aa 05       	cpc	r26, r10
    50a8:	bb 05       	cpc	r27, r11
    50aa:	08 f0       	brcs	.+2      	; 0x50ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11e>
    50ac:	42 c0       	rjmp	.+132    	; 0x5132 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a2>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    50ae:	88 1a       	sub	r8, r24
    50b0:	99 0a       	sbc	r9, r25
    50b2:	aa 0a       	sbc	r10, r26
    50b4:	bb 0a       	sbc	r11, r27
    50b6:	37 c0       	rjmp	.+110    	; 0x5126 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>

	if (SchedulerSequenceSteps.PreRangeOn) {

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
    50b8:	ae 01       	movw	r20, r28
    50ba:	46 5f       	subi	r20, 0xF6	; 246
    50bc:	5f 4f       	sbci	r21, 0xFF	; 255
    50be:	63 e0       	ldi	r22, 0x03	; 3
    50c0:	c8 01       	movw	r24, r16
    50c2:	74 dd       	rcall	.-1304   	; 0x4bac <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
    50c4:	4a 85       	ldd	r20, Y+10	; 0x0a
    50c6:	5b 85       	ldd	r21, Y+11	; 0x0b
    50c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    50ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    50cc:	4c 56       	subi	r20, 0x6C	; 108
    50ce:	5d 4f       	sbci	r21, 0xFD	; 253
    50d0:	6f 4f       	sbci	r22, 0xFF	; 255
    50d2:	7f 4f       	sbci	r23, 0xFF	; 255
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    50d4:	48 15       	cp	r20, r8
    50d6:	59 05       	cpc	r21, r9
    50d8:	6a 05       	cpc	r22, r10
    50da:	7b 05       	cpc	r23, r11
    50dc:	e0 f4       	brcc	.+56     	; 0x5116 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    50de:	81 11       	cpse	r24, r1
    50e0:	29 c0       	rjmp	.+82     	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>

		SubTimeout = PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
    50e2:	84 1a       	sub	r8, r20
    50e4:	95 0a       	sbc	r9, r21
    50e6:	a6 0a       	sbc	r10, r22
    50e8:	b7 0a       	sbc	r11, r23
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    50ea:	8d 81       	ldd	r24, Y+5	; 0x05
    50ec:	88 23       	and	r24, r24
    50ee:	a9 f0       	breq	.+42     	; 0x511a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18a>
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
    50f0:	a5 01       	movw	r20, r10
    50f2:	94 01       	movw	r18, r8
    50f4:	26 52       	subi	r18, 0x26	; 38
    50f6:	32 40       	sbci	r19, 0x02	; 2
    50f8:	41 09       	sbc	r20, r1
    50fa:	51 09       	sbc	r21, r1
    50fc:	64 e0       	ldi	r22, 0x04	; 4
    50fe:	c8 01       	movw	r24, r16
    5100:	47 de       	rcall	.-882    	; 0x4d90 <set_sequence_step_timeout>
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
    5102:	f8 01       	movw	r30, r16
    5104:	c2 8a       	std	Z+18, r12	; 0x12
    5106:	d3 8a       	std	Z+19, r13	; 0x13
    5108:	e4 8a       	std	Z+20, r14	; 0x14
    510a:	f5 8a       	std	Z+21, r15	; 0x15
    510c:	13 c0       	rjmp	.+38     	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
	u32 SubTimeout = 0;

	if (MeasurementTimingBudgetMicroSeconds
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
    510e:	8c ef       	ldi	r24, 0xFC	; 252
    5110:	11 c0       	rjmp	.+34     	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    5112:	8c ef       	ldi	r24, 0xFC	; 252
    5114:	0f c0       	rjmp	.+30     	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    5116:	8c ef       	ldi	r24, 0xFC	; 252
    5118:	0d c0       	rjmp	.+26     	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
    511a:	80 e0       	ldi	r24, 0x00	; 0
    511c:	0b c0       	rjmp	.+22     	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
		if (Status != VL53L0X_ERROR_NONE) {
			return Status;
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
    511e:	8b 81       	ldd	r24, Y+3	; 0x03
    5120:	81 11       	cpse	r24, r1
    5122:	9c cf       	rjmp	.-200    	; 0x505c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
    5124:	b2 cf       	rjmp	.-156    	; 0x508a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfa>

	if (Status != VL53L0X_ERROR_NONE) {
		return Status;
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
    5126:	8c 81       	ldd	r24, Y+4	; 0x04
    5128:	88 23       	and	r24, r24
    512a:	f9 f2       	breq	.-66     	; 0x50ea <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15a>
    512c:	c5 cf       	rjmp	.-118    	; 0x50b8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x128>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    512e:	8c ef       	ldi	r24, 0xFC	; 252
    5130:	01 c0       	rjmp	.+2      	; 0x5134 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    5132:	8c ef       	ldi	r24, 0xFC	; 252
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	return Status;
}
    5134:	2d 96       	adiw	r28, 0x0d	; 13
    5136:	0f b6       	in	r0, 0x3f	; 63
    5138:	f8 94       	cli
    513a:	de bf       	out	0x3e, r29	; 62
    513c:	0f be       	out	0x3f, r0	; 63
    513e:	cd bf       	out	0x3d, r28	; 61
    5140:	df 91       	pop	r29
    5142:	cf 91       	pop	r28
    5144:	1f 91       	pop	r17
    5146:	0f 91       	pop	r16
    5148:	ff 90       	pop	r15
    514a:	ef 90       	pop	r14
    514c:	df 90       	pop	r13
    514e:	cf 90       	pop	r12
    5150:	bf 90       	pop	r11
    5152:	af 90       	pop	r10
    5154:	9f 90       	pop	r9
    5156:	8f 90       	pop	r8
    5158:	08 95       	ret

0000515a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		u32 *pMeasurementTimingBudgetMicroSeconds)
{
    515a:	8f 92       	push	r8
    515c:	9f 92       	push	r9
    515e:	af 92       	push	r10
    5160:	bf 92       	push	r11
    5162:	cf 92       	push	r12
    5164:	df 92       	push	r13
    5166:	ff 92       	push	r15
    5168:	0f 93       	push	r16
    516a:	1f 93       	push	r17
    516c:	cf 93       	push	r28
    516e:	df 93       	push	r29
    5170:	cd b7       	in	r28, 0x3d	; 61
    5172:	de b7       	in	r29, 0x3e	; 62
    5174:	61 97       	sbiw	r28, 0x11	; 17
    5176:	0f b6       	in	r0, 0x3f	; 63
    5178:	f8 94       	cli
    517a:	de bf       	out	0x3e, r29	; 62
    517c:	0f be       	out	0x3f, r0	; 63
    517e:	cd bf       	out	0x3d, r28	; 61
    5180:	6c 01       	movw	r12, r24
    5182:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	u32 FinalRangeTimeoutMicroSeconds;
	u32 MsrcDccTccTimeoutMicroSeconds	= 2000;
    5184:	80 ed       	ldi	r24, 0xD0	; 208
    5186:	97 e0       	ldi	r25, 0x07	; 7
    5188:	a0 e0       	ldi	r26, 0x00	; 0
    518a:	b0 e0       	ldi	r27, 0x00	; 0
    518c:	8a 87       	std	Y+10, r24	; 0x0a
    518e:	9b 87       	std	Y+11, r25	; 0x0b
    5190:	ac 87       	std	Y+12, r26	; 0x0c
    5192:	bd 87       	std	Y+13, r27	; 0x0d
	u32 MsrcOverheadMicroSeconds		= 660;
	u32 TccOverheadMicroSeconds		= 590;
	u32 DssOverheadMicroSeconds		= 690;
	u32 PreRangeOverheadMicroSeconds	= 660;
	u32 FinalRangeOverheadMicroSeconds = 550;
	u32 PreRangeTimeoutMicroSeconds	= 0;
    5194:	1e 86       	std	Y+14, r1	; 0x0e
    5196:	1f 86       	std	Y+15, r1	; 0x0f
    5198:	18 8a       	std	Y+16, r1	; 0x10
    519a:	19 8a       	std	Y+17, r1	; 0x11

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
    519c:	86 e3       	ldi	r24, 0x36	; 54
    519e:	9b e0       	ldi	r25, 0x0B	; 11
    51a0:	a0 e0       	ldi	r26, 0x00	; 0
    51a2:	b0 e0       	ldi	r27, 0x00	; 0
    51a4:	fb 01       	movw	r30, r22
    51a6:	80 83       	st	Z, r24
    51a8:	91 83       	std	Z+1, r25	; 0x01
    51aa:	a2 83       	std	Z+2, r26	; 0x02
    51ac:	b3 83       	std	Z+3, r27	; 0x03

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    51ae:	be 01       	movw	r22, r28
    51b0:	6f 5f       	subi	r22, 0xFF	; 255
    51b2:	7f 4f       	sbci	r23, 0xFF	; 255
    51b4:	c6 01       	movw	r24, r12
    51b6:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <VL53L0X_GetSequenceStepEnables>
    51ba:	f8 2e       	mov	r15, r24

	if (Status != VL53L0X_ERROR_NONE) {
    51bc:	81 11       	cpse	r24, r1
    51be:	b3 c0       	rjmp	.+358    	; 0x5326 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
    51c0:	89 81       	ldd	r24, Y+1	; 0x01
    51c2:	81 11       	cpse	r24, r1
    51c4:	07 c0       	rjmp	.+14     	; 0x51d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    51c6:	8a 81       	ldd	r24, Y+2	; 0x02
    51c8:	81 11       	cpse	r24, r1
    51ca:	04 c0       	rjmp	.+8      	; 0x51d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
		SchedulerSequenceSteps.MsrcOn ||
    51cc:	8b 81       	ldd	r24, Y+3	; 0x03
    51ce:	88 23       	and	r24, r24
    51d0:	09 f4       	brne	.+2      	; 0x51d4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    51d2:	a5 c0       	rjmp	.+330    	; 0x531e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    51d4:	ae 01       	movw	r20, r28
    51d6:	46 5f       	subi	r20, 0xF6	; 246
    51d8:	5f 4f       	sbci	r21, 0xFF	; 255
    51da:	62 e0       	ldi	r22, 0x02	; 2
    51dc:	c6 01       	movw	r24, r12
    51de:	e6 dc       	rcall	.-1588   	; 0x4bac <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
    51e0:	81 11       	cpse	r24, r1
    51e2:	97 c0       	rjmp	.+302    	; 0x5312 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1b8>
			if (SchedulerSequenceSteps.TccOn) {
    51e4:	89 81       	ldd	r24, Y+1	; 0x01
    51e6:	88 23       	and	r24, r24
    51e8:	a9 f0       	breq	.+42     	; 0x5214 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xba>
				*pMeasurementTimingBudgetMicroSeconds +=
    51ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    51ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    51ee:	ac 85       	ldd	r26, Y+12	; 0x0c
    51f0:	bd 85       	ldd	r27, Y+13	; 0x0d
    51f2:	82 5b       	subi	r24, 0xB2	; 178
    51f4:	9d 4f       	sbci	r25, 0xFD	; 253
    51f6:	af 4f       	sbci	r26, 0xFF	; 255
    51f8:	bf 4f       	sbci	r27, 0xFF	; 255
    51fa:	f8 01       	movw	r30, r16
    51fc:	40 81       	ld	r20, Z
    51fe:	51 81       	ldd	r21, Z+1	; 0x01
    5200:	62 81       	ldd	r22, Z+2	; 0x02
    5202:	73 81       	ldd	r23, Z+3	; 0x03
    5204:	84 0f       	add	r24, r20
    5206:	95 1f       	adc	r25, r21
    5208:	a6 1f       	adc	r26, r22
    520a:	b7 1f       	adc	r27, r23
    520c:	80 83       	st	Z, r24
    520e:	91 83       	std	Z+1, r25	; 0x01
    5210:	a2 83       	std	Z+2, r26	; 0x02
    5212:	b3 83       	std	Z+3, r27	; 0x03
					MsrcDccTccTimeoutMicroSeconds +
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
    5214:	8b 81       	ldd	r24, Y+3	; 0x03
    5216:	88 23       	and	r24, r24
    5218:	d1 f0       	breq	.+52     	; 0x524e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf4>
				*pMeasurementTimingBudgetMicroSeconds +=
    521a:	8a 85       	ldd	r24, Y+10	; 0x0a
    521c:	9b 85       	ldd	r25, Y+11	; 0x0b
    521e:	ac 85       	ldd	r26, Y+12	; 0x0c
    5220:	bd 85       	ldd	r27, Y+13	; 0x0d
    5222:	8e 54       	subi	r24, 0x4E	; 78
    5224:	9d 4f       	sbci	r25, 0xFD	; 253
    5226:	af 4f       	sbci	r26, 0xFF	; 255
    5228:	bf 4f       	sbci	r27, 0xFF	; 255
    522a:	88 0f       	add	r24, r24
    522c:	99 1f       	adc	r25, r25
    522e:	aa 1f       	adc	r26, r26
    5230:	bb 1f       	adc	r27, r27
    5232:	f8 01       	movw	r30, r16
    5234:	40 81       	ld	r20, Z
    5236:	51 81       	ldd	r21, Z+1	; 0x01
    5238:	62 81       	ldd	r22, Z+2	; 0x02
    523a:	73 81       	ldd	r23, Z+3	; 0x03
    523c:	84 0f       	add	r24, r20
    523e:	95 1f       	adc	r25, r21
    5240:	a6 1f       	adc	r26, r22
    5242:	b7 1f       	adc	r27, r23
    5244:	80 83       	st	Z, r24
    5246:	91 83       	std	Z+1, r25	; 0x01
    5248:	a2 83       	std	Z+2, r26	; 0x02
    524a:	b3 83       	std	Z+3, r27	; 0x03
    524c:	68 c0       	rjmp	.+208    	; 0x531e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				2 * (MsrcDccTccTimeoutMicroSeconds +
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
    524e:	8a 81       	ldd	r24, Y+2	; 0x02
    5250:	88 23       	and	r24, r24
    5252:	09 f4       	brne	.+2      	; 0x5256 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
    5254:	64 c0       	rjmp	.+200    	; 0x531e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				*pMeasurementTimingBudgetMicroSeconds +=
    5256:	8a 85       	ldd	r24, Y+10	; 0x0a
    5258:	9b 85       	ldd	r25, Y+11	; 0x0b
    525a:	ac 85       	ldd	r26, Y+12	; 0x0c
    525c:	bd 85       	ldd	r27, Y+13	; 0x0d
    525e:	8c 56       	subi	r24, 0x6C	; 108
    5260:	9d 4f       	sbci	r25, 0xFD	; 253
    5262:	af 4f       	sbci	r26, 0xFF	; 255
    5264:	bf 4f       	sbci	r27, 0xFF	; 255
    5266:	f8 01       	movw	r30, r16
    5268:	40 81       	ld	r20, Z
    526a:	51 81       	ldd	r21, Z+1	; 0x01
    526c:	62 81       	ldd	r22, Z+2	; 0x02
    526e:	73 81       	ldd	r23, Z+3	; 0x03
    5270:	84 0f       	add	r24, r20
    5272:	95 1f       	adc	r25, r21
    5274:	a6 1f       	adc	r26, r22
    5276:	b7 1f       	adc	r27, r23
    5278:	80 83       	st	Z, r24
    527a:	91 83       	std	Z+1, r25	; 0x01
    527c:	a2 83       	std	Z+2, r26	; 0x02
    527e:	b3 83       	std	Z+3, r27	; 0x03
    5280:	4e c0       	rjmp	.+156    	; 0x531e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    5282:	ae 01       	movw	r20, r28
    5284:	42 5f       	subi	r20, 0xF2	; 242
    5286:	5f 4f       	sbci	r21, 0xFF	; 255
    5288:	63 e0       	ldi	r22, 0x03	; 3
    528a:	c6 01       	movw	r24, r12
    528c:	8f dc       	rcall	.-1762   	; 0x4bac <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    528e:	4e 85       	ldd	r20, Y+14	; 0x0e
    5290:	5f 85       	ldd	r21, Y+15	; 0x0f
    5292:	68 89       	ldd	r22, Y+16	; 0x10
    5294:	79 89       	ldd	r23, Y+17	; 0x11
    5296:	4c 56       	subi	r20, 0x6C	; 108
    5298:	5d 4f       	sbci	r21, 0xFD	; 253
    529a:	6f 4f       	sbci	r22, 0xFF	; 255
    529c:	7f 4f       	sbci	r23, 0xFF	; 255
    529e:	f8 01       	movw	r30, r16
    52a0:	80 80       	ld	r8, Z
    52a2:	91 80       	ldd	r9, Z+1	; 0x01
    52a4:	a2 80       	ldd	r10, Z+2	; 0x02
    52a6:	b3 80       	ldd	r11, Z+3	; 0x03
    52a8:	48 0d       	add	r20, r8
    52aa:	59 1d       	adc	r21, r9
    52ac:	6a 1d       	adc	r22, r10
    52ae:	7b 1d       	adc	r23, r11
    52b0:	40 83       	st	Z, r20
    52b2:	51 83       	std	Z+1, r21	; 0x01
    52b4:	62 83       	std	Z+2, r22	; 0x02
    52b6:	73 83       	std	Z+3, r23	; 0x03
				PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    52b8:	81 11       	cpse	r24, r1
    52ba:	2d c0       	rjmp	.+90     	; 0x5316 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1bc>
		if (SchedulerSequenceSteps.FinalRangeOn) {
    52bc:	8d 81       	ldd	r24, Y+5	; 0x05
    52be:	88 23       	and	r24, r24
    52c0:	e9 f0       	breq	.+58     	; 0x52fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a2>
			Status = get_sequence_step_timeout(Dev,
    52c2:	ae 01       	movw	r20, r28
    52c4:	4a 5f       	subi	r20, 0xFA	; 250
    52c6:	5f 4f       	sbci	r21, 0xFF	; 255
    52c8:	64 e0       	ldi	r22, 0x04	; 4
    52ca:	c6 01       	movw	r24, r12
    52cc:	6f dc       	rcall	.-1826   	; 0x4bac <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    52ce:	4e 81       	ldd	r20, Y+6	; 0x06
    52d0:	5f 81       	ldd	r21, Y+7	; 0x07
    52d2:	68 85       	ldd	r22, Y+8	; 0x08
    52d4:	79 85       	ldd	r23, Y+9	; 0x09
    52d6:	4a 5d       	subi	r20, 0xDA	; 218
    52d8:	5d 4f       	sbci	r21, 0xFD	; 253
    52da:	6f 4f       	sbci	r22, 0xFF	; 255
    52dc:	7f 4f       	sbci	r23, 0xFF	; 255
    52de:	f8 01       	movw	r30, r16
    52e0:	80 80       	ld	r8, Z
    52e2:	91 80       	ldd	r9, Z+1	; 0x01
    52e4:	a2 80       	ldd	r10, Z+2	; 0x02
    52e6:	b3 80       	ldd	r11, Z+3	; 0x03
    52e8:	48 0d       	add	r20, r8
    52ea:	59 1d       	adc	r21, r9
    52ec:	6a 1d       	adc	r22, r10
    52ee:	7b 1d       	adc	r23, r11
    52f0:	40 83       	st	Z, r20
    52f2:	51 83       	std	Z+1, r21	; 0x01
    52f4:	62 83       	std	Z+2, r22	; 0x02
    52f6:	73 83       	std	Z+3, r23	; 0x03
				(FinalRangeTimeoutMicroSeconds +
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    52f8:	81 11       	cpse	r24, r1
    52fa:	0f c0       	rjmp	.+30     	; 0x531a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c0>
		VL53L0X_SETPARAMETERFIELD(Dev,
    52fc:	f8 01       	movw	r30, r16
    52fe:	80 81       	ld	r24, Z
    5300:	91 81       	ldd	r25, Z+1	; 0x01
    5302:	a2 81       	ldd	r26, Z+2	; 0x02
    5304:	b3 81       	ldd	r27, Z+3	; 0x03
    5306:	f6 01       	movw	r30, r12
    5308:	82 8b       	std	Z+18, r24	; 0x12
    530a:	93 8b       	std	Z+19, r25	; 0x13
    530c:	a4 8b       	std	Z+20, r26	; 0x14
    530e:	b5 8b       	std	Z+21, r27	; 0x15
    5310:	0a c0       	rjmp	.+20     	; 0x5326 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>

	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    5312:	f8 2e       	mov	r15, r24
    5314:	08 c0       	rjmp	.+16     	; 0x5326 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    5316:	f8 2e       	mov	r15, r24
    5318:	06 c0       	rjmp	.+12     	; 0x5326 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    531a:	f8 2e       	mov	r15, r24
    531c:	04 c0       	rjmp	.+8      	; 0x5326 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
    531e:	8c 81       	ldd	r24, Y+4	; 0x04
    5320:	88 23       	and	r24, r24
    5322:	61 f2       	breq	.-104    	; 0x52bc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x162>
    5324:	ae cf       	rjmp	.-164    	; 0x5282 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}
	
	return Status;
}
    5326:	8f 2d       	mov	r24, r15
    5328:	61 96       	adiw	r28, 0x11	; 17
    532a:	0f b6       	in	r0, 0x3f	; 63
    532c:	f8 94       	cli
    532e:	de bf       	out	0x3e, r29	; 62
    5330:	0f be       	out	0x3f, r0	; 63
    5332:	cd bf       	out	0x3d, r28	; 61
    5334:	df 91       	pop	r29
    5336:	cf 91       	pop	r28
    5338:	1f 91       	pop	r17
    533a:	0f 91       	pop	r16
    533c:	ff 90       	pop	r15
    533e:	df 90       	pop	r13
    5340:	cf 90       	pop	r12
    5342:	bf 90       	pop	r11
    5344:	af 90       	pop	r10
    5346:	9f 90       	pop	r9
    5348:	8f 90       	pop	r8
    534a:	08 95       	ret

0000534c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		u8 *pTuningSettingBuffer)
{
    534c:	2f 92       	push	r2
    534e:	3f 92       	push	r3
    5350:	4f 92       	push	r4
    5352:	5f 92       	push	r5
    5354:	6f 92       	push	r6
    5356:	7f 92       	push	r7
    5358:	8f 92       	push	r8
    535a:	9f 92       	push	r9
    535c:	af 92       	push	r10
    535e:	bf 92       	push	r11
    5360:	cf 92       	push	r12
    5362:	df 92       	push	r13
    5364:	ef 92       	push	r14
    5366:	ff 92       	push	r15
    5368:	0f 93       	push	r16
    536a:	1f 93       	push	r17
    536c:	cf 93       	push	r28
    536e:	df 93       	push	r29
    5370:	00 d0       	rcall	.+0      	; 0x5372 <VL53L0X_load_tuning_settings+0x26>
    5372:	00 d0       	rcall	.+0      	; 0x5374 <VL53L0X_load_tuning_settings+0x28>
    5374:	cd b7       	in	r28, 0x3d	; 61
    5376:	de b7       	in	r29, 0x3e	; 62
    5378:	5c 01       	movw	r10, r24
    537a:	6b 01       	movw	r12, r22
	u8 NumberOfWrites;
	u8 Address;
	u8 localBuffer[4]; /* max */
	u16 Temp16;

	Index = 0;
    537c:	e1 2c       	mov	r14, r1
    537e:	f1 2c       	mov	r15, r1


VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		u8 *pTuningSettingBuffer)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    5380:	80 e0       	ldi	r24, 0x00	; 0
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    5382:	35 01       	movw	r6, r10
    5384:	2d ed       	ldi	r18, 0xDD	; 221
    5386:	62 1a       	sub	r6, r18
    5388:	2e ef       	ldi	r18, 0xFE	; 254
    538a:	72 0a       	sbc	r7, r18
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    538c:	45 01       	movw	r8, r10
    538e:	9f ed       	ldi	r25, 0xDF	; 223
    5390:	89 1a       	sub	r8, r25
    5392:	9e ef       	ldi	r25, 0xFE	; 254
    5394:	99 0a       	sbc	r9, r25
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    5396:	25 01       	movw	r4, r10
    5398:	eb ed       	ldi	r30, 0xDB	; 219
    539a:	4e 1a       	sub	r4, r30
    539c:	ee ef       	ldi	r30, 0xFE	; 254
    539e:	5e 0a       	sbc	r5, r30
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    53a0:	15 01       	movw	r2, r10
    53a2:	f8 ed       	ldi	r31, 0xD8	; 216
    53a4:	2f 1a       	sub	r2, r31
    53a6:	fe ef       	ldi	r31, 0xFE	; 254
    53a8:	3f 0a       	sbc	r3, r31
	u8 localBuffer[4]; /* max */
	u16 Temp16;

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    53aa:	90 c0       	rjmp	.+288    	; 0x54cc <VL53L0X_load_tuning_settings+0x180>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    53ac:	97 01       	movw	r18, r14
    53ae:	2f 5f       	subi	r18, 0xFF	; 255
    53b0:	3f 4f       	sbci	r19, 0xFF	; 255
		if (NumberOfWrites == 0xFF) {
    53b2:	0f 3f       	cpi	r16, 0xFF	; 255
    53b4:	09 f0       	breq	.+2      	; 0x53b8 <VL53L0X_load_tuning_settings+0x6c>
    53b6:	5f c0       	rjmp	.+190    	; 0x5476 <VL53L0X_load_tuning_settings+0x12a>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    53b8:	a7 01       	movw	r20, r14
    53ba:	4e 5f       	subi	r20, 0xFE	; 254
    53bc:	5f 4f       	sbci	r21, 0xFF	; 255
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
    53be:	f6 01       	movw	r30, r12
    53c0:	e2 0f       	add	r30, r18
    53c2:	f3 1f       	adc	r31, r19
			Index++;
			switch (SelectParam) {
    53c4:	90 81       	ld	r25, Z
    53c6:	91 30       	cpi	r25, 0x01	; 1
    53c8:	d1 f0       	breq	.+52     	; 0x53fe <VL53L0X_load_tuning_settings+0xb2>
    53ca:	28 f0       	brcs	.+10     	; 0x53d6 <VL53L0X_load_tuning_settings+0x8a>
    53cc:	92 30       	cpi	r25, 0x02	; 2
    53ce:	59 f1       	breq	.+86     	; 0x5426 <VL53L0X_load_tuning_settings+0xda>
    53d0:	93 30       	cpi	r25, 0x03	; 3
    53d2:	e9 f1       	breq	.+122    	; 0x544e <VL53L0X_load_tuning_settings+0x102>
    53d4:	76 c0       	rjmp	.+236    	; 0x54c2 <VL53L0X_load_tuning_settings+0x176>
			case 0: /* u16 SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    53d6:	f6 01       	movw	r30, r12
    53d8:	ee 0d       	add	r30, r14
    53da:	ff 1d       	adc	r31, r15
    53dc:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    53de:	24 e0       	ldi	r18, 0x04	; 4
    53e0:	e2 0e       	add	r14, r18
    53e2:	f1 1c       	adc	r15, r1
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
			switch (SelectParam) {
			case 0: /* u16 SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    53e4:	f6 01       	movw	r30, r12
    53e6:	e4 0f       	add	r30, r20
    53e8:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    53ea:	20 81       	ld	r18, Z
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	32 2f       	mov	r19, r18
    53f0:	22 27       	eor	r18, r18
    53f2:	29 0f       	add	r18, r25
    53f4:	31 1d       	adc	r19, r1
    53f6:	f4 01       	movw	r30, r8
    53f8:	31 83       	std	Z+1, r19	; 0x01
    53fa:	20 83       	st	Z, r18
				break;
    53fc:	67 c0       	rjmp	.+206    	; 0x54cc <VL53L0X_load_tuning_settings+0x180>
			case 1: /* u16 SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    53fe:	f6 01       	movw	r30, r12
    5400:	ee 0d       	add	r30, r14
    5402:	ff 1d       	adc	r31, r15
    5404:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    5406:	f4 e0       	ldi	r31, 0x04	; 4
    5408:	ef 0e       	add	r14, r31
    540a:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
				break;
			case 1: /* u16 SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    540c:	f6 01       	movw	r30, r12
    540e:	e4 0f       	add	r30, r20
    5410:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    5412:	20 81       	ld	r18, Z
    5414:	30 e0       	ldi	r19, 0x00	; 0
    5416:	32 2f       	mov	r19, r18
    5418:	22 27       	eor	r18, r18
    541a:	29 0f       	add	r18, r25
    541c:	31 1d       	adc	r19, r1
    541e:	f3 01       	movw	r30, r6
    5420:	31 83       	std	Z+1, r19	; 0x01
    5422:	20 83       	st	Z, r18
					Temp16);
				break;
    5424:	53 c0       	rjmp	.+166    	; 0x54cc <VL53L0X_load_tuning_settings+0x180>
			case 2: /* u16 SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    5426:	f6 01       	movw	r30, r12
    5428:	ee 0d       	add	r30, r14
    542a:	ff 1d       	adc	r31, r15
    542c:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    542e:	f4 e0       	ldi	r31, 0x04	; 4
    5430:	ef 0e       	add	r14, r31
    5432:	f1 1c       	adc	r15, r1
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
					Temp16);
				break;
			case 2: /* u16 SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    5434:	f6 01       	movw	r30, r12
    5436:	e4 0f       	add	r30, r20
    5438:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    543a:	20 81       	ld	r18, Z
    543c:	30 e0       	ldi	r19, 0x00	; 0
    543e:	32 2f       	mov	r19, r18
    5440:	22 27       	eor	r18, r18
    5442:	29 0f       	add	r18, r25
    5444:	31 1d       	adc	r19, r1
    5446:	f2 01       	movw	r30, r4
    5448:	31 83       	std	Z+1, r19	; 0x01
    544a:	20 83       	st	Z, r18
				break;
    544c:	3f c0       	rjmp	.+126    	; 0x54cc <VL53L0X_load_tuning_settings+0x180>
			case 3: /* u16 targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    544e:	f6 01       	movw	r30, r12
    5450:	ee 0d       	add	r30, r14
    5452:	ff 1d       	adc	r31, r15
    5454:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    5456:	f4 e0       	ldi	r31, 0x04	; 4
    5458:	ef 0e       	add	r14, r31
    545a:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
				break;
			case 3: /* u16 targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    545c:	f6 01       	movw	r30, r12
    545e:	e4 0f       	add	r30, r20
    5460:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    5462:	20 81       	ld	r18, Z
    5464:	30 e0       	ldi	r19, 0x00	; 0
    5466:	32 2f       	mov	r19, r18
    5468:	22 27       	eor	r18, r18
    546a:	29 0f       	add	r18, r25
    546c:	31 1d       	adc	r19, r1
    546e:	f1 01       	movw	r30, r2
    5470:	31 83       	std	Z+1, r19	; 0x01
    5472:	20 83       	st	Z, r18
				break;
    5474:	2b c0       	rjmp	.+86     	; 0x54cc <VL53L0X_load_tuning_settings+0x180>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}

		} else if (NumberOfWrites <= 4) {
    5476:	05 30       	cpi	r16, 0x05	; 5
    5478:	38 f5       	brcc	.+78     	; 0x54c8 <VL53L0X_load_tuning_settings+0x17c>
			Address = *(pTuningSettingBuffer + Index);
    547a:	f6 01       	movw	r30, r12
    547c:	e2 0f       	add	r30, r18
    547e:	f3 1f       	adc	r31, r19
    5480:	60 81       	ld	r22, Z
			Index++;
    5482:	f2 e0       	ldi	r31, 0x02	; 2
    5484:	ef 0e       	add	r14, r31
    5486:	f1 1c       	adc	r15, r1

			for (i = 0; i < NumberOfWrites; i++) {
    5488:	00 23       	and	r16, r16
    548a:	91 f0       	breq	.+36     	; 0x54b0 <VL53L0X_load_tuning_settings+0x164>
    548c:	97 01       	movw	r18, r14
    548e:	d6 01       	movw	r26, r12
    5490:	ae 0d       	add	r26, r14
    5492:	bf 1d       	adc	r27, r15
    5494:	fe 01       	movw	r30, r28
    5496:	31 96       	adiw	r30, 0x01	; 1
    5498:	e0 2e       	mov	r14, r16
    549a:	f1 2c       	mov	r15, r1
    549c:	cf 01       	movw	r24, r30
    549e:	8e 0d       	add	r24, r14
    54a0:	9f 1d       	adc	r25, r15
				localBuffer[i] = *(pTuningSettingBuffer +
    54a2:	4d 91       	ld	r20, X+
    54a4:	41 93       	st	Z+, r20

		} else if (NumberOfWrites <= 4) {
			Address = *(pTuningSettingBuffer + Index);
			Index++;

			for (i = 0; i < NumberOfWrites; i++) {
    54a6:	e8 17       	cp	r30, r24
    54a8:	f9 07       	cpc	r31, r25
    54aa:	d9 f7       	brne	.-10     	; 0x54a2 <VL53L0X_load_tuning_settings+0x156>
    54ac:	e2 0e       	add	r14, r18
    54ae:	f3 1e       	adc	r15, r19
				localBuffer[i] = *(pTuningSettingBuffer +
							Index);
				Index++;
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
    54b0:	10 e0       	ldi	r17, 0x00	; 0
    54b2:	20 e0       	ldi	r18, 0x00	; 0
    54b4:	30 e0       	ldi	r19, 0x00	; 0
    54b6:	ae 01       	movw	r20, r28
    54b8:	4f 5f       	subi	r20, 0xFF	; 255
    54ba:	5f 4f       	sbci	r21, 0xFF	; 255
    54bc:	c5 01       	movw	r24, r10
    54be:	55 d7       	rcall	.+3754   	; 0x636a <VL53L0X_WriteMulti>
    54c0:	05 c0       	rjmp	.+10     	; 0x54cc <VL53L0X_load_tuning_settings+0x180>
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    54c2:	7a 01       	movw	r14, r20
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
				break;
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    54c4:	8c ef       	ldi	r24, 0xFC	; 252
    54c6:	02 c0       	rjmp	.+4      	; 0x54cc <VL53L0X_load_tuning_settings+0x180>
	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    54c8:	79 01       	movw	r14, r18

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    54ca:	8c ef       	ldi	r24, 0xFC	; 252
	u8 localBuffer[4]; /* max */
	u16 Temp16;

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    54cc:	f6 01       	movw	r30, r12
    54ce:	ee 0d       	add	r30, r14
    54d0:	ff 1d       	adc	r31, r15
    54d2:	00 81       	ld	r16, Z
    54d4:	00 23       	and	r16, r16
    54d6:	19 f0       	breq	.+6      	; 0x54de <VL53L0X_load_tuning_settings+0x192>
    54d8:	88 23       	and	r24, r24
    54da:	09 f4       	brne	.+2      	; 0x54de <VL53L0X_load_tuning_settings+0x192>
    54dc:	67 cf       	rjmp	.-306    	; 0x53ac <VL53L0X_load_tuning_settings+0x60>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	return Status;
}
    54de:	0f 90       	pop	r0
    54e0:	0f 90       	pop	r0
    54e2:	0f 90       	pop	r0
    54e4:	0f 90       	pop	r0
    54e6:	df 91       	pop	r29
    54e8:	cf 91       	pop	r28
    54ea:	1f 91       	pop	r17
    54ec:	0f 91       	pop	r16
    54ee:	ff 90       	pop	r15
    54f0:	ef 90       	pop	r14
    54f2:	df 90       	pop	r13
    54f4:	cf 90       	pop	r12
    54f6:	bf 90       	pop	r11
    54f8:	af 90       	pop	r10
    54fa:	9f 90       	pop	r9
    54fc:	8f 90       	pop	r8
    54fe:	7f 90       	pop	r7
    5500:	6f 90       	pop	r6
    5502:	5f 90       	pop	r5
    5504:	4f 90       	pop	r4
    5506:	3f 90       	pop	r3
    5508:	2f 90       	pop	r2
    550a:	08 95       	ret

0000550c <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	f1616 *ptotal_xtalk_rate_mcps)
{
    550c:	cf 92       	push	r12
    550e:	df 92       	push	r13
    5510:	ef 92       	push	r14
    5512:	ff 92       	push	r15
    5514:	0f 93       	push	r16
    5516:	1f 93       	push	r17
    5518:	cf 93       	push	r28
    551a:	df 93       	push	r29
    551c:	1f 92       	push	r1
    551e:	cd b7       	in	r28, 0x3d	; 61
    5520:	de b7       	in	r29, 0x3e	; 62
    5522:	7c 01       	movw	r14, r24
    5524:	6b 01       	movw	r12, r22
    5526:	8a 01       	movw	r16, r20

	u8 xtalkCompEnable;
	f1616 totalXtalkMegaCps;
	f1616 xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
    5528:	da 01       	movw	r26, r20
    552a:	1d 92       	st	X+, r1
    552c:	1d 92       	st	X+, r1
    552e:	1d 92       	st	X+, r1
    5530:	1c 92       	st	X, r1
    5532:	13 97       	sbiw	r26, 0x03	; 3

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
    5534:	be 01       	movw	r22, r28
    5536:	6f 5f       	subi	r22, 0xFF	; 255
    5538:	7f 4f       	sbci	r23, 0xFF	; 255
    553a:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <VL53L0X_GetXTalkCompensationEnable>
    553e:	e8 2f       	mov	r30, r24
	if (Status == VL53L0X_ERROR_NONE) {
    5540:	81 11       	cpse	r24, r1
    5542:	22 c0       	rjmp	.+68     	; 0x5588 <VL53L0X_get_total_xtalk_rate+0x7c>

		if (xtalkCompEnable) {
    5544:	89 81       	ldd	r24, Y+1	; 0x01
    5546:	88 23       	and	r24, r24
    5548:	f9 f0       	breq	.+62     	; 0x5588 <VL53L0X_get_total_xtalk_rate+0x7c>
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
    554a:	d6 01       	movw	r26, r12
    554c:	54 96       	adiw	r26, 0x14	; 20
    554e:	8d 91       	ld	r24, X+
    5550:	9c 91       	ld	r25, X
    5552:	55 97       	sbiw	r26, 0x15	; 21
    5554:	d7 01       	movw	r26, r14
    5556:	5d 96       	adiw	r26, 0x1d	; 29
    5558:	2d 91       	ld	r18, X+
    555a:	3d 91       	ld	r19, X+
    555c:	4d 91       	ld	r20, X+
    555e:	5c 91       	ld	r21, X
    5560:	90 97       	sbiw	r26, 0x20	; 32
    5562:	dc 01       	movw	r26, r24
    5564:	0e 94 22 33 	call	0x6644	; 0x6644 <__muluhisi3>
    5568:	dc 01       	movw	r26, r24
    556a:	cb 01       	movw	r24, r22
    556c:	80 58       	subi	r24, 0x80	; 128
    556e:	9f 4f       	sbci	r25, 0xFF	; 255
    5570:	af 4f       	sbci	r26, 0xFF	; 255
    5572:	bf 4f       	sbci	r27, 0xFF	; 255
    5574:	49 2f       	mov	r20, r25
    5576:	5a 2f       	mov	r21, r26
    5578:	6b 2f       	mov	r22, r27
    557a:	77 27       	eor	r23, r23
    557c:	d8 01       	movw	r26, r16
    557e:	4d 93       	st	X+, r20
    5580:	5d 93       	st	X+, r21
    5582:	6d 93       	st	X+, r22
    5584:	7c 93       	st	X, r23
    5586:	13 97       	sbiw	r26, 0x03	; 3
				(totalXtalkMegaCps + 0x80) >> 8;
		}
	}

	return Status;
}
    5588:	8e 2f       	mov	r24, r30
    558a:	0f 90       	pop	r0
    558c:	df 91       	pop	r29
    558e:	cf 91       	pop	r28
    5590:	1f 91       	pop	r17
    5592:	0f 91       	pop	r16
    5594:	ff 90       	pop	r15
    5596:	ef 90       	pop	r14
    5598:	df 90       	pop	r13
    559a:	cf 90       	pop	r12
    559c:	08 95       	ret

0000559e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	f1616 *ptotal_signal_rate_mcps)
{
    559e:	cf 92       	push	r12
    55a0:	df 92       	push	r13
    55a2:	ef 92       	push	r14
    55a4:	ff 92       	push	r15
    55a6:	0f 93       	push	r16
    55a8:	1f 93       	push	r17
    55aa:	cf 93       	push	r28
    55ac:	df 93       	push	r29
    55ae:	00 d0       	rcall	.+0      	; 0x55b0 <VL53L0X_get_total_signal_rate+0x12>
    55b0:	00 d0       	rcall	.+0      	; 0x55b2 <VL53L0X_get_total_signal_rate+0x14>
    55b2:	cd b7       	in	r28, 0x3d	; 61
    55b4:	de b7       	in	r29, 0x3e	; 62
    55b6:	8a 01       	movw	r16, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	f1616 totalXtalkMegaCps;

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
    55b8:	fb 01       	movw	r30, r22
    55ba:	c4 84       	ldd	r12, Z+12	; 0x0c
    55bc:	d5 84       	ldd	r13, Z+13	; 0x0d
    55be:	e6 84       	ldd	r14, Z+14	; 0x0e
    55c0:	f7 84       	ldd	r15, Z+15	; 0x0f
	f1616 *ptotal_signal_rate_mcps)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	f1616 totalXtalkMegaCps;

	*ptotal_signal_rate_mcps =
    55c2:	fa 01       	movw	r30, r20
    55c4:	c0 82       	st	Z, r12
    55c6:	d1 82       	std	Z+1, r13	; 0x01
    55c8:	e2 82       	std	Z+2, r14	; 0x02
    55ca:	f3 82       	std	Z+3, r15	; 0x03
		pRangingMeasurementData->SignalRateRtnMegaCps;

	Status = VL53L0X_get_total_xtalk_rate(
    55cc:	ae 01       	movw	r20, r28
    55ce:	4f 5f       	subi	r20, 0xFF	; 255
    55d0:	5f 4f       	sbci	r21, 0xFF	; 255
    55d2:	9c df       	rcall	.-200    	; 0x550c <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
    55d4:	81 11       	cpse	r24, r1
    55d6:	11 c0       	rjmp	.+34     	; 0x55fa <VL53L0X_get_total_signal_rate+0x5c>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
    55d8:	f8 01       	movw	r30, r16
    55da:	c0 80       	ld	r12, Z
    55dc:	d1 80       	ldd	r13, Z+1	; 0x01
    55de:	e2 80       	ldd	r14, Z+2	; 0x02
    55e0:	f3 80       	ldd	r15, Z+3	; 0x03
    55e2:	49 81       	ldd	r20, Y+1	; 0x01
    55e4:	5a 81       	ldd	r21, Y+2	; 0x02
    55e6:	6b 81       	ldd	r22, Y+3	; 0x03
    55e8:	7c 81       	ldd	r23, Y+4	; 0x04
    55ea:	4c 0d       	add	r20, r12
    55ec:	5d 1d       	adc	r21, r13
    55ee:	6e 1d       	adc	r22, r14
    55f0:	7f 1d       	adc	r23, r15
    55f2:	40 83       	st	Z, r20
    55f4:	51 83       	std	Z+1, r21	; 0x01
    55f6:	62 83       	std	Z+2, r22	; 0x02
    55f8:	73 83       	std	Z+3, r23	; 0x03

	return Status;
}
    55fa:	0f 90       	pop	r0
    55fc:	0f 90       	pop	r0
    55fe:	0f 90       	pop	r0
    5600:	0f 90       	pop	r0
    5602:	df 91       	pop	r29
    5604:	cf 91       	pop	r28
    5606:	1f 91       	pop	r17
    5608:	0f 91       	pop	r16
    560a:	ff 90       	pop	r15
    560c:	ef 90       	pop	r14
    560e:	df 90       	pop	r13
    5610:	cf 90       	pop	r12
    5612:	08 95       	ret

00005614 <VL53L0X_calc_dmax>:
	f1616 pwMult,
	u32 sigmaEstimateP1,
	f1616 sigmaEstimateP2,
	u32 peakVcselDuration_us,
	u32 *pdmax_mm)
{
    5614:	4f 92       	push	r4
    5616:	5f 92       	push	r5
    5618:	6f 92       	push	r6
    561a:	7f 92       	push	r7
    561c:	8f 92       	push	r8
    561e:	9f 92       	push	r9
    5620:	af 92       	push	r10
    5622:	bf 92       	push	r11
    5624:	cf 92       	push	r12
    5626:	df 92       	push	r13
    5628:	ef 92       	push	r14
    562a:	ff 92       	push	r15
    562c:	0f 93       	push	r16
    562e:	1f 93       	push	r17
    5630:	cf 93       	push	r28
    5632:	df 93       	push	r29
    5634:	cd b7       	in	r28, 0x3d	; 61
    5636:	de b7       	in	r29, 0x3e	; 62
    5638:	64 97       	sbiw	r28, 0x14	; 20
    563a:	0f b6       	in	r0, 0x3f	; 63
    563c:	f8 94       	cli
    563e:	de bf       	out	0x3e, r29	; 62
    5640:	0f be       	out	0x3f, r0	; 63
    5642:	cd bf       	out	0x3d, r28	; 61
    5644:	49 87       	std	Y+9, r20	; 0x09
    5646:	5a 87       	std	Y+10, r21	; 0x0a
    5648:	6b 87       	std	Y+11, r22	; 0x0b
    564a:	7c 87       	std	Y+12, r23	; 0x0c
    564c:	09 83       	std	Y+1, r16	; 0x01
    564e:	1a 83       	std	Y+2, r17	; 0x02
    5650:	2b 83       	std	Y+3, r18	; 0x03
    5652:	3c 83       	std	Y+4, r19	; 0x04
	u32 signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
    5654:	fc 01       	movw	r30, r24
    5656:	e5 5c       	subi	r30, 0xC5	; 197
    5658:	fe 4f       	sbci	r31, 0xFE	; 254
	f1616 sigmaEstP2Tmp;
	u32 signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	dmaxCalRange_mm =
    565a:	20 81       	ld	r18, Z
    565c:	31 81       	ldd	r19, Z+1	; 0x01
    565e:	29 01       	movw	r4, r18
    5660:	61 2c       	mov	r6, r1
    5662:	71 2c       	mov	r7, r1
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);

	dmaxCalSignalRateRtn_mcps =
    5664:	32 96       	adiw	r30, 0x02	; 2

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
    5666:	60 81       	ld	r22, Z
    5668:	71 81       	ldd	r23, Z+1	; 0x01
    566a:	82 81       	ldd	r24, Z+2	; 0x02
    566c:	93 81       	ldd	r25, Z+3	; 0x03
    566e:	a3 01       	movw	r20, r6
    5670:	92 01       	movw	r18, r4
    5672:	83 d7       	rcall	.+3846   	; 0x657a <__mulsi3>
    5674:	dc 01       	movw	r26, r24
    5676:	cb 01       	movw	r24, r22
    5678:	80 58       	subi	r24, 0x80	; 128
    567a:	9f 4f       	sbci	r25, 0xFF	; 255
    567c:	af 4f       	sbci	r26, 0xFF	; 255
    567e:	bf 4f       	sbci	r27, 0xFF	; 255
    5680:	69 2f       	mov	r22, r25
    5682:	7a 2f       	mov	r23, r26
    5684:	8b 2f       	mov	r24, r27
	SignalAt0mm *= dmaxCalRange_mm;
    5686:	99 27       	eor	r25, r25
    5688:	78 d7       	rcall	.+3824   	; 0x657a <__mulsi3>
    568a:	6d 87       	std	Y+13, r22	; 0x0d
    568c:	7e 87       	std	Y+14, r23	; 0x0e
    568e:	8f 87       	std	Y+15, r24	; 0x0f
    5690:	98 8b       	std	Y+16, r25	; 0x10

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
    5692:	29 81       	ldd	r18, Y+1	; 0x01
    5694:	3a 81       	ldd	r19, Y+2	; 0x02
    5696:	4b 81       	ldd	r20, Y+3	; 0x03
    5698:	5c 81       	ldd	r21, Y+4	; 0x04
    569a:	21 15       	cp	r18, r1
    569c:	31 05       	cpc	r19, r1
    569e:	41 05       	cpc	r20, r1
    56a0:	51 05       	cpc	r21, r1
    56a2:	b1 f1       	breq	.+108    	; 0x5710 <VL53L0X_calc_dmax+0xfc>
		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
    56a4:	49 84       	ldd	r4, Y+9	; 0x09
    56a6:	5a 84       	ldd	r5, Y+10	; 0x0a
    56a8:	6b 84       	ldd	r6, Y+11	; 0x0b
    56aa:	7c 84       	ldd	r7, Y+12	; 0x0c
    56ac:	03 2e       	mov	r0, r19
    56ae:	3a e0       	ldi	r19, 0x0A	; 10
    56b0:	44 0c       	add	r4, r4
    56b2:	55 1c       	adc	r5, r5
    56b4:	66 1c       	adc	r6, r6
    56b6:	77 1c       	adc	r7, r7
    56b8:	3a 95       	dec	r19
    56ba:	d1 f7       	brne	.-12     	; 0x56b0 <VL53L0X_calc_dmax+0x9c>
    56bc:	30 2d       	mov	r19, r0
    56be:	da 01       	movw	r26, r20
    56c0:	c9 01       	movw	r24, r18
    56c2:	b6 95       	lsr	r27
    56c4:	a7 95       	ror	r26
    56c6:	97 95       	ror	r25
    56c8:	87 95       	ror	r24
    56ca:	bc 01       	movw	r22, r24
    56cc:	cd 01       	movw	r24, r26
    56ce:	64 0d       	add	r22, r4
    56d0:	75 1d       	adc	r23, r5
    56d2:	86 1d       	adc	r24, r6
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
    56d4:	97 1d       	adc	r25, r7
    56d6:	60 d7       	rcall	.+3776   	; 0x6598 <__udivmodsi4>

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
    56d8:	da 01       	movw	r26, r20
    56da:	c9 01       	movw	r24, r18
    56dc:	88 0f       	add	r24, r24
    56de:	99 1f       	adc	r25, r25
    56e0:	aa 1f       	adc	r26, r26
    56e2:	bb 1f       	adc	r27, r27
    56e4:	bc 01       	movw	r22, r24
    56e6:	cd 01       	movw	r24, r26
    56e8:	62 0f       	add	r22, r18
    56ea:	73 1f       	adc	r23, r19
    56ec:	84 1f       	adc	r24, r20

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
    56ee:	95 1f       	adc	r25, r21
    56f0:	9b 01       	movw	r18, r22
    56f2:	ac 01       	movw	r20, r24
    56f4:	42 d7       	rcall	.+3716   	; 0x657a <__mulsi3>
    56f6:	dc 01       	movw	r26, r24
    56f8:	cb 01       	movw	r24, r22
    56fa:	90 58       	subi	r25, 0x80	; 128
    56fc:	af 4f       	sbci	r26, 0xFF	; 255
    56fe:	bf 4f       	sbci	r27, 0xFF	; 255
    5700:	9d 01       	movw	r18, r26
    5702:	44 27       	eor	r20, r20
    5704:	55 27       	eor	r21, r21
    5706:	29 87       	std	Y+9, r18	; 0x09
    5708:	3a 87       	std	Y+10, r19	; 0x0a
    570a:	4b 87       	std	Y+11, r20	; 0x0b
    570c:	5c 87       	std	Y+12, r21	; 0x0c
    570e:	04 c0       	rjmp	.+8      	; 0x5718 <VL53L0X_calc_dmax+0x104>

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
	SignalAt0mm *= dmaxCalRange_mm;

	minSignalNeeded_p1 = 0;
    5710:	19 86       	std	Y+9, r1	; 0x09
    5712:	1a 86       	std	Y+10, r1	; 0x0a
    5714:	1b 86       	std	Y+11, r1	; 0x0b
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
    5716:	1c 86       	std	Y+12, r1	; 0x0c
    5718:	a7 01       	movw	r20, r14
    571a:	96 01       	movw	r18, r12
    571c:	c5 01       	movw	r24, r10
    571e:	b4 01       	movw	r22, r8
    5720:	2c d7       	rcall	.+3672   	; 0x657a <__mulsi3>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	90 58       	subi	r25, 0x80	; 128
    5728:	af 4f       	sbci	r26, 0xFF	; 255
    572a:	bf 4f       	sbci	r27, 0xFF	; 255
    572c:	bd 01       	movw	r22, r26

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
    572e:	88 27       	eor	r24, r24
    5730:	99 27       	eor	r25, r25
    5732:	9b 01       	movw	r18, r22
    5734:	ac 01       	movw	r20, r24
    5736:	21 d7       	rcall	.+3650   	; 0x657a <__mulsi3>
    5738:	69 8b       	std	Y+17, r22	; 0x11
    573a:	7a 8b       	std	Y+18, r23	; 0x12
    573c:	8b 8b       	std	Y+19, r24	; 0x13
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
    573e:	9c 8b       	std	Y+20, r25	; 0x14
    5740:	8f a1       	ldd	r24, Y+39	; 0x27
    5742:	98 a5       	ldd	r25, Y+40	; 0x28
    5744:	a9 a5       	ldd	r26, Y+41	; 0x29
    5746:	ba a5       	ldd	r27, Y+42	; 0x2a
    5748:	90 58       	subi	r25, 0x80	; 128
    574a:	af 4f       	sbci	r26, 0xFF	; 255
    574c:	bf 4f       	sbci	r27, 0xFF	; 255
    574e:	cd 01       	movw	r24, r26
    5750:	aa 27       	eor	r26, r26
    5752:	bb 27       	eor	r27, r27
    5754:	bc 01       	movw	r22, r24
    5756:	cd 01       	movw	r24, r26
    5758:	6d 5f       	subi	r22, 0xFD	; 253
    575a:	7f 4f       	sbci	r23, 0xFF	; 255
    575c:	8f 4f       	sbci	r24, 0xFF	; 255
    575e:	9f 4f       	sbci	r25, 0xFF	; 255
    5760:	2b ea       	ldi	r18, 0xAB	; 171
    5762:	3a ea       	ldi	r19, 0xAA	; 170
    5764:	4a ea       	ldi	r20, 0xAA	; 170
    5766:	5a ea       	ldi	r21, 0xAA	; 170
    5768:	77 d7       	rcall	.+3822   	; 0x6658 <__umulsidi3>
    576a:	00 e2       	ldi	r16, 0x20	; 32
    576c:	9e d7       	rcall	.+3900   	; 0x66aa <__lshrdi3>
    576e:	82 2e       	mov	r8, r18
    5770:	93 2e       	mov	r9, r19
    5772:	a4 2e       	mov	r10, r20
    5774:	b5 2e       	mov	r11, r21
    5776:	b5 01       	movw	r22, r10
    5778:	a4 01       	movw	r20, r8
    577a:	76 95       	lsr	r23
    577c:	67 95       	ror	r22
    577e:	57 95       	ror	r21
    5780:	47 95       	ror	r20
    5782:	76 95       	lsr	r23
    5784:	67 95       	ror	r22
    5786:	57 95       	ror	r21
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
    5788:	47 95       	ror	r20
    578a:	db 01       	movw	r26, r22
    578c:	ca 01       	movw	r24, r20
    578e:	88 0f       	add	r24, r24
    5790:	99 1f       	adc	r25, r25
    5792:	aa 1f       	adc	r26, r26
    5794:	bb 1f       	adc	r27, r27
    5796:	88 0f       	add	r24, r24
    5798:	99 1f       	adc	r25, r25
    579a:	aa 1f       	adc	r26, r26
    579c:	bb 1f       	adc	r27, r27
    579e:	88 0f       	add	r24, r24
    57a0:	99 1f       	adc	r25, r25
    57a2:	aa 1f       	adc	r26, r26
    57a4:	bb 1f       	adc	r27, r27
    57a6:	84 1b       	sub	r24, r20
    57a8:	95 0b       	sbc	r25, r21
    57aa:	a6 0b       	sbc	r26, r22
    57ac:	b7 0b       	sbc	r27, r23
    57ae:	00 97       	sbiw	r24, 0x00	; 0
    57b0:	a1 40       	sbci	r26, 0x01	; 1
    57b2:	b1 05       	cpc	r27, r1
    57b4:	08 f0       	brcs	.+2      	; 0x57b8 <VL53L0X_calc_dmax+0x1a4>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
    57b6:	3e c0       	rjmp	.+124    	; 0x5834 <VL53L0X_calc_dmax+0x220>
    57b8:	6f a1       	ldd	r22, Y+39	; 0x27
    57ba:	78 a5       	ldd	r23, Y+40	; 0x28
    57bc:	89 a5       	ldd	r24, Y+41	; 0x29
    57be:	9a a5       	ldd	r25, Y+42	; 0x2a
    57c0:	6d 5f       	subi	r22, 0xFD	; 253
    57c2:	7f 4f       	sbci	r23, 0xFF	; 255
    57c4:	8f 4f       	sbci	r24, 0xFF	; 255
    57c6:	9f 4f       	sbci	r25, 0xFF	; 255
    57c8:	2b ea       	ldi	r18, 0xAB	; 171
    57ca:	3a ea       	ldi	r19, 0xAA	; 170
    57cc:	4a ea       	ldi	r20, 0xAA	; 170
    57ce:	5a ea       	ldi	r21, 0xAA	; 170
    57d0:	43 d7       	rcall	.+3718   	; 0x6658 <__umulsidi3>
    57d2:	6b d7       	rcall	.+3798   	; 0x66aa <__lshrdi3>
    57d4:	29 83       	std	Y+1, r18	; 0x01
    57d6:	3a 83       	std	Y+2, r19	; 0x02
    57d8:	4b 83       	std	Y+3, r20	; 0x03
    57da:	5c 83       	std	Y+4, r21	; 0x04
    57dc:	6d 83       	std	Y+5, r22	; 0x05
    57de:	7e 83       	std	Y+6, r23	; 0x06
    57e0:	8f 83       	std	Y+7, r24	; 0x07
    57e2:	98 87       	std	Y+8, r25	; 0x08
    57e4:	49 80       	ldd	r4, Y+1	; 0x01
    57e6:	5a 80       	ldd	r5, Y+2	; 0x02
    57e8:	6b 80       	ldd	r6, Y+3	; 0x03
    57ea:	7c 80       	ldd	r7, Y+4	; 0x04
    57ec:	76 94       	lsr	r7
    57ee:	67 94       	ror	r6
    57f0:	57 94       	ror	r5
    57f2:	47 94       	ror	r4
    57f4:	76 94       	lsr	r7
    57f6:	67 94       	ror	r6
    57f8:	57 94       	ror	r5
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
    57fa:	47 94       	ror	r4
    57fc:	d3 01       	movw	r26, r6
    57fe:	c2 01       	movw	r24, r4
    5800:	88 0f       	add	r24, r24
    5802:	99 1f       	adc	r25, r25
    5804:	aa 1f       	adc	r26, r26
    5806:	bb 1f       	adc	r27, r27
    5808:	88 0f       	add	r24, r24
    580a:	99 1f       	adc	r25, r25
    580c:	aa 1f       	adc	r26, r26
    580e:	bb 1f       	adc	r27, r27
    5810:	88 0f       	add	r24, r24
    5812:	99 1f       	adc	r25, r25
    5814:	aa 1f       	adc	r26, r26
    5816:	bb 1f       	adc	r27, r27
    5818:	84 19       	sub	r24, r4
    581a:	95 09       	sbc	r25, r5
    581c:	a6 09       	sbc	r26, r6
    581e:	b7 09       	sbc	r27, r7
    5820:	90 58       	subi	r25, 0x80	; 128
    5822:	af 4f       	sbci	r26, 0xFF	; 255
    5824:	bf 4f       	sbci	r27, 0xFF	; 255
    5826:	bd 01       	movw	r22, r26

		minSignalNeeded_p3 *= minSignalNeeded_p3;
    5828:	88 27       	eor	r24, r24
    582a:	99 27       	eor	r25, r25
    582c:	9b 01       	movw	r18, r22
    582e:	ac 01       	movw	r20, r24
    5830:	a4 d6       	rcall	.+3400   	; 0x657a <__mulsi3>
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
		minSignalNeeded_p3 = 0xfff00000;
    5832:	04 c0       	rjmp	.+8      	; 0x583c <VL53L0X_calc_dmax+0x228>
    5834:	60 e0       	ldi	r22, 0x00	; 0
    5836:	70 e0       	ldi	r23, 0x00	; 0
    5838:	80 ef       	ldi	r24, 0xF0	; 240

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
    583a:	9f ef       	ldi	r25, 0xFF	; 255
    583c:	4b a4       	ldd	r4, Y+43	; 0x2b
    583e:	5c a4       	ldd	r5, Y+44	; 0x2c
    5840:	6d a4       	ldd	r6, Y+45	; 0x2d
    5842:	7e a4       	ldd	r7, Y+46	; 0x2e
    5844:	76 94       	lsr	r7
    5846:	67 94       	ror	r6
    5848:	57 94       	ror	r5
    584a:	47 94       	ror	r4
    584c:	c9 88       	ldd	r12, Y+17	; 0x11
    584e:	da 88       	ldd	r13, Y+18	; 0x12
    5850:	eb 88       	ldd	r14, Y+19	; 0x13
    5852:	fc 88       	ldd	r15, Y+20	; 0x14
    5854:	c4 0c       	add	r12, r4
    5856:	d5 1c       	adc	r13, r5
    5858:	e6 1c       	adc	r14, r6
    585a:	f7 1c       	adc	r15, r7
    585c:	6c 0d       	add	r22, r12
    585e:	7d 1d       	adc	r23, r13
	minSignalNeeded /= peakVcselDuration_us;
    5860:	8e 1d       	adc	r24, r14
    5862:	9f 1d       	adc	r25, r15
    5864:	2b a5       	ldd	r18, Y+43	; 0x2b
    5866:	3c a5       	ldd	r19, Y+44	; 0x2c
    5868:	4d a5       	ldd	r20, Y+45	; 0x2d
    586a:	5e a5       	ldd	r21, Y+46	; 0x2e

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
    586c:	95 d6       	rcall	.+3370   	; 0x6598 <__udivmodsi4>
    586e:	da 01       	movw	r26, r20
    5870:	c9 01       	movw	r24, r18
    5872:	07 2e       	mov	r0, r23
    5874:	7e e0       	ldi	r23, 0x0E	; 14
    5876:	88 0f       	add	r24, r24
    5878:	99 1f       	adc	r25, r25
    587a:	aa 1f       	adc	r26, r26
    587c:	bb 1f       	adc	r27, r27
    587e:	7a 95       	dec	r23

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
    5880:	d1 f7       	brne	.-12     	; 0x5876 <VL53L0X_calc_dmax+0x262>
    5882:	70 2d       	mov	r23, r0
    5884:	bc 01       	movw	r22, r24
    5886:	cd 01       	movw	r24, r26
    5888:	61 58       	subi	r22, 0x81	; 129
	minSignalNeeded /= minSignalNeeded_p4;
    588a:	7f 4f       	sbci	r23, 0xFF	; 255
    588c:	8f 4f       	sbci	r24, 0xFF	; 255
    588e:	9f 4f       	sbci	r25, 0xFF	; 255
    5890:	2e ef       	ldi	r18, 0xFE	; 254
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	40 e0       	ldi	r20, 0x00	; 0
    5896:	50 e0       	ldi	r21, 0x00	; 0
    5898:	7f d6       	rcall	.+3326   	; 0x6598 <__udivmodsi4>
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    589a:	ca 01       	movw	r24, r20
    589c:	b9 01       	movw	r22, r18
    589e:	29 85       	ldd	r18, Y+9	; 0x09
    58a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    58a2:	4b 85       	ldd	r20, Y+11	; 0x0b
    58a4:	5c 85       	ldd	r21, Y+12	; 0x0c
    58a6:	69 d6       	rcall	.+3282   	; 0x657a <__mulsi3>
    58a8:	6c 50       	subi	r22, 0x0C	; 12
    58aa:	7e 4f       	sbci	r23, 0xFE	; 254
    58ac:	8f 4f       	sbci	r24, 0xFF	; 255
    58ae:	9f 4f       	sbci	r25, 0xFF	; 255
    58b0:	0f 2e       	mov	r0, r31
    58b2:	f8 ee       	ldi	r31, 0xE8	; 232
    58b4:	8f 2e       	mov	r8, r31
    58b6:	f3 e0       	ldi	r31, 0x03	; 3
    58b8:	9f 2e       	mov	r9, r31
    58ba:	a1 2c       	mov	r10, r1
    58bc:	b1 2c       	mov	r11, r1
    58be:	f0 2d       	mov	r31, r0
    58c0:	a5 01       	movw	r20, r10
    58c2:	94 01       	movw	r18, r8
	minSignalNeeded <<= 4;

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    58c4:	69 d6       	rcall	.+3282   	; 0x6598 <__udivmodsi4>
    58c6:	69 01       	movw	r12, r18
    58c8:	7a 01       	movw	r14, r20
    58ca:	cc 0c       	add	r12, r12
    58cc:	dd 1c       	adc	r13, r13
    58ce:	ee 1c       	adc	r14, r14
    58d0:	ff 1c       	adc	r15, r15
    58d2:	cc 0c       	add	r12, r12
    58d4:	dd 1c       	adc	r13, r13
    58d6:	ee 1c       	adc	r14, r14
    58d8:	ff 1c       	adc	r15, r15
    58da:	cc 0c       	add	r12, r12
    58dc:	dd 1c       	adc	r13, r13
    58de:	ee 1c       	adc	r14, r14
    58e0:	ff 1c       	adc	r15, r15
    58e2:	cc 0c       	add	r12, r12
    58e4:	dd 1c       	adc	r13, r13
    58e6:	ee 1c       	adc	r14, r14
    58e8:	ff 1c       	adc	r15, r15
    58ea:	44 ef       	ldi	r20, 0xF4	; 244
    58ec:	c4 0e       	add	r12, r20
    58ee:	41 e0       	ldi	r20, 0x01	; 1
    58f0:	d4 1e       	adc	r13, r20
    58f2:	e1 1c       	adc	r14, r1
    58f4:	f1 1c       	adc	r15, r1
    58f6:	c7 01       	movw	r24, r14
    58f8:	b6 01       	movw	r22, r12
    58fa:	a5 01       	movw	r20, r10
    58fc:	94 01       	movw	r18, r8
    58fe:	4c d6       	rcall	.+3224   	; 0x6598 <__udivmodsi4>
    5900:	49 01       	movw	r8, r18
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
    5902:	5a 01       	movw	r10, r20
    5904:	8d 85       	ldd	r24, Y+13	; 0x0d
    5906:	9e 85       	ldd	r25, Y+14	; 0x0e
    5908:	af 85       	ldd	r26, Y+15	; 0x0f
    590a:	b8 89       	ldd	r27, Y+16	; 0x10
    590c:	80 96       	adiw	r24, 0x20	; 32
    590e:	a1 1d       	adc	r26, r1
    5910:	b1 1d       	adc	r27, r1
    5912:	bc 01       	movw	r22, r24
    5914:	cd 01       	movw	r24, r26
    5916:	68 94       	set
    5918:	15 f8       	bld	r1, 5
    591a:	96 95       	lsr	r25
    591c:	87 95       	ror	r24
    591e:	77 95       	ror	r23
    5920:	67 95       	ror	r22
    5922:	16 94       	lsr	r1
    5924:	d1 f7       	brne	.-12     	; 0x591a <VL53L0X_calc_dmax+0x306>
    5926:	0e 94 c8 20 	call	0x4190	; 0x4190 <VL53L0X_isqrt>

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
    592a:	2b 01       	movw	r4, r22
    592c:	3c 01       	movw	r6, r24
    592e:	81 14       	cp	r8, r1
    5930:	91 04       	cpc	r9, r1
    5932:	a1 04       	cpc	r10, r1
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
    5934:	b1 04       	cpc	r11, r1
    5936:	a9 f0       	breq	.+42     	; 0x5962 <VL53L0X_calc_dmax+0x34e>
    5938:	c7 01       	movw	r24, r14
    593a:	b6 01       	movw	r22, r12
    593c:	20 ed       	ldi	r18, 0xD0	; 208
    593e:	37 e0       	ldi	r19, 0x07	; 7
    5940:	40 e0       	ldi	r20, 0x00	; 0
    5942:	50 e0       	ldi	r21, 0x00	; 0
    5944:	29 d6       	rcall	.+3154   	; 0x6598 <__udivmodsi4>
    5946:	6d 85       	ldd	r22, Y+13	; 0x0d
    5948:	7e 85       	ldd	r23, Y+14	; 0x0e
    594a:	8f 85       	ldd	r24, Y+15	; 0x0f
    594c:	98 89       	ldd	r25, Y+16	; 0x10
    594e:	62 0f       	add	r22, r18
    5950:	73 1f       	adc	r23, r19
    5952:	84 1f       	adc	r24, r20
    5954:	95 1f       	adc	r25, r21
    5956:	a5 01       	movw	r20, r10
    5958:	94 01       	movw	r18, r8
    595a:	1e d6       	rcall	.+3132   	; 0x6598 <__udivmodsi4>
    595c:	ca 01       	movw	r24, r20
    595e:	b9 01       	movw	r22, r18
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
    5960:	03 c0       	rjmp	.+6      	; 0x5968 <VL53L0X_calc_dmax+0x354>
    5962:	60 e0       	ldi	r22, 0x00	; 0
    5964:	70 e0       	ldi	r23, 0x00	; 0

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
    5966:	cb 01       	movw	r24, r22
    5968:	0e 94 c8 20 	call	0x4190	; 0x4190 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
    596c:	64 15       	cp	r22, r4
    596e:	75 05       	cpc	r23, r5
    5970:	86 05       	cpc	r24, r6
    5972:	97 05       	cpc	r25, r7
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);

	*pdmax_mm = dmaxDark;
    5974:	40 f0       	brcs	.+16     	; 0x5986 <VL53L0X_calc_dmax+0x372>
    5976:	af a5       	ldd	r26, Y+47	; 0x2f
    5978:	b8 a9       	ldd	r27, Y+48	; 0x30
    597a:	4d 92       	st	X+, r4
    597c:	5d 92       	st	X+, r5
    597e:	6d 92       	st	X+, r6
    5980:	7c 92       	st	X, r7
    5982:	13 97       	sbiw	r26, 0x03	; 3
	if (dmaxDark > dmaxAmbient)
		*pdmax_mm = dmaxAmbient;
    5984:	06 c0       	rjmp	.+12     	; 0x5992 <VL53L0X_calc_dmax+0x37e>
    5986:	ef a5       	ldd	r30, Y+47	; 0x2f
    5988:	f8 a9       	ldd	r31, Y+48	; 0x30
    598a:	60 83       	st	Z, r22
    598c:	71 83       	std	Z+1, r23	; 0x01
    598e:	82 83       	std	Z+2, r24	; 0x02

	return Status;
}
    5990:	93 83       	std	Z+3, r25	; 0x03
    5992:	80 e0       	ldi	r24, 0x00	; 0
    5994:	64 96       	adiw	r28, 0x14	; 20
    5996:	0f b6       	in	r0, 0x3f	; 63
    5998:	f8 94       	cli
    599a:	de bf       	out	0x3e, r29	; 62
    599c:	0f be       	out	0x3f, r0	; 63
    599e:	cd bf       	out	0x3d, r28	; 61
    59a0:	df 91       	pop	r29
    59a2:	cf 91       	pop	r28
    59a4:	1f 91       	pop	r17
    59a6:	0f 91       	pop	r16
    59a8:	ff 90       	pop	r15
    59aa:	ef 90       	pop	r14
    59ac:	df 90       	pop	r13
    59ae:	cf 90       	pop	r12
    59b0:	bf 90       	pop	r11
    59b2:	af 90       	pop	r10
    59b4:	9f 90       	pop	r9
    59b6:	8f 90       	pop	r8
    59b8:	7f 90       	pop	r7
    59ba:	6f 90       	pop	r6
    59bc:	5f 90       	pop	r5
    59be:	4f 90       	pop	r4
    59c0:	08 95       	ret

000059c2 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	f1616 *pSigmaEstimate,
	u32 *pDmax_mm)
{
    59c2:	2f 92       	push	r2
    59c4:	3f 92       	push	r3
    59c6:	4f 92       	push	r4
    59c8:	5f 92       	push	r5
    59ca:	6f 92       	push	r6
    59cc:	7f 92       	push	r7
    59ce:	8f 92       	push	r8
    59d0:	9f 92       	push	r9
    59d2:	af 92       	push	r10
    59d4:	bf 92       	push	r11
    59d6:	cf 92       	push	r12
    59d8:	df 92       	push	r13
    59da:	ef 92       	push	r14
    59dc:	ff 92       	push	r15
    59de:	0f 93       	push	r16
    59e0:	1f 93       	push	r17
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	cd b7       	in	r28, 0x3d	; 61
    59e8:	de b7       	in	r29, 0x3e	; 62
    59ea:	e5 97       	sbiw	r28, 0x35	; 53
    59ec:	0f b6       	in	r0, 0x3f	; 63
    59ee:	f8 94       	cli
    59f0:	de bf       	out	0x3e, r29	; 62
    59f2:	0f be       	out	0x3f, r0	; 63
    59f4:	cd bf       	out	0x3d, r28	; 61
    59f6:	1c 01       	movw	r2, r24
    59f8:	7a 87       	std	Y+10, r23	; 0x0a
    59fa:	69 87       	std	Y+9, r22	; 0x09
    59fc:	5c 8f       	std	Y+28, r21	; 0x1c
    59fe:	4b 8f       	std	Y+27, r20	; 0x1b
    5a00:	3a 8f       	std	Y+26, r19	; 0x1a
    5a02:	29 8f       	std	Y+25, r18	; 0x19
	 * @{
	 *
	 * Estimates the range sigma
	 */

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
    5a04:	fc 01       	movw	r30, r24
    5a06:	85 8d       	ldd	r24, Z+29	; 0x1d
    5a08:	96 8d       	ldd	r25, Z+30	; 0x1e
    5a0a:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5a0c:	b0 a1       	ldd	r27, Z+32	; 0x20
    5a0e:	89 83       	std	Y+1, r24	; 0x01
    5a10:	9a 83       	std	Y+2, r25	; 0x02
    5a12:	ab 83       	std	Y+3, r26	; 0x03
    5a14:	bc 83       	std	Y+4, r27	; 0x04
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
    5a16:	db 01       	movw	r26, r22
    5a18:	50 96       	adiw	r26, 0x10	; 16
    5a1a:	2d 91       	ld	r18, X+
    5a1c:	3d 91       	ld	r19, X+
    5a1e:	4d 91       	ld	r20, X+
    5a20:	5c 91       	ld	r21, X
    5a22:	53 97       	sbiw	r26, 0x13	; 19
    5a24:	2d 87       	std	Y+13, r18	; 0x0d
    5a26:	3e 87       	std	Y+14, r19	; 0x0e
    5a28:	4f 87       	std	Y+15, r20	; 0x0f
    5a2a:	58 8b       	std	Y+16, r21	; 0x10

	correctedSignalRate_mcps =
    5a2c:	1c 96       	adiw	r26, 0x0c	; 12
    5a2e:	2d 91       	ld	r18, X+
    5a30:	3d 91       	ld	r19, X+
    5a32:	4d 91       	ld	r20, X+
    5a34:	5c 91       	ld	r21, X
    5a36:	1f 97       	sbiw	r26, 0x0f	; 15
    5a38:	29 a3       	std	Y+33, r18	; 0x21
    5a3a:	3a a3       	std	Y+34, r19	; 0x22
    5a3c:	4b a3       	std	Y+35, r20	; 0x23
    5a3e:	5c a3       	std	Y+36, r21	; 0x24
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
    5a40:	ae 01       	movw	r20, r28
    5a42:	4b 5f       	subi	r20, 0xFB	; 251
    5a44:	5f 4f       	sbci	r21, 0xFF	; 255
    5a46:	c1 01       	movw	r24, r2
    5a48:	aa dd       	rcall	.-1196   	; 0x559e <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
    5a4a:	ae 01       	movw	r20, r28
    5a4c:	4f 5f       	subi	r20, 0xFF	; 255
    5a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a50:	69 85       	ldd	r22, Y+9	; 0x09
    5a52:	7a 85       	ldd	r23, Y+10	; 0x0a
    5a54:	c1 01       	movw	r24, r2
    5a56:	5a dd       	rcall	.-1356   	; 0x550c <VL53L0X_get_total_xtalk_rate>
    5a58:	18 2f       	mov	r17, r24
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
    5a5a:	81 11       	cpse	r24, r1
    5a5c:	b8 c2       	rjmp	.+1392   	; 0x5fce <VL53L0X_calc_sigma_estimate+0x60c>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5a5e:	f1 01       	movw	r30, r2
    5a60:	e1 53       	subi	r30, 0x31	; 49
    5a62:	ff 4f       	sbci	r31, 0xFF	; 255
    5a64:	20 81       	ld	r18, Z
    5a66:	31 81       	ldd	r19, Z+1	; 0x01
    5a68:	42 81       	ldd	r20, Z+2	; 0x02
    5a6a:	53 81       	ldd	r21, Z+3	; 0x03
    5a6c:	2d a3       	std	Y+37, r18	; 0x25
    5a6e:	3e a3       	std	Y+38, r19	; 0x26
    5a70:	4f a3       	std	Y+39, r20	; 0x27
    5a72:	58 a7       	std	Y+40, r21	; 0x28
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5a74:	34 96       	adiw	r30, 0x04	; 4
    5a76:	00 81       	ld	r16, Z
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    5a78:	20 2f       	mov	r18, r16
    5a7a:	4d a1       	ldd	r20, Y+37	; 0x25
    5a7c:	5e a1       	ldd	r21, Y+38	; 0x26
    5a7e:	6f a1       	ldd	r22, Y+39	; 0x27
    5a80:	78 a5       	ldd	r23, Y+40	; 0x28
    5a82:	c1 01       	movw	r24, r2
    5a84:	1b d8       	rcall	.-4042   	; 0x4abc <VL53L0X_calc_timeout_mclks>
    5a86:	2b 01       	movw	r4, r22
    5a88:	3c 01       	movw	r6, r24
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5a8a:	f1 01       	movw	r30, r2
    5a8c:	ec 52       	subi	r30, 0x2C	; 44
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	80 81       	ld	r24, Z
    5a92:	91 81       	ldd	r25, Z+1	; 0x01
    5a94:	a2 81       	ldd	r26, Z+2	; 0x02
    5a96:	b3 81       	ldd	r27, Z+3	; 0x03
    5a98:	89 a7       	std	Y+41, r24	; 0x29
    5a9a:	9a a7       	std	Y+42, r25	; 0x2a
    5a9c:	ab a7       	std	Y+43, r26	; 0x2b
    5a9e:	bc a7       	std	Y+44, r27	; 0x2c
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5aa0:	34 96       	adiw	r30, 0x04	; 4
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    5aa2:	20 81       	ld	r18, Z
    5aa4:	ac 01       	movw	r20, r24
    5aa6:	bd 01       	movw	r22, r26
    5aa8:	c1 01       	movw	r24, r2
    5aaa:	08 d8       	rcall	.-4080   	; 0x4abc <VL53L0X_calc_timeout_mclks>
    5aac:	4b 01       	movw	r8, r22
    5aae:	5c 01       	movw	r10, r24
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
    5ab0:	08 30       	cpi	r16, 0x08	; 8
    5ab2:	49 f4       	brne	.+18     	; 0x5ac6 <VL53L0X_calc_sigma_estimate+0x104>
			vcselWidth = 2;
    5ab4:	22 e0       	ldi	r18, 0x02	; 2
    5ab6:	30 e0       	ldi	r19, 0x00	; 0
    5ab8:	40 e0       	ldi	r20, 0x00	; 0
    5aba:	50 e0       	ldi	r21, 0x00	; 0
    5abc:	2d 8b       	std	Y+21, r18	; 0x15
    5abe:	3e 8b       	std	Y+22, r19	; 0x16
    5ac0:	4f 8b       	std	Y+23, r20	; 0x17
    5ac2:	58 8f       	std	Y+24, r21	; 0x18
    5ac4:	08 c0       	rjmp	.+16     	; 0x5ad6 <VL53L0X_calc_sigma_estimate+0x114>
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
    5ac6:	83 e0       	ldi	r24, 0x03	; 3
    5ac8:	90 e0       	ldi	r25, 0x00	; 0
    5aca:	a0 e0       	ldi	r26, 0x00	; 0
    5acc:	b0 e0       	ldi	r27, 0x00	; 0
    5ace:	8d 8b       	std	Y+21, r24	; 0x15
    5ad0:	9e 8b       	std	Y+22, r25	; 0x16
    5ad2:	af 8b       	std	Y+23, r26	; 0x17
    5ad4:	b8 8f       	std	Y+24, r27	; 0x18


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
    5ad6:	cd 80       	ldd	r12, Y+5	; 0x05
    5ad8:	de 80       	ldd	r13, Y+6	; 0x06
    5ada:	ef 80       	ldd	r14, Y+7	; 0x07
    5adc:	f8 84       	ldd	r15, Y+8	; 0x08
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
    5ade:	a8 ee       	ldi	r26, 0xE8	; 232
    5ae0:	b3 e0       	ldi	r27, 0x03	; 3
    5ae2:	a7 01       	movw	r20, r14
    5ae4:	96 01       	movw	r18, r12
    5ae6:	ae d5       	rcall	.+2908   	; 0x6644 <__muluhisi3>
    5ae8:	dc 01       	movw	r26, r24
    5aea:	cb 01       	movw	r24, r22
    5aec:	90 58       	subi	r25, 0x80	; 128
    5aee:	af 4f       	sbci	r26, 0xFF	; 255
    5af0:	bf 4f       	sbci	r27, 0xFF	; 255
    5af2:	9d 01       	movw	r18, r26
    5af4:	44 27       	eor	r20, r20
    5af6:	55 27       	eor	r21, r21
    5af8:	29 8b       	std	Y+17, r18	; 0x11
    5afa:	3a 8b       	std	Y+18, r19	; 0x12
    5afc:	4b 8b       	std	Y+19, r20	; 0x13
    5afe:	5c 8b       	std	Y+20, r21	; 0x14

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
    5b00:	89 81       	ldd	r24, Y+1	; 0x01
    5b02:	9a 81       	ldd	r25, Y+2	; 0x02
    5b04:	ab 81       	ldd	r26, Y+3	; 0x03
    5b06:	bc 81       	ldd	r27, Y+4	; 0x04
    5b08:	8e a7       	std	Y+46, r24	; 0x2e
    5b0a:	9f a7       	std	Y+47, r25	; 0x2f
    5b0c:	a8 ab       	std	Y+48, r26	; 0x30
    5b0e:	b9 ab       	std	Y+49, r27	; 0x31
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
    5b10:	90 e8       	ldi	r25, 0x80	; 128
    5b12:	c9 0e       	add	r12, r25
    5b14:	d1 1c       	adc	r13, r1
    5b16:	e1 1c       	adc	r14, r1
    5b18:	f1 1c       	adc	r15, r1
    5b1a:	cd 2c       	mov	r12, r13
    5b1c:	de 2c       	mov	r13, r14
    5b1e:	ef 2c       	mov	r14, r15
    5b20:	ff 24       	eor	r15, r15

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
    5b22:	5e 2d       	mov	r21, r14
    5b24:	4d 2d       	mov	r20, r13
    5b26:	3c 2d       	mov	r19, r12
    5b28:	22 27       	eor	r18, r18
    5b2a:	2d 8f       	std	Y+29, r18	; 0x1d
    5b2c:	3e 8f       	std	Y+30, r19	; 0x1e
    5b2e:	4f 8f       	std	Y+31, r20	; 0x1f
    5b30:	58 a3       	std	Y+32, r21	; 0x20
    5b32:	2d 83       	std	Y+5, r18	; 0x05
    5b34:	3e 83       	std	Y+6, r19	; 0x06
    5b36:	4f 83       	std	Y+7, r20	; 0x07
    5b38:	58 87       	std	Y+8, r21	; 0x08

	if (Status != VL53L0X_ERROR_NONE) {
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
    5b3a:	89 89       	ldd	r24, Y+17	; 0x11
    5b3c:	9a 89       	ldd	r25, Y+18	; 0x12
    5b3e:	ab 89       	ldd	r26, Y+19	; 0x13
    5b40:	bc 89       	ldd	r27, Y+20	; 0x14
    5b42:	89 2b       	or	r24, r25
    5b44:	8a 2b       	or	r24, r26
    5b46:	8b 2b       	or	r24, r27
    5b48:	c9 f4       	brne	.+50     	; 0x5b7c <VL53L0X_calc_sigma_estimate+0x1ba>
		*pSigmaEstimate = cSigmaEstMax;
    5b4a:	8e ea       	ldi	r24, 0xAE	; 174
    5b4c:	97 e8       	ldi	r25, 0x87	; 135
    5b4e:	af e8       	ldi	r26, 0x8F	; 143
    5b50:	b2 e0       	ldi	r27, 0x02	; 2
    5b52:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5b54:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5b56:	80 83       	st	Z, r24
    5b58:	91 83       	std	Z+1, r25	; 0x01
    5b5a:	a2 83       	std	Z+2, r26	; 0x02
    5b5c:	b3 83       	std	Z+3, r27	; 0x03
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
    5b5e:	f1 01       	movw	r30, r2
    5b60:	e6 5d       	subi	r30, 0xD6	; 214
    5b62:	fe 4f       	sbci	r31, 0xFE	; 254
    5b64:	80 83       	st	Z, r24
    5b66:	91 83       	std	Z+1, r25	; 0x01
    5b68:	a2 83       	std	Z+2, r26	; 0x02
    5b6a:	b3 83       	std	Z+3, r27	; 0x03
		*pDmax_mm = 0;
    5b6c:	a9 8d       	ldd	r26, Y+25	; 0x19
    5b6e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5b70:	1d 92       	st	X+, r1
    5b72:	1d 92       	st	X+, r1
    5b74:	1d 92       	st	X+, r1
    5b76:	1c 92       	st	X, r1
    5b78:	13 97       	sbiw	r26, 0x03	; 3
    5b7a:	29 c2       	rjmp	.+1106   	; 0x5fce <VL53L0X_calc_sigma_estimate+0x60c>
			vcselWidth = 2;


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    5b7c:	84 0c       	add	r8, r4
    5b7e:	95 1c       	adc	r9, r5
    5b80:	a6 1c       	adc	r10, r6
    5b82:	b7 1c       	adc	r11, r7
    5b84:	a5 01       	movw	r20, r10
    5b86:	94 01       	movw	r18, r8
    5b88:	01 2e       	mov	r0, r17
    5b8a:	1b e0       	ldi	r17, 0x0B	; 11
    5b8c:	22 0f       	add	r18, r18
    5b8e:	33 1f       	adc	r19, r19
    5b90:	44 1f       	adc	r20, r20
    5b92:	55 1f       	adc	r21, r21
    5b94:	1a 95       	dec	r17
    5b96:	d1 f7       	brne	.-12     	; 0x5b8c <VL53L0X_calc_sigma_estimate+0x1ca>
    5b98:	10 2d       	mov	r17, r0
    5b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    5b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    5b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    5ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    5ba2:	eb d4       	rcall	.+2518   	; 0x657a <__mulsi3>
    5ba4:	6c 50       	subi	r22, 0x0C	; 12
    5ba6:	7e 4f       	sbci	r23, 0xFE	; 254
    5ba8:	8f 4f       	sbci	r24, 0xFF	; 255
    5baa:	9f 4f       	sbci	r25, 0xFF	; 255
    5bac:	0f 2e       	mov	r0, r31
    5bae:	f8 ee       	ldi	r31, 0xE8	; 232
    5bb0:	8f 2e       	mov	r8, r31
    5bb2:	f3 e0       	ldi	r31, 0x03	; 3
    5bb4:	9f 2e       	mov	r9, r31
    5bb6:	a1 2c       	mov	r10, r1
    5bb8:	b1 2c       	mov	r11, r1
    5bba:	f0 2d       	mov	r31, r0
    5bbc:	a5 01       	movw	r20, r10
    5bbe:	94 01       	movw	r18, r8
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    5bc0:	eb d4       	rcall	.+2518   	; 0x6598 <__udivmodsi4>
    5bc2:	a7 e7       	ldi	r26, 0x77	; 119
    5bc4:	b6 e0       	ldi	r27, 0x06	; 6
    5bc6:	3e d5       	rcall	.+2684   	; 0x6644 <__muluhisi3>
    5bc8:	6c 50       	subi	r22, 0x0C	; 12
    5bca:	7e 4f       	sbci	r23, 0xFE	; 254
    5bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    5bce:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd0:	a5 01       	movw	r20, r10
    5bd2:	94 01       	movw	r18, r8
    5bd4:	e1 d4       	rcall	.+2498   	; 0x6598 <__udivmodsi4>
    5bd6:	2d 8b       	std	Y+21, r18	; 0x15
    5bd8:	3d a7       	std	Y+45, r19	; 0x2d
    5bda:	04 2f       	mov	r16, r20
		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
    5bdc:	15 2f       	mov	r17, r21
    5bde:	c7 01       	movw	r24, r14
    5be0:	b6 01       	movw	r22, r12
    5be2:	cb d4       	rcall	.+2454   	; 0x657a <__mulsi3>
    5be4:	dc 01       	movw	r26, r24
    5be6:	cb 01       	movw	r24, r22
    5be8:	80 58       	subi	r24, 0x80	; 128
    5bea:	9f 4f       	sbci	r25, 0xFF	; 255
    5bec:	af 4f       	sbci	r26, 0xFF	; 255
    5bee:	bf 4f       	sbci	r27, 0xFF	; 255
    5bf0:	49 2e       	mov	r4, r25
    5bf2:	5a 2e       	mov	r5, r26
    5bf4:	6b 2e       	mov	r6, r27
    5bf6:	77 24       	eor	r7, r7
	if (peakSignalRate_kcps == 0) {
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
	} else {
		if (vcselTotalEventsRtn < 1)
    5bf8:	41 14       	cp	r4, r1
    5bfa:	51 04       	cpc	r5, r1
    5bfc:	61 04       	cpc	r6, r1
    5bfe:	71 04       	cpc	r7, r1
    5c00:	21 f4       	brne	.+8      	; 0x5c0a <VL53L0X_calc_sigma_estimate+0x248>
			vcselTotalEventsRtn = 1;
    5c02:	41 2c       	mov	r4, r1
    5c04:	51 2c       	mov	r5, r1
    5c06:	32 01       	movw	r6, r4

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
    5c08:	43 94       	inc	r4
    5c0a:	a8 ee       	ldi	r26, 0xE8	; 232
    5c0c:	b3 e0       	ldi	r27, 0x03	; 3
    5c0e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5c10:	3e 85       	ldd	r19, Y+14	; 0x0e
    5c12:	4f 85       	ldd	r20, Y+15	; 0x0f
    5c14:	58 89       	ldd	r21, Y+16	; 0x10
    5c16:	16 d5       	rcall	.+2604   	; 0x6644 <__muluhisi3>
    5c18:	66 27       	eor	r22, r22
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
    5c1a:	77 27       	eor	r23, r23
    5c1c:	29 89       	ldd	r18, Y+17	; 0x11
    5c1e:	3a 89       	ldd	r19, Y+18	; 0x12
    5c20:	4b 89       	ldd	r20, Y+19	; 0x13
    5c22:	5c 89       	ldd	r21, Y+20	; 0x14
    5c24:	b9 d4       	rcall	.+2418   	; 0x6598 <__udivmodsi4>
    5c26:	27 36       	cpi	r18, 0x67	; 103
    5c28:	b6 e6       	ldi	r27, 0x66	; 102
    5c2a:	3b 07       	cpc	r19, r27
    5c2c:	4b 07       	cpc	r20, r27
    5c2e:	51 05       	cpc	r21, r1
    5c30:	20 f0       	brcs	.+8      	; 0x5c3a <VL53L0X_calc_sigma_estimate+0x278>
    5c32:	26 e6       	ldi	r18, 0x66	; 102
    5c34:	36 e6       	ldi	r19, 0x66	; 102
    5c36:	46 e6       	ldi	r20, 0x66	; 102
    5c38:	50 e0       	ldi	r21, 0x00	; 0
    5c3a:	a8 e5       	ldi	r26, 0x58	; 88
    5c3c:	b2 e0       	ldi	r27, 0x02	; 2
    5c3e:	02 d5       	rcall	.+2564   	; 0x6644 <__muluhisi3>
    5c40:	6d 87       	std	Y+13, r22	; 0x0d
    5c42:	7e 87       	std	Y+14, r23	; 0x0e
    5c44:	8f 87       	std	Y+15, r24	; 0x0f
    5c46:	98 8b       	std	Y+16, r25	; 0x10

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
    5c48:	d3 01       	movw	r26, r6
    5c4a:	c2 01       	movw	r24, r4
    5c4c:	88 0f       	add	r24, r24
    5c4e:	99 1f       	adc	r25, r25
    5c50:	aa 1f       	adc	r26, r26
    5c52:	bb 1f       	adc	r27, r27
    5c54:	84 0d       	add	r24, r4
    5c56:	95 1d       	adc	r25, r5
    5c58:	a6 1d       	adc	r26, r6
    5c5a:	b7 1d       	adc	r27, r7
    5c5c:	bc 01       	movw	r22, r24
    5c5e:	cd 01       	movw	r24, r26
    5c60:	66 0f       	add	r22, r22
    5c62:	77 1f       	adc	r23, r23
    5c64:	88 1f       	adc	r24, r24
    5c66:	99 1f       	adc	r25, r25
    5c68:	66 0f       	add	r22, r22
    5c6a:	77 1f       	adc	r23, r23
    5c6c:	88 1f       	adc	r24, r24
    5c6e:	99 1f       	adc	r25, r25
    5c70:	0e 94 c8 20 	call	0x4190	; 0x4190 <VL53L0X_isqrt>
    5c74:	9b 01       	movw	r18, r22
    5c76:	ac 01       	movw	r20, r24
    5c78:	22 0f       	add	r18, r18
    5c7a:	33 1f       	adc	r19, r19
    5c7c:	44 1f       	adc	r20, r20
    5c7e:	55 1f       	adc	r21, r21
    5c80:	2a ab       	std	Y+50, r18	; 0x32
    5c82:	3b ab       	std	Y+51, r19	; 0x33
    5c84:	4c ab       	std	Y+52, r20	; 0x34
    5c86:	5d ab       	std	Y+53, r21	; 0x35

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
    5c88:	e9 85       	ldd	r30, Y+9	; 0x09
    5c8a:	fa 85       	ldd	r31, Y+10	; 0x0a
    5c8c:	a0 85       	ldd	r26, Z+8	; 0x08
    5c8e:	b1 85       	ldd	r27, Z+9	; 0x09
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;

		if(pRangingMeasurementData->RangeStatus != 0){
    5c90:	80 8d       	ldd	r24, Z+24	; 0x18
    5c92:	81 11       	cpse	r24, r1
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
    5c94:	8b c0       	rjmp	.+278    	; 0x5dac <VL53L0X_calc_sigma_estimate+0x3ea>
    5c96:	29 89       	ldd	r18, Y+17	; 0x11
    5c98:	3a 89       	ldd	r19, Y+18	; 0x12
    5c9a:	4b 89       	ldd	r20, Y+19	; 0x13
    5c9c:	5c 89       	ldd	r21, Y+20	; 0x14

		if(pRangingMeasurementData->RangeStatus != 0){
			pwMult = 1ul << 16;
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
    5c9e:	59 01       	movw	r10, r18
    5ca0:	99 24       	eor	r9, r9
    5ca2:	88 24       	eor	r8, r8
    5ca4:	2a e9       	ldi	r18, 0x9A	; 154
    5ca6:	39 e9       	ldi	r19, 0x99	; 153
    5ca8:	46 e0       	ldi	r20, 0x06	; 6
    5caa:	50 e0       	ldi	r21, 0x00	; 0
    5cac:	cb d4       	rcall	.+2454   	; 0x6644 <__muluhisi3>
    5cae:	2c e5       	ldi	r18, 0x5C	; 92
    5cb0:	32 e1       	ldi	r19, 0x12	; 18
    5cb2:	40 e0       	ldi	r20, 0x00	; 0
    5cb4:	50 e0       	ldi	r21, 0x00	; 0
    5cb6:	70 d4       	rcall	.+2272   	; 0x6598 <__udivmodsi4>
    5cb8:	29 87       	std	Y+9, r18	; 0x09
    5cba:	3a 87       	std	Y+10, r19	; 0x0a
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
    5cbc:	4b 87       	std	Y+11, r20	; 0x0b
    5cbe:	5c 87       	std	Y+12, r21	; 0x0c
    5cc0:	a8 ee       	ldi	r26, 0xE8	; 232
    5cc2:	b3 e0       	ldi	r27, 0x03	; 3
    5cc4:	2e a5       	ldd	r18, Y+46	; 0x2e
    5cc6:	3f a5       	ldd	r19, Y+47	; 0x2f
    5cc8:	48 a9       	ldd	r20, Y+48	; 0x30
    5cca:	59 a9       	ldd	r21, Y+49	; 0x31
    5ccc:	bb d4       	rcall	.+2422   	; 0x6644 <__muluhisi3>
    5cce:	61 30       	cpi	r22, 0x01	; 1
    5cd0:	71 05       	cpc	r23, r1
    5cd2:	32 e3       	ldi	r19, 0x32	; 50
    5cd4:	83 07       	cpc	r24, r19
    5cd6:	91 05       	cpc	r25, r1
    5cd8:	20 f0       	brcs	.+8      	; 0x5ce2 <VL53L0X_calc_sigma_estimate+0x320>
    5cda:	60 e0       	ldi	r22, 0x00	; 0
    5cdc:	70 e0       	ldi	r23, 0x00	; 0
    5cde:	82 e3       	ldi	r24, 0x32	; 50
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	dc 01       	movw	r26, r24
    5ce4:	cb 01       	movw	r24, r22
    5ce6:	88 0f       	add	r24, r24
    5ce8:	99 1f       	adc	r25, r25
    5cea:	aa 1f       	adc	r26, r26
    5cec:	bb 1f       	adc	r27, r27
    5cee:	a5 01       	movw	r20, r10
    5cf0:	94 01       	movw	r18, r8
    5cf2:	28 1b       	sub	r18, r24
    5cf4:	39 0b       	sbc	r19, r25
    5cf6:	4a 0b       	sbc	r20, r26
    5cf8:	5b 0b       	sbc	r21, r27
    5cfa:	ca 01       	movw	r24, r20
    5cfc:	b9 01       	movw	r22, r18
    5cfe:	6c 50       	subi	r22, 0x0C	; 12
    5d00:	7e 4f       	sbci	r23, 0xFE	; 254
    5d02:	8f 4f       	sbci	r24, 0xFF	; 255
    5d04:	9f 4f       	sbci	r25, 0xFF	; 255
    5d06:	28 ee       	ldi	r18, 0xE8	; 232
    5d08:	33 e0       	ldi	r19, 0x03	; 3
    5d0a:	40 e0       	ldi	r20, 0x00	; 0
		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
    5d0c:	50 e0       	ldi	r21, 0x00	; 0
    5d0e:	44 d4       	rcall	.+2184   	; 0x6598 <__udivmodsi4>
    5d10:	cc 24       	eor	r12, r12
    5d12:	d2 2e       	mov	r13, r18
    5d14:	e3 2e       	mov	r14, r19
    5d16:	f4 2e       	mov	r15, r20
    5d18:	c5 01       	movw	r24, r10
    5d1a:	b4 01       	movw	r22, r8
    5d1c:	6c 50       	subi	r22, 0x0C	; 12
    5d1e:	7e 4f       	sbci	r23, 0xFE	; 254
    5d20:	8f 4f       	sbci	r24, 0xFF	; 255
    5d22:	9f 4f       	sbci	r25, 0xFF	; 255
    5d24:	28 ee       	ldi	r18, 0xE8	; 232
    5d26:	33 e0       	ldi	r19, 0x03	; 3
    5d28:	40 e0       	ldi	r20, 0x00	; 0
    5d2a:	50 e0       	ldi	r21, 0x00	; 0
    5d2c:	35 d4       	rcall	.+2154   	; 0x6598 <__udivmodsi4>
    5d2e:	c7 01       	movw	r24, r14
    5d30:	b6 01       	movw	r22, r12
    5d32:	32 d4       	rcall	.+2148   	; 0x6598 <__udivmodsi4>
    5d34:	c9 01       	movw	r24, r18
    5d36:	99 23       	and	r25, r25
    5d38:	24 f4       	brge	.+8      	; 0x5d42 <VL53L0X_calc_sigma_estimate+0x380>
    5d3a:	88 27       	eor	r24, r24
    5d3c:	99 27       	eor	r25, r25
    5d3e:	82 1b       	sub	r24, r18
    5d40:	93 0b       	sbc	r25, r19
    5d42:	09 2e       	mov	r0, r25
    5d44:	00 0c       	add	r0, r0
    5d46:	aa 0b       	sbc	r26, r26
			 * exceeded.
			 */
			pwMult *= ((1ul << 16) - xTalkCorrection);

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
    5d48:	bb 0b       	sbc	r27, r27
    5d4a:	ba 2f       	mov	r27, r26
    5d4c:	a9 2f       	mov	r26, r25
    5d4e:	98 2f       	mov	r25, r24
    5d50:	88 27       	eor	r24, r24
    5d52:	40 e0       	ldi	r20, 0x00	; 0
    5d54:	50 e0       	ldi	r21, 0x00	; 0
    5d56:	61 e0       	ldi	r22, 0x01	; 1
    5d58:	70 e0       	ldi	r23, 0x00	; 0
    5d5a:	9a 01       	movw	r18, r20
    5d5c:	ab 01       	movw	r20, r22
    5d5e:	28 1b       	sub	r18, r24
    5d60:	39 0b       	sbc	r19, r25
    5d62:	4a 0b       	sbc	r20, r26
    5d64:	5b 0b       	sbc	r21, r27
    5d66:	69 85       	ldd	r22, Y+9	; 0x09
    5d68:	7a 85       	ldd	r23, Y+10	; 0x0a
    5d6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d6c:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d6e:	05 d4       	rcall	.+2058   	; 0x657a <__mulsi3>
    5d70:	dc 01       	movw	r26, r24
    5d72:	cb 01       	movw	r24, r22
    5d74:	90 58       	subi	r25, 0x80	; 128
    5d76:	af 4f       	sbci	r26, 0xFF	; 255
    5d78:	bf 4f       	sbci	r27, 0xFF	; 255
    5d7a:	cd 01       	movw	r24, r26

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1ul << 16);
    5d7c:	aa 27       	eor	r26, r26
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
    5d7e:	bb 27       	eor	r27, r27
    5d80:	11 96       	adiw	r26, 0x01	; 1
    5d82:	bc 01       	movw	r22, r24
    5d84:	cd 01       	movw	r24, r26
    5d86:	96 95       	lsr	r25
    5d88:	87 95       	ror	r24
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
    5d8a:	77 95       	ror	r23
    5d8c:	67 95       	ror	r22
    5d8e:	9b 01       	movw	r18, r22
    5d90:	ac 01       	movw	r20, r24

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
    5d92:	f3 d3       	rcall	.+2022   	; 0x657a <__mulsi3>
    5d94:	6b 01       	movw	r12, r22
    5d96:	7c 01       	movw	r14, r24
    5d98:	0b 2e       	mov	r0, r27
    5d9a:	be e0       	ldi	r27, 0x0E	; 14
    5d9c:	f6 94       	lsr	r15
    5d9e:	e7 94       	ror	r14
    5da0:	d7 94       	ror	r13
    5da2:	c7 94       	ror	r12
    5da4:	ba 95       	dec	r27
    5da6:	d1 f7       	brne	.-12     	; 0x5d9c <VL53L0X_calc_sigma_estimate+0x3da>

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;

		if(pRangingMeasurementData->RangeStatus != 0){
			pwMult = 1ul << 16;
    5da8:	b0 2d       	mov	r27, r0
    5daa:	04 c0       	rjmp	.+8      	; 0x5db4 <VL53L0X_calc_sigma_estimate+0x3f2>
    5dac:	c1 2c       	mov	r12, r1
    5dae:	d1 2c       	mov	r13, r1

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
    5db0:	76 01       	movw	r14, r12
    5db2:	e3 94       	inc	r14
    5db4:	a0 e2       	ldi	r26, 0x20	; 32
    5db6:	b3 e0       	ldi	r27, 0x03	; 3
    5db8:	a7 01       	movw	r20, r14
    5dba:	96 01       	movw	r18, r12
    5dbc:	43 d4       	rcall	.+2182   	; 0x6644 <__muluhisi3>
    5dbe:	dc 01       	movw	r26, r24
    5dc0:	cb 01       	movw	r24, r22
    5dc2:	90 58       	subi	r25, 0x80	; 128
    5dc4:	af 4f       	sbci	r26, 0xFF	; 255
    5dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    5dc8:	bd 01       	movw	r22, r26
		sqr1 *= sqr1;

		sqr2 = sigmaEstimateP2;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
    5dca:	88 27       	eor	r24, r24
    5dcc:	99 27       	eor	r25, r25
    5dce:	8d 84       	ldd	r8, Y+13	; 0x0d
    5dd0:	9e 84       	ldd	r9, Y+14	; 0x0e
    5dd2:	af 84       	ldd	r10, Y+15	; 0x0f
    5dd4:	b8 88       	ldd	r11, Y+16	; 0x10
    5dd6:	30 e8       	ldi	r19, 0x80	; 128
    5dd8:	93 0e       	add	r9, r19
    5dda:	a1 1c       	adc	r10, r1
    5ddc:	b1 1c       	adc	r11, r1

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
    5dde:	45 01       	movw	r8, r10
    5de0:	aa 24       	eor	r10, r10
    5de2:	bb 24       	eor	r11, r11
    5de4:	9b 01       	movw	r18, r22
    5de6:	ac 01       	movw	r20, r24
    5de8:	c8 d3       	rcall	.+1936   	; 0x657a <__mulsi3>
    5dea:	69 87       	std	Y+9, r22	; 0x09
    5dec:	7a 87       	std	Y+10, r23	; 0x0a
    5dee:	8b 87       	std	Y+11, r24	; 0x0b
    5df0:	9c 87       	std	Y+12, r25	; 0x0c
    5df2:	a5 01       	movw	r20, r10
    5df4:	94 01       	movw	r18, r8
    5df6:	c5 01       	movw	r24, r10
    5df8:	b4 01       	movw	r22, r8
    5dfa:	bf d3       	rcall	.+1918   	; 0x657a <__mulsi3>
    5dfc:	29 85       	ldd	r18, Y+9	; 0x09
    5dfe:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e00:	4b 85       	ldd	r20, Y+11	; 0x0b
    5e02:	5c 85       	ldd	r21, Y+12	; 0x0c
    5e04:	62 0f       	add	r22, r18
    5e06:	73 1f       	adc	r23, r19
    5e08:	84 1f       	adc	r24, r20
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
    5e0a:	95 1f       	adc	r25, r21
    5e0c:	0e 94 c8 20 	call	0x4190	; 0x4190 <VL53L0X_isqrt>
    5e10:	db 01       	movw	r26, r22
    5e12:	99 27       	eor	r25, r25
    5e14:	88 27       	eor	r24, r24
    5e16:	bc 01       	movw	r22, r24
    5e18:	cd 01       	movw	r24, r26
    5e1a:	6e 5c       	subi	r22, 0xCE	; 206
    5e1c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e1e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e20:	9f 4f       	sbci	r25, 0xFF	; 255
    5e22:	24 e6       	ldi	r18, 0x64	; 100
    5e24:	30 e0       	ldi	r19, 0x00	; 0
    5e26:	40 e0       	ldi	r20, 0x00	; 0
    5e28:	50 e0       	ldi	r21, 0x00	; 0
    5e2a:	b6 d3       	rcall	.+1900   	; 0x6598 <__udivmodsi4>
    5e2c:	ca 01       	movw	r24, r20
    5e2e:	b9 01       	movw	r22, r18
    5e30:	2a a9       	ldd	r18, Y+50	; 0x32
    5e32:	3b a9       	ldd	r19, Y+51	; 0x33
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
    5e34:	4c a9       	ldd	r20, Y+52	; 0x34
    5e36:	5d a9       	ldd	r21, Y+53	; 0x35
    5e38:	af d3       	rcall	.+1886   	; 0x6598 <__udivmodsi4>
    5e3a:	a5 eb       	ldi	r26, 0xB5	; 181

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
    5e3c:	bb e0       	ldi	r27, 0x0B	; 11
    5e3e:	02 d4       	rcall	.+2052   	; 0x6644 <__muluhisi3>
    5e40:	68 57       	subi	r22, 0x78	; 120
    5e42:	7c 4e       	sbci	r23, 0xEC	; 236
    5e44:	8f 4f       	sbci	r24, 0xFF	; 255
    5e46:	9f 4f       	sbci	r25, 0xFF	; 255
    5e48:	20 e1       	ldi	r18, 0x10	; 16
    5e4a:	37 e2       	ldi	r19, 0x27	; 39
    5e4c:	40 e0       	ldi	r20, 0x00	; 0
    5e4e:	50 e0       	ldi	r21, 0x00	; 0
    5e50:	a3 d3       	rcall	.+1862   	; 0x6598 <__udivmodsi4>
    5e52:	49 01       	movw	r8, r18
    5e54:	5a 01       	movw	r10, r20
    5e56:	31 e0       	ldi	r19, 0x01	; 1
    5e58:	83 16       	cp	r8, r19
    5e5a:	30 ef       	ldi	r19, 0xF0	; 240
    5e5c:	93 06       	cpc	r9, r19
    5e5e:	a1 04       	cpc	r10, r1
    5e60:	b1 04       	cpc	r11, r1
    5e62:	38 f0       	brcs	.+14     	; 0x5e72 <VL53L0X_calc_sigma_estimate+0x4b0>
    5e64:	0f 2e       	mov	r0, r31
    5e66:	81 2c       	mov	r8, r1
    5e68:	f0 ef       	ldi	r31, 0xF0	; 240
    5e6a:	9f 2e       	mov	r9, r31
    5e6c:	a1 2c       	mov	r10, r1
    5e6e:	b1 2c       	mov	r11, r1
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
    5e70:	f0 2d       	mov	r31, r0
    5e72:	8d a1       	ldd	r24, Y+37	; 0x25
    5e74:	9e a1       	ldd	r25, Y+38	; 0x26
    5e76:	af a1       	ldd	r26, Y+39	; 0x27
    5e78:	b8 a5       	ldd	r27, Y+40	; 0x28
    5e7a:	29 a5       	ldd	r18, Y+41	; 0x29
    5e7c:	3a a5       	ldd	r19, Y+42	; 0x2a
    5e7e:	4b a5       	ldd	r20, Y+43	; 0x2b
    5e80:	5c a5       	ldd	r21, Y+44	; 0x2c
    5e82:	82 0f       	add	r24, r18
    5e84:	93 1f       	adc	r25, r19
    5e86:	a4 1f       	adc	r26, r20
    5e88:	b5 1f       	adc	r27, r21
    5e8a:	9c 01       	movw	r18, r24
    5e8c:	ad 01       	movw	r20, r26
    5e8e:	2c 50       	subi	r18, 0x0C	; 12
    5e90:	3e 4f       	sbci	r19, 0xFE	; 254
    5e92:	4f 4f       	sbci	r20, 0xFF	; 255
    5e94:	5f 4f       	sbci	r21, 0xFF	; 255
    5e96:	29 87       	std	Y+9, r18	; 0x09

		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
    5e98:	3a 87       	std	Y+10, r19	; 0x0a
    5e9a:	4b 87       	std	Y+11, r20	; 0x0b
    5e9c:	5c 87       	std	Y+12, r21	; 0x0c
    5e9e:	ca 01       	movw	r24, r20
    5ea0:	b9 01       	movw	r22, r18
    5ea2:	20 ed       	ldi	r18, 0xD0	; 208
    5ea4:	37 e0       	ldi	r19, 0x07	; 7
    5ea6:	40 e0       	ldi	r20, 0x00	; 0
    5ea8:	50 e0       	ldi	r21, 0x00	; 0
    5eaa:	76 d3       	rcall	.+1772   	; 0x6598 <__udivmodsi4>
    5eac:	da 01       	movw	r26, r20
    5eae:	c9 01       	movw	r24, r18
    5eb0:	59 96       	adiw	r26, 0x19	; 25
    5eb2:	89 8b       	std	Y+17, r24	; 0x11
    5eb4:	9a 8b       	std	Y+18, r25	; 0x12
    5eb6:	ab 8b       	std	Y+19, r26	; 0x13
    5eb8:	bc 8b       	std	Y+20, r27	; 0x14
    5eba:	69 85       	ldd	r22, Y+9	; 0x09
    5ebc:	7a 85       	ldd	r23, Y+10	; 0x0a
    5ebe:	8b 85       	ldd	r24, Y+11	; 0x0b
    5ec0:	9c 85       	ldd	r25, Y+12	; 0x0c
    5ec2:	28 ee       	ldi	r18, 0xE8	; 232
    5ec4:	33 e0       	ldi	r19, 0x03	; 3
    5ec6:	40 e0       	ldi	r20, 0x00	; 0
    5ec8:	50 e0       	ldi	r21, 0x00	; 0
    5eca:	66 d3       	rcall	.+1740   	; 0x6598 <__udivmodsi4>
    5ecc:	69 89       	ldd	r22, Y+17	; 0x11
    5ece:	7a 89       	ldd	r23, Y+18	; 0x12
    5ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    5ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    5ed4:	61 d3       	rcall	.+1730   	; 0x6598 <__udivmodsi4>
    5ed6:	ca 01       	movw	r24, r20
				finalRangeIntegrationTimeMilliSecs/2)/
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
		sigmaEstRef = (sigmaEstRef + 500)/1000;
    5ed8:	b9 01       	movw	r22, r18
    5eda:	0e 94 c8 20 	call	0x4190	; 0x4190 <VL53L0X_isqrt>
    5ede:	b8 2f       	mov	r27, r24
    5ee0:	a7 2f       	mov	r26, r23
    5ee2:	96 2f       	mov	r25, r22
    5ee4:	88 27       	eor	r24, r24
    5ee6:	bc 01       	movw	r22, r24
    5ee8:	cd 01       	movw	r24, r26
    5eea:	6c 50       	subi	r22, 0x0C	; 12
    5eec:	7e 4f       	sbci	r23, 0xFE	; 254
    5eee:	8f 4f       	sbci	r24, 0xFF	; 255
    5ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    5ef2:	28 ee       	ldi	r18, 0xE8	; 232
    5ef4:	33 e0       	ldi	r19, 0x03	; 3
    5ef6:	40 e0       	ldi	r20, 0x00	; 0
    5ef8:	50 e0       	ldi	r21, 0x00	; 0
    5efa:	4e d3       	rcall	.+1692   	; 0x6598 <__udivmodsi4>
		sqr1 = sigmaEstRtn * sigmaEstRtn;
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
    5efc:	29 87       	std	Y+9, r18	; 0x09
    5efe:	3a 87       	std	Y+10, r19	; 0x0a
    5f00:	4b 87       	std	Y+11, r20	; 0x0b
    5f02:	5c 87       	std	Y+12, r21	; 0x0c
    5f04:	a5 01       	movw	r20, r10
    5f06:	94 01       	movw	r18, r8
    5f08:	c5 01       	movw	r24, r10
    5f0a:	b4 01       	movw	r22, r8
    5f0c:	36 d3       	rcall	.+1644   	; 0x657a <__mulsi3>
    5f0e:	4b 01       	movw	r8, r22
    5f10:	5c 01       	movw	r10, r24
    5f12:	29 85       	ldd	r18, Y+9	; 0x09
    5f14:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f16:	4b 85       	ldd	r20, Y+11	; 0x0b
    5f18:	5c 85       	ldd	r21, Y+12	; 0x0c
    5f1a:	ca 01       	movw	r24, r20
    5f1c:	b9 01       	movw	r22, r18
    5f1e:	2d d3       	rcall	.+1626   	; 0x657a <__mulsi3>
    5f20:	68 0d       	add	r22, r8
    5f22:	79 1d       	adc	r23, r9
    5f24:	8a 1d       	adc	r24, r10
    5f26:	9b 1d       	adc	r25, r11
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
    5f28:	0e 94 c8 20 	call	0x4190	; 0x4190 <VL53L0X_isqrt>
    5f2c:	45 28       	or	r4, r5
    5f2e:	46 28       	or	r4, r6
    5f30:	47 28       	or	r4, r7
    5f32:	91 f0       	breq	.+36     	; 0x5f58 <VL53L0X_calc_sigma_estimate+0x596>
    5f34:	a8 ee       	ldi	r26, 0xE8	; 232
    5f36:	b3 e0       	ldi	r27, 0x03	; 3
    5f38:	9b 01       	movw	r18, r22
    5f3a:	ac 01       	movw	r20, r24
    5f3c:	83 d3       	rcall	.+1798   	; 0x6644 <__muluhisi3>
    5f3e:	6f 3a       	cpi	r22, 0xAF	; 175
    5f40:	a7 e8       	ldi	r26, 0x87	; 135
    5f42:	7a 07       	cpc	r23, r26
    5f44:	af e8       	ldi	r26, 0x8F	; 143
    5f46:	8a 07       	cpc	r24, r26
    5f48:	a2 e0       	ldi	r26, 0x02	; 2
    5f4a:	9a 07       	cpc	r25, r26
    5f4c:	48 f0       	brcs	.+18     	; 0x5f60 <VL53L0X_calc_sigma_estimate+0x59e>
    5f4e:	6e ea       	ldi	r22, 0xAE	; 174
    5f50:	77 e8       	ldi	r23, 0x87	; 135
    5f52:	8f e8       	ldi	r24, 0x8F	; 143
    5f54:	92 e0       	ldi	r25, 0x02	; 2
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
    5f56:	04 c0       	rjmp	.+8      	; 0x5f60 <VL53L0X_calc_sigma_estimate+0x59e>
    5f58:	6e ea       	ldi	r22, 0xAE	; 174
    5f5a:	77 e8       	ldi	r23, 0x87	; 135
    5f5c:	8f e8       	ldi	r24, 0x8F	; 143
		}

		*pSigmaEstimate = (u32)(sigmaEstimate);
    5f5e:	92 e0       	ldi	r25, 0x02	; 2
    5f60:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5f62:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5f64:	60 83       	st	Z, r22
    5f66:	71 83       	std	Z+1, r23	; 0x01
    5f68:	82 83       	std	Z+2, r24	; 0x02
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
    5f6a:	93 83       	std	Z+3, r25	; 0x03
    5f6c:	f1 01       	movw	r30, r2
    5f6e:	e6 5d       	subi	r30, 0xD6	; 214
    5f70:	fe 4f       	sbci	r31, 0xFE	; 254
    5f72:	60 83       	st	Z, r22
    5f74:	71 83       	std	Z+1, r23	; 0x01
    5f76:	82 83       	std	Z+2, r24	; 0x02
		Status = VL53L0X_calc_dmax(
    5f78:	93 83       	std	Z+3, r25	; 0x03
    5f7a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5f7c:	ff 93       	push	r31
    5f7e:	29 8d       	ldd	r18, Y+25	; 0x19
    5f80:	2f 93       	push	r18
    5f82:	1f 93       	push	r17
    5f84:	0f 93       	push	r16
    5f86:	3d a5       	ldd	r19, Y+45	; 0x2d
    5f88:	3f 93       	push	r19
    5f8a:	4d 89       	ldd	r20, Y+21	; 0x15
    5f8c:	4f 93       	push	r20
    5f8e:	58 89       	ldd	r21, Y+16	; 0x10
    5f90:	5f 93       	push	r21
    5f92:	8f 85       	ldd	r24, Y+15	; 0x0f
    5f94:	8f 93       	push	r24
    5f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f98:	9f 93       	push	r25
    5f9a:	ad 85       	ldd	r26, Y+13	; 0x0d
    5f9c:	af 93       	push	r26
    5f9e:	0f 2e       	mov	r0, r31
    5fa0:	f0 e2       	ldi	r31, 0x20	; 32
    5fa2:	8f 2e       	mov	r8, r31
    5fa4:	f3 e0       	ldi	r31, 0x03	; 3
    5fa6:	9f 2e       	mov	r9, r31
    5fa8:	a1 2c       	mov	r10, r1
    5faa:	b1 2c       	mov	r11, r1
    5fac:	f0 2d       	mov	r31, r0
    5fae:	09 a1       	ldd	r16, Y+33	; 0x21
    5fb0:	1a a1       	ldd	r17, Y+34	; 0x22
    5fb2:	2b a1       	ldd	r18, Y+35	; 0x23
    5fb4:	3c a1       	ldd	r19, Y+36	; 0x24
    5fb6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5fb8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5fba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5fbc:	78 a1       	ldd	r23, Y+32	; 0x20
    5fbe:	c1 01       	movw	r24, r2
    5fc0:	29 db       	rcall	.-2478   	; 0x5614 <VL53L0X_calc_dmax>
    5fc2:	18 2f       	mov	r17, r24
    5fc4:	0f b6       	in	r0, 0x3f	; 63
    5fc6:	f8 94       	cli
    5fc8:	de bf       	out	0x3e, r29	; 62
    5fca:	0f be       	out	0x3f, r0	; 63
			peakVcselDuration_us,
			pDmax_mm);
	}

	return Status;
}
    5fcc:	cd bf       	out	0x3d, r28	; 61
    5fce:	81 2f       	mov	r24, r17
    5fd0:	e5 96       	adiw	r28, 0x35	; 53
    5fd2:	0f b6       	in	r0, 0x3f	; 63
    5fd4:	f8 94       	cli
    5fd6:	de bf       	out	0x3e, r29	; 62
    5fd8:	0f be       	out	0x3f, r0	; 63
    5fda:	cd bf       	out	0x3d, r28	; 61
    5fdc:	df 91       	pop	r29
    5fde:	cf 91       	pop	r28
    5fe0:	1f 91       	pop	r17
    5fe2:	0f 91       	pop	r16
    5fe4:	ff 90       	pop	r15
    5fe6:	ef 90       	pop	r14
    5fe8:	df 90       	pop	r13
    5fea:	cf 90       	pop	r12
    5fec:	bf 90       	pop	r11
    5fee:	af 90       	pop	r10
    5ff0:	9f 90       	pop	r9
    5ff2:	8f 90       	pop	r8
    5ff4:	7f 90       	pop	r7
    5ff6:	6f 90       	pop	r6
    5ff8:	5f 90       	pop	r5
    5ffa:	4f 90       	pop	r4
    5ffc:	3f 90       	pop	r3
    5ffe:	2f 90       	pop	r2
    6000:	08 95       	ret

00006002 <VL53L0X_get_pal_range_status>:
		u8 DeviceRangeStatus,
		f1616 SignalRate,
		u16 EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		u8 *pPalRangeStatus)
{
    6002:	2f 92       	push	r2
    6004:	3f 92       	push	r3
    6006:	4f 92       	push	r4
    6008:	5f 92       	push	r5
    600a:	6f 92       	push	r6
    600c:	7f 92       	push	r7
    600e:	8f 92       	push	r8
    6010:	9f 92       	push	r9
    6012:	af 92       	push	r10
    6014:	bf 92       	push	r11
    6016:	cf 92       	push	r12
    6018:	df 92       	push	r13
    601a:	ef 92       	push	r14
    601c:	ff 92       	push	r15
    601e:	0f 93       	push	r16
    6020:	1f 93       	push	r17
    6022:	cf 93       	push	r28
    6024:	df 93       	push	r29
    6026:	cd b7       	in	r28, 0x3d	; 61
    6028:	de b7       	in	r29, 0x3e	; 62
    602a:	a0 97       	sbiw	r28, 0x20	; 32
    602c:	0f b6       	in	r0, 0x3f	; 63
    602e:	f8 94       	cli
    6030:	de bf       	out	0x3e, r29	; 62
    6032:	0f be       	out	0x3f, r0	; 63
    6034:	cd bf       	out	0x3d, r28	; 61
    6036:	5c 01       	movw	r10, r24
    6038:	2d 8f       	std	Y+29, r18	; 0x1d
    603a:	3e 8f       	std	Y+30, r19	; 0x1e
    603c:	4f 8f       	std	Y+31, r20	; 0x1f
    603e:	58 a3       	std	Y+32, r21	; 0x20
    6040:	48 01       	movw	r8, r16
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
	u8 SigmaLimitCheckEnable = 0;
    6042:	19 82       	std	Y+1, r1	; 0x01
	u8 SignalRateFinalRangeLimitCheckEnable = 0;
    6044:	1a 82       	std	Y+2, r1	; 0x02
	u8 SignalRefClipLimitCheckEnable = 0;
    6046:	1b 82       	std	Y+3, r1	; 0x03
	u8 RangeIgnoreThresholdLimitCheckEnable = 0;
    6048:	1c 82       	std	Y+4, r1	; 0x04
	f1616 SigmaLimitValue;
	f1616 SignalRefClipValue;
	f1616 RangeIgnoreThresholdValue;
	f1616 SignalRatePerSpad;
	u8 DeviceRangeStatusInternal = 0;
	u16 tmpWord = 0;
    604a:	1e 8a       	std	Y+22, r1	; 0x16
    604c:	1d 8a       	std	Y+21, r1	; 0x15
	u8 Temp8;
	u32 Dmax_mm = 0;
    604e:	1f 8a       	std	Y+23, r1	; 0x17
    6050:	18 8e       	std	Y+24, r1	; 0x18
    6052:	19 8e       	std	Y+25, r1	; 0x19
    6054:	1a 8e       	std	Y+26, r1	; 0x1a
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
    6056:	68 77       	andi	r22, 0x78	; 120
    6058:	06 2f       	mov	r16, r22
    605a:	10 e0       	ldi	r17, 0x00	; 0
    605c:	15 95       	asr	r17
    605e:	07 95       	ror	r16
    6060:	15 95       	asr	r17
    6062:	07 95       	ror	r16
    6064:	15 95       	asr	r17
    6066:	07 95       	ror	r16
    6068:	30 2e       	mov	r3, r16

	if (DeviceRangeStatusInternal == 0 ||
    606a:	00 23       	and	r16, r16
    606c:	61 f0       	breq	.+24     	; 0x6086 <VL53L0X_get_pal_range_status+0x84>
    606e:	80 2f       	mov	r24, r16
    6070:	8d 7f       	andi	r24, 0xFD	; 253
    6072:	85 30       	cpi	r24, 0x05	; 5
    6074:	59 f0       	breq	.+22     	; 0x608c <VL53L0X_get_pal_range_status+0x8a>
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
    6076:	21 e0       	ldi	r18, 0x01	; 1
    6078:	2c 8f       	std	Y+28, r18	; 0x1c
    607a:	84 ef       	ldi	r24, 0xF4	; 244
    607c:	80 0f       	add	r24, r16
    607e:	84 30       	cpi	r24, 0x04	; 4
    6080:	38 f0       	brcs	.+14     	; 0x6090 <VL53L0X_get_pal_range_status+0x8e>
    6082:	1c 8e       	std	Y+28, r1	; 0x1c
    6084:	05 c0       	rjmp	.+10     	; 0x6090 <VL53L0X_get_pal_range_status+0x8e>
    6086:	31 e0       	ldi	r19, 0x01	; 1
    6088:	3c 8f       	std	Y+28, r19	; 0x1c
    608a:	02 c0       	rjmp	.+4      	; 0x6090 <VL53L0X_get_pal_range_status+0x8e>
    608c:	41 e0       	ldi	r20, 0x01	; 1
    608e:	4c 8f       	std	Y+28, r20	; 0x1c
	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    6090:	ae 01       	movw	r20, r28
    6092:	4f 5f       	subi	r20, 0xFF	; 255
    6094:	5f 4f       	sbci	r21, 0xFF	; 255
    6096:	60 e0       	ldi	r22, 0x00	; 0
    6098:	70 e0       	ldi	r23, 0x00	; 0
    609a:	c5 01       	movw	r24, r10
    609c:	0e 94 37 10 	call	0x206e	; 0x206e <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
    60a0:	99 81       	ldd	r25, Y+1	; 0x01
    60a2:	99 23       	and	r25, r25
    60a4:	81 f1       	breq	.+96     	; 0x6106 <VL53L0X_get_pal_range_status+0x104>
    60a6:	81 11       	cpse	r24, r1
    60a8:	3c c0       	rjmp	.+120    	; 0x6122 <VL53L0X_get_pal_range_status+0x120>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
    60aa:	9e 01       	movw	r18, r28
    60ac:	29 5e       	subi	r18, 0xE9	; 233
    60ae:	3f 4f       	sbci	r19, 0xFF	; 255
    60b0:	ae 01       	movw	r20, r28
    60b2:	4b 5f       	subi	r20, 0xFB	; 251
    60b4:	5f 4f       	sbci	r21, 0xFF	; 255
    60b6:	b7 01       	movw	r22, r14
    60b8:	c5 01       	movw	r24, r10
    60ba:	83 dc       	rcall	.-1786   	; 0x59c2 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
    60bc:	81 11       	cpse	r24, r1
    60be:	33 c0       	rjmp	.+102    	; 0x6126 <VL53L0X_get_pal_range_status+0x124>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
    60c0:	8f 89       	ldd	r24, Y+23	; 0x17
    60c2:	98 8d       	ldd	r25, Y+24	; 0x18
    60c4:	f7 01       	movw	r30, r14
    60c6:	93 87       	std	Z+11, r25	; 0x0b
    60c8:	82 87       	std	Z+10, r24	; 0x0a

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
    60ca:	ae 01       	movw	r20, r28
    60cc:	47 5f       	subi	r20, 0xF7	; 247
    60ce:	5f 4f       	sbci	r21, 0xFF	; 255
    60d0:	60 e0       	ldi	r22, 0x00	; 0
    60d2:	70 e0       	ldi	r23, 0x00	; 0
    60d4:	c5 01       	movw	r24, r10
    60d6:	0e 94 c0 10 	call	0x2180	; 0x2180 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
    60da:	49 85       	ldd	r20, Y+9	; 0x09
    60dc:	5a 85       	ldd	r21, Y+10	; 0x0a
    60de:	6b 85       	ldd	r22, Y+11	; 0x0b
    60e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    60e2:	41 15       	cp	r20, r1
    60e4:	51 05       	cpc	r21, r1
    60e6:	61 05       	cpc	r22, r1
    60e8:	71 05       	cpc	r23, r1
    60ea:	79 f0       	breq	.+30     	; 0x610a <VL53L0X_get_pal_range_status+0x108>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
    60ec:	22 24       	eor	r2, r2
    60ee:	23 94       	inc	r2
    60f0:	4d 80       	ldd	r4, Y+5	; 0x05
    60f2:	5e 80       	ldd	r5, Y+6	; 0x06
    60f4:	6f 80       	ldd	r6, Y+7	; 0x07
    60f6:	78 84       	ldd	r7, Y+8	; 0x08
    60f8:	44 15       	cp	r20, r4
    60fa:	55 05       	cpc	r21, r5
    60fc:	66 05       	cpc	r22, r6
    60fe:	77 05       	cpc	r23, r7
    6100:	28 f0       	brcs	.+10     	; 0x610c <VL53L0X_get_pal_range_status+0x10a>
    6102:	21 2c       	mov	r2, r1
    6104:	03 c0       	rjmp	.+6      	; 0x610c <VL53L0X_get_pal_range_status+0x10a>
    6106:	21 2c       	mov	r2, r1
    6108:	01 c0       	rjmp	.+2      	; 0x610c <VL53L0X_get_pal_range_status+0x10a>
    610a:	21 2c       	mov	r2, r1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    610c:	81 11       	cpse	r24, r1
    610e:	0c c0       	rjmp	.+24     	; 0x6128 <VL53L0X_get_pal_range_status+0x126>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    6110:	ae 01       	movw	r20, r28
    6112:	4d 5f       	subi	r20, 0xFD	; 253
    6114:	5f 4f       	sbci	r21, 0xFF	; 255
    6116:	62 e0       	ldi	r22, 0x02	; 2
    6118:	70 e0       	ldi	r23, 0x00	; 0
    611a:	c5 01       	movw	r24, r10
    611c:	0e 94 37 10 	call	0x206e	; 0x206e <VL53L0X_GetLimitCheckEnable>
    6120:	03 c0       	rjmp	.+6      	; 0x6128 <VL53L0X_get_pal_range_status+0x126>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
    6122:	21 2c       	mov	r2, r1
    6124:	01 c0       	rjmp	.+2      	; 0x6128 <VL53L0X_get_pal_range_status+0x126>
    6126:	21 2c       	mov	r2, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
    6128:	9b 81       	ldd	r25, Y+3	; 0x03
    612a:	99 23       	and	r25, r25
    612c:	09 f4       	brne	.+2      	; 0x6130 <VL53L0X_get_pal_range_status+0x12e>
    612e:	3e c0       	rjmp	.+124    	; 0x61ac <VL53L0X_get_pal_range_status+0x1aa>
    6130:	81 11       	cpse	r24, r1
    6132:	fc c0       	rjmp	.+504    	; 0x632c <VL53L0X_get_pal_range_status+0x32a>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
    6134:	ae 01       	movw	r20, r28
    6136:	43 5f       	subi	r20, 0xF3	; 243
    6138:	5f 4f       	sbci	r21, 0xFF	; 255
    613a:	62 e0       	ldi	r22, 0x02	; 2
    613c:	70 e0       	ldi	r23, 0x00	; 0
    613e:	c5 01       	movw	r24, r10
    6140:	0e 94 c0 10 	call	0x2180	; 0x2180 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
    6144:	81 11       	cpse	r24, r1
    6146:	12 c0       	rjmp	.+36     	; 0x616c <VL53L0X_get_pal_range_status+0x16a>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    6148:	41 e0       	ldi	r20, 0x01	; 1
    614a:	6f ef       	ldi	r22, 0xFF	; 255
    614c:	c5 01       	movw	r24, r10
    614e:	3f d1       	rcall	.+638    	; 0x63ce <VL53L0X_WrByte>

		if (Status == VL53L0X_ERROR_NONE)
    6150:	81 11       	cpse	r24, r1
    6152:	0c c0       	rjmp	.+24     	; 0x616c <VL53L0X_get_pal_range_status+0x16a>
			Status = VL53L0X_RdWord(Dev,
    6154:	ae 01       	movw	r20, r28
    6156:	4b 5e       	subi	r20, 0xEB	; 235
    6158:	5f 4f       	sbci	r21, 0xFF	; 255
    615a:	66 eb       	ldi	r22, 0xB6	; 182
    615c:	c5 01       	movw	r24, r10
    615e:	b1 d1       	rcall	.+866    	; 0x64c2 <VL53L0X_RdWord>
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
    6160:	81 11       	cpse	r24, r1
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    6162:	04 c0       	rjmp	.+8      	; 0x616c <VL53L0X_get_pal_range_status+0x16a>
    6164:	40 e0       	ldi	r20, 0x00	; 0
    6166:	6f ef       	ldi	r22, 0xFF	; 255
    6168:	c5 01       	movw	r24, r10

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    616a:	31 d1       	rcall	.+610    	; 0x63ce <VL53L0X_WrByte>
    616c:	9d 89       	ldd	r25, Y+21	; 0x15
    616e:	40 e0       	ldi	r20, 0x00	; 0
    6170:	50 e0       	ldi	r21, 0x00	; 0
    6172:	59 2f       	mov	r21, r25
    6174:	55 0f       	add	r21, r21
    6176:	60 e0       	ldi	r22, 0x00	; 0
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    6178:	70 e0       	ldi	r23, 0x00	; 0
    617a:	f5 01       	movw	r30, r10
    617c:	ee 5c       	subi	r30, 0xCE	; 206
    617e:	fe 4f       	sbci	r31, 0xFE	; 254
    6180:	40 83       	st	Z, r20
    6182:	51 83       	std	Z+1, r21	; 0x01
    6184:	62 83       	std	Z+2, r22	; 0x02

		if ((SignalRefClipValue > 0) &&
    6186:	73 83       	std	Z+3, r23	; 0x03
    6188:	4d 84       	ldd	r4, Y+13	; 0x0d
    618a:	5e 84       	ldd	r5, Y+14	; 0x0e
    618c:	6f 84       	ldd	r6, Y+15	; 0x0f
    618e:	78 88       	ldd	r7, Y+16	; 0x10
    6190:	41 14       	cp	r4, r1
    6192:	51 04       	cpc	r5, r1
    6194:	61 04       	cpc	r6, r1
    6196:	71 04       	cpc	r7, r1
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
    6198:	59 f0       	breq	.+22     	; 0x61b0 <VL53L0X_get_pal_range_status+0x1ae>
    619a:	f1 e0       	ldi	r31, 0x01	; 1
    619c:	fb 8f       	std	Y+27, r31	; 0x1b
    619e:	44 16       	cp	r4, r20
    61a0:	55 06       	cpc	r5, r21
    61a2:	66 06       	cpc	r6, r22
    61a4:	77 06       	cpc	r7, r23
    61a6:	28 f0       	brcs	.+10     	; 0x61b2 <VL53L0X_get_pal_range_status+0x1b0>
    61a8:	1b 8e       	std	Y+27, r1	; 0x1b
    61aa:	03 c0       	rjmp	.+6      	; 0x61b2 <VL53L0X_get_pal_range_status+0x1b0>
    61ac:	1b 8e       	std	Y+27, r1	; 0x1b
    61ae:	01 c0       	rjmp	.+2      	; 0x61b2 <VL53L0X_get_pal_range_status+0x1b0>
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
    61b0:	1b 8e       	std	Y+27, r1	; 0x1b
    61b2:	81 11       	cpse	r24, r1
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    61b4:	bc c0       	rjmp	.+376    	; 0x632e <VL53L0X_get_pal_range_status+0x32c>
    61b6:	ae 01       	movw	r20, r28
    61b8:	4c 5f       	subi	r20, 0xFC	; 252
    61ba:	5f 4f       	sbci	r21, 0xFF	; 255
    61bc:	63 e0       	ldi	r22, 0x03	; 3
    61be:	70 e0       	ldi	r23, 0x00	; 0
    61c0:	c5 01       	movw	r24, r10
    61c2:	0e 94 37 10 	call	0x206e	; 0x206e <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    61c6:	9c 81       	ldd	r25, Y+4	; 0x04
    61c8:	99 23       	and	r25, r25
    61ca:	89 f1       	breq	.+98     	; 0x622e <VL53L0X_get_pal_range_status+0x22c>
    61cc:	81 11       	cpse	r24, r1
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
    61ce:	6b c0       	rjmp	.+214    	; 0x62a6 <VL53L0X_get_pal_range_status+0x2a4>
    61d0:	81 14       	cp	r8, r1
    61d2:	91 04       	cpc	r9, r1
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (f1616)((256 * SignalRate)
    61d4:	79 f0       	breq	.+30     	; 0x61f4 <VL53L0X_get_pal_range_status+0x1f2>
    61d6:	2d 8d       	ldd	r18, Y+29	; 0x1d
    61d8:	3e 8d       	ldd	r19, Y+30	; 0x1e
    61da:	4f 8d       	ldd	r20, Y+31	; 0x1f
    61dc:	58 a1       	ldd	r21, Y+32	; 0x20
    61de:	94 2f       	mov	r25, r20
    61e0:	83 2f       	mov	r24, r19
    61e2:	72 2f       	mov	r23, r18
    61e4:	66 27       	eor	r22, r22
    61e6:	94 01       	movw	r18, r8
    61e8:	40 e0       	ldi	r20, 0x00	; 0
    61ea:	50 e0       	ldi	r21, 0x00	; 0
    61ec:	d5 d1       	rcall	.+938    	; 0x6598 <__udivmodsi4>
    61ee:	29 01       	movw	r4, r18
    61f0:	3a 01       	movw	r6, r20
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
			SignalRatePerSpad = 0;
    61f2:	03 c0       	rjmp	.+6      	; 0x61fa <VL53L0X_get_pal_range_status+0x1f8>
    61f4:	41 2c       	mov	r4, r1
    61f6:	51 2c       	mov	r5, r1
		} else {
			SignalRatePerSpad = (f1616)((256 * SignalRate)
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
    61f8:	32 01       	movw	r6, r4
    61fa:	ae 01       	movw	r20, r28
    61fc:	4f 5e       	subi	r20, 0xEF	; 239
    61fe:	5f 4f       	sbci	r21, 0xFF	; 255
    6200:	63 e0       	ldi	r22, 0x03	; 3
    6202:	70 e0       	ldi	r23, 0x00	; 0
    6204:	c5 01       	movw	r24, r10
    6206:	0e 94 c0 10 	call	0x2180	; 0x2180 <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
    620a:	49 89       	ldd	r20, Y+17	; 0x11
    620c:	5a 89       	ldd	r21, Y+18	; 0x12
    620e:	6b 89       	ldd	r22, Y+19	; 0x13
    6210:	7c 89       	ldd	r23, Y+20	; 0x14
    6212:	41 15       	cp	r20, r1
    6214:	51 05       	cpc	r21, r1
    6216:	61 05       	cpc	r22, r1
    6218:	71 05       	cpc	r23, r1
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
    621a:	59 f0       	breq	.+22     	; 0x6232 <VL53L0X_get_pal_range_status+0x230>
    621c:	99 24       	eor	r9, r9
    621e:	93 94       	inc	r9
    6220:	44 16       	cp	r4, r20
    6222:	55 06       	cpc	r5, r21
    6224:	66 06       	cpc	r6, r22
    6226:	77 06       	cpc	r7, r23
    6228:	28 f0       	brcs	.+10     	; 0x6234 <VL53L0X_get_pal_range_status+0x232>
    622a:	91 2c       	mov	r9, r1
    622c:	03 c0       	rjmp	.+6      	; 0x6234 <VL53L0X_get_pal_range_status+0x232>
    622e:	91 2c       	mov	r9, r1
    6230:	01 c0       	rjmp	.+2      	; 0x6234 <VL53L0X_get_pal_range_status+0x232>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    6232:	91 2c       	mov	r9, r1
    6234:	81 11       	cpse	r24, r1
		if (NoneFlag == 1) {
    6236:	3a c0       	rjmp	.+116    	; 0x62ac <VL53L0X_get_pal_range_status+0x2aa>
    6238:	3c 8d       	ldd	r19, Y+28	; 0x1c
    623a:	31 30       	cpi	r19, 0x01	; 1
			*pPalRangeStatus = 255;	 /* NONE */
    623c:	21 f4       	brne	.+8      	; 0x6246 <VL53L0X_get_pal_range_status+0x244>
    623e:	8f ef       	ldi	r24, 0xFF	; 255
    6240:	f6 01       	movw	r30, r12
    6242:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 1 ||
    6244:	3a c0       	rjmp	.+116    	; 0x62ba <VL53L0X_get_pal_range_status+0x2b8>
    6246:	8f ef       	ldi	r24, 0xFF	; 255
    6248:	80 0f       	add	r24, r16
    624a:	83 30       	cpi	r24, 0x03	; 3
					DeviceRangeStatusInternal == 2 ||
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
    624c:	20 f4       	brcc	.+8      	; 0x6256 <VL53L0X_get_pal_range_status+0x254>
    624e:	85 e0       	ldi	r24, 0x05	; 5
    6250:	f6 01       	movw	r30, r12
    6252:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 6 ||
    6254:	32 c0       	rjmp	.+100    	; 0x62ba <VL53L0X_get_pal_range_status+0x2b8>
    6256:	f6 e0       	ldi	r31, 0x06	; 6
    6258:	3f 16       	cp	r3, r31
    625a:	19 f0       	breq	.+6      	; 0x6262 <VL53L0X_get_pal_range_status+0x260>
    625c:	29 e0       	ldi	r18, 0x09	; 9
    625e:	32 12       	cpse	r3, r18
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
    6260:	04 c0       	rjmp	.+8      	; 0x626a <VL53L0X_get_pal_range_status+0x268>
    6262:	84 e0       	ldi	r24, 0x04	; 4
    6264:	f6 01       	movw	r30, r12
    6266:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 8 ||
    6268:	28 c0       	rjmp	.+80     	; 0x62ba <VL53L0X_get_pal_range_status+0x2b8>
    626a:	0d 7f       	andi	r16, 0xFD	; 253
    626c:	08 30       	cpi	r16, 0x08	; 8
					DeviceRangeStatusInternal == 10 ||
    626e:	19 f0       	breq	.+6      	; 0x6276 <VL53L0X_get_pal_range_status+0x274>
    6270:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6272:	f1 30       	cpi	r31, 0x01	; 1
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
    6274:	21 f4       	brne	.+8      	; 0x627e <VL53L0X_get_pal_range_status+0x27c>
    6276:	83 e0       	ldi	r24, 0x03	; 3
    6278:	f6 01       	movw	r30, r12
    627a:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 4 ||
    627c:	1e c0       	rjmp	.+60     	; 0x62ba <VL53L0X_get_pal_range_status+0x2b8>
    627e:	f4 e0       	ldi	r31, 0x04	; 4
    6280:	3f 16       	cp	r3, r31
    6282:	19 f0       	breq	.+6      	; 0x628a <VL53L0X_get_pal_range_status+0x288>
    6284:	21 e0       	ldi	r18, 0x01	; 1
    6286:	92 12       	cpse	r9, r18
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
    6288:	04 c0       	rjmp	.+8      	; 0x6292 <VL53L0X_get_pal_range_status+0x290>
    628a:	82 e0       	ldi	r24, 0x02	; 2
    628c:	f6 01       	movw	r30, r12
    628e:	80 83       	st	Z, r24
		} else if (SigmaLimitflag == 1) {
    6290:	14 c0       	rjmp	.+40     	; 0x62ba <VL53L0X_get_pal_range_status+0x2b8>
    6292:	f1 e0       	ldi	r31, 0x01	; 1
    6294:	2f 12       	cpse	r2, r31
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
    6296:	04 c0       	rjmp	.+8      	; 0x62a0 <VL53L0X_get_pal_range_status+0x29e>
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	f6 01       	movw	r30, r12
    629c:	80 83       	st	Z, r24
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
    629e:	0d c0       	rjmp	.+26     	; 0x62ba <VL53L0X_get_pal_range_status+0x2b8>
    62a0:	f6 01       	movw	r30, r12
    62a2:	10 82       	st	Z, r1
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
    62a4:	07 c0       	rjmp	.+14     	; 0x62b4 <VL53L0X_get_pal_range_status+0x2b2>
    62a6:	91 2c       	mov	r9, r1
    62a8:	01 c0       	rjmp	.+2      	; 0x62ac <VL53L0X_get_pal_range_status+0x2aa>
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
    62aa:	91 2c       	mov	r9, r1
    62ac:	f6 01       	movw	r30, r12
    62ae:	80 81       	ld	r24, Z
    62b0:	81 11       	cpse	r24, r1
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
    62b2:	03 c0       	rjmp	.+6      	; 0x62ba <VL53L0X_get_pal_range_status+0x2b8>
    62b4:	f7 01       	movw	r30, r14
    62b6:	13 86       	std	Z+11, r1	; 0x0b

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
    62b8:	12 86       	std	Z+10, r1	; 0x0a
    62ba:	ae 01       	movw	r20, r28
    62bc:	4e 5f       	subi	r20, 0xFE	; 254
    62be:	5f 4f       	sbci	r21, 0xFF	; 255
    62c0:	61 e0       	ldi	r22, 0x01	; 1
    62c2:	70 e0       	ldi	r23, 0x00	; 0
    62c4:	c5 01       	movw	r24, r10
    62c6:	0e 94 37 10 	call	0x206e	; 0x206e <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
    62ca:	81 11       	cpse	r24, r1
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
    62cc:	35 c0       	rjmp	.+106    	; 0x6338 <VL53L0X_get_pal_range_status+0x336>
    62ce:	99 81       	ldd	r25, Y+1	; 0x01
    62d0:	99 23       	and	r25, r25
			Temp8 = 1;
    62d2:	29 f0       	breq	.+10     	; 0x62de <VL53L0X_get_pal_range_status+0x2dc>
    62d4:	91 e0       	ldi	r25, 0x01	; 1
    62d6:	29 16       	cp	r2, r25
    62d8:	19 f0       	breq	.+6      	; 0x62e0 <VL53L0X_get_pal_range_status+0x2de>
    62da:	90 e0       	ldi	r25, 0x00	; 0
    62dc:	01 c0       	rjmp	.+2      	; 0x62e0 <VL53L0X_get_pal_range_status+0x2de>
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    62de:	91 e0       	ldi	r25, 0x01	; 1
    62e0:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
    62e2:	93 a7       	std	Z+43, r25	; 0x2b
    62e4:	f4 e0       	ldi	r31, 0x04	; 4
    62e6:	3f 16       	cp	r3, r31
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
    62e8:	31 f0       	breq	.+12     	; 0x62f6 <VL53L0X_get_pal_range_status+0x2f4>
    62ea:	91 e0       	ldi	r25, 0x01	; 1
    62ec:	2a 81       	ldd	r18, Y+2	; 0x02
    62ee:	22 23       	and	r18, r18
    62f0:	19 f0       	breq	.+6      	; 0x62f8 <VL53L0X_get_pal_range_status+0x2f6>
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	01 c0       	rjmp	.+2      	; 0x62f8 <VL53L0X_get_pal_range_status+0x2f6>
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    62f6:	91 e0       	ldi	r25, 0x01	; 1
    62f8:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
    62fa:	94 a7       	std	Z+44, r25	; 0x2c
    62fc:	9b 81       	ldd	r25, Y+3	; 0x03
    62fe:	99 23       	and	r25, r25
					(SignalRefClipflag == 1))
			Temp8 = 1;
    6300:	31 f0       	breq	.+12     	; 0x630e <VL53L0X_get_pal_range_status+0x30c>
    6302:	91 e0       	ldi	r25, 0x01	; 1
    6304:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6306:	f1 30       	cpi	r31, 0x01	; 1
    6308:	19 f0       	breq	.+6      	; 0x6310 <VL53L0X_get_pal_range_status+0x30e>
    630a:	90 e0       	ldi	r25, 0x00	; 0
    630c:	01 c0       	rjmp	.+2      	; 0x6310 <VL53L0X_get_pal_range_status+0x30e>
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    630e:	91 e0       	ldi	r25, 0x01	; 1
    6310:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
    6312:	95 a7       	std	Z+45, r25	; 0x2d
    6314:	9c 81       	ldd	r25, Y+4	; 0x04
    6316:	99 23       	and	r25, r25
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
    6318:	29 f0       	breq	.+10     	; 0x6324 <VL53L0X_get_pal_range_status+0x322>
    631a:	91 e0       	ldi	r25, 0x01	; 1
    631c:	99 16       	cp	r9, r25
    631e:	19 f0       	breq	.+6      	; 0x6326 <VL53L0X_get_pal_range_status+0x324>
    6320:	90 e0       	ldi	r25, 0x00	; 0
    6322:	01 c0       	rjmp	.+2      	; 0x6326 <VL53L0X_get_pal_range_status+0x324>
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    6324:	91 e0       	ldi	r25, 0x01	; 1
    6326:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	return Status;
    6328:	96 a7       	std	Z+46, r25	; 0x2e
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
    632a:	06 c0       	rjmp	.+12     	; 0x6338 <VL53L0X_get_pal_range_status+0x336>
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    632c:	1b 8e       	std	Y+27, r1	; 0x1b
    632e:	9c 81       	ldd	r25, Y+4	; 0x04
    6330:	91 11       	cpse	r25, r1
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
    6332:	bb cf       	rjmp	.-138    	; 0x62aa <VL53L0X_get_pal_range_status+0x2a8>
    6334:	91 2c       	mov	r9, r1
				Temp8);
	}

	return Status;

}
    6336:	7e cf       	rjmp	.-260    	; 0x6234 <VL53L0X_get_pal_range_status+0x232>
    6338:	a0 96       	adiw	r28, 0x20	; 32
    633a:	0f b6       	in	r0, 0x3f	; 63
    633c:	f8 94       	cli
    633e:	de bf       	out	0x3e, r29	; 62
    6340:	0f be       	out	0x3f, r0	; 63
    6342:	cd bf       	out	0x3d, r28	; 61
    6344:	df 91       	pop	r29
    6346:	cf 91       	pop	r28
    6348:	1f 91       	pop	r17
    634a:	0f 91       	pop	r16
    634c:	ff 90       	pop	r15
    634e:	ef 90       	pop	r14
    6350:	df 90       	pop	r13
    6352:	cf 90       	pop	r12
    6354:	bf 90       	pop	r11
    6356:	af 90       	pop	r10
    6358:	9f 90       	pop	r9
    635a:	8f 90       	pop	r8
    635c:	7f 90       	pop	r7
    635e:	6f 90       	pop	r6
    6360:	5f 90       	pop	r5
    6362:	4f 90       	pop	r4
    6364:	3f 90       	pop	r3
    6366:	2f 90       	pop	r2
    6368:	08 95       	ret

0000636a <VL53L0X_WriteMulti>:

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    636a:	0f 93       	push	r16
    636c:	1f 93       	push	r17
    636e:	cf 93       	push	r28
    6370:	00 34       	cpi	r16, 0x40	; 64
    6372:	11 05       	cpc	r17, r1
    6374:	21 05       	cpc	r18, r1
    6376:	31 05       	cpc	r19, r1
    6378:	10 f0       	brcs	.+4      	; 0x637e <VL53L0X_WriteMulti+0x14>
    637a:	cc ef       	ldi	r28, 0xFC	; 252
    637c:	01 c0       	rjmp	.+2      	; 0x6380 <VL53L0X_WriteMulti+0x16>
    637e:	c0 e0       	ldi	r28, 0x00	; 0
    6380:	fc 01       	movw	r30, r24
    6382:	ef 5b       	subi	r30, 0xBF	; 191
    6384:	fe 4f       	sbci	r31, 0xFE	; 254
    6386:	20 2f       	mov	r18, r16
    6388:	80 81       	ld	r24, Z
    638a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>
    638e:	81 11       	cpse	r24, r1
    6390:	cc ee       	ldi	r28, 0xEC	; 236
    6392:	8c 2f       	mov	r24, r28
    6394:	cf 91       	pop	r28
    6396:	1f 91       	pop	r17
    6398:	0f 91       	pop	r16
    639a:	08 95       	ret

0000639c <VL53L0X_ReadMulti>:
    639c:	0f 93       	push	r16
    639e:	1f 93       	push	r17
    63a0:	cf 93       	push	r28
    63a2:	00 34       	cpi	r16, 0x40	; 64
    63a4:	11 05       	cpc	r17, r1
    63a6:	21 05       	cpc	r18, r1
    63a8:	31 05       	cpc	r19, r1
    63aa:	10 f0       	brcs	.+4      	; 0x63b0 <VL53L0X_ReadMulti+0x14>
    63ac:	cc ef       	ldi	r28, 0xFC	; 252
    63ae:	01 c0       	rjmp	.+2      	; 0x63b2 <VL53L0X_ReadMulti+0x16>
    63b0:	c0 e0       	ldi	r28, 0x00	; 0
    63b2:	fc 01       	movw	r30, r24
    63b4:	ef 5b       	subi	r30, 0xBF	; 191
    63b6:	fe 4f       	sbci	r31, 0xFE	; 254
    63b8:	20 2f       	mov	r18, r16
    63ba:	80 81       	ld	r24, Z
    63bc:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>
    63c0:	81 11       	cpse	r24, r1
    63c2:	cc ee       	ldi	r28, 0xEC	; 236
    63c4:	8c 2f       	mov	r24, r28
    63c6:	cf 91       	pop	r28
    63c8:	1f 91       	pop	r17
    63ca:	0f 91       	pop	r16
    63cc:	08 95       	ret

000063ce <VL53L0X_WrByte>:
    63ce:	cf 93       	push	r28
    63d0:	df 93       	push	r29
    63d2:	1f 92       	push	r1
    63d4:	cd b7       	in	r28, 0x3d	; 61
    63d6:	de b7       	in	r29, 0x3e	; 62
    63d8:	49 83       	std	Y+1, r20	; 0x01
    63da:	8f 5b       	subi	r24, 0xBF	; 191
    63dc:	9e 4f       	sbci	r25, 0xFE	; 254
    63de:	21 e0       	ldi	r18, 0x01	; 1
    63e0:	ae 01       	movw	r20, r28
    63e2:	4f 5f       	subi	r20, 0xFF	; 255
    63e4:	5f 4f       	sbci	r21, 0xFF	; 255
    63e6:	fc 01       	movw	r30, r24
    63e8:	80 81       	ld	r24, Z
    63ea:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>
    63ee:	88 23       	and	r24, r24
    63f0:	11 f0       	breq	.+4      	; 0x63f6 <VL53L0X_WrByte+0x28>
    63f2:	8c ee       	ldi	r24, 0xEC	; 236
    63f4:	01 c0       	rjmp	.+2      	; 0x63f8 <VL53L0X_WrByte+0x2a>
    63f6:	80 e0       	ldi	r24, 0x00	; 0
    63f8:	0f 90       	pop	r0
    63fa:	df 91       	pop	r29
    63fc:	cf 91       	pop	r28
    63fe:	08 95       	ret

00006400 <VL53L0X_WrWord>:
    6400:	cf 93       	push	r28
    6402:	df 93       	push	r29
    6404:	00 d0       	rcall	.+0      	; 0x6406 <VL53L0X_WrWord+0x6>
    6406:	cd b7       	in	r28, 0x3d	; 61
    6408:	de b7       	in	r29, 0x3e	; 62
    640a:	59 83       	std	Y+1, r21	; 0x01
    640c:	4a 83       	std	Y+2, r20	; 0x02
    640e:	8f 5b       	subi	r24, 0xBF	; 191
    6410:	9e 4f       	sbci	r25, 0xFE	; 254
    6412:	22 e0       	ldi	r18, 0x02	; 2
    6414:	ae 01       	movw	r20, r28
    6416:	4f 5f       	subi	r20, 0xFF	; 255
    6418:	5f 4f       	sbci	r21, 0xFF	; 255
    641a:	fc 01       	movw	r30, r24
    641c:	80 81       	ld	r24, Z
    641e:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>
    6422:	88 23       	and	r24, r24
    6424:	11 f0       	breq	.+4      	; 0x642a <VL53L0X_WrWord+0x2a>
    6426:	8c ee       	ldi	r24, 0xEC	; 236
    6428:	01 c0       	rjmp	.+2      	; 0x642c <VL53L0X_WrWord+0x2c>
    642a:	80 e0       	ldi	r24, 0x00	; 0
    642c:	0f 90       	pop	r0
    642e:	0f 90       	pop	r0
    6430:	df 91       	pop	r29
    6432:	cf 91       	pop	r28
    6434:	08 95       	ret

00006436 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, u8 index, u8 AndData, u8 OrData){
    6436:	df 92       	push	r13
    6438:	ef 92       	push	r14
    643a:	ff 92       	push	r15
    643c:	0f 93       	push	r16
    643e:	1f 93       	push	r17
    6440:	cf 93       	push	r28
    6442:	df 93       	push	r29
    6444:	1f 92       	push	r1
    6446:	cd b7       	in	r28, 0x3d	; 61
    6448:	de b7       	in	r29, 0x3e	; 62
    644a:	8c 01       	movw	r16, r24
    644c:	f6 2e       	mov	r15, r22
    644e:	d4 2e       	mov	r13, r20
    6450:	e2 2e       	mov	r14, r18
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;
    u8 data;

	status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, &data, 1);
    6452:	fc 01       	movw	r30, r24
    6454:	ef 5b       	subi	r30, 0xBF	; 191
    6456:	fe 4f       	sbci	r31, 0xFE	; 254
    6458:	21 e0       	ldi	r18, 0x01	; 1
    645a:	ae 01       	movw	r20, r28
    645c:	4f 5f       	subi	r20, 0xFF	; 255
    645e:	5f 4f       	sbci	r21, 0xFF	; 255
    6460:	80 81       	ld	r24, Z
    6462:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

    if (status_int != 0)
    6466:	88 23       	and	r24, r24
    6468:	21 f0       	breq	.+8      	; 0x6472 <VL53L0X_UpdateByte+0x3c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    646a:	8c ee       	ldi	r24, 0xEC	; 236
    646c:	14 c0       	rjmp	.+40     	; 0x6496 <VL53L0X_UpdateByte+0x60>
    646e:	80 e0       	ldi	r24, 0x00	; 0
    6470:	12 c0       	rjmp	.+36     	; 0x6496 <VL53L0X_UpdateByte+0x60>

    if (Status == VL53L0X_ERROR_NONE) {
        data = (data & AndData) | OrData;
    6472:	49 81       	ldd	r20, Y+1	; 0x01
    6474:	4d 21       	and	r20, r13
    6476:	e4 2a       	or	r14, r20
    6478:	e9 82       	std	Y+1, r14	; 0x01
        status_int = vl53l0x_writeRegister(Dev->I2cDevAddr, index, &data, 1);
    647a:	f8 01       	movw	r30, r16
    647c:	ef 5b       	subi	r30, 0xBF	; 191
    647e:	fe 4f       	sbci	r31, 0xFE	; 254
    6480:	21 e0       	ldi	r18, 0x01	; 1
    6482:	ae 01       	movw	r20, r28
    6484:	4f 5f       	subi	r20, 0xFF	; 255
    6486:	5f 4f       	sbci	r21, 0xFF	; 255
    6488:	6f 2d       	mov	r22, r15
    648a:	80 81       	ld	r24, Z
    648c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>

        if (status_int != 0)
    6490:	88 23       	and	r24, r24
    6492:	69 f3       	breq	.-38     	; 0x646e <VL53L0X_UpdateByte+0x38>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    6494:	8c ee       	ldi	r24, 0xEC	; 236
    }

    return Status;
}
    6496:	0f 90       	pop	r0
    6498:	df 91       	pop	r29
    649a:	cf 91       	pop	r28
    649c:	1f 91       	pop	r17
    649e:	0f 91       	pop	r16
    64a0:	ff 90       	pop	r15
    64a2:	ef 90       	pop	r14
    64a4:	df 90       	pop	r13
    64a6:	08 95       	ret

000064a8 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, u8 index, u8 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;

	status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, data, 1);
    64a8:	8f 5b       	subi	r24, 0xBF	; 191
    64aa:	9e 4f       	sbci	r25, 0xFE	; 254
    64ac:	21 e0       	ldi	r18, 0x01	; 1
    64ae:	fc 01       	movw	r30, r24
    64b0:	80 81       	ld	r24, Z
    64b2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

    if (status_int != 0)
    64b6:	88 23       	and	r24, r24
    64b8:	11 f0       	breq	.+4      	; 0x64be <VL53L0X_RdByte+0x16>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    64ba:	8c ee       	ldi	r24, 0xEC	; 236
    64bc:	08 95       	ret

    return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, u8 index, u8 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    64be:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    64c0:	08 95       	ret

000064c2 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, u8 index, u16 *data){
    64c2:	0f 93       	push	r16
    64c4:	1f 93       	push	r17
    64c6:	cf 93       	push	r28
    64c8:	df 93       	push	r29
    64ca:	00 d0       	rcall	.+0      	; 0x64cc <VL53L0X_RdWord+0xa>
    64cc:	cd b7       	in	r28, 0x3d	; 61
    64ce:	de b7       	in	r29, 0x3e	; 62
    64d0:	8a 01       	movw	r16, r20
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;
    u8 au8_data[2];
	
    status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, au8_data, 2);
    64d2:	8f 5b       	subi	r24, 0xBF	; 191
    64d4:	9e 4f       	sbci	r25, 0xFE	; 254
    64d6:	22 e0       	ldi	r18, 0x02	; 2
    64d8:	ae 01       	movw	r20, r28
    64da:	4f 5f       	subi	r20, 0xFF	; 255
    64dc:	5f 4f       	sbci	r21, 0xFF	; 255
    64de:	fc 01       	movw	r30, r24
    64e0:	80 81       	ld	r24, Z
    64e2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

	*data = ((u16)au8_data[0]) << 8;
	*data |= au8_data[1];
    64e6:	29 81       	ldd	r18, Y+1	; 0x01
    64e8:	30 e0       	ldi	r19, 0x00	; 0
    64ea:	32 2f       	mov	r19, r18
    64ec:	22 27       	eor	r18, r18
    64ee:	9a 81       	ldd	r25, Y+2	; 0x02
    64f0:	29 2b       	or	r18, r25
    64f2:	f8 01       	movw	r30, r16
    64f4:	31 83       	std	Z+1, r19	; 0x01
    64f6:	20 83       	st	Z, r18

    if (status_int != 0)
    64f8:	88 23       	and	r24, r24
    64fa:	11 f0       	breq	.+4      	; 0x6500 <VL53L0X_RdWord+0x3e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    64fc:	8c ee       	ldi	r24, 0xEC	; 236
    64fe:	01 c0       	rjmp	.+2      	; 0x6502 <VL53L0X_RdWord+0x40>

    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, u8 index, u16 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    6500:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    6502:	0f 90       	pop	r0
    6504:	0f 90       	pop	r0
    6506:	df 91       	pop	r29
    6508:	cf 91       	pop	r28
    650a:	1f 91       	pop	r17
    650c:	0f 91       	pop	r16
    650e:	08 95       	ret

00006510 <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, u8 index, u32 *data){
    6510:	0f 93       	push	r16
    6512:	1f 93       	push	r17
    6514:	cf 93       	push	r28
    6516:	df 93       	push	r29
    6518:	00 d0       	rcall	.+0      	; 0x651a <VL53L0X_RdDWord+0xa>
    651a:	00 d0       	rcall	.+0      	; 0x651c <VL53L0X_RdDWord+0xc>
    651c:	cd b7       	in	r28, 0x3d	; 61
    651e:	de b7       	in	r29, 0x3e	; 62
    6520:	8a 01       	movw	r16, r20
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;
    u8 au8_data[4];
    
    status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, au8_data, 4);
    6522:	8f 5b       	subi	r24, 0xBF	; 191
    6524:	9e 4f       	sbci	r25, 0xFE	; 254
    6526:	24 e0       	ldi	r18, 0x04	; 4
    6528:	ae 01       	movw	r20, r28
    652a:	4f 5f       	subi	r20, 0xFF	; 255
    652c:	5f 4f       	sbci	r21, 0xFF	; 255
    652e:	fc 01       	movw	r30, r24
    6530:	80 81       	ld	r24, Z
    6532:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

    *data = ((u32)au8_data[0]) << 24;
    *data |= ((u32)au8_data[1]) << 16;
    *data |= ((u32)au8_data[2]) << 8;
    *data |= au8_data[3];
    6536:	99 81       	ldd	r25, Y+1	; 0x01
    6538:	4a 81       	ldd	r20, Y+2	; 0x02
    653a:	50 e0       	ldi	r21, 0x00	; 0
    653c:	60 e0       	ldi	r22, 0x00	; 0
    653e:	70 e0       	ldi	r23, 0x00	; 0
    6540:	ba 01       	movw	r22, r20
    6542:	55 27       	eor	r21, r21
    6544:	44 27       	eor	r20, r20
    6546:	79 2b       	or	r23, r25
    6548:	9c 81       	ldd	r25, Y+4	; 0x04
    654a:	49 2b       	or	r20, r25
    654c:	9b 81       	ldd	r25, Y+3	; 0x03
    654e:	59 2b       	or	r21, r25
    6550:	f8 01       	movw	r30, r16
    6552:	40 83       	st	Z, r20
    6554:	51 83       	std	Z+1, r21	; 0x01
    6556:	62 83       	std	Z+2, r22	; 0x02
    6558:	73 83       	std	Z+3, r23	; 0x03
	
    if (status_int != 0)
    655a:	88 23       	and	r24, r24
    655c:	11 f0       	breq	.+4      	; 0x6562 <VL53L0X_RdDWord+0x52>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    655e:	8c ee       	ldi	r24, 0xEC	; 236
    6560:	01 c0       	rjmp	.+2      	; 0x6564 <VL53L0X_RdDWord+0x54>

    return Status;
}

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, u8 index, u32 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    6562:	80 e0       	ldi	r24, 0x00	; 0
	
    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    6564:	0f 90       	pop	r0
    6566:	0f 90       	pop	r0
    6568:	0f 90       	pop	r0
    656a:	0f 90       	pop	r0
    656c:	df 91       	pop	r29
    656e:	cf 91       	pop	r28
    6570:	1f 91       	pop	r17
    6572:	0f 91       	pop	r16
    6574:	08 95       	ret

00006576 <VL53L0X_PollingDelay>:
#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
	
    return status;
}
    6576:	80 e0       	ldi	r24, 0x00	; 0
    6578:	08 95       	ret

0000657a <__mulsi3>:
    657a:	db 01       	movw	r26, r22
    657c:	8f 93       	push	r24
    657e:	9f 93       	push	r25
    6580:	61 d0       	rcall	.+194    	; 0x6644 <__muluhisi3>
    6582:	bf 91       	pop	r27
    6584:	af 91       	pop	r26
    6586:	a2 9f       	mul	r26, r18
    6588:	80 0d       	add	r24, r0
    658a:	91 1d       	adc	r25, r1
    658c:	a3 9f       	mul	r26, r19
    658e:	90 0d       	add	r25, r0
    6590:	b2 9f       	mul	r27, r18
    6592:	90 0d       	add	r25, r0
    6594:	11 24       	eor	r1, r1
    6596:	08 95       	ret

00006598 <__udivmodsi4>:
    6598:	a1 e2       	ldi	r26, 0x21	; 33
    659a:	1a 2e       	mov	r1, r26
    659c:	aa 1b       	sub	r26, r26
    659e:	bb 1b       	sub	r27, r27
    65a0:	fd 01       	movw	r30, r26
    65a2:	0d c0       	rjmp	.+26     	; 0x65be <__udivmodsi4_ep>

000065a4 <__udivmodsi4_loop>:
    65a4:	aa 1f       	adc	r26, r26
    65a6:	bb 1f       	adc	r27, r27
    65a8:	ee 1f       	adc	r30, r30
    65aa:	ff 1f       	adc	r31, r31
    65ac:	a2 17       	cp	r26, r18
    65ae:	b3 07       	cpc	r27, r19
    65b0:	e4 07       	cpc	r30, r20
    65b2:	f5 07       	cpc	r31, r21
    65b4:	20 f0       	brcs	.+8      	; 0x65be <__udivmodsi4_ep>
    65b6:	a2 1b       	sub	r26, r18
    65b8:	b3 0b       	sbc	r27, r19
    65ba:	e4 0b       	sbc	r30, r20
    65bc:	f5 0b       	sbc	r31, r21

000065be <__udivmodsi4_ep>:
    65be:	66 1f       	adc	r22, r22
    65c0:	77 1f       	adc	r23, r23
    65c2:	88 1f       	adc	r24, r24
    65c4:	99 1f       	adc	r25, r25
    65c6:	1a 94       	dec	r1
    65c8:	69 f7       	brne	.-38     	; 0x65a4 <__udivmodsi4_loop>
    65ca:	60 95       	com	r22
    65cc:	70 95       	com	r23
    65ce:	80 95       	com	r24
    65d0:	90 95       	com	r25
    65d2:	9b 01       	movw	r18, r22
    65d4:	ac 01       	movw	r20, r24
    65d6:	bd 01       	movw	r22, r26
    65d8:	cf 01       	movw	r24, r30
    65da:	08 95       	ret

000065dc <__divmodsi4>:
    65dc:	05 2e       	mov	r0, r21
    65de:	97 fb       	bst	r25, 7
    65e0:	16 f4       	brtc	.+4      	; 0x65e6 <__divmodsi4+0xa>
    65e2:	00 94       	com	r0
    65e4:	0f d0       	rcall	.+30     	; 0x6604 <__negsi2>
    65e6:	57 fd       	sbrc	r21, 7
    65e8:	05 d0       	rcall	.+10     	; 0x65f4 <__divmodsi4_neg2>
    65ea:	d6 df       	rcall	.-84     	; 0x6598 <__udivmodsi4>
    65ec:	07 fc       	sbrc	r0, 7
    65ee:	02 d0       	rcall	.+4      	; 0x65f4 <__divmodsi4_neg2>
    65f0:	46 f4       	brtc	.+16     	; 0x6602 <__divmodsi4_exit>
    65f2:	08 c0       	rjmp	.+16     	; 0x6604 <__negsi2>

000065f4 <__divmodsi4_neg2>:
    65f4:	50 95       	com	r21
    65f6:	40 95       	com	r20
    65f8:	30 95       	com	r19
    65fa:	21 95       	neg	r18
    65fc:	3f 4f       	sbci	r19, 0xFF	; 255
    65fe:	4f 4f       	sbci	r20, 0xFF	; 255
    6600:	5f 4f       	sbci	r21, 0xFF	; 255

00006602 <__divmodsi4_exit>:
    6602:	08 95       	ret

00006604 <__negsi2>:
    6604:	90 95       	com	r25
    6606:	80 95       	com	r24
    6608:	70 95       	com	r23
    660a:	61 95       	neg	r22
    660c:	7f 4f       	sbci	r23, 0xFF	; 255
    660e:	8f 4f       	sbci	r24, 0xFF	; 255
    6610:	9f 4f       	sbci	r25, 0xFF	; 255
    6612:	08 95       	ret

00006614 <__tablejump2__>:
    6614:	ee 0f       	add	r30, r30
    6616:	ff 1f       	adc	r31, r31
    6618:	00 24       	eor	r0, r0
    661a:	00 1c       	adc	r0, r0
    661c:	0b be       	out	0x3b, r0	; 59
    661e:	07 90       	elpm	r0, Z+
    6620:	f6 91       	elpm	r31, Z
    6622:	e0 2d       	mov	r30, r0
    6624:	09 94       	ijmp

00006626 <__umulhisi3>:
    6626:	a2 9f       	mul	r26, r18
    6628:	b0 01       	movw	r22, r0
    662a:	b3 9f       	mul	r27, r19
    662c:	c0 01       	movw	r24, r0
    662e:	a3 9f       	mul	r26, r19
    6630:	70 0d       	add	r23, r0
    6632:	81 1d       	adc	r24, r1
    6634:	11 24       	eor	r1, r1
    6636:	91 1d       	adc	r25, r1
    6638:	b2 9f       	mul	r27, r18
    663a:	70 0d       	add	r23, r0
    663c:	81 1d       	adc	r24, r1
    663e:	11 24       	eor	r1, r1
    6640:	91 1d       	adc	r25, r1
    6642:	08 95       	ret

00006644 <__muluhisi3>:
    6644:	f0 df       	rcall	.-32     	; 0x6626 <__umulhisi3>
    6646:	a5 9f       	mul	r26, r21
    6648:	90 0d       	add	r25, r0
    664a:	b4 9f       	mul	r27, r20
    664c:	90 0d       	add	r25, r0
    664e:	a4 9f       	mul	r26, r20
    6650:	80 0d       	add	r24, r0
    6652:	91 1d       	adc	r25, r1
    6654:	11 24       	eor	r1, r1
    6656:	08 95       	ret

00006658 <__umulsidi3>:
    6658:	e8 94       	clt

0000665a <__umulsidi3_helper>:
    665a:	df 93       	push	r29
    665c:	cf 93       	push	r28
    665e:	fc 01       	movw	r30, r24
    6660:	db 01       	movw	r26, r22
    6662:	e1 df       	rcall	.-62     	; 0x6626 <__umulhisi3>
    6664:	7f 93       	push	r23
    6666:	6f 93       	push	r22
    6668:	e9 01       	movw	r28, r18
    666a:	9a 01       	movw	r18, r20
    666c:	ac 01       	movw	r20, r24
    666e:	bf 93       	push	r27
    6670:	af 93       	push	r26
    6672:	3f 93       	push	r19
    6674:	2f 93       	push	r18
    6676:	df 01       	movw	r26, r30
    6678:	d6 df       	rcall	.-84     	; 0x6626 <__umulhisi3>
    667a:	26 f4       	brtc	.+8      	; 0x6684 <__umulsidi3_helper+0x2a>
    667c:	6c 1b       	sub	r22, r28
    667e:	7d 0b       	sbc	r23, r29
    6680:	82 0b       	sbc	r24, r18
    6682:	93 0b       	sbc	r25, r19
    6684:	9e 01       	movw	r18, r28
    6686:	eb 01       	movw	r28, r22
    6688:	fc 01       	movw	r30, r24
    668a:	2b d0       	rcall	.+86     	; 0x66e2 <__muldi3_6>
    668c:	af 91       	pop	r26
    668e:	bf 91       	pop	r27
    6690:	2f 91       	pop	r18
    6692:	3f 91       	pop	r19
    6694:	26 d0       	rcall	.+76     	; 0x66e2 <__muldi3_6>
    6696:	be 01       	movw	r22, r28
    6698:	cf 01       	movw	r24, r30
    669a:	f9 01       	movw	r30, r18
    669c:	2f 91       	pop	r18
    669e:	3f 91       	pop	r19
    66a0:	cf 91       	pop	r28
    66a2:	df 91       	pop	r29
    66a4:	08 95       	ret

000066a6 <__ashrdi3>:
    66a6:	97 fb       	bst	r25, 7
    66a8:	10 f8       	bld	r1, 0

000066aa <__lshrdi3>:
    66aa:	16 94       	lsr	r1
    66ac:	00 08       	sbc	r0, r0
    66ae:	0f 93       	push	r16
    66b0:	08 30       	cpi	r16, 0x08	; 8
    66b2:	98 f0       	brcs	.+38     	; 0x66da <__lshrdi3+0x30>
    66b4:	08 50       	subi	r16, 0x08	; 8
    66b6:	23 2f       	mov	r18, r19
    66b8:	34 2f       	mov	r19, r20
    66ba:	45 2f       	mov	r20, r21
    66bc:	56 2f       	mov	r21, r22
    66be:	67 2f       	mov	r22, r23
    66c0:	78 2f       	mov	r23, r24
    66c2:	89 2f       	mov	r24, r25
    66c4:	90 2d       	mov	r25, r0
    66c6:	f4 cf       	rjmp	.-24     	; 0x66b0 <__lshrdi3+0x6>
    66c8:	05 94       	asr	r0
    66ca:	97 95       	ror	r25
    66cc:	87 95       	ror	r24
    66ce:	77 95       	ror	r23
    66d0:	67 95       	ror	r22
    66d2:	57 95       	ror	r21
    66d4:	47 95       	ror	r20
    66d6:	37 95       	ror	r19
    66d8:	27 95       	ror	r18
    66da:	0a 95       	dec	r16
    66dc:	aa f7       	brpl	.-22     	; 0x66c8 <__lshrdi3+0x1e>
    66de:	0f 91       	pop	r16
    66e0:	08 95       	ret

000066e2 <__muldi3_6>:
    66e2:	a1 df       	rcall	.-190    	; 0x6626 <__umulhisi3>
    66e4:	46 0f       	add	r20, r22
    66e6:	57 1f       	adc	r21, r23
    66e8:	c8 1f       	adc	r28, r24
    66ea:	d9 1f       	adc	r29, r25
    66ec:	08 f4       	brcc	.+2      	; 0x66f0 <__muldi3_6+0xe>
    66ee:	31 96       	adiw	r30, 0x01	; 1
    66f0:	08 95       	ret

000066f2 <_exit>:
    66f2:	f8 94       	cli

000066f4 <__stop_program>:
    66f4:	ff cf       	rjmp	.-2      	; 0x66f4 <__stop_program>
