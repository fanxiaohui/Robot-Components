
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000cd4  00000d68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000049  00800102  00800102  00000d6a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d6a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004b8  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004dfd  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001922  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002240  00000000  00000000  000079b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f8c  00000000  00000000  00009bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000019fc  00000000  00000000  0000ab80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002cff  00000000  00000000  0000c57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000f27b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	b1 c1       	rjmp	.+866    	; 0x368 <__vector_1>
   6:	00 00       	nop
   8:	b9 c1       	rjmp	.+882    	; 0x37c <__vector_2>
   a:	00 00       	nop
   c:	c1 c1       	rjmp	.+898    	; 0x390 <__vector_3>
   e:	00 00       	nop
  10:	83 c1       	rjmp	.+774    	; 0x318 <__vector_4>
  12:	00 00       	nop
  14:	8b c1       	rjmp	.+790    	; 0x32c <__vector_5>
  16:	00 00       	nop
  18:	93 c1       	rjmp	.+806    	; 0x340 <__vector_6>
  1a:	00 00       	nop
  1c:	9b c1       	rjmp	.+822    	; 0x354 <__vector_7>
  1e:	00 00       	nop
  20:	6e c5       	rjmp	.+2780   	; 0xafe <__vector_8>
  22:	00 00       	nop
  24:	b9 c3       	rjmp	.+1906   	; 0x798 <__vector_9>
  26:	00 00       	nop
  28:	f3 c3       	rjmp	.+2022   	; 0x810 <__vector_10>
  2a:	00 00       	nop
  2c:	8a c3       	rjmp	.+1812   	; 0x742 <__vector_11>
  2e:	00 00       	nop
  30:	2b c3       	rjmp	.+1622   	; 0x688 <__vector_12>
  32:	00 00       	nop
  34:	9e c2       	rjmp	.+1340   	; 0x572 <__vector_13>
  36:	00 00       	nop
  38:	fc c2       	rjmp	.+1528   	; 0x632 <__vector_14>
  3a:	00 00       	nop
  3c:	6f c2       	rjmp	.+1246   	; 0x51c <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	1e c2       	rjmp	.+1084   	; 0x48a <__vector_19>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 34       	cpi	r26, 0x4B	; 75
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	05 c6       	rjmp	.+3082   	; 0xcd0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:
		
	
	while(1)
	{

		surfaceSensor_isBlack();
  c8:	23 d1       	rcall	.+582    	; 0x310 <device_disableJTAG>
  ca:	44 d5       	rcall	.+2696   	; 0xb54 <debug_init>
		surfaceSensor_isWhite();
  cc:	13 d0       	rcall	.+38     	; 0xf4 <surfaceSensor_init>
  ce:	2a d0       	rcall	.+84     	; 0x124 <surfaceSensor_isBlack>
		/*surfaceSensor_read();*/
		surfaceSensor_stop();
  d0:	3f d0       	rcall	.+126    	; 0x150 <surfaceSensor_isWhite>
  d2:	54 d0       	rcall	.+168    	; 0x17c <surfaceSensor_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	80 e7       	ldi	r24, 0x70	; 112
  d8:	92 e0       	ldi	r25, 0x02	; 2
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x12>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x1c>
  e4:	00 00       	nop
  e6:	f3 cf       	rjmp	.-26     	; 0xce <main+0x6>

000000e8 <surfaceSensor_start>:


void surfaceSensor_read(){
/*Reads the sensor and stores it in variable "citire" */

	citire = surface_read(sensorOne);
  e8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <s_adc>
  ec:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <s_adc+0x1>
  f0:	fc c0       	rjmp	.+504    	; 0x2ea <adc_start>
  f2:	08 95       	ret

000000f4 <surfaceSensor_init>:
	return citire;
}
void surfaceSensor_init(){
	
	/*ADC initialization */
	s_adc.conversionMode = SINGLE_CONVERSION;
  f4:	ea e0       	ldi	r30, 0x0A	; 10
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	8f ef       	ldi	r24, 0xFF	; 255
  fa:	81 83       	std	Z+1, r24	; 0x01
	s_adc.prescaler = ADC_PRESCALER_128;
  fc:	87 e0       	ldi	r24, 0x07	; 7
  fe:	80 83       	st	Z, r24
	
	/*SensorOne initialization */
	sensorOne.led_pin.direction = OUTPUT;
 100:	ec e0       	ldi	r30, 0x0C	; 12
 102:	f1 e0       	ldi	r31, 0x01	; 1
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	85 83       	std	Z+5, r24	; 0x05
	sensorOne.led_pin.number = 5;
 108:	95 e0       	ldi	r25, 0x05	; 5
 10a:	94 83       	std	Z+4, r25	; 0x04
	sensorOne.led_pin.port = PA;
 10c:	13 82       	std	Z+3, r1	; 0x03
	sensorOne.led_pin.pullUp = NO_PULL;
 10e:	16 82       	std	Z+6, r1	; 0x06
	sensorOne.transistor_channel.channel = 1;
 110:	82 83       	std	Z+2, r24	; 0x02
	sensorOne.transistor_channel.referenceVoltage = AVCC;
 112:	81 83       	std	Z+1, r24	; 0x01
	sensorOne.transistor_channel.resolution = _8BIT_RES;
 114:	80 83       	st	Z, r24

	adc_init(s_adc);
 116:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <s_adc>
 11a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <s_adc+0x1>
	surfaceSensor_start();
 11e:	3a d0       	rcall	.+116    	; 0x194 <adc_init>
 120:	e3 cf       	rjmp	.-58     	; 0xe8 <surfaceSensor_start>
 122:	08 95       	ret

00000124 <surfaceSensor_isBlack>:
}


void surfaceSensor_isBlack(){
	
	citire = surface_read(sensorOne);
 124:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <sensorOne>
 128:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <sensorOne+0x1>
 12c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <sensorOne+0x2>
 130:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <sensorOne+0x3>
 134:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <sensorOne+0x4>
 138:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <sensorOne+0x5>
 13c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sensorOne+0x6>
 140:	61 d5       	rcall	.+2754   	; 0xc04 <surface_read>
 142:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
/* IF the value transformed from ADC is smaller than is BLACK */		
	if(citire < 65){
 146:	81 34       	cpi	r24, 0x41	; 65
		debug_writeChar('B');
 148:	10 f4       	brcc	.+4      	; 0x14e <surfaceSensor_isBlack+0x2a>
 14a:	82 e4       	ldi	r24, 0x42	; 66
 14c:	3b c5       	rjmp	.+2678   	; 0xbc4 <debug_writeChar>
 14e:	08 95       	ret

00000150 <surfaceSensor_isWhite>:
	    return FALSE;
}

void surfaceSensor_isWhite(){
	
	citire = surface_read(sensorOne);
 150:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <sensorOne>
 154:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <sensorOne+0x1>
 158:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <sensorOne+0x2>
 15c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <sensorOne+0x3>
 160:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <sensorOne+0x4>
 164:	70 91 11 01 	lds	r23, 0x0111	; 0x800111 <sensorOne+0x5>
 168:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <sensorOne+0x6>
 16c:	4b d5       	rcall	.+2710   	; 0xc04 <surface_read>
 16e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	
/* IF the value transformed from ADC is bigger than 230 than is WHITE */	
	if (citire > 230){
 172:	87 3e       	cpi	r24, 0xE7	; 231
		debug_writeChar('W');
 174:	10 f0       	brcs	.+4      	; 0x17a <surfaceSensor_isWhite+0x2a>
 176:	87 e5       	ldi	r24, 0x57	; 87
 178:	25 c5       	rjmp	.+2634   	; 0xbc4 <debug_writeChar>
 17a:	08 95       	ret

0000017c <surfaceSensor_stop>:
adc_config_struct_t s_adc;
surface_struct_t sensorOne;
surface_struct_t sensorTwo; 
u8 citire = 0;

void surfaceSensor_stop(){
 17c:	d3 df       	rcall	.-90     	; 0x124 <surfaceSensor_isBlack>
 17e:	89 2b       	or	r24, r25
 180:	41 f4       	brne	.+16     	; 0x192 <surfaceSensor_stop+0x16>
 182:	e6 df       	rcall	.-52     	; 0x150 <surfaceSensor_isWhite>
 184:	89 2b       	or	r24, r25
 186:	29 f4       	brne	.+10     	; 0x192 <surfaceSensor_stop+0x16>
 188:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <s_adc>
 18c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <s_adc+0x1>
 190:	ba c0       	rjmp	.+372    	; 0x306 <adc_stop>
 192:	08 95       	ret

00000194 <adc_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void adc_init(adc_config_struct_t s_adc)
{
 194:	1f 93       	push	r17
 196:	cf 93       	push	r28
 198:	df 93       	push	r29
 19a:	d8 2f       	mov	r29, r24
 19c:	c9 2f       	mov	r28, r25
			break;
		case default:
			break;
	}*/
	/* Set prescaler division factor */
	updateBit(&ADCSRA, ADPS2, (s_adc.prescaler >> 2) & 1);
 19e:	82 fb       	bst	r24, 2
 1a0:	44 27       	eor	r20, r20
 1a2:	40 f9       	bld	r20, 0
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	8a e7       	ldi	r24, 0x7A	; 122
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	18 d1       	rcall	.+560    	; 0x3dc <updateBit>
	updateBit(&ADCSRA, ADPS1, (s_adc.prescaler >> 1) & 1);
 1ac:	d1 fb       	bst	r29, 1
 1ae:	44 27       	eor	r20, r20
 1b0:	40 f9       	bld	r20, 0
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	8a e7       	ldi	r24, 0x7A	; 122
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	11 d1       	rcall	.+546    	; 0x3dc <updateBit>
	updateBit(&ADCSRA, ADPS0, s_adc.prescaler & 1);
 1ba:	4d 2f       	mov	r20, r29
 1bc:	41 70       	andi	r20, 0x01	; 1
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	8a e7       	ldi	r24, 0x7A	; 122
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0b d1       	rcall	.+534    	; 0x3dc <updateBit>
	/* Set the Trigger Source if Auto Trigger is enabled */
	if(s_adc.conversionMode == SINGLE_CONVERSION)
 1c6:	cf 3f       	cpi	r28, 0xFF	; 255
		clearBit(&ADCSRA, ADATE);
 1c8:	29 f4       	brne	.+10     	; 0x1d4 <adc_init+0x40>
 1ca:	65 e0       	ldi	r22, 0x05	; 5
 1cc:	8a e7       	ldi	r24, 0x7A	; 122
 1ce:	90 e0       	ldi	r25, 0x00	; 0
	else
	{
		setBit(&ADCSRA, ADATE);
 1d0:	29 d1       	rcall	.+594    	; 0x424 <clearBit>
 1d2:	18 c0       	rjmp	.+48     	; 0x204 <adc_init+0x70>
 1d4:	65 e0       	ldi	r22, 0x05	; 5
 1d6:	8a e7       	ldi	r24, 0x7A	; 122
 1d8:	90 e0       	ldi	r25, 0x00	; 0
		updateBit(&ADCSRB, ADTS2, (s_adc.conversionMode >> 2) & 1);
 1da:	18 d1       	rcall	.+560    	; 0x40c <setBit>
 1dc:	c2 fb       	bst	r28, 2
 1de:	44 27       	eor	r20, r20
 1e0:	40 f9       	bld	r20, 0
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	8b e7       	ldi	r24, 0x7B	; 123
		updateBit(&ADCSRB, ADTS1, (s_adc.conversionMode >> 1) & 1);
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	f9 d0       	rcall	.+498    	; 0x3dc <updateBit>
 1ea:	c1 fb       	bst	r28, 1
 1ec:	44 27       	eor	r20, r20
 1ee:	40 f9       	bld	r20, 0
 1f0:	61 e0       	ldi	r22, 0x01	; 1
		updateBit(&ADCSRB, ADTS0, s_adc.conversionMode & 1);
 1f2:	8b e7       	ldi	r24, 0x7B	; 123
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	f2 d0       	rcall	.+484    	; 0x3dc <updateBit>
 1f8:	4c 2f       	mov	r20, r28
 1fa:	41 70       	andi	r20, 0x01	; 1
 1fc:	60 e0       	ldi	r22, 0x00	; 0
 1fe:	8b e7       	ldi	r24, 0x7B	; 123
	}
}
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	ec d0       	rcall	.+472    	; 0x3dc <updateBit>
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	08 95       	ret

0000020c <adc_singleRead>:

u16 adc_singleRead(adc_config_struct_t s_adc_config, adc_channel_struct_t s_adc_channel)
{
 20c:	ff 92       	push	r15
 20e:	0f 93       	push	r16
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	f9 2e       	mov	r15, r25
 218:	d4 2f       	mov	r29, r20
 21a:	c5 2f       	mov	r28, r21
 21c:	14 2f       	mov	r17, r20
 21e:	05 2f       	mov	r16, r21
	u16 readValue = 0;
	u16 temp = 0;
	ADMUX = s_adc_channel.channel | (ADMUX & 0b11100000);
 220:	ec e7       	ldi	r30, 0x7C	; 124
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	80 7e       	andi	r24, 0xE0	; 224
 228:	68 2b       	or	r22, r24
 22a:	60 83       	st	Z, r22
	if(s_adc_channel.referenceVoltage != lastReferenceVoltage)
 22c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 230:	58 17       	cp	r21, r24
 232:	69 f0       	breq	.+26     	; 0x24e <adc_singleRead+0x42>
	{
		updateBit(&ADMUX, REFS1, (s_adc_channel.referenceVoltage >> 1) & 1);
 234:	51 fb       	bst	r21, 1
 236:	44 27       	eor	r20, r20
 238:	40 f9       	bld	r20, 0
 23a:	67 e0       	ldi	r22, 0x07	; 7
 23c:	8c e7       	ldi	r24, 0x7C	; 124
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	cd d0       	rcall	.+410    	; 0x3dc <updateBit>
		updateBit(&ADMUX, REFS0, s_adc_channel.referenceVoltage & 1);
 242:	4c 2f       	mov	r20, r28
 244:	41 70       	andi	r20, 0x01	; 1
 246:	66 e0       	ldi	r22, 0x06	; 6
 248:	8c e7       	ldi	r24, 0x7C	; 124
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	c7 d0       	rcall	.+398    	; 0x3dc <updateBit>
	}
	updateBit(&ADMUX, ADLAR, s_adc_channel.resolution);
 24e:	4d 2f       	mov	r20, r29
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	8c e7       	ldi	r24, 0x7C	; 124
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	c2 d0       	rcall	.+388    	; 0x3dc <updateBit>
	if(s_adc_config.conversionMode == SINGLE_CONVERSION)
 258:	8f ef       	ldi	r24, 0xFF	; 255
 25a:	f8 12       	cpse	r15, r24
	{
		setBit(&ADCSRA, ADSC);
 25c:	1d c0       	rjmp	.+58     	; 0x298 <adc_singleRead+0x8c>
 25e:	66 e0       	ldi	r22, 0x06	; 6
 260:	8a e7       	ldi	r24, 0x7A	; 122
 262:	90 e0       	ldi	r25, 0x00	; 0
		while(!(ADCSRA & (1<<ADIF)));
 264:	d3 d0       	rcall	.+422    	; 0x40c <setBit>
 266:	ea e7       	ldi	r30, 0x7A	; 122
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	84 ff       	sbrs	r24, 4
		if(s_adc_channel.referenceVoltage != lastReferenceVoltage)
 26e:	fd cf       	rjmp	.-6      	; 0x26a <adc_singleRead+0x5e>
 270:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
		{
			setBit(&ADCSRA, ADIF);
 274:	08 17       	cp	r16, r24
 276:	11 f1       	breq	.+68     	; 0x2bc <adc_singleRead+0xb0>
 278:	64 e0       	ldi	r22, 0x04	; 4
 27a:	8a e7       	ldi	r24, 0x7A	; 122
			setBit(&ADCSRA, ADSC);
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	c6 d0       	rcall	.+396    	; 0x40c <setBit>
 280:	66 e0       	ldi	r22, 0x06	; 6
 282:	8a e7       	ldi	r24, 0x7A	; 122
 284:	90 e0       	ldi	r25, 0x00	; 0
			while(!(ADCSRA & (1<<ADIF)));
 286:	c2 d0       	rcall	.+388    	; 0x40c <setBit>
 288:	ea e7       	ldi	r30, 0x7A	; 122
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
			lastReferenceVoltage = s_adc_channel.referenceVoltage;
 28e:	84 ff       	sbrs	r24, 4
 290:	fd cf       	rjmp	.-6      	; 0x28c <adc_singleRead+0x80>
		}
	}
	else
	{
		setBit(&ADCSRA, ADIF);
 292:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
 296:	12 c0       	rjmp	.+36     	; 0x2bc <adc_singleRead+0xb0>
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	8a e7       	ldi	r24, 0x7A	; 122
		while(!(ADCSRA & (1<<ADIF)));
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	b6 d0       	rcall	.+364    	; 0x40c <setBit>
 2a0:	ea e7       	ldi	r30, 0x7A	; 122
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
		setBit(&ADCSRA, ADIF);
 2a4:	80 81       	ld	r24, Z
 2a6:	84 ff       	sbrs	r24, 4
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <adc_singleRead+0x98>
 2aa:	64 e0       	ldi	r22, 0x04	; 4
 2ac:	8a e7       	ldi	r24, 0x7A	; 122
		while(!(ADCSRA & (1<<ADIF)));
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	ad d0       	rcall	.+346    	; 0x40c <setBit>
 2b2:	ea e7       	ldi	r30, 0x7A	; 122
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	80 81       	ld	r24, Z
	}
	switch(s_adc_channel.resolution)
 2b8:	84 ff       	sbrs	r24, 4
 2ba:	fd cf       	rjmp	.-6      	; 0x2b6 <adc_singleRead+0xaa>
 2bc:	11 23       	and	r17, r17
 2be:	31 f0       	breq	.+12     	; 0x2cc <adc_singleRead+0xc0>
	{
		case _8BIT_RES:
			readValue = ADCH;
 2c0:	11 30       	cpi	r17, 0x01	; 1
 2c2:	59 f4       	brne	.+22     	; 0x2da <adc_singleRead+0xce>
 2c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			break;
		case _10BIT_RES:
			readValue = ADCL;
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	09 c0       	rjmp	.+18     	; 0x2de <adc_singleRead+0xd2>
			temp = ADCH;
 2cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
			readValue |= (temp << 8);
 2d0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
			break;
 2d4:	90 e0       	ldi	r25, 0x00	; 0
	}
}

u16 adc_singleRead(adc_config_struct_t s_adc_config, adc_channel_struct_t s_adc_channel)
{
	u16 readValue = 0;
 2d6:	92 2b       	or	r25, r18
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <adc_singleRead+0xd2>
			temp = ADCH;
			readValue |= (temp << 8);
			break;
	}
	return readValue;
}
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	df 91       	pop	r29
 2e0:	cf 91       	pop	r28
 2e2:	1f 91       	pop	r17
 2e4:	0f 91       	pop	r16
 2e6:	ff 90       	pop	r15
 2e8:	08 95       	ret

000002ea <adc_start>:
		readValue |= 0x200;
	}
}*/

void adc_start(adc_config_struct_t s_adc_config)
{
 2ea:	cf 93       	push	r28
 2ec:	c9 2f       	mov	r28, r25
	setBit(&ADCSRA, ADEN);
 2ee:	67 e0       	ldi	r22, 0x07	; 7
 2f0:	8a e7       	ldi	r24, 0x7A	; 122
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	8b d0       	rcall	.+278    	; 0x40c <setBit>
	if (s_adc_config.conversionMode != SINGLE_CONVERSION)
 2f6:	cf 3f       	cpi	r28, 0xFF	; 255
 2f8:	21 f0       	breq	.+8      	; 0x302 <adc_start+0x18>
		setBit(&ADCSRA, ADSC);
 2fa:	66 e0       	ldi	r22, 0x06	; 6
 2fc:	8a e7       	ldi	r24, 0x7A	; 122
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	85 d0       	rcall	.+266    	; 0x40c <setBit>
}
 302:	cf 91       	pop	r28
 304:	08 95       	ret

00000306 <adc_stop>:

void adc_stop(adc_config_struct_t s_adc_config)
{
	clearBit(&ADCSRA, ADEN);
 306:	67 e0       	ldi	r22, 0x07	; 7
 308:	8a e7       	ldi	r24, 0x7A	; 122
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	8b c0       	rjmp	.+278    	; 0x424 <clearBit>
 30e:	08 95       	ret

00000310 <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
 310:	80 e8       	ldi	r24, 0x80	; 128
 312:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
 314:	85 bf       	out	0x35, r24	; 53
 316:	08 95       	ret

00000318 <__vector_4>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	0f 90       	pop	r0
 324:	0f be       	out	0x3f, r0	; 63
 326:	0f 90       	pop	r0
 328:	1f 90       	pop	r1
 32a:	18 95       	reti

0000032c <__vector_5>:
 32c:	1f 92       	push	r1
 32e:	0f 92       	push	r0
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	0f 92       	push	r0
 334:	11 24       	eor	r1, r1
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__vector_6>:
 340:	1f 92       	push	r1
 342:	0f 92       	push	r0
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	0f 92       	push	r0
 348:	11 24       	eor	r1, r1
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <__vector_7>:
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	0f 90       	pop	r0
 360:	0f be       	out	0x3f, r0	; 63
 362:	0f 90       	pop	r0
 364:	1f 90       	pop	r1
 366:	18 95       	reti

00000368 <__vector_1>:
 368:	1f 92       	push	r1
 36a:	0f 92       	push	r0
 36c:	0f b6       	in	r0, 0x3f	; 63
 36e:	0f 92       	push	r0
 370:	11 24       	eor	r1, r1
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <__vector_2>:
 37c:	1f 92       	push	r1
 37e:	0f 92       	push	r0
 380:	0f b6       	in	r0, 0x3f	; 63
 382:	0f 92       	push	r0
 384:	11 24       	eor	r1, r1
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <__vector_3>:
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
 39a:	0f 90       	pop	r0
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	0f 90       	pop	r0
 3a0:	1f 90       	pop	r1
 3a2:	18 95       	reti

000003a4 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
 3a4:	61 30       	cpi	r22, 0x01	; 1
 3a6:	59 f0       	breq	.+22     	; 0x3be <gpio_out_set+0x1a>
 3a8:	28 f0       	brcs	.+10     	; 0x3b4 <gpio_out_set+0x10>
 3aa:	62 30       	cpi	r22, 0x02	; 2
 3ac:	69 f0       	breq	.+26     	; 0x3c8 <gpio_out_set+0x24>
 3ae:	63 30       	cpi	r22, 0x03	; 3
 3b0:	81 f0       	breq	.+32     	; 0x3d2 <gpio_out_set+0x2e>
 3b2:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
 3b4:	67 2f       	mov	r22, r23
 3b6:	82 e2       	ldi	r24, 0x22	; 34
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	28 c0       	rjmp	.+80     	; 0x40c <setBit>
			break;
 3bc:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
 3be:	67 2f       	mov	r22, r23
 3c0:	85 e2       	ldi	r24, 0x25	; 37
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	23 c0       	rjmp	.+70     	; 0x40c <setBit>
			break;
 3c6:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
 3c8:	67 2f       	mov	r22, r23
 3ca:	88 e2       	ldi	r24, 0x28	; 40
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	1e c0       	rjmp	.+60     	; 0x40c <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
 3d0:	08 95       	ret
 3d2:	67 2f       	mov	r22, r23
 3d4:	8b e2       	ldi	r24, 0x2B	; 43
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	19 c0       	rjmp	.+50     	; 0x40c <setBit>
 3da:	08 95       	ret

000003dc <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
 3dc:	fc 01       	movw	r30, r24
 3de:	94 2f       	mov	r25, r20
 3e0:	20 81       	ld	r18, Z
 3e2:	41 e0       	ldi	r20, 0x01	; 1
 3e4:	50 e0       	ldi	r21, 0x00	; 0
 3e6:	06 2e       	mov	r0, r22
 3e8:	02 c0       	rjmp	.+4      	; 0x3ee <updateBit+0x12>
 3ea:	44 0f       	add	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	0a 94       	dec	r0
 3f0:	e2 f7       	brpl	.-8      	; 0x3ea <updateBit+0xe>
 3f2:	40 95       	com	r20
 3f4:	50 95       	com	r21
 3f6:	24 23       	and	r18, r20
 3f8:	49 2f       	mov	r20, r25
 3fa:	50 e0       	ldi	r21, 0x00	; 0
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	44 0f       	add	r20, r20
 400:	55 1f       	adc	r21, r21
 402:	6a 95       	dec	r22
 404:	e2 f7       	brpl	.-8      	; 0x3fe <updateBit+0x22>
 406:	42 2b       	or	r20, r18
 408:	40 83       	st	Z, r20
 40a:	08 95       	ret

0000040c <setBit>:
 40c:	fc 01       	movw	r30, r24
 40e:	40 81       	ld	r20, Z
 410:	21 e0       	ldi	r18, 0x01	; 1
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	02 c0       	rjmp	.+4      	; 0x41a <setBit+0xe>
 416:	22 0f       	add	r18, r18
 418:	33 1f       	adc	r19, r19
 41a:	6a 95       	dec	r22
 41c:	e2 f7       	brpl	.-8      	; 0x416 <setBit+0xa>
 41e:	24 2b       	or	r18, r20
 420:	20 83       	st	Z, r18
 422:	08 95       	ret

00000424 <clearBit>:
 424:	fc 01       	movw	r30, r24
 426:	90 81       	ld	r25, Z
 428:	21 e0       	ldi	r18, 0x01	; 1
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	02 c0       	rjmp	.+4      	; 0x432 <clearBit+0xe>
 42e:	22 0f       	add	r18, r18
 430:	33 1f       	adc	r19, r19
 432:	6a 95       	dec	r22
 434:	e2 f7       	brpl	.-8      	; 0x42e <clearBit+0xa>
 436:	20 95       	com	r18
 438:	29 23       	and	r18, r25
 43a:	20 83       	st	Z, r18
 43c:	08 95       	ret

0000043e <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 c0       	rjmp	.+4      	; 0x446 <checkBit+0x8>
 442:	95 95       	asr	r25
 444:	87 95       	ror	r24
 446:	6a 95       	dec	r22
 448:	e2 f7       	brpl	.-8      	; 0x442 <checkBit+0x4>
}
 44a:	81 70       	andi	r24, 0x01	; 1
 44c:	08 95       	ret

0000044e <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
 44e:	cf 92       	push	r12
 450:	df 92       	push	r13
 452:	ef 92       	push	r14
 454:	ff 92       	push	r15
 456:	69 01       	movw	r12, r18
 458:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
 45a:	9b 01       	movw	r18, r22
 45c:	ac 01       	movw	r20, r24
 45e:	2c 19       	sub	r18, r12
 460:	3d 09       	sbc	r19, r13
 462:	4e 09       	sbc	r20, r14
 464:	5f 09       	sbc	r21, r15
 466:	a8 ee       	ldi	r26, 0xE8	; 232
 468:	b3 e0       	ldi	r27, 0x03	; 3
 46a:	28 d4       	rcall	.+2128   	; 0xcbc <__muluhisi3>
 46c:	a7 01       	movw	r20, r14
 46e:	96 01       	movw	r18, r12
 470:	f4 d3       	rcall	.+2024   	; 0xc5a <__udivmodsi4>
 472:	c9 01       	movw	r24, r18
 474:	99 23       	and	r25, r25
 476:	24 f4       	brge	.+8      	; 0x480 <calculateError+0x32>
 478:	88 27       	eor	r24, r24
 47a:	99 27       	eor	r25, r25
 47c:	82 1b       	sub	r24, r18
 47e:	93 0b       	sbc	r25, r19
}
 480:	ff 90       	pop	r15
 482:	ef 90       	pop	r14
 484:	df 90       	pop	r13
 486:	cf 90       	pop	r12
 488:	08 95       	ret

0000048a <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	0b b6       	in	r0, 0x3b	; 59
 496:	0f 92       	push	r0
 498:	8f 93       	push	r24
 49a:	9f 93       	push	r25
 49c:	ef 93       	push	r30
 49e:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
 4a0:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <u8_RLastReceivedIndex>
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	8e b5       	in	r24, 0x2e	; 46
 4a8:	e7 5e       	subi	r30, 0xE7	; 231
 4aa:	fe 4f       	sbci	r31, 0xFE	; 254
 4ac:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
 4ae:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <u8_RLastReceivedIndex>
 4b2:	89 30       	cpi	r24, 0x09	; 9
 4b4:	30 f4       	brcc	.+12     	; 0x4c2 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
 4b6:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <u8_RLastReceivedIndex>
 4ba:	8f 5f       	subi	r24, 0xFF	; 255
 4bc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <u8_RLastReceivedIndex>
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
 4c2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
 4cc:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <u8_TLastTransmittedIndex>
 4d0:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <u8_TLastRequestedIndex>
 4d4:	98 17       	cp	r25, r24
 4d6:	a1 f0       	breq	.+40     	; 0x500 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
 4d8:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <u8_TLastTransmittedIndex>
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	ed 5d       	subi	r30, 0xDD	; 221
 4e0:	fe 4f       	sbci	r31, 0xFE	; 254
 4e2:	80 81       	ld	r24, Z
 4e4:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
 4e6:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u8_TLastTransmittedIndex>
 4ea:	89 30       	cpi	r24, 0x09	; 9
 4ec:	30 f4       	brcc	.+12     	; 0x4fa <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
 4ee:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u8_TLastTransmittedIndex>
 4f2:	8f 5f       	subi	r24, 0xFF	; 255
 4f4:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <u8_TLastTransmittedIndex>
 4f8:	06 c0       	rjmp	.+12     	; 0x506 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
 4fa:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <u8_TLastTransmittedIndex>
 4fe:	03 c0       	rjmp	.+6      	; 0x506 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <b_TAvailable>
	}
}
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	9f 91       	pop	r25
 50c:	8f 91       	pop	r24
 50e:	0f 90       	pop	r0
 510:	0b be       	out	0x3b, r0	; 59
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <__vector_15>:
}
#endif

#ifdef TIMER1_INTERRUPT_MODE
ISR(TIMER1_OVF_vect)
{
 51c:	1f 92       	push	r1
 51e:	0f 92       	push	r0
 520:	0f b6       	in	r0, 0x3f	; 63
 522:	0f 92       	push	r0
 524:	11 24       	eor	r1, r1
 526:	0b b6       	in	r0, 0x3b	; 59
 528:	0f 92       	push	r0
 52a:	2f 93       	push	r18
 52c:	3f 93       	push	r19
 52e:	4f 93       	push	r20
 530:	5f 93       	push	r21
 532:	6f 93       	push	r22
 534:	7f 93       	push	r23
 536:	8f 93       	push	r24
 538:	9f 93       	push	r25
 53a:	af 93       	push	r26
 53c:	bf 93       	push	r27
 53e:	ef 93       	push	r30
 540:	ff 93       	push	r31
	p_timer1Callbacks[OVERFLOW]();
 542:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <p_timer1Callbacks>
 546:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <p_timer1Callbacks+0x1>
 54a:	09 95       	icall
}
 54c:	ff 91       	pop	r31
 54e:	ef 91       	pop	r30
 550:	bf 91       	pop	r27
 552:	af 91       	pop	r26
 554:	9f 91       	pop	r25
 556:	8f 91       	pop	r24
 558:	7f 91       	pop	r23
 55a:	6f 91       	pop	r22
 55c:	5f 91       	pop	r21
 55e:	4f 91       	pop	r20
 560:	3f 91       	pop	r19
 562:	2f 91       	pop	r18
 564:	0f 90       	pop	r0
 566:	0b be       	out	0x3b, r0	; 59
 568:	0f 90       	pop	r0
 56a:	0f be       	out	0x3f, r0	; 63
 56c:	0f 90       	pop	r0
 56e:	1f 90       	pop	r1
 570:	18 95       	reti

00000572 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	0b b6       	in	r0, 0x3b	; 59
 57e:	0f 92       	push	r0
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	2f 93       	push	r18
 586:	3f 93       	push	r19
 588:	4f 93       	push	r20
 58a:	5f 93       	push	r21
 58c:	6f 93       	push	r22
 58e:	7f 93       	push	r23
 590:	8f 93       	push	r24
 592:	9f 93       	push	r25
 594:	af 93       	push	r26
 596:	bf 93       	push	r27
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
 5a0:	c1 e8       	ldi	r28, 0x81	; 129
 5a2:	d0 e0       	ldi	r29, 0x00	; 0
 5a4:	88 81       	ld	r24, Y
 5a6:	64 e0       	ldi	r22, 0x04	; 4
 5a8:	4a df       	rcall	.-364    	; 0x43e <checkBit>
 5aa:	18 2f       	mov	r17, r24
 5ac:	88 81       	ld	r24, Y
 5ae:	63 e0       	ldi	r22, 0x03	; 3
 5b0:	46 df       	rcall	.-372    	; 0x43e <checkBit>
 5b2:	c1 2f       	mov	r28, r17
 5b4:	cc 0f       	add	r28, r28
 5b6:	cc 0f       	add	r28, r28
 5b8:	cc 0f       	add	r28, r28
 5ba:	24 e0       	ldi	r18, 0x04	; 4
 5bc:	82 9f       	mul	r24, r18
 5be:	c0 01       	movw	r24, r0
 5c0:	11 24       	eor	r1, r1
 5c2:	c8 2b       	or	r28, r24
 5c4:	00 e8       	ldi	r16, 0x80	; 128
 5c6:	10 e0       	ldi	r17, 0x00	; 0
 5c8:	f8 01       	movw	r30, r16
 5ca:	80 81       	ld	r24, Z
 5cc:	61 e0       	ldi	r22, 0x01	; 1
 5ce:	37 df       	rcall	.-402    	; 0x43e <checkBit>
 5d0:	d8 2f       	mov	r29, r24
 5d2:	f8 01       	movw	r30, r16
 5d4:	80 81       	ld	r24, Z
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	32 df       	rcall	.-412    	; 0x43e <checkBit>
 5da:	dd 0f       	add	r29, r29
 5dc:	8c 2b       	or	r24, r28
 5de:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
 5e0:	88 30       	cpi	r24, 0x08	; 8
 5e2:	18 f4       	brcc	.+6      	; 0x5ea <__vector_13+0x78>
 5e4:	84 30       	cpi	r24, 0x04	; 4
 5e6:	19 f4       	brne	.+6      	; 0x5ee <__vector_13+0x7c>
 5e8:	08 c0       	rjmp	.+16     	; 0x5fa <__vector_13+0x88>
 5ea:	80 fd       	sbrc	r24, 0
 5ec:	06 c0       	rjmp	.+12     	; 0x5fa <__vector_13+0x88>
		p_timer1Callbacks[COMPARE_MATCH_A]();
 5ee:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <p_timer1Callbacks+0x2>
 5f2:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <p_timer1Callbacks+0x3>
 5f6:	09 95       	icall
 5f8:	05 c0       	rjmp	.+10     	; 0x604 <__vector_13+0x92>
	else
		p_timer1Callbacks[OVERFLOW]();
 5fa:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <p_timer1Callbacks>
 5fe:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <p_timer1Callbacks+0x1>
 602:	09 95       	icall
}
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	df 91       	pop	r29
 60a:	cf 91       	pop	r28
 60c:	bf 91       	pop	r27
 60e:	af 91       	pop	r26
 610:	9f 91       	pop	r25
 612:	8f 91       	pop	r24
 614:	7f 91       	pop	r23
 616:	6f 91       	pop	r22
 618:	5f 91       	pop	r21
 61a:	4f 91       	pop	r20
 61c:	3f 91       	pop	r19
 61e:	2f 91       	pop	r18
 620:	1f 91       	pop	r17
 622:	0f 91       	pop	r16
 624:	0f 90       	pop	r0
 626:	0b be       	out	0x3b, r0	; 59
 628:	0f 90       	pop	r0
 62a:	0f be       	out	0x3f, r0	; 63
 62c:	0f 90       	pop	r0
 62e:	1f 90       	pop	r1
 630:	18 95       	reti

00000632 <__vector_14>:

ISR(TIMER1_COMPB_vect)
{
 632:	1f 92       	push	r1
 634:	0f 92       	push	r0
 636:	0f b6       	in	r0, 0x3f	; 63
 638:	0f 92       	push	r0
 63a:	11 24       	eor	r1, r1
 63c:	0b b6       	in	r0, 0x3b	; 59
 63e:	0f 92       	push	r0
 640:	2f 93       	push	r18
 642:	3f 93       	push	r19
 644:	4f 93       	push	r20
 646:	5f 93       	push	r21
 648:	6f 93       	push	r22
 64a:	7f 93       	push	r23
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
 654:	ef 93       	push	r30
 656:	ff 93       	push	r31
	p_timer1Callbacks[COMPARE_MATCH_B]();
 658:	e0 91 33 01 	lds	r30, 0x0133	; 0x800133 <p_timer1Callbacks+0x4>
 65c:	f0 91 34 01 	lds	r31, 0x0134	; 0x800134 <p_timer1Callbacks+0x5>
 660:	09 95       	icall
}
 662:	ff 91       	pop	r31
 664:	ef 91       	pop	r30
 666:	bf 91       	pop	r27
 668:	af 91       	pop	r26
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	7f 91       	pop	r23
 670:	6f 91       	pop	r22
 672:	5f 91       	pop	r21
 674:	4f 91       	pop	r20
 676:	3f 91       	pop	r19
 678:	2f 91       	pop	r18
 67a:	0f 90       	pop	r0
 67c:	0b be       	out	0x3b, r0	; 59
 67e:	0f 90       	pop	r0
 680:	0f be       	out	0x3f, r0	; 63
 682:	0f 90       	pop	r0
 684:	1f 90       	pop	r1
 686:	18 95       	reti

00000688 <__vector_12>:

ISR(TIMER1_CAPT_vect)
{
 688:	1f 92       	push	r1
 68a:	0f 92       	push	r0
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	0f 92       	push	r0
 690:	11 24       	eor	r1, r1
 692:	0b b6       	in	r0, 0x3b	; 59
 694:	0f 92       	push	r0
 696:	0f 93       	push	r16
 698:	1f 93       	push	r17
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	cf 93       	push	r28
 6b0:	df 93       	push	r29
 6b2:	ef 93       	push	r30
 6b4:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
 6b6:	c1 e8       	ldi	r28, 0x81	; 129
 6b8:	d0 e0       	ldi	r29, 0x00	; 0
 6ba:	88 81       	ld	r24, Y
 6bc:	64 e0       	ldi	r22, 0x04	; 4
 6be:	bf de       	rcall	.-642    	; 0x43e <checkBit>
 6c0:	18 2f       	mov	r17, r24
 6c2:	88 81       	ld	r24, Y
 6c4:	63 e0       	ldi	r22, 0x03	; 3
 6c6:	bb de       	rcall	.-650    	; 0x43e <checkBit>
 6c8:	c1 2f       	mov	r28, r17
 6ca:	cc 0f       	add	r28, r28
 6cc:	cc 0f       	add	r28, r28
 6ce:	cc 0f       	add	r28, r28
 6d0:	24 e0       	ldi	r18, 0x04	; 4
 6d2:	82 9f       	mul	r24, r18
 6d4:	c0 01       	movw	r24, r0
 6d6:	11 24       	eor	r1, r1
 6d8:	c8 2b       	or	r28, r24
 6da:	00 e8       	ldi	r16, 0x80	; 128
 6dc:	10 e0       	ldi	r17, 0x00	; 0
 6de:	f8 01       	movw	r30, r16
 6e0:	80 81       	ld	r24, Z
 6e2:	61 e0       	ldi	r22, 0x01	; 1
 6e4:	ac de       	rcall	.-680    	; 0x43e <checkBit>
 6e6:	d8 2f       	mov	r29, r24
 6e8:	f8 01       	movw	r30, r16
 6ea:	80 81       	ld	r24, Z
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	a7 de       	rcall	.-690    	; 0x43e <checkBit>
 6f0:	dd 0f       	add	r29, r29
 6f2:	8c 2b       	or	r24, r28
 6f4:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
 6f6:	88 30       	cpi	r24, 0x08	; 8
 6f8:	10 f0       	brcs	.+4      	; 0x6fe <__vector_12+0x76>
 6fa:	80 ff       	sbrs	r24, 0
 6fc:	06 c0       	rjmp	.+12     	; 0x70a <__vector_12+0x82>
		p_timer1Callbacks[EXTERNAL]();
 6fe:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <p_timer1Callbacks+0x6>
 702:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <p_timer1Callbacks+0x7>
 706:	09 95       	icall
 708:	05 c0       	rjmp	.+10     	; 0x714 <__vector_12+0x8c>
	else
		p_timer1Callbacks[OVERFLOW]();
 70a:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <p_timer1Callbacks>
 70e:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <p_timer1Callbacks+0x1>
 712:	09 95       	icall
}
 714:	ff 91       	pop	r31
 716:	ef 91       	pop	r30
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	bf 91       	pop	r27
 71e:	af 91       	pop	r26
 720:	9f 91       	pop	r25
 722:	8f 91       	pop	r24
 724:	7f 91       	pop	r23
 726:	6f 91       	pop	r22
 728:	5f 91       	pop	r21
 72a:	4f 91       	pop	r20
 72c:	3f 91       	pop	r19
 72e:	2f 91       	pop	r18
 730:	1f 91       	pop	r17
 732:	0f 91       	pop	r16
 734:	0f 90       	pop	r0
 736:	0b be       	out	0x3b, r0	; 59
 738:	0f 90       	pop	r0
 73a:	0f be       	out	0x3f, r0	; 63
 73c:	0f 90       	pop	r0
 73e:	1f 90       	pop	r1
 740:	18 95       	reti

00000742 <__vector_11>:
#endif

#ifdef TIMER2_INTERRUPT_MODE
ISR(TIMER2_OVF_vect)
{
 742:	1f 92       	push	r1
 744:	0f 92       	push	r0
 746:	0f b6       	in	r0, 0x3f	; 63
 748:	0f 92       	push	r0
 74a:	11 24       	eor	r1, r1
 74c:	0b b6       	in	r0, 0x3b	; 59
 74e:	0f 92       	push	r0
 750:	2f 93       	push	r18
 752:	3f 93       	push	r19
 754:	4f 93       	push	r20
 756:	5f 93       	push	r21
 758:	6f 93       	push	r22
 75a:	7f 93       	push	r23
 75c:	8f 93       	push	r24
 75e:	9f 93       	push	r25
 760:	af 93       	push	r26
 762:	bf 93       	push	r27
 764:	ef 93       	push	r30
 766:	ff 93       	push	r31
	p_timer2Callbacks[OVERFLOW]();
 768:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <p_timer2Callbacks>
 76c:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <p_timer2Callbacks+0x1>
 770:	09 95       	icall
}
 772:	ff 91       	pop	r31
 774:	ef 91       	pop	r30
 776:	bf 91       	pop	r27
 778:	af 91       	pop	r26
 77a:	9f 91       	pop	r25
 77c:	8f 91       	pop	r24
 77e:	7f 91       	pop	r23
 780:	6f 91       	pop	r22
 782:	5f 91       	pop	r21
 784:	4f 91       	pop	r20
 786:	3f 91       	pop	r19
 788:	2f 91       	pop	r18
 78a:	0f 90       	pop	r0
 78c:	0b be       	out	0x3b, r0	; 59
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
 798:	1f 92       	push	r1
 79a:	0f 92       	push	r0
 79c:	0f b6       	in	r0, 0x3f	; 63
 79e:	0f 92       	push	r0
 7a0:	11 24       	eor	r1, r1
 7a2:	0b b6       	in	r0, 0x3b	; 59
 7a4:	0f 92       	push	r0
 7a6:	2f 93       	push	r18
 7a8:	3f 93       	push	r19
 7aa:	4f 93       	push	r20
 7ac:	5f 93       	push	r21
 7ae:	6f 93       	push	r22
 7b0:	7f 93       	push	r23
 7b2:	8f 93       	push	r24
 7b4:	9f 93       	push	r25
 7b6:	af 93       	push	r26
 7b8:	bf 93       	push	r27
 7ba:	ef 93       	push	r30
 7bc:	ff 93       	push	r31
	if ((checkBit(TCCR2B, WGM22) == CLEAR) && ((TCCR2A & 0b11) != 0b10))
 7be:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 7c2:	63 e0       	ldi	r22, 0x03	; 3
 7c4:	3c de       	rcall	.-904    	; 0x43e <checkBit>
 7c6:	81 11       	cpse	r24, r1
 7c8:	0b c0       	rjmp	.+22     	; 0x7e0 <__vector_9+0x48>
 7ca:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 7ce:	83 70       	andi	r24, 0x03	; 3
 7d0:	82 30       	cpi	r24, 0x02	; 2
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <__vector_9+0x48>
		p_timer2Callbacks[COMPARE_MATCH_A]();
 7d4:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <p_timer2Callbacks+0x2>
 7d8:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <p_timer2Callbacks+0x3>
 7dc:	09 95       	icall
 7de:	05 c0       	rjmp	.+10     	; 0x7ea <__vector_9+0x52>
	else
		p_timer2Callbacks[OVERFLOW]();
 7e0:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <p_timer2Callbacks>
 7e4:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <p_timer2Callbacks+0x1>
 7e8:	09 95       	icall
}
 7ea:	ff 91       	pop	r31
 7ec:	ef 91       	pop	r30
 7ee:	bf 91       	pop	r27
 7f0:	af 91       	pop	r26
 7f2:	9f 91       	pop	r25
 7f4:	8f 91       	pop	r24
 7f6:	7f 91       	pop	r23
 7f8:	6f 91       	pop	r22
 7fa:	5f 91       	pop	r21
 7fc:	4f 91       	pop	r20
 7fe:	3f 91       	pop	r19
 800:	2f 91       	pop	r18
 802:	0f 90       	pop	r0
 804:	0b be       	out	0x3b, r0	; 59
 806:	0f 90       	pop	r0
 808:	0f be       	out	0x3f, r0	; 63
 80a:	0f 90       	pop	r0
 80c:	1f 90       	pop	r1
 80e:	18 95       	reti

00000810 <__vector_10>:

ISR(TIMER2_COMPB_vect)
{
 810:	1f 92       	push	r1
 812:	0f 92       	push	r0
 814:	0f b6       	in	r0, 0x3f	; 63
 816:	0f 92       	push	r0
 818:	11 24       	eor	r1, r1
 81a:	0b b6       	in	r0, 0x3b	; 59
 81c:	0f 92       	push	r0
 81e:	2f 93       	push	r18
 820:	3f 93       	push	r19
 822:	4f 93       	push	r20
 824:	5f 93       	push	r21
 826:	6f 93       	push	r22
 828:	7f 93       	push	r23
 82a:	8f 93       	push	r24
 82c:	9f 93       	push	r25
 82e:	af 93       	push	r26
 830:	bf 93       	push	r27
 832:	ef 93       	push	r30
 834:	ff 93       	push	r31
	p_timer2Callbacks[COMPARE_MATCH_B]();
 836:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <p_timer2Callbacks+0x4>
 83a:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <p_timer2Callbacks+0x5>
 83e:	09 95       	icall
}
 840:	ff 91       	pop	r31
 842:	ef 91       	pop	r30
 844:	bf 91       	pop	r27
 846:	af 91       	pop	r26
 848:	9f 91       	pop	r25
 84a:	8f 91       	pop	r24
 84c:	7f 91       	pop	r23
 84e:	6f 91       	pop	r22
 850:	5f 91       	pop	r21
 852:	4f 91       	pop	r20
 854:	3f 91       	pop	r19
 856:	2f 91       	pop	r18
 858:	0f 90       	pop	r0
 85a:	0b be       	out	0x3b, r0	; 59
 85c:	0f 90       	pop	r0
 85e:	0f be       	out	0x3f, r0	; 63
 860:	0f 90       	pop	r0
 862:	1f 90       	pop	r1
 864:	18 95       	reti

00000866 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
 866:	4f 92       	push	r4
 868:	5f 92       	push	r5
 86a:	6f 92       	push	r6
 86c:	7f 92       	push	r7
 86e:	8f 92       	push	r8
 870:	9f 92       	push	r9
 872:	af 92       	push	r10
 874:	bf 92       	push	r11
 876:	cf 92       	push	r12
 878:	df 92       	push	r13
 87a:	ef 92       	push	r14
 87c:	ff 92       	push	r15
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	4b 01       	movw	r8, r22
 884:	5c 01       	movw	r10, r24
 886:	ea 01       	movw	r28, r20
 888:	0f 2e       	mov	r0, r31
 88a:	f0 e2       	ldi	r31, 0x20	; 32
 88c:	4f 2e       	mov	r4, r31
 88e:	f1 ea       	ldi	r31, 0xA1	; 161
 890:	5f 2e       	mov	r5, r31
 892:	f7 e0       	ldi	r31, 0x07	; 7
 894:	6f 2e       	mov	r6, r31
 896:	71 2c       	mov	r7, r1
 898:	f0 2d       	mov	r31, r0
 89a:	c3 01       	movw	r24, r6
 89c:	b2 01       	movw	r22, r4
 89e:	a5 01       	movw	r20, r10
 8a0:	94 01       	movw	r18, r8
 8a2:	db d1       	rcall	.+950    	; 0xc5a <__udivmodsi4>
 8a4:	69 01       	movw	r12, r18
 8a6:	7a 01       	movw	r14, r20
 8a8:	c3 01       	movw	r24, r6
 8aa:	b2 01       	movw	r22, r4
 8ac:	d6 d1       	rcall	.+940    	; 0xc5a <__udivmodsi4>
 8ae:	ca 01       	movw	r24, r20
 8b0:	b9 01       	movw	r22, r18
 8b2:	a5 01       	movw	r20, r10
 8b4:	94 01       	movw	r18, r8
 8b6:	cb dd       	rcall	.-1130   	; 0x44e <calculateError>
 8b8:	44 97       	sbiw	r24, 0x14	; 20
 8ba:	30 f4       	brcc	.+12     	; 0x8c8 <calculateUBRR+0x62>
 8bc:	d7 01       	movw	r26, r14
 8be:	c6 01       	movw	r24, r12
 8c0:	01 97       	sbiw	r24, 0x01	; 1
 8c2:	a1 09       	sbc	r26, r1
 8c4:	b1 09       	sbc	r27, r1
 8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <calculateUBRR+0x7e>
 8c8:	81 e0       	ldi	r24, 0x01	; 1
 8ca:	88 83       	st	Y, r24
 8cc:	60 e4       	ldi	r22, 0x40	; 64
 8ce:	72 e4       	ldi	r23, 0x42	; 66
 8d0:	8f e0       	ldi	r24, 0x0F	; 15
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	a5 01       	movw	r20, r10
 8d6:	94 01       	movw	r18, r8
 8d8:	c0 d1       	rcall	.+896    	; 0xc5a <__udivmodsi4>
 8da:	da 01       	movw	r26, r20
 8dc:	c9 01       	movw	r24, r18
 8de:	01 97       	sbiw	r24, 0x01	; 1
 8e0:	a1 09       	sbc	r26, r1
 8e2:	b1 09       	sbc	r27, r1
 8e4:	df 91       	pop	r29
 8e6:	cf 91       	pop	r28
 8e8:	ff 90       	pop	r15
 8ea:	ef 90       	pop	r14
 8ec:	df 90       	pop	r13
 8ee:	cf 90       	pop	r12
 8f0:	bf 90       	pop	r11
 8f2:	af 90       	pop	r10
 8f4:	9f 90       	pop	r9
 8f6:	8f 90       	pop	r8
 8f8:	7f 90       	pop	r7
 8fa:	6f 90       	pop	r6
 8fc:	5f 90       	pop	r5
 8fe:	4f 90       	pop	r4
 900:	08 95       	ret

00000902 <uart_init>:
 902:	0f 93       	push	r16
 904:	1f 93       	push	r17
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	2b 97       	sbiw	r28, 0x0b	; 11
 910:	0f b6       	in	r0, 0x3f	; 63
 912:	f8 94       	cli
 914:	de bf       	out	0x3e, r29	; 62
 916:	0f be       	out	0x3f, r0	; 63
 918:	cd bf       	out	0x3d, r28	; 61
 91a:	0a 83       	std	Y+2, r16	; 0x02
 91c:	1b 83       	std	Y+3, r17	; 0x03
 91e:	2c 83       	std	Y+4, r18	; 0x04
 920:	3d 83       	std	Y+5, r19	; 0x05
 922:	4e 83       	std	Y+6, r20	; 0x06
 924:	5f 83       	std	Y+7, r21	; 0x07
 926:	68 87       	std	Y+8, r22	; 0x08
 928:	79 87       	std	Y+9, r23	; 0x09
 92a:	8a 87       	std	Y+10, r24	; 0x0a
 92c:	9b 87       	std	Y+11, r25	; 0x0b
 92e:	19 82       	std	Y+1, r1	; 0x01
 930:	01 11       	cpse	r16, r1
 932:	7c c0       	rjmp	.+248    	; 0xa2c <uart_init+0x12a>
 934:	19 2f       	mov	r17, r25
 936:	e2 ec       	ldi	r30, 0xC2	; 194
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	8f 73       	andi	r24, 0x3F	; 63
 93e:	80 83       	st	Z, r24
 940:	6b 81       	ldd	r22, Y+3	; 0x03
 942:	7c 81       	ldd	r23, Y+4	; 0x04
 944:	8d 81       	ldd	r24, Y+5	; 0x05
 946:	9e 81       	ldd	r25, Y+6	; 0x06
 948:	ae 01       	movw	r20, r28
 94a:	4f 5f       	subi	r20, 0xFF	; 255
 94c:	5f 4f       	sbci	r21, 0xFF	; 255
 94e:	8b df       	rcall	.-234    	; 0x866 <calculateUBRR>
 950:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 954:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 958:	49 81       	ldd	r20, Y+1	; 0x01
 95a:	61 e0       	ldi	r22, 0x01	; 1
 95c:	80 ec       	ldi	r24, 0xC0	; 192
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	3d dd       	rcall	.-1414   	; 0x3dc <updateBit>
 962:	89 85       	ldd	r24, Y+9	; 0x09
 964:	82 30       	cpi	r24, 0x02	; 2
 966:	31 f1       	breq	.+76     	; 0x9b4 <uart_init+0xb2>
 968:	28 f4       	brcc	.+10     	; 0x974 <uart_init+0x72>
 96a:	88 23       	and	r24, r24
 96c:	49 f0       	breq	.+18     	; 0x980 <uart_init+0x7e>
 96e:	81 30       	cpi	r24, 0x01	; 1
 970:	a1 f0       	breq	.+40     	; 0x99a <uart_init+0x98>
 972:	46 c0       	rjmp	.+140    	; 0xa00 <uart_init+0xfe>
 974:	83 30       	cpi	r24, 0x03	; 3
 976:	59 f1       	breq	.+86     	; 0x9ce <uart_init+0xcc>
 978:	84 30       	cpi	r24, 0x04	; 4
 97a:	09 f4       	brne	.+2      	; 0x97e <uart_init+0x7c>
 97c:	35 c0       	rjmp	.+106    	; 0x9e8 <uart_init+0xe6>
 97e:	40 c0       	rjmp	.+128    	; 0xa00 <uart_init+0xfe>
 980:	61 e0       	ldi	r22, 0x01	; 1
 982:	82 ec       	ldi	r24, 0xC2	; 194
 984:	90 e0       	ldi	r25, 0x00	; 0
 986:	4e dd       	rcall	.-1380   	; 0x424 <clearBit>
 988:	62 e0       	ldi	r22, 0x02	; 2
 98a:	82 ec       	ldi	r24, 0xC2	; 194
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	4a dd       	rcall	.-1388   	; 0x424 <clearBit>
 990:	62 e0       	ldi	r22, 0x02	; 2
 992:	81 ec       	ldi	r24, 0xC1	; 193
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	46 dd       	rcall	.-1396   	; 0x424 <clearBit>
 998:	33 c0       	rjmp	.+102    	; 0xa00 <uart_init+0xfe>
 99a:	61 e0       	ldi	r22, 0x01	; 1
 99c:	82 ec       	ldi	r24, 0xC2	; 194
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	35 dd       	rcall	.-1430   	; 0x40c <setBit>
 9a2:	62 e0       	ldi	r22, 0x02	; 2
 9a4:	82 ec       	ldi	r24, 0xC2	; 194
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	3d dd       	rcall	.-1414   	; 0x424 <clearBit>
 9aa:	62 e0       	ldi	r22, 0x02	; 2
 9ac:	81 ec       	ldi	r24, 0xC1	; 193
 9ae:	90 e0       	ldi	r25, 0x00	; 0
 9b0:	39 dd       	rcall	.-1422   	; 0x424 <clearBit>
 9b2:	26 c0       	rjmp	.+76     	; 0xa00 <uart_init+0xfe>
 9b4:	61 e0       	ldi	r22, 0x01	; 1
 9b6:	82 ec       	ldi	r24, 0xC2	; 194
 9b8:	90 e0       	ldi	r25, 0x00	; 0
 9ba:	34 dd       	rcall	.-1432   	; 0x424 <clearBit>
 9bc:	62 e0       	ldi	r22, 0x02	; 2
 9be:	82 ec       	ldi	r24, 0xC2	; 194
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	24 dd       	rcall	.-1464   	; 0x40c <setBit>
 9c4:	62 e0       	ldi	r22, 0x02	; 2
 9c6:	81 ec       	ldi	r24, 0xC1	; 193
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	2c dd       	rcall	.-1448   	; 0x424 <clearBit>
 9cc:	19 c0       	rjmp	.+50     	; 0xa00 <uart_init+0xfe>
 9ce:	61 e0       	ldi	r22, 0x01	; 1
 9d0:	82 ec       	ldi	r24, 0xC2	; 194
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	1b dd       	rcall	.-1482   	; 0x40c <setBit>
 9d6:	62 e0       	ldi	r22, 0x02	; 2
 9d8:	82 ec       	ldi	r24, 0xC2	; 194
 9da:	90 e0       	ldi	r25, 0x00	; 0
 9dc:	17 dd       	rcall	.-1490   	; 0x40c <setBit>
 9de:	62 e0       	ldi	r22, 0x02	; 2
 9e0:	81 ec       	ldi	r24, 0xC1	; 193
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	1f dd       	rcall	.-1474   	; 0x424 <clearBit>
 9e6:	0c c0       	rjmp	.+24     	; 0xa00 <uart_init+0xfe>
 9e8:	61 e0       	ldi	r22, 0x01	; 1
 9ea:	82 ec       	ldi	r24, 0xC2	; 194
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e dd       	rcall	.-1508   	; 0x40c <setBit>
 9f0:	62 e0       	ldi	r22, 0x02	; 2
 9f2:	82 ec       	ldi	r24, 0xC2	; 194
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0a dd       	rcall	.-1516   	; 0x40c <setBit>
 9f8:	62 e0       	ldi	r22, 0x02	; 2
 9fa:	81 ec       	ldi	r24, 0xC1	; 193
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	06 dd       	rcall	.-1524   	; 0x40c <setBit>
 a00:	4a 85       	ldd	r20, Y+10	; 0x0a
 a02:	63 e0       	ldi	r22, 0x03	; 3
 a04:	82 ec       	ldi	r24, 0xC2	; 194
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	e9 dc       	rcall	.-1582   	; 0x3dc <updateBit>
 a0a:	12 30       	cpi	r17, 0x02	; 2
 a0c:	31 f4       	brne	.+12     	; 0xa1a <uart_init+0x118>
 a0e:	e2 ec       	ldi	r30, 0xC2	; 194
 a10:	f0 e0       	ldi	r31, 0x00	; 0
 a12:	80 81       	ld	r24, Z
 a14:	8f 7c       	andi	r24, 0xCF	; 207
 a16:	80 83       	st	Z, r24
 a18:	09 c0       	rjmp	.+18     	; 0xa2c <uart_init+0x12a>
 a1a:	65 e0       	ldi	r22, 0x05	; 5
 a1c:	82 ec       	ldi	r24, 0xC2	; 194
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	f5 dc       	rcall	.-1558   	; 0x40c <setBit>
 a22:	41 2f       	mov	r20, r17
 a24:	64 e0       	ldi	r22, 0x04	; 4
 a26:	82 ec       	ldi	r24, 0xC2	; 194
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	d8 dc       	rcall	.-1616   	; 0x3dc <updateBit>
 a2c:	2b 96       	adiw	r28, 0x0b	; 11
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	df 91       	pop	r29
 a3a:	cf 91       	pop	r28
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	08 95       	ret

00000a42 <uart_start>:
 a42:	0f 93       	push	r16
 a44:	1f 93       	push	r17
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
 a4a:	cd b7       	in	r28, 0x3d	; 61
 a4c:	de b7       	in	r29, 0x3e	; 62
 a4e:	2a 97       	sbiw	r28, 0x0a	; 10
 a50:	0f b6       	in	r0, 0x3f	; 63
 a52:	f8 94       	cli
 a54:	de bf       	out	0x3e, r29	; 62
 a56:	0f be       	out	0x3f, r0	; 63
 a58:	cd bf       	out	0x3d, r28	; 61
 a5a:	6f 83       	std	Y+7, r22	; 0x07
 a5c:	01 11       	cpse	r16, r1
 a5e:	0a c0       	rjmp	.+20     	; 0xa74 <uart_start+0x32>
 a60:	45 2f       	mov	r20, r21
 a62:	64 e0       	ldi	r22, 0x04	; 4
 a64:	81 ec       	ldi	r24, 0xC1	; 193
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	b9 dc       	rcall	.-1678   	; 0x3dc <updateBit>
 a6a:	4f 81       	ldd	r20, Y+7	; 0x07
 a6c:	63 e0       	ldi	r22, 0x03	; 3
 a6e:	81 ec       	ldi	r24, 0xC1	; 193
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	b4 dc       	rcall	.-1688   	; 0x3dc <updateBit>
 a74:	2a 96       	adiw	r28, 0x0a	; 10
 a76:	0f b6       	in	r0, 0x3f	; 63
 a78:	f8 94       	cli
 a7a:	de bf       	out	0x3e, r29	; 62
 a7c:	0f be       	out	0x3f, r0	; 63
 a7e:	cd bf       	out	0x3d, r28	; 61
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	1f 91       	pop	r17
 a86:	0f 91       	pop	r16
 a88:	08 95       	ret

00000a8a <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
 a8a:	ef 92       	push	r14
 a8c:	ff 92       	push	r15
 a8e:	0f 93       	push	r16
 a90:	1f 93       	push	r17
 a92:	cf 93       	push	r28
 a94:	df 93       	push	r29
 a96:	cd b7       	in	r28, 0x3d	; 61
 a98:	de b7       	in	r29, 0x3e	; 62
 a9a:	2a 97       	sbiw	r28, 0x0a	; 10
 a9c:	0f b6       	in	r0, 0x3f	; 63
 a9e:	f8 94       	cli
 aa0:	de bf       	out	0x3e, r29	; 62
 aa2:	0f be       	out	0x3f, r0	; 63
 aa4:	cd bf       	out	0x3d, r28	; 61
 aa6:	09 83       	std	Y+1, r16	; 0x01
 aa8:	1a 83       	std	Y+2, r17	; 0x02
 aaa:	2b 83       	std	Y+3, r18	; 0x03
 aac:	3c 83       	std	Y+4, r19	; 0x04
 aae:	4d 83       	std	Y+5, r20	; 0x05
 ab0:	5e 83       	std	Y+6, r21	; 0x06
 ab2:	6f 83       	std	Y+7, r22	; 0x07
 ab4:	78 87       	std	Y+8, r23	; 0x08
 ab6:	89 87       	std	Y+9, r24	; 0x09
 ab8:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
 aba:	01 11       	cpse	r16, r1
 abc:	13 c0       	rjmp	.+38     	; 0xae4 <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
 abe:	00 ec       	ldi	r16, 0xC0	; 192
 ac0:	10 e0       	ldi	r17, 0x00	; 0
 ac2:	f8 01       	movw	r30, r16
 ac4:	80 81       	ld	r24, Z
 ac6:	65 e0       	ldi	r22, 0x05	; 5
 ac8:	ba dc       	rcall	.-1676   	; 0x43e <checkBit>
 aca:	88 23       	and	r24, r24
 acc:	d1 f3       	breq	.-12     	; 0xac2 <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
 ace:	88 85       	ldd	r24, Y+8	; 0x08
 ad0:	84 30       	cpi	r24, 0x04	; 4
 ad2:	31 f4       	brne	.+12     	; 0xae0 <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
 ad4:	4f 2d       	mov	r20, r15
 ad6:	41 70       	andi	r20, 0x01	; 1
 ad8:	60 e0       	ldi	r22, 0x00	; 0
 ada:	81 ec       	ldi	r24, 0xC1	; 193
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	7e dc       	rcall	.-1796   	; 0x3dc <updateBit>
			UDR0 = (u8) u16_data;
 ae0:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
 ae4:	2a 96       	adiw	r28, 0x0a	; 10
 ae6:	0f b6       	in	r0, 0x3f	; 63
 ae8:	f8 94       	cli
 aea:	de bf       	out	0x3e, r29	; 62
 aec:	0f be       	out	0x3f, r0	; 63
 aee:	cd bf       	out	0x3d, r28	; 61
 af0:	df 91       	pop	r29
 af2:	cf 91       	pop	r28
 af4:	1f 91       	pop	r17
 af6:	0f 91       	pop	r16
 af8:	ff 90       	pop	r15
 afa:	ef 90       	pop	r14
 afc:	08 95       	ret

00000afe <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
 afe:	1f 92       	push	r1
 b00:	0f 92       	push	r0
 b02:	0f b6       	in	r0, 0x3f	; 63
 b04:	0f 92       	push	r0
 b06:	11 24       	eor	r1, r1
 b08:	0b b6       	in	r0, 0x3b	; 59
 b0a:	0f 92       	push	r0
 b0c:	2f 93       	push	r18
 b0e:	3f 93       	push	r19
 b10:	4f 93       	push	r20
 b12:	5f 93       	push	r21
 b14:	6f 93       	push	r22
 b16:	7f 93       	push	r23
 b18:	8f 93       	push	r24
 b1a:	9f 93       	push	r25
 b1c:	af 93       	push	r26
 b1e:	bf 93       	push	r27
 b20:	ef 93       	push	r30
 b22:	ff 93       	push	r31
	p_wdgCallback();
 b24:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <p_wdgCallback>
 b28:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <p_wdgCallback+0x1>
 b2c:	09 95       	icall
}
 b2e:	ff 91       	pop	r31
 b30:	ef 91       	pop	r30
 b32:	bf 91       	pop	r27
 b34:	af 91       	pop	r26
 b36:	9f 91       	pop	r25
 b38:	8f 91       	pop	r24
 b3a:	7f 91       	pop	r23
 b3c:	6f 91       	pop	r22
 b3e:	5f 91       	pop	r21
 b40:	4f 91       	pop	r20
 b42:	3f 91       	pop	r19
 b44:	2f 91       	pop	r18
 b46:	0f 90       	pop	r0
 b48:	0b be       	out	0x3b, r0	; 59
 b4a:	0f 90       	pop	r0
 b4c:	0f be       	out	0x3f, r0	; 63
 b4e:	0f 90       	pop	r0
 b50:	1f 90       	pop	r1
 b52:	18 95       	reti

00000b54 <debug_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void debug_init()
{
 b54:	0f 93       	push	r16
 b56:	1f 93       	push	r17
	s_debugUart.baudRate = _19200;
 b58:	e1 e4       	ldi	r30, 0x41	; 65
 b5a:	f1 e0       	ldi	r31, 0x01	; 1
 b5c:	80 e0       	ldi	r24, 0x00	; 0
 b5e:	18 2f       	mov	r17, r24
 b60:	81 83       	std	Z+1, r24	; 0x01
 b62:	8b e4       	ldi	r24, 0x4B	; 75
 b64:	82 83       	std	Z+2, r24	; 0x02
 b66:	13 82       	std	Z+3, r1	; 0x03
 b68:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
 b6a:	83 e0       	ldi	r24, 0x03	; 3
 b6c:	78 2f       	mov	r23, r24
 b6e:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = EVEN;
 b70:	11 86       	std	Z+9, r1	; 0x09
	s_debugUart.peripheral = UART0;
 b72:	10 82       	st	Z, r1
	s_debugUart.stopBits = _1BIT;
 b74:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
 b76:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
 b78:	81 e0       	ldi	r24, 0x01	; 1
 b7a:	68 2f       	mov	r22, r24
 b7c:	86 83       	std	Z+6, r24	; 0x06
	uart_init(s_debugUart);
 b7e:	00 e0       	ldi	r16, 0x00	; 0
 b80:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <s_debugUart+0x2>
 b84:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <s_debugUart+0x3>
 b88:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <s_debugUart+0x4>
 b8c:	50 e0       	ldi	r21, 0x00	; 0
 b8e:	80 e0       	ldi	r24, 0x00	; 0
 b90:	90 e0       	ldi	r25, 0x00	; 0
 b92:	b7 de       	rcall	.-658    	; 0x902 <uart_init>
	uart_start(s_debugUart);
 b94:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <s_debugUart>
 b98:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <s_debugUart+0x1>
 b9c:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <s_debugUart+0x2>
 ba0:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <s_debugUart+0x3>
 ba4:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <s_debugUart+0x4>
 ba8:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <s_debugUart+0x5>
 bac:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <s_debugUart+0x6>
 bb0:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <s_debugUart+0x7>
 bb4:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <s_debugUart+0x8>
 bb8:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <s_debugUart+0x9>
 bbc:	42 df       	rcall	.-380    	; 0xa42 <uart_start>
}
 bbe:	1f 91       	pop	r17
 bc0:	0f 91       	pop	r16
 bc2:	08 95       	ret

00000bc4 <debug_writeChar>:

void debug_writeChar(u8 u8_char)
{
 bc4:	ef 92       	push	r14
 bc6:	ff 92       	push	r15
 bc8:	0f 93       	push	r16
 bca:	1f 93       	push	r17
	uart_transmit(s_debugUart, u8_char);
 bcc:	e8 2e       	mov	r14, r24
 bce:	f1 2c       	mov	r15, r1
 bd0:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <s_debugUart>
 bd4:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <s_debugUart+0x1>
 bd8:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <s_debugUart+0x2>
 bdc:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <s_debugUart+0x3>
 be0:	40 91 45 01 	lds	r20, 0x0145	; 0x800145 <s_debugUart+0x4>
 be4:	50 91 46 01 	lds	r21, 0x0146	; 0x800146 <s_debugUart+0x5>
 be8:	60 91 47 01 	lds	r22, 0x0147	; 0x800147 <s_debugUart+0x6>
 bec:	70 91 48 01 	lds	r23, 0x0148	; 0x800148 <s_debugUart+0x7>
 bf0:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <s_debugUart+0x8>
 bf4:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <s_debugUart+0x9>
 bf8:	48 df       	rcall	.-368    	; 0xa8a <uart_transmit>
	//uart_transmit(s_debugUart, '\n');
}
 bfa:	1f 91       	pop	r17
 bfc:	0f 91       	pop	r16
 bfe:	ff 90       	pop	r15
 c00:	ef 90       	pop	r14
 c02:	08 95       	ret

00000c04 <surface_read>:

	gpio_init(surface_struct.led_pin);
}

u8 surface_read(surface_struct_t surface_struct)
{
 c04:	cf 93       	push	r28
 c06:	df 93       	push	r29
 c08:	cd b7       	in	r28, 0x3d	; 61
 c0a:	de b7       	in	r29, 0x3e	; 62
 c0c:	27 97       	sbiw	r28, 0x07	; 7
 c0e:	0f b6       	in	r0, 0x3f	; 63
 c10:	f8 94       	cli
 c12:	de bf       	out	0x3e, r29	; 62
 c14:	0f be       	out	0x3f, r0	; 63
 c16:	cd bf       	out	0x3d, r28	; 61
 c18:	29 83       	std	Y+1, r18	; 0x01
 c1a:	3a 83       	std	Y+2, r19	; 0x02
 c1c:	4b 83       	std	Y+3, r20	; 0x03
 c1e:	5c 83       	std	Y+4, r21	; 0x04
 c20:	6d 83       	std	Y+5, r22	; 0x05
 c22:	7e 83       	std	Y+6, r23	; 0x06
 c24:	8f 83       	std	Y+7, r24	; 0x07
	u8 i = 0;
	gpio_out_set(surface_struct.led_pin);
 c26:	6c 81       	ldd	r22, Y+4	; 0x04
 c28:	7d 81       	ldd	r23, Y+5	; 0x05
 c2a:	8e 81       	ldd	r24, Y+6	; 0x06
 c2c:	9f 81       	ldd	r25, Y+7	; 0x07
 c2e:	ba db       	rcall	.-2188   	; 0x3a4 <gpio_out_set>
 c30:	88 ec       	ldi	r24, 0xC8	; 200

	for(i = 0; i < 200; i++)
	{
		asm("nop");
 c32:	00 00       	nop
 c34:	81 50       	subi	r24, 0x01	; 1
u8 surface_read(surface_struct_t surface_struct)
{
	u8 i = 0;
	gpio_out_set(surface_struct.led_pin);

	for(i = 0; i < 200; i++)
 c36:	e9 f7       	brne	.-6      	; 0xc32 <surface_read+0x2e>
	{
		asm("nop");
	}
	
	u8 read = adc_singleRead(s_adc, surface_struct.transistor_channel);
 c38:	49 81       	ldd	r20, Y+1	; 0x01
 c3a:	5a 81       	ldd	r21, Y+2	; 0x02
 c3c:	6b 81       	ldd	r22, Y+3	; 0x03
 c3e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <s_adc>
 c42:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <s_adc+0x1>
 c46:	e2 da       	rcall	.-2620   	; 0x20c <adc_singleRead>
	//gpio_out_reset(surface_struct.led_pin);

	return read;
}
 c48:	27 96       	adiw	r28, 0x07	; 7
 c4a:	0f b6       	in	r0, 0x3f	; 63
 c4c:	f8 94       	cli
 c4e:	de bf       	out	0x3e, r29	; 62
 c50:	0f be       	out	0x3f, r0	; 63
 c52:	cd bf       	out	0x3d, r28	; 61
 c54:	df 91       	pop	r29
 c56:	cf 91       	pop	r28
 c58:	08 95       	ret

00000c5a <__udivmodsi4>:
 c5a:	a1 e2       	ldi	r26, 0x21	; 33
 c5c:	1a 2e       	mov	r1, r26
 c5e:	aa 1b       	sub	r26, r26
 c60:	bb 1b       	sub	r27, r27
 c62:	fd 01       	movw	r30, r26
 c64:	0d c0       	rjmp	.+26     	; 0xc80 <__udivmodsi4_ep>

00000c66 <__udivmodsi4_loop>:
 c66:	aa 1f       	adc	r26, r26
 c68:	bb 1f       	adc	r27, r27
 c6a:	ee 1f       	adc	r30, r30
 c6c:	ff 1f       	adc	r31, r31
 c6e:	a2 17       	cp	r26, r18
 c70:	b3 07       	cpc	r27, r19
 c72:	e4 07       	cpc	r30, r20
 c74:	f5 07       	cpc	r31, r21
 c76:	20 f0       	brcs	.+8      	; 0xc80 <__udivmodsi4_ep>
 c78:	a2 1b       	sub	r26, r18
 c7a:	b3 0b       	sbc	r27, r19
 c7c:	e4 0b       	sbc	r30, r20
 c7e:	f5 0b       	sbc	r31, r21

00000c80 <__udivmodsi4_ep>:
 c80:	66 1f       	adc	r22, r22
 c82:	77 1f       	adc	r23, r23
 c84:	88 1f       	adc	r24, r24
 c86:	99 1f       	adc	r25, r25
 c88:	1a 94       	dec	r1
 c8a:	69 f7       	brne	.-38     	; 0xc66 <__udivmodsi4_loop>
 c8c:	60 95       	com	r22
 c8e:	70 95       	com	r23
 c90:	80 95       	com	r24
 c92:	90 95       	com	r25
 c94:	9b 01       	movw	r18, r22
 c96:	ac 01       	movw	r20, r24
 c98:	bd 01       	movw	r22, r26
 c9a:	cf 01       	movw	r24, r30
 c9c:	08 95       	ret

00000c9e <__umulhisi3>:
 c9e:	a2 9f       	mul	r26, r18
 ca0:	b0 01       	movw	r22, r0
 ca2:	b3 9f       	mul	r27, r19
 ca4:	c0 01       	movw	r24, r0
 ca6:	a3 9f       	mul	r26, r19
 ca8:	70 0d       	add	r23, r0
 caa:	81 1d       	adc	r24, r1
 cac:	11 24       	eor	r1, r1
 cae:	91 1d       	adc	r25, r1
 cb0:	b2 9f       	mul	r27, r18
 cb2:	70 0d       	add	r23, r0
 cb4:	81 1d       	adc	r24, r1
 cb6:	11 24       	eor	r1, r1
 cb8:	91 1d       	adc	r25, r1
 cba:	08 95       	ret

00000cbc <__muluhisi3>:
 cbc:	f0 df       	rcall	.-32     	; 0xc9e <__umulhisi3>
 cbe:	a5 9f       	mul	r26, r21
 cc0:	90 0d       	add	r25, r0
 cc2:	b4 9f       	mul	r27, r20
 cc4:	90 0d       	add	r25, r0
 cc6:	a4 9f       	mul	r26, r20
 cc8:	80 0d       	add	r24, r0
 cca:	91 1d       	adc	r25, r1
 ccc:	11 24       	eor	r1, r1
 cce:	08 95       	ret

00000cd0 <_exit>:
 cd0:	f8 94       	cli

00000cd2 <__stop_program>:
 cd2:	ff cf       	rjmp	.-2      	; 0xcd2 <__stop_program>
