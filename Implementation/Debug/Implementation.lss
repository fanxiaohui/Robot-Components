
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         000006ea  00800100  00005d5c  00005df0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005d5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a0  008007ea  008007ea  000064da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000064da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000650c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ad0  00000000  00000000  0000654c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00011e5f  00000000  00000000  0000701c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002863  00000000  00000000  00018e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006b8d  00000000  00000000  0001b6de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002bb0  00000000  00000000  0002226c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004917  00000000  00000000  00024e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011f5b  00000000  00000000  00029733  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009e8  00000000  00000000  0003b68e  2**0
=======
  0 .data         000006ea  00800100  00005a32  00005ac6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a32  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000212  008007ea  008007ea  000061b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000061b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000061e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000a50  00000000  00000000  00006220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001203f  00000000  00000000  00006c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002584  00000000  00000000  00018caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006732  00000000  00000000  0001b233  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002b3c  00000000  00000000  00021968  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004a9c  00000000  00000000  000244a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00011eb1  00000000  00000000  00028f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000978  00000000  00000000  0003adf1  2**0
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0e c1       	rjmp	.+540    	; 0x21e <__ctors_end>
       2:	00 00       	nop
       4:	f5 c1       	rjmp	.+1002   	; 0x3f0 <__vector_1>
       6:	00 00       	nop
       8:	fd c1       	rjmp	.+1018   	; 0x404 <__vector_2>
       a:	00 00       	nop
       c:	05 c2       	rjmp	.+1034   	; 0x418 <__vector_3>
       e:	00 00       	nop
      10:	c7 c1       	rjmp	.+910    	; 0x3a0 <__vector_4>
      12:	00 00       	nop
      14:	cf c1       	rjmp	.+926    	; 0x3b4 <__vector_5>
      16:	00 00       	nop
      18:	d7 c1       	rjmp	.+942    	; 0x3c8 <__vector_6>
      1a:	00 00       	nop
      1c:	df c1       	rjmp	.+958    	; 0x3dc <__vector_7>
      1e:	00 00       	nop
      20:	ce c5       	rjmp	.+2972   	; 0xbbe <__vector_8>
      22:	00 00       	nop
      24:	16 c4       	rjmp	.+2092   	; 0x852 <__vector_9>
      26:	00 00       	nop
      28:	50 c4       	rjmp	.+2208   	; 0x8ca <__vector_10>
      2a:	00 00       	nop
      2c:	e7 c3       	rjmp	.+1998   	; 0x7fc <__vector_11>
      2e:	00 00       	nop
      30:	88 c3       	rjmp	.+1808   	; 0x742 <__vector_12>
      32:	00 00       	nop
      34:	fb c2       	rjmp	.+1526   	; 0x62c <__vector_13>
      36:	00 00       	nop
      38:	59 c3       	rjmp	.+1714   	; 0x6ec <__vector_14>
      3a:	00 00       	nop
      3c:	cc c2       	rjmp	.+1432   	; 0x5d6 <__vector_15>
      3e:	00 00       	nop
      40:	0c c1       	rjmp	.+536    	; 0x25a <__bad_interrupt>
      42:	00 00       	nop
      44:	0a c1       	rjmp	.+532    	; 0x25a <__bad_interrupt>
      46:	00 00       	nop
      48:	08 c1       	rjmp	.+528    	; 0x25a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	7b c2       	rjmp	.+1270   	; 0x544 <__vector_19>
      4e:	00 00       	nop
      50:	04 c1       	rjmp	.+520    	; 0x25a <__bad_interrupt>
      52:	00 00       	nop
      54:	02 c1       	rjmp	.+516    	; 0x25a <__bad_interrupt>
      56:	00 00       	nop
      58:	00 c1       	rjmp	.+512    	; 0x25a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	fe c0       	rjmp	.+508    	; 0x25a <__bad_interrupt>
      5e:	00 00       	nop
      60:	fc c0       	rjmp	.+504    	; 0x25a <__bad_interrupt>
      62:	00 00       	nop
      64:	fa c0       	rjmp	.+500    	; 0x25a <__bad_interrupt>
      66:	00 00       	nop
      68:	bf c7       	rjmp	.+3966   	; 0xfe8 <__vector_26>
      6a:	00 00       	nop
      6c:	f6 c0       	rjmp	.+492    	; 0x25a <__bad_interrupt>
      6e:	00 00       	nop
      70:	f4 c0       	rjmp	.+488    	; 0x25a <__bad_interrupt>
      72:	00 00       	nop
      74:	f2 c0       	rjmp	.+484    	; 0x25a <__bad_interrupt>
      76:	00 00       	nop
      78:	f0 c0       	rjmp	.+480    	; 0x25a <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ee c0       	rjmp	.+476    	; 0x25a <__bad_interrupt>
      7e:	00 00       	nop
      80:	ec c0       	rjmp	.+472    	; 0x25a <__bad_interrupt>
      82:	00 00       	nop
      84:	ea c0       	rjmp	.+468    	; 0x25a <__bad_interrupt>
      86:	00 00       	nop
<<<<<<< HEAD
      88:	e8 c0       	rjmp	.+464    	; 0x25a <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb 08       	sbc	r15, r11
      8e:	fe 08       	sbc	r15, r14
      90:	fe 08       	sbc	r15, r14
      92:	fe 08       	sbc	r15, r14
      94:	fe 08       	sbc	r15, r14
      96:	fe 08       	sbc	r15, r14
      98:	fe 08       	sbc	r15, r14
      9a:	fe 08       	sbc	r15, r14
      9c:	16 08       	sbc	r1, r6
      9e:	fe 08       	sbc	r15, r14
      a0:	fe 08       	sbc	r15, r14
      a2:	fe 08       	sbc	r15, r14
      a4:	fe 08       	sbc	r15, r14
      a6:	fe 08       	sbc	r15, r14
      a8:	fe 08       	sbc	r15, r14
      aa:	fe 08       	sbc	r15, r14
      ac:	16 08       	sbc	r1, r6
      ae:	fe 08       	sbc	r15, r14
      b0:	fe 08       	sbc	r15, r14
      b2:	fe 08       	sbc	r15, r14
      b4:	fe 08       	sbc	r15, r14
      b6:	fe 08       	sbc	r15, r14
      b8:	fe 08       	sbc	r15, r14
      ba:	fe 08       	sbc	r15, r14
      bc:	1e 08       	sbc	r1, r14
      be:	fe 08       	sbc	r15, r14
      c0:	fe 08       	sbc	r15, r14
      c2:	fe 08       	sbc	r15, r14
      c4:	fe 08       	sbc	r15, r14
      c6:	fe 08       	sbc	r15, r14
      c8:	fe 08       	sbc	r15, r14
      ca:	fe 08       	sbc	r15, r14
      cc:	43 08       	sbc	r4, r3
      ce:	fe 08       	sbc	r15, r14
      d0:	fe 08       	sbc	r15, r14
      d2:	fe 08       	sbc	r15, r14
      d4:	fe 08       	sbc	r15, r14
      d6:	fe 08       	sbc	r15, r14
      d8:	fe 08       	sbc	r15, r14
      da:	fe 08       	sbc	r15, r14
      dc:	1e 08       	sbc	r1, r14
      de:	fe 08       	sbc	r15, r14
      e0:	fe 08       	sbc	r15, r14
      e2:	fe 08       	sbc	r15, r14
      e4:	fe 08       	sbc	r15, r14
      e6:	fe 08       	sbc	r15, r14
      e8:	fe 08       	sbc	r15, r14
      ea:	fe 08       	sbc	r15, r14
      ec:	48 08       	sbc	r4, r8
      ee:	fe 08       	sbc	r15, r14
      f0:	fe 08       	sbc	r15, r14
      f2:	fe 08       	sbc	r15, r14
      f4:	fe 08       	sbc	r15, r14
      f6:	fe 08       	sbc	r15, r14
      f8:	fe 08       	sbc	r15, r14
      fa:	fe 08       	sbc	r15, r14
      fc:	4d 08       	sbc	r4, r13
      fe:	fe 08       	sbc	r15, r14
     100:	fe 08       	sbc	r15, r14
     102:	fe 08       	sbc	r15, r14
     104:	fe 08       	sbc	r15, r14
     106:	fe 08       	sbc	r15, r14
     108:	fe 08       	sbc	r15, r14
     10a:	fe 08       	sbc	r15, r14
     10c:	5e 08       	sbc	r5, r14
     10e:	fe 08       	sbc	r15, r14
     110:	fe 08       	sbc	r15, r14
     112:	fe 08       	sbc	r15, r14
     114:	fe 08       	sbc	r15, r14
     116:	fe 08       	sbc	r15, r14
     118:	fe 08       	sbc	r15, r14
     11a:	fe 08       	sbc	r15, r14
     11c:	87 08       	sbc	r8, r7
     11e:	fe 08       	sbc	r15, r14
     120:	fe 08       	sbc	r15, r14
     122:	fe 08       	sbc	r15, r14
     124:	fe 08       	sbc	r15, r14
     126:	fe 08       	sbc	r15, r14
     128:	fe 08       	sbc	r15, r14
     12a:	fe 08       	sbc	r15, r14
     12c:	52 08       	sbc	r5, r2
     12e:	fe 08       	sbc	r15, r14
     130:	fe 08       	sbc	r15, r14
     132:	fe 08       	sbc	r15, r14
     134:	fe 08       	sbc	r15, r14
     136:	fe 08       	sbc	r15, r14
     138:	fe 08       	sbc	r15, r14
     13a:	fe 08       	sbc	r15, r14
     13c:	6c 08       	sbc	r6, r12
     13e:	fe 08       	sbc	r15, r14
     140:	fe 08       	sbc	r15, r14
     142:	fe 08       	sbc	r15, r14
     144:	fe 08       	sbc	r15, r14
     146:	fe 08       	sbc	r15, r14
     148:	fe 08       	sbc	r15, r14
     14a:	fe 08       	sbc	r15, r14
     14c:	89 08       	sbc	r8, r9
     14e:	fe 08       	sbc	r15, r14
     150:	fe 08       	sbc	r15, r14
     152:	fe 08       	sbc	r15, r14
     154:	fe 08       	sbc	r15, r14
     156:	fe 08       	sbc	r15, r14
     158:	fe 08       	sbc	r15, r14
     15a:	fe 08       	sbc	r15, r14
     15c:	89 08       	sbc	r8, r9
     15e:	fe 08       	sbc	r15, r14
     160:	fe 08       	sbc	r15, r14
     162:	fe 08       	sbc	r15, r14
     164:	fe 08       	sbc	r15, r14
     166:	fe 08       	sbc	r15, r14
     168:	fe 08       	sbc	r15, r14
     16a:	fe 08       	sbc	r15, r14
     16c:	89 08       	sbc	r8, r9
     16e:	fe 08       	sbc	r15, r14
     170:	fe 08       	sbc	r15, r14
     172:	fe 08       	sbc	r15, r14
     174:	fe 08       	sbc	r15, r14
     176:	fe 08       	sbc	r15, r14
     178:	fe 08       	sbc	r15, r14
     17a:	fe 08       	sbc	r15, r14
     17c:	89 08       	sbc	r8, r9
     17e:	fe 08       	sbc	r15, r14
     180:	fe 08       	sbc	r15, r14
     182:	fe 08       	sbc	r15, r14
     184:	fe 08       	sbc	r15, r14
     186:	fe 08       	sbc	r15, r14
     188:	fe 08       	sbc	r15, r14
     18a:	fe 08       	sbc	r15, r14
     18c:	92 08       	sbc	r9, r2
     18e:	fe 08       	sbc	r15, r14
     190:	fe 08       	sbc	r15, r14
     192:	fe 08       	sbc	r15, r14
     194:	fe 08       	sbc	r15, r14
     196:	fe 08       	sbc	r15, r14
     198:	fe 08       	sbc	r15, r14
     19a:	fe 08       	sbc	r15, r14
     19c:	c2 08       	sbc	r12, r2
     19e:	fe 08       	sbc	r15, r14
     1a0:	fe 08       	sbc	r15, r14
     1a2:	fe 08       	sbc	r15, r14
     1a4:	fe 08       	sbc	r15, r14
     1a6:	fe 08       	sbc	r15, r14
     1a8:	fe 08       	sbc	r15, r14
     1aa:	fe 08       	sbc	r15, r14
     1ac:	92 08       	sbc	r9, r2
     1ae:	fe 08       	sbc	r15, r14
     1b0:	fe 08       	sbc	r15, r14
     1b2:	fe 08       	sbc	r15, r14
     1b4:	fe 08       	sbc	r15, r14
     1b6:	fe 08       	sbc	r15, r14
     1b8:	fe 08       	sbc	r15, r14
     1ba:	fe 08       	sbc	r15, r14
     1bc:	c2 08       	sbc	r12, r2
     1be:	fe 08       	sbc	r15, r14
     1c0:	fe 08       	sbc	r15, r14
     1c2:	fe 08       	sbc	r15, r14
     1c4:	fe 08       	sbc	r15, r14
     1c6:	fe 08       	sbc	r15, r14
     1c8:	fe 08       	sbc	r15, r14
     1ca:	fe 08       	sbc	r15, r14
     1cc:	aa 08       	sbc	r10, r10
     1ce:	fe 08       	sbc	r15, r14
     1d0:	fe 08       	sbc	r15, r14
     1d2:	fe 08       	sbc	r15, r14
     1d4:	fe 08       	sbc	r15, r14
     1d6:	fe 08       	sbc	r15, r14
     1d8:	fe 08       	sbc	r15, r14
     1da:	fe 08       	sbc	r15, r14
     1dc:	c6 08       	sbc	r12, r6
     1de:	fe 08       	sbc	r15, r14
     1e0:	fe 08       	sbc	r15, r14
     1e2:	fe 08       	sbc	r15, r14
     1e4:	fe 08       	sbc	r15, r14
     1e6:	fe 08       	sbc	r15, r14
     1e8:	fe 08       	sbc	r15, r14
     1ea:	fe 08       	sbc	r15, r14
     1ec:	c6 08       	sbc	r12, r6
     1ee:	fe 08       	sbc	r15, r14
     1f0:	fe 08       	sbc	r15, r14
     1f2:	fe 08       	sbc	r15, r14
     1f4:	fe 08       	sbc	r15, r14
     1f6:	fe 08       	sbc	r15, r14
     1f8:	fe 08       	sbc	r15, r14
     1fa:	fe 08       	sbc	r15, r14
     1fc:	db 08       	sbc	r13, r11
     1fe:	fe 08       	sbc	r15, r14
     200:	fe 08       	sbc	r15, r14
     202:	fe 08       	sbc	r15, r14
     204:	fe 08       	sbc	r15, r14
     206:	fe 08       	sbc	r15, r14
     208:	fe 08       	sbc	r15, r14
     20a:	fe 08       	sbc	r15, r14
     20c:	f5 08       	sbc	r15, r5
     20e:	fe 08       	sbc	r15, r14
     210:	fe 08       	sbc	r15, r14
     212:	fe 08       	sbc	r15, r14
     214:	fe 08       	sbc	r15, r14
     216:	fe 08       	sbc	r15, r14
     218:	fe 08       	sbc	r15, r14
     21a:	fe 08       	sbc	r15, r14
     21c:	f5 08       	sbc	r15, r5

0000021e <__ctors_end>:
     21e:	11 24       	eor	r1, r1
     220:	1f be       	out	0x3f, r1	; 63
     222:	cf ef       	ldi	r28, 0xFF	; 255
     224:	d0 e4       	ldi	r29, 0x40	; 64
     226:	de bf       	out	0x3e, r29	; 62
     228:	cd bf       	out	0x3d, r28	; 61

0000022a <__do_copy_data>:
     22a:	17 e0       	ldi	r17, 0x07	; 7
     22c:	a0 e0       	ldi	r26, 0x00	; 0
     22e:	b1 e0       	ldi	r27, 0x01	; 1
     230:	ec e5       	ldi	r30, 0x5C	; 92
     232:	fd e5       	ldi	r31, 0x5D	; 93
     234:	00 e0       	ldi	r16, 0x00	; 0
     236:	0b bf       	out	0x3b, r16	; 59
     238:	02 c0       	rjmp	.+4      	; 0x23e <__do_copy_data+0x14>
     23a:	07 90       	elpm	r0, Z+
     23c:	0d 92       	st	X+, r0
     23e:	aa 3e       	cpi	r26, 0xEA	; 234
     240:	b1 07       	cpc	r27, r17
     242:	d9 f7       	brne	.-10     	; 0x23a <__do_copy_data+0x10>

00000244 <__do_clear_bss>:
     244:	2a e0       	ldi	r18, 0x0A	; 10
     246:	aa ee       	ldi	r26, 0xEA	; 234
     248:	b7 e0       	ldi	r27, 0x07	; 7
     24a:	01 c0       	rjmp	.+2      	; 0x24e <.do_clear_bss_start>

0000024c <.do_clear_bss_loop>:
     24c:	1d 92       	st	X+, r1

0000024e <.do_clear_bss_start>:
     24e:	aa 38       	cpi	r26, 0x8A	; 138
     250:	b2 07       	cpc	r27, r18
     252:	e1 f7       	brne	.-8      	; 0x24c <.do_clear_bss_loop>
     254:	3b d0       	rcall	.+118    	; 0x2cc <main>
     256:	0c 94 ac 2e 	jmp	0x5d58	; 0x5d58 <_exit>

0000025a <__bad_interrupt>:
     25a:	d2 ce       	rjmp	.-604    	; 0x0 <__vectors>

0000025c <debug_init>:
#include <util/delay.h>

uart_struct_t s_debugUart;

void debug_init()
=======
      88:	1f c0       	rjmp	.+62     	; 0xc8 <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	17 e0       	ldi	r17, 0x07	; 7
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e3       	ldi	r30, 0x32	; 50
      a0:	fa e5       	ldi	r31, 0x5A	; 90
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	aa 3e       	cpi	r26, 0xEA	; 234
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	29 e0       	ldi	r18, 0x09	; 9
      b4:	aa ee       	ldi	r26, 0xEA	; 234
      b6:	b7 e0       	ldi	r27, 0x07	; 7
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 3f       	cpi	r26, 0xFC	; 252
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	3b d0       	rcall	.+118    	; 0x13a <main>
      c4:	0c 94 17 2d 	jmp	0x5a2e	; 0x5a2e <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <debug_init>:
}

void getCalibrationValues()
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
{
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
	s_debugUart.baudRate = _9600;
     260:	e1 e6       	ldi	r30, 0x61	; 97
     262:	f8 e0       	ldi	r31, 0x08	; 8
     264:	80 e8       	ldi	r24, 0x80	; 128
     266:	18 2f       	mov	r17, r24
     268:	81 83       	std	Z+1, r24	; 0x01
     26a:	85 e2       	ldi	r24, 0x25	; 37
     26c:	82 83       	std	Z+2, r24	; 0x02
     26e:	13 82       	std	Z+3, r1	; 0x03
     270:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
     272:	83 e0       	ldi	r24, 0x03	; 3
     274:	78 2f       	mov	r23, r24
     276:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
     278:	92 e0       	ldi	r25, 0x02	; 2
     27a:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.peripheral = UART0;
     27c:	10 82       	st	Z, r1
	s_debugUart.stopBits = _1BIT;
     27e:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
     280:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
     282:	81 e0       	ldi	r24, 0x01	; 1
     284:	68 2f       	mov	r22, r24
     286:	86 83       	std	Z+6, r24	; 0x06
	uart_init(s_debugUart);
     288:	00 e0       	ldi	r16, 0x00	; 0
     28a:	20 91 63 08 	lds	r18, 0x0863	; 0x800863 <s_debugUart+0x2>
     28e:	30 91 64 08 	lds	r19, 0x0864	; 0x800864 <s_debugUart+0x3>
     292:	40 91 65 08 	lds	r20, 0x0865	; 0x800865 <s_debugUart+0x4>
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	93 d3       	rcall	.+1830   	; 0x9c2 <uart_init>
	uart_start(s_debugUart);
     29c:	00 91 61 08 	lds	r16, 0x0861	; 0x800861 <s_debugUart>
     2a0:	10 91 62 08 	lds	r17, 0x0862	; 0x800862 <s_debugUart+0x1>
     2a4:	20 91 63 08 	lds	r18, 0x0863	; 0x800863 <s_debugUart+0x2>
     2a8:	30 91 64 08 	lds	r19, 0x0864	; 0x800864 <s_debugUart+0x3>
     2ac:	40 91 65 08 	lds	r20, 0x0865	; 0x800865 <s_debugUart+0x4>
     2b0:	50 91 66 08 	lds	r21, 0x0866	; 0x800866 <s_debugUart+0x5>
     2b4:	60 91 67 08 	lds	r22, 0x0867	; 0x800867 <s_debugUart+0x6>
     2b8:	70 91 68 08 	lds	r23, 0x0868	; 0x800868 <s_debugUart+0x7>
     2bc:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <s_debugUart+0x8>
     2c0:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <s_debugUart+0x9>
     2c4:	1e d4       	rcall	.+2108   	; 0xb02 <uart_start>
}
     2c6:	1f 91       	pop	r17
     2c8:	0f 91       	pop	r16
     2ca:	08 95       	ret

000002cc <main>:

int main(void)
{
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	69 97       	sbiw	r28, 0x19	; 25
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
	VL53L0X_RangingMeasurementData_t measure;

	device_disableJTAG();
	debug_init();
     2de:	cd bf       	out	0x3d, r28	; 61
	Adafruit_VL53L0X_begin(VL53L0X_I2C_ADDR, FALSE);
     2e0:	3b d0       	rcall	.+118    	; 0x358 <device_disableJTAG>
     2e2:	bc df       	rcall	.-136    	; 0x25c <debug_init>
     2e4:	60 e0       	ldi	r22, 0x00	; 0
	sei();
     2e6:	89 e2       	ldi	r24, 0x29	; 41
	
	while (1)
	{
		uart_transmit(s_debugUart, 'a');
     2e8:	af d4       	rcall	.+2398   	; 0xc48 <Adafruit_VL53L0X_begin>
     2ea:	78 94       	sei
     2ec:	0f 2e       	mov	r0, r31
     2ee:	f1 e6       	ldi	r31, 0x61	; 97
     2f0:	ef 2e       	mov	r14, r31
     2f2:	f1 2c       	mov	r15, r1
     2f4:	f0 2d       	mov	r31, r0
     2f6:	00 91 61 08 	lds	r16, 0x0861	; 0x800861 <s_debugUart>
     2fa:	10 91 62 08 	lds	r17, 0x0862	; 0x800862 <s_debugUart+0x1>
     2fe:	20 91 63 08 	lds	r18, 0x0863	; 0x800863 <s_debugUart+0x2>
     302:	30 91 64 08 	lds	r19, 0x0864	; 0x800864 <s_debugUart+0x3>
     306:	40 91 65 08 	lds	r20, 0x0865	; 0x800865 <s_debugUart+0x4>
     30a:	50 91 66 08 	lds	r21, 0x0866	; 0x800866 <s_debugUart+0x5>
     30e:	60 91 67 08 	lds	r22, 0x0867	; 0x800867 <s_debugUart+0x6>
     312:	70 91 68 08 	lds	r23, 0x0868	; 0x800868 <s_debugUart+0x7>
     316:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <s_debugUart+0x8>
		Adafruit_VL53L0X_getSingleRangingMeasurement(&measure, FALSE);
     31a:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <s_debugUart+0x9>
     31e:	15 d4       	rcall	.+2090   	; 0xb4a <uart_transmit>
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	ce 01       	movw	r24, r28
		uart_transmit(s_debugUart, measure.RangeMilliMeter);
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	48 d5       	rcall	.+2704   	; 0xdb8 <Adafruit_VL53L0X_getSingleRangingMeasurement>
     328:	e9 84       	ldd	r14, Y+9	; 0x09
     32a:	fa 84       	ldd	r15, Y+10	; 0x0a
     32c:	00 91 61 08 	lds	r16, 0x0861	; 0x800861 <s_debugUart>
     330:	10 91 62 08 	lds	r17, 0x0862	; 0x800862 <s_debugUart+0x1>
     334:	20 91 63 08 	lds	r18, 0x0863	; 0x800863 <s_debugUart+0x2>
     338:	30 91 64 08 	lds	r19, 0x0864	; 0x800864 <s_debugUart+0x3>
     33c:	40 91 65 08 	lds	r20, 0x0865	; 0x800865 <s_debugUart+0x4>
     340:	50 91 66 08 	lds	r21, 0x0866	; 0x800866 <s_debugUart+0x5>
     344:	60 91 67 08 	lds	r22, 0x0867	; 0x800867 <s_debugUart+0x6>
     348:	70 91 68 08 	lds	r23, 0x0868	; 0x800868 <s_debugUart+0x7>
     34c:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <s_debugUart+0x8>
     350:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <s_debugUart+0x9>
     354:	fa d3       	rcall	.+2036   	; 0xb4a <uart_transmit>
     356:	ca cf       	rjmp	.-108    	; 0x2ec <main+0x20>

00000358 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     358:	80 e8       	ldi	r24, 0x80	; 128
     35a:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     35c:	85 bf       	out	0x35, r24	; 53
     35e:	08 95       	ret

00000360 <gpio_changeDirection>:
/* Internal functions                                                   */
/************************************************************************/

void gpio_changeDirection(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     360:	61 30       	cpi	r22, 0x01	; 1
     362:	61 f0       	breq	.+24     	; 0x37c <gpio_changeDirection+0x1c>
     364:	28 f0       	brcs	.+10     	; 0x370 <gpio_changeDirection+0x10>
     366:	62 30       	cpi	r22, 0x02	; 2
     368:	79 f0       	breq	.+30     	; 0x388 <gpio_changeDirection+0x28>
     36a:	63 30       	cpi	r22, 0x03	; 3
     36c:	99 f0       	breq	.+38     	; 0x394 <gpio_changeDirection+0x34>
     36e:	08 95       	ret
	{
		case PA:
			updateBit(&DDRA, s_gpio.number, s_gpio.direction);
     370:	48 2f       	mov	r20, r24
     372:	67 2f       	mov	r22, r23
     374:	81 e2       	ldi	r24, 0x21	; 33
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	8c c0       	rjmp	.+280    	; 0x492 <updateBit>
			break;
     37a:	08 95       	ret
		case PB:
			updateBit(&DDRB, s_gpio.number, s_gpio.direction);
     37c:	48 2f       	mov	r20, r24
     37e:	67 2f       	mov	r22, r23
     380:	84 e2       	ldi	r24, 0x24	; 36
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	86 c0       	rjmp	.+268    	; 0x492 <updateBit>
			break;
     386:	08 95       	ret
		case PC:
			updateBit(&DDRC, s_gpio.number, s_gpio.direction);
     388:	48 2f       	mov	r20, r24
     38a:	67 2f       	mov	r22, r23
     38c:	87 e2       	ldi	r24, 0x27	; 39
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	80 c0       	rjmp	.+256    	; 0x492 <updateBit>
			break;
     392:	08 95       	ret
		case PD:
			updateBit(&DDRD, s_gpio.number, s_gpio.direction);
     394:	48 2f       	mov	r20, r24
     396:	67 2f       	mov	r22, r23
     398:	8a e2       	ldi	r24, 0x2A	; 42
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	7a c0       	rjmp	.+244    	; 0x492 <updateBit>
     39e:	08 95       	ret

000003a0 <__vector_4>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(PCINT0_vect)
{
     3a0:	1f 92       	push	r1
     3a2:	0f 92       	push	r0
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	0f 92       	push	r0
     3a8:	11 24       	eor	r1, r1
#ifdef USING_PCINT0
	p_pcInt0Callback();
#endif
}
     3aa:	0f 90       	pop	r0
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	0f 90       	pop	r0
     3b0:	1f 90       	pop	r1
     3b2:	18 95       	reti

000003b4 <__vector_5>:

ISR(PCINT1_vect)
{
     3b4:	1f 92       	push	r1
     3b6:	0f 92       	push	r0
     3b8:	0f b6       	in	r0, 0x3f	; 63
     3ba:	0f 92       	push	r0
     3bc:	11 24       	eor	r1, r1
#ifdef USING_PCINT1
	p_pcInt1Callback();
#endif
}
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	1f 90       	pop	r1
     3c6:	18 95       	reti

000003c8 <__vector_6>:

ISR(PCINT2_vect)
{
     3c8:	1f 92       	push	r1
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	0f 92       	push	r0
     3d0:	11 24       	eor	r1, r1
#ifdef USING_PCINT2
	p_pcInt2Callback();
#endif
}
     3d2:	0f 90       	pop	r0
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	0f 90       	pop	r0
     3d8:	1f 90       	pop	r1
     3da:	18 95       	reti

000003dc <__vector_7>:

ISR(PCINT3_vect)
{
     3dc:	1f 92       	push	r1
     3de:	0f 92       	push	r0
     3e0:	0f b6       	in	r0, 0x3f	; 63
     3e2:	0f 92       	push	r0
     3e4:	11 24       	eor	r1, r1
#ifdef USING_PCINT3
	p_pcInt3Callback();
#endif
}
     3e6:	0f 90       	pop	r0
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	0f 90       	pop	r0
     3ec:	1f 90       	pop	r1
     3ee:	18 95       	reti

000003f0 <__vector_1>:

ISR(INT0_vect)
{
     3f0:	1f 92       	push	r1
     3f2:	0f 92       	push	r0
     3f4:	0f b6       	in	r0, 0x3f	; 63
     3f6:	0f 92       	push	r0
     3f8:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[0]();
#endif
}
     3fa:	0f 90       	pop	r0
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	0f 90       	pop	r0
     400:	1f 90       	pop	r1
     402:	18 95       	reti

00000404 <__vector_2>:

ISR(INT1_vect)
{
     404:	1f 92       	push	r1
     406:	0f 92       	push	r0
     408:	0f b6       	in	r0, 0x3f	; 63
     40a:	0f 92       	push	r0
     40c:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[1]();
#endif
}
     40e:	0f 90       	pop	r0
     410:	0f be       	out	0x3f, r0	; 63
     412:	0f 90       	pop	r0
     414:	1f 90       	pop	r1
     416:	18 95       	reti

00000418 <__vector_3>:

ISR(INT2_vect)
{
     418:	1f 92       	push	r1
     41a:	0f 92       	push	r0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	0f 92       	push	r0
     420:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[2]();
#endif
}
     422:	0f 90       	pop	r0
     424:	0f be       	out	0x3f, r0	; 63
     426:	0f 90       	pop	r0
     428:	1f 90       	pop	r1
     42a:	18 95       	reti

0000042c <gpio_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void gpio_init(gpio_struct_t s_gpio)
{
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	c6 2f       	mov	r28, r22
     436:	17 2f       	mov	r17, r23
     438:	d8 2f       	mov	r29, r24
	/* Configure pin direction */
	gpio_changeDirection(s_gpio);
     43a:	09 2f       	mov	r16, r25

	/* Configure pin pull-up */
	if (s_gpio.direction == INPUT)
     43c:	91 df       	rcall	.-222    	; 0x360 <gpio_changeDirection>
     43e:	d1 11       	cpse	r29, r1
	{
		switch (s_gpio.port)
     440:	23 c0       	rjmp	.+70     	; 0x488 <gpio_init+0x5c>
     442:	c1 30       	cpi	r28, 0x01	; 1
     444:	81 f0       	breq	.+32     	; 0x466 <gpio_init+0x3a>
     446:	28 f0       	brcs	.+10     	; 0x452 <gpio_init+0x26>
     448:	c2 30       	cpi	r28, 0x02	; 2
     44a:	99 f0       	breq	.+38     	; 0x472 <gpio_init+0x46>
     44c:	c3 30       	cpi	r28, 0x03	; 3
     44e:	b9 f0       	breq	.+46     	; 0x47e <gpio_init+0x52>
		{
			case PA:
				updateBit(&PORTA, s_gpio.number, s_gpio.pullUp);
     450:	1b c0       	rjmp	.+54     	; 0x488 <gpio_init+0x5c>
     452:	40 2f       	mov	r20, r16
     454:	61 2f       	mov	r22, r17
     456:	82 e2       	ldi	r24, 0x22	; 34
     458:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&DIDR0, s_gpio.number);
     45a:	1b d0       	rcall	.+54     	; 0x492 <updateBit>
     45c:	61 2f       	mov	r22, r17
     45e:	8e e7       	ldi	r24, 0x7E	; 126
     460:	90 e0       	ldi	r25, 0x00	; 0
				break;
     462:	3b d0       	rcall	.+118    	; 0x4da <clearBit>
			case PB:
				updateBit(&PORTB, s_gpio.number, s_gpio.pullUp);
     464:	11 c0       	rjmp	.+34     	; 0x488 <gpio_init+0x5c>
     466:	40 2f       	mov	r20, r16
     468:	61 2f       	mov	r22, r17
     46a:	85 e2       	ldi	r24, 0x25	; 37
     46c:	90 e0       	ldi	r25, 0x00	; 0
				break;
			case PC:
				updateBit(&PORTC, s_gpio.number, s_gpio.pullUp);
     46e:	11 d0       	rcall	.+34     	; 0x492 <updateBit>
     470:	0b c0       	rjmp	.+22     	; 0x488 <gpio_init+0x5c>
     472:	40 2f       	mov	r20, r16
     474:	61 2f       	mov	r22, r17
				break;
			case PD:
				updateBit(&PORTD, s_gpio.number, s_gpio.pullUp);
     476:	88 e2       	ldi	r24, 0x28	; 40
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0b d0       	rcall	.+22     	; 0x492 <updateBit>
     47c:	05 c0       	rjmp	.+10     	; 0x488 <gpio_init+0x5c>
     47e:	40 2f       	mov	r20, r16
     480:	61 2f       	mov	r22, r17
				break;
		}
	}
}
<<<<<<< HEAD
     482:	8b e2       	ldi	r24, 0x2B	; 43
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	05 d0       	rcall	.+10     	; 0x492 <updateBit>
     488:	df 91       	pop	r29
     48a:	cf 91       	pop	r28
     48c:	1f 91       	pop	r17
     48e:	0f 91       	pop	r16
     490:	08 95       	ret

00000492 <updateBit>:
=======
     28a:	8b e2       	ldi	r24, 0x2B	; 43
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	b3 d1       	rcall	.+870    	; 0x5f6 <updateBit>
     290:	df 91       	pop	r29
     292:	cf 91       	pop	r28
     294:	1f 91       	pop	r17
     296:	0f 91       	pop	r16
     298:	08 95       	ret

0000029a <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     29a:	0f 93       	push	r16
     29c:	1f 93       	push	r17
     29e:	cf 93       	push	r28
     2a0:	df 93       	push	r29
     2a2:	8b 01       	movw	r16, r22
     2a4:	9c 01       	movw	r18, r24
     2a6:	ea 01       	movw	r28, r20
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	72 e1       	ldi	r23, 0x12	; 18
     2ac:	8a e7       	ldi	r24, 0x7A	; 122
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	a9 01       	movw	r20, r18
     2b2:	98 01       	movw	r18, r16
     2b4:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
     2b8:	ba 01       	movw	r22, r20
     2ba:	a9 01       	movw	r20, r18
     2bc:	40 51       	subi	r20, 0x10	; 16
     2be:	51 09       	sbc	r21, r1
     2c0:	61 09       	sbc	r22, r1
     2c2:	71 09       	sbc	r23, r1
     2c4:	db 01       	movw	r26, r22
     2c6:	ca 01       	movw	r24, r20
     2c8:	b6 95       	lsr	r27
     2ca:	a7 95       	ror	r26
     2cc:	97 95       	ror	r25
     2ce:	87 95       	ror	r24
     2d0:	8f 3f       	cpi	r24, 0xFF	; 255
     2d2:	91 05       	cpc	r25, r1
     2d4:	a1 05       	cpc	r26, r1
     2d6:	b1 05       	cpc	r27, r1
     2d8:	09 f0       	breq	.+2      	; 0x2dc <calculateTWBR+0x42>
     2da:	10 f4       	brcc	.+4      	; 0x2e0 <calculateTWBR+0x46>
     2dc:	18 82       	st	Y, r1
     2de:	32 c0       	rjmp	.+100    	; 0x344 <calculateTWBR+0xaa>
     2e0:	db 01       	movw	r26, r22
     2e2:	ca 01       	movw	r24, r20
     2e4:	68 94       	set
     2e6:	12 f8       	bld	r1, 2
     2e8:	b6 95       	lsr	r27
     2ea:	a7 95       	ror	r26
     2ec:	97 95       	ror	r25
     2ee:	87 95       	ror	r24
     2f0:	16 94       	lsr	r1
     2f2:	d1 f7       	brne	.-12     	; 0x2e8 <calculateTWBR+0x4e>
     2f4:	8f 3f       	cpi	r24, 0xFF	; 255
     2f6:	91 05       	cpc	r25, r1
     2f8:	a1 05       	cpc	r26, r1
     2fa:	b1 05       	cpc	r27, r1
     2fc:	09 f0       	breq	.+2      	; 0x300 <calculateTWBR+0x66>
     2fe:	18 f4       	brcc	.+6      	; 0x306 <calculateTWBR+0x6c>
     300:	21 e0       	ldi	r18, 0x01	; 1
     302:	28 83       	st	Y, r18
     304:	1f c0       	rjmp	.+62     	; 0x344 <calculateTWBR+0xaa>
     306:	db 01       	movw	r26, r22
     308:	ca 01       	movw	r24, r20
     30a:	68 94       	set
     30c:	14 f8       	bld	r1, 4
     30e:	b6 95       	lsr	r27
     310:	a7 95       	ror	r26
     312:	97 95       	ror	r25
     314:	87 95       	ror	r24
     316:	16 94       	lsr	r1
     318:	d1 f7       	brne	.-12     	; 0x30e <calculateTWBR+0x74>
     31a:	8f 3f       	cpi	r24, 0xFF	; 255
     31c:	91 05       	cpc	r25, r1
     31e:	a1 05       	cpc	r26, r1
     320:	b1 05       	cpc	r27, r1
     322:	09 f0       	breq	.+2      	; 0x326 <calculateTWBR+0x8c>
     324:	18 f4       	brcc	.+6      	; 0x32c <calculateTWBR+0x92>
     326:	22 e0       	ldi	r18, 0x02	; 2
     328:	28 83       	st	Y, r18
     32a:	0c c0       	rjmp	.+24     	; 0x344 <calculateTWBR+0xaa>
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	88 83       	st	Y, r24
     330:	db 01       	movw	r26, r22
     332:	ca 01       	movw	r24, r20
     334:	68 94       	set
     336:	16 f8       	bld	r1, 6
     338:	b6 95       	lsr	r27
     33a:	a7 95       	ror	r26
     33c:	97 95       	ror	r25
     33e:	87 95       	ror	r24
     340:	16 94       	lsr	r1
     342:	d1 f7       	brne	.-12     	; 0x338 <calculateTWBR+0x9e>
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <stopAndGetErrorCode>:
     34e:	cf 93       	push	r28
     350:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     354:	64 e0       	ldi	r22, 0x04	; 4
     356:	8c eb       	ldi	r24, 0xBC	; 188
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	65 d1       	rcall	.+714    	; 0x626 <setBit>
     35c:	8c 2f       	mov	r24, r28
     35e:	88 7f       	andi	r24, 0xF8	; 248
     360:	cf 91       	pop	r28
     362:	08 95       	ret

00000364 <i2c_init>:
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	00 d0       	rcall	.+0      	; 0x36a <i2c_init+0x6>
     36a:	00 d0       	rcall	.+0      	; 0x36c <i2c_init+0x8>
     36c:	00 d0       	rcall	.+0      	; 0x36e <i2c_init+0xa>
     36e:	cd b7       	in	r28, 0x3d	; 61
     370:	de b7       	in	r29, 0x3e	; 62
     372:	5b 83       	std	Y+3, r21	; 0x03
     374:	6c 83       	std	Y+4, r22	; 0x04
     376:	7d 83       	std	Y+5, r23	; 0x05
     378:	8e 83       	std	Y+6, r24	; 0x06
     37a:	6b 81       	ldd	r22, Y+3	; 0x03
     37c:	7c 81       	ldd	r23, Y+4	; 0x04
     37e:	8d 81       	ldd	r24, Y+5	; 0x05
     380:	9e 81       	ldd	r25, Y+6	; 0x06
     382:	ae 01       	movw	r20, r28
     384:	4f 5f       	subi	r20, 0xFF	; 255
     386:	5f 4f       	sbci	r21, 0xFF	; 255
     388:	88 df       	rcall	.-240    	; 0x29a <calculateTWBR>
     38a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	62 d1       	rcall	.+708    	; 0x658 <checkBit>
     394:	48 2f       	mov	r20, r24
     396:	60 e0       	ldi	r22, 0x00	; 0
     398:	89 eb       	ldi	r24, 0xB9	; 185
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	2c d1       	rcall	.+600    	; 0x5f6 <updateBit>
     39e:	61 e0       	ldi	r22, 0x01	; 1
     3a0:	89 81       	ldd	r24, Y+1	; 0x01
     3a2:	5a d1       	rcall	.+692    	; 0x658 <checkBit>
     3a4:	48 2f       	mov	r20, r24
     3a6:	61 e0       	ldi	r22, 0x01	; 1
     3a8:	89 eb       	ldi	r24, 0xB9	; 185
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	24 d1       	rcall	.+584    	; 0x5f6 <updateBit>
     3ae:	62 e0       	ldi	r22, 0x02	; 2
     3b0:	71 e0       	ldi	r23, 0x01	; 1
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	3e df       	rcall	.-388    	; 0x234 <gpio_init>
     3b8:	62 e0       	ldi	r22, 0x02	; 2
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	39 df       	rcall	.-398    	; 0x234 <gpio_init>
     3c2:	26 96       	adiw	r28, 0x06	; 6
     3c4:	0f b6       	in	r0, 0x3f	; 63
     3c6:	f8 94       	cli
     3c8:	de bf       	out	0x3e, r29	; 62
     3ca:	0f be       	out	0x3f, r0	; 63
     3cc:	cd bf       	out	0x3d, r28	; 61
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	08 95       	ret

000003d4 <i2c_start>:
     3d4:	62 e0       	ldi	r22, 0x02	; 2
     3d6:	8c eb       	ldi	r24, 0xBC	; 188
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	25 c1       	rjmp	.+586    	; 0x626 <setBit>
     3dc:	08 95       	ret

000003de <i2c_transmit>:
}

u8 i2c_transmit(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     3de:	af 92       	push	r10
     3e0:	bf 92       	push	r11
     3e2:	cf 92       	push	r12
     3e4:	df 92       	push	r13
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	18 2f       	mov	r17, r24
     3f4:	6b 01       	movw	r12, r22
     3f6:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     3f8:	65 e0       	ldi	r22, 0x05	; 5
     3fa:	8c eb       	ldi	r24, 0xBC	; 188
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	13 d1       	rcall	.+550    	; 0x626 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     400:	cc eb       	ldi	r28, 0xBC	; 188
     402:	d0 e0       	ldi	r29, 0x00	; 0
     404:	88 81       	ld	r24, Y
     406:	67 e0       	ldi	r22, 0x07	; 7
     408:	27 d1       	rcall	.+590    	; 0x658 <checkBit>
     40a:	88 23       	and	r24, r24
     40c:	d9 f3       	breq	.-10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     40e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     412:	88 7f       	andi	r24, 0xF8	; 248
     414:	88 30       	cpi	r24, 0x08	; 8
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	47 c0       	rjmp	.+142    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     41a:	11 0f       	add	r17, r17
     41c:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		/* Set write mode */
		clearBit(&TWDR, TWD0);
     420:	60 e0       	ldi	r22, 0x00	; 0
     422:	8b eb       	ldi	r24, 0xBB	; 187
     424:	90 e0       	ldi	r25, 0x00	; 0
		/* Set repeated start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     426:	0b d1       	rcall	.+534    	; 0x63e <clearBit>
     428:	65 e0       	ldi	r22, 0x05	; 5
     42a:	8c eb       	ldi	r24, 0xBC	; 188
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	07 d1       	rcall	.+526    	; 0x63e <clearBit>
     430:	cc eb       	ldi	r28, 0xBC	; 188
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	88 81       	ld	r24, Y
     436:	67 e0       	ldi	r22, 0x07	; 7
     438:	0f d1       	rcall	.+542    	; 0x658 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
     43a:	88 23       	and	r24, r24
     43c:	d9 f3       	breq	.-10     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     43e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     442:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Transmit data */
			while (i != u8_dataLength)
     444:	88 31       	cpi	r24, 0x18	; 24
     446:	71 f5       	brne	.+92     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     448:	ee 20       	and	r14, r14
     44a:	81 f1       	breq	.+96     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     44c:	86 01       	movw	r16, r12
     44e:	ea 94       	dec	r14
     450:	f1 2c       	mov	r15, r1
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	e8 1a       	sub	r14, r24
     456:	f8 0a       	sbc	r15, r24
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     458:	ec 0c       	add	r14, r12
     45a:	fd 1c       	adc	r15, r13
     45c:	0f 2e       	mov	r0, r31
     45e:	fb eb       	ldi	r31, 0xBB	; 187
     460:	af 2e       	mov	r10, r31
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     462:	b1 2c       	mov	r11, r1
     464:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     466:	cc eb       	ldi	r28, 0xBC	; 188
     468:	d0 e0       	ldi	r29, 0x00	; 0
     46a:	0f 2e       	mov	r0, r31
     46c:	f9 eb       	ldi	r31, 0xB9	; 185
     46e:	cf 2e       	mov	r12, r31
		{
			/* Transmit data */
			while (i != u8_dataLength)
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     470:	d1 2c       	mov	r13, r1
     472:	f0 2d       	mov	r31, r0
     474:	f8 01       	movw	r30, r16
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     476:	81 91       	ld	r24, Z+
     478:	8f 01       	movw	r16, r30
     47a:	f5 01       	movw	r30, r10
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     47c:	80 83       	st	Z, r24
     47e:	67 e0       	ldi	r22, 0x07	; 7
     480:	ce 01       	movw	r24, r28
     482:	d1 d0       	rcall	.+418    	; 0x626 <setBit>
     484:	88 81       	ld	r24, Y
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     486:	67 e0       	ldi	r22, 0x07	; 7
     488:	e7 d0       	rcall	.+462    	; 0x658 <checkBit>
     48a:	88 23       	and	r24, r24
     48c:	d9 f3       	breq	.-10     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
					return stopAndGetErrorCode();
     48e:	f6 01       	movw	r30, r12
     490:	80 81       	ld	r24, Z
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
		{
			/* Transmit data */
			while (i != u8_dataLength)
     492:	88 7f       	andi	r24, 0xF8	; 248
     494:	88 32       	cpi	r24, 0x28	; 40
     496:	11 f0       	breq	.+4      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
					return stopAndGetErrorCode();
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     498:	5a df       	rcall	.-332    	; 0x34e <stopAndGetErrorCode>
     49a:	13 c0       	rjmp	.+38     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     49c:	0e 15       	cp	r16, r14
	}
	else
		return stopAndGetErrorCode();
     49e:	1f 05       	cpc	r17, r15
     4a0:	49 f7       	brne	.-46     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
	
	/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
	setBit(&TWCR, TWSTO);
     4a2:	04 c0       	rjmp	.+8      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4a4:	54 df       	rcall	.-344    	; 0x34e <stopAndGetErrorCode>
     4a6:	0d c0       	rjmp	.+26     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
     4a8:	52 df       	rcall	.-348    	; 0x34e <stopAndGetErrorCode>
     4aa:	0b c0       	rjmp	.+22     	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
	/* Wait for stop condition to be sent. */
	while (checkBit(TWCR, TWSTO));
     4ac:	64 e0       	ldi	r22, 0x04	; 4
     4ae:	8c eb       	ldi	r24, 0xBC	; 188
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	b9 d0       	rcall	.+370    	; 0x626 <setBit>
     4b4:	cc eb       	ldi	r28, 0xBC	; 188
     4b6:	d0 e0       	ldi	r29, 0x00	; 0
     4b8:	88 81       	ld	r24, Y
     4ba:	64 e0       	ldi	r22, 0x04	; 4

	return I2C_NO_ERROR;
}
     4bc:	cd d0       	rcall	.+410    	; 0x658 <checkBit>
     4be:	81 11       	cpse	r24, r1
     4c0:	fb cf       	rjmp	.-10     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	df 90       	pop	r13
     4d0:	cf 90       	pop	r12
     4d2:	bf 90       	pop	r11
     4d4:	af 90       	pop	r10
     4d6:	08 95       	ret

000004d8 <i2c_receive>:

u8 i2c_receive(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     4d8:	af 92       	push	r10
     4da:	bf 92       	push	r11
     4dc:	cf 92       	push	r12
     4de:	df 92       	push	r13
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	18 2f       	mov	r17, r24
     4ee:	6b 01       	movw	r12, r22
     4f0:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     4f2:	65 e0       	ldi	r22, 0x05	; 5
     4f4:	8c eb       	ldi	r24, 0xBC	; 188
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	96 d0       	rcall	.+300    	; 0x626 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     4fa:	cc eb       	ldi	r28, 0xBC	; 188
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
     4fe:	88 81       	ld	r24, Y
     500:	67 e0       	ldi	r22, 0x07	; 7
     502:	aa d0       	rcall	.+340    	; 0x658 <checkBit>
     504:	88 23       	and	r24, r24
     506:	d9 f3       	breq	.-10     	; 0x4fe <i2c_receive+0x26>
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     508:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     50c:	88 7f       	andi	r24, 0xF8	; 248
     50e:	88 30       	cpi	r24, 0x08	; 8
     510:	09 f0       	breq	.+2      	; 0x514 <i2c_receive+0x3c>
     512:	47 c0       	rjmp	.+142    	; 0x5a2 <i2c_receive+0xca>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     514:	11 0f       	add	r17, r17
     516:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
		/* Set read mode */
		setBit(&TWDR, TWD0);
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	8b eb       	ldi	r24, 0xBB	; 187
     51e:	90 e0       	ldi	r25, 0x00	; 0
		/* Set repeated start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     520:	82 d0       	rcall	.+260    	; 0x626 <setBit>
     522:	65 e0       	ldi	r22, 0x05	; 5
     524:	8c eb       	ldi	r24, 0xBC	; 188
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	8a d0       	rcall	.+276    	; 0x63e <clearBit>
     52a:	cc eb       	ldi	r28, 0xBC	; 188
     52c:	d0 e0       	ldi	r29, 0x00	; 0
     52e:	88 81       	ld	r24, Y
     530:	67 e0       	ldi	r22, 0x07	; 7
     532:	92 d0       	rcall	.+292    	; 0x658 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
     534:	88 23       	and	r24, r24
     536:	d9 f3       	breq	.-10     	; 0x52e <i2c_receive+0x56>
     538:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     53c:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Receive data */
			while (i != u8_dataLength)
     53e:	80 34       	cpi	r24, 0x40	; 64
     540:	71 f5       	brne	.+92     	; 0x59e <i2c_receive+0xc6>
     542:	ee 20       	and	r14, r14
     544:	81 f1       	breq	.+96     	; 0x5a6 <i2c_receive+0xce>
     546:	86 01       	movw	r16, r12
     548:	ea 94       	dec	r14
     54a:	f1 2c       	mov	r15, r1
     54c:	8f ef       	ldi	r24, 0xFF	; 255
     54e:	e8 1a       	sub	r14, r24
     550:	f8 0a       	sbc	r15, r24
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     552:	ec 0c       	add	r14, r12
     554:	fd 1c       	adc	r15, r13
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     556:	cc eb       	ldi	r28, 0xBC	; 188
     558:	d0 e0       	ldi	r29, 0x00	; 0
     55a:	0f 2e       	mov	r0, r31
     55c:	f9 eb       	ldi	r31, 0xB9	; 185
     55e:	cf 2e       	mov	r12, r31
					return stopAndGetErrorCode();
				/* Read next byte */
				au8_data[i] = TWDR;
     560:	d1 2c       	mov	r13, r1
     562:	f0 2d       	mov	r31, r0
     564:	0f 2e       	mov	r0, r31
		{
			/* Receive data */
			while (i != u8_dataLength)
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     566:	fb eb       	ldi	r31, 0xBB	; 187
     568:	af 2e       	mov	r10, r31
     56a:	b1 2c       	mov	r11, r1
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     56c:	f0 2d       	mov	r31, r0
     56e:	66 e0       	ldi	r22, 0x06	; 6
     570:	ce 01       	movw	r24, r28
     572:	59 d0       	rcall	.+178    	; 0x626 <setBit>
     574:	88 81       	ld	r24, Y
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     576:	67 e0       	ldi	r22, 0x07	; 7
     578:	6f d0       	rcall	.+222    	; 0x658 <checkBit>
     57a:	88 23       	and	r24, r24
     57c:	d9 f3       	breq	.-10     	; 0x574 <i2c_receive+0x9c>
     57e:	f6 01       	movw	r30, r12
					return stopAndGetErrorCode();
     580:	80 81       	ld	r24, Z
     582:	88 7f       	andi	r24, 0xF8	; 248
     584:	80 35       	cpi	r24, 0x50	; 80
				/* Read next byte */
				au8_data[i] = TWDR;
     586:	11 f0       	breq	.+4      	; 0x58c <i2c_receive+0xb4>
     588:	e2 de       	rcall	.-572    	; 0x34e <stopAndGetErrorCode>
     58a:	2a c0       	rjmp	.+84     	; 0x5e0 <i2c_receive+0x108>
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
		{
			/* Receive data */
			while (i != u8_dataLength)
     58c:	f5 01       	movw	r30, r10
     58e:	80 81       	ld	r24, Z
     590:	f8 01       	movw	r30, r16
				au8_data[i] = TWDR;
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     592:	81 93       	st	Z+, r24
     594:	8f 01       	movw	r16, r30
     596:	ee 15       	cp	r30, r14
	}
	else
		return stopAndGetErrorCode();
     598:	ff 05       	cpc	r31, r15
     59a:	49 f7       	brne	.-46     	; 0x56e <i2c_receive+0x96>
	
	/* Send NACK after all expected transfers are done. Also clears I2C flag because it writes a 1 to it. */
	clearBit(&TWCR, TWEA);
     59c:	04 c0       	rjmp	.+8      	; 0x5a6 <i2c_receive+0xce>
     59e:	d7 de       	rcall	.-594    	; 0x34e <stopAndGetErrorCode>
     5a0:	1f c0       	rjmp	.+62     	; 0x5e0 <i2c_receive+0x108>
     5a2:	d5 de       	rcall	.-598    	; 0x34e <stopAndGetErrorCode>
     5a4:	1d c0       	rjmp	.+58     	; 0x5e0 <i2c_receive+0x108>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     5a6:	66 e0       	ldi	r22, 0x06	; 6
     5a8:	8c eb       	ldi	r24, 0xBC	; 188
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	48 d0       	rcall	.+144    	; 0x63e <clearBit>
     5ae:	cc eb       	ldi	r28, 0xBC	; 188
     5b0:	d0 e0       	ldi	r29, 0x00	; 0
     5b2:	88 81       	ld	r24, Y
	/* If NACK was sent, all is good */
	if ((TWSR & 0xF8) == I2C_DATA_READ_NACK)
     5b4:	67 e0       	ldi	r22, 0x07	; 7
     5b6:	50 d0       	rcall	.+160    	; 0x658 <checkBit>
     5b8:	88 23       	and	r24, r24
     5ba:	d9 f3       	breq	.-10     	; 0x5b2 <i2c_receive+0xda>
	{
		/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
		setBit(&TWCR, TWSTO);
     5bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5c0:	88 7f       	andi	r24, 0xF8	; 248
     5c2:	88 35       	cpi	r24, 0x58	; 88
     5c4:	61 f4       	brne	.+24     	; 0x5de <i2c_receive+0x106>
		/* Wait for stop condition to be sent. */
		while (checkBit(TWCR, TWSTO));
     5c6:	64 e0       	ldi	r22, 0x04	; 4
     5c8:	8c eb       	ldi	r24, 0xBC	; 188
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	2c d0       	rcall	.+88     	; 0x626 <setBit>
     5ce:	cc eb       	ldi	r28, 0xBC	; 188
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
     5d2:	88 81       	ld	r24, Y
     5d4:	64 e0       	ldi	r22, 0x04	; 4
     5d6:	40 d0       	rcall	.+128    	; 0x658 <checkBit>
	}

	return I2C_NO_ERROR;
     5d8:	81 11       	cpse	r24, r1
}
     5da:	fb cf       	rjmp	.-10     	; 0x5d2 <i2c_receive+0xfa>
     5dc:	01 c0       	rjmp	.+2      	; 0x5e0 <i2c_receive+0x108>
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	df 91       	pop	r29
     5e2:	cf 91       	pop	r28
     5e4:	1f 91       	pop	r17
     5e6:	0f 91       	pop	r16
     5e8:	ff 90       	pop	r15
     5ea:	ef 90       	pop	r14
     5ec:	df 90       	pop	r13
     5ee:	cf 90       	pop	r12
     5f0:	bf 90       	pop	r11
     5f2:	af 90       	pop	r10
     5f4:	08 95       	ret

000005f6 <updateBit>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     492:	fc 01       	movw	r30, r24
     494:	94 2f       	mov	r25, r20
     496:	20 81       	ld	r18, Z
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	06 2e       	mov	r0, r22
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <updateBit+0x12>
     4a0:	44 0f       	add	r20, r20
     4a2:	55 1f       	adc	r21, r21
     4a4:	0a 94       	dec	r0
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <updateBit+0xe>
     4a8:	40 95       	com	r20
     4aa:	50 95       	com	r21
     4ac:	24 23       	and	r18, r20
     4ae:	49 2f       	mov	r20, r25
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <updateBit+0x26>
     4b4:	44 0f       	add	r20, r20
     4b6:	55 1f       	adc	r21, r21
     4b8:	6a 95       	dec	r22
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <updateBit+0x22>
     4bc:	42 2b       	or	r20, r18
     4be:	40 83       	st	Z, r20
     4c0:	08 95       	ret

000004c2 <setBit>:
     4c2:	fc 01       	movw	r30, r24
     4c4:	40 81       	ld	r20, Z
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <setBit+0xe>
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	6a 95       	dec	r22
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <setBit+0xa>
     4d4:	24 2b       	or	r18, r20
     4d6:	20 83       	st	Z, r18
     4d8:	08 95       	ret

000004da <clearBit>:
     4da:	fc 01       	movw	r30, r24
     4dc:	90 81       	ld	r25, Z
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <clearBit+0xe>
     4e4:	22 0f       	add	r18, r18
     4e6:	33 1f       	adc	r19, r19
     4e8:	6a 95       	dec	r22
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <clearBit+0xa>
     4ec:	20 95       	com	r18
     4ee:	29 23       	and	r18, r25
     4f0:	20 83       	st	Z, r18
     4f2:	08 95       	ret

000004f4 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <checkBit+0x8>
     4f8:	95 95       	asr	r25
     4fa:	87 95       	ror	r24
     4fc:	6a 95       	dec	r22
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <checkBit+0x4>
}
     500:	81 70       	andi	r24, 0x01	; 1
     502:	08 95       	ret

00000504 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	69 01       	movw	r12, r18
     50e:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
<<<<<<< HEAD
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	2c 19       	sub	r18, r12
     516:	3d 09       	sbc	r19, r13
     518:	4e 09       	sbc	r20, r14
     51a:	5f 09       	sbc	r21, r15
     51c:	a8 ee       	ldi	r26, 0xE8	; 232
     51e:	b3 e0       	ldi	r27, 0x03	; 3
     520:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
     524:	a7 01       	movw	r20, r14
     526:	96 01       	movw	r18, r12
     528:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
     52c:	c9 01       	movw	r24, r18
     52e:	99 23       	and	r25, r25
     530:	24 f4       	brge	.+8      	; 0x53a <calculateError+0x36>
     532:	88 27       	eor	r24, r24
     534:	99 27       	eor	r25, r25
     536:	82 1b       	sub	r24, r18
     538:	93 0b       	sbc	r25, r19
=======
     674:	9b 01       	movw	r18, r22
     676:	ac 01       	movw	r20, r24
     678:	2c 19       	sub	r18, r12
     67a:	3d 09       	sbc	r19, r13
     67c:	4e 09       	sbc	r20, r14
     67e:	5f 09       	sbc	r21, r15
     680:	a8 ee       	ldi	r26, 0xE8	; 232
     682:	b3 e0       	ldi	r27, 0x03	; 3
     684:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
     688:	a7 01       	movw	r20, r14
     68a:	96 01       	movw	r18, r12
     68c:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
     690:	c9 01       	movw	r24, r18
     692:	99 23       	and	r25, r25
     694:	24 f4       	brge	.+8      	; 0x69e <calculateError+0x36>
     696:	88 27       	eor	r24, r24
     698:	99 27       	eor	r25, r25
     69a:	82 1b       	sub	r24, r18
     69c:	93 0b       	sbc	r25, r19
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
}
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	08 95       	ret

00000544 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     544:	1f 92       	push	r1
     546:	0f 92       	push	r0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	0b b6       	in	r0, 0x3b	; 59
     550:	0f 92       	push	r0
     552:	8f 93       	push	r24
     554:	9f 93       	push	r25
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     55a:	e0 91 72 08 	lds	r30, 0x0872	; 0x800872 <u8_RLastReceivedIndex>
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	8e b5       	in	r24, 0x2e	; 46
     562:	ed 58       	subi	r30, 0x8D	; 141
     564:	f7 4f       	sbci	r31, 0xF7	; 247
     566:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     568:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <u8_RLastReceivedIndex>
     56c:	89 30       	cpi	r24, 0x09	; 9
     56e:	30 f4       	brcc	.+12     	; 0x57c <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     570:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <u8_RLastReceivedIndex>
     574:	8f 5f       	subi	r24, 0xFF	; 255
     576:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <u8_RLastReceivedIndex>
     57a:	02 c0       	rjmp	.+4      	; 0x580 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     57c:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	80 93 71 08 	sts	0x0871, r24	; 0x800871 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     586:	90 91 6f 08 	lds	r25, 0x086F	; 0x80086f <u8_TLastTransmittedIndex>
     58a:	80 91 88 08 	lds	r24, 0x0888	; 0x800888 <u8_TLastRequestedIndex>
     58e:	98 17       	cp	r25, r24
     590:	a1 f0       	breq	.+40     	; 0x5ba <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     592:	e0 91 6f 08 	lds	r30, 0x086F	; 0x80086f <u8_TLastTransmittedIndex>
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	e3 58       	subi	r30, 0x83	; 131
     59a:	f7 4f       	sbci	r31, 0xF7	; 247
     59c:	80 81       	ld	r24, Z
     59e:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     5a0:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <u8_TLastTransmittedIndex>
     5a4:	89 30       	cpi	r24, 0x09	; 9
     5a6:	30 f4       	brcc	.+12     	; 0x5b4 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     5a8:	80 91 6f 08 	lds	r24, 0x086F	; 0x80086f <u8_TLastTransmittedIndex>
     5ac:	8f 5f       	subi	r24, 0xFF	; 255
     5ae:	80 93 6f 08 	sts	0x086F, r24	; 0x80086f <u8_TLastTransmittedIndex>
     5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     5b4:	10 92 6f 08 	sts	0x086F, r1	; 0x80086f <u8_TLastTransmittedIndex>
     5b8:	03 c0       	rjmp	.+6      	; 0x5c0 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	80 93 87 08 	sts	0x0887, r24	; 0x800887 <b_TAvailable>
	}
}
     5c0:	ff 91       	pop	r31
     5c2:	ef 91       	pop	r30
     5c4:	9f 91       	pop	r25
     5c6:	8f 91       	pop	r24
     5c8:	0f 90       	pop	r0
     5ca:	0b be       	out	0x3b, r0	; 59
     5cc:	0f 90       	pop	r0
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	0f 90       	pop	r0
     5d2:	1f 90       	pop	r1
     5d4:	18 95       	reti

000005d6 <__vector_15>:
}
#endif

#ifdef TIMER1_INTERRUPT_MODE
ISR(TIMER1_OVF_vect)
{
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	0b b6       	in	r0, 0x3b	; 59
     5e2:	0f 92       	push	r0
     5e4:	2f 93       	push	r18
     5e6:	3f 93       	push	r19
     5e8:	4f 93       	push	r20
     5ea:	5f 93       	push	r21
     5ec:	6f 93       	push	r22
     5ee:	7f 93       	push	r23
     5f0:	8f 93       	push	r24
     5f2:	9f 93       	push	r25
     5f4:	af 93       	push	r26
     5f6:	bf 93       	push	r27
     5f8:	ef 93       	push	r30
     5fa:	ff 93       	push	r31
	p_timer1Callbacks[OVERFLOW]();
     5fc:	e0 91 89 08 	lds	r30, 0x0889	; 0x800889 <p_timer1Callbacks>
     600:	f0 91 8a 08 	lds	r31, 0x088A	; 0x80088a <p_timer1Callbacks+0x1>
     604:	09 95       	icall
}
     606:	ff 91       	pop	r31
     608:	ef 91       	pop	r30
     60a:	bf 91       	pop	r27
     60c:	af 91       	pop	r26
     60e:	9f 91       	pop	r25
     610:	8f 91       	pop	r24
     612:	7f 91       	pop	r23
     614:	6f 91       	pop	r22
     616:	5f 91       	pop	r21
     618:	4f 91       	pop	r20
     61a:	3f 91       	pop	r19
     61c:	2f 91       	pop	r18
     61e:	0f 90       	pop	r0
     620:	0b be       	out	0x3b, r0	; 59
     622:	0f 90       	pop	r0
     624:	0f be       	out	0x3f, r0	; 63
     626:	0f 90       	pop	r0
     628:	1f 90       	pop	r1
     62a:	18 95       	reti

0000062c <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
     62c:	1f 92       	push	r1
     62e:	0f 92       	push	r0
     630:	0f b6       	in	r0, 0x3f	; 63
     632:	0f 92       	push	r0
     634:	11 24       	eor	r1, r1
     636:	0b b6       	in	r0, 0x3b	; 59
     638:	0f 92       	push	r0
     63a:	0f 93       	push	r16
     63c:	1f 93       	push	r17
     63e:	2f 93       	push	r18
     640:	3f 93       	push	r19
     642:	4f 93       	push	r20
     644:	5f 93       	push	r21
     646:	6f 93       	push	r22
     648:	7f 93       	push	r23
     64a:	8f 93       	push	r24
     64c:	9f 93       	push	r25
     64e:	af 93       	push	r26
     650:	bf 93       	push	r27
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	ef 93       	push	r30
     658:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     65a:	c1 e8       	ldi	r28, 0x81	; 129
     65c:	d0 e0       	ldi	r29, 0x00	; 0
     65e:	88 81       	ld	r24, Y
     660:	64 e0       	ldi	r22, 0x04	; 4
     662:	48 df       	rcall	.-368    	; 0x4f4 <checkBit>
     664:	18 2f       	mov	r17, r24
     666:	88 81       	ld	r24, Y
     668:	63 e0       	ldi	r22, 0x03	; 3
     66a:	44 df       	rcall	.-376    	; 0x4f4 <checkBit>
     66c:	c1 2f       	mov	r28, r17
     66e:	cc 0f       	add	r28, r28
     670:	cc 0f       	add	r28, r28
     672:	cc 0f       	add	r28, r28
     674:	24 e0       	ldi	r18, 0x04	; 4
     676:	82 9f       	mul	r24, r18
     678:	c0 01       	movw	r24, r0
     67a:	11 24       	eor	r1, r1
     67c:	c8 2b       	or	r28, r24
     67e:	00 e8       	ldi	r16, 0x80	; 128
     680:	10 e0       	ldi	r17, 0x00	; 0
     682:	f8 01       	movw	r30, r16
     684:	80 81       	ld	r24, Z
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	35 df       	rcall	.-406    	; 0x4f4 <checkBit>
     68a:	d8 2f       	mov	r29, r24
     68c:	f8 01       	movw	r30, r16
     68e:	80 81       	ld	r24, Z
     690:	60 e0       	ldi	r22, 0x00	; 0
     692:	30 df       	rcall	.-416    	; 0x4f4 <checkBit>
     694:	dd 0f       	add	r29, r29
     696:	8c 2b       	or	r24, r28
     698:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
     69a:	88 30       	cpi	r24, 0x08	; 8
     69c:	18 f4       	brcc	.+6      	; 0x6a4 <__vector_13+0x78>
     69e:	84 30       	cpi	r24, 0x04	; 4
     6a0:	19 f4       	brne	.+6      	; 0x6a8 <__vector_13+0x7c>
     6a2:	08 c0       	rjmp	.+16     	; 0x6b4 <__vector_13+0x88>
     6a4:	80 fd       	sbrc	r24, 0
     6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <__vector_13+0x88>
		p_timer1Callbacks[COMPARE_MATCH_A]();
     6a8:	e0 91 8b 08 	lds	r30, 0x088B	; 0x80088b <p_timer1Callbacks+0x2>
     6ac:	f0 91 8c 08 	lds	r31, 0x088C	; 0x80088c <p_timer1Callbacks+0x3>
     6b0:	09 95       	icall
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <__vector_13+0x92>
	else
		p_timer1Callbacks[OVERFLOW]();
     6b4:	e0 91 89 08 	lds	r30, 0x0889	; 0x800889 <p_timer1Callbacks>
     6b8:	f0 91 8a 08 	lds	r31, 0x088A	; 0x80088a <p_timer1Callbacks+0x1>
     6bc:	09 95       	icall
}
     6be:	ff 91       	pop	r31
     6c0:	ef 91       	pop	r30
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	bf 91       	pop	r27
     6c8:	af 91       	pop	r26
     6ca:	9f 91       	pop	r25
     6cc:	8f 91       	pop	r24
     6ce:	7f 91       	pop	r23
     6d0:	6f 91       	pop	r22
     6d2:	5f 91       	pop	r21
     6d4:	4f 91       	pop	r20
     6d6:	3f 91       	pop	r19
     6d8:	2f 91       	pop	r18
     6da:	1f 91       	pop	r17
     6dc:	0f 91       	pop	r16
     6de:	0f 90       	pop	r0
     6e0:	0b be       	out	0x3b, r0	; 59
     6e2:	0f 90       	pop	r0
     6e4:	0f be       	out	0x3f, r0	; 63
     6e6:	0f 90       	pop	r0
     6e8:	1f 90       	pop	r1
     6ea:	18 95       	reti

000006ec <__vector_14>:

ISR(TIMER1_COMPB_vect)
{
     6ec:	1f 92       	push	r1
     6ee:	0f 92       	push	r0
     6f0:	0f b6       	in	r0, 0x3f	; 63
     6f2:	0f 92       	push	r0
     6f4:	11 24       	eor	r1, r1
     6f6:	0b b6       	in	r0, 0x3b	; 59
     6f8:	0f 92       	push	r0
     6fa:	2f 93       	push	r18
     6fc:	3f 93       	push	r19
     6fe:	4f 93       	push	r20
     700:	5f 93       	push	r21
     702:	6f 93       	push	r22
     704:	7f 93       	push	r23
     706:	8f 93       	push	r24
     708:	9f 93       	push	r25
     70a:	af 93       	push	r26
     70c:	bf 93       	push	r27
     70e:	ef 93       	push	r30
     710:	ff 93       	push	r31
	p_timer1Callbacks[COMPARE_MATCH_B]();
     712:	e0 91 8d 08 	lds	r30, 0x088D	; 0x80088d <p_timer1Callbacks+0x4>
     716:	f0 91 8e 08 	lds	r31, 0x088E	; 0x80088e <p_timer1Callbacks+0x5>
     71a:	09 95       	icall
}
     71c:	ff 91       	pop	r31
     71e:	ef 91       	pop	r30
     720:	bf 91       	pop	r27
     722:	af 91       	pop	r26
     724:	9f 91       	pop	r25
     726:	8f 91       	pop	r24
     728:	7f 91       	pop	r23
     72a:	6f 91       	pop	r22
     72c:	5f 91       	pop	r21
     72e:	4f 91       	pop	r20
     730:	3f 91       	pop	r19
     732:	2f 91       	pop	r18
     734:	0f 90       	pop	r0
     736:	0b be       	out	0x3b, r0	; 59
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_12>:

ISR(TIMER1_CAPT_vect)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	0b b6       	in	r0, 0x3b	; 59
     74e:	0f 92       	push	r0
     750:	0f 93       	push	r16
     752:	1f 93       	push	r17
     754:	2f 93       	push	r18
     756:	3f 93       	push	r19
     758:	4f 93       	push	r20
     75a:	5f 93       	push	r21
     75c:	6f 93       	push	r22
     75e:	7f 93       	push	r23
     760:	8f 93       	push	r24
     762:	9f 93       	push	r25
     764:	af 93       	push	r26
     766:	bf 93       	push	r27
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ef 93       	push	r30
     76e:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     770:	c1 e8       	ldi	r28, 0x81	; 129
     772:	d0 e0       	ldi	r29, 0x00	; 0
     774:	88 81       	ld	r24, Y
     776:	64 e0       	ldi	r22, 0x04	; 4
     778:	bd de       	rcall	.-646    	; 0x4f4 <checkBit>
     77a:	18 2f       	mov	r17, r24
     77c:	88 81       	ld	r24, Y
     77e:	63 e0       	ldi	r22, 0x03	; 3
     780:	b9 de       	rcall	.-654    	; 0x4f4 <checkBit>
     782:	c1 2f       	mov	r28, r17
     784:	cc 0f       	add	r28, r28
     786:	cc 0f       	add	r28, r28
     788:	cc 0f       	add	r28, r28
     78a:	24 e0       	ldi	r18, 0x04	; 4
     78c:	82 9f       	mul	r24, r18
     78e:	c0 01       	movw	r24, r0
     790:	11 24       	eor	r1, r1
     792:	c8 2b       	or	r28, r24
     794:	00 e8       	ldi	r16, 0x80	; 128
     796:	10 e0       	ldi	r17, 0x00	; 0
     798:	f8 01       	movw	r30, r16
     79a:	80 81       	ld	r24, Z
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	aa de       	rcall	.-684    	; 0x4f4 <checkBit>
     7a0:	d8 2f       	mov	r29, r24
     7a2:	f8 01       	movw	r30, r16
     7a4:	80 81       	ld	r24, Z
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	a5 de       	rcall	.-694    	; 0x4f4 <checkBit>
     7aa:	dd 0f       	add	r29, r29
     7ac:	8c 2b       	or	r24, r28
     7ae:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
     7b0:	88 30       	cpi	r24, 0x08	; 8
     7b2:	10 f0       	brcs	.+4      	; 0x7b8 <__vector_12+0x76>
     7b4:	80 ff       	sbrs	r24, 0
     7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <__vector_12+0x82>
		p_timer1Callbacks[EXTERNAL]();
     7b8:	e0 91 8f 08 	lds	r30, 0x088F	; 0x80088f <p_timer1Callbacks+0x6>
     7bc:	f0 91 90 08 	lds	r31, 0x0890	; 0x800890 <p_timer1Callbacks+0x7>
     7c0:	09 95       	icall
     7c2:	05 c0       	rjmp	.+10     	; 0x7ce <__vector_12+0x8c>
	else
		p_timer1Callbacks[OVERFLOW]();
     7c4:	e0 91 89 08 	lds	r30, 0x0889	; 0x800889 <p_timer1Callbacks>
     7c8:	f0 91 8a 08 	lds	r31, 0x088A	; 0x80088a <p_timer1Callbacks+0x1>
     7cc:	09 95       	icall
}
     7ce:	ff 91       	pop	r31
     7d0:	ef 91       	pop	r30
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	7f 91       	pop	r23
     7e0:	6f 91       	pop	r22
     7e2:	5f 91       	pop	r21
     7e4:	4f 91       	pop	r20
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	0f 90       	pop	r0
     7f0:	0b be       	out	0x3b, r0	; 59
     7f2:	0f 90       	pop	r0
     7f4:	0f be       	out	0x3f, r0	; 63
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <__vector_11>:
#endif

#ifdef TIMER2_INTERRUPT_MODE
ISR(TIMER2_OVF_vect)
{
     7fc:	1f 92       	push	r1
     7fe:	0f 92       	push	r0
     800:	0f b6       	in	r0, 0x3f	; 63
     802:	0f 92       	push	r0
     804:	11 24       	eor	r1, r1
     806:	0b b6       	in	r0, 0x3b	; 59
     808:	0f 92       	push	r0
     80a:	2f 93       	push	r18
     80c:	3f 93       	push	r19
     80e:	4f 93       	push	r20
     810:	5f 93       	push	r21
     812:	6f 93       	push	r22
     814:	7f 93       	push	r23
     816:	8f 93       	push	r24
     818:	9f 93       	push	r25
     81a:	af 93       	push	r26
     81c:	bf 93       	push	r27
     81e:	ef 93       	push	r30
     820:	ff 93       	push	r31
	p_timer2Callbacks[OVERFLOW]();
     822:	e0 91 93 08 	lds	r30, 0x0893	; 0x800893 <p_timer2Callbacks>
     826:	f0 91 94 08 	lds	r31, 0x0894	; 0x800894 <p_timer2Callbacks+0x1>
     82a:	09 95       	icall
}
     82c:	ff 91       	pop	r31
     82e:	ef 91       	pop	r30
     830:	bf 91       	pop	r27
     832:	af 91       	pop	r26
     834:	9f 91       	pop	r25
     836:	8f 91       	pop	r24
     838:	7f 91       	pop	r23
     83a:	6f 91       	pop	r22
     83c:	5f 91       	pop	r21
     83e:	4f 91       	pop	r20
     840:	3f 91       	pop	r19
     842:	2f 91       	pop	r18
     844:	0f 90       	pop	r0
     846:	0b be       	out	0x3b, r0	; 59
     848:	0f 90       	pop	r0
     84a:	0f be       	out	0x3f, r0	; 63
     84c:	0f 90       	pop	r0
     84e:	1f 90       	pop	r1
     850:	18 95       	reti

00000852 <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     852:	1f 92       	push	r1
     854:	0f 92       	push	r0
     856:	0f b6       	in	r0, 0x3f	; 63
     858:	0f 92       	push	r0
     85a:	11 24       	eor	r1, r1
     85c:	0b b6       	in	r0, 0x3b	; 59
     85e:	0f 92       	push	r0
     860:	2f 93       	push	r18
     862:	3f 93       	push	r19
     864:	4f 93       	push	r20
     866:	5f 93       	push	r21
     868:	6f 93       	push	r22
     86a:	7f 93       	push	r23
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	af 93       	push	r26
     872:	bf 93       	push	r27
     874:	ef 93       	push	r30
     876:	ff 93       	push	r31
	if ((checkBit(TCCR2B, WGM22) == CLEAR) && ((TCCR2A & 0b11) != 0b10))
     878:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     87c:	63 e0       	ldi	r22, 0x03	; 3
     87e:	3a de       	rcall	.-908    	; 0x4f4 <checkBit>
     880:	81 11       	cpse	r24, r1
     882:	0b c0       	rjmp	.+22     	; 0x89a <__vector_9+0x48>
     884:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     888:	83 70       	andi	r24, 0x03	; 3
     88a:	82 30       	cpi	r24, 0x02	; 2
     88c:	31 f0       	breq	.+12     	; 0x89a <__vector_9+0x48>
		p_timer2Callbacks[COMPARE_MATCH_A]();
     88e:	e0 91 95 08 	lds	r30, 0x0895	; 0x800895 <p_timer2Callbacks+0x2>
     892:	f0 91 96 08 	lds	r31, 0x0896	; 0x800896 <p_timer2Callbacks+0x3>
     896:	09 95       	icall
     898:	05 c0       	rjmp	.+10     	; 0x8a4 <__vector_9+0x52>
	else
		p_timer2Callbacks[OVERFLOW]();
     89a:	e0 91 93 08 	lds	r30, 0x0893	; 0x800893 <p_timer2Callbacks>
     89e:	f0 91 94 08 	lds	r31, 0x0894	; 0x800894 <p_timer2Callbacks+0x1>
     8a2:	09 95       	icall
}
     8a4:	ff 91       	pop	r31
     8a6:	ef 91       	pop	r30
     8a8:	bf 91       	pop	r27
     8aa:	af 91       	pop	r26
     8ac:	9f 91       	pop	r25
     8ae:	8f 91       	pop	r24
     8b0:	7f 91       	pop	r23
     8b2:	6f 91       	pop	r22
     8b4:	5f 91       	pop	r21
     8b6:	4f 91       	pop	r20
     8b8:	3f 91       	pop	r19
     8ba:	2f 91       	pop	r18
     8bc:	0f 90       	pop	r0
     8be:	0b be       	out	0x3b, r0	; 59
     8c0:	0f 90       	pop	r0
     8c2:	0f be       	out	0x3f, r0	; 63
     8c4:	0f 90       	pop	r0
     8c6:	1f 90       	pop	r1
     8c8:	18 95       	reti

000008ca <__vector_10>:

ISR(TIMER2_COMPB_vect)
{
     8ca:	1f 92       	push	r1
     8cc:	0f 92       	push	r0
     8ce:	0f b6       	in	r0, 0x3f	; 63
     8d0:	0f 92       	push	r0
     8d2:	11 24       	eor	r1, r1
     8d4:	0b b6       	in	r0, 0x3b	; 59
     8d6:	0f 92       	push	r0
     8d8:	2f 93       	push	r18
     8da:	3f 93       	push	r19
     8dc:	4f 93       	push	r20
     8de:	5f 93       	push	r21
     8e0:	6f 93       	push	r22
     8e2:	7f 93       	push	r23
     8e4:	8f 93       	push	r24
     8e6:	9f 93       	push	r25
     8e8:	af 93       	push	r26
     8ea:	bf 93       	push	r27
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
	p_timer2Callbacks[COMPARE_MATCH_B]();
     8f0:	e0 91 97 08 	lds	r30, 0x0897	; 0x800897 <p_timer2Callbacks+0x4>
     8f4:	f0 91 98 08 	lds	r31, 0x0898	; 0x800898 <p_timer2Callbacks+0x5>
     8f8:	09 95       	icall
}
     8fa:	ff 91       	pop	r31
     8fc:	ef 91       	pop	r30
     8fe:	bf 91       	pop	r27
     900:	af 91       	pop	r26
     902:	9f 91       	pop	r25
     904:	8f 91       	pop	r24
     906:	7f 91       	pop	r23
     908:	6f 91       	pop	r22
     90a:	5f 91       	pop	r21
     90c:	4f 91       	pop	r20
     90e:	3f 91       	pop	r19
     910:	2f 91       	pop	r18
     912:	0f 90       	pop	r0
     914:	0b be       	out	0x3b, r0	; 59
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
<<<<<<< HEAD
     920:	4f 92       	push	r4
     922:	5f 92       	push	r5
     924:	6f 92       	push	r6
     926:	7f 92       	push	r7
     928:	8f 92       	push	r8
     92a:	9f 92       	push	r9
     92c:	af 92       	push	r10
     92e:	bf 92       	push	r11
     930:	cf 92       	push	r12
     932:	df 92       	push	r13
     934:	ef 92       	push	r14
     936:	ff 92       	push	r15
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	4b 01       	movw	r8, r22
     93e:	5c 01       	movw	r10, r24
     940:	ea 01       	movw	r28, r20
     942:	0f 2e       	mov	r0, r31
     944:	f0 e2       	ldi	r31, 0x20	; 32
     946:	4f 2e       	mov	r4, r31
     948:	f1 ea       	ldi	r31, 0xA1	; 161
     94a:	5f 2e       	mov	r5, r31
     94c:	f7 e0       	ldi	r31, 0x07	; 7
     94e:	6f 2e       	mov	r6, r31
     950:	71 2c       	mov	r7, r1
     952:	f0 2d       	mov	r31, r0
     954:	c3 01       	movw	r24, r6
     956:	b2 01       	movw	r22, r4
     958:	a5 01       	movw	r20, r10
     95a:	94 01       	movw	r18, r8
     95c:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
     960:	69 01       	movw	r12, r18
     962:	7a 01       	movw	r14, r20
     964:	c3 01       	movw	r24, r6
     966:	b2 01       	movw	r22, r4
     968:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
     96c:	ca 01       	movw	r24, r20
     96e:	b9 01       	movw	r22, r18
     970:	a5 01       	movw	r20, r10
     972:	94 01       	movw	r18, r8
     974:	c7 dd       	rcall	.-1138   	; 0x504 <calculateError>
     976:	44 97       	sbiw	r24, 0x14	; 20
     978:	30 f4       	brcc	.+12     	; 0x986 <calculateUBRR+0x66>
     97a:	d7 01       	movw	r26, r14
     97c:	c6 01       	movw	r24, r12
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	a1 09       	sbc	r26, r1
     982:	b1 09       	sbc	r27, r1
     984:	0f c0       	rjmp	.+30     	; 0x9a4 <calculateUBRR+0x84>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	88 83       	st	Y, r24
     98a:	60 e4       	ldi	r22, 0x40	; 64
     98c:	72 e4       	ldi	r23, 0x42	; 66
     98e:	8f e0       	ldi	r24, 0x0F	; 15
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	a5 01       	movw	r20, r10
     994:	94 01       	movw	r18, r8
     996:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
     99a:	da 01       	movw	r26, r20
     99c:	c9 01       	movw	r24, r18
     99e:	01 97       	sbiw	r24, 0x01	; 1
     9a0:	a1 09       	sbc	r26, r1
     9a2:	b1 09       	sbc	r27, r1
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	bf 90       	pop	r11
     9b2:	af 90       	pop	r10
     9b4:	9f 90       	pop	r9
     9b6:	8f 90       	pop	r8
     9b8:	7f 90       	pop	r7
     9ba:	6f 90       	pop	r6
     9bc:	5f 90       	pop	r5
     9be:	4f 90       	pop	r4
     9c0:	08 95       	ret

000009c2 <uart_init>:
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	cd b7       	in	r28, 0x3d	; 61
     9cc:	de b7       	in	r29, 0x3e	; 62
     9ce:	2b 97       	sbiw	r28, 0x0b	; 11
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	f8 94       	cli
     9d4:	de bf       	out	0x3e, r29	; 62
     9d6:	0f be       	out	0x3f, r0	; 63
     9d8:	cd bf       	out	0x3d, r28	; 61
     9da:	0a 83       	std	Y+2, r16	; 0x02
     9dc:	1b 83       	std	Y+3, r17	; 0x03
     9de:	2c 83       	std	Y+4, r18	; 0x04
     9e0:	3d 83       	std	Y+5, r19	; 0x05
     9e2:	4e 83       	std	Y+6, r20	; 0x06
     9e4:	5f 83       	std	Y+7, r21	; 0x07
     9e6:	68 87       	std	Y+8, r22	; 0x08
     9e8:	79 87       	std	Y+9, r23	; 0x09
     9ea:	8a 87       	std	Y+10, r24	; 0x0a
     9ec:	9b 87       	std	Y+11, r25	; 0x0b
     9ee:	19 82       	std	Y+1, r1	; 0x01
     9f0:	01 11       	cpse	r16, r1
     9f2:	7c c0       	rjmp	.+248    	; 0xaec <uart_init+0x12a>
     9f4:	19 2f       	mov	r17, r25
     9f6:	e2 ec       	ldi	r30, 0xC2	; 194
     9f8:	f0 e0       	ldi	r31, 0x00	; 0
     9fa:	80 81       	ld	r24, Z
     9fc:	8f 73       	andi	r24, 0x3F	; 63
     9fe:	80 83       	st	Z, r24
     a00:	6b 81       	ldd	r22, Y+3	; 0x03
     a02:	7c 81       	ldd	r23, Y+4	; 0x04
     a04:	8d 81       	ldd	r24, Y+5	; 0x05
     a06:	9e 81       	ldd	r25, Y+6	; 0x06
     a08:	ae 01       	movw	r20, r28
     a0a:	4f 5f       	subi	r20, 0xFF	; 255
     a0c:	5f 4f       	sbci	r21, 0xFF	; 255
     a0e:	88 df       	rcall	.-240    	; 0x920 <calculateUBRR>
     a10:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     a14:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     a18:	49 81       	ldd	r20, Y+1	; 0x01
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	80 ec       	ldi	r24, 0xC0	; 192
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	38 dd       	rcall	.-1424   	; 0x492 <updateBit>
     a22:	89 85       	ldd	r24, Y+9	; 0x09
     a24:	82 30       	cpi	r24, 0x02	; 2
     a26:	31 f1       	breq	.+76     	; 0xa74 <uart_init+0xb2>
     a28:	28 f4       	brcc	.+10     	; 0xa34 <uart_init+0x72>
     a2a:	88 23       	and	r24, r24
     a2c:	49 f0       	breq	.+18     	; 0xa40 <uart_init+0x7e>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	a1 f0       	breq	.+40     	; 0xa5a <uart_init+0x98>
     a32:	46 c0       	rjmp	.+140    	; 0xac0 <uart_init+0xfe>
     a34:	83 30       	cpi	r24, 0x03	; 3
     a36:	59 f1       	breq	.+86     	; 0xa8e <uart_init+0xcc>
     a38:	84 30       	cpi	r24, 0x04	; 4
     a3a:	09 f4       	brne	.+2      	; 0xa3e <uart_init+0x7c>
     a3c:	35 c0       	rjmp	.+106    	; 0xaa8 <uart_init+0xe6>
     a3e:	40 c0       	rjmp	.+128    	; 0xac0 <uart_init+0xfe>
     a40:	61 e0       	ldi	r22, 0x01	; 1
     a42:	82 ec       	ldi	r24, 0xC2	; 194
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	49 dd       	rcall	.-1390   	; 0x4da <clearBit>
     a48:	62 e0       	ldi	r22, 0x02	; 2
     a4a:	82 ec       	ldi	r24, 0xC2	; 194
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	45 dd       	rcall	.-1398   	; 0x4da <clearBit>
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	81 ec       	ldi	r24, 0xC1	; 193
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	41 dd       	rcall	.-1406   	; 0x4da <clearBit>
     a58:	33 c0       	rjmp	.+102    	; 0xac0 <uart_init+0xfe>
     a5a:	61 e0       	ldi	r22, 0x01	; 1
     a5c:	82 ec       	ldi	r24, 0xC2	; 194
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	30 dd       	rcall	.-1440   	; 0x4c2 <setBit>
     a62:	62 e0       	ldi	r22, 0x02	; 2
     a64:	82 ec       	ldi	r24, 0xC2	; 194
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	38 dd       	rcall	.-1424   	; 0x4da <clearBit>
     a6a:	62 e0       	ldi	r22, 0x02	; 2
     a6c:	81 ec       	ldi	r24, 0xC1	; 193
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	34 dd       	rcall	.-1432   	; 0x4da <clearBit>
     a72:	26 c0       	rjmp	.+76     	; 0xac0 <uart_init+0xfe>
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	82 ec       	ldi	r24, 0xC2	; 194
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2f dd       	rcall	.-1442   	; 0x4da <clearBit>
     a7c:	62 e0       	ldi	r22, 0x02	; 2
     a7e:	82 ec       	ldi	r24, 0xC2	; 194
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	1f dd       	rcall	.-1474   	; 0x4c2 <setBit>
     a84:	62 e0       	ldi	r22, 0x02	; 2
     a86:	81 ec       	ldi	r24, 0xC1	; 193
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	27 dd       	rcall	.-1458   	; 0x4da <clearBit>
     a8c:	19 c0       	rjmp	.+50     	; 0xac0 <uart_init+0xfe>
     a8e:	61 e0       	ldi	r22, 0x01	; 1
     a90:	82 ec       	ldi	r24, 0xC2	; 194
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	16 dd       	rcall	.-1492   	; 0x4c2 <setBit>
     a96:	62 e0       	ldi	r22, 0x02	; 2
     a98:	82 ec       	ldi	r24, 0xC2	; 194
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	12 dd       	rcall	.-1500   	; 0x4c2 <setBit>
     a9e:	62 e0       	ldi	r22, 0x02	; 2
     aa0:	81 ec       	ldi	r24, 0xC1	; 193
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	1a dd       	rcall	.-1484   	; 0x4da <clearBit>
     aa6:	0c c0       	rjmp	.+24     	; 0xac0 <uart_init+0xfe>
     aa8:	61 e0       	ldi	r22, 0x01	; 1
     aaa:	82 ec       	ldi	r24, 0xC2	; 194
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	09 dd       	rcall	.-1518   	; 0x4c2 <setBit>
     ab0:	62 e0       	ldi	r22, 0x02	; 2
     ab2:	82 ec       	ldi	r24, 0xC2	; 194
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	05 dd       	rcall	.-1526   	; 0x4c2 <setBit>
     ab8:	62 e0       	ldi	r22, 0x02	; 2
     aba:	81 ec       	ldi	r24, 0xC1	; 193
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	01 dd       	rcall	.-1534   	; 0x4c2 <setBit>
     ac0:	4a 85       	ldd	r20, Y+10	; 0x0a
     ac2:	63 e0       	ldi	r22, 0x03	; 3
     ac4:	82 ec       	ldi	r24, 0xC2	; 194
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	e4 dc       	rcall	.-1592   	; 0x492 <updateBit>
     aca:	12 30       	cpi	r17, 0x02	; 2
     acc:	31 f4       	brne	.+12     	; 0xada <uart_init+0x118>
     ace:	e2 ec       	ldi	r30, 0xC2	; 194
     ad0:	f0 e0       	ldi	r31, 0x00	; 0
     ad2:	80 81       	ld	r24, Z
     ad4:	8f 7c       	andi	r24, 0xCF	; 207
     ad6:	80 83       	st	Z, r24
     ad8:	09 c0       	rjmp	.+18     	; 0xaec <uart_init+0x12a>
     ada:	65 e0       	ldi	r22, 0x05	; 5
     adc:	82 ec       	ldi	r24, 0xC2	; 194
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	f0 dc       	rcall	.-1568   	; 0x4c2 <setBit>
     ae2:	41 2f       	mov	r20, r17
     ae4:	64 e0       	ldi	r22, 0x04	; 4
     ae6:	82 ec       	ldi	r24, 0xC2	; 194
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	d3 dc       	rcall	.-1626   	; 0x492 <updateBit>
     aec:	2b 96       	adiw	r28, 0x0b	; 11
     aee:	0f b6       	in	r0, 0x3f	; 63
     af0:	f8 94       	cli
     af2:	de bf       	out	0x3e, r29	; 62
     af4:	0f be       	out	0x3f, r0	; 63
     af6:	cd bf       	out	0x3d, r28	; 61
     af8:	df 91       	pop	r29
     afa:	cf 91       	pop	r28
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	08 95       	ret

00000b02 <uart_start>:
     b02:	0f 93       	push	r16
     b04:	1f 93       	push	r17
     b06:	cf 93       	push	r28
     b08:	df 93       	push	r29
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	2a 97       	sbiw	r28, 0x0a	; 10
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	6f 83       	std	Y+7, r22	; 0x07
     b1c:	01 11       	cpse	r16, r1
     b1e:	0a c0       	rjmp	.+20     	; 0xb34 <uart_start+0x32>
     b20:	45 2f       	mov	r20, r21
     b22:	64 e0       	ldi	r22, 0x04	; 4
     b24:	81 ec       	ldi	r24, 0xC1	; 193
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	b4 dc       	rcall	.-1688   	; 0x492 <updateBit>
     b2a:	4f 81       	ldd	r20, Y+7	; 0x07
     b2c:	63 e0       	ldi	r22, 0x03	; 3
     b2e:	81 ec       	ldi	r24, 0xC1	; 193
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	af dc       	rcall	.-1698   	; 0x492 <updateBit>
     b34:	2a 96       	adiw	r28, 0x0a	; 10
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <uart_transmit>:
=======
     a84:	4f 92       	push	r4
     a86:	5f 92       	push	r5
     a88:	6f 92       	push	r6
     a8a:	7f 92       	push	r7
     a8c:	8f 92       	push	r8
     a8e:	9f 92       	push	r9
     a90:	af 92       	push	r10
     a92:	bf 92       	push	r11
     a94:	cf 92       	push	r12
     a96:	df 92       	push	r13
     a98:	ef 92       	push	r14
     a9a:	ff 92       	push	r15
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	4b 01       	movw	r8, r22
     aa2:	5c 01       	movw	r10, r24
     aa4:	ea 01       	movw	r28, r20
     aa6:	0f 2e       	mov	r0, r31
     aa8:	f0 e2       	ldi	r31, 0x20	; 32
     aaa:	4f 2e       	mov	r4, r31
     aac:	f1 ea       	ldi	r31, 0xA1	; 161
     aae:	5f 2e       	mov	r5, r31
     ab0:	f7 e0       	ldi	r31, 0x07	; 7
     ab2:	6f 2e       	mov	r6, r31
     ab4:	71 2c       	mov	r7, r1
     ab6:	f0 2d       	mov	r31, r0
     ab8:	c3 01       	movw	r24, r6
     aba:	b2 01       	movw	r22, r4
     abc:	a5 01       	movw	r20, r10
     abe:	94 01       	movw	r18, r8
     ac0:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
     ac4:	69 01       	movw	r12, r18
     ac6:	7a 01       	movw	r14, r20
     ac8:	c3 01       	movw	r24, r6
     aca:	b2 01       	movw	r22, r4
     acc:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
     ad0:	ca 01       	movw	r24, r20
     ad2:	b9 01       	movw	r22, r18
     ad4:	a5 01       	movw	r20, r10
     ad6:	94 01       	movw	r18, r8
     ad8:	c7 dd       	rcall	.-1138   	; 0x668 <calculateError>
     ada:	44 97       	sbiw	r24, 0x14	; 20
     adc:	30 f4       	brcc	.+12     	; 0xaea <calculateUBRR+0x66>
     ade:	d7 01       	movw	r26, r14
     ae0:	c6 01       	movw	r24, r12
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	a1 09       	sbc	r26, r1
     ae6:	b1 09       	sbc	r27, r1
     ae8:	0f c0       	rjmp	.+30     	; 0xb08 <calculateUBRR+0x84>
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	88 83       	st	Y, r24
     aee:	60 e4       	ldi	r22, 0x40	; 64
     af0:	72 e4       	ldi	r23, 0x42	; 66
     af2:	8f e0       	ldi	r24, 0x0F	; 15
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	a5 01       	movw	r20, r10
     af8:	94 01       	movw	r18, r8
     afa:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
     afe:	da 01       	movw	r26, r20
     b00:	c9 01       	movw	r24, r18
     b02:	01 97       	sbiw	r24, 0x01	; 1
     b04:	a1 09       	sbc	r26, r1
     b06:	b1 09       	sbc	r27, r1
     b08:	df 91       	pop	r29
     b0a:	cf 91       	pop	r28
     b0c:	ff 90       	pop	r15
     b0e:	ef 90       	pop	r14
     b10:	df 90       	pop	r13
     b12:	cf 90       	pop	r12
     b14:	bf 90       	pop	r11
     b16:	af 90       	pop	r10
     b18:	9f 90       	pop	r9
     b1a:	8f 90       	pop	r8
     b1c:	7f 90       	pop	r7
     b1e:	6f 90       	pop	r6
     b20:	5f 90       	pop	r5
     b22:	4f 90       	pop	r4
     b24:	08 95       	ret

00000b26 <uart_init>:
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
     b32:	2b 97       	sbiw	r28, 0x0b	; 11
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	0a 83       	std	Y+2, r16	; 0x02
     b40:	1b 83       	std	Y+3, r17	; 0x03
     b42:	2c 83       	std	Y+4, r18	; 0x04
     b44:	3d 83       	std	Y+5, r19	; 0x05
     b46:	4e 83       	std	Y+6, r20	; 0x06
     b48:	5f 83       	std	Y+7, r21	; 0x07
     b4a:	68 87       	std	Y+8, r22	; 0x08
     b4c:	79 87       	std	Y+9, r23	; 0x09
     b4e:	8a 87       	std	Y+10, r24	; 0x0a
     b50:	9b 87       	std	Y+11, r25	; 0x0b
     b52:	19 82       	std	Y+1, r1	; 0x01
     b54:	01 11       	cpse	r16, r1
     b56:	7c c0       	rjmp	.+248    	; 0xc50 <uart_init+0x12a>
     b58:	19 2f       	mov	r17, r25
     b5a:	e2 ec       	ldi	r30, 0xC2	; 194
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	80 81       	ld	r24, Z
     b60:	8f 73       	andi	r24, 0x3F	; 63
     b62:	80 83       	st	Z, r24
     b64:	6b 81       	ldd	r22, Y+3	; 0x03
     b66:	7c 81       	ldd	r23, Y+4	; 0x04
     b68:	8d 81       	ldd	r24, Y+5	; 0x05
     b6a:	9e 81       	ldd	r25, Y+6	; 0x06
     b6c:	ae 01       	movw	r20, r28
     b6e:	4f 5f       	subi	r20, 0xFF	; 255
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
     b72:	88 df       	rcall	.-240    	; 0xa84 <calculateUBRR>
     b74:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     b78:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     b7c:	49 81       	ldd	r20, Y+1	; 0x01
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	80 ec       	ldi	r24, 0xC0	; 192
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	38 dd       	rcall	.-1424   	; 0x5f6 <updateBit>
     b86:	89 85       	ldd	r24, Y+9	; 0x09
     b88:	82 30       	cpi	r24, 0x02	; 2
     b8a:	31 f1       	breq	.+76     	; 0xbd8 <uart_init+0xb2>
     b8c:	28 f4       	brcc	.+10     	; 0xb98 <uart_init+0x72>
     b8e:	88 23       	and	r24, r24
     b90:	49 f0       	breq	.+18     	; 0xba4 <uart_init+0x7e>
     b92:	81 30       	cpi	r24, 0x01	; 1
     b94:	a1 f0       	breq	.+40     	; 0xbbe <uart_init+0x98>
     b96:	46 c0       	rjmp	.+140    	; 0xc24 <uart_init+0xfe>
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	59 f1       	breq	.+86     	; 0xbf2 <uart_init+0xcc>
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	09 f4       	brne	.+2      	; 0xba2 <uart_init+0x7c>
     ba0:	35 c0       	rjmp	.+106    	; 0xc0c <uart_init+0xe6>
     ba2:	40 c0       	rjmp	.+128    	; 0xc24 <uart_init+0xfe>
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	82 ec       	ldi	r24, 0xC2	; 194
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	49 dd       	rcall	.-1390   	; 0x63e <clearBit>
     bac:	62 e0       	ldi	r22, 0x02	; 2
     bae:	82 ec       	ldi	r24, 0xC2	; 194
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	45 dd       	rcall	.-1398   	; 0x63e <clearBit>
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	81 ec       	ldi	r24, 0xC1	; 193
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	41 dd       	rcall	.-1406   	; 0x63e <clearBit>
     bbc:	33 c0       	rjmp	.+102    	; 0xc24 <uart_init+0xfe>
     bbe:	61 e0       	ldi	r22, 0x01	; 1
     bc0:	82 ec       	ldi	r24, 0xC2	; 194
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	30 dd       	rcall	.-1440   	; 0x626 <setBit>
     bc6:	62 e0       	ldi	r22, 0x02	; 2
     bc8:	82 ec       	ldi	r24, 0xC2	; 194
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	38 dd       	rcall	.-1424   	; 0x63e <clearBit>
     bce:	62 e0       	ldi	r22, 0x02	; 2
     bd0:	81 ec       	ldi	r24, 0xC1	; 193
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	34 dd       	rcall	.-1432   	; 0x63e <clearBit>
     bd6:	26 c0       	rjmp	.+76     	; 0xc24 <uart_init+0xfe>
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	82 ec       	ldi	r24, 0xC2	; 194
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	2f dd       	rcall	.-1442   	; 0x63e <clearBit>
     be0:	62 e0       	ldi	r22, 0x02	; 2
     be2:	82 ec       	ldi	r24, 0xC2	; 194
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	1f dd       	rcall	.-1474   	; 0x626 <setBit>
     be8:	62 e0       	ldi	r22, 0x02	; 2
     bea:	81 ec       	ldi	r24, 0xC1	; 193
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	27 dd       	rcall	.-1458   	; 0x63e <clearBit>
     bf0:	19 c0       	rjmp	.+50     	; 0xc24 <uart_init+0xfe>
     bf2:	61 e0       	ldi	r22, 0x01	; 1
     bf4:	82 ec       	ldi	r24, 0xC2	; 194
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	16 dd       	rcall	.-1492   	; 0x626 <setBit>
     bfa:	62 e0       	ldi	r22, 0x02	; 2
     bfc:	82 ec       	ldi	r24, 0xC2	; 194
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	12 dd       	rcall	.-1500   	; 0x626 <setBit>
     c02:	62 e0       	ldi	r22, 0x02	; 2
     c04:	81 ec       	ldi	r24, 0xC1	; 193
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	1a dd       	rcall	.-1484   	; 0x63e <clearBit>
     c0a:	0c c0       	rjmp	.+24     	; 0xc24 <uart_init+0xfe>
     c0c:	61 e0       	ldi	r22, 0x01	; 1
     c0e:	82 ec       	ldi	r24, 0xC2	; 194
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	09 dd       	rcall	.-1518   	; 0x626 <setBit>
     c14:	62 e0       	ldi	r22, 0x02	; 2
     c16:	82 ec       	ldi	r24, 0xC2	; 194
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	05 dd       	rcall	.-1526   	; 0x626 <setBit>
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	81 ec       	ldi	r24, 0xC1	; 193
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	01 dd       	rcall	.-1534   	; 0x626 <setBit>
     c24:	4a 85       	ldd	r20, Y+10	; 0x0a
     c26:	63 e0       	ldi	r22, 0x03	; 3
     c28:	82 ec       	ldi	r24, 0xC2	; 194
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	e4 dc       	rcall	.-1592   	; 0x5f6 <updateBit>
     c2e:	12 30       	cpi	r17, 0x02	; 2
     c30:	31 f4       	brne	.+12     	; 0xc3e <uart_init+0x118>
     c32:	e2 ec       	ldi	r30, 0xC2	; 194
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	8f 7c       	andi	r24, 0xCF	; 207
     c3a:	80 83       	st	Z, r24
     c3c:	09 c0       	rjmp	.+18     	; 0xc50 <uart_init+0x12a>
     c3e:	65 e0       	ldi	r22, 0x05	; 5
     c40:	82 ec       	ldi	r24, 0xC2	; 194
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	f0 dc       	rcall	.-1568   	; 0x626 <setBit>
     c46:	41 2f       	mov	r20, r17
     c48:	64 e0       	ldi	r22, 0x04	; 4
     c4a:	82 ec       	ldi	r24, 0xC2	; 194
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	d3 dc       	rcall	.-1626   	; 0x5f6 <updateBit>
     c50:	2b 96       	adiw	r28, 0x0b	; 11
     c52:	0f b6       	in	r0, 0x3f	; 63
     c54:	f8 94       	cli
     c56:	de bf       	out	0x3e, r29	; 62
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	cd bf       	out	0x3d, r28	; 61
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret

00000c66 <uart_start>:
     c66:	0f 93       	push	r16
     c68:	1f 93       	push	r17
     c6a:	cf 93       	push	r28
     c6c:	df 93       	push	r29
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	2a 97       	sbiw	r28, 0x0a	; 10
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	6f 83       	std	Y+7, r22	; 0x07
     c80:	01 11       	cpse	r16, r1
     c82:	0a c0       	rjmp	.+20     	; 0xc98 <uart_start+0x32>
     c84:	45 2f       	mov	r20, r21
     c86:	64 e0       	ldi	r22, 0x04	; 4
     c88:	81 ec       	ldi	r24, 0xC1	; 193
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	b4 dc       	rcall	.-1688   	; 0x5f6 <updateBit>
     c8e:	4f 81       	ldd	r20, Y+7	; 0x07
     c90:	63 e0       	ldi	r22, 0x03	; 3
     c92:	81 ec       	ldi	r24, 0xC1	; 193
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	af dc       	rcall	.-1698   	; 0x5f6 <updateBit>
     c98:	2a 96       	adiw	r28, 0x0a	; 10
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	08 95       	ret

00000cae <uart_transmit>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
     b4a:	ef 92       	push	r14
     b4c:	ff 92       	push	r15
     b4e:	0f 93       	push	r16
     b50:	1f 93       	push	r17
     b52:	cf 93       	push	r28
     b54:	df 93       	push	r29
     b56:	cd b7       	in	r28, 0x3d	; 61
     b58:	de b7       	in	r29, 0x3e	; 62
     b5a:	2a 97       	sbiw	r28, 0x0a	; 10
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	f8 94       	cli
     b60:	de bf       	out	0x3e, r29	; 62
     b62:	0f be       	out	0x3f, r0	; 63
     b64:	cd bf       	out	0x3d, r28	; 61
     b66:	09 83       	std	Y+1, r16	; 0x01
     b68:	1a 83       	std	Y+2, r17	; 0x02
     b6a:	2b 83       	std	Y+3, r18	; 0x03
     b6c:	3c 83       	std	Y+4, r19	; 0x04
     b6e:	4d 83       	std	Y+5, r20	; 0x05
     b70:	5e 83       	std	Y+6, r21	; 0x06
     b72:	6f 83       	std	Y+7, r22	; 0x07
     b74:	78 87       	std	Y+8, r23	; 0x08
     b76:	89 87       	std	Y+9, r24	; 0x09
     b78:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
     b7a:	01 11       	cpse	r16, r1
     b7c:	13 c0       	rjmp	.+38     	; 0xba4 <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
     b7e:	00 ec       	ldi	r16, 0xC0	; 192
     b80:	10 e0       	ldi	r17, 0x00	; 0
     b82:	f8 01       	movw	r30, r16
     b84:	80 81       	ld	r24, Z
     b86:	65 e0       	ldi	r22, 0x05	; 5
     b88:	b5 dc       	rcall	.-1686   	; 0x4f4 <checkBit>
     b8a:	88 23       	and	r24, r24
     b8c:	d1 f3       	breq	.-12     	; 0xb82 <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
     b8e:	88 85       	ldd	r24, Y+8	; 0x08
     b90:	84 30       	cpi	r24, 0x04	; 4
     b92:	31 f4       	brne	.+12     	; 0xba0 <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
     b94:	4f 2d       	mov	r20, r15
     b96:	41 70       	andi	r20, 0x01	; 1
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	81 ec       	ldi	r24, 0xC1	; 193
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	79 dc       	rcall	.-1806   	; 0x492 <updateBit>
			UDR0 = (u8) u16_data;
     ba0:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
     ba4:	2a 96       	adiw	r28, 0x0a	; 10
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	f8 94       	cli
     baa:	de bf       	out	0x3e, r29	; 62
     bac:	0f be       	out	0x3f, r0	; 63
     bae:	cd bf       	out	0x3d, r28	; 61
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	1f 91       	pop	r17
     bb6:	0f 91       	pop	r16
     bb8:	ff 90       	pop	r15
     bba:	ef 90       	pop	r14
     bbc:	08 95       	ret

00000bbe <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
     bbe:	1f 92       	push	r1
     bc0:	0f 92       	push	r0
     bc2:	0f b6       	in	r0, 0x3f	; 63
     bc4:	0f 92       	push	r0
     bc6:	11 24       	eor	r1, r1
     bc8:	0b b6       	in	r0, 0x3b	; 59
     bca:	0f 92       	push	r0
     bcc:	2f 93       	push	r18
     bce:	3f 93       	push	r19
     bd0:	4f 93       	push	r20
     bd2:	5f 93       	push	r21
     bd4:	6f 93       	push	r22
     bd6:	7f 93       	push	r23
     bd8:	8f 93       	push	r24
     bda:	9f 93       	push	r25
     bdc:	af 93       	push	r26
     bde:	bf 93       	push	r27
     be0:	ef 93       	push	r30
     be2:	ff 93       	push	r31
	p_wdgCallback();
     be4:	e0 91 99 08 	lds	r30, 0x0899	; 0x800899 <p_wdgCallback>
     be8:	f0 91 9a 08 	lds	r31, 0x089A	; 0x80089a <p_wdgCallback+0x1>
     bec:	09 95       	icall
}
     bee:	ff 91       	pop	r31
     bf0:	ef 91       	pop	r30
     bf2:	bf 91       	pop	r27
     bf4:	af 91       	pop	r26
     bf6:	9f 91       	pop	r25
     bf8:	8f 91       	pop	r24
     bfa:	7f 91       	pop	r23
     bfc:	6f 91       	pop	r22
     bfe:	5f 91       	pop	r21
     c00:	4f 91       	pop	r20
     c02:	3f 91       	pop	r19
     c04:	2f 91       	pop	r18
     c06:	0f 90       	pop	r0
     c08:	0b be       	out	0x3b, r0	; 59
     c0a:	0f 90       	pop	r0
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	0f 90       	pop	r0
     c10:	1f 90       	pop	r1
     c12:	18 95       	reti

00000c14 <Adafruit_VL53L0X_setAddress>:

      return FALSE;
  }
}

bool Adafruit_VL53L0X_setAddress(uint8_t newAddr) {
     c14:	cf 93       	push	r28
  newAddr &= 0x7F;
     c16:	c8 2f       	mov	r28, r24
     c18:	cf 77       	andi	r28, 0x7F	; 127

  Status = VL53L0X_SetDeviceAddress(pMyDevice, newAddr * 2); // 7->8 bit
     c1a:	6c 2f       	mov	r22, r28
     c1c:	66 0f       	add	r22, r22
     c1e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c22:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     c26:	00 d3       	rcall	.+1536   	; 0x1228 <VL53L0X_SetDeviceAddress>
     c28:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE ) {
     c2c:	81 11       	cpse	r24, r1
     c2e:	09 c0       	rjmp	.+18     	; 0xc42 <Adafruit_VL53L0X_setAddress+0x2e>
    pMyDevice->I2cDevAddr = newAddr;  // 7 bit addr
     c30:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
     c34:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
     c38:	ef 5b       	subi	r30, 0xBF	; 191
     c3a:	fe 4f       	sbci	r31, 0xFE	; 254
     c3c:	c0 83       	st	Z, r28
    return TRUE;
     c3e:	81 e0       	ldi	r24, 0x01	; 1
     c40:	01 c0       	rjmp	.+2      	; 0xc44 <Adafruit_VL53L0X_setAddress+0x30>
  }
  return FALSE;
     c42:	80 e0       	ldi	r24, 0x00	; 0
}
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <Adafruit_VL53L0X_begin>:
VL53L0X_Dev_t                       *pMyDevice  = &MyDevice;
VL53L0X_Version_t                   Version;
VL53L0X_Version_t                   *pVersion   = &Version;
VL53L0X_DeviceInfo_t                DeviceInfo;

bool Adafruit_VL53L0X_begin(uint8_t i2c_addr, bool debug ) {
     c48:	1f 93       	push	r17
     c4a:	cf 93       	push	r28
     c4c:	df 93       	push	r29
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
     c52:	27 97       	sbiw	r28, 0x07	; 7
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	f8 94       	cli
     c58:	de bf       	out	0x3e, r29	; 62
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	cd bf       	out	0x3d, r28	; 61
     c5e:	18 2f       	mov	r17, r24
  uint8_t   isApertureSpads;
  uint8_t   VhvSettings;
  uint8_t   PhaseCal;

  // Initialize Comms
  pMyDevice->I2cDevAddr      =  VL53L0X_I2C_ADDR;  // default
     c60:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c64:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     c68:	fc 01       	movw	r30, r24
     c6a:	ef 5b       	subi	r30, 0xBF	; 191
     c6c:	fe 4f       	sbci	r31, 0xFE	; 254
     c6e:	29 e2       	ldi	r18, 0x29	; 41
     c70:	20 83       	st	Z, r18
  pMyDevice->comms_type      =  1;
     c72:	31 96       	adiw	r30, 0x01	; 1
     c74:	21 e0       	ldi	r18, 0x01	; 1
     c76:	20 83       	st	Z, r18
  pMyDevice->comms_speed_khz =  400;
     c78:	31 96       	adiw	r30, 0x01	; 1
     c7a:	20 e9       	ldi	r18, 0x90	; 144
     c7c:	31 e0       	ldi	r19, 0x01	; 1
     c7e:	31 83       	std	Z+1, r19	; 0x01
     c80:	20 83       	st	Z, r18

  Wire_begin();     // VL53L0X_i2c_init();
     c82:	0e 94 92 2d 	call	0x5b24	; 0x5b24 <Wire_begin>
      Status = VL53L0X_ERROR_NOT_SUPPORTED;

      return FALSE;
  }

  Status = VL53L0X_DataInit( &MyDevice );         // Data initialization
     c86:	8b e9       	ldi	r24, 0x9B	; 155
     c88:	98 e0       	ldi	r25, 0x08	; 8
     c8a:	03 d7       	rcall	.+3590   	; 0x1a92 <VL53L0X_DataInit>
     c8c:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if (! Adafruit_VL53L0X_setAddress(i2c_addr) ) {
     c90:	81 2f       	mov	r24, r17
     c92:	c0 df       	rcall	.-128    	; 0xc14 <Adafruit_VL53L0X_setAddress>
     c94:	88 23       	and	r24, r24
     c96:	09 f4       	brne	.+2      	; 0xc9a <Adafruit_VL53L0X_begin+0x52>
    return FALSE;
  }

  Status = VL53L0X_GetDeviceInfo( &MyDevice, &DeviceInfo );
     c98:	85 c0       	rjmp	.+266    	; 0xda4 <Adafruit_VL53L0X_begin+0x15c>
     c9a:	60 ee       	ldi	r22, 0xE0	; 224
     c9c:	79 e0       	ldi	r23, 0x09	; 9
     c9e:	8b e9       	ldi	r24, 0x9B	; 155
     ca0:	98 e0       	ldi	r25, 0x08	; 8
     ca2:	bf d2       	rcall	.+1406   	; 0x1222 <VL53L0X_GetDeviceInfo>
     ca4:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>

  if( Status == VL53L0X_ERROR_NONE )  {
     ca8:	81 11       	cpse	r24, r1

         //Serial.print( F( "Rev Major: " ) ); //Serial.print( DeviceInfo.ProductRevisionMajor );
         //Serial.print( F( ", Minor: " ) ); //Serial.println( DeviceInfo.ProductRevisionMinor );
      }

      if( ( DeviceInfo.ProductRevisionMinor != 1 ) && ( DeviceInfo.ProductRevisionMinor != 1 ) ) {
     caa:	08 c0       	rjmp	.+16     	; 0xcbc <Adafruit_VL53L0X_begin+0x74>
     cac:	80 91 42 0a 	lds	r24, 0x0A42	; 0x800a42 <DeviceInfo+0x62>
     cb0:	81 30       	cpi	r24, 0x01	; 1
     cb2:	09 f4       	brne	.+2      	; 0xcb6 <Adafruit_VL53L0X_begin+0x6e>
              //Serial.print( DeviceInfo.ProductRevisionMajor );
              //Serial.print( ',' );
              //Serial.println( DeviceInfo.ProductRevisionMinor );
          }

          Status = VL53L0X_ERROR_NOT_SUPPORTED;
     cb4:	6e c0       	rjmp	.+220    	; 0xd92 <Adafruit_VL53L0X_begin+0x14a>
     cb6:	8b ef       	ldi	r24, 0xFB	; 251
     cb8:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
      }

      Status = VL53L0X_StaticInit( pMyDevice ); // Device Initialization
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     cbc:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     cc0:	81 11       	cpse	r24, r1
      if( debug ) {
          //Serial.println( F( "VL53L0X: PerformRefSpadManagement" ) );
      }

      Status = VL53L0X_PerformRefSpadManagement( pMyDevice, &refSpadCount, &isApertureSpads ); // Device Initialization
     cc2:	33 c0       	rjmp	.+102    	; 0xd2a <Adafruit_VL53L0X_begin+0xe2>
     cc4:	ae 01       	movw	r20, r28
     cc6:	4b 5f       	subi	r20, 0xFB	; 251
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	be 01       	movw	r22, r28
     ccc:	6f 5f       	subi	r22, 0xFF	; 255
     cce:	7f 4f       	sbci	r23, 0xFF	; 255
     cd0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cd4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cd8:	0e 94 ac 13 	call	0x2758	; 0x2758 <VL53L0X_PerformRefSpadManagement>
     cdc:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
          //Serial.print( F( ", isApertureSpads = " ) );
          //Serial.println( isApertureSpads );
      }
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     ce0:	81 11       	cpse	r24, r1
      if( debug ) {
          //Serial.println( F( "VL53L0X: PerformRefCalibration" ) );
      }

      Status = VL53L0X_PerformRefCalibration( pMyDevice, &VhvSettings, &PhaseCal );           // Device Initialization
     ce2:	31 c0       	rjmp	.+98     	; 0xd46 <Adafruit_VL53L0X_begin+0xfe>
     ce4:	ae 01       	movw	r20, r28
     ce6:	49 5f       	subi	r20, 0xF9	; 249
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	be 01       	movw	r22, r28
     cec:	6a 5f       	subi	r22, 0xFA	; 250
     cee:	7f 4f       	sbci	r23, 0xFF	; 255
     cf0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     cf4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     cf8:	f4 d7       	rcall	.+4072   	; 0x1ce2 <VL53L0X_PerformRefCalibration>
     cfa:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     cfe:	81 11       	cpse	r24, r1
      // no need to do this when we use VL53L0X_PerformSingleRangingMeasurement
      if( debug ) {
          //Serial.println( F( "VL53L0X: SetDeviceMode" ) );
      }

      Status = VL53L0X_SetDeviceMode( pMyDevice, VL53L0X_DEVICEMODE_SINGLE_RANGING );        // Setup in single ranging mode
     d00:	30 c0       	rjmp	.+96     	; 0xd62 <Adafruit_VL53L0X_begin+0x11a>
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d08:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d0c:	93 d2       	rcall	.+1318   	; 0x1234 <VL53L0X_SetDeviceMode>
     d0e:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  // Enable/Disable Sigma and Signal check
  if( Status == VL53L0X_ERROR_NONE ) {
     d12:	81 11       	cpse	r24, r1
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1 );
     d14:	37 c0       	rjmp	.+110    	; 0xd84 <Adafruit_VL53L0X_begin+0x13c>
     d16:	41 e0       	ldi	r20, 0x01	; 1
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d20:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d24:	9b d4       	rcall	.+2358   	; 0x165c <VL53L0X_SetLimitCheckEnable>
     d26:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     d2a:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     d2e:	81 11       	cpse	r24, r1
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1 );
     d30:	29 c0       	rjmp	.+82     	; 0xd84 <Adafruit_VL53L0X_begin+0x13c>
     d32:	41 e0       	ldi	r20, 0x01	; 1
     d34:	61 e0       	ldi	r22, 0x01	; 1
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d3c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d40:	8d d4       	rcall	.+2330   	; 0x165c <VL53L0X_SetLimitCheckEnable>
     d42:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     d46:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     d4a:	81 11       	cpse	r24, r1
      Status = VL53L0X_SetLimitCheckEnable( pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1 );
     d4c:	1b c0       	rjmp	.+54     	; 0xd84 <Adafruit_VL53L0X_begin+0x13c>
     d4e:	41 e0       	ldi	r20, 0x01	; 1
     d50:	63 e0       	ldi	r22, 0x03	; 3
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d58:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d5c:	7f d4       	rcall	.+2302   	; 0x165c <VL53L0X_SetLimitCheckEnable>
     d5e:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
  }

  if( Status == VL53L0X_ERROR_NONE ) {
     d62:	80 91 ea 07 	lds	r24, 0x07EA	; 0x8007ea <__data_end>
     d66:	81 11       	cpse	r24, r1
      Status = VL53L0X_SetLimitCheckValue( pMyDevice, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, (FixPoint1616_t)( 1.5 * 0.023 * 65536 ) );
     d68:	0d c0       	rjmp	.+26     	; 0xd84 <Adafruit_VL53L0X_begin+0x13c>
     d6a:	24 ed       	ldi	r18, 0xD4	; 212
     d6c:	38 e0       	ldi	r19, 0x08	; 8
     d6e:	40 e0       	ldi	r20, 0x00	; 0
     d70:	50 e0       	ldi	r21, 0x00	; 0
     d72:	63 e0       	ldi	r22, 0x03	; 3
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d7a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d7e:	fb d4       	rcall	.+2550   	; 0x1776 <VL53L0X_SetLimitCheckValue>
     d80:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
      if( debug ) {
          //Serial.print( F( "VL53L0X Error: " ) );
          //Serial.println( Status );
      }

      return FALSE;
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 91 ea 07 	lds	r25, 0x07EA	; 0x8007ea <__data_end>
     d8a:	99 23       	and	r25, r25
     d8c:	59 f0       	breq	.+22     	; 0xda4 <Adafruit_VL53L0X_begin+0x15c>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
  if( Status == VL53L0X_ERROR_NONE ) {
      if( debug ) {
          //Serial.println( F( "VL53L0X: StaticInit" ) );
      }

      Status = VL53L0X_StaticInit( pMyDevice ); // Device Initialization
     d90:	09 c0       	rjmp	.+18     	; 0xda4 <Adafruit_VL53L0X_begin+0x15c>
     d92:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     d96:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     d9a:	0e 94 21 12 	call	0x2442	; 0x2442 <VL53L0X_StaticInit>
     d9e:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <__data_end>
          //Serial.println( Status );
      }

      return FALSE;
  }
}
     da2:	8c cf       	rjmp	.-232    	; 0xcbc <Adafruit_VL53L0X_begin+0x74>
     da4:	27 96       	adiw	r28, 0x07	; 7
     da6:	0f b6       	in	r0, 0x3f	; 63
     da8:	f8 94       	cli
     daa:	de bf       	out	0x3e, r29	; 62
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	cd bf       	out	0x3d, r28	; 61
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	08 95       	ret

00000db8 <Adafruit_VL53L0X_getSingleRangingMeasurement>:

    if( Status == VL53L0X_ERROR_NONE ) {
        if( debug ) {
            //Serial.println( F( "sVL53L0X: PerformSingleRangingMeasurement" ) );
        }
        Status = VL53L0X_PerformSingleRangingMeasurement( pMyDevice, pRangingMeasurementData );
     db8:	bc 01       	movw	r22, r24
     dba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     dbe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     dc2:	0c 94 57 11 	jmp	0x22ae	; 0x22ae <VL53L0X_PerformSingleRangingMeasurement>
          	//Serial.println( RangingMeasurementData->RangeMilliMeter );
        }
    }

    return Status;
}
     dc6:	08 95       	ret

00000dc8 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
     dc8:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <twi_state>
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	80 93 56 08 	sts	0x0856, r24	; 0x800856 <twi_sendStop>
     dd2:	10 92 55 08 	sts	0x0855, r1	; 0x800855 <twi_inRepStart>
     dd6:	62 e0       	ldi	r22, 0x02	; 2
     dd8:	71 e0       	ldi	r23, 0x01	; 1
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	26 db       	rcall	.-2484   	; 0x42c <gpio_init>
     de0:	62 e0       	ldi	r22, 0x02	; 2
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	91 e0       	ldi	r25, 0x01	; 1
     de8:	21 db       	rcall	.-2494   	; 0x42c <gpio_init>
     dea:	e9 eb       	ldi	r30, 0xB9	; 185
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	8e 7f       	andi	r24, 0xFE	; 254
     df2:	80 83       	st	Z, r24
     df4:	80 81       	ld	r24, Z
     df6:	8d 7f       	andi	r24, 0xFD	; 253
     df8:	80 83       	st	Z, r24
     dfa:	80 e2       	ldi	r24, 0x20	; 32
     dfc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     e00:	85 e4       	ldi	r24, 0x45	; 69
     e02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e06:	08 95       	ret

00000e08 <twi_readFrom>:
     e08:	41 32       	cpi	r20, 0x21	; 33
     e0a:	08 f0       	brcs	.+2      	; 0xe0e <twi_readFrom+0x6>
     e0c:	4c c0       	rjmp	.+152    	; 0xea6 <twi_readFrom+0x9e>
     e0e:	90 91 58 08 	lds	r25, 0x0858	; 0x800858 <twi_state>
     e12:	91 11       	cpse	r25, r1
     e14:	fc cf       	rjmp	.-8      	; 0xe0e <twi_readFrom+0x6>
     e16:	31 e0       	ldi	r19, 0x01	; 1
     e18:	30 93 58 08 	sts	0x0858, r19	; 0x800858 <twi_state>
     e1c:	20 93 56 08 	sts	0x0856, r18	; 0x800856 <twi_sendStop>
     e20:	2f ef       	ldi	r18, 0xFF	; 255
     e22:	20 93 eb 07 	sts	0x07EB, r18	; 0x8007eb <twi_error>
     e26:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <twi_masterBufferIndex>
     e2a:	24 0f       	add	r18, r20
     e2c:	20 93 2f 08 	sts	0x082F, r18	; 0x80082f <twi_masterBufferLength>
     e30:	30 93 57 08 	sts	0x0857, r19	; 0x800857 <twi_slarw>
     e34:	20 91 57 08 	lds	r18, 0x0857	; 0x800857 <twi_slarw>
     e38:	88 0f       	add	r24, r24
     e3a:	82 2b       	or	r24, r18
     e3c:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <twi_slarw>
     e40:	80 91 55 08 	lds	r24, 0x0855	; 0x800855 <twi_inRepStart>
     e44:	81 30       	cpi	r24, 0x01	; 1
     e46:	81 f4       	brne	.+32     	; 0xe68 <twi_readFrom+0x60>
     e48:	10 92 55 08 	sts	0x0855, r1	; 0x800855 <twi_inRepStart>
     e4c:	ab eb       	ldi	r26, 0xBB	; 187
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	ec eb       	ldi	r30, 0xBC	; 188
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <twi_slarw>
     e58:	8c 93       	st	X, r24
     e5a:	80 81       	ld	r24, Z
     e5c:	83 fd       	sbrc	r24, 3
     e5e:	fa cf       	rjmp	.-12     	; 0xe54 <twi_readFrom+0x4c>
     e60:	85 ec       	ldi	r24, 0xC5	; 197
     e62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <twi_readFrom+0x66>
     e68:	85 ee       	ldi	r24, 0xE5	; 229
     e6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     e6e:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <twi_state>
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	e1 f3       	breq	.-8      	; 0xe6e <twi_readFrom+0x66>
     e76:	80 91 30 08 	lds	r24, 0x0830	; 0x800830 <twi_masterBufferIndex>
     e7a:	84 17       	cp	r24, r20
     e7c:	10 f4       	brcc	.+4      	; 0xe82 <twi_readFrom+0x7a>
     e7e:	40 91 30 08 	lds	r20, 0x0830	; 0x800830 <twi_masterBufferIndex>
     e82:	44 23       	and	r20, r20
     e84:	89 f0       	breq	.+34     	; 0xea8 <twi_readFrom+0xa0>
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f8 e0       	ldi	r31, 0x08	; 8
     e8a:	a6 2f       	mov	r26, r22
     e8c:	b7 2f       	mov	r27, r23
     e8e:	2f ef       	ldi	r18, 0xFF	; 255
     e90:	24 0f       	add	r18, r20
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	2e 5c       	subi	r18, 0xCE	; 206
     e96:	37 4f       	sbci	r19, 0xF7	; 247
     e98:	81 91       	ld	r24, Z+
     e9a:	8d 93       	st	X+, r24
     e9c:	e2 17       	cp	r30, r18
     e9e:	f3 07       	cpc	r31, r19
     ea0:	d9 f7       	brne	.-10     	; 0xe98 <twi_readFrom+0x90>
     ea2:	94 2f       	mov	r25, r20
     ea4:	01 c0       	rjmp	.+2      	; 0xea8 <twi_readFrom+0xa0>
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	89 2f       	mov	r24, r25
     eaa:	08 95       	ret

00000eac <twi_writeTo>:
     eac:	0f 93       	push	r16
     eae:	41 32       	cpi	r20, 0x21	; 33
     eb0:	08 f0       	brcs	.+2      	; 0xeb4 <twi_writeTo+0x8>
     eb2:	57 c0       	rjmp	.+174    	; 0xf62 <twi_writeTo+0xb6>
     eb4:	30 91 58 08 	lds	r19, 0x0858	; 0x800858 <twi_state>
     eb8:	31 11       	cpse	r19, r1
     eba:	fc cf       	rjmp	.-8      	; 0xeb4 <twi_writeTo+0x8>
     ebc:	92 e0       	ldi	r25, 0x02	; 2
     ebe:	90 93 58 08 	sts	0x0858, r25	; 0x800858 <twi_state>
     ec2:	00 93 56 08 	sts	0x0856, r16	; 0x800856 <twi_sendStop>
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	90 93 eb 07 	sts	0x07EB, r25	; 0x8007eb <twi_error>
     ecc:	10 92 30 08 	sts	0x0830, r1	; 0x800830 <twi_masterBufferIndex>
     ed0:	40 93 2f 08 	sts	0x082F, r20	; 0x80082f <twi_masterBufferLength>
     ed4:	44 23       	and	r20, r20
     ed6:	71 f0       	breq	.+28     	; 0xef4 <twi_writeTo+0x48>
     ed8:	fb 01       	movw	r30, r22
     eda:	a1 e3       	ldi	r26, 0x31	; 49
     edc:	b8 e0       	ldi	r27, 0x08	; 8
     ede:	41 50       	subi	r20, 0x01	; 1
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	4f 5f       	subi	r20, 0xFF	; 255
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	64 0f       	add	r22, r20
     ee8:	75 1f       	adc	r23, r21
     eea:	91 91       	ld	r25, Z+
     eec:	9d 93       	st	X+, r25
     eee:	e6 17       	cp	r30, r22
     ef0:	f7 07       	cpc	r31, r23
     ef2:	d9 f7       	brne	.-10     	; 0xeea <twi_writeTo+0x3e>
     ef4:	10 92 57 08 	sts	0x0857, r1	; 0x800857 <twi_slarw>
     ef8:	90 91 57 08 	lds	r25, 0x0857	; 0x800857 <twi_slarw>
     efc:	88 0f       	add	r24, r24
     efe:	89 2b       	or	r24, r25
     f00:	80 93 57 08 	sts	0x0857, r24	; 0x800857 <twi_slarw>
     f04:	80 91 55 08 	lds	r24, 0x0855	; 0x800855 <twi_inRepStart>
     f08:	81 30       	cpi	r24, 0x01	; 1
     f0a:	81 f4       	brne	.+32     	; 0xf2c <twi_writeTo+0x80>
     f0c:	10 92 55 08 	sts	0x0855, r1	; 0x800855 <twi_inRepStart>
     f10:	ab eb       	ldi	r26, 0xBB	; 187
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	ec eb       	ldi	r30, 0xBC	; 188
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <twi_slarw>
     f1c:	8c 93       	st	X, r24
     f1e:	80 81       	ld	r24, Z
     f20:	83 fd       	sbrc	r24, 3
     f22:	fa cf       	rjmp	.-12     	; 0xf18 <twi_writeTo+0x6c>
     f24:	85 ec       	ldi	r24, 0xC5	; 197
     f26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f2a:	03 c0       	rjmp	.+6      	; 0xf32 <twi_writeTo+0x86>
     f2c:	85 ee       	ldi	r24, 0xE5	; 229
     f2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
     f32:	22 23       	and	r18, r18
     f34:	41 f0       	breq	.+16     	; 0xf46 <twi_writeTo+0x9a>
     f36:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <twi_state>
     f3a:	82 30       	cpi	r24, 0x02	; 2
     f3c:	21 f4       	brne	.+8      	; 0xf46 <twi_writeTo+0x9a>
     f3e:	80 91 58 08 	lds	r24, 0x0858	; 0x800858 <twi_state>
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	e1 f3       	breq	.-8      	; 0xf3e <twi_writeTo+0x92>
     f46:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <twi_error>
     f4a:	8f 3f       	cpi	r24, 0xFF	; 255
     f4c:	79 f0       	breq	.+30     	; 0xf6c <twi_writeTo+0xc0>
     f4e:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <twi_error>
     f52:	80 32       	cpi	r24, 0x20	; 32
     f54:	41 f0       	breq	.+16     	; 0xf66 <twi_writeTo+0xba>
     f56:	80 91 eb 07 	lds	r24, 0x07EB	; 0x8007eb <twi_error>
     f5a:	80 33       	cpi	r24, 0x30	; 48
     f5c:	31 f0       	breq	.+12     	; 0xf6a <twi_writeTo+0xbe>
     f5e:	34 e0       	ldi	r19, 0x04	; 4
     f60:	05 c0       	rjmp	.+10     	; 0xf6c <twi_writeTo+0xc0>
     f62:	31 e0       	ldi	r19, 0x01	; 1
     f64:	03 c0       	rjmp	.+6      	; 0xf6c <twi_writeTo+0xc0>
     f66:	32 e0       	ldi	r19, 0x02	; 2
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <twi_writeTo+0xc0>
     f6a:	33 e0       	ldi	r19, 0x03	; 3
     f6c:	83 2f       	mov	r24, r19
     f6e:	0f 91       	pop	r16
     f70:	08 95       	ret

00000f72 <twi_transmit>:
     f72:	40 91 0d 08 	lds	r20, 0x080D	; 0x80080d <twi_txBufferLength>
     f76:	26 2f       	mov	r18, r22
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	24 0f       	add	r18, r20
     f7c:	31 1d       	adc	r19, r1
     f7e:	21 32       	cpi	r18, 0x21	; 33
     f80:	31 05       	cpc	r19, r1
     f82:	ec f4       	brge	.+58     	; 0xfbe <twi_transmit+0x4c>
     f84:	20 91 58 08 	lds	r18, 0x0858	; 0x800858 <twi_state>
     f88:	24 30       	cpi	r18, 0x04	; 4
     f8a:	d9 f4       	brne	.+54     	; 0xfc2 <twi_transmit+0x50>
     f8c:	66 23       	and	r22, r22
     f8e:	81 f0       	breq	.+32     	; 0xfb0 <twi_transmit+0x3e>
     f90:	a8 2f       	mov	r26, r24
     f92:	b9 2f       	mov	r27, r25
     f94:	80 e0       	ldi	r24, 0x00	; 0
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	30 91 0d 08 	lds	r19, 0x080D	; 0x80080d <twi_txBufferLength>
     f9c:	2d 91       	ld	r18, X+
     f9e:	fc 01       	movw	r30, r24
     fa0:	e1 5f       	subi	r30, 0xF1	; 241
     fa2:	f7 4f       	sbci	r31, 0xF7	; 247
     fa4:	e3 0f       	add	r30, r19
     fa6:	f1 1d       	adc	r31, r1
     fa8:	20 83       	st	Z, r18
     faa:	01 96       	adiw	r24, 0x01	; 1
     fac:	86 17       	cp	r24, r22
     fae:	a0 f3       	brcs	.-24     	; 0xf98 <twi_transmit+0x26>
     fb0:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <twi_txBufferLength>
     fb4:	68 0f       	add	r22, r24
     fb6:	60 93 0d 08 	sts	0x080D, r22	; 0x80080d <twi_txBufferLength>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	08 95       	ret
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	08 95       	ret
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	08 95       	ret

00000fc6 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT) | (1 << TWSTO);
     fc6:	85 ed       	ldi	r24, 0xD5	; 213
     fc8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & (1 << TWSTO)){
     fcc:	ec eb       	ldi	r30, 0xBC	; 188
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	84 fd       	sbrc	r24, 4
     fd4:	fd cf       	rjmp	.-6      	; 0xfd0 <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     fd6:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <twi_state>
     fda:	08 95       	ret

00000fdc <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWEA) | (1 << TWINT);
     fdc:	85 ec       	ldi	r24, 0xC5	; 197
     fde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
     fe2:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <twi_state>
     fe6:	08 95       	ret

00000fe8 <__vector_26>:
}

ISR(TWI_vect)
{
     fe8:	1f 92       	push	r1
     fea:	0f 92       	push	r0
     fec:	0f b6       	in	r0, 0x3f	; 63
     fee:	0f 92       	push	r0
     ff0:	11 24       	eor	r1, r1
     ff2:	0b b6       	in	r0, 0x3b	; 59
     ff4:	0f 92       	push	r0
     ff6:	2f 93       	push	r18
     ff8:	3f 93       	push	r19
     ffa:	4f 93       	push	r20
     ffc:	5f 93       	push	r21
     ffe:	6f 93       	push	r22
    1000:	7f 93       	push	r23
    1002:	8f 93       	push	r24
    1004:	9f 93       	push	r25
    1006:	af 93       	push	r26
    1008:	bf 93       	push	r27
    100a:	ef 93       	push	r30
    100c:	ff 93       	push	r31
  switch(TW_STATUS){
    100e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1012:	e8 2f       	mov	r30, r24
    1014:	e8 7f       	andi	r30, 0xF8	; 248
    1016:	8e 2f       	mov	r24, r30
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	89 3c       	cpi	r24, 0xC9	; 201
    101c:	91 05       	cpc	r25, r1
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__vector_26+0x3a>
    1020:	ed c0       	rjmp	.+474    	; 0x11fc <__vector_26+0x214>
    1022:	fc 01       	movw	r30, r24
    1024:	ea 5b       	subi	r30, 0xBA	; 186
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	0c 94 36 2e 	jmp	0x5c6c	; 0x5c6c <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    102c:	80 91 57 08 	lds	r24, 0x0857	; 0x800857 <twi_slarw>
    1030:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    1034:	85 ec       	ldi	r24, 0xC5	; 197
    1036:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    103a:	e0 c0       	rjmp	.+448    	; 0x11fc <__vector_26+0x214>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    103c:	90 91 30 08 	lds	r25, 0x0830	; 0x800830 <twi_masterBufferIndex>
    1040:	80 91 2f 08 	lds	r24, 0x082F	; 0x80082f <twi_masterBufferLength>
    1044:	98 17       	cp	r25, r24
    1046:	80 f4       	brcc	.+32     	; 0x1068 <__vector_26+0x80>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1048:	e0 91 30 08 	lds	r30, 0x0830	; 0x800830 <twi_masterBufferIndex>
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	8e 0f       	add	r24, r30
    1050:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <twi_masterBufferIndex>
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	ef 5c       	subi	r30, 0xCF	; 207
    1058:	f7 4f       	sbci	r31, 0xF7	; 247
    105a:	80 81       	ld	r24, Z
    105c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    1060:	85 ec       	ldi	r24, 0xC5	; 197
    1062:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1066:	ca c0       	rjmp	.+404    	; 0x11fc <__vector_26+0x214>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    1068:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <twi_sendStop>
    106c:	88 23       	and	r24, r24
          twi_stop();
    106e:	11 f0       	breq	.+4      	; 0x1074 <__vector_26+0x8c>
    1070:	aa df       	rcall	.-172    	; 0xfc6 <twi_stop>
	else {
	  twi_inRepStart = TRUE;	// we're gonna send the START
    1072:	c4 c0       	rjmp	.+392    	; 0x11fc <__vector_26+0x214>
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = (1 << TWINT) | (1 << TWSTA)| (1 << TWEN) ;
    107a:	84 ea       	ldi	r24, 0xA4	; 164
    107c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	  twi_state = TWI_READY;
    1080:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <twi_state>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    1084:	bb c0       	rjmp	.+374    	; 0x11fc <__vector_26+0x214>
    1086:	80 e2       	ldi	r24, 0x20	; 32
      twi_stop();
    1088:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <twi_error>
      break;
    108c:	9c df       	rcall	.-200    	; 0xfc6 <twi_stop>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    108e:	b6 c0       	rjmp	.+364    	; 0x11fc <__vector_26+0x214>
    1090:	80 e3       	ldi	r24, 0x30	; 48
      twi_stop();
    1092:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <twi_error>
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1096:	97 df       	rcall	.-210    	; 0xfc6 <twi_stop>
    1098:	b1 c0       	rjmp	.+354    	; 0x11fc <__vector_26+0x214>
      twi_releaseBus();
    109a:	88 e3       	ldi	r24, 0x38	; 56
    109c:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <twi_error>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    10a0:	9d df       	rcall	.-198    	; 0xfdc <twi_releaseBus>
    10a2:	ac c0       	rjmp	.+344    	; 0x11fc <__vector_26+0x214>
    10a4:	e0 91 30 08 	lds	r30, 0x0830	; 0x800830 <twi_masterBufferIndex>
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	8e 0f       	add	r24, r30
    10ac:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <twi_masterBufferIndex>
    10b0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10b4:	f0 e0       	ldi	r31, 0x00	; 0
    10b6:	ef 5c       	subi	r30, 0xCF	; 207
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    10b8:	f7 4f       	sbci	r31, 0xF7	; 247
    10ba:	80 83       	st	Z, r24
    10bc:	90 91 30 08 	lds	r25, 0x0830	; 0x800830 <twi_masterBufferIndex>
    10c0:	80 91 2f 08 	lds	r24, 0x082F	; 0x80082f <twi_masterBufferLength>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    10c4:	98 17       	cp	r25, r24
    10c6:	20 f4       	brcc	.+8      	; 0x10d0 <__vector_26+0xe8>
    10c8:	85 ec       	ldi	r24, 0xC5	; 197
    10ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    10ce:	96 c0       	rjmp	.+300    	; 0x11fc <__vector_26+0x214>
    10d0:	85 e8       	ldi	r24, 0x85	; 133
    10d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    10d6:	92 c0       	rjmp	.+292    	; 0x11fc <__vector_26+0x214>
    10d8:	e0 91 30 08 	lds	r30, 0x0830	; 0x800830 <twi_masterBufferIndex>
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	8e 0f       	add	r24, r30
    10e0:	80 93 30 08 	sts	0x0830, r24	; 0x800830 <twi_masterBufferIndex>
    10e4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
	if (twi_sendStop)
    10ea:	ef 5c       	subi	r30, 0xCF	; 207
    10ec:	f7 4f       	sbci	r31, 0xF7	; 247
    10ee:	80 83       	st	Z, r24
          twi_stop();
    10f0:	80 91 56 08 	lds	r24, 0x0856	; 0x800856 <twi_sendStop>
    10f4:	88 23       	and	r24, r24
	else {
	  twi_inRepStart = TRUE;	// we're gonna send the START
    10f6:	11 f0       	breq	.+4      	; 0x10fc <__vector_26+0x114>
    10f8:	66 df       	rcall	.-308    	; 0xfc6 <twi_stop>
    10fa:	80 c0       	rjmp	.+256    	; 0x11fc <__vector_26+0x214>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = (1 << TWINT) | (1 << TWSTA)| (1 << TWEN) ;
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	80 93 55 08 	sts	0x0855, r24	; 0x800855 <twi_inRepStart>
	  twi_state = TWI_READY;
    1102:	84 ea       	ldi	r24, 0xA4	; 164
    1104:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    1108:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <twi_state>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    110c:	77 c0       	rjmp	.+238    	; 0x11fc <__vector_26+0x214>
    110e:	5b df       	rcall	.-330    	; 0xfc6 <twi_stop>
    1110:	75 c0       	rjmp	.+234    	; 0x11fc <__vector_26+0x214>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <twi_state>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    1118:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <twi_rxBufferIndex>
    111c:	85 ec       	ldi	r24, 0xC5	; 197
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    111e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1122:	6c c0       	rjmp	.+216    	; 0x11fc <__vector_26+0x214>
    1124:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <twi_rxBufferIndex>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1128:	80 32       	cpi	r24, 0x20	; 32
    112a:	80 f4       	brcc	.+32     	; 0x114c <__vector_26+0x164>
    112c:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <twi_rxBufferIndex>
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	8e 0f       	add	r24, r30
    1134:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <twi_rxBufferIndex>
    1138:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    113c:	f0 e0       	ldi	r31, 0x00	; 0
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    113e:	e3 51       	subi	r30, 0x13	; 19
    1140:	f8 4f       	sbci	r31, 0xF8	; 248
    1142:	80 83       	st	Z, r24
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    1144:	85 ec       	ldi	r24, 0xC5	; 197
    1146:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    114a:	58 c0       	rjmp	.+176    	; 0x11fc <__vector_26+0x214>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    114c:	85 e8       	ldi	r24, 0x85	; 133
    114e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    1152:	54 c0       	rjmp	.+168    	; 0x11fc <__vector_26+0x214>
    1154:	43 df       	rcall	.-378    	; 0xfdc <twi_releaseBus>
    1156:	80 91 ec 07 	lds	r24, 0x07EC	; 0x8007ec <twi_rxBufferIndex>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    115a:	80 32       	cpi	r24, 0x20	; 32
    115c:	30 f4       	brcc	.+12     	; 0x116a <__vector_26+0x182>
    115e:	e0 91 ec 07 	lds	r30, 0x07EC	; 0x8007ec <twi_rxBufferIndex>
    1162:	f0 e0       	ldi	r31, 0x00	; 0
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    1164:	e3 51       	subi	r30, 0x13	; 19
    1166:	f8 4f       	sbci	r31, 0xF8	; 248
    1168:	10 82       	st	Z, r1
    116a:	60 91 ec 07 	lds	r22, 0x07EC	; 0x8007ec <twi_rxBufferIndex>
    116e:	70 e0       	ldi	r23, 0x00	; 0
    1170:	e0 91 51 08 	lds	r30, 0x0851	; 0x800851 <twi_onSlaveReceive>
    1174:	f0 91 52 08 	lds	r31, 0x0852	; 0x800852 <twi_onSlaveReceive+0x1>
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    1178:	8d ee       	ldi	r24, 0xED	; 237
    117a:	97 e0       	ldi	r25, 0x07	; 7
      break;
    117c:	09 95       	icall
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    117e:	10 92 ec 07 	sts	0x07EC, r1	; 0x8007ec <twi_rxBufferIndex>
    1182:	3c c0       	rjmp	.+120    	; 0x11fc <__vector_26+0x214>
    1184:	85 e8       	ldi	r24, 0x85	; 133
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    118a:	38 c0       	rjmp	.+112    	; 0x11fc <__vector_26+0x214>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    118c:	84 e0       	ldi	r24, 0x04	; 4
    118e:	80 93 58 08 	sts	0x0858, r24	; 0x800858 <twi_state>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1192:	10 92 0e 08 	sts	0x080E, r1	; 0x80080e <twi_txBufferIndex>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1196:	10 92 0d 08 	sts	0x080D, r1	; 0x80080d <twi_txBufferLength>
    119a:	e0 91 53 08 	lds	r30, 0x0853	; 0x800853 <twi_onSlaveTransmit>
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    119e:	f0 91 54 08 	lds	r31, 0x0854	; 0x800854 <twi_onSlaveTransmit+0x1>
    11a2:	09 95       	icall
    11a4:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <twi_txBufferLength>
        twi_txBufferLength = 1;
    11a8:	81 11       	cpse	r24, r1
    11aa:	05 c0       	rjmp	.+10     	; 0x11b6 <__vector_26+0x1ce>
        twi_txBuffer[0] = 0x00;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 0d 08 	sts	0x080D, r24	; 0x80080d <twi_txBufferLength>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    11b2:	10 92 0f 08 	sts	0x080F, r1	; 0x80080f <twi_txBuffer>
    11b6:	e0 91 0e 08 	lds	r30, 0x080E	; 0x80080e <twi_txBufferIndex>
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	8e 0f       	add	r24, r30
    11be:	80 93 0e 08 	sts	0x080E, r24	; 0x80080e <twi_txBufferIndex>
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	e1 5f       	subi	r30, 0xF1	; 241
    11c6:	f7 4f       	sbci	r31, 0xF7	; 247
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    11c8:	80 81       	ld	r24, Z
    11ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    11ce:	90 91 0e 08 	lds	r25, 0x080E	; 0x80080e <twi_txBufferIndex>
    11d2:	80 91 0d 08 	lds	r24, 0x080D	; 0x80080d <twi_txBufferLength>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    11d6:	98 17       	cp	r25, r24
    11d8:	20 f4       	brcc	.+8      	; 0x11e2 <__vector_26+0x1fa>
    11da:	85 ec       	ldi	r24, 0xC5	; 197
  }else{
	  TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT);
    11dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    11e0:	0d c0       	rjmp	.+26     	; 0x11fc <__vector_26+0x214>
    11e2:	85 e8       	ldi	r24, 0x85	; 133
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = (1 << TWEN) | (1 << TWIE) | (1 << TWINT) | (1 << TWEA);
    11e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    11e8:	09 c0       	rjmp	.+18     	; 0x11fc <__vector_26+0x214>
    11ea:	85 ec       	ldi	r24, 0xC5	; 197
      break;
    11ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    11f0:	10 92 58 08 	sts	0x0858, r1	; 0x800858 <twi_state>
      twi_stop();
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <__vector_26+0x214>
      break;
  }
}
    11f6:	10 92 eb 07 	sts	0x07EB, r1	; 0x8007eb <twi_error>
    11fa:	e5 de       	rcall	.-566    	; 0xfc6 <twi_stop>
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0b be       	out	0x3b, r0	; 59
    1218:	0f 90       	pop	r0
    121a:	0f be       	out	0x3f, r0	; 63
    121c:	0f 90       	pop	r0
    121e:	1f 90       	pop	r1
    1220:	18 95       	reti

00001222 <VL53L0X_GetDeviceInfo>:
	Status = VL53L0X_get_reference_spads(Dev, pSpadCount, pIsApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
}
<<<<<<< HEAD
    1222:	0c 94 77 2b 	jmp	0x56ee	; 0x56ee <VL53L0X_get_device_info>
    1226:	08 95       	ret

00001228 <VL53L0X_SetDeviceAddress>:
    1228:	46 2f       	mov	r20, r22
    122a:	46 95       	lsr	r20
    122c:	6a e8       	ldi	r22, 0x8A	; 138
    122e:	0c 94 fe 2c 	jmp	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1232:	08 95       	ret

00001234 <VL53L0X_SetDeviceMode>:
    1234:	63 30       	cpi	r22, 0x03	; 3
    1236:	41 f0       	breq	.+16     	; 0x1248 <VL53L0X_SetDeviceMode+0x14>
    1238:	18 f4       	brcc	.+6      	; 0x1240 <VL53L0X_SetDeviceMode+0xc>
    123a:	62 30       	cpi	r22, 0x02	; 2
    123c:	28 f0       	brcs	.+10     	; 0x1248 <VL53L0X_SetDeviceMode+0x14>
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <VL53L0X_SetDeviceMode+0x1c>
    1240:	2c ee       	ldi	r18, 0xEC	; 236
    1242:	26 0f       	add	r18, r22
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	20 f4       	brcc	.+8      	; 0x1250 <VL53L0X_SetDeviceMode+0x1c>
    1248:	fc 01       	movw	r30, r24
    124a:	60 8b       	std	Z+16, r22	; 0x10
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	08 95       	ret
    1250:	88 ef       	ldi	r24, 0xF8	; 248
    1252:	08 95       	ret

00001254 <VL53L0X_GetFractionEnable>:
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	eb 01       	movw	r28, r22
    125a:	ab 01       	movw	r20, r22
    125c:	69 e0       	ldi	r22, 0x09	; 9
    125e:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    1262:	81 11       	cpse	r24, r1
    1264:	03 c0       	rjmp	.+6      	; 0x126c <VL53L0X_GetFractionEnable+0x18>
    1266:	98 81       	ld	r25, Y
    1268:	91 70       	andi	r25, 0x01	; 1
    126a:	98 83       	st	Y, r25
    126c:	df 91       	pop	r29
    126e:	cf 91       	pop	r28
    1270:	08 95       	ret

00001272 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
    1272:	0c 94 85 21 	jmp	0x430a	; 0x430a <VL53L0X_set_measurement_timing_budget_micro_seconds>
    1276:	08 95       	ret

00001278 <VL53L0X_GetVcselPulsePeriod>:
    1278:	0c 94 5c 21 	jmp	0x42b8	; 0x42b8 <VL53L0X_get_vcsel_pulse_period>
    127c:	08 95       	ret

0000127e <VL53L0X_SetSequenceStepEnable>:
    127e:	df 92       	push	r13
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	1f 92       	push	r1
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	7c 01       	movw	r14, r24
    1294:	06 2f       	mov	r16, r22
    1296:	d4 2e       	mov	r13, r20
    1298:	19 82       	std	Y+1, r1	; 0x01
    129a:	ae 01       	movw	r20, r28
    129c:	4f 5f       	subi	r20, 0xFF	; 255
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    12a6:	18 2f       	mov	r17, r24
    12a8:	81 11       	cpse	r24, r1
    12aa:	56 c0       	rjmp	.+172    	; 0x1358 <VL53L0X_SetSequenceStepEnable+0xda>
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	91 e0       	ldi	r25, 0x01	; 1
    12b0:	d9 12       	cpse	r13, r25
    12b2:	1c c0       	rjmp	.+56     	; 0x12ec <VL53L0X_SetSequenceStepEnable+0x6e>
    12b4:	02 30       	cpi	r16, 0x02	; 2
    12b6:	89 f0       	breq	.+34     	; 0x12da <VL53L0X_SetSequenceStepEnable+0x5c>
    12b8:	28 f4       	brcc	.+10     	; 0x12c4 <VL53L0X_SetSequenceStepEnable+0x46>
    12ba:	00 23       	and	r16, r16
    12bc:	41 f0       	breq	.+16     	; 0x12ce <VL53L0X_SetSequenceStepEnable+0x50>
    12be:	01 30       	cpi	r16, 0x01	; 1
    12c0:	49 f0       	breq	.+18     	; 0x12d4 <VL53L0X_SetSequenceStepEnable+0x56>
    12c2:	44 c0       	rjmp	.+136    	; 0x134c <VL53L0X_SetSequenceStepEnable+0xce>
    12c4:	03 30       	cpi	r16, 0x03	; 3
    12c6:	61 f0       	breq	.+24     	; 0x12e0 <VL53L0X_SetSequenceStepEnable+0x62>
    12c8:	04 30       	cpi	r16, 0x04	; 4
    12ca:	69 f0       	breq	.+26     	; 0x12e6 <VL53L0X_SetSequenceStepEnable+0x68>
    12cc:	3f c0       	rjmp	.+126    	; 0x134c <VL53L0X_SetSequenceStepEnable+0xce>
    12ce:	08 2f       	mov	r16, r24
    12d0:	00 61       	ori	r16, 0x10	; 16
    12d2:	40 c0       	rjmp	.+128    	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    12d4:	08 2f       	mov	r16, r24
    12d6:	08 62       	ori	r16, 0x28	; 40
    12d8:	3d c0       	rjmp	.+122    	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    12da:	08 2f       	mov	r16, r24
    12dc:	04 60       	ori	r16, 0x04	; 4
    12de:	3a c0       	rjmp	.+116    	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    12e0:	08 2f       	mov	r16, r24
    12e2:	00 64       	ori	r16, 0x40	; 64
    12e4:	37 c0       	rjmp	.+110    	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    12e6:	08 2f       	mov	r16, r24
    12e8:	00 68       	ori	r16, 0x80	; 128
    12ea:	34 c0       	rjmp	.+104    	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    12ec:	02 30       	cpi	r16, 0x02	; 2
    12ee:	89 f0       	breq	.+34     	; 0x1312 <VL53L0X_SetSequenceStepEnable+0x94>
    12f0:	28 f4       	brcc	.+10     	; 0x12fc <VL53L0X_SetSequenceStepEnable+0x7e>
    12f2:	00 23       	and	r16, r16
    12f4:	41 f0       	breq	.+16     	; 0x1306 <VL53L0X_SetSequenceStepEnable+0x88>
    12f6:	01 30       	cpi	r16, 0x01	; 1
    12f8:	49 f0       	breq	.+18     	; 0x130c <VL53L0X_SetSequenceStepEnable+0x8e>
    12fa:	2a c0       	rjmp	.+84     	; 0x1350 <VL53L0X_SetSequenceStepEnable+0xd2>
    12fc:	03 30       	cpi	r16, 0x03	; 3
    12fe:	61 f0       	breq	.+24     	; 0x1318 <VL53L0X_SetSequenceStepEnable+0x9a>
    1300:	04 30       	cpi	r16, 0x04	; 4
    1302:	69 f0       	breq	.+26     	; 0x131e <VL53L0X_SetSequenceStepEnable+0xa0>
    1304:	25 c0       	rjmp	.+74     	; 0x1350 <VL53L0X_SetSequenceStepEnable+0xd2>
    1306:	08 2f       	mov	r16, r24
    1308:	0f 7e       	andi	r16, 0xEF	; 239
    130a:	24 c0       	rjmp	.+72     	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    130c:	08 2f       	mov	r16, r24
    130e:	07 7d       	andi	r16, 0xD7	; 215
    1310:	21 c0       	rjmp	.+66     	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    1312:	08 2f       	mov	r16, r24
    1314:	0b 7f       	andi	r16, 0xFB	; 251
    1316:	1e c0       	rjmp	.+60     	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    1318:	08 2f       	mov	r16, r24
    131a:	0f 7b       	andi	r16, 0xBF	; 191
    131c:	1b c0       	rjmp	.+54     	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    131e:	08 2f       	mov	r16, r24
    1320:	0f 77       	andi	r16, 0x7F	; 127
    1322:	18 c0       	rjmp	.+48     	; 0x1354 <VL53L0X_SetSequenceStepEnable+0xd6>
    1324:	40 2f       	mov	r20, r16
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	c7 01       	movw	r24, r14
    132a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    132e:	18 2f       	mov	r17, r24
    1330:	81 11       	cpse	r24, r1
    1332:	12 c0       	rjmp	.+36     	; 0x1358 <VL53L0X_SetSequenceStepEnable+0xda>
    1334:	f7 01       	movw	r30, r14
    1336:	e3 5e       	subi	r30, 0xE3	; 227
    1338:	fe 4f       	sbci	r31, 0xFE	; 254
    133a:	00 83       	st	Z, r16
    133c:	f7 01       	movw	r30, r14
    133e:	42 89       	ldd	r20, Z+18	; 0x12
    1340:	53 89       	ldd	r21, Z+19	; 0x13
    1342:	64 89       	ldd	r22, Z+20	; 0x14
    1344:	75 89       	ldd	r23, Z+21	; 0x15
    1346:	c7 01       	movw	r24, r14
    1348:	94 df       	rcall	.-216    	; 0x1272 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    134a:	06 c0       	rjmp	.+12     	; 0x1358 <VL53L0X_SetSequenceStepEnable+0xda>
    134c:	1c ef       	ldi	r17, 0xFC	; 252
    134e:	04 c0       	rjmp	.+8      	; 0x1358 <VL53L0X_SetSequenceStepEnable+0xda>
    1350:	1c ef       	ldi	r17, 0xFC	; 252
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <VL53L0X_SetSequenceStepEnable+0xda>
    1354:	80 13       	cpse	r24, r16
    1356:	e6 cf       	rjmp	.-52     	; 0x1324 <VL53L0X_SetSequenceStepEnable+0xa6>
    1358:	81 2f       	mov	r24, r17
    135a:	0f 90       	pop	r0
    135c:	df 91       	pop	r29
    135e:	cf 91       	pop	r28
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	ff 90       	pop	r15
    1366:	ef 90       	pop	r14
    1368:	df 90       	pop	r13
    136a:	08 95       	ret

0000136c <sequence_step_enabled>:
    136c:	62 30       	cpi	r22, 0x02	; 2
    136e:	d9 f0       	breq	.+54     	; 0x13a6 <sequence_step_enabled+0x3a>
    1370:	28 f4       	brcc	.+10     	; 0x137c <sequence_step_enabled+0x10>
    1372:	66 23       	and	r22, r22
    1374:	59 f0       	breq	.+22     	; 0x138c <sequence_step_enabled+0x20>
    1376:	61 30       	cpi	r22, 0x01	; 1
    1378:	79 f0       	breq	.+30     	; 0x1398 <sequence_step_enabled+0x2c>
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <sequence_step_enabled+0x18>
    137c:	63 30       	cpi	r22, 0x03	; 3
    137e:	d1 f0       	breq	.+52     	; 0x13b4 <sequence_step_enabled+0x48>
    1380:	64 30       	cpi	r22, 0x04	; 4
    1382:	f9 f0       	breq	.+62     	; 0x13c2 <sequence_step_enabled+0x56>
    1384:	f9 01       	movw	r30, r18
    1386:	10 82       	st	Z, r1
    1388:	8c ef       	ldi	r24, 0xFC	; 252
    138a:	08 95       	ret
    138c:	42 95       	swap	r20
    138e:	41 70       	andi	r20, 0x01	; 1
    1390:	f9 01       	movw	r30, r18
    1392:	40 83       	st	Z, r20
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	08 95       	ret
    1398:	43 fb       	bst	r20, 3
    139a:	44 27       	eor	r20, r20
    139c:	40 f9       	bld	r20, 0
    139e:	f9 01       	movw	r30, r18
    13a0:	40 83       	st	Z, r20
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	08 95       	ret
    13a6:	42 fb       	bst	r20, 2
    13a8:	44 27       	eor	r20, r20
    13aa:	40 f9       	bld	r20, 0
    13ac:	f9 01       	movw	r30, r18
    13ae:	40 83       	st	Z, r20
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	08 95       	ret
    13b4:	46 fb       	bst	r20, 6
    13b6:	44 27       	eor	r20, r20
    13b8:	40 f9       	bld	r20, 0
    13ba:	f9 01       	movw	r30, r18
    13bc:	40 83       	st	Z, r20
    13be:	80 e0       	ldi	r24, 0x00	; 0
    13c0:	08 95       	ret
    13c2:	44 1f       	adc	r20, r20
    13c4:	44 27       	eor	r20, r20
    13c6:	44 1f       	adc	r20, r20
    13c8:	f9 01       	movw	r30, r18
    13ca:	40 83       	st	Z, r20
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret

000013d0 <VL53L0X_GetSequenceStepEnables>:
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	1f 92       	push	r1
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	8c 01       	movw	r16, r24
    13e4:	7b 01       	movw	r14, r22
    13e6:	19 82       	std	Y+1, r1	; 0x01
    13e8:	ae 01       	movw	r20, r28
    13ea:	4f 5f       	subi	r20, 0xFF	; 255
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    13f4:	81 11       	cpse	r24, r1
    13f6:	20 c0       	rjmp	.+64     	; 0x1438 <VL53L0X_GetSequenceStepEnables+0x68>
    13f8:	97 01       	movw	r18, r14
    13fa:	49 81       	ldd	r20, Y+1	; 0x01
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	c8 01       	movw	r24, r16
    1400:	b5 df       	rcall	.-150    	; 0x136c <sequence_step_enabled>
    1402:	81 11       	cpse	r24, r1
    1404:	22 c0       	rjmp	.+68     	; 0x144a <VL53L0X_GetSequenceStepEnables+0x7a>
    1406:	97 01       	movw	r18, r14
    1408:	2e 5f       	subi	r18, 0xFE	; 254
    140a:	3f 4f       	sbci	r19, 0xFF	; 255
    140c:	49 81       	ldd	r20, Y+1	; 0x01
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	c8 01       	movw	r24, r16
    1412:	ac df       	rcall	.-168    	; 0x136c <sequence_step_enabled>
    1414:	81 11       	cpse	r24, r1
    1416:	19 c0       	rjmp	.+50     	; 0x144a <VL53L0X_GetSequenceStepEnables+0x7a>
    1418:	97 01       	movw	r18, r14
    141a:	2f 5f       	subi	r18, 0xFF	; 255
    141c:	3f 4f       	sbci	r19, 0xFF	; 255
    141e:	49 81       	ldd	r20, Y+1	; 0x01
    1420:	62 e0       	ldi	r22, 0x02	; 2
    1422:	c8 01       	movw	r24, r16
    1424:	a3 df       	rcall	.-186    	; 0x136c <sequence_step_enabled>
    1426:	81 11       	cpse	r24, r1
    1428:	10 c0       	rjmp	.+32     	; 0x144a <VL53L0X_GetSequenceStepEnables+0x7a>
    142a:	97 01       	movw	r18, r14
    142c:	2d 5f       	subi	r18, 0xFD	; 253
    142e:	3f 4f       	sbci	r19, 0xFF	; 255
    1430:	49 81       	ldd	r20, Y+1	; 0x01
    1432:	63 e0       	ldi	r22, 0x03	; 3
    1434:	c8 01       	movw	r24, r16
    1436:	9a df       	rcall	.-204    	; 0x136c <sequence_step_enabled>
    1438:	81 11       	cpse	r24, r1
    143a:	07 c0       	rjmp	.+14     	; 0x144a <VL53L0X_GetSequenceStepEnables+0x7a>
    143c:	97 01       	movw	r18, r14
    143e:	2c 5f       	subi	r18, 0xFC	; 252
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	49 81       	ldd	r20, Y+1	; 0x01
    1444:	64 e0       	ldi	r22, 0x04	; 4
    1446:	c8 01       	movw	r24, r16
    1448:	91 df       	rcall	.-222    	; 0x136c <sequence_step_enabled>
    144a:	0f 90       	pop	r0
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	08 95       	ret

0000145a <VL53L0X_GetSequenceStepTimeout>:
    145a:	3f 92       	push	r3
    145c:	4f 92       	push	r4
    145e:	5f 92       	push	r5
    1460:	6f 92       	push	r6
    1462:	7f 92       	push	r7
    1464:	8f 92       	push	r8
    1466:	9f 92       	push	r9
    1468:	af 92       	push	r10
    146a:	bf 92       	push	r11
    146c:	cf 92       	push	r12
    146e:	df 92       	push	r13
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	00 d0       	rcall	.+0      	; 0x147e <VL53L0X_GetSequenceStepTimeout+0x24>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <VL53L0X_GetSequenceStepTimeout+0x26>
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	8a 01       	movw	r16, r20
    1486:	ae 01       	movw	r20, r28
    1488:	4f 5f       	subi	r20, 0xFF	; 255
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <get_sequence_step_timeout>
    1490:	38 2e       	mov	r3, r24
    1492:	81 11       	cpse	r24, r1
    1494:	38 c0       	rjmp	.+112    	; 0x1506 <VL53L0X_GetSequenceStepTimeout+0xac>
    1496:	49 80       	ldd	r4, Y+1	; 0x01
    1498:	5a 80       	ldd	r5, Y+2	; 0x02
    149a:	6b 80       	ldd	r6, Y+3	; 0x03
    149c:	7c 80       	ldd	r7, Y+4	; 0x04
    149e:	0f 2e       	mov	r0, r31
    14a0:	f8 ee       	ldi	r31, 0xE8	; 232
    14a2:	8f 2e       	mov	r8, r31
    14a4:	f3 e0       	ldi	r31, 0x03	; 3
    14a6:	9f 2e       	mov	r9, r31
    14a8:	a1 2c       	mov	r10, r1
    14aa:	b1 2c       	mov	r11, r1
    14ac:	f0 2d       	mov	r31, r0
    14ae:	c3 01       	movw	r24, r6
    14b0:	b2 01       	movw	r22, r4
    14b2:	a5 01       	movw	r20, r10
    14b4:	94 01       	movw	r18, r8
    14b6:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    14ba:	69 01       	movw	r12, r18
    14bc:	7a 01       	movw	r14, r20
    14be:	a8 ee       	ldi	r26, 0xE8	; 232
    14c0:	b3 e0       	ldi	r27, 0x03	; 3
    14c2:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    14c6:	a3 01       	movw	r20, r6
    14c8:	92 01       	movw	r18, r4
    14ca:	26 1b       	sub	r18, r22
    14cc:	37 0b       	sbc	r19, r23
    14ce:	48 0b       	sbc	r20, r24
    14d0:	59 0b       	sbc	r21, r25
    14d2:	af ef       	ldi	r26, 0xFF	; 255
    14d4:	bf ef       	ldi	r27, 0xFF	; 255
    14d6:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    14da:	6c 50       	subi	r22, 0x0C	; 12
    14dc:	7e 4f       	sbci	r23, 0xFE	; 254
    14de:	8f 4f       	sbci	r24, 0xFF	; 255
    14e0:	9f 4f       	sbci	r25, 0xFF	; 255
    14e2:	a5 01       	movw	r20, r10
    14e4:	94 01       	movw	r18, r8
    14e6:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    14ea:	76 01       	movw	r14, r12
    14ec:	dd 24       	eor	r13, r13
    14ee:	cc 24       	eor	r12, r12
    14f0:	da 01       	movw	r26, r20
    14f2:	c9 01       	movw	r24, r18
    14f4:	8c 0d       	add	r24, r12
    14f6:	9d 1d       	adc	r25, r13
    14f8:	ae 1d       	adc	r26, r14
    14fa:	bf 1d       	adc	r27, r15
    14fc:	f8 01       	movw	r30, r16
    14fe:	80 83       	st	Z, r24
    1500:	91 83       	std	Z+1, r25	; 0x01
    1502:	a2 83       	std	Z+2, r26	; 0x02
    1504:	b3 83       	std	Z+3, r27	; 0x03
    1506:	83 2d       	mov	r24, r3
    1508:	0f 90       	pop	r0
    150a:	0f 90       	pop	r0
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	9f 90       	pop	r9
    1526:	8f 90       	pop	r8
    1528:	7f 90       	pop	r7
    152a:	6f 90       	pop	r6
    152c:	5f 90       	pop	r5
    152e:	4f 90       	pop	r4
    1530:	3f 90       	pop	r3
    1532:	08 95       	ret

00001534 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
    1534:	cf 92       	push	r12
    1536:	df 92       	push	r13
    1538:	ef 92       	push	r14
    153a:	ff 92       	push	r15
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	00 d0       	rcall	.+0      	; 0x1544 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x10>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x12>
    1546:	00 d0       	rcall	.+0      	; 0x1548 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>
    1548:	cd b7       	in	r28, 0x3d	; 61
    154a:	de b7       	in	r29, 0x3e	; 62
    154c:	7c 01       	movw	r14, r24
    154e:	6b 01       	movw	r12, r22
    1550:	ae 01       	movw	r20, r28
    1552:	4f 5f       	subi	r20, 0xFF	; 255
    1554:	5f 4f       	sbci	r21, 0xFF	; 255
    1556:	68 ef       	ldi	r22, 0xF8	; 248
    1558:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    155c:	18 2f       	mov	r17, r24
    155e:	81 11       	cpse	r24, r1
    1560:	26 c0       	rjmp	.+76     	; 0x15ae <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    1562:	ae 01       	movw	r20, r28
    1564:	4d 5f       	subi	r20, 0xFD	; 253
    1566:	5f 4f       	sbci	r21, 0xFF	; 255
    1568:	64 e0       	ldi	r22, 0x04	; 4
    156a:	c7 01       	movw	r24, r14
    156c:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    1570:	18 2f       	mov	r17, r24
    1572:	81 11       	cpse	r24, r1
    1574:	1c c0       	rjmp	.+56     	; 0x15ae <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    1576:	29 81       	ldd	r18, Y+1	; 0x01
    1578:	3a 81       	ldd	r19, Y+2	; 0x02
    157a:	21 15       	cp	r18, r1
    157c:	31 05       	cpc	r19, r1
    157e:	69 f0       	breq	.+26     	; 0x159a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x66>
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	6b 81       	ldd	r22, Y+3	; 0x03
    1586:	7c 81       	ldd	r23, Y+4	; 0x04
    1588:	8d 81       	ldd	r24, Y+5	; 0x05
    158a:	9e 81       	ldd	r25, Y+6	; 0x06
    158c:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    1590:	f6 01       	movw	r30, r12
    1592:	20 83       	st	Z, r18
    1594:	31 83       	std	Z+1, r19	; 0x01
    1596:	42 83       	std	Z+2, r20	; 0x02
    1598:	53 83       	std	Z+3, r21	; 0x03
    159a:	f6 01       	movw	r30, r12
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	a2 81       	ldd	r26, Z+2	; 0x02
    15a2:	b3 81       	ldd	r27, Z+3	; 0x03
    15a4:	f7 01       	movw	r30, r14
    15a6:	86 8b       	std	Z+22, r24	; 0x16
    15a8:	97 8b       	std	Z+23, r25	; 0x17
    15aa:	a0 8f       	std	Z+24, r26	; 0x18
    15ac:	b1 8f       	std	Z+25, r27	; 0x19
    15ae:	81 2f       	mov	r24, r17
    15b0:	26 96       	adiw	r28, 0x06	; 6
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
    15bc:	df 91       	pop	r29
    15be:	cf 91       	pop	r28
    15c0:	1f 91       	pop	r17
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	08 95       	ret

000015cc <VL53L0X_GetXTalkCompensationEnable>:
    15cc:	fc 01       	movw	r30, r24
    15ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    15d0:	fb 01       	movw	r30, r22
    15d2:	80 83       	st	Z, r24
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	08 95       	ret

000015d8 <VL53L0X_GetXTalkCompensationRateMegaCps>:
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <VL53L0X_GetXTalkCompensationRateMegaCps+0xe>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	8c 01       	movw	r16, r24
    15ec:	7b 01       	movw	r14, r22
    15ee:	ae 01       	movw	r20, r28
    15f0:	4f 5f       	subi	r20, 0xFF	; 255
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255
    15f4:	60 e2       	ldi	r22, 0x20	; 32
    15f6:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    15fa:	81 11       	cpse	r24, r1
    15fc:	26 c0       	rjmp	.+76     	; 0x164a <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    15fe:	49 81       	ldd	r20, Y+1	; 0x01
    1600:	5a 81       	ldd	r21, Y+2	; 0x02
    1602:	41 15       	cp	r20, r1
    1604:	51 05       	cpc	r21, r1
    1606:	69 f4       	brne	.+26     	; 0x1622 <VL53L0X_GetXTalkCompensationRateMegaCps+0x4a>
    1608:	f8 01       	movw	r30, r16
    160a:	45 8d       	ldd	r20, Z+29	; 0x1d
    160c:	56 8d       	ldd	r21, Z+30	; 0x1e
    160e:	67 8d       	ldd	r22, Z+31	; 0x1f
    1610:	70 a1       	ldd	r23, Z+32	; 0x20
    1612:	f7 01       	movw	r30, r14
    1614:	40 83       	st	Z, r20
    1616:	51 83       	std	Z+1, r21	; 0x01
    1618:	62 83       	std	Z+2, r22	; 0x02
    161a:	73 83       	std	Z+3, r23	; 0x03
    161c:	f8 01       	movw	r30, r16
    161e:	12 8e       	std	Z+26, r1	; 0x1a
    1620:	14 c0       	rjmp	.+40     	; 0x164a <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    1622:	44 0f       	add	r20, r20
    1624:	55 1f       	adc	r21, r21
    1626:	44 0f       	add	r20, r20
    1628:	55 1f       	adc	r21, r21
    162a:	44 0f       	add	r20, r20
    162c:	55 1f       	adc	r21, r21
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	70 e0       	ldi	r23, 0x00	; 0
    1632:	f7 01       	movw	r30, r14
    1634:	40 83       	st	Z, r20
    1636:	51 83       	std	Z+1, r21	; 0x01
    1638:	62 83       	std	Z+2, r22	; 0x02
    163a:	73 83       	std	Z+3, r23	; 0x03
    163c:	f8 01       	movw	r30, r16
    163e:	45 8f       	std	Z+29, r20	; 0x1d
    1640:	56 8f       	std	Z+30, r21	; 0x1e
    1642:	67 8f       	std	Z+31, r22	; 0x1f
    1644:	70 a3       	std	Z+32, r23	; 0x20
    1646:	91 e0       	ldi	r25, 0x01	; 1
    1648:	92 8f       	std	Z+26, r25	; 0x1a
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	df 91       	pop	r29
    1650:	cf 91       	pop	r28
    1652:	1f 91       	pop	r17
    1654:	0f 91       	pop	r16
    1656:	ff 90       	pop	r15
    1658:	ef 90       	pop	r14
    165a:	08 95       	ret

0000165c <VL53L0X_SetLimitCheckEnable>:
    165c:	8f 92       	push	r8
    165e:	9f 92       	push	r9
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	ef 92       	push	r14
    1666:	ff 92       	push	r15
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	66 30       	cpi	r22, 0x06	; 6
    1670:	71 05       	cpc	r23, r1
    1672:	08 f0       	brcs	.+2      	; 0x1676 <VL53L0X_SetLimitCheckEnable+0x1a>
    1674:	47 c0       	rjmp	.+142    	; 0x1704 <VL53L0X_SetLimitCheckEnable+0xa8>
    1676:	44 23       	and	r20, r20
    1678:	09 f4       	brne	.+2      	; 0x167c <VL53L0X_SetLimitCheckEnable+0x20>
    167a:	48 c0       	rjmp	.+144    	; 0x170c <VL53L0X_SetLimitCheckEnable+0xb0>
    167c:	fb 01       	movw	r30, r22
    167e:	ee 0f       	add	r30, r30
    1680:	ff 1f       	adc	r31, r31
    1682:	ee 0f       	add	r30, r30
    1684:	ff 1f       	adc	r31, r31
    1686:	e8 0f       	add	r30, r24
    1688:	f9 1f       	adc	r31, r25
    168a:	81 a8       	ldd	r8, Z+49	; 0x31
    168c:	92 a8       	ldd	r9, Z+50	; 0x32
    168e:	a3 a8       	ldd	r10, Z+51	; 0x33
    1690:	b4 a8       	ldd	r11, Z+52	; 0x34
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	31 e0       	ldi	r19, 0x01	; 1
    1696:	3f c0       	rjmp	.+126    	; 0x1716 <VL53L0X_SetLimitCheckEnable+0xba>
    1698:	f7 01       	movw	r30, r14
    169a:	35 a3       	std	Z+37, r19	; 0x25
    169c:	26 c0       	rjmp	.+76     	; 0x16ea <VL53L0X_SetLimitCheckEnable+0x8e>
    169e:	b5 01       	movw	r22, r10
    16a0:	a4 01       	movw	r20, r8
    16a2:	03 2e       	mov	r0, r19
    16a4:	39 e0       	ldi	r19, 0x09	; 9
    16a6:	76 95       	lsr	r23
    16a8:	67 95       	ror	r22
    16aa:	57 95       	ror	r21
    16ac:	47 95       	ror	r20
    16ae:	3a 95       	dec	r19
    16b0:	d1 f7       	brne	.-12     	; 0x16a6 <VL53L0X_SetLimitCheckEnable+0x4a>
    16b2:	30 2d       	mov	r19, r0
    16b4:	64 e4       	ldi	r22, 0x44	; 68
    16b6:	c7 01       	movw	r24, r14
    16b8:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <VL53L0X_WrWord>
    16bc:	14 c0       	rjmp	.+40     	; 0x16e6 <VL53L0X_SetLimitCheckEnable+0x8a>
    16be:	f7 01       	movw	r30, r14
    16c0:	37 a3       	std	Z+39, r19	; 0x27
    16c2:	13 c0       	rjmp	.+38     	; 0x16ea <VL53L0X_SetLimitCheckEnable+0x8e>
    16c4:	f7 01       	movw	r30, r14
    16c6:	30 a7       	std	Z+40, r19	; 0x28
    16c8:	10 c0       	rjmp	.+32     	; 0x16ea <VL53L0X_SetLimitCheckEnable+0x8e>
    16ca:	22 0f       	add	r18, r18
    16cc:	4e ef       	ldi	r20, 0xFE	; 254
    16ce:	60 e6       	ldi	r22, 0x60	; 96
    16d0:	c7 01       	movw	r24, r14
    16d2:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <VL53L0X_UpdateByte>
    16d6:	07 c0       	rjmp	.+14     	; 0x16e6 <VL53L0X_SetLimitCheckEnable+0x8a>
    16d8:	22 95       	swap	r18
    16da:	20 7f       	andi	r18, 0xF0	; 240
    16dc:	4f ee       	ldi	r20, 0xEF	; 239
    16de:	60 e6       	ldi	r22, 0x60	; 96
    16e0:	c7 01       	movw	r24, r14
    16e2:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <VL53L0X_UpdateByte>
    16e6:	81 11       	cpse	r24, r1
    16e8:	2d c0       	rjmp	.+90     	; 0x1744 <VL53L0X_SetLimitCheckEnable+0xe8>
    16ea:	11 11       	cpse	r17, r1
    16ec:	05 c0       	rjmp	.+10     	; 0x16f8 <VL53L0X_SetLimitCheckEnable+0x9c>
    16ee:	ce 0d       	add	r28, r14
    16f0:	df 1d       	adc	r29, r15
    16f2:	1d a2       	std	Y+37, r1	; 0x25
    16f4:	80 e0       	ldi	r24, 0x00	; 0
    16f6:	26 c0       	rjmp	.+76     	; 0x1744 <VL53L0X_SetLimitCheckEnable+0xe8>
    16f8:	ce 0d       	add	r28, r14
    16fa:	df 1d       	adc	r29, r15
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	8d a3       	std	Y+37, r24	; 0x25
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	20 c0       	rjmp	.+64     	; 0x1744 <VL53L0X_SetLimitCheckEnable+0xe8>
    1704:	8c ef       	ldi	r24, 0xFC	; 252
    1706:	1e c0       	rjmp	.+60     	; 0x1744 <VL53L0X_SetLimitCheckEnable+0xe8>
    1708:	8c ef       	ldi	r24, 0xFC	; 252
    170a:	1c c0       	rjmp	.+56     	; 0x1744 <VL53L0X_SetLimitCheckEnable+0xe8>
    170c:	21 e0       	ldi	r18, 0x01	; 1
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 2c       	mov	r8, r1
    1712:	91 2c       	mov	r9, r1
    1714:	54 01       	movw	r10, r8
    1716:	14 2f       	mov	r17, r20
    1718:	eb 01       	movw	r28, r22
    171a:	7c 01       	movw	r14, r24
    171c:	62 30       	cpi	r22, 0x02	; 2
    171e:	71 05       	cpc	r23, r1
    1720:	71 f2       	breq	.-100    	; 0x16be <VL53L0X_SetLimitCheckEnable+0x62>
    1722:	40 f4       	brcc	.+16     	; 0x1734 <VL53L0X_SetLimitCheckEnable+0xd8>
    1724:	20 97       	sbiw	r28, 0x00	; 0
    1726:	09 f4       	brne	.+2      	; 0x172a <VL53L0X_SetLimitCheckEnable+0xce>
    1728:	b7 cf       	rjmp	.-146    	; 0x1698 <VL53L0X_SetLimitCheckEnable+0x3c>
    172a:	61 30       	cpi	r22, 0x01	; 1
    172c:	71 05       	cpc	r23, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <VL53L0X_SetLimitCheckEnable+0xd6>
    1730:	b6 cf       	rjmp	.-148    	; 0x169e <VL53L0X_SetLimitCheckEnable+0x42>
    1732:	ea cf       	rjmp	.-44     	; 0x1708 <VL53L0X_SetLimitCheckEnable+0xac>
    1734:	64 30       	cpi	r22, 0x04	; 4
    1736:	71 05       	cpc	r23, r1
    1738:	41 f2       	breq	.-112    	; 0x16ca <VL53L0X_SetLimitCheckEnable+0x6e>
    173a:	20 f2       	brcs	.-120    	; 0x16c4 <VL53L0X_SetLimitCheckEnable+0x68>
    173c:	65 30       	cpi	r22, 0x05	; 5
    173e:	71 05       	cpc	r23, r1
    1740:	59 f2       	breq	.-106    	; 0x16d8 <VL53L0X_SetLimitCheckEnable+0x7c>
    1742:	e2 cf       	rjmp	.-60     	; 0x1708 <VL53L0X_SetLimitCheckEnable+0xac>
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	1f 91       	pop	r17
    174a:	ff 90       	pop	r15
    174c:	ef 90       	pop	r14
    174e:	bf 90       	pop	r11
    1750:	af 90       	pop	r10
    1752:	9f 90       	pop	r9
    1754:	8f 90       	pop	r8
    1756:	08 95       	ret

00001758 <VL53L0X_GetLimitCheckEnable>:
    1758:	66 30       	cpi	r22, 0x06	; 6
    175a:	71 05       	cpc	r23, r1
    175c:	20 f0       	brcs	.+8      	; 0x1766 <VL53L0X_GetLimitCheckEnable+0xe>
    175e:	fa 01       	movw	r30, r20
    1760:	10 82       	st	Z, r1
    1762:	8c ef       	ldi	r24, 0xFC	; 252
    1764:	08 95       	ret
    1766:	fc 01       	movw	r30, r24
    1768:	e6 0f       	add	r30, r22
    176a:	f7 1f       	adc	r31, r23
    176c:	85 a1       	ldd	r24, Z+37	; 0x25
    176e:	fa 01       	movw	r30, r20
    1770:	80 83       	st	Z, r24
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	08 95       	ret

00001776 <VL53L0X_SetLimitCheckValue>:
    1776:	cf 92       	push	r12
    1778:	df 92       	push	r13
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	fc 01       	movw	r30, r24
    1788:	e6 0f       	add	r30, r22
    178a:	f7 1f       	adc	r31, r23
    178c:	e5 a1       	ldd	r30, Z+37	; 0x25
    178e:	e1 11       	cpse	r30, r1
    1790:	0d c0       	rjmp	.+26     	; 0x17ac <VL53L0X_SetLimitCheckValue+0x36>
    1792:	66 0f       	add	r22, r22
    1794:	77 1f       	adc	r23, r23
    1796:	66 0f       	add	r22, r22
    1798:	77 1f       	adc	r23, r23
    179a:	ec 01       	movw	r28, r24
    179c:	c6 0f       	add	r28, r22
    179e:	d7 1f       	adc	r29, r23
    17a0:	29 ab       	std	Y+49, r18	; 0x31
    17a2:	3a ab       	std	Y+50, r19	; 0x32
    17a4:	4b ab       	std	Y+51, r20	; 0x33
    17a6:	5c ab       	std	Y+52, r21	; 0x34
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	56 c0       	rjmp	.+172    	; 0x1858 <VL53L0X_SetLimitCheckValue+0xe2>
    17ac:	69 01       	movw	r12, r18
    17ae:	7a 01       	movw	r14, r20
    17b0:	eb 01       	movw	r28, r22
    17b2:	8c 01       	movw	r16, r24
    17b4:	62 30       	cpi	r22, 0x02	; 2
    17b6:	71 05       	cpc	r23, r1
    17b8:	19 f1       	breq	.+70     	; 0x1800 <VL53L0X_SetLimitCheckValue+0x8a>
    17ba:	30 f4       	brcc	.+12     	; 0x17c8 <VL53L0X_SetLimitCheckValue+0x52>
    17bc:	20 97       	sbiw	r28, 0x00	; 0
    17be:	59 f0       	breq	.+22     	; 0x17d6 <VL53L0X_SetLimitCheckValue+0x60>
    17c0:	61 30       	cpi	r22, 0x01	; 1
    17c2:	71 05       	cpc	r23, r1
    17c4:	71 f0       	breq	.+28     	; 0x17e2 <VL53L0X_SetLimitCheckValue+0x6c>
    17c6:	38 c0       	rjmp	.+112    	; 0x1838 <VL53L0X_SetLimitCheckValue+0xc2>
    17c8:	63 30       	cpi	r22, 0x03	; 3
    17ca:	71 05       	cpc	r23, r1
    17cc:	f9 f0       	breq	.+62     	; 0x180c <VL53L0X_SetLimitCheckValue+0x96>
    17ce:	66 30       	cpi	r22, 0x06	; 6
    17d0:	71 05       	cpc	r23, r1
    17d2:	18 f1       	brcs	.+70     	; 0x181a <VL53L0X_SetLimitCheckValue+0xa4>
    17d4:	31 c0       	rjmp	.+98     	; 0x1838 <VL53L0X_SetLimitCheckValue+0xc2>
    17d6:	fc 01       	movw	r30, r24
    17d8:	21 ab       	std	Z+49, r18	; 0x31
    17da:	32 ab       	std	Z+50, r19	; 0x32
    17dc:	43 ab       	std	Z+51, r20	; 0x33
    17de:	54 ab       	std	Z+52, r21	; 0x34
    17e0:	2e c0       	rjmp	.+92     	; 0x183e <VL53L0X_SetLimitCheckValue+0xc8>
    17e2:	ba 01       	movw	r22, r20
    17e4:	a9 01       	movw	r20, r18
    17e6:	03 2e       	mov	r0, r19
    17e8:	39 e0       	ldi	r19, 0x09	; 9
    17ea:	76 95       	lsr	r23
    17ec:	67 95       	ror	r22
    17ee:	57 95       	ror	r21
    17f0:	47 95       	ror	r20
    17f2:	3a 95       	dec	r19
    17f4:	d1 f7       	brne	.-12     	; 0x17ea <VL53L0X_SetLimitCheckValue+0x74>
    17f6:	30 2d       	mov	r19, r0
    17f8:	64 e4       	ldi	r22, 0x44	; 68
    17fa:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <VL53L0X_WrWord>
    17fe:	1d c0       	rjmp	.+58     	; 0x183a <VL53L0X_SetLimitCheckValue+0xc4>
    1800:	fc 01       	movw	r30, r24
    1802:	21 af       	std	Z+57, r18	; 0x39
    1804:	32 af       	std	Z+58, r19	; 0x3a
    1806:	43 af       	std	Z+59, r20	; 0x3b
    1808:	54 af       	std	Z+60, r21	; 0x3c
    180a:	19 c0       	rjmp	.+50     	; 0x183e <VL53L0X_SetLimitCheckValue+0xc8>
    180c:	fc 01       	movw	r30, r24
    180e:	fd 96       	adiw	r30, 0x3d	; 61
    1810:	20 83       	st	Z, r18
    1812:	31 83       	std	Z+1, r19	; 0x01
    1814:	42 83       	std	Z+2, r20	; 0x02
    1816:	53 83       	std	Z+3, r21	; 0x03
    1818:	12 c0       	rjmp	.+36     	; 0x183e <VL53L0X_SetLimitCheckValue+0xc8>
    181a:	ba 01       	movw	r22, r20
    181c:	a9 01       	movw	r20, r18
    181e:	03 2e       	mov	r0, r19
    1820:	39 e0       	ldi	r19, 0x09	; 9
    1822:	76 95       	lsr	r23
    1824:	67 95       	ror	r22
    1826:	57 95       	ror	r21
    1828:	47 95       	ror	r20
    182a:	3a 95       	dec	r19
    182c:	d1 f7       	brne	.-12     	; 0x1822 <VL53L0X_SetLimitCheckValue+0xac>
    182e:	30 2d       	mov	r19, r0
    1830:	64 e6       	ldi	r22, 0x64	; 100
    1832:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <VL53L0X_WrWord>
    1836:	01 c0       	rjmp	.+2      	; 0x183a <VL53L0X_SetLimitCheckValue+0xc4>
    1838:	8c ef       	ldi	r24, 0xFC	; 252
    183a:	81 11       	cpse	r24, r1
    183c:	0d c0       	rjmp	.+26     	; 0x1858 <VL53L0X_SetLimitCheckValue+0xe2>
    183e:	be 01       	movw	r22, r28
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	66 0f       	add	r22, r22
    1846:	77 1f       	adc	r23, r23
    1848:	e8 01       	movw	r28, r16
    184a:	c6 0f       	add	r28, r22
    184c:	d7 1f       	adc	r29, r23
    184e:	c9 aa       	std	Y+49, r12	; 0x31
    1850:	da aa       	std	Y+50, r13	; 0x32
    1852:	eb aa       	std	Y+51, r14	; 0x33
    1854:	fc aa       	std	Y+52, r15	; 0x34
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	1f 91       	pop	r17
    185e:	0f 91       	pop	r16
    1860:	ff 90       	pop	r15
    1862:	ef 90       	pop	r14
    1864:	df 90       	pop	r13
    1866:	cf 90       	pop	r12
    1868:	08 95       	ret

0000186a <VL53L0X_GetLimitCheckValue>:
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <VL53L0X_GetLimitCheckValue+0xe>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	8c 01       	movw	r16, r24
    187e:	7a 01       	movw	r14, r20
    1880:	62 30       	cpi	r22, 0x02	; 2
    1882:	71 05       	cpc	r23, r1
    1884:	51 f1       	breq	.+84     	; 0x18da <VL53L0X_GetLimitCheckValue+0x70>
    1886:	38 f4       	brcc	.+14     	; 0x1896 <VL53L0X_GetLimitCheckValue+0x2c>
    1888:	61 15       	cp	r22, r1
    188a:	71 05       	cpc	r23, r1
    188c:	59 f0       	breq	.+22     	; 0x18a4 <VL53L0X_GetLimitCheckValue+0x3a>
    188e:	61 30       	cpi	r22, 0x01	; 1
    1890:	71 05       	cpc	r23, r1
    1892:	71 f0       	breq	.+28     	; 0x18b0 <VL53L0X_GetLimitCheckValue+0x46>
    1894:	59 c0       	rjmp	.+178    	; 0x1948 <VL53L0X_GetLimitCheckValue+0xde>
    1896:	63 30       	cpi	r22, 0x03	; 3
    1898:	71 05       	cpc	r23, r1
    189a:	29 f1       	breq	.+74     	; 0x18e6 <VL53L0X_GetLimitCheckValue+0x7c>
    189c:	66 30       	cpi	r22, 0x06	; 6
    189e:	71 05       	cpc	r23, r1
    18a0:	48 f1       	brcs	.+82     	; 0x18f4 <VL53L0X_GetLimitCheckValue+0x8a>
    18a2:	52 c0       	rjmp	.+164    	; 0x1948 <VL53L0X_GetLimitCheckValue+0xde>
    18a4:	fc 01       	movw	r30, r24
    18a6:	81 a9       	ldd	r24, Z+49	; 0x31
    18a8:	92 a9       	ldd	r25, Z+50	; 0x32
    18aa:	a3 a9       	ldd	r26, Z+51	; 0x33
    18ac:	b4 a9       	ldd	r27, Z+52	; 0x34
    18ae:	4e c0       	rjmp	.+156    	; 0x194c <VL53L0X_GetLimitCheckValue+0xe2>
    18b0:	ae 01       	movw	r20, r28
    18b2:	4f 5f       	subi	r20, 0xFF	; 255
    18b4:	5f 4f       	sbci	r21, 0xFF	; 255
    18b6:	64 e4       	ldi	r22, 0x44	; 68
    18b8:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    18bc:	81 11       	cpse	r24, r1
    18be:	4c c0       	rjmp	.+152    	; 0x1958 <VL53L0X_GetLimitCheckValue+0xee>
    18c0:	99 81       	ldd	r25, Y+1	; 0x01
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	50 e0       	ldi	r21, 0x00	; 0
    18c6:	59 2f       	mov	r21, r25
    18c8:	55 0f       	add	r21, r21
    18ca:	60 e0       	ldi	r22, 0x00	; 0
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	41 15       	cp	r20, r1
    18d0:	51 05       	cpc	r21, r1
    18d2:	61 05       	cpc	r22, r1
    18d4:	71 05       	cpc	r23, r1
    18d6:	f1 f0       	breq	.+60     	; 0x1914 <VL53L0X_GetLimitCheckValue+0xaa>
    18d8:	2a c0       	rjmp	.+84     	; 0x192e <VL53L0X_GetLimitCheckValue+0xc4>
    18da:	fc 01       	movw	r30, r24
    18dc:	81 ad       	ldd	r24, Z+57	; 0x39
    18de:	92 ad       	ldd	r25, Z+58	; 0x3a
    18e0:	a3 ad       	ldd	r26, Z+59	; 0x3b
    18e2:	b4 ad       	ldd	r27, Z+60	; 0x3c
    18e4:	33 c0       	rjmp	.+102    	; 0x194c <VL53L0X_GetLimitCheckValue+0xe2>
    18e6:	fc 01       	movw	r30, r24
    18e8:	fd 96       	adiw	r30, 0x3d	; 61
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	a2 81       	ldd	r26, Z+2	; 0x02
    18f0:	b3 81       	ldd	r27, Z+3	; 0x03
    18f2:	2c c0       	rjmp	.+88     	; 0x194c <VL53L0X_GetLimitCheckValue+0xe2>
    18f4:	ae 01       	movw	r20, r28
    18f6:	4f 5f       	subi	r20, 0xFF	; 255
    18f8:	5f 4f       	sbci	r21, 0xFF	; 255
    18fa:	64 e6       	ldi	r22, 0x64	; 100
    18fc:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    1900:	81 11       	cpse	r24, r1
    1902:	2a c0       	rjmp	.+84     	; 0x1958 <VL53L0X_GetLimitCheckValue+0xee>
    1904:	29 81       	ldd	r18, Y+1	; 0x01
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	92 2f       	mov	r25, r18
    190c:	99 0f       	add	r25, r25
    190e:	a0 e0       	ldi	r26, 0x00	; 0
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	1c c0       	rjmp	.+56     	; 0x194c <VL53L0X_GetLimitCheckValue+0xe2>
    1914:	f8 01       	movw	r30, r16
    1916:	45 a9       	ldd	r20, Z+53	; 0x35
    1918:	56 a9       	ldd	r21, Z+54	; 0x36
    191a:	67 a9       	ldd	r22, Z+55	; 0x37
    191c:	70 ad       	ldd	r23, Z+56	; 0x38
    191e:	f7 01       	movw	r30, r14
    1920:	40 83       	st	Z, r20
    1922:	51 83       	std	Z+1, r21	; 0x01
    1924:	62 83       	std	Z+2, r22	; 0x02
    1926:	73 83       	std	Z+3, r23	; 0x03
    1928:	f8 01       	movw	r30, r16
    192a:	16 a2       	std	Z+38, r1	; 0x26
    192c:	15 c0       	rjmp	.+42     	; 0x1958 <VL53L0X_GetLimitCheckValue+0xee>
    192e:	f7 01       	movw	r30, r14
    1930:	40 83       	st	Z, r20
    1932:	51 83       	std	Z+1, r21	; 0x01
    1934:	62 83       	std	Z+2, r22	; 0x02
    1936:	73 83       	std	Z+3, r23	; 0x03
    1938:	f8 01       	movw	r30, r16
    193a:	45 ab       	std	Z+53, r20	; 0x35
    193c:	56 ab       	std	Z+54, r21	; 0x36
    193e:	67 ab       	std	Z+55, r22	; 0x37
    1940:	70 af       	std	Z+56, r23	; 0x38
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	96 a3       	std	Z+38, r25	; 0x26
    1946:	08 c0       	rjmp	.+16     	; 0x1958 <VL53L0X_GetLimitCheckValue+0xee>
    1948:	8c ef       	ldi	r24, 0xFC	; 252
    194a:	06 c0       	rjmp	.+12     	; 0x1958 <VL53L0X_GetLimitCheckValue+0xee>
    194c:	f7 01       	movw	r30, r14
    194e:	80 83       	st	Z, r24
    1950:	91 83       	std	Z+1, r25	; 0x01
    1952:	a2 83       	std	Z+2, r26	; 0x02
    1954:	b3 83       	std	Z+3, r27	; 0x03
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	0f 90       	pop	r0
    195a:	0f 90       	pop	r0
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	1f 91       	pop	r17
    1962:	0f 91       	pop	r16
    1964:	ff 90       	pop	r15
    1966:	ef 90       	pop	r14
    1968:	08 95       	ret

0000196a <VL53L0X_GetWrapAroundCheckEnable>:
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	cf 93       	push	r28
    1974:	df 93       	push	r29
    1976:	1f 92       	push	r1
    1978:	cd b7       	in	r28, 0x3d	; 61
    197a:	de b7       	in	r29, 0x3e	; 62
    197c:	8c 01       	movw	r16, r24
    197e:	7b 01       	movw	r14, r22
    1980:	ae 01       	movw	r20, r28
    1982:	4f 5f       	subi	r20, 0xFF	; 255
    1984:	5f 4f       	sbci	r21, 0xFF	; 255
    1986:	61 e0       	ldi	r22, 0x01	; 1
    1988:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    198c:	81 11       	cpse	r24, r1
    198e:	13 c0       	rjmp	.+38     	; 0x19b6 <VL53L0X_GetWrapAroundCheckEnable+0x4c>
    1990:	99 81       	ldd	r25, Y+1	; 0x01
    1992:	f8 01       	movw	r30, r16
    1994:	e3 5e       	subi	r30, 0xE3	; 227
    1996:	fe 4f       	sbci	r31, 0xFE	; 254
    1998:	90 83       	st	Z, r25
    199a:	99 23       	and	r25, r25
    199c:	24 f4       	brge	.+8      	; 0x19a6 <VL53L0X_GetWrapAroundCheckEnable+0x3c>
    199e:	91 e0       	ldi	r25, 0x01	; 1
    19a0:	f7 01       	movw	r30, r14
    19a2:	90 83       	st	Z, r25
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <VL53L0X_GetWrapAroundCheckEnable+0x40>
    19a6:	f7 01       	movw	r30, r14
    19a8:	10 82       	st	Z, r1
    19aa:	f7 01       	movw	r30, r14
    19ac:	90 81       	ld	r25, Z
    19ae:	f8 01       	movw	r30, r16
    19b0:	e7 5b       	subi	r30, 0xB7	; 183
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	90 83       	st	Z, r25
    19b6:	0f 90       	pop	r0
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	08 95       	ret

000019c6 <VL53L0X_GetDeviceParameters>:
    19c6:	8f 92       	push	r8
    19c8:	9f 92       	push	r9
    19ca:	af 92       	push	r10
    19cc:	bf 92       	push	r11
    19ce:	cf 92       	push	r12
    19d0:	df 92       	push	r13
    19d2:	ef 92       	push	r14
    19d4:	ff 92       	push	r15
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	ec 01       	movw	r28, r24
    19e0:	7b 01       	movw	r14, r22
    19e2:	88 89       	ldd	r24, Y+16	; 0x10
    19e4:	fb 01       	movw	r30, r22
    19e6:	80 83       	st	Z, r24
    19e8:	6a 5f       	subi	r22, 0xFA	; 250
    19ea:	7f 4f       	sbci	r23, 0xFF	; 255
    19ec:	ce 01       	movw	r24, r28
    19ee:	a2 dd       	rcall	.-1212   	; 0x1534 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
    19f0:	81 11       	cpse	r24, r1
    19f2:	33 c0       	rjmp	.+102    	; 0x1a5a <VL53L0X_GetDeviceParameters+0x94>
    19f4:	f7 01       	movw	r30, r14
    19f6:	12 86       	std	Z+10, r1	; 0x0a
    19f8:	b7 01       	movw	r22, r14
    19fa:	63 5f       	subi	r22, 0xF3	; 243
    19fc:	7f 4f       	sbci	r23, 0xFF	; 255
    19fe:	ce 01       	movw	r24, r28
    1a00:	eb dd       	rcall	.-1066   	; 0x15d8 <VL53L0X_GetXTalkCompensationRateMegaCps>
    1a02:	81 11       	cpse	r24, r1
    1a04:	39 c0       	rjmp	.+114    	; 0x1a78 <VL53L0X_GetDeviceParameters+0xb2>
    1a06:	b7 01       	movw	r22, r14
    1a08:	6f 5e       	subi	r22, 0xEF	; 239
    1a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a0c:	ce 01       	movw	r24, r28
    1a0e:	a6 d6       	rcall	.+3404   	; 0x275c <VL53L0X_get_offset_calibration_data_micro_meter>
    1a10:	81 11       	cpse	r24, r1
    1a12:	32 c0       	rjmp	.+100    	; 0x1a78 <VL53L0X_GetDeviceParameters+0xb2>
    1a14:	87 01       	movw	r16, r14
    1a16:	0f 5d       	subi	r16, 0xDF	; 223
    1a18:	1f 4f       	sbci	r17, 0xFF	; 255
    1a1a:	5e 01       	movw	r10, r28
    1a1c:	f5 e2       	ldi	r31, 0x25	; 37
    1a1e:	af 0e       	add	r10, r31
    1a20:	b1 1c       	adc	r11, r1
    1a22:	67 01       	movw	r12, r14
    1a24:	85 e1       	ldi	r24, 0x15	; 21
    1a26:	c8 0e       	add	r12, r24
    1a28:	d1 1c       	adc	r13, r1
    1a2a:	81 2c       	mov	r8, r1
    1a2c:	91 2c       	mov	r9, r1
    1a2e:	a8 01       	movw	r20, r16
    1a30:	b4 01       	movw	r22, r8
    1a32:	ce 01       	movw	r24, r28
    1a34:	1a df       	rcall	.-460    	; 0x186a <VL53L0X_GetLimitCheckValue>
    1a36:	81 11       	cpse	r24, r1
    1a38:	1f c0       	rjmp	.+62     	; 0x1a78 <VL53L0X_GetDeviceParameters+0xb2>
    1a3a:	f5 01       	movw	r30, r10
    1a3c:	81 91       	ld	r24, Z+
    1a3e:	5f 01       	movw	r10, r30
    1a40:	f6 01       	movw	r30, r12
    1a42:	81 93       	st	Z+, r24
    1a44:	6f 01       	movw	r12, r30
    1a46:	ff ef       	ldi	r31, 0xFF	; 255
    1a48:	8f 1a       	sub	r8, r31
    1a4a:	9f 0a       	sbc	r9, r31
    1a4c:	0c 5f       	subi	r16, 0xFC	; 252
    1a4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1a50:	86 e0       	ldi	r24, 0x06	; 6
    1a52:	88 16       	cp	r8, r24
    1a54:	91 04       	cpc	r9, r1
    1a56:	59 f7       	brne	.-42     	; 0x1a2e <VL53L0X_GetDeviceParameters+0x68>
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <VL53L0X_GetDeviceParameters+0x98>
    1a5a:	81 11       	cpse	r24, r1
    1a5c:	0d c0       	rjmp	.+26     	; 0x1a78 <VL53L0X_GetDeviceParameters+0xb2>
    1a5e:	b7 01       	movw	r22, r14
    1a60:	67 5c       	subi	r22, 0xC7	; 199
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	ce 01       	movw	r24, r28
    1a66:	81 df       	rcall	.-254    	; 0x196a <VL53L0X_GetWrapAroundCheckEnable>
    1a68:	81 11       	cpse	r24, r1
    1a6a:	06 c0       	rjmp	.+12     	; 0x1a78 <VL53L0X_GetDeviceParameters+0xb2>
    1a6c:	b7 01       	movw	r22, r14
    1a6e:	6e 5f       	subi	r22, 0xFE	; 254
    1a70:	7f 4f       	sbci	r23, 0xFF	; 255
    1a72:	ce 01       	movw	r24, r28
    1a74:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <VL53L0X_get_measurement_timing_budget_micro_seconds>
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	ff 90       	pop	r15
    1a82:	ef 90       	pop	r14
    1a84:	df 90       	pop	r13
    1a86:	cf 90       	pop	r12
    1a88:	bf 90       	pop	r11
    1a8a:	af 90       	pop	r10
    1a8c:	9f 90       	pop	r9
    1a8e:	8f 90       	pop	r8
    1a90:	08 95       	ret

00001a92 <VL53L0X_DataInit>:
    1a92:	ef 92       	push	r14
    1a94:	ff 92       	push	r15
    1a96:	0f 93       	push	r16
    1a98:	1f 93       	push	r17
    1a9a:	cf 93       	push	r28
    1a9c:	df 93       	push	r29
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	ec 97       	sbiw	r28, 0x3c	; 60
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	8c 01       	movw	r16, r24
    1ab0:	21 e0       	ldi	r18, 0x01	; 1
    1ab2:	4e ef       	ldi	r20, 0xFE	; 254
    1ab4:	69 e8       	ldi	r22, 0x89	; 137
    1ab6:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <VL53L0X_UpdateByte>
    1aba:	81 11       	cpse	r24, r1
    1abc:	05 c0       	rjmp	.+10     	; 0x1ac8 <VL53L0X_DataInit+0x36>
    1abe:	40 e0       	ldi	r20, 0x00	; 0
    1ac0:	68 e8       	ldi	r22, 0x88	; 136
    1ac2:	c8 01       	movw	r24, r16
    1ac4:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1ac8:	ae 01       	movw	r20, r28
    1aca:	44 5c       	subi	r20, 0xC4	; 196
    1acc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ace:	60 ec       	ldi	r22, 0xC0	; 192
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	e1 52       	subi	r30, 0x21	; 33
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	10 82       	st	Z, r1
    1ade:	88 ee       	ldi	r24, 0xE8	; 232
    1ae0:	93 e0       	ldi	r25, 0x03	; 3
    1ae2:	e6 5a       	subi	r30, 0xA6	; 166
    1ae4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae6:	91 83       	std	Z+1, r25	; 0x01
    1ae8:	80 83       	st	Z, r24
    1aea:	80 e9       	ldi	r24, 0x90	; 144
    1aec:	91 e0       	ldi	r25, 0x01	; 1
    1aee:	32 96       	adiw	r30, 0x02	; 2
    1af0:	91 83       	std	Z+1, r25	; 0x01
    1af2:	80 83       	st	Z, r24
    1af4:	85 e8       	ldi	r24, 0x85	; 133
    1af6:	9b e6       	ldi	r25, 0x6B	; 107
    1af8:	a1 e0       	ldi	r26, 0x01	; 1
    1afa:	b0 e0       	ldi	r27, 0x00	; 0
    1afc:	32 96       	adiw	r30, 0x02	; 2
    1afe:	80 83       	st	Z, r24
    1b00:	91 83       	std	Z+1, r25	; 0x01
    1b02:	a2 83       	std	Z+2, r26	; 0x02
    1b04:	b3 83       	std	Z+3, r27	; 0x03
    1b06:	84 ea       	ldi	r24, 0xA4	; 164
    1b08:	90 e7       	ldi	r25, 0x70	; 112
    1b0a:	a9 e0       	ldi	r26, 0x09	; 9
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	e5 57       	subi	r30, 0x75	; 117
    1b10:	f1 09       	sbc	r31, r1
    1b12:	80 83       	st	Z, r24
    1b14:	91 83       	std	Z+1, r25	; 0x01
    1b16:	a2 83       	std	Z+2, r26	; 0x02
    1b18:	b3 83       	std	Z+3, r27	; 0x03
    1b1a:	f8 01       	movw	r30, r16
    1b1c:	15 8e       	std	Z+29, r1	; 0x1d
    1b1e:	16 8e       	std	Z+30, r1	; 0x1e
    1b20:	17 8e       	std	Z+31, r1	; 0x1f
    1b22:	10 a2       	std	Z+32, r1	; 0x20
    1b24:	be 01       	movw	r22, r28
    1b26:	6f 5f       	subi	r22, 0xFF	; 255
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	c8 01       	movw	r24, r16
    1b2c:	4c df       	rcall	.-360    	; 0x19c6 <VL53L0X_GetDeviceParameters>
    1b2e:	f8 2e       	mov	r15, r24
    1b30:	81 11       	cpse	r24, r1
    1b32:	0b c0       	rjmp	.+22     	; 0x1b4a <VL53L0X_DataInit+0xb8>
    1b34:	19 82       	std	Y+1, r1	; 0x01
    1b36:	1a 82       	std	Y+2, r1	; 0x02
    1b38:	8a e3       	ldi	r24, 0x3A	; 58
    1b3a:	fe 01       	movw	r30, r28
    1b3c:	31 96       	adiw	r30, 0x01	; 1
    1b3e:	d8 01       	movw	r26, r16
    1b40:	50 96       	adiw	r26, 0x10	; 16
    1b42:	01 90       	ld	r0, Z+
    1b44:	0d 92       	st	X+, r0
    1b46:	8a 95       	dec	r24
    1b48:	e1 f7       	brne	.-8      	; 0x1b42 <VL53L0X_DataInit+0xb0>
    1b4a:	84 e6       	ldi	r24, 0x64	; 100
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	f8 01       	movw	r30, r16
    1b50:	ef 5d       	subi	r30, 0xDF	; 223
    1b52:	fe 4f       	sbci	r31, 0xFE	; 254
    1b54:	91 83       	std	Z+1, r25	; 0x01
    1b56:	80 83       	st	Z, r24
    1b58:	84 e8       	ldi	r24, 0x84	; 132
    1b5a:	93 e0       	ldi	r25, 0x03	; 3
    1b5c:	32 96       	adiw	r30, 0x02	; 2
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	84 ef       	ldi	r24, 0xF4	; 244
    1b64:	91 e0       	ldi	r25, 0x01	; 1
    1b66:	32 96       	adiw	r30, 0x02	; 2
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	9a e0       	ldi	r25, 0x0A	; 10
    1b70:	33 96       	adiw	r30, 0x03	; 3
    1b72:	91 83       	std	Z+1, r25	; 0x01
    1b74:	80 83       	st	Z, r24
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	70 96       	adiw	r30, 0x10	; 16
    1b7a:	80 83       	st	Z, r24
    1b7c:	41 e0       	ldi	r20, 0x01	; 1
    1b7e:	60 e8       	ldi	r22, 0x80	; 128
    1b80:	c8 01       	movw	r24, r16
    1b82:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1b86:	e8 2e       	mov	r14, r24
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	6f ef       	ldi	r22, 0xFF	; 255
    1b8c:	c8 01       	movw	r24, r16
    1b8e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1b92:	8e 29       	or	r24, r14
    1b94:	f8 2a       	or	r15, r24
    1b96:	40 e0       	ldi	r20, 0x00	; 0
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1ba0:	f8 2a       	or	r15, r24
    1ba2:	ae 01       	movw	r20, r28
    1ba4:	45 5c       	subi	r20, 0xC5	; 197
    1ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ba8:	61 e9       	ldi	r22, 0x91	; 145
    1baa:	c8 01       	movw	r24, r16
    1bac:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    1bb0:	f8 2a       	or	r15, r24
    1bb2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1bb4:	f8 01       	movw	r30, r16
    1bb6:	e9 5d       	subi	r30, 0xD9	; 217
    1bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    1bba:	80 83       	st	Z, r24
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1bc6:	f8 2a       	or	r15, r24
    1bc8:	40 e0       	ldi	r20, 0x00	; 0
    1bca:	6f ef       	ldi	r22, 0xFF	; 255
    1bcc:	c8 01       	movw	r24, r16
    1bce:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1bd2:	f8 2a       	or	r15, r24
    1bd4:	40 e0       	ldi	r20, 0x00	; 0
    1bd6:	60 e8       	ldi	r22, 0x80	; 128
    1bd8:	c8 01       	movw	r24, r16
    1bda:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1bde:	8f 29       	or	r24, r15
    1be0:	09 f4       	brne	.+2      	; 0x1be4 <VL53L0X_DataInit+0x152>
    1be2:	69 c0       	rjmp	.+210    	; 0x1cb6 <VL53L0X_DataInit+0x224>
    1be4:	14 c0       	rjmp	.+40     	; 0x1c0e <VL53L0X_DataInit+0x17c>
    1be6:	81 11       	cpse	r24, r1
    1be8:	12 c0       	rjmp	.+36     	; 0x1c0e <VL53L0X_DataInit+0x17c>
    1bea:	41 e0       	ldi	r20, 0x01	; 1
    1bec:	b7 01       	movw	r22, r14
    1bee:	c8 01       	movw	r24, r16
    1bf0:	35 dd       	rcall	.-1430   	; 0x165c <VL53L0X_SetLimitCheckEnable>
    1bf2:	ff ef       	ldi	r31, 0xFF	; 255
    1bf4:	ef 1a       	sub	r14, r31
    1bf6:	ff 0a       	sbc	r15, r31
    1bf8:	96 e0       	ldi	r25, 0x06	; 6
    1bfa:	e9 16       	cp	r14, r25
    1bfc:	f1 04       	cpc	r15, r1
    1bfe:	99 f7       	brne	.-26     	; 0x1be6 <VL53L0X_DataInit+0x154>
    1c00:	81 11       	cpse	r24, r1
    1c02:	1a c0       	rjmp	.+52     	; 0x1c38 <VL53L0X_DataInit+0x1a6>
    1c04:	40 e0       	ldi	r20, 0x00	; 0
    1c06:	62 e0       	ldi	r22, 0x02	; 2
    1c08:	70 e0       	ldi	r23, 0x00	; 0
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	27 dd       	rcall	.-1458   	; 0x165c <VL53L0X_SetLimitCheckEnable>
    1c0e:	81 11       	cpse	r24, r1
    1c10:	1d c0       	rjmp	.+58     	; 0x1c4c <VL53L0X_DataInit+0x1ba>
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	63 e0       	ldi	r22, 0x03	; 3
    1c16:	70 e0       	ldi	r23, 0x00	; 0
    1c18:	c8 01       	movw	r24, r16
    1c1a:	20 dd       	rcall	.-1472   	; 0x165c <VL53L0X_SetLimitCheckEnable>
    1c1c:	81 11       	cpse	r24, r1
    1c1e:	20 c0       	rjmp	.+64     	; 0x1c60 <VL53L0X_DataInit+0x1ce>
    1c20:	40 e0       	ldi	r20, 0x00	; 0
    1c22:	64 e0       	ldi	r22, 0x04	; 4
    1c24:	70 e0       	ldi	r23, 0x00	; 0
    1c26:	c8 01       	movw	r24, r16
    1c28:	19 dd       	rcall	.-1486   	; 0x165c <VL53L0X_SetLimitCheckEnable>
    1c2a:	81 11       	cpse	r24, r1
    1c2c:	23 c0       	rjmp	.+70     	; 0x1c74 <VL53L0X_DataInit+0x1e2>
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	65 e0       	ldi	r22, 0x05	; 5
    1c32:	70 e0       	ldi	r23, 0x00	; 0
    1c34:	c8 01       	movw	r24, r16
    1c36:	12 dd       	rcall	.-1500   	; 0x165c <VL53L0X_SetLimitCheckEnable>
    1c38:	81 11       	cpse	r24, r1
    1c3a:	25 c0       	rjmp	.+74     	; 0x1c86 <VL53L0X_DataInit+0x1f4>
    1c3c:	20 e0       	ldi	r18, 0x00	; 0
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	42 e1       	ldi	r20, 0x12	; 18
    1c42:	50 e0       	ldi	r21, 0x00	; 0
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	c8 01       	movw	r24, r16
    1c4a:	95 dd       	rcall	.-1238   	; 0x1776 <VL53L0X_SetLimitCheckValue>
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	2c c0       	rjmp	.+88     	; 0x1ca8 <VL53L0X_DataInit+0x216>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e4       	ldi	r19, 0x40	; 64
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	50 e0       	ldi	r21, 0x00	; 0
    1c58:	61 e0       	ldi	r22, 0x01	; 1
    1c5a:	70 e0       	ldi	r23, 0x00	; 0
    1c5c:	c8 01       	movw	r24, r16
    1c5e:	8b dd       	rcall	.-1258   	; 0x1776 <VL53L0X_SetLimitCheckValue>
    1c60:	81 11       	cpse	r24, r1
    1c62:	32 c0       	rjmp	.+100    	; 0x1cc8 <VL53L0X_DataInit+0x236>
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	43 e2       	ldi	r20, 0x23	; 35
    1c6a:	50 e0       	ldi	r21, 0x00	; 0
    1c6c:	62 e0       	ldi	r22, 0x02	; 2
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	c8 01       	movw	r24, r16
    1c72:	81 dd       	rcall	.-1278   	; 0x1776 <VL53L0X_SetLimitCheckValue>
    1c74:	81 11       	cpse	r24, r1
    1c76:	28 c0       	rjmp	.+80     	; 0x1cc8 <VL53L0X_DataInit+0x236>
    1c78:	20 e0       	ldi	r18, 0x00	; 0
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	a9 01       	movw	r20, r18
    1c7e:	63 e0       	ldi	r22, 0x03	; 3
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	c8 01       	movw	r24, r16
    1c84:	78 dd       	rcall	.-1296   	; 0x1776 <VL53L0X_SetLimitCheckValue>
    1c86:	81 11       	cpse	r24, r1
    1c88:	1f c0       	rjmp	.+62     	; 0x1cc8 <VL53L0X_DataInit+0x236>
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	e3 5e       	subi	r30, 0xE3	; 227
    1c90:	fe 4f       	sbci	r31, 0xFE	; 254
    1c92:	80 83       	st	Z, r24
    1c94:	4f ef       	ldi	r20, 0xFF	; 255
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	c8 01       	movw	r24, r16
    1c9a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    1c9e:	91 e0       	ldi	r25, 0x01	; 1
    1ca0:	f8 01       	movw	r30, r16
    1ca2:	e1 5e       	subi	r30, 0xE1	; 225
    1ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    1ca6:	90 83       	st	Z, r25
    1ca8:	81 11       	cpse	r24, r1
    1caa:	0e c0       	rjmp	.+28     	; 0x1cc8 <VL53L0X_DataInit+0x236>
    1cac:	f8 01       	movw	r30, r16
    1cae:	ec 5f       	subi	r30, 0xFC	; 252
    1cb0:	fe 4f       	sbci	r31, 0xFE	; 254
    1cb2:	10 82       	st	Z, r1
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <VL53L0X_DataInit+0x236>
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	60 e0       	ldi	r22, 0x00	; 0
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	c8 01       	movw	r24, r16
    1cbe:	ce dc       	rcall	.-1636   	; 0x165c <VL53L0X_SetLimitCheckEnable>
    1cc0:	ee 24       	eor	r14, r14
    1cc2:	e3 94       	inc	r14
    1cc4:	f1 2c       	mov	r15, r1
    1cc6:	8f cf       	rjmp	.-226    	; 0x1be6 <VL53L0X_DataInit+0x154>
    1cc8:	ec 96       	adiw	r28, 0x3c	; 60
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	1f 91       	pop	r17
    1cda:	0f 91       	pop	r16
    1cdc:	ff 90       	pop	r15
    1cde:	ef 90       	pop	r14
    1ce0:	08 95       	ret

00001ce2 <VL53L0X_PerformRefCalibration>:
    1ce2:	21 e0       	ldi	r18, 0x01	; 1
    1ce4:	0c 94 f3 17 	jmp	0x2fe6	; 0x2fe6 <VL53L0X_perform_ref_calibration>
    1ce8:	08 95       	ret

00001cea <VL53L0X_GetRangingMeasurementData>:
    1cea:	2f 92       	push	r2
    1cec:	3f 92       	push	r3
    1cee:	4f 92       	push	r4
    1cf0:	5f 92       	push	r5
    1cf2:	6f 92       	push	r6
    1cf4:	7f 92       	push	r7
    1cf6:	8f 92       	push	r8
    1cf8:	9f 92       	push	r9
    1cfa:	af 92       	push	r10
    1cfc:	bf 92       	push	r11
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	a6 97       	sbiw	r28, 0x26	; 38
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	f8 94       	cli
    1d18:	de bf       	out	0x3e, r29	; 62
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	cd bf       	out	0x3d, r28	; 61
    1d1e:	4c 01       	movw	r8, r24
    1d20:	5b 01       	movw	r10, r22
    1d22:	0c e0       	ldi	r16, 0x0C	; 12
    1d24:	10 e0       	ldi	r17, 0x00	; 0
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	ae 01       	movw	r20, r28
    1d2c:	4e 5f       	subi	r20, 0xFE	; 254
    1d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d30:	64 e1       	ldi	r22, 0x14	; 20
    1d32:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <VL53L0X_ReadMulti>
    1d36:	81 11       	cpse	r24, r1
    1d38:	fb c0       	rjmp	.+502    	; 0x1f30 <VL53L0X_GetRangingMeasurementData+0x246>
    1d3a:	d5 01       	movw	r26, r10
    1d3c:	56 96       	adiw	r26, 0x16	; 22
    1d3e:	1c 92       	st	X, r1
    1d40:	56 97       	sbiw	r26, 0x16	; 22
    1d42:	f5 01       	movw	r30, r10
    1d44:	10 82       	st	Z, r1
    1d46:	11 82       	std	Z+1, r1	; 0x01
    1d48:	12 82       	std	Z+2, r1	; 0x02
    1d4a:	13 82       	std	Z+3, r1	; 0x03
    1d4c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	32 2f       	mov	r19, r18
    1d52:	22 27       	eor	r18, r18
    1d54:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d56:	28 0f       	add	r18, r24
    1d58:	31 1d       	adc	r19, r1
    1d5a:	14 96       	adiw	r26, 0x04	; 4
    1d5c:	1d 92       	st	X+, r1
    1d5e:	1d 92       	st	X+, r1
    1d60:	1d 92       	st	X+, r1
    1d62:	1c 92       	st	X, r1
    1d64:	17 97       	sbiw	r26, 0x07	; 7
    1d66:	49 84       	ldd	r4, Y+9	; 0x09
    1d68:	51 2c       	mov	r5, r1
    1d6a:	54 2c       	mov	r5, r4
    1d6c:	44 24       	eor	r4, r4
    1d6e:	55 0c       	add	r5, r5
    1d70:	61 2c       	mov	r6, r1
    1d72:	71 2c       	mov	r7, r1
    1d74:	44 86       	std	Z+12, r4	; 0x0c
    1d76:	55 86       	std	Z+13, r5	; 0x0d
    1d78:	66 86       	std	Z+14, r6	; 0x0e
    1d7a:	77 86       	std	Z+15, r7	; 0x0f
    1d7c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	98 2f       	mov	r25, r24
    1d82:	88 27       	eor	r24, r24
    1d84:	99 0f       	add	r25, r25
    1d86:	a0 e0       	ldi	r26, 0x00	; 0
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	80 8b       	std	Z+16, r24	; 0x10
    1d8c:	91 8b       	std	Z+17, r25	; 0x11
    1d8e:	a2 8b       	std	Z+18, r26	; 0x12
    1d90:	b3 8b       	std	Z+19, r27	; 0x13
    1d92:	0c 81       	ldd	r16, Y+4	; 0x04
    1d94:	10 e0       	ldi	r17, 0x00	; 0
    1d96:	10 2f       	mov	r17, r16
    1d98:	00 27       	eor	r16, r16
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	08 0f       	add	r16, r24
    1d9e:	11 1d       	adc	r17, r1
    1da0:	15 8b       	std	Z+21, r17	; 0x15
    1da2:	04 8b       	std	Z+20, r16	; 0x14
    1da4:	3a 80       	ldd	r3, Y+2	; 0x02
    1da6:	f4 01       	movw	r30, r8
    1da8:	e7 5c       	subi	r30, 0xC7	; 199
    1daa:	fe 4f       	sbci	r31, 0xFE	; 254
    1dac:	40 81       	ld	r20, Z
    1dae:	51 81       	ldd	r21, Z+1	; 0x01
    1db0:	7b 97       	sbiw	r30, 0x1b	; 27
    1db2:	20 80       	ld	r2, Z
    1db4:	48 3e       	cpi	r20, 0xE8	; 232
    1db6:	f3 e0       	ldi	r31, 0x03	; 3
    1db8:	5f 07       	cpc	r21, r31
    1dba:	09 f4       	brne	.+2      	; 0x1dbe <VL53L0X_GetRangingMeasurementData+0xd4>
    1dbc:	46 c0       	rjmp	.+140    	; 0x1e4a <VL53L0X_GetRangingMeasurementData+0x160>
    1dbe:	24 9f       	mul	r18, r20
    1dc0:	c0 01       	movw	r24, r0
    1dc2:	25 9f       	mul	r18, r21
    1dc4:	90 0d       	add	r25, r0
    1dc6:	34 9f       	mul	r19, r20
    1dc8:	90 0d       	add	r25, r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	9c 01       	movw	r18, r24
    1dce:	2c 50       	subi	r18, 0x0C	; 12
    1dd0:	3e 4f       	sbci	r19, 0xFE	; 254
    1dd2:	36 95       	lsr	r19
    1dd4:	27 95       	ror	r18
    1dd6:	36 95       	lsr	r19
    1dd8:	27 95       	ror	r18
    1dda:	36 95       	lsr	r19
    1ddc:	27 95       	ror	r18
    1dde:	a5 ec       	ldi	r26, 0xC5	; 197
    1de0:	b0 e2       	ldi	r27, 0x20	; 32
    1de2:	0e 94 3f 2e 	call	0x5c7e	; 0x5c7e <__umulhisi3>
    1de6:	9c 01       	movw	r18, r24
    1de8:	32 95       	swap	r19
    1dea:	22 95       	swap	r18
    1dec:	2f 70       	andi	r18, 0x0F	; 15
    1dee:	23 27       	eor	r18, r19
    1df0:	3f 70       	andi	r19, 0x0F	; 15
    1df2:	23 27       	eor	r18, r19
    1df4:	d4 01       	movw	r26, r8
    1df6:	5d 96       	adiw	r26, 0x1d	; 29
    1df8:	4d 91       	ld	r20, X+
    1dfa:	5d 91       	ld	r21, X+
    1dfc:	6d 91       	ld	r22, X+
    1dfe:	7c 91       	ld	r23, X
    1e00:	90 97       	sbiw	r26, 0x20	; 32
    1e02:	5a 96       	adiw	r26, 0x1a	; 26
    1e04:	8c 91       	ld	r24, X
    1e06:	88 23       	and	r24, r24
    1e08:	01 f1       	breq	.+64     	; 0x1e4a <VL53L0X_GetRangingMeasurementData+0x160>
    1e0a:	04 9f       	mul	r16, r20
    1e0c:	60 01       	movw	r12, r0
    1e0e:	05 9f       	mul	r16, r21
    1e10:	d0 0c       	add	r13, r0
    1e12:	14 9f       	mul	r17, r20
    1e14:	d0 0c       	add	r13, r0
    1e16:	11 24       	eor	r1, r1
    1e18:	cd 2c       	mov	r12, r13
    1e1a:	dd 24       	eor	r13, r13
    1e1c:	e1 2c       	mov	r14, r1
    1e1e:	f1 2c       	mov	r15, r1
    1e20:	4c 14       	cp	r4, r12
    1e22:	5d 04       	cpc	r5, r13
    1e24:	6e 04       	cpc	r6, r14
    1e26:	7f 04       	cpc	r7, r15
    1e28:	29 f4       	brne	.+10     	; 0x1e34 <VL53L0X_GetRangingMeasurementData+0x14a>
    1e2a:	21 10       	cpse	r2, r1
    1e2c:	11 c0       	rjmp	.+34     	; 0x1e50 <VL53L0X_GetRangingMeasurementData+0x166>
    1e2e:	20 ee       	ldi	r18, 0xE0	; 224
    1e30:	3a e8       	ldi	r19, 0x8A	; 138
    1e32:	1e c0       	rjmp	.+60     	; 0x1e70 <VL53L0X_GetRangingMeasurementData+0x186>
    1e34:	d9 01       	movw	r26, r18
    1e36:	a3 01       	movw	r20, r6
    1e38:	92 01       	movw	r18, r4
    1e3a:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    1e3e:	2c 19       	sub	r18, r12
    1e40:	3d 09       	sbc	r19, r13
    1e42:	4e 09       	sbc	r20, r14
    1e44:	5f 09       	sbc	r21, r15
    1e46:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    1e4a:	22 20       	and	r2, r2
    1e4c:	89 f0       	breq	.+34     	; 0x1e70 <VL53L0X_GetRangingMeasurementData+0x186>
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <VL53L0X_GetRangingMeasurementData+0x16a>
    1e50:	28 eb       	ldi	r18, 0xB8	; 184
    1e52:	32 e2       	ldi	r19, 0x22	; 34
    1e54:	c9 01       	movw	r24, r18
    1e56:	96 95       	lsr	r25
    1e58:	87 95       	ror	r24
    1e5a:	96 95       	lsr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	f5 01       	movw	r30, r10
    1e60:	91 87       	std	Z+9, r25	; 0x09
    1e62:	80 87       	std	Z+8, r24	; 0x08
    1e64:	22 95       	swap	r18
    1e66:	22 0f       	add	r18, r18
    1e68:	22 0f       	add	r18, r18
    1e6a:	20 7c       	andi	r18, 0xC0	; 192
    1e6c:	27 8b       	std	Z+23, r18	; 0x17
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <VL53L0X_GetRangingMeasurementData+0x194>
    1e70:	d5 01       	movw	r26, r10
    1e72:	19 96       	adiw	r26, 0x09	; 9
    1e74:	3c 93       	st	X, r19
    1e76:	2e 93       	st	-X, r18
    1e78:	18 97       	sbiw	r26, 0x08	; 8
    1e7a:	57 96       	adiw	r26, 0x17	; 23
    1e7c:	1c 92       	st	X, r1
    1e7e:	fe 01       	movw	r30, r28
    1e80:	31 96       	adiw	r30, 0x01	; 1
    1e82:	6f 01       	movw	r12, r30
    1e84:	75 01       	movw	r14, r10
    1e86:	a3 01       	movw	r20, r6
    1e88:	92 01       	movw	r18, r4
    1e8a:	63 2d       	mov	r22, r3
    1e8c:	c4 01       	movw	r24, r8
    1e8e:	0e 94 62 29 	call	0x52c4	; 0x52c4 <VL53L0X_get_pal_range_status>
    1e92:	81 11       	cpse	r24, r1
    1e94:	4d c0       	rjmp	.+154    	; 0x1f30 <VL53L0X_GetRangingMeasurementData+0x246>
    1e96:	99 81       	ldd	r25, Y+1	; 0x01
    1e98:	d5 01       	movw	r26, r10
    1e9a:	58 96       	adiw	r26, 0x18	; 24
    1e9c:	9c 93       	st	X, r25
    1e9e:	ba e4       	ldi	r27, 0x4A	; 74
    1ea0:	8b 0e       	add	r8, r27
    1ea2:	91 1c       	adc	r9, r1
    1ea4:	29 e1       	ldi	r18, 0x19	; 25
    1ea6:	f4 01       	movw	r30, r8
    1ea8:	de 01       	movw	r26, r28
    1eaa:	1e 96       	adiw	r26, 0x0e	; 14
    1eac:	01 90       	ld	r0, Z+
    1eae:	0d 92       	st	X+, r0
    1eb0:	2a 95       	dec	r18
    1eb2:	e1 f7       	brne	.-8      	; 0x1eac <VL53L0X_GetRangingMeasurementData+0x1c2>
    1eb4:	d5 01       	movw	r26, r10
    1eb6:	18 96       	adiw	r26, 0x08	; 8
    1eb8:	ed 91       	ld	r30, X+
    1eba:	fc 91       	ld	r31, X
    1ebc:	19 97       	sbiw	r26, 0x09	; 9
    1ebe:	57 96       	adiw	r26, 0x17	; 23
    1ec0:	3c 90       	ld	r3, X
    1ec2:	57 97       	sbiw	r26, 0x17	; 23
    1ec4:	1a 96       	adiw	r26, 0x0a	; 10
    1ec6:	6d 91       	ld	r22, X+
    1ec8:	7c 91       	ld	r23, X
    1eca:	1b 97       	sbiw	r26, 0x0b	; 11
    1ecc:	1c 96       	adiw	r26, 0x0c	; 12
    1ece:	4d 90       	ld	r4, X+
    1ed0:	5d 90       	ld	r5, X+
    1ed2:	6d 90       	ld	r6, X+
    1ed4:	7c 90       	ld	r7, X
    1ed6:	1f 97       	sbiw	r26, 0x0f	; 15
    1ed8:	50 96       	adiw	r26, 0x10	; 16
    1eda:	cd 90       	ld	r12, X+
    1edc:	dd 90       	ld	r13, X+
    1ede:	ed 90       	ld	r14, X+
    1ee0:	fc 90       	ld	r15, X
    1ee2:	53 97       	sbiw	r26, 0x13	; 19
    1ee4:	54 96       	adiw	r26, 0x14	; 20
    1ee6:	4d 91       	ld	r20, X+
    1ee8:	5c 91       	ld	r21, X
    1eea:	55 97       	sbiw	r26, 0x15	; 21
    1eec:	14 96       	adiw	r26, 0x04	; 4
    1eee:	0d 91       	ld	r16, X+
    1ef0:	1d 91       	ld	r17, X+
    1ef2:	2d 91       	ld	r18, X+
    1ef4:	3c 91       	ld	r19, X
    1ef6:	17 97       	sbiw	r26, 0x07	; 7
    1ef8:	0a 8b       	std	Y+18, r16	; 0x12
    1efa:	1b 8b       	std	Y+19, r17	; 0x13
    1efc:	2c 8b       	std	Y+20, r18	; 0x14
    1efe:	3d 8b       	std	Y+21, r19	; 0x15
    1f00:	ff 8b       	std	Y+23, r31	; 0x17
    1f02:	ee 8b       	std	Y+22, r30	; 0x16
    1f04:	79 8f       	std	Y+25, r23	; 0x19
    1f06:	68 8f       	std	Y+24, r22	; 0x18
    1f08:	4a 8e       	std	Y+26, r4	; 0x1a
    1f0a:	5b 8e       	std	Y+27, r5	; 0x1b
    1f0c:	6c 8e       	std	Y+28, r6	; 0x1c
    1f0e:	7d 8e       	std	Y+29, r7	; 0x1d
    1f10:	ce 8e       	std	Y+30, r12	; 0x1e
    1f12:	df 8e       	std	Y+31, r13	; 0x1f
    1f14:	e8 a2       	std	Y+32, r14	; 0x20
    1f16:	f9 a2       	std	Y+33, r15	; 0x21
    1f18:	5b a3       	std	Y+35, r21	; 0x23
    1f1a:	4a a3       	std	Y+34, r20	; 0x22
    1f1c:	3d a2       	std	Y+37, r3	; 0x25
    1f1e:	9e a3       	std	Y+38, r25	; 0x26
    1f20:	99 e1       	ldi	r25, 0x19	; 25
    1f22:	fe 01       	movw	r30, r28
    1f24:	3e 96       	adiw	r30, 0x0e	; 14
    1f26:	d4 01       	movw	r26, r8
    1f28:	01 90       	ld	r0, Z+
    1f2a:	0d 92       	st	X+, r0
    1f2c:	9a 95       	dec	r25
    1f2e:	e1 f7       	brne	.-8      	; 0x1f28 <VL53L0X_GetRangingMeasurementData+0x23e>
    1f30:	a6 96       	adiw	r28, 0x26	; 38
    1f32:	0f b6       	in	r0, 0x3f	; 63
    1f34:	f8 94       	cli
    1f36:	de bf       	out	0x3e, r29	; 62
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	cd bf       	out	0x3d, r28	; 61
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	df 90       	pop	r13
    1f4a:	cf 90       	pop	r12
    1f4c:	bf 90       	pop	r11
    1f4e:	af 90       	pop	r10
    1f50:	9f 90       	pop	r9
    1f52:	8f 90       	pop	r8
    1f54:	7f 90       	pop	r7
    1f56:	6f 90       	pop	r6
    1f58:	5f 90       	pop	r5
    1f5a:	4f 90       	pop	r4
    1f5c:	3f 90       	pop	r3
    1f5e:	2f 90       	pop	r2
    1f60:	08 95       	ret

00001f62 <VL53L0X_GetInterruptThresholds>:
    1f62:	cf 92       	push	r12
    1f64:	df 92       	push	r13
    1f66:	ef 92       	push	r14
    1f68:	ff 92       	push	r15
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	00 d0       	rcall	.+0      	; 0x1f74 <VL53L0X_GetInterruptThresholds+0x12>
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8c 01       	movw	r16, r24
    1f7a:	6a 01       	movw	r12, r20
    1f7c:	79 01       	movw	r14, r18
    1f7e:	ae 01       	movw	r20, r28
    1f80:	4f 5f       	subi	r20, 0xFF	; 255
    1f82:	5f 4f       	sbci	r21, 0xFF	; 255
    1f84:	6e e0       	ldi	r22, 0x0E	; 14
    1f86:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    1f8a:	49 81       	ldd	r20, Y+1	; 0x01
    1f8c:	5a 81       	ldd	r21, Y+2	; 0x02
    1f8e:	5f 70       	andi	r21, 0x0F	; 15
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	03 2e       	mov	r0, r19
    1f96:	31 e1       	ldi	r19, 0x11	; 17
    1f98:	44 0f       	add	r20, r20
    1f9a:	55 1f       	adc	r21, r21
    1f9c:	66 1f       	adc	r22, r22
    1f9e:	77 1f       	adc	r23, r23
    1fa0:	3a 95       	dec	r19
    1fa2:	d1 f7       	brne	.-12     	; 0x1f98 <VL53L0X_GetInterruptThresholds+0x36>
    1fa4:	30 2d       	mov	r19, r0
    1fa6:	f6 01       	movw	r30, r12
    1fa8:	40 83       	st	Z, r20
    1faa:	51 83       	std	Z+1, r21	; 0x01
    1fac:	62 83       	std	Z+2, r22	; 0x02
    1fae:	73 83       	std	Z+3, r23	; 0x03
    1fb0:	81 11       	cpse	r24, r1
    1fb2:	1a c0       	rjmp	.+52     	; 0x1fe8 <VL53L0X_GetInterruptThresholds+0x86>
    1fb4:	ae 01       	movw	r20, r28
    1fb6:	4f 5f       	subi	r20, 0xFF	; 255
    1fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1fba:	6c e0       	ldi	r22, 0x0C	; 12
    1fbc:	c8 01       	movw	r24, r16
    1fbe:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    1fc2:	49 81       	ldd	r20, Y+1	; 0x01
    1fc4:	5a 81       	ldd	r21, Y+2	; 0x02
    1fc6:	5f 70       	andi	r21, 0x0F	; 15
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	03 2e       	mov	r0, r19
    1fce:	31 e1       	ldi	r19, 0x11	; 17
    1fd0:	44 0f       	add	r20, r20
    1fd2:	55 1f       	adc	r21, r21
    1fd4:	66 1f       	adc	r22, r22
    1fd6:	77 1f       	adc	r23, r23
    1fd8:	3a 95       	dec	r19
    1fda:	d1 f7       	brne	.-12     	; 0x1fd0 <VL53L0X_GetInterruptThresholds+0x6e>
    1fdc:	30 2d       	mov	r19, r0
    1fde:	f7 01       	movw	r30, r14
    1fe0:	40 83       	st	Z, r20
    1fe2:	51 83       	std	Z+1, r21	; 0x01
    1fe4:	62 83       	std	Z+2, r22	; 0x02
    1fe6:	73 83       	std	Z+3, r23	; 0x03
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16
    1ff4:	ff 90       	pop	r15
    1ff6:	ef 90       	pop	r14
    1ff8:	df 90       	pop	r13
    1ffa:	cf 90       	pop	r12
    1ffc:	08 95       	ret

00001ffe <VL53L0X_CheckAndLoadInterruptSettings>:
    1ffe:	ef 92       	push	r14
    2000:	ff 92       	push	r15
    2002:	1f 93       	push	r17
    2004:	cf 93       	push	r28
    2006:	df 93       	push	r29
    2008:	cd b7       	in	r28, 0x3d	; 61
    200a:	de b7       	in	r29, 0x3e	; 62
    200c:	28 97       	sbiw	r28, 0x08	; 8
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	9c 01       	movw	r18, r24
    201a:	fc 01       	movw	r30, r24
    201c:	e2 53       	subi	r30, 0x32	; 50
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	90 81       	ld	r25, Z
    2022:	91 50       	subi	r25, 0x01	; 1
    2024:	93 30       	cpi	r25, 0x03	; 3
    2026:	08 f0       	brcs	.+2      	; 0x202a <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
    2028:	40 c0       	rjmp	.+128    	; 0x20aa <VL53L0X_CheckAndLoadInterruptSettings+0xac>
    202a:	16 2f       	mov	r17, r22
    202c:	79 01       	movw	r14, r18
    202e:	9e 01       	movw	r18, r28
    2030:	2b 5f       	subi	r18, 0xFB	; 251
    2032:	3f 4f       	sbci	r19, 0xFF	; 255
    2034:	ae 01       	movw	r20, r28
    2036:	4f 5f       	subi	r20, 0xFF	; 255
    2038:	5f 4f       	sbci	r21, 0xFF	; 255
    203a:	61 e0       	ldi	r22, 0x01	; 1
    203c:	c7 01       	movw	r24, r14
    203e:	91 df       	rcall	.-222    	; 0x1f62 <VL53L0X_GetInterruptThresholds>
    2040:	49 81       	ldd	r20, Y+1	; 0x01
    2042:	5a 81       	ldd	r21, Y+2	; 0x02
    2044:	6b 81       	ldd	r22, Y+3	; 0x03
    2046:	7c 81       	ldd	r23, Y+4	; 0x04
    2048:	41 30       	cpi	r20, 0x01	; 1
    204a:	51 05       	cpc	r21, r1
    204c:	6f 4f       	sbci	r22, 0xFF	; 255
    204e:	71 05       	cpc	r23, r1
    2050:	48 f4       	brcc	.+18     	; 0x2064 <VL53L0X_CheckAndLoadInterruptSettings+0x66>
    2052:	4d 81       	ldd	r20, Y+5	; 0x05
    2054:	5e 81       	ldd	r21, Y+6	; 0x06
    2056:	6f 81       	ldd	r22, Y+7	; 0x07
    2058:	78 85       	ldd	r23, Y+8	; 0x08
    205a:	41 30       	cpi	r20, 0x01	; 1
    205c:	51 05       	cpc	r21, r1
    205e:	6f 4f       	sbci	r22, 0xFF	; 255
    2060:	71 05       	cpc	r23, r1
    2062:	20 f1       	brcs	.+72     	; 0x20ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2064:	81 11       	cpse	r24, r1
    2066:	22 c0       	rjmp	.+68     	; 0x20ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2068:	11 23       	and	r17, r17
    206a:	31 f0       	breq	.+12     	; 0x2078 <VL53L0X_CheckAndLoadInterruptSettings+0x7a>
    206c:	62 e0       	ldi	r22, 0x02	; 2
    206e:	71 e0       	ldi	r23, 0x01	; 1
    2070:	c7 01       	movw	r24, r14
    2072:	0e 94 63 23 	call	0x46c6	; 0x46c6 <VL53L0X_load_tuning_settings>
    2076:	1a c0       	rjmp	.+52     	; 0x20ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2078:	44 e0       	ldi	r20, 0x04	; 4
    207a:	6f ef       	ldi	r22, 0xFF	; 255
    207c:	c7 01       	movw	r24, r14
    207e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2082:	18 2f       	mov	r17, r24
    2084:	40 e0       	ldi	r20, 0x00	; 0
    2086:	60 e7       	ldi	r22, 0x70	; 112
    2088:	c7 01       	movw	r24, r14
    208a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    208e:	18 2b       	or	r17, r24
    2090:	40 e0       	ldi	r20, 0x00	; 0
    2092:	6f ef       	ldi	r22, 0xFF	; 255
    2094:	c7 01       	movw	r24, r14
    2096:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    209a:	18 2b       	or	r17, r24
    209c:	40 e0       	ldi	r20, 0x00	; 0
    209e:	60 e8       	ldi	r22, 0x80	; 128
    20a0:	c7 01       	movw	r24, r14
    20a2:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    20a6:	81 2b       	or	r24, r17
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	28 96       	adiw	r28, 0x08	; 8
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	ff 90       	pop	r15
    20c0:	ef 90       	pop	r14
    20c2:	08 95       	ret

000020c4 <VL53L0X_StartMeasurement>:
    20c4:	cf 92       	push	r12
    20c6:	df 92       	push	r13
    20c8:	ef 92       	push	r14
    20ca:	ff 92       	push	r15
    20cc:	0f 93       	push	r16
    20ce:	1f 93       	push	r17
    20d0:	cf 93       	push	r28
    20d2:	df 93       	push	r29
    20d4:	1f 92       	push	r1
    20d6:	cd b7       	in	r28, 0x3d	; 61
    20d8:	de b7       	in	r29, 0x3e	; 62
    20da:	8c 01       	movw	r16, r24
    20dc:	fc 01       	movw	r30, r24
    20de:	f0 88       	ldd	r15, Z+16	; 0x10
    20e0:	41 e0       	ldi	r20, 0x01	; 1
    20e2:	60 e8       	ldi	r22, 0x80	; 128
    20e4:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    20e8:	41 e0       	ldi	r20, 0x01	; 1
    20ea:	6f ef       	ldi	r22, 0xFF	; 255
    20ec:	c8 01       	movw	r24, r16
    20ee:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    20f2:	40 e0       	ldi	r20, 0x00	; 0
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	c8 01       	movw	r24, r16
    20f8:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    20fc:	f8 01       	movw	r30, r16
    20fe:	e9 5d       	subi	r30, 0xD9	; 217
    2100:	fe 4f       	sbci	r31, 0xFE	; 254
    2102:	40 81       	ld	r20, Z
    2104:	61 e9       	ldi	r22, 0x91	; 145
    2106:	c8 01       	movw	r24, r16
    2108:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	c8 01       	movw	r24, r16
    2112:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2116:	40 e0       	ldi	r20, 0x00	; 0
    2118:	6f ef       	ldi	r22, 0xFF	; 255
    211a:	c8 01       	movw	r24, r16
    211c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2120:	40 e0       	ldi	r20, 0x00	; 0
    2122:	60 e8       	ldi	r22, 0x80	; 128
    2124:	c8 01       	movw	r24, r16
    2126:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    212a:	f1 e0       	ldi	r31, 0x01	; 1
    212c:	ff 16       	cp	r15, r31
    212e:	d9 f1       	breq	.+118    	; 0x21a6 <VL53L0X_StartMeasurement+0xe2>
    2130:	ff 16       	cp	r15, r31
    2132:	28 f0       	brcs	.+10     	; 0x213e <VL53L0X_StartMeasurement+0x7a>
    2134:	93 e0       	ldi	r25, 0x03	; 3
    2136:	f9 16       	cp	r15, r25
    2138:	09 f4       	brne	.+2      	; 0x213c <VL53L0X_StartMeasurement+0x78>
    213a:	47 c0       	rjmp	.+142    	; 0x21ca <VL53L0X_StartMeasurement+0x106>
    213c:	58 c0       	rjmp	.+176    	; 0x21ee <VL53L0X_StartMeasurement+0x12a>
    213e:	41 e0       	ldi	r20, 0x01	; 1
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	c8 01       	movw	r24, r16
    2144:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2148:	91 e0       	ldi	r25, 0x01	; 1
    214a:	99 83       	std	Y+1, r25	; 0x01
    214c:	88 23       	and	r24, r24
    214e:	71 f0       	breq	.+28     	; 0x216c <VL53L0X_StartMeasurement+0xa8>
    2150:	4f c0       	rjmp	.+158    	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    2152:	c1 14       	cp	r12, r1
    2154:	d1 04       	cpc	r13, r1
    2156:	e1 04       	cpc	r14, r1
    2158:	f1 04       	cpc	r15, r1
    215a:	59 f0       	breq	.+22     	; 0x2172 <VL53L0X_StartMeasurement+0xae>
    215c:	ae 01       	movw	r20, r28
    215e:	4f 5f       	subi	r20, 0xFF	; 255
    2160:	5f 4f       	sbci	r21, 0xFF	; 255
    2162:	60 e0       	ldi	r22, 0x00	; 0
    2164:	c8 01       	movw	r24, r16
    2166:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    216a:	03 c0       	rjmp	.+6      	; 0x2172 <VL53L0X_StartMeasurement+0xae>
    216c:	c1 2c       	mov	r12, r1
    216e:	d1 2c       	mov	r13, r1
    2170:	76 01       	movw	r14, r12
    2172:	ef ef       	ldi	r30, 0xFF	; 255
    2174:	ce 1a       	sub	r12, r30
    2176:	de 0a       	sbc	r13, r30
    2178:	ee 0a       	sbc	r14, r30
    217a:	fe 0a       	sbc	r15, r30
    217c:	99 81       	ldd	r25, Y+1	; 0x01
    217e:	90 ff       	sbrs	r25, 0
    2180:	0a c0       	rjmp	.+20     	; 0x2196 <VL53L0X_StartMeasurement+0xd2>
    2182:	81 11       	cpse	r24, r1
    2184:	08 c0       	rjmp	.+16     	; 0x2196 <VL53L0X_StartMeasurement+0xd2>
    2186:	f8 ec       	ldi	r31, 0xC8	; 200
    2188:	cf 16       	cp	r12, r31
    218a:	d1 04       	cpc	r13, r1
    218c:	e1 04       	cpc	r14, r1
    218e:	f1 04       	cpc	r15, r1
    2190:	01 f7       	brne	.-64     	; 0x2152 <VL53L0X_StartMeasurement+0x8e>
    2192:	89 ef       	ldi	r24, 0xF9	; 249
    2194:	2d c0       	rjmp	.+90     	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    2196:	98 ec       	ldi	r25, 0xC8	; 200
    2198:	c9 16       	cp	r12, r25
    219a:	d1 04       	cpc	r13, r1
    219c:	e1 04       	cpc	r14, r1
    219e:	f1 04       	cpc	r15, r1
    21a0:	38 f1       	brcs	.+78     	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    21a2:	89 ef       	ldi	r24, 0xF9	; 249
    21a4:	25 c0       	rjmp	.+74     	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    21a6:	81 11       	cpse	r24, r1
    21a8:	03 c0       	rjmp	.+6      	; 0x21b0 <VL53L0X_StartMeasurement+0xec>
    21aa:	61 e0       	ldi	r22, 0x01	; 1
    21ac:	c8 01       	movw	r24, r16
    21ae:	27 df       	rcall	.-434    	; 0x1ffe <VL53L0X_CheckAndLoadInterruptSettings>
    21b0:	42 e0       	ldi	r20, 0x02	; 2
    21b2:	60 e0       	ldi	r22, 0x00	; 0
    21b4:	c8 01       	movw	r24, r16
    21b6:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    21ba:	81 11       	cpse	r24, r1
    21bc:	19 c0       	rjmp	.+50     	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    21be:	f8 01       	movw	r30, r16
    21c0:	e1 5e       	subi	r30, 0xE1	; 225
    21c2:	fe 4f       	sbci	r31, 0xFE	; 254
    21c4:	94 e0       	ldi	r25, 0x04	; 4
    21c6:	90 83       	st	Z, r25
    21c8:	13 c0       	rjmp	.+38     	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    21ca:	81 11       	cpse	r24, r1
    21cc:	03 c0       	rjmp	.+6      	; 0x21d4 <VL53L0X_StartMeasurement+0x110>
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	c8 01       	movw	r24, r16
    21d2:	15 df       	rcall	.-470    	; 0x1ffe <VL53L0X_CheckAndLoadInterruptSettings>
    21d4:	44 e0       	ldi	r20, 0x04	; 4
    21d6:	60 e0       	ldi	r22, 0x00	; 0
    21d8:	c8 01       	movw	r24, r16
    21da:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    21de:	81 11       	cpse	r24, r1
    21e0:	07 c0       	rjmp	.+14     	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    21e2:	f8 01       	movw	r30, r16
    21e4:	e1 5e       	subi	r30, 0xE1	; 225
    21e6:	fe 4f       	sbci	r31, 0xFE	; 254
    21e8:	94 e0       	ldi	r25, 0x04	; 4
    21ea:	90 83       	st	Z, r25
    21ec:	01 c0       	rjmp	.+2      	; 0x21f0 <VL53L0X_StartMeasurement+0x12c>
    21ee:	88 ef       	ldi	r24, 0xF8	; 248
    21f0:	0f 90       	pop	r0
    21f2:	df 91       	pop	r29
    21f4:	cf 91       	pop	r28
    21f6:	1f 91       	pop	r17
    21f8:	0f 91       	pop	r16
    21fa:	ff 90       	pop	r15
    21fc:	ef 90       	pop	r14
    21fe:	df 90       	pop	r13
    2200:	cf 90       	pop	r12
    2202:	08 95       	ret

00002204 <VL53L0X_PerformSingleMeasurement>:
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
    220a:	ec 01       	movw	r28, r24
    220c:	18 89       	ldd	r17, Y+16	; 0x10
    220e:	11 11       	cpse	r17, r1
    2210:	04 c0       	rjmp	.+8      	; 0x221a <VL53L0X_PerformSingleMeasurement+0x16>
    2212:	58 df       	rcall	.-336    	; 0x20c4 <VL53L0X_StartMeasurement>
    2214:	81 11       	cpse	r24, r1
    2216:	12 c0       	rjmp	.+36     	; 0x223c <VL53L0X_PerformSingleMeasurement+0x38>
    2218:	0c c0       	rjmp	.+24     	; 0x2232 <VL53L0X_PerformSingleMeasurement+0x2e>
    221a:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <VL53L0X_measurement_poll_for_completion>
    221e:	81 11       	cpse	r24, r1
    2220:	0d c0       	rjmp	.+26     	; 0x223c <VL53L0X_PerformSingleMeasurement+0x38>
    2222:	11 11       	cpse	r17, r1
    2224:	0b c0       	rjmp	.+22     	; 0x223c <VL53L0X_PerformSingleMeasurement+0x38>
    2226:	c1 5e       	subi	r28, 0xE1	; 225
    2228:	de 4f       	sbci	r29, 0xFE	; 254
    222a:	83 e0       	ldi	r24, 0x03	; 3
    222c:	88 83       	st	Y, r24
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	05 c0       	rjmp	.+10     	; 0x223c <VL53L0X_PerformSingleMeasurement+0x38>
    2232:	ce 01       	movw	r24, r28
    2234:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <VL53L0X_measurement_poll_for_completion>
    2238:	88 23       	and	r24, r24
    223a:	a9 f3       	breq	.-22     	; 0x2226 <VL53L0X_PerformSingleMeasurement+0x22>
    223c:	df 91       	pop	r29
    223e:	cf 91       	pop	r28
    2240:	1f 91       	pop	r17
    2242:	08 95       	ret

00002244 <VL53L0X_ClearInterruptMask>:
    2244:	ef 92       	push	r14
    2246:	ff 92       	push	r15
    2248:	0f 93       	push	r16
    224a:	1f 93       	push	r17
    224c:	cf 93       	push	r28
    224e:	df 93       	push	r29
    2250:	1f 92       	push	r1
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	7c 01       	movw	r14, r24
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	41 e0       	ldi	r20, 0x01	; 1
    225c:	6b e0       	ldi	r22, 0x0B	; 11
    225e:	c7 01       	movw	r24, r14
    2260:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2264:	18 2f       	mov	r17, r24
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	6b e0       	ldi	r22, 0x0B	; 11
    226a:	c7 01       	movw	r24, r14
    226c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2270:	18 2b       	or	r17, r24
    2272:	ae 01       	movw	r20, r28
    2274:	4f 5f       	subi	r20, 0xFF	; 255
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	63 e1       	ldi	r22, 0x13	; 19
    227a:	c7 01       	movw	r24, r14
    227c:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    2280:	81 2b       	or	r24, r17
    2282:	0f 5f       	subi	r16, 0xFF	; 255
    2284:	99 81       	ldd	r25, Y+1	; 0x01
    2286:	97 70       	andi	r25, 0x07	; 7
    2288:	29 f0       	breq	.+10     	; 0x2294 <VL53L0X_ClearInterruptMask+0x50>
    228a:	03 30       	cpi	r16, 0x03	; 3
    228c:	39 f0       	breq	.+14     	; 0x229c <VL53L0X_ClearInterruptMask+0x58>
    228e:	88 23       	and	r24, r24
    2290:	21 f3       	breq	.-56     	; 0x225a <VL53L0X_ClearInterruptMask+0x16>
    2292:	05 c0       	rjmp	.+10     	; 0x229e <VL53L0X_ClearInterruptMask+0x5a>
    2294:	03 30       	cpi	r16, 0x03	; 3
    2296:	18 f0       	brcs	.+6      	; 0x229e <VL53L0X_ClearInterruptMask+0x5a>
    2298:	84 ef       	ldi	r24, 0xF4	; 244
    229a:	01 c0       	rjmp	.+2      	; 0x229e <VL53L0X_ClearInterruptMask+0x5a>
    229c:	84 ef       	ldi	r24, 0xF4	; 244
    229e:	0f 90       	pop	r0
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	08 95       	ret

000022ae <VL53L0X_PerformSingleRangingMeasurement>:
    22ae:	0f 93       	push	r16
    22b0:	1f 93       	push	r17
    22b2:	cf 93       	push	r28
    22b4:	df 93       	push	r29
    22b6:	ec 01       	movw	r28, r24
    22b8:	8b 01       	movw	r16, r22
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	0e 94 1a 09 	call	0x1234	; 0x1234 <VL53L0X_SetDeviceMode>
    22c0:	81 11       	cpse	r24, r1
    22c2:	0e c0       	rjmp	.+28     	; 0x22e0 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    22c4:	ce 01       	movw	r24, r28
    22c6:	9e df       	rcall	.-196    	; 0x2204 <VL53L0X_PerformSingleMeasurement>
    22c8:	81 11       	cpse	r24, r1
    22ca:	0a c0       	rjmp	.+20     	; 0x22e0 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    22cc:	b8 01       	movw	r22, r16
    22ce:	ce 01       	movw	r24, r28
    22d0:	0c dd       	rcall	.-1512   	; 0x1cea <VL53L0X_GetRangingMeasurementData>
    22d2:	81 11       	cpse	r24, r1
    22d4:	05 c0       	rjmp	.+10     	; 0x22e0 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	ba 01       	movw	r22, r20
    22dc:	ce 01       	movw	r24, r28
    22de:	b2 df       	rcall	.-156    	; 0x2244 <VL53L0X_ClearInterruptMask>
    22e0:	df 91       	pop	r29
    22e2:	cf 91       	pop	r28
    22e4:	1f 91       	pop	r17
    22e6:	0f 91       	pop	r16
    22e8:	08 95       	ret

000022ea <VL53L0X_SetGpioConfig>:
    22ea:	0f 93       	push	r16
    22ec:	1f 93       	push	r17
    22ee:	cf 93       	push	r28
    22f0:	df 93       	push	r29
    22f2:	61 11       	cpse	r22, r1
    22f4:	9b c0       	rjmp	.+310    	; 0x242c <VL53L0X_SetGpioConfig+0x142>
    22f6:	12 2f       	mov	r17, r18
    22f8:	ec 01       	movw	r28, r24
    22fa:	44 31       	cpi	r20, 0x14	; 20
    22fc:	51 f4       	brne	.+20     	; 0x2312 <VL53L0X_SetGpioConfig+0x28>
    22fe:	00 23       	and	r16, r16
    2300:	11 f0       	breq	.+4      	; 0x2306 <VL53L0X_SetGpioConfig+0x1c>
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <VL53L0X_SetGpioConfig+0x1e>
    2306:	40 e1       	ldi	r20, 0x10	; 16
    2308:	64 e8       	ldi	r22, 0x84	; 132
    230a:	ce 01       	movw	r24, r28
    230c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2310:	93 c0       	rjmp	.+294    	; 0x2438 <VL53L0X_SetGpioConfig+0x14e>
    2312:	45 31       	cpi	r20, 0x15	; 21
    2314:	09 f0       	breq	.+2      	; 0x2318 <VL53L0X_SetGpioConfig+0x2e>
    2316:	5a c0       	rjmp	.+180    	; 0x23cc <VL53L0X_SetGpioConfig+0xe2>
    2318:	41 e0       	ldi	r20, 0x01	; 1
    231a:	6f ef       	ldi	r22, 0xFF	; 255
    231c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2320:	18 2f       	mov	r17, r24
    2322:	40 e0       	ldi	r20, 0x00	; 0
    2324:	60 e0       	ldi	r22, 0x00	; 0
    2326:	ce 01       	movw	r24, r28
    2328:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    232c:	18 2b       	or	r17, r24
    232e:	40 e0       	ldi	r20, 0x00	; 0
    2330:	6f ef       	ldi	r22, 0xFF	; 255
    2332:	ce 01       	movw	r24, r28
    2334:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2338:	18 2b       	or	r17, r24
    233a:	41 e0       	ldi	r20, 0x01	; 1
    233c:	60 e8       	ldi	r22, 0x80	; 128
    233e:	ce 01       	movw	r24, r28
    2340:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2344:	18 2b       	or	r17, r24
    2346:	42 e0       	ldi	r20, 0x02	; 2
    2348:	65 e8       	ldi	r22, 0x85	; 133
    234a:	ce 01       	movw	r24, r28
    234c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2350:	18 2b       	or	r17, r24
    2352:	44 e0       	ldi	r20, 0x04	; 4
    2354:	6f ef       	ldi	r22, 0xFF	; 255
    2356:	ce 01       	movw	r24, r28
    2358:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    235c:	18 2b       	or	r17, r24
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	6d ec       	ldi	r22, 0xCD	; 205
    2362:	ce 01       	movw	r24, r28
    2364:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2368:	18 2b       	or	r17, r24
    236a:	41 e1       	ldi	r20, 0x11	; 17
    236c:	6c ec       	ldi	r22, 0xCC	; 204
    236e:	ce 01       	movw	r24, r28
    2370:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2374:	18 2b       	or	r17, r24
    2376:	47 e0       	ldi	r20, 0x07	; 7
    2378:	6f ef       	ldi	r22, 0xFF	; 255
    237a:	ce 01       	movw	r24, r28
    237c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2380:	18 2b       	or	r17, r24
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	6e eb       	ldi	r22, 0xBE	; 190
    2386:	ce 01       	movw	r24, r28
    2388:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    238c:	18 2b       	or	r17, r24
    238e:	46 e0       	ldi	r20, 0x06	; 6
    2390:	6f ef       	ldi	r22, 0xFF	; 255
    2392:	ce 01       	movw	r24, r28
    2394:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2398:	18 2b       	or	r17, r24
    239a:	49 e0       	ldi	r20, 0x09	; 9
    239c:	6c ec       	ldi	r22, 0xCC	; 204
    239e:	ce 01       	movw	r24, r28
    23a0:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    23a4:	18 2b       	or	r17, r24
    23a6:	40 e0       	ldi	r20, 0x00	; 0
    23a8:	6f ef       	ldi	r22, 0xFF	; 255
    23aa:	ce 01       	movw	r24, r28
    23ac:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    23b0:	18 2b       	or	r17, r24
    23b2:	41 e0       	ldi	r20, 0x01	; 1
    23b4:	6f ef       	ldi	r22, 0xFF	; 255
    23b6:	ce 01       	movw	r24, r28
    23b8:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    23bc:	18 2b       	or	r17, r24
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	ce 01       	movw	r24, r28
    23c4:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    23c8:	81 2b       	or	r24, r17
    23ca:	36 c0       	rjmp	.+108    	; 0x2438 <VL53L0X_SetGpioConfig+0x14e>
    23cc:	22 30       	cpi	r18, 0x02	; 2
    23ce:	59 f0       	breq	.+22     	; 0x23e6 <VL53L0X_SetGpioConfig+0xfc>
    23d0:	28 f4       	brcc	.+10     	; 0x23dc <VL53L0X_SetGpioConfig+0xf2>
    23d2:	22 23       	and	r18, r18
    23d4:	61 f0       	breq	.+24     	; 0x23ee <VL53L0X_SetGpioConfig+0x104>
    23d6:	21 30       	cpi	r18, 0x01	; 1
    23d8:	59 f1       	breq	.+86     	; 0x2430 <VL53L0X_SetGpioConfig+0x146>
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <VL53L0X_SetGpioConfig+0x110>
    23dc:	23 30       	cpi	r18, 0x03	; 3
    23de:	51 f1       	breq	.+84     	; 0x2434 <VL53L0X_SetGpioConfig+0x14a>
    23e0:	24 30       	cpi	r18, 0x04	; 4
    23e2:	19 f0       	breq	.+6      	; 0x23ea <VL53L0X_SetGpioConfig+0x100>
    23e4:	0a c0       	rjmp	.+20     	; 0x23fa <VL53L0X_SetGpioConfig+0x110>
    23e6:	42 e0       	ldi	r20, 0x02	; 2
    23e8:	03 c0       	rjmp	.+6      	; 0x23f0 <VL53L0X_SetGpioConfig+0x106>
    23ea:	44 e0       	ldi	r20, 0x04	; 4
    23ec:	01 c0       	rjmp	.+2      	; 0x23f0 <VL53L0X_SetGpioConfig+0x106>
    23ee:	40 e0       	ldi	r20, 0x00	; 0
    23f0:	6a e0       	ldi	r22, 0x0A	; 10
    23f2:	ce 01       	movw	r24, r28
    23f4:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    23f8:	01 c0       	rjmp	.+2      	; 0x23fc <VL53L0X_SetGpioConfig+0x112>
    23fa:	85 ef       	ldi	r24, 0xF5	; 245
    23fc:	81 11       	cpse	r24, r1
    23fe:	1c c0       	rjmp	.+56     	; 0x2438 <VL53L0X_SetGpioConfig+0x14e>
    2400:	00 23       	and	r16, r16
    2402:	11 f0       	breq	.+4      	; 0x2408 <VL53L0X_SetGpioConfig+0x11e>
    2404:	20 e1       	ldi	r18, 0x10	; 16
    2406:	01 c0       	rjmp	.+2      	; 0x240a <VL53L0X_SetGpioConfig+0x120>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	4f ee       	ldi	r20, 0xEF	; 239
    240c:	64 e8       	ldi	r22, 0x84	; 132
    240e:	ce 01       	movw	r24, r28
    2410:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <VL53L0X_UpdateByte>
    2414:	81 11       	cpse	r24, r1
    2416:	10 c0       	rjmp	.+32     	; 0x2438 <VL53L0X_SetGpioConfig+0x14e>
    2418:	fe 01       	movw	r30, r28
    241a:	e2 53       	subi	r30, 0x32	; 50
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	10 83       	st	Z, r17
    2420:	40 e0       	ldi	r20, 0x00	; 0
    2422:	50 e0       	ldi	r21, 0x00	; 0
    2424:	ba 01       	movw	r22, r20
    2426:	ce 01       	movw	r24, r28
    2428:	0d df       	rcall	.-486    	; 0x2244 <VL53L0X_ClearInterruptMask>
    242a:	06 c0       	rjmp	.+12     	; 0x2438 <VL53L0X_SetGpioConfig+0x14e>
    242c:	86 ef       	ldi	r24, 0xF6	; 246
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <VL53L0X_SetGpioConfig+0x14e>
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	de cf       	rjmp	.-68     	; 0x23f0 <VL53L0X_SetGpioConfig+0x106>
    2434:	43 e0       	ldi	r20, 0x03	; 3
    2436:	dc cf       	rjmp	.-72     	; 0x23f0 <VL53L0X_SetGpioConfig+0x106>
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	08 95       	ret

00002442 <VL53L0X_StaticInit>:
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
    244a:	cf 93       	push	r28
    244c:	df 93       	push	r29
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	c7 54       	subi	r28, 0x47	; 71
    2454:	d1 09       	sbc	r29, r1
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	7c 01       	movw	r14, r24
    2462:	fe 01       	movw	r30, r28
    2464:	31 96       	adiw	r30, 0x01	; 1
    2466:	8a e3       	ldi	r24, 0x3A	; 58
    2468:	df 01       	movw	r26, r30
    246a:	1d 92       	st	X+, r1
    246c:	8a 95       	dec	r24
    246e:	e9 f7       	brne	.-6      	; 0x246a <VL53L0X_StaticInit+0x28>
    2470:	1c ae       	std	Y+60, r1	; 0x3c
    2472:	1b ae       	std	Y+59, r1	; 0x3b
    2474:	1d ae       	std	Y+61, r1	; 0x3d
    2476:	1e ae       	std	Y+62, r1	; 0x3e
    2478:	23 96       	adiw	r28, 0x03	; 3
    247a:	1c ae       	std	Y+60, r1	; 0x3c
    247c:	1d ae       	std	Y+61, r1	; 0x3d
    247e:	1e ae       	std	Y+62, r1	; 0x3e
    2480:	1f ae       	std	Y+63, r1	; 0x3f
    2482:	23 97       	sbiw	r28, 0x03	; 3
    2484:	61 e0       	ldi	r22, 0x01	; 1
    2486:	c7 01       	movw	r24, r14
    2488:	0e 94 25 1b 	call	0x364a	; 0x364a <VL53L0X_get_info_from_device>
    248c:	f7 01       	movw	r30, r14
    248e:	ed 5f       	subi	r30, 0xFD	; 253
    2490:	fe 4f       	sbci	r31, 0xFE	; 254
    2492:	20 81       	ld	r18, Z
    2494:	22 30       	cpi	r18, 0x02	; 2
    2496:	a0 f4       	brcc	.+40     	; 0x24c0 <VL53L0X_StaticInit+0x7e>
    2498:	31 97       	sbiw	r30, 0x01	; 1
    249a:	40 81       	ld	r20, Z
    249c:	50 e0       	ldi	r21, 0x00	; 0
    249e:	60 e0       	ldi	r22, 0x00	; 0
    24a0:	70 e0       	ldi	r23, 0x00	; 0
    24a2:	21 30       	cpi	r18, 0x01	; 1
    24a4:	31 f4       	brne	.+12     	; 0x24b2 <VL53L0X_StaticInit+0x70>
    24a6:	41 32       	cpi	r20, 0x21	; 33
    24a8:	51 05       	cpc	r21, r1
    24aa:	61 05       	cpc	r22, r1
    24ac:	71 05       	cpc	r23, r1
    24ae:	40 f4       	brcc	.+16     	; 0x24c0 <VL53L0X_StaticInit+0x7e>
    24b0:	10 c0       	rjmp	.+32     	; 0x24d2 <VL53L0X_StaticInit+0x90>
    24b2:	21 11       	cpse	r18, r1
    24b4:	0e c0       	rjmp	.+28     	; 0x24d2 <VL53L0X_StaticInit+0x90>
    24b6:	4d 30       	cpi	r20, 0x0D	; 13
    24b8:	51 05       	cpc	r21, r1
    24ba:	61 05       	cpc	r22, r1
    24bc:	71 05       	cpc	r23, r1
    24be:	48 f0       	brcs	.+18     	; 0x24d2 <VL53L0X_StaticInit+0x90>
    24c0:	ae 01       	movw	r20, r28
    24c2:	42 5c       	subi	r20, 0xC2	; 194
    24c4:	5f 4f       	sbci	r21, 0xFF	; 255
    24c6:	be 01       	movw	r22, r28
    24c8:	61 5c       	subi	r22, 0xC1	; 193
    24ca:	7f 4f       	sbci	r23, 0xFF	; 255
    24cc:	c7 01       	movw	r24, r14
    24ce:	b5 d5       	rcall	.+2922   	; 0x303a <VL53L0X_perform_ref_spad_management>
    24d0:	02 c0       	rjmp	.+4      	; 0x24d6 <VL53L0X_StaticInit+0x94>
    24d2:	c7 01       	movw	r24, r14
    24d4:	a3 d3       	rcall	.+1862   	; 0x2c1c <VL53L0X_set_reference_spads>
    24d6:	81 11       	cpse	r24, r1
    24d8:	26 c0       	rjmp	.+76     	; 0x2526 <VL53L0X_StaticInit+0xe4>
    24da:	f7 01       	movw	r30, r14
    24dc:	e8 5c       	subi	r30, 0xC8	; 200
    24de:	fe 4f       	sbci	r31, 0xFE	; 254
    24e0:	80 81       	ld	r24, Z
    24e2:	81 11       	cpse	r24, r1
    24e4:	be c0       	rjmp	.+380    	; 0x2662 <VL53L0X_StaticInit+0x220>
    24e6:	32 97       	sbiw	r30, 0x02	; 2
    24e8:	60 81       	ld	r22, Z
    24ea:	71 81       	ldd	r23, Z+1	; 0x01
    24ec:	bc c0       	rjmp	.+376    	; 0x2666 <VL53L0X_StaticInit+0x224>
    24ee:	00 e0       	ldi	r16, 0x00	; 0
    24f0:	24 e0       	ldi	r18, 0x04	; 4
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	60 e0       	ldi	r22, 0x00	; 0
    24f6:	c7 01       	movw	r24, r14
    24f8:	f8 de       	rcall	.-528    	; 0x22ea <VL53L0X_SetGpioConfig>
    24fa:	81 11       	cpse	r24, r1
    24fc:	6c c0       	rjmp	.+216    	; 0x25d6 <VL53L0X_StaticInit+0x194>
    24fe:	41 e0       	ldi	r20, 0x01	; 1
    2500:	6f ef       	ldi	r22, 0xFF	; 255
    2502:	c7 01       	movw	r24, r14
    2504:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2508:	18 2f       	mov	r17, r24
    250a:	ae 01       	movw	r20, r28
    250c:	45 5c       	subi	r20, 0xC5	; 197
    250e:	5f 4f       	sbci	r21, 0xFF	; 255
    2510:	64 e8       	ldi	r22, 0x84	; 132
    2512:	c7 01       	movw	r24, r14
    2514:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    2518:	18 2b       	or	r17, r24
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	6f ef       	ldi	r22, 0xFF	; 255
    251e:	c7 01       	movw	r24, r14
    2520:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2524:	81 2b       	or	r24, r17
    2526:	81 11       	cpse	r24, r1
    2528:	a5 c0       	rjmp	.+330    	; 0x2674 <VL53L0X_StaticInit+0x232>
    252a:	f7 01       	movw	r30, r14
    252c:	e8 53       	subi	r30, 0x38	; 56
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	8b ad       	ldd	r24, Y+59	; 0x3b
    2532:	9c ad       	ldd	r25, Y+60	; 0x3c
    2534:	82 95       	swap	r24
    2536:	92 95       	swap	r25
    2538:	90 7f       	andi	r25, 0xF0	; 240
    253a:	98 27       	eor	r25, r24
    253c:	80 7f       	andi	r24, 0xF0	; 240
    253e:	98 27       	eor	r25, r24
    2540:	a0 e0       	ldi	r26, 0x00	; 0
    2542:	b0 e0       	ldi	r27, 0x00	; 0
    2544:	80 83       	st	Z, r24
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	a2 83       	std	Z+2, r26	; 0x02
    254a:	b3 83       	std	Z+3, r27	; 0x03
    254c:	be 01       	movw	r22, r28
    254e:	6f 5f       	subi	r22, 0xFF	; 255
    2550:	7f 4f       	sbci	r23, 0xFF	; 255
    2552:	c7 01       	movw	r24, r14
    2554:	38 da       	rcall	.-2960   	; 0x19c6 <VL53L0X_GetDeviceParameters>
    2556:	81 11       	cpse	r24, r1
    2558:	29 c0       	rjmp	.+82     	; 0x25ac <VL53L0X_StaticInit+0x16a>
    255a:	be 01       	movw	r22, r28
    255c:	63 5c       	subi	r22, 0xC3	; 195
    255e:	7f 4f       	sbci	r23, 0xFF	; 255
    2560:	c7 01       	movw	r24, r14
    2562:	0e 94 2a 09 	call	0x1254	; 0x1254 <VL53L0X_GetFractionEnable>
    2566:	81 11       	cpse	r24, r1
    2568:	21 c0       	rjmp	.+66     	; 0x25ac <VL53L0X_StaticInit+0x16a>
    256a:	8d ad       	ldd	r24, Y+61	; 0x3d
    256c:	f7 01       	movw	r30, r14
    256e:	e2 5e       	subi	r30, 0xE2	; 226
    2570:	fe 4f       	sbci	r31, 0xFE	; 254
    2572:	80 83       	st	Z, r24
    2574:	8a e3       	ldi	r24, 0x3A	; 58
    2576:	fe 01       	movw	r30, r28
    2578:	31 96       	adiw	r30, 0x01	; 1
    257a:	d7 01       	movw	r26, r14
    257c:	50 96       	adiw	r26, 0x10	; 16
    257e:	01 90       	ld	r0, Z+
    2580:	0d 92       	st	X+, r0
    2582:	8a 95       	dec	r24
    2584:	e1 f7       	brne	.-8      	; 0x257e <VL53L0X_StaticInit+0x13c>
    2586:	ae 01       	movw	r20, r28
    2588:	43 5c       	subi	r20, 0xC3	; 195
    258a:	5f 4f       	sbci	r21, 0xFF	; 255
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	c7 01       	movw	r24, r14
    2590:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    2594:	81 11       	cpse	r24, r1
    2596:	71 c0       	rjmp	.+226    	; 0x267a <VL53L0X_StaticInit+0x238>
    2598:	8d ad       	ldd	r24, Y+61	; 0x3d
    259a:	f7 01       	movw	r30, r14
    259c:	e3 5e       	subi	r30, 0xE3	; 227
    259e:	fe 4f       	sbci	r31, 0xFE	; 254
    25a0:	80 83       	st	Z, r24
    25a2:	40 e0       	ldi	r20, 0x00	; 0
    25a4:	60 e0       	ldi	r22, 0x00	; 0
    25a6:	c7 01       	movw	r24, r14
    25a8:	0e 94 3f 09 	call	0x127e	; 0x127e <VL53L0X_SetSequenceStepEnable>
    25ac:	81 11       	cpse	r24, r1
    25ae:	65 c0       	rjmp	.+202    	; 0x267a <VL53L0X_StaticInit+0x238>
    25b0:	40 e0       	ldi	r20, 0x00	; 0
    25b2:	62 e0       	ldi	r22, 0x02	; 2
    25b4:	c7 01       	movw	r24, r14
    25b6:	0e 94 3f 09 	call	0x127e	; 0x127e <VL53L0X_SetSequenceStepEnable>
    25ba:	81 11       	cpse	r24, r1
    25bc:	1c c0       	rjmp	.+56     	; 0x25f6 <VL53L0X_StaticInit+0x1b4>
    25be:	83 e0       	ldi	r24, 0x03	; 3
    25c0:	f7 01       	movw	r30, r14
    25c2:	e1 5e       	subi	r30, 0xE1	; 225
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	80 83       	st	Z, r24
    25c8:	ae 01       	movw	r20, r28
    25ca:	4d 5b       	subi	r20, 0xBD	; 189
    25cc:	5f 4f       	sbci	r21, 0xFF	; 255
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	c7 01       	movw	r24, r14
    25d2:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <VL53L0X_get_vcsel_pulse_period>
    25d6:	81 11       	cpse	r24, r1
    25d8:	1e c0       	rjmp	.+60     	; 0x2616 <VL53L0X_StaticInit+0x1d4>
    25da:	24 96       	adiw	r28, 0x04	; 4
    25dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    25de:	24 97       	sbiw	r28, 0x04	; 4
    25e0:	f7 01       	movw	r30, r14
    25e2:	e8 52       	subi	r30, 0x28	; 40
    25e4:	ff 4f       	sbci	r31, 0xFF	; 255
    25e6:	80 83       	st	Z, r24
    25e8:	ae 01       	movw	r20, r28
    25ea:	4d 5b       	subi	r20, 0xBD	; 189
    25ec:	5f 4f       	sbci	r21, 0xFF	; 255
    25ee:	61 e0       	ldi	r22, 0x01	; 1
    25f0:	c7 01       	movw	r24, r14
    25f2:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <VL53L0X_get_vcsel_pulse_period>
    25f6:	81 11       	cpse	r24, r1
    25f8:	24 c0       	rjmp	.+72     	; 0x2642 <VL53L0X_StaticInit+0x200>
    25fa:	24 96       	adiw	r28, 0x04	; 4
    25fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    25fe:	24 97       	sbiw	r28, 0x04	; 4
    2600:	f7 01       	movw	r30, r14
    2602:	ed 52       	subi	r30, 0x2D	; 45
    2604:	ff 4f       	sbci	r31, 0xFF	; 255
    2606:	80 83       	st	Z, r24
    2608:	ae 01       	movw	r20, r28
    260a:	4c 5b       	subi	r20, 0xBC	; 188
    260c:	5f 4f       	sbci	r21, 0xFF	; 255
    260e:	63 e0       	ldi	r22, 0x03	; 3
    2610:	c7 01       	movw	r24, r14
    2612:	0e 94 2d 0a 	call	0x145a	; 0x145a <VL53L0X_GetSequenceStepTimeout>
    2616:	81 11       	cpse	r24, r1
    2618:	30 c0       	rjmp	.+96     	; 0x267a <VL53L0X_StaticInit+0x238>
    261a:	28 96       	adiw	r28, 0x08	; 8
    261c:	8c ad       	ldd	r24, Y+60	; 0x3c
    261e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2620:	ae ad       	ldd	r26, Y+62	; 0x3e
    2622:	bf ad       	ldd	r27, Y+63	; 0x3f
    2624:	28 97       	sbiw	r28, 0x08	; 8
    2626:	f7 01       	movw	r30, r14
    2628:	ec 52       	subi	r30, 0x2C	; 44
    262a:	ff 4f       	sbci	r31, 0xFF	; 255
    262c:	80 83       	st	Z, r24
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	a2 83       	std	Z+2, r26	; 0x02
    2632:	b3 83       	std	Z+3, r27	; 0x03
    2634:	ae 01       	movw	r20, r28
    2636:	4c 5b       	subi	r20, 0xBC	; 188
    2638:	5f 4f       	sbci	r21, 0xFF	; 255
    263a:	64 e0       	ldi	r22, 0x04	; 4
    263c:	c7 01       	movw	r24, r14
    263e:	0e 94 2d 0a 	call	0x145a	; 0x145a <VL53L0X_GetSequenceStepTimeout>
    2642:	81 11       	cpse	r24, r1
    2644:	1a c0       	rjmp	.+52     	; 0x267a <VL53L0X_StaticInit+0x238>
    2646:	f7 01       	movw	r30, r14
    2648:	e1 53       	subi	r30, 0x31	; 49
    264a:	ff 4f       	sbci	r31, 0xFF	; 255
    264c:	28 96       	adiw	r28, 0x08	; 8
    264e:	4c ad       	ldd	r20, Y+60	; 0x3c
    2650:	5d ad       	ldd	r21, Y+61	; 0x3d
    2652:	6e ad       	ldd	r22, Y+62	; 0x3e
    2654:	7f ad       	ldd	r23, Y+63	; 0x3f
    2656:	28 97       	sbiw	r28, 0x08	; 8
    2658:	40 83       	st	Z, r20
    265a:	51 83       	std	Z+1, r21	; 0x01
    265c:	62 83       	std	Z+2, r22	; 0x02
    265e:	73 83       	std	Z+3, r23	; 0x03
    2660:	0c c0       	rjmp	.+24     	; 0x267a <VL53L0X_StaticInit+0x238>
    2662:	68 eb       	ldi	r22, 0xB8	; 184
    2664:	72 e0       	ldi	r23, 0x02	; 2
    2666:	c7 01       	movw	r24, r14
    2668:	0e 94 63 23 	call	0x46c6	; 0x46c6 <VL53L0X_load_tuning_settings>
    266c:	88 23       	and	r24, r24
    266e:	09 f4       	brne	.+2      	; 0x2672 <VL53L0X_StaticInit+0x230>
    2670:	3e cf       	rjmp	.-388    	; 0x24ee <VL53L0X_StaticInit+0xac>
    2672:	71 cf       	rjmp	.-286    	; 0x2556 <VL53L0X_StaticInit+0x114>
    2674:	88 23       	and	r24, r24
    2676:	09 f4       	brne	.+2      	; 0x267a <VL53L0X_StaticInit+0x238>
    2678:	86 cf       	rjmp	.-244    	; 0x2586 <VL53L0X_StaticInit+0x144>
    267a:	c9 5b       	subi	r28, 0xB9	; 185
    267c:	df 4f       	sbci	r29, 0xFF	; 255
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	df 91       	pop	r29
    268a:	cf 91       	pop	r28
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	ff 90       	pop	r15
    2692:	ef 90       	pop	r14
    2694:	08 95       	ret

00002696 <VL53L0X_GetInterruptMaskStatus>:
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	1f 92       	push	r1
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
    26a4:	8b 01       	movw	r16, r22
    26a6:	ae 01       	movw	r20, r28
    26a8:	4f 5f       	subi	r20, 0xFF	; 255
    26aa:	5f 4f       	sbci	r21, 0xFF	; 255
    26ac:	63 e1       	ldi	r22, 0x13	; 19
    26ae:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    26b2:	99 81       	ldd	r25, Y+1	; 0x01
    26b4:	49 2f       	mov	r20, r25
    26b6:	47 70       	andi	r20, 0x07	; 7
    26b8:	50 e0       	ldi	r21, 0x00	; 0
    26ba:	60 e0       	ldi	r22, 0x00	; 0
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	f8 01       	movw	r30, r16
    26c0:	40 83       	st	Z, r20
    26c2:	51 83       	std	Z+1, r21	; 0x01
    26c4:	62 83       	std	Z+2, r22	; 0x02
    26c6:	73 83       	std	Z+3, r23	; 0x03
    26c8:	98 71       	andi	r25, 0x18	; 24
    26ca:	09 f0       	breq	.+2      	; 0x26ce <VL53L0X_GetInterruptMaskStatus+0x38>
    26cc:	8a ef       	ldi	r24, 0xFA	; 250
    26ce:	0f 90       	pop	r0
    26d0:	df 91       	pop	r29
    26d2:	cf 91       	pop	r28
    26d4:	1f 91       	pop	r17
    26d6:	0f 91       	pop	r16
    26d8:	08 95       	ret

000026da <VL53L0X_GetMeasurementDataReady>:
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	00 d0       	rcall	.+0      	; 0x26e4 <VL53L0X_GetMeasurementDataReady+0xa>
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <VL53L0X_GetMeasurementDataReady+0xc>
    26e6:	1f 92       	push	r1
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	8b 01       	movw	r16, r22
    26ee:	fc 01       	movw	r30, r24
    26f0:	e2 53       	subi	r30, 0x32	; 50
    26f2:	ff 4f       	sbci	r31, 0xFF	; 255
    26f4:	20 81       	ld	r18, Z
    26f6:	24 30       	cpi	r18, 0x04	; 4
    26f8:	a1 f4       	brne	.+40     	; 0x2722 <VL53L0X_GetMeasurementDataReady+0x48>
    26fa:	be 01       	movw	r22, r28
    26fc:	6e 5f       	subi	r22, 0xFE	; 254
    26fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2700:	ca df       	rcall	.-108    	; 0x2696 <VL53L0X_GetInterruptMaskStatus>
    2702:	4a 81       	ldd	r20, Y+2	; 0x02
    2704:	5b 81       	ldd	r21, Y+3	; 0x03
    2706:	6c 81       	ldd	r22, Y+4	; 0x04
    2708:	7d 81       	ldd	r23, Y+5	; 0x05
    270a:	44 30       	cpi	r20, 0x04	; 4
    270c:	51 05       	cpc	r21, r1
    270e:	61 05       	cpc	r22, r1
    2710:	71 05       	cpc	r23, r1
    2712:	21 f4       	brne	.+8      	; 0x271c <VL53L0X_GetMeasurementDataReady+0x42>
    2714:	91 e0       	ldi	r25, 0x01	; 1
    2716:	f8 01       	movw	r30, r16
    2718:	90 83       	st	Z, r25
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <VL53L0X_GetMeasurementDataReady+0x6a>
    271c:	f8 01       	movw	r30, r16
    271e:	10 82       	st	Z, r1
    2720:	11 c0       	rjmp	.+34     	; 0x2744 <VL53L0X_GetMeasurementDataReady+0x6a>
    2722:	ae 01       	movw	r20, r28
    2724:	4f 5f       	subi	r20, 0xFF	; 255
    2726:	5f 4f       	sbci	r21, 0xFF	; 255
    2728:	64 e1       	ldi	r22, 0x14	; 20
    272a:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    272e:	81 11       	cpse	r24, r1
    2730:	09 c0       	rjmp	.+18     	; 0x2744 <VL53L0X_GetMeasurementDataReady+0x6a>
    2732:	99 81       	ldd	r25, Y+1	; 0x01
    2734:	90 ff       	sbrs	r25, 0
    2736:	04 c0       	rjmp	.+8      	; 0x2740 <VL53L0X_GetMeasurementDataReady+0x66>
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	f8 01       	movw	r30, r16
    273c:	90 83       	st	Z, r25
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <VL53L0X_GetMeasurementDataReady+0x6a>
    2740:	f8 01       	movw	r30, r16
    2742:	10 82       	st	Z, r1
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	08 95       	ret

00002758 <VL53L0X_PerformRefSpadManagement>:
=======
     f70:	0c 94 1c 2a 	jmp	0x5438	; 0x5438 <VL53L0X_get_device_info>
     f74:	08 95       	ret

00000f76 <VL53L0X_SetDeviceAddress>:
     f76:	46 2f       	mov	r20, r22
     f78:	46 95       	lsr	r20
     f7a:	6a e8       	ldi	r22, 0x8A	; 138
     f7c:	0c 94 e5 2b 	jmp	0x57ca	; 0x57ca <VL53L0X_WrByte>
     f80:	08 95       	ret

00000f82 <VL53L0X_SetDeviceMode>:
     f82:	63 30       	cpi	r22, 0x03	; 3
     f84:	41 f0       	breq	.+16     	; 0xf96 <VL53L0X_SetDeviceMode+0x14>
     f86:	18 f4       	brcc	.+6      	; 0xf8e <VL53L0X_SetDeviceMode+0xc>
     f88:	62 30       	cpi	r22, 0x02	; 2
     f8a:	28 f0       	brcs	.+10     	; 0xf96 <VL53L0X_SetDeviceMode+0x14>
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <VL53L0X_SetDeviceMode+0x1c>
     f8e:	2c ee       	ldi	r18, 0xEC	; 236
     f90:	26 0f       	add	r18, r22
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	20 f4       	brcc	.+8      	; 0xf9e <VL53L0X_SetDeviceMode+0x1c>
     f96:	fc 01       	movw	r30, r24
     f98:	60 8b       	std	Z+16, r22	; 0x10
     f9a:	80 e0       	ldi	r24, 0x00	; 0
     f9c:	08 95       	ret
     f9e:	88 ef       	ldi	r24, 0xF8	; 248
     fa0:	08 95       	ret

00000fa2 <VL53L0X_GetFractionEnable>:
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	eb 01       	movw	r28, r22
     fa8:	ab 01       	movw	r20, r22
     faa:	69 e0       	ldi	r22, 0x09	; 9
     fac:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
     fb0:	81 11       	cpse	r24, r1
     fb2:	03 c0       	rjmp	.+6      	; 0xfba <VL53L0X_GetFractionEnable+0x18>
     fb4:	98 81       	ld	r25, Y
     fb6:	91 70       	andi	r25, 0x01	; 1
     fb8:	98 83       	st	Y, r25
     fba:	df 91       	pop	r29
     fbc:	cf 91       	pop	r28
     fbe:	08 95       	ret

00000fc0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
     fc0:	0c 94 2c 20 	jmp	0x4058	; 0x4058 <VL53L0X_set_measurement_timing_budget_micro_seconds>
     fc4:	08 95       	ret

00000fc6 <VL53L0X_GetVcselPulsePeriod>:
     fc6:	0c 94 03 20 	jmp	0x4006	; 0x4006 <VL53L0X_get_vcsel_pulse_period>
     fca:	08 95       	ret

00000fcc <VL53L0X_SetSequenceStepEnable>:
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	1f 92       	push	r1
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
     fe0:	7c 01       	movw	r14, r24
     fe2:	06 2f       	mov	r16, r22
     fe4:	d4 2e       	mov	r13, r20
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	ae 01       	movw	r20, r28
     fea:	4f 5f       	subi	r20, 0xFF	; 255
     fec:	5f 4f       	sbci	r21, 0xFF	; 255
     fee:	61 e0       	ldi	r22, 0x01	; 1
     ff0:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
     ff4:	18 2f       	mov	r17, r24
     ff6:	81 11       	cpse	r24, r1
     ff8:	56 c0       	rjmp	.+172    	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	91 e0       	ldi	r25, 0x01	; 1
     ffe:	d9 12       	cpse	r13, r25
    1000:	1c c0       	rjmp	.+56     	; 0x103a <VL53L0X_SetSequenceStepEnable+0x6e>
    1002:	02 30       	cpi	r16, 0x02	; 2
    1004:	89 f0       	breq	.+34     	; 0x1028 <VL53L0X_SetSequenceStepEnable+0x5c>
    1006:	28 f4       	brcc	.+10     	; 0x1012 <VL53L0X_SetSequenceStepEnable+0x46>
    1008:	00 23       	and	r16, r16
    100a:	41 f0       	breq	.+16     	; 0x101c <VL53L0X_SetSequenceStepEnable+0x50>
    100c:	01 30       	cpi	r16, 0x01	; 1
    100e:	49 f0       	breq	.+18     	; 0x1022 <VL53L0X_SetSequenceStepEnable+0x56>
    1010:	44 c0       	rjmp	.+136    	; 0x109a <VL53L0X_SetSequenceStepEnable+0xce>
    1012:	03 30       	cpi	r16, 0x03	; 3
    1014:	61 f0       	breq	.+24     	; 0x102e <VL53L0X_SetSequenceStepEnable+0x62>
    1016:	04 30       	cpi	r16, 0x04	; 4
    1018:	69 f0       	breq	.+26     	; 0x1034 <VL53L0X_SetSequenceStepEnable+0x68>
    101a:	3f c0       	rjmp	.+126    	; 0x109a <VL53L0X_SetSequenceStepEnable+0xce>
    101c:	08 2f       	mov	r16, r24
    101e:	00 61       	ori	r16, 0x10	; 16
    1020:	40 c0       	rjmp	.+128    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1022:	08 2f       	mov	r16, r24
    1024:	08 62       	ori	r16, 0x28	; 40
    1026:	3d c0       	rjmp	.+122    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1028:	08 2f       	mov	r16, r24
    102a:	04 60       	ori	r16, 0x04	; 4
    102c:	3a c0       	rjmp	.+116    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    102e:	08 2f       	mov	r16, r24
    1030:	00 64       	ori	r16, 0x40	; 64
    1032:	37 c0       	rjmp	.+110    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1034:	08 2f       	mov	r16, r24
    1036:	00 68       	ori	r16, 0x80	; 128
    1038:	34 c0       	rjmp	.+104    	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    103a:	02 30       	cpi	r16, 0x02	; 2
    103c:	89 f0       	breq	.+34     	; 0x1060 <VL53L0X_SetSequenceStepEnable+0x94>
    103e:	28 f4       	brcc	.+10     	; 0x104a <VL53L0X_SetSequenceStepEnable+0x7e>
    1040:	00 23       	and	r16, r16
    1042:	41 f0       	breq	.+16     	; 0x1054 <VL53L0X_SetSequenceStepEnable+0x88>
    1044:	01 30       	cpi	r16, 0x01	; 1
    1046:	49 f0       	breq	.+18     	; 0x105a <VL53L0X_SetSequenceStepEnable+0x8e>
    1048:	2a c0       	rjmp	.+84     	; 0x109e <VL53L0X_SetSequenceStepEnable+0xd2>
    104a:	03 30       	cpi	r16, 0x03	; 3
    104c:	61 f0       	breq	.+24     	; 0x1066 <VL53L0X_SetSequenceStepEnable+0x9a>
    104e:	04 30       	cpi	r16, 0x04	; 4
    1050:	69 f0       	breq	.+26     	; 0x106c <VL53L0X_SetSequenceStepEnable+0xa0>
    1052:	25 c0       	rjmp	.+74     	; 0x109e <VL53L0X_SetSequenceStepEnable+0xd2>
    1054:	08 2f       	mov	r16, r24
    1056:	0f 7e       	andi	r16, 0xEF	; 239
    1058:	24 c0       	rjmp	.+72     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    105a:	08 2f       	mov	r16, r24
    105c:	07 7d       	andi	r16, 0xD7	; 215
    105e:	21 c0       	rjmp	.+66     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1060:	08 2f       	mov	r16, r24
    1062:	0b 7f       	andi	r16, 0xFB	; 251
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1066:	08 2f       	mov	r16, r24
    1068:	0f 7b       	andi	r16, 0xBF	; 191
    106a:	1b c0       	rjmp	.+54     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    106c:	08 2f       	mov	r16, r24
    106e:	0f 77       	andi	r16, 0x7F	; 127
    1070:	18 c0       	rjmp	.+48     	; 0x10a2 <VL53L0X_SetSequenceStepEnable+0xd6>
    1072:	40 2f       	mov	r20, r16
    1074:	61 e0       	ldi	r22, 0x01	; 1
    1076:	c7 01       	movw	r24, r14
    1078:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    107c:	18 2f       	mov	r17, r24
    107e:	81 11       	cpse	r24, r1
    1080:	12 c0       	rjmp	.+36     	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    1082:	f7 01       	movw	r30, r14
    1084:	e3 5e       	subi	r30, 0xE3	; 227
    1086:	fe 4f       	sbci	r31, 0xFE	; 254
    1088:	00 83       	st	Z, r16
    108a:	f7 01       	movw	r30, r14
    108c:	42 89       	ldd	r20, Z+18	; 0x12
    108e:	53 89       	ldd	r21, Z+19	; 0x13
    1090:	64 89       	ldd	r22, Z+20	; 0x14
    1092:	75 89       	ldd	r23, Z+21	; 0x15
    1094:	c7 01       	movw	r24, r14
    1096:	94 df       	rcall	.-216    	; 0xfc0 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    1098:	06 c0       	rjmp	.+12     	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    109a:	1c ef       	ldi	r17, 0xFC	; 252
    109c:	04 c0       	rjmp	.+8      	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    109e:	1c ef       	ldi	r17, 0xFC	; 252
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <VL53L0X_SetSequenceStepEnable+0xda>
    10a2:	80 13       	cpse	r24, r16
    10a4:	e6 cf       	rjmp	.-52     	; 0x1072 <VL53L0X_SetSequenceStepEnable+0xa6>
    10a6:	81 2f       	mov	r24, r17
    10a8:	0f 90       	pop	r0
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	1f 91       	pop	r17
    10b0:	0f 91       	pop	r16
    10b2:	ff 90       	pop	r15
    10b4:	ef 90       	pop	r14
    10b6:	df 90       	pop	r13
    10b8:	08 95       	ret

000010ba <sequence_step_enabled>:
    10ba:	62 30       	cpi	r22, 0x02	; 2
    10bc:	d9 f0       	breq	.+54     	; 0x10f4 <sequence_step_enabled+0x3a>
    10be:	28 f4       	brcc	.+10     	; 0x10ca <sequence_step_enabled+0x10>
    10c0:	66 23       	and	r22, r22
    10c2:	59 f0       	breq	.+22     	; 0x10da <sequence_step_enabled+0x20>
    10c4:	61 30       	cpi	r22, 0x01	; 1
    10c6:	79 f0       	breq	.+30     	; 0x10e6 <sequence_step_enabled+0x2c>
    10c8:	04 c0       	rjmp	.+8      	; 0x10d2 <sequence_step_enabled+0x18>
    10ca:	63 30       	cpi	r22, 0x03	; 3
    10cc:	d1 f0       	breq	.+52     	; 0x1102 <sequence_step_enabled+0x48>
    10ce:	64 30       	cpi	r22, 0x04	; 4
    10d0:	f9 f0       	breq	.+62     	; 0x1110 <sequence_step_enabled+0x56>
    10d2:	f9 01       	movw	r30, r18
    10d4:	10 82       	st	Z, r1
    10d6:	8c ef       	ldi	r24, 0xFC	; 252
    10d8:	08 95       	ret
    10da:	42 95       	swap	r20
    10dc:	41 70       	andi	r20, 0x01	; 1
    10de:	f9 01       	movw	r30, r18
    10e0:	40 83       	st	Z, r20
    10e2:	80 e0       	ldi	r24, 0x00	; 0
    10e4:	08 95       	ret
    10e6:	43 fb       	bst	r20, 3
    10e8:	44 27       	eor	r20, r20
    10ea:	40 f9       	bld	r20, 0
    10ec:	f9 01       	movw	r30, r18
    10ee:	40 83       	st	Z, r20
    10f0:	80 e0       	ldi	r24, 0x00	; 0
    10f2:	08 95       	ret
    10f4:	42 fb       	bst	r20, 2
    10f6:	44 27       	eor	r20, r20
    10f8:	40 f9       	bld	r20, 0
    10fa:	f9 01       	movw	r30, r18
    10fc:	40 83       	st	Z, r20
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	08 95       	ret
    1102:	46 fb       	bst	r20, 6
    1104:	44 27       	eor	r20, r20
    1106:	40 f9       	bld	r20, 0
    1108:	f9 01       	movw	r30, r18
    110a:	40 83       	st	Z, r20
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	08 95       	ret
    1110:	44 1f       	adc	r20, r20
    1112:	44 27       	eor	r20, r20
    1114:	44 1f       	adc	r20, r20
    1116:	f9 01       	movw	r30, r18
    1118:	40 83       	st	Z, r20
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	08 95       	ret

0000111e <VL53L0X_GetSequenceStepEnables>:
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	cf 93       	push	r28
    1128:	df 93       	push	r29
    112a:	1f 92       	push	r1
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	8c 01       	movw	r16, r24
    1132:	7b 01       	movw	r14, r22
    1134:	19 82       	std	Y+1, r1	; 0x01
    1136:	ae 01       	movw	r20, r28
    1138:	4f 5f       	subi	r20, 0xFF	; 255
    113a:	5f 4f       	sbci	r21, 0xFF	; 255
    113c:	61 e0       	ldi	r22, 0x01	; 1
    113e:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    1142:	81 11       	cpse	r24, r1
    1144:	20 c0       	rjmp	.+64     	; 0x1186 <VL53L0X_GetSequenceStepEnables+0x68>
    1146:	97 01       	movw	r18, r14
    1148:	49 81       	ldd	r20, Y+1	; 0x01
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	c8 01       	movw	r24, r16
    114e:	b5 df       	rcall	.-150    	; 0x10ba <sequence_step_enabled>
    1150:	81 11       	cpse	r24, r1
    1152:	22 c0       	rjmp	.+68     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    1154:	97 01       	movw	r18, r14
    1156:	2e 5f       	subi	r18, 0xFE	; 254
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	49 81       	ldd	r20, Y+1	; 0x01
    115c:	61 e0       	ldi	r22, 0x01	; 1
    115e:	c8 01       	movw	r24, r16
    1160:	ac df       	rcall	.-168    	; 0x10ba <sequence_step_enabled>
    1162:	81 11       	cpse	r24, r1
    1164:	19 c0       	rjmp	.+50     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    1166:	97 01       	movw	r18, r14
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	49 81       	ldd	r20, Y+1	; 0x01
    116e:	62 e0       	ldi	r22, 0x02	; 2
    1170:	c8 01       	movw	r24, r16
    1172:	a3 df       	rcall	.-186    	; 0x10ba <sequence_step_enabled>
    1174:	81 11       	cpse	r24, r1
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    1178:	97 01       	movw	r18, r14
    117a:	2d 5f       	subi	r18, 0xFD	; 253
    117c:	3f 4f       	sbci	r19, 0xFF	; 255
    117e:	49 81       	ldd	r20, Y+1	; 0x01
    1180:	63 e0       	ldi	r22, 0x03	; 3
    1182:	c8 01       	movw	r24, r16
    1184:	9a df       	rcall	.-204    	; 0x10ba <sequence_step_enabled>
    1186:	81 11       	cpse	r24, r1
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <VL53L0X_GetSequenceStepEnables+0x7a>
    118a:	97 01       	movw	r18, r14
    118c:	2c 5f       	subi	r18, 0xFC	; 252
    118e:	3f 4f       	sbci	r19, 0xFF	; 255
    1190:	49 81       	ldd	r20, Y+1	; 0x01
    1192:	64 e0       	ldi	r22, 0x04	; 4
    1194:	c8 01       	movw	r24, r16
    1196:	91 df       	rcall	.-222    	; 0x10ba <sequence_step_enabled>
    1198:	0f 90       	pop	r0
    119a:	df 91       	pop	r29
    119c:	cf 91       	pop	r28
    119e:	1f 91       	pop	r17
    11a0:	0f 91       	pop	r16
    11a2:	ff 90       	pop	r15
    11a4:	ef 90       	pop	r14
    11a6:	08 95       	ret

000011a8 <VL53L0X_GetSequenceStepTimeout>:
    11a8:	3f 92       	push	r3
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <VL53L0X_GetSequenceStepTimeout+0x24>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <VL53L0X_GetSequenceStepTimeout+0x26>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	8a 01       	movw	r16, r20
    11d4:	ae 01       	movw	r20, r28
    11d6:	4f 5f       	subi	r20, 0xFF	; 255
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <get_sequence_step_timeout>
    11de:	38 2e       	mov	r3, r24
    11e0:	81 11       	cpse	r24, r1
    11e2:	38 c0       	rjmp	.+112    	; 0x1254 <VL53L0X_GetSequenceStepTimeout+0xac>
    11e4:	49 80       	ldd	r4, Y+1	; 0x01
    11e6:	5a 80       	ldd	r5, Y+2	; 0x02
    11e8:	6b 80       	ldd	r6, Y+3	; 0x03
    11ea:	7c 80       	ldd	r7, Y+4	; 0x04
    11ec:	0f 2e       	mov	r0, r31
    11ee:	f8 ee       	ldi	r31, 0xE8	; 232
    11f0:	8f 2e       	mov	r8, r31
    11f2:	f3 e0       	ldi	r31, 0x03	; 3
    11f4:	9f 2e       	mov	r9, r31
    11f6:	a1 2c       	mov	r10, r1
    11f8:	b1 2c       	mov	r11, r1
    11fa:	f0 2d       	mov	r31, r0
    11fc:	c3 01       	movw	r24, r6
    11fe:	b2 01       	movw	r22, r4
    1200:	a5 01       	movw	r20, r10
    1202:	94 01       	movw	r18, r8
    1204:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    1208:	69 01       	movw	r12, r18
    120a:	7a 01       	movw	r14, r20
    120c:	a8 ee       	ldi	r26, 0xE8	; 232
    120e:	b3 e0       	ldi	r27, 0x03	; 3
    1210:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    1214:	a3 01       	movw	r20, r6
    1216:	92 01       	movw	r18, r4
    1218:	26 1b       	sub	r18, r22
    121a:	37 0b       	sbc	r19, r23
    121c:	48 0b       	sbc	r20, r24
    121e:	59 0b       	sbc	r21, r25
    1220:	af ef       	ldi	r26, 0xFF	; 255
    1222:	bf ef       	ldi	r27, 0xFF	; 255
    1224:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    1228:	6c 50       	subi	r22, 0x0C	; 12
    122a:	7e 4f       	sbci	r23, 0xFE	; 254
    122c:	8f 4f       	sbci	r24, 0xFF	; 255
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	a5 01       	movw	r20, r10
    1232:	94 01       	movw	r18, r8
    1234:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    1238:	76 01       	movw	r14, r12
    123a:	dd 24       	eor	r13, r13
    123c:	cc 24       	eor	r12, r12
    123e:	da 01       	movw	r26, r20
    1240:	c9 01       	movw	r24, r18
    1242:	8c 0d       	add	r24, r12
    1244:	9d 1d       	adc	r25, r13
    1246:	ae 1d       	adc	r26, r14
    1248:	bf 1d       	adc	r27, r15
    124a:	f8 01       	movw	r30, r16
    124c:	80 83       	st	Z, r24
    124e:	91 83       	std	Z+1, r25	; 0x01
    1250:	a2 83       	std	Z+2, r26	; 0x02
    1252:	b3 83       	std	Z+3, r27	; 0x03
    1254:	83 2d       	mov	r24, r3
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	1f 91       	pop	r17
    1264:	0f 91       	pop	r16
    1266:	ff 90       	pop	r15
    1268:	ef 90       	pop	r14
    126a:	df 90       	pop	r13
    126c:	cf 90       	pop	r12
    126e:	bf 90       	pop	r11
    1270:	af 90       	pop	r10
    1272:	9f 90       	pop	r9
    1274:	8f 90       	pop	r8
    1276:	7f 90       	pop	r7
    1278:	6f 90       	pop	r6
    127a:	5f 90       	pop	r5
    127c:	4f 90       	pop	r4
    127e:	3f 90       	pop	r3
    1280:	08 95       	ret

00001282 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
    1282:	cf 92       	push	r12
    1284:	df 92       	push	r13
    1286:	ef 92       	push	r14
    1288:	ff 92       	push	r15
    128a:	1f 93       	push	r17
    128c:	cf 93       	push	r28
    128e:	df 93       	push	r29
    1290:	00 d0       	rcall	.+0      	; 0x1292 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x10>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x12>
    1294:	00 d0       	rcall	.+0      	; 0x1296 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	7c 01       	movw	r14, r24
    129c:	6b 01       	movw	r12, r22
    129e:	ae 01       	movw	r20, r28
    12a0:	4f 5f       	subi	r20, 0xFF	; 255
    12a2:	5f 4f       	sbci	r21, 0xFF	; 255
    12a4:	68 ef       	ldi	r22, 0xF8	; 248
    12a6:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    12aa:	18 2f       	mov	r17, r24
    12ac:	81 11       	cpse	r24, r1
    12ae:	26 c0       	rjmp	.+76     	; 0x12fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    12b0:	ae 01       	movw	r20, r28
    12b2:	4d 5f       	subi	r20, 0xFD	; 253
    12b4:	5f 4f       	sbci	r21, 0xFF	; 255
    12b6:	64 e0       	ldi	r22, 0x04	; 4
    12b8:	c7 01       	movw	r24, r14
    12ba:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    12be:	18 2f       	mov	r17, r24
    12c0:	81 11       	cpse	r24, r1
    12c2:	1c c0       	rjmp	.+56     	; 0x12fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    12c4:	29 81       	ldd	r18, Y+1	; 0x01
    12c6:	3a 81       	ldd	r19, Y+2	; 0x02
    12c8:	21 15       	cp	r18, r1
    12ca:	31 05       	cpc	r19, r1
    12cc:	69 f0       	breq	.+26     	; 0x12e8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x66>
    12ce:	40 e0       	ldi	r20, 0x00	; 0
    12d0:	50 e0       	ldi	r21, 0x00	; 0
    12d2:	6b 81       	ldd	r22, Y+3	; 0x03
    12d4:	7c 81       	ldd	r23, Y+4	; 0x04
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    12de:	f6 01       	movw	r30, r12
    12e0:	20 83       	st	Z, r18
    12e2:	31 83       	std	Z+1, r19	; 0x01
    12e4:	42 83       	std	Z+2, r20	; 0x02
    12e6:	53 83       	std	Z+3, r21	; 0x03
    12e8:	f6 01       	movw	r30, r12
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	a2 81       	ldd	r26, Z+2	; 0x02
    12f0:	b3 81       	ldd	r27, Z+3	; 0x03
    12f2:	f7 01       	movw	r30, r14
    12f4:	86 8b       	std	Z+22, r24	; 0x16
    12f6:	97 8b       	std	Z+23, r25	; 0x17
    12f8:	a0 8f       	std	Z+24, r26	; 0x18
    12fa:	b1 8f       	std	Z+25, r27	; 0x19
    12fc:	81 2f       	mov	r24, r17
    12fe:	26 96       	adiw	r28, 0x06	; 6
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	1f 91       	pop	r17
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	08 95       	ret

0000131a <VL53L0X_GetXTalkCompensationEnable>:
    131a:	fc 01       	movw	r30, r24
    131c:	82 8d       	ldd	r24, Z+26	; 0x1a
    131e:	fb 01       	movw	r30, r22
    1320:	80 83       	st	Z, r24
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	08 95       	ret

00001326 <VL53L0X_GetXTalkCompensationRateMegaCps>:
    1326:	ef 92       	push	r14
    1328:	ff 92       	push	r15
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	00 d0       	rcall	.+0      	; 0x1334 <VL53L0X_GetXTalkCompensationRateMegaCps+0xe>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	8c 01       	movw	r16, r24
    133a:	7b 01       	movw	r14, r22
    133c:	ae 01       	movw	r20, r28
    133e:	4f 5f       	subi	r20, 0xFF	; 255
    1340:	5f 4f       	sbci	r21, 0xFF	; 255
    1342:	60 e2       	ldi	r22, 0x20	; 32
    1344:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    1348:	81 11       	cpse	r24, r1
    134a:	26 c0       	rjmp	.+76     	; 0x1398 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    134c:	49 81       	ldd	r20, Y+1	; 0x01
    134e:	5a 81       	ldd	r21, Y+2	; 0x02
    1350:	41 15       	cp	r20, r1
    1352:	51 05       	cpc	r21, r1
    1354:	69 f4       	brne	.+26     	; 0x1370 <VL53L0X_GetXTalkCompensationRateMegaCps+0x4a>
    1356:	f8 01       	movw	r30, r16
    1358:	45 8d       	ldd	r20, Z+29	; 0x1d
    135a:	56 8d       	ldd	r21, Z+30	; 0x1e
    135c:	67 8d       	ldd	r22, Z+31	; 0x1f
    135e:	70 a1       	ldd	r23, Z+32	; 0x20
    1360:	f7 01       	movw	r30, r14
    1362:	40 83       	st	Z, r20
    1364:	51 83       	std	Z+1, r21	; 0x01
    1366:	62 83       	std	Z+2, r22	; 0x02
    1368:	73 83       	std	Z+3, r23	; 0x03
    136a:	f8 01       	movw	r30, r16
    136c:	12 8e       	std	Z+26, r1	; 0x1a
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    1370:	44 0f       	add	r20, r20
    1372:	55 1f       	adc	r21, r21
    1374:	44 0f       	add	r20, r20
    1376:	55 1f       	adc	r21, r21
    1378:	44 0f       	add	r20, r20
    137a:	55 1f       	adc	r21, r21
    137c:	60 e0       	ldi	r22, 0x00	; 0
    137e:	70 e0       	ldi	r23, 0x00	; 0
    1380:	f7 01       	movw	r30, r14
    1382:	40 83       	st	Z, r20
    1384:	51 83       	std	Z+1, r21	; 0x01
    1386:	62 83       	std	Z+2, r22	; 0x02
    1388:	73 83       	std	Z+3, r23	; 0x03
    138a:	f8 01       	movw	r30, r16
    138c:	45 8f       	std	Z+29, r20	; 0x1d
    138e:	56 8f       	std	Z+30, r21	; 0x1e
    1390:	67 8f       	std	Z+31, r22	; 0x1f
    1392:	70 a3       	std	Z+32, r23	; 0x20
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	92 8f       	std	Z+26, r25	; 0x1a
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	08 95       	ret

000013aa <VL53L0X_SetLimitCheckEnable>:
    13aa:	8f 92       	push	r8
    13ac:	9f 92       	push	r9
    13ae:	af 92       	push	r10
    13b0:	bf 92       	push	r11
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	1f 93       	push	r17
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	66 30       	cpi	r22, 0x06	; 6
    13be:	71 05       	cpc	r23, r1
    13c0:	08 f0       	brcs	.+2      	; 0x13c4 <VL53L0X_SetLimitCheckEnable+0x1a>
    13c2:	47 c0       	rjmp	.+142    	; 0x1452 <VL53L0X_SetLimitCheckEnable+0xa8>
    13c4:	44 23       	and	r20, r20
    13c6:	09 f4       	brne	.+2      	; 0x13ca <VL53L0X_SetLimitCheckEnable+0x20>
    13c8:	48 c0       	rjmp	.+144    	; 0x145a <VL53L0X_SetLimitCheckEnable+0xb0>
    13ca:	fb 01       	movw	r30, r22
    13cc:	ee 0f       	add	r30, r30
    13ce:	ff 1f       	adc	r31, r31
    13d0:	ee 0f       	add	r30, r30
    13d2:	ff 1f       	adc	r31, r31
    13d4:	e8 0f       	add	r30, r24
    13d6:	f9 1f       	adc	r31, r25
    13d8:	81 a8       	ldd	r8, Z+49	; 0x31
    13da:	92 a8       	ldd	r9, Z+50	; 0x32
    13dc:	a3 a8       	ldd	r10, Z+51	; 0x33
    13de:	b4 a8       	ldd	r11, Z+52	; 0x34
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	31 e0       	ldi	r19, 0x01	; 1
    13e4:	3f c0       	rjmp	.+126    	; 0x1464 <VL53L0X_SetLimitCheckEnable+0xba>
    13e6:	f7 01       	movw	r30, r14
    13e8:	35 a3       	std	Z+37, r19	; 0x25
    13ea:	26 c0       	rjmp	.+76     	; 0x1438 <VL53L0X_SetLimitCheckEnable+0x8e>
    13ec:	b5 01       	movw	r22, r10
    13ee:	a4 01       	movw	r20, r8
    13f0:	03 2e       	mov	r0, r19
    13f2:	39 e0       	ldi	r19, 0x09	; 9
    13f4:	76 95       	lsr	r23
    13f6:	67 95       	ror	r22
    13f8:	57 95       	ror	r21
    13fa:	47 95       	ror	r20
    13fc:	3a 95       	dec	r19
    13fe:	d1 f7       	brne	.-12     	; 0x13f4 <VL53L0X_SetLimitCheckEnable+0x4a>
    1400:	30 2d       	mov	r19, r0
    1402:	64 e4       	ldi	r22, 0x44	; 68
    1404:	c7 01       	movw	r24, r14
    1406:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <VL53L0X_WrWord>
    140a:	14 c0       	rjmp	.+40     	; 0x1434 <VL53L0X_SetLimitCheckEnable+0x8a>
    140c:	f7 01       	movw	r30, r14
    140e:	37 a3       	std	Z+39, r19	; 0x27
    1410:	13 c0       	rjmp	.+38     	; 0x1438 <VL53L0X_SetLimitCheckEnable+0x8e>
    1412:	f7 01       	movw	r30, r14
    1414:	30 a7       	std	Z+40, r19	; 0x28
    1416:	10 c0       	rjmp	.+32     	; 0x1438 <VL53L0X_SetLimitCheckEnable+0x8e>
    1418:	22 0f       	add	r18, r18
    141a:	4e ef       	ldi	r20, 0xFE	; 254
    141c:	60 e6       	ldi	r22, 0x60	; 96
    141e:	c7 01       	movw	r24, r14
    1420:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <VL53L0X_UpdateByte>
    1424:	07 c0       	rjmp	.+14     	; 0x1434 <VL53L0X_SetLimitCheckEnable+0x8a>
    1426:	22 95       	swap	r18
    1428:	20 7f       	andi	r18, 0xF0	; 240
    142a:	4f ee       	ldi	r20, 0xEF	; 239
    142c:	60 e6       	ldi	r22, 0x60	; 96
    142e:	c7 01       	movw	r24, r14
    1430:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <VL53L0X_UpdateByte>
    1434:	81 11       	cpse	r24, r1
    1436:	2d c0       	rjmp	.+90     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1438:	11 11       	cpse	r17, r1
    143a:	05 c0       	rjmp	.+10     	; 0x1446 <VL53L0X_SetLimitCheckEnable+0x9c>
    143c:	ce 0d       	add	r28, r14
    143e:	df 1d       	adc	r29, r15
    1440:	1d a2       	std	Y+37, r1	; 0x25
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	26 c0       	rjmp	.+76     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1446:	ce 0d       	add	r28, r14
    1448:	df 1d       	adc	r29, r15
    144a:	81 e0       	ldi	r24, 0x01	; 1
    144c:	8d a3       	std	Y+37, r24	; 0x25
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	20 c0       	rjmp	.+64     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1452:	8c ef       	ldi	r24, 0xFC	; 252
    1454:	1e c0       	rjmp	.+60     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    1456:	8c ef       	ldi	r24, 0xFC	; 252
    1458:	1c c0       	rjmp	.+56     	; 0x1492 <VL53L0X_SetLimitCheckEnable+0xe8>
    145a:	21 e0       	ldi	r18, 0x01	; 1
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	81 2c       	mov	r8, r1
    1460:	91 2c       	mov	r9, r1
    1462:	54 01       	movw	r10, r8
    1464:	14 2f       	mov	r17, r20
    1466:	eb 01       	movw	r28, r22
    1468:	7c 01       	movw	r14, r24
    146a:	62 30       	cpi	r22, 0x02	; 2
    146c:	71 05       	cpc	r23, r1
    146e:	71 f2       	breq	.-100    	; 0x140c <VL53L0X_SetLimitCheckEnable+0x62>
    1470:	40 f4       	brcc	.+16     	; 0x1482 <VL53L0X_SetLimitCheckEnable+0xd8>
    1472:	20 97       	sbiw	r28, 0x00	; 0
    1474:	09 f4       	brne	.+2      	; 0x1478 <VL53L0X_SetLimitCheckEnable+0xce>
    1476:	b7 cf       	rjmp	.-146    	; 0x13e6 <VL53L0X_SetLimitCheckEnable+0x3c>
    1478:	61 30       	cpi	r22, 0x01	; 1
    147a:	71 05       	cpc	r23, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <VL53L0X_SetLimitCheckEnable+0xd6>
    147e:	b6 cf       	rjmp	.-148    	; 0x13ec <VL53L0X_SetLimitCheckEnable+0x42>
    1480:	ea cf       	rjmp	.-44     	; 0x1456 <VL53L0X_SetLimitCheckEnable+0xac>
    1482:	64 30       	cpi	r22, 0x04	; 4
    1484:	71 05       	cpc	r23, r1
    1486:	41 f2       	breq	.-112    	; 0x1418 <VL53L0X_SetLimitCheckEnable+0x6e>
    1488:	20 f2       	brcs	.-120    	; 0x1412 <VL53L0X_SetLimitCheckEnable+0x68>
    148a:	65 30       	cpi	r22, 0x05	; 5
    148c:	71 05       	cpc	r23, r1
    148e:	59 f2       	breq	.-106    	; 0x1426 <VL53L0X_SetLimitCheckEnable+0x7c>
    1490:	e2 cf       	rjmp	.-60     	; 0x1456 <VL53L0X_SetLimitCheckEnable+0xac>
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	1f 91       	pop	r17
    1498:	ff 90       	pop	r15
    149a:	ef 90       	pop	r14
    149c:	bf 90       	pop	r11
    149e:	af 90       	pop	r10
    14a0:	9f 90       	pop	r9
    14a2:	8f 90       	pop	r8
    14a4:	08 95       	ret

000014a6 <VL53L0X_GetLimitCheckEnable>:
    14a6:	66 30       	cpi	r22, 0x06	; 6
    14a8:	71 05       	cpc	r23, r1
    14aa:	20 f0       	brcs	.+8      	; 0x14b4 <VL53L0X_GetLimitCheckEnable+0xe>
    14ac:	fa 01       	movw	r30, r20
    14ae:	10 82       	st	Z, r1
    14b0:	8c ef       	ldi	r24, 0xFC	; 252
    14b2:	08 95       	ret
    14b4:	fc 01       	movw	r30, r24
    14b6:	e6 0f       	add	r30, r22
    14b8:	f7 1f       	adc	r31, r23
    14ba:	85 a1       	ldd	r24, Z+37	; 0x25
    14bc:	fa 01       	movw	r30, r20
    14be:	80 83       	st	Z, r24
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	08 95       	ret

000014c4 <VL53L0X_SetLimitCheckValue>:
    14c4:	cf 92       	push	r12
    14c6:	df 92       	push	r13
    14c8:	ef 92       	push	r14
    14ca:	ff 92       	push	r15
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	fc 01       	movw	r30, r24
    14d6:	e6 0f       	add	r30, r22
    14d8:	f7 1f       	adc	r31, r23
    14da:	e5 a1       	ldd	r30, Z+37	; 0x25
    14dc:	e1 11       	cpse	r30, r1
    14de:	0d c0       	rjmp	.+26     	; 0x14fa <VL53L0X_SetLimitCheckValue+0x36>
    14e0:	66 0f       	add	r22, r22
    14e2:	77 1f       	adc	r23, r23
    14e4:	66 0f       	add	r22, r22
    14e6:	77 1f       	adc	r23, r23
    14e8:	ec 01       	movw	r28, r24
    14ea:	c6 0f       	add	r28, r22
    14ec:	d7 1f       	adc	r29, r23
    14ee:	29 ab       	std	Y+49, r18	; 0x31
    14f0:	3a ab       	std	Y+50, r19	; 0x32
    14f2:	4b ab       	std	Y+51, r20	; 0x33
    14f4:	5c ab       	std	Y+52, r21	; 0x34
    14f6:	80 e0       	ldi	r24, 0x00	; 0
    14f8:	56 c0       	rjmp	.+172    	; 0x15a6 <VL53L0X_SetLimitCheckValue+0xe2>
    14fa:	69 01       	movw	r12, r18
    14fc:	7a 01       	movw	r14, r20
    14fe:	eb 01       	movw	r28, r22
    1500:	8c 01       	movw	r16, r24
    1502:	62 30       	cpi	r22, 0x02	; 2
    1504:	71 05       	cpc	r23, r1
    1506:	19 f1       	breq	.+70     	; 0x154e <VL53L0X_SetLimitCheckValue+0x8a>
    1508:	30 f4       	brcc	.+12     	; 0x1516 <VL53L0X_SetLimitCheckValue+0x52>
    150a:	20 97       	sbiw	r28, 0x00	; 0
    150c:	59 f0       	breq	.+22     	; 0x1524 <VL53L0X_SetLimitCheckValue+0x60>
    150e:	61 30       	cpi	r22, 0x01	; 1
    1510:	71 05       	cpc	r23, r1
    1512:	71 f0       	breq	.+28     	; 0x1530 <VL53L0X_SetLimitCheckValue+0x6c>
    1514:	38 c0       	rjmp	.+112    	; 0x1586 <VL53L0X_SetLimitCheckValue+0xc2>
    1516:	63 30       	cpi	r22, 0x03	; 3
    1518:	71 05       	cpc	r23, r1
    151a:	f9 f0       	breq	.+62     	; 0x155a <VL53L0X_SetLimitCheckValue+0x96>
    151c:	66 30       	cpi	r22, 0x06	; 6
    151e:	71 05       	cpc	r23, r1
    1520:	18 f1       	brcs	.+70     	; 0x1568 <VL53L0X_SetLimitCheckValue+0xa4>
    1522:	31 c0       	rjmp	.+98     	; 0x1586 <VL53L0X_SetLimitCheckValue+0xc2>
    1524:	fc 01       	movw	r30, r24
    1526:	21 ab       	std	Z+49, r18	; 0x31
    1528:	32 ab       	std	Z+50, r19	; 0x32
    152a:	43 ab       	std	Z+51, r20	; 0x33
    152c:	54 ab       	std	Z+52, r21	; 0x34
    152e:	2e c0       	rjmp	.+92     	; 0x158c <VL53L0X_SetLimitCheckValue+0xc8>
    1530:	ba 01       	movw	r22, r20
    1532:	a9 01       	movw	r20, r18
    1534:	03 2e       	mov	r0, r19
    1536:	39 e0       	ldi	r19, 0x09	; 9
    1538:	76 95       	lsr	r23
    153a:	67 95       	ror	r22
    153c:	57 95       	ror	r21
    153e:	47 95       	ror	r20
    1540:	3a 95       	dec	r19
    1542:	d1 f7       	brne	.-12     	; 0x1538 <VL53L0X_SetLimitCheckValue+0x74>
    1544:	30 2d       	mov	r19, r0
    1546:	64 e4       	ldi	r22, 0x44	; 68
    1548:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <VL53L0X_WrWord>
    154c:	1d c0       	rjmp	.+58     	; 0x1588 <VL53L0X_SetLimitCheckValue+0xc4>
    154e:	fc 01       	movw	r30, r24
    1550:	21 af       	std	Z+57, r18	; 0x39
    1552:	32 af       	std	Z+58, r19	; 0x3a
    1554:	43 af       	std	Z+59, r20	; 0x3b
    1556:	54 af       	std	Z+60, r21	; 0x3c
    1558:	19 c0       	rjmp	.+50     	; 0x158c <VL53L0X_SetLimitCheckValue+0xc8>
    155a:	fc 01       	movw	r30, r24
    155c:	fd 96       	adiw	r30, 0x3d	; 61
    155e:	20 83       	st	Z, r18
    1560:	31 83       	std	Z+1, r19	; 0x01
    1562:	42 83       	std	Z+2, r20	; 0x02
    1564:	53 83       	std	Z+3, r21	; 0x03
    1566:	12 c0       	rjmp	.+36     	; 0x158c <VL53L0X_SetLimitCheckValue+0xc8>
    1568:	ba 01       	movw	r22, r20
    156a:	a9 01       	movw	r20, r18
    156c:	03 2e       	mov	r0, r19
    156e:	39 e0       	ldi	r19, 0x09	; 9
    1570:	76 95       	lsr	r23
    1572:	67 95       	ror	r22
    1574:	57 95       	ror	r21
    1576:	47 95       	ror	r20
    1578:	3a 95       	dec	r19
    157a:	d1 f7       	brne	.-12     	; 0x1570 <VL53L0X_SetLimitCheckValue+0xac>
    157c:	30 2d       	mov	r19, r0
    157e:	64 e6       	ldi	r22, 0x64	; 100
    1580:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <VL53L0X_WrWord>
    1584:	01 c0       	rjmp	.+2      	; 0x1588 <VL53L0X_SetLimitCheckValue+0xc4>
    1586:	8c ef       	ldi	r24, 0xFC	; 252
    1588:	81 11       	cpse	r24, r1
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <VL53L0X_SetLimitCheckValue+0xe2>
    158c:	be 01       	movw	r22, r28
    158e:	66 0f       	add	r22, r22
    1590:	77 1f       	adc	r23, r23
    1592:	66 0f       	add	r22, r22
    1594:	77 1f       	adc	r23, r23
    1596:	e8 01       	movw	r28, r16
    1598:	c6 0f       	add	r28, r22
    159a:	d7 1f       	adc	r29, r23
    159c:	c9 aa       	std	Y+49, r12	; 0x31
    159e:	da aa       	std	Y+50, r13	; 0x32
    15a0:	eb aa       	std	Y+51, r14	; 0x33
    15a2:	fc aa       	std	Y+52, r15	; 0x34
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	df 91       	pop	r29
    15a8:	cf 91       	pop	r28
    15aa:	1f 91       	pop	r17
    15ac:	0f 91       	pop	r16
    15ae:	ff 90       	pop	r15
    15b0:	ef 90       	pop	r14
    15b2:	df 90       	pop	r13
    15b4:	cf 90       	pop	r12
    15b6:	08 95       	ret

000015b8 <VL53L0X_GetLimitCheckValue>:
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	cf 93       	push	r28
    15c2:	df 93       	push	r29
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <VL53L0X_GetLimitCheckValue+0xe>
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	8c 01       	movw	r16, r24
    15cc:	7a 01       	movw	r14, r20
    15ce:	62 30       	cpi	r22, 0x02	; 2
    15d0:	71 05       	cpc	r23, r1
    15d2:	51 f1       	breq	.+84     	; 0x1628 <VL53L0X_GetLimitCheckValue+0x70>
    15d4:	38 f4       	brcc	.+14     	; 0x15e4 <VL53L0X_GetLimitCheckValue+0x2c>
    15d6:	61 15       	cp	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	59 f0       	breq	.+22     	; 0x15f2 <VL53L0X_GetLimitCheckValue+0x3a>
    15dc:	61 30       	cpi	r22, 0x01	; 1
    15de:	71 05       	cpc	r23, r1
    15e0:	71 f0       	breq	.+28     	; 0x15fe <VL53L0X_GetLimitCheckValue+0x46>
    15e2:	59 c0       	rjmp	.+178    	; 0x1696 <VL53L0X_GetLimitCheckValue+0xde>
    15e4:	63 30       	cpi	r22, 0x03	; 3
    15e6:	71 05       	cpc	r23, r1
    15e8:	29 f1       	breq	.+74     	; 0x1634 <VL53L0X_GetLimitCheckValue+0x7c>
    15ea:	66 30       	cpi	r22, 0x06	; 6
    15ec:	71 05       	cpc	r23, r1
    15ee:	48 f1       	brcs	.+82     	; 0x1642 <VL53L0X_GetLimitCheckValue+0x8a>
    15f0:	52 c0       	rjmp	.+164    	; 0x1696 <VL53L0X_GetLimitCheckValue+0xde>
    15f2:	fc 01       	movw	r30, r24
    15f4:	81 a9       	ldd	r24, Z+49	; 0x31
    15f6:	92 a9       	ldd	r25, Z+50	; 0x32
    15f8:	a3 a9       	ldd	r26, Z+51	; 0x33
    15fa:	b4 a9       	ldd	r27, Z+52	; 0x34
    15fc:	4e c0       	rjmp	.+156    	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    15fe:	ae 01       	movw	r20, r28
    1600:	4f 5f       	subi	r20, 0xFF	; 255
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	64 e4       	ldi	r22, 0x44	; 68
    1606:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    160a:	81 11       	cpse	r24, r1
    160c:	4c c0       	rjmp	.+152    	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    160e:	99 81       	ldd	r25, Y+1	; 0x01
    1610:	40 e0       	ldi	r20, 0x00	; 0
    1612:	50 e0       	ldi	r21, 0x00	; 0
    1614:	59 2f       	mov	r21, r25
    1616:	55 0f       	add	r21, r21
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	70 e0       	ldi	r23, 0x00	; 0
    161c:	41 15       	cp	r20, r1
    161e:	51 05       	cpc	r21, r1
    1620:	61 05       	cpc	r22, r1
    1622:	71 05       	cpc	r23, r1
    1624:	f1 f0       	breq	.+60     	; 0x1662 <VL53L0X_GetLimitCheckValue+0xaa>
    1626:	2a c0       	rjmp	.+84     	; 0x167c <VL53L0X_GetLimitCheckValue+0xc4>
    1628:	fc 01       	movw	r30, r24
    162a:	81 ad       	ldd	r24, Z+57	; 0x39
    162c:	92 ad       	ldd	r25, Z+58	; 0x3a
    162e:	a3 ad       	ldd	r26, Z+59	; 0x3b
    1630:	b4 ad       	ldd	r27, Z+60	; 0x3c
    1632:	33 c0       	rjmp	.+102    	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    1634:	fc 01       	movw	r30, r24
    1636:	fd 96       	adiw	r30, 0x3d	; 61
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	a2 81       	ldd	r26, Z+2	; 0x02
    163e:	b3 81       	ldd	r27, Z+3	; 0x03
    1640:	2c c0       	rjmp	.+88     	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    1642:	ae 01       	movw	r20, r28
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	64 e6       	ldi	r22, 0x64	; 100
    164a:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    164e:	81 11       	cpse	r24, r1
    1650:	2a c0       	rjmp	.+84     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    1652:	29 81       	ldd	r18, Y+1	; 0x01
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	92 2f       	mov	r25, r18
    165a:	99 0f       	add	r25, r25
    165c:	a0 e0       	ldi	r26, 0x00	; 0
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	1c c0       	rjmp	.+56     	; 0x169a <VL53L0X_GetLimitCheckValue+0xe2>
    1662:	f8 01       	movw	r30, r16
    1664:	45 a9       	ldd	r20, Z+53	; 0x35
    1666:	56 a9       	ldd	r21, Z+54	; 0x36
    1668:	67 a9       	ldd	r22, Z+55	; 0x37
    166a:	70 ad       	ldd	r23, Z+56	; 0x38
    166c:	f7 01       	movw	r30, r14
    166e:	40 83       	st	Z, r20
    1670:	51 83       	std	Z+1, r21	; 0x01
    1672:	62 83       	std	Z+2, r22	; 0x02
    1674:	73 83       	std	Z+3, r23	; 0x03
    1676:	f8 01       	movw	r30, r16
    1678:	16 a2       	std	Z+38, r1	; 0x26
    167a:	15 c0       	rjmp	.+42     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    167c:	f7 01       	movw	r30, r14
    167e:	40 83       	st	Z, r20
    1680:	51 83       	std	Z+1, r21	; 0x01
    1682:	62 83       	std	Z+2, r22	; 0x02
    1684:	73 83       	std	Z+3, r23	; 0x03
    1686:	f8 01       	movw	r30, r16
    1688:	45 ab       	std	Z+53, r20	; 0x35
    168a:	56 ab       	std	Z+54, r21	; 0x36
    168c:	67 ab       	std	Z+55, r22	; 0x37
    168e:	70 af       	std	Z+56, r23	; 0x38
    1690:	91 e0       	ldi	r25, 0x01	; 1
    1692:	96 a3       	std	Z+38, r25	; 0x26
    1694:	08 c0       	rjmp	.+16     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    1696:	8c ef       	ldi	r24, 0xFC	; 252
    1698:	06 c0       	rjmp	.+12     	; 0x16a6 <VL53L0X_GetLimitCheckValue+0xee>
    169a:	f7 01       	movw	r30, r14
    169c:	80 83       	st	Z, r24
    169e:	91 83       	std	Z+1, r25	; 0x01
    16a0:	a2 83       	std	Z+2, r26	; 0x02
    16a2:	b3 83       	std	Z+3, r27	; 0x03
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	1f 91       	pop	r17
    16b0:	0f 91       	pop	r16
    16b2:	ff 90       	pop	r15
    16b4:	ef 90       	pop	r14
    16b6:	08 95       	ret

000016b8 <VL53L0X_GetWrapAroundCheckEnable>:
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	cf 93       	push	r28
    16c2:	df 93       	push	r29
    16c4:	1f 92       	push	r1
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	8c 01       	movw	r16, r24
    16cc:	7b 01       	movw	r14, r22
    16ce:	ae 01       	movw	r20, r28
    16d0:	4f 5f       	subi	r20, 0xFF	; 255
    16d2:	5f 4f       	sbci	r21, 0xFF	; 255
    16d4:	61 e0       	ldi	r22, 0x01	; 1
    16d6:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    16da:	81 11       	cpse	r24, r1
    16dc:	13 c0       	rjmp	.+38     	; 0x1704 <VL53L0X_GetWrapAroundCheckEnable+0x4c>
    16de:	99 81       	ldd	r25, Y+1	; 0x01
    16e0:	f8 01       	movw	r30, r16
    16e2:	e3 5e       	subi	r30, 0xE3	; 227
    16e4:	fe 4f       	sbci	r31, 0xFE	; 254
    16e6:	90 83       	st	Z, r25
    16e8:	99 23       	and	r25, r25
    16ea:	24 f4       	brge	.+8      	; 0x16f4 <VL53L0X_GetWrapAroundCheckEnable+0x3c>
    16ec:	91 e0       	ldi	r25, 0x01	; 1
    16ee:	f7 01       	movw	r30, r14
    16f0:	90 83       	st	Z, r25
    16f2:	02 c0       	rjmp	.+4      	; 0x16f8 <VL53L0X_GetWrapAroundCheckEnable+0x40>
    16f4:	f7 01       	movw	r30, r14
    16f6:	10 82       	st	Z, r1
    16f8:	f7 01       	movw	r30, r14
    16fa:	90 81       	ld	r25, Z
    16fc:	f8 01       	movw	r30, r16
    16fe:	e7 5b       	subi	r30, 0xB7	; 183
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	90 83       	st	Z, r25
    1704:	0f 90       	pop	r0
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	08 95       	ret

00001714 <VL53L0X_GetDeviceParameters>:
    1714:	8f 92       	push	r8
    1716:	9f 92       	push	r9
    1718:	af 92       	push	r10
    171a:	bf 92       	push	r11
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	cf 93       	push	r28
    172a:	df 93       	push	r29
    172c:	ec 01       	movw	r28, r24
    172e:	7b 01       	movw	r14, r22
    1730:	88 89       	ldd	r24, Y+16	; 0x10
    1732:	fb 01       	movw	r30, r22
    1734:	80 83       	st	Z, r24
    1736:	6a 5f       	subi	r22, 0xFA	; 250
    1738:	7f 4f       	sbci	r23, 0xFF	; 255
    173a:	ce 01       	movw	r24, r28
    173c:	a2 dd       	rcall	.-1212   	; 0x1282 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
    173e:	81 11       	cpse	r24, r1
    1740:	33 c0       	rjmp	.+102    	; 0x17a8 <VL53L0X_GetDeviceParameters+0x94>
    1742:	f7 01       	movw	r30, r14
    1744:	12 86       	std	Z+10, r1	; 0x0a
    1746:	b7 01       	movw	r22, r14
    1748:	63 5f       	subi	r22, 0xF3	; 243
    174a:	7f 4f       	sbci	r23, 0xFF	; 255
    174c:	ce 01       	movw	r24, r28
    174e:	eb dd       	rcall	.-1066   	; 0x1326 <VL53L0X_GetXTalkCompensationRateMegaCps>
    1750:	81 11       	cpse	r24, r1
    1752:	39 c0       	rjmp	.+114    	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    1754:	b7 01       	movw	r22, r14
    1756:	6f 5e       	subi	r22, 0xEF	; 239
    1758:	7f 4f       	sbci	r23, 0xFF	; 255
    175a:	ce 01       	movw	r24, r28
    175c:	a6 d6       	rcall	.+3404   	; 0x24aa <VL53L0X_get_offset_calibration_data_micro_meter>
    175e:	81 11       	cpse	r24, r1
    1760:	32 c0       	rjmp	.+100    	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    1762:	87 01       	movw	r16, r14
    1764:	0f 5d       	subi	r16, 0xDF	; 223
    1766:	1f 4f       	sbci	r17, 0xFF	; 255
    1768:	5e 01       	movw	r10, r28
    176a:	f5 e2       	ldi	r31, 0x25	; 37
    176c:	af 0e       	add	r10, r31
    176e:	b1 1c       	adc	r11, r1
    1770:	67 01       	movw	r12, r14
    1772:	85 e1       	ldi	r24, 0x15	; 21
    1774:	c8 0e       	add	r12, r24
    1776:	d1 1c       	adc	r13, r1
    1778:	81 2c       	mov	r8, r1
    177a:	91 2c       	mov	r9, r1
    177c:	a8 01       	movw	r20, r16
    177e:	b4 01       	movw	r22, r8
    1780:	ce 01       	movw	r24, r28
    1782:	1a df       	rcall	.-460    	; 0x15b8 <VL53L0X_GetLimitCheckValue>
    1784:	81 11       	cpse	r24, r1
    1786:	1f c0       	rjmp	.+62     	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    1788:	f5 01       	movw	r30, r10
    178a:	81 91       	ld	r24, Z+
    178c:	5f 01       	movw	r10, r30
    178e:	f6 01       	movw	r30, r12
    1790:	81 93       	st	Z+, r24
    1792:	6f 01       	movw	r12, r30
    1794:	ff ef       	ldi	r31, 0xFF	; 255
    1796:	8f 1a       	sub	r8, r31
    1798:	9f 0a       	sbc	r9, r31
    179a:	0c 5f       	subi	r16, 0xFC	; 252
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	86 e0       	ldi	r24, 0x06	; 6
    17a0:	88 16       	cp	r8, r24
    17a2:	91 04       	cpc	r9, r1
    17a4:	59 f7       	brne	.-42     	; 0x177c <VL53L0X_GetDeviceParameters+0x68>
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <VL53L0X_GetDeviceParameters+0x98>
    17a8:	81 11       	cpse	r24, r1
    17aa:	0d c0       	rjmp	.+26     	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    17ac:	b7 01       	movw	r22, r14
    17ae:	67 5c       	subi	r22, 0xC7	; 199
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	ce 01       	movw	r24, r28
    17b4:	81 df       	rcall	.-254    	; 0x16b8 <VL53L0X_GetWrapAroundCheckEnable>
    17b6:	81 11       	cpse	r24, r1
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <VL53L0X_GetDeviceParameters+0xb2>
    17ba:	b7 01       	movw	r22, r14
    17bc:	6e 5f       	subi	r22, 0xFE	; 254
    17be:	7f 4f       	sbci	r23, 0xFF	; 255
    17c0:	ce 01       	movw	r24, r28
    17c2:	0e 94 11 21 	call	0x4222	; 0x4222 <VL53L0X_get_measurement_timing_budget_micro_seconds>
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	ff 90       	pop	r15
    17d0:	ef 90       	pop	r14
    17d2:	df 90       	pop	r13
    17d4:	cf 90       	pop	r12
    17d6:	bf 90       	pop	r11
    17d8:	af 90       	pop	r10
    17da:	9f 90       	pop	r9
    17dc:	8f 90       	pop	r8
    17de:	08 95       	ret

000017e0 <VL53L0X_DataInit>:
    17e0:	ef 92       	push	r14
    17e2:	ff 92       	push	r15
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	cf 93       	push	r28
    17ea:	df 93       	push	r29
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
    17f0:	ec 97       	sbiw	r28, 0x3c	; 60
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	8c 01       	movw	r16, r24
    17fe:	21 e0       	ldi	r18, 0x01	; 1
    1800:	4e ef       	ldi	r20, 0xFE	; 254
    1802:	69 e8       	ldi	r22, 0x89	; 137
    1804:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <VL53L0X_UpdateByte>
    1808:	81 11       	cpse	r24, r1
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <VL53L0X_DataInit+0x36>
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	68 e8       	ldi	r22, 0x88	; 136
    1810:	c8 01       	movw	r24, r16
    1812:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1816:	ae 01       	movw	r20, r28
    1818:	44 5c       	subi	r20, 0xC4	; 196
    181a:	5f 4f       	sbci	r21, 0xFF	; 255
    181c:	60 ec       	ldi	r22, 0xC0	; 192
    181e:	c8 01       	movw	r24, r16
    1820:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    1824:	f8 01       	movw	r30, r16
    1826:	e1 52       	subi	r30, 0x21	; 33
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	10 82       	st	Z, r1
    182c:	88 ee       	ldi	r24, 0xE8	; 232
    182e:	93 e0       	ldi	r25, 0x03	; 3
    1830:	e6 5a       	subi	r30, 0xA6	; 166
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	80 e9       	ldi	r24, 0x90	; 144
    183a:	91 e0       	ldi	r25, 0x01	; 1
    183c:	32 96       	adiw	r30, 0x02	; 2
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
    1842:	85 e8       	ldi	r24, 0x85	; 133
    1844:	9b e6       	ldi	r25, 0x6B	; 107
    1846:	a1 e0       	ldi	r26, 0x01	; 1
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	32 96       	adiw	r30, 0x02	; 2
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
    1854:	84 ea       	ldi	r24, 0xA4	; 164
    1856:	90 e7       	ldi	r25, 0x70	; 112
    1858:	a9 e0       	ldi	r26, 0x09	; 9
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 57       	subi	r30, 0x75	; 117
    185e:	f1 09       	sbc	r31, r1
    1860:	80 83       	st	Z, r24
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	a2 83       	std	Z+2, r26	; 0x02
    1866:	b3 83       	std	Z+3, r27	; 0x03
    1868:	f8 01       	movw	r30, r16
    186a:	15 8e       	std	Z+29, r1	; 0x1d
    186c:	16 8e       	std	Z+30, r1	; 0x1e
    186e:	17 8e       	std	Z+31, r1	; 0x1f
    1870:	10 a2       	std	Z+32, r1	; 0x20
    1872:	be 01       	movw	r22, r28
    1874:	6f 5f       	subi	r22, 0xFF	; 255
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
    1878:	c8 01       	movw	r24, r16
    187a:	4c df       	rcall	.-360    	; 0x1714 <VL53L0X_GetDeviceParameters>
    187c:	f8 2e       	mov	r15, r24
    187e:	81 11       	cpse	r24, r1
    1880:	0b c0       	rjmp	.+22     	; 0x1898 <VL53L0X_DataInit+0xb8>
    1882:	19 82       	std	Y+1, r1	; 0x01
    1884:	1a 82       	std	Y+2, r1	; 0x02
    1886:	8a e3       	ldi	r24, 0x3A	; 58
    1888:	fe 01       	movw	r30, r28
    188a:	31 96       	adiw	r30, 0x01	; 1
    188c:	d8 01       	movw	r26, r16
    188e:	50 96       	adiw	r26, 0x10	; 16
    1890:	01 90       	ld	r0, Z+
    1892:	0d 92       	st	X+, r0
    1894:	8a 95       	dec	r24
    1896:	e1 f7       	brne	.-8      	; 0x1890 <VL53L0X_DataInit+0xb0>
    1898:	84 e6       	ldi	r24, 0x64	; 100
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	f8 01       	movw	r30, r16
    189e:	ef 5d       	subi	r30, 0xDF	; 223
    18a0:	fe 4f       	sbci	r31, 0xFE	; 254
    18a2:	91 83       	std	Z+1, r25	; 0x01
    18a4:	80 83       	st	Z, r24
    18a6:	84 e8       	ldi	r24, 0x84	; 132
    18a8:	93 e0       	ldi	r25, 0x03	; 3
    18aa:	32 96       	adiw	r30, 0x02	; 2
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
    18b0:	84 ef       	ldi	r24, 0xF4	; 244
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	32 96       	adiw	r30, 0x02	; 2
    18b6:	91 83       	std	Z+1, r25	; 0x01
    18b8:	80 83       	st	Z, r24
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	9a e0       	ldi	r25, 0x0A	; 10
    18be:	33 96       	adiw	r30, 0x03	; 3
    18c0:	91 83       	std	Z+1, r25	; 0x01
    18c2:	80 83       	st	Z, r24
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	70 96       	adiw	r30, 0x10	; 16
    18c8:	80 83       	st	Z, r24
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	60 e8       	ldi	r22, 0x80	; 128
    18ce:	c8 01       	movw	r24, r16
    18d0:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    18d4:	e8 2e       	mov	r14, r24
    18d6:	41 e0       	ldi	r20, 0x01	; 1
    18d8:	6f ef       	ldi	r22, 0xFF	; 255
    18da:	c8 01       	movw	r24, r16
    18dc:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    18e0:	8e 29       	or	r24, r14
    18e2:	f8 2a       	or	r15, r24
    18e4:	40 e0       	ldi	r20, 0x00	; 0
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	c8 01       	movw	r24, r16
    18ea:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    18ee:	f8 2a       	or	r15, r24
    18f0:	ae 01       	movw	r20, r28
    18f2:	45 5c       	subi	r20, 0xC5	; 197
    18f4:	5f 4f       	sbci	r21, 0xFF	; 255
    18f6:	61 e9       	ldi	r22, 0x91	; 145
    18f8:	c8 01       	movw	r24, r16
    18fa:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    18fe:	f8 2a       	or	r15, r24
    1900:	8b ad       	ldd	r24, Y+59	; 0x3b
    1902:	f8 01       	movw	r30, r16
    1904:	e9 5d       	subi	r30, 0xD9	; 217
    1906:	fe 4f       	sbci	r31, 0xFE	; 254
    1908:	80 83       	st	Z, r24
    190a:	41 e0       	ldi	r20, 0x01	; 1
    190c:	60 e0       	ldi	r22, 0x00	; 0
    190e:	c8 01       	movw	r24, r16
    1910:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1914:	f8 2a       	or	r15, r24
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	6f ef       	ldi	r22, 0xFF	; 255
    191a:	c8 01       	movw	r24, r16
    191c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1920:	f8 2a       	or	r15, r24
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	60 e8       	ldi	r22, 0x80	; 128
    1926:	c8 01       	movw	r24, r16
    1928:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    192c:	8f 29       	or	r24, r15
    192e:	09 f4       	brne	.+2      	; 0x1932 <VL53L0X_DataInit+0x152>
    1930:	69 c0       	rjmp	.+210    	; 0x1a04 <VL53L0X_DataInit+0x224>
    1932:	14 c0       	rjmp	.+40     	; 0x195c <VL53L0X_DataInit+0x17c>
    1934:	81 11       	cpse	r24, r1
    1936:	12 c0       	rjmp	.+36     	; 0x195c <VL53L0X_DataInit+0x17c>
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	b7 01       	movw	r22, r14
    193c:	c8 01       	movw	r24, r16
    193e:	35 dd       	rcall	.-1430   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1940:	ff ef       	ldi	r31, 0xFF	; 255
    1942:	ef 1a       	sub	r14, r31
    1944:	ff 0a       	sbc	r15, r31
    1946:	96 e0       	ldi	r25, 0x06	; 6
    1948:	e9 16       	cp	r14, r25
    194a:	f1 04       	cpc	r15, r1
    194c:	99 f7       	brne	.-26     	; 0x1934 <VL53L0X_DataInit+0x154>
    194e:	81 11       	cpse	r24, r1
    1950:	1a c0       	rjmp	.+52     	; 0x1986 <VL53L0X_DataInit+0x1a6>
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	70 e0       	ldi	r23, 0x00	; 0
    1958:	c8 01       	movw	r24, r16
    195a:	27 dd       	rcall	.-1458   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    195c:	81 11       	cpse	r24, r1
    195e:	1d c0       	rjmp	.+58     	; 0x199a <VL53L0X_DataInit+0x1ba>
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	63 e0       	ldi	r22, 0x03	; 3
    1964:	70 e0       	ldi	r23, 0x00	; 0
    1966:	c8 01       	movw	r24, r16
    1968:	20 dd       	rcall	.-1472   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    196a:	81 11       	cpse	r24, r1
    196c:	20 c0       	rjmp	.+64     	; 0x19ae <VL53L0X_DataInit+0x1ce>
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	64 e0       	ldi	r22, 0x04	; 4
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	c8 01       	movw	r24, r16
    1976:	19 dd       	rcall	.-1486   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1978:	81 11       	cpse	r24, r1
    197a:	23 c0       	rjmp	.+70     	; 0x19c2 <VL53L0X_DataInit+0x1e2>
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	65 e0       	ldi	r22, 0x05	; 5
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	c8 01       	movw	r24, r16
    1984:	12 dd       	rcall	.-1500   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1986:	81 11       	cpse	r24, r1
    1988:	25 c0       	rjmp	.+74     	; 0x19d4 <VL53L0X_DataInit+0x1f4>
    198a:	20 e0       	ldi	r18, 0x00	; 0
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	42 e1       	ldi	r20, 0x12	; 18
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	c8 01       	movw	r24, r16
    1998:	95 dd       	rcall	.-1238   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    199a:	81 11       	cpse	r24, r1
    199c:	2c c0       	rjmp	.+88     	; 0x19f6 <VL53L0X_DataInit+0x216>
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e4       	ldi	r19, 0x40	; 64
    19a2:	40 e0       	ldi	r20, 0x00	; 0
    19a4:	50 e0       	ldi	r21, 0x00	; 0
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	c8 01       	movw	r24, r16
    19ac:	8b dd       	rcall	.-1258   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    19ae:	81 11       	cpse	r24, r1
    19b0:	32 c0       	rjmp	.+100    	; 0x1a16 <VL53L0X_DataInit+0x236>
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	43 e2       	ldi	r20, 0x23	; 35
    19b8:	50 e0       	ldi	r21, 0x00	; 0
    19ba:	62 e0       	ldi	r22, 0x02	; 2
    19bc:	70 e0       	ldi	r23, 0x00	; 0
    19be:	c8 01       	movw	r24, r16
    19c0:	81 dd       	rcall	.-1278   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    19c2:	81 11       	cpse	r24, r1
    19c4:	28 c0       	rjmp	.+80     	; 0x1a16 <VL53L0X_DataInit+0x236>
    19c6:	20 e0       	ldi	r18, 0x00	; 0
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	a9 01       	movw	r20, r18
    19cc:	63 e0       	ldi	r22, 0x03	; 3
    19ce:	70 e0       	ldi	r23, 0x00	; 0
    19d0:	c8 01       	movw	r24, r16
    19d2:	78 dd       	rcall	.-1296   	; 0x14c4 <VL53L0X_SetLimitCheckValue>
    19d4:	81 11       	cpse	r24, r1
    19d6:	1f c0       	rjmp	.+62     	; 0x1a16 <VL53L0X_DataInit+0x236>
    19d8:	8f ef       	ldi	r24, 0xFF	; 255
    19da:	f8 01       	movw	r30, r16
    19dc:	e3 5e       	subi	r30, 0xE3	; 227
    19de:	fe 4f       	sbci	r31, 0xFE	; 254
    19e0:	80 83       	st	Z, r24
    19e2:	4f ef       	ldi	r20, 0xFF	; 255
    19e4:	61 e0       	ldi	r22, 0x01	; 1
    19e6:	c8 01       	movw	r24, r16
    19e8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	f8 01       	movw	r30, r16
    19f0:	e1 5e       	subi	r30, 0xE1	; 225
    19f2:	fe 4f       	sbci	r31, 0xFE	; 254
    19f4:	90 83       	st	Z, r25
    19f6:	81 11       	cpse	r24, r1
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <VL53L0X_DataInit+0x236>
    19fa:	f8 01       	movw	r30, r16
    19fc:	ec 5f       	subi	r30, 0xFC	; 252
    19fe:	fe 4f       	sbci	r31, 0xFE	; 254
    1a00:	10 82       	st	Z, r1
    1a02:	09 c0       	rjmp	.+18     	; 0x1a16 <VL53L0X_DataInit+0x236>
    1a04:	41 e0       	ldi	r20, 0x01	; 1
    1a06:	60 e0       	ldi	r22, 0x00	; 0
    1a08:	70 e0       	ldi	r23, 0x00	; 0
    1a0a:	c8 01       	movw	r24, r16
    1a0c:	ce dc       	rcall	.-1636   	; 0x13aa <VL53L0X_SetLimitCheckEnable>
    1a0e:	ee 24       	eor	r14, r14
    1a10:	e3 94       	inc	r14
    1a12:	f1 2c       	mov	r15, r1
    1a14:	8f cf       	rjmp	.-226    	; 0x1934 <VL53L0X_DataInit+0x154>
    1a16:	ec 96       	adiw	r28, 0x3c	; 60
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	f8 94       	cli
    1a1c:	de bf       	out	0x3e, r29	; 62
    1a1e:	0f be       	out	0x3f, r0	; 63
    1a20:	cd bf       	out	0x3d, r28	; 61
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	0f 91       	pop	r16
    1a2a:	ff 90       	pop	r15
    1a2c:	ef 90       	pop	r14
    1a2e:	08 95       	ret

00001a30 <VL53L0X_PerformRefCalibration>:
    1a30:	21 e0       	ldi	r18, 0x01	; 1
    1a32:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <VL53L0X_perform_ref_calibration>
    1a36:	08 95       	ret

00001a38 <VL53L0X_GetRangingMeasurementData>:
    1a38:	2f 92       	push	r2
    1a3a:	3f 92       	push	r3
    1a3c:	4f 92       	push	r4
    1a3e:	5f 92       	push	r5
    1a40:	6f 92       	push	r6
    1a42:	7f 92       	push	r7
    1a44:	8f 92       	push	r8
    1a46:	9f 92       	push	r9
    1a48:	af 92       	push	r10
    1a4a:	bf 92       	push	r11
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
    1a60:	a6 97       	sbiw	r28, 0x26	; 38
    1a62:	0f b6       	in	r0, 0x3f	; 63
    1a64:	f8 94       	cli
    1a66:	de bf       	out	0x3e, r29	; 62
    1a68:	0f be       	out	0x3f, r0	; 63
    1a6a:	cd bf       	out	0x3d, r28	; 61
    1a6c:	4c 01       	movw	r8, r24
    1a6e:	5b 01       	movw	r10, r22
    1a70:	0c e0       	ldi	r16, 0x0C	; 12
    1a72:	10 e0       	ldi	r17, 0x00	; 0
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	ae 01       	movw	r20, r28
    1a7a:	4e 5f       	subi	r20, 0xFE	; 254
    1a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7e:	64 e1       	ldi	r22, 0x14	; 20
    1a80:	0e 94 cd 2b 	call	0x579a	; 0x579a <VL53L0X_ReadMulti>
    1a84:	81 11       	cpse	r24, r1
    1a86:	fb c0       	rjmp	.+502    	; 0x1c7e <VL53L0X_GetRangingMeasurementData+0x246>
    1a88:	d5 01       	movw	r26, r10
    1a8a:	56 96       	adiw	r26, 0x16	; 22
    1a8c:	1c 92       	st	X, r1
    1a8e:	56 97       	sbiw	r26, 0x16	; 22
    1a90:	f5 01       	movw	r30, r10
    1a92:	10 82       	st	Z, r1
    1a94:	11 82       	std	Z+1, r1	; 0x01
    1a96:	12 82       	std	Z+2, r1	; 0x02
    1a98:	13 82       	std	Z+3, r1	; 0x03
    1a9a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	32 2f       	mov	r19, r18
    1aa0:	22 27       	eor	r18, r18
    1aa2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa4:	28 0f       	add	r18, r24
    1aa6:	31 1d       	adc	r19, r1
    1aa8:	14 96       	adiw	r26, 0x04	; 4
    1aaa:	1d 92       	st	X+, r1
    1aac:	1d 92       	st	X+, r1
    1aae:	1d 92       	st	X+, r1
    1ab0:	1c 92       	st	X, r1
    1ab2:	17 97       	sbiw	r26, 0x07	; 7
    1ab4:	49 84       	ldd	r4, Y+9	; 0x09
    1ab6:	51 2c       	mov	r5, r1
    1ab8:	54 2c       	mov	r5, r4
    1aba:	44 24       	eor	r4, r4
    1abc:	55 0c       	add	r5, r5
    1abe:	61 2c       	mov	r6, r1
    1ac0:	71 2c       	mov	r7, r1
    1ac2:	44 86       	std	Z+12, r4	; 0x0c
    1ac4:	55 86       	std	Z+13, r5	; 0x0d
    1ac6:	66 86       	std	Z+14, r6	; 0x0e
    1ac8:	77 86       	std	Z+15, r7	; 0x0f
    1aca:	8b 85       	ldd	r24, Y+11	; 0x0b
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	98 2f       	mov	r25, r24
    1ad0:	88 27       	eor	r24, r24
    1ad2:	99 0f       	add	r25, r25
    1ad4:	a0 e0       	ldi	r26, 0x00	; 0
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	80 8b       	std	Z+16, r24	; 0x10
    1ada:	91 8b       	std	Z+17, r25	; 0x11
    1adc:	a2 8b       	std	Z+18, r26	; 0x12
    1ade:	b3 8b       	std	Z+19, r27	; 0x13
    1ae0:	0c 81       	ldd	r16, Y+4	; 0x04
    1ae2:	10 e0       	ldi	r17, 0x00	; 0
    1ae4:	10 2f       	mov	r17, r16
    1ae6:	00 27       	eor	r16, r16
    1ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aea:	08 0f       	add	r16, r24
    1aec:	11 1d       	adc	r17, r1
    1aee:	15 8b       	std	Z+21, r17	; 0x15
    1af0:	04 8b       	std	Z+20, r16	; 0x14
    1af2:	3a 80       	ldd	r3, Y+2	; 0x02
    1af4:	f4 01       	movw	r30, r8
    1af6:	e7 5c       	subi	r30, 0xC7	; 199
    1af8:	fe 4f       	sbci	r31, 0xFE	; 254
    1afa:	40 81       	ld	r20, Z
    1afc:	51 81       	ldd	r21, Z+1	; 0x01
    1afe:	7b 97       	sbiw	r30, 0x1b	; 27
    1b00:	20 80       	ld	r2, Z
    1b02:	48 3e       	cpi	r20, 0xE8	; 232
    1b04:	f3 e0       	ldi	r31, 0x03	; 3
    1b06:	5f 07       	cpc	r21, r31
    1b08:	09 f4       	brne	.+2      	; 0x1b0c <VL53L0X_GetRangingMeasurementData+0xd4>
    1b0a:	46 c0       	rjmp	.+140    	; 0x1b98 <VL53L0X_GetRangingMeasurementData+0x160>
    1b0c:	24 9f       	mul	r18, r20
    1b0e:	c0 01       	movw	r24, r0
    1b10:	25 9f       	mul	r18, r21
    1b12:	90 0d       	add	r25, r0
    1b14:	34 9f       	mul	r19, r20
    1b16:	90 0d       	add	r25, r0
    1b18:	11 24       	eor	r1, r1
    1b1a:	9c 01       	movw	r18, r24
    1b1c:	2c 50       	subi	r18, 0x0C	; 12
    1b1e:	3e 4f       	sbci	r19, 0xFE	; 254
    1b20:	36 95       	lsr	r19
    1b22:	27 95       	ror	r18
    1b24:	36 95       	lsr	r19
    1b26:	27 95       	ror	r18
    1b28:	36 95       	lsr	r19
    1b2a:	27 95       	ror	r18
    1b2c:	a5 ec       	ldi	r26, 0xC5	; 197
    1b2e:	b0 e2       	ldi	r27, 0x20	; 32
    1b30:	0e 94 aa 2c 	call	0x5954	; 0x5954 <__umulhisi3>
    1b34:	9c 01       	movw	r18, r24
    1b36:	32 95       	swap	r19
    1b38:	22 95       	swap	r18
    1b3a:	2f 70       	andi	r18, 0x0F	; 15
    1b3c:	23 27       	eor	r18, r19
    1b3e:	3f 70       	andi	r19, 0x0F	; 15
    1b40:	23 27       	eor	r18, r19
    1b42:	d4 01       	movw	r26, r8
    1b44:	5d 96       	adiw	r26, 0x1d	; 29
    1b46:	4d 91       	ld	r20, X+
    1b48:	5d 91       	ld	r21, X+
    1b4a:	6d 91       	ld	r22, X+
    1b4c:	7c 91       	ld	r23, X
    1b4e:	90 97       	sbiw	r26, 0x20	; 32
    1b50:	5a 96       	adiw	r26, 0x1a	; 26
    1b52:	8c 91       	ld	r24, X
    1b54:	88 23       	and	r24, r24
    1b56:	01 f1       	breq	.+64     	; 0x1b98 <VL53L0X_GetRangingMeasurementData+0x160>
    1b58:	04 9f       	mul	r16, r20
    1b5a:	60 01       	movw	r12, r0
    1b5c:	05 9f       	mul	r16, r21
    1b5e:	d0 0c       	add	r13, r0
    1b60:	14 9f       	mul	r17, r20
    1b62:	d0 0c       	add	r13, r0
    1b64:	11 24       	eor	r1, r1
    1b66:	cd 2c       	mov	r12, r13
    1b68:	dd 24       	eor	r13, r13
    1b6a:	e1 2c       	mov	r14, r1
    1b6c:	f1 2c       	mov	r15, r1
    1b6e:	4c 14       	cp	r4, r12
    1b70:	5d 04       	cpc	r5, r13
    1b72:	6e 04       	cpc	r6, r14
    1b74:	7f 04       	cpc	r7, r15
    1b76:	29 f4       	brne	.+10     	; 0x1b82 <VL53L0X_GetRangingMeasurementData+0x14a>
    1b78:	21 10       	cpse	r2, r1
    1b7a:	11 c0       	rjmp	.+34     	; 0x1b9e <VL53L0X_GetRangingMeasurementData+0x166>
    1b7c:	20 ee       	ldi	r18, 0xE0	; 224
    1b7e:	3a e8       	ldi	r19, 0x8A	; 138
    1b80:	1e c0       	rjmp	.+60     	; 0x1bbe <VL53L0X_GetRangingMeasurementData+0x186>
    1b82:	d9 01       	movw	r26, r18
    1b84:	a3 01       	movw	r20, r6
    1b86:	92 01       	movw	r18, r4
    1b88:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    1b8c:	2c 19       	sub	r18, r12
    1b8e:	3d 09       	sbc	r19, r13
    1b90:	4e 09       	sbc	r20, r14
    1b92:	5f 09       	sbc	r21, r15
    1b94:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    1b98:	22 20       	and	r2, r2
    1b9a:	89 f0       	breq	.+34     	; 0x1bbe <VL53L0X_GetRangingMeasurementData+0x186>
    1b9c:	02 c0       	rjmp	.+4      	; 0x1ba2 <VL53L0X_GetRangingMeasurementData+0x16a>
    1b9e:	28 eb       	ldi	r18, 0xB8	; 184
    1ba0:	32 e2       	ldi	r19, 0x22	; 34
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	96 95       	lsr	r25
    1ba6:	87 95       	ror	r24
    1ba8:	96 95       	lsr	r25
    1baa:	87 95       	ror	r24
    1bac:	f5 01       	movw	r30, r10
    1bae:	91 87       	std	Z+9, r25	; 0x09
    1bb0:	80 87       	std	Z+8, r24	; 0x08
    1bb2:	22 95       	swap	r18
    1bb4:	22 0f       	add	r18, r18
    1bb6:	22 0f       	add	r18, r18
    1bb8:	20 7c       	andi	r18, 0xC0	; 192
    1bba:	27 8b       	std	Z+23, r18	; 0x17
    1bbc:	07 c0       	rjmp	.+14     	; 0x1bcc <VL53L0X_GetRangingMeasurementData+0x194>
    1bbe:	d5 01       	movw	r26, r10
    1bc0:	19 96       	adiw	r26, 0x09	; 9
    1bc2:	3c 93       	st	X, r19
    1bc4:	2e 93       	st	-X, r18
    1bc6:	18 97       	sbiw	r26, 0x08	; 8
    1bc8:	57 96       	adiw	r26, 0x17	; 23
    1bca:	1c 92       	st	X, r1
    1bcc:	fe 01       	movw	r30, r28
    1bce:	31 96       	adiw	r30, 0x01	; 1
    1bd0:	6f 01       	movw	r12, r30
    1bd2:	75 01       	movw	r14, r10
    1bd4:	a3 01       	movw	r20, r6
    1bd6:	92 01       	movw	r18, r4
    1bd8:	63 2d       	mov	r22, r3
    1bda:	c4 01       	movw	r24, r8
    1bdc:	0e 94 07 28 	call	0x500e	; 0x500e <VL53L0X_get_pal_range_status>
    1be0:	81 11       	cpse	r24, r1
    1be2:	4d c0       	rjmp	.+154    	; 0x1c7e <VL53L0X_GetRangingMeasurementData+0x246>
    1be4:	99 81       	ldd	r25, Y+1	; 0x01
    1be6:	d5 01       	movw	r26, r10
    1be8:	58 96       	adiw	r26, 0x18	; 24
    1bea:	9c 93       	st	X, r25
    1bec:	ba e4       	ldi	r27, 0x4A	; 74
    1bee:	8b 0e       	add	r8, r27
    1bf0:	91 1c       	adc	r9, r1
    1bf2:	29 e1       	ldi	r18, 0x19	; 25
    1bf4:	f4 01       	movw	r30, r8
    1bf6:	de 01       	movw	r26, r28
    1bf8:	1e 96       	adiw	r26, 0x0e	; 14
    1bfa:	01 90       	ld	r0, Z+
    1bfc:	0d 92       	st	X+, r0
    1bfe:	2a 95       	dec	r18
    1c00:	e1 f7       	brne	.-8      	; 0x1bfa <VL53L0X_GetRangingMeasurementData+0x1c2>
    1c02:	d5 01       	movw	r26, r10
    1c04:	18 96       	adiw	r26, 0x08	; 8
    1c06:	ed 91       	ld	r30, X+
    1c08:	fc 91       	ld	r31, X
    1c0a:	19 97       	sbiw	r26, 0x09	; 9
    1c0c:	57 96       	adiw	r26, 0x17	; 23
    1c0e:	3c 90       	ld	r3, X
    1c10:	57 97       	sbiw	r26, 0x17	; 23
    1c12:	1a 96       	adiw	r26, 0x0a	; 10
    1c14:	6d 91       	ld	r22, X+
    1c16:	7c 91       	ld	r23, X
    1c18:	1b 97       	sbiw	r26, 0x0b	; 11
    1c1a:	1c 96       	adiw	r26, 0x0c	; 12
    1c1c:	4d 90       	ld	r4, X+
    1c1e:	5d 90       	ld	r5, X+
    1c20:	6d 90       	ld	r6, X+
    1c22:	7c 90       	ld	r7, X
    1c24:	1f 97       	sbiw	r26, 0x0f	; 15
    1c26:	50 96       	adiw	r26, 0x10	; 16
    1c28:	cd 90       	ld	r12, X+
    1c2a:	dd 90       	ld	r13, X+
    1c2c:	ed 90       	ld	r14, X+
    1c2e:	fc 90       	ld	r15, X
    1c30:	53 97       	sbiw	r26, 0x13	; 19
    1c32:	54 96       	adiw	r26, 0x14	; 20
    1c34:	4d 91       	ld	r20, X+
    1c36:	5c 91       	ld	r21, X
    1c38:	55 97       	sbiw	r26, 0x15	; 21
    1c3a:	14 96       	adiw	r26, 0x04	; 4
    1c3c:	0d 91       	ld	r16, X+
    1c3e:	1d 91       	ld	r17, X+
    1c40:	2d 91       	ld	r18, X+
    1c42:	3c 91       	ld	r19, X
    1c44:	17 97       	sbiw	r26, 0x07	; 7
    1c46:	0a 8b       	std	Y+18, r16	; 0x12
    1c48:	1b 8b       	std	Y+19, r17	; 0x13
    1c4a:	2c 8b       	std	Y+20, r18	; 0x14
    1c4c:	3d 8b       	std	Y+21, r19	; 0x15
    1c4e:	ff 8b       	std	Y+23, r31	; 0x17
    1c50:	ee 8b       	std	Y+22, r30	; 0x16
    1c52:	79 8f       	std	Y+25, r23	; 0x19
    1c54:	68 8f       	std	Y+24, r22	; 0x18
    1c56:	4a 8e       	std	Y+26, r4	; 0x1a
    1c58:	5b 8e       	std	Y+27, r5	; 0x1b
    1c5a:	6c 8e       	std	Y+28, r6	; 0x1c
    1c5c:	7d 8e       	std	Y+29, r7	; 0x1d
    1c5e:	ce 8e       	std	Y+30, r12	; 0x1e
    1c60:	df 8e       	std	Y+31, r13	; 0x1f
    1c62:	e8 a2       	std	Y+32, r14	; 0x20
    1c64:	f9 a2       	std	Y+33, r15	; 0x21
    1c66:	5b a3       	std	Y+35, r21	; 0x23
    1c68:	4a a3       	std	Y+34, r20	; 0x22
    1c6a:	3d a2       	std	Y+37, r3	; 0x25
    1c6c:	9e a3       	std	Y+38, r25	; 0x26
    1c6e:	99 e1       	ldi	r25, 0x19	; 25
    1c70:	fe 01       	movw	r30, r28
    1c72:	3e 96       	adiw	r30, 0x0e	; 14
    1c74:	d4 01       	movw	r26, r8
    1c76:	01 90       	ld	r0, Z+
    1c78:	0d 92       	st	X+, r0
    1c7a:	9a 95       	dec	r25
    1c7c:	e1 f7       	brne	.-8      	; 0x1c76 <VL53L0X_GetRangingMeasurementData+0x23e>
    1c7e:	a6 96       	adiw	r28, 0x26	; 38
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	de bf       	out	0x3e, r29	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	cd bf       	out	0x3d, r28	; 61
    1c8a:	df 91       	pop	r29
    1c8c:	cf 91       	pop	r28
    1c8e:	1f 91       	pop	r17
    1c90:	0f 91       	pop	r16
    1c92:	ff 90       	pop	r15
    1c94:	ef 90       	pop	r14
    1c96:	df 90       	pop	r13
    1c98:	cf 90       	pop	r12
    1c9a:	bf 90       	pop	r11
    1c9c:	af 90       	pop	r10
    1c9e:	9f 90       	pop	r9
    1ca0:	8f 90       	pop	r8
    1ca2:	7f 90       	pop	r7
    1ca4:	6f 90       	pop	r6
    1ca6:	5f 90       	pop	r5
    1ca8:	4f 90       	pop	r4
    1caa:	3f 90       	pop	r3
    1cac:	2f 90       	pop	r2
    1cae:	08 95       	ret

00001cb0 <VL53L0X_GetInterruptThresholds>:
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	cf 93       	push	r28
    1cbe:	df 93       	push	r29
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <VL53L0X_GetInterruptThresholds+0x12>
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	8c 01       	movw	r16, r24
    1cc8:	6a 01       	movw	r12, r20
    1cca:	79 01       	movw	r14, r18
    1ccc:	ae 01       	movw	r20, r28
    1cce:	4f 5f       	subi	r20, 0xFF	; 255
    1cd0:	5f 4f       	sbci	r21, 0xFF	; 255
    1cd2:	6e e0       	ldi	r22, 0x0E	; 14
    1cd4:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    1cd8:	49 81       	ldd	r20, Y+1	; 0x01
    1cda:	5a 81       	ldd	r21, Y+2	; 0x02
    1cdc:	5f 70       	andi	r21, 0x0F	; 15
    1cde:	60 e0       	ldi	r22, 0x00	; 0
    1ce0:	70 e0       	ldi	r23, 0x00	; 0
    1ce2:	03 2e       	mov	r0, r19
    1ce4:	31 e1       	ldi	r19, 0x11	; 17
    1ce6:	44 0f       	add	r20, r20
    1ce8:	55 1f       	adc	r21, r21
    1cea:	66 1f       	adc	r22, r22
    1cec:	77 1f       	adc	r23, r23
    1cee:	3a 95       	dec	r19
    1cf0:	d1 f7       	brne	.-12     	; 0x1ce6 <VL53L0X_GetInterruptThresholds+0x36>
    1cf2:	30 2d       	mov	r19, r0
    1cf4:	f6 01       	movw	r30, r12
    1cf6:	40 83       	st	Z, r20
    1cf8:	51 83       	std	Z+1, r21	; 0x01
    1cfa:	62 83       	std	Z+2, r22	; 0x02
    1cfc:	73 83       	std	Z+3, r23	; 0x03
    1cfe:	81 11       	cpse	r24, r1
    1d00:	1a c0       	rjmp	.+52     	; 0x1d36 <VL53L0X_GetInterruptThresholds+0x86>
    1d02:	ae 01       	movw	r20, r28
    1d04:	4f 5f       	subi	r20, 0xFF	; 255
    1d06:	5f 4f       	sbci	r21, 0xFF	; 255
    1d08:	6c e0       	ldi	r22, 0x0C	; 12
    1d0a:	c8 01       	movw	r24, r16
    1d0c:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    1d10:	49 81       	ldd	r20, Y+1	; 0x01
    1d12:	5a 81       	ldd	r21, Y+2	; 0x02
    1d14:	5f 70       	andi	r21, 0x0F	; 15
    1d16:	60 e0       	ldi	r22, 0x00	; 0
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	03 2e       	mov	r0, r19
    1d1c:	31 e1       	ldi	r19, 0x11	; 17
    1d1e:	44 0f       	add	r20, r20
    1d20:	55 1f       	adc	r21, r21
    1d22:	66 1f       	adc	r22, r22
    1d24:	77 1f       	adc	r23, r23
    1d26:	3a 95       	dec	r19
    1d28:	d1 f7       	brne	.-12     	; 0x1d1e <VL53L0X_GetInterruptThresholds+0x6e>
    1d2a:	30 2d       	mov	r19, r0
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	40 83       	st	Z, r20
    1d30:	51 83       	std	Z+1, r21	; 0x01
    1d32:	62 83       	std	Z+2, r22	; 0x02
    1d34:	73 83       	std	Z+3, r23	; 0x03
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	08 95       	ret

00001d4c <VL53L0X_CheckAndLoadInterruptSettings>:
    1d4c:	ef 92       	push	r14
    1d4e:	ff 92       	push	r15
    1d50:	1f 93       	push	r17
    1d52:	cf 93       	push	r28
    1d54:	df 93       	push	r29
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	28 97       	sbiw	r28, 0x08	; 8
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	9c 01       	movw	r18, r24
    1d68:	fc 01       	movw	r30, r24
    1d6a:	e2 53       	subi	r30, 0x32	; 50
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	90 81       	ld	r25, Z
    1d70:	91 50       	subi	r25, 0x01	; 1
    1d72:	93 30       	cpi	r25, 0x03	; 3
    1d74:	08 f0       	brcs	.+2      	; 0x1d78 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
    1d76:	40 c0       	rjmp	.+128    	; 0x1df8 <VL53L0X_CheckAndLoadInterruptSettings+0xac>
    1d78:	16 2f       	mov	r17, r22
    1d7a:	79 01       	movw	r14, r18
    1d7c:	9e 01       	movw	r18, r28
    1d7e:	2b 5f       	subi	r18, 0xFB	; 251
    1d80:	3f 4f       	sbci	r19, 0xFF	; 255
    1d82:	ae 01       	movw	r20, r28
    1d84:	4f 5f       	subi	r20, 0xFF	; 255
    1d86:	5f 4f       	sbci	r21, 0xFF	; 255
    1d88:	61 e0       	ldi	r22, 0x01	; 1
    1d8a:	c7 01       	movw	r24, r14
    1d8c:	91 df       	rcall	.-222    	; 0x1cb0 <VL53L0X_GetInterruptThresholds>
    1d8e:	49 81       	ldd	r20, Y+1	; 0x01
    1d90:	5a 81       	ldd	r21, Y+2	; 0x02
    1d92:	6b 81       	ldd	r22, Y+3	; 0x03
    1d94:	7c 81       	ldd	r23, Y+4	; 0x04
    1d96:	41 30       	cpi	r20, 0x01	; 1
    1d98:	51 05       	cpc	r21, r1
    1d9a:	6f 4f       	sbci	r22, 0xFF	; 255
    1d9c:	71 05       	cpc	r23, r1
    1d9e:	48 f4       	brcc	.+18     	; 0x1db2 <VL53L0X_CheckAndLoadInterruptSettings+0x66>
    1da0:	4d 81       	ldd	r20, Y+5	; 0x05
    1da2:	5e 81       	ldd	r21, Y+6	; 0x06
    1da4:	6f 81       	ldd	r22, Y+7	; 0x07
    1da6:	78 85       	ldd	r23, Y+8	; 0x08
    1da8:	41 30       	cpi	r20, 0x01	; 1
    1daa:	51 05       	cpc	r21, r1
    1dac:	6f 4f       	sbci	r22, 0xFF	; 255
    1dae:	71 05       	cpc	r23, r1
    1db0:	20 f1       	brcs	.+72     	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1db2:	81 11       	cpse	r24, r1
    1db4:	22 c0       	rjmp	.+68     	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1db6:	11 23       	and	r17, r17
    1db8:	31 f0       	breq	.+12     	; 0x1dc6 <VL53L0X_CheckAndLoadInterruptSettings+0x7a>
    1dba:	62 e0       	ldi	r22, 0x02	; 2
    1dbc:	71 e0       	ldi	r23, 0x01	; 1
    1dbe:	c7 01       	movw	r24, r14
    1dc0:	0e 94 0a 22 	call	0x4414	; 0x4414 <VL53L0X_load_tuning_settings>
    1dc4:	1a c0       	rjmp	.+52     	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1dc6:	44 e0       	ldi	r20, 0x04	; 4
    1dc8:	6f ef       	ldi	r22, 0xFF	; 255
    1dca:	c7 01       	movw	r24, r14
    1dcc:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1dd0:	18 2f       	mov	r17, r24
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	60 e7       	ldi	r22, 0x70	; 112
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1ddc:	18 2b       	or	r17, r24
    1dde:	40 e0       	ldi	r20, 0x00	; 0
    1de0:	6f ef       	ldi	r22, 0xFF	; 255
    1de2:	c7 01       	movw	r24, r14
    1de4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1de8:	18 2b       	or	r17, r24
    1dea:	40 e0       	ldi	r20, 0x00	; 0
    1dec:	60 e8       	ldi	r22, 0x80	; 128
    1dee:	c7 01       	movw	r24, r14
    1df0:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1df4:	81 2b       	or	r24, r17
    1df6:	01 c0       	rjmp	.+2      	; 0x1dfa <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	28 96       	adiw	r28, 0x08	; 8
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	1f 91       	pop	r17
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	08 95       	ret

00001e12 <VL53L0X_StartMeasurement>:
    1e12:	cf 92       	push	r12
    1e14:	df 92       	push	r13
    1e16:	ef 92       	push	r14
    1e18:	ff 92       	push	r15
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	cf 93       	push	r28
    1e20:	df 93       	push	r29
    1e22:	1f 92       	push	r1
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	8c 01       	movw	r16, r24
    1e2a:	fc 01       	movw	r30, r24
    1e2c:	f0 88       	ldd	r15, Z+16	; 0x10
    1e2e:	41 e0       	ldi	r20, 0x01	; 1
    1e30:	60 e8       	ldi	r22, 0x80	; 128
    1e32:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	6f ef       	ldi	r22, 0xFF	; 255
    1e3a:	c8 01       	movw	r24, r16
    1e3c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	60 e0       	ldi	r22, 0x00	; 0
    1e44:	c8 01       	movw	r24, r16
    1e46:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	e9 5d       	subi	r30, 0xD9	; 217
    1e4e:	fe 4f       	sbci	r31, 0xFE	; 254
    1e50:	40 81       	ld	r20, Z
    1e52:	61 e9       	ldi	r22, 0x91	; 145
    1e54:	c8 01       	movw	r24, r16
    1e56:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	c8 01       	movw	r24, r16
    1e60:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e64:	40 e0       	ldi	r20, 0x00	; 0
    1e66:	6f ef       	ldi	r22, 0xFF	; 255
    1e68:	c8 01       	movw	r24, r16
    1e6a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e6e:	40 e0       	ldi	r20, 0x00	; 0
    1e70:	60 e8       	ldi	r22, 0x80	; 128
    1e72:	c8 01       	movw	r24, r16
    1e74:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e78:	f1 e0       	ldi	r31, 0x01	; 1
    1e7a:	ff 16       	cp	r15, r31
    1e7c:	d9 f1       	breq	.+118    	; 0x1ef4 <VL53L0X_StartMeasurement+0xe2>
    1e7e:	ff 16       	cp	r15, r31
    1e80:	28 f0       	brcs	.+10     	; 0x1e8c <VL53L0X_StartMeasurement+0x7a>
    1e82:	93 e0       	ldi	r25, 0x03	; 3
    1e84:	f9 16       	cp	r15, r25
    1e86:	09 f4       	brne	.+2      	; 0x1e8a <VL53L0X_StartMeasurement+0x78>
    1e88:	47 c0       	rjmp	.+142    	; 0x1f18 <VL53L0X_StartMeasurement+0x106>
    1e8a:	58 c0       	rjmp	.+176    	; 0x1f3c <VL53L0X_StartMeasurement+0x12a>
    1e8c:	41 e0       	ldi	r20, 0x01	; 1
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	c8 01       	movw	r24, r16
    1e92:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	99 83       	std	Y+1, r25	; 0x01
    1e9a:	88 23       	and	r24, r24
    1e9c:	71 f0       	breq	.+28     	; 0x1eba <VL53L0X_StartMeasurement+0xa8>
    1e9e:	4f c0       	rjmp	.+158    	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ea0:	c1 14       	cp	r12, r1
    1ea2:	d1 04       	cpc	r13, r1
    1ea4:	e1 04       	cpc	r14, r1
    1ea6:	f1 04       	cpc	r15, r1
    1ea8:	59 f0       	breq	.+22     	; 0x1ec0 <VL53L0X_StartMeasurement+0xae>
    1eaa:	ae 01       	movw	r20, r28
    1eac:	4f 5f       	subi	r20, 0xFF	; 255
    1eae:	5f 4f       	sbci	r21, 0xFF	; 255
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    1eb8:	03 c0       	rjmp	.+6      	; 0x1ec0 <VL53L0X_StartMeasurement+0xae>
    1eba:	c1 2c       	mov	r12, r1
    1ebc:	d1 2c       	mov	r13, r1
    1ebe:	76 01       	movw	r14, r12
    1ec0:	ef ef       	ldi	r30, 0xFF	; 255
    1ec2:	ce 1a       	sub	r12, r30
    1ec4:	de 0a       	sbc	r13, r30
    1ec6:	ee 0a       	sbc	r14, r30
    1ec8:	fe 0a       	sbc	r15, r30
    1eca:	99 81       	ldd	r25, Y+1	; 0x01
    1ecc:	90 ff       	sbrs	r25, 0
    1ece:	0a c0       	rjmp	.+20     	; 0x1ee4 <VL53L0X_StartMeasurement+0xd2>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	08 c0       	rjmp	.+16     	; 0x1ee4 <VL53L0X_StartMeasurement+0xd2>
    1ed4:	f8 ec       	ldi	r31, 0xC8	; 200
    1ed6:	cf 16       	cp	r12, r31
    1ed8:	d1 04       	cpc	r13, r1
    1eda:	e1 04       	cpc	r14, r1
    1edc:	f1 04       	cpc	r15, r1
    1ede:	01 f7       	brne	.-64     	; 0x1ea0 <VL53L0X_StartMeasurement+0x8e>
    1ee0:	89 ef       	ldi	r24, 0xF9	; 249
    1ee2:	2d c0       	rjmp	.+90     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ee4:	98 ec       	ldi	r25, 0xC8	; 200
    1ee6:	c9 16       	cp	r12, r25
    1ee8:	d1 04       	cpc	r13, r1
    1eea:	e1 04       	cpc	r14, r1
    1eec:	f1 04       	cpc	r15, r1
    1eee:	38 f1       	brcs	.+78     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ef0:	89 ef       	ldi	r24, 0xF9	; 249
    1ef2:	25 c0       	rjmp	.+74     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <VL53L0X_StartMeasurement+0xec>
    1ef8:	61 e0       	ldi	r22, 0x01	; 1
    1efa:	c8 01       	movw	r24, r16
    1efc:	27 df       	rcall	.-434    	; 0x1d4c <VL53L0X_CheckAndLoadInterruptSettings>
    1efe:	42 e0       	ldi	r20, 0x02	; 2
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1f08:	81 11       	cpse	r24, r1
    1f0a:	19 c0       	rjmp	.+50     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f0c:	f8 01       	movw	r30, r16
    1f0e:	e1 5e       	subi	r30, 0xE1	; 225
    1f10:	fe 4f       	sbci	r31, 0xFE	; 254
    1f12:	94 e0       	ldi	r25, 0x04	; 4
    1f14:	90 83       	st	Z, r25
    1f16:	13 c0       	rjmp	.+38     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f18:	81 11       	cpse	r24, r1
    1f1a:	03 c0       	rjmp	.+6      	; 0x1f22 <VL53L0X_StartMeasurement+0x110>
    1f1c:	61 e0       	ldi	r22, 0x01	; 1
    1f1e:	c8 01       	movw	r24, r16
    1f20:	15 df       	rcall	.-470    	; 0x1d4c <VL53L0X_CheckAndLoadInterruptSettings>
    1f22:	44 e0       	ldi	r20, 0x04	; 4
    1f24:	60 e0       	ldi	r22, 0x00	; 0
    1f26:	c8 01       	movw	r24, r16
    1f28:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1f2c:	81 11       	cpse	r24, r1
    1f2e:	07 c0       	rjmp	.+14     	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f30:	f8 01       	movw	r30, r16
    1f32:	e1 5e       	subi	r30, 0xE1	; 225
    1f34:	fe 4f       	sbci	r31, 0xFE	; 254
    1f36:	94 e0       	ldi	r25, 0x04	; 4
    1f38:	90 83       	st	Z, r25
    1f3a:	01 c0       	rjmp	.+2      	; 0x1f3e <VL53L0X_StartMeasurement+0x12c>
    1f3c:	88 ef       	ldi	r24, 0xF8	; 248
    1f3e:	0f 90       	pop	r0
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	08 95       	ret

00001f52 <VL53L0X_PerformSingleMeasurement>:
    1f52:	1f 93       	push	r17
    1f54:	cf 93       	push	r28
    1f56:	df 93       	push	r29
    1f58:	ec 01       	movw	r28, r24
    1f5a:	18 89       	ldd	r17, Y+16	; 0x10
    1f5c:	11 11       	cpse	r17, r1
    1f5e:	04 c0       	rjmp	.+8      	; 0x1f68 <VL53L0X_PerformSingleMeasurement+0x16>
    1f60:	58 df       	rcall	.-336    	; 0x1e12 <VL53L0X_StartMeasurement>
    1f62:	81 11       	cpse	r24, r1
    1f64:	12 c0       	rjmp	.+36     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f66:	0c c0       	rjmp	.+24     	; 0x1f80 <VL53L0X_PerformSingleMeasurement+0x2e>
    1f68:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <VL53L0X_measurement_poll_for_completion>
    1f6c:	81 11       	cpse	r24, r1
    1f6e:	0d c0       	rjmp	.+26     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f70:	11 11       	cpse	r17, r1
    1f72:	0b c0       	rjmp	.+22     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f74:	c1 5e       	subi	r28, 0xE1	; 225
    1f76:	de 4f       	sbci	r29, 0xFE	; 254
    1f78:	83 e0       	ldi	r24, 0x03	; 3
    1f7a:	88 83       	st	Y, r24
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <VL53L0X_PerformSingleMeasurement+0x38>
    1f80:	ce 01       	movw	r24, r28
    1f82:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <VL53L0X_measurement_poll_for_completion>
    1f86:	88 23       	and	r24, r24
    1f88:	a9 f3       	breq	.-22     	; 0x1f74 <VL53L0X_PerformSingleMeasurement+0x22>
    1f8a:	df 91       	pop	r29
    1f8c:	cf 91       	pop	r28
    1f8e:	1f 91       	pop	r17
    1f90:	08 95       	ret

00001f92 <VL53L0X_ClearInterruptMask>:
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	1f 92       	push	r1
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	7c 01       	movw	r14, r24
    1fa6:	00 e0       	ldi	r16, 0x00	; 0
    1fa8:	41 e0       	ldi	r20, 0x01	; 1
    1faa:	6b e0       	ldi	r22, 0x0B	; 11
    1fac:	c7 01       	movw	r24, r14
    1fae:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1fb2:	18 2f       	mov	r17, r24
    1fb4:	40 e0       	ldi	r20, 0x00	; 0
    1fb6:	6b e0       	ldi	r22, 0x0B	; 11
    1fb8:	c7 01       	movw	r24, r14
    1fba:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    1fbe:	18 2b       	or	r17, r24
    1fc0:	ae 01       	movw	r20, r28
    1fc2:	4f 5f       	subi	r20, 0xFF	; 255
    1fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1fc6:	63 e1       	ldi	r22, 0x13	; 19
    1fc8:	c7 01       	movw	r24, r14
    1fca:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    1fce:	81 2b       	or	r24, r17
    1fd0:	0f 5f       	subi	r16, 0xFF	; 255
    1fd2:	99 81       	ldd	r25, Y+1	; 0x01
    1fd4:	97 70       	andi	r25, 0x07	; 7
    1fd6:	29 f0       	breq	.+10     	; 0x1fe2 <VL53L0X_ClearInterruptMask+0x50>
    1fd8:	03 30       	cpi	r16, 0x03	; 3
    1fda:	39 f0       	breq	.+14     	; 0x1fea <VL53L0X_ClearInterruptMask+0x58>
    1fdc:	88 23       	and	r24, r24
    1fde:	21 f3       	breq	.-56     	; 0x1fa8 <VL53L0X_ClearInterruptMask+0x16>
    1fe0:	05 c0       	rjmp	.+10     	; 0x1fec <VL53L0X_ClearInterruptMask+0x5a>
    1fe2:	03 30       	cpi	r16, 0x03	; 3
    1fe4:	18 f0       	brcs	.+6      	; 0x1fec <VL53L0X_ClearInterruptMask+0x5a>
    1fe6:	84 ef       	ldi	r24, 0xF4	; 244
    1fe8:	01 c0       	rjmp	.+2      	; 0x1fec <VL53L0X_ClearInterruptMask+0x5a>
    1fea:	84 ef       	ldi	r24, 0xF4	; 244
    1fec:	0f 90       	pop	r0
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	ef 90       	pop	r14
    1ffa:	08 95       	ret

00001ffc <VL53L0X_PerformSingleRangingMeasurement>:
    1ffc:	0f 93       	push	r16
    1ffe:	1f 93       	push	r17
    2000:	cf 93       	push	r28
    2002:	df 93       	push	r29
    2004:	ec 01       	movw	r28, r24
    2006:	8b 01       	movw	r16, r22
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	0e 94 c1 07 	call	0xf82	; 0xf82 <VL53L0X_SetDeviceMode>
    200e:	81 11       	cpse	r24, r1
    2010:	0e c0       	rjmp	.+28     	; 0x202e <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2012:	ce 01       	movw	r24, r28
    2014:	9e df       	rcall	.-196    	; 0x1f52 <VL53L0X_PerformSingleMeasurement>
    2016:	81 11       	cpse	r24, r1
    2018:	0a c0       	rjmp	.+20     	; 0x202e <VL53L0X_PerformSingleRangingMeasurement+0x32>
    201a:	b8 01       	movw	r22, r16
    201c:	ce 01       	movw	r24, r28
    201e:	0c dd       	rcall	.-1512   	; 0x1a38 <VL53L0X_GetRangingMeasurementData>
    2020:	81 11       	cpse	r24, r1
    2022:	05 c0       	rjmp	.+10     	; 0x202e <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2024:	40 e0       	ldi	r20, 0x00	; 0
    2026:	50 e0       	ldi	r21, 0x00	; 0
    2028:	ba 01       	movw	r22, r20
    202a:	ce 01       	movw	r24, r28
    202c:	b2 df       	rcall	.-156    	; 0x1f92 <VL53L0X_ClearInterruptMask>
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <VL53L0X_SetGpioConfig>:
    2038:	0f 93       	push	r16
    203a:	1f 93       	push	r17
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	61 11       	cpse	r22, r1
    2042:	9b c0       	rjmp	.+310    	; 0x217a <VL53L0X_SetGpioConfig+0x142>
    2044:	12 2f       	mov	r17, r18
    2046:	ec 01       	movw	r28, r24
    2048:	44 31       	cpi	r20, 0x14	; 20
    204a:	51 f4       	brne	.+20     	; 0x2060 <VL53L0X_SetGpioConfig+0x28>
    204c:	00 23       	and	r16, r16
    204e:	11 f0       	breq	.+4      	; 0x2054 <VL53L0X_SetGpioConfig+0x1c>
    2050:	41 e0       	ldi	r20, 0x01	; 1
    2052:	01 c0       	rjmp	.+2      	; 0x2056 <VL53L0X_SetGpioConfig+0x1e>
    2054:	40 e1       	ldi	r20, 0x10	; 16
    2056:	64 e8       	ldi	r22, 0x84	; 132
    2058:	ce 01       	movw	r24, r28
    205a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    205e:	93 c0       	rjmp	.+294    	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    2060:	45 31       	cpi	r20, 0x15	; 21
    2062:	09 f0       	breq	.+2      	; 0x2066 <VL53L0X_SetGpioConfig+0x2e>
    2064:	5a c0       	rjmp	.+180    	; 0x211a <VL53L0X_SetGpioConfig+0xe2>
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	6f ef       	ldi	r22, 0xFF	; 255
    206a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    206e:	18 2f       	mov	r17, r24
    2070:	40 e0       	ldi	r20, 0x00	; 0
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	ce 01       	movw	r24, r28
    2076:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    207a:	18 2b       	or	r17, r24
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	6f ef       	ldi	r22, 0xFF	; 255
    2080:	ce 01       	movw	r24, r28
    2082:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2086:	18 2b       	or	r17, r24
    2088:	41 e0       	ldi	r20, 0x01	; 1
    208a:	60 e8       	ldi	r22, 0x80	; 128
    208c:	ce 01       	movw	r24, r28
    208e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2092:	18 2b       	or	r17, r24
    2094:	42 e0       	ldi	r20, 0x02	; 2
    2096:	65 e8       	ldi	r22, 0x85	; 133
    2098:	ce 01       	movw	r24, r28
    209a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    209e:	18 2b       	or	r17, r24
    20a0:	44 e0       	ldi	r20, 0x04	; 4
    20a2:	6f ef       	ldi	r22, 0xFF	; 255
    20a4:	ce 01       	movw	r24, r28
    20a6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20aa:	18 2b       	or	r17, r24
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	6d ec       	ldi	r22, 0xCD	; 205
    20b0:	ce 01       	movw	r24, r28
    20b2:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20b6:	18 2b       	or	r17, r24
    20b8:	41 e1       	ldi	r20, 0x11	; 17
    20ba:	6c ec       	ldi	r22, 0xCC	; 204
    20bc:	ce 01       	movw	r24, r28
    20be:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20c2:	18 2b       	or	r17, r24
    20c4:	47 e0       	ldi	r20, 0x07	; 7
    20c6:	6f ef       	ldi	r22, 0xFF	; 255
    20c8:	ce 01       	movw	r24, r28
    20ca:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20ce:	18 2b       	or	r17, r24
    20d0:	40 e0       	ldi	r20, 0x00	; 0
    20d2:	6e eb       	ldi	r22, 0xBE	; 190
    20d4:	ce 01       	movw	r24, r28
    20d6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20da:	18 2b       	or	r17, r24
    20dc:	46 e0       	ldi	r20, 0x06	; 6
    20de:	6f ef       	ldi	r22, 0xFF	; 255
    20e0:	ce 01       	movw	r24, r28
    20e2:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20e6:	18 2b       	or	r17, r24
    20e8:	49 e0       	ldi	r20, 0x09	; 9
    20ea:	6c ec       	ldi	r22, 0xCC	; 204
    20ec:	ce 01       	movw	r24, r28
    20ee:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20f2:	18 2b       	or	r17, r24
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	6f ef       	ldi	r22, 0xFF	; 255
    20f8:	ce 01       	movw	r24, r28
    20fa:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    20fe:	18 2b       	or	r17, r24
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	6f ef       	ldi	r22, 0xFF	; 255
    2104:	ce 01       	movw	r24, r28
    2106:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    210a:	18 2b       	or	r17, r24
    210c:	40 e0       	ldi	r20, 0x00	; 0
    210e:	60 e0       	ldi	r22, 0x00	; 0
    2110:	ce 01       	movw	r24, r28
    2112:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2116:	81 2b       	or	r24, r17
    2118:	36 c0       	rjmp	.+108    	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    211a:	22 30       	cpi	r18, 0x02	; 2
    211c:	59 f0       	breq	.+22     	; 0x2134 <VL53L0X_SetGpioConfig+0xfc>
    211e:	28 f4       	brcc	.+10     	; 0x212a <VL53L0X_SetGpioConfig+0xf2>
    2120:	22 23       	and	r18, r18
    2122:	61 f0       	breq	.+24     	; 0x213c <VL53L0X_SetGpioConfig+0x104>
    2124:	21 30       	cpi	r18, 0x01	; 1
    2126:	59 f1       	breq	.+86     	; 0x217e <VL53L0X_SetGpioConfig+0x146>
    2128:	0f c0       	rjmp	.+30     	; 0x2148 <VL53L0X_SetGpioConfig+0x110>
    212a:	23 30       	cpi	r18, 0x03	; 3
    212c:	51 f1       	breq	.+84     	; 0x2182 <VL53L0X_SetGpioConfig+0x14a>
    212e:	24 30       	cpi	r18, 0x04	; 4
    2130:	19 f0       	breq	.+6      	; 0x2138 <VL53L0X_SetGpioConfig+0x100>
    2132:	0a c0       	rjmp	.+20     	; 0x2148 <VL53L0X_SetGpioConfig+0x110>
    2134:	42 e0       	ldi	r20, 0x02	; 2
    2136:	03 c0       	rjmp	.+6      	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    2138:	44 e0       	ldi	r20, 0x04	; 4
    213a:	01 c0       	rjmp	.+2      	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	6a e0       	ldi	r22, 0x0A	; 10
    2140:	ce 01       	movw	r24, r28
    2142:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2146:	01 c0       	rjmp	.+2      	; 0x214a <VL53L0X_SetGpioConfig+0x112>
    2148:	85 ef       	ldi	r24, 0xF5	; 245
    214a:	81 11       	cpse	r24, r1
    214c:	1c c0       	rjmp	.+56     	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    214e:	00 23       	and	r16, r16
    2150:	11 f0       	breq	.+4      	; 0x2156 <VL53L0X_SetGpioConfig+0x11e>
    2152:	20 e1       	ldi	r18, 0x10	; 16
    2154:	01 c0       	rjmp	.+2      	; 0x2158 <VL53L0X_SetGpioConfig+0x120>
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	4f ee       	ldi	r20, 0xEF	; 239
    215a:	64 e8       	ldi	r22, 0x84	; 132
    215c:	ce 01       	movw	r24, r28
    215e:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <VL53L0X_UpdateByte>
    2162:	81 11       	cpse	r24, r1
    2164:	10 c0       	rjmp	.+32     	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    2166:	fe 01       	movw	r30, r28
    2168:	e2 53       	subi	r30, 0x32	; 50
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	10 83       	st	Z, r17
    216e:	40 e0       	ldi	r20, 0x00	; 0
    2170:	50 e0       	ldi	r21, 0x00	; 0
    2172:	ba 01       	movw	r22, r20
    2174:	ce 01       	movw	r24, r28
    2176:	0d df       	rcall	.-486    	; 0x1f92 <VL53L0X_ClearInterruptMask>
    2178:	06 c0       	rjmp	.+12     	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    217a:	86 ef       	ldi	r24, 0xF6	; 246
    217c:	04 c0       	rjmp	.+8      	; 0x2186 <VL53L0X_SetGpioConfig+0x14e>
    217e:	41 e0       	ldi	r20, 0x01	; 1
    2180:	de cf       	rjmp	.-68     	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    2182:	43 e0       	ldi	r20, 0x03	; 3
    2184:	dc cf       	rjmp	.-72     	; 0x213e <VL53L0X_SetGpioConfig+0x106>
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	08 95       	ret

00002190 <VL53L0X_StaticInit>:
    2190:	ef 92       	push	r14
    2192:	ff 92       	push	r15
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62
    21a0:	c7 54       	subi	r28, 0x47	; 71
    21a2:	d1 09       	sbc	r29, r1
    21a4:	0f b6       	in	r0, 0x3f	; 63
    21a6:	f8 94       	cli
    21a8:	de bf       	out	0x3e, r29	; 62
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	cd bf       	out	0x3d, r28	; 61
    21ae:	7c 01       	movw	r14, r24
    21b0:	fe 01       	movw	r30, r28
    21b2:	31 96       	adiw	r30, 0x01	; 1
    21b4:	8a e3       	ldi	r24, 0x3A	; 58
    21b6:	df 01       	movw	r26, r30
    21b8:	1d 92       	st	X+, r1
    21ba:	8a 95       	dec	r24
    21bc:	e9 f7       	brne	.-6      	; 0x21b8 <VL53L0X_StaticInit+0x28>
    21be:	1c ae       	std	Y+60, r1	; 0x3c
    21c0:	1b ae       	std	Y+59, r1	; 0x3b
    21c2:	1d ae       	std	Y+61, r1	; 0x3d
    21c4:	1e ae       	std	Y+62, r1	; 0x3e
    21c6:	23 96       	adiw	r28, 0x03	; 3
    21c8:	1c ae       	std	Y+60, r1	; 0x3c
    21ca:	1d ae       	std	Y+61, r1	; 0x3d
    21cc:	1e ae       	std	Y+62, r1	; 0x3e
    21ce:	1f ae       	std	Y+63, r1	; 0x3f
    21d0:	23 97       	sbiw	r28, 0x03	; 3
    21d2:	61 e0       	ldi	r22, 0x01	; 1
    21d4:	c7 01       	movw	r24, r14
    21d6:	0e 94 cc 19 	call	0x3398	; 0x3398 <VL53L0X_get_info_from_device>
    21da:	f7 01       	movw	r30, r14
    21dc:	ed 5f       	subi	r30, 0xFD	; 253
    21de:	fe 4f       	sbci	r31, 0xFE	; 254
    21e0:	20 81       	ld	r18, Z
    21e2:	22 30       	cpi	r18, 0x02	; 2
    21e4:	a0 f4       	brcc	.+40     	; 0x220e <VL53L0X_StaticInit+0x7e>
    21e6:	31 97       	sbiw	r30, 0x01	; 1
    21e8:	40 81       	ld	r20, Z
    21ea:	50 e0       	ldi	r21, 0x00	; 0
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	21 30       	cpi	r18, 0x01	; 1
    21f2:	31 f4       	brne	.+12     	; 0x2200 <VL53L0X_StaticInit+0x70>
    21f4:	41 32       	cpi	r20, 0x21	; 33
    21f6:	51 05       	cpc	r21, r1
    21f8:	61 05       	cpc	r22, r1
    21fa:	71 05       	cpc	r23, r1
    21fc:	40 f4       	brcc	.+16     	; 0x220e <VL53L0X_StaticInit+0x7e>
    21fe:	10 c0       	rjmp	.+32     	; 0x2220 <VL53L0X_StaticInit+0x90>
    2200:	21 11       	cpse	r18, r1
    2202:	0e c0       	rjmp	.+28     	; 0x2220 <VL53L0X_StaticInit+0x90>
    2204:	4d 30       	cpi	r20, 0x0D	; 13
    2206:	51 05       	cpc	r21, r1
    2208:	61 05       	cpc	r22, r1
    220a:	71 05       	cpc	r23, r1
    220c:	48 f0       	brcs	.+18     	; 0x2220 <VL53L0X_StaticInit+0x90>
    220e:	ae 01       	movw	r20, r28
    2210:	42 5c       	subi	r20, 0xC2	; 194
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	be 01       	movw	r22, r28
    2216:	61 5c       	subi	r22, 0xC1	; 193
    2218:	7f 4f       	sbci	r23, 0xFF	; 255
    221a:	c7 01       	movw	r24, r14
    221c:	b5 d5       	rcall	.+2922   	; 0x2d88 <VL53L0X_perform_ref_spad_management>
    221e:	02 c0       	rjmp	.+4      	; 0x2224 <VL53L0X_StaticInit+0x94>
    2220:	c7 01       	movw	r24, r14
    2222:	a3 d3       	rcall	.+1862   	; 0x296a <VL53L0X_set_reference_spads>
    2224:	81 11       	cpse	r24, r1
    2226:	26 c0       	rjmp	.+76     	; 0x2274 <VL53L0X_StaticInit+0xe4>
    2228:	f7 01       	movw	r30, r14
    222a:	e8 5c       	subi	r30, 0xC8	; 200
    222c:	fe 4f       	sbci	r31, 0xFE	; 254
    222e:	80 81       	ld	r24, Z
    2230:	81 11       	cpse	r24, r1
    2232:	be c0       	rjmp	.+380    	; 0x23b0 <VL53L0X_StaticInit+0x220>
    2234:	32 97       	sbiw	r30, 0x02	; 2
    2236:	60 81       	ld	r22, Z
    2238:	71 81       	ldd	r23, Z+1	; 0x01
    223a:	bc c0       	rjmp	.+376    	; 0x23b4 <VL53L0X_StaticInit+0x224>
    223c:	00 e0       	ldi	r16, 0x00	; 0
    223e:	24 e0       	ldi	r18, 0x04	; 4
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	60 e0       	ldi	r22, 0x00	; 0
    2244:	c7 01       	movw	r24, r14
    2246:	f8 de       	rcall	.-528    	; 0x2038 <VL53L0X_SetGpioConfig>
    2248:	81 11       	cpse	r24, r1
    224a:	6c c0       	rjmp	.+216    	; 0x2324 <VL53L0X_StaticInit+0x194>
    224c:	41 e0       	ldi	r20, 0x01	; 1
    224e:	6f ef       	ldi	r22, 0xFF	; 255
    2250:	c7 01       	movw	r24, r14
    2252:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2256:	18 2f       	mov	r17, r24
    2258:	ae 01       	movw	r20, r28
    225a:	45 5c       	subi	r20, 0xC5	; 197
    225c:	5f 4f       	sbci	r21, 0xFF	; 255
    225e:	64 e8       	ldi	r22, 0x84	; 132
    2260:	c7 01       	movw	r24, r14
    2262:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    2266:	18 2b       	or	r17, r24
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	6f ef       	ldi	r22, 0xFF	; 255
    226c:	c7 01       	movw	r24, r14
    226e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2272:	81 2b       	or	r24, r17
    2274:	81 11       	cpse	r24, r1
    2276:	a5 c0       	rjmp	.+330    	; 0x23c2 <VL53L0X_StaticInit+0x232>
    2278:	f7 01       	movw	r30, r14
    227a:	e8 53       	subi	r30, 0x38	; 56
    227c:	ff 4f       	sbci	r31, 0xFF	; 255
    227e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2280:	9c ad       	ldd	r25, Y+60	; 0x3c
    2282:	82 95       	swap	r24
    2284:	92 95       	swap	r25
    2286:	90 7f       	andi	r25, 0xF0	; 240
    2288:	98 27       	eor	r25, r24
    228a:	80 7f       	andi	r24, 0xF0	; 240
    228c:	98 27       	eor	r25, r24
    228e:	a0 e0       	ldi	r26, 0x00	; 0
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	80 83       	st	Z, r24
    2294:	91 83       	std	Z+1, r25	; 0x01
    2296:	a2 83       	std	Z+2, r26	; 0x02
    2298:	b3 83       	std	Z+3, r27	; 0x03
    229a:	be 01       	movw	r22, r28
    229c:	6f 5f       	subi	r22, 0xFF	; 255
    229e:	7f 4f       	sbci	r23, 0xFF	; 255
    22a0:	c7 01       	movw	r24, r14
    22a2:	38 da       	rcall	.-2960   	; 0x1714 <VL53L0X_GetDeviceParameters>
    22a4:	81 11       	cpse	r24, r1
    22a6:	29 c0       	rjmp	.+82     	; 0x22fa <VL53L0X_StaticInit+0x16a>
    22a8:	be 01       	movw	r22, r28
    22aa:	63 5c       	subi	r22, 0xC3	; 195
    22ac:	7f 4f       	sbci	r23, 0xFF	; 255
    22ae:	c7 01       	movw	r24, r14
    22b0:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <VL53L0X_GetFractionEnable>
    22b4:	81 11       	cpse	r24, r1
    22b6:	21 c0       	rjmp	.+66     	; 0x22fa <VL53L0X_StaticInit+0x16a>
    22b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    22ba:	f7 01       	movw	r30, r14
    22bc:	e2 5e       	subi	r30, 0xE2	; 226
    22be:	fe 4f       	sbci	r31, 0xFE	; 254
    22c0:	80 83       	st	Z, r24
    22c2:	8a e3       	ldi	r24, 0x3A	; 58
    22c4:	fe 01       	movw	r30, r28
    22c6:	31 96       	adiw	r30, 0x01	; 1
    22c8:	d7 01       	movw	r26, r14
    22ca:	50 96       	adiw	r26, 0x10	; 16
    22cc:	01 90       	ld	r0, Z+
    22ce:	0d 92       	st	X+, r0
    22d0:	8a 95       	dec	r24
    22d2:	e1 f7       	brne	.-8      	; 0x22cc <VL53L0X_StaticInit+0x13c>
    22d4:	ae 01       	movw	r20, r28
    22d6:	43 5c       	subi	r20, 0xC3	; 195
    22d8:	5f 4f       	sbci	r21, 0xFF	; 255
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	c7 01       	movw	r24, r14
    22de:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    22e2:	81 11       	cpse	r24, r1
    22e4:	71 c0       	rjmp	.+226    	; 0x23c8 <VL53L0X_StaticInit+0x238>
    22e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    22e8:	f7 01       	movw	r30, r14
    22ea:	e3 5e       	subi	r30, 0xE3	; 227
    22ec:	fe 4f       	sbci	r31, 0xFE	; 254
    22ee:	80 83       	st	Z, r24
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	60 e0       	ldi	r22, 0x00	; 0
    22f4:	c7 01       	movw	r24, r14
    22f6:	0e 94 e6 07 	call	0xfcc	; 0xfcc <VL53L0X_SetSequenceStepEnable>
    22fa:	81 11       	cpse	r24, r1
    22fc:	65 c0       	rjmp	.+202    	; 0x23c8 <VL53L0X_StaticInit+0x238>
    22fe:	40 e0       	ldi	r20, 0x00	; 0
    2300:	62 e0       	ldi	r22, 0x02	; 2
    2302:	c7 01       	movw	r24, r14
    2304:	0e 94 e6 07 	call	0xfcc	; 0xfcc <VL53L0X_SetSequenceStepEnable>
    2308:	81 11       	cpse	r24, r1
    230a:	1c c0       	rjmp	.+56     	; 0x2344 <VL53L0X_StaticInit+0x1b4>
    230c:	83 e0       	ldi	r24, 0x03	; 3
    230e:	f7 01       	movw	r30, r14
    2310:	e1 5e       	subi	r30, 0xE1	; 225
    2312:	fe 4f       	sbci	r31, 0xFE	; 254
    2314:	80 83       	st	Z, r24
    2316:	ae 01       	movw	r20, r28
    2318:	4d 5b       	subi	r20, 0xBD	; 189
    231a:	5f 4f       	sbci	r21, 0xFF	; 255
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	c7 01       	movw	r24, r14
    2320:	0e 94 03 20 	call	0x4006	; 0x4006 <VL53L0X_get_vcsel_pulse_period>
    2324:	81 11       	cpse	r24, r1
    2326:	1e c0       	rjmp	.+60     	; 0x2364 <VL53L0X_StaticInit+0x1d4>
    2328:	24 96       	adiw	r28, 0x04	; 4
    232a:	8f ad       	ldd	r24, Y+63	; 0x3f
    232c:	24 97       	sbiw	r28, 0x04	; 4
    232e:	f7 01       	movw	r30, r14
    2330:	e8 52       	subi	r30, 0x28	; 40
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	80 83       	st	Z, r24
    2336:	ae 01       	movw	r20, r28
    2338:	4d 5b       	subi	r20, 0xBD	; 189
    233a:	5f 4f       	sbci	r21, 0xFF	; 255
    233c:	61 e0       	ldi	r22, 0x01	; 1
    233e:	c7 01       	movw	r24, r14
    2340:	0e 94 03 20 	call	0x4006	; 0x4006 <VL53L0X_get_vcsel_pulse_period>
    2344:	81 11       	cpse	r24, r1
    2346:	24 c0       	rjmp	.+72     	; 0x2390 <VL53L0X_StaticInit+0x200>
    2348:	24 96       	adiw	r28, 0x04	; 4
    234a:	8f ad       	ldd	r24, Y+63	; 0x3f
    234c:	24 97       	sbiw	r28, 0x04	; 4
    234e:	f7 01       	movw	r30, r14
    2350:	ed 52       	subi	r30, 0x2D	; 45
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 83       	st	Z, r24
    2356:	ae 01       	movw	r20, r28
    2358:	4c 5b       	subi	r20, 0xBC	; 188
    235a:	5f 4f       	sbci	r21, 0xFF	; 255
    235c:	63 e0       	ldi	r22, 0x03	; 3
    235e:	c7 01       	movw	r24, r14
    2360:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <VL53L0X_GetSequenceStepTimeout>
    2364:	81 11       	cpse	r24, r1
    2366:	30 c0       	rjmp	.+96     	; 0x23c8 <VL53L0X_StaticInit+0x238>
    2368:	28 96       	adiw	r28, 0x08	; 8
    236a:	8c ad       	ldd	r24, Y+60	; 0x3c
    236c:	9d ad       	ldd	r25, Y+61	; 0x3d
    236e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2370:	bf ad       	ldd	r27, Y+63	; 0x3f
    2372:	28 97       	sbiw	r28, 0x08	; 8
    2374:	f7 01       	movw	r30, r14
    2376:	ec 52       	subi	r30, 0x2C	; 44
    2378:	ff 4f       	sbci	r31, 0xFF	; 255
    237a:	80 83       	st	Z, r24
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	a2 83       	std	Z+2, r26	; 0x02
    2380:	b3 83       	std	Z+3, r27	; 0x03
    2382:	ae 01       	movw	r20, r28
    2384:	4c 5b       	subi	r20, 0xBC	; 188
    2386:	5f 4f       	sbci	r21, 0xFF	; 255
    2388:	64 e0       	ldi	r22, 0x04	; 4
    238a:	c7 01       	movw	r24, r14
    238c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <VL53L0X_GetSequenceStepTimeout>
    2390:	81 11       	cpse	r24, r1
    2392:	1a c0       	rjmp	.+52     	; 0x23c8 <VL53L0X_StaticInit+0x238>
    2394:	f7 01       	movw	r30, r14
    2396:	e1 53       	subi	r30, 0x31	; 49
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	28 96       	adiw	r28, 0x08	; 8
    239c:	4c ad       	ldd	r20, Y+60	; 0x3c
    239e:	5d ad       	ldd	r21, Y+61	; 0x3d
    23a0:	6e ad       	ldd	r22, Y+62	; 0x3e
    23a2:	7f ad       	ldd	r23, Y+63	; 0x3f
    23a4:	28 97       	sbiw	r28, 0x08	; 8
    23a6:	40 83       	st	Z, r20
    23a8:	51 83       	std	Z+1, r21	; 0x01
    23aa:	62 83       	std	Z+2, r22	; 0x02
    23ac:	73 83       	std	Z+3, r23	; 0x03
    23ae:	0c c0       	rjmp	.+24     	; 0x23c8 <VL53L0X_StaticInit+0x238>
    23b0:	68 eb       	ldi	r22, 0xB8	; 184
    23b2:	72 e0       	ldi	r23, 0x02	; 2
    23b4:	c7 01       	movw	r24, r14
    23b6:	0e 94 0a 22 	call	0x4414	; 0x4414 <VL53L0X_load_tuning_settings>
    23ba:	88 23       	and	r24, r24
    23bc:	09 f4       	brne	.+2      	; 0x23c0 <VL53L0X_StaticInit+0x230>
    23be:	3e cf       	rjmp	.-388    	; 0x223c <VL53L0X_StaticInit+0xac>
    23c0:	71 cf       	rjmp	.-286    	; 0x22a4 <VL53L0X_StaticInit+0x114>
    23c2:	88 23       	and	r24, r24
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <VL53L0X_StaticInit+0x238>
    23c6:	86 cf       	rjmp	.-244    	; 0x22d4 <VL53L0X_StaticInit+0x144>
    23c8:	c9 5b       	subi	r28, 0xB9	; 185
    23ca:	df 4f       	sbci	r29, 0xFF	; 255
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	df 91       	pop	r29
    23d8:	cf 91       	pop	r28
    23da:	1f 91       	pop	r17
    23dc:	0f 91       	pop	r16
    23de:	ff 90       	pop	r15
    23e0:	ef 90       	pop	r14
    23e2:	08 95       	ret

000023e4 <VL53L0X_GetInterruptMaskStatus>:
    23e4:	0f 93       	push	r16
    23e6:	1f 93       	push	r17
    23e8:	cf 93       	push	r28
    23ea:	df 93       	push	r29
    23ec:	1f 92       	push	r1
    23ee:	cd b7       	in	r28, 0x3d	; 61
    23f0:	de b7       	in	r29, 0x3e	; 62
    23f2:	8b 01       	movw	r16, r22
    23f4:	ae 01       	movw	r20, r28
    23f6:	4f 5f       	subi	r20, 0xFF	; 255
    23f8:	5f 4f       	sbci	r21, 0xFF	; 255
    23fa:	63 e1       	ldi	r22, 0x13	; 19
    23fc:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    2400:	99 81       	ldd	r25, Y+1	; 0x01
    2402:	49 2f       	mov	r20, r25
    2404:	47 70       	andi	r20, 0x07	; 7
    2406:	50 e0       	ldi	r21, 0x00	; 0
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	70 e0       	ldi	r23, 0x00	; 0
    240c:	f8 01       	movw	r30, r16
    240e:	40 83       	st	Z, r20
    2410:	51 83       	std	Z+1, r21	; 0x01
    2412:	62 83       	std	Z+2, r22	; 0x02
    2414:	73 83       	std	Z+3, r23	; 0x03
    2416:	98 71       	andi	r25, 0x18	; 24
    2418:	09 f0       	breq	.+2      	; 0x241c <VL53L0X_GetInterruptMaskStatus+0x38>
    241a:	8a ef       	ldi	r24, 0xFA	; 250
    241c:	0f 90       	pop	r0
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
    2424:	0f 91       	pop	r16
    2426:	08 95       	ret

00002428 <VL53L0X_GetMeasurementDataReady>:
    2428:	0f 93       	push	r16
    242a:	1f 93       	push	r17
    242c:	cf 93       	push	r28
    242e:	df 93       	push	r29
    2430:	00 d0       	rcall	.+0      	; 0x2432 <VL53L0X_GetMeasurementDataReady+0xa>
    2432:	00 d0       	rcall	.+0      	; 0x2434 <VL53L0X_GetMeasurementDataReady+0xc>
    2434:	1f 92       	push	r1
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	8b 01       	movw	r16, r22
    243c:	fc 01       	movw	r30, r24
    243e:	e2 53       	subi	r30, 0x32	; 50
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	20 81       	ld	r18, Z
    2444:	24 30       	cpi	r18, 0x04	; 4
    2446:	a1 f4       	brne	.+40     	; 0x2470 <VL53L0X_GetMeasurementDataReady+0x48>
    2448:	be 01       	movw	r22, r28
    244a:	6e 5f       	subi	r22, 0xFE	; 254
    244c:	7f 4f       	sbci	r23, 0xFF	; 255
    244e:	ca df       	rcall	.-108    	; 0x23e4 <VL53L0X_GetInterruptMaskStatus>
    2450:	4a 81       	ldd	r20, Y+2	; 0x02
    2452:	5b 81       	ldd	r21, Y+3	; 0x03
    2454:	6c 81       	ldd	r22, Y+4	; 0x04
    2456:	7d 81       	ldd	r23, Y+5	; 0x05
    2458:	44 30       	cpi	r20, 0x04	; 4
    245a:	51 05       	cpc	r21, r1
    245c:	61 05       	cpc	r22, r1
    245e:	71 05       	cpc	r23, r1
    2460:	21 f4       	brne	.+8      	; 0x246a <VL53L0X_GetMeasurementDataReady+0x42>
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	f8 01       	movw	r30, r16
    2466:	90 83       	st	Z, r25
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    246a:	f8 01       	movw	r30, r16
    246c:	10 82       	st	Z, r1
    246e:	11 c0       	rjmp	.+34     	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    2470:	ae 01       	movw	r20, r28
    2472:	4f 5f       	subi	r20, 0xFF	; 255
    2474:	5f 4f       	sbci	r21, 0xFF	; 255
    2476:	64 e1       	ldi	r22, 0x14	; 20
    2478:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    247c:	81 11       	cpse	r24, r1
    247e:	09 c0       	rjmp	.+18     	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    2480:	99 81       	ldd	r25, Y+1	; 0x01
    2482:	90 ff       	sbrs	r25, 0
    2484:	04 c0       	rjmp	.+8      	; 0x248e <VL53L0X_GetMeasurementDataReady+0x66>
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	f8 01       	movw	r30, r16
    248a:	90 83       	st	Z, r25
    248c:	02 c0       	rjmp	.+4      	; 0x2492 <VL53L0X_GetMeasurementDataReady+0x6a>
    248e:	f8 01       	movw	r30, r16
    2490:	10 82       	st	Z, r1
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	0f 90       	pop	r0
    249a:	0f 90       	pop	r0
    249c:	df 91       	pop	r29
    249e:	cf 91       	pop	r28
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	08 95       	ret

000024a6 <VL53L0X_PerformRefSpadManagement>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
    2758:	70 c4       	rjmp	.+2272   	; 0x303a <VL53L0X_perform_ref_spad_management>
    275a:	08 95       	ret

0000275c <VL53L0X_get_offset_calibration_data_micro_meter>:
			}
		}
	}

	return Status;
}
<<<<<<< HEAD
    275c:	0f 93       	push	r16
    275e:	1f 93       	push	r17
    2760:	cf 93       	push	r28
    2762:	df 93       	push	r29
    2764:	00 d0       	rcall	.+0      	; 0x2766 <VL53L0X_get_offset_calibration_data_micro_meter+0xa>
    2766:	cd b7       	in	r28, 0x3d	; 61
    2768:	de b7       	in	r29, 0x3e	; 62
    276a:	8b 01       	movw	r16, r22
    276c:	ae 01       	movw	r20, r28
    276e:	4f 5f       	subi	r20, 0xFF	; 255
    2770:	5f 4f       	sbci	r21, 0xFF	; 255
    2772:	68 e2       	ldi	r22, 0x28	; 40
    2774:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    2778:	81 11       	cpse	r24, r1
    277a:	27 c0       	rjmp	.+78     	; 0x27ca <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    277c:	29 81       	ldd	r18, Y+1	; 0x01
    277e:	3a 81       	ldd	r19, Y+2	; 0x02
    2780:	3f 70       	andi	r19, 0x0F	; 15
    2782:	21 15       	cp	r18, r1
    2784:	98 e0       	ldi	r25, 0x08	; 8
    2786:	39 07       	cpc	r19, r25
    2788:	88 f0       	brcs	.+34     	; 0x27ac <VL53L0X_get_offset_calibration_data_micro_meter+0x50>
    278a:	30 51       	subi	r19, 0x10	; 16
    278c:	9a ef       	ldi	r25, 0xFA	; 250
    278e:	92 9f       	mul	r25, r18
    2790:	a0 01       	movw	r20, r0
    2792:	93 9f       	mul	r25, r19
    2794:	50 0d       	add	r21, r0
    2796:	11 24       	eor	r1, r1
    2798:	05 2e       	mov	r0, r21
    279a:	00 0c       	add	r0, r0
    279c:	66 0b       	sbc	r22, r22
    279e:	77 0b       	sbc	r23, r23
    27a0:	f8 01       	movw	r30, r16
    27a2:	40 83       	st	Z, r20
    27a4:	51 83       	std	Z+1, r21	; 0x01
    27a6:	62 83       	std	Z+2, r22	; 0x02
    27a8:	73 83       	std	Z+3, r23	; 0x03
    27aa:	0f c0       	rjmp	.+30     	; 0x27ca <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    27ac:	9a ef       	ldi	r25, 0xFA	; 250
    27ae:	92 9f       	mul	r25, r18
    27b0:	a0 01       	movw	r20, r0
    27b2:	93 9f       	mul	r25, r19
    27b4:	50 0d       	add	r21, r0
    27b6:	11 24       	eor	r1, r1
    27b8:	05 2e       	mov	r0, r21
    27ba:	00 0c       	add	r0, r0
    27bc:	66 0b       	sbc	r22, r22
    27be:	77 0b       	sbc	r23, r23
    27c0:	f8 01       	movw	r30, r16
    27c2:	40 83       	st	Z, r20
    27c4:	51 83       	std	Z+1, r21	; 0x01
    27c6:	62 83       	std	Z+2, r22	; 0x02
    27c8:	73 83       	std	Z+3, r23	; 0x03
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	08 95       	ret

000027d8 <get_next_good_spad>:
    27d8:	7f 92       	push	r7
    27da:	8f 92       	push	r8
    27dc:	9f 92       	push	r9
    27de:	af 92       	push	r10
    27e0:	bf 92       	push	r11
    27e2:	cf 92       	push	r12
    27e4:	df 92       	push	r13
    27e6:	ef 92       	push	r14
    27e8:	ff 92       	push	r15
    27ea:	0f 93       	push	r16
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	e7 01       	movw	r28, r14
    27f4:	cc 24       	eor	r12, r12
    27f6:	ca 94       	dec	r12
    27f8:	dc 2c       	mov	r13, r12
    27fa:	76 01       	movw	r14, r12
    27fc:	c8 82       	st	Y, r12
    27fe:	d9 82       	std	Y+1, r13	; 0x01
    2800:	ea 82       	std	Y+2, r14	; 0x02
    2802:	fb 82       	std	Y+3, r15	; 0x03
    2804:	68 01       	movw	r12, r16
    2806:	79 01       	movw	r14, r18
    2808:	68 94       	set
    280a:	12 f8       	bld	r1, 2
    280c:	f6 94       	lsr	r15
    280e:	e7 94       	ror	r14
    2810:	d7 94       	ror	r13
    2812:	c7 94       	ror	r12
    2814:	16 94       	lsr	r1
    2816:	d1 f7       	brne	.-12     	; 0x280c <get_next_good_spad+0x34>
    2818:	48 01       	movw	r8, r16
    281a:	59 01       	movw	r10, r18
    281c:	e7 e0       	ldi	r30, 0x07	; 7
    281e:	8e 22       	and	r8, r30
    2820:	99 24       	eor	r9, r9
    2822:	aa 24       	eor	r10, r10
    2824:	bb 24       	eor	r11, r11
    2826:	c4 16       	cp	r12, r20
    2828:	d5 06       	cpc	r13, r21
    282a:	e6 06       	cpc	r14, r22
    282c:	f7 06       	cpc	r15, r23
    282e:	08 f0       	brcs	.+2      	; 0x2832 <get_next_good_spad+0x5a>
    2830:	47 c0       	rjmp	.+142    	; 0x28c0 <get_next_good_spad+0xe8>
    2832:	fc 01       	movw	r30, r24
    2834:	ec 0d       	add	r30, r12
    2836:	fd 1d       	adc	r31, r13
    2838:	d7 01       	movw	r26, r14
    283a:	c6 01       	movw	r24, r12
    283c:	71 90       	ld	r7, Z+
    283e:	c8 16       	cp	r12, r24
    2840:	d9 06       	cpc	r13, r25
    2842:	ea 06       	cpc	r14, r26
    2844:	fb 06       	cpc	r15, r27
    2846:	61 f4       	brne	.+24     	; 0x2860 <get_next_good_spad+0x88>
    2848:	27 2d       	mov	r18, r7
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	08 2c       	mov	r0, r8
    284e:	02 c0       	rjmp	.+4      	; 0x2854 <get_next_good_spad+0x7c>
    2850:	35 95       	asr	r19
    2852:	27 95       	ror	r18
    2854:	0a 94       	dec	r0
    2856:	e2 f7       	brpl	.-8      	; 0x2850 <get_next_good_spad+0x78>
    2858:	72 2e       	mov	r7, r18
    285a:	95 01       	movw	r18, r10
    285c:	84 01       	movw	r16, r8
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <get_next_good_spad+0x8e>
    2860:	00 e0       	ldi	r16, 0x00	; 0
    2862:	10 e0       	ldi	r17, 0x00	; 0
    2864:	98 01       	movw	r18, r16
    2866:	70 fe       	sbrs	r7, 0
    2868:	18 c0       	rjmp	.+48     	; 0x289a <get_next_good_spad+0xc2>
    286a:	02 c0       	rjmp	.+4      	; 0x2870 <get_next_good_spad+0x98>
    286c:	70 fe       	sbrs	r7, 0
    286e:	15 c0       	rjmp	.+42     	; 0x289a <get_next_good_spad+0xc2>
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	aa 1f       	adc	r26, r26
    2876:	bb 1f       	adc	r27, r27
    2878:	88 0f       	add	r24, r24
    287a:	99 1f       	adc	r25, r25
    287c:	aa 1f       	adc	r26, r26
    287e:	bb 1f       	adc	r27, r27
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	aa 1f       	adc	r26, r26
    2886:	bb 1f       	adc	r27, r27
    2888:	08 0f       	add	r16, r24
    288a:	19 1f       	adc	r17, r25
    288c:	2a 1f       	adc	r18, r26
    288e:	3b 1f       	adc	r19, r27
    2890:	08 83       	st	Y, r16
    2892:	19 83       	std	Y+1, r17	; 0x01
    2894:	2a 83       	std	Y+2, r18	; 0x02
    2896:	3b 83       	std	Y+3, r19	; 0x03
    2898:	13 c0       	rjmp	.+38     	; 0x28c0 <get_next_good_spad+0xe8>
    289a:	76 94       	lsr	r7
    289c:	0f 5f       	subi	r16, 0xFF	; 255
    289e:	1f 4f       	sbci	r17, 0xFF	; 255
    28a0:	2f 4f       	sbci	r18, 0xFF	; 255
    28a2:	3f 4f       	sbci	r19, 0xFF	; 255
    28a4:	08 30       	cpi	r16, 0x08	; 8
    28a6:	11 05       	cpc	r17, r1
    28a8:	21 05       	cpc	r18, r1
    28aa:	31 05       	cpc	r19, r1
    28ac:	f8 f2       	brcs	.-66     	; 0x286c <get_next_good_spad+0x94>
    28ae:	01 96       	adiw	r24, 0x01	; 1
    28b0:	a1 1d       	adc	r26, r1
    28b2:	b1 1d       	adc	r27, r1
    28b4:	84 17       	cp	r24, r20
    28b6:	95 07       	cpc	r25, r21
    28b8:	a6 07       	cpc	r26, r22
    28ba:	b7 07       	cpc	r27, r23
    28bc:	08 f4       	brcc	.+2      	; 0x28c0 <get_next_good_spad+0xe8>
    28be:	be cf       	rjmp	.-132    	; 0x283c <get_next_good_spad+0x64>
    28c0:	df 91       	pop	r29
    28c2:	cf 91       	pop	r28
    28c4:	1f 91       	pop	r17
    28c6:	0f 91       	pop	r16
    28c8:	ff 90       	pop	r15
    28ca:	ef 90       	pop	r14
    28cc:	df 90       	pop	r13
    28ce:	cf 90       	pop	r12
    28d0:	bf 90       	pop	r11
    28d2:	af 90       	pop	r10
    28d4:	9f 90       	pop	r9
    28d6:	8f 90       	pop	r8
    28d8:	7f 90       	pop	r7
    28da:	08 95       	ret

000028dc <is_aperture>:
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	68 94       	set
    28e2:	15 f8       	bld	r1, 5
    28e4:	b6 95       	lsr	r27
    28e6:	a7 95       	ror	r26
    28e8:	97 95       	ror	r25
    28ea:	87 95       	ror	r24
    28ec:	16 94       	lsr	r1
    28ee:	d1 f7       	brne	.-12     	; 0x28e4 <is_aperture+0x8>
    28f0:	bc 01       	movw	r22, r24
    28f2:	66 0f       	add	r22, r22
    28f4:	77 1f       	adc	r23, r23
    28f6:	66 0f       	add	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	fb 01       	movw	r30, r22
    28fc:	e5 55       	subi	r30, 0x55	; 85
    28fe:	fc 4f       	sbci	r31, 0xFC	; 252
    2900:	81 e0       	ldi	r24, 0x01	; 1
    2902:	40 81       	ld	r20, Z
    2904:	51 81       	ldd	r21, Z+1	; 0x01
    2906:	62 81       	ldd	r22, Z+2	; 0x02
    2908:	73 81       	ldd	r23, Z+3	; 0x03
    290a:	45 2b       	or	r20, r21
    290c:	46 2b       	or	r20, r22
    290e:	47 2b       	or	r20, r23
    2910:	09 f4       	brne	.+2      	; 0x2914 <is_aperture+0x38>
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	08 95       	ret

00002916 <enable_spad_bit>:
    2916:	cf 92       	push	r12
    2918:	df 92       	push	r13
    291a:	ef 92       	push	r14
    291c:	ff 92       	push	r15
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	68 01       	movw	r12, r16
    2924:	79 01       	movw	r14, r18
    2926:	68 94       	set
    2928:	12 f8       	bld	r1, 2
    292a:	f6 94       	lsr	r15
    292c:	e7 94       	ror	r14
    292e:	d7 94       	ror	r13
    2930:	c7 94       	ror	r12
    2932:	16 94       	lsr	r1
    2934:	d1 f7       	brne	.-12     	; 0x292a <enable_spad_bit+0x14>
    2936:	07 70       	andi	r16, 0x07	; 7
    2938:	11 27       	eor	r17, r17
    293a:	22 27       	eor	r18, r18
    293c:	33 27       	eor	r19, r19
    293e:	c4 16       	cp	r12, r20
    2940:	d5 06       	cpc	r13, r21
    2942:	e6 06       	cpc	r14, r22
    2944:	f7 06       	cpc	r15, r23
    2946:	78 f4       	brcc	.+30     	; 0x2966 <enable_spad_bit+0x50>
    2948:	fc 01       	movw	r30, r24
    294a:	ec 0d       	add	r30, r12
    294c:	fd 1d       	adc	r31, r13
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	90 e0       	ldi	r25, 0x00	; 0
    2952:	02 c0       	rjmp	.+4      	; 0x2958 <enable_spad_bit+0x42>
    2954:	88 0f       	add	r24, r24
    2956:	99 1f       	adc	r25, r25
    2958:	0a 95       	dec	r16
    295a:	e2 f7       	brpl	.-8      	; 0x2954 <enable_spad_bit+0x3e>
    295c:	90 81       	ld	r25, Z
    295e:	89 2b       	or	r24, r25
    2960:	80 83       	st	Z, r24
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	01 c0       	rjmp	.+2      	; 0x2968 <enable_spad_bit+0x52>
    2966:	8e ec       	ldi	r24, 0xCE	; 206
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	df 90       	pop	r13
    2972:	cf 90       	pop	r12
    2974:	08 95       	ret

00002976 <set_ref_spad_map>:
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	ab 01       	movw	r20, r22
    297c:	06 e0       	ldi	r16, 0x06	; 6
    297e:	10 e0       	ldi	r17, 0x00	; 0
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	60 eb       	ldi	r22, 0xB0	; 176
    2986:	0e 94 ce 2c 	call	0x599c	; 0x599c <VL53L0X_WriteMulti>
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	08 95       	ret

00002990 <get_ref_spad_map>:
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	ab 01       	movw	r20, r22
    2996:	06 e0       	ldi	r16, 0x06	; 6
    2998:	10 e0       	ldi	r17, 0x00	; 0
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	60 eb       	ldi	r22, 0xB0	; 176
    29a0:	0e 94 e6 2c 	call	0x59cc	; 0x59cc <VL53L0X_ReadMulti>
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <enable_ref_spads>:
    29aa:	3f 92       	push	r3
    29ac:	4f 92       	push	r4
    29ae:	5f 92       	push	r5
    29b0:	6f 92       	push	r6
    29b2:	7f 92       	push	r7
    29b4:	8f 92       	push	r8
    29b6:	9f 92       	push	r9
    29b8:	af 92       	push	r10
    29ba:	bf 92       	push	r11
    29bc:	cf 92       	push	r12
    29be:	df 92       	push	r13
    29c0:	ef 92       	push	r14
    29c2:	ff 92       	push	r15
    29c4:	0f 93       	push	r16
    29c6:	1f 93       	push	r17
    29c8:	cf 93       	push	r28
    29ca:	df 93       	push	r29
    29cc:	cd b7       	in	r28, 0x3d	; 61
    29ce:	de b7       	in	r29, 0x3e	; 62
    29d0:	64 97       	sbiw	r28, 0x14	; 20
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
    29dc:	9c 8b       	std	Y+20, r25	; 0x14
    29de:	8b 8b       	std	Y+19, r24	; 0x13
    29e0:	36 2e       	mov	r3, r22
    29e2:	5a 8b       	std	Y+18, r21	; 0x12
    29e4:	49 8b       	std	Y+17, r20	; 0x11
    29e6:	38 8b       	std	Y+16, r19	; 0x10
    29e8:	2f 87       	std	Y+15, r18	; 0x0f
    29ea:	eb 86       	std	Y+11, r14	; 0x0b
    29ec:	fc 86       	std	Y+12, r15	; 0x0c
    29ee:	0d 87       	std	Y+13, r16	; 0x0d
    29f0:	1e 87       	std	Y+14, r17	; 0x0e
    29f2:	25 01       	movw	r4, r10
    29f4:	36 01       	movw	r6, r12
    29f6:	28 a5       	ldd	r18, Y+40	; 0x28
    29f8:	39 a5       	ldd	r19, Y+41	; 0x29
    29fa:	4a a5       	ldd	r20, Y+42	; 0x2a
    29fc:	5b a5       	ldd	r21, Y+43	; 0x2b
    29fe:	29 83       	std	Y+1, r18	; 0x01
    2a00:	3a 83       	std	Y+2, r19	; 0x02
    2a02:	4b 83       	std	Y+3, r20	; 0x03
    2a04:	5c 83       	std	Y+4, r21	; 0x04
    2a06:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a08:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a0a:	ae a5       	ldd	r26, Y+46	; 0x2e
    2a0c:	bf a5       	ldd	r27, Y+47	; 0x2f
    2a0e:	89 2b       	or	r24, r25
    2a10:	8a 2b       	or	r24, r26
    2a12:	8b 2b       	or	r24, r27
    2a14:	09 f4       	brne	.+2      	; 0x2a18 <enable_ref_spads+0x6e>
    2a16:	7a c0       	rjmp	.+244    	; 0x2b0c <enable_ref_spads+0x162>
    2a18:	81 2c       	mov	r8, r1
    2a1a:	91 2c       	mov	r9, r1
    2a1c:	54 01       	movw	r10, r8
    2a1e:	de 01       	movw	r26, r28
    2a20:	11 96       	adiw	r26, 0x01	; 1
    2a22:	7d 01       	movw	r14, r26
    2a24:	08 a5       	ldd	r16, Y+40	; 0x28
    2a26:	19 a5       	ldd	r17, Y+41	; 0x29
    2a28:	2a a5       	ldd	r18, Y+42	; 0x2a
    2a2a:	3b a5       	ldd	r19, Y+43	; 0x2b
    2a2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a2e:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a30:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a32:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a34:	89 89       	ldd	r24, Y+17	; 0x11
    2a36:	9a 89       	ldd	r25, Y+18	; 0x12
    2a38:	cf de       	rcall	.-610    	; 0x27d8 <get_next_good_spad>
    2a3a:	c9 80       	ldd	r12, Y+1	; 0x01
    2a3c:	da 80       	ldd	r13, Y+2	; 0x02
    2a3e:	eb 80       	ldd	r14, Y+3	; 0x03
    2a40:	fc 80       	ldd	r15, Y+4	; 0x04
    2a42:	bf ef       	ldi	r27, 0xFF	; 255
    2a44:	cb 16       	cp	r12, r27
    2a46:	db 06       	cpc	r13, r27
    2a48:	eb 06       	cpc	r14, r27
    2a4a:	fb 06       	cpc	r15, r27
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <enable_ref_spads+0xa6>
    2a4e:	72 c0       	rjmp	.+228    	; 0x2b34 <enable_ref_spads+0x18a>
    2a50:	c7 01       	movw	r24, r14
    2a52:	b6 01       	movw	r22, r12
    2a54:	64 0d       	add	r22, r4
    2a56:	75 1d       	adc	r23, r5
    2a58:	86 1d       	adc	r24, r6
    2a5a:	97 1d       	adc	r25, r7
    2a5c:	3f df       	rcall	.-386    	; 0x28dc <is_aperture>
    2a5e:	83 11       	cpse	r24, r3
    2a60:	69 c0       	rjmp	.+210    	; 0x2b34 <enable_ref_spads+0x18a>
    2a62:	97 01       	movw	r18, r14
    2a64:	86 01       	movw	r16, r12
    2a66:	4b 85       	ldd	r20, Y+11	; 0x0b
    2a68:	5c 85       	ldd	r21, Y+12	; 0x0c
    2a6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a70:	98 89       	ldd	r25, Y+16	; 0x10
    2a72:	51 df       	rcall	.-350    	; 0x2916 <enable_spad_bit>
    2a74:	a7 01       	movw	r20, r14
    2a76:	96 01       	movw	r18, r12
    2a78:	2f 5f       	subi	r18, 0xFF	; 255
    2a7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a7c:	4f 4f       	sbci	r20, 0xFF	; 255
    2a7e:	5f 4f       	sbci	r21, 0xFF	; 255
    2a80:	28 a7       	std	Y+40, r18	; 0x28
    2a82:	39 a7       	std	Y+41, r19	; 0x29
    2a84:	4a a7       	std	Y+42, r20	; 0x2a
    2a86:	5b a7       	std	Y+43, r21	; 0x2b
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	83 1a       	sub	r8, r19
    2a8c:	93 0a       	sbc	r9, r19
    2a8e:	a3 0a       	sbc	r10, r19
    2a90:	b3 0a       	sbc	r11, r19
    2a92:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a94:	9d a5       	ldd	r25, Y+45	; 0x2d
    2a96:	ae a5       	ldd	r26, Y+46	; 0x2e
    2a98:	bf a5       	ldd	r27, Y+47	; 0x2f
    2a9a:	88 15       	cp	r24, r8
    2a9c:	99 05       	cpc	r25, r9
    2a9e:	aa 05       	cpc	r26, r10
    2aa0:	bb 05       	cpc	r27, r11
    2aa2:	09 f0       	breq	.+2      	; 0x2aa6 <enable_ref_spads+0xfc>
    2aa4:	bc cf       	rjmp	.-136    	; 0x2a1e <enable_ref_spads+0x74>
    2aa6:	32 c0       	rjmp	.+100    	; 0x2b0c <enable_ref_spads+0x162>
    2aa8:	be 01       	movw	r22, r28
    2aaa:	6b 5f       	subi	r22, 0xFB	; 251
    2aac:	7f 4f       	sbci	r23, 0xFF	; 255
    2aae:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab2:	6e df       	rcall	.-292    	; 0x2990 <get_ref_spad_map>
    2ab4:	2b 85       	ldd	r18, Y+11	; 0x0b
    2ab6:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ab8:	4d 85       	ldd	r20, Y+13	; 0x0d
    2aba:	5e 85       	ldd	r21, Y+14	; 0x0e
    2abc:	23 2b       	or	r18, r19
    2abe:	24 2b       	or	r18, r20
    2ac0:	25 2b       	or	r18, r21
    2ac2:	09 f4       	brne	.+2      	; 0x2ac6 <enable_ref_spads+0x11c>
    2ac4:	43 c0       	rjmp	.+134    	; 0x2b4c <enable_ref_spads+0x1a2>
    2ac6:	af 85       	ldd	r26, Y+15	; 0x0f
    2ac8:	b8 89       	ldd	r27, Y+16	; 0x10
    2aca:	2c 91       	ld	r18, X
    2acc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ace:	29 13       	cpse	r18, r25
    2ad0:	19 c0       	rjmp	.+50     	; 0x2b04 <enable_ref_spads+0x15a>
    2ad2:	11 96       	adiw	r26, 0x01	; 1
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	36 96       	adiw	r30, 0x06	; 6
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	50 e0       	ldi	r21, 0x00	; 0
    2adc:	ba 01       	movw	r22, r20
    2ade:	cb 84       	ldd	r12, Y+11	; 0x0b
    2ae0:	dc 84       	ldd	r13, Y+12	; 0x0c
    2ae2:	ed 84       	ldd	r14, Y+13	; 0x0d
    2ae4:	fe 84       	ldd	r15, Y+14	; 0x0e
    2ae6:	04 c0       	rjmp	.+8      	; 0x2af0 <enable_ref_spads+0x146>
    2ae8:	2d 91       	ld	r18, X+
    2aea:	91 91       	ld	r25, Z+
    2aec:	29 13       	cpse	r18, r25
    2aee:	0c c0       	rjmp	.+24     	; 0x2b08 <enable_ref_spads+0x15e>
    2af0:	4f 5f       	subi	r20, 0xFF	; 255
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	6f 4f       	sbci	r22, 0xFF	; 255
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	c4 16       	cp	r12, r20
    2afa:	d5 06       	cpc	r13, r21
    2afc:	e6 06       	cpc	r14, r22
    2afe:	f7 06       	cpc	r15, r23
    2b00:	99 f7       	brne	.-26     	; 0x2ae8 <enable_ref_spads+0x13e>
    2b02:	24 c0       	rjmp	.+72     	; 0x2b4c <enable_ref_spads+0x1a2>
    2b04:	8e ec       	ldi	r24, 0xCE	; 206
    2b06:	22 c0       	rjmp	.+68     	; 0x2b4c <enable_ref_spads+0x1a2>
    2b08:	8e ec       	ldi	r24, 0xCE	; 206
    2b0a:	20 c0       	rjmp	.+64     	; 0x2b4c <enable_ref_spads+0x1a2>
    2b0c:	28 a5       	ldd	r18, Y+40	; 0x28
    2b0e:	39 a5       	ldd	r19, Y+41	; 0x29
    2b10:	4a a5       	ldd	r20, Y+42	; 0x2a
    2b12:	5b a5       	ldd	r21, Y+43	; 0x2b
    2b14:	a8 a9       	ldd	r26, Y+48	; 0x30
    2b16:	b9 a9       	ldd	r27, Y+49	; 0x31
    2b18:	2d 93       	st	X+, r18
    2b1a:	3d 93       	st	X+, r19
    2b1c:	4d 93       	st	X+, r20
    2b1e:	5c 93       	st	X, r21
    2b20:	13 97       	sbiw	r26, 0x03	; 3
    2b22:	6f 85       	ldd	r22, Y+15	; 0x0f
    2b24:	78 89       	ldd	r23, Y+16	; 0x10
    2b26:	8b 89       	ldd	r24, Y+19	; 0x13
    2b28:	9c 89       	ldd	r25, Y+20	; 0x14
    2b2a:	25 df       	rcall	.-438    	; 0x2976 <set_ref_spad_map>
    2b2c:	88 23       	and	r24, r24
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <enable_ref_spads+0x188>
    2b30:	bb cf       	rjmp	.-138    	; 0x2aa8 <enable_ref_spads+0xfe>
    2b32:	0c c0       	rjmp	.+24     	; 0x2b4c <enable_ref_spads+0x1a2>
    2b34:	28 a5       	ldd	r18, Y+40	; 0x28
    2b36:	39 a5       	ldd	r19, Y+41	; 0x29
    2b38:	4a a5       	ldd	r20, Y+42	; 0x2a
    2b3a:	5b a5       	ldd	r21, Y+43	; 0x2b
    2b3c:	a8 a9       	ldd	r26, Y+48	; 0x30
    2b3e:	b9 a9       	ldd	r27, Y+49	; 0x31
    2b40:	2d 93       	st	X+, r18
    2b42:	3d 93       	st	X+, r19
    2b44:	4d 93       	st	X+, r20
    2b46:	5c 93       	st	X, r21
    2b48:	13 97       	sbiw	r26, 0x03	; 3
    2b4a:	8e ec       	ldi	r24, 0xCE	; 206
    2b4c:	64 96       	adiw	r28, 0x14	; 20
    2b4e:	0f b6       	in	r0, 0x3f	; 63
    2b50:	f8 94       	cli
    2b52:	de bf       	out	0x3e, r29	; 62
    2b54:	0f be       	out	0x3f, r0	; 63
    2b56:	cd bf       	out	0x3d, r28	; 61
    2b58:	df 91       	pop	r29
    2b5a:	cf 91       	pop	r28
    2b5c:	1f 91       	pop	r17
    2b5e:	0f 91       	pop	r16
    2b60:	ff 90       	pop	r15
    2b62:	ef 90       	pop	r14
    2b64:	df 90       	pop	r13
    2b66:	cf 90       	pop	r12
    2b68:	bf 90       	pop	r11
    2b6a:	af 90       	pop	r10
    2b6c:	9f 90       	pop	r9
    2b6e:	8f 90       	pop	r8
    2b70:	7f 90       	pop	r7
    2b72:	6f 90       	pop	r6
    2b74:	5f 90       	pop	r5
    2b76:	4f 90       	pop	r4
    2b78:	3f 90       	pop	r3
    2b7a:	08 95       	ret

00002b7c <perform_ref_signal_measurement>:
    2b7c:	cf 92       	push	r12
    2b7e:	df 92       	push	r13
    2b80:	ff 92       	push	r15
    2b82:	0f 93       	push	r16
    2b84:	1f 93       	push	r17
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	cd b7       	in	r28, 0x3d	; 61
    2b8c:	de b7       	in	r29, 0x3e	; 62
    2b8e:	69 97       	sbiw	r28, 0x19	; 25
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	8c 01       	movw	r16, r24
    2b9c:	6b 01       	movw	r12, r22
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	e3 5e       	subi	r30, 0xE3	; 227
    2ba2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ba4:	f0 80       	ld	r15, Z
    2ba6:	40 ec       	ldi	r20, 0xC0	; 192
    2ba8:	61 e0       	ldi	r22, 0x01	; 1
    2baa:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2bae:	81 11       	cpse	r24, r1
    2bb0:	1a c0       	rjmp	.+52     	; 0x2be6 <perform_ref_signal_measurement+0x6a>
    2bb2:	be 01       	movw	r22, r28
    2bb4:	6f 5f       	subi	r22, 0xFF	; 255
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	c8 01       	movw	r24, r16
    2bba:	79 db       	rcall	.-2318   	; 0x22ae <VL53L0X_PerformSingleRangingMeasurement>
    2bbc:	81 11       	cpse	r24, r1
    2bbe:	20 c0       	rjmp	.+64     	; 0x2c00 <perform_ref_signal_measurement+0x84>
    2bc0:	41 e0       	ldi	r20, 0x01	; 1
    2bc2:	6f ef       	ldi	r22, 0xFF	; 255
    2bc4:	c8 01       	movw	r24, r16
    2bc6:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2bca:	81 11       	cpse	r24, r1
    2bcc:	19 c0       	rjmp	.+50     	; 0x2c00 <perform_ref_signal_measurement+0x84>
    2bce:	a6 01       	movw	r20, r12
    2bd0:	66 eb       	ldi	r22, 0xB6	; 182
    2bd2:	c8 01       	movw	r24, r16
    2bd4:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    2bd8:	81 11       	cpse	r24, r1
    2bda:	12 c0       	rjmp	.+36     	; 0x2c00 <perform_ref_signal_measurement+0x84>
    2bdc:	40 e0       	ldi	r20, 0x00	; 0
    2bde:	6f ef       	ldi	r22, 0xFF	; 255
    2be0:	c8 01       	movw	r24, r16
    2be2:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2be6:	81 11       	cpse	r24, r1
    2be8:	0b c0       	rjmp	.+22     	; 0x2c00 <perform_ref_signal_measurement+0x84>
    2bea:	4f 2d       	mov	r20, r15
    2bec:	61 e0       	ldi	r22, 0x01	; 1
    2bee:	c8 01       	movw	r24, r16
    2bf0:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2bf4:	81 11       	cpse	r24, r1
    2bf6:	04 c0       	rjmp	.+8      	; 0x2c00 <perform_ref_signal_measurement+0x84>
    2bf8:	f8 01       	movw	r30, r16
    2bfa:	e3 5e       	subi	r30, 0xE3	; 227
    2bfc:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfe:	f0 82       	st	Z, r15
    2c00:	69 96       	adiw	r28, 0x19	; 25
    2c02:	0f b6       	in	r0, 0x3f	; 63
    2c04:	f8 94       	cli
    2c06:	de bf       	out	0x3e, r29	; 62
    2c08:	0f be       	out	0x3f, r0	; 63
    2c0a:	cd bf       	out	0x3d, r28	; 61
    2c0c:	df 91       	pop	r29
    2c0e:	cf 91       	pop	r28
    2c10:	1f 91       	pop	r17
    2c12:	0f 91       	pop	r16
    2c14:	ff 90       	pop	r15
    2c16:	df 90       	pop	r13
    2c18:	cf 90       	pop	r12
    2c1a:	08 95       	ret

00002c1c <VL53L0X_set_reference_spads>:
    2c1c:	6f 92       	push	r6
    2c1e:	7f 92       	push	r7
    2c20:	8f 92       	push	r8
    2c22:	9f 92       	push	r9
    2c24:	af 92       	push	r10
    2c26:	bf 92       	push	r11
    2c28:	cf 92       	push	r12
    2c2a:	df 92       	push	r13
    2c2c:	ef 92       	push	r14
    2c2e:	ff 92       	push	r15
    2c30:	0f 93       	push	r16
    2c32:	1f 93       	push	r17
    2c34:	cf 93       	push	r28
    2c36:	df 93       	push	r29
    2c38:	00 d0       	rcall	.+0      	; 0x2c3a <VL53L0X_set_reference_spads+0x1e>
    2c3a:	00 d0       	rcall	.+0      	; 0x2c3c <VL53L0X_set_reference_spads+0x20>
    2c3c:	cd b7       	in	r28, 0x3d	; 61
    2c3e:	de b7       	in	r29, 0x3e	; 62
    2c40:	4c 01       	movw	r8, r24
    2c42:	64 2e       	mov	r6, r20
    2c44:	15 2f       	mov	r17, r21
    2c46:	06 2f       	mov	r16, r22
    2c48:	b7 2e       	mov	r11, r23
    2c4a:	72 2e       	mov	r7, r18
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	6f ef       	ldi	r22, 0xFF	; 255
    2c50:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2c54:	81 11       	cpse	r24, r1
    2c56:	1a c0       	rjmp	.+52     	; 0x2c8c <VL53L0X_set_reference_spads+0x70>
    2c58:	40 e0       	ldi	r20, 0x00	; 0
    2c5a:	6f e4       	ldi	r22, 0x4F	; 79
    2c5c:	c4 01       	movw	r24, r8
    2c5e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2c62:	81 11       	cpse	r24, r1
    2c64:	13 c0       	rjmp	.+38     	; 0x2c8c <VL53L0X_set_reference_spads+0x70>
    2c66:	4c e2       	ldi	r20, 0x2C	; 44
    2c68:	6e e4       	ldi	r22, 0x4E	; 78
    2c6a:	c4 01       	movw	r24, r8
    2c6c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2c70:	81 11       	cpse	r24, r1
    2c72:	0c c0       	rjmp	.+24     	; 0x2c8c <VL53L0X_set_reference_spads+0x70>
    2c74:	40 e0       	ldi	r20, 0x00	; 0
    2c76:	6f ef       	ldi	r22, 0xFF	; 255
    2c78:	c4 01       	movw	r24, r8
    2c7a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2c7e:	81 11       	cpse	r24, r1
    2c80:	05 c0       	rjmp	.+10     	; 0x2c8c <VL53L0X_set_reference_spads+0x70>
    2c82:	44 eb       	ldi	r20, 0xB4	; 180
    2c84:	66 eb       	ldi	r22, 0xB6	; 182
    2c86:	c4 01       	movw	r24, r8
    2c88:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2c8c:	f4 01       	movw	r30, r8
    2c8e:	ef 5e       	subi	r30, 0xEF	; 239
    2c90:	fe 4f       	sbci	r31, 0xFE	; 254
    2c92:	10 82       	st	Z, r1
    2c94:	31 96       	adiw	r30, 0x01	; 1
    2c96:	10 82       	st	Z, r1
    2c98:	31 96       	adiw	r30, 0x01	; 1
    2c9a:	10 82       	st	Z, r1
    2c9c:	31 96       	adiw	r30, 0x01	; 1
    2c9e:	10 82       	st	Z, r1
    2ca0:	31 96       	adiw	r30, 0x01	; 1
    2ca2:	10 82       	st	Z, r1
    2ca4:	31 96       	adiw	r30, 0x01	; 1
    2ca6:	10 82       	st	Z, r1
    2ca8:	71 10       	cpse	r7, r1
    2caa:	0a c0       	rjmp	.+20     	; 0x2cc0 <VL53L0X_set_reference_spads+0xa4>
    2cac:	c1 2c       	mov	r12, r1
    2cae:	d1 2c       	mov	r13, r1
    2cb0:	76 01       	movw	r14, r12
    2cb2:	18 c0       	rjmp	.+48     	; 0x2ce4 <VL53L0X_set_reference_spads+0xc8>
    2cb4:	2f ef       	ldi	r18, 0xFF	; 255
    2cb6:	c2 1a       	sub	r12, r18
    2cb8:	d2 0a       	sbc	r13, r18
    2cba:	e2 0a       	sbc	r14, r18
    2cbc:	f2 0a       	sbc	r15, r18
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <VL53L0X_set_reference_spads+0xaa>
    2cc0:	c1 2c       	mov	r12, r1
    2cc2:	d1 2c       	mov	r13, r1
    2cc4:	76 01       	movw	r14, r12
    2cc6:	c7 01       	movw	r24, r14
    2cc8:	b6 01       	movw	r22, r12
    2cca:	6c 54       	subi	r22, 0x4C	; 76
    2ccc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cce:	8f 4f       	sbci	r24, 0xFF	; 255
    2cd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2cd2:	04 de       	rcall	.-1016   	; 0x28dc <is_aperture>
    2cd4:	81 11       	cpse	r24, r1
    2cd6:	06 c0       	rjmp	.+12     	; 0x2ce4 <VL53L0X_set_reference_spads+0xc8>
    2cd8:	3c e2       	ldi	r19, 0x2C	; 44
    2cda:	c3 16       	cp	r12, r19
    2cdc:	d1 04       	cpc	r13, r1
    2cde:	e1 04       	cpc	r14, r1
    2ce0:	f1 04       	cpc	r15, r1
    2ce2:	41 f7       	brne	.-48     	; 0x2cb4 <VL53L0X_set_reference_spads+0x98>
    2ce4:	ce 01       	movw	r24, r28
    2ce6:	01 96       	adiw	r24, 0x01	; 1
    2ce8:	9f 93       	push	r25
    2cea:	8f 93       	push	r24
    2cec:	bf 92       	push	r11
    2cee:	0f 93       	push	r16
    2cf0:	1f 93       	push	r17
    2cf2:	6f 92       	push	r6
    2cf4:	ff 92       	push	r15
    2cf6:	ef 92       	push	r14
    2cf8:	df 92       	push	r13
    2cfa:	cf 92       	push	r12
    2cfc:	0f 2e       	mov	r0, r31
    2cfe:	f4 eb       	ldi	r31, 0xB4	; 180
    2d00:	af 2e       	mov	r10, r31
    2d02:	b1 2c       	mov	r11, r1
    2d04:	c1 2c       	mov	r12, r1
    2d06:	d1 2c       	mov	r13, r1
    2d08:	f0 2d       	mov	r31, r0
    2d0a:	16 e0       	ldi	r17, 0x06	; 6
    2d0c:	e1 2e       	mov	r14, r17
    2d0e:	f1 2c       	mov	r15, r1
    2d10:	00 e0       	ldi	r16, 0x00	; 0
    2d12:	10 e0       	ldi	r17, 0x00	; 0
    2d14:	94 01       	movw	r18, r8
    2d16:	2f 5e       	subi	r18, 0xEF	; 239
    2d18:	3e 4f       	sbci	r19, 0xFE	; 254
    2d1a:	a4 01       	movw	r20, r8
    2d1c:	49 5e       	subi	r20, 0xE9	; 233
    2d1e:	5e 4f       	sbci	r21, 0xFE	; 254
    2d20:	67 2d       	mov	r22, r7
    2d22:	c4 01       	movw	r24, r8
    2d24:	42 de       	rcall	.-892    	; 0x29aa <enable_ref_spads>
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	81 11       	cpse	r24, r1
    2d32:	09 c0       	rjmp	.+18     	; 0x2d46 <VL53L0X_set_reference_spads+0x12a>
    2d34:	f4 01       	movw	r30, r8
    2d36:	ec 5f       	subi	r30, 0xFC	; 252
    2d38:	fe 4f       	sbci	r31, 0xFE	; 254
    2d3a:	91 e0       	ldi	r25, 0x01	; 1
    2d3c:	90 83       	st	Z, r25
    2d3e:	32 97       	sbiw	r30, 0x02	; 2
    2d40:	60 82       	st	Z, r6
    2d42:	31 96       	adiw	r30, 0x01	; 1
    2d44:	70 82       	st	Z, r7
    2d46:	0f 90       	pop	r0
    2d48:	0f 90       	pop	r0
    2d4a:	0f 90       	pop	r0
    2d4c:	0f 90       	pop	r0
    2d4e:	df 91       	pop	r29
    2d50:	cf 91       	pop	r28
    2d52:	1f 91       	pop	r17
    2d54:	0f 91       	pop	r16
    2d56:	ff 90       	pop	r15
    2d58:	ef 90       	pop	r14
    2d5a:	df 90       	pop	r13
    2d5c:	cf 90       	pop	r12
    2d5e:	bf 90       	pop	r11
    2d60:	af 90       	pop	r10
    2d62:	9f 90       	pop	r9
    2d64:	8f 90       	pop	r8
    2d66:	7f 90       	pop	r7
    2d68:	6f 90       	pop	r6
    2d6a:	08 95       	ret

00002d6c <VL53L0X_perform_single_ref_calibration>:
=======
    24aa:	0f 93       	push	r16
    24ac:	1f 93       	push	r17
    24ae:	cf 93       	push	r28
    24b0:	df 93       	push	r29
    24b2:	00 d0       	rcall	.+0      	; 0x24b4 <VL53L0X_get_offset_calibration_data_micro_meter+0xa>
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	8b 01       	movw	r16, r22
    24ba:	ae 01       	movw	r20, r28
    24bc:	4f 5f       	subi	r20, 0xFF	; 255
    24be:	5f 4f       	sbci	r21, 0xFF	; 255
    24c0:	68 e2       	ldi	r22, 0x28	; 40
    24c2:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    24c6:	81 11       	cpse	r24, r1
    24c8:	27 c0       	rjmp	.+78     	; 0x2518 <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    24ca:	29 81       	ldd	r18, Y+1	; 0x01
    24cc:	3a 81       	ldd	r19, Y+2	; 0x02
    24ce:	3f 70       	andi	r19, 0x0F	; 15
    24d0:	21 15       	cp	r18, r1
    24d2:	98 e0       	ldi	r25, 0x08	; 8
    24d4:	39 07       	cpc	r19, r25
    24d6:	88 f0       	brcs	.+34     	; 0x24fa <VL53L0X_get_offset_calibration_data_micro_meter+0x50>
    24d8:	30 51       	subi	r19, 0x10	; 16
    24da:	9a ef       	ldi	r25, 0xFA	; 250
    24dc:	92 9f       	mul	r25, r18
    24de:	a0 01       	movw	r20, r0
    24e0:	93 9f       	mul	r25, r19
    24e2:	50 0d       	add	r21, r0
    24e4:	11 24       	eor	r1, r1
    24e6:	05 2e       	mov	r0, r21
    24e8:	00 0c       	add	r0, r0
    24ea:	66 0b       	sbc	r22, r22
    24ec:	77 0b       	sbc	r23, r23
    24ee:	f8 01       	movw	r30, r16
    24f0:	40 83       	st	Z, r20
    24f2:	51 83       	std	Z+1, r21	; 0x01
    24f4:	62 83       	std	Z+2, r22	; 0x02
    24f6:	73 83       	std	Z+3, r23	; 0x03
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    24fa:	9a ef       	ldi	r25, 0xFA	; 250
    24fc:	92 9f       	mul	r25, r18
    24fe:	a0 01       	movw	r20, r0
    2500:	93 9f       	mul	r25, r19
    2502:	50 0d       	add	r21, r0
    2504:	11 24       	eor	r1, r1
    2506:	05 2e       	mov	r0, r21
    2508:	00 0c       	add	r0, r0
    250a:	66 0b       	sbc	r22, r22
    250c:	77 0b       	sbc	r23, r23
    250e:	f8 01       	movw	r30, r16
    2510:	40 83       	st	Z, r20
    2512:	51 83       	std	Z+1, r21	; 0x01
    2514:	62 83       	std	Z+2, r22	; 0x02
    2516:	73 83       	std	Z+3, r23	; 0x03
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	1f 91       	pop	r17
    2522:	0f 91       	pop	r16
    2524:	08 95       	ret

00002526 <get_next_good_spad>:
    2526:	7f 92       	push	r7
    2528:	8f 92       	push	r8
    252a:	9f 92       	push	r9
    252c:	af 92       	push	r10
    252e:	bf 92       	push	r11
    2530:	cf 92       	push	r12
    2532:	df 92       	push	r13
    2534:	ef 92       	push	r14
    2536:	ff 92       	push	r15
    2538:	0f 93       	push	r16
    253a:	1f 93       	push	r17
    253c:	cf 93       	push	r28
    253e:	df 93       	push	r29
    2540:	e7 01       	movw	r28, r14
    2542:	cc 24       	eor	r12, r12
    2544:	ca 94       	dec	r12
    2546:	dc 2c       	mov	r13, r12
    2548:	76 01       	movw	r14, r12
    254a:	c8 82       	st	Y, r12
    254c:	d9 82       	std	Y+1, r13	; 0x01
    254e:	ea 82       	std	Y+2, r14	; 0x02
    2550:	fb 82       	std	Y+3, r15	; 0x03
    2552:	68 01       	movw	r12, r16
    2554:	79 01       	movw	r14, r18
    2556:	68 94       	set
    2558:	12 f8       	bld	r1, 2
    255a:	f6 94       	lsr	r15
    255c:	e7 94       	ror	r14
    255e:	d7 94       	ror	r13
    2560:	c7 94       	ror	r12
    2562:	16 94       	lsr	r1
    2564:	d1 f7       	brne	.-12     	; 0x255a <get_next_good_spad+0x34>
    2566:	48 01       	movw	r8, r16
    2568:	59 01       	movw	r10, r18
    256a:	e7 e0       	ldi	r30, 0x07	; 7
    256c:	8e 22       	and	r8, r30
    256e:	99 24       	eor	r9, r9
    2570:	aa 24       	eor	r10, r10
    2572:	bb 24       	eor	r11, r11
    2574:	c4 16       	cp	r12, r20
    2576:	d5 06       	cpc	r13, r21
    2578:	e6 06       	cpc	r14, r22
    257a:	f7 06       	cpc	r15, r23
    257c:	08 f0       	brcs	.+2      	; 0x2580 <get_next_good_spad+0x5a>
    257e:	47 c0       	rjmp	.+142    	; 0x260e <get_next_good_spad+0xe8>
    2580:	fc 01       	movw	r30, r24
    2582:	ec 0d       	add	r30, r12
    2584:	fd 1d       	adc	r31, r13
    2586:	d7 01       	movw	r26, r14
    2588:	c6 01       	movw	r24, r12
    258a:	71 90       	ld	r7, Z+
    258c:	c8 16       	cp	r12, r24
    258e:	d9 06       	cpc	r13, r25
    2590:	ea 06       	cpc	r14, r26
    2592:	fb 06       	cpc	r15, r27
    2594:	61 f4       	brne	.+24     	; 0x25ae <get_next_good_spad+0x88>
    2596:	27 2d       	mov	r18, r7
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	08 2c       	mov	r0, r8
    259c:	02 c0       	rjmp	.+4      	; 0x25a2 <get_next_good_spad+0x7c>
    259e:	35 95       	asr	r19
    25a0:	27 95       	ror	r18
    25a2:	0a 94       	dec	r0
    25a4:	e2 f7       	brpl	.-8      	; 0x259e <get_next_good_spad+0x78>
    25a6:	72 2e       	mov	r7, r18
    25a8:	95 01       	movw	r18, r10
    25aa:	84 01       	movw	r16, r8
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <get_next_good_spad+0x8e>
    25ae:	00 e0       	ldi	r16, 0x00	; 0
    25b0:	10 e0       	ldi	r17, 0x00	; 0
    25b2:	98 01       	movw	r18, r16
    25b4:	70 fe       	sbrs	r7, 0
    25b6:	18 c0       	rjmp	.+48     	; 0x25e8 <get_next_good_spad+0xc2>
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <get_next_good_spad+0x98>
    25ba:	70 fe       	sbrs	r7, 0
    25bc:	15 c0       	rjmp	.+42     	; 0x25e8 <get_next_good_spad+0xc2>
    25be:	88 0f       	add	r24, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	aa 1f       	adc	r26, r26
    25c4:	bb 1f       	adc	r27, r27
    25c6:	88 0f       	add	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	aa 1f       	adc	r26, r26
    25cc:	bb 1f       	adc	r27, r27
    25ce:	88 0f       	add	r24, r24
    25d0:	99 1f       	adc	r25, r25
    25d2:	aa 1f       	adc	r26, r26
    25d4:	bb 1f       	adc	r27, r27
    25d6:	08 0f       	add	r16, r24
    25d8:	19 1f       	adc	r17, r25
    25da:	2a 1f       	adc	r18, r26
    25dc:	3b 1f       	adc	r19, r27
    25de:	08 83       	st	Y, r16
    25e0:	19 83       	std	Y+1, r17	; 0x01
    25e2:	2a 83       	std	Y+2, r18	; 0x02
    25e4:	3b 83       	std	Y+3, r19	; 0x03
    25e6:	13 c0       	rjmp	.+38     	; 0x260e <get_next_good_spad+0xe8>
    25e8:	76 94       	lsr	r7
    25ea:	0f 5f       	subi	r16, 0xFF	; 255
    25ec:	1f 4f       	sbci	r17, 0xFF	; 255
    25ee:	2f 4f       	sbci	r18, 0xFF	; 255
    25f0:	3f 4f       	sbci	r19, 0xFF	; 255
    25f2:	08 30       	cpi	r16, 0x08	; 8
    25f4:	11 05       	cpc	r17, r1
    25f6:	21 05       	cpc	r18, r1
    25f8:	31 05       	cpc	r19, r1
    25fa:	f8 f2       	brcs	.-66     	; 0x25ba <get_next_good_spad+0x94>
    25fc:	01 96       	adiw	r24, 0x01	; 1
    25fe:	a1 1d       	adc	r26, r1
    2600:	b1 1d       	adc	r27, r1
    2602:	84 17       	cp	r24, r20
    2604:	95 07       	cpc	r25, r21
    2606:	a6 07       	cpc	r26, r22
    2608:	b7 07       	cpc	r27, r23
    260a:	08 f4       	brcc	.+2      	; 0x260e <get_next_good_spad+0xe8>
    260c:	be cf       	rjmp	.-132    	; 0x258a <get_next_good_spad+0x64>
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	ff 90       	pop	r15
    2618:	ef 90       	pop	r14
    261a:	df 90       	pop	r13
    261c:	cf 90       	pop	r12
    261e:	bf 90       	pop	r11
    2620:	af 90       	pop	r10
    2622:	9f 90       	pop	r9
    2624:	8f 90       	pop	r8
    2626:	7f 90       	pop	r7
    2628:	08 95       	ret

0000262a <is_aperture>:
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	68 94       	set
    2630:	15 f8       	bld	r1, 5
    2632:	b6 95       	lsr	r27
    2634:	a7 95       	ror	r26
    2636:	97 95       	ror	r25
    2638:	87 95       	ror	r24
    263a:	16 94       	lsr	r1
    263c:	d1 f7       	brne	.-12     	; 0x2632 <is_aperture+0x8>
    263e:	bc 01       	movw	r22, r24
    2640:	66 0f       	add	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	66 0f       	add	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	fb 01       	movw	r30, r22
    264a:	e5 55       	subi	r30, 0x55	; 85
    264c:	fc 4f       	sbci	r31, 0xFC	; 252
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	40 81       	ld	r20, Z
    2652:	51 81       	ldd	r21, Z+1	; 0x01
    2654:	62 81       	ldd	r22, Z+2	; 0x02
    2656:	73 81       	ldd	r23, Z+3	; 0x03
    2658:	45 2b       	or	r20, r21
    265a:	46 2b       	or	r20, r22
    265c:	47 2b       	or	r20, r23
    265e:	09 f4       	brne	.+2      	; 0x2662 <is_aperture+0x38>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	08 95       	ret

00002664 <enable_spad_bit>:
    2664:	cf 92       	push	r12
    2666:	df 92       	push	r13
    2668:	ef 92       	push	r14
    266a:	ff 92       	push	r15
    266c:	0f 93       	push	r16
    266e:	1f 93       	push	r17
    2670:	68 01       	movw	r12, r16
    2672:	79 01       	movw	r14, r18
    2674:	68 94       	set
    2676:	12 f8       	bld	r1, 2
    2678:	f6 94       	lsr	r15
    267a:	e7 94       	ror	r14
    267c:	d7 94       	ror	r13
    267e:	c7 94       	ror	r12
    2680:	16 94       	lsr	r1
    2682:	d1 f7       	brne	.-12     	; 0x2678 <enable_spad_bit+0x14>
    2684:	07 70       	andi	r16, 0x07	; 7
    2686:	11 27       	eor	r17, r17
    2688:	22 27       	eor	r18, r18
    268a:	33 27       	eor	r19, r19
    268c:	c4 16       	cp	r12, r20
    268e:	d5 06       	cpc	r13, r21
    2690:	e6 06       	cpc	r14, r22
    2692:	f7 06       	cpc	r15, r23
    2694:	78 f4       	brcc	.+30     	; 0x26b4 <enable_spad_bit+0x50>
    2696:	fc 01       	movw	r30, r24
    2698:	ec 0d       	add	r30, r12
    269a:	fd 1d       	adc	r31, r13
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <enable_spad_bit+0x42>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	0a 95       	dec	r16
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <enable_spad_bit+0x3e>
    26aa:	90 81       	ld	r25, Z
    26ac:	89 2b       	or	r24, r25
    26ae:	80 83       	st	Z, r24
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <enable_spad_bit+0x52>
    26b4:	8e ec       	ldi	r24, 0xCE	; 206
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	df 90       	pop	r13
    26c0:	cf 90       	pop	r12
    26c2:	08 95       	ret

000026c4 <set_ref_spad_map>:
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	ab 01       	movw	r20, r22
    26ca:	06 e0       	ldi	r16, 0x06	; 6
    26cc:	10 e0       	ldi	r17, 0x00	; 0
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	60 eb       	ldi	r22, 0xB0	; 176
    26d4:	0e 94 b5 2b 	call	0x576a	; 0x576a <VL53L0X_WriteMulti>
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <get_ref_spad_map>:
    26de:	0f 93       	push	r16
    26e0:	1f 93       	push	r17
    26e2:	ab 01       	movw	r20, r22
    26e4:	06 e0       	ldi	r16, 0x06	; 6
    26e6:	10 e0       	ldi	r17, 0x00	; 0
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	60 eb       	ldi	r22, 0xB0	; 176
    26ee:	0e 94 cd 2b 	call	0x579a	; 0x579a <VL53L0X_ReadMulti>
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	08 95       	ret

000026f8 <enable_ref_spads>:
    26f8:	3f 92       	push	r3
    26fa:	4f 92       	push	r4
    26fc:	5f 92       	push	r5
    26fe:	6f 92       	push	r6
    2700:	7f 92       	push	r7
    2702:	8f 92       	push	r8
    2704:	9f 92       	push	r9
    2706:	af 92       	push	r10
    2708:	bf 92       	push	r11
    270a:	cf 92       	push	r12
    270c:	df 92       	push	r13
    270e:	ef 92       	push	r14
    2710:	ff 92       	push	r15
    2712:	0f 93       	push	r16
    2714:	1f 93       	push	r17
    2716:	cf 93       	push	r28
    2718:	df 93       	push	r29
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	64 97       	sbiw	r28, 0x14	; 20
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	9c 8b       	std	Y+20, r25	; 0x14
    272c:	8b 8b       	std	Y+19, r24	; 0x13
    272e:	36 2e       	mov	r3, r22
    2730:	5a 8b       	std	Y+18, r21	; 0x12
    2732:	49 8b       	std	Y+17, r20	; 0x11
    2734:	38 8b       	std	Y+16, r19	; 0x10
    2736:	2f 87       	std	Y+15, r18	; 0x0f
    2738:	eb 86       	std	Y+11, r14	; 0x0b
    273a:	fc 86       	std	Y+12, r15	; 0x0c
    273c:	0d 87       	std	Y+13, r16	; 0x0d
    273e:	1e 87       	std	Y+14, r17	; 0x0e
    2740:	25 01       	movw	r4, r10
    2742:	36 01       	movw	r6, r12
    2744:	28 a5       	ldd	r18, Y+40	; 0x28
    2746:	39 a5       	ldd	r19, Y+41	; 0x29
    2748:	4a a5       	ldd	r20, Y+42	; 0x2a
    274a:	5b a5       	ldd	r21, Y+43	; 0x2b
    274c:	29 83       	std	Y+1, r18	; 0x01
    274e:	3a 83       	std	Y+2, r19	; 0x02
    2750:	4b 83       	std	Y+3, r20	; 0x03
    2752:	5c 83       	std	Y+4, r21	; 0x04
    2754:	8c a5       	ldd	r24, Y+44	; 0x2c
    2756:	9d a5       	ldd	r25, Y+45	; 0x2d
    2758:	ae a5       	ldd	r26, Y+46	; 0x2e
    275a:	bf a5       	ldd	r27, Y+47	; 0x2f
    275c:	89 2b       	or	r24, r25
    275e:	8a 2b       	or	r24, r26
    2760:	8b 2b       	or	r24, r27
    2762:	09 f4       	brne	.+2      	; 0x2766 <enable_ref_spads+0x6e>
    2764:	7a c0       	rjmp	.+244    	; 0x285a <enable_ref_spads+0x162>
    2766:	81 2c       	mov	r8, r1
    2768:	91 2c       	mov	r9, r1
    276a:	54 01       	movw	r10, r8
    276c:	de 01       	movw	r26, r28
    276e:	11 96       	adiw	r26, 0x01	; 1
    2770:	7d 01       	movw	r14, r26
    2772:	08 a5       	ldd	r16, Y+40	; 0x28
    2774:	19 a5       	ldd	r17, Y+41	; 0x29
    2776:	2a a5       	ldd	r18, Y+42	; 0x2a
    2778:	3b a5       	ldd	r19, Y+43	; 0x2b
    277a:	4b 85       	ldd	r20, Y+11	; 0x0b
    277c:	5c 85       	ldd	r21, Y+12	; 0x0c
    277e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2780:	7e 85       	ldd	r23, Y+14	; 0x0e
    2782:	89 89       	ldd	r24, Y+17	; 0x11
    2784:	9a 89       	ldd	r25, Y+18	; 0x12
    2786:	cf de       	rcall	.-610    	; 0x2526 <get_next_good_spad>
    2788:	c9 80       	ldd	r12, Y+1	; 0x01
    278a:	da 80       	ldd	r13, Y+2	; 0x02
    278c:	eb 80       	ldd	r14, Y+3	; 0x03
    278e:	fc 80       	ldd	r15, Y+4	; 0x04
    2790:	bf ef       	ldi	r27, 0xFF	; 255
    2792:	cb 16       	cp	r12, r27
    2794:	db 06       	cpc	r13, r27
    2796:	eb 06       	cpc	r14, r27
    2798:	fb 06       	cpc	r15, r27
    279a:	09 f4       	brne	.+2      	; 0x279e <enable_ref_spads+0xa6>
    279c:	72 c0       	rjmp	.+228    	; 0x2882 <enable_ref_spads+0x18a>
    279e:	c7 01       	movw	r24, r14
    27a0:	b6 01       	movw	r22, r12
    27a2:	64 0d       	add	r22, r4
    27a4:	75 1d       	adc	r23, r5
    27a6:	86 1d       	adc	r24, r6
    27a8:	97 1d       	adc	r25, r7
    27aa:	3f df       	rcall	.-386    	; 0x262a <is_aperture>
    27ac:	83 11       	cpse	r24, r3
    27ae:	69 c0       	rjmp	.+210    	; 0x2882 <enable_ref_spads+0x18a>
    27b0:	97 01       	movw	r18, r14
    27b2:	86 01       	movw	r16, r12
    27b4:	4b 85       	ldd	r20, Y+11	; 0x0b
    27b6:	5c 85       	ldd	r21, Y+12	; 0x0c
    27b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    27ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    27bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27be:	98 89       	ldd	r25, Y+16	; 0x10
    27c0:	51 df       	rcall	.-350    	; 0x2664 <enable_spad_bit>
    27c2:	a7 01       	movw	r20, r14
    27c4:	96 01       	movw	r18, r12
    27c6:	2f 5f       	subi	r18, 0xFF	; 255
    27c8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ca:	4f 4f       	sbci	r20, 0xFF	; 255
    27cc:	5f 4f       	sbci	r21, 0xFF	; 255
    27ce:	28 a7       	std	Y+40, r18	; 0x28
    27d0:	39 a7       	std	Y+41, r19	; 0x29
    27d2:	4a a7       	std	Y+42, r20	; 0x2a
    27d4:	5b a7       	std	Y+43, r21	; 0x2b
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	83 1a       	sub	r8, r19
    27da:	93 0a       	sbc	r9, r19
    27dc:	a3 0a       	sbc	r10, r19
    27de:	b3 0a       	sbc	r11, r19
    27e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    27e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    27e4:	ae a5       	ldd	r26, Y+46	; 0x2e
    27e6:	bf a5       	ldd	r27, Y+47	; 0x2f
    27e8:	88 15       	cp	r24, r8
    27ea:	99 05       	cpc	r25, r9
    27ec:	aa 05       	cpc	r26, r10
    27ee:	bb 05       	cpc	r27, r11
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <enable_ref_spads+0xfc>
    27f2:	bc cf       	rjmp	.-136    	; 0x276c <enable_ref_spads+0x74>
    27f4:	32 c0       	rjmp	.+100    	; 0x285a <enable_ref_spads+0x162>
    27f6:	be 01       	movw	r22, r28
    27f8:	6b 5f       	subi	r22, 0xFB	; 251
    27fa:	7f 4f       	sbci	r23, 0xFF	; 255
    27fc:	8b 89       	ldd	r24, Y+19	; 0x13
    27fe:	9c 89       	ldd	r25, Y+20	; 0x14
    2800:	6e df       	rcall	.-292    	; 0x26de <get_ref_spad_map>
    2802:	2b 85       	ldd	r18, Y+11	; 0x0b
    2804:	3c 85       	ldd	r19, Y+12	; 0x0c
    2806:	4d 85       	ldd	r20, Y+13	; 0x0d
    2808:	5e 85       	ldd	r21, Y+14	; 0x0e
    280a:	23 2b       	or	r18, r19
    280c:	24 2b       	or	r18, r20
    280e:	25 2b       	or	r18, r21
    2810:	09 f4       	brne	.+2      	; 0x2814 <enable_ref_spads+0x11c>
    2812:	43 c0       	rjmp	.+134    	; 0x289a <enable_ref_spads+0x1a2>
    2814:	af 85       	ldd	r26, Y+15	; 0x0f
    2816:	b8 89       	ldd	r27, Y+16	; 0x10
    2818:	2c 91       	ld	r18, X
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	29 13       	cpse	r18, r25
    281e:	19 c0       	rjmp	.+50     	; 0x2852 <enable_ref_spads+0x15a>
    2820:	11 96       	adiw	r26, 0x01	; 1
    2822:	fe 01       	movw	r30, r28
    2824:	36 96       	adiw	r30, 0x06	; 6
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	ba 01       	movw	r22, r20
    282c:	cb 84       	ldd	r12, Y+11	; 0x0b
    282e:	dc 84       	ldd	r13, Y+12	; 0x0c
    2830:	ed 84       	ldd	r14, Y+13	; 0x0d
    2832:	fe 84       	ldd	r15, Y+14	; 0x0e
    2834:	04 c0       	rjmp	.+8      	; 0x283e <enable_ref_spads+0x146>
    2836:	2d 91       	ld	r18, X+
    2838:	91 91       	ld	r25, Z+
    283a:	29 13       	cpse	r18, r25
    283c:	0c c0       	rjmp	.+24     	; 0x2856 <enable_ref_spads+0x15e>
    283e:	4f 5f       	subi	r20, 0xFF	; 255
    2840:	5f 4f       	sbci	r21, 0xFF	; 255
    2842:	6f 4f       	sbci	r22, 0xFF	; 255
    2844:	7f 4f       	sbci	r23, 0xFF	; 255
    2846:	c4 16       	cp	r12, r20
    2848:	d5 06       	cpc	r13, r21
    284a:	e6 06       	cpc	r14, r22
    284c:	f7 06       	cpc	r15, r23
    284e:	99 f7       	brne	.-26     	; 0x2836 <enable_ref_spads+0x13e>
    2850:	24 c0       	rjmp	.+72     	; 0x289a <enable_ref_spads+0x1a2>
    2852:	8e ec       	ldi	r24, 0xCE	; 206
    2854:	22 c0       	rjmp	.+68     	; 0x289a <enable_ref_spads+0x1a2>
    2856:	8e ec       	ldi	r24, 0xCE	; 206
    2858:	20 c0       	rjmp	.+64     	; 0x289a <enable_ref_spads+0x1a2>
    285a:	28 a5       	ldd	r18, Y+40	; 0x28
    285c:	39 a5       	ldd	r19, Y+41	; 0x29
    285e:	4a a5       	ldd	r20, Y+42	; 0x2a
    2860:	5b a5       	ldd	r21, Y+43	; 0x2b
    2862:	a8 a9       	ldd	r26, Y+48	; 0x30
    2864:	b9 a9       	ldd	r27, Y+49	; 0x31
    2866:	2d 93       	st	X+, r18
    2868:	3d 93       	st	X+, r19
    286a:	4d 93       	st	X+, r20
    286c:	5c 93       	st	X, r21
    286e:	13 97       	sbiw	r26, 0x03	; 3
    2870:	6f 85       	ldd	r22, Y+15	; 0x0f
    2872:	78 89       	ldd	r23, Y+16	; 0x10
    2874:	8b 89       	ldd	r24, Y+19	; 0x13
    2876:	9c 89       	ldd	r25, Y+20	; 0x14
    2878:	25 df       	rcall	.-438    	; 0x26c4 <set_ref_spad_map>
    287a:	88 23       	and	r24, r24
    287c:	09 f4       	brne	.+2      	; 0x2880 <enable_ref_spads+0x188>
    287e:	bb cf       	rjmp	.-138    	; 0x27f6 <enable_ref_spads+0xfe>
    2880:	0c c0       	rjmp	.+24     	; 0x289a <enable_ref_spads+0x1a2>
    2882:	28 a5       	ldd	r18, Y+40	; 0x28
    2884:	39 a5       	ldd	r19, Y+41	; 0x29
    2886:	4a a5       	ldd	r20, Y+42	; 0x2a
    2888:	5b a5       	ldd	r21, Y+43	; 0x2b
    288a:	a8 a9       	ldd	r26, Y+48	; 0x30
    288c:	b9 a9       	ldd	r27, Y+49	; 0x31
    288e:	2d 93       	st	X+, r18
    2890:	3d 93       	st	X+, r19
    2892:	4d 93       	st	X+, r20
    2894:	5c 93       	st	X, r21
    2896:	13 97       	sbiw	r26, 0x03	; 3
    2898:	8e ec       	ldi	r24, 0xCE	; 206
    289a:	64 96       	adiw	r28, 0x14	; 20
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	f8 94       	cli
    28a0:	de bf       	out	0x3e, r29	; 62
    28a2:	0f be       	out	0x3f, r0	; 63
    28a4:	cd bf       	out	0x3d, r28	; 61
    28a6:	df 91       	pop	r29
    28a8:	cf 91       	pop	r28
    28aa:	1f 91       	pop	r17
    28ac:	0f 91       	pop	r16
    28ae:	ff 90       	pop	r15
    28b0:	ef 90       	pop	r14
    28b2:	df 90       	pop	r13
    28b4:	cf 90       	pop	r12
    28b6:	bf 90       	pop	r11
    28b8:	af 90       	pop	r10
    28ba:	9f 90       	pop	r9
    28bc:	8f 90       	pop	r8
    28be:	7f 90       	pop	r7
    28c0:	6f 90       	pop	r6
    28c2:	5f 90       	pop	r5
    28c4:	4f 90       	pop	r4
    28c6:	3f 90       	pop	r3
    28c8:	08 95       	ret

000028ca <perform_ref_signal_measurement>:
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ff 92       	push	r15
    28d0:	0f 93       	push	r16
    28d2:	1f 93       	push	r17
    28d4:	cf 93       	push	r28
    28d6:	df 93       	push	r29
    28d8:	cd b7       	in	r28, 0x3d	; 61
    28da:	de b7       	in	r29, 0x3e	; 62
    28dc:	69 97       	sbiw	r28, 0x19	; 25
    28de:	0f b6       	in	r0, 0x3f	; 63
    28e0:	f8 94       	cli
    28e2:	de bf       	out	0x3e, r29	; 62
    28e4:	0f be       	out	0x3f, r0	; 63
    28e6:	cd bf       	out	0x3d, r28	; 61
    28e8:	8c 01       	movw	r16, r24
    28ea:	6b 01       	movw	r12, r22
    28ec:	fc 01       	movw	r30, r24
    28ee:	e3 5e       	subi	r30, 0xE3	; 227
    28f0:	fe 4f       	sbci	r31, 0xFE	; 254
    28f2:	f0 80       	ld	r15, Z
    28f4:	40 ec       	ldi	r20, 0xC0	; 192
    28f6:	61 e0       	ldi	r22, 0x01	; 1
    28f8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    28fc:	81 11       	cpse	r24, r1
    28fe:	1a c0       	rjmp	.+52     	; 0x2934 <perform_ref_signal_measurement+0x6a>
    2900:	be 01       	movw	r22, r28
    2902:	6f 5f       	subi	r22, 0xFF	; 255
    2904:	7f 4f       	sbci	r23, 0xFF	; 255
    2906:	c8 01       	movw	r24, r16
    2908:	79 db       	rcall	.-2318   	; 0x1ffc <VL53L0X_PerformSingleRangingMeasurement>
    290a:	81 11       	cpse	r24, r1
    290c:	20 c0       	rjmp	.+64     	; 0x294e <perform_ref_signal_measurement+0x84>
    290e:	41 e0       	ldi	r20, 0x01	; 1
    2910:	6f ef       	ldi	r22, 0xFF	; 255
    2912:	c8 01       	movw	r24, r16
    2914:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2918:	81 11       	cpse	r24, r1
    291a:	19 c0       	rjmp	.+50     	; 0x294e <perform_ref_signal_measurement+0x84>
    291c:	a6 01       	movw	r20, r12
    291e:	66 eb       	ldi	r22, 0xB6	; 182
    2920:	c8 01       	movw	r24, r16
    2922:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    2926:	81 11       	cpse	r24, r1
    2928:	12 c0       	rjmp	.+36     	; 0x294e <perform_ref_signal_measurement+0x84>
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	6f ef       	ldi	r22, 0xFF	; 255
    292e:	c8 01       	movw	r24, r16
    2930:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2934:	81 11       	cpse	r24, r1
    2936:	0b c0       	rjmp	.+22     	; 0x294e <perform_ref_signal_measurement+0x84>
    2938:	4f 2d       	mov	r20, r15
    293a:	61 e0       	ldi	r22, 0x01	; 1
    293c:	c8 01       	movw	r24, r16
    293e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2942:	81 11       	cpse	r24, r1
    2944:	04 c0       	rjmp	.+8      	; 0x294e <perform_ref_signal_measurement+0x84>
    2946:	f8 01       	movw	r30, r16
    2948:	e3 5e       	subi	r30, 0xE3	; 227
    294a:	fe 4f       	sbci	r31, 0xFE	; 254
    294c:	f0 82       	st	Z, r15
    294e:	69 96       	adiw	r28, 0x19	; 25
    2950:	0f b6       	in	r0, 0x3f	; 63
    2952:	f8 94       	cli
    2954:	de bf       	out	0x3e, r29	; 62
    2956:	0f be       	out	0x3f, r0	; 63
    2958:	cd bf       	out	0x3d, r28	; 61
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	df 90       	pop	r13
    2966:	cf 90       	pop	r12
    2968:	08 95       	ret

0000296a <VL53L0X_set_reference_spads>:
    296a:	6f 92       	push	r6
    296c:	7f 92       	push	r7
    296e:	8f 92       	push	r8
    2970:	9f 92       	push	r9
    2972:	af 92       	push	r10
    2974:	bf 92       	push	r11
    2976:	cf 92       	push	r12
    2978:	df 92       	push	r13
    297a:	ef 92       	push	r14
    297c:	ff 92       	push	r15
    297e:	0f 93       	push	r16
    2980:	1f 93       	push	r17
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	00 d0       	rcall	.+0      	; 0x2988 <VL53L0X_set_reference_spads+0x1e>
    2988:	00 d0       	rcall	.+0      	; 0x298a <VL53L0X_set_reference_spads+0x20>
    298a:	cd b7       	in	r28, 0x3d	; 61
    298c:	de b7       	in	r29, 0x3e	; 62
    298e:	4c 01       	movw	r8, r24
    2990:	64 2e       	mov	r6, r20
    2992:	15 2f       	mov	r17, r21
    2994:	06 2f       	mov	r16, r22
    2996:	b7 2e       	mov	r11, r23
    2998:	72 2e       	mov	r7, r18
    299a:	41 e0       	ldi	r20, 0x01	; 1
    299c:	6f ef       	ldi	r22, 0xFF	; 255
    299e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    29a2:	81 11       	cpse	r24, r1
    29a4:	1a c0       	rjmp	.+52     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	6f e4       	ldi	r22, 0x4F	; 79
    29aa:	c4 01       	movw	r24, r8
    29ac:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    29b0:	81 11       	cpse	r24, r1
    29b2:	13 c0       	rjmp	.+38     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29b4:	4c e2       	ldi	r20, 0x2C	; 44
    29b6:	6e e4       	ldi	r22, 0x4E	; 78
    29b8:	c4 01       	movw	r24, r8
    29ba:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    29be:	81 11       	cpse	r24, r1
    29c0:	0c c0       	rjmp	.+24     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	6f ef       	ldi	r22, 0xFF	; 255
    29c6:	c4 01       	movw	r24, r8
    29c8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    29cc:	81 11       	cpse	r24, r1
    29ce:	05 c0       	rjmp	.+10     	; 0x29da <VL53L0X_set_reference_spads+0x70>
    29d0:	44 eb       	ldi	r20, 0xB4	; 180
    29d2:	66 eb       	ldi	r22, 0xB6	; 182
    29d4:	c4 01       	movw	r24, r8
    29d6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    29da:	f4 01       	movw	r30, r8
    29dc:	ef 5e       	subi	r30, 0xEF	; 239
    29de:	fe 4f       	sbci	r31, 0xFE	; 254
    29e0:	10 82       	st	Z, r1
    29e2:	31 96       	adiw	r30, 0x01	; 1
    29e4:	10 82       	st	Z, r1
    29e6:	31 96       	adiw	r30, 0x01	; 1
    29e8:	10 82       	st	Z, r1
    29ea:	31 96       	adiw	r30, 0x01	; 1
    29ec:	10 82       	st	Z, r1
    29ee:	31 96       	adiw	r30, 0x01	; 1
    29f0:	10 82       	st	Z, r1
    29f2:	31 96       	adiw	r30, 0x01	; 1
    29f4:	10 82       	st	Z, r1
    29f6:	71 10       	cpse	r7, r1
    29f8:	0a c0       	rjmp	.+20     	; 0x2a0e <VL53L0X_set_reference_spads+0xa4>
    29fa:	c1 2c       	mov	r12, r1
    29fc:	d1 2c       	mov	r13, r1
    29fe:	76 01       	movw	r14, r12
    2a00:	18 c0       	rjmp	.+48     	; 0x2a32 <VL53L0X_set_reference_spads+0xc8>
    2a02:	2f ef       	ldi	r18, 0xFF	; 255
    2a04:	c2 1a       	sub	r12, r18
    2a06:	d2 0a       	sbc	r13, r18
    2a08:	e2 0a       	sbc	r14, r18
    2a0a:	f2 0a       	sbc	r15, r18
    2a0c:	03 c0       	rjmp	.+6      	; 0x2a14 <VL53L0X_set_reference_spads+0xaa>
    2a0e:	c1 2c       	mov	r12, r1
    2a10:	d1 2c       	mov	r13, r1
    2a12:	76 01       	movw	r14, r12
    2a14:	c7 01       	movw	r24, r14
    2a16:	b6 01       	movw	r22, r12
    2a18:	6c 54       	subi	r22, 0x4C	; 76
    2a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    2a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    2a20:	04 de       	rcall	.-1016   	; 0x262a <is_aperture>
    2a22:	81 11       	cpse	r24, r1
    2a24:	06 c0       	rjmp	.+12     	; 0x2a32 <VL53L0X_set_reference_spads+0xc8>
    2a26:	3c e2       	ldi	r19, 0x2C	; 44
    2a28:	c3 16       	cp	r12, r19
    2a2a:	d1 04       	cpc	r13, r1
    2a2c:	e1 04       	cpc	r14, r1
    2a2e:	f1 04       	cpc	r15, r1
    2a30:	41 f7       	brne	.-48     	; 0x2a02 <VL53L0X_set_reference_spads+0x98>
    2a32:	ce 01       	movw	r24, r28
    2a34:	01 96       	adiw	r24, 0x01	; 1
    2a36:	9f 93       	push	r25
    2a38:	8f 93       	push	r24
    2a3a:	bf 92       	push	r11
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	6f 92       	push	r6
    2a42:	ff 92       	push	r15
    2a44:	ef 92       	push	r14
    2a46:	df 92       	push	r13
    2a48:	cf 92       	push	r12
    2a4a:	0f 2e       	mov	r0, r31
    2a4c:	f4 eb       	ldi	r31, 0xB4	; 180
    2a4e:	af 2e       	mov	r10, r31
    2a50:	b1 2c       	mov	r11, r1
    2a52:	c1 2c       	mov	r12, r1
    2a54:	d1 2c       	mov	r13, r1
    2a56:	f0 2d       	mov	r31, r0
    2a58:	16 e0       	ldi	r17, 0x06	; 6
    2a5a:	e1 2e       	mov	r14, r17
    2a5c:	f1 2c       	mov	r15, r1
    2a5e:	00 e0       	ldi	r16, 0x00	; 0
    2a60:	10 e0       	ldi	r17, 0x00	; 0
    2a62:	94 01       	movw	r18, r8
    2a64:	2f 5e       	subi	r18, 0xEF	; 239
    2a66:	3e 4f       	sbci	r19, 0xFE	; 254
    2a68:	a4 01       	movw	r20, r8
    2a6a:	49 5e       	subi	r20, 0xE9	; 233
    2a6c:	5e 4f       	sbci	r21, 0xFE	; 254
    2a6e:	67 2d       	mov	r22, r7
    2a70:	c4 01       	movw	r24, r8
    2a72:	42 de       	rcall	.-892    	; 0x26f8 <enable_ref_spads>
    2a74:	0f b6       	in	r0, 0x3f	; 63
    2a76:	f8 94       	cli
    2a78:	de bf       	out	0x3e, r29	; 62
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	cd bf       	out	0x3d, r28	; 61
    2a7e:	81 11       	cpse	r24, r1
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <VL53L0X_set_reference_spads+0x12a>
    2a82:	f4 01       	movw	r30, r8
    2a84:	ec 5f       	subi	r30, 0xFC	; 252
    2a86:	fe 4f       	sbci	r31, 0xFE	; 254
    2a88:	91 e0       	ldi	r25, 0x01	; 1
    2a8a:	90 83       	st	Z, r25
    2a8c:	32 97       	sbiw	r30, 0x02	; 2
    2a8e:	60 82       	st	Z, r6
    2a90:	31 96       	adiw	r30, 0x01	; 1
    2a92:	70 82       	st	Z, r7
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	1f 91       	pop	r17
    2aa2:	0f 91       	pop	r16
    2aa4:	ff 90       	pop	r15
    2aa6:	ef 90       	pop	r14
    2aa8:	df 90       	pop	r13
    2aaa:	cf 90       	pop	r12
    2aac:	bf 90       	pop	r11
    2aae:	af 90       	pop	r10
    2ab0:	9f 90       	pop	r9
    2ab2:	8f 90       	pop	r8
    2ab4:	7f 90       	pop	r7
    2ab6:	6f 90       	pop	r6
    2ab8:	08 95       	ret

00002aba <VL53L0X_perform_single_ref_calibration>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
    2d6c:	cf 93       	push	r28
    2d6e:	df 93       	push	r29
    2d70:	ec 01       	movw	r28, r24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
<<<<<<< HEAD
    2d72:	46 2f       	mov	r20, r22
    2d74:	41 60       	ori	r20, 0x01	; 1
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2ac0:	46 2f       	mov	r20, r22
    2ac2:	41 60       	ori	r20, 0x01	; 1
    2ac4:	60 e0       	ldi	r22, 0x00	; 0
    2ac6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
    2d7c:	81 11       	cpse	r24, r1
    2d7e:	10 c0       	rjmp	.+32     	; 0x2da0 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
    2d80:	ce 01       	movw	r24, r28
    2d82:	91 d3       	rcall	.+1826   	; 0x34a6 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
    2d84:	81 11       	cpse	r24, r1
    2d86:	0c c0       	rjmp	.+24     	; 0x2da0 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	50 e0       	ldi	r21, 0x00	; 0
    2d8c:	ba 01       	movw	r22, r20
    2d8e:	ce 01       	movw	r24, r28
    2d90:	59 da       	rcall	.-2894   	; 0x2244 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
    2d92:	81 11       	cpse	r24, r1
    2d94:	05 c0       	rjmp	.+10     	; 0x2da0 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
<<<<<<< HEAD
    2d96:	40 e0       	ldi	r20, 0x00	; 0
    2d98:	60 e0       	ldi	r22, 0x00	; 0
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	60 e0       	ldi	r22, 0x00	; 0
    2ae8:	ce 01       	movw	r24, r28
    2aea:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	return Status;
}
    2da0:	df 91       	pop	r29
    2da2:	cf 91       	pop	r28
    2da4:	08 95       	ret

00002da6 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
    2da6:	5f 92       	push	r5
    2da8:	6f 92       	push	r6
    2daa:	7f 92       	push	r7
    2dac:	8f 92       	push	r8
    2dae:	9f 92       	push	r9
    2db0:	af 92       	push	r10
    2db2:	bf 92       	push	r11
    2db4:	cf 92       	push	r12
    2db6:	df 92       	push	r13
    2db8:	ef 92       	push	r14
    2dba:	ff 92       	push	r15
    2dbc:	0f 93       	push	r16
    2dbe:	1f 93       	push	r17
    2dc0:	cf 93       	push	r28
    2dc2:	df 93       	push	r29
    2dc4:	1f 92       	push	r1
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	4c 01       	movw	r8, r24
    2dcc:	d6 2e       	mov	r13, r22
    2dce:	54 2e       	mov	r5, r20
    2dd0:	b2 2e       	mov	r11, r18
    2dd2:	38 01       	movw	r6, r16
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t PhaseCalint = 0;
    2dd4:	19 82       	std	Y+1, r1	; 0x01

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
<<<<<<< HEAD
    2dd6:	41 e0       	ldi	r20, 0x01	; 1
    2dd8:	6f ef       	ldi	r22, 0xFF	; 255
    2dda:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2dde:	18 2f       	mov	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	c4 01       	movw	r24, r8
    2de6:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2dea:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	6f ef       	ldi	r22, 0xFF	; 255
    2df0:	c4 01       	movw	r24, r8
    2df2:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2df6:	18 2b       	or	r17, r24
=======
    2b24:	41 e0       	ldi	r20, 0x01	; 1
    2b26:	6f ef       	ldi	r22, 0xFF	; 255
    2b28:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2b2c:	18 2f       	mov	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	c4 01       	movw	r24, r8
    2b34:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2b38:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2b3a:	40 e0       	ldi	r20, 0x00	; 0
    2b3c:	6f ef       	ldi	r22, 0xFF	; 255
    2b3e:	c4 01       	movw	r24, r8
    2b40:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2b44:	18 2b       	or	r17, r24
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	if (read_not_write) {
    2df8:	dd 20       	and	r13, r13
    2dfa:	99 f0       	breq	.+38     	; 0x2e22 <VL53L0X_ref_calibration_io+0x7c>
		if (vhv_enable)
    2dfc:	cc 20       	and	r12, r12
    2dfe:	31 f0       	breq	.+12     	; 0x2e0c <VL53L0X_ref_calibration_io+0x66>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
<<<<<<< HEAD
    2e00:	a3 01       	movw	r20, r6
    2e02:	6b ec       	ldi	r22, 0xCB	; 203
    2e04:	c4 01       	movw	r24, r8
    2e06:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    2e0a:	18 2b       	or	r17, r24
=======
    2b4e:	a3 01       	movw	r20, r6
    2b50:	6b ec       	ldi	r22, 0xCB	; 203
    2b52:	c4 01       	movw	r24, r8
    2b54:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    2b58:	18 2b       	or	r17, r24
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		if (phase_enable)
    2e0c:	aa 20       	and	r10, r10
    2e0e:	d1 f0       	breq	.+52     	; 0x2e44 <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
<<<<<<< HEAD
    2e10:	ae 01       	movw	r20, r28
    2e12:	4f 5f       	subi	r20, 0xFF	; 255
    2e14:	5f 4f       	sbci	r21, 0xFF	; 255
    2e16:	6e ee       	ldi	r22, 0xEE	; 238
    2e18:	c4 01       	movw	r24, r8
    2e1a:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    2e1e:	18 2b       	or	r17, r24
    2e20:	11 c0       	rjmp	.+34     	; 0x2e44 <VL53L0X_ref_calibration_io+0x9e>
=======
    2b5e:	ae 01       	movw	r20, r28
    2b60:	4f 5f       	subi	r20, 0xFF	; 255
    2b62:	5f 4f       	sbci	r21, 0xFF	; 255
    2b64:	6e ee       	ldi	r22, 0xEE	; 238
    2b66:	c4 01       	movw	r24, r8
    2b68:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    2b6c:	18 2b       	or	r17, r24
    2b6e:	11 c0       	rjmp	.+34     	; 0x2b92 <VL53L0X_ref_calibration_io+0x9e>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	} else {
		if (vhv_enable)
    2e22:	cc 20       	and	r12, r12
    2e24:	31 f0       	breq	.+12     	; 0x2e32 <VL53L0X_ref_calibration_io+0x8c>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
<<<<<<< HEAD
    2e26:	45 2d       	mov	r20, r5
    2e28:	6b ec       	ldi	r22, 0xCB	; 203
    2e2a:	c4 01       	movw	r24, r8
    2e2c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2e30:	18 2b       	or	r17, r24
=======
    2b74:	45 2d       	mov	r20, r5
    2b76:	6b ec       	ldi	r22, 0xCB	; 203
    2b78:	c4 01       	movw	r24, r8
    2b7a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2b7e:	18 2b       	or	r17, r24
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		if (phase_enable)
    2e32:	aa 20       	and	r10, r10
    2e34:	39 f0       	breq	.+14     	; 0x2e44 <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
<<<<<<< HEAD
    2e36:	2b 2d       	mov	r18, r11
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	6e ee       	ldi	r22, 0xEE	; 238
    2e3c:	c4 01       	movw	r24, r8
    2e3e:	0e 94 14 2d 	call	0x5a28	; 0x5a28 <VL53L0X_UpdateByte>
    2e42:	18 2b       	or	r17, r24
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2e44:	41 e0       	ldi	r20, 0x01	; 1
    2e46:	6f ef       	ldi	r22, 0xFF	; 255
    2e48:	c4 01       	movw	r24, r8
    2e4a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2e4e:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
    2e50:	41 e0       	ldi	r20, 0x01	; 1
    2e52:	60 e0       	ldi	r22, 0x00	; 0
    2e54:	c4 01       	movw	r24, r8
    2e56:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    2e5a:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	6f ef       	ldi	r22, 0xFF	; 255
    2e60:	c4 01       	movw	r24, r8
    2e62:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2b84:	2b 2d       	mov	r18, r11
    2b86:	40 e8       	ldi	r20, 0x80	; 128
    2b88:	6e ee       	ldi	r22, 0xEE	; 238
    2b8a:	c4 01       	movw	r24, r8
    2b8c:	0e 94 fb 2b 	call	0x57f6	; 0x57f6 <VL53L0X_UpdateByte>
    2b90:	18 2b       	or	r17, r24
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    2b92:	41 e0       	ldi	r20, 0x01	; 1
    2b94:	6f ef       	ldi	r22, 0xFF	; 255
    2b96:	c4 01       	movw	r24, r8
    2b98:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2b9c:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
    2b9e:	41 e0       	ldi	r20, 0x01	; 1
    2ba0:	60 e0       	ldi	r22, 0x00	; 0
    2ba2:	c4 01       	movw	r24, r8
    2ba4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    2ba8:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    2baa:	40 e0       	ldi	r20, 0x00	; 0
    2bac:	6f ef       	ldi	r22, 0xFF	; 255
    2bae:	c4 01       	movw	r24, r8
    2bb0:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
    2e66:	99 81       	ldd	r25, Y+1	; 0x01
    2e68:	9f 7e       	andi	r25, 0xEF	; 239
    2e6a:	f7 01       	movw	r30, r14
    2e6c:	90 83       	st	Z, r25

	return Status;
}
    2e6e:	81 2b       	or	r24, r17
    2e70:	0f 90       	pop	r0
    2e72:	df 91       	pop	r29
    2e74:	cf 91       	pop	r28
    2e76:	1f 91       	pop	r17
    2e78:	0f 91       	pop	r16
    2e7a:	ff 90       	pop	r15
    2e7c:	ef 90       	pop	r14
    2e7e:	df 90       	pop	r13
    2e80:	cf 90       	pop	r12
    2e82:	bf 90       	pop	r11
    2e84:	af 90       	pop	r10
    2e86:	9f 90       	pop	r9
    2e88:	8f 90       	pop	r8
    2e8a:	7f 90       	pop	r7
    2e8c:	6f 90       	pop	r6
    2e8e:	5f 90       	pop	r5
    2e90:	08 95       	ret

00002e92 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
    2e92:	8f 92       	push	r8
    2e94:	9f 92       	push	r9
    2e96:	af 92       	push	r10
    2e98:	bf 92       	push	r11
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	1f 92       	push	r1
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
    2eb0:	4c 01       	movw	r8, r24
    2eb2:	8b 01       	movw	r16, r22
    2eb4:	f4 2e       	mov	r15, r20
    2eb6:	d2 2e       	mov	r13, r18
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint8_t PhaseCalInt = 0;
    2eb8:	19 82       	std	Y+1, r1	; 0x01

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    2eba:	22 23       	and	r18, r18
    2ebc:	29 f0       	breq	.+10     	; 0x2ec8 <VL53L0X_perform_vhv_calibration+0x36>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	e3 5e       	subi	r30, 0xE3	; 227
    2ec2:	fe 4f       	sbci	r31, 0xFE	; 254
    2ec4:	b0 80       	ld	r11, Z
    2ec6:	01 c0       	rjmp	.+2      	; 0x2eca <VL53L0X_perform_vhv_calibration+0x38>
VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
    2ec8:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
<<<<<<< HEAD
    2eca:	41 e0       	ldi	r20, 0x01	; 1
    2ecc:	61 e0       	ldi	r22, 0x01	; 1
    2ece:	c4 01       	movw	r24, r8
    2ed0:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	c4 01       	movw	r24, r8
    2c1e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	if (Status == VL53L0X_ERROR_NONE)
    2ed4:	81 11       	cpse	r24, r1
    2ed6:	14 c0       	rjmp	.+40     	; 0x2f00 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
    2ed8:	60 e4       	ldi	r22, 0x40	; 64
    2eda:	c4 01       	movw	r24, r8
    2edc:	47 df       	rcall	.-370    	; 0x2d6c <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    2ede:	81 11       	cpse	r24, r1
    2ee0:	0f c0       	rjmp	.+30     	; 0x2f00 <VL53L0X_perform_vhv_calibration+0x6e>
    2ee2:	91 e0       	ldi	r25, 0x01	; 1
    2ee4:	f9 12       	cpse	r15, r25
    2ee6:	0c c0       	rjmp	.+24     	; 0x2f00 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    2ee8:	a1 2c       	mov	r10, r1
    2eea:	cc 24       	eor	r12, r12
    2eec:	c3 94       	inc	r12
    2eee:	fe 01       	movw	r30, r28
    2ef0:	31 96       	adiw	r30, 0x01	; 1
    2ef2:	7f 01       	movw	r14, r30
    2ef4:	20 e0       	ldi	r18, 0x00	; 0
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	61 e0       	ldi	r22, 0x01	; 1
    2efa:	c4 01       	movw	r24, r8
    2efc:	54 df       	rcall	.-344    	; 0x2da6 <VL53L0X_ref_calibration_io>
    2efe:	02 c0       	rjmp	.+4      	; 0x2f04 <VL53L0X_perform_vhv_calibration+0x72>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
    2f00:	f8 01       	movw	r30, r16
    2f02:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    2f04:	81 11       	cpse	r24, r1
    2f06:	0d c0       	rjmp	.+26     	; 0x2f22 <VL53L0X_perform_vhv_calibration+0x90>
    2f08:	dd 20       	and	r13, r13
    2f0a:	59 f0       	breq	.+22     	; 0x2f22 <VL53L0X_perform_vhv_calibration+0x90>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
<<<<<<< HEAD
    2f0c:	4b 2d       	mov	r20, r11
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	c4 01       	movw	r24, r8
    2f12:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2c5a:	4b 2d       	mov	r20, r11
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	c4 01       	movw	r24, r8
    2c60:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2f16:	81 11       	cpse	r24, r1
    2f18:	04 c0       	rjmp	.+8      	; 0x2f22 <VL53L0X_perform_vhv_calibration+0x90>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2f1a:	f4 01       	movw	r30, r8
    2f1c:	e3 5e       	subi	r30, 0xE3	; 227
    2f1e:	fe 4f       	sbci	r31, 0xFE	; 254
    2f20:	b0 82       	st	Z, r11

	}

	return Status;
}
    2f22:	0f 90       	pop	r0
    2f24:	df 91       	pop	r29
    2f26:	cf 91       	pop	r28
    2f28:	1f 91       	pop	r17
    2f2a:	0f 91       	pop	r16
    2f2c:	ff 90       	pop	r15
    2f2e:	ef 90       	pop	r14
    2f30:	df 90       	pop	r13
    2f32:	cf 90       	pop	r12
    2f34:	bf 90       	pop	r11
    2f36:	af 90       	pop	r10
    2f38:	9f 90       	pop	r9
    2f3a:	8f 90       	pop	r8
    2f3c:	08 95       	ret

00002f3e <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
    2f3e:	8f 92       	push	r8
    2f40:	9f 92       	push	r9
    2f42:	af 92       	push	r10
    2f44:	bf 92       	push	r11
    2f46:	cf 92       	push	r12
    2f48:	df 92       	push	r13
    2f4a:	ef 92       	push	r14
    2f4c:	ff 92       	push	r15
    2f4e:	0f 93       	push	r16
    2f50:	1f 93       	push	r17
    2f52:	cf 93       	push	r28
    2f54:	df 93       	push	r29
    2f56:	1f 92       	push	r1
    2f58:	cd b7       	in	r28, 0x3d	; 61
    2f5a:	de b7       	in	r29, 0x3e	; 62
    2f5c:	4c 01       	movw	r8, r24
    2f5e:	7b 01       	movw	r14, r22
    2f60:	14 2f       	mov	r17, r20
    2f62:	d2 2e       	mov	r13, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    2f64:	22 23       	and	r18, r18
    2f66:	29 f0       	breq	.+10     	; 0x2f72 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2f68:	fc 01       	movw	r30, r24
    2f6a:	e3 5e       	subi	r30, 0xE3	; 227
    2f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6e:	b0 80       	ld	r11, Z
    2f70:	01 c0       	rjmp	.+2      	; 0x2f74 <VL53L0X_perform_phase_calibration+0x36>
VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t SequenceConfig = 0;
    2f72:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
<<<<<<< HEAD
    2f74:	42 e0       	ldi	r20, 0x02	; 2
    2f76:	61 e0       	ldi	r22, 0x01	; 1
    2f78:	c4 01       	movw	r24, r8
    2f7a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2cc2:	42 e0       	ldi	r20, 0x02	; 2
    2cc4:	61 e0       	ldi	r22, 0x01	; 1
    2cc6:	c4 01       	movw	r24, r8
    2cc8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	if (Status == VL53L0X_ERROR_NONE)
    2f7e:	81 11       	cpse	r24, r1
    2f80:	13 c0       	rjmp	.+38     	; 0x2fa8 <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
    2f82:	60 e0       	ldi	r22, 0x00	; 0
    2f84:	c4 01       	movw	r24, r8
    2f86:	f2 de       	rcall	.-540    	; 0x2d6c <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    2f88:	81 11       	cpse	r24, r1
    2f8a:	0e c0       	rjmp	.+28     	; 0x2fa8 <VL53L0X_perform_phase_calibration+0x6a>
    2f8c:	11 30       	cpi	r17, 0x01	; 1
    2f8e:	61 f4       	brne	.+24     	; 0x2fa8 <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    2f90:	aa 24       	eor	r10, r10
    2f92:	a3 94       	inc	r10
    2f94:	c1 2c       	mov	r12, r1
    2f96:	8e 01       	movw	r16, r28
    2f98:	0f 5f       	subi	r16, 0xFF	; 255
    2f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	40 e0       	ldi	r20, 0x00	; 0
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	c4 01       	movw	r24, r8
    2fa4:	00 df       	rcall	.-512    	; 0x2da6 <VL53L0X_ref_calibration_io>
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <VL53L0X_perform_phase_calibration+0x6e>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
    2fa8:	f7 01       	movw	r30, r14
    2faa:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    2fac:	81 11       	cpse	r24, r1
    2fae:	0d c0       	rjmp	.+26     	; 0x2fca <VL53L0X_perform_phase_calibration+0x8c>
    2fb0:	dd 20       	and	r13, r13
    2fb2:	59 f0       	breq	.+22     	; 0x2fca <VL53L0X_perform_phase_calibration+0x8c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
<<<<<<< HEAD
    2fb4:	4b 2d       	mov	r20, r11
    2fb6:	61 e0       	ldi	r22, 0x01	; 1
    2fb8:	c4 01       	movw	r24, r8
    2fba:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2d02:	4b 2d       	mov	r20, r11
    2d04:	61 e0       	ldi	r22, 0x01	; 1
    2d06:	c4 01       	movw	r24, r8
    2d08:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    2fbe:	81 11       	cpse	r24, r1
    2fc0:	04 c0       	rjmp	.+8      	; 0x2fca <VL53L0X_perform_phase_calibration+0x8c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    2fc2:	f4 01       	movw	r30, r8
    2fc4:	e3 5e       	subi	r30, 0xE3	; 227
    2fc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2fc8:	b0 82       	st	Z, r11

	}

	return Status;
}
    2fca:	0f 90       	pop	r0
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	ff 90       	pop	r15
    2fd6:	ef 90       	pop	r14
    2fd8:	df 90       	pop	r13
    2fda:	cf 90       	pop	r12
    2fdc:	bf 90       	pop	r11
    2fde:	af 90       	pop	r10
    2fe0:	9f 90       	pop	r9
    2fe2:	8f 90       	pop	r8
    2fe4:	08 95       	ret

00002fe6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	ec 01       	movw	r28, r24
    2ff4:	7a 01       	movw	r14, r20
    2ff6:	12 2f       	mov	r17, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	e3 5e       	subi	r30, 0xE3	; 227
    2ffc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ffe:	00 81       	ld	r16, Z

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	41 2f       	mov	r20, r17
    3004:	46 df       	rcall	.-372    	; 0x2e92 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
    3006:	81 11       	cpse	r24, r1
    3008:	11 c0       	rjmp	.+34     	; 0x302c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
    300a:	20 e0       	ldi	r18, 0x00	; 0
    300c:	41 2f       	mov	r20, r17
    300e:	b7 01       	movw	r22, r14
    3010:	ce 01       	movw	r24, r28
    3012:	95 df       	rcall	.-214    	; 0x2f3e <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
    3014:	81 11       	cpse	r24, r1
    3016:	0a c0       	rjmp	.+20     	; 0x302c <VL53L0X_perform_ref_calibration+0x46>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
<<<<<<< HEAD
    3018:	40 2f       	mov	r20, r16
    301a:	61 e0       	ldi	r22, 0x01	; 1
    301c:	ce 01       	movw	r24, r28
    301e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2d66:	40 2f       	mov	r20, r16
    2d68:	61 e0       	ldi	r22, 0x01	; 1
    2d6a:	ce 01       	movw	r24, r28
    2d6c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    3022:	81 11       	cpse	r24, r1
    3024:	03 c0       	rjmp	.+6      	; 0x302c <VL53L0X_perform_ref_calibration+0x46>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3026:	c3 5e       	subi	r28, 0xE3	; 227
    3028:	de 4f       	sbci	r29, 0xFE	; 254
    302a:	08 83       	st	Y, r16

	}

	return Status;
}
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	08 95       	ret

0000303a <VL53L0X_perform_ref_spad_management>:
}

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
    303a:	2f 92       	push	r2
    303c:	3f 92       	push	r3
    303e:	4f 92       	push	r4
    3040:	5f 92       	push	r5
    3042:	6f 92       	push	r6
    3044:	7f 92       	push	r7
    3046:	8f 92       	push	r8
    3048:	9f 92       	push	r9
    304a:	af 92       	push	r10
    304c:	bf 92       	push	r11
    304e:	cf 92       	push	r12
    3050:	df 92       	push	r13
    3052:	ef 92       	push	r14
    3054:	ff 92       	push	r15
    3056:	0f 93       	push	r16
    3058:	1f 93       	push	r17
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	a7 97       	sbiw	r28, 0x27	; 39
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	4c 01       	movw	r8, r24
    3070:	7c a3       	std	Y+36, r23	; 0x24
    3072:	6b a3       	std	Y+35, r22	; 0x23
    3074:	5e a3       	std	Y+38, r21	; 0x26
    3076:	4d a3       	std	Y+37, r20	; 0x25
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
	uint32_t minimumSpadCount = 3;
	uint32_t maxSpadCount = 44;
	uint32_t currentSpadIndex = 0;
	uint32_t lastSpadIndex = 0;
    3078:	1f 82       	std	Y+7, r1	; 0x07
    307a:	18 86       	std	Y+8, r1	; 0x08
    307c:	19 86       	std	Y+9, r1	; 0x09
    307e:	1a 86       	std	Y+10, r1	; 0x0a
	int32_t nextGoodSpad = 0;
    3080:	1b 86       	std	Y+11, r1	; 0x0b
    3082:	1c 86       	std	Y+12, r1	; 0x0c
    3084:	1d 86       	std	Y+13, r1	; 0x0d
    3086:	1e 86       	std	Y+14, r1	; 0x0e
	uint32_t index = 0;
	uint32_t spadArraySize = 6;
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
    3088:	19 8a       	std	Y+17, r1	; 0x11
	uint8_t PhaseCal = 0;
    308a:	1a 8a       	std	Y+18, r1	; 0x12
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
    308c:	fc 01       	movw	r30, r24
    308e:	e8 5d       	subi	r30, 0xD8	; 216
    3090:	fe 4f       	sbci	r31, 0xFE	; 254
    3092:	60 80       	ld	r6, Z
    3094:	71 80       	ldd	r7, Z+1	; 0x01
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
    3096:	77 97       	sbiw	r30, 0x17	; 23
    3098:	10 82       	st	Z, r1
    309a:	31 96       	adiw	r30, 0x01	; 1
    309c:	10 82       	st	Z, r1
    309e:	31 96       	adiw	r30, 0x01	; 1
    30a0:	10 82       	st	Z, r1
    30a2:	31 96       	adiw	r30, 0x01	; 1
    30a4:	10 82       	st	Z, r1
    30a6:	31 96       	adiw	r30, 0x01	; 1
    30a8:	10 82       	st	Z, r1
    30aa:	31 96       	adiw	r30, 0x01	; 1
    30ac:	10 82       	st	Z, r1


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
<<<<<<< HEAD
    30ae:	41 e0       	ldi	r20, 0x01	; 1
    30b0:	6f ef       	ldi	r22, 0xFF	; 255
    30b2:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	6f ef       	ldi	r22, 0xFF	; 255
    2e00:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	if (Status == VL53L0X_ERROR_NONE)
    30b6:	81 11       	cpse	r24, r1
    30b8:	1a c0       	rjmp	.+52     	; 0x30ee <VL53L0X_perform_ref_spad_management+0xb4>
		Status = VL53L0X_WrByte(Dev,
<<<<<<< HEAD
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	6f e4       	ldi	r22, 0x4F	; 79
    30be:	c4 01       	movw	r24, r8
    30c0:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2e08:	40 e0       	ldi	r20, 0x00	; 0
    2e0a:	6f e4       	ldi	r22, 0x4F	; 79
    2e0c:	c4 01       	movw	r24, r8
    2e0e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
    30c4:	81 11       	cpse	r24, r1
    30c6:	1a c0       	rjmp	.+52     	; 0x30fc <VL53L0X_perform_ref_spad_management+0xc2>
		Status = VL53L0X_WrByte(Dev,
<<<<<<< HEAD
    30c8:	4c e2       	ldi	r20, 0x2C	; 44
    30ca:	6e e4       	ldi	r22, 0x4E	; 78
    30cc:	c4 01       	movw	r24, r8
    30ce:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2e16:	4c e2       	ldi	r20, 0x2C	; 44
    2e18:	6e e4       	ldi	r22, 0x4E	; 78
    2e1a:	c4 01       	movw	r24, r8
    2e1c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
    30d2:	81 11       	cpse	r24, r1
    30d4:	1e c0       	rjmp	.+60     	; 0x3112 <VL53L0X_perform_ref_spad_management+0xd8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
<<<<<<< HEAD
    30d6:	40 e0       	ldi	r20, 0x00	; 0
    30d8:	6f ef       	ldi	r22, 0xFF	; 255
    30da:	c4 01       	movw	r24, r8
    30dc:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2e24:	40 e0       	ldi	r20, 0x00	; 0
    2e26:	6f ef       	ldi	r22, 0xFF	; 255
    2e28:	c4 01       	movw	r24, r8
    2e2a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	if (Status == VL53L0X_ERROR_NONE)
    30e0:	81 11       	cpse	r24, r1
    30e2:	44 c0       	rjmp	.+136    	; 0x316c <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_WrByte(Dev,
<<<<<<< HEAD
    30e4:	44 eb       	ldi	r20, 0xB4	; 180
    30e6:	66 eb       	ldi	r22, 0xB6	; 182
    30e8:	c4 01       	movw	r24, r8
    30ea:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2e32:	44 eb       	ldi	r20, 0xB4	; 180
    2e34:	66 eb       	ldi	r22, 0xB6	; 182
    2e36:	c4 01       	movw	r24, r8
    2e38:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
    30ee:	81 11       	cpse	r24, r1
    30f0:	c1 c1       	rjmp	.+898    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
		Status = VL53L0X_WrByte(Dev,
<<<<<<< HEAD
    30f2:	40 e0       	ldi	r20, 0x00	; 0
    30f4:	60 e8       	ldi	r22, 0x80	; 128
    30f6:	c4 01       	movw	r24, r8
    30f8:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
=======
    2e40:	40 e0       	ldi	r20, 0x00	; 0
    2e42:	60 e8       	ldi	r22, 0x80	; 128
    2e44:	c4 01       	movw	r24, r8
    2e46:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
    30fc:	81 11       	cpse	r24, r1
    30fe:	76 c1       	rjmp	.+748    	; 0x33ec <VL53L0X_perform_ref_spad_management+0x3b2>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
    3100:	20 e0       	ldi	r18, 0x00	; 0
    3102:	ae 01       	movw	r20, r28
    3104:	4e 5e       	subi	r20, 0xEE	; 238
    3106:	5f 4f       	sbci	r21, 0xFF	; 255
    3108:	be 01       	movw	r22, r28
    310a:	6f 5e       	subi	r22, 0xEF	; 239
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	c4 01       	movw	r24, r8
    3110:	6a df       	rcall	.-300    	; 0x2fe6 <VL53L0X_perform_ref_calibration>
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
    3112:	81 11       	cpse	r24, r1
    3114:	af c1       	rjmp	.+862    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
		lastSpadIndex = currentSpadIndex;
    3116:	1f 82       	std	Y+7, r1	; 0x07
    3118:	18 86       	std	Y+8, r1	; 0x08
    311a:	19 86       	std	Y+9, r1	; 0x09
    311c:	1a 86       	std	Y+10, r1	; 0x0a
		needAptSpads = 0;
		Status = enable_ref_spads(Dev,
    311e:	ce 01       	movw	r24, r28
    3120:	07 96       	adiw	r24, 0x07	; 7
    3122:	9f 93       	push	r25
    3124:	8f 93       	push	r24
    3126:	1f 92       	push	r1
    3128:	1f 92       	push	r1
    312a:	1f 92       	push	r1
    312c:	83 e0       	ldi	r24, 0x03	; 3
    312e:	8f 93       	push	r24
    3130:	1f 92       	push	r1
    3132:	1f 92       	push	r1
    3134:	1f 92       	push	r1
    3136:	1f 92       	push	r1
    3138:	0f 2e       	mov	r0, r31
    313a:	f4 eb       	ldi	r31, 0xB4	; 180
    313c:	af 2e       	mov	r10, r31
    313e:	b1 2c       	mov	r11, r1
    3140:	c1 2c       	mov	r12, r1
    3142:	d1 2c       	mov	r13, r1
    3144:	f0 2d       	mov	r31, r0
    3146:	16 e0       	ldi	r17, 0x06	; 6
    3148:	e1 2e       	mov	r14, r17
    314a:	f1 2c       	mov	r15, r1
    314c:	00 e0       	ldi	r16, 0x00	; 0
    314e:	10 e0       	ldi	r17, 0x00	; 0
    3150:	94 01       	movw	r18, r8
    3152:	2f 5e       	subi	r18, 0xEF	; 239
    3154:	3e 4f       	sbci	r19, 0xFE	; 254
    3156:	a4 01       	movw	r20, r8
    3158:	49 5e       	subi	r20, 0xE9	; 233
    315a:	5e 4f       	sbci	r21, 0xFE	; 254
    315c:	60 e0       	ldi	r22, 0x00	; 0
    315e:	c4 01       	movw	r24, r8
    3160:	24 dc       	rcall	.-1976   	; 0x29aa <enable_ref_spads>
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	de bf       	out	0x3e, r29	; 62
    3168:	0f be       	out	0x3f, r0	; 63
    316a:	cd bf       	out	0x3d, r28	; 61
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
    316c:	81 11       	cpse	r24, r1
    316e:	82 c1       	rjmp	.+772    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
		currentSpadIndex = lastSpadIndex;
    3170:	af 80       	ldd	r10, Y+7	; 0x07
    3172:	b8 84       	ldd	r11, Y+8	; 0x08
    3174:	c9 84       	ldd	r12, Y+9	; 0x09
    3176:	da 84       	ldd	r13, Y+10	; 0x0a

		Status = perform_ref_signal_measurement(Dev,
    3178:	be 01       	movw	r22, r28
    317a:	61 5f       	subi	r22, 0xF1	; 241
    317c:	7f 4f       	sbci	r23, 0xFF	; 255
    317e:	c4 01       	movw	r24, r8
    3180:	fd dc       	rcall	.-1542   	; 0x2b7c <perform_ref_signal_measurement>
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
    3182:	81 11       	cpse	r24, r1
    3184:	77 c1       	rjmp	.+750    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
    3186:	8f 85       	ldd	r24, Y+15	; 0x0f
    3188:	98 89       	ldd	r25, Y+16	; 0x10
    318a:	68 16       	cp	r6, r24
    318c:	79 06       	cpc	r7, r25
    318e:	08 f0       	brcs	.+2      	; 0x3192 <VL53L0X_perform_ref_spad_management+0x158>
    3190:	52 c1       	rjmp	.+676    	; 0x3436 <VL53L0X_perform_ref_spad_management+0x3fc>
			(peakSignalRateRef > targetRefRate)) {
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
    3192:	f4 01       	movw	r30, r8
    3194:	ef 5e       	subi	r30, 0xEF	; 239
    3196:	fe 4f       	sbci	r31, 0xFE	; 254
    3198:	10 82       	st	Z, r1
    319a:	31 96       	adiw	r30, 0x01	; 1
    319c:	10 82       	st	Z, r1
    319e:	31 96       	adiw	r30, 0x01	; 1
    31a0:	10 82       	st	Z, r1
    31a2:	31 96       	adiw	r30, 0x01	; 1
    31a4:	10 82       	st	Z, r1
    31a6:	31 96       	adiw	r30, 0x01	; 1
    31a8:	10 82       	st	Z, r1
    31aa:	31 96       	adiw	r30, 0x01	; 1
    31ac:	10 82       	st	Z, r1
    31ae:	05 c0       	rjmp	.+10     	; 0x31ba <VL53L0X_perform_ref_spad_management+0x180>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
    31b0:	3f ef       	ldi	r19, 0xFF	; 255
    31b2:	a3 1a       	sub	r10, r19
    31b4:	b3 0a       	sbc	r11, r19
    31b6:	c3 0a       	sbc	r12, r19
    31b8:	d3 0a       	sbc	r13, r19
			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
    31ba:	c6 01       	movw	r24, r12
    31bc:	b5 01       	movw	r22, r10
    31be:	6c 54       	subi	r22, 0x4C	; 76
    31c0:	7f 4f       	sbci	r23, 0xFF	; 255
    31c2:	8f 4f       	sbci	r24, 0xFF	; 255
    31c4:	9f 4f       	sbci	r25, 0xFF	; 255
    31c6:	8a db       	rcall	.-2284   	; 0x28dc <is_aperture>
    31c8:	81 11       	cpse	r24, r1
    31ca:	06 c0       	rjmp	.+12     	; 0x31d8 <VL53L0X_perform_ref_spad_management+0x19e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
    31cc:	4c e2       	ldi	r20, 0x2C	; 44
    31ce:	a4 16       	cp	r10, r20
    31d0:	b1 04       	cpc	r11, r1
    31d2:	c1 04       	cpc	r12, r1
    31d4:	d1 04       	cpc	r13, r1
    31d6:	60 f3       	brcs	.-40     	; 0x31b0 <VL53L0X_perform_ref_spad_management+0x176>
				currentSpadIndex++;
			}

			needAptSpads = 1;

			Status = enable_ref_spads(Dev,
    31d8:	ce 01       	movw	r24, r28
    31da:	07 96       	adiw	r24, 0x07	; 7
    31dc:	9f 93       	push	r25
    31de:	8f 93       	push	r24
    31e0:	1f 92       	push	r1
    31e2:	1f 92       	push	r1
    31e4:	1f 92       	push	r1
    31e6:	83 e0       	ldi	r24, 0x03	; 3
    31e8:	8f 93       	push	r24
    31ea:	df 92       	push	r13
    31ec:	cf 92       	push	r12
    31ee:	bf 92       	push	r11
    31f0:	af 92       	push	r10
    31f2:	0f 2e       	mov	r0, r31
    31f4:	f4 eb       	ldi	r31, 0xB4	; 180
    31f6:	af 2e       	mov	r10, r31
    31f8:	b1 2c       	mov	r11, r1
    31fa:	c1 2c       	mov	r12, r1
    31fc:	d1 2c       	mov	r13, r1
    31fe:	f0 2d       	mov	r31, r0
    3200:	16 e0       	ldi	r17, 0x06	; 6
    3202:	e1 2e       	mov	r14, r17
    3204:	f1 2c       	mov	r15, r1
    3206:	00 e0       	ldi	r16, 0x00	; 0
    3208:	10 e0       	ldi	r17, 0x00	; 0
    320a:	94 01       	movw	r18, r8
    320c:	2f 5e       	subi	r18, 0xEF	; 239
    320e:	3e 4f       	sbci	r19, 0xFE	; 254
    3210:	a4 01       	movw	r20, r8
    3212:	49 5e       	subi	r20, 0xE9	; 233
    3214:	5e 4f       	sbci	r21, 0xFE	; 254
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	c4 01       	movw	r24, r8
    321a:	c7 db       	rcall	.-2162   	; 0x29aa <enable_ref_spads>
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    321c:	0f b6       	in	r0, 0x3f	; 63
    321e:	f8 94       	cli
    3220:	de bf       	out	0x3e, r29	; 62
    3222:	0f be       	out	0x3f, r0	; 63
    3224:	cd bf       	out	0x3d, r28	; 61
    3226:	81 11       	cpse	r24, r1
    3228:	25 c1       	rjmp	.+586    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
				currentSpadIndex = lastSpadIndex;
    322a:	af 80       	ldd	r10, Y+7	; 0x07
    322c:	b8 84       	ldd	r11, Y+8	; 0x08
    322e:	c9 84       	ldd	r12, Y+9	; 0x09
				Status = perform_ref_signal_measurement(Dev,
    3230:	da 84       	ldd	r13, Y+10	; 0x0a
    3232:	be 01       	movw	r22, r28
    3234:	61 5f       	subi	r22, 0xF1	; 241
    3236:	7f 4f       	sbci	r23, 0xFF	; 255
    3238:	c4 01       	movw	r24, r8
    323a:	a0 dc       	rcall	.-1728   	; 0x2b7c <perform_ref_signal_measurement>
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
    323c:	81 11       	cpse	r24, r1
    323e:	1a c1       	rjmp	.+564    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
    3240:	8f 85       	ldd	r24, Y+15	; 0x0f
    3242:	98 89       	ldd	r25, Y+16	; 0x10
    3244:	68 16       	cp	r6, r24
    3246:	79 06       	cpc	r7, r25
    3248:	08 f0       	brcs	.+2      	; 0x324c <VL53L0X_perform_ref_spad_management+0x212>
    324a:	fe c0       	rjmp	.+508    	; 0x3448 <VL53L0X_perform_ref_spad_management+0x40e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
    324c:	b1 e0       	ldi	r27, 0x01	; 1
    324e:	bf a3       	std	Y+39, r27	; 0x27
					refSpadCount_int = minimumSpadCount;
    3250:	0f 2e       	mov	r0, r31
    3252:	f3 e0       	ldi	r31, 0x03	; 3
    3254:	2f 2e       	mov	r2, r31
    3256:	31 2c       	mov	r3, r1
    3258:	41 2c       	mov	r4, r1
    325a:	51 2c       	mov	r5, r1
    325c:	f0 2d       	mov	r31, r0
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    325e:	21 e0       	ldi	r18, 0x01	; 1
    3260:	30 e0       	ldi	r19, 0x00	; 0
    3262:	40 e0       	ldi	r20, 0x00	; 0
    3264:	50 e0       	ldi	r21, 0x00	; 0
    3266:	29 8f       	std	Y+25, r18	; 0x19
    3268:	3a 8f       	std	Y+26, r19	; 0x1a
    326a:	4b 8f       	std	Y+27, r20	; 0x1b
    326c:	5c 8f       	std	Y+28, r21	; 0x1c
    326e:	f8 c0       	rjmp	.+496    	; 0x3460 <VL53L0X_perform_ref_spad_management+0x426>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
    3270:	39 8d       	ldd	r19, Y+25	; 0x19
    3272:	3f a3       	std	Y+39, r19	; 0x27
		refSpadCount_int	= minimumSpadCount;

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
    3274:	26 e0       	ldi	r18, 0x06	; 6
    3276:	f4 01       	movw	r30, r8
    3278:	ef 5e       	subi	r30, 0xEF	; 239
    327a:	fe 4f       	sbci	r31, 0xFE	; 254
    327c:	de 01       	movw	r26, r28
    327e:	11 96       	adiw	r26, 0x01	; 1
    3280:	01 90       	ld	r0, Z+
    3282:	0d 92       	st	X+, r0
    3284:	2a 95       	dec	r18
    3286:	e1 f7       	brne	.-8      	; 0x3280 <VL53L0X_perform_ref_spad_management+0x246>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
    3288:	86 19       	sub	r24, r6
    328a:	97 09       	sbc	r25, r7
    328c:	9c 01       	movw	r18, r24
    328e:	22 f4       	brpl	.+8      	; 0x3298 <VL53L0X_perform_ref_spad_management+0x25e>
    3290:	22 27       	eor	r18, r18
    3292:	33 27       	eor	r19, r19
    3294:	28 1b       	sub	r18, r24
    3296:	39 0b       	sbc	r19, r25
    3298:	c9 01       	movw	r24, r18
    329a:	33 0f       	add	r19, r19
    329c:	aa 0b       	sbc	r26, r26
    329e:	bb 0b       	sbc	r27, r27
    32a0:	8f 8f       	std	Y+31, r24	; 0x1f
    32a2:	98 a3       	std	Y+32, r25	; 0x20
    32a4:	a9 a3       	std	Y+33, r26	; 0x21
    32a6:	ba a3       	std	Y+34, r27	; 0x22
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
		refSpadCount_int	= minimumSpadCount;
    32a8:	23 e0       	ldi	r18, 0x03	; 3
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	2d 8b       	std	Y+21, r18	; 0x15
    32b2:	3e 8b       	std	Y+22, r19	; 0x16
    32b4:	4f 8b       	std	Y+23, r20	; 0x17
    32b6:	58 8f       	std	Y+24, r21	; 0x18
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
    32b8:	a4 01       	movw	r20, r8
    32ba:	49 5e       	subi	r20, 0xE9	; 233
    32bc:	5e 4f       	sbci	r21, 0xFE	; 254
    32be:	5e 8f       	std	Y+30, r21	; 0x1e
    32c0:	4d 8f       	std	Y+29, r20	; 0x1d
				break;
			}

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
    32c2:	c4 01       	movw	r24, r8
    32c4:	8f 5e       	subi	r24, 0xEF	; 239
    32c6:	9e 4f       	sbci	r25, 0xFE	; 254
    32c8:	9c 8b       	std	Y+20, r25	; 0x14
    32ca:	8b 8b       	std	Y+19, r24	; 0x13
		lastSignalRateDiff = abs(peakSignalRateRef -
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
    32cc:	de 01       	movw	r26, r28
    32ce:	1b 96       	adiw	r26, 0x0b	; 11
    32d0:	7d 01       	movw	r14, r26
    32d2:	96 01       	movw	r18, r12
    32d4:	85 01       	movw	r16, r10
    32d6:	46 e0       	ldi	r20, 0x06	; 6
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	60 e0       	ldi	r22, 0x00	; 0
    32dc:	70 e0       	ldi	r23, 0x00	; 0
    32de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    32e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    32e2:	7a da       	rcall	.-2828   	; 0x27d8 <get_next_good_spad>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
    32e4:	cb 84       	ldd	r12, Y+11	; 0x0b
    32e6:	dc 84       	ldd	r13, Y+12	; 0x0c
    32e8:	ed 84       	ldd	r14, Y+13	; 0x0d
    32ea:	fe 84       	ldd	r15, Y+14	; 0x0e
    32ec:	bf ef       	ldi	r27, 0xFF	; 255
    32ee:	cb 16       	cp	r12, r27
    32f0:	db 06       	cpc	r13, r27
    32f2:	eb 06       	cpc	r14, r27
    32f4:	fb 06       	cpc	r15, r27
    32f6:	09 f4       	brne	.+2      	; 0x32fa <VL53L0X_perform_ref_spad_management+0x2c0>
    32f8:	ba c0       	rjmp	.+372    	; 0x346e <VL53L0X_perform_ref_spad_management+0x434>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			(refSpadCount_int)++;
    32fa:	2d 88       	ldd	r2, Y+21	; 0x15
    32fc:	3e 88       	ldd	r3, Y+22	; 0x16
    32fe:	4f 88       	ldd	r4, Y+23	; 0x17
    3300:	58 8c       	ldd	r5, Y+24	; 0x18
    3302:	ef ef       	ldi	r30, 0xFF	; 255
    3304:	2e 1a       	sub	r2, r30
    3306:	3e 0a       	sbc	r3, r30
    3308:	4e 0a       	sbc	r4, r30

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
    330a:	5e 0a       	sbc	r5, r30
    330c:	c7 01       	movw	r24, r14
    330e:	b6 01       	movw	r22, r12
    3310:	6c 54       	subi	r22, 0x4C	; 76
    3312:	7f 4f       	sbci	r23, 0xFF	; 255
    3314:	8f 4f       	sbci	r24, 0xFF	; 255
    3316:	9f 4f       	sbci	r25, 0xFF	; 255
    3318:	e1 da       	rcall	.-2622   	; 0x28dc <is_aperture>
    331a:	90 e0       	ldi	r25, 0x00	; 0
    331c:	a0 e0       	ldi	r26, 0x00	; 0
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	29 8d       	ldd	r18, Y+25	; 0x19
    3322:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3324:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3326:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3328:	82 17       	cp	r24, r18
    332a:	93 07       	cpc	r25, r19
    332c:	a4 07       	cpc	r26, r20
    332e:	b5 07       	cpc	r27, r21
    3330:	09 f0       	breq	.+2      	; 0x3334 <VL53L0X_perform_ref_spad_management+0x2fa>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
    3332:	9f c0       	rjmp	.+318    	; 0x3472 <VL53L0X_perform_ref_spad_management+0x438>
    3334:	97 01       	movw	r18, r14
    3336:	86 01       	movw	r16, r12
    3338:	46 e0       	ldi	r20, 0x06	; 6
    333a:	50 e0       	ldi	r21, 0x00	; 0
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	70 e0       	ldi	r23, 0x00	; 0
    3340:	8b 89       	ldd	r24, Y+19	; 0x13
    3342:	9c 89       	ldd	r25, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables,
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    3344:	e8 da       	rcall	.-2608   	; 0x2916 <enable_spad_bit>
    3346:	81 11       	cpse	r24, r1
				currentSpadIndex++;
    3348:	95 c0       	rjmp	.+298    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
    334a:	56 01       	movw	r10, r12
    334c:	67 01       	movw	r12, r14
    334e:	3f ef       	ldi	r19, 0xFF	; 255
    3350:	a3 1a       	sub	r10, r19
    3352:	b3 0a       	sbc	r11, r19
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
    3354:	c3 0a       	sbc	r12, r19
    3356:	d3 0a       	sbc	r13, r19
    3358:	6b 89       	ldd	r22, Y+19	; 0x13
    335a:	7c 89       	ldd	r23, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables);
			}

			if (Status != VL53L0X_ERROR_NONE)
    335c:	c4 01       	movw	r24, r8
    335e:	0b db       	rcall	.-2538   	; 0x2976 <set_ref_spad_map>
				break;

			Status = perform_ref_signal_measurement(Dev,
    3360:	81 11       	cpse	r24, r1
    3362:	88 c0       	rjmp	.+272    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
    3364:	be 01       	movw	r22, r28
    3366:	61 5f       	subi	r22, 0xF1	; 241
    3368:	7f 4f       	sbci	r23, 0xFF	; 255
    336a:	c4 01       	movw	r24, r8
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
    336c:	07 dc       	rcall	.-2034   	; 0x2b7c <perform_ref_signal_measurement>
    336e:	81 11       	cpse	r24, r1
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    3370:	81 c0       	rjmp	.+258    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
    3372:	8f 85       	ldd	r24, Y+15	; 0x0f
    3374:	98 89       	ldd	r25, Y+16	; 0x10
    3376:	9c 01       	movw	r18, r24
    3378:	26 19       	sub	r18, r6
    337a:	37 09       	sbc	r19, r7
    337c:	a9 01       	movw	r20, r18
    337e:	22 f4       	brpl	.+8      	; 0x3388 <VL53L0X_perform_ref_spad_management+0x34e>
    3380:	44 27       	eor	r20, r20
    3382:	55 27       	eor	r21, r21
    3384:	42 1b       	sub	r20, r18
    3386:	53 0b       	sbc	r21, r19
    3388:	05 2e       	mov	r0, r21
    338a:	00 0c       	add	r0, r0
    338c:	66 0b       	sbc	r22, r22

			if (peakSignalRateRef > targetRefRate) {
    338e:	77 0b       	sbc	r23, r23
    3390:	68 16       	cp	r6, r24
    3392:	79 06       	cpc	r7, r25
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
    3394:	c8 f4       	brcc	.+50     	; 0x33c8 <VL53L0X_perform_ref_spad_management+0x38e>
    3396:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3398:	98 a1       	ldd	r25, Y+32	; 0x20
    339a:	a9 a1       	ldd	r26, Y+33	; 0x21
    339c:	ba a1       	ldd	r27, Y+34	; 0x22
    339e:	84 17       	cp	r24, r20
    33a0:	95 07       	cpc	r25, r21
    33a2:	a6 07       	cpc	r26, r22
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
    33a4:	b7 07       	cpc	r27, r23
    33a6:	68 f5       	brcc	.+90     	; 0x3402 <VL53L0X_perform_ref_spad_management+0x3c8>
    33a8:	be 01       	movw	r22, r28
    33aa:	6f 5f       	subi	r22, 0xFF	; 255
    33ac:	7f 4f       	sbci	r23, 0xFF	; 255
    33ae:	c4 01       	movw	r24, r8
							lastSpadArray);
					memcpy(
    33b0:	e2 da       	rcall	.-2620   	; 0x2976 <set_ref_spad_map>
    33b2:	96 e0       	ldi	r25, 0x06	; 6
    33b4:	fe 01       	movw	r30, r28
    33b6:	31 96       	adiw	r30, 0x01	; 1
    33b8:	d4 01       	movw	r26, r8
    33ba:	af 5e       	subi	r26, 0xEF	; 239
    33bc:	be 4f       	sbci	r27, 0xFE	; 254
    33be:	01 90       	ld	r0, Z+
    33c0:	0d 92       	st	X+, r0
    33c2:	9a 95       	dec	r25
    33c4:	e1 f7       	brne	.-8      	; 0x33be <VL53L0X_perform_ref_spad_management+0x384>
				}
				complete = 1;
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
				memcpy(lastSpadArray,
    33c6:	17 c0       	rjmp	.+46     	; 0x33f6 <VL53L0X_perform_ref_spad_management+0x3bc>
    33c8:	86 e0       	ldi	r24, 0x06	; 6
    33ca:	eb 89       	ldd	r30, Y+19	; 0x13
    33cc:	fc 89       	ldd	r31, Y+20	; 0x14
    33ce:	de 01       	movw	r26, r28
    33d0:	11 96       	adiw	r26, 0x01	; 1
    33d2:	01 90       	ld	r0, Z+
    33d4:	0d 92       	st	X+, r0
    33d6:	8a 95       	dec	r24
			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}

			(refSpadCount_int)++;
    33d8:	e1 f7       	brne	.-8      	; 0x33d2 <VL53L0X_perform_ref_spad_management+0x398>
    33da:	2d 8a       	std	Y+21, r2	; 0x15
    33dc:	3e 8a       	std	Y+22, r3	; 0x16
    33de:	4f 8a       	std	Y+23, r4	; 0x17
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    33e0:	58 8e       	std	Y+24, r5	; 0x18
    33e2:	4f 8f       	std	Y+31, r20	; 0x1f
    33e4:	58 a3       	std	Y+32, r21	; 0x20
    33e6:	69 a3       	std	Y+33, r22	; 0x21
    33e8:	7a a3       	std	Y+34, r23	; 0x22
    33ea:	70 cf       	rjmp	.-288    	; 0x32cc <VL53L0X_perform_ref_spad_management+0x292>
    33ec:	1f a2       	std	Y+39, r1	; 0x27
    33ee:	1d 8a       	std	Y+21, r1	; 0x15
    33f0:	1e 8a       	std	Y+22, r1	; 0x16
    33f2:	1f 8a       	std	Y+23, r1	; 0x17
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
    33f4:	18 8e       	std	Y+24, r1	; 0x18
    33f6:	81 11       	cpse	r24, r1
    33f8:	3d c0       	rjmp	.+122    	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
    33fa:	2d 88       	ldd	r2, Y+21	; 0x15
    33fc:	3e 88       	ldd	r3, Y+22	; 0x16
    33fe:	4f 88       	ldd	r4, Y+23	; 0x17
		*refSpadCount = refSpadCount_int;
    3400:	58 8c       	ldd	r5, Y+24	; 0x18
    3402:	ab a1       	ldd	r26, Y+35	; 0x23
    3404:	bc a1       	ldd	r27, Y+36	; 0x24
    3406:	2d 92       	st	X+, r2
    3408:	3d 92       	st	X+, r3
    340a:	4d 92       	st	X+, r4
    340c:	5c 92       	st	X, r5
		*isApertureSpads = isApertureSpads_int;
    340e:	13 97       	sbiw	r26, 0x03	; 3
    3410:	2f a1       	ldd	r18, Y+39	; 0x27
    3412:	ed a1       	ldd	r30, Y+37	; 0x25
    3414:	fe a1       	ldd	r31, Y+38	; 0x26

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
    3416:	20 83       	st	Z, r18
    3418:	f4 01       	movw	r30, r8
    341a:	ec 5f       	subi	r30, 0xFC	; 252
    341c:	fe 4f       	sbci	r31, 0xFE	; 254
    341e:	81 e0       	ldi	r24, 0x01	; 1
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3420:	80 83       	st	Z, r24
    3422:	32 97       	sbiw	r30, 0x02	; 2
    3424:	8c 91       	ld	r24, X
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3426:	80 83       	st	Z, r24
    3428:	ad a1       	ldd	r26, Y+37	; 0x25
    342a:	be a1       	ldd	r27, Y+38	; 0x26
    342c:	8c 91       	ld	r24, X
    342e:	31 96       	adiw	r30, 0x01	; 1
    3430:	80 83       	st	Z, r24
    3432:	80 e0       	ldi	r24, 0x00	; 0
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
	uint8_t	 isApertureSpads_int = 0;
    3434:	1f c0       	rjmp	.+62     	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
    3436:	1f a2       	std	Y+39, r1	; 0x27
    3438:	21 2c       	mov	r2, r1
    343a:	31 2c       	mov	r3, r1
					isApertureSpads_int = 1;
					refSpadCount_int = minimumSpadCount;
				}
			}
		} else {
			needAptSpads = 0;
    343c:	21 01       	movw	r4, r2
    343e:	19 8e       	std	Y+25, r1	; 0x19
    3440:	1a 8e       	std	Y+26, r1	; 0x1a
    3442:	1b 8e       	std	Y+27, r1	; 0x1b
    3444:	1c 8e       	std	Y+28, r1	; 0x1c
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
	uint8_t	 isApertureSpads_int = 0;
    3446:	0c c0       	rjmp	.+24     	; 0x3460 <VL53L0X_perform_ref_spad_management+0x426>
	uint32_t signalRateDiff = 0;
	uint32_t lastSignalRateDiff = 0;
	uint8_t complete = 0;
	uint8_t VhvSettings = 0;
	uint8_t PhaseCal = 0;
	uint32_t refSpadCount_int = 0;
    3448:	1f a2       	std	Y+39, r1	; 0x27
    344a:	21 2c       	mov	r2, r1
    344c:	31 2c       	mov	r3, r1
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    344e:	21 01       	movw	r4, r2
    3450:	21 e0       	ldi	r18, 0x01	; 1
    3452:	30 e0       	ldi	r19, 0x00	; 0
    3454:	40 e0       	ldi	r20, 0x00	; 0
    3456:	50 e0       	ldi	r21, 0x00	; 0
    3458:	29 8f       	std	Y+25, r18	; 0x19
    345a:	3a 8f       	std	Y+26, r19	; 0x1a
    345c:	4b 8f       	std	Y+27, r20	; 0x1b
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
		(peakSignalRateRef < targetRefRate)) {
    345e:	5c 8f       	std	Y+28, r21	; 0x1c
    3460:	8f 85       	ldd	r24, Y+15	; 0x0f
		} else {
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
    3462:	98 89       	ldd	r25, Y+16	; 0x10
    3464:	86 15       	cp	r24, r6
    3466:	97 05       	cpc	r25, r7
    3468:	08 f4       	brcc	.+2      	; 0x346c <VL53L0X_perform_ref_spad_management+0x432>
    346a:	02 cf       	rjmp	.-508    	; 0x3270 <VL53L0X_perform_ref_spad_management+0x236>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    346c:	ca cf       	rjmp	.-108    	; 0x3402 <VL53L0X_perform_ref_spad_management+0x3c8>
    346e:	8e ec       	ldi	r24, 0xCE	; 206
			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    3470:	01 c0       	rjmp	.+2      	; 0x3474 <VL53L0X_perform_ref_spad_management+0x43a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
}
    3472:	8e ec       	ldi	r24, 0xCE	; 206
    3474:	a7 96       	adiw	r28, 0x27	; 39
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	f8 94       	cli
    347a:	de bf       	out	0x3e, r29	; 62
    347c:	0f be       	out	0x3f, r0	; 63
    347e:	cd bf       	out	0x3d, r28	; 61
    3480:	df 91       	pop	r29
    3482:	cf 91       	pop	r28
    3484:	1f 91       	pop	r17
    3486:	0f 91       	pop	r16
    3488:	ff 90       	pop	r15
    348a:	ef 90       	pop	r14
    348c:	df 90       	pop	r13
    348e:	cf 90       	pop	r12
    3490:	bf 90       	pop	r11
    3492:	af 90       	pop	r10
    3494:	9f 90       	pop	r9
    3496:	8f 90       	pop	r8
    3498:	7f 90       	pop	r7
    349a:	6f 90       	pop	r6
    349c:	5f 90       	pop	r5
    349e:	4f 90       	pop	r4
    34a0:	3f 90       	pop	r3
    34a2:	2f 90       	pop	r2
    34a4:	08 95       	ret

000034a6 <VL53L0X_measurement_poll_for_completion>:
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
<<<<<<< HEAD
    34a6:	ef 92       	push	r14
    34a8:	ff 92       	push	r15
    34aa:	0f 93       	push	r16
    34ac:	1f 93       	push	r17
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	1f 92       	push	r1
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	7c 01       	movw	r14, r24
    34ba:	19 82       	std	Y+1, r1	; 0x01
    34bc:	00 e0       	ldi	r16, 0x00	; 0
    34be:	10 e0       	ldi	r17, 0x00	; 0
    34c0:	be 01       	movw	r22, r28
    34c2:	6f 5f       	subi	r22, 0xFF	; 255
    34c4:	7f 4f       	sbci	r23, 0xFF	; 255
    34c6:	c7 01       	movw	r24, r14
    34c8:	08 d9       	rcall	.-3568   	; 0x26da <VL53L0X_GetMeasurementDataReady>
    34ca:	81 11       	cpse	r24, r1
    34cc:	0d c0       	rjmp	.+26     	; 0x34e8 <VL53L0X_measurement_poll_for_completion+0x42>
    34ce:	99 81       	ldd	r25, Y+1	; 0x01
    34d0:	91 30       	cpi	r25, 0x01	; 1
    34d2:	51 f0       	breq	.+20     	; 0x34e8 <VL53L0X_measurement_poll_for_completion+0x42>
    34d4:	0f 5f       	subi	r16, 0xFF	; 255
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	08 3c       	cpi	r16, 0xC8	; 200
    34da:	11 05       	cpc	r17, r1
    34dc:	21 f0       	breq	.+8      	; 0x34e6 <VL53L0X_measurement_poll_for_completion+0x40>
    34de:	c7 01       	movw	r24, r14
    34e0:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <VL53L0X_PollingDelay>
    34e4:	ed cf       	rjmp	.-38     	; 0x34c0 <VL53L0X_measurement_poll_for_completion+0x1a>
    34e6:	89 ef       	ldi	r24, 0xF9	; 249
    34e8:	0f 90       	pop	r0
    34ea:	df 91       	pop	r29
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	08 95       	ret

000034f8 <VL53L0X_isqrt>:
    34f8:	cf 92       	push	r12
    34fa:	df 92       	push	r13
    34fc:	ef 92       	push	r14
    34fe:	ff 92       	push	r15
    3500:	0f 93       	push	r16
    3502:	1f 93       	push	r17
    3504:	8b 01       	movw	r16, r22
    3506:	9c 01       	movw	r18, r24
    3508:	01 15       	cp	r16, r1
    350a:	11 05       	cpc	r17, r1
    350c:	21 05       	cpc	r18, r1
    350e:	80 e4       	ldi	r24, 0x40	; 64
    3510:	38 07       	cpc	r19, r24
    3512:	b0 f4       	brcc	.+44     	; 0x3540 <VL53L0X_isqrt+0x48>
    3514:	80 e0       	ldi	r24, 0x00	; 0
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	a0 e0       	ldi	r26, 0x00	; 0
    351a:	b0 e4       	ldi	r27, 0x40	; 64
    351c:	b6 95       	lsr	r27
    351e:	a7 95       	ror	r26
    3520:	97 95       	ror	r25
    3522:	87 95       	ror	r24
    3524:	b6 95       	lsr	r27
    3526:	a7 95       	ror	r26
    3528:	97 95       	ror	r25
    352a:	87 95       	ror	r24
    352c:	08 17       	cp	r16, r24
    352e:	19 07       	cpc	r17, r25
    3530:	2a 07       	cpc	r18, r26
    3532:	3b 07       	cpc	r19, r27
    3534:	98 f3       	brcs	.-26     	; 0x351c <VL53L0X_isqrt+0x24>
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	a1 05       	cpc	r26, r1
    353a:	b1 05       	cpc	r27, r1
    353c:	29 f4       	brne	.+10     	; 0x3548 <VL53L0X_isqrt+0x50>
    353e:	30 c0       	rjmp	.+96     	; 0x35a0 <VL53L0X_isqrt+0xa8>
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	a0 e0       	ldi	r26, 0x00	; 0
    3546:	b0 e4       	ldi	r27, 0x40	; 64
    3548:	40 e0       	ldi	r20, 0x00	; 0
    354a:	50 e0       	ldi	r21, 0x00	; 0
    354c:	ba 01       	movw	r22, r20
    354e:	6a 01       	movw	r12, r20
    3550:	7b 01       	movw	r14, r22
    3552:	c8 0e       	add	r12, r24
    3554:	d9 1e       	adc	r13, r25
    3556:	ea 1e       	adc	r14, r26
    3558:	fb 1e       	adc	r15, r27
    355a:	0c 15       	cp	r16, r12
    355c:	1d 05       	cpc	r17, r13
    355e:	2e 05       	cpc	r18, r14
    3560:	3f 05       	cpc	r19, r15
    3562:	68 f0       	brcs	.+26     	; 0x357e <VL53L0X_isqrt+0x86>
    3564:	0c 19       	sub	r16, r12
    3566:	1d 09       	sbc	r17, r13
    3568:	2e 09       	sbc	r18, r14
    356a:	3f 09       	sbc	r19, r15
    356c:	76 95       	lsr	r23
    356e:	67 95       	ror	r22
    3570:	57 95       	ror	r21
    3572:	47 95       	ror	r20
    3574:	48 0f       	add	r20, r24
    3576:	59 1f       	adc	r21, r25
    3578:	6a 1f       	adc	r22, r26
    357a:	7b 1f       	adc	r23, r27
    357c:	04 c0       	rjmp	.+8      	; 0x3586 <VL53L0X_isqrt+0x8e>
    357e:	76 95       	lsr	r23
    3580:	67 95       	ror	r22
    3582:	57 95       	ror	r21
    3584:	47 95       	ror	r20
    3586:	b6 95       	lsr	r27
    3588:	a7 95       	ror	r26
    358a:	97 95       	ror	r25
    358c:	87 95       	ror	r24
    358e:	b6 95       	lsr	r27
    3590:	a7 95       	ror	r26
    3592:	97 95       	ror	r25
    3594:	87 95       	ror	r24
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	a1 05       	cpc	r26, r1
    359a:	b1 05       	cpc	r27, r1
    359c:	c1 f6       	brne	.-80     	; 0x354e <VL53L0X_isqrt+0x56>
    359e:	03 c0       	rjmp	.+6      	; 0x35a6 <VL53L0X_isqrt+0xae>
    35a0:	40 e0       	ldi	r20, 0x00	; 0
    35a2:	50 e0       	ldi	r21, 0x00	; 0
    35a4:	ba 01       	movw	r22, r20
    35a6:	cb 01       	movw	r24, r22
    35a8:	ba 01       	movw	r22, r20
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	ff 90       	pop	r15
    35b0:	ef 90       	pop	r14
    35b2:	df 90       	pop	r13
    35b4:	cf 90       	pop	r12
    35b6:	08 95       	ret

000035b8 <VL53L0X_device_read_strobe>:
    35b8:	af 92       	push	r10
    35ba:	bf 92       	push	r11
    35bc:	cf 92       	push	r12
    35be:	df 92       	push	r13
    35c0:	ef 92       	push	r14
    35c2:	ff 92       	push	r15
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	1f 92       	push	r1
    35cc:	cd b7       	in	r28, 0x3d	; 61
    35ce:	de b7       	in	r29, 0x3e	; 62
    35d0:	5c 01       	movw	r10, r24
    35d2:	40 e0       	ldi	r20, 0x00	; 0
    35d4:	63 e8       	ldi	r22, 0x83	; 131
    35d6:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    35da:	18 2f       	mov	r17, r24
    35dc:	81 11       	cpse	r24, r1
    35de:	24 c0       	rjmp	.+72     	; 0x3628 <VL53L0X_device_read_strobe+0x70>
    35e0:	c1 2c       	mov	r12, r1
    35e2:	d1 2c       	mov	r13, r1
    35e4:	76 01       	movw	r14, r12
    35e6:	ae 01       	movw	r20, r28
    35e8:	4f 5f       	subi	r20, 0xFF	; 255
    35ea:	5f 4f       	sbci	r21, 0xFF	; 255
    35ec:	63 e8       	ldi	r22, 0x83	; 131
    35ee:	c5 01       	movw	r24, r10
    35f0:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    35f4:	18 2f       	mov	r17, r24
    35f6:	89 81       	ldd	r24, Y+1	; 0x01
    35f8:	81 11       	cpse	r24, r1
    35fa:	0f c0       	rjmp	.+30     	; 0x361a <VL53L0X_device_read_strobe+0x62>
    35fc:	11 11       	cpse	r17, r1
    35fe:	0d c0       	rjmp	.+26     	; 0x361a <VL53L0X_device_read_strobe+0x62>
    3600:	8f ef       	ldi	r24, 0xFF	; 255
    3602:	c8 1a       	sub	r12, r24
    3604:	d8 0a       	sbc	r13, r24
    3606:	e8 0a       	sbc	r14, r24
    3608:	f8 0a       	sbc	r15, r24
    360a:	88 ec       	ldi	r24, 0xC8	; 200
    360c:	c8 16       	cp	r12, r24
    360e:	d1 04       	cpc	r13, r1
    3610:	e1 04       	cpc	r14, r1
    3612:	f1 04       	cpc	r15, r1
    3614:	41 f7       	brne	.-48     	; 0x35e6 <VL53L0X_device_read_strobe+0x2e>
    3616:	19 ef       	ldi	r17, 0xF9	; 249
    3618:	07 c0       	rjmp	.+14     	; 0x3628 <VL53L0X_device_read_strobe+0x70>
    361a:	88 ec       	ldi	r24, 0xC8	; 200
    361c:	c8 16       	cp	r12, r24
    361e:	d1 04       	cpc	r13, r1
    3620:	e1 04       	cpc	r14, r1
    3622:	f1 04       	cpc	r15, r1
    3624:	08 f0       	brcs	.+2      	; 0x3628 <VL53L0X_device_read_strobe+0x70>
    3626:	19 ef       	ldi	r17, 0xF9	; 249
    3628:	41 e0       	ldi	r20, 0x01	; 1
    362a:	63 e8       	ldi	r22, 0x83	; 131
    362c:	c5 01       	movw	r24, r10
    362e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3632:	81 2b       	or	r24, r17
    3634:	0f 90       	pop	r0
    3636:	df 91       	pop	r29
    3638:	cf 91       	pop	r28
    363a:	1f 91       	pop	r17
    363c:	ff 90       	pop	r15
    363e:	ef 90       	pop	r14
    3640:	df 90       	pop	r13
    3642:	cf 90       	pop	r12
    3644:	bf 90       	pop	r11
    3646:	af 90       	pop	r10
    3648:	08 95       	ret

0000364a <VL53L0X_get_info_from_device>:
    364a:	2f 92       	push	r2
    364c:	3f 92       	push	r3
    364e:	4f 92       	push	r4
    3650:	5f 92       	push	r5
    3652:	6f 92       	push	r6
    3654:	7f 92       	push	r7
    3656:	8f 92       	push	r8
    3658:	9f 92       	push	r9
    365a:	af 92       	push	r10
    365c:	bf 92       	push	r11
    365e:	cf 92       	push	r12
    3660:	df 92       	push	r13
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	cf 93       	push	r28
    366c:	df 93       	push	r29
    366e:	cd b7       	in	r28, 0x3d	; 61
    3670:	de b7       	in	r29, 0x3e	; 62
    3672:	aa 97       	sbiw	r28, 0x2a	; 42
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	de bf       	out	0x3e, r29	; 62
    367a:	0f be       	out	0x3f, r0	; 63
    367c:	cd bf       	out	0x3d, r28	; 61
    367e:	18 86       	std	Y+8, r1	; 0x08
    3680:	19 86       	std	Y+9, r1	; 0x09
    3682:	1a 86       	std	Y+10, r1	; 0x0a
    3684:	1b 86       	std	Y+11, r1	; 0x0b
    3686:	1c 86       	std	Y+12, r1	; 0x0c
    3688:	1d 86       	std	Y+13, r1	; 0x0d
    368a:	1e 86       	std	Y+14, r1	; 0x0e
    368c:	1f 86       	std	Y+15, r1	; 0x0f
    368e:	fc 01       	movw	r30, r24
    3690:	e1 52       	subi	r30, 0x21	; 33
    3692:	ff 4f       	sbci	r31, 0xFF	; 255
    3694:	d0 80       	ld	r13, Z
    3696:	27 e0       	ldi	r18, 0x07	; 7
    3698:	d2 16       	cp	r13, r18
    369a:	09 f4       	brne	.+2      	; 0x369e <VL53L0X_get_info_from_device+0x54>
    369c:	63 c3       	rjmp	.+1734   	; 0x3d64 <VL53L0X_get_info_from_device+0x71a>
    369e:	06 2f       	mov	r16, r22
    36a0:	7c 01       	movw	r14, r24
    36a2:	41 e0       	ldi	r20, 0x01	; 1
    36a4:	60 e8       	ldi	r22, 0x80	; 128
    36a6:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    36aa:	18 2f       	mov	r17, r24
    36ac:	41 e0       	ldi	r20, 0x01	; 1
    36ae:	6f ef       	ldi	r22, 0xFF	; 255
    36b0:	c7 01       	movw	r24, r14
    36b2:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    36b6:	18 2b       	or	r17, r24
    36b8:	40 e0       	ldi	r20, 0x00	; 0
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	c7 01       	movw	r24, r14
    36be:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    36c2:	18 2b       	or	r17, r24
    36c4:	46 e0       	ldi	r20, 0x06	; 6
    36c6:	6f ef       	ldi	r22, 0xFF	; 255
    36c8:	c7 01       	movw	r24, r14
    36ca:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    36ce:	18 2b       	or	r17, r24
    36d0:	ae 01       	movw	r20, r28
    36d2:	4f 5f       	subi	r20, 0xFF	; 255
    36d4:	5f 4f       	sbci	r21, 0xFF	; 255
    36d6:	63 e8       	ldi	r22, 0x83	; 131
    36d8:	c7 01       	movw	r24, r14
    36da:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    36de:	18 2b       	or	r17, r24
    36e0:	49 81       	ldd	r20, Y+1	; 0x01
    36e2:	44 60       	ori	r20, 0x04	; 4
    36e4:	63 e8       	ldi	r22, 0x83	; 131
    36e6:	c7 01       	movw	r24, r14
    36e8:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    36ec:	18 2b       	or	r17, r24
    36ee:	47 e0       	ldi	r20, 0x07	; 7
    36f0:	6f ef       	ldi	r22, 0xFF	; 255
    36f2:	c7 01       	movw	r24, r14
    36f4:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    36f8:	18 2b       	or	r17, r24
    36fa:	41 e0       	ldi	r20, 0x01	; 1
    36fc:	61 e8       	ldi	r22, 0x81	; 129
    36fe:	c7 01       	movw	r24, r14
    3700:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3704:	18 2b       	or	r17, r24
    3706:	c7 01       	movw	r24, r14
    3708:	0e 94 62 2d 	call	0x5ac4	; 0x5ac4 <VL53L0X_PollingDelay>
    370c:	18 2b       	or	r17, r24
    370e:	41 e0       	ldi	r20, 0x01	; 1
    3710:	60 e8       	ldi	r22, 0x80	; 128
    3712:	c7 01       	movw	r24, r14
    3714:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3718:	18 2b       	or	r17, r24
    371a:	80 2f       	mov	r24, r16
    371c:	81 70       	andi	r24, 0x01	; 1
    371e:	28 2e       	mov	r2, r24
    3720:	00 ff       	sbrs	r16, 0
    3722:	56 c0       	rjmp	.+172    	; 0x37d0 <VL53L0X_get_info_from_device+0x186>
    3724:	d0 fc       	sbrc	r13, 0
    3726:	57 c0       	rjmp	.+174    	; 0x37d6 <VL53L0X_get_info_from_device+0x18c>
    3728:	4b e6       	ldi	r20, 0x6B	; 107
    372a:	64 e9       	ldi	r22, 0x94	; 148
    372c:	c7 01       	movw	r24, r14
    372e:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3732:	c8 2e       	mov	r12, r24
    3734:	c7 01       	movw	r24, r14
    3736:	40 df       	rcall	.-384    	; 0x35b8 <VL53L0X_device_read_strobe>
    3738:	8c 29       	or	r24, r12
    373a:	18 2b       	or	r17, r24
    373c:	ae 01       	movw	r20, r28
    373e:	4e 5f       	subi	r20, 0xFE	; 254
    3740:	5f 4f       	sbci	r21, 0xFF	; 255
    3742:	60 e9       	ldi	r22, 0x90	; 144
    3744:	c7 01       	movw	r24, r14
    3746:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    374a:	18 2b       	or	r17, r24
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	9b 81       	ldd	r25, Y+3	; 0x03
    3750:	ac 81       	ldd	r26, Y+4	; 0x04
    3752:	bd 81       	ldd	r27, Y+5	; 0x05
    3754:	e9 2f       	mov	r30, r25
    3756:	ef 77       	andi	r30, 0x7F	; 127
    3758:	e9 a7       	std	Y+41, r30	; 0x29
    375a:	07 2e       	mov	r0, r23
    375c:	7f e0       	ldi	r23, 0x0F	; 15
    375e:	b6 95       	lsr	r27
    3760:	a7 95       	ror	r26
    3762:	97 95       	ror	r25
    3764:	87 95       	ror	r24
    3766:	7a 95       	dec	r23
    3768:	d1 f7       	brne	.-12     	; 0x375e <VL53L0X_get_info_from_device+0x114>
    376a:	70 2d       	mov	r23, r0
    376c:	f8 2f       	mov	r31, r24
    376e:	f1 70       	andi	r31, 0x01	; 1
    3770:	fa a7       	std	Y+42, r31	; 0x2a
    3772:	44 e2       	ldi	r20, 0x24	; 36
    3774:	64 e9       	ldi	r22, 0x94	; 148
    3776:	c7 01       	movw	r24, r14
    3778:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    377c:	18 2b       	or	r17, r24
    377e:	c7 01       	movw	r24, r14
    3780:	1b df       	rcall	.-458    	; 0x35b8 <VL53L0X_device_read_strobe>
    3782:	18 2b       	or	r17, r24
    3784:	ae 01       	movw	r20, r28
    3786:	4e 5f       	subi	r20, 0xFE	; 254
    3788:	5f 4f       	sbci	r21, 0xFF	; 255
    378a:	60 e9       	ldi	r22, 0x90	; 144
    378c:	c7 01       	movw	r24, r14
    378e:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3792:	18 2b       	or	r17, r24
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	9b 81       	ldd	r25, Y+3	; 0x03
    3798:	2c 81       	ldd	r18, Y+4	; 0x04
    379a:	3d 81       	ldd	r19, Y+5	; 0x05
    379c:	3b a3       	std	Y+35, r19	; 0x23
    379e:	2c a3       	std	Y+36, r18	; 0x24
    37a0:	9d a3       	std	Y+37, r25	; 0x25
    37a2:	8e a3       	std	Y+38, r24	; 0x26
    37a4:	45 e2       	ldi	r20, 0x25	; 37
    37a6:	64 e9       	ldi	r22, 0x94	; 148
    37a8:	c7 01       	movw	r24, r14
    37aa:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    37ae:	18 2b       	or	r17, r24
    37b0:	c7 01       	movw	r24, r14
    37b2:	02 df       	rcall	.-508    	; 0x35b8 <VL53L0X_device_read_strobe>
    37b4:	18 2b       	or	r17, r24
    37b6:	ae 01       	movw	r20, r28
    37b8:	4e 5f       	subi	r20, 0xFE	; 254
    37ba:	5f 4f       	sbci	r21, 0xFF	; 255
    37bc:	60 e9       	ldi	r22, 0x90	; 144
    37be:	c7 01       	movw	r24, r14
    37c0:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    37c4:	18 2b       	or	r17, r24
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	9d 81       	ldd	r25, Y+5	; 0x05
    37ca:	9f a3       	std	Y+39, r25	; 0x27
    37cc:	88 a7       	std	Y+40, r24	; 0x28
    37ce:	05 c0       	rjmp	.+10     	; 0x37da <VL53L0X_get_info_from_device+0x190>
    37d0:	1a a6       	std	Y+42, r1	; 0x2a
    37d2:	19 a6       	std	Y+41, r1	; 0x29
    37d4:	02 c0       	rjmp	.+4      	; 0x37da <VL53L0X_get_info_from_device+0x190>
    37d6:	1a a6       	std	Y+42, r1	; 0x2a
    37d8:	19 a6       	std	Y+41, r1	; 0x29
    37da:	20 2f       	mov	r18, r16
    37dc:	22 70       	andi	r18, 0x02	; 2
    37de:	32 2e       	mov	r3, r18
    37e0:	01 ff       	sbrs	r16, 1
    37e2:	60 c1       	rjmp	.+704    	; 0x3aa4 <VL53L0X_get_info_from_device+0x45a>
    37e4:	d1 fc       	sbrc	r13, 1
    37e6:	5e c1       	rjmp	.+700    	; 0x3aa4 <VL53L0X_get_info_from_device+0x45a>
    37e8:	42 e0       	ldi	r20, 0x02	; 2
    37ea:	64 e9       	ldi	r22, 0x94	; 148
    37ec:	c7 01       	movw	r24, r14
    37ee:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    37f2:	c8 2e       	mov	r12, r24
    37f4:	c7 01       	movw	r24, r14
    37f6:	e0 de       	rcall	.-576    	; 0x35b8 <VL53L0X_device_read_strobe>
    37f8:	8c 29       	or	r24, r12
    37fa:	18 2b       	or	r17, r24
    37fc:	ae 01       	movw	r20, r28
    37fe:	4a 5f       	subi	r20, 0xFA	; 250
    3800:	5f 4f       	sbci	r21, 0xFF	; 255
    3802:	60 e9       	ldi	r22, 0x90	; 144
    3804:	c7 01       	movw	r24, r14
    3806:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    380a:	18 2b       	or	r17, r24
    380c:	4b e7       	ldi	r20, 0x7B	; 123
    380e:	64 e9       	ldi	r22, 0x94	; 148
    3810:	c7 01       	movw	r24, r14
    3812:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3816:	18 2b       	or	r17, r24
    3818:	c7 01       	movw	r24, r14
    381a:	ce de       	rcall	.-612    	; 0x35b8 <VL53L0X_device_read_strobe>
    381c:	18 2b       	or	r17, r24
    381e:	ae 01       	movw	r20, r28
    3820:	49 5f       	subi	r20, 0xF9	; 249
    3822:	5f 4f       	sbci	r21, 0xFF	; 255
    3824:	60 e9       	ldi	r22, 0x90	; 144
    3826:	c7 01       	movw	r24, r14
    3828:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    382c:	18 2b       	or	r17, r24
    382e:	47 e7       	ldi	r20, 0x77	; 119
    3830:	64 e9       	ldi	r22, 0x94	; 148
    3832:	c7 01       	movw	r24, r14
    3834:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3838:	18 2b       	or	r17, r24
    383a:	c7 01       	movw	r24, r14
    383c:	bd de       	rcall	.-646    	; 0x35b8 <VL53L0X_device_read_strobe>
    383e:	18 2b       	or	r17, r24
    3840:	ae 01       	movw	r20, r28
    3842:	4e 5f       	subi	r20, 0xFE	; 254
    3844:	5f 4f       	sbci	r21, 0xFF	; 255
    3846:	60 e9       	ldi	r22, 0x90	; 144
    3848:	c7 01       	movw	r24, r14
    384a:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    384e:	18 2b       	or	r17, r24
    3850:	4a 81       	ldd	r20, Y+2	; 0x02
    3852:	5b 81       	ldd	r21, Y+3	; 0x03
    3854:	6c 81       	ldd	r22, Y+4	; 0x04
    3856:	7d 81       	ldd	r23, Y+5	; 0x05
    3858:	db 01       	movw	r26, r22
    385a:	ca 01       	movw	r24, r20
    385c:	07 2e       	mov	r0, r23
    385e:	79 e1       	ldi	r23, 0x19	; 25
    3860:	b6 95       	lsr	r27
    3862:	a7 95       	ror	r26
    3864:	97 95       	ror	r25
    3866:	87 95       	ror	r24
    3868:	7a 95       	dec	r23
    386a:	d1 f7       	brne	.-12     	; 0x3860 <VL53L0X_get_info_from_device+0x216>
    386c:	70 2d       	mov	r23, r0
    386e:	8f 77       	andi	r24, 0x7F	; 127
    3870:	88 8b       	std	Y+16, r24	; 0x10
    3872:	db 01       	movw	r26, r22
    3874:	ca 01       	movw	r24, r20
    3876:	07 2e       	mov	r0, r23
    3878:	72 e1       	ldi	r23, 0x12	; 18
    387a:	b6 95       	lsr	r27
    387c:	a7 95       	ror	r26
    387e:	97 95       	ror	r25
    3880:	87 95       	ror	r24
    3882:	7a 95       	dec	r23
    3884:	d1 f7       	brne	.-12     	; 0x387a <VL53L0X_get_info_from_device+0x230>
    3886:	70 2d       	mov	r23, r0
    3888:	8f 77       	andi	r24, 0x7F	; 127
    388a:	89 8b       	std	Y+17, r24	; 0x11
    388c:	db 01       	movw	r26, r22
    388e:	ca 01       	movw	r24, r20
    3890:	07 2e       	mov	r0, r23
    3892:	7b e0       	ldi	r23, 0x0B	; 11
    3894:	b6 95       	lsr	r27
    3896:	a7 95       	ror	r26
    3898:	97 95       	ror	r25
    389a:	87 95       	ror	r24
    389c:	7a 95       	dec	r23
    389e:	d1 f7       	brne	.-12     	; 0x3894 <VL53L0X_get_info_from_device+0x24a>
    38a0:	70 2d       	mov	r23, r0
    38a2:	8f 77       	andi	r24, 0x7F	; 127
    38a4:	8a 8b       	std	Y+18, r24	; 0x12
    38a6:	db 01       	movw	r26, r22
    38a8:	ca 01       	movw	r24, r20
    38aa:	68 94       	set
    38ac:	13 f8       	bld	r1, 3
    38ae:	b6 95       	lsr	r27
    38b0:	a7 95       	ror	r26
    38b2:	97 95       	ror	r25
    38b4:	87 95       	ror	r24
    38b6:	16 94       	lsr	r1
    38b8:	d1 f7       	brne	.-12     	; 0x38ae <VL53L0X_get_info_from_device+0x264>
    38ba:	8f 77       	andi	r24, 0x7F	; 127
    38bc:	8b 8b       	std	Y+19, r24	; 0x13
    38be:	4f 70       	andi	r20, 0x0F	; 15
    38c0:	44 0f       	add	r20, r20
    38c2:	44 0f       	add	r20, r20
    38c4:	44 0f       	add	r20, r20
    38c6:	49 83       	std	Y+1, r20	; 0x01
    38c8:	48 e7       	ldi	r20, 0x78	; 120
    38ca:	64 e9       	ldi	r22, 0x94	; 148
    38cc:	c7 01       	movw	r24, r14
    38ce:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    38d2:	18 2b       	or	r17, r24
    38d4:	c7 01       	movw	r24, r14
    38d6:	70 de       	rcall	.-800    	; 0x35b8 <VL53L0X_device_read_strobe>
    38d8:	18 2b       	or	r17, r24
    38da:	ae 01       	movw	r20, r28
    38dc:	4e 5f       	subi	r20, 0xFE	; 254
    38de:	5f 4f       	sbci	r21, 0xFF	; 255
    38e0:	60 e9       	ldi	r22, 0x90	; 144
    38e2:	c7 01       	movw	r24, r14
    38e4:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    38e8:	18 2b       	or	r17, r24
    38ea:	8a 81       	ldd	r24, Y+2	; 0x02
    38ec:	9b 81       	ldd	r25, Y+3	; 0x03
    38ee:	ac 81       	ldd	r26, Y+4	; 0x04
    38f0:	bd 81       	ldd	r27, Y+5	; 0x05
    38f2:	ac 01       	movw	r20, r24
    38f4:	bd 01       	movw	r22, r26
    38f6:	03 2e       	mov	r0, r19
    38f8:	3d e1       	ldi	r19, 0x1D	; 29
    38fa:	76 95       	lsr	r23
    38fc:	67 95       	ror	r22
    38fe:	57 95       	ror	r21
    3900:	47 95       	ror	r20
    3902:	3a 95       	dec	r19
    3904:	d1 f7       	brne	.-12     	; 0x38fa <VL53L0X_get_info_from_device+0x2b0>
    3906:	30 2d       	mov	r19, r0
    3908:	4f 77       	andi	r20, 0x7F	; 127
    390a:	39 81       	ldd	r19, Y+1	; 0x01
    390c:	24 2f       	mov	r18, r20
    390e:	23 0f       	add	r18, r19
    3910:	2c 8b       	std	Y+20, r18	; 0x14
    3912:	ac 01       	movw	r20, r24
    3914:	bd 01       	movw	r22, r26
    3916:	03 2e       	mov	r0, r19
    3918:	36 e1       	ldi	r19, 0x16	; 22
    391a:	76 95       	lsr	r23
    391c:	67 95       	ror	r22
    391e:	57 95       	ror	r21
    3920:	47 95       	ror	r20
    3922:	3a 95       	dec	r19
    3924:	d1 f7       	brne	.-12     	; 0x391a <VL53L0X_get_info_from_device+0x2d0>
    3926:	30 2d       	mov	r19, r0
    3928:	4f 77       	andi	r20, 0x7F	; 127
    392a:	4d 8b       	std	Y+21, r20	; 0x15
    392c:	ac 01       	movw	r20, r24
    392e:	bd 01       	movw	r22, r26
    3930:	03 2e       	mov	r0, r19
    3932:	3f e0       	ldi	r19, 0x0F	; 15
    3934:	76 95       	lsr	r23
    3936:	67 95       	ror	r22
    3938:	57 95       	ror	r21
    393a:	47 95       	ror	r20
    393c:	3a 95       	dec	r19
    393e:	d1 f7       	brne	.-12     	; 0x3934 <VL53L0X_get_info_from_device+0x2ea>
    3940:	30 2d       	mov	r19, r0
    3942:	4f 77       	andi	r20, 0x7F	; 127
    3944:	4e 8b       	std	Y+22, r20	; 0x16
    3946:	29 2f       	mov	r18, r25
    3948:	2f 77       	andi	r18, 0x7F	; 127
    394a:	2f 8b       	std	Y+23, r18	; 0x17
    394c:	ac 01       	movw	r20, r24
    394e:	bd 01       	movw	r22, r26
    3950:	76 95       	lsr	r23
    3952:	67 95       	ror	r22
    3954:	57 95       	ror	r21
    3956:	47 95       	ror	r20
    3958:	4f 77       	andi	r20, 0x7F	; 127
    395a:	48 8f       	std	Y+24, r20	; 0x18
    395c:	98 2f       	mov	r25, r24
    395e:	91 70       	andi	r25, 0x01	; 1
    3960:	92 95       	swap	r25
    3962:	99 0f       	add	r25, r25
    3964:	99 0f       	add	r25, r25
    3966:	90 7c       	andi	r25, 0xC0	; 192
    3968:	99 83       	std	Y+1, r25	; 0x01
    396a:	49 e7       	ldi	r20, 0x79	; 121
    396c:	64 e9       	ldi	r22, 0x94	; 148
    396e:	c7 01       	movw	r24, r14
    3970:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3974:	18 2b       	or	r17, r24
    3976:	c7 01       	movw	r24, r14
    3978:	1f de       	rcall	.-962    	; 0x35b8 <VL53L0X_device_read_strobe>
    397a:	18 2b       	or	r17, r24
    397c:	ae 01       	movw	r20, r28
    397e:	4e 5f       	subi	r20, 0xFE	; 254
    3980:	5f 4f       	sbci	r21, 0xFF	; 255
    3982:	60 e9       	ldi	r22, 0x90	; 144
    3984:	c7 01       	movw	r24, r14
    3986:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    398a:	18 2b       	or	r17, r24
    398c:	8a 81       	ldd	r24, Y+2	; 0x02
    398e:	9b 81       	ldd	r25, Y+3	; 0x03
    3990:	ac 81       	ldd	r26, Y+4	; 0x04
    3992:	bd 81       	ldd	r27, Y+5	; 0x05
    3994:	ac 01       	movw	r20, r24
    3996:	bd 01       	movw	r22, r26
    3998:	03 2e       	mov	r0, r19
    399a:	3a e1       	ldi	r19, 0x1A	; 26
    399c:	76 95       	lsr	r23
    399e:	67 95       	ror	r22
    39a0:	57 95       	ror	r21
    39a2:	47 95       	ror	r20
    39a4:	3a 95       	dec	r19
    39a6:	d1 f7       	brne	.-12     	; 0x399c <VL53L0X_get_info_from_device+0x352>
    39a8:	30 2d       	mov	r19, r0
    39aa:	4f 77       	andi	r20, 0x7F	; 127
    39ac:	39 81       	ldd	r19, Y+1	; 0x01
    39ae:	24 2f       	mov	r18, r20
    39b0:	23 0f       	add	r18, r19
    39b2:	29 8f       	std	Y+25, r18	; 0x19
    39b4:	ac 01       	movw	r20, r24
    39b6:	bd 01       	movw	r22, r26
    39b8:	03 2e       	mov	r0, r19
    39ba:	33 e1       	ldi	r19, 0x13	; 19
    39bc:	76 95       	lsr	r23
    39be:	67 95       	ror	r22
    39c0:	57 95       	ror	r21
    39c2:	47 95       	ror	r20
    39c4:	3a 95       	dec	r19
    39c6:	d1 f7       	brne	.-12     	; 0x39bc <VL53L0X_get_info_from_device+0x372>
    39c8:	30 2d       	mov	r19, r0
    39ca:	4f 77       	andi	r20, 0x7F	; 127
    39cc:	4a 8f       	std	Y+26, r20	; 0x1a
    39ce:	ac 01       	movw	r20, r24
    39d0:	bd 01       	movw	r22, r26
    39d2:	03 2e       	mov	r0, r19
    39d4:	3c e0       	ldi	r19, 0x0C	; 12
    39d6:	76 95       	lsr	r23
    39d8:	67 95       	ror	r22
    39da:	57 95       	ror	r21
    39dc:	47 95       	ror	r20
    39de:	3a 95       	dec	r19
    39e0:	d1 f7       	brne	.-12     	; 0x39d6 <VL53L0X_get_info_from_device+0x38c>
    39e2:	30 2d       	mov	r19, r0
    39e4:	4f 77       	andi	r20, 0x7F	; 127
    39e6:	4b 8f       	std	Y+27, r20	; 0x1b
    39e8:	ac 01       	movw	r20, r24
    39ea:	bd 01       	movw	r22, r26
    39ec:	68 94       	set
    39ee:	14 f8       	bld	r1, 4
    39f0:	76 95       	lsr	r23
    39f2:	67 95       	ror	r22
    39f4:	57 95       	ror	r21
    39f6:	47 95       	ror	r20
    39f8:	16 94       	lsr	r1
    39fa:	d1 f7       	brne	.-12     	; 0x39f0 <VL53L0X_get_info_from_device+0x3a6>
    39fc:	4f 77       	andi	r20, 0x7F	; 127
    39fe:	4c 8f       	std	Y+28, r20	; 0x1c
    3a00:	98 2f       	mov	r25, r24
    3a02:	9f 71       	andi	r25, 0x1F	; 31
    3a04:	99 0f       	add	r25, r25
    3a06:	99 0f       	add	r25, r25
    3a08:	99 83       	std	Y+1, r25	; 0x01
    3a0a:	4a e7       	ldi	r20, 0x7A	; 122
    3a0c:	64 e9       	ldi	r22, 0x94	; 148
    3a0e:	c7 01       	movw	r24, r14
    3a10:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3a14:	18 2b       	or	r17, r24
    3a16:	c7 01       	movw	r24, r14
    3a18:	cf dd       	rcall	.-1122   	; 0x35b8 <VL53L0X_device_read_strobe>
    3a1a:	18 2b       	or	r17, r24
    3a1c:	ae 01       	movw	r20, r28
    3a1e:	4e 5f       	subi	r20, 0xFE	; 254
    3a20:	5f 4f       	sbci	r21, 0xFF	; 255
    3a22:	60 e9       	ldi	r22, 0x90	; 144
    3a24:	c7 01       	movw	r24, r14
    3a26:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3a2a:	18 2b       	or	r17, r24
    3a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a30:	ac 81       	ldd	r26, Y+4	; 0x04
    3a32:	bd 81       	ldd	r27, Y+5	; 0x05
    3a34:	ac 01       	movw	r20, r24
    3a36:	bd 01       	movw	r22, r26
    3a38:	03 2e       	mov	r0, r19
    3a3a:	3e e1       	ldi	r19, 0x1E	; 30
    3a3c:	76 95       	lsr	r23
    3a3e:	67 95       	ror	r22
    3a40:	57 95       	ror	r21
    3a42:	47 95       	ror	r20
    3a44:	3a 95       	dec	r19
    3a46:	d1 f7       	brne	.-12     	; 0x3a3c <VL53L0X_get_info_from_device+0x3f2>
    3a48:	30 2d       	mov	r19, r0
    3a4a:	4f 77       	andi	r20, 0x7F	; 127
    3a4c:	39 81       	ldd	r19, Y+1	; 0x01
    3a4e:	24 2f       	mov	r18, r20
    3a50:	23 0f       	add	r18, r19
    3a52:	2d 8f       	std	Y+29, r18	; 0x1d
    3a54:	ac 01       	movw	r20, r24
    3a56:	bd 01       	movw	r22, r26
    3a58:	03 2e       	mov	r0, r19
    3a5a:	37 e1       	ldi	r19, 0x17	; 23
    3a5c:	76 95       	lsr	r23
    3a5e:	67 95       	ror	r22
    3a60:	57 95       	ror	r21
    3a62:	47 95       	ror	r20
    3a64:	3a 95       	dec	r19
    3a66:	d1 f7       	brne	.-12     	; 0x3a5c <VL53L0X_get_info_from_device+0x412>
    3a68:	30 2d       	mov	r19, r0
    3a6a:	4f 77       	andi	r20, 0x7F	; 127
    3a6c:	4e 8f       	std	Y+30, r20	; 0x1e
    3a6e:	2a 2f       	mov	r18, r26
    3a70:	2f 77       	andi	r18, 0x7F	; 127
    3a72:	2f 8f       	std	Y+31, r18	; 0x1f
    3a74:	ac 01       	movw	r20, r24
    3a76:	bd 01       	movw	r22, r26
    3a78:	03 2e       	mov	r0, r19
    3a7a:	39 e0       	ldi	r19, 0x09	; 9
    3a7c:	76 95       	lsr	r23
    3a7e:	67 95       	ror	r22
    3a80:	57 95       	ror	r21
    3a82:	47 95       	ror	r20
    3a84:	3a 95       	dec	r19
    3a86:	d1 f7       	brne	.-12     	; 0x3a7c <VL53L0X_get_info_from_device+0x432>
    3a88:	30 2d       	mov	r19, r0
    3a8a:	4f 77       	andi	r20, 0x7F	; 127
    3a8c:	48 a3       	std	Y+32, r20	; 0x20
    3a8e:	b6 95       	lsr	r27
    3a90:	a7 95       	ror	r26
    3a92:	97 95       	ror	r25
    3a94:	87 95       	ror	r24
    3a96:	b6 95       	lsr	r27
    3a98:	a7 95       	ror	r26
    3a9a:	97 95       	ror	r25
    3a9c:	87 95       	ror	r24
    3a9e:	8f 77       	andi	r24, 0x7F	; 127
    3aa0:	89 a3       	std	Y+33, r24	; 0x21
    3aa2:	1a a2       	std	Y+34, r1	; 0x22
    3aa4:	80 2f       	mov	r24, r16
    3aa6:	84 70       	andi	r24, 0x04	; 4
    3aa8:	c8 2e       	mov	r12, r24
    3aaa:	02 ff       	sbrs	r16, 2
    3aac:	98 c0       	rjmp	.+304    	; 0x3bde <VL53L0X_get_info_from_device+0x594>
    3aae:	d2 fc       	sbrc	r13, 2
    3ab0:	9d c0       	rjmp	.+314    	; 0x3bec <VL53L0X_get_info_from_device+0x5a2>
    3ab2:	4b e7       	ldi	r20, 0x7B	; 123
    3ab4:	64 e9       	ldi	r22, 0x94	; 148
    3ab6:	c7 01       	movw	r24, r14
    3ab8:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3abc:	b8 2e       	mov	r11, r24
    3abe:	c7 01       	movw	r24, r14
    3ac0:	7b dd       	rcall	.-1290   	; 0x35b8 <VL53L0X_device_read_strobe>
    3ac2:	8b 29       	or	r24, r11
    3ac4:	18 2b       	or	r17, r24
    3ac6:	ae 01       	movw	r20, r28
    3ac8:	48 5f       	subi	r20, 0xF8	; 248
    3aca:	5f 4f       	sbci	r21, 0xFF	; 255
    3acc:	60 e9       	ldi	r22, 0x90	; 144
    3ace:	c7 01       	movw	r24, r14
    3ad0:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3ad4:	18 2b       	or	r17, r24
    3ad6:	4c e7       	ldi	r20, 0x7C	; 124
    3ad8:	64 e9       	ldi	r22, 0x94	; 148
    3ada:	c7 01       	movw	r24, r14
    3adc:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3ae0:	18 2b       	or	r17, r24
    3ae2:	c7 01       	movw	r24, r14
    3ae4:	69 dd       	rcall	.-1326   	; 0x35b8 <VL53L0X_device_read_strobe>
    3ae6:	18 2b       	or	r17, r24
    3ae8:	ae 01       	movw	r20, r28
    3aea:	44 5f       	subi	r20, 0xF4	; 244
    3aec:	5f 4f       	sbci	r21, 0xFF	; 255
    3aee:	60 e9       	ldi	r22, 0x90	; 144
    3af0:	c7 01       	movw	r24, r14
    3af2:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3af6:	18 2b       	or	r17, r24
    3af8:	43 e7       	ldi	r20, 0x73	; 115
    3afa:	64 e9       	ldi	r22, 0x94	; 148
    3afc:	c7 01       	movw	r24, r14
    3afe:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3b02:	18 2b       	or	r17, r24
    3b04:	c7 01       	movw	r24, r14
    3b06:	58 dd       	rcall	.-1360   	; 0x35b8 <VL53L0X_device_read_strobe>
    3b08:	18 2b       	or	r17, r24
    3b0a:	ae 01       	movw	r20, r28
    3b0c:	4e 5f       	subi	r20, 0xFE	; 254
    3b0e:	5f 4f       	sbci	r21, 0xFF	; 255
    3b10:	60 e9       	ldi	r22, 0x90	; 144
    3b12:	c7 01       	movw	r24, r14
    3b14:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3b18:	18 2b       	or	r17, r24
    3b1a:	8a 80       	ldd	r8, Y+2	; 0x02
    3b1c:	9b 80       	ldd	r9, Y+3	; 0x03
    3b1e:	ac 80       	ldd	r10, Y+4	; 0x04
    3b20:	bd 80       	ldd	r11, Y+5	; 0x05
    3b22:	ba 2c       	mov	r11, r10
    3b24:	a9 2c       	mov	r10, r9
    3b26:	98 2c       	mov	r9, r8
    3b28:	88 24       	eor	r8, r8
    3b2a:	24 01       	movw	r4, r8
    3b2c:	35 01       	movw	r6, r10
    3b2e:	66 24       	eor	r6, r6
    3b30:	77 24       	eor	r7, r7
    3b32:	44 e7       	ldi	r20, 0x74	; 116
    3b34:	64 e9       	ldi	r22, 0x94	; 148
    3b36:	c7 01       	movw	r24, r14
    3b38:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3b3c:	18 2b       	or	r17, r24
    3b3e:	c7 01       	movw	r24, r14
    3b40:	3b dd       	rcall	.-1418   	; 0x35b8 <VL53L0X_device_read_strobe>
    3b42:	18 2b       	or	r17, r24
    3b44:	ae 01       	movw	r20, r28
    3b46:	4e 5f       	subi	r20, 0xFE	; 254
    3b48:	5f 4f       	sbci	r21, 0xFF	; 255
    3b4a:	60 e9       	ldi	r22, 0x90	; 144
    3b4c:	c7 01       	movw	r24, r14
    3b4e:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3b52:	18 2b       	or	r17, r24
    3b54:	8a 80       	ldd	r8, Y+2	; 0x02
    3b56:	9b 80       	ldd	r9, Y+3	; 0x03
    3b58:	ac 80       	ldd	r10, Y+4	; 0x04
    3b5a:	bd 80       	ldd	r11, Y+5	; 0x05
    3b5c:	8b 2c       	mov	r8, r11
    3b5e:	99 24       	eor	r9, r9
    3b60:	aa 24       	eor	r10, r10
    3b62:	bb 24       	eor	r11, r11
    3b64:	84 28       	or	r8, r4
    3b66:	95 28       	or	r9, r5
    3b68:	a6 28       	or	r10, r6
    3b6a:	b7 28       	or	r11, r7
    3b6c:	45 e7       	ldi	r20, 0x75	; 117
    3b6e:	64 e9       	ldi	r22, 0x94	; 148
    3b70:	c7 01       	movw	r24, r14
    3b72:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3b76:	18 2b       	or	r17, r24
    3b78:	c7 01       	movw	r24, r14
    3b7a:	1e dd       	rcall	.-1476   	; 0x35b8 <VL53L0X_device_read_strobe>
    3b7c:	18 2b       	or	r17, r24
    3b7e:	ae 01       	movw	r20, r28
    3b80:	4e 5f       	subi	r20, 0xFE	; 254
    3b82:	5f 4f       	sbci	r21, 0xFF	; 255
    3b84:	60 e9       	ldi	r22, 0x90	; 144
    3b86:	c7 01       	movw	r24, r14
    3b88:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3b8c:	18 2b       	or	r17, r24
    3b8e:	4a 80       	ldd	r4, Y+2	; 0x02
    3b90:	5b 80       	ldd	r5, Y+3	; 0x03
    3b92:	6c 80       	ldd	r6, Y+4	; 0x04
    3b94:	7d 80       	ldd	r7, Y+5	; 0x05
    3b96:	76 2c       	mov	r7, r6
    3b98:	65 2c       	mov	r6, r5
    3b9a:	54 2c       	mov	r5, r4
    3b9c:	44 24       	eor	r4, r4
    3b9e:	66 24       	eor	r6, r6
    3ba0:	77 24       	eor	r7, r7
    3ba2:	46 e7       	ldi	r20, 0x76	; 118
    3ba4:	64 e9       	ldi	r22, 0x94	; 148
    3ba6:	c7 01       	movw	r24, r14
    3ba8:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3bac:	18 2b       	or	r17, r24
    3bae:	c7 01       	movw	r24, r14
    3bb0:	03 dd       	rcall	.-1530   	; 0x35b8 <VL53L0X_device_read_strobe>
    3bb2:	18 2b       	or	r17, r24
    3bb4:	ae 01       	movw	r20, r28
    3bb6:	4e 5f       	subi	r20, 0xFE	; 254
    3bb8:	5f 4f       	sbci	r21, 0xFF	; 255
    3bba:	60 e9       	ldi	r22, 0x90	; 144
    3bbc:	c7 01       	movw	r24, r14
    3bbe:	0e 94 57 2d 	call	0x5aae	; 0x5aae <VL53L0X_RdDWord>
    3bc2:	18 2b       	or	r17, r24
    3bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3bc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3bc8:	ac 81       	ldd	r26, Y+4	; 0x04
    3bca:	bd 81       	ldd	r27, Y+5	; 0x05
    3bcc:	8b 2f       	mov	r24, r27
    3bce:	99 27       	eor	r25, r25
    3bd0:	aa 27       	eor	r26, r26
    3bd2:	bb 27       	eor	r27, r27
    3bd4:	48 2a       	or	r4, r24
    3bd6:	59 2a       	or	r5, r25
    3bd8:	6a 2a       	or	r6, r26
    3bda:	7b 2a       	or	r7, r27
    3bdc:	0d c0       	rjmp	.+26     	; 0x3bf8 <VL53L0X_get_info_from_device+0x5ae>
    3bde:	81 2c       	mov	r8, r1
    3be0:	91 2c       	mov	r9, r1
    3be2:	54 01       	movw	r10, r8
    3be4:	41 2c       	mov	r4, r1
    3be6:	51 2c       	mov	r5, r1
    3be8:	32 01       	movw	r6, r4
    3bea:	06 c0       	rjmp	.+12     	; 0x3bf8 <VL53L0X_get_info_from_device+0x5ae>
    3bec:	81 2c       	mov	r8, r1
    3bee:	91 2c       	mov	r9, r1
    3bf0:	54 01       	movw	r10, r8
    3bf2:	41 2c       	mov	r4, r1
    3bf4:	51 2c       	mov	r5, r1
    3bf6:	32 01       	movw	r6, r4
    3bf8:	40 e0       	ldi	r20, 0x00	; 0
    3bfa:	61 e8       	ldi	r22, 0x81	; 129
    3bfc:	c7 01       	movw	r24, r14
    3bfe:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3c02:	18 2b       	or	r17, r24
    3c04:	46 e0       	ldi	r20, 0x06	; 6
    3c06:	6f ef       	ldi	r22, 0xFF	; 255
    3c08:	c7 01       	movw	r24, r14
    3c0a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3c0e:	18 2b       	or	r17, r24
    3c10:	ae 01       	movw	r20, r28
    3c12:	4f 5f       	subi	r20, 0xFF	; 255
    3c14:	5f 4f       	sbci	r21, 0xFF	; 255
    3c16:	63 e8       	ldi	r22, 0x83	; 131
    3c18:	c7 01       	movw	r24, r14
    3c1a:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    3c1e:	18 2b       	or	r17, r24
    3c20:	49 81       	ldd	r20, Y+1	; 0x01
    3c22:	4b 7f       	andi	r20, 0xFB	; 251
    3c24:	63 e8       	ldi	r22, 0x83	; 131
    3c26:	c7 01       	movw	r24, r14
    3c28:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3c2c:	18 2b       	or	r17, r24
    3c2e:	41 e0       	ldi	r20, 0x01	; 1
    3c30:	6f ef       	ldi	r22, 0xFF	; 255
    3c32:	c7 01       	movw	r24, r14
    3c34:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3c38:	18 2b       	or	r17, r24
    3c3a:	41 e0       	ldi	r20, 0x01	; 1
    3c3c:	60 e0       	ldi	r22, 0x00	; 0
    3c3e:	c7 01       	movw	r24, r14
    3c40:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3c44:	18 2b       	or	r17, r24
    3c46:	40 e0       	ldi	r20, 0x00	; 0
    3c48:	6f ef       	ldi	r22, 0xFF	; 255
    3c4a:	c7 01       	movw	r24, r14
    3c4c:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3c50:	18 2b       	or	r17, r24
    3c52:	40 e0       	ldi	r20, 0x00	; 0
    3c54:	60 e8       	ldi	r22, 0x80	; 128
    3c56:	c7 01       	movw	r24, r14
    3c58:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    3c5c:	18 2b       	or	r17, r24
    3c5e:	09 f0       	breq	.+2      	; 0x3c62 <VL53L0X_get_info_from_device+0x618>
    3c60:	82 c0       	rjmp	.+260    	; 0x3d66 <VL53L0X_get_info_from_device+0x71c>
    3c62:	22 20       	and	r2, r2
    3c64:	b9 f0       	breq	.+46     	; 0x3c94 <VL53L0X_get_info_from_device+0x64a>
    3c66:	d0 fc       	sbrc	r13, 0
    3c68:	15 c0       	rjmp	.+42     	; 0x3c94 <VL53L0X_get_info_from_device+0x64a>
    3c6a:	f7 01       	movw	r30, r14
    3c6c:	ee 5f       	subi	r30, 0xFE	; 254
    3c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c70:	29 a5       	ldd	r18, Y+41	; 0x29
    3c72:	20 83       	st	Z, r18
    3c74:	31 96       	adiw	r30, 0x01	; 1
    3c76:	8a a5       	ldd	r24, Y+42	; 0x2a
    3c78:	80 83       	st	Z, r24
    3c7a:	fe 01       	movw	r30, r28
    3c7c:	b3 96       	adiw	r30, 0x23	; 35
    3c7e:	d7 01       	movw	r26, r14
    3c80:	a9 5e       	subi	r26, 0xE9	; 233
    3c82:	be 4f       	sbci	r27, 0xFE	; 254
    3c84:	9e 01       	movw	r18, r28
    3c86:	27 5d       	subi	r18, 0xD7	; 215
    3c88:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8a:	81 91       	ld	r24, Z+
    3c8c:	8d 93       	st	X+, r24
    3c8e:	2e 17       	cp	r18, r30
    3c90:	3f 07       	cpc	r19, r31
    3c92:	d9 f7       	brne	.-10     	; 0x3c8a <VL53L0X_get_info_from_device+0x640>
    3c94:	33 20       	and	r3, r3
    3c96:	91 f0       	breq	.+36     	; 0x3cbc <VL53L0X_get_info_from_device+0x672>
    3c98:	d1 fc       	sbrc	r13, 1
    3c9a:	10 c0       	rjmp	.+32     	; 0x3cbc <VL53L0X_get_info_from_device+0x672>
    3c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    3c9e:	f7 01       	movw	r30, r14
    3ca0:	e0 52       	subi	r30, 0x20	; 32
    3ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca4:	80 83       	st	Z, r24
    3ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca8:	31 96       	adiw	r30, 0x01	; 1
    3caa:	80 83       	st	Z, r24
    3cac:	be 01       	movw	r22, r28
    3cae:	60 5f       	subi	r22, 0xF0	; 240
    3cb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3cb2:	c7 01       	movw	r24, r14
    3cb4:	8e 51       	subi	r24, 0x1E	; 30
    3cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3cb8:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcpy>
    3cbc:	cc 20       	and	r12, r12
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <VL53L0X_get_info_from_device+0x678>
    3cc0:	4b c0       	rjmp	.+150    	; 0x3d58 <VL53L0X_get_info_from_device+0x70e>
    3cc2:	d2 fc       	sbrc	r13, 2
    3cc4:	49 c0       	rjmp	.+146    	; 0x3d58 <VL53L0X_get_info_from_device+0x70e>
    3cc6:	88 85       	ldd	r24, Y+8	; 0x08
    3cc8:	99 85       	ldd	r25, Y+9	; 0x09
    3cca:	aa 85       	ldd	r26, Y+10	; 0x0a
    3ccc:	bb 85       	ldd	r27, Y+11	; 0x0b
    3cce:	f7 01       	movw	r30, r14
    3cd0:	eb 5f       	subi	r30, 0xFB	; 251
    3cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd4:	80 83       	st	Z, r24
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	a2 83       	std	Z+2, r26	; 0x02
    3cda:	b3 83       	std	Z+3, r27	; 0x03
    3cdc:	8c 85       	ldd	r24, Y+12	; 0x0c
    3cde:	9d 85       	ldd	r25, Y+13	; 0x0d
    3ce0:	ae 85       	ldd	r26, Y+14	; 0x0e
    3ce2:	bf 85       	ldd	r27, Y+15	; 0x0f
    3ce4:	34 96       	adiw	r30, 0x04	; 4
    3ce6:	80 83       	st	Z, r24
    3ce8:	91 83       	std	Z+1, r25	; 0x01
    3cea:	a2 83       	std	Z+2, r26	; 0x02
    3cec:	b3 83       	std	Z+3, r27	; 0x03
    3cee:	34 96       	adiw	r30, 0x04	; 4
    3cf0:	07 2e       	mov	r0, r23
    3cf2:	79 e0       	ldi	r23, 0x09	; 9
    3cf4:	88 0c       	add	r8, r8
    3cf6:	99 1c       	adc	r9, r9
    3cf8:	aa 1c       	adc	r10, r10
    3cfa:	bb 1c       	adc	r11, r11
    3cfc:	7a 95       	dec	r23
    3cfe:	d1 f7       	brne	.-12     	; 0x3cf4 <VL53L0X_get_info_from_device+0x6aa>
    3d00:	70 2d       	mov	r23, r0
    3d02:	80 82       	st	Z, r8
    3d04:	91 82       	std	Z+1, r9	; 0x01
    3d06:	a2 82       	std	Z+2, r10	; 0x02
    3d08:	b3 82       	std	Z+3, r11	; 0x03
    3d0a:	41 14       	cp	r4, r1
    3d0c:	51 04       	cpc	r5, r1
    3d0e:	61 04       	cpc	r6, r1
    3d10:	71 04       	cpc	r7, r1
    3d12:	b9 f0       	breq	.+46     	; 0x3d42 <VL53L0X_get_info_from_device+0x6f8>
    3d14:	a3 01       	movw	r20, r6
    3d16:	92 01       	movw	r18, r4
    3d18:	39 51       	subi	r19, 0x19	; 25
    3d1a:	41 09       	sbc	r20, r1
    3d1c:	51 09       	sbc	r21, r1
    3d1e:	a8 ee       	ldi	r26, 0xE8	; 232
    3d20:	b3 e0       	ldi	r27, 0x03	; 3
    3d22:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	68 94       	set
    3d2c:	13 f8       	bld	r1, 3
    3d2e:	b6 95       	lsr	r27
    3d30:	a7 95       	ror	r26
    3d32:	97 95       	ror	r25
    3d34:	87 95       	ror	r24
    3d36:	16 94       	lsr	r1
    3d38:	d1 f7       	brne	.-12     	; 0x3d2e <VL53L0X_get_info_from_device+0x6e4>
    3d3a:	91 95       	neg	r25
    3d3c:	81 95       	neg	r24
    3d3e:	91 09       	sbc	r25, r1
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <VL53L0X_get_info_from_device+0x6fc>
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	09 2e       	mov	r0, r25
    3d48:	00 0c       	add	r0, r0
    3d4a:	aa 0b       	sbc	r26, r26
    3d4c:	bb 0b       	sbc	r27, r27
    3d4e:	f7 01       	movw	r30, r14
    3d50:	84 87       	std	Z+12, r24	; 0x0c
    3d52:	95 87       	std	Z+13, r25	; 0x0d
    3d54:	a6 87       	std	Z+14, r26	; 0x0e
    3d56:	b7 87       	std	Z+15, r27	; 0x0f
    3d58:	f7 01       	movw	r30, r14
    3d5a:	e1 52       	subi	r30, 0x21	; 33
    3d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5e:	0d 29       	or	r16, r13
    3d60:	00 83       	st	Z, r16
    3d62:	01 c0       	rjmp	.+2      	; 0x3d66 <VL53L0X_get_info_from_device+0x71c>
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	81 2f       	mov	r24, r17
    3d68:	aa 96       	adiw	r28, 0x2a	; 42
    3d6a:	0f b6       	in	r0, 0x3f	; 63
    3d6c:	f8 94       	cli
    3d6e:	de bf       	out	0x3e, r29	; 62
    3d70:	0f be       	out	0x3f, r0	; 63
    3d72:	cd bf       	out	0x3d, r28	; 61
    3d74:	df 91       	pop	r29
    3d76:	cf 91       	pop	r28
    3d78:	1f 91       	pop	r17
    3d7a:	0f 91       	pop	r16
    3d7c:	ff 90       	pop	r15
    3d7e:	ef 90       	pop	r14
    3d80:	df 90       	pop	r13
    3d82:	cf 90       	pop	r12
    3d84:	bf 90       	pop	r11
    3d86:	af 90       	pop	r10
    3d88:	9f 90       	pop	r9
    3d8a:	8f 90       	pop	r8
    3d8c:	7f 90       	pop	r7
    3d8e:	6f 90       	pop	r6
    3d90:	5f 90       	pop	r5
    3d92:	4f 90       	pop	r4
    3d94:	3f 90       	pop	r3
    3d96:	2f 90       	pop	r2
    3d98:	08 95       	ret

00003d9a <VL53L0X_encode_timeout>:
    3d9a:	0f 93       	push	r16
    3d9c:	1f 93       	push	r17
    3d9e:	61 15       	cp	r22, r1
    3da0:	71 05       	cpc	r23, r1
    3da2:	81 05       	cpc	r24, r1
    3da4:	91 05       	cpc	r25, r1
    3da6:	21 f1       	breq	.+72     	; 0x3df0 <VL53L0X_encode_timeout+0x56>
    3da8:	ab 01       	movw	r20, r22
    3daa:	bc 01       	movw	r22, r24
    3dac:	41 50       	subi	r20, 0x01	; 1
    3dae:	51 09       	sbc	r21, r1
    3db0:	61 09       	sbc	r22, r1
    3db2:	71 09       	sbc	r23, r1
    3db4:	db 01       	movw	r26, r22
    3db6:	ca 01       	movw	r24, r20
    3db8:	88 27       	eor	r24, r24
    3dba:	89 2b       	or	r24, r25
    3dbc:	8a 2b       	or	r24, r26
    3dbe:	8b 2b       	or	r24, r27
    3dc0:	79 f0       	breq	.+30     	; 0x3de0 <VL53L0X_encode_timeout+0x46>
    3dc2:	80 e0       	ldi	r24, 0x00	; 0
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	76 95       	lsr	r23
    3dc8:	67 95       	ror	r22
    3dca:	57 95       	ror	r21
    3dcc:	47 95       	ror	r20
    3dce:	01 96       	adiw	r24, 0x01	; 1
    3dd0:	8a 01       	movw	r16, r20
    3dd2:	9b 01       	movw	r18, r22
    3dd4:	00 27       	eor	r16, r16
    3dd6:	01 2b       	or	r16, r17
    3dd8:	02 2b       	or	r16, r18
    3dda:	03 2b       	or	r16, r19
    3ddc:	a1 f7       	brne	.-24     	; 0x3dc6 <VL53L0X_encode_timeout+0x2c>
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <VL53L0X_encode_timeout+0x4a>
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	98 2f       	mov	r25, r24
    3de6:	88 27       	eor	r24, r24
    3de8:	55 27       	eor	r21, r21
    3dea:	84 0f       	add	r24, r20
    3dec:	95 1f       	adc	r25, r21
    3dee:	02 c0       	rjmp	.+4      	; 0x3df4 <VL53L0X_encode_timeout+0x5a>
    3df0:	80 e0       	ldi	r24, 0x00	; 0
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	1f 91       	pop	r17
    3df6:	0f 91       	pop	r16
    3df8:	08 95       	ret

00003dfa <VL53L0X_calc_timeout_mclks>:
    3dfa:	8f 92       	push	r8
    3dfc:	9f 92       	push	r9
    3dfe:	af 92       	push	r10
    3e00:	bf 92       	push	r11
    3e02:	cf 92       	push	r12
    3e04:	df 92       	push	r13
    3e06:	ef 92       	push	r14
    3e08:	ff 92       	push	r15
    3e0a:	4a 01       	movw	r8, r20
    3e0c:	5b 01       	movw	r10, r22
    3e0e:	a2 2f       	mov	r26, r18
    3e10:	b0 e0       	ldi	r27, 0x00	; 0
    3e12:	20 e0       	ldi	r18, 0x00	; 0
    3e14:	3f e2       	ldi	r19, 0x2F	; 47
    3e16:	4a e3       	ldi	r20, 0x3A	; 58
    3e18:	50 e0       	ldi	r21, 0x00	; 0
    3e1a:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    3e1e:	6b 01       	movw	r12, r22
    3e20:	7c 01       	movw	r14, r24
    3e22:	24 ef       	ldi	r18, 0xF4	; 244
    3e24:	c2 0e       	add	r12, r18
    3e26:	21 e0       	ldi	r18, 0x01	; 1
    3e28:	d2 1e       	adc	r13, r18
    3e2a:	e1 1c       	adc	r14, r1
    3e2c:	f1 1c       	adc	r15, r1
    3e2e:	a8 ee       	ldi	r26, 0xE8	; 232
    3e30:	b3 e0       	ldi	r27, 0x03	; 3
    3e32:	a5 01       	movw	r20, r10
    3e34:	94 01       	movw	r18, r8
    3e36:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    3e3a:	4b 01       	movw	r8, r22
    3e3c:	5c 01       	movw	r10, r24
    3e3e:	c7 01       	movw	r24, r14
    3e40:	b6 01       	movw	r22, r12
    3e42:	20 ed       	ldi	r18, 0xD0	; 208
    3e44:	37 e0       	ldi	r19, 0x07	; 7
    3e46:	40 e0       	ldi	r20, 0x00	; 0
    3e48:	50 e0       	ldi	r21, 0x00	; 0
    3e4a:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    3e4e:	82 0e       	add	r8, r18
    3e50:	93 1e       	adc	r9, r19
    3e52:	a4 1e       	adc	r10, r20
    3e54:	b5 1e       	adc	r11, r21
    3e56:	c7 01       	movw	r24, r14
    3e58:	b6 01       	movw	r22, r12
    3e5a:	28 ee       	ldi	r18, 0xE8	; 232
    3e5c:	33 e0       	ldi	r19, 0x03	; 3
    3e5e:	40 e0       	ldi	r20, 0x00	; 0
    3e60:	50 e0       	ldi	r21, 0x00	; 0
    3e62:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    3e66:	c5 01       	movw	r24, r10
    3e68:	b4 01       	movw	r22, r8
    3e6a:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    3e6e:	ca 01       	movw	r24, r20
    3e70:	b9 01       	movw	r22, r18
    3e72:	ff 90       	pop	r15
    3e74:	ef 90       	pop	r14
    3e76:	df 90       	pop	r13
    3e78:	cf 90       	pop	r12
    3e7a:	bf 90       	pop	r11
    3e7c:	af 90       	pop	r10
    3e7e:	9f 90       	pop	r9
    3e80:	8f 90       	pop	r8
    3e82:	08 95       	ret

00003e84 <VL53L0X_calc_timeout_us>:
    3e84:	4f 92       	push	r4
    3e86:	5f 92       	push	r5
    3e88:	6f 92       	push	r6
    3e8a:	7f 92       	push	r7
    3e8c:	8f 92       	push	r8
    3e8e:	9f 92       	push	r9
    3e90:	af 92       	push	r10
    3e92:	bf 92       	push	r11
    3e94:	cf 92       	push	r12
    3e96:	df 92       	push	r13
    3e98:	ef 92       	push	r14
    3e9a:	ff 92       	push	r15
    3e9c:	3b 01       	movw	r6, r22
    3e9e:	a4 2f       	mov	r26, r20
    3ea0:	b0 e0       	ldi	r27, 0x00	; 0
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	3f e2       	ldi	r19, 0x2F	; 47
    3ea6:	4a e3       	ldi	r20, 0x3A	; 58
    3ea8:	50 e0       	ldi	r21, 0x00	; 0
    3eaa:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    3eae:	6b 01       	movw	r12, r22
    3eb0:	7c 01       	movw	r14, r24
    3eb2:	24 ef       	ldi	r18, 0xF4	; 244
    3eb4:	c2 0e       	add	r12, r18
    3eb6:	21 e0       	ldi	r18, 0x01	; 1
    3eb8:	d2 1e       	adc	r13, r18
    3eba:	e1 1c       	adc	r14, r1
    3ebc:	f1 1c       	adc	r15, r1
    3ebe:	0f 2e       	mov	r0, r31
    3ec0:	f8 ee       	ldi	r31, 0xE8	; 232
    3ec2:	8f 2e       	mov	r8, r31
    3ec4:	f3 e0       	ldi	r31, 0x03	; 3
    3ec6:	9f 2e       	mov	r9, r31
    3ec8:	a1 2c       	mov	r10, r1
    3eca:	b1 2c       	mov	r11, r1
    3ecc:	f0 2d       	mov	r31, r0
    3ece:	c7 01       	movw	r24, r14
    3ed0:	b6 01       	movw	r22, r12
    3ed2:	a5 01       	movw	r20, r10
    3ed4:	94 01       	movw	r18, r8
    3ed6:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    3eda:	d3 01       	movw	r26, r6
    3edc:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    3ee0:	2b 01       	movw	r4, r22
    3ee2:	3c 01       	movw	r6, r24
    3ee4:	c7 01       	movw	r24, r14
    3ee6:	b6 01       	movw	r22, r12
    3ee8:	20 ed       	ldi	r18, 0xD0	; 208
    3eea:	37 e0       	ldi	r19, 0x07	; 7
    3eec:	40 e0       	ldi	r20, 0x00	; 0
    3eee:	50 e0       	ldi	r21, 0x00	; 0
    3ef0:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    3ef4:	c3 01       	movw	r24, r6
    3ef6:	b2 01       	movw	r22, r4
    3ef8:	62 0f       	add	r22, r18
    3efa:	73 1f       	adc	r23, r19
    3efc:	84 1f       	adc	r24, r20
    3efe:	95 1f       	adc	r25, r21
    3f00:	a5 01       	movw	r20, r10
    3f02:	94 01       	movw	r18, r8
    3f04:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
    3f08:	ca 01       	movw	r24, r20
    3f0a:	b9 01       	movw	r22, r18
    3f0c:	ff 90       	pop	r15
    3f0e:	ef 90       	pop	r14
    3f10:	df 90       	pop	r13
    3f12:	cf 90       	pop	r12
    3f14:	bf 90       	pop	r11
    3f16:	af 90       	pop	r10
    3f18:	9f 90       	pop	r9
    3f1a:	8f 90       	pop	r8
    3f1c:	7f 90       	pop	r7
    3f1e:	6f 90       	pop	r6
    3f20:	5f 90       	pop	r5
    3f22:	4f 90       	pop	r4
    3f24:	08 95       	ret

00003f26 <get_sequence_step_timeout>:
    3f26:	af 92       	push	r10
    3f28:	bf 92       	push	r11
    3f2a:	cf 92       	push	r12
    3f2c:	df 92       	push	r13
    3f2e:	ef 92       	push	r14
    3f30:	ff 92       	push	r15
    3f32:	1f 93       	push	r17
    3f34:	cf 93       	push	r28
    3f36:	df 93       	push	r29
    3f38:	cd b7       	in	r28, 0x3d	; 61
    3f3a:	de b7       	in	r29, 0x3e	; 62
    3f3c:	2b 97       	sbiw	r28, 0x0b	; 11
    3f3e:	0f b6       	in	r0, 0x3f	; 63
    3f40:	f8 94       	cli
    3f42:	de bf       	out	0x3e, r29	; 62
    3f44:	0f be       	out	0x3f, r0	; 63
    3f46:	cd bf       	out	0x3d, r28	; 61
    3f48:	7c 01       	movw	r14, r24
    3f4a:	6a 01       	movw	r12, r20
    3f4c:	1a 82       	std	Y+2, r1	; 0x02
    3f4e:	1c 82       	std	Y+4, r1	; 0x04
    3f50:	1b 82       	std	Y+3, r1	; 0x03
    3f52:	63 30       	cpi	r22, 0x03	; 3
    3f54:	00 f5       	brcc	.+64     	; 0x3f96 <get_sequence_step_timeout+0x70>
    3f56:	ae 01       	movw	r20, r28
    3f58:	4f 5f       	subi	r20, 0xFF	; 255
    3f5a:	5f 4f       	sbci	r21, 0xFF	; 255
    3f5c:	60 e0       	ldi	r22, 0x00	; 0
    3f5e:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    3f62:	18 2f       	mov	r17, r24
    3f64:	81 11       	cpse	r24, r1
    3f66:	08 c0       	rjmp	.+16     	; 0x3f78 <get_sequence_step_timeout+0x52>
    3f68:	ae 01       	movw	r20, r28
    3f6a:	4e 5f       	subi	r20, 0xFE	; 254
    3f6c:	5f 4f       	sbci	r21, 0xFF	; 255
    3f6e:	66 e4       	ldi	r22, 0x46	; 70
    3f70:	c7 01       	movw	r24, r14
    3f72:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
    3f76:	18 2f       	mov	r17, r24
    3f78:	6a 81       	ldd	r22, Y+2	; 0x02
    3f7a:	86 2f       	mov	r24, r22
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	a0 e0       	ldi	r26, 0x00	; 0
    3f80:	b0 e0       	ldi	r27, 0x00	; 0
    3f82:	bc 01       	movw	r22, r24
    3f84:	cd 01       	movw	r24, r26
    3f86:	6f 5f       	subi	r22, 0xFF	; 255
    3f88:	7f 4f       	sbci	r23, 0xFF	; 255
    3f8a:	8f 4f       	sbci	r24, 0xFF	; 255
    3f8c:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8e:	49 81       	ldd	r20, Y+1	; 0x01
    3f90:	c7 01       	movw	r24, r14
    3f92:	78 df       	rcall	.-272    	; 0x3e84 <VL53L0X_calc_timeout_us>
    3f94:	a4 c0       	rjmp	.+328    	; 0x40de <get_sequence_step_timeout+0x1b8>
    3f96:	63 30       	cpi	r22, 0x03	; 3
    3f98:	99 f5       	brne	.+102    	; 0x4000 <get_sequence_step_timeout+0xda>
    3f9a:	ae 01       	movw	r20, r28
    3f9c:	4f 5f       	subi	r20, 0xFF	; 255
    3f9e:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa0:	60 e0       	ldi	r22, 0x00	; 0
    3fa2:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    3fa6:	18 2f       	mov	r17, r24
    3fa8:	81 11       	cpse	r24, r1
    3faa:	91 c0       	rjmp	.+290    	; 0x40ce <get_sequence_step_timeout+0x1a8>
    3fac:	ae 01       	movw	r20, r28
    3fae:	4f 5f       	subi	r20, 0xFF	; 255
    3fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    3fb2:	60 e0       	ldi	r22, 0x00	; 0
    3fb4:	c7 01       	movw	r24, r14
    3fb6:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    3fba:	18 2f       	mov	r17, r24
    3fbc:	81 11       	cpse	r24, r1
    3fbe:	08 c0       	rjmp	.+16     	; 0x3fd0 <get_sequence_step_timeout+0xaa>
    3fc0:	ae 01       	movw	r20, r28
    3fc2:	4d 5f       	subi	r20, 0xFD	; 253
    3fc4:	5f 4f       	sbci	r21, 0xFF	; 255
    3fc6:	61 e5       	ldi	r22, 0x51	; 81
    3fc8:	c7 01       	movw	r24, r14
    3fca:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    3fce:	18 2f       	mov	r17, r24
    3fd0:	2b 81       	ldd	r18, Y+3	; 0x03
    3fd2:	3c 81       	ldd	r19, Y+4	; 0x04
    3fd4:	b9 01       	movw	r22, r18
    3fd6:	77 27       	eor	r23, r23
    3fd8:	cb 01       	movw	r24, r22
    3fda:	a0 e0       	ldi	r26, 0x00	; 0
    3fdc:	b0 e0       	ldi	r27, 0x00	; 0
    3fde:	04 c0       	rjmp	.+8      	; 0x3fe8 <get_sequence_step_timeout+0xc2>
    3fe0:	88 0f       	add	r24, r24
    3fe2:	99 1f       	adc	r25, r25
    3fe4:	aa 1f       	adc	r26, r26
    3fe6:	bb 1f       	adc	r27, r27
    3fe8:	3a 95       	dec	r19
    3fea:	d2 f7       	brpl	.-12     	; 0x3fe0 <get_sequence_step_timeout+0xba>
    3fec:	bc 01       	movw	r22, r24
    3fee:	cd 01       	movw	r24, r26
    3ff0:	6f 5f       	subi	r22, 0xFF	; 255
    3ff2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ff6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ff8:	49 81       	ldd	r20, Y+1	; 0x01
    3ffa:	c7 01       	movw	r24, r14
    3ffc:	43 df       	rcall	.-378    	; 0x3e84 <VL53L0X_calc_timeout_us>
    3ffe:	6f c0       	rjmp	.+222    	; 0x40de <get_sequence_step_timeout+0x1b8>
    4000:	64 30       	cpi	r22, 0x04	; 4
    4002:	09 f0       	breq	.+2      	; 0x4006 <get_sequence_step_timeout+0xe0>
    4004:	68 c0       	rjmp	.+208    	; 0x40d6 <get_sequence_step_timeout+0x1b0>
    4006:	be 01       	movw	r22, r28
    4008:	69 5f       	subi	r22, 0xF9	; 249
    400a:	7f 4f       	sbci	r23, 0xFF	; 255
    400c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X_GetSequenceStepEnables>
    4010:	8a 85       	ldd	r24, Y+10	; 0x0a
    4012:	88 23       	and	r24, r24
    4014:	31 f1       	breq	.+76     	; 0x4062 <get_sequence_step_timeout+0x13c>
    4016:	ae 01       	movw	r20, r28
    4018:	4f 5f       	subi	r20, 0xFF	; 255
    401a:	5f 4f       	sbci	r21, 0xFF	; 255
    401c:	60 e0       	ldi	r22, 0x00	; 0
    401e:	c7 01       	movw	r24, r14
    4020:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    4024:	18 2f       	mov	r17, r24
    4026:	81 11       	cpse	r24, r1
    4028:	41 c0       	rjmp	.+130    	; 0x40ac <get_sequence_step_timeout+0x186>
    402a:	ae 01       	movw	r20, r28
    402c:	4d 5f       	subi	r20, 0xFD	; 253
    402e:	5f 4f       	sbci	r21, 0xFF	; 255
    4030:	61 e5       	ldi	r22, 0x51	; 81
    4032:	c7 01       	movw	r24, r14
    4034:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    4038:	18 2f       	mov	r17, r24
    403a:	2b 81       	ldd	r18, Y+3	; 0x03
    403c:	3c 81       	ldd	r19, Y+4	; 0x04
    403e:	c9 01       	movw	r24, r18
    4040:	99 27       	eor	r25, r25
    4042:	a0 e0       	ldi	r26, 0x00	; 0
    4044:	b0 e0       	ldi	r27, 0x00	; 0
    4046:	04 c0       	rjmp	.+8      	; 0x4050 <get_sequence_step_timeout+0x12a>
    4048:	88 0f       	add	r24, r24
    404a:	99 1f       	adc	r25, r25
    404c:	aa 1f       	adc	r26, r26
    404e:	bb 1f       	adc	r27, r27
    4050:	3a 95       	dec	r19
    4052:	d2 f7       	brpl	.-12     	; 0x4048 <get_sequence_step_timeout+0x122>
    4054:	01 96       	adiw	r24, 0x01	; 1
    4056:	a1 1d       	adc	r26, r1
    4058:	b1 1d       	adc	r27, r1
    405a:	5c 01       	movw	r10, r24
    405c:	11 11       	cpse	r17, r1
    405e:	2b c0       	rjmp	.+86     	; 0x40b6 <get_sequence_step_timeout+0x190>
    4060:	02 c0       	rjmp	.+4      	; 0x4066 <get_sequence_step_timeout+0x140>
    4062:	a1 2c       	mov	r10, r1
    4064:	b1 2c       	mov	r11, r1
    4066:	ae 01       	movw	r20, r28
    4068:	4f 5f       	subi	r20, 0xFF	; 255
    406a:	5f 4f       	sbci	r21, 0xFF	; 255
    406c:	61 e0       	ldi	r22, 0x01	; 1
    406e:	c7 01       	movw	r24, r14
    4070:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    4074:	18 2f       	mov	r17, r24
    4076:	81 11       	cpse	r24, r1
    4078:	21 c0       	rjmp	.+66     	; 0x40bc <get_sequence_step_timeout+0x196>
    407a:	ae 01       	movw	r20, r28
    407c:	4b 5f       	subi	r20, 0xFB	; 251
    407e:	5f 4f       	sbci	r21, 0xFF	; 255
    4080:	61 e7       	ldi	r22, 0x71	; 113
    4082:	c7 01       	movw	r24, r14
    4084:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    4088:	18 2f       	mov	r17, r24
    408a:	2d 81       	ldd	r18, Y+5	; 0x05
    408c:	3e 81       	ldd	r19, Y+6	; 0x06
    408e:	c9 01       	movw	r24, r18
    4090:	99 27       	eor	r25, r25
    4092:	a0 e0       	ldi	r26, 0x00	; 0
    4094:	b0 e0       	ldi	r27, 0x00	; 0
    4096:	04 c0       	rjmp	.+8      	; 0x40a0 <get_sequence_step_timeout+0x17a>
    4098:	88 0f       	add	r24, r24
    409a:	99 1f       	adc	r25, r25
    409c:	aa 1f       	adc	r26, r26
    409e:	bb 1f       	adc	r27, r27
    40a0:	3a 95       	dec	r19
    40a2:	d2 f7       	brpl	.-12     	; 0x4098 <get_sequence_step_timeout+0x172>
    40a4:	01 96       	adiw	r24, 0x01	; 1
    40a6:	a1 1d       	adc	r26, r1
    40a8:	b1 1d       	adc	r27, r1
    40aa:	0a c0       	rjmp	.+20     	; 0x40c0 <get_sequence_step_timeout+0x19a>
    40ac:	a1 2c       	mov	r10, r1
    40ae:	b1 2c       	mov	r11, r1
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	05 c0       	rjmp	.+10     	; 0x40c0 <get_sequence_step_timeout+0x19a>
    40b6:	80 e0       	ldi	r24, 0x00	; 0
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	02 c0       	rjmp	.+4      	; 0x40c0 <get_sequence_step_timeout+0x19a>
    40bc:	80 e0       	ldi	r24, 0x00	; 0
    40be:	90 e0       	ldi	r25, 0x00	; 0
    40c0:	bc 01       	movw	r22, r24
    40c2:	6a 19       	sub	r22, r10
    40c4:	7b 09       	sbc	r23, r11
    40c6:	49 81       	ldd	r20, Y+1	; 0x01
    40c8:	c7 01       	movw	r24, r14
    40ca:	dc de       	rcall	.-584    	; 0x3e84 <VL53L0X_calc_timeout_us>
    40cc:	08 c0       	rjmp	.+16     	; 0x40de <get_sequence_step_timeout+0x1b8>
    40ce:	60 e0       	ldi	r22, 0x00	; 0
    40d0:	70 e0       	ldi	r23, 0x00	; 0
    40d2:	cb 01       	movw	r24, r22
    40d4:	04 c0       	rjmp	.+8      	; 0x40de <get_sequence_step_timeout+0x1b8>
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	cb 01       	movw	r24, r22
    40dc:	10 e0       	ldi	r17, 0x00	; 0
    40de:	f6 01       	movw	r30, r12
    40e0:	60 83       	st	Z, r22
    40e2:	71 83       	std	Z+1, r23	; 0x01
    40e4:	82 83       	std	Z+2, r24	; 0x02
    40e6:	93 83       	std	Z+3, r25	; 0x03
    40e8:	81 2f       	mov	r24, r17
    40ea:	2b 96       	adiw	r28, 0x0b	; 11
    40ec:	0f b6       	in	r0, 0x3f	; 63
    40ee:	f8 94       	cli
    40f0:	de bf       	out	0x3e, r29	; 62
    40f2:	0f be       	out	0x3f, r0	; 63
    40f4:	cd bf       	out	0x3d, r28	; 61
    40f6:	df 91       	pop	r29
    40f8:	cf 91       	pop	r28
    40fa:	1f 91       	pop	r17
    40fc:	ff 90       	pop	r15
    40fe:	ef 90       	pop	r14
    4100:	df 90       	pop	r13
    4102:	cf 90       	pop	r12
    4104:	bf 90       	pop	r11
    4106:	af 90       	pop	r10
    4108:	08 95       	ret

0000410a <set_sequence_step_timeout>:
    410a:	8f 92       	push	r8
    410c:	9f 92       	push	r9
    410e:	af 92       	push	r10
    4110:	bf 92       	push	r11
    4112:	cf 92       	push	r12
    4114:	df 92       	push	r13
    4116:	ef 92       	push	r14
    4118:	ff 92       	push	r15
    411a:	0f 93       	push	r16
    411c:	1f 93       	push	r17
    411e:	cf 93       	push	r28
    4120:	df 93       	push	r29
    4122:	cd b7       	in	r28, 0x3d	; 61
    4124:	de b7       	in	r29, 0x3e	; 62
    4126:	28 97       	sbiw	r28, 0x08	; 8
    4128:	0f b6       	in	r0, 0x3f	; 63
    412a:	f8 94       	cli
    412c:	de bf       	out	0x3e, r29	; 62
    412e:	0f be       	out	0x3f, r0	; 63
    4130:	cd bf       	out	0x3d, r28	; 61
    4132:	8c 01       	movw	r16, r24
    4134:	49 01       	movw	r8, r18
    4136:	5a 01       	movw	r10, r20
    4138:	63 30       	cpi	r22, 0x03	; 3
    413a:	18 f5       	brcc	.+70     	; 0x4182 <set_sequence_step_timeout+0x78>
    413c:	ae 01       	movw	r20, r28
    413e:	4f 5f       	subi	r20, 0xFF	; 255
    4140:	5f 4f       	sbci	r21, 0xFF	; 255
    4142:	60 e0       	ldi	r22, 0x00	; 0
    4144:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    4148:	f8 2e       	mov	r15, r24
    414a:	81 11       	cpse	r24, r1
    414c:	a1 c0       	rjmp	.+322    	; 0x4290 <set_sequence_step_timeout+0x186>
    414e:	29 81       	ldd	r18, Y+1	; 0x01
    4150:	b5 01       	movw	r22, r10
    4152:	a4 01       	movw	r20, r8
    4154:	c8 01       	movw	r24, r16
    4156:	51 de       	rcall	.-862    	; 0x3dfa <VL53L0X_calc_timeout_mclks>
    4158:	61 30       	cpi	r22, 0x01	; 1
    415a:	21 e0       	ldi	r18, 0x01	; 1
    415c:	72 07       	cpc	r23, r18
    415e:	18 f4       	brcc	.+6      	; 0x4166 <set_sequence_step_timeout+0x5c>
    4160:	4f ef       	ldi	r20, 0xFF	; 255
    4162:	46 0f       	add	r20, r22
    4164:	01 c0       	rjmp	.+2      	; 0x4168 <set_sequence_step_timeout+0x5e>
    4166:	4f ef       	ldi	r20, 0xFF	; 255
    4168:	f8 01       	movw	r30, r16
    416a:	e4 53       	subi	r30, 0x34	; 52
    416c:	ff 4f       	sbci	r31, 0xFF	; 255
    416e:	84 2f       	mov	r24, r20
    4170:	90 e0       	ldi	r25, 0x00	; 0
    4172:	91 83       	std	Z+1, r25	; 0x01
    4174:	80 83       	st	Z, r24
    4176:	66 e4       	ldi	r22, 0x46	; 70
    4178:	c8 01       	movw	r24, r16
    417a:	0e 94 fe 2c 	call	0x59fc	; 0x59fc <VL53L0X_WrByte>
    417e:	f8 2e       	mov	r15, r24
    4180:	87 c0       	rjmp	.+270    	; 0x4290 <set_sequence_step_timeout+0x186>
    4182:	63 30       	cpi	r22, 0x03	; 3
    4184:	41 f5       	brne	.+80     	; 0x41d6 <set_sequence_step_timeout+0xcc>
    4186:	ae 01       	movw	r20, r28
    4188:	4f 5f       	subi	r20, 0xFF	; 255
    418a:	5f 4f       	sbci	r21, 0xFF	; 255
    418c:	60 e0       	ldi	r22, 0x00	; 0
    418e:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    4192:	f8 2e       	mov	r15, r24
    4194:	29 81       	ldd	r18, Y+1	; 0x01
    4196:	b5 01       	movw	r22, r10
    4198:	a4 01       	movw	r20, r8
    419a:	c8 01       	movw	r24, r16
    419c:	2e de       	rcall	.-932    	; 0x3dfa <VL53L0X_calc_timeout_mclks>
    419e:	88 27       	eor	r24, r24
    41a0:	99 27       	eor	r25, r25
    41a2:	fb dd       	rcall	.-1034   	; 0x3d9a <VL53L0X_encode_timeout>
    41a4:	9b 83       	std	Y+3, r25	; 0x03
    41a6:	8a 83       	std	Y+2, r24	; 0x02
    41a8:	f8 01       	movw	r30, r16
    41aa:	e4 53       	subi	r30, 0x34	; 52
    41ac:	ff 4f       	sbci	r31, 0xFF	; 255
    41ae:	91 83       	std	Z+1, r25	; 0x01
    41b0:	80 83       	st	Z, r24
    41b2:	f1 10       	cpse	r15, r1
    41b4:	6d c0       	rjmp	.+218    	; 0x4290 <set_sequence_step_timeout+0x186>
    41b6:	ac 01       	movw	r20, r24
    41b8:	61 e5       	ldi	r22, 0x51	; 81
    41ba:	c8 01       	movw	r24, r16
    41bc:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <VL53L0X_WrWord>
    41c0:	f8 2e       	mov	r15, r24
    41c2:	81 11       	cpse	r24, r1
    41c4:	65 c0       	rjmp	.+202    	; 0x4290 <set_sequence_step_timeout+0x186>
    41c6:	f8 01       	movw	r30, r16
    41c8:	ec 52       	subi	r30, 0x2C	; 44
    41ca:	ff 4f       	sbci	r31, 0xFF	; 255
    41cc:	80 82       	st	Z, r8
    41ce:	91 82       	std	Z+1, r9	; 0x01
    41d0:	a2 82       	std	Z+2, r10	; 0x02
    41d2:	b3 82       	std	Z+3, r11	; 0x03
    41d4:	5d c0       	rjmp	.+186    	; 0x4290 <set_sequence_step_timeout+0x186>
    41d6:	64 30       	cpi	r22, 0x04	; 4
    41d8:	09 f0       	breq	.+2      	; 0x41dc <set_sequence_step_timeout+0xd2>
    41da:	56 c0       	rjmp	.+172    	; 0x4288 <set_sequence_step_timeout+0x17e>
    41dc:	be 01       	movw	r22, r28
    41de:	6c 5f       	subi	r22, 0xFC	; 252
    41e0:	7f 4f       	sbci	r23, 0xFF	; 255
    41e2:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X_GetSequenceStepEnables>
    41e6:	8f 81       	ldd	r24, Y+7	; 0x07
    41e8:	88 23       	and	r24, r24
    41ea:	41 f1       	breq	.+80     	; 0x423c <set_sequence_step_timeout+0x132>
    41ec:	ae 01       	movw	r20, r28
    41ee:	4f 5f       	subi	r20, 0xFF	; 255
    41f0:	5f 4f       	sbci	r21, 0xFF	; 255
    41f2:	60 e0       	ldi	r22, 0x00	; 0
    41f4:	c8 01       	movw	r24, r16
    41f6:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    41fa:	f8 2e       	mov	r15, r24
    41fc:	81 11       	cpse	r24, r1
    41fe:	48 c0       	rjmp	.+144    	; 0x4290 <set_sequence_step_timeout+0x186>
    4200:	ae 01       	movw	r20, r28
    4202:	4e 5f       	subi	r20, 0xFE	; 254
    4204:	5f 4f       	sbci	r21, 0xFF	; 255
    4206:	61 e5       	ldi	r22, 0x51	; 81
    4208:	c8 01       	movw	r24, r16
    420a:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <VL53L0X_RdWord>
    420e:	f8 2e       	mov	r15, r24
    4210:	81 11       	cpse	r24, r1
    4212:	3e c0       	rjmp	.+124    	; 0x4290 <set_sequence_step_timeout+0x186>
    4214:	8a 81       	ldd	r24, Y+2	; 0x02
    4216:	9b 81       	ldd	r25, Y+3	; 0x03
    4218:	6c 01       	movw	r12, r24
    421a:	dd 24       	eor	r13, r13
    421c:	e1 2c       	mov	r14, r1
    421e:	f1 2c       	mov	r15, r1
    4220:	04 c0       	rjmp	.+8      	; 0x422a <set_sequence_step_timeout+0x120>
    4222:	cc 0c       	add	r12, r12
    4224:	dd 1c       	adc	r13, r13
    4226:	ee 1c       	adc	r14, r14
    4228:	ff 1c       	adc	r15, r15
    422a:	9a 95       	dec	r25
    422c:	d2 f7       	brpl	.-12     	; 0x4222 <set_sequence_step_timeout+0x118>
    422e:	d7 01       	movw	r26, r14
    4230:	c6 01       	movw	r24, r12
    4232:	01 96       	adiw	r24, 0x01	; 1
    4234:	a1 1d       	adc	r26, r1
    4236:	b1 1d       	adc	r27, r1
    4238:	6c 01       	movw	r12, r24
    423a:	02 c0       	rjmp	.+4      	; 0x4240 <set_sequence_step_timeout+0x136>
    423c:	c1 2c       	mov	r12, r1
    423e:	d1 2c       	mov	r13, r1
    4240:	ae 01       	movw	r20, r28
    4242:	4f 5f       	subi	r20, 0xFF	; 255
    4244:	5f 4f       	sbci	r21, 0xFF	; 255
    4246:	61 e0       	ldi	r22, 0x01	; 1
    4248:	c8 01       	movw	r24, r16
    424a:	0e 94 3c 09 	call	0x1278	; 0x1278 <VL53L0X_GetVcselPulsePeriod>
    424e:	f8 2e       	mov	r15, r24
    4250:	81 11       	cpse	r24, r1
    4252:	1e c0       	rjmp	.+60     	; 0x4290 <set_sequence_step_timeout+0x186>
    4254:	29 81       	ldd	r18, Y+1	; 0x01
    4256:	b5 01       	movw	r22, r10
    4258:	a4 01       	movw	r20, r8
    425a:	c8 01       	movw	r24, r16
    425c:	ce dd       	rcall	.-1124   	; 0x3dfa <VL53L0X_calc_timeout_mclks>
    425e:	6c 0d       	add	r22, r12
    4260:	7d 1d       	adc	r23, r13
    4262:	80 e0       	ldi	r24, 0x00	; 0
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	99 dd       	rcall	.-1230   	; 0x3d9a <VL53L0X_encode_timeout>
    4268:	ac 01       	movw	r20, r24
    426a:	61 e7       	ldi	r22, 0x71	; 113
    426c:	c8 01       	movw	r24, r16
    426e:	0e 94 09 2d 	call	0x5a12	; 0x5a12 <VL53L0X_WrWord>
    4272:	f8 2e       	mov	r15, r24
    4274:	81 11       	cpse	r24, r1
    4276:	0c c0       	rjmp	.+24     	; 0x4290 <set_sequence_step_timeout+0x186>
    4278:	f8 01       	movw	r30, r16
    427a:	e1 53       	subi	r30, 0x31	; 49
    427c:	ff 4f       	sbci	r31, 0xFF	; 255
    427e:	80 82       	st	Z, r8
    4280:	91 82       	std	Z+1, r9	; 0x01
    4282:	a2 82       	std	Z+2, r10	; 0x02
    4284:	b3 82       	std	Z+3, r11	; 0x03
    4286:	04 c0       	rjmp	.+8      	; 0x4290 <set_sequence_step_timeout+0x186>
    4288:	0f 2e       	mov	r0, r31
    428a:	fc ef       	ldi	r31, 0xFC	; 252
    428c:	ff 2e       	mov	r15, r31
    428e:	f0 2d       	mov	r31, r0
    4290:	8f 2d       	mov	r24, r15
    4292:	28 96       	adiw	r28, 0x08	; 8
    4294:	0f b6       	in	r0, 0x3f	; 63
    4296:	f8 94       	cli
    4298:	de bf       	out	0x3e, r29	; 62
    429a:	0f be       	out	0x3f, r0	; 63
    429c:	cd bf       	out	0x3d, r28	; 61
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	1f 91       	pop	r17
    42a4:	0f 91       	pop	r16
    42a6:	ff 90       	pop	r15
    42a8:	ef 90       	pop	r14
    42aa:	df 90       	pop	r13
    42ac:	cf 90       	pop	r12
    42ae:	bf 90       	pop	r11
    42b0:	af 90       	pop	r10
    42b2:	9f 90       	pop	r9
    42b4:	8f 90       	pop	r8
    42b6:	08 95       	ret

000042b8 <VL53L0X_get_vcsel_pulse_period>:
=======
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	df 93       	push	r29
    3200:	1f 92       	push	r1
    3202:	cd b7       	in	r28, 0x3d	; 61
    3204:	de b7       	in	r29, 0x3e	; 62
    3206:	7c 01       	movw	r14, r24
    3208:	19 82       	std	Y+1, r1	; 0x01
    320a:	00 e0       	ldi	r16, 0x00	; 0
    320c:	10 e0       	ldi	r17, 0x00	; 0
    320e:	be 01       	movw	r22, r28
    3210:	6f 5f       	subi	r22, 0xFF	; 255
    3212:	7f 4f       	sbci	r23, 0xFF	; 255
    3214:	c7 01       	movw	r24, r14
    3216:	08 d9       	rcall	.-3568   	; 0x2428 <VL53L0X_GetMeasurementDataReady>
    3218:	81 11       	cpse	r24, r1
    321a:	0d c0       	rjmp	.+26     	; 0x3236 <VL53L0X_measurement_poll_for_completion+0x42>
    321c:	99 81       	ldd	r25, Y+1	; 0x01
    321e:	91 30       	cpi	r25, 0x01	; 1
    3220:	51 f0       	breq	.+20     	; 0x3236 <VL53L0X_measurement_poll_for_completion+0x42>
    3222:	0f 5f       	subi	r16, 0xFF	; 255
    3224:	1f 4f       	sbci	r17, 0xFF	; 255
    3226:	08 3c       	cpi	r16, 0xC8	; 200
    3228:	11 05       	cpc	r17, r1
    322a:	21 f0       	breq	.+8      	; 0x3234 <VL53L0X_measurement_poll_for_completion+0x40>
    322c:	c7 01       	movw	r24, r14
    322e:	0e 94 49 2c 	call	0x5892	; 0x5892 <VL53L0X_PollingDelay>
    3232:	ed cf       	rjmp	.-38     	; 0x320e <VL53L0X_measurement_poll_for_completion+0x1a>
    3234:	89 ef       	ldi	r24, 0xF9	; 249
    3236:	0f 90       	pop	r0
    3238:	df 91       	pop	r29
    323a:	cf 91       	pop	r28
    323c:	1f 91       	pop	r17
    323e:	0f 91       	pop	r16
    3240:	ff 90       	pop	r15
    3242:	ef 90       	pop	r14
    3244:	08 95       	ret

00003246 <VL53L0X_isqrt>:
    3246:	cf 92       	push	r12
    3248:	df 92       	push	r13
    324a:	ef 92       	push	r14
    324c:	ff 92       	push	r15
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	8b 01       	movw	r16, r22
    3254:	9c 01       	movw	r18, r24
    3256:	01 15       	cp	r16, r1
    3258:	11 05       	cpc	r17, r1
    325a:	21 05       	cpc	r18, r1
    325c:	80 e4       	ldi	r24, 0x40	; 64
    325e:	38 07       	cpc	r19, r24
    3260:	b0 f4       	brcc	.+44     	; 0x328e <VL53L0X_isqrt+0x48>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	a0 e0       	ldi	r26, 0x00	; 0
    3268:	b0 e4       	ldi	r27, 0x40	; 64
    326a:	b6 95       	lsr	r27
    326c:	a7 95       	ror	r26
    326e:	97 95       	ror	r25
    3270:	87 95       	ror	r24
    3272:	b6 95       	lsr	r27
    3274:	a7 95       	ror	r26
    3276:	97 95       	ror	r25
    3278:	87 95       	ror	r24
    327a:	08 17       	cp	r16, r24
    327c:	19 07       	cpc	r17, r25
    327e:	2a 07       	cpc	r18, r26
    3280:	3b 07       	cpc	r19, r27
    3282:	98 f3       	brcs	.-26     	; 0x326a <VL53L0X_isqrt+0x24>
    3284:	00 97       	sbiw	r24, 0x00	; 0
    3286:	a1 05       	cpc	r26, r1
    3288:	b1 05       	cpc	r27, r1
    328a:	29 f4       	brne	.+10     	; 0x3296 <VL53L0X_isqrt+0x50>
    328c:	30 c0       	rjmp	.+96     	; 0x32ee <VL53L0X_isqrt+0xa8>
    328e:	80 e0       	ldi	r24, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	a0 e0       	ldi	r26, 0x00	; 0
    3294:	b0 e4       	ldi	r27, 0x40	; 64
    3296:	40 e0       	ldi	r20, 0x00	; 0
    3298:	50 e0       	ldi	r21, 0x00	; 0
    329a:	ba 01       	movw	r22, r20
    329c:	6a 01       	movw	r12, r20
    329e:	7b 01       	movw	r14, r22
    32a0:	c8 0e       	add	r12, r24
    32a2:	d9 1e       	adc	r13, r25
    32a4:	ea 1e       	adc	r14, r26
    32a6:	fb 1e       	adc	r15, r27
    32a8:	0c 15       	cp	r16, r12
    32aa:	1d 05       	cpc	r17, r13
    32ac:	2e 05       	cpc	r18, r14
    32ae:	3f 05       	cpc	r19, r15
    32b0:	68 f0       	brcs	.+26     	; 0x32cc <VL53L0X_isqrt+0x86>
    32b2:	0c 19       	sub	r16, r12
    32b4:	1d 09       	sbc	r17, r13
    32b6:	2e 09       	sbc	r18, r14
    32b8:	3f 09       	sbc	r19, r15
    32ba:	76 95       	lsr	r23
    32bc:	67 95       	ror	r22
    32be:	57 95       	ror	r21
    32c0:	47 95       	ror	r20
    32c2:	48 0f       	add	r20, r24
    32c4:	59 1f       	adc	r21, r25
    32c6:	6a 1f       	adc	r22, r26
    32c8:	7b 1f       	adc	r23, r27
    32ca:	04 c0       	rjmp	.+8      	; 0x32d4 <VL53L0X_isqrt+0x8e>
    32cc:	76 95       	lsr	r23
    32ce:	67 95       	ror	r22
    32d0:	57 95       	ror	r21
    32d2:	47 95       	ror	r20
    32d4:	b6 95       	lsr	r27
    32d6:	a7 95       	ror	r26
    32d8:	97 95       	ror	r25
    32da:	87 95       	ror	r24
    32dc:	b6 95       	lsr	r27
    32de:	a7 95       	ror	r26
    32e0:	97 95       	ror	r25
    32e2:	87 95       	ror	r24
    32e4:	00 97       	sbiw	r24, 0x00	; 0
    32e6:	a1 05       	cpc	r26, r1
    32e8:	b1 05       	cpc	r27, r1
    32ea:	c1 f6       	brne	.-80     	; 0x329c <VL53L0X_isqrt+0x56>
    32ec:	03 c0       	rjmp	.+6      	; 0x32f4 <VL53L0X_isqrt+0xae>
    32ee:	40 e0       	ldi	r20, 0x00	; 0
    32f0:	50 e0       	ldi	r21, 0x00	; 0
    32f2:	ba 01       	movw	r22, r20
    32f4:	cb 01       	movw	r24, r22
    32f6:	ba 01       	movw	r22, r20
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	ff 90       	pop	r15
    32fe:	ef 90       	pop	r14
    3300:	df 90       	pop	r13
    3302:	cf 90       	pop	r12
    3304:	08 95       	ret

00003306 <VL53L0X_device_read_strobe>:
    3306:	af 92       	push	r10
    3308:	bf 92       	push	r11
    330a:	cf 92       	push	r12
    330c:	df 92       	push	r13
    330e:	ef 92       	push	r14
    3310:	ff 92       	push	r15
    3312:	1f 93       	push	r17
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
    3318:	1f 92       	push	r1
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	5c 01       	movw	r10, r24
    3320:	40 e0       	ldi	r20, 0x00	; 0
    3322:	63 e8       	ldi	r22, 0x83	; 131
    3324:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3328:	18 2f       	mov	r17, r24
    332a:	81 11       	cpse	r24, r1
    332c:	24 c0       	rjmp	.+72     	; 0x3376 <VL53L0X_device_read_strobe+0x70>
    332e:	c1 2c       	mov	r12, r1
    3330:	d1 2c       	mov	r13, r1
    3332:	76 01       	movw	r14, r12
    3334:	ae 01       	movw	r20, r28
    3336:	4f 5f       	subi	r20, 0xFF	; 255
    3338:	5f 4f       	sbci	r21, 0xFF	; 255
    333a:	63 e8       	ldi	r22, 0x83	; 131
    333c:	c5 01       	movw	r24, r10
    333e:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    3342:	18 2f       	mov	r17, r24
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	81 11       	cpse	r24, r1
    3348:	0f c0       	rjmp	.+30     	; 0x3368 <VL53L0X_device_read_strobe+0x62>
    334a:	11 11       	cpse	r17, r1
    334c:	0d c0       	rjmp	.+26     	; 0x3368 <VL53L0X_device_read_strobe+0x62>
    334e:	8f ef       	ldi	r24, 0xFF	; 255
    3350:	c8 1a       	sub	r12, r24
    3352:	d8 0a       	sbc	r13, r24
    3354:	e8 0a       	sbc	r14, r24
    3356:	f8 0a       	sbc	r15, r24
    3358:	88 ec       	ldi	r24, 0xC8	; 200
    335a:	c8 16       	cp	r12, r24
    335c:	d1 04       	cpc	r13, r1
    335e:	e1 04       	cpc	r14, r1
    3360:	f1 04       	cpc	r15, r1
    3362:	41 f7       	brne	.-48     	; 0x3334 <VL53L0X_device_read_strobe+0x2e>
    3364:	19 ef       	ldi	r17, 0xF9	; 249
    3366:	07 c0       	rjmp	.+14     	; 0x3376 <VL53L0X_device_read_strobe+0x70>
    3368:	88 ec       	ldi	r24, 0xC8	; 200
    336a:	c8 16       	cp	r12, r24
    336c:	d1 04       	cpc	r13, r1
    336e:	e1 04       	cpc	r14, r1
    3370:	f1 04       	cpc	r15, r1
    3372:	08 f0       	brcs	.+2      	; 0x3376 <VL53L0X_device_read_strobe+0x70>
    3374:	19 ef       	ldi	r17, 0xF9	; 249
    3376:	41 e0       	ldi	r20, 0x01	; 1
    3378:	63 e8       	ldi	r22, 0x83	; 131
    337a:	c5 01       	movw	r24, r10
    337c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3380:	81 2b       	or	r24, r17
    3382:	0f 90       	pop	r0
    3384:	df 91       	pop	r29
    3386:	cf 91       	pop	r28
    3388:	1f 91       	pop	r17
    338a:	ff 90       	pop	r15
    338c:	ef 90       	pop	r14
    338e:	df 90       	pop	r13
    3390:	cf 90       	pop	r12
    3392:	bf 90       	pop	r11
    3394:	af 90       	pop	r10
    3396:	08 95       	ret

00003398 <VL53L0X_get_info_from_device>:
    3398:	2f 92       	push	r2
    339a:	3f 92       	push	r3
    339c:	4f 92       	push	r4
    339e:	5f 92       	push	r5
    33a0:	6f 92       	push	r6
    33a2:	7f 92       	push	r7
    33a4:	8f 92       	push	r8
    33a6:	9f 92       	push	r9
    33a8:	af 92       	push	r10
    33aa:	bf 92       	push	r11
    33ac:	cf 92       	push	r12
    33ae:	df 92       	push	r13
    33b0:	ef 92       	push	r14
    33b2:	ff 92       	push	r15
    33b4:	0f 93       	push	r16
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
    33bc:	cd b7       	in	r28, 0x3d	; 61
    33be:	de b7       	in	r29, 0x3e	; 62
    33c0:	aa 97       	sbiw	r28, 0x2a	; 42
    33c2:	0f b6       	in	r0, 0x3f	; 63
    33c4:	f8 94       	cli
    33c6:	de bf       	out	0x3e, r29	; 62
    33c8:	0f be       	out	0x3f, r0	; 63
    33ca:	cd bf       	out	0x3d, r28	; 61
    33cc:	18 86       	std	Y+8, r1	; 0x08
    33ce:	19 86       	std	Y+9, r1	; 0x09
    33d0:	1a 86       	std	Y+10, r1	; 0x0a
    33d2:	1b 86       	std	Y+11, r1	; 0x0b
    33d4:	1c 86       	std	Y+12, r1	; 0x0c
    33d6:	1d 86       	std	Y+13, r1	; 0x0d
    33d8:	1e 86       	std	Y+14, r1	; 0x0e
    33da:	1f 86       	std	Y+15, r1	; 0x0f
    33dc:	fc 01       	movw	r30, r24
    33de:	e1 52       	subi	r30, 0x21	; 33
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	d0 80       	ld	r13, Z
    33e4:	27 e0       	ldi	r18, 0x07	; 7
    33e6:	d2 16       	cp	r13, r18
    33e8:	09 f4       	brne	.+2      	; 0x33ec <VL53L0X_get_info_from_device+0x54>
    33ea:	63 c3       	rjmp	.+1734   	; 0x3ab2 <VL53L0X_get_info_from_device+0x71a>
    33ec:	06 2f       	mov	r16, r22
    33ee:	7c 01       	movw	r14, r24
    33f0:	41 e0       	ldi	r20, 0x01	; 1
    33f2:	60 e8       	ldi	r22, 0x80	; 128
    33f4:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    33f8:	18 2f       	mov	r17, r24
    33fa:	41 e0       	ldi	r20, 0x01	; 1
    33fc:	6f ef       	ldi	r22, 0xFF	; 255
    33fe:	c7 01       	movw	r24, r14
    3400:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3404:	18 2b       	or	r17, r24
    3406:	40 e0       	ldi	r20, 0x00	; 0
    3408:	60 e0       	ldi	r22, 0x00	; 0
    340a:	c7 01       	movw	r24, r14
    340c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3410:	18 2b       	or	r17, r24
    3412:	46 e0       	ldi	r20, 0x06	; 6
    3414:	6f ef       	ldi	r22, 0xFF	; 255
    3416:	c7 01       	movw	r24, r14
    3418:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    341c:	18 2b       	or	r17, r24
    341e:	ae 01       	movw	r20, r28
    3420:	4f 5f       	subi	r20, 0xFF	; 255
    3422:	5f 4f       	sbci	r21, 0xFF	; 255
    3424:	63 e8       	ldi	r22, 0x83	; 131
    3426:	c7 01       	movw	r24, r14
    3428:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    342c:	18 2b       	or	r17, r24
    342e:	49 81       	ldd	r20, Y+1	; 0x01
    3430:	44 60       	ori	r20, 0x04	; 4
    3432:	63 e8       	ldi	r22, 0x83	; 131
    3434:	c7 01       	movw	r24, r14
    3436:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    343a:	18 2b       	or	r17, r24
    343c:	47 e0       	ldi	r20, 0x07	; 7
    343e:	6f ef       	ldi	r22, 0xFF	; 255
    3440:	c7 01       	movw	r24, r14
    3442:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3446:	18 2b       	or	r17, r24
    3448:	41 e0       	ldi	r20, 0x01	; 1
    344a:	61 e8       	ldi	r22, 0x81	; 129
    344c:	c7 01       	movw	r24, r14
    344e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3452:	18 2b       	or	r17, r24
    3454:	c7 01       	movw	r24, r14
    3456:	0e 94 49 2c 	call	0x5892	; 0x5892 <VL53L0X_PollingDelay>
    345a:	18 2b       	or	r17, r24
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	60 e8       	ldi	r22, 0x80	; 128
    3460:	c7 01       	movw	r24, r14
    3462:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3466:	18 2b       	or	r17, r24
    3468:	80 2f       	mov	r24, r16
    346a:	81 70       	andi	r24, 0x01	; 1
    346c:	28 2e       	mov	r2, r24
    346e:	00 ff       	sbrs	r16, 0
    3470:	56 c0       	rjmp	.+172    	; 0x351e <VL53L0X_get_info_from_device+0x186>
    3472:	d0 fc       	sbrc	r13, 0
    3474:	57 c0       	rjmp	.+174    	; 0x3524 <VL53L0X_get_info_from_device+0x18c>
    3476:	4b e6       	ldi	r20, 0x6B	; 107
    3478:	64 e9       	ldi	r22, 0x94	; 148
    347a:	c7 01       	movw	r24, r14
    347c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3480:	c8 2e       	mov	r12, r24
    3482:	c7 01       	movw	r24, r14
    3484:	40 df       	rcall	.-384    	; 0x3306 <VL53L0X_device_read_strobe>
    3486:	8c 29       	or	r24, r12
    3488:	18 2b       	or	r17, r24
    348a:	ae 01       	movw	r20, r28
    348c:	4e 5f       	subi	r20, 0xFE	; 254
    348e:	5f 4f       	sbci	r21, 0xFF	; 255
    3490:	60 e9       	ldi	r22, 0x90	; 144
    3492:	c7 01       	movw	r24, r14
    3494:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3498:	18 2b       	or	r17, r24
    349a:	8a 81       	ldd	r24, Y+2	; 0x02
    349c:	9b 81       	ldd	r25, Y+3	; 0x03
    349e:	ac 81       	ldd	r26, Y+4	; 0x04
    34a0:	bd 81       	ldd	r27, Y+5	; 0x05
    34a2:	e9 2f       	mov	r30, r25
    34a4:	ef 77       	andi	r30, 0x7F	; 127
    34a6:	e9 a7       	std	Y+41, r30	; 0x29
    34a8:	07 2e       	mov	r0, r23
    34aa:	7f e0       	ldi	r23, 0x0F	; 15
    34ac:	b6 95       	lsr	r27
    34ae:	a7 95       	ror	r26
    34b0:	97 95       	ror	r25
    34b2:	87 95       	ror	r24
    34b4:	7a 95       	dec	r23
    34b6:	d1 f7       	brne	.-12     	; 0x34ac <VL53L0X_get_info_from_device+0x114>
    34b8:	70 2d       	mov	r23, r0
    34ba:	f8 2f       	mov	r31, r24
    34bc:	f1 70       	andi	r31, 0x01	; 1
    34be:	fa a7       	std	Y+42, r31	; 0x2a
    34c0:	44 e2       	ldi	r20, 0x24	; 36
    34c2:	64 e9       	ldi	r22, 0x94	; 148
    34c4:	c7 01       	movw	r24, r14
    34c6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    34ca:	18 2b       	or	r17, r24
    34cc:	c7 01       	movw	r24, r14
    34ce:	1b df       	rcall	.-458    	; 0x3306 <VL53L0X_device_read_strobe>
    34d0:	18 2b       	or	r17, r24
    34d2:	ae 01       	movw	r20, r28
    34d4:	4e 5f       	subi	r20, 0xFE	; 254
    34d6:	5f 4f       	sbci	r21, 0xFF	; 255
    34d8:	60 e9       	ldi	r22, 0x90	; 144
    34da:	c7 01       	movw	r24, r14
    34dc:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    34e0:	18 2b       	or	r17, r24
    34e2:	8a 81       	ldd	r24, Y+2	; 0x02
    34e4:	9b 81       	ldd	r25, Y+3	; 0x03
    34e6:	2c 81       	ldd	r18, Y+4	; 0x04
    34e8:	3d 81       	ldd	r19, Y+5	; 0x05
    34ea:	3b a3       	std	Y+35, r19	; 0x23
    34ec:	2c a3       	std	Y+36, r18	; 0x24
    34ee:	9d a3       	std	Y+37, r25	; 0x25
    34f0:	8e a3       	std	Y+38, r24	; 0x26
    34f2:	45 e2       	ldi	r20, 0x25	; 37
    34f4:	64 e9       	ldi	r22, 0x94	; 148
    34f6:	c7 01       	movw	r24, r14
    34f8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    34fc:	18 2b       	or	r17, r24
    34fe:	c7 01       	movw	r24, r14
    3500:	02 df       	rcall	.-508    	; 0x3306 <VL53L0X_device_read_strobe>
    3502:	18 2b       	or	r17, r24
    3504:	ae 01       	movw	r20, r28
    3506:	4e 5f       	subi	r20, 0xFE	; 254
    3508:	5f 4f       	sbci	r21, 0xFF	; 255
    350a:	60 e9       	ldi	r22, 0x90	; 144
    350c:	c7 01       	movw	r24, r14
    350e:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3512:	18 2b       	or	r17, r24
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	9d 81       	ldd	r25, Y+5	; 0x05
    3518:	9f a3       	std	Y+39, r25	; 0x27
    351a:	88 a7       	std	Y+40, r24	; 0x28
    351c:	05 c0       	rjmp	.+10     	; 0x3528 <VL53L0X_get_info_from_device+0x190>
    351e:	1a a6       	std	Y+42, r1	; 0x2a
    3520:	19 a6       	std	Y+41, r1	; 0x29
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <VL53L0X_get_info_from_device+0x190>
    3524:	1a a6       	std	Y+42, r1	; 0x2a
    3526:	19 a6       	std	Y+41, r1	; 0x29
    3528:	20 2f       	mov	r18, r16
    352a:	22 70       	andi	r18, 0x02	; 2
    352c:	32 2e       	mov	r3, r18
    352e:	01 ff       	sbrs	r16, 1
    3530:	60 c1       	rjmp	.+704    	; 0x37f2 <VL53L0X_get_info_from_device+0x45a>
    3532:	d1 fc       	sbrc	r13, 1
    3534:	5e c1       	rjmp	.+700    	; 0x37f2 <VL53L0X_get_info_from_device+0x45a>
    3536:	42 e0       	ldi	r20, 0x02	; 2
    3538:	64 e9       	ldi	r22, 0x94	; 148
    353a:	c7 01       	movw	r24, r14
    353c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3540:	c8 2e       	mov	r12, r24
    3542:	c7 01       	movw	r24, r14
    3544:	e0 de       	rcall	.-576    	; 0x3306 <VL53L0X_device_read_strobe>
    3546:	8c 29       	or	r24, r12
    3548:	18 2b       	or	r17, r24
    354a:	ae 01       	movw	r20, r28
    354c:	4a 5f       	subi	r20, 0xFA	; 250
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
    3550:	60 e9       	ldi	r22, 0x90	; 144
    3552:	c7 01       	movw	r24, r14
    3554:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    3558:	18 2b       	or	r17, r24
    355a:	4b e7       	ldi	r20, 0x7B	; 123
    355c:	64 e9       	ldi	r22, 0x94	; 148
    355e:	c7 01       	movw	r24, r14
    3560:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3564:	18 2b       	or	r17, r24
    3566:	c7 01       	movw	r24, r14
    3568:	ce de       	rcall	.-612    	; 0x3306 <VL53L0X_device_read_strobe>
    356a:	18 2b       	or	r17, r24
    356c:	ae 01       	movw	r20, r28
    356e:	49 5f       	subi	r20, 0xF9	; 249
    3570:	5f 4f       	sbci	r21, 0xFF	; 255
    3572:	60 e9       	ldi	r22, 0x90	; 144
    3574:	c7 01       	movw	r24, r14
    3576:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    357a:	18 2b       	or	r17, r24
    357c:	47 e7       	ldi	r20, 0x77	; 119
    357e:	64 e9       	ldi	r22, 0x94	; 148
    3580:	c7 01       	movw	r24, r14
    3582:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3586:	18 2b       	or	r17, r24
    3588:	c7 01       	movw	r24, r14
    358a:	bd de       	rcall	.-646    	; 0x3306 <VL53L0X_device_read_strobe>
    358c:	18 2b       	or	r17, r24
    358e:	ae 01       	movw	r20, r28
    3590:	4e 5f       	subi	r20, 0xFE	; 254
    3592:	5f 4f       	sbci	r21, 0xFF	; 255
    3594:	60 e9       	ldi	r22, 0x90	; 144
    3596:	c7 01       	movw	r24, r14
    3598:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    359c:	18 2b       	or	r17, r24
    359e:	4a 81       	ldd	r20, Y+2	; 0x02
    35a0:	5b 81       	ldd	r21, Y+3	; 0x03
    35a2:	6c 81       	ldd	r22, Y+4	; 0x04
    35a4:	7d 81       	ldd	r23, Y+5	; 0x05
    35a6:	db 01       	movw	r26, r22
    35a8:	ca 01       	movw	r24, r20
    35aa:	07 2e       	mov	r0, r23
    35ac:	79 e1       	ldi	r23, 0x19	; 25
    35ae:	b6 95       	lsr	r27
    35b0:	a7 95       	ror	r26
    35b2:	97 95       	ror	r25
    35b4:	87 95       	ror	r24
    35b6:	7a 95       	dec	r23
    35b8:	d1 f7       	brne	.-12     	; 0x35ae <VL53L0X_get_info_from_device+0x216>
    35ba:	70 2d       	mov	r23, r0
    35bc:	8f 77       	andi	r24, 0x7F	; 127
    35be:	88 8b       	std	Y+16, r24	; 0x10
    35c0:	db 01       	movw	r26, r22
    35c2:	ca 01       	movw	r24, r20
    35c4:	07 2e       	mov	r0, r23
    35c6:	72 e1       	ldi	r23, 0x12	; 18
    35c8:	b6 95       	lsr	r27
    35ca:	a7 95       	ror	r26
    35cc:	97 95       	ror	r25
    35ce:	87 95       	ror	r24
    35d0:	7a 95       	dec	r23
    35d2:	d1 f7       	brne	.-12     	; 0x35c8 <VL53L0X_get_info_from_device+0x230>
    35d4:	70 2d       	mov	r23, r0
    35d6:	8f 77       	andi	r24, 0x7F	; 127
    35d8:	89 8b       	std	Y+17, r24	; 0x11
    35da:	db 01       	movw	r26, r22
    35dc:	ca 01       	movw	r24, r20
    35de:	07 2e       	mov	r0, r23
    35e0:	7b e0       	ldi	r23, 0x0B	; 11
    35e2:	b6 95       	lsr	r27
    35e4:	a7 95       	ror	r26
    35e6:	97 95       	ror	r25
    35e8:	87 95       	ror	r24
    35ea:	7a 95       	dec	r23
    35ec:	d1 f7       	brne	.-12     	; 0x35e2 <VL53L0X_get_info_from_device+0x24a>
    35ee:	70 2d       	mov	r23, r0
    35f0:	8f 77       	andi	r24, 0x7F	; 127
    35f2:	8a 8b       	std	Y+18, r24	; 0x12
    35f4:	db 01       	movw	r26, r22
    35f6:	ca 01       	movw	r24, r20
    35f8:	68 94       	set
    35fa:	13 f8       	bld	r1, 3
    35fc:	b6 95       	lsr	r27
    35fe:	a7 95       	ror	r26
    3600:	97 95       	ror	r25
    3602:	87 95       	ror	r24
    3604:	16 94       	lsr	r1
    3606:	d1 f7       	brne	.-12     	; 0x35fc <VL53L0X_get_info_from_device+0x264>
    3608:	8f 77       	andi	r24, 0x7F	; 127
    360a:	8b 8b       	std	Y+19, r24	; 0x13
    360c:	4f 70       	andi	r20, 0x0F	; 15
    360e:	44 0f       	add	r20, r20
    3610:	44 0f       	add	r20, r20
    3612:	44 0f       	add	r20, r20
    3614:	49 83       	std	Y+1, r20	; 0x01
    3616:	48 e7       	ldi	r20, 0x78	; 120
    3618:	64 e9       	ldi	r22, 0x94	; 148
    361a:	c7 01       	movw	r24, r14
    361c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3620:	18 2b       	or	r17, r24
    3622:	c7 01       	movw	r24, r14
    3624:	70 de       	rcall	.-800    	; 0x3306 <VL53L0X_device_read_strobe>
    3626:	18 2b       	or	r17, r24
    3628:	ae 01       	movw	r20, r28
    362a:	4e 5f       	subi	r20, 0xFE	; 254
    362c:	5f 4f       	sbci	r21, 0xFF	; 255
    362e:	60 e9       	ldi	r22, 0x90	; 144
    3630:	c7 01       	movw	r24, r14
    3632:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3636:	18 2b       	or	r17, r24
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	9b 81       	ldd	r25, Y+3	; 0x03
    363c:	ac 81       	ldd	r26, Y+4	; 0x04
    363e:	bd 81       	ldd	r27, Y+5	; 0x05
    3640:	ac 01       	movw	r20, r24
    3642:	bd 01       	movw	r22, r26
    3644:	03 2e       	mov	r0, r19
    3646:	3d e1       	ldi	r19, 0x1D	; 29
    3648:	76 95       	lsr	r23
    364a:	67 95       	ror	r22
    364c:	57 95       	ror	r21
    364e:	47 95       	ror	r20
    3650:	3a 95       	dec	r19
    3652:	d1 f7       	brne	.-12     	; 0x3648 <VL53L0X_get_info_from_device+0x2b0>
    3654:	30 2d       	mov	r19, r0
    3656:	4f 77       	andi	r20, 0x7F	; 127
    3658:	39 81       	ldd	r19, Y+1	; 0x01
    365a:	24 2f       	mov	r18, r20
    365c:	23 0f       	add	r18, r19
    365e:	2c 8b       	std	Y+20, r18	; 0x14
    3660:	ac 01       	movw	r20, r24
    3662:	bd 01       	movw	r22, r26
    3664:	03 2e       	mov	r0, r19
    3666:	36 e1       	ldi	r19, 0x16	; 22
    3668:	76 95       	lsr	r23
    366a:	67 95       	ror	r22
    366c:	57 95       	ror	r21
    366e:	47 95       	ror	r20
    3670:	3a 95       	dec	r19
    3672:	d1 f7       	brne	.-12     	; 0x3668 <VL53L0X_get_info_from_device+0x2d0>
    3674:	30 2d       	mov	r19, r0
    3676:	4f 77       	andi	r20, 0x7F	; 127
    3678:	4d 8b       	std	Y+21, r20	; 0x15
    367a:	ac 01       	movw	r20, r24
    367c:	bd 01       	movw	r22, r26
    367e:	03 2e       	mov	r0, r19
    3680:	3f e0       	ldi	r19, 0x0F	; 15
    3682:	76 95       	lsr	r23
    3684:	67 95       	ror	r22
    3686:	57 95       	ror	r21
    3688:	47 95       	ror	r20
    368a:	3a 95       	dec	r19
    368c:	d1 f7       	brne	.-12     	; 0x3682 <VL53L0X_get_info_from_device+0x2ea>
    368e:	30 2d       	mov	r19, r0
    3690:	4f 77       	andi	r20, 0x7F	; 127
    3692:	4e 8b       	std	Y+22, r20	; 0x16
    3694:	29 2f       	mov	r18, r25
    3696:	2f 77       	andi	r18, 0x7F	; 127
    3698:	2f 8b       	std	Y+23, r18	; 0x17
    369a:	ac 01       	movw	r20, r24
    369c:	bd 01       	movw	r22, r26
    369e:	76 95       	lsr	r23
    36a0:	67 95       	ror	r22
    36a2:	57 95       	ror	r21
    36a4:	47 95       	ror	r20
    36a6:	4f 77       	andi	r20, 0x7F	; 127
    36a8:	48 8f       	std	Y+24, r20	; 0x18
    36aa:	98 2f       	mov	r25, r24
    36ac:	91 70       	andi	r25, 0x01	; 1
    36ae:	92 95       	swap	r25
    36b0:	99 0f       	add	r25, r25
    36b2:	99 0f       	add	r25, r25
    36b4:	90 7c       	andi	r25, 0xC0	; 192
    36b6:	99 83       	std	Y+1, r25	; 0x01
    36b8:	49 e7       	ldi	r20, 0x79	; 121
    36ba:	64 e9       	ldi	r22, 0x94	; 148
    36bc:	c7 01       	movw	r24, r14
    36be:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    36c2:	18 2b       	or	r17, r24
    36c4:	c7 01       	movw	r24, r14
    36c6:	1f de       	rcall	.-962    	; 0x3306 <VL53L0X_device_read_strobe>
    36c8:	18 2b       	or	r17, r24
    36ca:	ae 01       	movw	r20, r28
    36cc:	4e 5f       	subi	r20, 0xFE	; 254
    36ce:	5f 4f       	sbci	r21, 0xFF	; 255
    36d0:	60 e9       	ldi	r22, 0x90	; 144
    36d2:	c7 01       	movw	r24, r14
    36d4:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    36d8:	18 2b       	or	r17, r24
    36da:	8a 81       	ldd	r24, Y+2	; 0x02
    36dc:	9b 81       	ldd	r25, Y+3	; 0x03
    36de:	ac 81       	ldd	r26, Y+4	; 0x04
    36e0:	bd 81       	ldd	r27, Y+5	; 0x05
    36e2:	ac 01       	movw	r20, r24
    36e4:	bd 01       	movw	r22, r26
    36e6:	03 2e       	mov	r0, r19
    36e8:	3a e1       	ldi	r19, 0x1A	; 26
    36ea:	76 95       	lsr	r23
    36ec:	67 95       	ror	r22
    36ee:	57 95       	ror	r21
    36f0:	47 95       	ror	r20
    36f2:	3a 95       	dec	r19
    36f4:	d1 f7       	brne	.-12     	; 0x36ea <VL53L0X_get_info_from_device+0x352>
    36f6:	30 2d       	mov	r19, r0
    36f8:	4f 77       	andi	r20, 0x7F	; 127
    36fa:	39 81       	ldd	r19, Y+1	; 0x01
    36fc:	24 2f       	mov	r18, r20
    36fe:	23 0f       	add	r18, r19
    3700:	29 8f       	std	Y+25, r18	; 0x19
    3702:	ac 01       	movw	r20, r24
    3704:	bd 01       	movw	r22, r26
    3706:	03 2e       	mov	r0, r19
    3708:	33 e1       	ldi	r19, 0x13	; 19
    370a:	76 95       	lsr	r23
    370c:	67 95       	ror	r22
    370e:	57 95       	ror	r21
    3710:	47 95       	ror	r20
    3712:	3a 95       	dec	r19
    3714:	d1 f7       	brne	.-12     	; 0x370a <VL53L0X_get_info_from_device+0x372>
    3716:	30 2d       	mov	r19, r0
    3718:	4f 77       	andi	r20, 0x7F	; 127
    371a:	4a 8f       	std	Y+26, r20	; 0x1a
    371c:	ac 01       	movw	r20, r24
    371e:	bd 01       	movw	r22, r26
    3720:	03 2e       	mov	r0, r19
    3722:	3c e0       	ldi	r19, 0x0C	; 12
    3724:	76 95       	lsr	r23
    3726:	67 95       	ror	r22
    3728:	57 95       	ror	r21
    372a:	47 95       	ror	r20
    372c:	3a 95       	dec	r19
    372e:	d1 f7       	brne	.-12     	; 0x3724 <VL53L0X_get_info_from_device+0x38c>
    3730:	30 2d       	mov	r19, r0
    3732:	4f 77       	andi	r20, 0x7F	; 127
    3734:	4b 8f       	std	Y+27, r20	; 0x1b
    3736:	ac 01       	movw	r20, r24
    3738:	bd 01       	movw	r22, r26
    373a:	68 94       	set
    373c:	14 f8       	bld	r1, 4
    373e:	76 95       	lsr	r23
    3740:	67 95       	ror	r22
    3742:	57 95       	ror	r21
    3744:	47 95       	ror	r20
    3746:	16 94       	lsr	r1
    3748:	d1 f7       	brne	.-12     	; 0x373e <VL53L0X_get_info_from_device+0x3a6>
    374a:	4f 77       	andi	r20, 0x7F	; 127
    374c:	4c 8f       	std	Y+28, r20	; 0x1c
    374e:	98 2f       	mov	r25, r24
    3750:	9f 71       	andi	r25, 0x1F	; 31
    3752:	99 0f       	add	r25, r25
    3754:	99 0f       	add	r25, r25
    3756:	99 83       	std	Y+1, r25	; 0x01
    3758:	4a e7       	ldi	r20, 0x7A	; 122
    375a:	64 e9       	ldi	r22, 0x94	; 148
    375c:	c7 01       	movw	r24, r14
    375e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3762:	18 2b       	or	r17, r24
    3764:	c7 01       	movw	r24, r14
    3766:	cf dd       	rcall	.-1122   	; 0x3306 <VL53L0X_device_read_strobe>
    3768:	18 2b       	or	r17, r24
    376a:	ae 01       	movw	r20, r28
    376c:	4e 5f       	subi	r20, 0xFE	; 254
    376e:	5f 4f       	sbci	r21, 0xFF	; 255
    3770:	60 e9       	ldi	r22, 0x90	; 144
    3772:	c7 01       	movw	r24, r14
    3774:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3778:	18 2b       	or	r17, r24
    377a:	8a 81       	ldd	r24, Y+2	; 0x02
    377c:	9b 81       	ldd	r25, Y+3	; 0x03
    377e:	ac 81       	ldd	r26, Y+4	; 0x04
    3780:	bd 81       	ldd	r27, Y+5	; 0x05
    3782:	ac 01       	movw	r20, r24
    3784:	bd 01       	movw	r22, r26
    3786:	03 2e       	mov	r0, r19
    3788:	3e e1       	ldi	r19, 0x1E	; 30
    378a:	76 95       	lsr	r23
    378c:	67 95       	ror	r22
    378e:	57 95       	ror	r21
    3790:	47 95       	ror	r20
    3792:	3a 95       	dec	r19
    3794:	d1 f7       	brne	.-12     	; 0x378a <VL53L0X_get_info_from_device+0x3f2>
    3796:	30 2d       	mov	r19, r0
    3798:	4f 77       	andi	r20, 0x7F	; 127
    379a:	39 81       	ldd	r19, Y+1	; 0x01
    379c:	24 2f       	mov	r18, r20
    379e:	23 0f       	add	r18, r19
    37a0:	2d 8f       	std	Y+29, r18	; 0x1d
    37a2:	ac 01       	movw	r20, r24
    37a4:	bd 01       	movw	r22, r26
    37a6:	03 2e       	mov	r0, r19
    37a8:	37 e1       	ldi	r19, 0x17	; 23
    37aa:	76 95       	lsr	r23
    37ac:	67 95       	ror	r22
    37ae:	57 95       	ror	r21
    37b0:	47 95       	ror	r20
    37b2:	3a 95       	dec	r19
    37b4:	d1 f7       	brne	.-12     	; 0x37aa <VL53L0X_get_info_from_device+0x412>
    37b6:	30 2d       	mov	r19, r0
    37b8:	4f 77       	andi	r20, 0x7F	; 127
    37ba:	4e 8f       	std	Y+30, r20	; 0x1e
    37bc:	2a 2f       	mov	r18, r26
    37be:	2f 77       	andi	r18, 0x7F	; 127
    37c0:	2f 8f       	std	Y+31, r18	; 0x1f
    37c2:	ac 01       	movw	r20, r24
    37c4:	bd 01       	movw	r22, r26
    37c6:	03 2e       	mov	r0, r19
    37c8:	39 e0       	ldi	r19, 0x09	; 9
    37ca:	76 95       	lsr	r23
    37cc:	67 95       	ror	r22
    37ce:	57 95       	ror	r21
    37d0:	47 95       	ror	r20
    37d2:	3a 95       	dec	r19
    37d4:	d1 f7       	brne	.-12     	; 0x37ca <VL53L0X_get_info_from_device+0x432>
    37d6:	30 2d       	mov	r19, r0
    37d8:	4f 77       	andi	r20, 0x7F	; 127
    37da:	48 a3       	std	Y+32, r20	; 0x20
    37dc:	b6 95       	lsr	r27
    37de:	a7 95       	ror	r26
    37e0:	97 95       	ror	r25
    37e2:	87 95       	ror	r24
    37e4:	b6 95       	lsr	r27
    37e6:	a7 95       	ror	r26
    37e8:	97 95       	ror	r25
    37ea:	87 95       	ror	r24
    37ec:	8f 77       	andi	r24, 0x7F	; 127
    37ee:	89 a3       	std	Y+33, r24	; 0x21
    37f0:	1a a2       	std	Y+34, r1	; 0x22
    37f2:	80 2f       	mov	r24, r16
    37f4:	84 70       	andi	r24, 0x04	; 4
    37f6:	c8 2e       	mov	r12, r24
    37f8:	02 ff       	sbrs	r16, 2
    37fa:	98 c0       	rjmp	.+304    	; 0x392c <VL53L0X_get_info_from_device+0x594>
    37fc:	d2 fc       	sbrc	r13, 2
    37fe:	9d c0       	rjmp	.+314    	; 0x393a <VL53L0X_get_info_from_device+0x5a2>
    3800:	4b e7       	ldi	r20, 0x7B	; 123
    3802:	64 e9       	ldi	r22, 0x94	; 148
    3804:	c7 01       	movw	r24, r14
    3806:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    380a:	b8 2e       	mov	r11, r24
    380c:	c7 01       	movw	r24, r14
    380e:	7b dd       	rcall	.-1290   	; 0x3306 <VL53L0X_device_read_strobe>
    3810:	8b 29       	or	r24, r11
    3812:	18 2b       	or	r17, r24
    3814:	ae 01       	movw	r20, r28
    3816:	48 5f       	subi	r20, 0xF8	; 248
    3818:	5f 4f       	sbci	r21, 0xFF	; 255
    381a:	60 e9       	ldi	r22, 0x90	; 144
    381c:	c7 01       	movw	r24, r14
    381e:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3822:	18 2b       	or	r17, r24
    3824:	4c e7       	ldi	r20, 0x7C	; 124
    3826:	64 e9       	ldi	r22, 0x94	; 148
    3828:	c7 01       	movw	r24, r14
    382a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    382e:	18 2b       	or	r17, r24
    3830:	c7 01       	movw	r24, r14
    3832:	69 dd       	rcall	.-1326   	; 0x3306 <VL53L0X_device_read_strobe>
    3834:	18 2b       	or	r17, r24
    3836:	ae 01       	movw	r20, r28
    3838:	44 5f       	subi	r20, 0xF4	; 244
    383a:	5f 4f       	sbci	r21, 0xFF	; 255
    383c:	60 e9       	ldi	r22, 0x90	; 144
    383e:	c7 01       	movw	r24, r14
    3840:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3844:	18 2b       	or	r17, r24
    3846:	43 e7       	ldi	r20, 0x73	; 115
    3848:	64 e9       	ldi	r22, 0x94	; 148
    384a:	c7 01       	movw	r24, r14
    384c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3850:	18 2b       	or	r17, r24
    3852:	c7 01       	movw	r24, r14
    3854:	58 dd       	rcall	.-1360   	; 0x3306 <VL53L0X_device_read_strobe>
    3856:	18 2b       	or	r17, r24
    3858:	ae 01       	movw	r20, r28
    385a:	4e 5f       	subi	r20, 0xFE	; 254
    385c:	5f 4f       	sbci	r21, 0xFF	; 255
    385e:	60 e9       	ldi	r22, 0x90	; 144
    3860:	c7 01       	movw	r24, r14
    3862:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3866:	18 2b       	or	r17, r24
    3868:	8a 80       	ldd	r8, Y+2	; 0x02
    386a:	9b 80       	ldd	r9, Y+3	; 0x03
    386c:	ac 80       	ldd	r10, Y+4	; 0x04
    386e:	bd 80       	ldd	r11, Y+5	; 0x05
    3870:	ba 2c       	mov	r11, r10
    3872:	a9 2c       	mov	r10, r9
    3874:	98 2c       	mov	r9, r8
    3876:	88 24       	eor	r8, r8
    3878:	24 01       	movw	r4, r8
    387a:	35 01       	movw	r6, r10
    387c:	66 24       	eor	r6, r6
    387e:	77 24       	eor	r7, r7
    3880:	44 e7       	ldi	r20, 0x74	; 116
    3882:	64 e9       	ldi	r22, 0x94	; 148
    3884:	c7 01       	movw	r24, r14
    3886:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    388a:	18 2b       	or	r17, r24
    388c:	c7 01       	movw	r24, r14
    388e:	3b dd       	rcall	.-1418   	; 0x3306 <VL53L0X_device_read_strobe>
    3890:	18 2b       	or	r17, r24
    3892:	ae 01       	movw	r20, r28
    3894:	4e 5f       	subi	r20, 0xFE	; 254
    3896:	5f 4f       	sbci	r21, 0xFF	; 255
    3898:	60 e9       	ldi	r22, 0x90	; 144
    389a:	c7 01       	movw	r24, r14
    389c:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    38a0:	18 2b       	or	r17, r24
    38a2:	8a 80       	ldd	r8, Y+2	; 0x02
    38a4:	9b 80       	ldd	r9, Y+3	; 0x03
    38a6:	ac 80       	ldd	r10, Y+4	; 0x04
    38a8:	bd 80       	ldd	r11, Y+5	; 0x05
    38aa:	8b 2c       	mov	r8, r11
    38ac:	99 24       	eor	r9, r9
    38ae:	aa 24       	eor	r10, r10
    38b0:	bb 24       	eor	r11, r11
    38b2:	84 28       	or	r8, r4
    38b4:	95 28       	or	r9, r5
    38b6:	a6 28       	or	r10, r6
    38b8:	b7 28       	or	r11, r7
    38ba:	45 e7       	ldi	r20, 0x75	; 117
    38bc:	64 e9       	ldi	r22, 0x94	; 148
    38be:	c7 01       	movw	r24, r14
    38c0:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    38c4:	18 2b       	or	r17, r24
    38c6:	c7 01       	movw	r24, r14
    38c8:	1e dd       	rcall	.-1476   	; 0x3306 <VL53L0X_device_read_strobe>
    38ca:	18 2b       	or	r17, r24
    38cc:	ae 01       	movw	r20, r28
    38ce:	4e 5f       	subi	r20, 0xFE	; 254
    38d0:	5f 4f       	sbci	r21, 0xFF	; 255
    38d2:	60 e9       	ldi	r22, 0x90	; 144
    38d4:	c7 01       	movw	r24, r14
    38d6:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    38da:	18 2b       	or	r17, r24
    38dc:	4a 80       	ldd	r4, Y+2	; 0x02
    38de:	5b 80       	ldd	r5, Y+3	; 0x03
    38e0:	6c 80       	ldd	r6, Y+4	; 0x04
    38e2:	7d 80       	ldd	r7, Y+5	; 0x05
    38e4:	76 2c       	mov	r7, r6
    38e6:	65 2c       	mov	r6, r5
    38e8:	54 2c       	mov	r5, r4
    38ea:	44 24       	eor	r4, r4
    38ec:	66 24       	eor	r6, r6
    38ee:	77 24       	eor	r7, r7
    38f0:	46 e7       	ldi	r20, 0x76	; 118
    38f2:	64 e9       	ldi	r22, 0x94	; 148
    38f4:	c7 01       	movw	r24, r14
    38f6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    38fa:	18 2b       	or	r17, r24
    38fc:	c7 01       	movw	r24, r14
    38fe:	03 dd       	rcall	.-1530   	; 0x3306 <VL53L0X_device_read_strobe>
    3900:	18 2b       	or	r17, r24
    3902:	ae 01       	movw	r20, r28
    3904:	4e 5f       	subi	r20, 0xFE	; 254
    3906:	5f 4f       	sbci	r21, 0xFF	; 255
    3908:	60 e9       	ldi	r22, 0x90	; 144
    390a:	c7 01       	movw	r24, r14
    390c:	0e 94 3e 2c 	call	0x587c	; 0x587c <VL53L0X_RdDWord>
    3910:	18 2b       	or	r17, r24
    3912:	8a 81       	ldd	r24, Y+2	; 0x02
    3914:	9b 81       	ldd	r25, Y+3	; 0x03
    3916:	ac 81       	ldd	r26, Y+4	; 0x04
    3918:	bd 81       	ldd	r27, Y+5	; 0x05
    391a:	8b 2f       	mov	r24, r27
    391c:	99 27       	eor	r25, r25
    391e:	aa 27       	eor	r26, r26
    3920:	bb 27       	eor	r27, r27
    3922:	48 2a       	or	r4, r24
    3924:	59 2a       	or	r5, r25
    3926:	6a 2a       	or	r6, r26
    3928:	7b 2a       	or	r7, r27
    392a:	0d c0       	rjmp	.+26     	; 0x3946 <VL53L0X_get_info_from_device+0x5ae>
    392c:	81 2c       	mov	r8, r1
    392e:	91 2c       	mov	r9, r1
    3930:	54 01       	movw	r10, r8
    3932:	41 2c       	mov	r4, r1
    3934:	51 2c       	mov	r5, r1
    3936:	32 01       	movw	r6, r4
    3938:	06 c0       	rjmp	.+12     	; 0x3946 <VL53L0X_get_info_from_device+0x5ae>
    393a:	81 2c       	mov	r8, r1
    393c:	91 2c       	mov	r9, r1
    393e:	54 01       	movw	r10, r8
    3940:	41 2c       	mov	r4, r1
    3942:	51 2c       	mov	r5, r1
    3944:	32 01       	movw	r6, r4
    3946:	40 e0       	ldi	r20, 0x00	; 0
    3948:	61 e8       	ldi	r22, 0x81	; 129
    394a:	c7 01       	movw	r24, r14
    394c:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3950:	18 2b       	or	r17, r24
    3952:	46 e0       	ldi	r20, 0x06	; 6
    3954:	6f ef       	ldi	r22, 0xFF	; 255
    3956:	c7 01       	movw	r24, r14
    3958:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    395c:	18 2b       	or	r17, r24
    395e:	ae 01       	movw	r20, r28
    3960:	4f 5f       	subi	r20, 0xFF	; 255
    3962:	5f 4f       	sbci	r21, 0xFF	; 255
    3964:	63 e8       	ldi	r22, 0x83	; 131
    3966:	c7 01       	movw	r24, r14
    3968:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    396c:	18 2b       	or	r17, r24
    396e:	49 81       	ldd	r20, Y+1	; 0x01
    3970:	4b 7f       	andi	r20, 0xFB	; 251
    3972:	63 e8       	ldi	r22, 0x83	; 131
    3974:	c7 01       	movw	r24, r14
    3976:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    397a:	18 2b       	or	r17, r24
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	6f ef       	ldi	r22, 0xFF	; 255
    3980:	c7 01       	movw	r24, r14
    3982:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3986:	18 2b       	or	r17, r24
    3988:	41 e0       	ldi	r20, 0x01	; 1
    398a:	60 e0       	ldi	r22, 0x00	; 0
    398c:	c7 01       	movw	r24, r14
    398e:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3992:	18 2b       	or	r17, r24
    3994:	40 e0       	ldi	r20, 0x00	; 0
    3996:	6f ef       	ldi	r22, 0xFF	; 255
    3998:	c7 01       	movw	r24, r14
    399a:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    399e:	18 2b       	or	r17, r24
    39a0:	40 e0       	ldi	r20, 0x00	; 0
    39a2:	60 e8       	ldi	r22, 0x80	; 128
    39a4:	c7 01       	movw	r24, r14
    39a6:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    39aa:	18 2b       	or	r17, r24
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <VL53L0X_get_info_from_device+0x618>
    39ae:	82 c0       	rjmp	.+260    	; 0x3ab4 <VL53L0X_get_info_from_device+0x71c>
    39b0:	22 20       	and	r2, r2
    39b2:	b9 f0       	breq	.+46     	; 0x39e2 <VL53L0X_get_info_from_device+0x64a>
    39b4:	d0 fc       	sbrc	r13, 0
    39b6:	15 c0       	rjmp	.+42     	; 0x39e2 <VL53L0X_get_info_from_device+0x64a>
    39b8:	f7 01       	movw	r30, r14
    39ba:	ee 5f       	subi	r30, 0xFE	; 254
    39bc:	fe 4f       	sbci	r31, 0xFE	; 254
    39be:	29 a5       	ldd	r18, Y+41	; 0x29
    39c0:	20 83       	st	Z, r18
    39c2:	31 96       	adiw	r30, 0x01	; 1
    39c4:	8a a5       	ldd	r24, Y+42	; 0x2a
    39c6:	80 83       	st	Z, r24
    39c8:	fe 01       	movw	r30, r28
    39ca:	b3 96       	adiw	r30, 0x23	; 35
    39cc:	d7 01       	movw	r26, r14
    39ce:	a9 5e       	subi	r26, 0xE9	; 233
    39d0:	be 4f       	sbci	r27, 0xFE	; 254
    39d2:	9e 01       	movw	r18, r28
    39d4:	27 5d       	subi	r18, 0xD7	; 215
    39d6:	3f 4f       	sbci	r19, 0xFF	; 255
    39d8:	81 91       	ld	r24, Z+
    39da:	8d 93       	st	X+, r24
    39dc:	2e 17       	cp	r18, r30
    39de:	3f 07       	cpc	r19, r31
    39e0:	d9 f7       	brne	.-10     	; 0x39d8 <VL53L0X_get_info_from_device+0x640>
    39e2:	33 20       	and	r3, r3
    39e4:	91 f0       	breq	.+36     	; 0x3a0a <VL53L0X_get_info_from_device+0x672>
    39e6:	d1 fc       	sbrc	r13, 1
    39e8:	10 c0       	rjmp	.+32     	; 0x3a0a <VL53L0X_get_info_from_device+0x672>
    39ea:	8e 81       	ldd	r24, Y+6	; 0x06
    39ec:	f7 01       	movw	r30, r14
    39ee:	e0 52       	subi	r30, 0x20	; 32
    39f0:	ff 4f       	sbci	r31, 0xFF	; 255
    39f2:	80 83       	st	Z, r24
    39f4:	8f 81       	ldd	r24, Y+7	; 0x07
    39f6:	31 96       	adiw	r30, 0x01	; 1
    39f8:	80 83       	st	Z, r24
    39fa:	be 01       	movw	r22, r28
    39fc:	60 5f       	subi	r22, 0xF0	; 240
    39fe:	7f 4f       	sbci	r23, 0xFF	; 255
    3a00:	c7 01       	movw	r24, r14
    3a02:	8e 51       	subi	r24, 0x1E	; 30
    3a04:	9f 4f       	sbci	r25, 0xFF	; 255
    3a06:	0e 94 10 2d 	call	0x5a20	; 0x5a20 <strcpy>
    3a0a:	cc 20       	and	r12, r12
    3a0c:	09 f4       	brne	.+2      	; 0x3a10 <VL53L0X_get_info_from_device+0x678>
    3a0e:	4b c0       	rjmp	.+150    	; 0x3aa6 <VL53L0X_get_info_from_device+0x70e>
    3a10:	d2 fc       	sbrc	r13, 2
    3a12:	49 c0       	rjmp	.+146    	; 0x3aa6 <VL53L0X_get_info_from_device+0x70e>
    3a14:	88 85       	ldd	r24, Y+8	; 0x08
    3a16:	99 85       	ldd	r25, Y+9	; 0x09
    3a18:	aa 85       	ldd	r26, Y+10	; 0x0a
    3a1a:	bb 85       	ldd	r27, Y+11	; 0x0b
    3a1c:	f7 01       	movw	r30, r14
    3a1e:	eb 5f       	subi	r30, 0xFB	; 251
    3a20:	fe 4f       	sbci	r31, 0xFE	; 254
    3a22:	80 83       	st	Z, r24
    3a24:	91 83       	std	Z+1, r25	; 0x01
    3a26:	a2 83       	std	Z+2, r26	; 0x02
    3a28:	b3 83       	std	Z+3, r27	; 0x03
    3a2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    3a2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    3a2e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3a30:	bf 85       	ldd	r27, Y+15	; 0x0f
    3a32:	34 96       	adiw	r30, 0x04	; 4
    3a34:	80 83       	st	Z, r24
    3a36:	91 83       	std	Z+1, r25	; 0x01
    3a38:	a2 83       	std	Z+2, r26	; 0x02
    3a3a:	b3 83       	std	Z+3, r27	; 0x03
    3a3c:	34 96       	adiw	r30, 0x04	; 4
    3a3e:	07 2e       	mov	r0, r23
    3a40:	79 e0       	ldi	r23, 0x09	; 9
    3a42:	88 0c       	add	r8, r8
    3a44:	99 1c       	adc	r9, r9
    3a46:	aa 1c       	adc	r10, r10
    3a48:	bb 1c       	adc	r11, r11
    3a4a:	7a 95       	dec	r23
    3a4c:	d1 f7       	brne	.-12     	; 0x3a42 <VL53L0X_get_info_from_device+0x6aa>
    3a4e:	70 2d       	mov	r23, r0
    3a50:	80 82       	st	Z, r8
    3a52:	91 82       	std	Z+1, r9	; 0x01
    3a54:	a2 82       	std	Z+2, r10	; 0x02
    3a56:	b3 82       	std	Z+3, r11	; 0x03
    3a58:	41 14       	cp	r4, r1
    3a5a:	51 04       	cpc	r5, r1
    3a5c:	61 04       	cpc	r6, r1
    3a5e:	71 04       	cpc	r7, r1
    3a60:	b9 f0       	breq	.+46     	; 0x3a90 <VL53L0X_get_info_from_device+0x6f8>
    3a62:	a3 01       	movw	r20, r6
    3a64:	92 01       	movw	r18, r4
    3a66:	39 51       	subi	r19, 0x19	; 25
    3a68:	41 09       	sbc	r20, r1
    3a6a:	51 09       	sbc	r21, r1
    3a6c:	a8 ee       	ldi	r26, 0xE8	; 232
    3a6e:	b3 e0       	ldi	r27, 0x03	; 3
    3a70:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    3a74:	dc 01       	movw	r26, r24
    3a76:	cb 01       	movw	r24, r22
    3a78:	68 94       	set
    3a7a:	13 f8       	bld	r1, 3
    3a7c:	b6 95       	lsr	r27
    3a7e:	a7 95       	ror	r26
    3a80:	97 95       	ror	r25
    3a82:	87 95       	ror	r24
    3a84:	16 94       	lsr	r1
    3a86:	d1 f7       	brne	.-12     	; 0x3a7c <VL53L0X_get_info_from_device+0x6e4>
    3a88:	91 95       	neg	r25
    3a8a:	81 95       	neg	r24
    3a8c:	91 09       	sbc	r25, r1
    3a8e:	02 c0       	rjmp	.+4      	; 0x3a94 <VL53L0X_get_info_from_device+0x6fc>
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	09 2e       	mov	r0, r25
    3a96:	00 0c       	add	r0, r0
    3a98:	aa 0b       	sbc	r26, r26
    3a9a:	bb 0b       	sbc	r27, r27
    3a9c:	f7 01       	movw	r30, r14
    3a9e:	84 87       	std	Z+12, r24	; 0x0c
    3aa0:	95 87       	std	Z+13, r25	; 0x0d
    3aa2:	a6 87       	std	Z+14, r26	; 0x0e
    3aa4:	b7 87       	std	Z+15, r27	; 0x0f
    3aa6:	f7 01       	movw	r30, r14
    3aa8:	e1 52       	subi	r30, 0x21	; 33
    3aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    3aac:	0d 29       	or	r16, r13
    3aae:	00 83       	st	Z, r16
    3ab0:	01 c0       	rjmp	.+2      	; 0x3ab4 <VL53L0X_get_info_from_device+0x71c>
    3ab2:	10 e0       	ldi	r17, 0x00	; 0
    3ab4:	81 2f       	mov	r24, r17
    3ab6:	aa 96       	adiw	r28, 0x2a	; 42
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	f8 94       	cli
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	1f 91       	pop	r17
    3ac8:	0f 91       	pop	r16
    3aca:	ff 90       	pop	r15
    3acc:	ef 90       	pop	r14
    3ace:	df 90       	pop	r13
    3ad0:	cf 90       	pop	r12
    3ad2:	bf 90       	pop	r11
    3ad4:	af 90       	pop	r10
    3ad6:	9f 90       	pop	r9
    3ad8:	8f 90       	pop	r8
    3ada:	7f 90       	pop	r7
    3adc:	6f 90       	pop	r6
    3ade:	5f 90       	pop	r5
    3ae0:	4f 90       	pop	r4
    3ae2:	3f 90       	pop	r3
    3ae4:	2f 90       	pop	r2
    3ae6:	08 95       	ret

00003ae8 <VL53L0X_encode_timeout>:
    3ae8:	0f 93       	push	r16
    3aea:	1f 93       	push	r17
    3aec:	61 15       	cp	r22, r1
    3aee:	71 05       	cpc	r23, r1
    3af0:	81 05       	cpc	r24, r1
    3af2:	91 05       	cpc	r25, r1
    3af4:	21 f1       	breq	.+72     	; 0x3b3e <VL53L0X_encode_timeout+0x56>
    3af6:	ab 01       	movw	r20, r22
    3af8:	bc 01       	movw	r22, r24
    3afa:	41 50       	subi	r20, 0x01	; 1
    3afc:	51 09       	sbc	r21, r1
    3afe:	61 09       	sbc	r22, r1
    3b00:	71 09       	sbc	r23, r1
    3b02:	db 01       	movw	r26, r22
    3b04:	ca 01       	movw	r24, r20
    3b06:	88 27       	eor	r24, r24
    3b08:	89 2b       	or	r24, r25
    3b0a:	8a 2b       	or	r24, r26
    3b0c:	8b 2b       	or	r24, r27
    3b0e:	79 f0       	breq	.+30     	; 0x3b2e <VL53L0X_encode_timeout+0x46>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	76 95       	lsr	r23
    3b16:	67 95       	ror	r22
    3b18:	57 95       	ror	r21
    3b1a:	47 95       	ror	r20
    3b1c:	01 96       	adiw	r24, 0x01	; 1
    3b1e:	8a 01       	movw	r16, r20
    3b20:	9b 01       	movw	r18, r22
    3b22:	00 27       	eor	r16, r16
    3b24:	01 2b       	or	r16, r17
    3b26:	02 2b       	or	r16, r18
    3b28:	03 2b       	or	r16, r19
    3b2a:	a1 f7       	brne	.-24     	; 0x3b14 <VL53L0X_encode_timeout+0x2c>
    3b2c:	02 c0       	rjmp	.+4      	; 0x3b32 <VL53L0X_encode_timeout+0x4a>
    3b2e:	80 e0       	ldi	r24, 0x00	; 0
    3b30:	90 e0       	ldi	r25, 0x00	; 0
    3b32:	98 2f       	mov	r25, r24
    3b34:	88 27       	eor	r24, r24
    3b36:	55 27       	eor	r21, r21
    3b38:	84 0f       	add	r24, r20
    3b3a:	95 1f       	adc	r25, r21
    3b3c:	02 c0       	rjmp	.+4      	; 0x3b42 <VL53L0X_encode_timeout+0x5a>
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	90 e0       	ldi	r25, 0x00	; 0
    3b42:	1f 91       	pop	r17
    3b44:	0f 91       	pop	r16
    3b46:	08 95       	ret

00003b48 <VL53L0X_calc_timeout_mclks>:
    3b48:	8f 92       	push	r8
    3b4a:	9f 92       	push	r9
    3b4c:	af 92       	push	r10
    3b4e:	bf 92       	push	r11
    3b50:	cf 92       	push	r12
    3b52:	df 92       	push	r13
    3b54:	ef 92       	push	r14
    3b56:	ff 92       	push	r15
    3b58:	4a 01       	movw	r8, r20
    3b5a:	5b 01       	movw	r10, r22
    3b5c:	a2 2f       	mov	r26, r18
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	20 e0       	ldi	r18, 0x00	; 0
    3b62:	3f e2       	ldi	r19, 0x2F	; 47
    3b64:	4a e3       	ldi	r20, 0x3A	; 58
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    3b6c:	6b 01       	movw	r12, r22
    3b6e:	7c 01       	movw	r14, r24
    3b70:	24 ef       	ldi	r18, 0xF4	; 244
    3b72:	c2 0e       	add	r12, r18
    3b74:	21 e0       	ldi	r18, 0x01	; 1
    3b76:	d2 1e       	adc	r13, r18
    3b78:	e1 1c       	adc	r14, r1
    3b7a:	f1 1c       	adc	r15, r1
    3b7c:	a8 ee       	ldi	r26, 0xE8	; 232
    3b7e:	b3 e0       	ldi	r27, 0x03	; 3
    3b80:	a5 01       	movw	r20, r10
    3b82:	94 01       	movw	r18, r8
    3b84:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    3b88:	4b 01       	movw	r8, r22
    3b8a:	5c 01       	movw	r10, r24
    3b8c:	c7 01       	movw	r24, r14
    3b8e:	b6 01       	movw	r22, r12
    3b90:	20 ed       	ldi	r18, 0xD0	; 208
    3b92:	37 e0       	ldi	r19, 0x07	; 7
    3b94:	40 e0       	ldi	r20, 0x00	; 0
    3b96:	50 e0       	ldi	r21, 0x00	; 0
    3b98:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    3b9c:	82 0e       	add	r8, r18
    3b9e:	93 1e       	adc	r9, r19
    3ba0:	a4 1e       	adc	r10, r20
    3ba2:	b5 1e       	adc	r11, r21
    3ba4:	c7 01       	movw	r24, r14
    3ba6:	b6 01       	movw	r22, r12
    3ba8:	28 ee       	ldi	r18, 0xE8	; 232
    3baa:	33 e0       	ldi	r19, 0x03	; 3
    3bac:	40 e0       	ldi	r20, 0x00	; 0
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    3bb4:	c5 01       	movw	r24, r10
    3bb6:	b4 01       	movw	r22, r8
    3bb8:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    3bbc:	ca 01       	movw	r24, r20
    3bbe:	b9 01       	movw	r22, r18
    3bc0:	ff 90       	pop	r15
    3bc2:	ef 90       	pop	r14
    3bc4:	df 90       	pop	r13
    3bc6:	cf 90       	pop	r12
    3bc8:	bf 90       	pop	r11
    3bca:	af 90       	pop	r10
    3bcc:	9f 90       	pop	r9
    3bce:	8f 90       	pop	r8
    3bd0:	08 95       	ret

00003bd2 <VL53L0X_calc_timeout_us>:
    3bd2:	4f 92       	push	r4
    3bd4:	5f 92       	push	r5
    3bd6:	6f 92       	push	r6
    3bd8:	7f 92       	push	r7
    3bda:	8f 92       	push	r8
    3bdc:	9f 92       	push	r9
    3bde:	af 92       	push	r10
    3be0:	bf 92       	push	r11
    3be2:	cf 92       	push	r12
    3be4:	df 92       	push	r13
    3be6:	ef 92       	push	r14
    3be8:	ff 92       	push	r15
    3bea:	3b 01       	movw	r6, r22
    3bec:	a4 2f       	mov	r26, r20
    3bee:	b0 e0       	ldi	r27, 0x00	; 0
    3bf0:	20 e0       	ldi	r18, 0x00	; 0
    3bf2:	3f e2       	ldi	r19, 0x2F	; 47
    3bf4:	4a e3       	ldi	r20, 0x3A	; 58
    3bf6:	50 e0       	ldi	r21, 0x00	; 0
    3bf8:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    3bfc:	6b 01       	movw	r12, r22
    3bfe:	7c 01       	movw	r14, r24
    3c00:	24 ef       	ldi	r18, 0xF4	; 244
    3c02:	c2 0e       	add	r12, r18
    3c04:	21 e0       	ldi	r18, 0x01	; 1
    3c06:	d2 1e       	adc	r13, r18
    3c08:	e1 1c       	adc	r14, r1
    3c0a:	f1 1c       	adc	r15, r1
    3c0c:	0f 2e       	mov	r0, r31
    3c0e:	f8 ee       	ldi	r31, 0xE8	; 232
    3c10:	8f 2e       	mov	r8, r31
    3c12:	f3 e0       	ldi	r31, 0x03	; 3
    3c14:	9f 2e       	mov	r9, r31
    3c16:	a1 2c       	mov	r10, r1
    3c18:	b1 2c       	mov	r11, r1
    3c1a:	f0 2d       	mov	r31, r0
    3c1c:	c7 01       	movw	r24, r14
    3c1e:	b6 01       	movw	r22, r12
    3c20:	a5 01       	movw	r20, r10
    3c22:	94 01       	movw	r18, r8
    3c24:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    3c28:	d3 01       	movw	r26, r6
    3c2a:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    3c2e:	2b 01       	movw	r4, r22
    3c30:	3c 01       	movw	r6, r24
    3c32:	c7 01       	movw	r24, r14
    3c34:	b6 01       	movw	r22, r12
    3c36:	20 ed       	ldi	r18, 0xD0	; 208
    3c38:	37 e0       	ldi	r19, 0x07	; 7
    3c3a:	40 e0       	ldi	r20, 0x00	; 0
    3c3c:	50 e0       	ldi	r21, 0x00	; 0
    3c3e:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    3c42:	c3 01       	movw	r24, r6
    3c44:	b2 01       	movw	r22, r4
    3c46:	62 0f       	add	r22, r18
    3c48:	73 1f       	adc	r23, r19
    3c4a:	84 1f       	adc	r24, r20
    3c4c:	95 1f       	adc	r25, r21
    3c4e:	a5 01       	movw	r20, r10
    3c50:	94 01       	movw	r18, r8
    3c52:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
    3c56:	ca 01       	movw	r24, r20
    3c58:	b9 01       	movw	r22, r18
    3c5a:	ff 90       	pop	r15
    3c5c:	ef 90       	pop	r14
    3c5e:	df 90       	pop	r13
    3c60:	cf 90       	pop	r12
    3c62:	bf 90       	pop	r11
    3c64:	af 90       	pop	r10
    3c66:	9f 90       	pop	r9
    3c68:	8f 90       	pop	r8
    3c6a:	7f 90       	pop	r7
    3c6c:	6f 90       	pop	r6
    3c6e:	5f 90       	pop	r5
    3c70:	4f 90       	pop	r4
    3c72:	08 95       	ret

00003c74 <get_sequence_step_timeout>:
    3c74:	af 92       	push	r10
    3c76:	bf 92       	push	r11
    3c78:	cf 92       	push	r12
    3c7a:	df 92       	push	r13
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	1f 93       	push	r17
    3c82:	cf 93       	push	r28
    3c84:	df 93       	push	r29
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	2b 97       	sbiw	r28, 0x0b	; 11
    3c8c:	0f b6       	in	r0, 0x3f	; 63
    3c8e:	f8 94       	cli
    3c90:	de bf       	out	0x3e, r29	; 62
    3c92:	0f be       	out	0x3f, r0	; 63
    3c94:	cd bf       	out	0x3d, r28	; 61
    3c96:	7c 01       	movw	r14, r24
    3c98:	6a 01       	movw	r12, r20
    3c9a:	1a 82       	std	Y+2, r1	; 0x02
    3c9c:	1c 82       	std	Y+4, r1	; 0x04
    3c9e:	1b 82       	std	Y+3, r1	; 0x03
    3ca0:	63 30       	cpi	r22, 0x03	; 3
    3ca2:	00 f5       	brcc	.+64     	; 0x3ce4 <get_sequence_step_timeout+0x70>
    3ca4:	ae 01       	movw	r20, r28
    3ca6:	4f 5f       	subi	r20, 0xFF	; 255
    3ca8:	5f 4f       	sbci	r21, 0xFF	; 255
    3caa:	60 e0       	ldi	r22, 0x00	; 0
    3cac:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3cb0:	18 2f       	mov	r17, r24
    3cb2:	81 11       	cpse	r24, r1
    3cb4:	08 c0       	rjmp	.+16     	; 0x3cc6 <get_sequence_step_timeout+0x52>
    3cb6:	ae 01       	movw	r20, r28
    3cb8:	4e 5f       	subi	r20, 0xFE	; 254
    3cba:	5f 4f       	sbci	r21, 0xFF	; 255
    3cbc:	66 e4       	ldi	r22, 0x46	; 70
    3cbe:	c7 01       	movw	r24, r14
    3cc0:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
    3cc4:	18 2f       	mov	r17, r24
    3cc6:	6a 81       	ldd	r22, Y+2	; 0x02
    3cc8:	86 2f       	mov	r24, r22
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	a0 e0       	ldi	r26, 0x00	; 0
    3cce:	b0 e0       	ldi	r27, 0x00	; 0
    3cd0:	bc 01       	movw	r22, r24
    3cd2:	cd 01       	movw	r24, r26
    3cd4:	6f 5f       	subi	r22, 0xFF	; 255
    3cd6:	7f 4f       	sbci	r23, 0xFF	; 255
    3cd8:	8f 4f       	sbci	r24, 0xFF	; 255
    3cda:	9f 4f       	sbci	r25, 0xFF	; 255
    3cdc:	49 81       	ldd	r20, Y+1	; 0x01
    3cde:	c7 01       	movw	r24, r14
    3ce0:	78 df       	rcall	.-272    	; 0x3bd2 <VL53L0X_calc_timeout_us>
    3ce2:	a4 c0       	rjmp	.+328    	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3ce4:	63 30       	cpi	r22, 0x03	; 3
    3ce6:	99 f5       	brne	.+102    	; 0x3d4e <get_sequence_step_timeout+0xda>
    3ce8:	ae 01       	movw	r20, r28
    3cea:	4f 5f       	subi	r20, 0xFF	; 255
    3cec:	5f 4f       	sbci	r21, 0xFF	; 255
    3cee:	60 e0       	ldi	r22, 0x00	; 0
    3cf0:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3cf4:	18 2f       	mov	r17, r24
    3cf6:	81 11       	cpse	r24, r1
    3cf8:	91 c0       	rjmp	.+290    	; 0x3e1c <get_sequence_step_timeout+0x1a8>
    3cfa:	ae 01       	movw	r20, r28
    3cfc:	4f 5f       	subi	r20, 0xFF	; 255
    3cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    3d00:	60 e0       	ldi	r22, 0x00	; 0
    3d02:	c7 01       	movw	r24, r14
    3d04:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3d08:	18 2f       	mov	r17, r24
    3d0a:	81 11       	cpse	r24, r1
    3d0c:	08 c0       	rjmp	.+16     	; 0x3d1e <get_sequence_step_timeout+0xaa>
    3d0e:	ae 01       	movw	r20, r28
    3d10:	4d 5f       	subi	r20, 0xFD	; 253
    3d12:	5f 4f       	sbci	r21, 0xFF	; 255
    3d14:	61 e5       	ldi	r22, 0x51	; 81
    3d16:	c7 01       	movw	r24, r14
    3d18:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    3d1c:	18 2f       	mov	r17, r24
    3d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    3d20:	3c 81       	ldd	r19, Y+4	; 0x04
    3d22:	b9 01       	movw	r22, r18
    3d24:	77 27       	eor	r23, r23
    3d26:	cb 01       	movw	r24, r22
    3d28:	a0 e0       	ldi	r26, 0x00	; 0
    3d2a:	b0 e0       	ldi	r27, 0x00	; 0
    3d2c:	04 c0       	rjmp	.+8      	; 0x3d36 <get_sequence_step_timeout+0xc2>
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	aa 1f       	adc	r26, r26
    3d34:	bb 1f       	adc	r27, r27
    3d36:	3a 95       	dec	r19
    3d38:	d2 f7       	brpl	.-12     	; 0x3d2e <get_sequence_step_timeout+0xba>
    3d3a:	bc 01       	movw	r22, r24
    3d3c:	cd 01       	movw	r24, r26
    3d3e:	6f 5f       	subi	r22, 0xFF	; 255
    3d40:	7f 4f       	sbci	r23, 0xFF	; 255
    3d42:	8f 4f       	sbci	r24, 0xFF	; 255
    3d44:	9f 4f       	sbci	r25, 0xFF	; 255
    3d46:	49 81       	ldd	r20, Y+1	; 0x01
    3d48:	c7 01       	movw	r24, r14
    3d4a:	43 df       	rcall	.-378    	; 0x3bd2 <VL53L0X_calc_timeout_us>
    3d4c:	6f c0       	rjmp	.+222    	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3d4e:	64 30       	cpi	r22, 0x04	; 4
    3d50:	09 f0       	breq	.+2      	; 0x3d54 <get_sequence_step_timeout+0xe0>
    3d52:	68 c0       	rjmp	.+208    	; 0x3e24 <get_sequence_step_timeout+0x1b0>
    3d54:	be 01       	movw	r22, r28
    3d56:	69 5f       	subi	r22, 0xF9	; 249
    3d58:	7f 4f       	sbci	r23, 0xFF	; 255
    3d5a:	0e 94 8f 08 	call	0x111e	; 0x111e <VL53L0X_GetSequenceStepEnables>
    3d5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3d60:	88 23       	and	r24, r24
    3d62:	31 f1       	breq	.+76     	; 0x3db0 <get_sequence_step_timeout+0x13c>
    3d64:	ae 01       	movw	r20, r28
    3d66:	4f 5f       	subi	r20, 0xFF	; 255
    3d68:	5f 4f       	sbci	r21, 0xFF	; 255
    3d6a:	60 e0       	ldi	r22, 0x00	; 0
    3d6c:	c7 01       	movw	r24, r14
    3d6e:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3d72:	18 2f       	mov	r17, r24
    3d74:	81 11       	cpse	r24, r1
    3d76:	41 c0       	rjmp	.+130    	; 0x3dfa <get_sequence_step_timeout+0x186>
    3d78:	ae 01       	movw	r20, r28
    3d7a:	4d 5f       	subi	r20, 0xFD	; 253
    3d7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3d7e:	61 e5       	ldi	r22, 0x51	; 81
    3d80:	c7 01       	movw	r24, r14
    3d82:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    3d86:	18 2f       	mov	r17, r24
    3d88:	2b 81       	ldd	r18, Y+3	; 0x03
    3d8a:	3c 81       	ldd	r19, Y+4	; 0x04
    3d8c:	c9 01       	movw	r24, r18
    3d8e:	99 27       	eor	r25, r25
    3d90:	a0 e0       	ldi	r26, 0x00	; 0
    3d92:	b0 e0       	ldi	r27, 0x00	; 0
    3d94:	04 c0       	rjmp	.+8      	; 0x3d9e <get_sequence_step_timeout+0x12a>
    3d96:	88 0f       	add	r24, r24
    3d98:	99 1f       	adc	r25, r25
    3d9a:	aa 1f       	adc	r26, r26
    3d9c:	bb 1f       	adc	r27, r27
    3d9e:	3a 95       	dec	r19
    3da0:	d2 f7       	brpl	.-12     	; 0x3d96 <get_sequence_step_timeout+0x122>
    3da2:	01 96       	adiw	r24, 0x01	; 1
    3da4:	a1 1d       	adc	r26, r1
    3da6:	b1 1d       	adc	r27, r1
    3da8:	5c 01       	movw	r10, r24
    3daa:	11 11       	cpse	r17, r1
    3dac:	2b c0       	rjmp	.+86     	; 0x3e04 <get_sequence_step_timeout+0x190>
    3dae:	02 c0       	rjmp	.+4      	; 0x3db4 <get_sequence_step_timeout+0x140>
    3db0:	a1 2c       	mov	r10, r1
    3db2:	b1 2c       	mov	r11, r1
    3db4:	ae 01       	movw	r20, r28
    3db6:	4f 5f       	subi	r20, 0xFF	; 255
    3db8:	5f 4f       	sbci	r21, 0xFF	; 255
    3dba:	61 e0       	ldi	r22, 0x01	; 1
    3dbc:	c7 01       	movw	r24, r14
    3dbe:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3dc2:	18 2f       	mov	r17, r24
    3dc4:	81 11       	cpse	r24, r1
    3dc6:	21 c0       	rjmp	.+66     	; 0x3e0a <get_sequence_step_timeout+0x196>
    3dc8:	ae 01       	movw	r20, r28
    3dca:	4b 5f       	subi	r20, 0xFB	; 251
    3dcc:	5f 4f       	sbci	r21, 0xFF	; 255
    3dce:	61 e7       	ldi	r22, 0x71	; 113
    3dd0:	c7 01       	movw	r24, r14
    3dd2:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    3dd6:	18 2f       	mov	r17, r24
    3dd8:	2d 81       	ldd	r18, Y+5	; 0x05
    3dda:	3e 81       	ldd	r19, Y+6	; 0x06
    3ddc:	c9 01       	movw	r24, r18
    3dde:	99 27       	eor	r25, r25
    3de0:	a0 e0       	ldi	r26, 0x00	; 0
    3de2:	b0 e0       	ldi	r27, 0x00	; 0
    3de4:	04 c0       	rjmp	.+8      	; 0x3dee <get_sequence_step_timeout+0x17a>
    3de6:	88 0f       	add	r24, r24
    3de8:	99 1f       	adc	r25, r25
    3dea:	aa 1f       	adc	r26, r26
    3dec:	bb 1f       	adc	r27, r27
    3dee:	3a 95       	dec	r19
    3df0:	d2 f7       	brpl	.-12     	; 0x3de6 <get_sequence_step_timeout+0x172>
    3df2:	01 96       	adiw	r24, 0x01	; 1
    3df4:	a1 1d       	adc	r26, r1
    3df6:	b1 1d       	adc	r27, r1
    3df8:	0a c0       	rjmp	.+20     	; 0x3e0e <get_sequence_step_timeout+0x19a>
    3dfa:	a1 2c       	mov	r10, r1
    3dfc:	b1 2c       	mov	r11, r1
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	05 c0       	rjmp	.+10     	; 0x3e0e <get_sequence_step_timeout+0x19a>
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	02 c0       	rjmp	.+4      	; 0x3e0e <get_sequence_step_timeout+0x19a>
    3e0a:	80 e0       	ldi	r24, 0x00	; 0
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	bc 01       	movw	r22, r24
    3e10:	6a 19       	sub	r22, r10
    3e12:	7b 09       	sbc	r23, r11
    3e14:	49 81       	ldd	r20, Y+1	; 0x01
    3e16:	c7 01       	movw	r24, r14
    3e18:	dc de       	rcall	.-584    	; 0x3bd2 <VL53L0X_calc_timeout_us>
    3e1a:	08 c0       	rjmp	.+16     	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3e1c:	60 e0       	ldi	r22, 0x00	; 0
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	cb 01       	movw	r24, r22
    3e22:	04 c0       	rjmp	.+8      	; 0x3e2c <get_sequence_step_timeout+0x1b8>
    3e24:	60 e0       	ldi	r22, 0x00	; 0
    3e26:	70 e0       	ldi	r23, 0x00	; 0
    3e28:	cb 01       	movw	r24, r22
    3e2a:	10 e0       	ldi	r17, 0x00	; 0
    3e2c:	f6 01       	movw	r30, r12
    3e2e:	60 83       	st	Z, r22
    3e30:	71 83       	std	Z+1, r23	; 0x01
    3e32:	82 83       	std	Z+2, r24	; 0x02
    3e34:	93 83       	std	Z+3, r25	; 0x03
    3e36:	81 2f       	mov	r24, r17
    3e38:	2b 96       	adiw	r28, 0x0b	; 11
    3e3a:	0f b6       	in	r0, 0x3f	; 63
    3e3c:	f8 94       	cli
    3e3e:	de bf       	out	0x3e, r29	; 62
    3e40:	0f be       	out	0x3f, r0	; 63
    3e42:	cd bf       	out	0x3d, r28	; 61
    3e44:	df 91       	pop	r29
    3e46:	cf 91       	pop	r28
    3e48:	1f 91       	pop	r17
    3e4a:	ff 90       	pop	r15
    3e4c:	ef 90       	pop	r14
    3e4e:	df 90       	pop	r13
    3e50:	cf 90       	pop	r12
    3e52:	bf 90       	pop	r11
    3e54:	af 90       	pop	r10
    3e56:	08 95       	ret

00003e58 <set_sequence_step_timeout>:
    3e58:	8f 92       	push	r8
    3e5a:	9f 92       	push	r9
    3e5c:	af 92       	push	r10
    3e5e:	bf 92       	push	r11
    3e60:	cf 92       	push	r12
    3e62:	df 92       	push	r13
    3e64:	ef 92       	push	r14
    3e66:	ff 92       	push	r15
    3e68:	0f 93       	push	r16
    3e6a:	1f 93       	push	r17
    3e6c:	cf 93       	push	r28
    3e6e:	df 93       	push	r29
    3e70:	cd b7       	in	r28, 0x3d	; 61
    3e72:	de b7       	in	r29, 0x3e	; 62
    3e74:	28 97       	sbiw	r28, 0x08	; 8
    3e76:	0f b6       	in	r0, 0x3f	; 63
    3e78:	f8 94       	cli
    3e7a:	de bf       	out	0x3e, r29	; 62
    3e7c:	0f be       	out	0x3f, r0	; 63
    3e7e:	cd bf       	out	0x3d, r28	; 61
    3e80:	8c 01       	movw	r16, r24
    3e82:	49 01       	movw	r8, r18
    3e84:	5a 01       	movw	r10, r20
    3e86:	63 30       	cpi	r22, 0x03	; 3
    3e88:	18 f5       	brcc	.+70     	; 0x3ed0 <set_sequence_step_timeout+0x78>
    3e8a:	ae 01       	movw	r20, r28
    3e8c:	4f 5f       	subi	r20, 0xFF	; 255
    3e8e:	5f 4f       	sbci	r21, 0xFF	; 255
    3e90:	60 e0       	ldi	r22, 0x00	; 0
    3e92:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3e96:	f8 2e       	mov	r15, r24
    3e98:	81 11       	cpse	r24, r1
    3e9a:	a1 c0       	rjmp	.+322    	; 0x3fde <set_sequence_step_timeout+0x186>
    3e9c:	29 81       	ldd	r18, Y+1	; 0x01
    3e9e:	b5 01       	movw	r22, r10
    3ea0:	a4 01       	movw	r20, r8
    3ea2:	c8 01       	movw	r24, r16
    3ea4:	51 de       	rcall	.-862    	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    3ea6:	61 30       	cpi	r22, 0x01	; 1
    3ea8:	21 e0       	ldi	r18, 0x01	; 1
    3eaa:	72 07       	cpc	r23, r18
    3eac:	18 f4       	brcc	.+6      	; 0x3eb4 <set_sequence_step_timeout+0x5c>
    3eae:	4f ef       	ldi	r20, 0xFF	; 255
    3eb0:	46 0f       	add	r20, r22
    3eb2:	01 c0       	rjmp	.+2      	; 0x3eb6 <set_sequence_step_timeout+0x5e>
    3eb4:	4f ef       	ldi	r20, 0xFF	; 255
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	e4 53       	subi	r30, 0x34	; 52
    3eba:	ff 4f       	sbci	r31, 0xFF	; 255
    3ebc:	84 2f       	mov	r24, r20
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	91 83       	std	Z+1, r25	; 0x01
    3ec2:	80 83       	st	Z, r24
    3ec4:	66 e4       	ldi	r22, 0x46	; 70
    3ec6:	c8 01       	movw	r24, r16
    3ec8:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <VL53L0X_WrByte>
    3ecc:	f8 2e       	mov	r15, r24
    3ece:	87 c0       	rjmp	.+270    	; 0x3fde <set_sequence_step_timeout+0x186>
    3ed0:	63 30       	cpi	r22, 0x03	; 3
    3ed2:	41 f5       	brne	.+80     	; 0x3f24 <set_sequence_step_timeout+0xcc>
    3ed4:	ae 01       	movw	r20, r28
    3ed6:	4f 5f       	subi	r20, 0xFF	; 255
    3ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eda:	60 e0       	ldi	r22, 0x00	; 0
    3edc:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3ee0:	f8 2e       	mov	r15, r24
    3ee2:	29 81       	ldd	r18, Y+1	; 0x01
    3ee4:	b5 01       	movw	r22, r10
    3ee6:	a4 01       	movw	r20, r8
    3ee8:	c8 01       	movw	r24, r16
    3eea:	2e de       	rcall	.-932    	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    3eec:	88 27       	eor	r24, r24
    3eee:	99 27       	eor	r25, r25
    3ef0:	fb dd       	rcall	.-1034   	; 0x3ae8 <VL53L0X_encode_timeout>
    3ef2:	9b 83       	std	Y+3, r25	; 0x03
    3ef4:	8a 83       	std	Y+2, r24	; 0x02
    3ef6:	f8 01       	movw	r30, r16
    3ef8:	e4 53       	subi	r30, 0x34	; 52
    3efa:	ff 4f       	sbci	r31, 0xFF	; 255
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	f1 10       	cpse	r15, r1
    3f02:	6d c0       	rjmp	.+218    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f04:	ac 01       	movw	r20, r24
    3f06:	61 e5       	ldi	r22, 0x51	; 81
    3f08:	c8 01       	movw	r24, r16
    3f0a:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <VL53L0X_WrWord>
    3f0e:	f8 2e       	mov	r15, r24
    3f10:	81 11       	cpse	r24, r1
    3f12:	65 c0       	rjmp	.+202    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f14:	f8 01       	movw	r30, r16
    3f16:	ec 52       	subi	r30, 0x2C	; 44
    3f18:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1a:	80 82       	st	Z, r8
    3f1c:	91 82       	std	Z+1, r9	; 0x01
    3f1e:	a2 82       	std	Z+2, r10	; 0x02
    3f20:	b3 82       	std	Z+3, r11	; 0x03
    3f22:	5d c0       	rjmp	.+186    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f24:	64 30       	cpi	r22, 0x04	; 4
    3f26:	09 f0       	breq	.+2      	; 0x3f2a <set_sequence_step_timeout+0xd2>
    3f28:	56 c0       	rjmp	.+172    	; 0x3fd6 <set_sequence_step_timeout+0x17e>
    3f2a:	be 01       	movw	r22, r28
    3f2c:	6c 5f       	subi	r22, 0xFC	; 252
    3f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f30:	0e 94 8f 08 	call	0x111e	; 0x111e <VL53L0X_GetSequenceStepEnables>
    3f34:	8f 81       	ldd	r24, Y+7	; 0x07
    3f36:	88 23       	and	r24, r24
    3f38:	41 f1       	breq	.+80     	; 0x3f8a <set_sequence_step_timeout+0x132>
    3f3a:	ae 01       	movw	r20, r28
    3f3c:	4f 5f       	subi	r20, 0xFF	; 255
    3f3e:	5f 4f       	sbci	r21, 0xFF	; 255
    3f40:	60 e0       	ldi	r22, 0x00	; 0
    3f42:	c8 01       	movw	r24, r16
    3f44:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3f48:	f8 2e       	mov	r15, r24
    3f4a:	81 11       	cpse	r24, r1
    3f4c:	48 c0       	rjmp	.+144    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f4e:	ae 01       	movw	r20, r28
    3f50:	4e 5f       	subi	r20, 0xFE	; 254
    3f52:	5f 4f       	sbci	r21, 0xFF	; 255
    3f54:	61 e5       	ldi	r22, 0x51	; 81
    3f56:	c8 01       	movw	r24, r16
    3f58:	0e 94 33 2c 	call	0x5866	; 0x5866 <VL53L0X_RdWord>
    3f5c:	f8 2e       	mov	r15, r24
    3f5e:	81 11       	cpse	r24, r1
    3f60:	3e c0       	rjmp	.+124    	; 0x3fde <set_sequence_step_timeout+0x186>
    3f62:	8a 81       	ldd	r24, Y+2	; 0x02
    3f64:	9b 81       	ldd	r25, Y+3	; 0x03
    3f66:	6c 01       	movw	r12, r24
    3f68:	dd 24       	eor	r13, r13
    3f6a:	e1 2c       	mov	r14, r1
    3f6c:	f1 2c       	mov	r15, r1
    3f6e:	04 c0       	rjmp	.+8      	; 0x3f78 <set_sequence_step_timeout+0x120>
    3f70:	cc 0c       	add	r12, r12
    3f72:	dd 1c       	adc	r13, r13
    3f74:	ee 1c       	adc	r14, r14
    3f76:	ff 1c       	adc	r15, r15
    3f78:	9a 95       	dec	r25
    3f7a:	d2 f7       	brpl	.-12     	; 0x3f70 <set_sequence_step_timeout+0x118>
    3f7c:	d7 01       	movw	r26, r14
    3f7e:	c6 01       	movw	r24, r12
    3f80:	01 96       	adiw	r24, 0x01	; 1
    3f82:	a1 1d       	adc	r26, r1
    3f84:	b1 1d       	adc	r27, r1
    3f86:	6c 01       	movw	r12, r24
    3f88:	02 c0       	rjmp	.+4      	; 0x3f8e <set_sequence_step_timeout+0x136>
    3f8a:	c1 2c       	mov	r12, r1
    3f8c:	d1 2c       	mov	r13, r1
    3f8e:	ae 01       	movw	r20, r28
    3f90:	4f 5f       	subi	r20, 0xFF	; 255
    3f92:	5f 4f       	sbci	r21, 0xFF	; 255
    3f94:	61 e0       	ldi	r22, 0x01	; 1
    3f96:	c8 01       	movw	r24, r16
    3f98:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <VL53L0X_GetVcselPulsePeriod>
    3f9c:	f8 2e       	mov	r15, r24
    3f9e:	81 11       	cpse	r24, r1
    3fa0:	1e c0       	rjmp	.+60     	; 0x3fde <set_sequence_step_timeout+0x186>
    3fa2:	29 81       	ldd	r18, Y+1	; 0x01
    3fa4:	b5 01       	movw	r22, r10
    3fa6:	a4 01       	movw	r20, r8
    3fa8:	c8 01       	movw	r24, r16
    3faa:	ce dd       	rcall	.-1124   	; 0x3b48 <VL53L0X_calc_timeout_mclks>
    3fac:	6c 0d       	add	r22, r12
    3fae:	7d 1d       	adc	r23, r13
    3fb0:	80 e0       	ldi	r24, 0x00	; 0
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	99 dd       	rcall	.-1230   	; 0x3ae8 <VL53L0X_encode_timeout>
    3fb6:	ac 01       	movw	r20, r24
    3fb8:	61 e7       	ldi	r22, 0x71	; 113
    3fba:	c8 01       	movw	r24, r16
    3fbc:	0e 94 f0 2b 	call	0x57e0	; 0x57e0 <VL53L0X_WrWord>
    3fc0:	f8 2e       	mov	r15, r24
    3fc2:	81 11       	cpse	r24, r1
    3fc4:	0c c0       	rjmp	.+24     	; 0x3fde <set_sequence_step_timeout+0x186>
    3fc6:	f8 01       	movw	r30, r16
    3fc8:	e1 53       	subi	r30, 0x31	; 49
    3fca:	ff 4f       	sbci	r31, 0xFF	; 255
    3fcc:	80 82       	st	Z, r8
    3fce:	91 82       	std	Z+1, r9	; 0x01
    3fd0:	a2 82       	std	Z+2, r10	; 0x02
    3fd2:	b3 82       	std	Z+3, r11	; 0x03
    3fd4:	04 c0       	rjmp	.+8      	; 0x3fde <set_sequence_step_timeout+0x186>
    3fd6:	0f 2e       	mov	r0, r31
    3fd8:	fc ef       	ldi	r31, 0xFC	; 252
    3fda:	ff 2e       	mov	r15, r31
    3fdc:	f0 2d       	mov	r31, r0
    3fde:	8f 2d       	mov	r24, r15
    3fe0:	28 96       	adiw	r28, 0x08	; 8
    3fe2:	0f b6       	in	r0, 0x3f	; 63
    3fe4:	f8 94       	cli
    3fe6:	de bf       	out	0x3e, r29	; 62
    3fe8:	0f be       	out	0x3f, r0	; 63
    3fea:	cd bf       	out	0x3d, r28	; 61
    3fec:	df 91       	pop	r29
    3fee:	cf 91       	pop	r28
    3ff0:	1f 91       	pop	r17
    3ff2:	0f 91       	pop	r16
    3ff4:	ff 90       	pop	r15
    3ff6:	ef 90       	pop	r14
    3ff8:	df 90       	pop	r13
    3ffa:	cf 90       	pop	r12
    3ffc:	bf 90       	pop	r11
    3ffe:	af 90       	pop	r10
    4000:	9f 90       	pop	r9
    4002:	8f 90       	pop	r8
    4004:	08 95       	ret

00004006 <VL53L0X_get_vcsel_pulse_period>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
    42b8:	0f 93       	push	r16
    42ba:	1f 93       	push	r17
    42bc:	cf 93       	push	r28
    42be:	df 93       	push	r29
    42c0:	1f 92       	push	r1
    42c2:	cd b7       	in	r28, 0x3d	; 61
    42c4:	de b7       	in	r29, 0x3e	; 62
    42c6:	8a 01       	movw	r16, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
    42c8:	66 23       	and	r22, r22
    42ca:	19 f0       	breq	.+6      	; 0x42d2 <VL53L0X_get_vcsel_pulse_period+0x1a>
    42cc:	61 30       	cpi	r22, 0x01	; 1
    42ce:	41 f0       	breq	.+16     	; 0x42e0 <VL53L0X_get_vcsel_pulse_period+0x28>
    42d0:	0e c0       	rjmp	.+28     	; 0x42ee <VL53L0X_get_vcsel_pulse_period+0x36>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
<<<<<<< HEAD
    42d2:	ae 01       	movw	r20, r28
    42d4:	4f 5f       	subi	r20, 0xFF	; 255
    42d6:	5f 4f       	sbci	r21, 0xFF	; 255
    42d8:	60 e5       	ldi	r22, 0x50	; 80
    42da:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
=======
    4020:	ae 01       	movw	r20, r28
    4022:	4f 5f       	subi	r20, 0xFF	; 255
    4024:	5f 4f       	sbci	r21, 0xFF	; 255
    4026:	60 e5       	ldi	r22, 0x50	; 80
    4028:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    42de:	08 c0       	rjmp	.+16     	; 0x42f0 <VL53L0X_get_vcsel_pulse_period+0x38>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
<<<<<<< HEAD
    42e0:	ae 01       	movw	r20, r28
    42e2:	4f 5f       	subi	r20, 0xFF	; 255
    42e4:	5f 4f       	sbci	r21, 0xFF	; 255
    42e6:	60 e7       	ldi	r22, 0x70	; 112
    42e8:	0e 94 41 2d 	call	0x5a82	; 0x5a82 <VL53L0X_RdByte>
=======
    402e:	ae 01       	movw	r20, r28
    4030:	4f 5f       	subi	r20, 0xFF	; 255
    4032:	5f 4f       	sbci	r21, 0xFF	; 255
    4034:	60 e7       	ldi	r22, 0x70	; 112
    4036:	0e 94 28 2c 	call	0x5850	; 0x5850 <VL53L0X_RdByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    42ec:	01 c0       	rjmp	.+2      	; 0x42f0 <VL53L0X_get_vcsel_pulse_period+0x38>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
    42ee:	8c ef       	ldi	r24, 0xFC	; 252
	}

	if (Status == VL53L0X_ERROR_NONE)
    42f0:	81 11       	cpse	r24, r1
    42f2:	05 c0       	rjmp	.+10     	; 0x42fe <VL53L0X_get_vcsel_pulse_period+0x46>
		*pVCSELPulsePeriodPCLK =
    42f4:	99 81       	ldd	r25, Y+1	; 0x01
    42f6:	9f 5f       	subi	r25, 0xFF	; 255
    42f8:	99 0f       	add	r25, r25
    42fa:	f8 01       	movw	r30, r16
    42fc:	90 83       	st	Z, r25
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
    42fe:	0f 90       	pop	r0
    4300:	df 91       	pop	r29
    4302:	cf 91       	pop	r28
    4304:	1f 91       	pop	r17
    4306:	0f 91       	pop	r16
    4308:	08 95       	ret

0000430a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
    430a:	8f 92       	push	r8
    430c:	9f 92       	push	r9
    430e:	af 92       	push	r10
    4310:	bf 92       	push	r11
    4312:	cf 92       	push	r12
    4314:	df 92       	push	r13
    4316:	ef 92       	push	r14
    4318:	ff 92       	push	r15
    431a:	0f 93       	push	r16
    431c:	1f 93       	push	r17
    431e:	cf 93       	push	r28
    4320:	df 93       	push	r29
    4322:	cd b7       	in	r28, 0x3d	; 61
    4324:	de b7       	in	r29, 0x3e	; 62
    4326:	2d 97       	sbiw	r28, 0x0d	; 13
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	f8 94       	cli
    432c:	de bf       	out	0x3e, r29	; 62
    432e:	0f be       	out	0x3f, r0	; 63
    4330:	cd bf       	out	0x3d, r28	; 61
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
    4332:	0f 2e       	mov	r0, r31
    4334:	f0 ed       	ldi	r31, 0xD0	; 208
    4336:	cf 2e       	mov	r12, r31
    4338:	f7 e0       	ldi	r31, 0x07	; 7
    433a:	df 2e       	mov	r13, r31
    433c:	e1 2c       	mov	r14, r1
    433e:	f1 2c       	mov	r15, r1
    4340:	f0 2d       	mov	r31, r0
    4342:	ce 82       	std	Y+6, r12	; 0x06
    4344:	df 82       	std	Y+7, r13	; 0x07
    4346:	e8 86       	std	Y+8, r14	; 0x08
    4348:	f9 86       	std	Y+9, r15	; 0x09
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
    434a:	1a 86       	std	Y+10, r1	; 0x0a
    434c:	1b 86       	std	Y+11, r1	; 0x0b
    434e:	1c 86       	std	Y+12, r1	; 0x0c
    4350:	1d 86       	std	Y+13, r1	; 0x0d
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
	uint32_t SubTimeout = 0;

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
    4352:	40 32       	cpi	r20, 0x20	; 32
    4354:	2e e4       	ldi	r18, 0x4E	; 78
    4356:	52 07       	cpc	r21, r18
    4358:	61 05       	cpc	r22, r1
    435a:	71 05       	cpc	r23, r1
    435c:	08 f4       	brcc	.+2      	; 0x4360 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x56>
    435e:	94 c0       	rjmp	.+296    	; 0x4488 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x17e>
    4360:	6a 01       	movw	r12, r20
    4362:	7b 01       	movw	r14, r22
    4364:	8c 01       	movw	r16, r24

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    4366:	be 01       	movw	r22, r28
    4368:	6f 5f       	subi	r22, 0xFF	; 255
    436a:	7f 4f       	sbci	r23, 0xFF	; 255
    436c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X_GetSequenceStepEnables>

	if (Status == VL53L0X_ERROR_NONE &&
    4370:	81 11       	cpse	r24, r1
    4372:	9d c0       	rjmp	.+314    	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
	}

	FinalRangeTimingBudgetMicroSeconds =
    4374:	46 01       	movw	r8, r12
    4376:	57 01       	movw	r10, r14
    4378:	88 ee       	ldi	r24, 0xE8	; 232
    437a:	88 1a       	sub	r8, r24
    437c:	88 e0       	ldi	r24, 0x08	; 8
    437e:	98 0a       	sbc	r9, r24
    4380:	a1 08       	sbc	r10, r1
    4382:	b1 08       	sbc	r11, r1
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);

	if (Status == VL53L0X_ERROR_NONE &&
    4384:	89 81       	ldd	r24, Y+1	; 0x01
    4386:	81 11       	cpse	r24, r1
    4388:	07 c0       	rjmp	.+14     	; 0x4398 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		(SchedulerSequenceSteps.TccOn  ||
    438a:	8a 81       	ldd	r24, Y+2	; 0x02
    438c:	81 11       	cpse	r24, r1
    438e:	04 c0       	rjmp	.+8      	; 0x4398 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		SchedulerSequenceSteps.MsrcOn ||
    4390:	8b 81       	ldd	r24, Y+3	; 0x03
    4392:	88 23       	and	r24, r24
    4394:	09 f4       	brne	.+2      	; 0x4398 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
    4396:	84 c0       	rjmp	.+264    	; 0x44a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
		SchedulerSequenceSteps.DssOn)) {

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
    4398:	ae 01       	movw	r20, r28
    439a:	4a 5f       	subi	r20, 0xFA	; 250
    439c:	5f 4f       	sbci	r21, 0xFF	; 255
    439e:	62 e0       	ldi	r22, 0x02	; 2
    43a0:	c8 01       	movw	r24, r16
    43a2:	c1 dd       	rcall	.-1150   	; 0x3f26 <get_sequence_step_timeout>
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
    43a4:	81 11       	cpse	r24, r1
    43a6:	83 c0       	rjmp	.+262    	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			return Status;

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
    43a8:	89 81       	ldd	r24, Y+1	; 0x01
    43aa:	88 23       	and	r24, r24
    43ac:	09 f4       	brne	.+2      	; 0x43b0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa6>
    43ae:	74 c0       	rjmp	.+232    	; 0x4498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18e>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
    43b0:	8e 81       	ldd	r24, Y+6	; 0x06
    43b2:	9f 81       	ldd	r25, Y+7	; 0x07
    43b4:	a8 85       	ldd	r26, Y+8	; 0x08
    43b6:	b9 85       	ldd	r27, Y+9	; 0x09
    43b8:	82 5b       	subi	r24, 0xB2	; 178
    43ba:	9d 4f       	sbci	r25, 0xFD	; 253
    43bc:	af 4f       	sbci	r26, 0xFF	; 255
    43be:	bf 4f       	sbci	r27, 0xFF	; 255
				+ TccOverheadMicroSeconds;

			if (SubTimeout <
    43c0:	88 15       	cp	r24, r8
    43c2:	99 05       	cpc	r25, r9
    43c4:	aa 05       	cpc	r26, r10
    43c6:	bb 05       	cpc	r27, r11
    43c8:	08 f0       	brcs	.+2      	; 0x43cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
    43ca:	60 c0       	rjmp	.+192    	; 0x448c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
    43cc:	88 1a       	sub	r8, r24
    43ce:	99 0a       	sbc	r9, r25
    43d0:	aa 0a       	sbc	r10, r26
    43d2:	bb 0a       	sbc	r11, r27
    43d4:	61 c0       	rjmp	.+194    	; 0x4498 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
    43d6:	8e 81       	ldd	r24, Y+6	; 0x06
    43d8:	9f 81       	ldd	r25, Y+7	; 0x07
    43da:	a8 85       	ldd	r26, Y+8	; 0x08
    43dc:	b9 85       	ldd	r27, Y+9	; 0x09
    43de:	8e 54       	subi	r24, 0x4E	; 78
    43e0:	9d 4f       	sbci	r25, 0xFD	; 253
    43e2:	af 4f       	sbci	r26, 0xFF	; 255
    43e4:	bf 4f       	sbci	r27, 0xFF	; 255
    43e6:	88 0f       	add	r24, r24
    43e8:	99 1f       	adc	r25, r25
    43ea:	aa 1f       	adc	r26, r26
    43ec:	bb 1f       	adc	r27, r27
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    43ee:	88 15       	cp	r24, r8
    43f0:	99 05       	cpc	r25, r9
    43f2:	aa 05       	cpc	r26, r10
    43f4:	bb 05       	cpc	r27, r11
    43f6:	08 f0       	brcs	.+2      	; 0x43fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
    43f8:	57 c0       	rjmp	.+174    	; 0x44a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    43fa:	88 1a       	sub	r8, r24
    43fc:	99 0a       	sbc	r9, r25
    43fe:	aa 0a       	sbc	r10, r26
    4400:	bb 0a       	sbc	r11, r27
    4402:	4e c0       	rjmp	.+156    	; 0x44a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
    4404:	8a 81       	ldd	r24, Y+2	; 0x02
    4406:	88 23       	and	r24, r24
    4408:	09 f4       	brne	.+2      	; 0x440c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
    440a:	4a c0       	rjmp	.+148    	; 0x44a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
    440c:	8e 81       	ldd	r24, Y+6	; 0x06
    440e:	9f 81       	ldd	r25, Y+7	; 0x07
    4410:	a8 85       	ldd	r26, Y+8	; 0x08
    4412:	b9 85       	ldd	r27, Y+9	; 0x09
    4414:	8c 56       	subi	r24, 0x6C	; 108
    4416:	9d 4f       	sbci	r25, 0xFD	; 253
    4418:	af 4f       	sbci	r26, 0xFF	; 255
    441a:	bf 4f       	sbci	r27, 0xFF	; 255
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    441c:	88 15       	cp	r24, r8
    441e:	99 05       	cpc	r25, r9
    4420:	aa 05       	cpc	r26, r10
    4422:	bb 05       	cpc	r27, r11
    4424:	08 f0       	brcs	.+2      	; 0x4428 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11e>
    4426:	42 c0       	rjmp	.+132    	; 0x44ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a2>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    4428:	88 1a       	sub	r8, r24
    442a:	99 0a       	sbc	r9, r25
    442c:	aa 0a       	sbc	r10, r26
    442e:	bb 0a       	sbc	r11, r27
    4430:	37 c0       	rjmp	.+110    	; 0x44a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>

	if (SchedulerSequenceSteps.PreRangeOn) {

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
    4432:	ae 01       	movw	r20, r28
    4434:	46 5f       	subi	r20, 0xF6	; 246
    4436:	5f 4f       	sbci	r21, 0xFF	; 255
    4438:	63 e0       	ldi	r22, 0x03	; 3
    443a:	c8 01       	movw	r24, r16
    443c:	74 dd       	rcall	.-1304   	; 0x3f26 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
    443e:	4a 85       	ldd	r20, Y+10	; 0x0a
    4440:	5b 85       	ldd	r21, Y+11	; 0x0b
    4442:	6c 85       	ldd	r22, Y+12	; 0x0c
    4444:	7d 85       	ldd	r23, Y+13	; 0x0d
    4446:	4c 56       	subi	r20, 0x6C	; 108
    4448:	5d 4f       	sbci	r21, 0xFD	; 253
    444a:	6f 4f       	sbci	r22, 0xFF	; 255
    444c:	7f 4f       	sbci	r23, 0xFF	; 255
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    444e:	48 15       	cp	r20, r8
    4450:	59 05       	cpc	r21, r9
    4452:	6a 05       	cpc	r22, r10
    4454:	7b 05       	cpc	r23, r11
    4456:	e0 f4       	brcc	.+56     	; 0x4490 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    4458:	81 11       	cpse	r24, r1
    445a:	29 c0       	rjmp	.+82     	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>

		SubTimeout = PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
    445c:	84 1a       	sub	r8, r20
    445e:	95 0a       	sbc	r9, r21
    4460:	a6 0a       	sbc	r10, r22
    4462:	b7 0a       	sbc	r11, r23
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    4464:	8d 81       	ldd	r24, Y+5	; 0x05
    4466:	88 23       	and	r24, r24
    4468:	a9 f0       	breq	.+42     	; 0x4494 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18a>
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
    446a:	a5 01       	movw	r20, r10
    446c:	94 01       	movw	r18, r8
    446e:	26 52       	subi	r18, 0x26	; 38
    4470:	32 40       	sbci	r19, 0x02	; 2
    4472:	41 09       	sbc	r20, r1
    4474:	51 09       	sbc	r21, r1
    4476:	64 e0       	ldi	r22, 0x04	; 4
    4478:	c8 01       	movw	r24, r16
    447a:	47 de       	rcall	.-882    	; 0x410a <set_sequence_step_timeout>
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
    447c:	f8 01       	movw	r30, r16
    447e:	c2 8a       	std	Z+18, r12	; 0x12
    4480:	d3 8a       	std	Z+19, r13	; 0x13
    4482:	e4 8a       	std	Z+20, r14	; 0x14
    4484:	f5 8a       	std	Z+21, r15	; 0x15
    4486:	13 c0       	rjmp	.+38     	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
    4488:	8c ef       	ldi	r24, 0xFC	; 252
    448a:	11 c0       	rjmp	.+34     	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    448c:	8c ef       	ldi	r24, 0xFC	; 252
    448e:	0f c0       	rjmp	.+30     	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    4490:	8c ef       	ldi	r24, 0xFC	; 252
    4492:	0d c0       	rjmp	.+26     	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	0b c0       	rjmp	.+22     	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			LOG_FUNCTION_END(Status);
			return Status;
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
    4498:	8b 81       	ldd	r24, Y+3	; 0x03
    449a:	81 11       	cpse	r24, r1
    449c:	9c cf       	rjmp	.-200    	; 0x43d6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
    449e:	b2 cf       	rjmp	.-156    	; 0x4404 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfa>
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
    44a0:	8c 81       	ldd	r24, Y+4	; 0x04
    44a2:	88 23       	and	r24, r24
    44a4:	f9 f2       	breq	.-66     	; 0x4464 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15a>
    44a6:	c5 cf       	rjmp	.-118    	; 0x4432 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x128>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    44a8:	8c ef       	ldi	r24, 0xFC	; 252
    44aa:	01 c0       	rjmp	.+2      	; 0x44ae <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    44ac:	8c ef       	ldi	r24, 0xFC	; 252
	}

	LOG_FUNCTION_END(Status);

	return Status;
}
    44ae:	2d 96       	adiw	r28, 0x0d	; 13
    44b0:	0f b6       	in	r0, 0x3f	; 63
    44b2:	f8 94       	cli
    44b4:	de bf       	out	0x3e, r29	; 62
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	cd bf       	out	0x3d, r28	; 61
    44ba:	df 91       	pop	r29
    44bc:	cf 91       	pop	r28
    44be:	1f 91       	pop	r17
    44c0:	0f 91       	pop	r16
    44c2:	ff 90       	pop	r15
    44c4:	ef 90       	pop	r14
    44c6:	df 90       	pop	r13
    44c8:	cf 90       	pop	r12
    44ca:	bf 90       	pop	r11
    44cc:	af 90       	pop	r10
    44ce:	9f 90       	pop	r9
    44d0:	8f 90       	pop	r8
    44d2:	08 95       	ret

000044d4 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
    44d4:	8f 92       	push	r8
    44d6:	9f 92       	push	r9
    44d8:	af 92       	push	r10
    44da:	bf 92       	push	r11
    44dc:	cf 92       	push	r12
    44de:	df 92       	push	r13
    44e0:	ff 92       	push	r15
    44e2:	0f 93       	push	r16
    44e4:	1f 93       	push	r17
    44e6:	cf 93       	push	r28
    44e8:	df 93       	push	r29
    44ea:	cd b7       	in	r28, 0x3d	; 61
    44ec:	de b7       	in	r29, 0x3e	; 62
    44ee:	61 97       	sbiw	r28, 0x11	; 17
    44f0:	0f b6       	in	r0, 0x3f	; 63
    44f2:	f8 94       	cli
    44f4:	de bf       	out	0x3e, r29	; 62
    44f6:	0f be       	out	0x3f, r0	; 63
    44f8:	cd bf       	out	0x3d, r28	; 61
    44fa:	6c 01       	movw	r12, r24
    44fc:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
    44fe:	80 ed       	ldi	r24, 0xD0	; 208
    4500:	97 e0       	ldi	r25, 0x07	; 7
    4502:	a0 e0       	ldi	r26, 0x00	; 0
    4504:	b0 e0       	ldi	r27, 0x00	; 0
    4506:	8a 87       	std	Y+10, r24	; 0x0a
    4508:	9b 87       	std	Y+11, r25	; 0x0b
    450a:	ac 87       	std	Y+12, r26	; 0x0c
    450c:	bd 87       	std	Y+13, r27	; 0x0d
	uint32_t MsrcOverheadMicroSeconds		= 660;
	uint32_t TccOverheadMicroSeconds		= 590;
	uint32_t DssOverheadMicroSeconds		= 690;
	uint32_t PreRangeOverheadMicroSeconds	= 660;
	uint32_t FinalRangeOverheadMicroSeconds = 550;
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
    450e:	1e 86       	std	Y+14, r1	; 0x0e
    4510:	1f 86       	std	Y+15, r1	; 0x0f
    4512:	18 8a       	std	Y+16, r1	; 0x10
    4514:	19 8a       	std	Y+17, r1	; 0x11

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
    4516:	86 e3       	ldi	r24, 0x36	; 54
    4518:	9b e0       	ldi	r25, 0x0B	; 11
    451a:	a0 e0       	ldi	r26, 0x00	; 0
    451c:	b0 e0       	ldi	r27, 0x00	; 0
    451e:	fb 01       	movw	r30, r22
    4520:	80 83       	st	Z, r24
    4522:	91 83       	std	Z+1, r25	; 0x01
    4524:	a2 83       	std	Z+2, r26	; 0x02
    4526:	b3 83       	std	Z+3, r27	; 0x03

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    4528:	be 01       	movw	r22, r28
    452a:	6f 5f       	subi	r22, 0xFF	; 255
    452c:	7f 4f       	sbci	r23, 0xFF	; 255
    452e:	c6 01       	movw	r24, r12
    4530:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <VL53L0X_GetSequenceStepEnables>
    4534:	f8 2e       	mov	r15, r24

	if (Status != VL53L0X_ERROR_NONE) {
    4536:	81 11       	cpse	r24, r1
    4538:	b3 c0       	rjmp	.+358    	; 0x46a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		LOG_FUNCTION_END(Status);
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
    453a:	89 81       	ldd	r24, Y+1	; 0x01
    453c:	81 11       	cpse	r24, r1
    453e:	07 c0       	rjmp	.+14     	; 0x454e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    4540:	8a 81       	ldd	r24, Y+2	; 0x02
    4542:	81 11       	cpse	r24, r1
    4544:	04 c0       	rjmp	.+8      	; 0x454e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
		SchedulerSequenceSteps.MsrcOn ||
    4546:	8b 81       	ldd	r24, Y+3	; 0x03
    4548:	88 23       	and	r24, r24
    454a:	09 f4       	brne	.+2      	; 0x454e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    454c:	a5 c0       	rjmp	.+330    	; 0x4698 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    454e:	ae 01       	movw	r20, r28
    4550:	46 5f       	subi	r20, 0xF6	; 246
    4552:	5f 4f       	sbci	r21, 0xFF	; 255
    4554:	62 e0       	ldi	r22, 0x02	; 2
    4556:	c6 01       	movw	r24, r12
    4558:	e6 dc       	rcall	.-1588   	; 0x3f26 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
    455a:	81 11       	cpse	r24, r1
    455c:	97 c0       	rjmp	.+302    	; 0x468c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1b8>
			if (SchedulerSequenceSteps.TccOn) {
    455e:	89 81       	ldd	r24, Y+1	; 0x01
    4560:	88 23       	and	r24, r24
    4562:	a9 f0       	breq	.+42     	; 0x458e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xba>
				*pMeasurementTimingBudgetMicroSeconds +=
    4564:	8a 85       	ldd	r24, Y+10	; 0x0a
    4566:	9b 85       	ldd	r25, Y+11	; 0x0b
    4568:	ac 85       	ldd	r26, Y+12	; 0x0c
    456a:	bd 85       	ldd	r27, Y+13	; 0x0d
    456c:	82 5b       	subi	r24, 0xB2	; 178
    456e:	9d 4f       	sbci	r25, 0xFD	; 253
    4570:	af 4f       	sbci	r26, 0xFF	; 255
    4572:	bf 4f       	sbci	r27, 0xFF	; 255
    4574:	f8 01       	movw	r30, r16
    4576:	40 81       	ld	r20, Z
    4578:	51 81       	ldd	r21, Z+1	; 0x01
    457a:	62 81       	ldd	r22, Z+2	; 0x02
    457c:	73 81       	ldd	r23, Z+3	; 0x03
    457e:	84 0f       	add	r24, r20
    4580:	95 1f       	adc	r25, r21
    4582:	a6 1f       	adc	r26, r22
    4584:	b7 1f       	adc	r27, r23
    4586:	80 83       	st	Z, r24
    4588:	91 83       	std	Z+1, r25	; 0x01
    458a:	a2 83       	std	Z+2, r26	; 0x02
    458c:	b3 83       	std	Z+3, r27	; 0x03
					MsrcDccTccTimeoutMicroSeconds +
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
    458e:	8b 81       	ldd	r24, Y+3	; 0x03
    4590:	88 23       	and	r24, r24
    4592:	d1 f0       	breq	.+52     	; 0x45c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf4>
				*pMeasurementTimingBudgetMicroSeconds +=
    4594:	8a 85       	ldd	r24, Y+10	; 0x0a
    4596:	9b 85       	ldd	r25, Y+11	; 0x0b
    4598:	ac 85       	ldd	r26, Y+12	; 0x0c
    459a:	bd 85       	ldd	r27, Y+13	; 0x0d
    459c:	8e 54       	subi	r24, 0x4E	; 78
    459e:	9d 4f       	sbci	r25, 0xFD	; 253
    45a0:	af 4f       	sbci	r26, 0xFF	; 255
    45a2:	bf 4f       	sbci	r27, 0xFF	; 255
    45a4:	88 0f       	add	r24, r24
    45a6:	99 1f       	adc	r25, r25
    45a8:	aa 1f       	adc	r26, r26
    45aa:	bb 1f       	adc	r27, r27
    45ac:	f8 01       	movw	r30, r16
    45ae:	40 81       	ld	r20, Z
    45b0:	51 81       	ldd	r21, Z+1	; 0x01
    45b2:	62 81       	ldd	r22, Z+2	; 0x02
    45b4:	73 81       	ldd	r23, Z+3	; 0x03
    45b6:	84 0f       	add	r24, r20
    45b8:	95 1f       	adc	r25, r21
    45ba:	a6 1f       	adc	r26, r22
    45bc:	b7 1f       	adc	r27, r23
    45be:	80 83       	st	Z, r24
    45c0:	91 83       	std	Z+1, r25	; 0x01
    45c2:	a2 83       	std	Z+2, r26	; 0x02
    45c4:	b3 83       	std	Z+3, r27	; 0x03
    45c6:	68 c0       	rjmp	.+208    	; 0x4698 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				2 * (MsrcDccTccTimeoutMicroSeconds +
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
    45c8:	8a 81       	ldd	r24, Y+2	; 0x02
    45ca:	88 23       	and	r24, r24
    45cc:	09 f4       	brne	.+2      	; 0x45d0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
    45ce:	64 c0       	rjmp	.+200    	; 0x4698 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				*pMeasurementTimingBudgetMicroSeconds +=
    45d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    45d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    45d4:	ac 85       	ldd	r26, Y+12	; 0x0c
    45d6:	bd 85       	ldd	r27, Y+13	; 0x0d
    45d8:	8c 56       	subi	r24, 0x6C	; 108
    45da:	9d 4f       	sbci	r25, 0xFD	; 253
    45dc:	af 4f       	sbci	r26, 0xFF	; 255
    45de:	bf 4f       	sbci	r27, 0xFF	; 255
    45e0:	f8 01       	movw	r30, r16
    45e2:	40 81       	ld	r20, Z
    45e4:	51 81       	ldd	r21, Z+1	; 0x01
    45e6:	62 81       	ldd	r22, Z+2	; 0x02
    45e8:	73 81       	ldd	r23, Z+3	; 0x03
    45ea:	84 0f       	add	r24, r20
    45ec:	95 1f       	adc	r25, r21
    45ee:	a6 1f       	adc	r26, r22
    45f0:	b7 1f       	adc	r27, r23
    45f2:	80 83       	st	Z, r24
    45f4:	91 83       	std	Z+1, r25	; 0x01
    45f6:	a2 83       	std	Z+2, r26	; 0x02
    45f8:	b3 83       	std	Z+3, r27	; 0x03
    45fa:	4e c0       	rjmp	.+156    	; 0x4698 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    45fc:	ae 01       	movw	r20, r28
    45fe:	42 5f       	subi	r20, 0xF2	; 242
    4600:	5f 4f       	sbci	r21, 0xFF	; 255
    4602:	63 e0       	ldi	r22, 0x03	; 3
    4604:	c6 01       	movw	r24, r12
    4606:	8f dc       	rcall	.-1762   	; 0x3f26 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    4608:	4e 85       	ldd	r20, Y+14	; 0x0e
    460a:	5f 85       	ldd	r21, Y+15	; 0x0f
    460c:	68 89       	ldd	r22, Y+16	; 0x10
    460e:	79 89       	ldd	r23, Y+17	; 0x11
    4610:	4c 56       	subi	r20, 0x6C	; 108
    4612:	5d 4f       	sbci	r21, 0xFD	; 253
    4614:	6f 4f       	sbci	r22, 0xFF	; 255
    4616:	7f 4f       	sbci	r23, 0xFF	; 255
    4618:	f8 01       	movw	r30, r16
    461a:	80 80       	ld	r8, Z
    461c:	91 80       	ldd	r9, Z+1	; 0x01
    461e:	a2 80       	ldd	r10, Z+2	; 0x02
    4620:	b3 80       	ldd	r11, Z+3	; 0x03
    4622:	48 0d       	add	r20, r8
    4624:	59 1d       	adc	r21, r9
    4626:	6a 1d       	adc	r22, r10
    4628:	7b 1d       	adc	r23, r11
    462a:	40 83       	st	Z, r20
    462c:	51 83       	std	Z+1, r21	; 0x01
    462e:	62 83       	std	Z+2, r22	; 0x02
    4630:	73 83       	std	Z+3, r23	; 0x03
				PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    4632:	81 11       	cpse	r24, r1
    4634:	2d c0       	rjmp	.+90     	; 0x4690 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1bc>
		if (SchedulerSequenceSteps.FinalRangeOn) {
    4636:	8d 81       	ldd	r24, Y+5	; 0x05
    4638:	88 23       	and	r24, r24
    463a:	e9 f0       	breq	.+58     	; 0x4676 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a2>
			Status = get_sequence_step_timeout(Dev,
    463c:	ae 01       	movw	r20, r28
    463e:	4a 5f       	subi	r20, 0xFA	; 250
    4640:	5f 4f       	sbci	r21, 0xFF	; 255
    4642:	64 e0       	ldi	r22, 0x04	; 4
    4644:	c6 01       	movw	r24, r12
    4646:	6f dc       	rcall	.-1826   	; 0x3f26 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    4648:	4e 81       	ldd	r20, Y+6	; 0x06
    464a:	5f 81       	ldd	r21, Y+7	; 0x07
    464c:	68 85       	ldd	r22, Y+8	; 0x08
    464e:	79 85       	ldd	r23, Y+9	; 0x09
    4650:	4a 5d       	subi	r20, 0xDA	; 218
    4652:	5d 4f       	sbci	r21, 0xFD	; 253
    4654:	6f 4f       	sbci	r22, 0xFF	; 255
    4656:	7f 4f       	sbci	r23, 0xFF	; 255
    4658:	f8 01       	movw	r30, r16
    465a:	80 80       	ld	r8, Z
    465c:	91 80       	ldd	r9, Z+1	; 0x01
    465e:	a2 80       	ldd	r10, Z+2	; 0x02
    4660:	b3 80       	ldd	r11, Z+3	; 0x03
    4662:	48 0d       	add	r20, r8
    4664:	59 1d       	adc	r21, r9
    4666:	6a 1d       	adc	r22, r10
    4668:	7b 1d       	adc	r23, r11
    466a:	40 83       	st	Z, r20
    466c:	51 83       	std	Z+1, r21	; 0x01
    466e:	62 83       	std	Z+2, r22	; 0x02
    4670:	73 83       	std	Z+3, r23	; 0x03
				(FinalRangeTimeoutMicroSeconds +
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    4672:	81 11       	cpse	r24, r1
    4674:	0f c0       	rjmp	.+30     	; 0x4694 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c0>
		VL53L0X_SETPARAMETERFIELD(Dev,
    4676:	f8 01       	movw	r30, r16
    4678:	80 81       	ld	r24, Z
    467a:	91 81       	ldd	r25, Z+1	; 0x01
    467c:	a2 81       	ldd	r26, Z+2	; 0x02
    467e:	b3 81       	ldd	r27, Z+3	; 0x03
    4680:	f6 01       	movw	r30, r12
    4682:	82 8b       	std	Z+18, r24	; 0x12
    4684:	93 8b       	std	Z+19, r25	; 0x13
    4686:	a4 8b       	std	Z+20, r26	; 0x14
    4688:	b5 8b       	std	Z+21, r27	; 0x15
    468a:	0a c0       	rjmp	.+20     	; 0x46a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>

	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    468c:	f8 2e       	mov	r15, r24
    468e:	08 c0       	rjmp	.+16     	; 0x46a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    4690:	f8 2e       	mov	r15, r24
    4692:	06 c0       	rjmp	.+12     	; 0x46a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    4694:	f8 2e       	mov	r15, r24
    4696:	04 c0       	rjmp	.+8      	; 0x46a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
    4698:	8c 81       	ldd	r24, Y+4	; 0x04
    469a:	88 23       	and	r24, r24
    469c:	61 f2       	breq	.-104    	; 0x4636 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x162>
    469e:	ae cf       	rjmp	.-164    	; 0x45fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    46a0:	8f 2d       	mov	r24, r15
    46a2:	61 96       	adiw	r28, 0x11	; 17
    46a4:	0f b6       	in	r0, 0x3f	; 63
    46a6:	f8 94       	cli
    46a8:	de bf       	out	0x3e, r29	; 62
    46aa:	0f be       	out	0x3f, r0	; 63
    46ac:	cd bf       	out	0x3d, r28	; 61
    46ae:	df 91       	pop	r29
    46b0:	cf 91       	pop	r28
    46b2:	1f 91       	pop	r17
    46b4:	0f 91       	pop	r16
    46b6:	ff 90       	pop	r15
    46b8:	df 90       	pop	r13
    46ba:	cf 90       	pop	r12
    46bc:	bf 90       	pop	r11
    46be:	af 90       	pop	r10
    46c0:	9f 90       	pop	r9
    46c2:	8f 90       	pop	r8
    46c4:	08 95       	ret

000046c6 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
    46c6:	2f 92       	push	r2
    46c8:	3f 92       	push	r3
    46ca:	4f 92       	push	r4
    46cc:	5f 92       	push	r5
    46ce:	6f 92       	push	r6
    46d0:	7f 92       	push	r7
    46d2:	8f 92       	push	r8
    46d4:	9f 92       	push	r9
    46d6:	af 92       	push	r10
    46d8:	bf 92       	push	r11
    46da:	cf 92       	push	r12
    46dc:	df 92       	push	r13
    46de:	ef 92       	push	r14
    46e0:	ff 92       	push	r15
    46e2:	0f 93       	push	r16
    46e4:	1f 93       	push	r17
    46e6:	cf 93       	push	r28
    46e8:	df 93       	push	r29
    46ea:	00 d0       	rcall	.+0      	; 0x46ec <VL53L0X_load_tuning_settings+0x26>
    46ec:	00 d0       	rcall	.+0      	; 0x46ee <VL53L0X_load_tuning_settings+0x28>
    46ee:	cd b7       	in	r28, 0x3d	; 61
    46f0:	de b7       	in	r29, 0x3e	; 62
    46f2:	5c 01       	movw	r10, r24
    46f4:	6b 01       	movw	r12, r22
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
    46f6:	e1 2c       	mov	r14, r1
    46f8:	f1 2c       	mov	r15, r1


VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    46fa:	80 e0       	ldi	r24, 0x00	; 0
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    46fc:	35 01       	movw	r6, r10
    46fe:	2d ed       	ldi	r18, 0xDD	; 221
    4700:	62 1a       	sub	r6, r18
    4702:	2e ef       	ldi	r18, 0xFE	; 254
    4704:	72 0a       	sbc	r7, r18
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    4706:	45 01       	movw	r8, r10
    4708:	9f ed       	ldi	r25, 0xDF	; 223
    470a:	89 1a       	sub	r8, r25
    470c:	9e ef       	ldi	r25, 0xFE	; 254
    470e:	99 0a       	sbc	r9, r25
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    4710:	25 01       	movw	r4, r10
    4712:	eb ed       	ldi	r30, 0xDB	; 219
    4714:	4e 1a       	sub	r4, r30
    4716:	ee ef       	ldi	r30, 0xFE	; 254
    4718:	5e 0a       	sbc	r5, r30
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    471a:	15 01       	movw	r2, r10
    471c:	f8 ed       	ldi	r31, 0xD8	; 216
    471e:	2f 1a       	sub	r2, r31
    4720:	fe ef       	ldi	r31, 0xFE	; 254
    4722:	3f 0a       	sbc	r3, r31

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    4724:	91 c0       	rjmp	.+290    	; 0x4848 <VL53L0X_load_tuning_settings+0x182>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    4726:	97 01       	movw	r18, r14
    4728:	2f 5f       	subi	r18, 0xFF	; 255
    472a:	3f 4f       	sbci	r19, 0xFF	; 255
		if (NumberOfWrites == 0xFF) {
    472c:	0f 3f       	cpi	r16, 0xFF	; 255
    472e:	09 f0       	breq	.+2      	; 0x4732 <VL53L0X_load_tuning_settings+0x6c>
    4730:	5f c0       	rjmp	.+190    	; 0x47f0 <VL53L0X_load_tuning_settings+0x12a>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    4732:	a7 01       	movw	r20, r14
    4734:	4e 5f       	subi	r20, 0xFE	; 254
    4736:	5f 4f       	sbci	r21, 0xFF	; 255
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
    4738:	f6 01       	movw	r30, r12
    473a:	e2 0f       	add	r30, r18
    473c:	f3 1f       	adc	r31, r19
			Index++;
			switch (SelectParam) {
    473e:	90 81       	ld	r25, Z
    4740:	91 30       	cpi	r25, 0x01	; 1
    4742:	d1 f0       	breq	.+52     	; 0x4778 <VL53L0X_load_tuning_settings+0xb2>
    4744:	28 f0       	brcs	.+10     	; 0x4750 <VL53L0X_load_tuning_settings+0x8a>
    4746:	92 30       	cpi	r25, 0x02	; 2
    4748:	59 f1       	breq	.+86     	; 0x47a0 <VL53L0X_load_tuning_settings+0xda>
    474a:	93 30       	cpi	r25, 0x03	; 3
    474c:	e9 f1       	breq	.+122    	; 0x47c8 <VL53L0X_load_tuning_settings+0x102>
    474e:	77 c0       	rjmp	.+238    	; 0x483e <VL53L0X_load_tuning_settings+0x178>
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    4750:	f6 01       	movw	r30, r12
    4752:	ee 0d       	add	r30, r14
    4754:	ff 1d       	adc	r31, r15
    4756:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    4758:	24 e0       	ldi	r18, 0x04	; 4
    475a:	e2 0e       	add	r14, r18
    475c:	f1 1c       	adc	r15, r1
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
			switch (SelectParam) {
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    475e:	f6 01       	movw	r30, r12
    4760:	e4 0f       	add	r30, r20
    4762:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    4764:	20 81       	ld	r18, Z
    4766:	30 e0       	ldi	r19, 0x00	; 0
    4768:	32 2f       	mov	r19, r18
    476a:	22 27       	eor	r18, r18
    476c:	29 0f       	add	r18, r25
    476e:	31 1d       	adc	r19, r1
    4770:	f4 01       	movw	r30, r8
    4772:	31 83       	std	Z+1, r19	; 0x01
    4774:	20 83       	st	Z, r18
				break;
    4776:	68 c0       	rjmp	.+208    	; 0x4848 <VL53L0X_load_tuning_settings+0x182>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    4778:	f6 01       	movw	r30, r12
    477a:	ee 0d       	add	r30, r14
    477c:	ff 1d       	adc	r31, r15
    477e:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    4780:	f4 e0       	ldi	r31, 0x04	; 4
    4782:	ef 0e       	add	r14, r31
    4784:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
				break;
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    4786:	f6 01       	movw	r30, r12
    4788:	e4 0f       	add	r30, r20
    478a:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    478c:	20 81       	ld	r18, Z
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	32 2f       	mov	r19, r18
    4792:	22 27       	eor	r18, r18
    4794:	29 0f       	add	r18, r25
    4796:	31 1d       	adc	r19, r1
    4798:	f3 01       	movw	r30, r6
    479a:	31 83       	std	Z+1, r19	; 0x01
    479c:	20 83       	st	Z, r18
					Temp16);
				break;
    479e:	54 c0       	rjmp	.+168    	; 0x4848 <VL53L0X_load_tuning_settings+0x182>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    47a0:	f6 01       	movw	r30, r12
    47a2:	ee 0d       	add	r30, r14
    47a4:	ff 1d       	adc	r31, r15
    47a6:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    47a8:	f4 e0       	ldi	r31, 0x04	; 4
    47aa:	ef 0e       	add	r14, r31
    47ac:	f1 1c       	adc	r15, r1
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
					Temp16);
				break;
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    47ae:	f6 01       	movw	r30, r12
    47b0:	e4 0f       	add	r30, r20
    47b2:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    47b4:	20 81       	ld	r18, Z
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	32 2f       	mov	r19, r18
    47ba:	22 27       	eor	r18, r18
    47bc:	29 0f       	add	r18, r25
    47be:	31 1d       	adc	r19, r1
    47c0:	f2 01       	movw	r30, r4
    47c2:	31 83       	std	Z+1, r19	; 0x01
    47c4:	20 83       	st	Z, r18
				break;
    47c6:	40 c0       	rjmp	.+128    	; 0x4848 <VL53L0X_load_tuning_settings+0x182>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    47c8:	f6 01       	movw	r30, r12
    47ca:	ee 0d       	add	r30, r14
    47cc:	ff 1d       	adc	r31, r15
    47ce:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    47d0:	f4 e0       	ldi	r31, 0x04	; 4
    47d2:	ef 0e       	add	r14, r31
    47d4:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
				break;
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    47d6:	f6 01       	movw	r30, r12
    47d8:	e4 0f       	add	r30, r20
    47da:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    47dc:	20 81       	ld	r18, Z
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	32 2f       	mov	r19, r18
    47e2:	22 27       	eor	r18, r18
    47e4:	29 0f       	add	r18, r25
    47e6:	31 1d       	adc	r19, r1
    47e8:	f1 01       	movw	r30, r2
    47ea:	31 83       	std	Z+1, r19	; 0x01
    47ec:	20 83       	st	Z, r18
				break;
    47ee:	2c c0       	rjmp	.+88     	; 0x4848 <VL53L0X_load_tuning_settings+0x182>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}

		} else if (NumberOfWrites <= 4) {
    47f0:	05 30       	cpi	r16, 0x05	; 5
    47f2:	40 f5       	brcc	.+80     	; 0x4844 <VL53L0X_load_tuning_settings+0x17e>
			Address = *(pTuningSettingBuffer + Index);
    47f4:	f6 01       	movw	r30, r12
    47f6:	e2 0f       	add	r30, r18
    47f8:	f3 1f       	adc	r31, r19
    47fa:	60 81       	ld	r22, Z
			Index++;
    47fc:	f2 e0       	ldi	r31, 0x02	; 2
    47fe:	ef 0e       	add	r14, r31
    4800:	f1 1c       	adc	r15, r1

			for (i = 0; i < NumberOfWrites; i++) {
    4802:	00 23       	and	r16, r16
    4804:	91 f0       	breq	.+36     	; 0x482a <VL53L0X_load_tuning_settings+0x164>
    4806:	97 01       	movw	r18, r14
    4808:	d6 01       	movw	r26, r12
    480a:	ae 0d       	add	r26, r14
    480c:	bf 1d       	adc	r27, r15
    480e:	fe 01       	movw	r30, r28
    4810:	31 96       	adiw	r30, 0x01	; 1
    4812:	e0 2e       	mov	r14, r16
    4814:	f1 2c       	mov	r15, r1
    4816:	cf 01       	movw	r24, r30
    4818:	8e 0d       	add	r24, r14
    481a:	9f 1d       	adc	r25, r15
				localBuffer[i] = *(pTuningSettingBuffer +
    481c:	4d 91       	ld	r20, X+
    481e:	41 93       	st	Z+, r20

		} else if (NumberOfWrites <= 4) {
			Address = *(pTuningSettingBuffer + Index);
			Index++;

			for (i = 0; i < NumberOfWrites; i++) {
    4820:	e8 17       	cp	r30, r24
    4822:	f9 07       	cpc	r31, r25
    4824:	d9 f7       	brne	.-10     	; 0x481c <VL53L0X_load_tuning_settings+0x156>
    4826:	e2 0e       	add	r14, r18
    4828:	f3 1e       	adc	r15, r19
				localBuffer[i] = *(pTuningSettingBuffer +
							Index);
				Index++;
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
<<<<<<< HEAD
    482a:	10 e0       	ldi	r17, 0x00	; 0
    482c:	20 e0       	ldi	r18, 0x00	; 0
    482e:	30 e0       	ldi	r19, 0x00	; 0
    4830:	ae 01       	movw	r20, r28
    4832:	4f 5f       	subi	r20, 0xFF	; 255
    4834:	5f 4f       	sbci	r21, 0xFF	; 255
    4836:	c5 01       	movw	r24, r10
    4838:	0e 94 ce 2c 	call	0x599c	; 0x599c <VL53L0X_WriteMulti>
    483c:	05 c0       	rjmp	.+10     	; 0x4848 <VL53L0X_load_tuning_settings+0x182>
=======
    4578:	10 e0       	ldi	r17, 0x00	; 0
    457a:	20 e0       	ldi	r18, 0x00	; 0
    457c:	30 e0       	ldi	r19, 0x00	; 0
    457e:	ae 01       	movw	r20, r28
    4580:	4f 5f       	subi	r20, 0xFF	; 255
    4582:	5f 4f       	sbci	r21, 0xFF	; 255
    4584:	c5 01       	movw	r24, r10
    4586:	0e 94 b5 2b 	call	0x576a	; 0x576a <VL53L0X_WriteMulti>
    458a:	05 c0       	rjmp	.+10     	; 0x4596 <VL53L0X_load_tuning_settings+0x182>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    483e:	7a 01       	movw	r14, r20
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
				break;
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    4840:	8c ef       	ldi	r24, 0xFC	; 252
    4842:	02 c0       	rjmp	.+4      	; 0x4848 <VL53L0X_load_tuning_settings+0x182>
	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    4844:	79 01       	movw	r14, r18

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    4846:	8c ef       	ldi	r24, 0xFC	; 252

	LOG_FUNCTION_START("");

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    4848:	f6 01       	movw	r30, r12
    484a:	ee 0d       	add	r30, r14
    484c:	ff 1d       	adc	r31, r15
    484e:	00 81       	ld	r16, Z
    4850:	00 23       	and	r16, r16
    4852:	19 f0       	breq	.+6      	; 0x485a <VL53L0X_load_tuning_settings+0x194>
    4854:	88 23       	and	r24, r24
    4856:	09 f4       	brne	.+2      	; 0x485a <VL53L0X_load_tuning_settings+0x194>
    4858:	66 cf       	rjmp	.-308    	; 0x4726 <VL53L0X_load_tuning_settings+0x60>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    485a:	0f 90       	pop	r0
    485c:	0f 90       	pop	r0
    485e:	0f 90       	pop	r0
    4860:	0f 90       	pop	r0
    4862:	df 91       	pop	r29
    4864:	cf 91       	pop	r28
    4866:	1f 91       	pop	r17
    4868:	0f 91       	pop	r16
    486a:	ff 90       	pop	r15
    486c:	ef 90       	pop	r14
    486e:	df 90       	pop	r13
    4870:	cf 90       	pop	r12
    4872:	bf 90       	pop	r11
    4874:	af 90       	pop	r10
    4876:	9f 90       	pop	r9
    4878:	8f 90       	pop	r8
    487a:	7f 90       	pop	r7
    487c:	6f 90       	pop	r6
    487e:	5f 90       	pop	r5
    4880:	4f 90       	pop	r4
    4882:	3f 90       	pop	r3
    4884:	2f 90       	pop	r2
    4886:	08 95       	ret

00004888 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
    4888:	cf 92       	push	r12
    488a:	df 92       	push	r13
    488c:	ef 92       	push	r14
    488e:	ff 92       	push	r15
    4890:	0f 93       	push	r16
    4892:	1f 93       	push	r17
    4894:	cf 93       	push	r28
    4896:	df 93       	push	r29
    4898:	1f 92       	push	r1
    489a:	cd b7       	in	r28, 0x3d	; 61
    489c:	de b7       	in	r29, 0x3e	; 62
    489e:	7c 01       	movw	r14, r24
    48a0:	6b 01       	movw	r12, r22
    48a2:	8a 01       	movw	r16, r20

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
    48a4:	da 01       	movw	r26, r20
    48a6:	1d 92       	st	X+, r1
    48a8:	1d 92       	st	X+, r1
    48aa:	1d 92       	st	X+, r1
    48ac:	1c 92       	st	X, r1
    48ae:	13 97       	sbiw	r26, 0x03	; 3

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
    48b0:	be 01       	movw	r22, r28
    48b2:	6f 5f       	subi	r22, 0xFF	; 255
    48b4:	7f 4f       	sbci	r23, 0xFF	; 255
    48b6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <VL53L0X_GetXTalkCompensationEnable>
    48ba:	e8 2f       	mov	r30, r24
	if (Status == VL53L0X_ERROR_NONE) {
    48bc:	81 11       	cpse	r24, r1
    48be:	22 c0       	rjmp	.+68     	; 0x4904 <VL53L0X_get_total_xtalk_rate+0x7c>

		if (xtalkCompEnable) {
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	88 23       	and	r24, r24
    48c4:	f9 f0       	breq	.+62     	; 0x4904 <VL53L0X_get_total_xtalk_rate+0x7c>
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
<<<<<<< HEAD
    48c6:	d6 01       	movw	r26, r12
    48c8:	54 96       	adiw	r26, 0x14	; 20
    48ca:	8d 91       	ld	r24, X+
    48cc:	9c 91       	ld	r25, X
    48ce:	55 97       	sbiw	r26, 0x15	; 21
    48d0:	d7 01       	movw	r26, r14
    48d2:	5d 96       	adiw	r26, 0x1d	; 29
    48d4:	2d 91       	ld	r18, X+
    48d6:	3d 91       	ld	r19, X+
    48d8:	4d 91       	ld	r20, X+
    48da:	5c 91       	ld	r21, X
    48dc:	90 97       	sbiw	r26, 0x20	; 32
    48de:	dc 01       	movw	r26, r24
    48e0:	0e 94 4e 2e 	call	0x5c9c	; 0x5c9c <__muluhisi3>
    48e4:	dc 01       	movw	r26, r24
    48e6:	cb 01       	movw	r24, r22
    48e8:	80 58       	subi	r24, 0x80	; 128
    48ea:	9f 4f       	sbci	r25, 0xFF	; 255
    48ec:	af 4f       	sbci	r26, 0xFF	; 255
    48ee:	bf 4f       	sbci	r27, 0xFF	; 255
    48f0:	49 2f       	mov	r20, r25
    48f2:	5a 2f       	mov	r21, r26
    48f4:	6b 2f       	mov	r22, r27
    48f6:	77 27       	eor	r23, r23
    48f8:	d8 01       	movw	r26, r16
    48fa:	4d 93       	st	X+, r20
    48fc:	5d 93       	st	X+, r21
    48fe:	6d 93       	st	X+, r22
    4900:	7c 93       	st	X, r23
    4902:	13 97       	sbiw	r26, 0x03	; 3
=======
    4614:	d6 01       	movw	r26, r12
    4616:	54 96       	adiw	r26, 0x14	; 20
    4618:	8d 91       	ld	r24, X+
    461a:	9c 91       	ld	r25, X
    461c:	55 97       	sbiw	r26, 0x15	; 21
    461e:	d7 01       	movw	r26, r14
    4620:	5d 96       	adiw	r26, 0x1d	; 29
    4622:	2d 91       	ld	r18, X+
    4624:	3d 91       	ld	r19, X+
    4626:	4d 91       	ld	r20, X+
    4628:	5c 91       	ld	r21, X
    462a:	90 97       	sbiw	r26, 0x20	; 32
    462c:	dc 01       	movw	r26, r24
    462e:	0e 94 b9 2c 	call	0x5972	; 0x5972 <__muluhisi3>
    4632:	dc 01       	movw	r26, r24
    4634:	cb 01       	movw	r24, r22
    4636:	80 58       	subi	r24, 0x80	; 128
    4638:	9f 4f       	sbci	r25, 0xFF	; 255
    463a:	af 4f       	sbci	r26, 0xFF	; 255
    463c:	bf 4f       	sbci	r27, 0xFF	; 255
    463e:	49 2f       	mov	r20, r25
    4640:	5a 2f       	mov	r21, r26
    4642:	6b 2f       	mov	r22, r27
    4644:	77 27       	eor	r23, r23
    4646:	d8 01       	movw	r26, r16
    4648:	4d 93       	st	X+, r20
    464a:	5d 93       	st	X+, r21
    464c:	6d 93       	st	X+, r22
    464e:	7c 93       	st	X, r23
    4650:	13 97       	sbiw	r26, 0x03	; 3
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				(totalXtalkMegaCps + 0x80) >> 8;
		}
	}

	return Status;
}
    4904:	8e 2f       	mov	r24, r30
    4906:	0f 90       	pop	r0
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	1f 91       	pop	r17
    490e:	0f 91       	pop	r16
    4910:	ff 90       	pop	r15
    4912:	ef 90       	pop	r14
    4914:	df 90       	pop	r13
    4916:	cf 90       	pop	r12
    4918:	08 95       	ret

0000491a <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
    491a:	cf 92       	push	r12
    491c:	df 92       	push	r13
    491e:	ef 92       	push	r14
    4920:	ff 92       	push	r15
    4922:	0f 93       	push	r16
    4924:	1f 93       	push	r17
    4926:	cf 93       	push	r28
    4928:	df 93       	push	r29
    492a:	00 d0       	rcall	.+0      	; 0x492c <VL53L0X_get_total_signal_rate+0x12>
    492c:	00 d0       	rcall	.+0      	; 0x492e <VL53L0X_get_total_signal_rate+0x14>
    492e:	cd b7       	in	r28, 0x3d	; 61
    4930:	de b7       	in	r29, 0x3e	; 62
    4932:	8a 01       	movw	r16, r20
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
    4934:	fb 01       	movw	r30, r22
    4936:	c4 84       	ldd	r12, Z+12	; 0x0c
    4938:	d5 84       	ldd	r13, Z+13	; 0x0d
    493a:	e6 84       	ldd	r14, Z+14	; 0x0e
    493c:	f7 84       	ldd	r15, Z+15	; 0x0f
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
    493e:	fa 01       	movw	r30, r20
    4940:	c0 82       	st	Z, r12
    4942:	d1 82       	std	Z+1, r13	; 0x01
    4944:	e2 82       	std	Z+2, r14	; 0x02
    4946:	f3 82       	std	Z+3, r15	; 0x03
		pRangingMeasurementData->SignalRateRtnMegaCps;

	Status = VL53L0X_get_total_xtalk_rate(
    4948:	ae 01       	movw	r20, r28
    494a:	4f 5f       	subi	r20, 0xFF	; 255
    494c:	5f 4f       	sbci	r21, 0xFF	; 255
    494e:	9c df       	rcall	.-200    	; 0x4888 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
    4950:	81 11       	cpse	r24, r1
    4952:	11 c0       	rjmp	.+34     	; 0x4976 <VL53L0X_get_total_signal_rate+0x5c>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
    4954:	f8 01       	movw	r30, r16
    4956:	c0 80       	ld	r12, Z
    4958:	d1 80       	ldd	r13, Z+1	; 0x01
    495a:	e2 80       	ldd	r14, Z+2	; 0x02
    495c:	f3 80       	ldd	r15, Z+3	; 0x03
    495e:	49 81       	ldd	r20, Y+1	; 0x01
    4960:	5a 81       	ldd	r21, Y+2	; 0x02
    4962:	6b 81       	ldd	r22, Y+3	; 0x03
    4964:	7c 81       	ldd	r23, Y+4	; 0x04
    4966:	4c 0d       	add	r20, r12
    4968:	5d 1d       	adc	r21, r13
    496a:	6e 1d       	adc	r22, r14
    496c:	7f 1d       	adc	r23, r15
    496e:	40 83       	st	Z, r20
    4970:	51 83       	std	Z+1, r21	; 0x01
    4972:	62 83       	std	Z+2, r22	; 0x02
    4974:	73 83       	std	Z+3, r23	; 0x03

	return Status;
}
    4976:	0f 90       	pop	r0
    4978:	0f 90       	pop	r0
    497a:	0f 90       	pop	r0
    497c:	0f 90       	pop	r0
    497e:	df 91       	pop	r29
    4980:	cf 91       	pop	r28
    4982:	1f 91       	pop	r17
    4984:	0f 91       	pop	r16
    4986:	ff 90       	pop	r15
    4988:	ef 90       	pop	r14
    498a:	df 90       	pop	r13
    498c:	cf 90       	pop	r12
    498e:	08 95       	ret

00004990 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
    4990:	4f 92       	push	r4
    4992:	5f 92       	push	r5
    4994:	6f 92       	push	r6
    4996:	7f 92       	push	r7
    4998:	8f 92       	push	r8
    499a:	9f 92       	push	r9
    499c:	af 92       	push	r10
    499e:	bf 92       	push	r11
    49a0:	cf 92       	push	r12
    49a2:	df 92       	push	r13
    49a4:	ef 92       	push	r14
    49a6:	ff 92       	push	r15
    49a8:	0f 93       	push	r16
    49aa:	1f 93       	push	r17
    49ac:	cf 93       	push	r28
    49ae:	df 93       	push	r29
    49b0:	cd b7       	in	r28, 0x3d	; 61
    49b2:	de b7       	in	r29, 0x3e	; 62
    49b4:	64 97       	sbiw	r28, 0x14	; 20
    49b6:	0f b6       	in	r0, 0x3f	; 63
    49b8:	f8 94       	cli
    49ba:	de bf       	out	0x3e, r29	; 62
    49bc:	0f be       	out	0x3f, r0	; 63
    49be:	cd bf       	out	0x3d, r28	; 61
    49c0:	49 87       	std	Y+9, r20	; 0x09
    49c2:	5a 87       	std	Y+10, r21	; 0x0a
    49c4:	6b 87       	std	Y+11, r22	; 0x0b
    49c6:	7c 87       	std	Y+12, r23	; 0x0c
    49c8:	09 83       	std	Y+1, r16	; 0x01
    49ca:	1a 83       	std	Y+2, r17	; 0x02
    49cc:	2b 83       	std	Y+3, r18	; 0x03
    49ce:	3c 83       	std	Y+4, r19	; 0x04
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
    49d0:	fc 01       	movw	r30, r24
    49d2:	e5 5c       	subi	r30, 0xC5	; 197
    49d4:	fe 4f       	sbci	r31, 0xFE	; 254

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
    49d6:	20 81       	ld	r18, Z
    49d8:	31 81       	ldd	r19, Z+1	; 0x01
    49da:	29 01       	movw	r4, r18
    49dc:	61 2c       	mov	r6, r1
    49de:	71 2c       	mov	r7, r1
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);

	dmaxCalSignalRateRtn_mcps =
    49e0:	32 96       	adiw	r30, 0x02	; 2

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
<<<<<<< HEAD
    49e2:	60 81       	ld	r22, Z
    49e4:	71 81       	ldd	r23, Z+1	; 0x01
    49e6:	82 81       	ldd	r24, Z+2	; 0x02
    49e8:	93 81       	ldd	r25, Z+3	; 0x03
    49ea:	a3 01       	movw	r20, r6
    49ec:	92 01       	movw	r18, r4
    49ee:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsi3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	80 58       	subi	r24, 0x80	; 128
    49f8:	9f 4f       	sbci	r25, 0xFF	; 255
    49fa:	af 4f       	sbci	r26, 0xFF	; 255
    49fc:	bf 4f       	sbci	r27, 0xFF	; 255
    49fe:	69 2f       	mov	r22, r25
    4a00:	7a 2f       	mov	r23, r26
    4a02:	8b 2f       	mov	r24, r27
    4a04:	99 27       	eor	r25, r25
	SignalAt0mm *= dmaxCalRange_mm;
    4a06:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsi3>
    4a0a:	6d 87       	std	Y+13, r22	; 0x0d
    4a0c:	7e 87       	std	Y+14, r23	; 0x0e
    4a0e:	8f 87       	std	Y+15, r24	; 0x0f
    4a10:	98 8b       	std	Y+16, r25	; 0x10
=======
    4730:	60 81       	ld	r22, Z
    4732:	71 81       	ldd	r23, Z+1	; 0x01
    4734:	82 81       	ldd	r24, Z+2	; 0x02
    4736:	93 81       	ldd	r25, Z+3	; 0x03
    4738:	a3 01       	movw	r20, r6
    473a:	92 01       	movw	r18, r4
    473c:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <__mulsi3>
    4740:	dc 01       	movw	r26, r24
    4742:	cb 01       	movw	r24, r22
    4744:	80 58       	subi	r24, 0x80	; 128
    4746:	9f 4f       	sbci	r25, 0xFF	; 255
    4748:	af 4f       	sbci	r26, 0xFF	; 255
    474a:	bf 4f       	sbci	r27, 0xFF	; 255
    474c:	69 2f       	mov	r22, r25
    474e:	7a 2f       	mov	r23, r26
    4750:	8b 2f       	mov	r24, r27
    4752:	99 27       	eor	r25, r25
	SignalAt0mm *= dmaxCalRange_mm;
    4754:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <__mulsi3>
    4758:	6d 87       	std	Y+13, r22	; 0x0d
    475a:	7e 87       	std	Y+14, r23	; 0x0e
    475c:	8f 87       	std	Y+15, r24	; 0x0f
    475e:	98 8b       	std	Y+16, r25	; 0x10
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
    4a12:	29 81       	ldd	r18, Y+1	; 0x01
    4a14:	3a 81       	ldd	r19, Y+2	; 0x02
    4a16:	4b 81       	ldd	r20, Y+3	; 0x03
    4a18:	5c 81       	ldd	r21, Y+4	; 0x04
    4a1a:	21 15       	cp	r18, r1
    4a1c:	31 05       	cpc	r19, r1
    4a1e:	41 05       	cpc	r20, r1
    4a20:	51 05       	cpc	r21, r1
    4a22:	c1 f1       	breq	.+112    	; 0x4a94 <VL53L0X_calc_dmax+0x104>
		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
    4a24:	49 84       	ldd	r4, Y+9	; 0x09
    4a26:	5a 84       	ldd	r5, Y+10	; 0x0a
    4a28:	6b 84       	ldd	r6, Y+11	; 0x0b
    4a2a:	7c 84       	ldd	r7, Y+12	; 0x0c
    4a2c:	03 2e       	mov	r0, r19
    4a2e:	3a e0       	ldi	r19, 0x0A	; 10
    4a30:	44 0c       	add	r4, r4
    4a32:	55 1c       	adc	r5, r5
    4a34:	66 1c       	adc	r6, r6
    4a36:	77 1c       	adc	r7, r7
    4a38:	3a 95       	dec	r19
    4a3a:	d1 f7       	brne	.-12     	; 0x4a30 <VL53L0X_calc_dmax+0xa0>
    4a3c:	30 2d       	mov	r19, r0
    4a3e:	da 01       	movw	r26, r20
    4a40:	c9 01       	movw	r24, r18
    4a42:	b6 95       	lsr	r27
    4a44:	a7 95       	ror	r26
    4a46:	97 95       	ror	r25
    4a48:	87 95       	ror	r24
    4a4a:	bc 01       	movw	r22, r24
    4a4c:	cd 01       	movw	r24, r26
    4a4e:	64 0d       	add	r22, r4
    4a50:	75 1d       	adc	r23, r5
    4a52:	86 1d       	adc	r24, r6
    4a54:	97 1d       	adc	r25, r7
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
<<<<<<< HEAD
    4a56:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
=======
    47a4:	0e 94 88 2c 	call	0x5910	; 0x5910 <__udivmodsi4>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
    4a5a:	da 01       	movw	r26, r20
    4a5c:	c9 01       	movw	r24, r18
    4a5e:	88 0f       	add	r24, r24
    4a60:	99 1f       	adc	r25, r25
    4a62:	aa 1f       	adc	r26, r26
    4a64:	bb 1f       	adc	r27, r27
    4a66:	bc 01       	movw	r22, r24
    4a68:	cd 01       	movw	r24, r26
    4a6a:	62 0f       	add	r22, r18
    4a6c:	73 1f       	adc	r23, r19
    4a6e:	84 1f       	adc	r24, r20
    4a70:	95 1f       	adc	r25, r21

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
<<<<<<< HEAD
    4a72:	9b 01       	movw	r18, r22
    4a74:	ac 01       	movw	r20, r24
    4a76:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsi3>
    4a7a:	dc 01       	movw	r26, r24
    4a7c:	cb 01       	movw	r24, r22
    4a7e:	90 58       	subi	r25, 0x80	; 128
    4a80:	af 4f       	sbci	r26, 0xFF	; 255
    4a82:	bf 4f       	sbci	r27, 0xFF	; 255
    4a84:	9d 01       	movw	r18, r26
    4a86:	44 27       	eor	r20, r20
    4a88:	55 27       	eor	r21, r21
    4a8a:	29 87       	std	Y+9, r18	; 0x09
    4a8c:	3a 87       	std	Y+10, r19	; 0x0a
    4a8e:	4b 87       	std	Y+11, r20	; 0x0b
    4a90:	5c 87       	std	Y+12, r21	; 0x0c
    4a92:	04 c0       	rjmp	.+8      	; 0x4a9c <VL53L0X_calc_dmax+0x10c>
=======
    47c0:	9b 01       	movw	r18, r22
    47c2:	ac 01       	movw	r20, r24
    47c4:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <__mulsi3>
    47c8:	dc 01       	movw	r26, r24
    47ca:	cb 01       	movw	r24, r22
    47cc:	90 58       	subi	r25, 0x80	; 128
    47ce:	af 4f       	sbci	r26, 0xFF	; 255
    47d0:	bf 4f       	sbci	r27, 0xFF	; 255
    47d2:	9d 01       	movw	r18, r26
    47d4:	44 27       	eor	r20, r20
    47d6:	55 27       	eor	r21, r21
    47d8:	29 87       	std	Y+9, r18	; 0x09
    47da:	3a 87       	std	Y+10, r19	; 0x0a
    47dc:	4b 87       	std	Y+11, r20	; 0x0b
    47de:	5c 87       	std	Y+12, r21	; 0x0c
    47e0:	04 c0       	rjmp	.+8      	; 0x47ea <VL53L0X_calc_dmax+0x10c>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
	SignalAt0mm *= dmaxCalRange_mm;

	minSignalNeeded_p1 = 0;
    4a94:	19 86       	std	Y+9, r1	; 0x09
    4a96:	1a 86       	std	Y+10, r1	; 0x0a
    4a98:	1b 86       	std	Y+11, r1	; 0x0b
    4a9a:	1c 86       	std	Y+12, r1	; 0x0c
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
<<<<<<< HEAD
    4a9c:	a7 01       	movw	r20, r14
    4a9e:	96 01       	movw	r18, r12
    4aa0:	c5 01       	movw	r24, r10
    4aa2:	b4 01       	movw	r22, r8
    4aa4:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsi3>
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	cb 01       	movw	r24, r22
    4aac:	90 58       	subi	r25, 0x80	; 128
    4aae:	af 4f       	sbci	r26, 0xFF	; 255
    4ab0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ab2:	bd 01       	movw	r22, r26
    4ab4:	88 27       	eor	r24, r24
    4ab6:	99 27       	eor	r25, r25

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
    4ab8:	9b 01       	movw	r18, r22
    4aba:	ac 01       	movw	r20, r24
    4abc:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsi3>
    4ac0:	69 8b       	std	Y+17, r22	; 0x11
    4ac2:	7a 8b       	std	Y+18, r23	; 0x12
    4ac4:	8b 8b       	std	Y+19, r24	; 0x13
    4ac6:	9c 8b       	std	Y+20, r25	; 0x14
=======
    47ea:	a7 01       	movw	r20, r14
    47ec:	96 01       	movw	r18, r12
    47ee:	c5 01       	movw	r24, r10
    47f0:	b4 01       	movw	r22, r8
    47f2:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <__mulsi3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	90 58       	subi	r25, 0x80	; 128
    47fc:	af 4f       	sbci	r26, 0xFF	; 255
    47fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4800:	bd 01       	movw	r22, r26
    4802:	88 27       	eor	r24, r24
    4804:	99 27       	eor	r25, r25

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
    4806:	9b 01       	movw	r18, r22
    4808:	ac 01       	movw	r20, r24
    480a:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <__mulsi3>
    480e:	69 8b       	std	Y+17, r22	; 0x11
    4810:	7a 8b       	std	Y+18, r23	; 0x12
    4812:	8b 8b       	std	Y+19, r24	; 0x13
    4814:	9c 8b       	std	Y+20, r25	; 0x14
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
<<<<<<< HEAD
    4ac8:	8f a1       	ldd	r24, Y+39	; 0x27
    4aca:	98 a5       	ldd	r25, Y+40	; 0x28
    4acc:	a9 a5       	ldd	r26, Y+41	; 0x29
    4ace:	ba a5       	ldd	r27, Y+42	; 0x2a
    4ad0:	90 58       	subi	r25, 0x80	; 128
    4ad2:	af 4f       	sbci	r26, 0xFF	; 255
    4ad4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ad6:	cd 01       	movw	r24, r26
    4ad8:	aa 27       	eor	r26, r26
    4ada:	bb 27       	eor	r27, r27
    4adc:	bc 01       	movw	r22, r24
    4ade:	cd 01       	movw	r24, r26
    4ae0:	6d 5f       	subi	r22, 0xFD	; 253
    4ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ae8:	2b ea       	ldi	r18, 0xAB	; 171
    4aea:	3a ea       	ldi	r19, 0xAA	; 170
    4aec:	4a ea       	ldi	r20, 0xAA	; 170
    4aee:	5a ea       	ldi	r21, 0xAA	; 170
    4af0:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <__umulsidi3>
    4af4:	00 e2       	ldi	r16, 0x20	; 32
    4af6:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <__lshrdi3>
    4afa:	82 2e       	mov	r8, r18
    4afc:	93 2e       	mov	r9, r19
    4afe:	a4 2e       	mov	r10, r20
    4b00:	b5 2e       	mov	r11, r21
    4b02:	b5 01       	movw	r22, r10
    4b04:	a4 01       	movw	r20, r8
    4b06:	76 95       	lsr	r23
    4b08:	67 95       	ror	r22
    4b0a:	57 95       	ror	r21
    4b0c:	47 95       	ror	r20
    4b0e:	76 95       	lsr	r23
    4b10:	67 95       	ror	r22
    4b12:	57 95       	ror	r21
    4b14:	47 95       	ror	r20
=======
    4816:	8f a1       	ldd	r24, Y+39	; 0x27
    4818:	98 a5       	ldd	r25, Y+40	; 0x28
    481a:	a9 a5       	ldd	r26, Y+41	; 0x29
    481c:	ba a5       	ldd	r27, Y+42	; 0x2a
    481e:	90 58       	subi	r25, 0x80	; 128
    4820:	af 4f       	sbci	r26, 0xFF	; 255
    4822:	bf 4f       	sbci	r27, 0xFF	; 255
    4824:	cd 01       	movw	r24, r26
    4826:	aa 27       	eor	r26, r26
    4828:	bb 27       	eor	r27, r27
    482a:	bc 01       	movw	r22, r24
    482c:	cd 01       	movw	r24, r26
    482e:	6d 5f       	subi	r22, 0xFD	; 253
    4830:	7f 4f       	sbci	r23, 0xFF	; 255
    4832:	8f 4f       	sbci	r24, 0xFF	; 255
    4834:	9f 4f       	sbci	r25, 0xFF	; 255
    4836:	2b ea       	ldi	r18, 0xAB	; 171
    4838:	3a ea       	ldi	r19, 0xAA	; 170
    483a:	4a ea       	ldi	r20, 0xAA	; 170
    483c:	5a ea       	ldi	r21, 0xAA	; 170
    483e:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__umulsidi3>
    4842:	00 e2       	ldi	r16, 0x20	; 32
    4844:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__lshrdi3>
    4848:	82 2e       	mov	r8, r18
    484a:	93 2e       	mov	r9, r19
    484c:	a4 2e       	mov	r10, r20
    484e:	b5 2e       	mov	r11, r21
    4850:	b5 01       	movw	r22, r10
    4852:	a4 01       	movw	r20, r8
    4854:	76 95       	lsr	r23
    4856:	67 95       	ror	r22
    4858:	57 95       	ror	r21
    485a:	47 95       	ror	r20
    485c:	76 95       	lsr	r23
    485e:	67 95       	ror	r22
    4860:	57 95       	ror	r21
    4862:	47 95       	ror	r20
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
    4b16:	db 01       	movw	r26, r22
    4b18:	ca 01       	movw	r24, r20
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	aa 1f       	adc	r26, r26
    4b20:	bb 1f       	adc	r27, r27
    4b22:	88 0f       	add	r24, r24
    4b24:	99 1f       	adc	r25, r25
    4b26:	aa 1f       	adc	r26, r26
    4b28:	bb 1f       	adc	r27, r27
    4b2a:	88 0f       	add	r24, r24
    4b2c:	99 1f       	adc	r25, r25
    4b2e:	aa 1f       	adc	r26, r26
    4b30:	bb 1f       	adc	r27, r27
    4b32:	84 1b       	sub	r24, r20
    4b34:	95 0b       	sbc	r25, r21
    4b36:	a6 0b       	sbc	r26, r22
    4b38:	b7 0b       	sbc	r27, r23
    4b3a:	00 97       	sbiw	r24, 0x00	; 0
    4b3c:	a1 40       	sbci	r26, 0x01	; 1
    4b3e:	b1 05       	cpc	r27, r1
    4b40:	08 f0       	brcs	.+2      	; 0x4b44 <VL53L0X_calc_dmax+0x1b4>
    4b42:	41 c0       	rjmp	.+130    	; 0x4bc6 <VL53L0X_calc_dmax+0x236>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
<<<<<<< HEAD
    4b44:	6f a1       	ldd	r22, Y+39	; 0x27
    4b46:	78 a5       	ldd	r23, Y+40	; 0x28
    4b48:	89 a5       	ldd	r24, Y+41	; 0x29
    4b4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    4b4c:	6d 5f       	subi	r22, 0xFD	; 253
    4b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b50:	8f 4f       	sbci	r24, 0xFF	; 255
    4b52:	9f 4f       	sbci	r25, 0xFF	; 255
    4b54:	2b ea       	ldi	r18, 0xAB	; 171
    4b56:	3a ea       	ldi	r19, 0xAA	; 170
    4b58:	4a ea       	ldi	r20, 0xAA	; 170
    4b5a:	5a ea       	ldi	r21, 0xAA	; 170
    4b5c:	0e 94 58 2e 	call	0x5cb0	; 0x5cb0 <__umulsidi3>
    4b60:	0e 94 81 2e 	call	0x5d02	; 0x5d02 <__lshrdi3>
    4b64:	29 83       	std	Y+1, r18	; 0x01
    4b66:	3a 83       	std	Y+2, r19	; 0x02
    4b68:	4b 83       	std	Y+3, r20	; 0x03
    4b6a:	5c 83       	std	Y+4, r21	; 0x04
    4b6c:	6d 83       	std	Y+5, r22	; 0x05
    4b6e:	7e 83       	std	Y+6, r23	; 0x06
    4b70:	8f 83       	std	Y+7, r24	; 0x07
    4b72:	98 87       	std	Y+8, r25	; 0x08
    4b74:	49 80       	ldd	r4, Y+1	; 0x01
    4b76:	5a 80       	ldd	r5, Y+2	; 0x02
    4b78:	6b 80       	ldd	r6, Y+3	; 0x03
    4b7a:	7c 80       	ldd	r7, Y+4	; 0x04
    4b7c:	76 94       	lsr	r7
    4b7e:	67 94       	ror	r6
    4b80:	57 94       	ror	r5
    4b82:	47 94       	ror	r4
    4b84:	76 94       	lsr	r7
    4b86:	67 94       	ror	r6
    4b88:	57 94       	ror	r5
    4b8a:	47 94       	ror	r4
=======
    4892:	6f a1       	ldd	r22, Y+39	; 0x27
    4894:	78 a5       	ldd	r23, Y+40	; 0x28
    4896:	89 a5       	ldd	r24, Y+41	; 0x29
    4898:	9a a5       	ldd	r25, Y+42	; 0x2a
    489a:	6d 5f       	subi	r22, 0xFD	; 253
    489c:	7f 4f       	sbci	r23, 0xFF	; 255
    489e:	8f 4f       	sbci	r24, 0xFF	; 255
    48a0:	9f 4f       	sbci	r25, 0xFF	; 255
    48a2:	2b ea       	ldi	r18, 0xAB	; 171
    48a4:	3a ea       	ldi	r19, 0xAA	; 170
    48a6:	4a ea       	ldi	r20, 0xAA	; 170
    48a8:	5a ea       	ldi	r21, 0xAA	; 170
    48aa:	0e 94 c3 2c 	call	0x5986	; 0x5986 <__umulsidi3>
    48ae:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__lshrdi3>
    48b2:	29 83       	std	Y+1, r18	; 0x01
    48b4:	3a 83       	std	Y+2, r19	; 0x02
    48b6:	4b 83       	std	Y+3, r20	; 0x03
    48b8:	5c 83       	std	Y+4, r21	; 0x04
    48ba:	6d 83       	std	Y+5, r22	; 0x05
    48bc:	7e 83       	std	Y+6, r23	; 0x06
    48be:	8f 83       	std	Y+7, r24	; 0x07
    48c0:	98 87       	std	Y+8, r25	; 0x08
    48c2:	49 80       	ldd	r4, Y+1	; 0x01
    48c4:	5a 80       	ldd	r5, Y+2	; 0x02
    48c6:	6b 80       	ldd	r6, Y+3	; 0x03
    48c8:	7c 80       	ldd	r7, Y+4	; 0x04
    48ca:	76 94       	lsr	r7
    48cc:	67 94       	ror	r6
    48ce:	57 94       	ror	r5
    48d0:	47 94       	ror	r4
    48d2:	76 94       	lsr	r7
    48d4:	67 94       	ror	r6
    48d6:	57 94       	ror	r5
    48d8:	47 94       	ror	r4
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
    4b8c:	d3 01       	movw	r26, r6
    4b8e:	c2 01       	movw	r24, r4
    4b90:	88 0f       	add	r24, r24
    4b92:	99 1f       	adc	r25, r25
    4b94:	aa 1f       	adc	r26, r26
    4b96:	bb 1f       	adc	r27, r27
    4b98:	88 0f       	add	r24, r24
    4b9a:	99 1f       	adc	r25, r25
    4b9c:	aa 1f       	adc	r26, r26
    4b9e:	bb 1f       	adc	r27, r27
    4ba0:	88 0f       	add	r24, r24
    4ba2:	99 1f       	adc	r25, r25
    4ba4:	aa 1f       	adc	r26, r26
    4ba6:	bb 1f       	adc	r27, r27
    4ba8:	84 19       	sub	r24, r4
    4baa:	95 09       	sbc	r25, r5
    4bac:	a6 09       	sbc	r26, r6
    4bae:	b7 09       	sbc	r27, r7
    4bb0:	90 58       	subi	r25, 0x80	; 128
    4bb2:	af 4f       	sbci	r26, 0xFF	; 255
    4bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb6:	bd 01       	movw	r22, r26
    4bb8:	88 27       	eor	r24, r24
    4bba:	99 27       	eor	r25, r25

		minSignalNeeded_p3 *= minSignalNeeded_p3;
<<<<<<< HEAD
    4bbc:	9b 01       	movw	r18, r22
    4bbe:	ac 01       	movw	r20, r24
    4bc0:	0e 94 05 2e 	call	0x5c0a	; 0x5c0a <__mulsi3>
    4bc4:	04 c0       	rjmp	.+8      	; 0x4bce <VL53L0X_calc_dmax+0x23e>
=======
    490a:	9b 01       	movw	r18, r22
    490c:	ac 01       	movw	r20, r24
    490e:	f1 d7       	rcall	.+4066   	; 0x58f2 <__mulsi3>
    4910:	04 c0       	rjmp	.+8      	; 0x491a <VL53L0X_calc_dmax+0x23c>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
		minSignalNeeded_p3 = 0xfff00000;
    4bc6:	60 e0       	ldi	r22, 0x00	; 0
    4bc8:	70 e0       	ldi	r23, 0x00	; 0
    4bca:	80 ef       	ldi	r24, 0xF0	; 240
    4bcc:	9f ef       	ldi	r25, 0xFF	; 255

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
    4bce:	4b a4       	ldd	r4, Y+43	; 0x2b
    4bd0:	5c a4       	ldd	r5, Y+44	; 0x2c
    4bd2:	6d a4       	ldd	r6, Y+45	; 0x2d
    4bd4:	7e a4       	ldd	r7, Y+46	; 0x2e
    4bd6:	76 94       	lsr	r7
    4bd8:	67 94       	ror	r6
    4bda:	57 94       	ror	r5
    4bdc:	47 94       	ror	r4
    4bde:	c9 88       	ldd	r12, Y+17	; 0x11
    4be0:	da 88       	ldd	r13, Y+18	; 0x12
    4be2:	eb 88       	ldd	r14, Y+19	; 0x13
    4be4:	fc 88       	ldd	r15, Y+20	; 0x14
    4be6:	c4 0c       	add	r12, r4
    4be8:	d5 1c       	adc	r13, r5
    4bea:	e6 1c       	adc	r14, r6
    4bec:	f7 1c       	adc	r15, r7
    4bee:	6c 0d       	add	r22, r12
    4bf0:	7d 1d       	adc	r23, r13
    4bf2:	8e 1d       	adc	r24, r14
    4bf4:	9f 1d       	adc	r25, r15
	minSignalNeeded /= peakVcselDuration_us;
<<<<<<< HEAD
    4bf6:	2b a5       	ldd	r18, Y+43	; 0x2b
    4bf8:	3c a5       	ldd	r19, Y+44	; 0x2c
    4bfa:	4d a5       	ldd	r20, Y+45	; 0x2d
    4bfc:	5e a5       	ldd	r21, Y+46	; 0x2e
    4bfe:	0e 94 14 2e 	call	0x5c28	; 0x5c28 <__udivmodsi4>
=======
    4942:	2b a5       	ldd	r18, Y+43	; 0x2b
    4944:	3c a5       	ldd	r19, Y+44	; 0x2c
    4946:	4d a5       	ldd	r20, Y+45	; 0x2d
    4948:	5e a5       	ldd	r21, Y+46	; 0x2e
    494a:	e2 d7       	rcall	.+4036   	; 0x5910 <__udivmodsi4>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
    4c02:	da 01       	movw	r26, r20
    4c04:	c9 01       	movw	r24, r18
    4c06:	07 2e       	mov	r0, r23
    4c08:	7e e0       	ldi	r23, 0x0E	; 14
    4c0a:	88 0f       	add	r24, r24
    4c0c:	99 1f       	adc	r25, r25
    4c0e:	aa 1f       	adc	r26, r26
    4c10:	bb 1f       	adc	r27, r27
    4c12:	7a 95       	dec	r23
    4c14:	d1 f7       	brne	.-12     	; 0x4c0a <VL53L0X_calc_dmax+0x27a>
    4c16:	70 2d       	mov	r23, r0

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
    4c18:	bc 01       	movw	r22, r24
    4c1a:	cd 01       	movw	r24, r26
    4c1c:	61 58       	subi	r22, 0x81	; 129
    4c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4c20:	8f 4f       	sbci	r24, 0xFF	; 255
    4c22:	9f 4f       	sbci	r25, 0xFF	; 255
	minSignalNeeded /= minSignalNeeded_p4;
<<<<<<< HEAD
    4c24:	2e ef       	ldi	r18, 0xFE	; 254
    4c26:	30 e0       	ldi	r19, 0x00	; 0
    4c28:	40 e0       	ldi	r20, 0x00	; 0
    4c2a:	50 e0       	ldi	r21, 0x00	; 0
    4c2c:	fd d7       	rcall	.+4090   	; 0x5c28 <__udivmodsi4>
    4c2e:	ca 01       	movw	r24, r20
    4c30:	b9 01       	movw	r22, r18
=======
    496e:	2e ef       	ldi	r18, 0xFE	; 254
    4970:	30 e0       	ldi	r19, 0x00	; 0
    4972:	40 e0       	ldi	r20, 0x00	; 0
    4974:	50 e0       	ldi	r21, 0x00	; 0
    4976:	cc d7       	rcall	.+3992   	; 0x5910 <__udivmodsi4>
    4978:	ca 01       	movw	r24, r20
    497a:	b9 01       	movw	r22, r18
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
<<<<<<< HEAD
    4c32:	29 85       	ldd	r18, Y+9	; 0x09
    4c34:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c36:	4b 85       	ldd	r20, Y+11	; 0x0b
    4c38:	5c 85       	ldd	r21, Y+12	; 0x0c
    4c3a:	e7 d7       	rcall	.+4046   	; 0x5c0a <__mulsi3>
    4c3c:	6c 50       	subi	r22, 0x0C	; 12
    4c3e:	7e 4f       	sbci	r23, 0xFE	; 254
    4c40:	8f 4f       	sbci	r24, 0xFF	; 255
    4c42:	9f 4f       	sbci	r25, 0xFF	; 255
    4c44:	0f 2e       	mov	r0, r31
    4c46:	f8 ee       	ldi	r31, 0xE8	; 232
    4c48:	8f 2e       	mov	r8, r31
    4c4a:	f3 e0       	ldi	r31, 0x03	; 3
    4c4c:	9f 2e       	mov	r9, r31
    4c4e:	a1 2c       	mov	r10, r1
    4c50:	b1 2c       	mov	r11, r1
    4c52:	f0 2d       	mov	r31, r0
    4c54:	a5 01       	movw	r20, r10
    4c56:	94 01       	movw	r18, r8
    4c58:	e7 d7       	rcall	.+4046   	; 0x5c28 <__udivmodsi4>
	minSignalNeeded <<= 4;

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    4c5a:	69 01       	movw	r12, r18
    4c5c:	7a 01       	movw	r14, r20
    4c5e:	cc 0c       	add	r12, r12
    4c60:	dd 1c       	adc	r13, r13
    4c62:	ee 1c       	adc	r14, r14
    4c64:	ff 1c       	adc	r15, r15
    4c66:	cc 0c       	add	r12, r12
    4c68:	dd 1c       	adc	r13, r13
    4c6a:	ee 1c       	adc	r14, r14
    4c6c:	ff 1c       	adc	r15, r15
    4c6e:	cc 0c       	add	r12, r12
    4c70:	dd 1c       	adc	r13, r13
    4c72:	ee 1c       	adc	r14, r14
    4c74:	ff 1c       	adc	r15, r15
    4c76:	cc 0c       	add	r12, r12
    4c78:	dd 1c       	adc	r13, r13
    4c7a:	ee 1c       	adc	r14, r14
    4c7c:	ff 1c       	adc	r15, r15
    4c7e:	44 ef       	ldi	r20, 0xF4	; 244
    4c80:	c4 0e       	add	r12, r20
    4c82:	41 e0       	ldi	r20, 0x01	; 1
    4c84:	d4 1e       	adc	r13, r20
    4c86:	e1 1c       	adc	r14, r1
    4c88:	f1 1c       	adc	r15, r1
    4c8a:	c7 01       	movw	r24, r14
    4c8c:	b6 01       	movw	r22, r12
    4c8e:	a5 01       	movw	r20, r10
    4c90:	94 01       	movw	r18, r8
    4c92:	ca d7       	rcall	.+3988   	; 0x5c28 <__udivmodsi4>
    4c94:	49 01       	movw	r8, r18
    4c96:	5a 01       	movw	r10, r20
=======
    497c:	29 85       	ldd	r18, Y+9	; 0x09
    497e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4980:	4b 85       	ldd	r20, Y+11	; 0x0b
    4982:	5c 85       	ldd	r21, Y+12	; 0x0c
    4984:	b6 d7       	rcall	.+3948   	; 0x58f2 <__mulsi3>
    4986:	6c 50       	subi	r22, 0x0C	; 12
    4988:	7e 4f       	sbci	r23, 0xFE	; 254
    498a:	8f 4f       	sbci	r24, 0xFF	; 255
    498c:	9f 4f       	sbci	r25, 0xFF	; 255
    498e:	0f 2e       	mov	r0, r31
    4990:	f8 ee       	ldi	r31, 0xE8	; 232
    4992:	8f 2e       	mov	r8, r31
    4994:	f3 e0       	ldi	r31, 0x03	; 3
    4996:	9f 2e       	mov	r9, r31
    4998:	a1 2c       	mov	r10, r1
    499a:	b1 2c       	mov	r11, r1
    499c:	f0 2d       	mov	r31, r0
    499e:	a5 01       	movw	r20, r10
    49a0:	94 01       	movw	r18, r8
    49a2:	b6 d7       	rcall	.+3948   	; 0x5910 <__udivmodsi4>
	minSignalNeeded <<= 4;

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    49a4:	69 01       	movw	r12, r18
    49a6:	7a 01       	movw	r14, r20
    49a8:	cc 0c       	add	r12, r12
    49aa:	dd 1c       	adc	r13, r13
    49ac:	ee 1c       	adc	r14, r14
    49ae:	ff 1c       	adc	r15, r15
    49b0:	cc 0c       	add	r12, r12
    49b2:	dd 1c       	adc	r13, r13
    49b4:	ee 1c       	adc	r14, r14
    49b6:	ff 1c       	adc	r15, r15
    49b8:	cc 0c       	add	r12, r12
    49ba:	dd 1c       	adc	r13, r13
    49bc:	ee 1c       	adc	r14, r14
    49be:	ff 1c       	adc	r15, r15
    49c0:	cc 0c       	add	r12, r12
    49c2:	dd 1c       	adc	r13, r13
    49c4:	ee 1c       	adc	r14, r14
    49c6:	ff 1c       	adc	r15, r15
    49c8:	44 ef       	ldi	r20, 0xF4	; 244
    49ca:	c4 0e       	add	r12, r20
    49cc:	41 e0       	ldi	r20, 0x01	; 1
    49ce:	d4 1e       	adc	r13, r20
    49d0:	e1 1c       	adc	r14, r1
    49d2:	f1 1c       	adc	r15, r1
    49d4:	c7 01       	movw	r24, r14
    49d6:	b6 01       	movw	r22, r12
    49d8:	a5 01       	movw	r20, r10
    49da:	94 01       	movw	r18, r8
    49dc:	99 d7       	rcall	.+3890   	; 0x5910 <__udivmodsi4>
    49de:	49 01       	movw	r8, r18
    49e0:	5a 01       	movw	r10, r20
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
    4c98:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c9a:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c9c:	af 85       	ldd	r26, Y+15	; 0x0f
    4c9e:	b8 89       	ldd	r27, Y+16	; 0x10
    4ca0:	80 96       	adiw	r24, 0x20	; 32
    4ca2:	a1 1d       	adc	r26, r1
    4ca4:	b1 1d       	adc	r27, r1
    4ca6:	bc 01       	movw	r22, r24
    4ca8:	cd 01       	movw	r24, r26
    4caa:	68 94       	set
    4cac:	15 f8       	bld	r1, 5
    4cae:	96 95       	lsr	r25
    4cb0:	87 95       	ror	r24
    4cb2:	77 95       	ror	r23
    4cb4:	67 95       	ror	r22
    4cb6:	16 94       	lsr	r1
    4cb8:	d1 f7       	brne	.-12     	; 0x4cae <VL53L0X_calc_dmax+0x31e>
    4cba:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <VL53L0X_isqrt>
    4cbe:	2b 01       	movw	r4, r22
    4cc0:	3c 01       	movw	r6, r24

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
<<<<<<< HEAD
    4cc2:	81 14       	cp	r8, r1
    4cc4:	91 04       	cpc	r9, r1
    4cc6:	a1 04       	cpc	r10, r1
    4cc8:	b1 04       	cpc	r11, r1
    4cca:	a9 f0       	breq	.+42     	; 0x4cf6 <VL53L0X_calc_dmax+0x366>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
    4ccc:	c7 01       	movw	r24, r14
    4cce:	b6 01       	movw	r22, r12
    4cd0:	20 ed       	ldi	r18, 0xD0	; 208
    4cd2:	37 e0       	ldi	r19, 0x07	; 7
    4cd4:	40 e0       	ldi	r20, 0x00	; 0
    4cd6:	50 e0       	ldi	r21, 0x00	; 0
    4cd8:	a7 d7       	rcall	.+3918   	; 0x5c28 <__udivmodsi4>
    4cda:	6d 85       	ldd	r22, Y+13	; 0x0d
    4cdc:	7e 85       	ldd	r23, Y+14	; 0x0e
    4cde:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ce0:	98 89       	ldd	r25, Y+16	; 0x10
    4ce2:	62 0f       	add	r22, r18
    4ce4:	73 1f       	adc	r23, r19
    4ce6:	84 1f       	adc	r24, r20
    4ce8:	95 1f       	adc	r25, r21
    4cea:	a5 01       	movw	r20, r10
    4cec:	94 01       	movw	r18, r8
    4cee:	9c d7       	rcall	.+3896   	; 0x5c28 <__udivmodsi4>
    4cf0:	ca 01       	movw	r24, r20
    4cf2:	b9 01       	movw	r22, r18
    4cf4:	03 c0       	rjmp	.+6      	; 0x4cfc <VL53L0X_calc_dmax+0x36c>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
    4cf6:	60 e0       	ldi	r22, 0x00	; 0
    4cf8:	70 e0       	ldi	r23, 0x00	; 0
    4cfa:	cb 01       	movw	r24, r22

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
    4cfc:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
    4d00:	64 15       	cp	r22, r4
    4d02:	75 05       	cpc	r23, r5
    4d04:	86 05       	cpc	r24, r6
    4d06:	97 05       	cpc	r25, r7
    4d08:	40 f0       	brcs	.+16     	; 0x4d1a <VL53L0X_calc_dmax+0x38a>
=======
    4a0c:	81 14       	cp	r8, r1
    4a0e:	91 04       	cpc	r9, r1
    4a10:	a1 04       	cpc	r10, r1
    4a12:	b1 04       	cpc	r11, r1
    4a14:	a9 f0       	breq	.+42     	; 0x4a40 <VL53L0X_calc_dmax+0x362>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
    4a16:	c7 01       	movw	r24, r14
    4a18:	b6 01       	movw	r22, r12
    4a1a:	20 ed       	ldi	r18, 0xD0	; 208
    4a1c:	37 e0       	ldi	r19, 0x07	; 7
    4a1e:	40 e0       	ldi	r20, 0x00	; 0
    4a20:	50 e0       	ldi	r21, 0x00	; 0
    4a22:	76 d7       	rcall	.+3820   	; 0x5910 <__udivmodsi4>
    4a24:	6d 85       	ldd	r22, Y+13	; 0x0d
    4a26:	7e 85       	ldd	r23, Y+14	; 0x0e
    4a28:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a2a:	98 89       	ldd	r25, Y+16	; 0x10
    4a2c:	62 0f       	add	r22, r18
    4a2e:	73 1f       	adc	r23, r19
    4a30:	84 1f       	adc	r24, r20
    4a32:	95 1f       	adc	r25, r21
    4a34:	a5 01       	movw	r20, r10
    4a36:	94 01       	movw	r18, r8
    4a38:	6b d7       	rcall	.+3798   	; 0x5910 <__udivmodsi4>
    4a3a:	ca 01       	movw	r24, r20
    4a3c:	b9 01       	movw	r22, r18
    4a3e:	03 c0       	rjmp	.+6      	; 0x4a46 <VL53L0X_calc_dmax+0x368>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
    4a40:	60 e0       	ldi	r22, 0x00	; 0
    4a42:	70 e0       	ldi	r23, 0x00	; 0
    4a44:	cb 01       	movw	r24, r22

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
    4a46:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
    4a4a:	64 15       	cp	r22, r4
    4a4c:	75 05       	cpc	r23, r5
    4a4e:	86 05       	cpc	r24, r6
    4a50:	97 05       	cpc	r25, r7
    4a52:	40 f0       	brcs	.+16     	; 0x4a64 <VL53L0X_calc_dmax+0x386>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);

	*pdmax_mm = dmaxDark;
<<<<<<< HEAD
    4d0a:	af a5       	ldd	r26, Y+47	; 0x2f
    4d0c:	b8 a9       	ldd	r27, Y+48	; 0x30
    4d0e:	4d 92       	st	X+, r4
    4d10:	5d 92       	st	X+, r5
    4d12:	6d 92       	st	X+, r6
    4d14:	7c 92       	st	X, r7
    4d16:	13 97       	sbiw	r26, 0x03	; 3
    4d18:	06 c0       	rjmp	.+12     	; 0x4d26 <VL53L0X_calc_dmax+0x396>
	if (dmaxDark > dmaxAmbient)
		*pdmax_mm = dmaxAmbient;
    4d1a:	ef a5       	ldd	r30, Y+47	; 0x2f
    4d1c:	f8 a9       	ldd	r31, Y+48	; 0x30
    4d1e:	60 83       	st	Z, r22
    4d20:	71 83       	std	Z+1, r23	; 0x01
    4d22:	82 83       	std	Z+2, r24	; 0x02
    4d24:	93 83       	std	Z+3, r25	; 0x03
=======
    4a54:	af a5       	ldd	r26, Y+47	; 0x2f
    4a56:	b8 a9       	ldd	r27, Y+48	; 0x30
    4a58:	4d 92       	st	X+, r4
    4a5a:	5d 92       	st	X+, r5
    4a5c:	6d 92       	st	X+, r6
    4a5e:	7c 92       	st	X, r7
    4a60:	13 97       	sbiw	r26, 0x03	; 3
    4a62:	06 c0       	rjmp	.+12     	; 0x4a70 <VL53L0X_calc_dmax+0x392>
	if (dmaxDark > dmaxAmbient)
		*pdmax_mm = dmaxAmbient;
    4a64:	ef a5       	ldd	r30, Y+47	; 0x2f
    4a66:	f8 a9       	ldd	r31, Y+48	; 0x30
    4a68:	60 83       	st	Z, r22
    4a6a:	71 83       	std	Z+1, r23	; 0x01
    4a6c:	82 83       	std	Z+2, r24	; 0x02
    4a6e:	93 83       	std	Z+3, r25	; 0x03
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	LOG_FUNCTION_END(Status);

	return Status;
}
<<<<<<< HEAD
    4d26:	80 e0       	ldi	r24, 0x00	; 0
    4d28:	64 96       	adiw	r28, 0x14	; 20
    4d2a:	0f b6       	in	r0, 0x3f	; 63
    4d2c:	f8 94       	cli
    4d2e:	de bf       	out	0x3e, r29	; 62
    4d30:	0f be       	out	0x3f, r0	; 63
    4d32:	cd bf       	out	0x3d, r28	; 61
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	ef 90       	pop	r14
    4d40:	df 90       	pop	r13
    4d42:	cf 90       	pop	r12
    4d44:	bf 90       	pop	r11
    4d46:	af 90       	pop	r10
    4d48:	9f 90       	pop	r9
    4d4a:	8f 90       	pop	r8
    4d4c:	7f 90       	pop	r7
    4d4e:	6f 90       	pop	r6
    4d50:	5f 90       	pop	r5
    4d52:	4f 90       	pop	r4
    4d54:	08 95       	ret

00004d56 <VL53L0X_calc_sigma_estimate>:
=======
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	64 96       	adiw	r28, 0x14	; 20
    4a74:	0f b6       	in	r0, 0x3f	; 63
    4a76:	f8 94       	cli
    4a78:	de bf       	out	0x3e, r29	; 62
    4a7a:	0f be       	out	0x3f, r0	; 63
    4a7c:	cd bf       	out	0x3d, r28	; 61
    4a7e:	df 91       	pop	r29
    4a80:	cf 91       	pop	r28
    4a82:	1f 91       	pop	r17
    4a84:	0f 91       	pop	r16
    4a86:	ff 90       	pop	r15
    4a88:	ef 90       	pop	r14
    4a8a:	df 90       	pop	r13
    4a8c:	cf 90       	pop	r12
    4a8e:	bf 90       	pop	r11
    4a90:	af 90       	pop	r10
    4a92:	9f 90       	pop	r9
    4a94:	8f 90       	pop	r8
    4a96:	7f 90       	pop	r7
    4a98:	6f 90       	pop	r6
    4a9a:	5f 90       	pop	r5
    4a9c:	4f 90       	pop	r4
    4a9e:	08 95       	ret

00004aa0 <VL53L0X_calc_sigma_estimate>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
    4d56:	2f 92       	push	r2
    4d58:	3f 92       	push	r3
    4d5a:	4f 92       	push	r4
    4d5c:	5f 92       	push	r5
    4d5e:	6f 92       	push	r6
    4d60:	7f 92       	push	r7
    4d62:	8f 92       	push	r8
    4d64:	9f 92       	push	r9
    4d66:	af 92       	push	r10
    4d68:	bf 92       	push	r11
    4d6a:	cf 92       	push	r12
    4d6c:	df 92       	push	r13
    4d6e:	ef 92       	push	r14
    4d70:	ff 92       	push	r15
    4d72:	0f 93       	push	r16
    4d74:	1f 93       	push	r17
    4d76:	cf 93       	push	r28
    4d78:	df 93       	push	r29
    4d7a:	cd b7       	in	r28, 0x3d	; 61
    4d7c:	de b7       	in	r29, 0x3e	; 62
    4d7e:	a9 97       	sbiw	r28, 0x29	; 41
    4d80:	0f b6       	in	r0, 0x3f	; 63
    4d82:	f8 94       	cli
    4d84:	de bf       	out	0x3e, r29	; 62
    4d86:	0f be       	out	0x3f, r0	; 63
    4d88:	cd bf       	out	0x3d, r28	; 61
    4d8a:	1c 01       	movw	r2, r24
    4d8c:	7a 87       	std	Y+10, r23	; 0x0a
    4d8e:	69 87       	std	Y+9, r22	; 0x09
    4d90:	58 a3       	std	Y+32, r21	; 0x20
    4d92:	4f 8f       	std	Y+31, r20	; 0x1f
    4d94:	3a 8f       	std	Y+26, r19	; 0x1a
    4d96:	29 8f       	std	Y+25, r18	; 0x19
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
    4d98:	fc 01       	movw	r30, r24
    4d9a:	85 8d       	ldd	r24, Z+29	; 0x1d
    4d9c:	96 8d       	ldd	r25, Z+30	; 0x1e
    4d9e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4da0:	b0 a1       	ldd	r27, Z+32	; 0x20
    4da2:	89 83       	std	Y+1, r24	; 0x01
    4da4:	9a 83       	std	Y+2, r25	; 0x02
    4da6:	ab 83       	std	Y+3, r26	; 0x03
    4da8:	bc 83       	std	Y+4, r27	; 0x04
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
    4daa:	db 01       	movw	r26, r22
    4dac:	50 96       	adiw	r26, 0x10	; 16
    4dae:	2d 91       	ld	r18, X+
    4db0:	3d 91       	ld	r19, X+
    4db2:	4d 91       	ld	r20, X+
    4db4:	5c 91       	ld	r21, X
    4db6:	53 97       	sbiw	r26, 0x13	; 19
    4db8:	29 8b       	std	Y+17, r18	; 0x11
    4dba:	3a 8b       	std	Y+18, r19	; 0x12
    4dbc:	4b 8b       	std	Y+19, r20	; 0x13
    4dbe:	5c 8b       	std	Y+20, r21	; 0x14

	correctedSignalRate_mcps =
    4dc0:	1c 96       	adiw	r26, 0x0c	; 12
    4dc2:	2d 91       	ld	r18, X+
    4dc4:	3d 91       	ld	r19, X+
    4dc6:	4d 91       	ld	r20, X+
    4dc8:	5c 91       	ld	r21, X
    4dca:	1f 97       	sbiw	r26, 0x0f	; 15
    4dcc:	2d a3       	std	Y+37, r18	; 0x25
    4dce:	3e a3       	std	Y+38, r19	; 0x26
    4dd0:	4f a3       	std	Y+39, r20	; 0x27
    4dd2:	58 a7       	std	Y+40, r21	; 0x28
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
    4dd4:	ae 01       	movw	r20, r28
    4dd6:	4b 5f       	subi	r20, 0xFB	; 251
    4dd8:	5f 4f       	sbci	r21, 0xFF	; 255
    4dda:	c1 01       	movw	r24, r2
    4ddc:	9e dd       	rcall	.-1220   	; 0x491a <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
    4dde:	ae 01       	movw	r20, r28
    4de0:	4f 5f       	subi	r20, 0xFF	; 255
    4de2:	5f 4f       	sbci	r21, 0xFF	; 255
    4de4:	69 85       	ldd	r22, Y+9	; 0x09
    4de6:	7a 85       	ldd	r23, Y+10	; 0x0a
    4de8:	c1 01       	movw	r24, r2
    4dea:	4e dd       	rcall	.-1380   	; 0x4888 <VL53L0X_get_total_xtalk_rate>
    4dec:	18 2f       	mov	r17, r24
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
    4dee:	81 11       	cpse	r24, r1
    4df0:	4f c2       	rjmp	.+1182   	; 0x5290 <VL53L0X_calc_sigma_estimate+0x53a>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4df2:	f1 01       	movw	r30, r2
    4df4:	ed 52       	subi	r30, 0x2D	; 45
    4df6:	ff 4f       	sbci	r31, 0xFF	; 255
    4df8:	00 81       	ld	r16, Z
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4dfa:	34 97       	sbiw	r30, 0x04	; 4
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    4dfc:	40 81       	ld	r20, Z
    4dfe:	51 81       	ldd	r21, Z+1	; 0x01
    4e00:	62 81       	ldd	r22, Z+2	; 0x02
    4e02:	73 81       	ldd	r23, Z+3	; 0x03
    4e04:	20 2f       	mov	r18, r16
    4e06:	c1 01       	movw	r24, r2
    4e08:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <VL53L0X_calc_timeout_mclks>
    4e0c:	2b 01       	movw	r4, r22
    4e0e:	3c 01       	movw	r6, r24
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    4e10:	f1 01       	movw	r30, r2
    4e12:	ec 52       	subi	r30, 0x2C	; 44
    4e14:	ff 4f       	sbci	r31, 0xFF	; 255
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    4e16:	40 81       	ld	r20, Z
    4e18:	51 81       	ldd	r21, Z+1	; 0x01
    4e1a:	62 81       	ldd	r22, Z+2	; 0x02
    4e1c:	73 81       	ldd	r23, Z+3	; 0x03
    4e1e:	34 96       	adiw	r30, 0x04	; 4
    4e20:	20 81       	ld	r18, Z
    4e22:	c1 01       	movw	r24, r2
    4e24:	0e 94 fd 1e 	call	0x3dfa	; 0x3dfa <VL53L0X_calc_timeout_mclks>
    4e28:	4b 01       	movw	r8, r22
    4e2a:	5c 01       	movw	r10, r24
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
    4e2c:	08 30       	cpi	r16, 0x08	; 8
    4e2e:	49 f4       	brne	.+18     	; 0x4e42 <VL53L0X_calc_sigma_estimate+0xec>
			vcselWidth = 2;
    4e30:	22 e0       	ldi	r18, 0x02	; 2
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	40 e0       	ldi	r20, 0x00	; 0
    4e36:	50 e0       	ldi	r21, 0x00	; 0
    4e38:	2d 8b       	std	Y+21, r18	; 0x15
    4e3a:	3e 8b       	std	Y+22, r19	; 0x16
    4e3c:	4f 8b       	std	Y+23, r20	; 0x17
    4e3e:	58 8f       	std	Y+24, r21	; 0x18
    4e40:	08 c0       	rjmp	.+16     	; 0x4e52 <VL53L0X_calc_sigma_estimate+0xfc>
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
    4e42:	83 e0       	ldi	r24, 0x03	; 3
    4e44:	90 e0       	ldi	r25, 0x00	; 0
    4e46:	a0 e0       	ldi	r26, 0x00	; 0
    4e48:	b0 e0       	ldi	r27, 0x00	; 0
    4e4a:	8d 8b       	std	Y+21, r24	; 0x15
    4e4c:	9e 8b       	std	Y+22, r25	; 0x16
    4e4e:	af 8b       	std	Y+23, r26	; 0x17
    4e50:	b8 8f       	std	Y+24, r27	; 0x18


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
    4e52:	cd 80       	ldd	r12, Y+5	; 0x05
    4e54:	de 80       	ldd	r13, Y+6	; 0x06
    4e56:	ef 80       	ldd	r14, Y+7	; 0x07
    4e58:	f8 84       	ldd	r15, Y+8	; 0x08
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
<<<<<<< HEAD
    4e5a:	a8 ee       	ldi	r26, 0xE8	; 232
    4e5c:	b3 e0       	ldi	r27, 0x03	; 3
    4e5e:	a7 01       	movw	r20, r14
    4e60:	96 01       	movw	r18, r12
    4e62:	1c d7       	rcall	.+3640   	; 0x5c9c <__muluhisi3>
    4e64:	dc 01       	movw	r26, r24
    4e66:	cb 01       	movw	r24, r22
    4e68:	90 58       	subi	r25, 0x80	; 128
    4e6a:	af 4f       	sbci	r26, 0xFF	; 255
    4e6c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e6e:	9d 01       	movw	r18, r26
    4e70:	44 27       	eor	r20, r20
    4e72:	55 27       	eor	r21, r21
    4e74:	2d 87       	std	Y+13, r18	; 0x0d
    4e76:	3e 87       	std	Y+14, r19	; 0x0e
    4e78:	4f 87       	std	Y+15, r20	; 0x0f
    4e7a:	58 8b       	std	Y+16, r21	; 0x10
=======
    4ba4:	a8 ee       	ldi	r26, 0xE8	; 232
    4ba6:	b3 e0       	ldi	r27, 0x03	; 3
    4ba8:	a7 01       	movw	r20, r14
    4baa:	96 01       	movw	r18, r12
    4bac:	e2 d6       	rcall	.+3524   	; 0x5972 <__muluhisi3>
    4bae:	dc 01       	movw	r26, r24
    4bb0:	cb 01       	movw	r24, r22
    4bb2:	90 58       	subi	r25, 0x80	; 128
    4bb4:	af 4f       	sbci	r26, 0xFF	; 255
    4bb6:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb8:	9d 01       	movw	r18, r26
    4bba:	44 27       	eor	r20, r20
    4bbc:	55 27       	eor	r21, r21
    4bbe:	2d 87       	std	Y+13, r18	; 0x0d
    4bc0:	3e 87       	std	Y+14, r19	; 0x0e
    4bc2:	4f 87       	std	Y+15, r20	; 0x0f
    4bc4:	58 8b       	std	Y+16, r21	; 0x10
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
    4e7c:	89 81       	ldd	r24, Y+1	; 0x01
    4e7e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e80:	ab 81       	ldd	r26, Y+3	; 0x03
    4e82:	bc 81       	ldd	r27, Y+4	; 0x04
    4e84:	8b 8f       	std	Y+27, r24	; 0x1b
    4e86:	9c 8f       	std	Y+28, r25	; 0x1c
    4e88:	ad 8f       	std	Y+29, r26	; 0x1d
    4e8a:	be 8f       	std	Y+30, r27	; 0x1e
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
    4e8c:	90 e8       	ldi	r25, 0x80	; 128
    4e8e:	c9 0e       	add	r12, r25
    4e90:	d1 1c       	adc	r13, r1
    4e92:	e1 1c       	adc	r14, r1
    4e94:	f1 1c       	adc	r15, r1
    4e96:	cd 2c       	mov	r12, r13
    4e98:	de 2c       	mov	r13, r14
    4e9a:	ef 2c       	mov	r14, r15
    4e9c:	ff 24       	eor	r15, r15

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
    4e9e:	5e 2d       	mov	r21, r14
    4ea0:	4d 2d       	mov	r20, r13
    4ea2:	3c 2d       	mov	r19, r12
    4ea4:	22 27       	eor	r18, r18
    4ea6:	29 a3       	std	Y+33, r18	; 0x21
    4ea8:	3a a3       	std	Y+34, r19	; 0x22
    4eaa:	4b a3       	std	Y+35, r20	; 0x23
    4eac:	5c a3       	std	Y+36, r21	; 0x24
    4eae:	2d 83       	std	Y+5, r18	; 0x05
    4eb0:	3e 83       	std	Y+6, r19	; 0x06
    4eb2:	4f 83       	std	Y+7, r20	; 0x07
    4eb4:	58 87       	std	Y+8, r21	; 0x08
	if (Status != VL53L0X_ERROR_NONE) {
		LOG_FUNCTION_END(Status);
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
    4eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    4eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    4eba:	af 85       	ldd	r26, Y+15	; 0x0f
    4ebc:	b8 89       	ldd	r27, Y+16	; 0x10
    4ebe:	89 2b       	or	r24, r25
    4ec0:	8a 2b       	or	r24, r26
    4ec2:	8b 2b       	or	r24, r27
    4ec4:	c9 f4       	brne	.+50     	; 0x4ef8 <VL53L0X_calc_sigma_estimate+0x1a2>
		*pSigmaEstimate = cSigmaEstMax;
    4ec6:	8e ea       	ldi	r24, 0xAE	; 174
    4ec8:	97 e8       	ldi	r25, 0x87	; 135
    4eca:	af e8       	ldi	r26, 0x8F	; 143
    4ecc:	b2 e0       	ldi	r27, 0x02	; 2
    4ece:	ef 8d       	ldd	r30, Y+31	; 0x1f
    4ed0:	f8 a1       	ldd	r31, Y+32	; 0x20
    4ed2:	80 83       	st	Z, r24
    4ed4:	91 83       	std	Z+1, r25	; 0x01
    4ed6:	a2 83       	std	Z+2, r26	; 0x02
    4ed8:	b3 83       	std	Z+3, r27	; 0x03
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
    4eda:	f1 01       	movw	r30, r2
    4edc:	e6 5d       	subi	r30, 0xD6	; 214
    4ede:	fe 4f       	sbci	r31, 0xFE	; 254
    4ee0:	80 83       	st	Z, r24
    4ee2:	91 83       	std	Z+1, r25	; 0x01
    4ee4:	a2 83       	std	Z+2, r26	; 0x02
    4ee6:	b3 83       	std	Z+3, r27	; 0x03
		*pDmax_mm = 0;
    4ee8:	a9 8d       	ldd	r26, Y+25	; 0x19
    4eea:	ba 8d       	ldd	r27, Y+26	; 0x1a
    4eec:	1d 92       	st	X+, r1
    4eee:	1d 92       	st	X+, r1
    4ef0:	1d 92       	st	X+, r1
    4ef2:	1c 92       	st	X, r1
    4ef4:	13 97       	sbiw	r26, 0x03	; 3
    4ef6:	cc c1       	rjmp	.+920    	; 0x5290 <VL53L0X_calc_sigma_estimate+0x53a>
			vcselWidth = 2;


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
<<<<<<< HEAD
    4ef8:	84 0c       	add	r8, r4
    4efa:	95 1c       	adc	r9, r5
    4efc:	a6 1c       	adc	r10, r6
    4efe:	b7 1c       	adc	r11, r7
    4f00:	a5 01       	movw	r20, r10
    4f02:	94 01       	movw	r18, r8
    4f04:	01 2e       	mov	r0, r17
    4f06:	1b e0       	ldi	r17, 0x0B	; 11
    4f08:	22 0f       	add	r18, r18
    4f0a:	33 1f       	adc	r19, r19
    4f0c:	44 1f       	adc	r20, r20
    4f0e:	55 1f       	adc	r21, r21
    4f10:	1a 95       	dec	r17
    4f12:	d1 f7       	brne	.-12     	; 0x4f08 <VL53L0X_calc_sigma_estimate+0x1b2>
    4f14:	10 2d       	mov	r17, r0
    4f16:	6d 89       	ldd	r22, Y+21	; 0x15
    4f18:	7e 89       	ldd	r23, Y+22	; 0x16
    4f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    4f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    4f1e:	75 d6       	rcall	.+3306   	; 0x5c0a <__mulsi3>
    4f20:	6c 50       	subi	r22, 0x0C	; 12
    4f22:	7e 4f       	sbci	r23, 0xFE	; 254
    4f24:	8f 4f       	sbci	r24, 0xFF	; 255
    4f26:	9f 4f       	sbci	r25, 0xFF	; 255
    4f28:	0f 2e       	mov	r0, r31
    4f2a:	f8 ee       	ldi	r31, 0xE8	; 232
    4f2c:	8f 2e       	mov	r8, r31
    4f2e:	f3 e0       	ldi	r31, 0x03	; 3
    4f30:	9f 2e       	mov	r9, r31
    4f32:	a1 2c       	mov	r10, r1
    4f34:	b1 2c       	mov	r11, r1
    4f36:	f0 2d       	mov	r31, r0
    4f38:	a5 01       	movw	r20, r10
    4f3a:	94 01       	movw	r18, r8
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    4f3c:	75 d6       	rcall	.+3306   	; 0x5c28 <__udivmodsi4>
    4f3e:	a7 e7       	ldi	r26, 0x77	; 119
    4f40:	b6 e0       	ldi	r27, 0x06	; 6
    4f42:	ac d6       	rcall	.+3416   	; 0x5c9c <__muluhisi3>
    4f44:	6c 50       	subi	r22, 0x0C	; 12
    4f46:	7e 4f       	sbci	r23, 0xFE	; 254
    4f48:	8f 4f       	sbci	r24, 0xFF	; 255
    4f4a:	9f 4f       	sbci	r25, 0xFF	; 255
    4f4c:	a5 01       	movw	r20, r10
    4f4e:	94 01       	movw	r18, r8
    4f50:	6b d6       	rcall	.+3286   	; 0x5c28 <__udivmodsi4>
    4f52:	2d 8b       	std	Y+21, r18	; 0x15
    4f54:	39 a7       	std	Y+41, r19	; 0x29
    4f56:	04 2f       	mov	r16, r20
=======
    4c42:	84 0c       	add	r8, r4
    4c44:	95 1c       	adc	r9, r5
    4c46:	a6 1c       	adc	r10, r6
    4c48:	b7 1c       	adc	r11, r7
    4c4a:	a5 01       	movw	r20, r10
    4c4c:	94 01       	movw	r18, r8
    4c4e:	01 2e       	mov	r0, r17
    4c50:	1b e0       	ldi	r17, 0x0B	; 11
    4c52:	22 0f       	add	r18, r18
    4c54:	33 1f       	adc	r19, r19
    4c56:	44 1f       	adc	r20, r20
    4c58:	55 1f       	adc	r21, r21
    4c5a:	1a 95       	dec	r17
    4c5c:	d1 f7       	brne	.-12     	; 0x4c52 <VL53L0X_calc_sigma_estimate+0x1b2>
    4c5e:	10 2d       	mov	r17, r0
    4c60:	6d 89       	ldd	r22, Y+21	; 0x15
    4c62:	7e 89       	ldd	r23, Y+22	; 0x16
    4c64:	8f 89       	ldd	r24, Y+23	; 0x17
    4c66:	98 8d       	ldd	r25, Y+24	; 0x18
    4c68:	44 d6       	rcall	.+3208   	; 0x58f2 <__mulsi3>
    4c6a:	6c 50       	subi	r22, 0x0C	; 12
    4c6c:	7e 4f       	sbci	r23, 0xFE	; 254
    4c6e:	8f 4f       	sbci	r24, 0xFF	; 255
    4c70:	9f 4f       	sbci	r25, 0xFF	; 255
    4c72:	0f 2e       	mov	r0, r31
    4c74:	f8 ee       	ldi	r31, 0xE8	; 232
    4c76:	8f 2e       	mov	r8, r31
    4c78:	f3 e0       	ldi	r31, 0x03	; 3
    4c7a:	9f 2e       	mov	r9, r31
    4c7c:	a1 2c       	mov	r10, r1
    4c7e:	b1 2c       	mov	r11, r1
    4c80:	f0 2d       	mov	r31, r0
    4c82:	a5 01       	movw	r20, r10
    4c84:	94 01       	movw	r18, r8
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    4c86:	44 d6       	rcall	.+3208   	; 0x5910 <__udivmodsi4>
    4c88:	a7 e7       	ldi	r26, 0x77	; 119
    4c8a:	b6 e0       	ldi	r27, 0x06	; 6
    4c8c:	72 d6       	rcall	.+3300   	; 0x5972 <__muluhisi3>
    4c8e:	6c 50       	subi	r22, 0x0C	; 12
    4c90:	7e 4f       	sbci	r23, 0xFE	; 254
    4c92:	8f 4f       	sbci	r24, 0xFF	; 255
    4c94:	9f 4f       	sbci	r25, 0xFF	; 255
    4c96:	a5 01       	movw	r20, r10
    4c98:	94 01       	movw	r18, r8
    4c9a:	3a d6       	rcall	.+3188   	; 0x5910 <__udivmodsi4>
    4c9c:	2d 8b       	std	Y+21, r18	; 0x15
    4c9e:	39 a7       	std	Y+41, r19	; 0x29
    4ca0:	04 2f       	mov	r16, r20
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
<<<<<<< HEAD
    4f58:	15 2f       	mov	r17, r21
    4f5a:	c7 01       	movw	r24, r14
    4f5c:	b6 01       	movw	r22, r12
    4f5e:	55 d6       	rcall	.+3242   	; 0x5c0a <__mulsi3>
    4f60:	dc 01       	movw	r26, r24
    4f62:	cb 01       	movw	r24, r22
    4f64:	80 58       	subi	r24, 0x80	; 128
    4f66:	9f 4f       	sbci	r25, 0xFF	; 255
    4f68:	af 4f       	sbci	r26, 0xFF	; 255
    4f6a:	bf 4f       	sbci	r27, 0xFF	; 255
    4f6c:	49 2e       	mov	r4, r25
    4f6e:	5a 2e       	mov	r5, r26
    4f70:	6b 2e       	mov	r6, r27
    4f72:	77 24       	eor	r7, r7
=======
    4ca2:	15 2f       	mov	r17, r21
    4ca4:	c7 01       	movw	r24, r14
    4ca6:	b6 01       	movw	r22, r12
    4ca8:	24 d6       	rcall	.+3144   	; 0x58f2 <__mulsi3>
    4caa:	dc 01       	movw	r26, r24
    4cac:	cb 01       	movw	r24, r22
    4cae:	80 58       	subi	r24, 0x80	; 128
    4cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb2:	af 4f       	sbci	r26, 0xFF	; 255
    4cb4:	bf 4f       	sbci	r27, 0xFF	; 255
    4cb6:	49 2e       	mov	r4, r25
    4cb8:	5a 2e       	mov	r5, r26
    4cba:	6b 2e       	mov	r6, r27
    4cbc:	77 24       	eor	r7, r7
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	if (peakSignalRate_kcps == 0) {
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
	} else {
		if (vcselTotalEventsRtn < 1)
    4f74:	41 14       	cp	r4, r1
    4f76:	51 04       	cpc	r5, r1
    4f78:	61 04       	cpc	r6, r1
    4f7a:	71 04       	cpc	r7, r1
    4f7c:	21 f4       	brne	.+8      	; 0x4f86 <VL53L0X_calc_sigma_estimate+0x230>
			vcselTotalEventsRtn = 1;
<<<<<<< HEAD
    4f7e:	41 2c       	mov	r4, r1
    4f80:	51 2c       	mov	r5, r1
    4f82:	32 01       	movw	r6, r4
    4f84:	43 94       	inc	r4
    4f86:	a8 ee       	ldi	r26, 0xE8	; 232
    4f88:	b3 e0       	ldi	r27, 0x03	; 3
    4f8a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4f8c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4f8e:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4f90:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4f92:	84 d6       	rcall	.+3336   	; 0x5c9c <__muluhisi3>
    4f94:	4b 01       	movw	r8, r22
    4f96:	5c 01       	movw	r10, r24
    4f98:	61 30       	cpi	r22, 0x01	; 1
    4f9a:	71 05       	cpc	r23, r1
    4f9c:	82 43       	sbci	r24, 0x32	; 50
    4f9e:	91 05       	cpc	r25, r1
    4fa0:	38 f0       	brcs	.+14     	; 0x4fb0 <VL53L0X_calc_sigma_estimate+0x25a>
    4fa2:	0f 2e       	mov	r0, r31
    4fa4:	81 2c       	mov	r8, r1
    4fa6:	91 2c       	mov	r9, r1
    4fa8:	f2 e3       	ldi	r31, 0x32	; 50
    4faa:	af 2e       	mov	r10, r31
    4fac:	b1 2c       	mov	r11, r1
=======
    4cc8:	41 2c       	mov	r4, r1
    4cca:	51 2c       	mov	r5, r1
    4ccc:	32 01       	movw	r6, r4
    4cce:	43 94       	inc	r4
    4cd0:	a8 ee       	ldi	r26, 0xE8	; 232
    4cd2:	b3 e0       	ldi	r27, 0x03	; 3
    4cd4:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4cd6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4cd8:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4cda:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4cdc:	4a d6       	rcall	.+3220   	; 0x5972 <__muluhisi3>
    4cde:	4b 01       	movw	r8, r22
    4ce0:	5c 01       	movw	r10, r24
    4ce2:	61 30       	cpi	r22, 0x01	; 1
    4ce4:	71 05       	cpc	r23, r1
    4ce6:	82 43       	sbci	r24, 0x32	; 50
    4ce8:	91 05       	cpc	r25, r1
    4cea:	38 f0       	brcs	.+14     	; 0x4cfa <VL53L0X_calc_sigma_estimate+0x25a>
    4cec:	0f 2e       	mov	r0, r31
    4cee:	81 2c       	mov	r8, r1
    4cf0:	91 2c       	mov	r9, r1
    4cf2:	f2 e3       	ldi	r31, 0x32	; 50
    4cf4:	af 2e       	mov	r10, r31
    4cf6:	b1 2c       	mov	r11, r1
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
<<<<<<< HEAD
    4fae:	f0 2d       	mov	r31, r0
    4fb0:	a8 ee       	ldi	r26, 0xE8	; 232
    4fb2:	b3 e0       	ldi	r27, 0x03	; 3
    4fb4:	29 89       	ldd	r18, Y+17	; 0x11
    4fb6:	3a 89       	ldd	r19, Y+18	; 0x12
    4fb8:	4b 89       	ldd	r20, Y+19	; 0x13
    4fba:	5c 89       	ldd	r21, Y+20	; 0x14
    4fbc:	6f d6       	rcall	.+3294   	; 0x5c9c <__muluhisi3>
    4fbe:	66 27       	eor	r22, r22
=======
    4cf8:	f0 2d       	mov	r31, r0
    4cfa:	a8 ee       	ldi	r26, 0xE8	; 232
    4cfc:	b3 e0       	ldi	r27, 0x03	; 3
    4cfe:	29 89       	ldd	r18, Y+17	; 0x11
    4d00:	3a 89       	ldd	r19, Y+18	; 0x12
    4d02:	4b 89       	ldd	r20, Y+19	; 0x13
    4d04:	5c 89       	ldd	r21, Y+20	; 0x14
    4d06:	35 d6       	rcall	.+3178   	; 0x5972 <__muluhisi3>
    4d08:	66 27       	eor	r22, r22
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
<<<<<<< HEAD
    4fc0:	77 27       	eor	r23, r23
    4fc2:	2d 85       	ldd	r18, Y+13	; 0x0d
    4fc4:	3e 85       	ldd	r19, Y+14	; 0x0e
    4fc6:	4f 85       	ldd	r20, Y+15	; 0x0f
    4fc8:	58 89       	ldd	r21, Y+16	; 0x10
    4fca:	2e d6       	rcall	.+3164   	; 0x5c28 <__udivmodsi4>
    4fcc:	27 36       	cpi	r18, 0x67	; 103
    4fce:	e6 e6       	ldi	r30, 0x66	; 102
    4fd0:	3e 07       	cpc	r19, r30
    4fd2:	4e 07       	cpc	r20, r30
    4fd4:	51 05       	cpc	r21, r1
    4fd6:	20 f0       	brcs	.+8      	; 0x4fe0 <VL53L0X_calc_sigma_estimate+0x28a>
    4fd8:	26 e6       	ldi	r18, 0x66	; 102
    4fda:	36 e6       	ldi	r19, 0x66	; 102
    4fdc:	46 e6       	ldi	r20, 0x66	; 102
    4fde:	50 e0       	ldi	r21, 0x00	; 0
    4fe0:	a8 e5       	ldi	r26, 0x58	; 88
    4fe2:	b2 e0       	ldi	r27, 0x02	; 2
    4fe4:	5b d6       	rcall	.+3254   	; 0x5c9c <__muluhisi3>
    4fe6:	69 8b       	std	Y+17, r22	; 0x11
    4fe8:	7a 8b       	std	Y+18, r23	; 0x12
    4fea:	8b 8b       	std	Y+19, r24	; 0x13
    4fec:	9c 8b       	std	Y+20, r25	; 0x14
=======
    4d0a:	77 27       	eor	r23, r23
    4d0c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d0e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d10:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d12:	58 89       	ldd	r21, Y+16	; 0x10
    4d14:	fd d5       	rcall	.+3066   	; 0x5910 <__udivmodsi4>
    4d16:	27 36       	cpi	r18, 0x67	; 103
    4d18:	e6 e6       	ldi	r30, 0x66	; 102
    4d1a:	3e 07       	cpc	r19, r30
    4d1c:	4e 07       	cpc	r20, r30
    4d1e:	51 05       	cpc	r21, r1
    4d20:	20 f0       	brcs	.+8      	; 0x4d2a <VL53L0X_calc_sigma_estimate+0x28a>
    4d22:	26 e6       	ldi	r18, 0x66	; 102
    4d24:	36 e6       	ldi	r19, 0x66	; 102
    4d26:	46 e6       	ldi	r20, 0x66	; 102
    4d28:	50 e0       	ldi	r21, 0x00	; 0
    4d2a:	a8 e5       	ldi	r26, 0x58	; 88
    4d2c:	b2 e0       	ldi	r27, 0x02	; 2
    4d2e:	21 d6       	rcall	.+3138   	; 0x5972 <__muluhisi3>
    4d30:	69 8b       	std	Y+17, r22	; 0x11
    4d32:	7a 8b       	std	Y+18, r23	; 0x12
    4d34:	8b 8b       	std	Y+19, r24	; 0x13
    4d36:	9c 8b       	std	Y+20, r25	; 0x14
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
    4fee:	d3 01       	movw	r26, r6
    4ff0:	c2 01       	movw	r24, r4
    4ff2:	88 0f       	add	r24, r24
    4ff4:	99 1f       	adc	r25, r25
    4ff6:	aa 1f       	adc	r26, r26
    4ff8:	bb 1f       	adc	r27, r27
    4ffa:	84 0d       	add	r24, r4
    4ffc:	95 1d       	adc	r25, r5
    4ffe:	a6 1d       	adc	r26, r6
    5000:	b7 1d       	adc	r27, r7
    5002:	bc 01       	movw	r22, r24
    5004:	cd 01       	movw	r24, r26
    5006:	66 0f       	add	r22, r22
    5008:	77 1f       	adc	r23, r23
    500a:	88 1f       	adc	r24, r24
    500c:	99 1f       	adc	r25, r25
    500e:	66 0f       	add	r22, r22
    5010:	77 1f       	adc	r23, r23
    5012:	88 1f       	adc	r24, r24
    5014:	99 1f       	adc	r25, r25
    5016:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <VL53L0X_isqrt>
    501a:	6b 8f       	std	Y+27, r22	; 0x1b
    501c:	7c 8f       	std	Y+28, r23	; 0x1c
    501e:	8d 8f       	std	Y+29, r24	; 0x1d
    5020:	9e 8f       	std	Y+30, r25	; 0x1e
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
<<<<<<< HEAD
    5022:	2d 85       	ldd	r18, Y+13	; 0x0d
    5024:	3e 85       	ldd	r19, Y+14	; 0x0e
    5026:	4f 85       	ldd	r20, Y+15	; 0x0f
    5028:	58 89       	ldd	r21, Y+16	; 0x10
    502a:	79 01       	movw	r14, r18
    502c:	dd 24       	eor	r13, r13
    502e:	cc 24       	eor	r12, r12
    5030:	d7 01       	movw	r26, r14
    5032:	c6 01       	movw	r24, r12
    5034:	88 19       	sub	r24, r8
    5036:	99 09       	sbc	r25, r9
    5038:	aa 09       	sbc	r26, r10
    503a:	bb 09       	sbc	r27, r11
    503c:	bc 01       	movw	r22, r24
    503e:	cd 01       	movw	r24, r26
    5040:	6c 50       	subi	r22, 0x0C	; 12
    5042:	7e 4f       	sbci	r23, 0xFE	; 254
    5044:	8f 4f       	sbci	r24, 0xFF	; 255
    5046:	9f 4f       	sbci	r25, 0xFF	; 255
    5048:	28 ee       	ldi	r18, 0xE8	; 232
    504a:	33 e0       	ldi	r19, 0x03	; 3
    504c:	40 e0       	ldi	r20, 0x00	; 0
    504e:	50 e0       	ldi	r21, 0x00	; 0
    5050:	eb d5       	rcall	.+3030   	; 0x5c28 <__udivmodsi4>
=======
    4d6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    4d6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    4d70:	4f 85       	ldd	r20, Y+15	; 0x0f
    4d72:	58 89       	ldd	r21, Y+16	; 0x10
    4d74:	79 01       	movw	r14, r18
    4d76:	dd 24       	eor	r13, r13
    4d78:	cc 24       	eor	r12, r12
    4d7a:	d7 01       	movw	r26, r14
    4d7c:	c6 01       	movw	r24, r12
    4d7e:	88 19       	sub	r24, r8
    4d80:	99 09       	sbc	r25, r9
    4d82:	aa 09       	sbc	r26, r10
    4d84:	bb 09       	sbc	r27, r11
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	6c 50       	subi	r22, 0x0C	; 12
    4d8c:	7e 4f       	sbci	r23, 0xFE	; 254
    4d8e:	8f 4f       	sbci	r24, 0xFF	; 255
    4d90:	9f 4f       	sbci	r25, 0xFF	; 255
    4d92:	28 ee       	ldi	r18, 0xE8	; 232
    4d94:	33 e0       	ldi	r19, 0x03	; 3
    4d96:	40 e0       	ldi	r20, 0x00	; 0
    4d98:	50 e0       	ldi	r21, 0x00	; 0
    4d9a:	ba d5       	rcall	.+2932   	; 0x5910 <__udivmodsi4>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
<<<<<<< HEAD
    5052:	b4 2f       	mov	r27, r20
    5054:	a3 2f       	mov	r26, r19
    5056:	92 2f       	mov	r25, r18
    5058:	88 27       	eor	r24, r24
    505a:	8d 87       	std	Y+13, r24	; 0x0d
    505c:	9e 87       	std	Y+14, r25	; 0x0e
    505e:	af 87       	std	Y+15, r26	; 0x0f
    5060:	b8 8b       	std	Y+16, r27	; 0x10
    5062:	94 ef       	ldi	r25, 0xF4	; 244
    5064:	89 0e       	add	r8, r25
    5066:	91 e0       	ldi	r25, 0x01	; 1
    5068:	99 1e       	adc	r9, r25
    506a:	a1 1c       	adc	r10, r1
    506c:	b1 1c       	adc	r11, r1
    506e:	c5 01       	movw	r24, r10
    5070:	b4 01       	movw	r22, r8
    5072:	6c 0d       	add	r22, r12
    5074:	7d 1d       	adc	r23, r13
    5076:	8e 1d       	adc	r24, r14
    5078:	9f 1d       	adc	r25, r15
    507a:	28 ee       	ldi	r18, 0xE8	; 232
    507c:	33 e0       	ldi	r19, 0x03	; 3
    507e:	40 e0       	ldi	r20, 0x00	; 0
    5080:	50 e0       	ldi	r21, 0x00	; 0
    5082:	d2 d5       	rcall	.+2980   	; 0x5c28 <__udivmodsi4>
    5084:	6d 85       	ldd	r22, Y+13	; 0x0d
    5086:	7e 85       	ldd	r23, Y+14	; 0x0e
    5088:	8f 85       	ldd	r24, Y+15	; 0x0f
    508a:	98 89       	ldd	r25, Y+16	; 0x10
    508c:	cd d5       	rcall	.+2970   	; 0x5c28 <__udivmodsi4>
    508e:	69 01       	movw	r12, r18
    5090:	33 23       	and	r19, r19
    5092:	24 f4       	brge	.+8      	; 0x509c <VL53L0X_calc_sigma_estimate+0x346>
    5094:	cc 24       	eor	r12, r12
    5096:	dd 24       	eor	r13, r13
    5098:	c2 1a       	sub	r12, r18
    509a:	d3 0a       	sbc	r13, r19
    509c:	0d 2c       	mov	r0, r13
    509e:	00 0c       	add	r0, r0
=======
    4d9c:	b4 2f       	mov	r27, r20
    4d9e:	a3 2f       	mov	r26, r19
    4da0:	92 2f       	mov	r25, r18
    4da2:	88 27       	eor	r24, r24
    4da4:	8d 87       	std	Y+13, r24	; 0x0d
    4da6:	9e 87       	std	Y+14, r25	; 0x0e
    4da8:	af 87       	std	Y+15, r26	; 0x0f
    4daa:	b8 8b       	std	Y+16, r27	; 0x10
    4dac:	94 ef       	ldi	r25, 0xF4	; 244
    4dae:	89 0e       	add	r8, r25
    4db0:	91 e0       	ldi	r25, 0x01	; 1
    4db2:	99 1e       	adc	r9, r25
    4db4:	a1 1c       	adc	r10, r1
    4db6:	b1 1c       	adc	r11, r1
    4db8:	c5 01       	movw	r24, r10
    4dba:	b4 01       	movw	r22, r8
    4dbc:	6c 0d       	add	r22, r12
    4dbe:	7d 1d       	adc	r23, r13
    4dc0:	8e 1d       	adc	r24, r14
    4dc2:	9f 1d       	adc	r25, r15
    4dc4:	28 ee       	ldi	r18, 0xE8	; 232
    4dc6:	33 e0       	ldi	r19, 0x03	; 3
    4dc8:	40 e0       	ldi	r20, 0x00	; 0
    4dca:	50 e0       	ldi	r21, 0x00	; 0
    4dcc:	a1 d5       	rcall	.+2882   	; 0x5910 <__udivmodsi4>
    4dce:	6d 85       	ldd	r22, Y+13	; 0x0d
    4dd0:	7e 85       	ldd	r23, Y+14	; 0x0e
    4dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4dd4:	98 89       	ldd	r25, Y+16	; 0x10
    4dd6:	9c d5       	rcall	.+2872   	; 0x5910 <__udivmodsi4>
    4dd8:	69 01       	movw	r12, r18
    4dda:	33 23       	and	r19, r19
    4ddc:	24 f4       	brge	.+8      	; 0x4de6 <VL53L0X_calc_sigma_estimate+0x346>
    4dde:	cc 24       	eor	r12, r12
    4de0:	dd 24       	eor	r13, r13
    4de2:	c2 1a       	sub	r12, r18
    4de4:	d3 0a       	sbc	r13, r19
    4de6:	0d 2c       	mov	r0, r13
    4de8:	00 0c       	add	r0, r0
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
<<<<<<< HEAD
    50a0:	ee 08       	sbc	r14, r14
    50a2:	ff 08       	sbc	r15, r15
    50a4:	e9 85       	ldd	r30, Y+9	; 0x09
    50a6:	fa 85       	ldd	r31, Y+10	; 0x0a
    50a8:	a0 85       	ldd	r26, Z+8	; 0x08
    50aa:	b1 85       	ldd	r27, Z+9	; 0x09
    50ac:	2a e9       	ldi	r18, 0x9A	; 154
    50ae:	39 e9       	ldi	r19, 0x99	; 153
    50b0:	46 e0       	ldi	r20, 0x06	; 6
    50b2:	50 e0       	ldi	r21, 0x00	; 0
    50b4:	f3 d5       	rcall	.+3046   	; 0x5c9c <__muluhisi3>
    50b6:	2c e5       	ldi	r18, 0x5C	; 92
    50b8:	32 e1       	ldi	r19, 0x12	; 18
    50ba:	40 e0       	ldi	r20, 0x00	; 0
    50bc:	50 e0       	ldi	r21, 0x00	; 0
    50be:	b4 d5       	rcall	.+2920   	; 0x5c28 <__udivmodsi4>
    50c0:	ca 01       	movw	r24, r20
=======
    4dea:	ee 08       	sbc	r14, r14
    4dec:	ff 08       	sbc	r15, r15
    4dee:	e9 85       	ldd	r30, Y+9	; 0x09
    4df0:	fa 85       	ldd	r31, Y+10	; 0x0a
    4df2:	a0 85       	ldd	r26, Z+8	; 0x08
    4df4:	b1 85       	ldd	r27, Z+9	; 0x09
    4df6:	2a e9       	ldi	r18, 0x9A	; 154
    4df8:	39 e9       	ldi	r19, 0x99	; 153
    4dfa:	46 e0       	ldi	r20, 0x06	; 6
    4dfc:	50 e0       	ldi	r21, 0x00	; 0
    4dfe:	b9 d5       	rcall	.+2930   	; 0x5972 <__muluhisi3>
    4e00:	2c e5       	ldi	r18, 0x5C	; 92
    4e02:	32 e1       	ldi	r19, 0x12	; 18
    4e04:	40 e0       	ldi	r20, 0x00	; 0
    4e06:	50 e0       	ldi	r21, 0x00	; 0
    4e08:	83 d5       	rcall	.+2822   	; 0x5910 <__udivmodsi4>
    4e0a:	ca 01       	movw	r24, r20
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		 * exceeded.
		 */
		pwMult *= (((uint32_t) 1 << 16) - xTalkCorrection);

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
<<<<<<< HEAD
    50c2:	b9 01       	movw	r22, r18
    50c4:	fe 2c       	mov	r15, r14
    50c6:	ed 2c       	mov	r14, r13
    50c8:	dc 2c       	mov	r13, r12
    50ca:	cc 24       	eor	r12, r12
    50cc:	81 2c       	mov	r8, r1
    50ce:	91 2c       	mov	r9, r1
    50d0:	54 01       	movw	r10, r8
    50d2:	a3 94       	inc	r10
    50d4:	a5 01       	movw	r20, r10
    50d6:	94 01       	movw	r18, r8
    50d8:	2c 19       	sub	r18, r12
    50da:	3d 09       	sbc	r19, r13
    50dc:	4e 09       	sbc	r20, r14
    50de:	5f 09       	sbc	r21, r15
    50e0:	94 d5       	rcall	.+2856   	; 0x5c0a <__mulsi3>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	90 58       	subi	r25, 0x80	; 128
    50e8:	af 4f       	sbci	r26, 0xFF	; 255
    50ea:	bf 4f       	sbci	r27, 0xFF	; 255
    50ec:	cd 01       	movw	r24, r26
    50ee:	aa 27       	eor	r26, r26
=======
    4e0c:	b9 01       	movw	r22, r18
    4e0e:	fe 2c       	mov	r15, r14
    4e10:	ed 2c       	mov	r14, r13
    4e12:	dc 2c       	mov	r13, r12
    4e14:	cc 24       	eor	r12, r12
    4e16:	81 2c       	mov	r8, r1
    4e18:	91 2c       	mov	r9, r1
    4e1a:	54 01       	movw	r10, r8
    4e1c:	a3 94       	inc	r10
    4e1e:	a5 01       	movw	r20, r10
    4e20:	94 01       	movw	r18, r8
    4e22:	2c 19       	sub	r18, r12
    4e24:	3d 09       	sbc	r19, r13
    4e26:	4e 09       	sbc	r20, r14
    4e28:	5f 09       	sbc	r21, r15
    4e2a:	63 d5       	rcall	.+2758   	; 0x58f2 <__mulsi3>
    4e2c:	dc 01       	movw	r26, r24
    4e2e:	cb 01       	movw	r24, r22
    4e30:	90 58       	subi	r25, 0x80	; 128
    4e32:	af 4f       	sbci	r26, 0xFF	; 255
    4e34:	bf 4f       	sbci	r27, 0xFF	; 255
    4e36:	cd 01       	movw	r24, r26
    4e38:	aa 27       	eor	r26, r26
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += ((uint32_t) 1 << 16);
    50f0:	bb 27       	eor	r27, r27
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
    50f2:	11 96       	adiw	r26, 0x01	; 1
    50f4:	bc 01       	movw	r22, r24
    50f6:	cd 01       	movw	r24, r26
    50f8:	96 95       	lsr	r25
    50fa:	87 95       	ror	r24
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
    50fc:	77 95       	ror	r23
    50fe:	67 95       	ror	r22
    5100:	9b 01       	movw	r18, r22

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
<<<<<<< HEAD
    5102:	ac 01       	movw	r20, r24
    5104:	82 d5       	rcall	.+2820   	; 0x5c0a <__mulsi3>
    5106:	6b 01       	movw	r12, r22
    5108:	7c 01       	movw	r14, r24
    510a:	0b 2e       	mov	r0, r27
    510c:	be e0       	ldi	r27, 0x0E	; 14
    510e:	f6 94       	lsr	r15
    5110:	e7 94       	ror	r14
    5112:	d7 94       	ror	r13
    5114:	c7 94       	ror	r12
    5116:	ba 95       	dec	r27
=======
    4e4c:	ac 01       	movw	r20, r24
    4e4e:	51 d5       	rcall	.+2722   	; 0x58f2 <__mulsi3>
    4e50:	6b 01       	movw	r12, r22
    4e52:	7c 01       	movw	r14, r24
    4e54:	0b 2e       	mov	r0, r27
    4e56:	be e0       	ldi	r27, 0x0E	; 14
    4e58:	f6 94       	lsr	r15
    4e5a:	e7 94       	ror	r14
    4e5c:	d7 94       	ror	r13
    4e5e:	c7 94       	ror	r12
    4e60:	ba 95       	dec	r27
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
<<<<<<< HEAD
    5118:	d1 f7       	brne	.-12     	; 0x510e <VL53L0X_calc_sigma_estimate+0x3b8>
    511a:	b0 2d       	mov	r27, r0
    511c:	a0 e2       	ldi	r26, 0x20	; 32
    511e:	b3 e0       	ldi	r27, 0x03	; 3
    5120:	a7 01       	movw	r20, r14
    5122:	96 01       	movw	r18, r12
    5124:	bb d5       	rcall	.+2934   	; 0x5c9c <__muluhisi3>
    5126:	dc 01       	movw	r26, r24
    5128:	cb 01       	movw	r24, r22
    512a:	90 58       	subi	r25, 0x80	; 128
    512c:	af 4f       	sbci	r26, 0xFF	; 255
    512e:	bf 4f       	sbci	r27, 0xFF	; 255
    5130:	bd 01       	movw	r22, r26
=======
    4e62:	d1 f7       	brne	.-12     	; 0x4e58 <VL53L0X_calc_sigma_estimate+0x3b8>
    4e64:	b0 2d       	mov	r27, r0
    4e66:	a0 e2       	ldi	r26, 0x20	; 32
    4e68:	b3 e0       	ldi	r27, 0x03	; 3
    4e6a:	a7 01       	movw	r20, r14
    4e6c:	96 01       	movw	r18, r12
    4e6e:	81 d5       	rcall	.+2818   	; 0x5972 <__muluhisi3>
    4e70:	dc 01       	movw	r26, r24
    4e72:	cb 01       	movw	r24, r22
    4e74:	90 58       	subi	r25, 0x80	; 128
    4e76:	af 4f       	sbci	r26, 0xFF	; 255
    4e78:	bf 4f       	sbci	r27, 0xFF	; 255
    4e7a:	bd 01       	movw	r22, r26
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		sqr1 *= sqr1;

		sqr2 = sigmaEstimateP2;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
    5132:	88 27       	eor	r24, r24
    5134:	99 27       	eor	r25, r25
    5136:	89 88       	ldd	r8, Y+17	; 0x11
    5138:	9a 88       	ldd	r9, Y+18	; 0x12
    513a:	ab 88       	ldd	r10, Y+19	; 0x13
    513c:	bc 88       	ldd	r11, Y+20	; 0x14
    513e:	f0 e8       	ldi	r31, 0x80	; 128
    5140:	9f 0e       	add	r9, r31
    5142:	a1 1c       	adc	r10, r1
    5144:	b1 1c       	adc	r11, r1

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
<<<<<<< HEAD
    5146:	45 01       	movw	r8, r10
    5148:	aa 24       	eor	r10, r10
    514a:	bb 24       	eor	r11, r11
    514c:	9b 01       	movw	r18, r22
    514e:	ac 01       	movw	r20, r24
    5150:	5c d5       	rcall	.+2744   	; 0x5c0a <__mulsi3>
    5152:	69 87       	std	Y+9, r22	; 0x09
    5154:	7a 87       	std	Y+10, r23	; 0x0a
    5156:	8b 87       	std	Y+11, r24	; 0x0b
    5158:	9c 87       	std	Y+12, r25	; 0x0c
    515a:	a5 01       	movw	r20, r10
    515c:	94 01       	movw	r18, r8
    515e:	c5 01       	movw	r24, r10
    5160:	b4 01       	movw	r22, r8
    5162:	53 d5       	rcall	.+2726   	; 0x5c0a <__mulsi3>
    5164:	29 85       	ldd	r18, Y+9	; 0x09
    5166:	3a 85       	ldd	r19, Y+10	; 0x0a
    5168:	4b 85       	ldd	r20, Y+11	; 0x0b
    516a:	5c 85       	ldd	r21, Y+12	; 0x0c
    516c:	62 0f       	add	r22, r18
    516e:	73 1f       	adc	r23, r19
    5170:	84 1f       	adc	r24, r20
    5172:	95 1f       	adc	r25, r21
=======
    4e90:	45 01       	movw	r8, r10
    4e92:	aa 24       	eor	r10, r10
    4e94:	bb 24       	eor	r11, r11
    4e96:	9b 01       	movw	r18, r22
    4e98:	ac 01       	movw	r20, r24
    4e9a:	2b d5       	rcall	.+2646   	; 0x58f2 <__mulsi3>
    4e9c:	69 87       	std	Y+9, r22	; 0x09
    4e9e:	7a 87       	std	Y+10, r23	; 0x0a
    4ea0:	8b 87       	std	Y+11, r24	; 0x0b
    4ea2:	9c 87       	std	Y+12, r25	; 0x0c
    4ea4:	a5 01       	movw	r20, r10
    4ea6:	94 01       	movw	r18, r8
    4ea8:	c5 01       	movw	r24, r10
    4eaa:	b4 01       	movw	r22, r8
    4eac:	22 d5       	rcall	.+2628   	; 0x58f2 <__mulsi3>
    4eae:	29 85       	ldd	r18, Y+9	; 0x09
    4eb0:	3a 85       	ldd	r19, Y+10	; 0x0a
    4eb2:	4b 85       	ldd	r20, Y+11	; 0x0b
    4eb4:	5c 85       	ldd	r21, Y+12	; 0x0c
    4eb6:	62 0f       	add	r22, r18
    4eb8:	73 1f       	adc	r23, r19
    4eba:	84 1f       	adc	r24, r20
    4ebc:	95 1f       	adc	r25, r21
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
<<<<<<< HEAD
    5174:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <VL53L0X_isqrt>
    5178:	db 01       	movw	r26, r22
    517a:	99 27       	eor	r25, r25
    517c:	88 27       	eor	r24, r24
    517e:	bc 01       	movw	r22, r24
    5180:	cd 01       	movw	r24, r26
    5182:	6e 5c       	subi	r22, 0xCE	; 206
    5184:	7f 4f       	sbci	r23, 0xFF	; 255
    5186:	8f 4f       	sbci	r24, 0xFF	; 255
    5188:	9f 4f       	sbci	r25, 0xFF	; 255
    518a:	24 e6       	ldi	r18, 0x64	; 100
    518c:	30 e0       	ldi	r19, 0x00	; 0
    518e:	40 e0       	ldi	r20, 0x00	; 0
    5190:	50 e0       	ldi	r21, 0x00	; 0
    5192:	4a d5       	rcall	.+2708   	; 0x5c28 <__udivmodsi4>
    5194:	ca 01       	movw	r24, r20
    5196:	b9 01       	movw	r22, r18
    5198:	2b 8d       	ldd	r18, Y+27	; 0x1b
    519a:	3c 8d       	ldd	r19, Y+28	; 0x1c
    519c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    519e:	5e 8d       	ldd	r21, Y+30	; 0x1e
    51a0:	22 0f       	add	r18, r18
    51a2:	33 1f       	adc	r19, r19
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
    51a4:	44 1f       	adc	r20, r20
    51a6:	55 1f       	adc	r21, r21
    51a8:	3f d5       	rcall	.+2686   	; 0x5c28 <__udivmodsi4>

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
    51aa:	a5 eb       	ldi	r26, 0xB5	; 181
    51ac:	bb e0       	ldi	r27, 0x0B	; 11
    51ae:	76 d5       	rcall	.+2796   	; 0x5c9c <__muluhisi3>
    51b0:	68 57       	subi	r22, 0x78	; 120
    51b2:	7c 4e       	sbci	r23, 0xEC	; 236
    51b4:	8f 4f       	sbci	r24, 0xFF	; 255
    51b6:	9f 4f       	sbci	r25, 0xFF	; 255
    51b8:	20 e1       	ldi	r18, 0x10	; 16
    51ba:	37 e2       	ldi	r19, 0x27	; 39
    51bc:	40 e0       	ldi	r20, 0x00	; 0
    51be:	50 e0       	ldi	r21, 0x00	; 0
    51c0:	33 d5       	rcall	.+2662   	; 0x5c28 <__udivmodsi4>
    51c2:	ca 01       	movw	r24, r20
    51c4:	b9 01       	movw	r22, r18
    51c6:	61 30       	cpi	r22, 0x01	; 1
    51c8:	30 ef       	ldi	r19, 0xF0	; 240
    51ca:	73 07       	cpc	r23, r19
    51cc:	81 05       	cpc	r24, r1
    51ce:	91 05       	cpc	r25, r1
    51d0:	20 f0       	brcs	.+8      	; 0x51da <VL53L0X_calc_sigma_estimate+0x484>
    51d2:	60 e0       	ldi	r22, 0x00	; 0
=======
    4ebe:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>
    4ec2:	db 01       	movw	r26, r22
    4ec4:	99 27       	eor	r25, r25
    4ec6:	88 27       	eor	r24, r24
    4ec8:	bc 01       	movw	r22, r24
    4eca:	cd 01       	movw	r24, r26
    4ecc:	6e 5c       	subi	r22, 0xCE	; 206
    4ece:	7f 4f       	sbci	r23, 0xFF	; 255
    4ed0:	8f 4f       	sbci	r24, 0xFF	; 255
    4ed2:	9f 4f       	sbci	r25, 0xFF	; 255
    4ed4:	24 e6       	ldi	r18, 0x64	; 100
    4ed6:	30 e0       	ldi	r19, 0x00	; 0
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	50 e0       	ldi	r21, 0x00	; 0
    4edc:	19 d5       	rcall	.+2610   	; 0x5910 <__udivmodsi4>
    4ede:	ca 01       	movw	r24, r20
    4ee0:	b9 01       	movw	r22, r18
    4ee2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4ee4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4ee6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    4ee8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    4eea:	22 0f       	add	r18, r18
    4eec:	33 1f       	adc	r19, r19
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
    4eee:	44 1f       	adc	r20, r20
    4ef0:	55 1f       	adc	r21, r21
    4ef2:	0e d5       	rcall	.+2588   	; 0x5910 <__udivmodsi4>

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
    4ef4:	a5 eb       	ldi	r26, 0xB5	; 181
    4ef6:	bb e0       	ldi	r27, 0x0B	; 11
    4ef8:	3c d5       	rcall	.+2680   	; 0x5972 <__muluhisi3>
    4efa:	68 57       	subi	r22, 0x78	; 120
    4efc:	7c 4e       	sbci	r23, 0xEC	; 236
    4efe:	8f 4f       	sbci	r24, 0xFF	; 255
    4f00:	9f 4f       	sbci	r25, 0xFF	; 255
    4f02:	20 e1       	ldi	r18, 0x10	; 16
    4f04:	37 e2       	ldi	r19, 0x27	; 39
    4f06:	40 e0       	ldi	r20, 0x00	; 0
    4f08:	50 e0       	ldi	r21, 0x00	; 0
    4f0a:	02 d5       	rcall	.+2564   	; 0x5910 <__udivmodsi4>
    4f0c:	ca 01       	movw	r24, r20
    4f0e:	b9 01       	movw	r22, r18
    4f10:	61 30       	cpi	r22, 0x01	; 1
    4f12:	30 ef       	ldi	r19, 0xF0	; 240
    4f14:	73 07       	cpc	r23, r19
    4f16:	81 05       	cpc	r24, r1
    4f18:	91 05       	cpc	r25, r1
    4f1a:	20 f0       	brcs	.+8      	; 0x4f24 <VL53L0X_calc_sigma_estimate+0x484>
    4f1c:	60 e0       	ldi	r22, 0x00	; 0
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		sqr1 = sigmaEstRtn * sigmaEstRtn;
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
<<<<<<< HEAD
    51d4:	70 ef       	ldi	r23, 0xF0	; 240
    51d6:	80 e0       	ldi	r24, 0x00	; 0
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	9b 01       	movw	r18, r22
    51dc:	ac 01       	movw	r20, r24
    51de:	15 d5       	rcall	.+2602   	; 0x5c0a <__mulsi3>
    51e0:	6c 5f       	subi	r22, 0xFC	; 252
    51e2:	7e 4e       	sbci	r23, 0xEE	; 238
    51e4:	8f 4f       	sbci	r24, 0xFF	; 255
    51e6:	9f 4f       	sbci	r25, 0xFF	; 255
=======
    4f1e:	70 ef       	ldi	r23, 0xF0	; 240
    4f20:	80 e0       	ldi	r24, 0x00	; 0
    4f22:	90 e0       	ldi	r25, 0x00	; 0
    4f24:	9b 01       	movw	r18, r22
    4f26:	ac 01       	movw	r20, r24
    4f28:	e4 d4       	rcall	.+2504   	; 0x58f2 <__mulsi3>
    4f2a:	6c 5f       	subi	r22, 0xFC	; 252
    4f2c:	7e 4e       	sbci	r23, 0xEE	; 238
    4f2e:	8f 4f       	sbci	r24, 0xFF	; 255
    4f30:	9f 4f       	sbci	r25, 0xFF	; 255
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
<<<<<<< HEAD
    51e8:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <VL53L0X_isqrt>
    51ec:	45 28       	or	r4, r5
    51ee:	46 28       	or	r4, r6
    51f0:	47 28       	or	r4, r7
    51f2:	91 f0       	breq	.+36     	; 0x5218 <VL53L0X_calc_sigma_estimate+0x4c2>
    51f4:	a8 ee       	ldi	r26, 0xE8	; 232
    51f6:	b3 e0       	ldi	r27, 0x03	; 3
    51f8:	9b 01       	movw	r18, r22
    51fa:	ac 01       	movw	r20, r24
    51fc:	4f d5       	rcall	.+2718   	; 0x5c9c <__muluhisi3>
    51fe:	6f 3a       	cpi	r22, 0xAF	; 175
    5200:	47 e8       	ldi	r20, 0x87	; 135
    5202:	74 07       	cpc	r23, r20
    5204:	4f e8       	ldi	r20, 0x8F	; 143
    5206:	84 07       	cpc	r24, r20
    5208:	42 e0       	ldi	r20, 0x02	; 2
    520a:	94 07       	cpc	r25, r20
    520c:	48 f0       	brcs	.+18     	; 0x5220 <VL53L0X_calc_sigma_estimate+0x4ca>
    520e:	6e ea       	ldi	r22, 0xAE	; 174
    5210:	77 e8       	ldi	r23, 0x87	; 135
    5212:	8f e8       	ldi	r24, 0x8F	; 143
    5214:	92 e0       	ldi	r25, 0x02	; 2
=======
    4f32:	0e 94 23 19 	call	0x3246	; 0x3246 <VL53L0X_isqrt>
    4f36:	45 28       	or	r4, r5
    4f38:	46 28       	or	r4, r6
    4f3a:	47 28       	or	r4, r7
    4f3c:	91 f0       	breq	.+36     	; 0x4f62 <VL53L0X_calc_sigma_estimate+0x4c2>
    4f3e:	a8 ee       	ldi	r26, 0xE8	; 232
    4f40:	b3 e0       	ldi	r27, 0x03	; 3
    4f42:	9b 01       	movw	r18, r22
    4f44:	ac 01       	movw	r20, r24
    4f46:	15 d5       	rcall	.+2602   	; 0x5972 <__muluhisi3>
    4f48:	6f 3a       	cpi	r22, 0xAF	; 175
    4f4a:	47 e8       	ldi	r20, 0x87	; 135
    4f4c:	74 07       	cpc	r23, r20
    4f4e:	4f e8       	ldi	r20, 0x8F	; 143
    4f50:	84 07       	cpc	r24, r20
    4f52:	42 e0       	ldi	r20, 0x02	; 2
    4f54:	94 07       	cpc	r25, r20
    4f56:	48 f0       	brcs	.+18     	; 0x4f6a <VL53L0X_calc_sigma_estimate+0x4ca>
    4f58:	6e ea       	ldi	r22, 0xAE	; 174
    4f5a:	77 e8       	ldi	r23, 0x87	; 135
    4f5c:	8f e8       	ldi	r24, 0x8F	; 143
    4f5e:	92 e0       	ldi	r25, 0x02	; 2
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
    5216:	04 c0       	rjmp	.+8      	; 0x5220 <VL53L0X_calc_sigma_estimate+0x4ca>
    5218:	6e ea       	ldi	r22, 0xAE	; 174
    521a:	77 e8       	ldi	r23, 0x87	; 135
    521c:	8f e8       	ldi	r24, 0x8F	; 143
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
    521e:	92 e0       	ldi	r25, 0x02	; 2
    5220:	af 8d       	ldd	r26, Y+31	; 0x1f
    5222:	b8 a1       	ldd	r27, Y+32	; 0x20
    5224:	6d 93       	st	X+, r22
    5226:	7d 93       	st	X+, r23
    5228:	8d 93       	st	X+, r24
    522a:	9c 93       	st	X, r25
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
    522c:	13 97       	sbiw	r26, 0x03	; 3
    522e:	f1 01       	movw	r30, r2
    5230:	e6 5d       	subi	r30, 0xD6	; 214
    5232:	fe 4f       	sbci	r31, 0xFE	; 254
    5234:	60 83       	st	Z, r22
    5236:	71 83       	std	Z+1, r23	; 0x01
    5238:	82 83       	std	Z+2, r24	; 0x02
		Status = VL53L0X_calc_dmax(
    523a:	93 83       	std	Z+3, r25	; 0x03
    523c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    523e:	bf 93       	push	r27
    5240:	e9 8d       	ldd	r30, Y+25	; 0x19
    5242:	ef 93       	push	r30
    5244:	1f 93       	push	r17
    5246:	0f 93       	push	r16
    5248:	f9 a5       	ldd	r31, Y+41	; 0x29
    524a:	ff 93       	push	r31
    524c:	2d 89       	ldd	r18, Y+21	; 0x15
    524e:	2f 93       	push	r18
    5250:	3c 89       	ldd	r19, Y+20	; 0x14
    5252:	3f 93       	push	r19
    5254:	4b 89       	ldd	r20, Y+19	; 0x13
    5256:	4f 93       	push	r20
    5258:	5a 89       	ldd	r21, Y+18	; 0x12
    525a:	5f 93       	push	r21
    525c:	89 89       	ldd	r24, Y+17	; 0x11
    525e:	8f 93       	push	r24
    5260:	0f 2e       	mov	r0, r31
    5262:	f0 e2       	ldi	r31, 0x20	; 32
    5264:	8f 2e       	mov	r8, r31
    5266:	f3 e0       	ldi	r31, 0x03	; 3
    5268:	9f 2e       	mov	r9, r31
    526a:	a1 2c       	mov	r10, r1
    526c:	b1 2c       	mov	r11, r1
    526e:	f0 2d       	mov	r31, r0
    5270:	0d a1       	ldd	r16, Y+37	; 0x25
    5272:	1e a1       	ldd	r17, Y+38	; 0x26
    5274:	2f a1       	ldd	r18, Y+39	; 0x27
    5276:	38 a5       	ldd	r19, Y+40	; 0x28
    5278:	49 a1       	ldd	r20, Y+33	; 0x21
    527a:	5a a1       	ldd	r21, Y+34	; 0x22
    527c:	6b a1       	ldd	r22, Y+35	; 0x23
    527e:	7c a1       	ldd	r23, Y+36	; 0x24
    5280:	c1 01       	movw	r24, r2
    5282:	86 db       	rcall	.-2292   	; 0x4990 <VL53L0X_calc_dmax>
    5284:	18 2f       	mov	r17, r24
    5286:	0f b6       	in	r0, 0x3f	; 63
    5288:	f8 94       	cli
    528a:	de bf       	out	0x3e, r29	; 62
    528c:	0f be       	out	0x3f, r0	; 63
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    528e:	cd bf       	out	0x3d, r28	; 61
    5290:	81 2f       	mov	r24, r17
    5292:	a9 96       	adiw	r28, 0x29	; 41
    5294:	0f b6       	in	r0, 0x3f	; 63
    5296:	f8 94       	cli
    5298:	de bf       	out	0x3e, r29	; 62
    529a:	0f be       	out	0x3f, r0	; 63
    529c:	cd bf       	out	0x3d, r28	; 61
    529e:	df 91       	pop	r29
    52a0:	cf 91       	pop	r28
    52a2:	1f 91       	pop	r17
    52a4:	0f 91       	pop	r16
    52a6:	ff 90       	pop	r15
    52a8:	ef 90       	pop	r14
    52aa:	df 90       	pop	r13
    52ac:	cf 90       	pop	r12
    52ae:	bf 90       	pop	r11
    52b0:	af 90       	pop	r10
    52b2:	9f 90       	pop	r9
    52b4:	8f 90       	pop	r8
    52b6:	7f 90       	pop	r7
    52b8:	6f 90       	pop	r6
    52ba:	5f 90       	pop	r5
    52bc:	4f 90       	pop	r4
    52be:	3f 90       	pop	r3
    52c0:	2f 90       	pop	r2
    52c2:	08 95       	ret

000052c4 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
    52c4:	2f 92       	push	r2
    52c6:	3f 92       	push	r3
    52c8:	4f 92       	push	r4
    52ca:	5f 92       	push	r5
    52cc:	6f 92       	push	r6
    52ce:	7f 92       	push	r7
    52d0:	8f 92       	push	r8
    52d2:	9f 92       	push	r9
    52d4:	af 92       	push	r10
    52d6:	bf 92       	push	r11
    52d8:	cf 92       	push	r12
    52da:	df 92       	push	r13
    52dc:	ef 92       	push	r14
    52de:	ff 92       	push	r15
    52e0:	0f 93       	push	r16
    52e2:	1f 93       	push	r17
    52e4:	cf 93       	push	r28
    52e6:	df 93       	push	r29
    52e8:	cd b7       	in	r28, 0x3d	; 61
    52ea:	de b7       	in	r29, 0x3e	; 62
    52ec:	ab 97       	sbiw	r28, 0x2b	; 43
    52ee:	0f b6       	in	r0, 0x3f	; 63
    52f0:	f8 94       	cli
    52f2:	de bf       	out	0x3e, r29	; 62
    52f4:	0f be       	out	0x3f, r0	; 63
    52f6:	cd bf       	out	0x3d, r28	; 61
    52f8:	5c 01       	movw	r10, r24
    52fa:	28 a3       	std	Y+32, r18	; 0x20
    52fc:	39 a3       	std	Y+33, r19	; 0x21
    52fe:	4a a3       	std	Y+34, r20	; 0x22
    5300:	5b a3       	std	Y+35, r21	; 0x23
    5302:	48 01       	movw	r8, r16
    5304:	f9 a6       	std	Y+41, r15	; 0x29
    5306:	e8 a6       	std	Y+40, r14	; 0x28
    5308:	db a6       	std	Y+43, r13	; 0x2b
    530a:	ca a6       	std	Y+42, r12	; 0x2a
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
	uint8_t SigmaLimitCheckEnable = 0;
    530c:	19 82       	std	Y+1, r1	; 0x01
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
    530e:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t SignalRefClipLimitCheckEnable = 0;
    5310:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
    5312:	1c 82       	std	Y+4, r1	; 0x04
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
	uint16_t tmpWord = 0;
    5314:	1e 8a       	std	Y+22, r1	; 0x16
    5316:	1d 8a       	std	Y+21, r1	; 0x15
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
    5318:	1f 8a       	std	Y+23, r1	; 0x17
    531a:	18 8e       	std	Y+24, r1	; 0x18
    531c:	19 8e       	std	Y+25, r1	; 0x19
    531e:	1a 8e       	std	Y+26, r1	; 0x1a
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
    5320:	68 77       	andi	r22, 0x78	; 120
    5322:	06 2f       	mov	r16, r22
    5324:	10 e0       	ldi	r17, 0x00	; 0
    5326:	15 95       	asr	r17
    5328:	07 95       	ror	r16
    532a:	15 95       	asr	r17
    532c:	07 95       	ror	r16
    532e:	15 95       	asr	r17
    5330:	07 95       	ror	r16
    5332:	30 2e       	mov	r3, r16

	if (DeviceRangeStatusInternal == 0 ||
    5334:	00 23       	and	r16, r16
    5336:	61 f0       	breq	.+24     	; 0x5350 <VL53L0X_get_pal_range_status+0x8c>
    5338:	80 2f       	mov	r24, r16
    533a:	8d 7f       	andi	r24, 0xFD	; 253
    533c:	85 30       	cpi	r24, 0x05	; 5
    533e:	59 f0       	breq	.+22     	; 0x5356 <VL53L0X_get_pal_range_status+0x92>
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
    5340:	21 e0       	ldi	r18, 0x01	; 1
    5342:	2f 8f       	std	Y+31, r18	; 0x1f
    5344:	84 ef       	ldi	r24, 0xF4	; 244
    5346:	80 0f       	add	r24, r16
    5348:	84 30       	cpi	r24, 0x04	; 4
    534a:	38 f0       	brcs	.+14     	; 0x535a <VL53L0X_get_pal_range_status+0x96>
    534c:	1f 8e       	std	Y+31, r1	; 0x1f
    534e:	05 c0       	rjmp	.+10     	; 0x535a <VL53L0X_get_pal_range_status+0x96>
    5350:	31 e0       	ldi	r19, 0x01	; 1
    5352:	3f 8f       	std	Y+31, r19	; 0x1f
    5354:	02 c0       	rjmp	.+4      	; 0x535a <VL53L0X_get_pal_range_status+0x96>
    5356:	41 e0       	ldi	r20, 0x01	; 1
    5358:	4f 8f       	std	Y+31, r20	; 0x1f
		NoneFlag = 0;
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
<<<<<<< HEAD
    535a:	41 e0       	ldi	r20, 0x01	; 1
    535c:	6f ef       	ldi	r22, 0xFF	; 255
    535e:	c5 01       	movw	r24, r10
    5360:	4d d3       	rcall	.+1690   	; 0x59fc <VL53L0X_WrByte>
=======
    50a4:	41 e0       	ldi	r20, 0x01	; 1
    50a6:	6f ef       	ldi	r22, 0xFF	; 255
    50a8:	c5 01       	movw	r24, r10
    50aa:	8f d3       	rcall	.+1822   	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	if (Status == VL53L0X_ERROR_NONE)
    5362:	81 11       	cpse	r24, r1
    5364:	5a c1       	rjmp	.+692    	; 0x561a <VL53L0X_get_pal_range_status+0x356>
		Status = VL53L0X_RdWord(Dev,
<<<<<<< HEAD
    5366:	ae 01       	movw	r20, r28
    5368:	4b 5e       	subi	r20, 0xEB	; 235
    536a:	5f 4f       	sbci	r21, 0xFF	; 255
    536c:	66 eb       	ldi	r22, 0xB6	; 182
    536e:	c5 01       	movw	r24, r10
    5370:	93 d3       	rcall	.+1830   	; 0x5a98 <VL53L0X_RdWord>
=======
    50b0:	ae 01       	movw	r20, r28
    50b2:	4b 5e       	subi	r20, 0xEB	; 235
    50b4:	5f 4f       	sbci	r21, 0xFF	; 255
    50b6:	66 eb       	ldi	r22, 0xB6	; 182
    50b8:	c5 01       	movw	r24, r10
    50ba:	d5 d3       	rcall	.+1962   	; 0x5866 <VL53L0X_RdWord>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    5372:	9d 89       	ldd	r25, Y+21	; 0x15
    5374:	20 e0       	ldi	r18, 0x00	; 0
    5376:	30 e0       	ldi	r19, 0x00	; 0
    5378:	39 2f       	mov	r19, r25
    537a:	33 0f       	add	r19, r19
    537c:	29 01       	movw	r4, r18
    537e:	61 2c       	mov	r6, r1
    5380:	71 2c       	mov	r7, r1

	if (Status == VL53L0X_ERROR_NONE)
    5382:	81 11       	cpse	r24, r1
    5384:	5a c1       	rjmp	.+692    	; 0x563a <VL53L0X_get_pal_range_status+0x376>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
<<<<<<< HEAD
    5386:	40 e0       	ldi	r20, 0x00	; 0
    5388:	6f ef       	ldi	r22, 0xFF	; 255
    538a:	c5 01       	movw	r24, r10
    538c:	37 d3       	rcall	.+1646   	; 0x59fc <VL53L0X_WrByte>
=======
    50d0:	40 e0       	ldi	r20, 0x00	; 0
    50d2:	6f ef       	ldi	r22, 0xFF	; 255
    50d4:	c5 01       	movw	r24, r10
    50d6:	79 d3       	rcall	.+1778   	; 0x57ca <VL53L0X_WrByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    538e:	f5 01       	movw	r30, r10
    5390:	ee 5c       	subi	r30, 0xCE	; 206
    5392:	fe 4f       	sbci	r31, 0xFE	; 254
    5394:	40 82       	st	Z, r4
    5396:	51 82       	std	Z+1, r5	; 0x01
    5398:	62 82       	std	Z+2, r6	; 0x02
    539a:	73 82       	std	Z+3, r7	; 0x03

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    539c:	81 11       	cpse	r24, r1
    539e:	08 c0       	rjmp	.+16     	; 0x53b0 <VL53L0X_get_pal_range_status+0xec>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    53a0:	ae 01       	movw	r20, r28
    53a2:	4f 5f       	subi	r20, 0xFF	; 255
    53a4:	5f 4f       	sbci	r21, 0xFF	; 255
    53a6:	60 e0       	ldi	r22, 0x00	; 0
    53a8:	70 e0       	ldi	r23, 0x00	; 0
    53aa:	c5 01       	movw	r24, r10
    53ac:	0e 94 ac 0b 	call	0x1758	; 0x1758 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
    53b0:	99 81       	ldd	r25, Y+1	; 0x01
    53b2:	99 23       	and	r25, r25
    53b4:	b1 f1       	breq	.+108    	; 0x5422 <VL53L0X_get_pal_range_status+0x15e>
    53b6:	81 11       	cpse	r24, r1
    53b8:	42 c0       	rjmp	.+132    	; 0x543e <VL53L0X_get_pal_range_status+0x17a>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
    53ba:	9e 01       	movw	r18, r28
    53bc:	29 5e       	subi	r18, 0xE9	; 233
    53be:	3f 4f       	sbci	r19, 0xFF	; 255
    53c0:	ae 01       	movw	r20, r28
    53c2:	4b 5f       	subi	r20, 0xFB	; 251
    53c4:	5f 4f       	sbci	r21, 0xFF	; 255
    53c6:	68 a5       	ldd	r22, Y+40	; 0x28
    53c8:	79 a5       	ldd	r23, Y+41	; 0x29
    53ca:	c5 01       	movw	r24, r10
    53cc:	c4 dc       	rcall	.-1656   	; 0x4d56 <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
    53ce:	81 11       	cpse	r24, r1
    53d0:	38 c0       	rjmp	.+112    	; 0x5442 <VL53L0X_get_pal_range_status+0x17e>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
    53d2:	8f 89       	ldd	r24, Y+23	; 0x17
    53d4:	98 8d       	ldd	r25, Y+24	; 0x18
    53d6:	e8 a5       	ldd	r30, Y+40	; 0x28
    53d8:	f9 a5       	ldd	r31, Y+41	; 0x29
    53da:	93 87       	std	Z+11, r25	; 0x0b
    53dc:	82 87       	std	Z+10, r24	; 0x0a

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
    53de:	ae 01       	movw	r20, r28
    53e0:	47 5f       	subi	r20, 0xF7	; 247
    53e2:	5f 4f       	sbci	r21, 0xFF	; 255
    53e4:	60 e0       	ldi	r22, 0x00	; 0
    53e6:	70 e0       	ldi	r23, 0x00	; 0
    53e8:	c5 01       	movw	r24, r10
    53ea:	0e 94 35 0c 	call	0x186a	; 0x186a <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
    53ee:	c9 84       	ldd	r12, Y+9	; 0x09
    53f0:	da 84       	ldd	r13, Y+10	; 0x0a
    53f2:	eb 84       	ldd	r14, Y+11	; 0x0b
    53f4:	fc 84       	ldd	r15, Y+12	; 0x0c
    53f6:	cc a2       	std	Y+36, r12	; 0x24
    53f8:	dd a2       	std	Y+37, r13	; 0x25
    53fa:	ee a2       	std	Y+38, r14	; 0x26
    53fc:	ff a2       	std	Y+39, r15	; 0x27
    53fe:	c1 14       	cp	r12, r1
    5400:	d1 04       	cpc	r13, r1
    5402:	e1 04       	cpc	r14, r1
    5404:	f1 04       	cpc	r15, r1
    5406:	79 f0       	breq	.+30     	; 0x5426 <VL53L0X_get_pal_range_status+0x162>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
    5408:	22 24       	eor	r2, r2
    540a:	23 94       	inc	r2
    540c:	2d 81       	ldd	r18, Y+5	; 0x05
    540e:	3e 81       	ldd	r19, Y+6	; 0x06
    5410:	4f 81       	ldd	r20, Y+7	; 0x07
    5412:	58 85       	ldd	r21, Y+8	; 0x08
    5414:	c2 16       	cp	r12, r18
    5416:	d3 06       	cpc	r13, r19
    5418:	e4 06       	cpc	r14, r20
    541a:	f5 06       	cpc	r15, r21
    541c:	28 f0       	brcs	.+10     	; 0x5428 <VL53L0X_get_pal_range_status+0x164>
    541e:	21 2c       	mov	r2, r1
    5420:	03 c0       	rjmp	.+6      	; 0x5428 <VL53L0X_get_pal_range_status+0x164>
    5422:	21 2c       	mov	r2, r1
    5424:	01 c0       	rjmp	.+2      	; 0x5428 <VL53L0X_get_pal_range_status+0x164>
    5426:	21 2c       	mov	r2, r1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    5428:	81 11       	cpse	r24, r1
    542a:	0c c0       	rjmp	.+24     	; 0x5444 <VL53L0X_get_pal_range_status+0x180>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    542c:	ae 01       	movw	r20, r28
    542e:	4d 5f       	subi	r20, 0xFD	; 253
    5430:	5f 4f       	sbci	r21, 0xFF	; 255
    5432:	62 e0       	ldi	r22, 0x02	; 2
    5434:	70 e0       	ldi	r23, 0x00	; 0
    5436:	c5 01       	movw	r24, r10
    5438:	0e 94 ac 0b 	call	0x1758	; 0x1758 <VL53L0X_GetLimitCheckEnable>
    543c:	03 c0       	rjmp	.+6      	; 0x5444 <VL53L0X_get_pal_range_status+0x180>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
    543e:	21 2c       	mov	r2, r1
    5440:	01 c0       	rjmp	.+2      	; 0x5444 <VL53L0X_get_pal_range_status+0x180>
    5442:	21 2c       	mov	r2, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
    5444:	9b 81       	ldd	r25, Y+3	; 0x03
    5446:	99 23       	and	r25, r25
    5448:	e1 f0       	breq	.+56     	; 0x5482 <VL53L0X_get_pal_range_status+0x1be>
    544a:	81 11       	cpse	r24, r1
    544c:	fe c0       	rjmp	.+508    	; 0x564a <VL53L0X_get_pal_range_status+0x386>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
    544e:	ae 01       	movw	r20, r28
    5450:	43 5f       	subi	r20, 0xF3	; 243
    5452:	5f 4f       	sbci	r21, 0xFF	; 255
    5454:	62 e0       	ldi	r22, 0x02	; 2
    5456:	70 e0       	ldi	r23, 0x00	; 0
    5458:	c5 01       	movw	r24, r10
    545a:	0e 94 35 0c 	call	0x186a	; 0x186a <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
    545e:	4d 85       	ldd	r20, Y+13	; 0x0d
    5460:	5e 85       	ldd	r21, Y+14	; 0x0e
    5462:	6f 85       	ldd	r22, Y+15	; 0x0f
    5464:	78 89       	ldd	r23, Y+16	; 0x10
    5466:	41 15       	cp	r20, r1
    5468:	51 05       	cpc	r21, r1
    546a:	61 05       	cpc	r22, r1
    546c:	71 05       	cpc	r23, r1
    546e:	59 f0       	breq	.+22     	; 0x5486 <VL53L0X_get_pal_range_status+0x1c2>
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
    5470:	ff 24       	eor	r15, r15
    5472:	f3 94       	inc	r15
    5474:	44 15       	cp	r20, r4
    5476:	55 05       	cpc	r21, r5
    5478:	66 05       	cpc	r22, r6
    547a:	77 05       	cpc	r23, r7
    547c:	28 f0       	brcs	.+10     	; 0x5488 <VL53L0X_get_pal_range_status+0x1c4>
    547e:	f1 2c       	mov	r15, r1
    5480:	03 c0       	rjmp	.+6      	; 0x5488 <VL53L0X_get_pal_range_status+0x1c4>
    5482:	f1 2c       	mov	r15, r1
    5484:	01 c0       	rjmp	.+2      	; 0x5488 <VL53L0X_get_pal_range_status+0x1c4>
    5486:	f1 2c       	mov	r15, r1
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
    5488:	81 11       	cpse	r24, r1
    548a:	e0 c0       	rjmp	.+448    	; 0x564c <VL53L0X_get_pal_range_status+0x388>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    548c:	ae 01       	movw	r20, r28
    548e:	4c 5f       	subi	r20, 0xFC	; 252
    5490:	5f 4f       	sbci	r21, 0xFF	; 255
    5492:	63 e0       	ldi	r22, 0x03	; 3
    5494:	70 e0       	ldi	r23, 0x00	; 0
    5496:	c5 01       	movw	r24, r10
    5498:	0e 94 ac 0b 	call	0x1758	; 0x1758 <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    549c:	9c 81       	ldd	r25, Y+4	; 0x04
    549e:	99 23       	and	r25, r25
    54a0:	89 f1       	breq	.+98     	; 0x5504 <VL53L0X_get_pal_range_status+0x240>
    54a2:	81 11       	cpse	r24, r1
    54a4:	76 c0       	rjmp	.+236    	; 0x5592 <VL53L0X_get_pal_range_status+0x2ce>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
    54a6:	81 14       	cp	r8, r1
    54a8:	91 04       	cpc	r9, r1
    54aa:	79 f0       	breq	.+30     	; 0x54ca <VL53L0X_get_pal_range_status+0x206>
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
<<<<<<< HEAD
    54ac:	28 a1       	ldd	r18, Y+32	; 0x20
    54ae:	39 a1       	ldd	r19, Y+33	; 0x21
    54b0:	4a a1       	ldd	r20, Y+34	; 0x22
    54b2:	5b a1       	ldd	r21, Y+35	; 0x23
    54b4:	94 2f       	mov	r25, r20
    54b6:	83 2f       	mov	r24, r19
    54b8:	72 2f       	mov	r23, r18
    54ba:	66 27       	eor	r22, r22
    54bc:	94 01       	movw	r18, r8
    54be:	40 e0       	ldi	r20, 0x00	; 0
    54c0:	50 e0       	ldi	r21, 0x00	; 0
    54c2:	b2 d3       	rcall	.+1892   	; 0x5c28 <__udivmodsi4>
    54c4:	29 01       	movw	r4, r18
    54c6:	3a 01       	movw	r6, r20
    54c8:	03 c0       	rjmp	.+6      	; 0x54d0 <VL53L0X_get_pal_range_status+0x20c>
=======
    51f6:	28 a1       	ldd	r18, Y+32	; 0x20
    51f8:	39 a1       	ldd	r19, Y+33	; 0x21
    51fa:	4a a1       	ldd	r20, Y+34	; 0x22
    51fc:	5b a1       	ldd	r21, Y+35	; 0x23
    51fe:	94 2f       	mov	r25, r20
    5200:	83 2f       	mov	r24, r19
    5202:	72 2f       	mov	r23, r18
    5204:	66 27       	eor	r22, r22
    5206:	94 01       	movw	r18, r8
    5208:	40 e0       	ldi	r20, 0x00	; 0
    520a:	50 e0       	ldi	r21, 0x00	; 0
    520c:	81 d3       	rcall	.+1794   	; 0x5910 <__udivmodsi4>
    520e:	29 01       	movw	r4, r18
    5210:	3a 01       	movw	r6, r20
    5212:	03 c0       	rjmp	.+6      	; 0x521a <VL53L0X_get_pal_range_status+0x20c>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
			SignalRatePerSpad = 0;
    54ca:	41 2c       	mov	r4, r1
    54cc:	51 2c       	mov	r5, r1
    54ce:	32 01       	movw	r6, r4
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
    54d0:	ae 01       	movw	r20, r28
    54d2:	4f 5e       	subi	r20, 0xEF	; 239
    54d4:	5f 4f       	sbci	r21, 0xFF	; 255
    54d6:	63 e0       	ldi	r22, 0x03	; 3
    54d8:	70 e0       	ldi	r23, 0x00	; 0
    54da:	c5 01       	movw	r24, r10
    54dc:	0e 94 35 0c 	call	0x186a	; 0x186a <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
    54e0:	49 89       	ldd	r20, Y+17	; 0x11
    54e2:	5a 89       	ldd	r21, Y+18	; 0x12
    54e4:	6b 89       	ldd	r22, Y+19	; 0x13
    54e6:	7c 89       	ldd	r23, Y+20	; 0x14
    54e8:	41 15       	cp	r20, r1
    54ea:	51 05       	cpc	r21, r1
    54ec:	61 05       	cpc	r22, r1
    54ee:	71 05       	cpc	r23, r1
    54f0:	59 f0       	breq	.+22     	; 0x5508 <VL53L0X_get_pal_range_status+0x244>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    54f2:	99 24       	eor	r9, r9
    54f4:	93 94       	inc	r9
    54f6:	44 16       	cp	r4, r20
    54f8:	55 06       	cpc	r5, r21
    54fa:	66 06       	cpc	r6, r22
    54fc:	77 06       	cpc	r7, r23
    54fe:	28 f0       	brcs	.+10     	; 0x550a <VL53L0X_get_pal_range_status+0x246>
    5500:	91 2c       	mov	r9, r1
    5502:	03 c0       	rjmp	.+6      	; 0x550a <VL53L0X_get_pal_range_status+0x246>
    5504:	91 2c       	mov	r9, r1
    5506:	01 c0       	rjmp	.+2      	; 0x550a <VL53L0X_get_pal_range_status+0x246>
    5508:	91 2c       	mov	r9, r1
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    550a:	81 11       	cpse	r24, r1
    550c:	45 c0       	rjmp	.+138    	; 0x5598 <VL53L0X_get_pal_range_status+0x2d4>
		if (NoneFlag == 1) {
    550e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    5510:	31 30       	cpi	r19, 0x01	; 1
    5512:	29 f4       	brne	.+10     	; 0x551e <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
    5514:	8f ef       	ldi	r24, 0xFF	; 255
    5516:	ea a5       	ldd	r30, Y+42	; 0x2a
    5518:	fb a5       	ldd	r31, Y+43	; 0x2b
    551a:	80 83       	st	Z, r24
    551c:	46 c0       	rjmp	.+140    	; 0x55aa <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 1 ||
    551e:	8f ef       	ldi	r24, 0xFF	; 255
    5520:	80 0f       	add	r24, r16
    5522:	83 30       	cpi	r24, 0x03	; 3
    5524:	28 f4       	brcc	.+10     	; 0x5530 <VL53L0X_get_pal_range_status+0x26c>
					DeviceRangeStatusInternal == 2 ||
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
    5526:	85 e0       	ldi	r24, 0x05	; 5
    5528:	ea a5       	ldd	r30, Y+42	; 0x2a
    552a:	fb a5       	ldd	r31, Y+43	; 0x2b
    552c:	80 83       	st	Z, r24
    552e:	3d c0       	rjmp	.+122    	; 0x55aa <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 6 ||
    5530:	f6 e0       	ldi	r31, 0x06	; 6
    5532:	3f 16       	cp	r3, r31
    5534:	31 f0       	breq	.+12     	; 0x5542 <VL53L0X_get_pal_range_status+0x27e>
    5536:	0f 2e       	mov	r0, r31
    5538:	f9 e0       	ldi	r31, 0x09	; 9
    553a:	cf 2e       	mov	r12, r31
    553c:	f0 2d       	mov	r31, r0
    553e:	3c 10       	cpse	r3, r12
    5540:	05 c0       	rjmp	.+10     	; 0x554c <VL53L0X_get_pal_range_status+0x288>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
    5542:	84 e0       	ldi	r24, 0x04	; 4
    5544:	ea a5       	ldd	r30, Y+42	; 0x2a
    5546:	fb a5       	ldd	r31, Y+43	; 0x2b
    5548:	80 83       	st	Z, r24
    554a:	2f c0       	rjmp	.+94     	; 0x55aa <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 8 ||
    554c:	0d 7f       	andi	r16, 0xFD	; 253
    554e:	08 30       	cpi	r16, 0x08	; 8
    5550:	19 f0       	breq	.+6      	; 0x5558 <VL53L0X_get_pal_range_status+0x294>
					DeviceRangeStatusInternal == 10 ||
    5552:	f1 e0       	ldi	r31, 0x01	; 1
    5554:	ff 12       	cpse	r15, r31
    5556:	05 c0       	rjmp	.+10     	; 0x5562 <VL53L0X_get_pal_range_status+0x29e>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
    5558:	83 e0       	ldi	r24, 0x03	; 3
    555a:	ea a5       	ldd	r30, Y+42	; 0x2a
    555c:	fb a5       	ldd	r31, Y+43	; 0x2b
    555e:	80 83       	st	Z, r24
    5560:	24 c0       	rjmp	.+72     	; 0x55aa <VL53L0X_get_pal_range_status+0x2e6>
		} else if (DeviceRangeStatusInternal == 4 ||
    5562:	f4 e0       	ldi	r31, 0x04	; 4
    5564:	3f 16       	cp	r3, r31
    5566:	21 f0       	breq	.+8      	; 0x5570 <VL53L0X_get_pal_range_status+0x2ac>
    5568:	cc 24       	eor	r12, r12
    556a:	c3 94       	inc	r12
    556c:	9c 10       	cpse	r9, r12
    556e:	05 c0       	rjmp	.+10     	; 0x557a <VL53L0X_get_pal_range_status+0x2b6>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
    5570:	82 e0       	ldi	r24, 0x02	; 2
    5572:	ea a5       	ldd	r30, Y+42	; 0x2a
    5574:	fb a5       	ldd	r31, Y+43	; 0x2b
    5576:	80 83       	st	Z, r24
    5578:	18 c0       	rjmp	.+48     	; 0x55aa <VL53L0X_get_pal_range_status+0x2e6>
		} else if (SigmaLimitflag == 1) {
    557a:	f1 e0       	ldi	r31, 0x01	; 1
    557c:	2f 12       	cpse	r2, r31
    557e:	05 c0       	rjmp	.+10     	; 0x558a <VL53L0X_get_pal_range_status+0x2c6>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	ea a5       	ldd	r30, Y+42	; 0x2a
    5584:	fb a5       	ldd	r31, Y+43	; 0x2b
    5586:	80 83       	st	Z, r24
    5588:	10 c0       	rjmp	.+32     	; 0x55aa <VL53L0X_get_pal_range_status+0x2e6>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
    558a:	ea a5       	ldd	r30, Y+42	; 0x2a
    558c:	fb a5       	ldd	r31, Y+43	; 0x2b
    558e:	10 82       	st	Z, r1
    5590:	08 c0       	rjmp	.+16     	; 0x55a2 <VL53L0X_get_pal_range_status+0x2de>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    5592:	91 2c       	mov	r9, r1
    5594:	01 c0       	rjmp	.+2      	; 0x5598 <VL53L0X_get_pal_range_status+0x2d4>
    5596:	91 2c       	mov	r9, r1
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
    5598:	ea a5       	ldd	r30, Y+42	; 0x2a
    559a:	fb a5       	ldd	r31, Y+43	; 0x2b
    559c:	80 81       	ld	r24, Z
    559e:	81 11       	cpse	r24, r1
    55a0:	04 c0       	rjmp	.+8      	; 0x55aa <VL53L0X_get_pal_range_status+0x2e6>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
    55a2:	e8 a5       	ldd	r30, Y+40	; 0x28
    55a4:	f9 a5       	ldd	r31, Y+41	; 0x29
    55a6:	13 86       	std	Z+11, r1	; 0x0b
    55a8:	12 86       	std	Z+10, r1	; 0x0a

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
    55aa:	ae 01       	movw	r20, r28
    55ac:	4e 5f       	subi	r20, 0xFE	; 254
    55ae:	5f 4f       	sbci	r21, 0xFF	; 255
    55b0:	61 e0       	ldi	r22, 0x01	; 1
    55b2:	70 e0       	ldi	r23, 0x00	; 0
    55b4:	c5 01       	movw	r24, r10
    55b6:	0e 94 ac 0b 	call	0x1758	; 0x1758 <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
    55ba:	81 11       	cpse	r24, r1
    55bc:	4c c0       	rjmp	.+152    	; 0x5656 <VL53L0X_get_pal_range_status+0x392>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
    55be:	99 81       	ldd	r25, Y+1	; 0x01
    55c0:	99 23       	and	r25, r25
    55c2:	29 f0       	breq	.+10     	; 0x55ce <VL53L0X_get_pal_range_status+0x30a>
			Temp8 = 1;
    55c4:	91 e0       	ldi	r25, 0x01	; 1
    55c6:	29 16       	cp	r2, r25
    55c8:	19 f0       	breq	.+6      	; 0x55d0 <VL53L0X_get_pal_range_status+0x30c>
    55ca:	90 e0       	ldi	r25, 0x00	; 0
    55cc:	01 c0       	rjmp	.+2      	; 0x55d0 <VL53L0X_get_pal_range_status+0x30c>
    55ce:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    55d0:	f5 01       	movw	r30, r10
    55d2:	93 a7       	std	Z+43, r25	; 0x2b
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
    55d4:	f4 e0       	ldi	r31, 0x04	; 4
    55d6:	3f 16       	cp	r3, r31
    55d8:	31 f0       	breq	.+12     	; 0x55e6 <VL53L0X_get_pal_range_status+0x322>
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
    55da:	91 e0       	ldi	r25, 0x01	; 1
    55dc:	2a 81       	ldd	r18, Y+2	; 0x02
    55de:	22 23       	and	r18, r18
    55e0:	19 f0       	breq	.+6      	; 0x55e8 <VL53L0X_get_pal_range_status+0x324>
    55e2:	90 e0       	ldi	r25, 0x00	; 0
    55e4:	01 c0       	rjmp	.+2      	; 0x55e8 <VL53L0X_get_pal_range_status+0x324>
    55e6:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    55e8:	f5 01       	movw	r30, r10
    55ea:	94 a7       	std	Z+44, r25	; 0x2c
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
    55ec:	9b 81       	ldd	r25, Y+3	; 0x03
    55ee:	99 23       	and	r25, r25
    55f0:	29 f0       	breq	.+10     	; 0x55fc <VL53L0X_get_pal_range_status+0x338>
					(SignalRefClipflag == 1))
			Temp8 = 1;
    55f2:	91 e0       	ldi	r25, 0x01	; 1
    55f4:	f9 16       	cp	r15, r25
    55f6:	19 f0       	breq	.+6      	; 0x55fe <VL53L0X_get_pal_range_status+0x33a>
    55f8:	90 e0       	ldi	r25, 0x00	; 0
    55fa:	01 c0       	rjmp	.+2      	; 0x55fe <VL53L0X_get_pal_range_status+0x33a>
    55fc:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    55fe:	f5 01       	movw	r30, r10
    5600:	95 a7       	std	Z+45, r25	; 0x2d
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
    5602:	9c 81       	ldd	r25, Y+4	; 0x04
    5604:	99 23       	and	r25, r25
    5606:	29 f0       	breq	.+10     	; 0x5612 <VL53L0X_get_pal_range_status+0x34e>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
    5608:	91 e0       	ldi	r25, 0x01	; 1
    560a:	99 16       	cp	r9, r25
    560c:	19 f0       	breq	.+6      	; 0x5614 <VL53L0X_get_pal_range_status+0x350>
    560e:	90 e0       	ldi	r25, 0x00	; 0
    5610:	01 c0       	rjmp	.+2      	; 0x5614 <VL53L0X_get_pal_range_status+0x350>
    5612:	91 e0       	ldi	r25, 0x01	; 1
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    5614:	f5 01       	movw	r30, r10
    5616:	96 a7       	std	Z+46, r25	; 0x2e
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
    5618:	1e c0       	rjmp	.+60     	; 0x5656 <VL53L0X_get_pal_range_status+0x392>
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_RdWord(Dev,
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    561a:	9d 89       	ldd	r25, Y+21	; 0x15
    561c:	20 e0       	ldi	r18, 0x00	; 0
    561e:	30 e0       	ldi	r19, 0x00	; 0
    5620:	39 2f       	mov	r19, r25
    5622:	33 0f       	add	r19, r19
    5624:	29 01       	movw	r4, r18
    5626:	61 2c       	mov	r6, r1
    5628:	71 2c       	mov	r7, r1

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    562a:	f5 01       	movw	r30, r10
    562c:	ee 5c       	subi	r30, 0xCE	; 206
    562e:	fe 4f       	sbci	r31, 0xFE	; 254
    5630:	40 82       	st	Z, r4
    5632:	51 82       	std	Z+1, r5	; 0x01
    5634:	62 82       	std	Z+2, r6	; 0x02
    5636:	73 82       	std	Z+3, r7	; 0x03
    5638:	bb ce       	rjmp	.-650    	; 0x53b0 <VL53L0X_get_pal_range_status+0xec>
    563a:	f5 01       	movw	r30, r10
    563c:	ee 5c       	subi	r30, 0xCE	; 206
    563e:	fe 4f       	sbci	r31, 0xFE	; 254
    5640:	40 82       	st	Z, r4
    5642:	51 82       	std	Z+1, r5	; 0x01
    5644:	62 82       	std	Z+2, r6	; 0x02
    5646:	73 82       	std	Z+3, r7	; 0x03
    5648:	b3 ce       	rjmp	.-666    	; 0x53b0 <VL53L0X_get_pal_range_status+0xec>
		uint8_t *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
    564a:	f1 2c       	mov	r15, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    564c:	9c 81       	ldd	r25, Y+4	; 0x04
    564e:	91 11       	cpse	r25, r1
    5650:	a2 cf       	rjmp	.-188    	; 0x5596 <VL53L0X_get_pal_range_status+0x2d2>
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
	uint8_t SignalRefClipflag = 0;
	uint8_t RangeIgnoreThresholdflag = 0;
    5652:	91 2c       	mov	r9, r1
    5654:	5a cf       	rjmp	.-332    	; 0x550a <VL53L0X_get_pal_range_status+0x246>
	}

	LOG_FUNCTION_END(Status);
	return Status;

}
    5656:	ab 96       	adiw	r28, 0x2b	; 43
    5658:	0f b6       	in	r0, 0x3f	; 63
    565a:	f8 94       	cli
    565c:	de bf       	out	0x3e, r29	; 62
    565e:	0f be       	out	0x3f, r0	; 63
    5660:	cd bf       	out	0x3d, r28	; 61
    5662:	df 91       	pop	r29
    5664:	cf 91       	pop	r28
    5666:	1f 91       	pop	r17
    5668:	0f 91       	pop	r16
    566a:	ff 90       	pop	r15
    566c:	ef 90       	pop	r14
    566e:	df 90       	pop	r13
    5670:	cf 90       	pop	r12
    5672:	bf 90       	pop	r11
    5674:	af 90       	pop	r10
    5676:	9f 90       	pop	r9
    5678:	8f 90       	pop	r8
    567a:	7f 90       	pop	r7
    567c:	6f 90       	pop	r6
    567e:	5f 90       	pop	r5
    5680:	4f 90       	pop	r4
    5682:	3f 90       	pop	r3
    5684:	2f 90       	pop	r2
    5686:	08 95       	ret

00005688 <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
    5688:	cf 92       	push	r12
    568a:	df 92       	push	r13
    568c:	ef 92       	push	r14
    568e:	ff 92       	push	r15
    5690:	1f 93       	push	r17
    5692:	cf 93       	push	r28
    5694:	df 93       	push	r29
    5696:	ec 01       	movw	r28, r24
    5698:	6b 01       	movw	r12, r22
    569a:	7a 01       	movw	r14, r20
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
    569c:	62 e0       	ldi	r22, 0x02	; 2
    569e:	0e 94 25 1b 	call	0x364a	; 0x364a <VL53L0X_get_info_from_device>
    56a2:	18 2f       	mov	r17, r24

	if (Status == VL53L0X_ERROR_NONE) {
    56a4:	81 11       	cpse	r24, r1
    56a6:	1a c0       	rjmp	.+52     	; 0x56dc <VL53L0X_check_part_used+0x54>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
    56a8:	fe 01       	movw	r30, r28
    56aa:	e0 52       	subi	r30, 0x20	; 32
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255

	if (ModuleIdInt == 0) {
    56ae:	80 81       	ld	r24, Z
    56b0:	81 11       	cpse	r24, r1
    56b2:	07 c0       	rjmp	.+14     	; 0x56c2 <VL53L0X_check_part_used+0x3a>
		*Revision = 0;
    56b4:	f6 01       	movw	r30, r12
    56b6:	10 82       	st	Z, r1
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
    56b8:	f7 01       	movw	r30, r14
    56ba:	e0 5c       	subi	r30, 0xC0	; 192
    56bc:	ff 4f       	sbci	r31, 0xFF	; 255
    56be:	10 82       	st	Z, r1
    56c0:	0d c0       	rjmp	.+26     	; 0x56dc <VL53L0X_check_part_used+0x54>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
    56c2:	fe 01       	movw	r30, r28
    56c4:	ef 51       	subi	r30, 0x1F	; 31
    56c6:	ff 4f       	sbci	r31, 0xFF	; 255
    56c8:	80 81       	ld	r24, Z
    56ca:	f6 01       	movw	r30, r12
    56cc:	80 83       	st	Z, r24
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
<<<<<<< HEAD
    56ce:	be 01       	movw	r22, r28
    56d0:	6e 51       	subi	r22, 0x1E	; 30
    56d2:	7f 4f       	sbci	r23, 0xFF	; 255
    56d4:	c7 01       	movw	r24, r14
    56d6:	80 5c       	subi	r24, 0xC0	; 192
    56d8:	9f 4f       	sbci	r25, 0xFF	; 255
    56da:	37 d3       	rcall	.+1646   	; 0x5d4a <strcpy>
=======
    5418:	be 01       	movw	r22, r28
    541a:	6e 51       	subi	r22, 0x1E	; 30
    541c:	7f 4f       	sbci	r23, 0xFF	; 255
    541e:	c7 01       	movw	r24, r14
    5420:	80 5c       	subi	r24, 0xC0	; 192
    5422:	9f 4f       	sbci	r25, 0xFF	; 255
    5424:	fd d2       	rcall	.+1530   	; 0x5a20 <strcpy>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
}
    56dc:	81 2f       	mov	r24, r17
    56de:	df 91       	pop	r29
    56e0:	cf 91       	pop	r28
    56e2:	1f 91       	pop	r17
    56e4:	ff 90       	pop	r15
    56e6:	ef 90       	pop	r14
    56e8:	df 90       	pop	r13
    56ea:	cf 90       	pop	r12
    56ec:	08 95       	ret

000056ee <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
    56ee:	ef 92       	push	r14
    56f0:	ff 92       	push	r15
    56f2:	0f 93       	push	r16
    56f4:	1f 93       	push	r17
    56f6:	cf 93       	push	r28
    56f8:	df 93       	push	r29
    56fa:	00 d0       	rcall	.+0      	; 0x56fc <VL53L0X_get_device_info+0xe>
    56fc:	cd b7       	in	r28, 0x3d	; 61
    56fe:	de b7       	in	r29, 0x3e	; 62
    5700:	7c 01       	movw	r14, r24
    5702:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
    5704:	ab 01       	movw	r20, r22
    5706:	be 01       	movw	r22, r28
    5708:	6e 5f       	subi	r22, 0xFE	; 254
    570a:	7f 4f       	sbci	r23, 0xFF	; 255
    570c:	bd df       	rcall	.-134    	; 0x5688 <VL53L0X_check_part_used>
	if (Status == VL53L0X_ERROR_NONE) {
    570e:	81 11       	cpse	r24, r1
    5710:	4d c0       	rjmp	.+154    	; 0x57ac <VL53L0X_get_device_info+0xbe>
		if (Revision == 0) {
    5712:	8a 81       	ldd	r24, Y+2	; 0x02
    5714:	81 11       	cpse	r24, r1
    5716:	09 c0       	rjmp	.+18     	; 0x572a <VL53L0X_get_device_info+0x3c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    5718:	8c e0       	ldi	r24, 0x0C	; 12
    571a:	eb eb       	ldi	r30, 0xBB	; 187
    571c:	f3 e0       	ldi	r31, 0x03	; 3
    571e:	d8 01       	movw	r26, r16
    5720:	01 90       	ld	r0, Z+
    5722:	0d 92       	st	X+, r0
    5724:	8a 95       	dec	r24
    5726:	e1 f7       	brne	.-8      	; 0x5720 <VL53L0X_get_device_info+0x32>
    5728:	20 c0       	rjmp	.+64     	; 0x576a <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
    572a:	83 32       	cpi	r24, 0x23	; 35
    572c:	58 f4       	brcc	.+22     	; 0x5744 <VL53L0X_get_device_info+0x56>
    572e:	80 32       	cpi	r24, 0x20	; 32
    5730:	59 f0       	breq	.+22     	; 0x5748 <VL53L0X_get_device_info+0x5a>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    5732:	8c e0       	ldi	r24, 0x0C	; 12
    5734:	e7 ec       	ldi	r30, 0xC7	; 199
    5736:	f3 e0       	ldi	r31, 0x03	; 3
    5738:	d8 01       	movw	r26, r16
    573a:	01 90       	ld	r0, Z+
    573c:	0d 92       	st	X+, r0
    573e:	8a 95       	dec	r24
    5740:	e1 f7       	brne	.-8      	; 0x573a <VL53L0X_get_device_info+0x4c>
    5742:	13 c0       	rjmp	.+38     	; 0x576a <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
    5744:	87 32       	cpi	r24, 0x27	; 39
    5746:	48 f4       	brcc	.+18     	; 0x575a <VL53L0X_get_device_info+0x6c>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    5748:	8c e0       	ldi	r24, 0x0C	; 12
    574a:	e3 ed       	ldi	r30, 0xD3	; 211
    574c:	f3 e0       	ldi	r31, 0x03	; 3
    574e:	d8 01       	movw	r26, r16
    5750:	01 90       	ld	r0, Z+
    5752:	0d 92       	st	X+, r0
    5754:	8a 95       	dec	r24
    5756:	e1 f7       	brne	.-8      	; 0x5750 <VL53L0X_get_device_info+0x62>
    5758:	08 c0       	rjmp	.+16     	; 0x576a <VL53L0X_get_device_info+0x7c>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
    575a:	85 e1       	ldi	r24, 0x15	; 21
    575c:	ef ed       	ldi	r30, 0xDF	; 223
    575e:	f3 e0       	ldi	r31, 0x03	; 3
    5760:	d8 01       	movw	r26, r16
    5762:	01 90       	ld	r0, Z+
    5764:	0d 92       	st	X+, r0
    5766:	8a 95       	dec	r24
    5768:	e1 f7       	brne	.-8      	; 0x5762 <VL53L0X_get_device_info+0x74>
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
    576a:	88 e0       	ldi	r24, 0x08	; 8
    576c:	e4 ef       	ldi	r30, 0xF4	; 244
    576e:	f3 e0       	ldi	r31, 0x03	; 3
    5770:	d8 01       	movw	r26, r16
    5772:	90 96       	adiw	r26, 0x20	; 32
    5774:	01 90       	ld	r0, Z+
    5776:	0d 92       	st	X+, r0
    5778:	8a 95       	dec	r24
    577a:	e1 f7       	brne	.-8      	; 0x5774 <VL53L0X_get_device_info+0x86>
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
<<<<<<< HEAD
    577c:	a8 01       	movw	r20, r16
    577e:	40 5a       	subi	r20, 0xA0	; 160
    5780:	5f 4f       	sbci	r21, 0xFF	; 255
    5782:	60 ec       	ldi	r22, 0xC0	; 192
    5784:	c7 01       	movw	r24, r14
    5786:	7d d1       	rcall	.+762    	; 0x5a82 <VL53L0X_RdByte>
=======
    54c6:	a8 01       	movw	r20, r16
    54c8:	40 5a       	subi	r20, 0xA0	; 160
    54ca:	5f 4f       	sbci	r21, 0xFF	; 255
    54cc:	60 ec       	ldi	r22, 0xC0	; 192
    54ce:	c7 01       	movw	r24, r14
    54d0:	bf d1       	rcall	.+894    	; 0x5850 <VL53L0X_RdByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
				&pVL53L0X_DeviceInfo->ProductType);
	}
	if (Status == VL53L0X_ERROR_NONE) {
    5788:	81 11       	cpse	r24, r1
    578a:	10 c0       	rjmp	.+32     	; 0x57ac <VL53L0X_get_device_info+0xbe>
		Status = VL53L0X_RdByte(Dev,
<<<<<<< HEAD
    578c:	ae 01       	movw	r20, r28
    578e:	4f 5f       	subi	r20, 0xFF	; 255
    5790:	5f 4f       	sbci	r21, 0xFF	; 255
    5792:	62 ec       	ldi	r22, 0xC2	; 194
    5794:	c7 01       	movw	r24, r14
    5796:	75 d1       	rcall	.+746    	; 0x5a82 <VL53L0X_RdByte>
=======
    54d6:	ae 01       	movw	r20, r28
    54d8:	4f 5f       	subi	r20, 0xFF	; 255
    54da:	5f 4f       	sbci	r21, 0xFF	; 255
    54dc:	62 ec       	ldi	r22, 0xC2	; 194
    54de:	c7 01       	movw	r24, r14
    54e0:	b7 d1       	rcall	.+878    	; 0x5850 <VL53L0X_RdByte>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
    5798:	f8 01       	movw	r30, r16
    579a:	ef 59       	subi	r30, 0x9F	; 159
    579c:	ff 4f       	sbci	r31, 0xFF	; 255
    579e:	91 e0       	ldi	r25, 0x01	; 1
    57a0:	90 83       	st	Z, r25
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
    57a2:	31 96       	adiw	r30, 0x01	; 1
    57a4:	99 81       	ldd	r25, Y+1	; 0x01
    57a6:	92 95       	swap	r25
    57a8:	9f 70       	andi	r25, 0x0F	; 15
    57aa:	90 83       	st	Z, r25
					(revision_id & 0xF0) >> 4;
	}

	return Status;
}
    57ac:	0f 90       	pop	r0
    57ae:	0f 90       	pop	r0
    57b0:	df 91       	pop	r29
    57b2:	cf 91       	pop	r28
    57b4:	1f 91       	pop	r17
    57b6:	0f 91       	pop	r16
    57b8:	ff 90       	pop	r15
    57ba:	ef 90       	pop	r14
    57bc:	08 95       	ret

000057be <VL53L0X_write_multi>:
  buff[2] = data >> 8;
  buff[1] = data >> 16;
  buff[0] = data >> 24;

  return VL53L0X_write_multi(deviceAddress, index, buff, 4);
}
<<<<<<< HEAD
    57be:	bf 92       	push	r11
    57c0:	cf 92       	push	r12
    57c2:	df 92       	push	r13
    57c4:	ef 92       	push	r14
    57c6:	ff 92       	push	r15
    57c8:	0f 93       	push	r16
    57ca:	1f 93       	push	r17
    57cc:	cf 93       	push	r28
    57ce:	df 93       	push	r29
    57d0:	b6 2e       	mov	r11, r22
    57d2:	ea 01       	movw	r28, r20
    57d4:	68 01       	movw	r12, r16
    57d6:	79 01       	movw	r14, r18
    57d8:	be d1       	rcall	.+892    	; 0x5b56 <Wire_beginTransmission>
    57da:	8b 2d       	mov	r24, r11
    57dc:	d9 d1       	rcall	.+946    	; 0x5b90 <Wire_write>
    57de:	c1 14       	cp	r12, r1
    57e0:	d1 04       	cpc	r13, r1
    57e2:	e1 04       	cpc	r14, r1
    57e4:	f1 04       	cpc	r15, r1
    57e6:	41 f0       	breq	.+16     	; 0x57f8 <VL53L0X_write_multi+0x3a>
    57e8:	89 91       	ld	r24, Y+
    57ea:	d2 d1       	rcall	.+932    	; 0x5b90 <Wire_write>
    57ec:	81 e0       	ldi	r24, 0x01	; 1
    57ee:	c8 1a       	sub	r12, r24
    57f0:	d1 08       	sbc	r13, r1
    57f2:	e1 08       	sbc	r14, r1
    57f4:	f1 08       	sbc	r15, r1
    57f6:	c1 f7       	brne	.-16     	; 0x57e8 <VL53L0X_write_multi+0x2a>
    57f8:	b8 d1       	rcall	.+880    	; 0x5b6a <Wire_endTransmission>
    57fa:	80 e0       	ldi	r24, 0x00	; 0
    57fc:	90 e0       	ldi	r25, 0x00	; 0
    57fe:	df 91       	pop	r29
    5800:	cf 91       	pop	r28
    5802:	1f 91       	pop	r17
    5804:	0f 91       	pop	r16
    5806:	ff 90       	pop	r15
    5808:	ef 90       	pop	r14
    580a:	df 90       	pop	r13
    580c:	cf 90       	pop	r12
    580e:	bf 90       	pop	r11
    5810:	08 95       	ret

00005812 <VL53L0X_read_multi>:
    5812:	af 92       	push	r10
    5814:	bf 92       	push	r11
    5816:	cf 92       	push	r12
    5818:	df 92       	push	r13
    581a:	ef 92       	push	r14
    581c:	ff 92       	push	r15
    581e:	0f 93       	push	r16
    5820:	1f 93       	push	r17
    5822:	cf 93       	push	r28
    5824:	df 93       	push	r29
    5826:	b8 2e       	mov	r11, r24
    5828:	a6 2e       	mov	r10, r22
    582a:	ea 01       	movw	r28, r20
    582c:	68 01       	movw	r12, r16
    582e:	79 01       	movw	r14, r18
    5830:	92 d1       	rcall	.+804    	; 0x5b56 <Wire_beginTransmission>
    5832:	8a 2d       	mov	r24, r10
    5834:	ad d1       	rcall	.+858    	; 0x5b90 <Wire_write>
    5836:	99 d1       	rcall	.+818    	; 0x5b6a <Wire_endTransmission>
    5838:	6c 2d       	mov	r22, r12
    583a:	8b 2d       	mov	r24, r11
    583c:	7e d1       	rcall	.+764    	; 0x5b3a <Wire_requestFrom>
    583e:	c1 14       	cp	r12, r1
    5840:	d1 04       	cpc	r13, r1
    5842:	e1 04       	cpc	r14, r1
    5844:	f1 04       	cpc	r15, r1
    5846:	41 f0       	breq	.+16     	; 0x5858 <VL53L0X_read_multi+0x46>
    5848:	cc d1       	rcall	.+920    	; 0x5be2 <Wire_read>
    584a:	89 93       	st	Y+, r24
    584c:	81 e0       	ldi	r24, 0x01	; 1
    584e:	c8 1a       	sub	r12, r24
    5850:	d1 08       	sbc	r13, r1
    5852:	e1 08       	sbc	r14, r1
    5854:	f1 08       	sbc	r15, r1
    5856:	c1 f7       	brne	.-16     	; 0x5848 <VL53L0X_read_multi+0x36>
    5858:	80 e0       	ldi	r24, 0x00	; 0
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	df 91       	pop	r29
    585e:	cf 91       	pop	r28
    5860:	1f 91       	pop	r17
    5862:	0f 91       	pop	r16
    5864:	ff 90       	pop	r15
    5866:	ef 90       	pop	r14
    5868:	df 90       	pop	r13
    586a:	cf 90       	pop	r12
    586c:	bf 90       	pop	r11
    586e:	af 90       	pop	r10
    5870:	08 95       	ret

00005872 <VL53L0X_write_byte>:
    5872:	0f 93       	push	r16
    5874:	1f 93       	push	r17
    5876:	cf 93       	push	r28
    5878:	df 93       	push	r29
    587a:	1f 92       	push	r1
    587c:	cd b7       	in	r28, 0x3d	; 61
    587e:	de b7       	in	r29, 0x3e	; 62
    5880:	49 83       	std	Y+1, r20	; 0x01
    5882:	01 e0       	ldi	r16, 0x01	; 1
    5884:	10 e0       	ldi	r17, 0x00	; 0
    5886:	20 e0       	ldi	r18, 0x00	; 0
    5888:	30 e0       	ldi	r19, 0x00	; 0
    588a:	ae 01       	movw	r20, r28
    588c:	4f 5f       	subi	r20, 0xFF	; 255
    588e:	5f 4f       	sbci	r21, 0xFF	; 255
    5890:	96 df       	rcall	.-212    	; 0x57be <VL53L0X_write_multi>
    5892:	0f 90       	pop	r0
    5894:	df 91       	pop	r29
    5896:	cf 91       	pop	r28
    5898:	1f 91       	pop	r17
    589a:	0f 91       	pop	r16
    589c:	08 95       	ret

0000589e <VL53L0X_write_word>:
    589e:	0f 93       	push	r16
    58a0:	1f 93       	push	r17
    58a2:	cf 93       	push	r28
    58a4:	df 93       	push	r29
    58a6:	00 d0       	rcall	.+0      	; 0x58a8 <VL53L0X_write_word+0xa>
    58a8:	cd b7       	in	r28, 0x3d	; 61
    58aa:	de b7       	in	r29, 0x3e	; 62
    58ac:	4a 83       	std	Y+2, r20	; 0x02
    58ae:	59 83       	std	Y+1, r21	; 0x01
    58b0:	02 e0       	ldi	r16, 0x02	; 2
    58b2:	10 e0       	ldi	r17, 0x00	; 0
    58b4:	20 e0       	ldi	r18, 0x00	; 0
    58b6:	30 e0       	ldi	r19, 0x00	; 0
    58b8:	ae 01       	movw	r20, r28
    58ba:	4f 5f       	subi	r20, 0xFF	; 255
    58bc:	5f 4f       	sbci	r21, 0xFF	; 255
    58be:	7f df       	rcall	.-258    	; 0x57be <VL53L0X_write_multi>
    58c0:	0f 90       	pop	r0
    58c2:	0f 90       	pop	r0
    58c4:	df 91       	pop	r29
    58c6:	cf 91       	pop	r28
    58c8:	1f 91       	pop	r17
    58ca:	0f 91       	pop	r16
    58cc:	08 95       	ret

000058ce <VL53L0X_read_byte>:

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data) {
    58ce:	0f 93       	push	r16
    58d0:	1f 93       	push	r17
  return VL53L0X_read_multi(deviceAddress, index, data, 1);
    58d2:	01 e0       	ldi	r16, 0x01	; 1
    58d4:	10 e0       	ldi	r17, 0x00	; 0
    58d6:	20 e0       	ldi	r18, 0x00	; 0
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	9b df       	rcall	.-202    	; 0x5812 <VL53L0X_read_multi>
}
    58dc:	1f 91       	pop	r17
    58de:	0f 91       	pop	r16
    58e0:	08 95       	ret

000058e2 <VL53L0X_read_word>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data) {
    58e2:	ef 92       	push	r14
    58e4:	ff 92       	push	r15
    58e6:	0f 93       	push	r16
    58e8:	1f 93       	push	r17
    58ea:	cf 93       	push	r28
    58ec:	df 93       	push	r29
    58ee:	00 d0       	rcall	.+0      	; 0x58f0 <VL53L0X_read_word+0xe>
    58f0:	cd b7       	in	r28, 0x3d	; 61
    58f2:	de b7       	in	r29, 0x3e	; 62
    58f4:	7a 01       	movw	r14, r20
  uint8_t buff[2];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 2);
    58f6:	02 e0       	ldi	r16, 0x02	; 2
    58f8:	10 e0       	ldi	r17, 0x00	; 0
    58fa:	20 e0       	ldi	r18, 0x00	; 0
    58fc:	30 e0       	ldi	r19, 0x00	; 0
    58fe:	ae 01       	movw	r20, r28
    5900:	4f 5f       	subi	r20, 0xFF	; 255
    5902:	5f 4f       	sbci	r21, 0xFF	; 255
    5904:	86 df       	rcall	.-244    	; 0x5812 <VL53L0X_read_multi>

  uint16_t tmp;
  tmp = buff[0];
    5906:	29 81       	ldd	r18, Y+1	; 0x01
    5908:	30 e0       	ldi	r19, 0x00	; 0
  tmp <<= 8;
    590a:	32 2f       	mov	r19, r18
    590c:	22 27       	eor	r18, r18
  tmp |= buff[1];
  *data = tmp;
    590e:	4a 81       	ldd	r20, Y+2	; 0x02
    5910:	24 2b       	or	r18, r20
    5912:	f7 01       	movw	r30, r14
    5914:	31 83       	std	Z+1, r19	; 0x01
    5916:	20 83       	st	Z, r18

  return r;
}
    5918:	0f 90       	pop	r0
    591a:	0f 90       	pop	r0
    591c:	df 91       	pop	r29
    591e:	cf 91       	pop	r28
    5920:	1f 91       	pop	r17
    5922:	0f 91       	pop	r16
    5924:	ff 90       	pop	r15
    5926:	ef 90       	pop	r14
    5928:	08 95       	ret

0000592a <VL53L0X_read_dword>:

int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data) {
    592a:	ef 92       	push	r14
    592c:	ff 92       	push	r15
    592e:	0f 93       	push	r16
    5930:	1f 93       	push	r17
    5932:	cf 93       	push	r28
    5934:	df 93       	push	r29
    5936:	00 d0       	rcall	.+0      	; 0x5938 <VL53L0X_read_dword+0xe>
    5938:	00 d0       	rcall	.+0      	; 0x593a <VL53L0X_read_dword+0x10>
    593a:	cd b7       	in	r28, 0x3d	; 61
    593c:	de b7       	in	r29, 0x3e	; 62
    593e:	7a 01       	movw	r14, r20
  uint8_t buff[4];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 4);
    5940:	04 e0       	ldi	r16, 0x04	; 4
    5942:	10 e0       	ldi	r17, 0x00	; 0
    5944:	20 e0       	ldi	r18, 0x00	; 0
    5946:	30 e0       	ldi	r19, 0x00	; 0
    5948:	ae 01       	movw	r20, r28
    594a:	4f 5f       	subi	r20, 0xFF	; 255
    594c:	5f 4f       	sbci	r21, 0xFF	; 255
    594e:	61 df       	rcall	.-318    	; 0x5812 <VL53L0X_read_multi>

  uint32_t tmp;
  tmp = buff[0];
    5950:	49 81       	ldd	r20, Y+1	; 0x01
    5952:	50 e0       	ldi	r21, 0x00	; 0
    5954:	60 e0       	ldi	r22, 0x00	; 0
    5956:	70 e0       	ldi	r23, 0x00	; 0
  tmp <<= 8;
    5958:	76 2f       	mov	r23, r22
    595a:	65 2f       	mov	r22, r21
    595c:	54 2f       	mov	r21, r20
    595e:	44 27       	eor	r20, r20
  tmp |= buff[1];
    5960:	2a 81       	ldd	r18, Y+2	; 0x02
    5962:	42 2b       	or	r20, r18
  tmp <<= 8;
    5964:	76 2f       	mov	r23, r22
    5966:	65 2f       	mov	r22, r21
    5968:	54 2f       	mov	r21, r20
    596a:	44 27       	eor	r20, r20
  tmp |= buff[2];
    596c:	2b 81       	ldd	r18, Y+3	; 0x03
    596e:	42 2b       	or	r20, r18
  tmp <<= 8;
    5970:	76 2f       	mov	r23, r22
    5972:	65 2f       	mov	r22, r21
    5974:	54 2f       	mov	r21, r20
    5976:	44 27       	eor	r20, r20
  tmp |= buff[3];

  *data = tmp;
    5978:	2c 81       	ldd	r18, Y+4	; 0x04
    597a:	42 2b       	or	r20, r18
    597c:	f7 01       	movw	r30, r14
    597e:	40 83       	st	Z, r20
    5980:	51 83       	std	Z+1, r21	; 0x01
    5982:	62 83       	std	Z+2, r22	; 0x02
    5984:	73 83       	std	Z+3, r23	; 0x03

  return r;
}
    5986:	0f 90       	pop	r0
    5988:	0f 90       	pop	r0
    598a:	0f 90       	pop	r0
    598c:	0f 90       	pop	r0
    598e:	df 91       	pop	r29
    5990:	cf 91       	pop	r28
    5992:	1f 91       	pop	r17
    5994:	0f 91       	pop	r16
    5996:	ff 90       	pop	r15
    5998:	ef 90       	pop	r14
    599a:	08 95       	ret

0000599c <VL53L0X_WriteMulti>:
=======
    5508:	cf 93       	push	r28
    550a:	df 93       	push	r29
    550c:	00 d0       	rcall	.+0      	; 0x550e <VL53L0X_i2c_init+0x6>
    550e:	00 d0       	rcall	.+0      	; 0x5510 <VL53L0X_i2c_init+0x8>
    5510:	1f 92       	push	r1
    5512:	cd b7       	in	r28, 0x3d	; 61
    5514:	de b7       	in	r29, 0x3e	; 62
    5516:	80 e8       	ldi	r24, 0x80	; 128
    5518:	58 2f       	mov	r21, r24
    551a:	41 e0       	ldi	r20, 0x01	; 1
    551c:	68 e3       	ldi	r22, 0x38	; 56
    551e:	71 e0       	ldi	r23, 0x01	; 1
    5520:	80 e0       	ldi	r24, 0x00	; 0
    5522:	0e 94 b2 01 	call	0x364	; 0x364 <i2c_init>
    5526:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <i2c_start>
    552a:	80 e0       	ldi	r24, 0x00	; 0
    552c:	90 e0       	ldi	r25, 0x00	; 0
    552e:	0f 90       	pop	r0
    5530:	0f 90       	pop	r0
    5532:	0f 90       	pop	r0
    5534:	0f 90       	pop	r0
    5536:	0f 90       	pop	r0
    5538:	df 91       	pop	r29
    553a:	cf 91       	pop	r28
    553c:	08 95       	ret

0000553e <VL53L0X_write_multi>:
    553e:	4f 92       	push	r4
    5540:	5f 92       	push	r5
    5542:	6f 92       	push	r6
    5544:	7f 92       	push	r7
    5546:	8f 92       	push	r8
    5548:	9f 92       	push	r9
    554a:	af 92       	push	r10
    554c:	bf 92       	push	r11
    554e:	ef 92       	push	r14
    5550:	ff 92       	push	r15
    5552:	0f 93       	push	r16
    5554:	1f 93       	push	r17
    5556:	cf 93       	push	r28
    5558:	df 93       	push	r29
    555a:	cd b7       	in	r28, 0x3d	; 61
    555c:	de b7       	in	r29, 0x3e	; 62
    555e:	96 2f       	mov	r25, r22
    5560:	28 01       	movw	r4, r16
    5562:	39 01       	movw	r6, r18
    5564:	ed b6       	in	r14, 0x3d	; 61
    5566:	fe b6       	in	r15, 0x3e	; 62
    5568:	48 01       	movw	r8, r16
    556a:	59 01       	movw	r10, r18
    556c:	2f ef       	ldi	r18, 0xFF	; 255
    556e:	82 1a       	sub	r8, r18
    5570:	92 0a       	sbc	r9, r18
    5572:	a2 0a       	sbc	r10, r18
    5574:	b2 0a       	sbc	r11, r18
    5576:	ad b7       	in	r26, 0x3d	; 61
    5578:	be b7       	in	r27, 0x3e	; 62
    557a:	a8 19       	sub	r26, r8
    557c:	b9 09       	sbc	r27, r9
    557e:	0f b6       	in	r0, 0x3f	; 63
    5580:	f8 94       	cli
    5582:	be bf       	out	0x3e, r27	; 62
    5584:	0f be       	out	0x3f, r0	; 63
    5586:	ad bf       	out	0x3d, r26	; 61
    5588:	6d b7       	in	r22, 0x3d	; 61
    558a:	7e b7       	in	r23, 0x3e	; 62
    558c:	6f 5f       	subi	r22, 0xFF	; 255
    558e:	7f 4f       	sbci	r23, 0xFF	; 255
    5590:	8b 01       	movw	r16, r22
    5592:	11 96       	adiw	r26, 0x01	; 1
    5594:	9c 93       	st	X, r25
    5596:	41 14       	cp	r4, r1
    5598:	51 04       	cpc	r5, r1
    559a:	61 04       	cpc	r6, r1
    559c:	71 04       	cpc	r7, r1
    559e:	a9 f0       	breq	.+42     	; 0x55ca <VL53L0X_write_multi+0x8c>
    55a0:	90 e0       	ldi	r25, 0x00	; 0
    55a2:	29 2f       	mov	r18, r25
    55a4:	30 e0       	ldi	r19, 0x00	; 0
    55a6:	f8 01       	movw	r30, r16
    55a8:	e2 0f       	add	r30, r18
    55aa:	f3 1f       	adc	r31, r19
    55ac:	24 0f       	add	r18, r20
    55ae:	35 1f       	adc	r19, r21
    55b0:	d9 01       	movw	r26, r18
    55b2:	2c 91       	ld	r18, X
    55b4:	21 83       	std	Z+1, r18	; 0x01
    55b6:	9f 5f       	subi	r25, 0xFF	; 255
    55b8:	89 2e       	mov	r8, r25
    55ba:	91 2c       	mov	r9, r1
    55bc:	a1 2c       	mov	r10, r1
    55be:	b1 2c       	mov	r11, r1
    55c0:	84 14       	cp	r8, r4
    55c2:	95 04       	cpc	r9, r5
    55c4:	a6 04       	cpc	r10, r6
    55c6:	b7 04       	cpc	r11, r7
    55c8:	60 f3       	brcs	.-40     	; 0x55a2 <VL53L0X_write_multi+0x64>
    55ca:	41 e0       	ldi	r20, 0x01	; 1
    55cc:	44 0d       	add	r20, r4
    55ce:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_transmit>
    55d2:	80 e0       	ldi	r24, 0x00	; 0
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	0f b6       	in	r0, 0x3f	; 63
    55d8:	f8 94       	cli
    55da:	fe be       	out	0x3e, r15	; 62
    55dc:	0f be       	out	0x3f, r0	; 63
    55de:	ed be       	out	0x3d, r14	; 61
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	1f 91       	pop	r17
    55e6:	0f 91       	pop	r16
    55e8:	ff 90       	pop	r15
    55ea:	ef 90       	pop	r14
    55ec:	bf 90       	pop	r11
    55ee:	af 90       	pop	r10
    55f0:	9f 90       	pop	r9
    55f2:	8f 90       	pop	r8
    55f4:	7f 90       	pop	r7
    55f6:	6f 90       	pop	r6
    55f8:	5f 90       	pop	r5
    55fa:	4f 90       	pop	r4
    55fc:	08 95       	ret

000055fe <VL53L0X_read_multi>:
    55fe:	ef 92       	push	r14
    5600:	ff 92       	push	r15
    5602:	0f 93       	push	r16
    5604:	1f 93       	push	r17
    5606:	cf 93       	push	r28
    5608:	df 93       	push	r29
    560a:	1f 92       	push	r1
    560c:	cd b7       	in	r28, 0x3d	; 61
    560e:	de b7       	in	r29, 0x3e	; 62
    5610:	18 2f       	mov	r17, r24
    5612:	69 83       	std	Y+1, r22	; 0x01
    5614:	7a 01       	movw	r14, r20
    5616:	41 e0       	ldi	r20, 0x01	; 1
    5618:	be 01       	movw	r22, r28
    561a:	6f 5f       	subi	r22, 0xFF	; 255
    561c:	7f 4f       	sbci	r23, 0xFF	; 255
    561e:	0e 94 ef 01 	call	0x3de	; 0x3de <i2c_transmit>
    5622:	40 2f       	mov	r20, r16
    5624:	b7 01       	movw	r22, r14
    5626:	81 2f       	mov	r24, r17
    5628:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <i2c_receive>
    562c:	80 e0       	ldi	r24, 0x00	; 0
    562e:	90 e0       	ldi	r25, 0x00	; 0
    5630:	0f 90       	pop	r0
    5632:	df 91       	pop	r29
    5634:	cf 91       	pop	r28
    5636:	1f 91       	pop	r17
    5638:	0f 91       	pop	r16
    563a:	ff 90       	pop	r15
    563c:	ef 90       	pop	r14
    563e:	08 95       	ret

00005640 <VL53L0X_write_byte>:
    5640:	0f 93       	push	r16
    5642:	1f 93       	push	r17
    5644:	cf 93       	push	r28
    5646:	df 93       	push	r29
    5648:	1f 92       	push	r1
    564a:	cd b7       	in	r28, 0x3d	; 61
    564c:	de b7       	in	r29, 0x3e	; 62
    564e:	49 83       	std	Y+1, r20	; 0x01
    5650:	01 e0       	ldi	r16, 0x01	; 1
    5652:	10 e0       	ldi	r17, 0x00	; 0
    5654:	20 e0       	ldi	r18, 0x00	; 0
    5656:	30 e0       	ldi	r19, 0x00	; 0
    5658:	ae 01       	movw	r20, r28
    565a:	4f 5f       	subi	r20, 0xFF	; 255
    565c:	5f 4f       	sbci	r21, 0xFF	; 255
    565e:	6f df       	rcall	.-290    	; 0x553e <VL53L0X_write_multi>
    5660:	0f 90       	pop	r0
    5662:	df 91       	pop	r29
    5664:	cf 91       	pop	r28
    5666:	1f 91       	pop	r17
    5668:	0f 91       	pop	r16
    566a:	08 95       	ret

0000566c <VL53L0X_write_word>:
    566c:	0f 93       	push	r16
    566e:	1f 93       	push	r17
    5670:	cf 93       	push	r28
    5672:	df 93       	push	r29
    5674:	00 d0       	rcall	.+0      	; 0x5676 <VL53L0X_write_word+0xa>
    5676:	cd b7       	in	r28, 0x3d	; 61
    5678:	de b7       	in	r29, 0x3e	; 62
    567a:	4a 83       	std	Y+2, r20	; 0x02
    567c:	59 83       	std	Y+1, r21	; 0x01
    567e:	02 e0       	ldi	r16, 0x02	; 2
    5680:	10 e0       	ldi	r17, 0x00	; 0
    5682:	20 e0       	ldi	r18, 0x00	; 0
    5684:	30 e0       	ldi	r19, 0x00	; 0
    5686:	ae 01       	movw	r20, r28
    5688:	4f 5f       	subi	r20, 0xFF	; 255
    568a:	5f 4f       	sbci	r21, 0xFF	; 255
    568c:	58 df       	rcall	.-336    	; 0x553e <VL53L0X_write_multi>
    568e:	0f 90       	pop	r0
    5690:	0f 90       	pop	r0
    5692:	df 91       	pop	r29
    5694:	cf 91       	pop	r28
    5696:	1f 91       	pop	r17
    5698:	0f 91       	pop	r16
    569a:	08 95       	ret

0000569c <VL53L0X_read_byte>:

int VL53L0X_read_byte(uint8_t deviceAddress, uint8_t index, uint8_t *data) {
    569c:	0f 93       	push	r16
    569e:	1f 93       	push	r17
  return VL53L0X_read_multi(deviceAddress, index, data, 1);
    56a0:	01 e0       	ldi	r16, 0x01	; 1
    56a2:	10 e0       	ldi	r17, 0x00	; 0
    56a4:	20 e0       	ldi	r18, 0x00	; 0
    56a6:	30 e0       	ldi	r19, 0x00	; 0
    56a8:	aa df       	rcall	.-172    	; 0x55fe <VL53L0X_read_multi>
}
    56aa:	1f 91       	pop	r17
    56ac:	0f 91       	pop	r16
    56ae:	08 95       	ret

000056b0 <VL53L0X_read_word>:

int VL53L0X_read_word(uint8_t deviceAddress, uint8_t index, uint16_t *data) {
    56b0:	ef 92       	push	r14
    56b2:	ff 92       	push	r15
    56b4:	0f 93       	push	r16
    56b6:	1f 93       	push	r17
    56b8:	cf 93       	push	r28
    56ba:	df 93       	push	r29
    56bc:	00 d0       	rcall	.+0      	; 0x56be <VL53L0X_read_word+0xe>
    56be:	cd b7       	in	r28, 0x3d	; 61
    56c0:	de b7       	in	r29, 0x3e	; 62
    56c2:	7a 01       	movw	r14, r20
  uint8_t buff[2];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 2);
    56c4:	02 e0       	ldi	r16, 0x02	; 2
    56c6:	10 e0       	ldi	r17, 0x00	; 0
    56c8:	20 e0       	ldi	r18, 0x00	; 0
    56ca:	30 e0       	ldi	r19, 0x00	; 0
    56cc:	ae 01       	movw	r20, r28
    56ce:	4f 5f       	subi	r20, 0xFF	; 255
    56d0:	5f 4f       	sbci	r21, 0xFF	; 255
    56d2:	95 df       	rcall	.-214    	; 0x55fe <VL53L0X_read_multi>

  uint16_t tmp;
  tmp = buff[0];
    56d4:	29 81       	ldd	r18, Y+1	; 0x01
    56d6:	30 e0       	ldi	r19, 0x00	; 0
  tmp <<= 8;
    56d8:	32 2f       	mov	r19, r18
    56da:	22 27       	eor	r18, r18
  tmp |= buff[1];
  *data = tmp;
    56dc:	4a 81       	ldd	r20, Y+2	; 0x02
    56de:	24 2b       	or	r18, r20
    56e0:	f7 01       	movw	r30, r14
    56e2:	31 83       	std	Z+1, r19	; 0x01
    56e4:	20 83       	st	Z, r18

  return r;
}
    56e6:	0f 90       	pop	r0
    56e8:	0f 90       	pop	r0
    56ea:	df 91       	pop	r29
    56ec:	cf 91       	pop	r28
    56ee:	1f 91       	pop	r17
    56f0:	0f 91       	pop	r16
    56f2:	ff 90       	pop	r15
    56f4:	ef 90       	pop	r14
    56f6:	08 95       	ret

000056f8 <VL53L0X_read_dword>:

int VL53L0X_read_dword(uint8_t deviceAddress, uint8_t index, uint32_t *data) {
    56f8:	ef 92       	push	r14
    56fa:	ff 92       	push	r15
    56fc:	0f 93       	push	r16
    56fe:	1f 93       	push	r17
    5700:	cf 93       	push	r28
    5702:	df 93       	push	r29
    5704:	00 d0       	rcall	.+0      	; 0x5706 <VL53L0X_read_dword+0xe>
    5706:	00 d0       	rcall	.+0      	; 0x5708 <VL53L0X_read_dword+0x10>
    5708:	cd b7       	in	r28, 0x3d	; 61
    570a:	de b7       	in	r29, 0x3e	; 62
    570c:	7a 01       	movw	r14, r20
  uint8_t buff[4];
  int r = VL53L0X_read_multi(deviceAddress, index, buff, 4);
    570e:	04 e0       	ldi	r16, 0x04	; 4
    5710:	10 e0       	ldi	r17, 0x00	; 0
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	ae 01       	movw	r20, r28
    5718:	4f 5f       	subi	r20, 0xFF	; 255
    571a:	5f 4f       	sbci	r21, 0xFF	; 255
    571c:	70 df       	rcall	.-288    	; 0x55fe <VL53L0X_read_multi>

  uint32_t tmp;
  tmp = buff[0];
    571e:	49 81       	ldd	r20, Y+1	; 0x01
    5720:	50 e0       	ldi	r21, 0x00	; 0
    5722:	60 e0       	ldi	r22, 0x00	; 0
    5724:	70 e0       	ldi	r23, 0x00	; 0
  tmp <<= 8;
    5726:	76 2f       	mov	r23, r22
    5728:	65 2f       	mov	r22, r21
    572a:	54 2f       	mov	r21, r20
    572c:	44 27       	eor	r20, r20
  tmp |= buff[1];
    572e:	2a 81       	ldd	r18, Y+2	; 0x02
    5730:	42 2b       	or	r20, r18
  tmp <<= 8;
    5732:	76 2f       	mov	r23, r22
    5734:	65 2f       	mov	r22, r21
    5736:	54 2f       	mov	r21, r20
    5738:	44 27       	eor	r20, r20
  tmp |= buff[2];
    573a:	2b 81       	ldd	r18, Y+3	; 0x03
    573c:	42 2b       	or	r20, r18
  tmp <<= 8;
    573e:	76 2f       	mov	r23, r22
    5740:	65 2f       	mov	r22, r21
    5742:	54 2f       	mov	r21, r20
    5744:	44 27       	eor	r20, r20
  tmp |= buff[3];

  *data = tmp;
    5746:	2c 81       	ldd	r18, Y+4	; 0x04
    5748:	42 2b       	or	r20, r18
    574a:	f7 01       	movw	r30, r14
    574c:	40 83       	st	Z, r20
    574e:	51 83       	std	Z+1, r21	; 0x01
    5750:	62 83       	std	Z+2, r22	; 0x02
    5752:	73 83       	std	Z+3, r23	; 0x03

  return r;
}
    5754:	0f 90       	pop	r0
    5756:	0f 90       	pop	r0
    5758:	0f 90       	pop	r0
    575a:	0f 90       	pop	r0
    575c:	df 91       	pop	r29
    575e:	cf 91       	pop	r28
    5760:	1f 91       	pop	r17
    5762:	0f 91       	pop	r16
    5764:	ff 90       	pop	r15
    5766:	ef 90       	pop	r14
    5768:	08 95       	ret

0000576a <VL53L0X_WriteMulti>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
<<<<<<< HEAD
    599c:	0f 93       	push	r16
    599e:	1f 93       	push	r17
    59a0:	cf 93       	push	r28
    59a2:	00 34       	cpi	r16, 0x40	; 64
    59a4:	11 05       	cpc	r17, r1
    59a6:	21 05       	cpc	r18, r1
    59a8:	31 05       	cpc	r19, r1
    59aa:	10 f0       	brcs	.+4      	; 0x59b0 <VL53L0X_WriteMulti+0x14>
    59ac:	cc ef       	ldi	r28, 0xFC	; 252
    59ae:	01 c0       	rjmp	.+2      	; 0x59b2 <VL53L0X_WriteMulti+0x16>
    59b0:	c0 e0       	ldi	r28, 0x00	; 0
    59b2:	fc 01       	movw	r30, r24
    59b4:	ef 5b       	subi	r30, 0xBF	; 191
    59b6:	fe 4f       	sbci	r31, 0xFE	; 254
    59b8:	80 81       	ld	r24, Z
    59ba:	01 df       	rcall	.-510    	; 0x57be <VL53L0X_write_multi>
    59bc:	89 2b       	or	r24, r25
    59be:	09 f0       	breq	.+2      	; 0x59c2 <VL53L0X_WriteMulti+0x26>
    59c0:	cc ee       	ldi	r28, 0xEC	; 236
    59c2:	8c 2f       	mov	r24, r28
    59c4:	cf 91       	pop	r28
    59c6:	1f 91       	pop	r17
    59c8:	0f 91       	pop	r16
    59ca:	08 95       	ret

000059cc <VL53L0X_ReadMulti>:
    59cc:	0f 93       	push	r16
    59ce:	1f 93       	push	r17
    59d0:	cf 93       	push	r28
    59d2:	00 34       	cpi	r16, 0x40	; 64
    59d4:	11 05       	cpc	r17, r1
    59d6:	21 05       	cpc	r18, r1
    59d8:	31 05       	cpc	r19, r1
    59da:	10 f0       	brcs	.+4      	; 0x59e0 <VL53L0X_ReadMulti+0x14>
    59dc:	cc ef       	ldi	r28, 0xFC	; 252
    59de:	01 c0       	rjmp	.+2      	; 0x59e2 <VL53L0X_ReadMulti+0x16>
    59e0:	c0 e0       	ldi	r28, 0x00	; 0
    59e2:	fc 01       	movw	r30, r24
    59e4:	ef 5b       	subi	r30, 0xBF	; 191
    59e6:	fe 4f       	sbci	r31, 0xFE	; 254
    59e8:	80 81       	ld	r24, Z
    59ea:	13 df       	rcall	.-474    	; 0x5812 <VL53L0X_read_multi>
    59ec:	89 2b       	or	r24, r25
    59ee:	09 f0       	breq	.+2      	; 0x59f2 <VL53L0X_ReadMulti+0x26>
    59f0:	cc ee       	ldi	r28, 0xEC	; 236
    59f2:	8c 2f       	mov	r24, r28
    59f4:	cf 91       	pop	r28
    59f6:	1f 91       	pop	r17
    59f8:	0f 91       	pop	r16
    59fa:	08 95       	ret

000059fc <VL53L0X_WrByte>:
    59fc:	8f 5b       	subi	r24, 0xBF	; 191
    59fe:	9e 4f       	sbci	r25, 0xFE	; 254
    5a00:	fc 01       	movw	r30, r24
    5a02:	80 81       	ld	r24, Z
    5a04:	36 df       	rcall	.-404    	; 0x5872 <VL53L0X_write_byte>
    5a06:	89 2b       	or	r24, r25
    5a08:	11 f0       	breq	.+4      	; 0x5a0e <VL53L0X_WrByte+0x12>
    5a0a:	8c ee       	ldi	r24, 0xEC	; 236
    5a0c:	08 95       	ret
    5a0e:	80 e0       	ldi	r24, 0x00	; 0
    5a10:	08 95       	ret

00005a12 <VL53L0X_WrWord>:
    5a12:	8f 5b       	subi	r24, 0xBF	; 191
    5a14:	9e 4f       	sbci	r25, 0xFE	; 254
    5a16:	fc 01       	movw	r30, r24
    5a18:	80 81       	ld	r24, Z
    5a1a:	41 df       	rcall	.-382    	; 0x589e <VL53L0X_write_word>
    5a1c:	89 2b       	or	r24, r25
    5a1e:	11 f0       	breq	.+4      	; 0x5a24 <VL53L0X_WrWord+0x12>
    5a20:	8c ee       	ldi	r24, 0xEC	; 236
    5a22:	08 95       	ret
    5a24:	80 e0       	ldi	r24, 0x00	; 0
    5a26:	08 95       	ret

00005a28 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
    5a28:	ef 92       	push	r14
    5a2a:	ff 92       	push	r15
    5a2c:	0f 93       	push	r16
    5a2e:	1f 93       	push	r17
    5a30:	cf 93       	push	r28
    5a32:	df 93       	push	r29
    5a34:	1f 92       	push	r1
    5a36:	cd b7       	in	r28, 0x3d	; 61
    5a38:	de b7       	in	r29, 0x3e	; 62
    5a3a:	f6 2e       	mov	r15, r22
    5a3c:	e4 2e       	mov	r14, r20
    5a3e:	12 2f       	mov	r17, r18
=======
    576a:	0f 93       	push	r16
    576c:	1f 93       	push	r17
    576e:	cf 93       	push	r28
    5770:	00 34       	cpi	r16, 0x40	; 64
    5772:	11 05       	cpc	r17, r1
    5774:	21 05       	cpc	r18, r1
    5776:	31 05       	cpc	r19, r1
    5778:	10 f0       	brcs	.+4      	; 0x577e <VL53L0X_WriteMulti+0x14>
    577a:	cc ef       	ldi	r28, 0xFC	; 252
    577c:	01 c0       	rjmp	.+2      	; 0x5780 <VL53L0X_WriteMulti+0x16>
    577e:	c0 e0       	ldi	r28, 0x00	; 0
    5780:	fc 01       	movw	r30, r24
    5782:	ef 5b       	subi	r30, 0xBF	; 191
    5784:	fe 4f       	sbci	r31, 0xFE	; 254
    5786:	80 81       	ld	r24, Z
    5788:	da de       	rcall	.-588    	; 0x553e <VL53L0X_write_multi>
    578a:	89 2b       	or	r24, r25
    578c:	09 f0       	breq	.+2      	; 0x5790 <VL53L0X_WriteMulti+0x26>
    578e:	cc ee       	ldi	r28, 0xEC	; 236
    5790:	8c 2f       	mov	r24, r28
    5792:	cf 91       	pop	r28
    5794:	1f 91       	pop	r17
    5796:	0f 91       	pop	r16
    5798:	08 95       	ret

0000579a <VL53L0X_ReadMulti>:
    579a:	0f 93       	push	r16
    579c:	1f 93       	push	r17
    579e:	cf 93       	push	r28
    57a0:	00 34       	cpi	r16, 0x40	; 64
    57a2:	11 05       	cpc	r17, r1
    57a4:	21 05       	cpc	r18, r1
    57a6:	31 05       	cpc	r19, r1
    57a8:	10 f0       	brcs	.+4      	; 0x57ae <VL53L0X_ReadMulti+0x14>
    57aa:	cc ef       	ldi	r28, 0xFC	; 252
    57ac:	01 c0       	rjmp	.+2      	; 0x57b0 <VL53L0X_ReadMulti+0x16>
    57ae:	c0 e0       	ldi	r28, 0x00	; 0
    57b0:	fc 01       	movw	r30, r24
    57b2:	ef 5b       	subi	r30, 0xBF	; 191
    57b4:	fe 4f       	sbci	r31, 0xFE	; 254
    57b6:	80 81       	ld	r24, Z
    57b8:	22 df       	rcall	.-444    	; 0x55fe <VL53L0X_read_multi>
    57ba:	89 2b       	or	r24, r25
    57bc:	09 f0       	breq	.+2      	; 0x57c0 <VL53L0X_ReadMulti+0x26>
    57be:	cc ee       	ldi	r28, 0xEC	; 236
    57c0:	8c 2f       	mov	r24, r28
    57c2:	cf 91       	pop	r28
    57c4:	1f 91       	pop	r17
    57c6:	0f 91       	pop	r16
    57c8:	08 95       	ret

000057ca <VL53L0X_WrByte>:
    57ca:	8f 5b       	subi	r24, 0xBF	; 191
    57cc:	9e 4f       	sbci	r25, 0xFE	; 254
    57ce:	fc 01       	movw	r30, r24
    57d0:	80 81       	ld	r24, Z
    57d2:	36 df       	rcall	.-404    	; 0x5640 <VL53L0X_write_byte>
    57d4:	89 2b       	or	r24, r25
    57d6:	11 f0       	breq	.+4      	; 0x57dc <VL53L0X_WrByte+0x12>
    57d8:	8c ee       	ldi	r24, 0xEC	; 236
    57da:	08 95       	ret
    57dc:	80 e0       	ldi	r24, 0x00	; 0
    57de:	08 95       	ret

000057e0 <VL53L0X_WrWord>:
    57e0:	8f 5b       	subi	r24, 0xBF	; 191
    57e2:	9e 4f       	sbci	r25, 0xFE	; 254
    57e4:	fc 01       	movw	r30, r24
    57e6:	80 81       	ld	r24, Z
    57e8:	41 df       	rcall	.-382    	; 0x566c <VL53L0X_write_word>
    57ea:	89 2b       	or	r24, r25
    57ec:	11 f0       	breq	.+4      	; 0x57f2 <VL53L0X_WrWord+0x12>
    57ee:	8c ee       	ldi	r24, 0xEC	; 236
    57f0:	08 95       	ret
    57f2:	80 e0       	ldi	r24, 0x00	; 0
    57f4:	08 95       	ret

000057f6 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData){
    57f6:	ef 92       	push	r14
    57f8:	ff 92       	push	r15
    57fa:	0f 93       	push	r16
    57fc:	1f 93       	push	r17
    57fe:	cf 93       	push	r28
    5800:	df 93       	push	r29
    5802:	1f 92       	push	r1
    5804:	cd b7       	in	r28, 0x3d	; 61
    5806:	de b7       	in	r29, 0x3e	; 62
    5808:	f6 2e       	mov	r15, r22
    580a:	e4 2e       	mov	r14, r20
    580c:	12 2f       	mov	r17, r18
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;
    uint8_t data;

    deviceAddress = Dev->I2cDevAddr;
<<<<<<< HEAD
    5a40:	8f 5b       	subi	r24, 0xBF	; 191
    5a42:	9e 4f       	sbci	r25, 0xFE	; 254
    5a44:	fc 01       	movw	r30, r24
    5a46:	00 81       	ld	r16, Z

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
    5a48:	ae 01       	movw	r20, r28
    5a4a:	4f 5f       	subi	r20, 0xFF	; 255
    5a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5a4e:	80 2f       	mov	r24, r16
    5a50:	3e df       	rcall	.-388    	; 0x58ce <VL53L0X_read_byte>

    if (status_int != 0)
    5a52:	89 2b       	or	r24, r25
    5a54:	21 f0       	breq	.+8      	; 0x5a5e <VL53L0X_UpdateByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5a56:	8c ee       	ldi	r24, 0xEC	; 236
    5a58:	0c c0       	rjmp	.+24     	; 0x5a72 <VL53L0X_UpdateByte+0x4a>
    5a5a:	80 e0       	ldi	r24, 0x00	; 0
    5a5c:	0a c0       	rjmp	.+20     	; 0x5a72 <VL53L0X_UpdateByte+0x4a>

    if (Status == VL53L0X_ERROR_NONE) {
        data = (data & AndData) | OrData;
    5a5e:	49 81       	ldd	r20, Y+1	; 0x01
    5a60:	4e 21       	and	r20, r14
    5a62:	41 2b       	or	r20, r17
    5a64:	49 83       	std	Y+1, r20	; 0x01
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
    5a66:	6f 2d       	mov	r22, r15
    5a68:	80 2f       	mov	r24, r16
    5a6a:	03 df       	rcall	.-506    	; 0x5872 <VL53L0X_write_byte>

        if (status_int != 0)
    5a6c:	89 2b       	or	r24, r25
    5a6e:	a9 f3       	breq	.-22     	; 0x5a5a <VL53L0X_UpdateByte+0x32>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5a70:	8c ee       	ldi	r24, 0xEC	; 236
=======
    580e:	8f 5b       	subi	r24, 0xBF	; 191
    5810:	9e 4f       	sbci	r25, 0xFE	; 254
    5812:	fc 01       	movw	r30, r24
    5814:	00 81       	ld	r16, Z

    status_int = VL53L0X_read_byte(deviceAddress, index, &data);
    5816:	ae 01       	movw	r20, r28
    5818:	4f 5f       	subi	r20, 0xFF	; 255
    581a:	5f 4f       	sbci	r21, 0xFF	; 255
    581c:	80 2f       	mov	r24, r16
    581e:	3e df       	rcall	.-388    	; 0x569c <VL53L0X_read_byte>

    if (status_int != 0)
    5820:	89 2b       	or	r24, r25
    5822:	21 f0       	breq	.+8      	; 0x582c <VL53L0X_UpdateByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5824:	8c ee       	ldi	r24, 0xEC	; 236
    5826:	0c c0       	rjmp	.+24     	; 0x5840 <VL53L0X_UpdateByte+0x4a>
    5828:	80 e0       	ldi	r24, 0x00	; 0
    582a:	0a c0       	rjmp	.+20     	; 0x5840 <VL53L0X_UpdateByte+0x4a>

    if (Status == VL53L0X_ERROR_NONE) {
        data = (data & AndData) | OrData;
    582c:	49 81       	ldd	r20, Y+1	; 0x01
    582e:	4e 21       	and	r20, r14
    5830:	41 2b       	or	r20, r17
    5832:	49 83       	std	Y+1, r20	; 0x01
        status_int = VL53L0X_write_byte(deviceAddress, index, data);
    5834:	6f 2d       	mov	r22, r15
    5836:	80 2f       	mov	r24, r16
    5838:	03 df       	rcall	.-506    	; 0x5640 <VL53L0X_write_byte>

        if (status_int != 0)
    583a:	89 2b       	or	r24, r25
    583c:	a9 f3       	breq	.-22     	; 0x5828 <VL53L0X_UpdateByte+0x32>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    583e:	8c ee       	ldi	r24, 0xEC	; 236
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
    }

    return Status;
}
<<<<<<< HEAD
    5a72:	0f 90       	pop	r0
    5a74:	df 91       	pop	r29
    5a76:	cf 91       	pop	r28
    5a78:	1f 91       	pop	r17
    5a7a:	0f 91       	pop	r16
    5a7c:	ff 90       	pop	r15
    5a7e:	ef 90       	pop	r14
    5a80:	08 95       	ret

00005a82 <VL53L0X_RdByte>:
=======
    5840:	0f 90       	pop	r0
    5842:	df 91       	pop	r29
    5844:	cf 91       	pop	r28
    5846:	1f 91       	pop	r17
    5848:	0f 91       	pop	r16
    584a:	ff 90       	pop	r15
    584c:	ef 90       	pop	r14
    584e:	08 95       	ret

00005850 <VL53L0X_RdByte>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
<<<<<<< HEAD
    5a82:	8f 5b       	subi	r24, 0xBF	; 191
    5a84:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
    5a86:	fc 01       	movw	r30, r24
    5a88:	80 81       	ld	r24, Z
    5a8a:	21 df       	rcall	.-446    	; 0x58ce <VL53L0X_read_byte>

    if (status_int != 0)
    5a8c:	89 2b       	or	r24, r25
    5a8e:	11 f0       	breq	.+4      	; 0x5a94 <VL53L0X_RdByte+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5a90:	8c ee       	ldi	r24, 0xEC	; 236
    5a92:	08 95       	ret
=======
    5850:	8f 5b       	subi	r24, 0xBF	; 191
    5852:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_byte(deviceAddress, index, data);
    5854:	fc 01       	movw	r30, r24
    5856:	80 81       	ld	r24, Z
    5858:	21 df       	rcall	.-446    	; 0x569c <VL53L0X_read_byte>

    if (status_int != 0)
    585a:	89 2b       	or	r24, r25
    585c:	11 f0       	breq	.+4      	; 0x5862 <VL53L0X_RdByte+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    585e:	8c ee       	ldi	r24, 0xEC	; 236
    5860:	08 95       	ret
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

    return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
<<<<<<< HEAD
    5a94:	80 e0       	ldi	r24, 0x00	; 0
=======
    5862:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
<<<<<<< HEAD
    5a96:	08 95       	ret

00005a98 <VL53L0X_RdWord>:
=======
    5864:	08 95       	ret

00005866 <VL53L0X_RdWord>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
<<<<<<< HEAD
    5a98:	8f 5b       	subi	r24, 0xBF	; 191
    5a9a:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_word(deviceAddress, index, data);
    5a9c:	fc 01       	movw	r30, r24
    5a9e:	80 81       	ld	r24, Z
    5aa0:	20 df       	rcall	.-448    	; 0x58e2 <VL53L0X_read_word>

    if (status_int != 0)
    5aa2:	89 2b       	or	r24, r25
    5aa4:	11 f0       	breq	.+4      	; 0x5aaa <VL53L0X_RdWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5aa6:	8c ee       	ldi	r24, 0xEC	; 236
    5aa8:	08 95       	ret
=======
    5866:	8f 5b       	subi	r24, 0xBF	; 191
    5868:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_word(deviceAddress, index, data);
    586a:	fc 01       	movw	r30, r24
    586c:	80 81       	ld	r24, Z
    586e:	20 df       	rcall	.-448    	; 0x56b0 <VL53L0X_read_word>

    if (status_int != 0)
    5870:	89 2b       	or	r24, r25
    5872:	11 f0       	breq	.+4      	; 0x5878 <VL53L0X_RdWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5874:	8c ee       	ldi	r24, 0xEC	; 236
    5876:	08 95       	ret
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
<<<<<<< HEAD
    5aaa:	80 e0       	ldi	r24, 0x00	; 0
=======
    5878:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
<<<<<<< HEAD
    5aac:	08 95       	ret

00005aae <VL53L0X_RdDWord>:
=======
    587a:	08 95       	ret

0000587c <VL53L0X_RdDWord>:
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    int32_t status_int;
    uint8_t deviceAddress;

    deviceAddress = Dev->I2cDevAddr;
<<<<<<< HEAD
    5aae:	8f 5b       	subi	r24, 0xBF	; 191
    5ab0:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
    5ab2:	fc 01       	movw	r30, r24
    5ab4:	80 81       	ld	r24, Z
    5ab6:	39 df       	rcall	.-398    	; 0x592a <VL53L0X_read_dword>

    if (status_int != 0)
    5ab8:	89 2b       	or	r24, r25
    5aba:	11 f0       	breq	.+4      	; 0x5ac0 <VL53L0X_RdDWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    5abc:	8c ee       	ldi	r24, 0xEC	; 236
    5abe:	08 95       	ret
=======
    587c:	8f 5b       	subi	r24, 0xBF	; 191
    587e:	9e 4f       	sbci	r25, 0xFE	; 254

    status_int = VL53L0X_read_dword(deviceAddress, index, data);
    5880:	fc 01       	movw	r30, r24
    5882:	80 81       	ld	r24, Z
    5884:	39 df       	rcall	.-398    	; 0x56f8 <VL53L0X_read_dword>

    if (status_int != 0)
    5886:	89 2b       	or	r24, r25
    5888:	11 f0       	breq	.+4      	; 0x588e <VL53L0X_RdDWord+0x12>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    588a:	8c ee       	ldi	r24, 0xEC	; 236
    588c:	08 95       	ret
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

    return Status;
}

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
<<<<<<< HEAD
    5ac0:	80 e0       	ldi	r24, 0x00	; 0
=======
    588e:	80 e0       	ldi	r24, 0x00	; 0
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
<<<<<<< HEAD
    5ac2:	08 95       	ret

00005ac4 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    5ac4:	cf 93       	push	r28
    5ac6:	df 93       	push	r29
    5ac8:	00 d0       	rcall	.+0      	; 0x5aca <VL53L0X_PollingDelay+0x6>
    5aca:	00 d0       	rcall	.+0      	; 0x5acc <VL53L0X_PollingDelay+0x8>
    5acc:	cd b7       	in	r28, 0x3d	; 61
    5ace:	de b7       	in	r29, 0x3e	; 62
=======
    5890:	08 95       	ret

00005892 <VL53L0X_PollingDelay>:

#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    5892:	cf 93       	push	r28
    5894:	df 93       	push	r29
    5896:	00 d0       	rcall	.+0      	; 0x5898 <VL53L0X_PollingDelay+0x6>
    5898:	00 d0       	rcall	.+0      	; 0x589a <VL53L0X_PollingDelay+0x8>
    589a:	cd b7       	in	r28, 0x3d	; 61
    589c:	de b7       	in	r29, 0x3e	; 62
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
    volatile uint32_t i;
    LOG_FUNCTION_START("");

    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
<<<<<<< HEAD
    5ad0:	19 82       	std	Y+1, r1	; 0x01
    5ad2:	1a 82       	std	Y+2, r1	; 0x02
    5ad4:	1b 82       	std	Y+3, r1	; 0x03
    5ad6:	1c 82       	std	Y+4, r1	; 0x04
    5ad8:	89 81       	ldd	r24, Y+1	; 0x01
    5ada:	9a 81       	ldd	r25, Y+2	; 0x02
    5adc:	ab 81       	ldd	r26, Y+3	; 0x03
    5ade:	bc 81       	ldd	r27, Y+4	; 0x04
    5ae0:	8a 3f       	cpi	r24, 0xFA	; 250
    5ae2:	91 05       	cpc	r25, r1
    5ae4:	a1 05       	cpc	r26, r1
    5ae6:	b1 05       	cpc	r27, r1
    5ae8:	a8 f4       	brcc	.+42     	; 0x5b14 <VL53L0X_PollingDelay+0x50>
        //Do nothing
        asm("nop");
    5aea:	00 00       	nop
=======
    589e:	19 82       	std	Y+1, r1	; 0x01
    58a0:	1a 82       	std	Y+2, r1	; 0x02
    58a2:	1b 82       	std	Y+3, r1	; 0x03
    58a4:	1c 82       	std	Y+4, r1	; 0x04
    58a6:	89 81       	ldd	r24, Y+1	; 0x01
    58a8:	9a 81       	ldd	r25, Y+2	; 0x02
    58aa:	ab 81       	ldd	r26, Y+3	; 0x03
    58ac:	bc 81       	ldd	r27, Y+4	; 0x04
    58ae:	8a 3f       	cpi	r24, 0xFA	; 250
    58b0:	91 05       	cpc	r25, r1
    58b2:	a1 05       	cpc	r26, r1
    58b4:	b1 05       	cpc	r27, r1
    58b6:	a8 f4       	brcc	.+42     	; 0x58e2 <VL53L0X_PollingDelay+0x50>
        //Do nothing
        asm("nop");
    58b8:	00 00       	nop
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
    volatile uint32_t i;
    LOG_FUNCTION_START("");

    for(i=0;i<VL53L0X_POLLINGDELAY_LOOPNB;i++){
<<<<<<< HEAD
    5aec:	89 81       	ldd	r24, Y+1	; 0x01
    5aee:	9a 81       	ldd	r25, Y+2	; 0x02
    5af0:	ab 81       	ldd	r26, Y+3	; 0x03
    5af2:	bc 81       	ldd	r27, Y+4	; 0x04
    5af4:	01 96       	adiw	r24, 0x01	; 1
    5af6:	a1 1d       	adc	r26, r1
    5af8:	b1 1d       	adc	r27, r1
    5afa:	89 83       	std	Y+1, r24	; 0x01
    5afc:	9a 83       	std	Y+2, r25	; 0x02
    5afe:	ab 83       	std	Y+3, r26	; 0x03
    5b00:	bc 83       	std	Y+4, r27	; 0x04
    5b02:	89 81       	ldd	r24, Y+1	; 0x01
    5b04:	9a 81       	ldd	r25, Y+2	; 0x02
    5b06:	ab 81       	ldd	r26, Y+3	; 0x03
    5b08:	bc 81       	ldd	r27, Y+4	; 0x04
    5b0a:	8a 3f       	cpi	r24, 0xFA	; 250
    5b0c:	91 05       	cpc	r25, r1
    5b0e:	a1 05       	cpc	r26, r1
    5b10:	b1 05       	cpc	r27, r1
    5b12:	58 f3       	brcs	.-42     	; 0x5aea <VL53L0X_PollingDelay+0x26>
=======
    58ba:	89 81       	ldd	r24, Y+1	; 0x01
    58bc:	9a 81       	ldd	r25, Y+2	; 0x02
    58be:	ab 81       	ldd	r26, Y+3	; 0x03
    58c0:	bc 81       	ldd	r27, Y+4	; 0x04
    58c2:	01 96       	adiw	r24, 0x01	; 1
    58c4:	a1 1d       	adc	r26, r1
    58c6:	b1 1d       	adc	r27, r1
    58c8:	89 83       	std	Y+1, r24	; 0x01
    58ca:	9a 83       	std	Y+2, r25	; 0x02
    58cc:	ab 83       	std	Y+3, r26	; 0x03
    58ce:	bc 83       	std	Y+4, r27	; 0x04
    58d0:	89 81       	ldd	r24, Y+1	; 0x01
    58d2:	9a 81       	ldd	r25, Y+2	; 0x02
    58d4:	ab 81       	ldd	r26, Y+3	; 0x03
    58d6:	bc 81       	ldd	r27, Y+4	; 0x04
    58d8:	8a 3f       	cpi	r24, 0xFA	; 250
    58da:	91 05       	cpc	r25, r1
    58dc:	a1 05       	cpc	r26, r1
    58de:	b1 05       	cpc	r27, r1
    58e0:	58 f3       	brcs	.-42     	; 0x58b8 <VL53L0X_PollingDelay+0x26>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
        asm("nop");
    }

    LOG_FUNCTION_END(status);
    return status;
}
<<<<<<< HEAD
    5b14:	80 e0       	ldi	r24, 0x00	; 0
    5b16:	0f 90       	pop	r0
    5b18:	0f 90       	pop	r0
    5b1a:	0f 90       	pop	r0
    5b1c:	0f 90       	pop	r0
    5b1e:	df 91       	pop	r29
    5b20:	cf 91       	pop	r28
    5b22:	08 95       	ret

00005b24 <Wire_begin>:
// slave rx event callback
// or after requestFrom(address, numBytes)
int Wire_available(void)
{
  return rxBufferLength - rxBufferIndex;
}
    5b24:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <rxBufferIndex>
    5b28:	10 92 5d 08 	sts	0x085D, r1	; 0x80085d <rxBufferLength>
    5b2c:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <txBufferIndex>
    5b30:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <txBufferLength>
    5b34:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <twi_init>
    5b38:	08 95       	ret

00005b3a <Wire_requestFrom>:
    5b3a:	46 2f       	mov	r20, r22
    5b3c:	61 32       	cpi	r22, 0x21	; 33
    5b3e:	08 f0       	brcs	.+2      	; 0x5b42 <Wire_requestFrom+0x8>
    5b40:	40 e2       	ldi	r20, 0x20	; 32
    5b42:	21 e0       	ldi	r18, 0x01	; 1
    5b44:	6a e4       	ldi	r22, 0x4A	; 74
    5b46:	7a e0       	ldi	r23, 0x0A	; 10
    5b48:	0e 94 04 07 	call	0xe08	; 0xe08 <twi_readFrom>
    5b4c:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <rxBufferIndex>
    5b50:	80 93 5d 08 	sts	0x085D, r24	; 0x80085d <rxBufferLength>
    5b54:	08 95       	ret

00005b56 <Wire_beginTransmission>:
    5b56:	91 e0       	ldi	r25, 0x01	; 1
    5b58:	90 93 59 08 	sts	0x0859, r25	; 0x800859 <transmitting>
    5b5c:	80 93 5c 08 	sts	0x085C, r24	; 0x80085c <txAddress>
    5b60:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <txBufferIndex>
    5b64:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <txBufferLength>
    5b68:	08 95       	ret

00005b6a <Wire_endTransmission>:
    5b6a:	0f 93       	push	r16
    5b6c:	00 e0       	ldi	r16, 0x00	; 0
    5b6e:	21 e0       	ldi	r18, 0x01	; 1
    5b70:	40 91 5a 08 	lds	r20, 0x085A	; 0x80085a <txBufferLength>
    5b74:	6a e6       	ldi	r22, 0x6A	; 106
    5b76:	7a e0       	ldi	r23, 0x0A	; 10
    5b78:	80 91 5c 08 	lds	r24, 0x085C	; 0x80085c <txAddress>
    5b7c:	0e 94 56 07 	call	0xeac	; 0xeac <twi_writeTo>
    5b80:	10 92 5b 08 	sts	0x085B, r1	; 0x80085b <txBufferIndex>
    5b84:	10 92 5a 08 	sts	0x085A, r1	; 0x80085a <txBufferLength>
    5b88:	10 92 59 08 	sts	0x0859, r1	; 0x800859 <transmitting>
    5b8c:	0f 91       	pop	r16
    5b8e:	08 95       	ret

00005b90 <Wire_write>:
    5b90:	cf 93       	push	r28
    5b92:	df 93       	push	r29
    5b94:	1f 92       	push	r1
    5b96:	cd b7       	in	r28, 0x3d	; 61
    5b98:	de b7       	in	r29, 0x3e	; 62
    5b9a:	89 83       	std	Y+1, r24	; 0x01
    5b9c:	80 91 59 08 	lds	r24, 0x0859	; 0x800859 <transmitting>
    5ba0:	88 23       	and	r24, r24
    5ba2:	99 f0       	breq	.+38     	; 0x5bca <Wire_write+0x3a>
    5ba4:	80 91 5a 08 	lds	r24, 0x085A	; 0x80085a <txBufferLength>
    5ba8:	80 32       	cpi	r24, 0x20	; 32
    5baa:	b0 f4       	brcc	.+44     	; 0x5bd8 <Wire_write+0x48>
    5bac:	80 91 5b 08 	lds	r24, 0x085B	; 0x80085b <txBufferIndex>
    5bb0:	e8 2f       	mov	r30, r24
    5bb2:	f0 e0       	ldi	r31, 0x00	; 0
    5bb4:	e6 59       	subi	r30, 0x96	; 150
    5bb6:	f5 4f       	sbci	r31, 0xF5	; 245
    5bb8:	99 81       	ldd	r25, Y+1	; 0x01
    5bba:	90 83       	st	Z, r25
    5bbc:	8f 5f       	subi	r24, 0xFF	; 255
    5bbe:	80 93 5b 08 	sts	0x085B, r24	; 0x80085b <txBufferIndex>
    5bc2:	80 93 5a 08 	sts	0x085A, r24	; 0x80085a <txBufferLength>
    5bc6:	81 e0       	ldi	r24, 0x01	; 1
    5bc8:	08 c0       	rjmp	.+16     	; 0x5bda <Wire_write+0x4a>
    5bca:	61 e0       	ldi	r22, 0x01	; 1
    5bcc:	ce 01       	movw	r24, r28
    5bce:	01 96       	adiw	r24, 0x01	; 1
    5bd0:	0e 94 b9 07 	call	0xf72	; 0xf72 <twi_transmit>
    5bd4:	81 e0       	ldi	r24, 0x01	; 1
    5bd6:	01 c0       	rjmp	.+2      	; 0x5bda <Wire_write+0x4a>
    5bd8:	80 e0       	ldi	r24, 0x00	; 0
    5bda:	0f 90       	pop	r0
    5bdc:	df 91       	pop	r29
    5bde:	cf 91       	pop	r28
    5be0:	08 95       	ret

00005be2 <Wire_read>:
int Wire_read(void)
{
  int value = -1;
  
  // get each successive byte on each call
  if(rxBufferIndex < rxBufferLength){
    5be2:	90 91 5e 08 	lds	r25, 0x085E	; 0x80085e <rxBufferIndex>
    5be6:	80 91 5d 08 	lds	r24, 0x085D	; 0x80085d <rxBufferLength>
    5bea:	98 17       	cp	r25, r24
    5bec:	50 f4       	brcc	.+20     	; 0x5c02 <Wire_read+0x20>
    value = rxBuffer[rxBufferIndex];
    5bee:	e9 2f       	mov	r30, r25
    5bf0:	f0 e0       	ldi	r31, 0x00	; 0
    5bf2:	e6 5b       	subi	r30, 0xB6	; 182
    5bf4:	f5 4f       	sbci	r31, 0xF5	; 245
    5bf6:	20 81       	ld	r18, Z
    5bf8:	30 e0       	ldi	r19, 0x00	; 0
    ++rxBufferIndex;
    5bfa:	9f 5f       	subi	r25, 0xFF	; 255
    5bfc:	90 93 5e 08 	sts	0x085E, r25	; 0x80085e <rxBufferIndex>
    5c00:	02 c0       	rjmp	.+4      	; 0x5c06 <Wire_read+0x24>
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int Wire_read(void)
{
  int value = -1;
    5c02:	2f ef       	ldi	r18, 0xFF	; 255
    5c04:	3f ef       	ldi	r19, 0xFF	; 255
    value = rxBuffer[rxBufferIndex];
    ++rxBufferIndex;
  }

  return value;
}
    5c06:	c9 01       	movw	r24, r18
    5c08:	08 95       	ret

00005c0a <__mulsi3>:
    5c0a:	db 01       	movw	r26, r22
    5c0c:	8f 93       	push	r24
    5c0e:	9f 93       	push	r25
    5c10:	45 d0       	rcall	.+138    	; 0x5c9c <__muluhisi3>
    5c12:	bf 91       	pop	r27
    5c14:	af 91       	pop	r26
    5c16:	a2 9f       	mul	r26, r18
    5c18:	80 0d       	add	r24, r0
    5c1a:	91 1d       	adc	r25, r1
    5c1c:	a3 9f       	mul	r26, r19
    5c1e:	90 0d       	add	r25, r0
    5c20:	b2 9f       	mul	r27, r18
    5c22:	90 0d       	add	r25, r0
    5c24:	11 24       	eor	r1, r1
    5c26:	08 95       	ret

00005c28 <__udivmodsi4>:
    5c28:	a1 e2       	ldi	r26, 0x21	; 33
    5c2a:	1a 2e       	mov	r1, r26
    5c2c:	aa 1b       	sub	r26, r26
    5c2e:	bb 1b       	sub	r27, r27
    5c30:	fd 01       	movw	r30, r26
    5c32:	0d c0       	rjmp	.+26     	; 0x5c4e <__udivmodsi4_ep>

00005c34 <__udivmodsi4_loop>:
    5c34:	aa 1f       	adc	r26, r26
    5c36:	bb 1f       	adc	r27, r27
    5c38:	ee 1f       	adc	r30, r30
    5c3a:	ff 1f       	adc	r31, r31
    5c3c:	a2 17       	cp	r26, r18
    5c3e:	b3 07       	cpc	r27, r19
    5c40:	e4 07       	cpc	r30, r20
    5c42:	f5 07       	cpc	r31, r21
    5c44:	20 f0       	brcs	.+8      	; 0x5c4e <__udivmodsi4_ep>
    5c46:	a2 1b       	sub	r26, r18
    5c48:	b3 0b       	sbc	r27, r19
    5c4a:	e4 0b       	sbc	r30, r20
    5c4c:	f5 0b       	sbc	r31, r21

00005c4e <__udivmodsi4_ep>:
    5c4e:	66 1f       	adc	r22, r22
    5c50:	77 1f       	adc	r23, r23
    5c52:	88 1f       	adc	r24, r24
    5c54:	99 1f       	adc	r25, r25
    5c56:	1a 94       	dec	r1
    5c58:	69 f7       	brne	.-38     	; 0x5c34 <__udivmodsi4_loop>
    5c5a:	60 95       	com	r22
    5c5c:	70 95       	com	r23
    5c5e:	80 95       	com	r24
    5c60:	90 95       	com	r25
    5c62:	9b 01       	movw	r18, r22
    5c64:	ac 01       	movw	r20, r24
    5c66:	bd 01       	movw	r22, r26
    5c68:	cf 01       	movw	r24, r30
    5c6a:	08 95       	ret

00005c6c <__tablejump2__>:
    5c6c:	ee 0f       	add	r30, r30
    5c6e:	ff 1f       	adc	r31, r31
    5c70:	00 24       	eor	r0, r0
    5c72:	00 1c       	adc	r0, r0
    5c74:	0b be       	out	0x3b, r0	; 59
    5c76:	07 90       	elpm	r0, Z+
    5c78:	f6 91       	elpm	r31, Z
    5c7a:	e0 2d       	mov	r30, r0
    5c7c:	09 94       	ijmp

00005c7e <__umulhisi3>:
    5c7e:	a2 9f       	mul	r26, r18
    5c80:	b0 01       	movw	r22, r0
    5c82:	b3 9f       	mul	r27, r19
    5c84:	c0 01       	movw	r24, r0
    5c86:	a3 9f       	mul	r26, r19
    5c88:	70 0d       	add	r23, r0
    5c8a:	81 1d       	adc	r24, r1
    5c8c:	11 24       	eor	r1, r1
    5c8e:	91 1d       	adc	r25, r1
    5c90:	b2 9f       	mul	r27, r18
    5c92:	70 0d       	add	r23, r0
    5c94:	81 1d       	adc	r24, r1
    5c96:	11 24       	eor	r1, r1
    5c98:	91 1d       	adc	r25, r1
    5c9a:	08 95       	ret

00005c9c <__muluhisi3>:
    5c9c:	f0 df       	rcall	.-32     	; 0x5c7e <__umulhisi3>
    5c9e:	a5 9f       	mul	r26, r21
    5ca0:	90 0d       	add	r25, r0
    5ca2:	b4 9f       	mul	r27, r20
    5ca4:	90 0d       	add	r25, r0
    5ca6:	a4 9f       	mul	r26, r20
    5ca8:	80 0d       	add	r24, r0
    5caa:	91 1d       	adc	r25, r1
    5cac:	11 24       	eor	r1, r1
    5cae:	08 95       	ret

00005cb0 <__umulsidi3>:
    5cb0:	e8 94       	clt

00005cb2 <__umulsidi3_helper>:
    5cb2:	df 93       	push	r29
    5cb4:	cf 93       	push	r28
    5cb6:	fc 01       	movw	r30, r24
    5cb8:	db 01       	movw	r26, r22
    5cba:	e1 df       	rcall	.-62     	; 0x5c7e <__umulhisi3>
    5cbc:	7f 93       	push	r23
    5cbe:	6f 93       	push	r22
    5cc0:	e9 01       	movw	r28, r18
    5cc2:	9a 01       	movw	r18, r20
    5cc4:	ac 01       	movw	r20, r24
    5cc6:	bf 93       	push	r27
    5cc8:	af 93       	push	r26
    5cca:	3f 93       	push	r19
    5ccc:	2f 93       	push	r18
    5cce:	df 01       	movw	r26, r30
    5cd0:	d6 df       	rcall	.-84     	; 0x5c7e <__umulhisi3>
    5cd2:	26 f4       	brtc	.+8      	; 0x5cdc <__umulsidi3_helper+0x2a>
    5cd4:	6c 1b       	sub	r22, r28
    5cd6:	7d 0b       	sbc	r23, r29
    5cd8:	82 0b       	sbc	r24, r18
    5cda:	93 0b       	sbc	r25, r19
    5cdc:	9e 01       	movw	r18, r28
    5cde:	eb 01       	movw	r28, r22
    5ce0:	fc 01       	movw	r30, r24
    5ce2:	2b d0       	rcall	.+86     	; 0x5d3a <__muldi3_6>
    5ce4:	af 91       	pop	r26
    5ce6:	bf 91       	pop	r27
    5ce8:	2f 91       	pop	r18
    5cea:	3f 91       	pop	r19
    5cec:	26 d0       	rcall	.+76     	; 0x5d3a <__muldi3_6>
    5cee:	be 01       	movw	r22, r28
    5cf0:	cf 01       	movw	r24, r30
    5cf2:	f9 01       	movw	r30, r18
    5cf4:	2f 91       	pop	r18
    5cf6:	3f 91       	pop	r19
    5cf8:	cf 91       	pop	r28
    5cfa:	df 91       	pop	r29
    5cfc:	08 95       	ret

00005cfe <__ashrdi3>:
    5cfe:	97 fb       	bst	r25, 7
    5d00:	10 f8       	bld	r1, 0

00005d02 <__lshrdi3>:
    5d02:	16 94       	lsr	r1
    5d04:	00 08       	sbc	r0, r0
    5d06:	0f 93       	push	r16
    5d08:	08 30       	cpi	r16, 0x08	; 8
    5d0a:	98 f0       	brcs	.+38     	; 0x5d32 <__lshrdi3+0x30>
    5d0c:	08 50       	subi	r16, 0x08	; 8
    5d0e:	23 2f       	mov	r18, r19
    5d10:	34 2f       	mov	r19, r20
    5d12:	45 2f       	mov	r20, r21
    5d14:	56 2f       	mov	r21, r22
    5d16:	67 2f       	mov	r22, r23
    5d18:	78 2f       	mov	r23, r24
    5d1a:	89 2f       	mov	r24, r25
    5d1c:	90 2d       	mov	r25, r0
    5d1e:	f4 cf       	rjmp	.-24     	; 0x5d08 <__lshrdi3+0x6>
    5d20:	05 94       	asr	r0
    5d22:	97 95       	ror	r25
    5d24:	87 95       	ror	r24
    5d26:	77 95       	ror	r23
    5d28:	67 95       	ror	r22
    5d2a:	57 95       	ror	r21
    5d2c:	47 95       	ror	r20
    5d2e:	37 95       	ror	r19
    5d30:	27 95       	ror	r18
    5d32:	0a 95       	dec	r16
    5d34:	aa f7       	brpl	.-22     	; 0x5d20 <__lshrdi3+0x1e>
    5d36:	0f 91       	pop	r16
    5d38:	08 95       	ret

00005d3a <__muldi3_6>:
    5d3a:	a1 df       	rcall	.-190    	; 0x5c7e <__umulhisi3>
    5d3c:	46 0f       	add	r20, r22
    5d3e:	57 1f       	adc	r21, r23
    5d40:	c8 1f       	adc	r28, r24
    5d42:	d9 1f       	adc	r29, r25
    5d44:	08 f4       	brcc	.+2      	; 0x5d48 <__muldi3_6+0xe>
    5d46:	31 96       	adiw	r30, 0x01	; 1
    5d48:	08 95       	ret

00005d4a <strcpy>:
    5d4a:	fb 01       	movw	r30, r22
    5d4c:	dc 01       	movw	r26, r24
    5d4e:	01 90       	ld	r0, Z+
    5d50:	0d 92       	st	X+, r0
    5d52:	00 20       	and	r0, r0
    5d54:	e1 f7       	brne	.-8      	; 0x5d4e <strcpy+0x4>
    5d56:	08 95       	ret

00005d58 <_exit>:
    5d58:	f8 94       	cli

00005d5a <__stop_program>:
    5d5a:	ff cf       	rjmp	.-2      	; 0x5d5a <__stop_program>
=======
    58e2:	80 e0       	ldi	r24, 0x00	; 0
    58e4:	0f 90       	pop	r0
    58e6:	0f 90       	pop	r0
    58e8:	0f 90       	pop	r0
    58ea:	0f 90       	pop	r0
    58ec:	df 91       	pop	r29
    58ee:	cf 91       	pop	r28
    58f0:	08 95       	ret

000058f2 <__mulsi3>:
    58f2:	db 01       	movw	r26, r22
    58f4:	8f 93       	push	r24
    58f6:	9f 93       	push	r25
    58f8:	3c d0       	rcall	.+120    	; 0x5972 <__muluhisi3>
    58fa:	bf 91       	pop	r27
    58fc:	af 91       	pop	r26
    58fe:	a2 9f       	mul	r26, r18
    5900:	80 0d       	add	r24, r0
    5902:	91 1d       	adc	r25, r1
    5904:	a3 9f       	mul	r26, r19
    5906:	90 0d       	add	r25, r0
    5908:	b2 9f       	mul	r27, r18
    590a:	90 0d       	add	r25, r0
    590c:	11 24       	eor	r1, r1
    590e:	08 95       	ret

00005910 <__udivmodsi4>:
    5910:	a1 e2       	ldi	r26, 0x21	; 33
    5912:	1a 2e       	mov	r1, r26
    5914:	aa 1b       	sub	r26, r26
    5916:	bb 1b       	sub	r27, r27
    5918:	fd 01       	movw	r30, r26
    591a:	0d c0       	rjmp	.+26     	; 0x5936 <__udivmodsi4_ep>

0000591c <__udivmodsi4_loop>:
    591c:	aa 1f       	adc	r26, r26
    591e:	bb 1f       	adc	r27, r27
    5920:	ee 1f       	adc	r30, r30
    5922:	ff 1f       	adc	r31, r31
    5924:	a2 17       	cp	r26, r18
    5926:	b3 07       	cpc	r27, r19
    5928:	e4 07       	cpc	r30, r20
    592a:	f5 07       	cpc	r31, r21
    592c:	20 f0       	brcs	.+8      	; 0x5936 <__udivmodsi4_ep>
    592e:	a2 1b       	sub	r26, r18
    5930:	b3 0b       	sbc	r27, r19
    5932:	e4 0b       	sbc	r30, r20
    5934:	f5 0b       	sbc	r31, r21

00005936 <__udivmodsi4_ep>:
    5936:	66 1f       	adc	r22, r22
    5938:	77 1f       	adc	r23, r23
    593a:	88 1f       	adc	r24, r24
    593c:	99 1f       	adc	r25, r25
    593e:	1a 94       	dec	r1
    5940:	69 f7       	brne	.-38     	; 0x591c <__udivmodsi4_loop>
    5942:	60 95       	com	r22
    5944:	70 95       	com	r23
    5946:	80 95       	com	r24
    5948:	90 95       	com	r25
    594a:	9b 01       	movw	r18, r22
    594c:	ac 01       	movw	r20, r24
    594e:	bd 01       	movw	r22, r26
    5950:	cf 01       	movw	r24, r30
    5952:	08 95       	ret

00005954 <__umulhisi3>:
    5954:	a2 9f       	mul	r26, r18
    5956:	b0 01       	movw	r22, r0
    5958:	b3 9f       	mul	r27, r19
    595a:	c0 01       	movw	r24, r0
    595c:	a3 9f       	mul	r26, r19
    595e:	70 0d       	add	r23, r0
    5960:	81 1d       	adc	r24, r1
    5962:	11 24       	eor	r1, r1
    5964:	91 1d       	adc	r25, r1
    5966:	b2 9f       	mul	r27, r18
    5968:	70 0d       	add	r23, r0
    596a:	81 1d       	adc	r24, r1
    596c:	11 24       	eor	r1, r1
    596e:	91 1d       	adc	r25, r1
    5970:	08 95       	ret

00005972 <__muluhisi3>:
    5972:	f0 df       	rcall	.-32     	; 0x5954 <__umulhisi3>
    5974:	a5 9f       	mul	r26, r21
    5976:	90 0d       	add	r25, r0
    5978:	b4 9f       	mul	r27, r20
    597a:	90 0d       	add	r25, r0
    597c:	a4 9f       	mul	r26, r20
    597e:	80 0d       	add	r24, r0
    5980:	91 1d       	adc	r25, r1
    5982:	11 24       	eor	r1, r1
    5984:	08 95       	ret

00005986 <__umulsidi3>:
    5986:	e8 94       	clt

00005988 <__umulsidi3_helper>:
    5988:	df 93       	push	r29
    598a:	cf 93       	push	r28
    598c:	fc 01       	movw	r30, r24
    598e:	db 01       	movw	r26, r22
    5990:	e1 df       	rcall	.-62     	; 0x5954 <__umulhisi3>
    5992:	7f 93       	push	r23
    5994:	6f 93       	push	r22
    5996:	e9 01       	movw	r28, r18
    5998:	9a 01       	movw	r18, r20
    599a:	ac 01       	movw	r20, r24
    599c:	bf 93       	push	r27
    599e:	af 93       	push	r26
    59a0:	3f 93       	push	r19
    59a2:	2f 93       	push	r18
    59a4:	df 01       	movw	r26, r30
    59a6:	d6 df       	rcall	.-84     	; 0x5954 <__umulhisi3>
    59a8:	26 f4       	brtc	.+8      	; 0x59b2 <__umulsidi3_helper+0x2a>
    59aa:	6c 1b       	sub	r22, r28
    59ac:	7d 0b       	sbc	r23, r29
    59ae:	82 0b       	sbc	r24, r18
    59b0:	93 0b       	sbc	r25, r19
    59b2:	9e 01       	movw	r18, r28
    59b4:	eb 01       	movw	r28, r22
    59b6:	fc 01       	movw	r30, r24
    59b8:	2b d0       	rcall	.+86     	; 0x5a10 <__muldi3_6>
    59ba:	af 91       	pop	r26
    59bc:	bf 91       	pop	r27
    59be:	2f 91       	pop	r18
    59c0:	3f 91       	pop	r19
    59c2:	26 d0       	rcall	.+76     	; 0x5a10 <__muldi3_6>
    59c4:	be 01       	movw	r22, r28
    59c6:	cf 01       	movw	r24, r30
    59c8:	f9 01       	movw	r30, r18
    59ca:	2f 91       	pop	r18
    59cc:	3f 91       	pop	r19
    59ce:	cf 91       	pop	r28
    59d0:	df 91       	pop	r29
    59d2:	08 95       	ret

000059d4 <__ashrdi3>:
    59d4:	97 fb       	bst	r25, 7
    59d6:	10 f8       	bld	r1, 0

000059d8 <__lshrdi3>:
    59d8:	16 94       	lsr	r1
    59da:	00 08       	sbc	r0, r0
    59dc:	0f 93       	push	r16
    59de:	08 30       	cpi	r16, 0x08	; 8
    59e0:	98 f0       	brcs	.+38     	; 0x5a08 <__lshrdi3+0x30>
    59e2:	08 50       	subi	r16, 0x08	; 8
    59e4:	23 2f       	mov	r18, r19
    59e6:	34 2f       	mov	r19, r20
    59e8:	45 2f       	mov	r20, r21
    59ea:	56 2f       	mov	r21, r22
    59ec:	67 2f       	mov	r22, r23
    59ee:	78 2f       	mov	r23, r24
    59f0:	89 2f       	mov	r24, r25
    59f2:	90 2d       	mov	r25, r0
    59f4:	f4 cf       	rjmp	.-24     	; 0x59de <__lshrdi3+0x6>
    59f6:	05 94       	asr	r0
    59f8:	97 95       	ror	r25
    59fa:	87 95       	ror	r24
    59fc:	77 95       	ror	r23
    59fe:	67 95       	ror	r22
    5a00:	57 95       	ror	r21
    5a02:	47 95       	ror	r20
    5a04:	37 95       	ror	r19
    5a06:	27 95       	ror	r18
    5a08:	0a 95       	dec	r16
    5a0a:	aa f7       	brpl	.-22     	; 0x59f6 <__lshrdi3+0x1e>
    5a0c:	0f 91       	pop	r16
    5a0e:	08 95       	ret

00005a10 <__muldi3_6>:
    5a10:	a1 df       	rcall	.-190    	; 0x5954 <__umulhisi3>
    5a12:	46 0f       	add	r20, r22
    5a14:	57 1f       	adc	r21, r23
    5a16:	c8 1f       	adc	r28, r24
    5a18:	d9 1f       	adc	r29, r25
    5a1a:	08 f4       	brcc	.+2      	; 0x5a1e <__muldi3_6+0xe>
    5a1c:	31 96       	adiw	r30, 0x01	; 1
    5a1e:	08 95       	ret

00005a20 <strcpy>:
    5a20:	fb 01       	movw	r30, r22
    5a22:	dc 01       	movw	r26, r24
    5a24:	01 90       	ld	r0, Z+
    5a26:	0d 92       	st	X+, r0
    5a28:	00 20       	and	r0, r0
    5a2a:	e1 f7       	brne	.-8      	; 0x5a24 <strcpy+0x4>
    5a2c:	08 95       	ret

00005a2e <_exit>:
    5a2e:	f8 94       	cli

00005a30 <__stop_program>:
    5a30:	ff cf       	rjmp	.-2      	; 0x5a30 <__stop_program>
>>>>>>> 4280c8b5b0981159dab2b5ac12bd1fbfe1e78eb2
