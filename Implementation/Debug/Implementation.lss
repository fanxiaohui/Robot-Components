
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00001148  000011dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800102  00800102  000011de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000438  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004988  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000016c3  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002207  00000000  00000000  000076d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000010a0  00000000  00000000  000098dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016dd  00000000  00000000  0000a97c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000347c  00000000  00000000  0000c059  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000f4d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	85 c1       	rjmp	.+778    	; 0x310 <__vector_1>
       6:	00 00       	nop
       8:	8d c1       	rjmp	.+794    	; 0x324 <__vector_2>
       a:	00 00       	nop
       c:	95 c1       	rjmp	.+810    	; 0x338 <__vector_3>
       e:	00 00       	nop
      10:	d3 c0       	rjmp	.+422    	; 0x1b8 <__vector_4>
      12:	00 00       	nop
      14:	fc c0       	rjmp	.+504    	; 0x20e <__vector_5>
      16:	00 00       	nop
      18:	25 c1       	rjmp	.+586    	; 0x264 <__vector_6>
      1a:	00 00       	nop
      1c:	4e c1       	rjmp	.+668    	; 0x2ba <__vector_7>
      1e:	00 00       	nop
      20:	dc c6       	rjmp	.+3512   	; 0xdda <__vector_8>
      22:	00 00       	nop
      24:	14 c4       	rjmp	.+2088   	; 0x84e <__vector_9>
      26:	00 00       	nop
      28:	4e c4       	rjmp	.+2204   	; 0x8c6 <__vector_10>
      2a:	00 00       	nop
      2c:	e5 c3       	rjmp	.+1994   	; 0x7f8 <__vector_11>
      2e:	00 00       	nop
      30:	86 c3       	rjmp	.+1804   	; 0x73e <__vector_12>
      32:	00 00       	nop
      34:	f9 c2       	rjmp	.+1522   	; 0x628 <__vector_13>
      36:	00 00       	nop
      38:	57 c3       	rjmp	.+1710   	; 0x6e8 <__vector_14>
      3a:	00 00       	nop
      3c:	ca c2       	rjmp	.+1428   	; 0x5d2 <__vector_15>
      3e:	00 00       	nop
      40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
      42:	00 00       	nop
      44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
      46:	00 00       	nop
      48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	79 c2       	rjmp	.+1266   	; 0x540 <__vector_19>
      4e:	00 00       	nop
      50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
      52:	00 00       	nop
      54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
      56:	00 00       	nop
      58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
      62:	00 00       	nop
      64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
      66:	00 00       	nop
      68:	2f c0       	rjmp	.+94     	; 0xc8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2d c0       	rjmp	.+90     	; 0xc8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2b c0       	rjmp	.+86     	; 0xc8 <__bad_interrupt>
      72:	00 00       	nop
      74:	29 c0       	rjmp	.+82     	; 0xc8 <__bad_interrupt>
      76:	00 00       	nop
      78:	27 c0       	rjmp	.+78     	; 0xc8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	05 c5       	rjmp	.+2570   	; 0xa88 <__vector_31>
      7e:	00 00       	nop
      80:	78 c4       	rjmp	.+2288   	; 0x972 <__vector_32>
      82:	00 00       	nop
      84:	d6 c4       	rjmp	.+2476   	; 0xa32 <__vector_33>
      86:	00 00       	nop
      88:	49 c4       	rjmp	.+2194   	; 0x91c <__vector_34>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e4       	ldi	r30, 0x48	; 72
      a0:	f1 e1       	ldi	r31, 0x11	; 17
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 30       	cpi	r26, 0x02	; 2
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	21 e0       	ldi	r18, 0x01	; 1
      b4:	a2 e0       	ldi	r26, 0x02	; 2
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ab 35       	cpi	r26, 0x5B	; 91
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	4e d0       	rcall	.+156    	; 0x160 <main>
      c4:	0c 94 a2 08 	jmp	0x1144	; 0x1144 <_exit>

000000c8 <__bad_interrupt>:
      c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <testButtonPressed>:
button_struct_t s_testButton;
gpio_struct_t s_ledPin;

void testButtonPressed()
{
	gpio_out_set(s_ledPin);
      ca:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end>
      ce:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x1>
      d2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
      d6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x3>
      da:	6b d1       	rcall	.+726    	; 0x3b2 <gpio_out_set>
	debug_writeString("Z");
      dc:	80 e0       	ldi	r24, 0x00	; 0
      de:	91 e0       	ldi	r25, 0x01	; 1
      e0:	3e c7       	rjmp	.+3708   	; 0xf5e <debug_writeString>
      e2:	08 95       	ret

000000e4 <testButton_init>:
}

void testButton_init()
{
      e4:	cf 93       	push	r28
      e6:	df 93       	push	r29
	
	s_ledPin.port = PD;
      e8:	e2 e0       	ldi	r30, 0x02	; 2
      ea:	f1 e0       	ldi	r31, 0x01	; 1
      ec:	d3 e0       	ldi	r29, 0x03	; 3
      ee:	d0 83       	st	Z, r29
	s_ledPin.number = 5;
      f0:	85 e0       	ldi	r24, 0x05	; 5
      f2:	81 83       	std	Z+1, r24	; 0x01
	s_ledPin.direction = OUTPUT;
      f4:	c1 e0       	ldi	r28, 0x01	; 1
      f6:	c2 83       	std	Z+2, r28	; 0x02
	s_ledPin.pullUp = NO_PULL;
      f8:	13 82       	std	Z+3, r1	; 0x03

	gpio_init(s_ledPin);
      fa:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end>
      fe:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x1>
     102:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end+0x2>
     106:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x3>
     10a:	20 d1       	rcall	.+576    	; 0x34c <gpio_init>


	s_testButton.pin.port = PD;
     10c:	e6 e0       	ldi	r30, 0x06	; 6
     10e:	f1 e0       	ldi	r31, 0x01	; 1
     110:	2d 2f       	mov	r18, r29
     112:	d0 83       	st	Z, r29
	s_testButton.pin.number = 7;
     114:	87 e0       	ldi	r24, 0x07	; 7
     116:	38 2f       	mov	r19, r24
     118:	81 83       	std	Z+1, r24	; 0x01
	s_testButton.pin.pullUp = NO_PULL;
     11a:	13 82       	std	Z+3, r1	; 0x03
	s_testButton.active = BUTTON_ACTIVE_HIGH;
     11c:	6c 2f       	mov	r22, r28
     11e:	c4 83       	std	Z+4, r28	; 0x04
	s_testButton.pressedFunction = testButtonPressed;
     120:	85 e6       	ldi	r24, 0x65	; 101
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	97 83       	std	Z+7, r25	; 0x07
     126:	86 83       	std	Z+6, r24	; 0x06
	
	button_init(s_testButton);
     128:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <s_testButton+0x2>
     12c:	50 e0       	ldi	r21, 0x00	; 0
     12e:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <s_testButton+0x5>
     132:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <s_testButton+0x7>
     136:	7c d6       	rcall	.+3320   	; 0xe30 <button_init>
	button_start(s_testButton);
     138:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <s_testButton>
     13c:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <s_testButton+0x1>
     140:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <s_testButton+0x2>
     144:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <s_testButton+0x3>
     148:	60 91 0a 01 	lds	r22, 0x010A	; 0x80010a <s_testButton+0x4>
     14c:	70 91 0b 01 	lds	r23, 0x010B	; 0x80010b <s_testButton+0x5>
     150:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <s_testButton+0x6>
     154:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <s_testButton+0x7>
     158:	91 d6       	rcall	.+3362   	; 0xe7c <button_start>
}
     15a:	df 91       	pop	r29
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <main>:
#include <avr/io.h>
#include <avr/interrupt.h>

int main()
{
	device_disableJTAG();
     160:	07 d0       	rcall	.+14     	; 0x170 <device_disableJTAG>
	debug_init();
     162:	c5 d6       	rcall	.+3466   	; 0xeee <debug_init>
	testButton_init();
     164:	bf df       	rcall	.-130    	; 0xe4 <testButton_init>
     166:	78 94       	sei
	
	sei();

	debug_writeHex(PCMSK3);
     168:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
     16c:	52 d7       	rcall	.+3748   	; 0x1012 <debug_writeHex>
     16e:	ff cf       	rjmp	.-2      	; 0x16e <main+0xe>

00000170 <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
     170:	80 e8       	ldi	r24, 0x80	; 128
     172:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     174:	85 bf       	out	0x35, r24	; 53
     176:	08 95       	ret

00000178 <gpio_changeDirection>:
		#ifdef USING_EXTINT
			}
		#endif
			break;
	}
}
     178:	61 30       	cpi	r22, 0x01	; 1
     17a:	61 f0       	breq	.+24     	; 0x194 <gpio_changeDirection+0x1c>
     17c:	28 f0       	brcs	.+10     	; 0x188 <gpio_changeDirection+0x10>
     17e:	62 30       	cpi	r22, 0x02	; 2
     180:	79 f0       	breq	.+30     	; 0x1a0 <gpio_changeDirection+0x28>
     182:	63 30       	cpi	r22, 0x03	; 3
     184:	99 f0       	breq	.+38     	; 0x1ac <gpio_changeDirection+0x34>
     186:	08 95       	ret
     188:	48 2f       	mov	r20, r24
     18a:	67 2f       	mov	r22, r23
     18c:	81 e2       	ldi	r24, 0x21	; 33
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	80 c1       	rjmp	.+768    	; 0x492 <updateBit>
     192:	08 95       	ret
     194:	48 2f       	mov	r20, r24
     196:	67 2f       	mov	r22, r23
     198:	84 e2       	ldi	r24, 0x24	; 36
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	7a c1       	rjmp	.+756    	; 0x492 <updateBit>
     19e:	08 95       	ret
     1a0:	48 2f       	mov	r20, r24
     1a2:	67 2f       	mov	r22, r23
     1a4:	87 e2       	ldi	r24, 0x27	; 39
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	74 c1       	rjmp	.+744    	; 0x492 <updateBit>
     1aa:	08 95       	ret
     1ac:	48 2f       	mov	r20, r24
     1ae:	67 2f       	mov	r22, r23
     1b0:	8a e2       	ldi	r24, 0x2A	; 42
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	6e c1       	rjmp	.+732    	; 0x492 <updateBit>
     1b6:	08 95       	ret

000001b8 <__vector_4>:
     1b8:	1f 92       	push	r1
     1ba:	0f 92       	push	r0
     1bc:	0f b6       	in	r0, 0x3f	; 63
     1be:	0f 92       	push	r0
     1c0:	11 24       	eor	r1, r1
     1c2:	0b b6       	in	r0, 0x3b	; 59
     1c4:	0f 92       	push	r0
     1c6:	2f 93       	push	r18
     1c8:	3f 93       	push	r19
     1ca:	4f 93       	push	r20
     1cc:	5f 93       	push	r21
     1ce:	6f 93       	push	r22
     1d0:	7f 93       	push	r23
     1d2:	8f 93       	push	r24
     1d4:	9f 93       	push	r25
     1d6:	af 93       	push	r26
     1d8:	bf 93       	push	r27
     1da:	ef 93       	push	r30
     1dc:	ff 93       	push	r31
     1de:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <p_pcInt0Callback>
     1e2:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <p_pcInt0Callback+0x1>
     1e6:	09 95       	icall
     1e8:	ff 91       	pop	r31
     1ea:	ef 91       	pop	r30
     1ec:	bf 91       	pop	r27
     1ee:	af 91       	pop	r26
     1f0:	9f 91       	pop	r25
     1f2:	8f 91       	pop	r24
     1f4:	7f 91       	pop	r23
     1f6:	6f 91       	pop	r22
     1f8:	5f 91       	pop	r21
     1fa:	4f 91       	pop	r20
     1fc:	3f 91       	pop	r19
     1fe:	2f 91       	pop	r18
     200:	0f 90       	pop	r0
     202:	0b be       	out	0x3b, r0	; 59
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <__vector_5>:
     20e:	1f 92       	push	r1
     210:	0f 92       	push	r0
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	0f 92       	push	r0
     216:	11 24       	eor	r1, r1
     218:	0b b6       	in	r0, 0x3b	; 59
     21a:	0f 92       	push	r0
     21c:	2f 93       	push	r18
     21e:	3f 93       	push	r19
     220:	4f 93       	push	r20
     222:	5f 93       	push	r21
     224:	6f 93       	push	r22
     226:	7f 93       	push	r23
     228:	8f 93       	push	r24
     22a:	9f 93       	push	r25
     22c:	af 93       	push	r26
     22e:	bf 93       	push	r27
     230:	ef 93       	push	r30
     232:	ff 93       	push	r31
     234:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <p_pcInt1Callback>
     238:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <p_pcInt1Callback+0x1>
     23c:	09 95       	icall
     23e:	ff 91       	pop	r31
     240:	ef 91       	pop	r30
     242:	bf 91       	pop	r27
     244:	af 91       	pop	r26
     246:	9f 91       	pop	r25
     248:	8f 91       	pop	r24
     24a:	7f 91       	pop	r23
     24c:	6f 91       	pop	r22
     24e:	5f 91       	pop	r21
     250:	4f 91       	pop	r20
     252:	3f 91       	pop	r19
     254:	2f 91       	pop	r18
     256:	0f 90       	pop	r0
     258:	0b be       	out	0x3b, r0	; 59
     25a:	0f 90       	pop	r0
     25c:	0f be       	out	0x3f, r0	; 63
     25e:	0f 90       	pop	r0
     260:	1f 90       	pop	r1
     262:	18 95       	reti

00000264 <__vector_6>:
     264:	1f 92       	push	r1
     266:	0f 92       	push	r0
     268:	0f b6       	in	r0, 0x3f	; 63
     26a:	0f 92       	push	r0
     26c:	11 24       	eor	r1, r1
     26e:	0b b6       	in	r0, 0x3b	; 59
     270:	0f 92       	push	r0
     272:	2f 93       	push	r18
     274:	3f 93       	push	r19
     276:	4f 93       	push	r20
     278:	5f 93       	push	r21
     27a:	6f 93       	push	r22
     27c:	7f 93       	push	r23
     27e:	8f 93       	push	r24
     280:	9f 93       	push	r25
     282:	af 93       	push	r26
     284:	bf 93       	push	r27
     286:	ef 93       	push	r30
     288:	ff 93       	push	r31
     28a:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <p_pcInt2Callback>
     28e:	f0 91 0f 01 	lds	r31, 0x010F	; 0x80010f <p_pcInt2Callback+0x1>
     292:	09 95       	icall
     294:	ff 91       	pop	r31
     296:	ef 91       	pop	r30
     298:	bf 91       	pop	r27
     29a:	af 91       	pop	r26
     29c:	9f 91       	pop	r25
     29e:	8f 91       	pop	r24
     2a0:	7f 91       	pop	r23
     2a2:	6f 91       	pop	r22
     2a4:	5f 91       	pop	r21
     2a6:	4f 91       	pop	r20
     2a8:	3f 91       	pop	r19
     2aa:	2f 91       	pop	r18
     2ac:	0f 90       	pop	r0
     2ae:	0b be       	out	0x3b, r0	; 59
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <__vector_7>:
     2ba:	1f 92       	push	r1
     2bc:	0f 92       	push	r0
     2be:	0f b6       	in	r0, 0x3f	; 63
     2c0:	0f 92       	push	r0
     2c2:	11 24       	eor	r1, r1
     2c4:	0b b6       	in	r0, 0x3b	; 59
     2c6:	0f 92       	push	r0
     2c8:	2f 93       	push	r18
     2ca:	3f 93       	push	r19
     2cc:	4f 93       	push	r20
     2ce:	5f 93       	push	r21
     2d0:	6f 93       	push	r22
     2d2:	7f 93       	push	r23
     2d4:	8f 93       	push	r24
     2d6:	9f 93       	push	r25
     2d8:	af 93       	push	r26
     2da:	bf 93       	push	r27
     2dc:	ef 93       	push	r30
     2de:	ff 93       	push	r31
     2e0:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <p_pcInt3Callback>
     2e4:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <p_pcInt3Callback+0x1>
     2e8:	09 95       	icall
     2ea:	ff 91       	pop	r31
     2ec:	ef 91       	pop	r30
     2ee:	bf 91       	pop	r27
     2f0:	af 91       	pop	r26
     2f2:	9f 91       	pop	r25
     2f4:	8f 91       	pop	r24
     2f6:	7f 91       	pop	r23
     2f8:	6f 91       	pop	r22
     2fa:	5f 91       	pop	r21
     2fc:	4f 91       	pop	r20
     2fe:	3f 91       	pop	r19
     300:	2f 91       	pop	r18
     302:	0f 90       	pop	r0
     304:	0b be       	out	0x3b, r0	; 59
     306:	0f 90       	pop	r0
     308:	0f be       	out	0x3f, r0	; 63
     30a:	0f 90       	pop	r0
     30c:	1f 90       	pop	r1
     30e:	18 95       	reti

00000310 <__vector_1>:
     310:	1f 92       	push	r1
     312:	0f 92       	push	r0
     314:	0f b6       	in	r0, 0x3f	; 63
     316:	0f 92       	push	r0
     318:	11 24       	eor	r1, r1
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_2>:
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	0f 90       	pop	r0
     330:	0f be       	out	0x3f, r0	; 63
     332:	0f 90       	pop	r0
     334:	1f 90       	pop	r1
     336:	18 95       	reti

00000338 <__vector_3>:
     338:	1f 92       	push	r1
     33a:	0f 92       	push	r0
     33c:	0f b6       	in	r0, 0x3f	; 63
     33e:	0f 92       	push	r0
     340:	11 24       	eor	r1, r1
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <gpio_init>:
     34c:	0f 93       	push	r16
     34e:	1f 93       	push	r17
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	c6 2f       	mov	r28, r22
     356:	17 2f       	mov	r17, r23
     358:	d8 2f       	mov	r29, r24
     35a:	09 2f       	mov	r16, r25
     35c:	0d df       	rcall	.-486    	; 0x178 <gpio_changeDirection>
     35e:	d1 11       	cpse	r29, r1
     360:	23 c0       	rjmp	.+70     	; 0x3a8 <gpio_init+0x5c>
     362:	c1 30       	cpi	r28, 0x01	; 1
     364:	81 f0       	breq	.+32     	; 0x386 <gpio_init+0x3a>
     366:	28 f0       	brcs	.+10     	; 0x372 <gpio_init+0x26>
     368:	c2 30       	cpi	r28, 0x02	; 2
     36a:	99 f0       	breq	.+38     	; 0x392 <gpio_init+0x46>
     36c:	c3 30       	cpi	r28, 0x03	; 3
     36e:	b9 f0       	breq	.+46     	; 0x39e <gpio_init+0x52>
     370:	1b c0       	rjmp	.+54     	; 0x3a8 <gpio_init+0x5c>
     372:	40 2f       	mov	r20, r16
     374:	61 2f       	mov	r22, r17
     376:	82 e2       	ldi	r24, 0x22	; 34
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	8b d0       	rcall	.+278    	; 0x492 <updateBit>
     37c:	61 2f       	mov	r22, r17
     37e:	8e e7       	ldi	r24, 0x7E	; 126
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	ab d0       	rcall	.+342    	; 0x4da <clearBit>
     384:	11 c0       	rjmp	.+34     	; 0x3a8 <gpio_init+0x5c>
     386:	40 2f       	mov	r20, r16
     388:	61 2f       	mov	r22, r17
     38a:	85 e2       	ldi	r24, 0x25	; 37
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	81 d0       	rcall	.+258    	; 0x492 <updateBit>
     390:	0b c0       	rjmp	.+22     	; 0x3a8 <gpio_init+0x5c>
     392:	40 2f       	mov	r20, r16
     394:	61 2f       	mov	r22, r17
     396:	88 e2       	ldi	r24, 0x28	; 40
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	7b d0       	rcall	.+246    	; 0x492 <updateBit>
     39c:	05 c0       	rjmp	.+10     	; 0x3a8 <gpio_init+0x5c>
     39e:	40 2f       	mov	r20, r16
     3a0:	61 2f       	mov	r22, r17
     3a2:	8b e2       	ldi	r24, 0x2B	; 43
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	75 d0       	rcall	.+234    	; 0x492 <updateBit>
     3a8:	df 91       	pop	r29
     3aa:	cf 91       	pop	r28
     3ac:	1f 91       	pop	r17
     3ae:	0f 91       	pop	r16
     3b0:	08 95       	ret

000003b2 <gpio_out_set>:
     3b2:	61 30       	cpi	r22, 0x01	; 1
     3b4:	59 f0       	breq	.+22     	; 0x3cc <gpio_out_set+0x1a>
     3b6:	28 f0       	brcs	.+10     	; 0x3c2 <gpio_out_set+0x10>
     3b8:	62 30       	cpi	r22, 0x02	; 2
     3ba:	69 f0       	breq	.+26     	; 0x3d6 <gpio_out_set+0x24>
     3bc:	63 30       	cpi	r22, 0x03	; 3
     3be:	81 f0       	breq	.+32     	; 0x3e0 <gpio_out_set+0x2e>
     3c0:	08 95       	ret
     3c2:	67 2f       	mov	r22, r23
     3c4:	82 e2       	ldi	r24, 0x22	; 34
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	7c c0       	rjmp	.+248    	; 0x4c2 <setBit>
     3ca:	08 95       	ret
     3cc:	67 2f       	mov	r22, r23
     3ce:	85 e2       	ldi	r24, 0x25	; 37
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	77 c0       	rjmp	.+238    	; 0x4c2 <setBit>
     3d4:	08 95       	ret
     3d6:	67 2f       	mov	r22, r23
     3d8:	88 e2       	ldi	r24, 0x28	; 40
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	72 c0       	rjmp	.+228    	; 0x4c2 <setBit>
     3de:	08 95       	ret
     3e0:	67 2f       	mov	r22, r23
     3e2:	8b e2       	ldi	r24, 0x2B	; 43
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	6d c0       	rjmp	.+218    	; 0x4c2 <setBit>
     3e8:	08 95       	ret

000003ea <gpio_enableInterrupt>:
     3ea:	cf 93       	push	r28
     3ec:	c7 2f       	mov	r28, r23
     3ee:	61 30       	cpi	r22, 0x01	; 1
     3f0:	79 f0       	breq	.+30     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3f2:	28 f0       	brcs	.+10     	; 0x3fe <gpio_enableInterrupt+0x14>
     3f4:	62 30       	cpi	r22, 0x02	; 2
     3f6:	a9 f0       	breq	.+42     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
     3f8:	63 30       	cpi	r22, 0x03	; 3
     3fa:	e1 f0       	breq	.+56     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     3fc:	23 c0       	rjmp	.+70     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     3fe:	60 e0       	ldi	r22, 0x00	; 0
     400:	88 e6       	ldi	r24, 0x68	; 104
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	5e d0       	rcall	.+188    	; 0x4c2 <setBit>
     406:	6c 2f       	mov	r22, r28
     408:	8b e6       	ldi	r24, 0x6B	; 107
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	5a d0       	rcall	.+180    	; 0x4c2 <setBit>
     40e:	1a c0       	rjmp	.+52     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	88 e6       	ldi	r24, 0x68	; 104
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	55 d0       	rcall	.+170    	; 0x4c2 <setBit>
     418:	6c 2f       	mov	r22, r28
     41a:	8c e6       	ldi	r24, 0x6C	; 108
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	51 d0       	rcall	.+162    	; 0x4c2 <setBit>
     420:	11 c0       	rjmp	.+34     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     422:	62 e0       	ldi	r22, 0x02	; 2
     424:	88 e6       	ldi	r24, 0x68	; 104
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	4c d0       	rcall	.+152    	; 0x4c2 <setBit>
     42a:	6c 2f       	mov	r22, r28
     42c:	8d e6       	ldi	r24, 0x6D	; 109
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	48 d0       	rcall	.+144    	; 0x4c2 <setBit>
     432:	08 c0       	rjmp	.+16     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     434:	63 e0       	ldi	r22, 0x03	; 3
     436:	88 e6       	ldi	r24, 0x68	; 104
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	43 d0       	rcall	.+134    	; 0x4c2 <setBit>
     43c:	6c 2f       	mov	r22, r28
     43e:	83 e7       	ldi	r24, 0x73	; 115
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	3f d0       	rcall	.+126    	; 0x4c2 <setBit>
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <gpio_attachInterrupt>:

void gpio_attachInterrupt(gpio_struct_t s_gpio, gpio_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
	switch (s_gpio.port)
     448:	61 30       	cpi	r22, 0x01	; 1
     44a:	71 f0       	breq	.+28     	; 0x468 <gpio_attachInterrupt+0x20>
     44c:	28 f0       	brcs	.+10     	; 0x458 <gpio_attachInterrupt+0x10>
     44e:	62 30       	cpi	r22, 0x02	; 2
     450:	99 f0       	breq	.+38     	; 0x478 <gpio_attachInterrupt+0x30>
     452:	63 30       	cpi	r22, 0x03	; 3
     454:	c9 f0       	breq	.+50     	; 0x488 <gpio_attachInterrupt+0x40>
     456:	08 95       	ret
	{
		case PA:
		#ifdef USING_PCINT0
			p_pcInt0Callback = p_function;
     458:	30 93 15 01 	sts	0x0115, r19	; 0x800115 <p_pcInt0Callback+0x1>
     45c:	20 93 14 01 	sts	0x0114, r18	; 0x800114 <p_pcInt0Callback>
			u8_pcInt0OldState = PORTA;
     460:	82 b1       	in	r24, 0x02	; 2
     462:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <u8_pcInt0OldState>
		#endif
			break;
     466:	08 95       	ret
				p_extIntCallbacks[2] = p_function;
			else
			{
		#endif
		#ifdef USING_PCINT1
				p_pcInt1Callback = p_function;
     468:	30 93 18 01 	sts	0x0118, r19	; 0x800118 <p_pcInt1Callback+0x1>
     46c:	20 93 17 01 	sts	0x0117, r18	; 0x800117 <p_pcInt1Callback>
				u8_pcInt1OldState = PORTB;
     470:	85 b1       	in	r24, 0x05	; 5
     472:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <u8_pcInt1OldState>
		#endif
		#ifdef USING_EXTINT
			}
		#endif
			break;
     476:	08 95       	ret
		case PC:
		#ifdef USING_PCINT2
			p_pcInt2Callback = p_function;
     478:	30 93 0f 01 	sts	0x010F, r19	; 0x80010f <p_pcInt2Callback+0x1>
     47c:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <p_pcInt2Callback>
			u8_pcInt2OldState = PORTC;
     480:	88 b1       	in	r24, 0x08	; 8
     482:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <u8_pcInt2OldState>
		#endif
			break;
     486:	08 95       	ret
				p_extIntCallbacks[1] = p_function;
			else
			{
		#endif
		#ifdef USING_PCINT3
				p_pcInt3Callback = p_function;
     488:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <p_pcInt3Callback+0x1>
     48c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <p_pcInt3Callback>
     490:	08 95       	ret

00000492 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     492:	fc 01       	movw	r30, r24
     494:	94 2f       	mov	r25, r20
     496:	20 81       	ld	r18, Z
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	50 e0       	ldi	r21, 0x00	; 0
     49c:	06 2e       	mov	r0, r22
     49e:	02 c0       	rjmp	.+4      	; 0x4a4 <updateBit+0x12>
     4a0:	44 0f       	add	r20, r20
     4a2:	55 1f       	adc	r21, r21
     4a4:	0a 94       	dec	r0
     4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <updateBit+0xe>
     4a8:	40 95       	com	r20
     4aa:	50 95       	com	r21
     4ac:	24 23       	and	r18, r20
     4ae:	49 2f       	mov	r20, r25
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <updateBit+0x26>
     4b4:	44 0f       	add	r20, r20
     4b6:	55 1f       	adc	r21, r21
     4b8:	6a 95       	dec	r22
     4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <updateBit+0x22>
     4bc:	42 2b       	or	r20, r18
     4be:	40 83       	st	Z, r20
     4c0:	08 95       	ret

000004c2 <setBit>:
     4c2:	fc 01       	movw	r30, r24
     4c4:	40 81       	ld	r20, Z
     4c6:	21 e0       	ldi	r18, 0x01	; 1
     4c8:	30 e0       	ldi	r19, 0x00	; 0
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <setBit+0xe>
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	6a 95       	dec	r22
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <setBit+0xa>
     4d4:	24 2b       	or	r18, r20
     4d6:	20 83       	st	Z, r18
     4d8:	08 95       	ret

000004da <clearBit>:
     4da:	fc 01       	movw	r30, r24
     4dc:	90 81       	ld	r25, Z
     4de:	21 e0       	ldi	r18, 0x01	; 1
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <clearBit+0xe>
     4e4:	22 0f       	add	r18, r18
     4e6:	33 1f       	adc	r19, r19
     4e8:	6a 95       	dec	r22
     4ea:	e2 f7       	brpl	.-8      	; 0x4e4 <clearBit+0xa>
     4ec:	20 95       	com	r18
     4ee:	29 23       	and	r18, r25
     4f0:	20 83       	st	Z, r18
     4f2:	08 95       	ret

000004f4 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <checkBit+0x8>
     4f8:	95 95       	asr	r25
     4fa:	87 95       	ror	r24
     4fc:	6a 95       	dec	r22
     4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <checkBit+0x4>
}
     500:	81 70       	andi	r24, 0x01	; 1
     502:	08 95       	ret

00000504 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     504:	cf 92       	push	r12
     506:	df 92       	push	r13
     508:	ef 92       	push	r14
     50a:	ff 92       	push	r15
     50c:	69 01       	movw	r12, r18
     50e:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     510:	9b 01       	movw	r18, r22
     512:	ac 01       	movw	r20, r24
     514:	2c 19       	sub	r18, r12
     516:	3d 09       	sbc	r19, r13
     518:	4e 09       	sbc	r20, r14
     51a:	5f 09       	sbc	r21, r15
     51c:	a8 ee       	ldi	r26, 0xE8	; 232
     51e:	b3 e0       	ldi	r27, 0x03	; 3
     520:	07 d6       	rcall	.+3086   	; 0x1130 <__muluhisi3>
     522:	a7 01       	movw	r20, r14
     524:	96 01       	movw	r18, r12
     526:	d3 d5       	rcall	.+2982   	; 0x10ce <__udivmodsi4>
     528:	c9 01       	movw	r24, r18
     52a:	99 23       	and	r25, r25
     52c:	24 f4       	brge	.+8      	; 0x536 <calculateError+0x32>
     52e:	88 27       	eor	r24, r24
     530:	99 27       	eor	r25, r25
     532:	82 1b       	sub	r24, r18
     534:	93 0b       	sbc	r25, r19
}
     536:	ff 90       	pop	r15
     538:	ef 90       	pop	r14
     53a:	df 90       	pop	r13
     53c:	cf 90       	pop	r12
     53e:	08 95       	ret

00000540 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	0b b6       	in	r0, 0x3b	; 59
     54c:	0f 92       	push	r0
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	ef 93       	push	r30
     554:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     556:	e0 91 1f 01 	lds	r30, 0x011F	; 0x80011f <u8_RLastReceivedIndex>
     55a:	f0 e0       	ldi	r31, 0x00	; 0
     55c:	8e b5       	in	r24, 0x2e	; 46
     55e:	e0 5e       	subi	r30, 0xE0	; 224
     560:	fe 4f       	sbci	r31, 0xFE	; 254
     562:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     564:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u8_RLastReceivedIndex>
     568:	89 30       	cpi	r24, 0x09	; 9
     56a:	30 f4       	brcc	.+12     	; 0x578 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     56c:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u8_RLastReceivedIndex>
     570:	8f 5f       	subi	r24, 0xFF	; 255
     572:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u8_RLastReceivedIndex>
     576:	02 c0       	rjmp	.+4      	; 0x57c <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     578:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     57c:	81 e0       	ldi	r24, 0x01	; 1
     57e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     582:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <u8_TLastTransmittedIndex>
     586:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <u8_TLastRequestedIndex>
     58a:	98 17       	cp	r25, r24
     58c:	a1 f0       	breq	.+40     	; 0x5b6 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     58e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <u8_TLastTransmittedIndex>
     592:	f0 e0       	ldi	r31, 0x00	; 0
     594:	e6 5d       	subi	r30, 0xD6	; 214
     596:	fe 4f       	sbci	r31, 0xFE	; 254
     598:	80 81       	ld	r24, Z
     59a:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     59c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u8_TLastTransmittedIndex>
     5a0:	89 30       	cpi	r24, 0x09	; 9
     5a2:	30 f4       	brcc	.+12     	; 0x5b0 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     5a4:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <u8_TLastTransmittedIndex>
     5a8:	8f 5f       	subi	r24, 0xFF	; 255
     5aa:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <u8_TLastTransmittedIndex>
     5ae:	06 c0       	rjmp	.+12     	; 0x5bc <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     5b0:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <u8_TLastTransmittedIndex>
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <b_TAvailable>
	}
}
     5bc:	ff 91       	pop	r31
     5be:	ef 91       	pop	r30
     5c0:	9f 91       	pop	r25
     5c2:	8f 91       	pop	r24
     5c4:	0f 90       	pop	r0
     5c6:	0b be       	out	0x3b, r0	; 59
     5c8:	0f 90       	pop	r0
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	0f 90       	pop	r0
     5ce:	1f 90       	pop	r1
     5d0:	18 95       	reti

000005d2 <__vector_15>:
}
#endif

#ifdef TIMER1_INTERRUPT_MODE
ISR(TIMER1_OVF_vect)
{
     5d2:	1f 92       	push	r1
     5d4:	0f 92       	push	r0
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	0f 92       	push	r0
     5da:	11 24       	eor	r1, r1
     5dc:	0b b6       	in	r0, 0x3b	; 59
     5de:	0f 92       	push	r0
     5e0:	2f 93       	push	r18
     5e2:	3f 93       	push	r19
     5e4:	4f 93       	push	r20
     5e6:	5f 93       	push	r21
     5e8:	6f 93       	push	r22
     5ea:	7f 93       	push	r23
     5ec:	8f 93       	push	r24
     5ee:	9f 93       	push	r25
     5f0:	af 93       	push	r26
     5f2:	bf 93       	push	r27
     5f4:	ef 93       	push	r30
     5f6:	ff 93       	push	r31
	p_timer1Callbacks[OVERFLOW]();
     5f8:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <p_timer1Callbacks>
     5fc:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <p_timer1Callbacks+0x1>
     600:	09 95       	icall
}
     602:	ff 91       	pop	r31
     604:	ef 91       	pop	r30
     606:	bf 91       	pop	r27
     608:	af 91       	pop	r26
     60a:	9f 91       	pop	r25
     60c:	8f 91       	pop	r24
     60e:	7f 91       	pop	r23
     610:	6f 91       	pop	r22
     612:	5f 91       	pop	r21
     614:	4f 91       	pop	r20
     616:	3f 91       	pop	r19
     618:	2f 91       	pop	r18
     61a:	0f 90       	pop	r0
     61c:	0b be       	out	0x3b, r0	; 59
     61e:	0f 90       	pop	r0
     620:	0f be       	out	0x3f, r0	; 63
     622:	0f 90       	pop	r0
     624:	1f 90       	pop	r1
     626:	18 95       	reti

00000628 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
     628:	1f 92       	push	r1
     62a:	0f 92       	push	r0
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	0f 92       	push	r0
     630:	11 24       	eor	r1, r1
     632:	0b b6       	in	r0, 0x3b	; 59
     634:	0f 92       	push	r0
     636:	0f 93       	push	r16
     638:	1f 93       	push	r17
     63a:	2f 93       	push	r18
     63c:	3f 93       	push	r19
     63e:	4f 93       	push	r20
     640:	5f 93       	push	r21
     642:	6f 93       	push	r22
     644:	7f 93       	push	r23
     646:	8f 93       	push	r24
     648:	9f 93       	push	r25
     64a:	af 93       	push	r26
     64c:	bf 93       	push	r27
     64e:	cf 93       	push	r28
     650:	df 93       	push	r29
     652:	ef 93       	push	r30
     654:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     656:	c1 e8       	ldi	r28, 0x81	; 129
     658:	d0 e0       	ldi	r29, 0x00	; 0
     65a:	88 81       	ld	r24, Y
     65c:	64 e0       	ldi	r22, 0x04	; 4
     65e:	4a df       	rcall	.-364    	; 0x4f4 <checkBit>
     660:	18 2f       	mov	r17, r24
     662:	88 81       	ld	r24, Y
     664:	63 e0       	ldi	r22, 0x03	; 3
     666:	46 df       	rcall	.-372    	; 0x4f4 <checkBit>
     668:	c1 2f       	mov	r28, r17
     66a:	cc 0f       	add	r28, r28
     66c:	cc 0f       	add	r28, r28
     66e:	cc 0f       	add	r28, r28
     670:	24 e0       	ldi	r18, 0x04	; 4
     672:	82 9f       	mul	r24, r18
     674:	c0 01       	movw	r24, r0
     676:	11 24       	eor	r1, r1
     678:	c8 2b       	or	r28, r24
     67a:	00 e8       	ldi	r16, 0x80	; 128
     67c:	10 e0       	ldi	r17, 0x00	; 0
     67e:	f8 01       	movw	r30, r16
     680:	80 81       	ld	r24, Z
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	37 df       	rcall	.-402    	; 0x4f4 <checkBit>
     686:	d8 2f       	mov	r29, r24
     688:	f8 01       	movw	r30, r16
     68a:	80 81       	ld	r24, Z
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	32 df       	rcall	.-412    	; 0x4f4 <checkBit>
     690:	dd 0f       	add	r29, r29
     692:	8c 2b       	or	r24, r28
     694:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
     696:	88 30       	cpi	r24, 0x08	; 8
     698:	18 f4       	brcc	.+6      	; 0x6a0 <__vector_13+0x78>
     69a:	84 30       	cpi	r24, 0x04	; 4
     69c:	19 f4       	brne	.+6      	; 0x6a4 <__vector_13+0x7c>
     69e:	08 c0       	rjmp	.+16     	; 0x6b0 <__vector_13+0x88>
     6a0:	80 fd       	sbrc	r24, 0
     6a2:	06 c0       	rjmp	.+12     	; 0x6b0 <__vector_13+0x88>
		p_timer1Callbacks[COMPARE_MATCH_A]();
     6a4:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <p_timer1Callbacks+0x2>
     6a8:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <p_timer1Callbacks+0x3>
     6ac:	09 95       	icall
     6ae:	05 c0       	rjmp	.+10     	; 0x6ba <__vector_13+0x92>
	else
		p_timer1Callbacks[OVERFLOW]();
     6b0:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <p_timer1Callbacks>
     6b4:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <p_timer1Callbacks+0x1>
     6b8:	09 95       	icall
}
     6ba:	ff 91       	pop	r31
     6bc:	ef 91       	pop	r30
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	bf 91       	pop	r27
     6c4:	af 91       	pop	r26
     6c6:	9f 91       	pop	r25
     6c8:	8f 91       	pop	r24
     6ca:	7f 91       	pop	r23
     6cc:	6f 91       	pop	r22
     6ce:	5f 91       	pop	r21
     6d0:	4f 91       	pop	r20
     6d2:	3f 91       	pop	r19
     6d4:	2f 91       	pop	r18
     6d6:	1f 91       	pop	r17
     6d8:	0f 91       	pop	r16
     6da:	0f 90       	pop	r0
     6dc:	0b be       	out	0x3b, r0	; 59
     6de:	0f 90       	pop	r0
     6e0:	0f be       	out	0x3f, r0	; 63
     6e2:	0f 90       	pop	r0
     6e4:	1f 90       	pop	r1
     6e6:	18 95       	reti

000006e8 <__vector_14>:

ISR(TIMER1_COMPB_vect)
{
     6e8:	1f 92       	push	r1
     6ea:	0f 92       	push	r0
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	0f 92       	push	r0
     6f0:	11 24       	eor	r1, r1
     6f2:	0b b6       	in	r0, 0x3b	; 59
     6f4:	0f 92       	push	r0
     6f6:	2f 93       	push	r18
     6f8:	3f 93       	push	r19
     6fa:	4f 93       	push	r20
     6fc:	5f 93       	push	r21
     6fe:	6f 93       	push	r22
     700:	7f 93       	push	r23
     702:	8f 93       	push	r24
     704:	9f 93       	push	r25
     706:	af 93       	push	r26
     708:	bf 93       	push	r27
     70a:	ef 93       	push	r30
     70c:	ff 93       	push	r31
	p_timer1Callbacks[COMPARE_MATCH_B]();
     70e:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <p_timer1Callbacks+0x4>
     712:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <p_timer1Callbacks+0x5>
     716:	09 95       	icall
}
     718:	ff 91       	pop	r31
     71a:	ef 91       	pop	r30
     71c:	bf 91       	pop	r27
     71e:	af 91       	pop	r26
     720:	9f 91       	pop	r25
     722:	8f 91       	pop	r24
     724:	7f 91       	pop	r23
     726:	6f 91       	pop	r22
     728:	5f 91       	pop	r21
     72a:	4f 91       	pop	r20
     72c:	3f 91       	pop	r19
     72e:	2f 91       	pop	r18
     730:	0f 90       	pop	r0
     732:	0b be       	out	0x3b, r0	; 59
     734:	0f 90       	pop	r0
     736:	0f be       	out	0x3f, r0	; 63
     738:	0f 90       	pop	r0
     73a:	1f 90       	pop	r1
     73c:	18 95       	reti

0000073e <__vector_12>:

ISR(TIMER1_CAPT_vect)
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	0b b6       	in	r0, 0x3b	; 59
     74a:	0f 92       	push	r0
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	2f 93       	push	r18
     752:	3f 93       	push	r19
     754:	4f 93       	push	r20
     756:	5f 93       	push	r21
     758:	6f 93       	push	r22
     75a:	7f 93       	push	r23
     75c:	8f 93       	push	r24
     75e:	9f 93       	push	r25
     760:	af 93       	push	r26
     762:	bf 93       	push	r27
     764:	cf 93       	push	r28
     766:	df 93       	push	r29
     768:	ef 93       	push	r30
     76a:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
     76c:	c1 e8       	ldi	r28, 0x81	; 129
     76e:	d0 e0       	ldi	r29, 0x00	; 0
     770:	88 81       	ld	r24, Y
     772:	64 e0       	ldi	r22, 0x04	; 4
     774:	bf de       	rcall	.-642    	; 0x4f4 <checkBit>
     776:	18 2f       	mov	r17, r24
     778:	88 81       	ld	r24, Y
     77a:	63 e0       	ldi	r22, 0x03	; 3
     77c:	bb de       	rcall	.-650    	; 0x4f4 <checkBit>
     77e:	c1 2f       	mov	r28, r17
     780:	cc 0f       	add	r28, r28
     782:	cc 0f       	add	r28, r28
     784:	cc 0f       	add	r28, r28
     786:	24 e0       	ldi	r18, 0x04	; 4
     788:	82 9f       	mul	r24, r18
     78a:	c0 01       	movw	r24, r0
     78c:	11 24       	eor	r1, r1
     78e:	c8 2b       	or	r28, r24
     790:	00 e8       	ldi	r16, 0x80	; 128
     792:	10 e0       	ldi	r17, 0x00	; 0
     794:	f8 01       	movw	r30, r16
     796:	80 81       	ld	r24, Z
     798:	61 e0       	ldi	r22, 0x01	; 1
     79a:	ac de       	rcall	.-680    	; 0x4f4 <checkBit>
     79c:	d8 2f       	mov	r29, r24
     79e:	f8 01       	movw	r30, r16
     7a0:	80 81       	ld	r24, Z
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	a7 de       	rcall	.-690    	; 0x4f4 <checkBit>
     7a6:	dd 0f       	add	r29, r29
     7a8:	8c 2b       	or	r24, r28
     7aa:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
     7ac:	88 30       	cpi	r24, 0x08	; 8
     7ae:	10 f0       	brcs	.+4      	; 0x7b4 <__vector_12+0x76>
     7b0:	80 ff       	sbrs	r24, 0
     7b2:	06 c0       	rjmp	.+12     	; 0x7c0 <__vector_12+0x82>
		p_timer1Callbacks[EXTERNAL]();
     7b4:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <p_timer1Callbacks+0x6>
     7b8:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <p_timer1Callbacks+0x7>
     7bc:	09 95       	icall
     7be:	05 c0       	rjmp	.+10     	; 0x7ca <__vector_12+0x8c>
	else
		p_timer1Callbacks[OVERFLOW]();
     7c0:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <p_timer1Callbacks>
     7c4:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <p_timer1Callbacks+0x1>
     7c8:	09 95       	icall
}
     7ca:	ff 91       	pop	r31
     7cc:	ef 91       	pop	r30
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	bf 91       	pop	r27
     7d4:	af 91       	pop	r26
     7d6:	9f 91       	pop	r25
     7d8:	8f 91       	pop	r24
     7da:	7f 91       	pop	r23
     7dc:	6f 91       	pop	r22
     7de:	5f 91       	pop	r21
     7e0:	4f 91       	pop	r20
     7e2:	3f 91       	pop	r19
     7e4:	2f 91       	pop	r18
     7e6:	1f 91       	pop	r17
     7e8:	0f 91       	pop	r16
     7ea:	0f 90       	pop	r0
     7ec:	0b be       	out	0x3b, r0	; 59
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <__vector_11>:
#endif

#ifdef TIMER2_INTERRUPT_MODE
ISR(TIMER2_OVF_vect)
{
     7f8:	1f 92       	push	r1
     7fa:	0f 92       	push	r0
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	0f 92       	push	r0
     800:	11 24       	eor	r1, r1
     802:	0b b6       	in	r0, 0x3b	; 59
     804:	0f 92       	push	r0
     806:	2f 93       	push	r18
     808:	3f 93       	push	r19
     80a:	4f 93       	push	r20
     80c:	5f 93       	push	r21
     80e:	6f 93       	push	r22
     810:	7f 93       	push	r23
     812:	8f 93       	push	r24
     814:	9f 93       	push	r25
     816:	af 93       	push	r26
     818:	bf 93       	push	r27
     81a:	ef 93       	push	r30
     81c:	ff 93       	push	r31
	p_timer2Callbacks[OVERFLOW]();
     81e:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <p_timer2Callbacks>
     822:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <p_timer2Callbacks+0x1>
     826:	09 95       	icall
}
     828:	ff 91       	pop	r31
     82a:	ef 91       	pop	r30
     82c:	bf 91       	pop	r27
     82e:	af 91       	pop	r26
     830:	9f 91       	pop	r25
     832:	8f 91       	pop	r24
     834:	7f 91       	pop	r23
     836:	6f 91       	pop	r22
     838:	5f 91       	pop	r21
     83a:	4f 91       	pop	r20
     83c:	3f 91       	pop	r19
     83e:	2f 91       	pop	r18
     840:	0f 90       	pop	r0
     842:	0b be       	out	0x3b, r0	; 59
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti

0000084e <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	0b b6       	in	r0, 0x3b	; 59
     85a:	0f 92       	push	r0
     85c:	2f 93       	push	r18
     85e:	3f 93       	push	r19
     860:	4f 93       	push	r20
     862:	5f 93       	push	r21
     864:	6f 93       	push	r22
     866:	7f 93       	push	r23
     868:	8f 93       	push	r24
     86a:	9f 93       	push	r25
     86c:	af 93       	push	r26
     86e:	bf 93       	push	r27
     870:	ef 93       	push	r30
     872:	ff 93       	push	r31
	if ((checkBit(TCCR2B, WGM22) == CLEAR) && ((TCCR2A & 0b11) != 0b10))
     874:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     878:	63 e0       	ldi	r22, 0x03	; 3
     87a:	3c de       	rcall	.-904    	; 0x4f4 <checkBit>
     87c:	81 11       	cpse	r24, r1
     87e:	0b c0       	rjmp	.+22     	; 0x896 <__vector_9+0x48>
     880:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     884:	83 70       	andi	r24, 0x03	; 3
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	31 f0       	breq	.+12     	; 0x896 <__vector_9+0x48>
		p_timer2Callbacks[COMPARE_MATCH_A]();
     88a:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <p_timer2Callbacks+0x2>
     88e:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <p_timer2Callbacks+0x3>
     892:	09 95       	icall
     894:	05 c0       	rjmp	.+10     	; 0x8a0 <__vector_9+0x52>
	else
		p_timer2Callbacks[OVERFLOW]();
     896:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <p_timer2Callbacks>
     89a:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <p_timer2Callbacks+0x1>
     89e:	09 95       	icall
}
     8a0:	ff 91       	pop	r31
     8a2:	ef 91       	pop	r30
     8a4:	bf 91       	pop	r27
     8a6:	af 91       	pop	r26
     8a8:	9f 91       	pop	r25
     8aa:	8f 91       	pop	r24
     8ac:	7f 91       	pop	r23
     8ae:	6f 91       	pop	r22
     8b0:	5f 91       	pop	r21
     8b2:	4f 91       	pop	r20
     8b4:	3f 91       	pop	r19
     8b6:	2f 91       	pop	r18
     8b8:	0f 90       	pop	r0
     8ba:	0b be       	out	0x3b, r0	; 59
     8bc:	0f 90       	pop	r0
     8be:	0f be       	out	0x3f, r0	; 63
     8c0:	0f 90       	pop	r0
     8c2:	1f 90       	pop	r1
     8c4:	18 95       	reti

000008c6 <__vector_10>:

ISR(TIMER2_COMPB_vect)
{
     8c6:	1f 92       	push	r1
     8c8:	0f 92       	push	r0
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	0f 92       	push	r0
     8ce:	11 24       	eor	r1, r1
     8d0:	0b b6       	in	r0, 0x3b	; 59
     8d2:	0f 92       	push	r0
     8d4:	2f 93       	push	r18
     8d6:	3f 93       	push	r19
     8d8:	4f 93       	push	r20
     8da:	5f 93       	push	r21
     8dc:	6f 93       	push	r22
     8de:	7f 93       	push	r23
     8e0:	8f 93       	push	r24
     8e2:	9f 93       	push	r25
     8e4:	af 93       	push	r26
     8e6:	bf 93       	push	r27
     8e8:	ef 93       	push	r30
     8ea:	ff 93       	push	r31
	p_timer2Callbacks[COMPARE_MATCH_B]();
     8ec:	e0 91 4d 01 	lds	r30, 0x014D	; 0x80014d <p_timer2Callbacks+0x4>
     8f0:	f0 91 4e 01 	lds	r31, 0x014E	; 0x80014e <p_timer2Callbacks+0x5>
     8f4:	09 95       	icall
}
     8f6:	ff 91       	pop	r31
     8f8:	ef 91       	pop	r30
     8fa:	bf 91       	pop	r27
     8fc:	af 91       	pop	r26
     8fe:	9f 91       	pop	r25
     900:	8f 91       	pop	r24
     902:	7f 91       	pop	r23
     904:	6f 91       	pop	r22
     906:	5f 91       	pop	r21
     908:	4f 91       	pop	r20
     90a:	3f 91       	pop	r19
     90c:	2f 91       	pop	r18
     90e:	0f 90       	pop	r0
     910:	0b be       	out	0x3b, r0	; 59
     912:	0f 90       	pop	r0
     914:	0f be       	out	0x3f, r0	; 63
     916:	0f 90       	pop	r0
     918:	1f 90       	pop	r1
     91a:	18 95       	reti

0000091c <__vector_34>:
#endif

#ifdef TIMER3_INTERRUPT_MODE
ISR(TIMER3_OVF_vect)
{
     91c:	1f 92       	push	r1
     91e:	0f 92       	push	r0
     920:	0f b6       	in	r0, 0x3f	; 63
     922:	0f 92       	push	r0
     924:	11 24       	eor	r1, r1
     926:	0b b6       	in	r0, 0x3b	; 59
     928:	0f 92       	push	r0
     92a:	2f 93       	push	r18
     92c:	3f 93       	push	r19
     92e:	4f 93       	push	r20
     930:	5f 93       	push	r21
     932:	6f 93       	push	r22
     934:	7f 93       	push	r23
     936:	8f 93       	push	r24
     938:	9f 93       	push	r25
     93a:	af 93       	push	r26
     93c:	bf 93       	push	r27
     93e:	ef 93       	push	r30
     940:	ff 93       	push	r31
	p_timer3Callbacks[OVERFLOW]();
     942:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <p_timer3Callbacks>
     946:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <p_timer3Callbacks+0x1>
     94a:	09 95       	icall
}
     94c:	ff 91       	pop	r31
     94e:	ef 91       	pop	r30
     950:	bf 91       	pop	r27
     952:	af 91       	pop	r26
     954:	9f 91       	pop	r25
     956:	8f 91       	pop	r24
     958:	7f 91       	pop	r23
     95a:	6f 91       	pop	r22
     95c:	5f 91       	pop	r21
     95e:	4f 91       	pop	r20
     960:	3f 91       	pop	r19
     962:	2f 91       	pop	r18
     964:	0f 90       	pop	r0
     966:	0b be       	out	0x3b, r0	; 59
     968:	0f 90       	pop	r0
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	0f 90       	pop	r0
     96e:	1f 90       	pop	r1
     970:	18 95       	reti

00000972 <__vector_32>:

ISR(TIMER3_COMPA_vect)
{
     972:	1f 92       	push	r1
     974:	0f 92       	push	r0
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	0f 92       	push	r0
     97a:	11 24       	eor	r1, r1
     97c:	0b b6       	in	r0, 0x3b	; 59
     97e:	0f 92       	push	r0
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	2f 93       	push	r18
     986:	3f 93       	push	r19
     988:	4f 93       	push	r20
     98a:	5f 93       	push	r21
     98c:	6f 93       	push	r22
     98e:	7f 93       	push	r23
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	af 93       	push	r26
     996:	bf 93       	push	r27
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29
     99c:	ef 93       	push	r30
     99e:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR3B, WGM33) << 3 | checkBit(TCCR3B, WGM32) << 2 | checkBit(TCCR3A, WGM31) << 1 | checkBit(TCCR3A, WGM30);
     9a0:	c1 e9       	ldi	r28, 0x91	; 145
     9a2:	d0 e0       	ldi	r29, 0x00	; 0
     9a4:	88 81       	ld	r24, Y
     9a6:	64 e0       	ldi	r22, 0x04	; 4
     9a8:	a5 dd       	rcall	.-1206   	; 0x4f4 <checkBit>
     9aa:	18 2f       	mov	r17, r24
     9ac:	88 81       	ld	r24, Y
     9ae:	63 e0       	ldi	r22, 0x03	; 3
     9b0:	a1 dd       	rcall	.-1214   	; 0x4f4 <checkBit>
     9b2:	c1 2f       	mov	r28, r17
     9b4:	cc 0f       	add	r28, r28
     9b6:	cc 0f       	add	r28, r28
     9b8:	cc 0f       	add	r28, r28
     9ba:	24 e0       	ldi	r18, 0x04	; 4
     9bc:	82 9f       	mul	r24, r18
     9be:	c0 01       	movw	r24, r0
     9c0:	11 24       	eor	r1, r1
     9c2:	c8 2b       	or	r28, r24
     9c4:	00 e9       	ldi	r16, 0x90	; 144
     9c6:	10 e0       	ldi	r17, 0x00	; 0
     9c8:	f8 01       	movw	r30, r16
     9ca:	80 81       	ld	r24, Z
     9cc:	61 e0       	ldi	r22, 0x01	; 1
     9ce:	92 dd       	rcall	.-1244   	; 0x4f4 <checkBit>
     9d0:	d8 2f       	mov	r29, r24
     9d2:	f8 01       	movw	r30, r16
     9d4:	80 81       	ld	r24, Z
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	8d dd       	rcall	.-1254   	; 0x4f4 <checkBit>
     9da:	dd 0f       	add	r29, r29
     9dc:	8c 2b       	or	r24, r28
     9de:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
     9e0:	88 30       	cpi	r24, 0x08	; 8
     9e2:	18 f4       	brcc	.+6      	; 0x9ea <__vector_32+0x78>
     9e4:	84 30       	cpi	r24, 0x04	; 4
     9e6:	19 f4       	brne	.+6      	; 0x9ee <__vector_32+0x7c>
     9e8:	08 c0       	rjmp	.+16     	; 0x9fa <__vector_32+0x88>
     9ea:	80 fd       	sbrc	r24, 0
     9ec:	06 c0       	rjmp	.+12     	; 0x9fa <__vector_32+0x88>
		p_timer3Callbacks[COMPARE_MATCH_A]();
     9ee:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <p_timer3Callbacks+0x2>
     9f2:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <p_timer3Callbacks+0x3>
     9f6:	09 95       	icall
     9f8:	05 c0       	rjmp	.+10     	; 0xa04 <__vector_32+0x92>
	else
		p_timer3Callbacks[OVERFLOW]();
     9fa:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <p_timer3Callbacks>
     9fe:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <p_timer3Callbacks+0x1>
     a02:	09 95       	icall
}
     a04:	ff 91       	pop	r31
     a06:	ef 91       	pop	r30
     a08:	df 91       	pop	r29
     a0a:	cf 91       	pop	r28
     a0c:	bf 91       	pop	r27
     a0e:	af 91       	pop	r26
     a10:	9f 91       	pop	r25
     a12:	8f 91       	pop	r24
     a14:	7f 91       	pop	r23
     a16:	6f 91       	pop	r22
     a18:	5f 91       	pop	r21
     a1a:	4f 91       	pop	r20
     a1c:	3f 91       	pop	r19
     a1e:	2f 91       	pop	r18
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	0f 90       	pop	r0
     a26:	0b be       	out	0x3b, r0	; 59
     a28:	0f 90       	pop	r0
     a2a:	0f be       	out	0x3f, r0	; 63
     a2c:	0f 90       	pop	r0
     a2e:	1f 90       	pop	r1
     a30:	18 95       	reti

00000a32 <__vector_33>:

ISR(TIMER3_COMPB_vect)
{
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	0b b6       	in	r0, 0x3b	; 59
     a3e:	0f 92       	push	r0
     a40:	2f 93       	push	r18
     a42:	3f 93       	push	r19
     a44:	4f 93       	push	r20
     a46:	5f 93       	push	r21
     a48:	6f 93       	push	r22
     a4a:	7f 93       	push	r23
     a4c:	8f 93       	push	r24
     a4e:	9f 93       	push	r25
     a50:	af 93       	push	r26
     a52:	bf 93       	push	r27
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
	p_timer3Callbacks[COMPARE_MATCH_B]();
     a58:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <p_timer3Callbacks+0x4>
     a5c:	f0 91 3c 01 	lds	r31, 0x013C	; 0x80013c <p_timer3Callbacks+0x5>
     a60:	09 95       	icall
}
     a62:	ff 91       	pop	r31
     a64:	ef 91       	pop	r30
     a66:	bf 91       	pop	r27
     a68:	af 91       	pop	r26
     a6a:	9f 91       	pop	r25
     a6c:	8f 91       	pop	r24
     a6e:	7f 91       	pop	r23
     a70:	6f 91       	pop	r22
     a72:	5f 91       	pop	r21
     a74:	4f 91       	pop	r20
     a76:	3f 91       	pop	r19
     a78:	2f 91       	pop	r18
     a7a:	0f 90       	pop	r0
     a7c:	0b be       	out	0x3b, r0	; 59
     a7e:	0f 90       	pop	r0
     a80:	0f be       	out	0x3f, r0	; 63
     a82:	0f 90       	pop	r0
     a84:	1f 90       	pop	r1
     a86:	18 95       	reti

00000a88 <__vector_31>:

ISR(TIMER3_CAPT_vect)
{
     a88:	1f 92       	push	r1
     a8a:	0f 92       	push	r0
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	0f 92       	push	r0
     a90:	11 24       	eor	r1, r1
     a92:	0b b6       	in	r0, 0x3b	; 59
     a94:	0f 92       	push	r0
     a96:	0f 93       	push	r16
     a98:	1f 93       	push	r17
     a9a:	2f 93       	push	r18
     a9c:	3f 93       	push	r19
     a9e:	4f 93       	push	r20
     aa0:	5f 93       	push	r21
     aa2:	6f 93       	push	r22
     aa4:	7f 93       	push	r23
     aa6:	8f 93       	push	r24
     aa8:	9f 93       	push	r25
     aaa:	af 93       	push	r26
     aac:	bf 93       	push	r27
     aae:	cf 93       	push	r28
     ab0:	df 93       	push	r29
     ab2:	ef 93       	push	r30
     ab4:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR3B, WGM33) << 3 | checkBit(TCCR3B, WGM32) << 2 | checkBit(TCCR3A, WGM31) << 1 | checkBit(TCCR3A, WGM30);
     ab6:	c1 e9       	ldi	r28, 0x91	; 145
     ab8:	d0 e0       	ldi	r29, 0x00	; 0
     aba:	88 81       	ld	r24, Y
     abc:	64 e0       	ldi	r22, 0x04	; 4
     abe:	1a dd       	rcall	.-1484   	; 0x4f4 <checkBit>
     ac0:	18 2f       	mov	r17, r24
     ac2:	88 81       	ld	r24, Y
     ac4:	63 e0       	ldi	r22, 0x03	; 3
     ac6:	16 dd       	rcall	.-1492   	; 0x4f4 <checkBit>
     ac8:	c1 2f       	mov	r28, r17
     aca:	cc 0f       	add	r28, r28
     acc:	cc 0f       	add	r28, r28
     ace:	cc 0f       	add	r28, r28
     ad0:	24 e0       	ldi	r18, 0x04	; 4
     ad2:	82 9f       	mul	r24, r18
     ad4:	c0 01       	movw	r24, r0
     ad6:	11 24       	eor	r1, r1
     ad8:	c8 2b       	or	r28, r24
     ada:	00 e9       	ldi	r16, 0x90	; 144
     adc:	10 e0       	ldi	r17, 0x00	; 0
     ade:	f8 01       	movw	r30, r16
     ae0:	80 81       	ld	r24, Z
     ae2:	61 e0       	ldi	r22, 0x01	; 1
     ae4:	07 dd       	rcall	.-1522   	; 0x4f4 <checkBit>
     ae6:	d8 2f       	mov	r29, r24
     ae8:	f8 01       	movw	r30, r16
     aea:	80 81       	ld	r24, Z
     aec:	60 e0       	ldi	r22, 0x00	; 0
     aee:	02 dd       	rcall	.-1532   	; 0x4f4 <checkBit>
     af0:	dd 0f       	add	r29, r29
     af2:	8c 2b       	or	r24, r28
     af4:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
     af6:	88 30       	cpi	r24, 0x08	; 8
     af8:	10 f0       	brcs	.+4      	; 0xafe <__vector_31+0x76>
     afa:	80 ff       	sbrs	r24, 0
     afc:	06 c0       	rjmp	.+12     	; 0xb0a <__vector_31+0x82>
		p_timer3Callbacks[EXTERNAL]();
     afe:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <p_timer3Callbacks+0x6>
     b02:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <p_timer3Callbacks+0x7>
     b06:	09 95       	icall
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__vector_31+0x8c>
	else
		p_timer3Callbacks[OVERFLOW]();
     b0a:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <p_timer3Callbacks>
     b0e:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <p_timer3Callbacks+0x1>
     b12:	09 95       	icall
}
     b14:	ff 91       	pop	r31
     b16:	ef 91       	pop	r30
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	bf 91       	pop	r27
     b1e:	af 91       	pop	r26
     b20:	9f 91       	pop	r25
     b22:	8f 91       	pop	r24
     b24:	7f 91       	pop	r23
     b26:	6f 91       	pop	r22
     b28:	5f 91       	pop	r21
     b2a:	4f 91       	pop	r20
     b2c:	3f 91       	pop	r19
     b2e:	2f 91       	pop	r18
     b30:	1f 91       	pop	r17
     b32:	0f 91       	pop	r16
     b34:	0f 90       	pop	r0
     b36:	0b be       	out	0x3b, r0	; 59
     b38:	0f 90       	pop	r0
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	0f 90       	pop	r0
     b3e:	1f 90       	pop	r1
     b40:	18 95       	reti

00000b42 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
     b42:	4f 92       	push	r4
     b44:	5f 92       	push	r5
     b46:	6f 92       	push	r6
     b48:	7f 92       	push	r7
     b4a:	8f 92       	push	r8
     b4c:	9f 92       	push	r9
     b4e:	af 92       	push	r10
     b50:	bf 92       	push	r11
     b52:	cf 92       	push	r12
     b54:	df 92       	push	r13
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	4b 01       	movw	r8, r22
     b60:	5c 01       	movw	r10, r24
     b62:	ea 01       	movw	r28, r20
     b64:	0f 2e       	mov	r0, r31
     b66:	f0 e2       	ldi	r31, 0x20	; 32
     b68:	4f 2e       	mov	r4, r31
     b6a:	f1 ea       	ldi	r31, 0xA1	; 161
     b6c:	5f 2e       	mov	r5, r31
     b6e:	f7 e0       	ldi	r31, 0x07	; 7
     b70:	6f 2e       	mov	r6, r31
     b72:	71 2c       	mov	r7, r1
     b74:	f0 2d       	mov	r31, r0
     b76:	c3 01       	movw	r24, r6
     b78:	b2 01       	movw	r22, r4
     b7a:	a5 01       	movw	r20, r10
     b7c:	94 01       	movw	r18, r8
     b7e:	a7 d2       	rcall	.+1358   	; 0x10ce <__udivmodsi4>
     b80:	69 01       	movw	r12, r18
     b82:	7a 01       	movw	r14, r20
     b84:	c3 01       	movw	r24, r6
     b86:	b2 01       	movw	r22, r4
     b88:	a2 d2       	rcall	.+1348   	; 0x10ce <__udivmodsi4>
     b8a:	ca 01       	movw	r24, r20
     b8c:	b9 01       	movw	r22, r18
     b8e:	a5 01       	movw	r20, r10
     b90:	94 01       	movw	r18, r8
     b92:	b8 dc       	rcall	.-1680   	; 0x504 <calculateError>
     b94:	44 97       	sbiw	r24, 0x14	; 20
     b96:	30 f4       	brcc	.+12     	; 0xba4 <calculateUBRR+0x62>
     b98:	d7 01       	movw	r26, r14
     b9a:	c6 01       	movw	r24, r12
     b9c:	01 97       	sbiw	r24, 0x01	; 1
     b9e:	a1 09       	sbc	r26, r1
     ba0:	b1 09       	sbc	r27, r1
     ba2:	0e c0       	rjmp	.+28     	; 0xbc0 <calculateUBRR+0x7e>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	88 83       	st	Y, r24
     ba8:	60 e4       	ldi	r22, 0x40	; 64
     baa:	72 e4       	ldi	r23, 0x42	; 66
     bac:	8f e0       	ldi	r24, 0x0F	; 15
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a5 01       	movw	r20, r10
     bb2:	94 01       	movw	r18, r8
     bb4:	8c d2       	rcall	.+1304   	; 0x10ce <__udivmodsi4>
     bb6:	da 01       	movw	r26, r20
     bb8:	c9 01       	movw	r24, r18
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	a1 09       	sbc	r26, r1
     bbe:	b1 09       	sbc	r27, r1
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	bf 90       	pop	r11
     bce:	af 90       	pop	r10
     bd0:	9f 90       	pop	r9
     bd2:	8f 90       	pop	r8
     bd4:	7f 90       	pop	r7
     bd6:	6f 90       	pop	r6
     bd8:	5f 90       	pop	r5
     bda:	4f 90       	pop	r4
     bdc:	08 95       	ret

00000bde <uart_init>:
     bde:	0f 93       	push	r16
     be0:	1f 93       	push	r17
     be2:	cf 93       	push	r28
     be4:	df 93       	push	r29
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
     bea:	2b 97       	sbiw	r28, 0x0b	; 11
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	f8 94       	cli
     bf0:	de bf       	out	0x3e, r29	; 62
     bf2:	0f be       	out	0x3f, r0	; 63
     bf4:	cd bf       	out	0x3d, r28	; 61
     bf6:	0a 83       	std	Y+2, r16	; 0x02
     bf8:	1b 83       	std	Y+3, r17	; 0x03
     bfa:	2c 83       	std	Y+4, r18	; 0x04
     bfc:	3d 83       	std	Y+5, r19	; 0x05
     bfe:	4e 83       	std	Y+6, r20	; 0x06
     c00:	5f 83       	std	Y+7, r21	; 0x07
     c02:	68 87       	std	Y+8, r22	; 0x08
     c04:	79 87       	std	Y+9, r23	; 0x09
     c06:	8a 87       	std	Y+10, r24	; 0x0a
     c08:	9b 87       	std	Y+11, r25	; 0x0b
     c0a:	19 82       	std	Y+1, r1	; 0x01
     c0c:	01 11       	cpse	r16, r1
     c0e:	7c c0       	rjmp	.+248    	; 0xd08 <uart_init+0x12a>
     c10:	19 2f       	mov	r17, r25
     c12:	e2 ec       	ldi	r30, 0xC2	; 194
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	8f 73       	andi	r24, 0x3F	; 63
     c1a:	80 83       	st	Z, r24
     c1c:	6b 81       	ldd	r22, Y+3	; 0x03
     c1e:	7c 81       	ldd	r23, Y+4	; 0x04
     c20:	8d 81       	ldd	r24, Y+5	; 0x05
     c22:	9e 81       	ldd	r25, Y+6	; 0x06
     c24:	ae 01       	movw	r20, r28
     c26:	4f 5f       	subi	r20, 0xFF	; 255
     c28:	5f 4f       	sbci	r21, 0xFF	; 255
     c2a:	8b df       	rcall	.-234    	; 0xb42 <calculateUBRR>
     c2c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     c30:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     c34:	49 81       	ldd	r20, Y+1	; 0x01
     c36:	61 e0       	ldi	r22, 0x01	; 1
     c38:	80 ec       	ldi	r24, 0xC0	; 192
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	2a dc       	rcall	.-1964   	; 0x492 <updateBit>
     c3e:	89 85       	ldd	r24, Y+9	; 0x09
     c40:	82 30       	cpi	r24, 0x02	; 2
     c42:	31 f1       	breq	.+76     	; 0xc90 <uart_init+0xb2>
     c44:	28 f4       	brcc	.+10     	; 0xc50 <uart_init+0x72>
     c46:	88 23       	and	r24, r24
     c48:	49 f0       	breq	.+18     	; 0xc5c <uart_init+0x7e>
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	a1 f0       	breq	.+40     	; 0xc76 <uart_init+0x98>
     c4e:	46 c0       	rjmp	.+140    	; 0xcdc <uart_init+0xfe>
     c50:	83 30       	cpi	r24, 0x03	; 3
     c52:	59 f1       	breq	.+86     	; 0xcaa <uart_init+0xcc>
     c54:	84 30       	cpi	r24, 0x04	; 4
     c56:	09 f4       	brne	.+2      	; 0xc5a <uart_init+0x7c>
     c58:	35 c0       	rjmp	.+106    	; 0xcc4 <uart_init+0xe6>
     c5a:	40 c0       	rjmp	.+128    	; 0xcdc <uart_init+0xfe>
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	82 ec       	ldi	r24, 0xC2	; 194
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	3b dc       	rcall	.-1930   	; 0x4da <clearBit>
     c64:	62 e0       	ldi	r22, 0x02	; 2
     c66:	82 ec       	ldi	r24, 0xC2	; 194
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	37 dc       	rcall	.-1938   	; 0x4da <clearBit>
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	81 ec       	ldi	r24, 0xC1	; 193
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	33 dc       	rcall	.-1946   	; 0x4da <clearBit>
     c74:	33 c0       	rjmp	.+102    	; 0xcdc <uart_init+0xfe>
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	82 ec       	ldi	r24, 0xC2	; 194
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	22 dc       	rcall	.-1980   	; 0x4c2 <setBit>
     c7e:	62 e0       	ldi	r22, 0x02	; 2
     c80:	82 ec       	ldi	r24, 0xC2	; 194
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	2a dc       	rcall	.-1964   	; 0x4da <clearBit>
     c86:	62 e0       	ldi	r22, 0x02	; 2
     c88:	81 ec       	ldi	r24, 0xC1	; 193
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	26 dc       	rcall	.-1972   	; 0x4da <clearBit>
     c8e:	26 c0       	rjmp	.+76     	; 0xcdc <uart_init+0xfe>
     c90:	61 e0       	ldi	r22, 0x01	; 1
     c92:	82 ec       	ldi	r24, 0xC2	; 194
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	21 dc       	rcall	.-1982   	; 0x4da <clearBit>
     c98:	62 e0       	ldi	r22, 0x02	; 2
     c9a:	82 ec       	ldi	r24, 0xC2	; 194
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	11 dc       	rcall	.-2014   	; 0x4c2 <setBit>
     ca0:	62 e0       	ldi	r22, 0x02	; 2
     ca2:	81 ec       	ldi	r24, 0xC1	; 193
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	19 dc       	rcall	.-1998   	; 0x4da <clearBit>
     ca8:	19 c0       	rjmp	.+50     	; 0xcdc <uart_init+0xfe>
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	82 ec       	ldi	r24, 0xC2	; 194
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	08 dc       	rcall	.-2032   	; 0x4c2 <setBit>
     cb2:	62 e0       	ldi	r22, 0x02	; 2
     cb4:	82 ec       	ldi	r24, 0xC2	; 194
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	04 dc       	rcall	.-2040   	; 0x4c2 <setBit>
     cba:	62 e0       	ldi	r22, 0x02	; 2
     cbc:	81 ec       	ldi	r24, 0xC1	; 193
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0c dc       	rcall	.-2024   	; 0x4da <clearBit>
     cc2:	0c c0       	rjmp	.+24     	; 0xcdc <uart_init+0xfe>
     cc4:	61 e0       	ldi	r22, 0x01	; 1
     cc6:	82 ec       	ldi	r24, 0xC2	; 194
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fb db       	rcall	.-2058   	; 0x4c2 <setBit>
     ccc:	62 e0       	ldi	r22, 0x02	; 2
     cce:	82 ec       	ldi	r24, 0xC2	; 194
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	f7 db       	rcall	.-2066   	; 0x4c2 <setBit>
     cd4:	62 e0       	ldi	r22, 0x02	; 2
     cd6:	81 ec       	ldi	r24, 0xC1	; 193
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	f3 db       	rcall	.-2074   	; 0x4c2 <setBit>
     cdc:	4a 85       	ldd	r20, Y+10	; 0x0a
     cde:	63 e0       	ldi	r22, 0x03	; 3
     ce0:	82 ec       	ldi	r24, 0xC2	; 194
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	d6 db       	rcall	.-2132   	; 0x492 <updateBit>
     ce6:	12 30       	cpi	r17, 0x02	; 2
     ce8:	31 f4       	brne	.+12     	; 0xcf6 <uart_init+0x118>
     cea:	e2 ec       	ldi	r30, 0xC2	; 194
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	8f 7c       	andi	r24, 0xCF	; 207
     cf2:	80 83       	st	Z, r24
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <uart_init+0x12a>
     cf6:	65 e0       	ldi	r22, 0x05	; 5
     cf8:	82 ec       	ldi	r24, 0xC2	; 194
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	e2 db       	rcall	.-2108   	; 0x4c2 <setBit>
     cfe:	41 2f       	mov	r20, r17
     d00:	64 e0       	ldi	r22, 0x04	; 4
     d02:	82 ec       	ldi	r24, 0xC2	; 194
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	c5 db       	rcall	.-2166   	; 0x492 <updateBit>
     d08:	2b 96       	adiw	r28, 0x0b	; 11
     d0a:	0f b6       	in	r0, 0x3f	; 63
     d0c:	f8 94       	cli
     d0e:	de bf       	out	0x3e, r29	; 62
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	cd bf       	out	0x3d, r28	; 61
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	08 95       	ret

00000d1e <uart_start>:
     d1e:	0f 93       	push	r16
     d20:	1f 93       	push	r17
     d22:	cf 93       	push	r28
     d24:	df 93       	push	r29
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	2a 97       	sbiw	r28, 0x0a	; 10
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	de bf       	out	0x3e, r29	; 62
     d32:	0f be       	out	0x3f, r0	; 63
     d34:	cd bf       	out	0x3d, r28	; 61
     d36:	6f 83       	std	Y+7, r22	; 0x07
     d38:	01 11       	cpse	r16, r1
     d3a:	0a c0       	rjmp	.+20     	; 0xd50 <uart_start+0x32>
     d3c:	45 2f       	mov	r20, r21
     d3e:	64 e0       	ldi	r22, 0x04	; 4
     d40:	81 ec       	ldi	r24, 0xC1	; 193
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a6 db       	rcall	.-2228   	; 0x492 <updateBit>
     d46:	4f 81       	ldd	r20, Y+7	; 0x07
     d48:	63 e0       	ldi	r22, 0x03	; 3
     d4a:	81 ec       	ldi	r24, 0xC1	; 193
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a1 db       	rcall	.-2238   	; 0x492 <updateBit>
     d50:	2a 96       	adiw	r28, 0x0a	; 10
     d52:	0f b6       	in	r0, 0x3f	; 63
     d54:	f8 94       	cli
     d56:	de bf       	out	0x3e, r29	; 62
     d58:	0f be       	out	0x3f, r0	; 63
     d5a:	cd bf       	out	0x3d, r28	; 61
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret

00000d66 <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
     d66:	ef 92       	push	r14
     d68:	ff 92       	push	r15
     d6a:	0f 93       	push	r16
     d6c:	1f 93       	push	r17
     d6e:	cf 93       	push	r28
     d70:	df 93       	push	r29
     d72:	cd b7       	in	r28, 0x3d	; 61
     d74:	de b7       	in	r29, 0x3e	; 62
     d76:	2a 97       	sbiw	r28, 0x0a	; 10
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	f8 94       	cli
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	cd bf       	out	0x3d, r28	; 61
     d82:	09 83       	std	Y+1, r16	; 0x01
     d84:	1a 83       	std	Y+2, r17	; 0x02
     d86:	2b 83       	std	Y+3, r18	; 0x03
     d88:	3c 83       	std	Y+4, r19	; 0x04
     d8a:	4d 83       	std	Y+5, r20	; 0x05
     d8c:	5e 83       	std	Y+6, r21	; 0x06
     d8e:	6f 83       	std	Y+7, r22	; 0x07
     d90:	78 87       	std	Y+8, r23	; 0x08
     d92:	89 87       	std	Y+9, r24	; 0x09
     d94:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
     d96:	01 11       	cpse	r16, r1
     d98:	13 c0       	rjmp	.+38     	; 0xdc0 <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
     d9a:	00 ec       	ldi	r16, 0xC0	; 192
     d9c:	10 e0       	ldi	r17, 0x00	; 0
     d9e:	f8 01       	movw	r30, r16
     da0:	80 81       	ld	r24, Z
     da2:	65 e0       	ldi	r22, 0x05	; 5
     da4:	a7 db       	rcall	.-2226   	; 0x4f4 <checkBit>
     da6:	88 23       	and	r24, r24
     da8:	d1 f3       	breq	.-12     	; 0xd9e <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
     daa:	88 85       	ldd	r24, Y+8	; 0x08
     dac:	84 30       	cpi	r24, 0x04	; 4
     dae:	31 f4       	brne	.+12     	; 0xdbc <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
     db0:	4f 2d       	mov	r20, r15
     db2:	41 70       	andi	r20, 0x01	; 1
     db4:	60 e0       	ldi	r22, 0x00	; 0
     db6:	81 ec       	ldi	r24, 0xC1	; 193
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	6b db       	rcall	.-2346   	; 0x492 <updateBit>
			UDR0 = (u8) u16_data;
     dbc:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
     dc0:	2a 96       	adiw	r28, 0x0a	; 10
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	ef 90       	pop	r14
     dd8:	08 95       	ret

00000dda <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
     dda:	1f 92       	push	r1
     ddc:	0f 92       	push	r0
     dde:	0f b6       	in	r0, 0x3f	; 63
     de0:	0f 92       	push	r0
     de2:	11 24       	eor	r1, r1
     de4:	0b b6       	in	r0, 0x3b	; 59
     de6:	0f 92       	push	r0
     de8:	2f 93       	push	r18
     dea:	3f 93       	push	r19
     dec:	4f 93       	push	r20
     dee:	5f 93       	push	r21
     df0:	6f 93       	push	r22
     df2:	7f 93       	push	r23
     df4:	8f 93       	push	r24
     df6:	9f 93       	push	r25
     df8:	af 93       	push	r26
     dfa:	bf 93       	push	r27
     dfc:	ef 93       	push	r30
     dfe:	ff 93       	push	r31
	p_wdgCallback();
     e00:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <p_wdgCallback>
     e04:	f0 91 50 01 	lds	r31, 0x0150	; 0x800150 <p_wdgCallback+0x1>
     e08:	09 95       	icall
}
     e0a:	ff 91       	pop	r31
     e0c:	ef 91       	pop	r30
     e0e:	bf 91       	pop	r27
     e10:	af 91       	pop	r26
     e12:	9f 91       	pop	r25
     e14:	8f 91       	pop	r24
     e16:	7f 91       	pop	r23
     e18:	6f 91       	pop	r22
     e1a:	5f 91       	pop	r21
     e1c:	4f 91       	pop	r20
     e1e:	3f 91       	pop	r19
     e20:	2f 91       	pop	r18
     e22:	0f 90       	pop	r0
     e24:	0b be       	out	0x3b, r0	; 59
     e26:	0f 90       	pop	r0
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	0f 90       	pop	r0
     e2c:	1f 90       	pop	r1
     e2e:	18 95       	reti

00000e30 <button_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void button_init(button_struct_t s_button)
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	28 97       	sbiw	r28, 0x08	; 8
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	de bf       	out	0x3e, r29	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	cd bf       	out	0x3d, r28	; 61
     e44:	29 83       	std	Y+1, r18	; 0x01
     e46:	3a 83       	std	Y+2, r19	; 0x02
     e48:	5c 83       	std	Y+4, r21	; 0x04
     e4a:	8f 83       	std	Y+7, r24	; 0x07
     e4c:	98 87       	std	Y+8, r25	; 0x08
	s_button.pin.direction = INPUT;
     e4e:	1b 82       	std	Y+3, r1	; 0x03

	gpio_init(s_button.pin);
     e50:	69 81       	ldd	r22, Y+1	; 0x01
     e52:	7a 81       	ldd	r23, Y+2	; 0x02
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	9c 81       	ldd	r25, Y+4	; 0x04
     e58:	79 da       	rcall	.-2830   	; 0x34c <gpio_init>
	gpio_attachInterrupt(s_button.pin, INTERRUPT_TOGGLE, s_button.pressedFunction);
     e5a:	2f 81       	ldd	r18, Y+7	; 0x07
     e5c:	38 85       	ldd	r19, Y+8	; 0x08
     e5e:	69 81       	ldd	r22, Y+1	; 0x01
     e60:	7a 81       	ldd	r23, Y+2	; 0x02
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	9c 81       	ldd	r25, Y+4	; 0x04
     e66:	41 e0       	ldi	r20, 0x01	; 1
     e68:	ef da       	rcall	.-2594   	; 0x448 <gpio_attachInterrupt>
}
     e6a:	28 96       	adiw	r28, 0x08	; 8
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	08 95       	ret

00000e7c <button_start>:

void button_start(button_struct_t s_button)
{
     e7c:	cf 93       	push	r28
     e7e:	df 93       	push	r29
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	28 97       	sbiw	r28, 0x08	; 8
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	de bf       	out	0x3e, r29	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	cd bf       	out	0x3d, r28	; 61
     e90:	29 83       	std	Y+1, r18	; 0x01
     e92:	3a 83       	std	Y+2, r19	; 0x02
     e94:	4b 83       	std	Y+3, r20	; 0x03
     e96:	5c 83       	std	Y+4, r21	; 0x04
	gpio_enableInterrupt(s_button.pin, INTERRUPT_TOGGLE);
     e98:	69 81       	ldd	r22, Y+1	; 0x01
     e9a:	7a 81       	ldd	r23, Y+2	; 0x02
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	a3 da       	rcall	.-2746   	; 0x3ea <gpio_enableInterrupt>
}
     ea4:	28 96       	adiw	r28, 0x08	; 8
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <byteToASCIIHex>:

void debug_writeChar(u8 u8_char)
{
	uart_transmit(s_debugUart, u8_char);
	//uart_transmit(s_debugUart, '\n');
}
     eb6:	fc 01       	movw	r30, r24
     eb8:	96 2f       	mov	r25, r22
     eba:	92 95       	swap	r25
     ebc:	9f 70       	andi	r25, 0x0F	; 15
     ebe:	29 2f       	mov	r18, r25
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	20 5d       	subi	r18, 0xD0	; 208
     ec4:	3f 4f       	sbci	r19, 0xFF	; 255
     ec6:	2a 33       	cpi	r18, 0x3A	; 58
     ec8:	31 05       	cpc	r19, r1
     eca:	14 f0       	brlt	.+4      	; 0xed0 <byteToASCIIHex+0x1a>
     ecc:	99 5c       	subi	r25, 0xC9	; 201
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <byteToASCIIHex+0x1c>
     ed0:	90 5d       	subi	r25, 0xD0	; 208
     ed2:	90 83       	st	Z, r25
     ed4:	6f 70       	andi	r22, 0x0F	; 15
     ed6:	26 2f       	mov	r18, r22
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	20 5d       	subi	r18, 0xD0	; 208
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	2a 33       	cpi	r18, 0x3A	; 58
     ee0:	31 05       	cpc	r19, r1
     ee2:	14 f0       	brlt	.+4      	; 0xee8 <byteToASCIIHex+0x32>
     ee4:	69 5c       	subi	r22, 0xC9	; 201
     ee6:	01 c0       	rjmp	.+2      	; 0xeea <byteToASCIIHex+0x34>
     ee8:	60 5d       	subi	r22, 0xD0	; 208
     eea:	61 83       	std	Z+1, r22	; 0x01
     eec:	08 95       	ret

00000eee <debug_init>:
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	e1 e5       	ldi	r30, 0x51	; 81
     ef4:	f1 e0       	ldi	r31, 0x01	; 1
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	18 2f       	mov	r17, r24
     efa:	81 83       	std	Z+1, r24	; 0x01
     efc:	8b e4       	ldi	r24, 0x4B	; 75
     efe:	82 83       	std	Z+2, r24	; 0x02
     f00:	13 82       	std	Z+3, r1	; 0x03
     f02:	14 82       	std	Z+4, r1	; 0x04
     f04:	83 e0       	ldi	r24, 0x03	; 3
     f06:	78 2f       	mov	r23, r24
     f08:	87 83       	std	Z+7, r24	; 0x07
     f0a:	11 86       	std	Z+9, r1	; 0x09
     f0c:	10 82       	st	Z, r1
     f0e:	10 86       	std	Z+8, r1	; 0x08
     f10:	15 82       	std	Z+5, r1	; 0x05
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	68 2f       	mov	r22, r24
     f16:	86 83       	std	Z+6, r24	; 0x06
     f18:	00 e0       	ldi	r16, 0x00	; 0
     f1a:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <s_debugUart+0x2>
     f1e:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <s_debugUart+0x3>
     f22:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <s_debugUart+0x4>
     f26:	50 e0       	ldi	r21, 0x00	; 0
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	58 de       	rcall	.-848    	; 0xbde <uart_init>
     f2e:	00 91 51 01 	lds	r16, 0x0151	; 0x800151 <s_debugUart>
     f32:	10 91 52 01 	lds	r17, 0x0152	; 0x800152 <s_debugUart+0x1>
     f36:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <s_debugUart+0x2>
     f3a:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <s_debugUart+0x3>
     f3e:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <s_debugUart+0x4>
     f42:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <s_debugUart+0x5>
     f46:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <s_debugUart+0x6>
     f4a:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <s_debugUart+0x7>
     f4e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <s_debugUart+0x8>
     f52:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <s_debugUart+0x9>
     f56:	e3 de       	rcall	.-570    	; 0xd1e <uart_start>
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret

00000f5e <debug_writeString>:

void debug_writeString(char* pc8_string)
{
     f5e:	af 92       	push	r10
     f60:	bf 92       	push	r11
     f62:	cf 92       	push	r12
     f64:	df 92       	push	r13
     f66:	ef 92       	push	r14
     f68:	ff 92       	push	r15
     f6a:	0f 93       	push	r16
     f6c:	1f 93       	push	r17
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	ec 01       	movw	r28, r24
     f74:	6c 01       	movw	r12, r24
	for (int i = 0; i < strlen(pc8_string); i++)
     f76:	a1 2c       	mov	r10, r1
     f78:	b1 2c       	mov	r11, r1
     f7a:	1c c0       	rjmp	.+56     	; 0xfb4 <debug_writeString+0x56>
		uart_transmit(s_debugUart, pc8_string[i]);
     f7c:	f6 01       	movw	r30, r12
     f7e:	e1 90       	ld	r14, Z+
     f80:	6f 01       	movw	r12, r30
     f82:	f1 2c       	mov	r15, r1
     f84:	00 91 51 01 	lds	r16, 0x0151	; 0x800151 <s_debugUart>
     f88:	10 91 52 01 	lds	r17, 0x0152	; 0x800152 <s_debugUart+0x1>
     f8c:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <s_debugUart+0x2>
     f90:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <s_debugUart+0x3>
     f94:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <s_debugUart+0x4>
     f98:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <s_debugUart+0x5>
     f9c:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <s_debugUart+0x6>
     fa0:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <s_debugUart+0x7>
     fa4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <s_debugUart+0x8>
     fa8:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <s_debugUart+0x9>
     fac:	dc de       	rcall	.-584    	; 0xd66 <uart_transmit>
	//uart_transmit(s_debugUart, '\n');
}

void debug_writeString(char* pc8_string)
{
	for (int i = 0; i < strlen(pc8_string); i++)
     fae:	ff ef       	ldi	r31, 0xFF	; 255
     fb0:	af 1a       	sub	r10, r31
     fb2:	bf 0a       	sbc	r11, r31
     fb4:	fe 01       	movw	r30, r28
     fb6:	01 90       	ld	r0, Z+
     fb8:	00 20       	and	r0, r0
     fba:	e9 f7       	brne	.-6      	; 0xfb6 <debug_writeString+0x58>
     fbc:	31 97       	sbiw	r30, 0x01	; 1
     fbe:	ec 1b       	sub	r30, r28
     fc0:	fd 0b       	sbc	r31, r29
     fc2:	ae 16       	cp	r10, r30
     fc4:	bf 06       	cpc	r11, r31
     fc6:	d0 f2       	brcs	.-76     	; 0xf7c <debug_writeString+0x1e>
		uart_transmit(s_debugUart, pc8_string[i]);
	uart_transmit(s_debugUart, '\n');
     fc8:	0f 2e       	mov	r0, r31
     fca:	fa e0       	ldi	r31, 0x0A	; 10
     fcc:	ef 2e       	mov	r14, r31
     fce:	f1 2c       	mov	r15, r1
     fd0:	f0 2d       	mov	r31, r0
     fd2:	00 91 51 01 	lds	r16, 0x0151	; 0x800151 <s_debugUart>
     fd6:	10 91 52 01 	lds	r17, 0x0152	; 0x800152 <s_debugUart+0x1>
     fda:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <s_debugUart+0x2>
     fde:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <s_debugUart+0x3>
     fe2:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <s_debugUart+0x4>
     fe6:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <s_debugUart+0x5>
     fea:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <s_debugUart+0x6>
     fee:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <s_debugUart+0x7>
     ff2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <s_debugUart+0x8>
     ff6:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <s_debugUart+0x9>
     ffa:	b5 de       	rcall	.-662    	; 0xd66 <uart_transmit>
}
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	08 95       	ret

00001012 <debug_writeHex>:

void debug_writeHex(u8 u8_data)
{
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	00 d0       	rcall	.+0      	; 0x1020 <debug_writeHex+0xe>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
	u8 u8_ASCIIData[2];
	byteToASCIIHex(u8_ASCIIData, u8_data);
    1024:	68 2f       	mov	r22, r24
    1026:	ce 01       	movw	r24, r28
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	45 df       	rcall	.-374    	; 0xeb6 <byteToASCIIHex>
	for (u8 i = 0; i < 2; i++)
	uart_transmit(s_debugUart, u8_ASCIIData[i]);
    102c:	e9 80       	ldd	r14, Y+1	; 0x01
    102e:	f1 2c       	mov	r15, r1
    1030:	00 91 51 01 	lds	r16, 0x0151	; 0x800151 <s_debugUart>
    1034:	10 91 52 01 	lds	r17, 0x0152	; 0x800152 <s_debugUart+0x1>
    1038:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <s_debugUart+0x2>
    103c:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <s_debugUart+0x3>
    1040:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <s_debugUart+0x4>
    1044:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <s_debugUart+0x5>
    1048:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <s_debugUart+0x6>
    104c:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <s_debugUart+0x7>
    1050:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <s_debugUart+0x8>
    1054:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <s_debugUart+0x9>
    1058:	86 de       	rcall	.-756    	; 0xd66 <uart_transmit>
    105a:	ea 80       	ldd	r14, Y+2	; 0x02
    105c:	f1 2c       	mov	r15, r1
    105e:	00 91 51 01 	lds	r16, 0x0151	; 0x800151 <s_debugUart>
    1062:	10 91 52 01 	lds	r17, 0x0152	; 0x800152 <s_debugUart+0x1>
    1066:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <s_debugUart+0x2>
    106a:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <s_debugUart+0x3>
    106e:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <s_debugUart+0x4>
    1072:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <s_debugUart+0x5>
    1076:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <s_debugUart+0x6>
    107a:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <s_debugUart+0x7>
    107e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <s_debugUart+0x8>
    1082:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <s_debugUart+0x9>
    1086:	6f de       	rcall	.-802    	; 0xd66 <uart_transmit>
	uart_transmit(s_debugUart, '\n');
    1088:	0f 2e       	mov	r0, r31
    108a:	fa e0       	ldi	r31, 0x0A	; 10
    108c:	ef 2e       	mov	r14, r31
    108e:	f1 2c       	mov	r15, r1
    1090:	f0 2d       	mov	r31, r0
    1092:	00 91 51 01 	lds	r16, 0x0151	; 0x800151 <s_debugUart>
    1096:	10 91 52 01 	lds	r17, 0x0152	; 0x800152 <s_debugUart+0x1>
    109a:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <s_debugUart+0x2>
    109e:	30 91 54 01 	lds	r19, 0x0154	; 0x800154 <s_debugUart+0x3>
    10a2:	40 91 55 01 	lds	r20, 0x0155	; 0x800155 <s_debugUart+0x4>
    10a6:	50 91 56 01 	lds	r21, 0x0156	; 0x800156 <s_debugUart+0x5>
    10aa:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <s_debugUart+0x6>
    10ae:	70 91 58 01 	lds	r23, 0x0158	; 0x800158 <s_debugUart+0x7>
    10b2:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <s_debugUart+0x8>
    10b6:	90 91 5a 01 	lds	r25, 0x015A	; 0x80015a <s_debugUart+0x9>
    10ba:	55 de       	rcall	.-854    	; 0xd66 <uart_transmit>
}
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	08 95       	ret

000010ce <__udivmodsi4>:
    10ce:	a1 e2       	ldi	r26, 0x21	; 33
    10d0:	1a 2e       	mov	r1, r26
    10d2:	aa 1b       	sub	r26, r26
    10d4:	bb 1b       	sub	r27, r27
    10d6:	fd 01       	movw	r30, r26
    10d8:	0d c0       	rjmp	.+26     	; 0x10f4 <__udivmodsi4_ep>

000010da <__udivmodsi4_loop>:
    10da:	aa 1f       	adc	r26, r26
    10dc:	bb 1f       	adc	r27, r27
    10de:	ee 1f       	adc	r30, r30
    10e0:	ff 1f       	adc	r31, r31
    10e2:	a2 17       	cp	r26, r18
    10e4:	b3 07       	cpc	r27, r19
    10e6:	e4 07       	cpc	r30, r20
    10e8:	f5 07       	cpc	r31, r21
    10ea:	20 f0       	brcs	.+8      	; 0x10f4 <__udivmodsi4_ep>
    10ec:	a2 1b       	sub	r26, r18
    10ee:	b3 0b       	sbc	r27, r19
    10f0:	e4 0b       	sbc	r30, r20
    10f2:	f5 0b       	sbc	r31, r21

000010f4 <__udivmodsi4_ep>:
    10f4:	66 1f       	adc	r22, r22
    10f6:	77 1f       	adc	r23, r23
    10f8:	88 1f       	adc	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	1a 94       	dec	r1
    10fe:	69 f7       	brne	.-38     	; 0x10da <__udivmodsi4_loop>
    1100:	60 95       	com	r22
    1102:	70 95       	com	r23
    1104:	80 95       	com	r24
    1106:	90 95       	com	r25
    1108:	9b 01       	movw	r18, r22
    110a:	ac 01       	movw	r20, r24
    110c:	bd 01       	movw	r22, r26
    110e:	cf 01       	movw	r24, r30
    1110:	08 95       	ret

00001112 <__umulhisi3>:
    1112:	a2 9f       	mul	r26, r18
    1114:	b0 01       	movw	r22, r0
    1116:	b3 9f       	mul	r27, r19
    1118:	c0 01       	movw	r24, r0
    111a:	a3 9f       	mul	r26, r19
    111c:	70 0d       	add	r23, r0
    111e:	81 1d       	adc	r24, r1
    1120:	11 24       	eor	r1, r1
    1122:	91 1d       	adc	r25, r1
    1124:	b2 9f       	mul	r27, r18
    1126:	70 0d       	add	r23, r0
    1128:	81 1d       	adc	r24, r1
    112a:	11 24       	eor	r1, r1
    112c:	91 1d       	adc	r25, r1
    112e:	08 95       	ret

00001130 <__muluhisi3>:
    1130:	f0 df       	rcall	.-32     	; 0x1112 <__umulhisi3>
    1132:	a5 9f       	mul	r26, r21
    1134:	90 0d       	add	r25, r0
    1136:	b4 9f       	mul	r27, r20
    1138:	90 0d       	add	r25, r0
    113a:	a4 9f       	mul	r26, r20
    113c:	80 0d       	add	r24, r0
    113e:	91 1d       	adc	r25, r1
    1140:	11 24       	eor	r1, r1
    1142:	08 95       	ret

00001144 <_exit>:
    1144:	f8 94       	cli

00001146 <__stop_program>:
    1146:	ff cf       	rjmp	.-2      	; 0x1146 <__stop_program>
