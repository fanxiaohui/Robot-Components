
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000079  00800100  00800100  00001668  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001668  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001698  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000410  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049b9  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000175b  00000000  00000000  000064a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ff8  00000000  00000000  00007bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ea0  00000000  00000000  00009bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001673  00000000  00000000  0000aa94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d65  00000000  00000000  0000c107  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000370  00000000  00000000  0000ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	2d c1       	rjmp	.+602    	; 0x260 <__vector_1>
       6:	00 00       	nop
       8:	35 c1       	rjmp	.+618    	; 0x274 <__vector_2>
       a:	00 00       	nop
       c:	3d c1       	rjmp	.+634    	; 0x288 <__vector_3>
       e:	00 00       	nop
      10:	ff c0       	rjmp	.+510    	; 0x210 <__vector_4>
      12:	00 00       	nop
      14:	07 c1       	rjmp	.+526    	; 0x224 <__vector_5>
      16:	00 00       	nop
      18:	0f c1       	rjmp	.+542    	; 0x238 <__vector_6>
      1a:	00 00       	nop
      1c:	17 c1       	rjmp	.+558    	; 0x24c <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 f5 08 	jmp	0x11ea	; 0x11ea <__vector_8>
      24:	e1 c5       	rjmp	.+3010   	; 0xbe8 <__vector_9>
      26:	00 00       	nop
      28:	1b c6       	rjmp	.+3126   	; 0xc60 <__vector_10>
      2a:	00 00       	nop
      2c:	b2 c5       	rjmp	.+2916   	; 0xb92 <__vector_11>
      2e:	00 00       	nop
      30:	53 c5       	rjmp	.+2726   	; 0xad8 <__vector_12>
      32:	00 00       	nop
      34:	c6 c4       	rjmp	.+2444   	; 0x9c2 <__vector_13>
      36:	00 00       	nop
      38:	24 c5       	rjmp	.+2632   	; 0xa82 <__vector_14>
      3a:	00 00       	nop
      3c:	97 c4       	rjmp	.+2350   	; 0x96c <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	dc c2       	rjmp	.+1464   	; 0x606 <__vector_19>
      4e:	00 00       	nop
      50:	ee c7       	rjmp	.+4060   	; 0x102e <__vector_20>
      52:	00 00       	nop
      54:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__vector_21>
      58:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__vector_22>
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	37 07       	cpc	r19, r23
      8e:	40 07       	cpc	r20, r16
      90:	49 07       	cpc	r20, r25
      92:	52 07       	cpc	r21, r18
      94:	5b 07       	cpc	r21, r27
      96:	64 07       	cpc	r22, r20
      98:	6d 07       	cpc	r22, r29

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e4 ef       	ldi	r30, 0xF4	; 244
      ae:	f5 e1       	ldi	r31, 0x15	; 21
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a9 37       	cpi	r26, 0x79	; 121
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 f8 0a 	jmp	0x15f0	; 0x15f0 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:
}



int main(void)
{
      d8:	77 d0       	rcall	.+238    	; 0x1c8 <device_disableJTAG>
      da:	78 94       	sei
      dc:	0e 94 20 09 	call	0x1240	; 0x1240 <motor_init>
      e0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <motor_start>
      e4:	2f ef       	ldi	r18, 0xFF	; 255
      e6:	8d e3       	ldi	r24, 0x3D	; 61
      e8:	99 e4       	ldi	r25, 0x49	; 73
      ea:	21 50       	subi	r18, 0x01	; 1
      ec:	80 40       	sbci	r24, 0x00	; 0
      ee:	90 40       	sbci	r25, 0x00	; 0
      f0:	e1 f7       	brne	.-8      	; 0xea <main+0x12>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x1c>
      f4:	00 00       	nop
      f6:	ce e1       	ldi	r28, 0x1E	; 30
      f8:	8c 2f       	mov	r24, r28
      fa:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <motor_speed>
      fe:	2f ef       	ldi	r18, 0xFF	; 255
     100:	80 e7       	ldi	r24, 0x70	; 112
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	21 50       	subi	r18, 0x01	; 1
     106:	80 40       	sbci	r24, 0x00	; 0
     108:	90 40       	sbci	r25, 0x00	; 0
     10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x2c>
     10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x36>
     10e:	00 00       	nop
     110:	cb 5f       	subi	r28, 0xFB	; 251
     112:	c7 33       	cpi	r28, 0x37	; 55
     114:	89 f7       	brne	.-30     	; 0xf8 <main+0x20>
     116:	2f ef       	ldi	r18, 0xFF	; 255
     118:	8d e3       	ldi	r24, 0x3D	; 61
     11a:	99 e4       	ldi	r25, 0x49	; 73
     11c:	21 50       	subi	r18, 0x01	; 1
     11e:	80 40       	sbci	r24, 0x00	; 0
     120:	90 40       	sbci	r25, 0x00	; 0
     122:	e1 f7       	brne	.-8      	; 0x11c <main+0x44>
     124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x4e>
     126:	00 00       	nop
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	0e 94 1f 0a 	call	0x143e	; 0x143e <motor_direction>
     12e:	2f ef       	ldi	r18, 0xFF	; 255
     130:	83 ed       	ldi	r24, 0xD3	; 211
     132:	90 e3       	ldi	r25, 0x30	; 48
     134:	21 50       	subi	r18, 0x01	; 1
     136:	80 40       	sbci	r24, 0x00	; 0
     138:	90 40       	sbci	r25, 0x00	; 0
     13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x5c>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x66>
     13e:	00 00       	nop
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	0e 94 1f 0a 	call	0x143e	; 0x143e <motor_direction>
     146:	ce e1       	ldi	r28, 0x1E	; 30
     148:	8c 2f       	mov	r24, r28
     14a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <motor_speed>
     14e:	2f ef       	ldi	r18, 0xFF	; 255
     150:	80 e7       	ldi	r24, 0x70	; 112
     152:	92 e0       	ldi	r25, 0x02	; 2
     154:	21 50       	subi	r18, 0x01	; 1
     156:	80 40       	sbci	r24, 0x00	; 0
     158:	90 40       	sbci	r25, 0x00	; 0
     15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x7c>
     15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x86>
     15e:	00 00       	nop
     160:	c6 5f       	subi	r28, 0xF6	; 246
     162:	c4 36       	cpi	r28, 0x64	; 100
     164:	89 f7       	brne	.-30     	; 0x148 <main+0x70>
     166:	2f ef       	ldi	r18, 0xFF	; 255
     168:	81 e1       	ldi	r24, 0x11	; 17
     16a:	9a e7       	ldi	r25, 0x7A	; 122
     16c:	21 50       	subi	r18, 0x01	; 1
     16e:	80 40       	sbci	r24, 0x00	; 0
     170:	90 40       	sbci	r25, 0x00	; 0
     172:	e1 f7       	brne	.-8      	; 0x16c <main+0x94>
     174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x9e>
     176:	00 00       	nop
     178:	ce e1       	ldi	r28, 0x1E	; 30
     17a:	8c 2f       	mov	r24, r28
     17c:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <motor_speed>
     180:	2f ef       	ldi	r18, 0xFF	; 255
     182:	80 e7       	ldi	r24, 0x70	; 112
     184:	92 e0       	ldi	r25, 0x02	; 2
     186:	21 50       	subi	r18, 0x01	; 1
     188:	80 40       	sbci	r24, 0x00	; 0
     18a:	90 40       	sbci	r25, 0x00	; 0
     18c:	e1 f7       	brne	.-8      	; 0x186 <main+0xae>
     18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0xb8>
     190:	00 00       	nop
     192:	c6 5f       	subi	r28, 0xF6	; 246
     194:	c4 36       	cpi	r28, 0x64	; 100
     196:	89 f7       	brne	.-30     	; 0x17a <main+0xa2>
     198:	83 e0       	ldi	r24, 0x03	; 3
     19a:	0e 94 1f 0a 	call	0x143e	; 0x143e <motor_direction>
     19e:	2f ef       	ldi	r18, 0xFF	; 255
     1a0:	81 e1       	ldi	r24, 0x11	; 17
     1a2:	9a e7       	ldi	r25, 0x7A	; 122
     1a4:	21 50       	subi	r18, 0x01	; 1
     1a6:	80 40       	sbci	r24, 0x00	; 0
     1a8:	90 40       	sbci	r25, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0xcc>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0xd6>
     1ae:	00 00       	nop
     1b0:	0e 94 f5 09 	call	0x13ea	; 0x13ea <motor_stop>
     1b4:	2f ef       	ldi	r18, 0xFF	; 255
     1b6:	83 ed       	ldi	r24, 0xD3	; 211
     1b8:	90 e3       	ldi	r25, 0x30	; 48
     1ba:	21 50       	subi	r18, 0x01	; 1
     1bc:	80 40       	sbci	r24, 0x00	; 0
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0xe2>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0xec>
     1c4:	00 00       	nop
     1c6:	8c cf       	rjmp	.-232    	; 0xe0 <main+0x8>

000001c8 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     1c8:	80 e8       	ldi	r24, 0x80	; 128
     1ca:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     1cc:	85 bf       	out	0x35, r24	; 53
     1ce:	08 95       	ret

000001d0 <gpio_changeDirection>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
     1d0:	61 30       	cpi	r22, 0x01	; 1
     1d2:	61 f0       	breq	.+24     	; 0x1ec <gpio_changeDirection+0x1c>
     1d4:	28 f0       	brcs	.+10     	; 0x1e0 <gpio_changeDirection+0x10>
     1d6:	62 30       	cpi	r22, 0x02	; 2
     1d8:	79 f0       	breq	.+30     	; 0x1f8 <gpio_changeDirection+0x28>
     1da:	63 30       	cpi	r22, 0x03	; 3
     1dc:	99 f0       	breq	.+38     	; 0x204 <gpio_changeDirection+0x34>
     1de:	08 95       	ret
     1e0:	48 2f       	mov	r20, r24
     1e2:	67 2f       	mov	r22, r23
     1e4:	81 e2       	ldi	r24, 0x21	; 33
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	c4 c0       	rjmp	.+392    	; 0x372 <updateBit>
     1ea:	08 95       	ret
     1ec:	48 2f       	mov	r20, r24
     1ee:	67 2f       	mov	r22, r23
     1f0:	84 e2       	ldi	r24, 0x24	; 36
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	be c0       	rjmp	.+380    	; 0x372 <updateBit>
     1f6:	08 95       	ret
     1f8:	48 2f       	mov	r20, r24
     1fa:	67 2f       	mov	r22, r23
     1fc:	87 e2       	ldi	r24, 0x27	; 39
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	b8 c0       	rjmp	.+368    	; 0x372 <updateBit>
     202:	08 95       	ret
     204:	48 2f       	mov	r20, r24
     206:	67 2f       	mov	r22, r23
     208:	8a e2       	ldi	r24, 0x2A	; 42
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	b2 c0       	rjmp	.+356    	; 0x372 <updateBit>
     20e:	08 95       	ret

00000210 <__vector_4>:
     210:	1f 92       	push	r1
     212:	0f 92       	push	r0
     214:	0f b6       	in	r0, 0x3f	; 63
     216:	0f 92       	push	r0
     218:	11 24       	eor	r1, r1
     21a:	0f 90       	pop	r0
     21c:	0f be       	out	0x3f, r0	; 63
     21e:	0f 90       	pop	r0
     220:	1f 90       	pop	r1
     222:	18 95       	reti

00000224 <__vector_5>:
     224:	1f 92       	push	r1
     226:	0f 92       	push	r0
     228:	0f b6       	in	r0, 0x3f	; 63
     22a:	0f 92       	push	r0
     22c:	11 24       	eor	r1, r1
     22e:	0f 90       	pop	r0
     230:	0f be       	out	0x3f, r0	; 63
     232:	0f 90       	pop	r0
     234:	1f 90       	pop	r1
     236:	18 95       	reti

00000238 <__vector_6>:
     238:	1f 92       	push	r1
     23a:	0f 92       	push	r0
     23c:	0f b6       	in	r0, 0x3f	; 63
     23e:	0f 92       	push	r0
     240:	11 24       	eor	r1, r1
     242:	0f 90       	pop	r0
     244:	0f be       	out	0x3f, r0	; 63
     246:	0f 90       	pop	r0
     248:	1f 90       	pop	r1
     24a:	18 95       	reti

0000024c <__vector_7>:
     24c:	1f 92       	push	r1
     24e:	0f 92       	push	r0
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	0f 92       	push	r0
     254:	11 24       	eor	r1, r1
     256:	0f 90       	pop	r0
     258:	0f be       	out	0x3f, r0	; 63
     25a:	0f 90       	pop	r0
     25c:	1f 90       	pop	r1
     25e:	18 95       	reti

00000260 <__vector_1>:
     260:	1f 92       	push	r1
     262:	0f 92       	push	r0
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	0f 92       	push	r0
     268:	11 24       	eor	r1, r1
     26a:	0f 90       	pop	r0
     26c:	0f be       	out	0x3f, r0	; 63
     26e:	0f 90       	pop	r0
     270:	1f 90       	pop	r1
     272:	18 95       	reti

00000274 <__vector_2>:
     274:	1f 92       	push	r1
     276:	0f 92       	push	r0
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	0f 92       	push	r0
     27c:	11 24       	eor	r1, r1
     27e:	0f 90       	pop	r0
     280:	0f be       	out	0x3f, r0	; 63
     282:	0f 90       	pop	r0
     284:	1f 90       	pop	r1
     286:	18 95       	reti

00000288 <__vector_3>:
     288:	1f 92       	push	r1
     28a:	0f 92       	push	r0
     28c:	0f b6       	in	r0, 0x3f	; 63
     28e:	0f 92       	push	r0
     290:	11 24       	eor	r1, r1
     292:	0f 90       	pop	r0
     294:	0f be       	out	0x3f, r0	; 63
     296:	0f 90       	pop	r0
     298:	1f 90       	pop	r1
     29a:	18 95       	reti

0000029c <gpio_init>:
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	c6 2f       	mov	r28, r22
     2a6:	17 2f       	mov	r17, r23
     2a8:	d8 2f       	mov	r29, r24
     2aa:	09 2f       	mov	r16, r25
     2ac:	91 df       	rcall	.-222    	; 0x1d0 <gpio_changeDirection>
     2ae:	d1 11       	cpse	r29, r1
     2b0:	23 c0       	rjmp	.+70     	; 0x2f8 <gpio_init+0x5c>
     2b2:	c1 30       	cpi	r28, 0x01	; 1
     2b4:	81 f0       	breq	.+32     	; 0x2d6 <gpio_init+0x3a>
     2b6:	28 f0       	brcs	.+10     	; 0x2c2 <gpio_init+0x26>
     2b8:	c2 30       	cpi	r28, 0x02	; 2
     2ba:	99 f0       	breq	.+38     	; 0x2e2 <gpio_init+0x46>
     2bc:	c3 30       	cpi	r28, 0x03	; 3
     2be:	b9 f0       	breq	.+46     	; 0x2ee <gpio_init+0x52>
     2c0:	1b c0       	rjmp	.+54     	; 0x2f8 <gpio_init+0x5c>
     2c2:	40 2f       	mov	r20, r16
     2c4:	61 2f       	mov	r22, r17
     2c6:	82 e2       	ldi	r24, 0x22	; 34
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	53 d0       	rcall	.+166    	; 0x372 <updateBit>
     2cc:	61 2f       	mov	r22, r17
     2ce:	8e e7       	ldi	r24, 0x7E	; 126
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	73 d0       	rcall	.+230    	; 0x3ba <clearBit>
     2d4:	11 c0       	rjmp	.+34     	; 0x2f8 <gpio_init+0x5c>
     2d6:	40 2f       	mov	r20, r16
     2d8:	61 2f       	mov	r22, r17
     2da:	85 e2       	ldi	r24, 0x25	; 37
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	49 d0       	rcall	.+146    	; 0x372 <updateBit>
     2e0:	0b c0       	rjmp	.+22     	; 0x2f8 <gpio_init+0x5c>
     2e2:	40 2f       	mov	r20, r16
     2e4:	61 2f       	mov	r22, r17
     2e6:	88 e2       	ldi	r24, 0x28	; 40
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	43 d0       	rcall	.+134    	; 0x372 <updateBit>
     2ec:	05 c0       	rjmp	.+10     	; 0x2f8 <gpio_init+0x5c>
     2ee:	40 2f       	mov	r20, r16
     2f0:	61 2f       	mov	r22, r17
     2f2:	8b e2       	ldi	r24, 0x2B	; 43
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	3d d0       	rcall	.+122    	; 0x372 <updateBit>
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	08 95       	ret

00000302 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     302:	61 30       	cpi	r22, 0x01	; 1
     304:	59 f0       	breq	.+22     	; 0x31c <gpio_out_set+0x1a>
     306:	28 f0       	brcs	.+10     	; 0x312 <gpio_out_set+0x10>
     308:	62 30       	cpi	r22, 0x02	; 2
     30a:	69 f0       	breq	.+26     	; 0x326 <gpio_out_set+0x24>
     30c:	63 30       	cpi	r22, 0x03	; 3
     30e:	81 f0       	breq	.+32     	; 0x330 <gpio_out_set+0x2e>
     310:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     312:	67 2f       	mov	r22, r23
     314:	82 e2       	ldi	r24, 0x22	; 34
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	44 c0       	rjmp	.+136    	; 0x3a2 <setBit>
			break;
     31a:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     31c:	67 2f       	mov	r22, r23
     31e:	85 e2       	ldi	r24, 0x25	; 37
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	3f c0       	rjmp	.+126    	; 0x3a2 <setBit>
			break;
     324:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     326:	67 2f       	mov	r22, r23
     328:	88 e2       	ldi	r24, 0x28	; 40
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	3a c0       	rjmp	.+116    	; 0x3a2 <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
     32e:	08 95       	ret
     330:	67 2f       	mov	r22, r23
     332:	8b e2       	ldi	r24, 0x2B	; 43
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	35 c0       	rjmp	.+106    	; 0x3a2 <setBit>
     338:	08 95       	ret

0000033a <gpio_out_reset>:
	}
}

void gpio_out_reset(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     33a:	61 30       	cpi	r22, 0x01	; 1
     33c:	59 f0       	breq	.+22     	; 0x354 <gpio_out_reset+0x1a>
     33e:	28 f0       	brcs	.+10     	; 0x34a <gpio_out_reset+0x10>
     340:	62 30       	cpi	r22, 0x02	; 2
     342:	69 f0       	breq	.+26     	; 0x35e <gpio_out_reset+0x24>
     344:	63 30       	cpi	r22, 0x03	; 3
     346:	81 f0       	breq	.+32     	; 0x368 <gpio_out_reset+0x2e>
     348:	08 95       	ret
	{
		case PA:
			clearBit(&PORTA, s_gpio.number);
     34a:	67 2f       	mov	r22, r23
     34c:	82 e2       	ldi	r24, 0x22	; 34
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	34 c0       	rjmp	.+104    	; 0x3ba <clearBit>
			break;
     352:	08 95       	ret
		case PB:
			clearBit(&PORTB, s_gpio.number);
     354:	67 2f       	mov	r22, r23
     356:	85 e2       	ldi	r24, 0x25	; 37
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	2f c0       	rjmp	.+94     	; 0x3ba <clearBit>
			break;
     35c:	08 95       	ret
		case PC:
			clearBit(&PORTC, s_gpio.number);
     35e:	67 2f       	mov	r22, r23
     360:	88 e2       	ldi	r24, 0x28	; 40
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	2a c0       	rjmp	.+84     	; 0x3ba <clearBit>
			break;
		case PD:
			clearBit(&PORTD, s_gpio.number);
     366:	08 95       	ret
     368:	67 2f       	mov	r22, r23
     36a:	8b e2       	ldi	r24, 0x2B	; 43
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	25 c0       	rjmp	.+74     	; 0x3ba <clearBit>
     370:	08 95       	ret

00000372 <updateBit>:
{
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
}
     372:	fc 01       	movw	r30, r24
     374:	94 2f       	mov	r25, r20
     376:	20 81       	ld	r18, Z
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	06 2e       	mov	r0, r22
     37e:	02 c0       	rjmp	.+4      	; 0x384 <updateBit+0x12>
     380:	44 0f       	add	r20, r20
     382:	55 1f       	adc	r21, r21
     384:	0a 94       	dec	r0
     386:	e2 f7       	brpl	.-8      	; 0x380 <updateBit+0xe>
     388:	40 95       	com	r20
     38a:	50 95       	com	r21
     38c:	24 23       	and	r18, r20
     38e:	49 2f       	mov	r20, r25
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	02 c0       	rjmp	.+4      	; 0x398 <updateBit+0x26>
     394:	44 0f       	add	r20, r20
     396:	55 1f       	adc	r21, r21
     398:	6a 95       	dec	r22
     39a:	e2 f7       	brpl	.-8      	; 0x394 <updateBit+0x22>
     39c:	42 2b       	or	r20, r18
     39e:	40 83       	st	Z, r20
     3a0:	08 95       	ret

000003a2 <setBit>:
     3a2:	fc 01       	movw	r30, r24
     3a4:	40 81       	ld	r20, Z
     3a6:	21 e0       	ldi	r18, 0x01	; 1
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <setBit+0xe>
     3ac:	22 0f       	add	r18, r18
     3ae:	33 1f       	adc	r19, r19
     3b0:	6a 95       	dec	r22
     3b2:	e2 f7       	brpl	.-8      	; 0x3ac <setBit+0xa>
     3b4:	24 2b       	or	r18, r20
     3b6:	20 83       	st	Z, r18
     3b8:	08 95       	ret

000003ba <clearBit>:
     3ba:	fc 01       	movw	r30, r24
     3bc:	90 81       	ld	r25, Z
     3be:	21 e0       	ldi	r18, 0x01	; 1
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <clearBit+0xe>
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	6a 95       	dec	r22
     3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <clearBit+0xa>
     3cc:	20 95       	com	r18
     3ce:	29 23       	and	r18, r25
     3d0:	20 83       	st	Z, r18
     3d2:	08 95       	ret

000003d4 <checkBit>:
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	02 c0       	rjmp	.+4      	; 0x3dc <checkBit+0x8>
     3d8:	95 95       	asr	r25
     3da:	87 95       	ror	r24
     3dc:	6a 95       	dec	r22
     3de:	e2 f7       	brpl	.-8      	; 0x3d8 <checkBit+0x4>
     3e0:	81 70       	andi	r24, 0x01	; 1
     3e2:	08 95       	ret

000003e4 <ruleOfThree>:

u16 ruleOfThree(u16 u16_extreme, u16 u16_mean1, u16 u16_mean2)
{
     3e4:	fc 01       	movw	r30, r24
     3e6:	9b 01       	movw	r18, r22
	u32 u32_result;
	u32_result = (u32) u16_mean1 * u16_mean2 / u16_extreme;
	return (u16) u32_result;
     3e8:	da 01       	movw	r26, r20
     3ea:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__umulhisi3>
     3ee:	9f 01       	movw	r18, r30
     3f0:	40 e0       	ldi	r20, 0x00	; 0
     3f2:	50 e0       	ldi	r21, 0x00	; 0
     3f4:	0e 94 be 0a 	call	0x157c	; 0x157c <__udivmodsi4>
     3f8:	c9 01       	movw	r24, r18
     3fa:	08 95       	ret

000003fc <pwm_init>:
			OCR3A = ruleOfThree(100, u8_pwm3aPercent, ICR3);
			OCR3B = ruleOfThree(100, u8_pwm3bPercent, ICR3);
		#endif
			break;
	}
}
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	ec 01       	movw	r28, r24
     402:	48 81       	ld	r20, Y
     404:	59 81       	ldd	r21, Y+1	; 0x01
     406:	6a 81       	ldd	r22, Y+2	; 0x02
     408:	7b 81       	ldd	r23, Y+3	; 0x03
     40a:	8c 81       	ldd	r24, Y+4	; 0x04
     40c:	54 d4       	rcall	.+2216   	; 0xcb6 <timer_init>
     40e:	88 81       	ld	r24, Y
     410:	81 30       	cpi	r24, 0x01	; 1
     412:	09 f0       	breq	.+2      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     414:	62 c0       	rjmp	.+196    	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
     416:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     41a:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     41e:	89 2b       	or	r24, r25
     420:	49 f0       	breq	.+18     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     422:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     426:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     42a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     42e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     432:	06 c0       	rjmp	.+12     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     434:	8f ef       	ldi	r24, 0xFF	; 255
     436:	9f ef       	ldi	r25, 0xFF	; 255
     438:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     43c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     440:	64 e0       	ldi	r22, 0x04	; 4
     442:	81 e8       	ldi	r24, 0x81	; 129
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	ad df       	rcall	.-166    	; 0x3a2 <setBit>
     448:	60 e0       	ldi	r22, 0x00	; 0
     44a:	80 e8       	ldi	r24, 0x80	; 128
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	b5 df       	rcall	.-150    	; 0x3ba <clearBit>
     450:	8e 81       	ldd	r24, Y+6	; 0x06
     452:	88 23       	and	r24, r24
     454:	19 f0       	breq	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     456:	81 30       	cpi	r24, 0x01	; 1
     458:	51 f0       	breq	.+20     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     45a:	19 c0       	rjmp	.+50     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     45c:	63 e0       	ldi	r22, 0x03	; 3
     45e:	81 e8       	ldi	r24, 0x81	; 129
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	9f df       	rcall	.-194    	; 0x3a2 <setBit>
     464:	61 e0       	ldi	r22, 0x01	; 1
     466:	80 e8       	ldi	r24, 0x80	; 128
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	9b df       	rcall	.-202    	; 0x3a2 <setBit>
     46c:	10 c0       	rjmp	.+32     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     46e:	63 e0       	ldi	r22, 0x03	; 3
     470:	81 e8       	ldi	r24, 0x81	; 129
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	a2 df       	rcall	.-188    	; 0x3ba <clearBit>
     476:	8d 81       	ldd	r24, Y+5	; 0x05
     478:	88 23       	and	r24, r24
     47a:	29 f0       	breq	.+10     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	80 e8       	ldi	r24, 0x80	; 128
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	9b df       	rcall	.-202    	; 0x3ba <clearBit>
     484:	04 c0       	rjmp	.+8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     486:	61 e0       	ldi	r22, 0x01	; 1
     488:	80 e8       	ldi	r24, 0x80	; 128
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	8a df       	rcall	.-236    	; 0x3a2 <setBit>
     48e:	8f 81       	ldd	r24, Y+7	; 0x07
     490:	88 23       	and	r24, r24
     492:	71 f0       	breq	.+28     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     494:	67 e0       	ldi	r22, 0x07	; 7
     496:	80 e8       	ldi	r24, 0x80	; 128
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	83 df       	rcall	.-250    	; 0x3a2 <setBit>
     49c:	48 85       	ldd	r20, Y+8	; 0x08
     49e:	66 e0       	ldi	r22, 0x06	; 6
     4a0:	80 e8       	ldi	r24, 0x80	; 128
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	66 df       	rcall	.-308    	; 0x372 <updateBit>
     4a6:	63 e0       	ldi	r22, 0x03	; 3
     4a8:	75 e0       	ldi	r23, 0x05	; 5
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	f6 de       	rcall	.-532    	; 0x29c <gpio_init>
     4b0:	89 85       	ldd	r24, Y+9	; 0x09
     4b2:	88 23       	and	r24, r24
     4b4:	71 f0       	breq	.+28     	; 0x4d2 <__LOCK_REGION_LENGTH__+0xd2>
     4b6:	65 e0       	ldi	r22, 0x05	; 5
     4b8:	80 e8       	ldi	r24, 0x80	; 128
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	72 df       	rcall	.-284    	; 0x3a2 <setBit>
     4be:	4a 85       	ldd	r20, Y+10	; 0x0a
     4c0:	64 e0       	ldi	r22, 0x04	; 4
     4c2:	80 e8       	ldi	r24, 0x80	; 128
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	55 df       	rcall	.-342    	; 0x372 <updateBit>
     4c8:	63 e0       	ldi	r22, 0x03	; 3
     4ca:	74 e0       	ldi	r23, 0x04	; 4
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	e5 de       	rcall	.-566    	; 0x29c <gpio_init>
     4d2:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <u8_pwm1aPercent>
     4d6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <pwm_start>:
     4e0:	ef 92       	push	r14
     4e2:	ff 92       	push	r15
     4e4:	0f 93       	push	r16
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	cd b7       	in	r28, 0x3d	; 61
     4ee:	de b7       	in	r29, 0x3e	; 62
     4f0:	2b 97       	sbiw	r28, 0x0b	; 11
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	f8 94       	cli
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	0f be       	out	0x3f, r0	; 63
     4fa:	cd bf       	out	0x3d, r28	; 61
     4fc:	4e 2d       	mov	r20, r14
     4fe:	5f 2d       	mov	r21, r15
     500:	60 2f       	mov	r22, r16
     502:	71 2f       	mov	r23, r17
     504:	82 2f       	mov	r24, r18
     506:	22 d5       	rcall	.+2628   	; 0xf4c <timer_start>
     508:	2b 96       	adiw	r28, 0x0b	; 11
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	ff 90       	pop	r15
     51e:	ef 90       	pop	r14
     520:	08 95       	ret

00000522 <pwm_stop>:
     522:	ef 92       	push	r14
     524:	ff 92       	push	r15
     526:	0f 93       	push	r16
     528:	1f 93       	push	r17
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	2b 97       	sbiw	r28, 0x0b	; 11
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	4e 2d       	mov	r20, r14
     540:	5f 2d       	mov	r21, r15
     542:	60 2f       	mov	r22, r16
     544:	71 2f       	mov	r23, r17
     546:	82 2f       	mov	r24, r18
     548:	46 d5       	rcall	.+2700   	; 0xfd6 <timer_stop>
     54a:	2b 96       	adiw	r28, 0x0b	; 11
     54c:	0f b6       	in	r0, 0x3f	; 63
     54e:	f8 94       	cli
     550:	de bf       	out	0x3e, r29	; 62
     552:	0f be       	out	0x3f, r0	; 63
     554:	cd bf       	out	0x3d, r28	; 61
     556:	df 91       	pop	r29
     558:	cf 91       	pop	r28
     55a:	1f 91       	pop	r17
     55c:	0f 91       	pop	r16
     55e:	ff 90       	pop	r15
     560:	ef 90       	pop	r14
     562:	08 95       	ret

00000564 <pwm_setDutyCycle>:

void pwm_setDutyCycle(pwm_struct_t s_pwm, timer_channel_enum_t e_channel, u8 u8_percent)
{
     564:	af 92       	push	r10
     566:	cf 92       	push	r12
     568:	ef 92       	push	r14
     56a:	ff 92       	push	r15
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	2b 97       	sbiw	r28, 0x0b	; 11
     57a:	0f b6       	in	r0, 0x3f	; 63
     57c:	f8 94       	cli
     57e:	de bf       	out	0x3e, r29	; 62
     580:	0f be       	out	0x3f, r0	; 63
     582:	cd bf       	out	0x3d, r28	; 61
     584:	9e 2d       	mov	r25, r14
     586:	e9 82       	std	Y+1, r14	; 0x01
     588:	fa 82       	std	Y+2, r15	; 0x02
     58a:	0b 83       	std	Y+3, r16	; 0x03
     58c:	1c 83       	std	Y+4, r17	; 0x04
     58e:	2d 83       	std	Y+5, r18	; 0x05
     590:	3e 83       	std	Y+6, r19	; 0x06
     592:	4f 83       	std	Y+7, r20	; 0x07
     594:	58 87       	std	Y+8, r21	; 0x08
     596:	69 87       	std	Y+9, r22	; 0x09
     598:	7a 87       	std	Y+10, r23	; 0x0a
     59a:	8b 87       	std	Y+11, r24	; 0x0b
	switch(s_pwm.base.peripheral)
     59c:	91 30       	cpi	r25, 0x01	; 1
     59e:	21 f5       	brne	.+72     	; 0x5e8 <pwm_setDutyCycle+0x84>
     5a0:	8c 2d       	mov	r24, r12
			}
		#endif
			break;
		case TIMER1:
		#ifdef USING_PWM1
			if (e_channel == CHANNEL_A)
     5a2:	c1 10       	cpse	r12, r1
     5a4:	10 c0       	rjmp	.+32     	; 0x5c6 <pwm_setDutyCycle+0x62>
			{
				u8_pwm1aPercent = u8_percent;
     5a6:	a0 92 01 01 	sts	0x0101, r10	; 0x800101 <u8_pwm1aPercent>
				OCR1A = ruleOfThree(100, u8_percent, ICR1);
     5aa:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5ae:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5b2:	6a 2d       	mov	r22, r10
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	84 e6       	ldi	r24, 0x64	; 100
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	14 df       	rcall	.-472    	; 0x3e4 <ruleOfThree>
     5bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5c4:	11 c0       	rjmp	.+34     	; 0x5e8 <pwm_setDutyCycle+0x84>
			}
			if (e_channel == CHANNEL_B)
     5c6:	81 30       	cpi	r24, 0x01	; 1
     5c8:	79 f4       	brne	.+30     	; 0x5e8 <pwm_setDutyCycle+0x84>
			{
				u8_pwm1bPercent = u8_percent;
     5ca:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <__data_end>
				OCR1B = ruleOfThree(100, u8_percent, ICR1);
     5ce:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     5d2:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     5d6:	6a 2d       	mov	r22, r10
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	84 e6       	ldi	r24, 0x64	; 100
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	02 df       	rcall	.-508    	; 0x3e4 <ruleOfThree>
     5e0:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     5e4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				OCR3B = ruleOfThree(100, u8_percent, ICR3);
			}
		#endif
			break;
	}
}
     5e8:	2b 96       	adiw	r28, 0x0b	; 11
     5ea:	0f b6       	in	r0, 0x3f	; 63
     5ec:	f8 94       	cli
     5ee:	de bf       	out	0x3e, r29	; 62
     5f0:	0f be       	out	0x3f, r0	; 63
     5f2:	cd bf       	out	0x3d, r28	; 61
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	1f 91       	pop	r17
     5fa:	0f 91       	pop	r16
     5fc:	ff 90       	pop	r15
     5fe:	ef 90       	pop	r14
     600:	cf 90       	pop	r12
     602:	af 90       	pop	r10
     604:	08 95       	ret

00000606 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	0b b6       	in	r0, 0x3b	; 59
     612:	0f 92       	push	r0
     614:	8f 93       	push	r24
     616:	9f 93       	push	r25
     618:	ef 93       	push	r30
     61a:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     61c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <u8_RLastReceivedIndex>
     620:	f0 e0       	ldi	r31, 0x00	; 0
     622:	8e b5       	in	r24, 0x2e	; 46
     624:	e8 5f       	subi	r30, 0xF8	; 248
     626:	fe 4f       	sbci	r31, 0xFE	; 254
     628:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     62a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_RLastReceivedIndex>
     62e:	89 30       	cpi	r24, 0x09	; 9
     630:	30 f4       	brcc	.+12     	; 0x63e <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     632:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u8_RLastReceivedIndex>
     636:	8f 5f       	subi	r24, 0xFF	; 255
     638:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <u8_RLastReceivedIndex>
     63c:	02 c0       	rjmp	.+4      	; 0x642 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     63e:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     642:	81 e0       	ldi	r24, 0x01	; 1
     644:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     648:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <u8_TLastTransmittedIndex>
     64c:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <u8_TLastRequestedIndex>
     650:	98 17       	cp	r25, r24
     652:	a1 f0       	breq	.+40     	; 0x67c <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     654:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <u8_TLastTransmittedIndex>
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	ee 5e       	subi	r30, 0xEE	; 238
     65c:	fe 4f       	sbci	r31, 0xFE	; 254
     65e:	80 81       	ld	r24, Z
     660:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     662:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u8_TLastTransmittedIndex>
     666:	89 30       	cpi	r24, 0x09	; 9
     668:	30 f4       	brcc	.+12     	; 0x676 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     66a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <u8_TLastTransmittedIndex>
     66e:	8f 5f       	subi	r24, 0xFF	; 255
     670:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8_TLastTransmittedIndex>
     674:	06 c0       	rjmp	.+12     	; 0x682 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     676:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <u8_TLastTransmittedIndex>
     67a:	03 c0       	rjmp	.+6      	; 0x682 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <b_TAvailable>
	}
}
     682:	ff 91       	pop	r31
     684:	ef 91       	pop	r30
     686:	9f 91       	pop	r25
     688:	8f 91       	pop	r24
     68a:	0f 90       	pop	r0
     68c:	0b be       	out	0x3b, r0	; 59
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <calculateTopRegister>:
	setBit(&GTCCR, PSRSYNC);
}

void timer_synchronisedStart()
{
	clearBit(&GTCCR, TSM);
     698:	8f 92       	push	r8
     69a:	9f 92       	push	r9
     69c:	af 92       	push	r10
     69e:	bf 92       	push	r11
     6a0:	ef 92       	push	r14
     6a2:	ff 92       	push	r15
     6a4:	0f 93       	push	r16
     6a6:	1f 93       	push	r17
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	00 d0       	rcall	.+0      	; 0x6ae <calculateTopRegister+0x16>
     6ae:	00 d0       	rcall	.+0      	; 0x6b0 <calculateTopRegister+0x18>
     6b0:	1f 92       	push	r1
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	48 01       	movw	r8, r16
     6b8:	59 01       	movw	r10, r18
     6ba:	41 30       	cpi	r20, 0x01	; 1
     6bc:	21 f0       	breq	.+8      	; 0x6c6 <calculateTopRegister+0x2e>
     6be:	42 30       	cpi	r20, 0x02	; 2
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <calculateTopRegister+0x2c>
     6c2:	83 c0       	rjmp	.+262    	; 0x7ca <calculateTopRegister+0x132>
     6c4:	40 c1       	rjmp	.+640    	; 0x946 <calculateTopRegister+0x2ae>
     6c6:	60 e0       	ldi	r22, 0x00	; 0
     6c8:	72 e1       	ldi	r23, 0x12	; 18
     6ca:	8a e7       	ldi	r24, 0x7A	; 122
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	a9 01       	movw	r20, r18
     6d0:	98 01       	movw	r18, r16
     6d2:	54 d7       	rcall	.+3752   	; 0x157c <__udivmodsi4>
     6d4:	da 01       	movw	r26, r20
     6d6:	c9 01       	movw	r24, r18
     6d8:	01 97       	sbiw	r24, 0x01	; 1
     6da:	a1 09       	sbc	r26, r1
     6dc:	b1 09       	sbc	r27, r1
     6de:	00 97       	sbiw	r24, 0x00	; 0
     6e0:	21 e0       	ldi	r18, 0x01	; 1
     6e2:	a2 07       	cpc	r26, r18
     6e4:	b1 05       	cpc	r27, r1
     6e6:	50 f4       	brcc	.+20     	; 0x6fc <calculateTopRegister+0x64>
     6e8:	49 ef       	ldi	r20, 0xF9	; 249
     6ea:	5f ef       	ldi	r21, 0xFF	; 255
     6ec:	6f ef       	ldi	r22, 0xFF	; 255
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	f7 01       	movw	r30, r14
     6f2:	40 83       	st	Z, r20
     6f4:	51 83       	std	Z+1, r21	; 0x01
     6f6:	62 83       	std	Z+2, r22	; 0x02
     6f8:	73 83       	std	Z+3, r23	; 0x03
     6fa:	28 c1       	rjmp	.+592    	; 0x94c <calculateTopRegister+0x2b4>
     6fc:	60 e4       	ldi	r22, 0x40	; 64
     6fe:	72 e4       	ldi	r23, 0x42	; 66
     700:	8f e0       	ldi	r24, 0x0F	; 15
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a5 01       	movw	r20, r10
     706:	94 01       	movw	r18, r8
     708:	39 d7       	rcall	.+3698   	; 0x157c <__udivmodsi4>
     70a:	da 01       	movw	r26, r20
     70c:	c9 01       	movw	r24, r18
     70e:	01 97       	sbiw	r24, 0x01	; 1
     710:	a1 09       	sbc	r26, r1
     712:	b1 09       	sbc	r27, r1
     714:	00 97       	sbiw	r24, 0x00	; 0
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	af 07       	cpc	r26, r31
     71a:	b1 05       	cpc	r27, r1
     71c:	50 f4       	brcc	.+20     	; 0x732 <calculateTopRegister+0x9a>
     71e:	4a ef       	ldi	r20, 0xFA	; 250
     720:	5f ef       	ldi	r21, 0xFF	; 255
     722:	6f ef       	ldi	r22, 0xFF	; 255
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	f7 01       	movw	r30, r14
     728:	40 83       	st	Z, r20
     72a:	51 83       	std	Z+1, r21	; 0x01
     72c:	62 83       	std	Z+2, r22	; 0x02
     72e:	73 83       	std	Z+3, r23	; 0x03
     730:	0d c1       	rjmp	.+538    	; 0x94c <calculateTopRegister+0x2b4>
     732:	68 e4       	ldi	r22, 0x48	; 72
     734:	78 ee       	ldi	r23, 0xE8	; 232
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	a5 01       	movw	r20, r10
     73c:	94 01       	movw	r18, r8
     73e:	1e d7       	rcall	.+3644   	; 0x157c <__udivmodsi4>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	01 97       	sbiw	r24, 0x01	; 1
     746:	a1 09       	sbc	r26, r1
     748:	b1 09       	sbc	r27, r1
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	f1 e0       	ldi	r31, 0x01	; 1
     74e:	af 07       	cpc	r26, r31
     750:	b1 05       	cpc	r27, r1
     752:	50 f4       	brcc	.+20     	; 0x768 <calculateTopRegister+0xd0>
     754:	4c ef       	ldi	r20, 0xFC	; 252
     756:	5f ef       	ldi	r21, 0xFF	; 255
     758:	6f ef       	ldi	r22, 0xFF	; 255
     75a:	70 e0       	ldi	r23, 0x00	; 0
     75c:	f7 01       	movw	r30, r14
     75e:	40 83       	st	Z, r20
     760:	51 83       	std	Z+1, r21	; 0x01
     762:	62 83       	std	Z+2, r22	; 0x02
     764:	73 83       	std	Z+3, r23	; 0x03
     766:	f2 c0       	rjmp	.+484    	; 0x94c <calculateTopRegister+0x2b4>
     768:	62 e1       	ldi	r22, 0x12	; 18
     76a:	7a e7       	ldi	r23, 0x7A	; 122
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	a5 01       	movw	r20, r10
     772:	94 01       	movw	r18, r8
     774:	03 d7       	rcall	.+3590   	; 0x157c <__udivmodsi4>
     776:	da 01       	movw	r26, r20
     778:	c9 01       	movw	r24, r18
     77a:	01 97       	sbiw	r24, 0x01	; 1
     77c:	a1 09       	sbc	r26, r1
     77e:	b1 09       	sbc	r27, r1
     780:	00 97       	sbiw	r24, 0x00	; 0
     782:	f1 e0       	ldi	r31, 0x01	; 1
     784:	af 07       	cpc	r26, r31
     786:	b1 05       	cpc	r27, r1
     788:	50 f4       	brcc	.+20     	; 0x79e <calculateTopRegister+0x106>
     78a:	4e ef       	ldi	r20, 0xFE	; 254
     78c:	5f ef       	ldi	r21, 0xFF	; 255
     78e:	6f ef       	ldi	r22, 0xFF	; 255
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	f7 01       	movw	r30, r14
     794:	40 83       	st	Z, r20
     796:	51 83       	std	Z+1, r21	; 0x01
     798:	62 83       	std	Z+2, r22	; 0x02
     79a:	73 83       	std	Z+3, r23	; 0x03
     79c:	d7 c0       	rjmp	.+430    	; 0x94c <calculateTopRegister+0x2b4>
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	9f ef       	ldi	r25, 0xFF	; 255
     7a2:	af ef       	ldi	r26, 0xFF	; 255
     7a4:	b0 e0       	ldi	r27, 0x00	; 0
     7a6:	f7 01       	movw	r30, r14
     7a8:	80 83       	st	Z, r24
     7aa:	91 83       	std	Z+1, r25	; 0x01
     7ac:	a2 83       	std	Z+2, r26	; 0x02
     7ae:	b3 83       	std	Z+3, r27	; 0x03
     7b0:	64 e8       	ldi	r22, 0x84	; 132
     7b2:	7e e1       	ldi	r23, 0x1E	; 30
     7b4:	80 e0       	ldi	r24, 0x00	; 0
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	a5 01       	movw	r20, r10
     7ba:	94 01       	movw	r18, r8
     7bc:	df d6       	rcall	.+3518   	; 0x157c <__udivmodsi4>
     7be:	da 01       	movw	r26, r20
     7c0:	c9 01       	movw	r24, r18
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	a1 09       	sbc	r26, r1
     7c6:	b1 09       	sbc	r27, r1
     7c8:	c1 c0       	rjmp	.+386    	; 0x94c <calculateTopRegister+0x2b4>
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	72 e1       	ldi	r23, 0x12	; 18
     7ce:	8a e7       	ldi	r24, 0x7A	; 122
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	a9 01       	movw	r20, r18
     7d4:	98 01       	movw	r18, r16
     7d6:	d2 d6       	rcall	.+3492   	; 0x157c <__udivmodsi4>
     7d8:	da 01       	movw	r26, r20
     7da:	c9 01       	movw	r24, r18
     7dc:	01 97       	sbiw	r24, 0x01	; 1
     7de:	a1 09       	sbc	r26, r1
     7e0:	b1 09       	sbc	r27, r1
     7e2:	8f 3f       	cpi	r24, 0xFF	; 255
     7e4:	91 05       	cpc	r25, r1
     7e6:	a1 05       	cpc	r26, r1
     7e8:	b1 05       	cpc	r27, r1
     7ea:	09 f0       	breq	.+2      	; 0x7ee <calculateTopRegister+0x156>
     7ec:	50 f4       	brcc	.+20     	; 0x802 <calculateTopRegister+0x16a>
     7ee:	49 ef       	ldi	r20, 0xF9	; 249
     7f0:	5f ef       	ldi	r21, 0xFF	; 255
     7f2:	6f ef       	ldi	r22, 0xFF	; 255
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	f7 01       	movw	r30, r14
     7f8:	40 83       	st	Z, r20
     7fa:	51 83       	std	Z+1, r21	; 0x01
     7fc:	62 83       	std	Z+2, r22	; 0x02
     7fe:	73 83       	std	Z+3, r23	; 0x03
     800:	a5 c0       	rjmp	.+330    	; 0x94c <calculateTopRegister+0x2b4>
     802:	60 e4       	ldi	r22, 0x40	; 64
     804:	72 e4       	ldi	r23, 0x42	; 66
     806:	8f e0       	ldi	r24, 0x0F	; 15
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a5 01       	movw	r20, r10
     80c:	94 01       	movw	r18, r8
     80e:	b6 d6       	rcall	.+3436   	; 0x157c <__udivmodsi4>
     810:	da 01       	movw	r26, r20
     812:	c9 01       	movw	r24, r18
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	a1 09       	sbc	r26, r1
     818:	b1 09       	sbc	r27, r1
     81a:	8f 3f       	cpi	r24, 0xFF	; 255
     81c:	91 05       	cpc	r25, r1
     81e:	a1 05       	cpc	r26, r1
     820:	b1 05       	cpc	r27, r1
     822:	09 f0       	breq	.+2      	; 0x826 <calculateTopRegister+0x18e>
     824:	50 f4       	brcc	.+20     	; 0x83a <calculateTopRegister+0x1a2>
     826:	4a ef       	ldi	r20, 0xFA	; 250
     828:	5f ef       	ldi	r21, 0xFF	; 255
     82a:	6f ef       	ldi	r22, 0xFF	; 255
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	f7 01       	movw	r30, r14
     830:	40 83       	st	Z, r20
     832:	51 83       	std	Z+1, r21	; 0x01
     834:	62 83       	std	Z+2, r22	; 0x02
     836:	73 83       	std	Z+3, r23	; 0x03
     838:	89 c0       	rjmp	.+274    	; 0x94c <calculateTopRegister+0x2b4>
     83a:	60 e9       	ldi	r22, 0x90	; 144
     83c:	70 ed       	ldi	r23, 0xD0	; 208
     83e:	83 e0       	ldi	r24, 0x03	; 3
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	a5 01       	movw	r20, r10
     844:	94 01       	movw	r18, r8
     846:	9a d6       	rcall	.+3380   	; 0x157c <__udivmodsi4>
     848:	da 01       	movw	r26, r20
     84a:	c9 01       	movw	r24, r18
     84c:	01 97       	sbiw	r24, 0x01	; 1
     84e:	a1 09       	sbc	r26, r1
     850:	b1 09       	sbc	r27, r1
     852:	8f 3f       	cpi	r24, 0xFF	; 255
     854:	91 05       	cpc	r25, r1
     856:	a1 05       	cpc	r26, r1
     858:	b1 05       	cpc	r27, r1
     85a:	09 f0       	breq	.+2      	; 0x85e <calculateTopRegister+0x1c6>
     85c:	50 f4       	brcc	.+20     	; 0x872 <calculateTopRegister+0x1da>
     85e:	4b ef       	ldi	r20, 0xFB	; 251
     860:	5f ef       	ldi	r21, 0xFF	; 255
     862:	6f ef       	ldi	r22, 0xFF	; 255
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	f7 01       	movw	r30, r14
     868:	40 83       	st	Z, r20
     86a:	51 83       	std	Z+1, r21	; 0x01
     86c:	62 83       	std	Z+2, r22	; 0x02
     86e:	73 83       	std	Z+3, r23	; 0x03
     870:	6d c0       	rjmp	.+218    	; 0x94c <calculateTopRegister+0x2b4>
     872:	68 e4       	ldi	r22, 0x48	; 72
     874:	78 ee       	ldi	r23, 0xE8	; 232
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	a5 01       	movw	r20, r10
     87c:	94 01       	movw	r18, r8
     87e:	7e d6       	rcall	.+3324   	; 0x157c <__udivmodsi4>
     880:	da 01       	movw	r26, r20
     882:	c9 01       	movw	r24, r18
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	a1 09       	sbc	r26, r1
     888:	b1 09       	sbc	r27, r1
     88a:	8f 3f       	cpi	r24, 0xFF	; 255
     88c:	91 05       	cpc	r25, r1
     88e:	a1 05       	cpc	r26, r1
     890:	b1 05       	cpc	r27, r1
     892:	09 f0       	breq	.+2      	; 0x896 <calculateTopRegister+0x1fe>
     894:	50 f4       	brcc	.+20     	; 0x8aa <calculateTopRegister+0x212>
     896:	4c ef       	ldi	r20, 0xFC	; 252
     898:	5f ef       	ldi	r21, 0xFF	; 255
     89a:	6f ef       	ldi	r22, 0xFF	; 255
     89c:	70 e0       	ldi	r23, 0x00	; 0
     89e:	f7 01       	movw	r30, r14
     8a0:	40 83       	st	Z, r20
     8a2:	51 83       	std	Z+1, r21	; 0x01
     8a4:	62 83       	std	Z+2, r22	; 0x02
     8a6:	73 83       	std	Z+3, r23	; 0x03
     8a8:	51 c0       	rjmp	.+162    	; 0x94c <calculateTopRegister+0x2b4>
     8aa:	64 e2       	ldi	r22, 0x24	; 36
     8ac:	74 ef       	ldi	r23, 0xF4	; 244
     8ae:	80 e0       	ldi	r24, 0x00	; 0
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	a5 01       	movw	r20, r10
     8b4:	94 01       	movw	r18, r8
     8b6:	62 d6       	rcall	.+3268   	; 0x157c <__udivmodsi4>
     8b8:	da 01       	movw	r26, r20
     8ba:	c9 01       	movw	r24, r18
     8bc:	01 97       	sbiw	r24, 0x01	; 1
     8be:	a1 09       	sbc	r26, r1
     8c0:	b1 09       	sbc	r27, r1
     8c2:	8f 3f       	cpi	r24, 0xFF	; 255
     8c4:	91 05       	cpc	r25, r1
     8c6:	a1 05       	cpc	r26, r1
     8c8:	b1 05       	cpc	r27, r1
     8ca:	09 f0       	breq	.+2      	; 0x8ce <calculateTopRegister+0x236>
     8cc:	50 f4       	brcc	.+20     	; 0x8e2 <calculateTopRegister+0x24a>
     8ce:	4d ef       	ldi	r20, 0xFD	; 253
     8d0:	5f ef       	ldi	r21, 0xFF	; 255
     8d2:	6f ef       	ldi	r22, 0xFF	; 255
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	f7 01       	movw	r30, r14
     8d8:	40 83       	st	Z, r20
     8da:	51 83       	std	Z+1, r21	; 0x01
     8dc:	62 83       	std	Z+2, r22	; 0x02
     8de:	73 83       	std	Z+3, r23	; 0x03
     8e0:	35 c0       	rjmp	.+106    	; 0x94c <calculateTopRegister+0x2b4>
     8e2:	62 e1       	ldi	r22, 0x12	; 18
     8e4:	7a e7       	ldi	r23, 0x7A	; 122
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	a5 01       	movw	r20, r10
     8ec:	94 01       	movw	r18, r8
     8ee:	46 d6       	rcall	.+3212   	; 0x157c <__udivmodsi4>
     8f0:	da 01       	movw	r26, r20
     8f2:	c9 01       	movw	r24, r18
     8f4:	01 97       	sbiw	r24, 0x01	; 1
     8f6:	a1 09       	sbc	r26, r1
     8f8:	b1 09       	sbc	r27, r1
     8fa:	8f 3f       	cpi	r24, 0xFF	; 255
     8fc:	91 05       	cpc	r25, r1
     8fe:	a1 05       	cpc	r26, r1
     900:	b1 05       	cpc	r27, r1
     902:	09 f0       	breq	.+2      	; 0x906 <calculateTopRegister+0x26e>
     904:	50 f4       	brcc	.+20     	; 0x91a <calculateTopRegister+0x282>
     906:	4e ef       	ldi	r20, 0xFE	; 254
     908:	5f ef       	ldi	r21, 0xFF	; 255
     90a:	6f ef       	ldi	r22, 0xFF	; 255
     90c:	70 e0       	ldi	r23, 0x00	; 0
     90e:	f7 01       	movw	r30, r14
     910:	40 83       	st	Z, r20
     912:	51 83       	std	Z+1, r21	; 0x01
     914:	62 83       	std	Z+2, r22	; 0x02
     916:	73 83       	std	Z+3, r23	; 0x03
     918:	19 c0       	rjmp	.+50     	; 0x94c <calculateTopRegister+0x2b4>
     91a:	8f ef       	ldi	r24, 0xFF	; 255
     91c:	9f ef       	ldi	r25, 0xFF	; 255
     91e:	af ef       	ldi	r26, 0xFF	; 255
     920:	b0 e0       	ldi	r27, 0x00	; 0
     922:	f7 01       	movw	r30, r14
     924:	80 83       	st	Z, r24
     926:	91 83       	std	Z+1, r25	; 0x01
     928:	a2 83       	std	Z+2, r26	; 0x02
     92a:	b3 83       	std	Z+3, r27	; 0x03
     92c:	64 e8       	ldi	r22, 0x84	; 132
     92e:	7e e1       	ldi	r23, 0x1E	; 30
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	a5 01       	movw	r20, r10
     936:	94 01       	movw	r18, r8
     938:	21 d6       	rcall	.+3138   	; 0x157c <__udivmodsi4>
     93a:	da 01       	movw	r26, r20
     93c:	c9 01       	movw	r24, r18
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	a1 09       	sbc	r26, r1
     942:	b1 09       	sbc	r27, r1
     944:	03 c0       	rjmp	.+6      	; 0x94c <calculateTopRegister+0x2b4>
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	dc 01       	movw	r26, r24
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	bf 90       	pop	r11
     964:	af 90       	pop	r10
     966:	9f 90       	pop	r9
     968:	8f 90       	pop	r8
     96a:	08 95       	ret

0000096c <__vector_15>:
     96c:	1f 92       	push	r1
     96e:	0f 92       	push	r0
     970:	0f b6       	in	r0, 0x3f	; 63
     972:	0f 92       	push	r0
     974:	11 24       	eor	r1, r1
     976:	0b b6       	in	r0, 0x3b	; 59
     978:	0f 92       	push	r0
     97a:	2f 93       	push	r18
     97c:	3f 93       	push	r19
     97e:	4f 93       	push	r20
     980:	5f 93       	push	r21
     982:	6f 93       	push	r22
     984:	7f 93       	push	r23
     986:	8f 93       	push	r24
     988:	9f 93       	push	r25
     98a:	af 93       	push	r26
     98c:	bf 93       	push	r27
     98e:	ef 93       	push	r30
     990:	ff 93       	push	r31
     992:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <p_timer1Callbacks>
     996:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <p_timer1Callbacks+0x1>
     99a:	09 95       	icall
     99c:	ff 91       	pop	r31
     99e:	ef 91       	pop	r30
     9a0:	bf 91       	pop	r27
     9a2:	af 91       	pop	r26
     9a4:	9f 91       	pop	r25
     9a6:	8f 91       	pop	r24
     9a8:	7f 91       	pop	r23
     9aa:	6f 91       	pop	r22
     9ac:	5f 91       	pop	r21
     9ae:	4f 91       	pop	r20
     9b0:	3f 91       	pop	r19
     9b2:	2f 91       	pop	r18
     9b4:	0f 90       	pop	r0
     9b6:	0b be       	out	0x3b, r0	; 59
     9b8:	0f 90       	pop	r0
     9ba:	0f be       	out	0x3f, r0	; 63
     9bc:	0f 90       	pop	r0
     9be:	1f 90       	pop	r1
     9c0:	18 95       	reti

000009c2 <__vector_13>:
     9c2:	1f 92       	push	r1
     9c4:	0f 92       	push	r0
     9c6:	0f b6       	in	r0, 0x3f	; 63
     9c8:	0f 92       	push	r0
     9ca:	11 24       	eor	r1, r1
     9cc:	0b b6       	in	r0, 0x3b	; 59
     9ce:	0f 92       	push	r0
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	2f 93       	push	r18
     9d6:	3f 93       	push	r19
     9d8:	4f 93       	push	r20
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	ef 93       	push	r30
     9ee:	ff 93       	push	r31
     9f0:	c1 e8       	ldi	r28, 0x81	; 129
     9f2:	d0 e0       	ldi	r29, 0x00	; 0
     9f4:	88 81       	ld	r24, Y
     9f6:	64 e0       	ldi	r22, 0x04	; 4
     9f8:	ed dc       	rcall	.-1574   	; 0x3d4 <checkBit>
     9fa:	18 2f       	mov	r17, r24
     9fc:	88 81       	ld	r24, Y
     9fe:	63 e0       	ldi	r22, 0x03	; 3
     a00:	e9 dc       	rcall	.-1582   	; 0x3d4 <checkBit>
     a02:	c1 2f       	mov	r28, r17
     a04:	cc 0f       	add	r28, r28
     a06:	cc 0f       	add	r28, r28
     a08:	cc 0f       	add	r28, r28
     a0a:	24 e0       	ldi	r18, 0x04	; 4
     a0c:	82 9f       	mul	r24, r18
     a0e:	c0 01       	movw	r24, r0
     a10:	11 24       	eor	r1, r1
     a12:	c8 2b       	or	r28, r24
     a14:	00 e8       	ldi	r16, 0x80	; 128
     a16:	10 e0       	ldi	r17, 0x00	; 0
     a18:	f8 01       	movw	r30, r16
     a1a:	80 81       	ld	r24, Z
     a1c:	61 e0       	ldi	r22, 0x01	; 1
     a1e:	da dc       	rcall	.-1612   	; 0x3d4 <checkBit>
     a20:	d8 2f       	mov	r29, r24
     a22:	f8 01       	movw	r30, r16
     a24:	80 81       	ld	r24, Z
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	d5 dc       	rcall	.-1622   	; 0x3d4 <checkBit>
     a2a:	dd 0f       	add	r29, r29
     a2c:	8c 2b       	or	r24, r28
     a2e:	8d 2b       	or	r24, r29
     a30:	88 30       	cpi	r24, 0x08	; 8
     a32:	18 f4       	brcc	.+6      	; 0xa3a <__vector_13+0x78>
     a34:	84 30       	cpi	r24, 0x04	; 4
     a36:	19 f4       	brne	.+6      	; 0xa3e <__vector_13+0x7c>
     a38:	08 c0       	rjmp	.+16     	; 0xa4a <__vector_13+0x88>
     a3a:	80 fd       	sbrc	r24, 0
     a3c:	06 c0       	rjmp	.+12     	; 0xa4a <__vector_13+0x88>
     a3e:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <p_timer1Callbacks+0x2>
     a42:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <p_timer1Callbacks+0x3>
     a46:	09 95       	icall
     a48:	05 c0       	rjmp	.+10     	; 0xa54 <__vector_13+0x92>
     a4a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <p_timer1Callbacks>
     a4e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <p_timer1Callbacks+0x1>
     a52:	09 95       	icall
     a54:	ff 91       	pop	r31
     a56:	ef 91       	pop	r30
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	1f 91       	pop	r17
     a72:	0f 91       	pop	r16
     a74:	0f 90       	pop	r0
     a76:	0b be       	out	0x3b, r0	; 59
     a78:	0f 90       	pop	r0
     a7a:	0f be       	out	0x3f, r0	; 63
     a7c:	0f 90       	pop	r0
     a7e:	1f 90       	pop	r1
     a80:	18 95       	reti

00000a82 <__vector_14>:
     a82:	1f 92       	push	r1
     a84:	0f 92       	push	r0
     a86:	0f b6       	in	r0, 0x3f	; 63
     a88:	0f 92       	push	r0
     a8a:	11 24       	eor	r1, r1
     a8c:	0b b6       	in	r0, 0x3b	; 59
     a8e:	0f 92       	push	r0
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <p_timer1Callbacks+0x4>
     aac:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <p_timer1Callbacks+0x5>
     ab0:	09 95       	icall
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	0f 90       	pop	r0
     acc:	0b be       	out	0x3b, r0	; 59
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_12>:
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	0b b6       	in	r0, 0x3b	; 59
     ae4:	0f 92       	push	r0
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	2f 93       	push	r18
     aec:	3f 93       	push	r19
     aee:	4f 93       	push	r20
     af0:	5f 93       	push	r21
     af2:	6f 93       	push	r22
     af4:	7f 93       	push	r23
     af6:	8f 93       	push	r24
     af8:	9f 93       	push	r25
     afa:	af 93       	push	r26
     afc:	bf 93       	push	r27
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
     b06:	c1 e8       	ldi	r28, 0x81	; 129
     b08:	d0 e0       	ldi	r29, 0x00	; 0
     b0a:	88 81       	ld	r24, Y
     b0c:	64 e0       	ldi	r22, 0x04	; 4
     b0e:	62 dc       	rcall	.-1852   	; 0x3d4 <checkBit>
     b10:	18 2f       	mov	r17, r24
     b12:	88 81       	ld	r24, Y
     b14:	63 e0       	ldi	r22, 0x03	; 3
     b16:	5e dc       	rcall	.-1860   	; 0x3d4 <checkBit>
     b18:	c1 2f       	mov	r28, r17
     b1a:	cc 0f       	add	r28, r28
     b1c:	cc 0f       	add	r28, r28
     b1e:	cc 0f       	add	r28, r28
     b20:	24 e0       	ldi	r18, 0x04	; 4
     b22:	82 9f       	mul	r24, r18
     b24:	c0 01       	movw	r24, r0
     b26:	11 24       	eor	r1, r1
     b28:	c8 2b       	or	r28, r24
     b2a:	00 e8       	ldi	r16, 0x80	; 128
     b2c:	10 e0       	ldi	r17, 0x00	; 0
     b2e:	f8 01       	movw	r30, r16
     b30:	80 81       	ld	r24, Z
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	4f dc       	rcall	.-1890   	; 0x3d4 <checkBit>
     b36:	d8 2f       	mov	r29, r24
     b38:	f8 01       	movw	r30, r16
     b3a:	80 81       	ld	r24, Z
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	4a dc       	rcall	.-1900   	; 0x3d4 <checkBit>
     b40:	dd 0f       	add	r29, r29
     b42:	8c 2b       	or	r24, r28
     b44:	8d 2b       	or	r24, r29
     b46:	88 30       	cpi	r24, 0x08	; 8
     b48:	10 f0       	brcs	.+4      	; 0xb4e <__vector_12+0x76>
     b4a:	80 ff       	sbrs	r24, 0
     b4c:	06 c0       	rjmp	.+12     	; 0xb5a <__vector_12+0x82>
     b4e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <p_timer1Callbacks+0x6>
     b52:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <p_timer1Callbacks+0x7>
     b56:	09 95       	icall
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <__vector_12+0x8c>
     b5a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <p_timer1Callbacks>
     b5e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <p_timer1Callbacks+0x1>
     b62:	09 95       	icall
     b64:	ff 91       	pop	r31
     b66:	ef 91       	pop	r30
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	bf 91       	pop	r27
     b6e:	af 91       	pop	r26
     b70:	9f 91       	pop	r25
     b72:	8f 91       	pop	r24
     b74:	7f 91       	pop	r23
     b76:	6f 91       	pop	r22
     b78:	5f 91       	pop	r21
     b7a:	4f 91       	pop	r20
     b7c:	3f 91       	pop	r19
     b7e:	2f 91       	pop	r18
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	0f 90       	pop	r0
     b86:	0b be       	out	0x3b, r0	; 59
     b88:	0f 90       	pop	r0
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	0f 90       	pop	r0
     b8e:	1f 90       	pop	r1
     b90:	18 95       	reti

00000b92 <__vector_11>:
     b92:	1f 92       	push	r1
     b94:	0f 92       	push	r0
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	0f 92       	push	r0
     b9a:	11 24       	eor	r1, r1
     b9c:	0b b6       	in	r0, 0x3b	; 59
     b9e:	0f 92       	push	r0
     ba0:	2f 93       	push	r18
     ba2:	3f 93       	push	r19
     ba4:	4f 93       	push	r20
     ba6:	5f 93       	push	r21
     ba8:	6f 93       	push	r22
     baa:	7f 93       	push	r23
     bac:	8f 93       	push	r24
     bae:	9f 93       	push	r25
     bb0:	af 93       	push	r26
     bb2:	bf 93       	push	r27
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
     bb8:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer2Callbacks>
     bbc:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer2Callbacks+0x1>
     bc0:	09 95       	icall
     bc2:	ff 91       	pop	r31
     bc4:	ef 91       	pop	r30
     bc6:	bf 91       	pop	r27
     bc8:	af 91       	pop	r26
     bca:	9f 91       	pop	r25
     bcc:	8f 91       	pop	r24
     bce:	7f 91       	pop	r23
     bd0:	6f 91       	pop	r22
     bd2:	5f 91       	pop	r21
     bd4:	4f 91       	pop	r20
     bd6:	3f 91       	pop	r19
     bd8:	2f 91       	pop	r18
     bda:	0f 90       	pop	r0
     bdc:	0b be       	out	0x3b, r0	; 59
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	0f 90       	pop	r0
     be4:	1f 90       	pop	r1
     be6:	18 95       	reti

00000be8 <__vector_9>:
     be8:	1f 92       	push	r1
     bea:	0f 92       	push	r0
     bec:	0f b6       	in	r0, 0x3f	; 63
     bee:	0f 92       	push	r0
     bf0:	11 24       	eor	r1, r1
     bf2:	0b b6       	in	r0, 0x3b	; 59
     bf4:	0f 92       	push	r0
     bf6:	2f 93       	push	r18
     bf8:	3f 93       	push	r19
     bfa:	4f 93       	push	r20
     bfc:	5f 93       	push	r21
     bfe:	6f 93       	push	r22
     c00:	7f 93       	push	r23
     c02:	8f 93       	push	r24
     c04:	9f 93       	push	r25
     c06:	af 93       	push	r26
     c08:	bf 93       	push	r27
     c0a:	ef 93       	push	r30
     c0c:	ff 93       	push	r31
     c0e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     c12:	63 e0       	ldi	r22, 0x03	; 3
     c14:	df db       	rcall	.-2114   	; 0x3d4 <checkBit>
     c16:	81 11       	cpse	r24, r1
     c18:	0b c0       	rjmp	.+22     	; 0xc30 <__vector_9+0x48>
     c1a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     c1e:	83 70       	andi	r24, 0x03	; 3
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	31 f0       	breq	.+12     	; 0xc30 <__vector_9+0x48>
     c24:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <p_timer2Callbacks+0x2>
     c28:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <p_timer2Callbacks+0x3>
     c2c:	09 95       	icall
     c2e:	05 c0       	rjmp	.+10     	; 0xc3a <__vector_9+0x52>
     c30:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer2Callbacks>
     c34:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer2Callbacks+0x1>
     c38:	09 95       	icall
     c3a:	ff 91       	pop	r31
     c3c:	ef 91       	pop	r30
     c3e:	bf 91       	pop	r27
     c40:	af 91       	pop	r26
     c42:	9f 91       	pop	r25
     c44:	8f 91       	pop	r24
     c46:	7f 91       	pop	r23
     c48:	6f 91       	pop	r22
     c4a:	5f 91       	pop	r21
     c4c:	4f 91       	pop	r20
     c4e:	3f 91       	pop	r19
     c50:	2f 91       	pop	r18
     c52:	0f 90       	pop	r0
     c54:	0b be       	out	0x3b, r0	; 59
     c56:	0f 90       	pop	r0
     c58:	0f be       	out	0x3f, r0	; 63
     c5a:	0f 90       	pop	r0
     c5c:	1f 90       	pop	r1
     c5e:	18 95       	reti

00000c60 <__vector_10>:
     c60:	1f 92       	push	r1
     c62:	0f 92       	push	r0
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	0f 92       	push	r0
     c68:	11 24       	eor	r1, r1
     c6a:	0b b6       	in	r0, 0x3b	; 59
     c6c:	0f 92       	push	r0
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	4f 93       	push	r20
     c74:	5f 93       	push	r21
     c76:	6f 93       	push	r22
     c78:	7f 93       	push	r23
     c7a:	8f 93       	push	r24
     c7c:	9f 93       	push	r25
     c7e:	af 93       	push	r26
     c80:	bf 93       	push	r27
     c82:	ef 93       	push	r30
     c84:	ff 93       	push	r31
     c86:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <p_timer2Callbacks+0x4>
     c8a:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <p_timer2Callbacks+0x5>
     c8e:	09 95       	icall
     c90:	ff 91       	pop	r31
     c92:	ef 91       	pop	r30
     c94:	bf 91       	pop	r27
     c96:	af 91       	pop	r26
     c98:	9f 91       	pop	r25
     c9a:	8f 91       	pop	r24
     c9c:	7f 91       	pop	r23
     c9e:	6f 91       	pop	r22
     ca0:	5f 91       	pop	r21
     ca2:	4f 91       	pop	r20
     ca4:	3f 91       	pop	r19
     ca6:	2f 91       	pop	r18
     ca8:	0f 90       	pop	r0
     caa:	0b be       	out	0x3b, r0	; 59
     cac:	0f 90       	pop	r0
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	0f 90       	pop	r0
     cb2:	1f 90       	pop	r1
     cb4:	18 95       	reti

00000cb6 <timer_init>:
     cb6:	ef 92       	push	r14
     cb8:	ff 92       	push	r15
     cba:	0f 93       	push	r16
     cbc:	1f 93       	push	r17
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
     cc6:	29 97       	sbiw	r28, 0x09	; 9
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	4d 83       	std	Y+5, r20	; 0x05
     cd4:	5e 83       	std	Y+6, r21	; 0x06
     cd6:	6f 83       	std	Y+7, r22	; 0x07
     cd8:	78 87       	std	Y+8, r23	; 0x08
     cda:	89 87       	std	Y+9, r24	; 0x09
     cdc:	0e 81       	ldd	r16, Y+6	; 0x06
     cde:	1f 81       	ldd	r17, Y+7	; 0x07
     ce0:	28 85       	ldd	r18, Y+8	; 0x08
     ce2:	39 85       	ldd	r19, Y+9	; 0x09
     ce4:	19 82       	std	Y+1, r1	; 0x01
     ce6:	1a 82       	std	Y+2, r1	; 0x02
     ce8:	1b 82       	std	Y+3, r1	; 0x03
     cea:	1c 82       	std	Y+4, r1	; 0x04
     cec:	41 30       	cpi	r20, 0x01	; 1
     cee:	21 f0       	breq	.+8      	; 0xcf8 <timer_init+0x42>
     cf0:	42 30       	cpi	r20, 0x02	; 2
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <timer_init+0x40>
     cf4:	95 c0       	rjmp	.+298    	; 0xe20 <timer_init+0x16a>
     cf6:	1d c1       	rjmp	.+570    	; 0xf32 <timer_init+0x27c>
     cf8:	09 3f       	cpi	r16, 0xF9	; 249
     cfa:	8f ef       	ldi	r24, 0xFF	; 255
     cfc:	18 07       	cpc	r17, r24
     cfe:	28 07       	cpc	r18, r24
     d00:	31 05       	cpc	r19, r1
     d02:	28 f0       	brcs	.+10     	; 0xd0e <timer_init+0x58>
     d04:	09 83       	std	Y+1, r16	; 0x01
     d06:	1a 83       	std	Y+2, r17	; 0x02
     d08:	2b 83       	std	Y+3, r18	; 0x03
     d0a:	3c 83       	std	Y+4, r19	; 0x04
     d0c:	15 c0       	rjmp	.+42     	; 0xd38 <timer_init+0x82>
     d0e:	ce 01       	movw	r24, r28
     d10:	01 96       	adiw	r24, 0x01	; 1
     d12:	7c 01       	movw	r14, r24
     d14:	4d 81       	ldd	r20, Y+5	; 0x05
     d16:	5e 81       	ldd	r21, Y+6	; 0x06
     d18:	6f 81       	ldd	r22, Y+7	; 0x07
     d1a:	78 85       	ldd	r23, Y+8	; 0x08
     d1c:	89 85       	ldd	r24, Y+9	; 0x09
     d1e:	bc dc       	rcall	.-1672   	; 0x698 <calculateTopRegister>
     d20:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d24:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d28:	64 e0       	ldi	r22, 0x04	; 4
     d2a:	81 e8       	ldi	r24, 0x81	; 129
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	39 db       	rcall	.-2446   	; 0x3a2 <setBit>
     d30:	63 e0       	ldi	r22, 0x03	; 3
     d32:	81 e8       	ldi	r24, 0x81	; 129
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	35 db       	rcall	.-2454   	; 0x3a2 <setBit>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	ab 81       	ldd	r26, Y+3	; 0x03
     d3e:	bc 81       	ldd	r27, Y+4	; 0x04
     d40:	8c 3f       	cpi	r24, 0xFC	; 252
     d42:	2f ef       	ldi	r18, 0xFF	; 255
     d44:	92 07       	cpc	r25, r18
     d46:	a2 07       	cpc	r26, r18
     d48:	b1 05       	cpc	r27, r1
     d4a:	59 f1       	breq	.+86     	; 0xda2 <timer_init+0xec>
     d4c:	60 f4       	brcc	.+24     	; 0xd66 <timer_init+0xb0>
     d4e:	89 3f       	cpi	r24, 0xF9	; 249
     d50:	2f ef       	ldi	r18, 0xFF	; 255
     d52:	92 07       	cpc	r25, r18
     d54:	a2 07       	cpc	r26, r18
     d56:	b1 05       	cpc	r27, r1
     d58:	91 f0       	breq	.+36     	; 0xd7e <timer_init+0xc8>
     d5a:	8a 3f       	cpi	r24, 0xFA	; 250
     d5c:	9f 4f       	sbci	r25, 0xFF	; 255
     d5e:	af 4f       	sbci	r26, 0xFF	; 255
     d60:	b1 05       	cpc	r27, r1
     d62:	b1 f0       	breq	.+44     	; 0xd90 <timer_init+0xda>
     d64:	38 c0       	rjmp	.+112    	; 0xdd6 <timer_init+0x120>
     d66:	8e 3f       	cpi	r24, 0xFE	; 254
     d68:	2f ef       	ldi	r18, 0xFF	; 255
     d6a:	92 07       	cpc	r25, r18
     d6c:	a2 07       	cpc	r26, r18
     d6e:	b1 05       	cpc	r27, r1
     d70:	09 f1       	breq	.+66     	; 0xdb4 <timer_init+0xfe>
     d72:	8f 3f       	cpi	r24, 0xFF	; 255
     d74:	9f 4f       	sbci	r25, 0xFF	; 255
     d76:	af 4f       	sbci	r26, 0xFF	; 255
     d78:	b1 05       	cpc	r27, r1
     d7a:	29 f1       	breq	.+74     	; 0xdc6 <timer_init+0x110>
     d7c:	2c c0       	rjmp	.+88     	; 0xdd6 <timer_init+0x120>
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	a0 e0       	ldi	r26, 0x00	; 0
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	9a 83       	std	Y+2, r25	; 0x02
     d8a:	ab 83       	std	Y+3, r26	; 0x03
     d8c:	bc 83       	std	Y+4, r27	; 0x04
     d8e:	23 c0       	rjmp	.+70     	; 0xdd6 <timer_init+0x120>
     d90:	82 e0       	ldi	r24, 0x02	; 2
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	ab 83       	std	Y+3, r26	; 0x03
     d9e:	bc 83       	std	Y+4, r27	; 0x04
     da0:	1a c0       	rjmp	.+52     	; 0xdd6 <timer_init+0x120>
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	a0 e0       	ldi	r26, 0x00	; 0
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	ab 83       	std	Y+3, r26	; 0x03
     db0:	bc 83       	std	Y+4, r27	; 0x04
     db2:	11 c0       	rjmp	.+34     	; 0xdd6 <timer_init+0x120>
     db4:	84 e0       	ldi	r24, 0x04	; 4
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 e0       	ldi	r26, 0x00	; 0
     dba:	b0 e0       	ldi	r27, 0x00	; 0
     dbc:	89 83       	std	Y+1, r24	; 0x01
     dbe:	9a 83       	std	Y+2, r25	; 0x02
     dc0:	ab 83       	std	Y+3, r26	; 0x03
     dc2:	bc 83       	std	Y+4, r27	; 0x04
     dc4:	08 c0       	rjmp	.+16     	; 0xdd6 <timer_init+0x120>
     dc6:	85 e0       	ldi	r24, 0x05	; 5
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a0 e0       	ldi	r26, 0x00	; 0
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	ab 83       	std	Y+3, r26	; 0x03
     dd4:	bc 83       	std	Y+4, r27	; 0x04
     dd6:	49 81       	ldd	r20, Y+1	; 0x01
     dd8:	5a 81       	ldd	r21, Y+2	; 0x02
     dda:	6b 81       	ldd	r22, Y+3	; 0x03
     ddc:	7c 81       	ldd	r23, Y+4	; 0x04
     dde:	76 95       	lsr	r23
     de0:	67 95       	ror	r22
     de2:	57 95       	ror	r21
     de4:	47 95       	ror	r20
     de6:	76 95       	lsr	r23
     de8:	67 95       	ror	r22
     dea:	57 95       	ror	r21
     dec:	47 95       	ror	r20
     dee:	41 70       	andi	r20, 0x01	; 1
     df0:	62 e0       	ldi	r22, 0x02	; 2
     df2:	86 e2       	ldi	r24, 0x26	; 38
     df4:	91 e0       	ldi	r25, 0x01	; 1
     df6:	bd da       	rcall	.-2694   	; 0x372 <updateBit>
     df8:	49 81       	ldd	r20, Y+1	; 0x01
     dfa:	5a 81       	ldd	r21, Y+2	; 0x02
     dfc:	6b 81       	ldd	r22, Y+3	; 0x03
     dfe:	7c 81       	ldd	r23, Y+4	; 0x04
     e00:	76 95       	lsr	r23
     e02:	67 95       	ror	r22
     e04:	57 95       	ror	r21
     e06:	47 95       	ror	r20
     e08:	41 70       	andi	r20, 0x01	; 1
     e0a:	61 e0       	ldi	r22, 0x01	; 1
     e0c:	86 e2       	ldi	r24, 0x26	; 38
     e0e:	91 e0       	ldi	r25, 0x01	; 1
     e10:	b0 da       	rcall	.-2720   	; 0x372 <updateBit>
     e12:	49 81       	ldd	r20, Y+1	; 0x01
     e14:	41 70       	andi	r20, 0x01	; 1
     e16:	60 e0       	ldi	r22, 0x00	; 0
     e18:	86 e2       	ldi	r24, 0x26	; 38
     e1a:	91 e0       	ldi	r25, 0x01	; 1
     e1c:	aa da       	rcall	.-2732   	; 0x372 <updateBit>
     e1e:	89 c0       	rjmp	.+274    	; 0xf32 <timer_init+0x27c>
     e20:	09 3f       	cpi	r16, 0xF9	; 249
     e22:	8f ef       	ldi	r24, 0xFF	; 255
     e24:	18 07       	cpc	r17, r24
     e26:	28 07       	cpc	r18, r24
     e28:	31 05       	cpc	r19, r1
     e2a:	28 f0       	brcs	.+10     	; 0xe36 <timer_init+0x180>
     e2c:	09 83       	std	Y+1, r16	; 0x01
     e2e:	1a 83       	std	Y+2, r17	; 0x02
     e30:	2b 83       	std	Y+3, r18	; 0x03
     e32:	3c 83       	std	Y+4, r19	; 0x04
     e34:	0f c0       	rjmp	.+30     	; 0xe54 <timer_init+0x19e>
     e36:	ce 01       	movw	r24, r28
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	7c 01       	movw	r14, r24
     e3c:	4d 81       	ldd	r20, Y+5	; 0x05
     e3e:	5e 81       	ldd	r21, Y+6	; 0x06
     e40:	6f 81       	ldd	r22, Y+7	; 0x07
     e42:	78 85       	ldd	r23, Y+8	; 0x08
     e44:	89 85       	ldd	r24, Y+9	; 0x09
     e46:	28 dc       	rcall	.-1968   	; 0x698 <calculateTopRegister>
     e48:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	80 eb       	ldi	r24, 0xB0	; 176
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	a7 da       	rcall	.-2738   	; 0x3a2 <setBit>
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	9a 81       	ldd	r25, Y+2	; 0x02
     e58:	ab 81       	ldd	r26, Y+3	; 0x03
     e5a:	bc 81       	ldd	r27, Y+4	; 0x04
     e5c:	fc 01       	movw	r30, r24
     e5e:	37 96       	adiw	r30, 0x07	; 7
     e60:	e7 30       	cpi	r30, 0x07	; 7
     e62:	f1 05       	cpc	r31, r1
     e64:	08 f0       	brcs	.+2      	; 0xe68 <timer_init+0x1b2>
     e66:	41 c0       	rjmp	.+130    	; 0xeea <timer_init+0x234>
     e68:	ea 5b       	subi	r30, 0xBA	; 186
     e6a:	ff 4f       	sbci	r31, 0xFF	; 255
     e6c:	a9 c3       	rjmp	.+1874   	; 0x15c0 <__tablejump2__>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	89 83       	std	Y+1, r24	; 0x01
     e78:	9a 83       	std	Y+2, r25	; 0x02
     e7a:	ab 83       	std	Y+3, r26	; 0x03
     e7c:	bc 83       	std	Y+4, r27	; 0x04
     e7e:	35 c0       	rjmp	.+106    	; 0xeea <timer_init+0x234>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	ab 83       	std	Y+3, r26	; 0x03
     e8e:	bc 83       	std	Y+4, r27	; 0x04
     e90:	2c c0       	rjmp	.+88     	; 0xeea <timer_init+0x234>
     e92:	83 e0       	ldi	r24, 0x03	; 3
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	ab 83       	std	Y+3, r26	; 0x03
     ea0:	bc 83       	std	Y+4, r27	; 0x04
     ea2:	23 c0       	rjmp	.+70     	; 0xeea <timer_init+0x234>
     ea4:	84 e0       	ldi	r24, 0x04	; 4
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	ab 83       	std	Y+3, r26	; 0x03
     eb2:	bc 83       	std	Y+4, r27	; 0x04
     eb4:	1a c0       	rjmp	.+52     	; 0xeea <timer_init+0x234>
     eb6:	85 e0       	ldi	r24, 0x05	; 5
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	ab 83       	std	Y+3, r26	; 0x03
     ec4:	bc 83       	std	Y+4, r27	; 0x04
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <timer_init+0x234>
     ec8:	86 e0       	ldi	r24, 0x06	; 6
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	ab 83       	std	Y+3, r26	; 0x03
     ed6:	bc 83       	std	Y+4, r27	; 0x04
     ed8:	08 c0       	rjmp	.+16     	; 0xeea <timer_init+0x234>
     eda:	87 e0       	ldi	r24, 0x07	; 7
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a0 e0       	ldi	r26, 0x00	; 0
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	ab 83       	std	Y+3, r26	; 0x03
     ee8:	bc 83       	std	Y+4, r27	; 0x04
     eea:	49 81       	ldd	r20, Y+1	; 0x01
     eec:	5a 81       	ldd	r21, Y+2	; 0x02
     eee:	6b 81       	ldd	r22, Y+3	; 0x03
     ef0:	7c 81       	ldd	r23, Y+4	; 0x04
     ef2:	76 95       	lsr	r23
     ef4:	67 95       	ror	r22
     ef6:	57 95       	ror	r21
     ef8:	47 95       	ror	r20
     efa:	76 95       	lsr	r23
     efc:	67 95       	ror	r22
     efe:	57 95       	ror	r21
     f00:	47 95       	ror	r20
     f02:	41 70       	andi	r20, 0x01	; 1
     f04:	62 e0       	ldi	r22, 0x02	; 2
     f06:	87 e2       	ldi	r24, 0x27	; 39
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	33 da       	rcall	.-2970   	; 0x372 <updateBit>
     f0c:	49 81       	ldd	r20, Y+1	; 0x01
     f0e:	5a 81       	ldd	r21, Y+2	; 0x02
     f10:	6b 81       	ldd	r22, Y+3	; 0x03
     f12:	7c 81       	ldd	r23, Y+4	; 0x04
     f14:	76 95       	lsr	r23
     f16:	67 95       	ror	r22
     f18:	57 95       	ror	r21
     f1a:	47 95       	ror	r20
     f1c:	41 70       	andi	r20, 0x01	; 1
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	87 e2       	ldi	r24, 0x27	; 39
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	26 da       	rcall	.-2996   	; 0x372 <updateBit>
     f26:	49 81       	ldd	r20, Y+1	; 0x01
     f28:	41 70       	andi	r20, 0x01	; 1
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	87 e2       	ldi	r24, 0x27	; 39
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	20 da       	rcall	.-3008   	; 0x372 <updateBit>
     f32:	29 96       	adiw	r28, 0x09	; 9
     f34:	0f b6       	in	r0, 0x3f	; 63
     f36:	f8 94       	cli
     f38:	de bf       	out	0x3e, r29	; 62
     f3a:	0f be       	out	0x3f, r0	; 63
     f3c:	cd bf       	out	0x3d, r28	; 61
     f3e:	df 91       	pop	r29
     f40:	cf 91       	pop	r28
     f42:	1f 91       	pop	r17
     f44:	0f 91       	pop	r16
     f46:	ff 90       	pop	r15
     f48:	ef 90       	pop	r14
     f4a:	08 95       	ret

00000f4c <timer_start>:
}

void timer_start(timer_struct_t s_timer)
{
     f4c:	cf 93       	push	r28
     f4e:	df 93       	push	r29
     f50:	00 d0       	rcall	.+0      	; 0xf52 <timer_start+0x6>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <timer_start+0x8>
     f54:	1f 92       	push	r1
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
	switch(s_timer.peripheral)
     f5a:	41 30       	cpi	r20, 0x01	; 1
     f5c:	19 f0       	breq	.+6      	; 0xf64 <timer_start+0x18>
     f5e:	42 30       	cpi	r20, 0x02	; 2
     f60:	d1 f0       	breq	.+52     	; 0xf96 <timer_start+0x4a>
     f62:	31 c0       	rjmp	.+98     	; 0xfc6 <timer_start+0x7a>
			updateBit(&TCCR0B, CS00, (u8_timer0ClockSource & 1));
		#endif
			break;
		case TIMER1:
		#ifdef USING_TIMER1
			updateBit(&TCCR1B, CS12, (u8_timer1ClockSource >> 2) & 1);
     f64:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <u8_timer1ClockSource>
     f68:	42 fb       	bst	r20, 2
     f6a:	44 27       	eor	r20, r20
     f6c:	40 f9       	bld	r20, 0
     f6e:	62 e0       	ldi	r22, 0x02	; 2
     f70:	81 e8       	ldi	r24, 0x81	; 129
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	fe d9       	rcall	.-3076   	; 0x372 <updateBit>
			updateBit(&TCCR1B, CS11, (u8_timer1ClockSource >> 1) & 1);
     f76:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <u8_timer1ClockSource>
     f7a:	46 95       	lsr	r20
     f7c:	41 70       	andi	r20, 0x01	; 1
     f7e:	61 e0       	ldi	r22, 0x01	; 1
     f80:	81 e8       	ldi	r24, 0x81	; 129
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	f6 d9       	rcall	.-3092   	; 0x372 <updateBit>
			updateBit(&TCCR1B, CS10, (u8_timer1ClockSource & 1));
     f86:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <u8_timer1ClockSource>
     f8a:	41 70       	andi	r20, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	81 e8       	ldi	r24, 0x81	; 129
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	ef d9       	rcall	.-3106   	; 0x372 <updateBit>
		#endif
			break;
     f94:	18 c0       	rjmp	.+48     	; 0xfc6 <timer_start+0x7a>
		case TIMER2:
		#ifdef USING_TIMER2
			updateBit(&TCCR2B, CS22, (u8_timer2ClockSource >> 2) & 1);
     f96:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <u8_timer2ClockSource>
     f9a:	42 fb       	bst	r20, 2
     f9c:	44 27       	eor	r20, r20
     f9e:	40 f9       	bld	r20, 0
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	81 eb       	ldi	r24, 0xB1	; 177
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	e5 d9       	rcall	.-3126   	; 0x372 <updateBit>
			updateBit(&TCCR2B, CS21, (u8_timer2ClockSource >> 1) & 1);
     fa8:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <u8_timer2ClockSource>
     fac:	46 95       	lsr	r20
     fae:	41 70       	andi	r20, 0x01	; 1
     fb0:	61 e0       	ldi	r22, 0x01	; 1
     fb2:	81 eb       	ldi	r24, 0xB1	; 177
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	dd d9       	rcall	.-3142   	; 0x372 <updateBit>
			updateBit(&TCCR2B, CS20, (u8_timer2ClockSource & 1));
     fb8:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <u8_timer2ClockSource>
     fbc:	41 70       	andi	r20, 0x01	; 1
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	81 eb       	ldi	r24, 0xB1	; 177
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	d6 d9       	rcall	.-3156   	; 0x372 <updateBit>
			updateBit(&TCCR3B, CS31, (u8_timer3ClockSource >> 1) & 1);
			updateBit(&TCCR3B, CS30, (u8_timer3ClockSource & 1));
		#endif
			break;
	}
}
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	0f 90       	pop	r0
     fce:	0f 90       	pop	r0
     fd0:	df 91       	pop	r29
     fd2:	cf 91       	pop	r28
     fd4:	08 95       	ret

00000fd6 <timer_stop>:

void timer_stop(timer_struct_t s_timer)
{
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	00 d0       	rcall	.+0      	; 0xfdc <timer_stop+0x6>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <timer_stop+0x8>
     fde:	1f 92       	push	r1
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
     fe4:	49 83       	std	Y+1, r20	; 0x01
     fe6:	5a 83       	std	Y+2, r21	; 0x02
     fe8:	6b 83       	std	Y+3, r22	; 0x03
     fea:	7c 83       	std	Y+4, r23	; 0x04
     fec:	8d 83       	std	Y+5, r24	; 0x05
	switch(s_timer.peripheral)
     fee:	41 30       	cpi	r20, 0x01	; 1
     ff0:	19 f0       	breq	.+6      	; 0xff8 <timer_stop+0x22>
     ff2:	42 30       	cpi	r20, 0x02	; 2
     ff4:	59 f0       	breq	.+22     	; 0x100c <timer_stop+0x36>
     ff6:	13 c0       	rjmp	.+38     	; 0x101e <timer_stop+0x48>
			TCCR0B = TCCR0B & ~(0b00000111);
		#endif
			break;
		case TIMER1:
		#ifdef USING_TIMER1
			u8_timer1ClockSource = TCCR1B & (0b00000111);
     ff8:	e1 e8       	ldi	r30, 0x81	; 129
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	80 81       	ld	r24, Z
     ffe:	87 70       	andi	r24, 0x07	; 7
    1000:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <u8_timer1ClockSource>
			TCCR1B = TCCR1B & ~(0b00000111);
    1004:	80 81       	ld	r24, Z
    1006:	88 7f       	andi	r24, 0xF8	; 248
    1008:	80 83       	st	Z, r24
		#endif
			break;
    100a:	09 c0       	rjmp	.+18     	; 0x101e <timer_stop+0x48>
		case TIMER2:
		#ifdef USING_TIMER2
			u8_timer2ClockSource = TCCR2B & (0b00000111);
    100c:	e1 eb       	ldi	r30, 0xB1	; 177
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	80 81       	ld	r24, Z
    1012:	87 70       	andi	r24, 0x07	; 7
    1014:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <u8_timer2ClockSource>
			TCCR2B = TCCR2B & ~(0b00000111);
    1018:	80 81       	ld	r24, Z
    101a:	88 7f       	andi	r24, 0xF8	; 248
    101c:	80 83       	st	Z, r24
			u8_timer3ClockSource = TCCR3B & (0b00000111);
			TCCR3B = TCCR3B & ~(0b00000111);
		#endif
			break;
	}
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <__vector_20>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef UART0_INTERRUPT_MODE
ISR(USART0_RX_vect)
{
    102e:	1f 92       	push	r1
    1030:	0f 92       	push	r0
    1032:	0f b6       	in	r0, 0x3f	; 63
    1034:	0f 92       	push	r0
    1036:	11 24       	eor	r1, r1
    1038:	0b b6       	in	r0, 0x3b	; 59
    103a:	0f 92       	push	r0
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31
	if (checkBit(UCSR0B, UCSZ02) == SET)
    1054:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1058:	62 e0       	ldi	r22, 0x02	; 2
    105a:	bc d9       	rcall	.-3208   	; 0x3d4 <checkBit>
    105c:	81 30       	cpi	r24, 0x01	; 1
    105e:	99 f4       	brne	.+38     	; 0x1086 <__vector_20+0x58>
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = ((UCSR0B & (1 << RXB80)) << 8) | UDR0;
    1060:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <u8_rx0LastReceivedIndex>
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    106a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    106e:	82 70       	andi	r24, 0x02	; 2
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	98 2f       	mov	r25, r24
    1074:	88 27       	eor	r24, r24
    1076:	82 2b       	or	r24, r18
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	ef 5c       	subi	r30, 0xCF	; 207
    107e:	fe 4f       	sbci	r31, 0xFE	; 254
    1080:	91 83       	std	Z+1, r25	; 0x01
    1082:	80 83       	st	Z, r24
    1084:	0c c0       	rjmp	.+24     	; 0x109e <__vector_20+0x70>
	else
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = UDR0;
    1086:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <u8_rx0LastReceivedIndex>
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	ee 0f       	add	r30, r30
    1094:	ff 1f       	adc	r31, r31
    1096:	ef 5c       	subi	r30, 0xCF	; 207
    1098:	fe 4f       	sbci	r31, 0xFE	; 254
    109a:	91 83       	std	Z+1, r25	; 0x01
    109c:	80 83       	st	Z, r24
	if (u8_rx0LastReceivedIndex < UART_RX0_BUFFER_MAX_SIZE - 1)
    109e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <u8_rx0LastReceivedIndex>
    10a2:	89 30       	cpi	r24, 0x09	; 9
    10a4:	30 f4       	brcc	.+12     	; 0x10b2 <__vector_20+0x84>
		u8_rx0LastReceivedIndex++;
    10a6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <u8_rx0LastReceivedIndex>
    10aa:	8f 5f       	subi	r24, 0xFF	; 255
    10ac:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <u8_rx0LastReceivedIndex>
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <__vector_20+0x88>
	else
		u8_rx0LastReceivedIndex = 0;
    10b2:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <u8_rx0LastReceivedIndex>
	b_rx0Available = TRUE;
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <b_rx0Available>
}
    10bc:	ff 91       	pop	r31
    10be:	ef 91       	pop	r30
    10c0:	bf 91       	pop	r27
    10c2:	af 91       	pop	r26
    10c4:	9f 91       	pop	r25
    10c6:	8f 91       	pop	r24
    10c8:	7f 91       	pop	r23
    10ca:	6f 91       	pop	r22
    10cc:	5f 91       	pop	r21
    10ce:	4f 91       	pop	r20
    10d0:	3f 91       	pop	r19
    10d2:	2f 91       	pop	r18
    10d4:	0f 90       	pop	r0
    10d6:	0b be       	out	0x3b, r0	; 59
    10d8:	0f 90       	pop	r0
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	0f 90       	pop	r0
    10de:	1f 90       	pop	r1
    10e0:	18 95       	reti

000010e2 <__vector_21>:

ISR(USART0_UDRE_vect)
{
    10e2:	1f 92       	push	r1
    10e4:	0f 92       	push	r0
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	0f 92       	push	r0
    10ea:	11 24       	eor	r1, r1
    10ec:	0b b6       	in	r0, 0x3b	; 59
    10ee:	0f 92       	push	r0
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	if (u8_tx0LastTransmittedIndex != u8_tx0LastRequestedIndex)
    1108:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <u8_tx0LastTransmittedIndex>
    110c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <u8_tx0LastRequestedIndex>
    1110:	98 17       	cp	r25, r24
    1112:	69 f1       	breq	.+90     	; 0x116e <__vector_21+0x8c>
	{
		if (checkBit(UCSR0B, UCSZ02) == SET)
    1114:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1118:	62 e0       	ldi	r22, 0x02	; 2
    111a:	5c d9       	rcall	.-3400   	; 0x3d4 <checkBit>
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	79 f4       	brne	.+30     	; 0x113e <__vector_21+0x5c>
			UCSR0B |= (u8) (((au16_tx0Buffer[u8_tx0LastTransmittedIndex] >> 8) & 1) << TXB80);
    1120:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <u8_tx0LastTransmittedIndex>
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	ee 0f       	add	r30, r30
    1128:	ff 1f       	adc	r31, r31
    112a:	e9 5b       	subi	r30, 0xB9	; 185
    112c:	fe 4f       	sbci	r31, 0xFE	; 254
    112e:	80 81       	ld	r24, Z
    1130:	91 81       	ldd	r25, Z+1	; 0x01
    1132:	e1 ec       	ldi	r30, 0xC1	; 193
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	91 70       	andi	r25, 0x01	; 1
    113a:	89 2b       	or	r24, r25
    113c:	80 83       	st	Z, r24
		UDR0 = (u8) au16_tx0Buffer[u8_tx0LastTransmittedIndex];
    113e:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <u8_tx0LastTransmittedIndex>
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	ee 0f       	add	r30, r30
    1146:	ff 1f       	adc	r31, r31
    1148:	e9 5b       	subi	r30, 0xB9	; 185
    114a:	fe 4f       	sbci	r31, 0xFE	; 254
    114c:	80 81       	ld	r24, Z
    114e:	91 81       	ldd	r25, Z+1	; 0x01
    1150:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1154:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <u8_tx0LastTransmittedIndex>
    1158:	89 30       	cpi	r24, 0x09	; 9
    115a:	30 f4       	brcc	.+12     	; 0x1168 <__vector_21+0x86>
			u8_tx0LastTransmittedIndex++;
    115c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <u8_tx0LastTransmittedIndex>
    1160:	8f 5f       	subi	r24, 0xFF	; 255
    1162:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <u8_tx0LastTransmittedIndex>
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <__vector_21+0x94>
		else
			u8_tx0LastTransmittedIndex = 0;
    1168:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <u8_tx0LastTransmittedIndex>
    116c:	04 c0       	rjmp	.+8      	; 0x1176 <__vector_21+0x94>
	}
	else
		clearBit(&UCSR0B, UDRIE0);
    116e:	65 e0       	ldi	r22, 0x05	; 5
    1170:	81 ec       	ldi	r24, 0xC1	; 193
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	22 d9       	rcall	.-3516   	; 0x3ba <clearBit>
}
    1176:	ff 91       	pop	r31
    1178:	ef 91       	pop	r30
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	0f 90       	pop	r0
    1190:	0b be       	out	0x3b, r0	; 59
    1192:	0f 90       	pop	r0
    1194:	0f be       	out	0x3f, r0	; 63
    1196:	0f 90       	pop	r0
    1198:	1f 90       	pop	r1
    119a:	18 95       	reti

0000119c <__vector_22>:

ISR(USART0_TX_vect)
{
    119c:	1f 92       	push	r1
    119e:	0f 92       	push	r0
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	0f 92       	push	r0
    11a4:	11 24       	eor	r1, r1
    11a6:	0b b6       	in	r0, 0x3b	; 59
    11a8:	0f 92       	push	r0
    11aa:	8f 93       	push	r24
    11ac:	9f 93       	push	r25
    11ae:	ef 93       	push	r30
    11b0:	ff 93       	push	r31
    11b2:	80 e0       	ldi	r24, 0x00	; 0
    11b4:	90 e0       	ldi	r25, 0x00	; 0
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
		au16_tx0Buffer[i] = 0;
    11b6:	fc 01       	movw	r30, r24
    11b8:	ee 0f       	add	r30, r30
    11ba:	ff 1f       	adc	r31, r31
    11bc:	e9 5b       	subi	r30, 0xB9	; 185
    11be:	fe 4f       	sbci	r31, 0xFE	; 254
    11c0:	11 82       	std	Z+1, r1	; 0x01
    11c2:	10 82       	st	Z, r1
    11c4:	01 96       	adiw	r24, 0x01	; 1
}

ISR(USART0_TX_vect)
{
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
    11c6:	8a 30       	cpi	r24, 0x0A	; 10
    11c8:	91 05       	cpc	r25, r1
    11ca:	a9 f7       	brne	.-22     	; 0x11b6 <__vector_22+0x1a>
		au16_tx0Buffer[i] = 0;
	u8_tx0LastTransmittedIndex = 0;
    11cc:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <u8_tx0LastTransmittedIndex>
	u8_tx0LastRequestedIndex = 0;
    11d0:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <u8_tx0LastRequestedIndex>
}
    11d4:	ff 91       	pop	r31
    11d6:	ef 91       	pop	r30
    11d8:	9f 91       	pop	r25
    11da:	8f 91       	pop	r24
    11dc:	0f 90       	pop	r0
    11de:	0b be       	out	0x3b, r0	; 59
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63
    11e4:	0f 90       	pop	r0
    11e6:	1f 90       	pop	r1
    11e8:	18 95       	reti

000011ea <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    11ea:	1f 92       	push	r1
    11ec:	0f 92       	push	r0
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	0f 92       	push	r0
    11f2:	11 24       	eor	r1, r1
    11f4:	0b b6       	in	r0, 0x3b	; 59
    11f6:	0f 92       	push	r0
    11f8:	2f 93       	push	r18
    11fa:	3f 93       	push	r19
    11fc:	4f 93       	push	r20
    11fe:	5f 93       	push	r21
    1200:	6f 93       	push	r22
    1202:	7f 93       	push	r23
    1204:	8f 93       	push	r24
    1206:	9f 93       	push	r25
    1208:	af 93       	push	r26
    120a:	bf 93       	push	r27
    120c:	ef 93       	push	r30
    120e:	ff 93       	push	r31
	p_wdgCallback();
    1210:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <p_wdgCallback>
    1214:	f0 91 5c 01 	lds	r31, 0x015C	; 0x80015c <p_wdgCallback+0x1>
    1218:	09 95       	icall
}
    121a:	ff 91       	pop	r31
    121c:	ef 91       	pop	r30
    121e:	bf 91       	pop	r27
    1220:	af 91       	pop	r26
    1222:	9f 91       	pop	r25
    1224:	8f 91       	pop	r24
    1226:	7f 91       	pop	r23
    1228:	6f 91       	pop	r22
    122a:	5f 91       	pop	r21
    122c:	4f 91       	pop	r20
    122e:	3f 91       	pop	r19
    1230:	2f 91       	pop	r18
    1232:	0f 90       	pop	r0
    1234:	0b be       	out	0x3b, r0	; 59
    1236:	0f 90       	pop	r0
    1238:	0f be       	out	0x3f, r0	; 63
    123a:	0f 90       	pop	r0
    123c:	1f 90       	pop	r1
    123e:	18 95       	reti

00001240 <motor_init>:
gpio_struct_t motorDirectionB;
timer_struct_t motorTimer;
pwm_struct_t motorPWM;

void motor_init(){
	motorEnable.direction = OUTPUT;
    1240:	e1 e6       	ldi	r30, 0x61	; 97
    1242:	f1 e0       	ldi	r31, 0x01	; 1
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	82 83       	std	Z+2, r24	; 0x02
	motorEnable.port = PD;
    1248:	93 e0       	ldi	r25, 0x03	; 3
    124a:	90 83       	st	Z, r25
	motorEnable.number = 2;
    124c:	22 e0       	ldi	r18, 0x02	; 2
    124e:	21 83       	std	Z+1, r18	; 0x01
	motorEnable.pullUp = NO_PULL;
    1250:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionA.direction = OUTPUT;
    1252:	ed e5       	ldi	r30, 0x5D	; 93
    1254:	f1 e0       	ldi	r31, 0x01	; 1
    1256:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionA.port = PD;
    1258:	90 83       	st	Z, r25
	motorDirectionA.number = 3;
    125a:	91 83       	std	Z+1, r25	; 0x01
	motorDirectionA.pullUp = NO_PULL;
    125c:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionB.direction = OUTPUT;
    125e:	e5 e6       	ldi	r30, 0x65	; 101
    1260:	f1 e0       	ldi	r31, 0x01	; 1
    1262:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionB.port = PD;
    1264:	90 83       	st	Z, r25
	motorDirectionB.number = 6;
    1266:	96 e0       	ldi	r25, 0x06	; 6
    1268:	91 83       	std	Z+1, r25	; 0x01
	motorDirectionB.pullUp = NO_PULL;
    126a:	13 82       	std	Z+3, r1	; 0x03
	
	motorTimer.frequency = 20000;
    126c:	e9 e6       	ldi	r30, 0x69	; 105
    126e:	f1 e0       	ldi	r31, 0x01	; 1
    1270:	40 e2       	ldi	r20, 0x20	; 32
    1272:	5e e4       	ldi	r21, 0x4E	; 78
    1274:	60 e0       	ldi	r22, 0x00	; 0
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	41 83       	std	Z+1, r20	; 0x01
    127a:	52 83       	std	Z+2, r21	; 0x02
    127c:	63 83       	std	Z+3, r22	; 0x03
    127e:	74 83       	std	Z+4, r23	; 0x04
	motorTimer.peripheral = TIMER1;
    1280:	80 83       	st	Z, r24
	
	motorPWM.base = motorTimer;
    1282:	95 e0       	ldi	r25, 0x05	; 5
    1284:	ae e6       	ldi	r26, 0x6E	; 110
    1286:	b1 e0       	ldi	r27, 0x01	; 1
    1288:	01 90       	ld	r0, Z+
    128a:	0d 92       	st	X+, r0
    128c:	9a 95       	dec	r25
    128e:	e1 f7       	brne	.-8      	; 0x1288 <motor_init+0x48>
	motorPWM.signalType = DUTY_CYCLE_VARIABLE;
    1290:	ee e6       	ldi	r30, 0x6E	; 110
    1292:	f1 e0       	ldi	r31, 0x01	; 1
    1294:	15 82       	std	Z+5, r1	; 0x05
	motorPWM.mode = FAST_PWM;
    1296:	16 82       	std	Z+6, r1	; 0x06
	motorPWM.channelA.enabled = TRUE;
    1298:	87 83       	std	Z+7, r24	; 0x07
	motorPWM.channelA.invertedOutput = FALSE;
    129a:	10 86       	std	Z+8, r1	; 0x08
	motorPWM.channelB.enabled = TRUE;
    129c:	81 87       	std	Z+9, r24	; 0x09
	motorPWM.channelB.invertedOutput = FALSE;
    129e:	12 86       	std	Z+10, r1	; 0x0a
	
	gpio_init(motorEnable);
    12a0:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <motorEnable>
    12a4:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <motorEnable+0x1>
    12a8:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <motorEnable+0x2>
    12ac:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <motorEnable+0x3>
    12b0:	0e 94 4e 01 	call	0x29c	; 0x29c <gpio_init>
	gpio_init(motorDirectionA);
    12b4:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <motorDirectionA>
    12b8:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <motorDirectionA+0x1>
    12bc:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <motorDirectionA+0x2>
    12c0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <motorDirectionA+0x3>
    12c4:	0e 94 4e 01 	call	0x29c	; 0x29c <gpio_init>
	gpio_init(motorDirectionB);
    12c8:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <motorDirectionB>
    12cc:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <motorDirectionB+0x1>
    12d0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <motorDirectionB+0x2>
    12d4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <motorDirectionB+0x3>
    12d8:	0e 94 4e 01 	call	0x29c	; 0x29c <gpio_init>
	timer_init(motorTimer);
    12dc:	40 91 69 01 	lds	r20, 0x0169	; 0x800169 <motorTimer>
    12e0:	50 91 6a 01 	lds	r21, 0x016A	; 0x80016a <motorTimer+0x1>
    12e4:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorTimer+0x2>
    12e8:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorTimer+0x3>
    12ec:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorTimer+0x4>
    12f0:	e2 dc       	rcall	.-1596   	; 0xcb6 <timer_init>
	pwm_init(&motorPWM);
    12f2:	8e e6       	ldi	r24, 0x6E	; 110
    12f4:	91 e0       	ldi	r25, 0x01	; 1
    12f6:	82 c8       	rjmp	.-3836   	; 0x3fc <pwm_init>
    12f8:	08 95       	ret

000012fa <motor_start>:
}

void motor_start(){
    12fa:	af 92       	push	r10
    12fc:	cf 92       	push	r12
    12fe:	ef 92       	push	r14
    1300:	ff 92       	push	r15
    1302:	0f 93       	push	r16
    1304:	1f 93       	push	r17
    1306:	cf 93       	push	r28
	gpio_out_reset(motorDirectionA);
    1308:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <motorDirectionA>
    130c:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <motorDirectionA+0x1>
    1310:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <motorDirectionA+0x2>
    1314:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <motorDirectionA+0x3>
    1318:	10 d8       	rcall	.-4064   	; 0x33a <gpio_out_reset>
	gpio_out_reset(motorDirectionB);
    131a:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <motorDirectionB>
    131e:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <motorDirectionB+0x1>
    1322:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <motorDirectionB+0x2>
    1326:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <motorDirectionB+0x3>
    132a:	07 d8       	rcall	.-4082   	; 0x33a <gpio_out_reset>
	gpio_out_set(motorEnable);
    132c:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <motorEnable>
    1330:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <motorEnable+0x1>
    1334:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <motorEnable+0x2>
    1338:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <motorEnable+0x3>
    133c:	0e 94 81 01 	call	0x302	; 0x302 <gpio_out_set>
	
	pwm_start(motorPWM);
    1340:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <motorPWM>
    1344:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <motorPWM+0x1>
    1348:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <motorPWM+0x2>
    134c:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <motorPWM+0x3>
    1350:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <motorPWM+0x4>
    1354:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <motorPWM+0x5>
    1358:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <motorPWM+0x6>
    135c:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <motorPWM+0x7>
    1360:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <motorPWM+0x8>
    1364:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <motorPWM+0x9>
    1368:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <motorPWM+0xa>
    136c:	b9 d8       	rcall	.-3726   	; 0x4e0 <pwm_start>
	for(u8 i = 0; i <= 30; i += 10){
    136e:	c0 e0       	ldi	r28, 0x00	; 0
		pwm_setDutyCycle(motorPWM, CHANNEL_A, i);
    1370:	ac 2e       	mov	r10, r28
    1372:	c1 2c       	mov	r12, r1
    1374:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <motorPWM>
    1378:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <motorPWM+0x1>
    137c:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <motorPWM+0x2>
    1380:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <motorPWM+0x3>
    1384:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <motorPWM+0x4>
    1388:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <motorPWM+0x5>
    138c:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <motorPWM+0x6>
    1390:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <motorPWM+0x7>
    1394:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <motorPWM+0x8>
    1398:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <motorPWM+0x9>
    139c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <motorPWM+0xa>
    13a0:	e1 d8       	rcall	.-3646   	; 0x564 <pwm_setDutyCycle>
		pwm_setDutyCycle(motorPWM, CHANNEL_B, i);
    13a2:	cc 24       	eor	r12, r12
    13a4:	c3 94       	inc	r12
    13a6:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <motorPWM>
    13aa:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <motorPWM+0x1>
    13ae:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <motorPWM+0x2>
    13b2:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <motorPWM+0x3>
    13b6:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <motorPWM+0x4>
    13ba:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <motorPWM+0x5>
    13be:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <motorPWM+0x6>
    13c2:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <motorPWM+0x7>
    13c6:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <motorPWM+0x8>
    13ca:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <motorPWM+0x9>
    13ce:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <motorPWM+0xa>
    13d2:	c8 d8       	rcall	.-3696   	; 0x564 <pwm_setDutyCycle>
	gpio_out_reset(motorDirectionA);
	gpio_out_reset(motorDirectionB);
	gpio_out_set(motorEnable);
	
	pwm_start(motorPWM);
	for(u8 i = 0; i <= 30; i += 10){
    13d4:	c6 5f       	subi	r28, 0xF6	; 246
    13d6:	c8 32       	cpi	r28, 0x28	; 40
    13d8:	59 f6       	brne	.-106    	; 0x1370 <motor_start+0x76>
		pwm_setDutyCycle(motorPWM, CHANNEL_A, i);
		pwm_setDutyCycle(motorPWM, CHANNEL_B, i);
	}
	
}
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	cf 90       	pop	r12
    13e6:	af 90       	pop	r10
    13e8:	08 95       	ret

000013ea <motor_stop>:

void motor_stop(){
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
	pwm_stop(motorPWM);
    13f2:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <motorPWM>
    13f6:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <motorPWM+0x1>
    13fa:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <motorPWM+0x2>
    13fe:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <motorPWM+0x3>
    1402:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <motorPWM+0x4>
    1406:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <motorPWM+0x5>
    140a:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <motorPWM+0x6>
    140e:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <motorPWM+0x7>
    1412:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <motorPWM+0x8>
    1416:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <motorPWM+0x9>
    141a:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <motorPWM+0xa>
    141e:	81 d8       	rcall	.-3838   	; 0x522 <pwm_stop>
	gpio_out_reset(motorEnable);
    1420:	60 91 61 01 	lds	r22, 0x0161	; 0x800161 <motorEnable>
    1424:	70 91 62 01 	lds	r23, 0x0162	; 0x800162 <motorEnable+0x1>
    1428:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <motorEnable+0x2>
    142c:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <motorEnable+0x3>
    1430:	0e 94 9d 01 	call	0x33a	; 0x33a <gpio_out_reset>
}
    1434:	1f 91       	pop	r17
    1436:	0f 91       	pop	r16
    1438:	ff 90       	pop	r15
    143a:	ef 90       	pop	r14
    143c:	08 95       	ret

0000143e <motor_direction>:

void motor_direction(motorDirection direction){
	switch(direction){
    143e:	81 30       	cpi	r24, 0x01	; 1
    1440:	e1 f0       	breq	.+56     	; 0x147a <motor_direction+0x3c>
    1442:	30 f0       	brcs	.+12     	; 0x1450 <motor_direction+0x12>
    1444:	82 30       	cpi	r24, 0x02	; 2
    1446:	71 f1       	breq	.+92     	; 0x14a4 <motor_direction+0x66>
    1448:	83 30       	cpi	r24, 0x03	; 3
    144a:	09 f4       	brne	.+2      	; 0x144e <motor_direction+0x10>
    144c:	40 c0       	rjmp	.+128    	; 0x14ce <motor_direction+0x90>
    144e:	08 95       	ret
		case FORWARD:
			gpio_out_reset(motorDirectionA);
    1450:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <motorDirectionA>
    1454:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <motorDirectionA+0x1>
    1458:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <motorDirectionA+0x2>
    145c:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <motorDirectionA+0x3>
    1460:	0e 94 9d 01 	call	0x33a	; 0x33a <gpio_out_reset>
			gpio_out_reset(motorDirectionB);
    1464:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <motorDirectionB>
    1468:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <motorDirectionB+0x1>
    146c:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <motorDirectionB+0x2>
    1470:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <motorDirectionB+0x3>
    1474:	0c 94 9d 01 	jmp	0x33a	; 0x33a <gpio_out_reset>
			break;
    1478:	08 95       	ret
		case BACKWARD:
			gpio_out_set(motorDirectionA);
    147a:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <motorDirectionA>
    147e:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <motorDirectionA+0x1>
    1482:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <motorDirectionA+0x2>
    1486:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <motorDirectionA+0x3>
    148a:	0e 94 81 01 	call	0x302	; 0x302 <gpio_out_set>
			gpio_out_set(motorDirectionB);
    148e:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <motorDirectionB>
    1492:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <motorDirectionB+0x1>
    1496:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <motorDirectionB+0x2>
    149a:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <motorDirectionB+0x3>
    149e:	0c 94 81 01 	jmp	0x302	; 0x302 <gpio_out_set>
			break;
    14a2:	08 95       	ret
		case LEFT:
			gpio_out_reset(motorDirectionA);
    14a4:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <motorDirectionA>
    14a8:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <motorDirectionA+0x1>
    14ac:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <motorDirectionA+0x2>
    14b0:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <motorDirectionA+0x3>
    14b4:	0e 94 9d 01 	call	0x33a	; 0x33a <gpio_out_reset>
			gpio_out_set(motorDirectionB);
    14b8:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <motorDirectionB>
    14bc:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <motorDirectionB+0x1>
    14c0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <motorDirectionB+0x2>
    14c4:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <motorDirectionB+0x3>
    14c8:	0c 94 81 01 	jmp	0x302	; 0x302 <gpio_out_set>
			break;
    14cc:	08 95       	ret
		case RIGHT:
			gpio_out_set(motorDirectionA);
    14ce:	60 91 5d 01 	lds	r22, 0x015D	; 0x80015d <motorDirectionA>
    14d2:	70 91 5e 01 	lds	r23, 0x015E	; 0x80015e <motorDirectionA+0x1>
    14d6:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <motorDirectionA+0x2>
    14da:	90 91 60 01 	lds	r25, 0x0160	; 0x800160 <motorDirectionA+0x3>
    14de:	0e 94 81 01 	call	0x302	; 0x302 <gpio_out_set>
			gpio_out_reset(motorDirectionB);
    14e2:	60 91 65 01 	lds	r22, 0x0165	; 0x800165 <motorDirectionB>
    14e6:	70 91 66 01 	lds	r23, 0x0166	; 0x800166 <motorDirectionB+0x1>
    14ea:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <motorDirectionB+0x2>
    14ee:	90 91 68 01 	lds	r25, 0x0168	; 0x800168 <motorDirectionB+0x3>
    14f2:	0c 94 9d 01 	jmp	0x33a	; 0x33a <gpio_out_reset>
    14f6:	08 95       	ret

000014f8 <motor_speed>:
			break;
	}
}

void motor_speed(u8 speed){
    14f8:	af 92       	push	r10
    14fa:	cf 92       	push	r12
    14fc:	ef 92       	push	r14
    14fe:	ff 92       	push	r15
    1500:	0f 93       	push	r16
    1502:	1f 93       	push	r17
    1504:	cf 93       	push	r28
	pwm_setDutyCycle(motorPWM, CHANNEL_A, speed);
    1506:	a8 2e       	mov	r10, r24
    1508:	c1 2c       	mov	r12, r1
    150a:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <motorPWM>
    150e:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <motorPWM+0x1>
    1512:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <motorPWM+0x2>
    1516:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <motorPWM+0x3>
    151a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <motorPWM+0x4>
    151e:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <motorPWM+0x5>
    1522:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <motorPWM+0x6>
    1526:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <motorPWM+0x7>
    152a:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <motorPWM+0x8>
    152e:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <motorPWM+0x9>
    1532:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <motorPWM+0xa>
    1536:	16 d8       	rcall	.-4052   	; 0x564 <pwm_setDutyCycle>
	pwm_setDutyCycle(motorPWM, CHANNEL_B, speed);
    1538:	cc 24       	eor	r12, r12
    153a:	c3 94       	inc	r12
    153c:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <motorPWM>
    1540:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <motorPWM+0x1>
    1544:	00 91 70 01 	lds	r16, 0x0170	; 0x800170 <motorPWM+0x2>
    1548:	10 91 71 01 	lds	r17, 0x0171	; 0x800171 <motorPWM+0x3>
    154c:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <motorPWM+0x4>
    1550:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <motorPWM+0x5>
    1554:	40 91 74 01 	lds	r20, 0x0174	; 0x800174 <motorPWM+0x6>
    1558:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <motorPWM+0x7>
    155c:	60 91 76 01 	lds	r22, 0x0176	; 0x800176 <motorPWM+0x8>
    1560:	70 91 77 01 	lds	r23, 0x0177	; 0x800177 <motorPWM+0x9>
    1564:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <motorPWM+0xa>
    1568:	0e 94 b2 02 	call	0x564	; 0x564 <pwm_setDutyCycle>
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	cf 90       	pop	r12
    1578:	af 90       	pop	r10
    157a:	08 95       	ret

0000157c <__udivmodsi4>:
    157c:	a1 e2       	ldi	r26, 0x21	; 33
    157e:	1a 2e       	mov	r1, r26
    1580:	aa 1b       	sub	r26, r26
    1582:	bb 1b       	sub	r27, r27
    1584:	fd 01       	movw	r30, r26
    1586:	0d c0       	rjmp	.+26     	; 0x15a2 <__udivmodsi4_ep>

00001588 <__udivmodsi4_loop>:
    1588:	aa 1f       	adc	r26, r26
    158a:	bb 1f       	adc	r27, r27
    158c:	ee 1f       	adc	r30, r30
    158e:	ff 1f       	adc	r31, r31
    1590:	a2 17       	cp	r26, r18
    1592:	b3 07       	cpc	r27, r19
    1594:	e4 07       	cpc	r30, r20
    1596:	f5 07       	cpc	r31, r21
    1598:	20 f0       	brcs	.+8      	; 0x15a2 <__udivmodsi4_ep>
    159a:	a2 1b       	sub	r26, r18
    159c:	b3 0b       	sbc	r27, r19
    159e:	e4 0b       	sbc	r30, r20
    15a0:	f5 0b       	sbc	r31, r21

000015a2 <__udivmodsi4_ep>:
    15a2:	66 1f       	adc	r22, r22
    15a4:	77 1f       	adc	r23, r23
    15a6:	88 1f       	adc	r24, r24
    15a8:	99 1f       	adc	r25, r25
    15aa:	1a 94       	dec	r1
    15ac:	69 f7       	brne	.-38     	; 0x1588 <__udivmodsi4_loop>
    15ae:	60 95       	com	r22
    15b0:	70 95       	com	r23
    15b2:	80 95       	com	r24
    15b4:	90 95       	com	r25
    15b6:	9b 01       	movw	r18, r22
    15b8:	ac 01       	movw	r20, r24
    15ba:	bd 01       	movw	r22, r26
    15bc:	cf 01       	movw	r24, r30
    15be:	08 95       	ret

000015c0 <__tablejump2__>:
    15c0:	ee 0f       	add	r30, r30
    15c2:	ff 1f       	adc	r31, r31
    15c4:	00 24       	eor	r0, r0
    15c6:	00 1c       	adc	r0, r0
    15c8:	0b be       	out	0x3b, r0	; 59
    15ca:	07 90       	elpm	r0, Z+
    15cc:	f6 91       	elpm	r31, Z
    15ce:	e0 2d       	mov	r30, r0
    15d0:	09 94       	ijmp

000015d2 <__umulhisi3>:
    15d2:	a2 9f       	mul	r26, r18
    15d4:	b0 01       	movw	r22, r0
    15d6:	b3 9f       	mul	r27, r19
    15d8:	c0 01       	movw	r24, r0
    15da:	a3 9f       	mul	r26, r19
    15dc:	70 0d       	add	r23, r0
    15de:	81 1d       	adc	r24, r1
    15e0:	11 24       	eor	r1, r1
    15e2:	91 1d       	adc	r25, r1
    15e4:	b2 9f       	mul	r27, r18
    15e6:	70 0d       	add	r23, r0
    15e8:	81 1d       	adc	r24, r1
    15ea:	11 24       	eor	r1, r1
    15ec:	91 1d       	adc	r25, r1
    15ee:	08 95       	ret

000015f0 <_exit>:
    15f0:	f8 94       	cli

000015f2 <__stop_program>:
    15f2:	ff cf       	rjmp	.-2      	; 0x15f2 <__stop_program>
