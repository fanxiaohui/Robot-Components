
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800100  00800100  00001834  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  000018a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049fd  00000000  00000000  00001cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000176e  00000000  00000000  000066c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ffe  00000000  00000000  00007e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000efc  00000000  00000000  00009e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016bf  00000000  00000000  0000ad2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca9  00000000  00000000  0000c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	0b c1       	rjmp	.+534    	; 0x21c <__vector_1>
       6:	00 00       	nop
       8:	13 c1       	rjmp	.+550    	; 0x230 <__vector_2>
       a:	00 00       	nop
       c:	1b c1       	rjmp	.+566    	; 0x244 <__vector_3>
       e:	00 00       	nop
      10:	dd c0       	rjmp	.+442    	; 0x1cc <__vector_4>
      12:	00 00       	nop
      14:	e5 c0       	rjmp	.+458    	; 0x1e0 <__vector_5>
      16:	00 00       	nop
      18:	ed c0       	rjmp	.+474    	; 0x1f4 <__vector_6>
      1a:	00 00       	nop
      1c:	f5 c0       	rjmp	.+490    	; 0x208 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__vector_8>
      24:	1c c6       	rjmp	.+3128   	; 0xc5e <__vector_9>
      26:	00 00       	nop
      28:	56 c6       	rjmp	.+3244   	; 0xcd6 <__vector_10>
      2a:	00 00       	nop
      2c:	ed c5       	rjmp	.+3034   	; 0xc08 <__vector_11>
      2e:	00 00       	nop
      30:	8e c5       	rjmp	.+2844   	; 0xb4e <__vector_12>
      32:	00 00       	nop
      34:	01 c5       	rjmp	.+2562   	; 0xa38 <__vector_13>
      36:	00 00       	nop
      38:	5f c5       	rjmp	.+2750   	; 0xaf8 <__vector_14>
      3a:	00 00       	nop
      3c:	d2 c4       	rjmp	.+2468   	; 0x9e2 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	17 c3       	rjmp	.+1582   	; 0x67c <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 a0 08 	jmp	0x1140	; 0x1140 <__vector_20>
      54:	0c 94 fa 08 	jmp	0x11f4	; 0x11f4 <__vector_21>
      58:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <__vector_22>
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	72 07       	cpc	r23, r18
      8e:	7b 07       	cpc	r23, r27
      90:	84 07       	cpc	r24, r20
      92:	8d 07       	cpc	r24, r29
      94:	96 07       	cpc	r25, r22
      96:	9f 07       	cpc	r25, r31
      98:	a8 07       	cpc	r26, r24

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e0 ec       	ldi	r30, 0xC0	; 192
      ae:	f7 e1       	ldi	r31, 0x17	; 23
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a3 38       	cpi	r26, 0x83	; 131
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	3d d0       	rcall	.+122    	; 0x14c <main>
      d2:	0c 94 de 0b 	jmp	0x17bc	; 0x17bc <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <debug_init>:
#include <util/delay.h>

uart_struct_t s_debugUart;

void debug_init()
{
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
	s_debugUart.peripheral = UART0;
      dc:	e0 e0       	ldi	r30, 0x00	; 0
      de:	f1 e0       	ldi	r31, 0x01	; 1
      e0:	10 82       	st	Z, r1
	s_debugUart.baudRate = _9600;
      e2:	80 e8       	ldi	r24, 0x80	; 128
      e4:	18 2f       	mov	r17, r24
      e6:	81 83       	std	Z+1, r24	; 0x01
      e8:	85 e2       	ldi	r24, 0x25	; 37
      ea:	82 83       	std	Z+2, r24	; 0x02
      ec:	13 82       	std	Z+3, r1	; 0x03
      ee:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
      f0:	83 e0       	ldi	r24, 0x03	; 3
      f2:	78 2f       	mov	r23, r24
      f4:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
      f6:	92 e0       	ldi	r25, 0x02	; 2
      f8:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.stopBits = _1BIT;
      fa:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
      fc:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	68 2f       	mov	r22, r24
     102:	86 83       	std	Z+6, r24	; 0x06

	uart_init(s_debugUart);
     104:	00 e0       	ldi	r16, 0x00	; 0
     106:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
     10a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
     10e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x4>
     112:	50 e0       	ldi	r21, 0x00	; 0
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	0e 94 7e 09 	call	0x12fc	; 0x12fc <uart_init>
	uart_start(s_debugUart);
     11a:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
     11e:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
     122:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
     126:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
     12a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x4>
     12e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x5>
     132:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end+0x6>
     136:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x7>
     13a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x8>
     13e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x9>
     142:	0e 94 43 0a 	call	0x1486	; 0x1486 <uart_start>
}
     146:	1f 91       	pop	r17
     148:	0f 91       	pop	r16
     14a:	08 95       	ret

0000014c <main>:


int main(void)
{
	device_disableJTAG();
	debug_init();
     14c:	1b d0       	rcall	.+54     	; 0x184 <device_disableJTAG>
     14e:	c4 df       	rcall	.-120    	; 0xd8 <debug_init>
	motor_init();
     150:	0e 94 94 0a 	call	0x1528	; 0x1528 <motor_init>
	//encoder_init();
	//encoder_start();
	sei();
     154:	78 94       	sei
    while (1)
    {
		motor_start();
     156:	0e 94 f2 0a 	call	0x15e4	; 0x15e4 <motor_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	2f ef       	ldi	r18, 0xFF	; 255
     15c:	8b e7       	ldi	r24, 0x7B	; 123
     15e:	92 e9       	ldi	r25, 0x92	; 146
     160:	21 50       	subi	r18, 0x01	; 1
     162:	80 40       	sbci	r24, 0x00	; 0
     164:	90 40       	sbci	r25, 0x00	; 0
     166:	e1 f7       	brne	.-8      	; 0x160 <main+0x14>
     168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x1e>
     16a:	00 00       	nop
		//_delay_ms(2000);
		//motor_individualDirSpeed(FORWARD, 50, BACKWARD, 50);
		_delay_ms(6000);
		//motor_individualDirSpeed(BACKWARD, 50, FORWARD, 50);
		//_delay_ms(6000);
		motor_stop();
     16c:	0e 94 6f 0b 	call	0x16de	; 0x16de <motor_stop>
     170:	2f ef       	ldi	r18, 0xFF	; 255
     172:	89 e6       	ldi	r24, 0x69	; 105
     174:	98 e1       	ldi	r25, 0x18	; 24
     176:	21 50       	subi	r18, 0x01	; 1
     178:	80 40       	sbci	r24, 0x00	; 0
     17a:	90 40       	sbci	r25, 0x00	; 0
     17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x2a>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x34>
     180:	00 00       	nop
     182:	e9 cf       	rjmp	.-46     	; 0x156 <main+0xa>

00000184 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     184:	80 e8       	ldi	r24, 0x80	; 128
     186:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     188:	85 bf       	out	0x35, r24	; 53
     18a:	08 95       	ret

0000018c <gpio_changeDirection>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
     18c:	61 30       	cpi	r22, 0x01	; 1
     18e:	61 f0       	breq	.+24     	; 0x1a8 <gpio_changeDirection+0x1c>
     190:	28 f0       	brcs	.+10     	; 0x19c <gpio_changeDirection+0x10>
     192:	62 30       	cpi	r22, 0x02	; 2
     194:	79 f0       	breq	.+30     	; 0x1b4 <gpio_changeDirection+0x28>
     196:	63 30       	cpi	r22, 0x03	; 3
     198:	99 f0       	breq	.+38     	; 0x1c0 <gpio_changeDirection+0x34>
     19a:	08 95       	ret
     19c:	48 2f       	mov	r20, r24
     19e:	67 2f       	mov	r22, r23
     1a0:	81 e2       	ldi	r24, 0x21	; 33
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	01 c1       	rjmp	.+514    	; 0x3a8 <updateBit>
     1a6:	08 95       	ret
     1a8:	48 2f       	mov	r20, r24
     1aa:	67 2f       	mov	r22, r23
     1ac:	84 e2       	ldi	r24, 0x24	; 36
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	fb c0       	rjmp	.+502    	; 0x3a8 <updateBit>
     1b2:	08 95       	ret
     1b4:	48 2f       	mov	r20, r24
     1b6:	67 2f       	mov	r22, r23
     1b8:	87 e2       	ldi	r24, 0x27	; 39
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	f5 c0       	rjmp	.+490    	; 0x3a8 <updateBit>
     1be:	08 95       	ret
     1c0:	48 2f       	mov	r20, r24
     1c2:	67 2f       	mov	r22, r23
     1c4:	8a e2       	ldi	r24, 0x2A	; 42
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	ef c0       	rjmp	.+478    	; 0x3a8 <updateBit>
     1ca:	08 95       	ret

000001cc <__vector_4>:
     1cc:	1f 92       	push	r1
     1ce:	0f 92       	push	r0
     1d0:	0f b6       	in	r0, 0x3f	; 63
     1d2:	0f 92       	push	r0
     1d4:	11 24       	eor	r1, r1
     1d6:	0f 90       	pop	r0
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	0f 90       	pop	r0
     1dc:	1f 90       	pop	r1
     1de:	18 95       	reti

000001e0 <__vector_5>:
     1e0:	1f 92       	push	r1
     1e2:	0f 92       	push	r0
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	0f 92       	push	r0
     1e8:	11 24       	eor	r1, r1
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <__vector_6>:
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <__vector_7>:
     208:	1f 92       	push	r1
     20a:	0f 92       	push	r0
     20c:	0f b6       	in	r0, 0x3f	; 63
     20e:	0f 92       	push	r0
     210:	11 24       	eor	r1, r1
     212:	0f 90       	pop	r0
     214:	0f be       	out	0x3f, r0	; 63
     216:	0f 90       	pop	r0
     218:	1f 90       	pop	r1
     21a:	18 95       	reti

0000021c <__vector_1>:
     21c:	1f 92       	push	r1
     21e:	0f 92       	push	r0
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	0f 92       	push	r0
     224:	11 24       	eor	r1, r1
     226:	0f 90       	pop	r0
     228:	0f be       	out	0x3f, r0	; 63
     22a:	0f 90       	pop	r0
     22c:	1f 90       	pop	r1
     22e:	18 95       	reti

00000230 <__vector_2>:
     230:	1f 92       	push	r1
     232:	0f 92       	push	r0
     234:	0f b6       	in	r0, 0x3f	; 63
     236:	0f 92       	push	r0
     238:	11 24       	eor	r1, r1
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_3>:
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	0f 90       	pop	r0
     250:	0f be       	out	0x3f, r0	; 63
     252:	0f 90       	pop	r0
     254:	1f 90       	pop	r1
     256:	18 95       	reti

00000258 <gpio_init>:
     258:	ef 92       	push	r14
     25a:	ff 92       	push	r15
     25c:	0f 93       	push	r16
     25e:	1f 93       	push	r17
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	c6 2f       	mov	r28, r22
     266:	f7 2e       	mov	r15, r23
     268:	d8 2f       	mov	r29, r24
     26a:	e9 2e       	mov	r14, r25
     26c:	e0 e0       	ldi	r30, 0x00	; 0
     26e:	f1 e0       	ldi	r31, 0x01	; 1
     270:	10 82       	st	Z, r1
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	18 2f       	mov	r17, r24
     276:	81 83       	std	Z+1, r24	; 0x01
     278:	85 e2       	ldi	r24, 0x25	; 37
     27a:	82 83       	std	Z+2, r24	; 0x02
     27c:	13 82       	std	Z+3, r1	; 0x03
     27e:	14 82       	std	Z+4, r1	; 0x04
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	78 2f       	mov	r23, r24
     284:	87 83       	std	Z+7, r24	; 0x07
     286:	92 e0       	ldi	r25, 0x02	; 2
     288:	91 87       	std	Z+9, r25	; 0x09
     28a:	10 86       	std	Z+8, r1	; 0x08
     28c:	15 82       	std	Z+5, r1	; 0x05
     28e:	81 e0       	ldi	r24, 0x01	; 1
     290:	68 2f       	mov	r22, r24
     292:	86 83       	std	Z+6, r24	; 0x06
     294:	00 e0       	ldi	r16, 0x00	; 0
     296:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
     29a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
     29e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x4>
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <uart_init>
     2aa:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
     2ae:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
     2b2:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
     2b6:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
     2ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x4>
     2be:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x5>
     2c2:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end+0x6>
     2c6:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x7>
     2ca:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x8>
     2ce:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x9>
     2d2:	0e 94 43 0a 	call	0x1486	; 0x1486 <uart_start>
     2d6:	6c 2f       	mov	r22, r28
     2d8:	7f 2d       	mov	r23, r15
     2da:	8d 2f       	mov	r24, r29
     2dc:	9e 2d       	mov	r25, r14
     2de:	56 df       	rcall	.-340    	; 0x18c <gpio_changeDirection>
     2e0:	d1 11       	cpse	r29, r1
     2e2:	23 c0       	rjmp	.+70     	; 0x32a <gpio_init+0xd2>
     2e4:	c1 30       	cpi	r28, 0x01	; 1
     2e6:	81 f0       	breq	.+32     	; 0x308 <gpio_init+0xb0>
     2e8:	28 f0       	brcs	.+10     	; 0x2f4 <gpio_init+0x9c>
     2ea:	c2 30       	cpi	r28, 0x02	; 2
     2ec:	99 f0       	breq	.+38     	; 0x314 <gpio_init+0xbc>
     2ee:	c3 30       	cpi	r28, 0x03	; 3
     2f0:	b9 f0       	breq	.+46     	; 0x320 <gpio_init+0xc8>
     2f2:	1b c0       	rjmp	.+54     	; 0x32a <gpio_init+0xd2>
     2f4:	4e 2d       	mov	r20, r14
     2f6:	6f 2d       	mov	r22, r15
     2f8:	82 e2       	ldi	r24, 0x22	; 34
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	55 d0       	rcall	.+170    	; 0x3a8 <updateBit>
     2fe:	6f 2d       	mov	r22, r15
     300:	8e e7       	ldi	r24, 0x7E	; 126
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	75 d0       	rcall	.+234    	; 0x3f0 <clearBit>
     306:	11 c0       	rjmp	.+34     	; 0x32a <gpio_init+0xd2>
     308:	4e 2d       	mov	r20, r14
     30a:	6f 2d       	mov	r22, r15
     30c:	85 e2       	ldi	r24, 0x25	; 37
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	4b d0       	rcall	.+150    	; 0x3a8 <updateBit>
     312:	0b c0       	rjmp	.+22     	; 0x32a <gpio_init+0xd2>
     314:	4e 2d       	mov	r20, r14
     316:	6f 2d       	mov	r22, r15
     318:	88 e2       	ldi	r24, 0x28	; 40
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	45 d0       	rcall	.+138    	; 0x3a8 <updateBit>
     31e:	05 c0       	rjmp	.+10     	; 0x32a <gpio_init+0xd2>
     320:	4e 2d       	mov	r20, r14
     322:	6f 2d       	mov	r22, r15
     324:	8b e2       	ldi	r24, 0x2B	; 43
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	3f d0       	rcall	.+126    	; 0x3a8 <updateBit>
     32a:	df 91       	pop	r29
     32c:	cf 91       	pop	r28
     32e:	1f 91       	pop	r17
     330:	0f 91       	pop	r16
     332:	ff 90       	pop	r15
     334:	ef 90       	pop	r14
     336:	08 95       	ret

00000338 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     338:	61 30       	cpi	r22, 0x01	; 1
     33a:	59 f0       	breq	.+22     	; 0x352 <gpio_out_set+0x1a>
     33c:	28 f0       	brcs	.+10     	; 0x348 <gpio_out_set+0x10>
     33e:	62 30       	cpi	r22, 0x02	; 2
     340:	69 f0       	breq	.+26     	; 0x35c <gpio_out_set+0x24>
     342:	63 30       	cpi	r22, 0x03	; 3
     344:	81 f0       	breq	.+32     	; 0x366 <gpio_out_set+0x2e>
     346:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     348:	67 2f       	mov	r22, r23
     34a:	82 e2       	ldi	r24, 0x22	; 34
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	44 c0       	rjmp	.+136    	; 0x3d8 <setBit>
			break;
     350:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     352:	67 2f       	mov	r22, r23
     354:	85 e2       	ldi	r24, 0x25	; 37
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	3f c0       	rjmp	.+126    	; 0x3d8 <setBit>
			break;
     35a:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     35c:	67 2f       	mov	r22, r23
     35e:	88 e2       	ldi	r24, 0x28	; 40
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	3a c0       	rjmp	.+116    	; 0x3d8 <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
     364:	08 95       	ret
     366:	67 2f       	mov	r22, r23
     368:	8b e2       	ldi	r24, 0x2B	; 43
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	35 c0       	rjmp	.+106    	; 0x3d8 <setBit>
     36e:	08 95       	ret

00000370 <gpio_out_reset>:
	}
}

void gpio_out_reset(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     370:	61 30       	cpi	r22, 0x01	; 1
     372:	59 f0       	breq	.+22     	; 0x38a <gpio_out_reset+0x1a>
     374:	28 f0       	brcs	.+10     	; 0x380 <gpio_out_reset+0x10>
     376:	62 30       	cpi	r22, 0x02	; 2
     378:	69 f0       	breq	.+26     	; 0x394 <gpio_out_reset+0x24>
     37a:	63 30       	cpi	r22, 0x03	; 3
     37c:	81 f0       	breq	.+32     	; 0x39e <gpio_out_reset+0x2e>
     37e:	08 95       	ret
	{
		case PA:
			clearBit(&PORTA, s_gpio.number);
     380:	67 2f       	mov	r22, r23
     382:	82 e2       	ldi	r24, 0x22	; 34
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	34 c0       	rjmp	.+104    	; 0x3f0 <clearBit>
			break;
     388:	08 95       	ret
		case PB:
			clearBit(&PORTB, s_gpio.number);
     38a:	67 2f       	mov	r22, r23
     38c:	85 e2       	ldi	r24, 0x25	; 37
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	2f c0       	rjmp	.+94     	; 0x3f0 <clearBit>
			break;
     392:	08 95       	ret
		case PC:
			clearBit(&PORTC, s_gpio.number);
     394:	67 2f       	mov	r22, r23
     396:	88 e2       	ldi	r24, 0x28	; 40
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	2a c0       	rjmp	.+84     	; 0x3f0 <clearBit>
			break;
		case PD:
			clearBit(&PORTD, s_gpio.number);
     39c:	08 95       	ret
     39e:	67 2f       	mov	r22, r23
     3a0:	8b e2       	ldi	r24, 0x2B	; 43
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	25 c0       	rjmp	.+74     	; 0x3f0 <clearBit>
     3a6:	08 95       	ret

000003a8 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     3a8:	fc 01       	movw	r30, r24
     3aa:	94 2f       	mov	r25, r20
     3ac:	20 81       	ld	r18, Z
     3ae:	41 e0       	ldi	r20, 0x01	; 1
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	06 2e       	mov	r0, r22
     3b4:	02 c0       	rjmp	.+4      	; 0x3ba <updateBit+0x12>
     3b6:	44 0f       	add	r20, r20
     3b8:	55 1f       	adc	r21, r21
     3ba:	0a 94       	dec	r0
     3bc:	e2 f7       	brpl	.-8      	; 0x3b6 <updateBit+0xe>
     3be:	40 95       	com	r20
     3c0:	50 95       	com	r21
     3c2:	24 23       	and	r18, r20
     3c4:	49 2f       	mov	r20, r25
     3c6:	50 e0       	ldi	r21, 0x00	; 0
     3c8:	02 c0       	rjmp	.+4      	; 0x3ce <updateBit+0x26>
     3ca:	44 0f       	add	r20, r20
     3cc:	55 1f       	adc	r21, r21
     3ce:	6a 95       	dec	r22
     3d0:	e2 f7       	brpl	.-8      	; 0x3ca <updateBit+0x22>
     3d2:	42 2b       	or	r20, r18
     3d4:	40 83       	st	Z, r20
     3d6:	08 95       	ret

000003d8 <setBit>:
     3d8:	fc 01       	movw	r30, r24
     3da:	40 81       	ld	r20, Z
     3dc:	21 e0       	ldi	r18, 0x01	; 1
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <setBit+0xe>
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	6a 95       	dec	r22
     3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <setBit+0xa>
     3ea:	24 2b       	or	r18, r20
     3ec:	20 83       	st	Z, r18
     3ee:	08 95       	ret

000003f0 <clearBit>:
     3f0:	fc 01       	movw	r30, r24
     3f2:	90 81       	ld	r25, Z
     3f4:	21 e0       	ldi	r18, 0x01	; 1
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	02 c0       	rjmp	.+4      	; 0x3fe <clearBit+0xe>
     3fa:	22 0f       	add	r18, r18
     3fc:	33 1f       	adc	r19, r19
     3fe:	6a 95       	dec	r22
     400:	e2 f7       	brpl	.-8      	; 0x3fa <clearBit+0xa>
     402:	20 95       	com	r18
     404:	29 23       	and	r18, r25
     406:	20 83       	st	Z, r18
     408:	08 95       	ret

0000040a <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     40a:	90 e0       	ldi	r25, 0x00	; 0
     40c:	02 c0       	rjmp	.+4      	; 0x412 <checkBit+0x8>
     40e:	95 95       	asr	r25
     410:	87 95       	ror	r24
     412:	6a 95       	dec	r22
     414:	e2 f7       	brpl	.-8      	; 0x40e <checkBit+0x4>
}
     416:	81 70       	andi	r24, 0x01	; 1
     418:	08 95       	ret

0000041a <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     41a:	cf 92       	push	r12
     41c:	df 92       	push	r13
     41e:	ef 92       	push	r14
     420:	ff 92       	push	r15
     422:	69 01       	movw	r12, r18
     424:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     426:	9b 01       	movw	r18, r22
     428:	ac 01       	movw	r20, r24
     42a:	2c 19       	sub	r18, r12
     42c:	3d 09       	sbc	r19, r13
     42e:	4e 09       	sbc	r20, r14
     430:	5f 09       	sbc	r21, r15
     432:	a8 ee       	ldi	r26, 0xE8	; 232
     434:	b3 e0       	ldi	r27, 0x03	; 3
     436:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__muluhisi3>
     43a:	a7 01       	movw	r20, r14
     43c:	96 01       	movw	r18, r12
     43e:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     442:	c9 01       	movw	r24, r18
     444:	99 23       	and	r25, r25
     446:	24 f4       	brge	.+8      	; 0x450 <calculateError+0x36>
     448:	88 27       	eor	r24, r24
     44a:	99 27       	eor	r25, r25
     44c:	82 1b       	sub	r24, r18
     44e:	93 0b       	sbc	r25, r19
}
     450:	ff 90       	pop	r15
     452:	ef 90       	pop	r14
     454:	df 90       	pop	r13
     456:	cf 90       	pop	r12
     458:	08 95       	ret

0000045a <ruleOfThree>:

u16 ruleOfThree(u16 u16_extreme, u16 u16_mean1, u16 u16_mean2)
{
     45a:	fc 01       	movw	r30, r24
     45c:	9b 01       	movw	r18, r22
	u32 u32_result;
	u32_result = (u32) u16_mean1 * u16_mean2 / u16_extreme;
	return (u16) u32_result;
     45e:	da 01       	movw	r26, r20
     460:	0e 94 c5 0b 	call	0x178a	; 0x178a <__umulhisi3>
     464:	9f 01       	movw	r18, r30
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <__udivmodsi4>
     46e:	c9 01       	movw	r24, r18
     470:	08 95       	ret

00000472 <pwm_init>:
			OCR3A = ruleOfThree(100, u8_pwm3aPercent, ICR3);
			OCR3B = ruleOfThree(100, u8_pwm3bPercent, ICR3);
		#endif
			break;
	}
}
     472:	cf 93       	push	r28
     474:	df 93       	push	r29
     476:	ec 01       	movw	r28, r24
     478:	48 81       	ld	r20, Y
     47a:	59 81       	ldd	r21, Y+1	; 0x01
     47c:	6a 81       	ldd	r22, Y+2	; 0x02
     47e:	7b 81       	ldd	r23, Y+3	; 0x03
     480:	8c 81       	ldd	r24, Y+4	; 0x04
     482:	54 d4       	rcall	.+2216   	; 0xd2c <timer_init>
     484:	88 81       	ld	r24, Y
     486:	81 30       	cpi	r24, 0x01	; 1
     488:	09 f0       	breq	.+2      	; 0x48c <pwm_init+0x1a>
     48a:	62 c0       	rjmp	.+196    	; 0x550 <pwm_init+0xde>
     48c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     490:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     494:	89 2b       	or	r24, r25
     496:	49 f0       	breq	.+18     	; 0x4aa <pwm_init+0x38>
     498:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     49c:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     4a0:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4a4:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4a8:	06 c0       	rjmp	.+12     	; 0x4b6 <pwm_init+0x44>
     4aa:	8f ef       	ldi	r24, 0xFF	; 255
     4ac:	9f ef       	ldi	r25, 0xFF	; 255
     4ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     4b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     4b6:	64 e0       	ldi	r22, 0x04	; 4
     4b8:	81 e8       	ldi	r24, 0x81	; 129
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	8d df       	rcall	.-230    	; 0x3d8 <setBit>
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	80 e8       	ldi	r24, 0x80	; 128
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	95 df       	rcall	.-214    	; 0x3f0 <clearBit>
     4c6:	8e 81       	ldd	r24, Y+6	; 0x06
     4c8:	88 23       	and	r24, r24
     4ca:	19 f0       	breq	.+6      	; 0x4d2 <pwm_init+0x60>
     4cc:	81 30       	cpi	r24, 0x01	; 1
     4ce:	51 f0       	breq	.+20     	; 0x4e4 <pwm_init+0x72>
     4d0:	19 c0       	rjmp	.+50     	; 0x504 <pwm_init+0x92>
     4d2:	63 e0       	ldi	r22, 0x03	; 3
     4d4:	81 e8       	ldi	r24, 0x81	; 129
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	7f df       	rcall	.-258    	; 0x3d8 <setBit>
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	80 e8       	ldi	r24, 0x80	; 128
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	7b df       	rcall	.-266    	; 0x3d8 <setBit>
     4e2:	10 c0       	rjmp	.+32     	; 0x504 <pwm_init+0x92>
     4e4:	63 e0       	ldi	r22, 0x03	; 3
     4e6:	81 e8       	ldi	r24, 0x81	; 129
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	82 df       	rcall	.-252    	; 0x3f0 <clearBit>
     4ec:	8d 81       	ldd	r24, Y+5	; 0x05
     4ee:	88 23       	and	r24, r24
     4f0:	29 f0       	breq	.+10     	; 0x4fc <pwm_init+0x8a>
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	80 e8       	ldi	r24, 0x80	; 128
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	7b df       	rcall	.-266    	; 0x3f0 <clearBit>
     4fa:	04 c0       	rjmp	.+8      	; 0x504 <pwm_init+0x92>
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	80 e8       	ldi	r24, 0x80	; 128
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	6a df       	rcall	.-300    	; 0x3d8 <setBit>
     504:	8f 81       	ldd	r24, Y+7	; 0x07
     506:	88 23       	and	r24, r24
     508:	71 f0       	breq	.+28     	; 0x526 <pwm_init+0xb4>
     50a:	67 e0       	ldi	r22, 0x07	; 7
     50c:	80 e8       	ldi	r24, 0x80	; 128
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	63 df       	rcall	.-314    	; 0x3d8 <setBit>
     512:	48 85       	ldd	r20, Y+8	; 0x08
     514:	66 e0       	ldi	r22, 0x06	; 6
     516:	80 e8       	ldi	r24, 0x80	; 128
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	46 df       	rcall	.-372    	; 0x3a8 <updateBit>
     51c:	63 e0       	ldi	r22, 0x03	; 3
     51e:	75 e0       	ldi	r23, 0x05	; 5
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	99 de       	rcall	.-718    	; 0x258 <gpio_init>
     526:	89 85       	ldd	r24, Y+9	; 0x09
     528:	88 23       	and	r24, r24
     52a:	71 f0       	breq	.+28     	; 0x548 <pwm_init+0xd6>
     52c:	65 e0       	ldi	r22, 0x05	; 5
     52e:	80 e8       	ldi	r24, 0x80	; 128
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	52 df       	rcall	.-348    	; 0x3d8 <setBit>
     534:	4a 85       	ldd	r20, Y+10	; 0x0a
     536:	64 e0       	ldi	r22, 0x04	; 4
     538:	80 e8       	ldi	r24, 0x80	; 128
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	35 df       	rcall	.-406    	; 0x3a8 <updateBit>
     53e:	63 e0       	ldi	r22, 0x03	; 3
     540:	74 e0       	ldi	r23, 0x04	; 4
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	88 de       	rcall	.-752    	; 0x258 <gpio_init>
     548:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <u8_pwm1aPercent>
     54c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <u8_pwm1bPercent>
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <pwm_start>:
     556:	ef 92       	push	r14
     558:	ff 92       	push	r15
     55a:	0f 93       	push	r16
     55c:	1f 93       	push	r17
     55e:	cf 93       	push	r28
     560:	df 93       	push	r29
     562:	cd b7       	in	r28, 0x3d	; 61
     564:	de b7       	in	r29, 0x3e	; 62
     566:	2b 97       	sbiw	r28, 0x0b	; 11
     568:	0f b6       	in	r0, 0x3f	; 63
     56a:	f8 94       	cli
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	0f be       	out	0x3f, r0	; 63
     570:	cd bf       	out	0x3d, r28	; 61
     572:	4e 2d       	mov	r20, r14
     574:	5f 2d       	mov	r21, r15
     576:	60 2f       	mov	r22, r16
     578:	71 2f       	mov	r23, r17
     57a:	82 2f       	mov	r24, r18
     57c:	22 d5       	rcall	.+2628   	; 0xfc2 <timer_start>
     57e:	2b 96       	adiw	r28, 0x0b	; 11
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	08 95       	ret

00000598 <pwm_stop>:
     598:	ef 92       	push	r14
     59a:	ff 92       	push	r15
     59c:	0f 93       	push	r16
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	cd b7       	in	r28, 0x3d	; 61
     5a6:	de b7       	in	r29, 0x3e	; 62
     5a8:	2b 97       	sbiw	r28, 0x0b	; 11
     5aa:	0f b6       	in	r0, 0x3f	; 63
     5ac:	f8 94       	cli
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0f be       	out	0x3f, r0	; 63
     5b2:	cd bf       	out	0x3d, r28	; 61
     5b4:	4e 2d       	mov	r20, r14
     5b6:	5f 2d       	mov	r21, r15
     5b8:	60 2f       	mov	r22, r16
     5ba:	71 2f       	mov	r23, r17
     5bc:	82 2f       	mov	r24, r18
     5be:	46 d5       	rcall	.+2700   	; 0x104c <timer_stop>
     5c0:	2b 96       	adiw	r28, 0x0b	; 11
     5c2:	0f b6       	in	r0, 0x3f	; 63
     5c4:	f8 94       	cli
     5c6:	de bf       	out	0x3e, r29	; 62
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	cd bf       	out	0x3d, r28	; 61
     5cc:	df 91       	pop	r29
     5ce:	cf 91       	pop	r28
     5d0:	1f 91       	pop	r17
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	08 95       	ret

000005da <pwm_setDutyCycle>:

void pwm_setDutyCycle(pwm_struct_t s_pwm, timer_channel_enum_t e_channel, u8 u8_percent)
{
     5da:	af 92       	push	r10
     5dc:	cf 92       	push	r12
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	0f 93       	push	r16
     5e4:	1f 93       	push	r17
     5e6:	cf 93       	push	r28
     5e8:	df 93       	push	r29
     5ea:	cd b7       	in	r28, 0x3d	; 61
     5ec:	de b7       	in	r29, 0x3e	; 62
     5ee:	2b 97       	sbiw	r28, 0x0b	; 11
     5f0:	0f b6       	in	r0, 0x3f	; 63
     5f2:	f8 94       	cli
     5f4:	de bf       	out	0x3e, r29	; 62
     5f6:	0f be       	out	0x3f, r0	; 63
     5f8:	cd bf       	out	0x3d, r28	; 61
     5fa:	9e 2d       	mov	r25, r14
     5fc:	e9 82       	std	Y+1, r14	; 0x01
     5fe:	fa 82       	std	Y+2, r15	; 0x02
     600:	0b 83       	std	Y+3, r16	; 0x03
     602:	1c 83       	std	Y+4, r17	; 0x04
     604:	2d 83       	std	Y+5, r18	; 0x05
     606:	3e 83       	std	Y+6, r19	; 0x06
     608:	4f 83       	std	Y+7, r20	; 0x07
     60a:	58 87       	std	Y+8, r21	; 0x08
     60c:	69 87       	std	Y+9, r22	; 0x09
     60e:	7a 87       	std	Y+10, r23	; 0x0a
     610:	8b 87       	std	Y+11, r24	; 0x0b
	switch(s_pwm.base.peripheral)
     612:	91 30       	cpi	r25, 0x01	; 1
     614:	21 f5       	brne	.+72     	; 0x65e <pwm_setDutyCycle+0x84>
     616:	8c 2d       	mov	r24, r12
			}
		#endif
			break;
		case TIMER1:
		#ifdef USING_PWM1
			if (e_channel == CHANNEL_A)
     618:	c1 10       	cpse	r12, r1
     61a:	10 c0       	rjmp	.+32     	; 0x63c <pwm_setDutyCycle+0x62>
			{
				u8_pwm1aPercent = u8_percent;
     61c:	a0 92 0b 01 	sts	0x010B, r10	; 0x80010b <u8_pwm1aPercent>
				OCR1A = ruleOfThree(100, u8_percent, ICR1);
     620:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     624:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     628:	6a 2d       	mov	r22, r10
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	84 e6       	ldi	r24, 0x64	; 100
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	14 df       	rcall	.-472    	; 0x45a <ruleOfThree>
     632:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     636:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     63a:	11 c0       	rjmp	.+34     	; 0x65e <pwm_setDutyCycle+0x84>
			}
			if (e_channel == CHANNEL_B)
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	79 f4       	brne	.+30     	; 0x65e <pwm_setDutyCycle+0x84>
			{
				u8_pwm1bPercent = u8_percent;
     640:	a0 92 0a 01 	sts	0x010A, r10	; 0x80010a <u8_pwm1bPercent>
				OCR1B = ruleOfThree(100, u8_percent, ICR1);
     644:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     648:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     64c:	6a 2d       	mov	r22, r10
     64e:	70 e0       	ldi	r23, 0x00	; 0
     650:	84 e6       	ldi	r24, 0x64	; 100
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	02 df       	rcall	.-508    	; 0x45a <ruleOfThree>
     656:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     65a:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				OCR3B = ruleOfThree(100, u8_percent, ICR3);
			}
		#endif
			break;
	}
}
     65e:	2b 96       	adiw	r28, 0x0b	; 11
     660:	0f b6       	in	r0, 0x3f	; 63
     662:	f8 94       	cli
     664:	de bf       	out	0x3e, r29	; 62
     666:	0f be       	out	0x3f, r0	; 63
     668:	cd bf       	out	0x3d, r28	; 61
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	cf 90       	pop	r12
     678:	af 90       	pop	r10
     67a:	08 95       	ret

0000067c <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     67c:	1f 92       	push	r1
     67e:	0f 92       	push	r0
     680:	0f b6       	in	r0, 0x3f	; 63
     682:	0f 92       	push	r0
     684:	11 24       	eor	r1, r1
     686:	0b b6       	in	r0, 0x3b	; 59
     688:	0f 92       	push	r0
     68a:	8f 93       	push	r24
     68c:	9f 93       	push	r25
     68e:	ef 93       	push	r30
     690:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     692:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <u8_RLastReceivedIndex>
     696:	f0 e0       	ldi	r31, 0x00	; 0
     698:	8e b5       	in	r24, 0x2e	; 46
     69a:	ee 5e       	subi	r30, 0xEE	; 238
     69c:	fe 4f       	sbci	r31, 0xFE	; 254
     69e:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     6a0:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_RLastReceivedIndex>
     6a4:	89 30       	cpi	r24, 0x09	; 9
     6a6:	30 f4       	brcc	.+12     	; 0x6b4 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     6a8:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_RLastReceivedIndex>
     6ac:	8f 5f       	subi	r24, 0xFF	; 255
     6ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <u8_RLastReceivedIndex>
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     6b4:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     6b8:	81 e0       	ldi	r24, 0x01	; 1
     6ba:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     6be:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6c2:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <u8_TLastRequestedIndex>
     6c6:	98 17       	cp	r25, r24
     6c8:	a1 f0       	breq	.+40     	; 0x6f2 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     6ca:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6ce:	f0 e0       	ldi	r31, 0x00	; 0
     6d0:	e4 5e       	subi	r30, 0xE4	; 228
     6d2:	fe 4f       	sbci	r31, 0xFE	; 254
     6d4:	80 81       	ld	r24, Z
     6d6:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     6d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6dc:	89 30       	cpi	r24, 0x09	; 9
     6de:	30 f4       	brcc	.+12     	; 0x6ec <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     6e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
     6e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <u8_TLastTransmittedIndex>
     6ea:	06 c0       	rjmp	.+12     	; 0x6f8 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     6ec:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <u8_TLastTransmittedIndex>
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     6f2:	81 e0       	ldi	r24, 0x01	; 1
     6f4:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <b_TAvailable>
	}
}
     6f8:	ff 91       	pop	r31
     6fa:	ef 91       	pop	r30
     6fc:	9f 91       	pop	r25
     6fe:	8f 91       	pop	r24
     700:	0f 90       	pop	r0
     702:	0b be       	out	0x3b, r0	; 59
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f 90       	pop	r0
     70a:	1f 90       	pop	r1
     70c:	18 95       	reti

0000070e <calculateTopRegister>:
	setBit(&GTCCR, PSRSYNC);
}

void timer_synchronisedStart()
{
	clearBit(&GTCCR, TSM);
     70e:	8f 92       	push	r8
     710:	9f 92       	push	r9
     712:	af 92       	push	r10
     714:	bf 92       	push	r11
     716:	ef 92       	push	r14
     718:	ff 92       	push	r15
     71a:	0f 93       	push	r16
     71c:	1f 93       	push	r17
     71e:	cf 93       	push	r28
     720:	df 93       	push	r29
     722:	00 d0       	rcall	.+0      	; 0x724 <calculateTopRegister+0x16>
     724:	00 d0       	rcall	.+0      	; 0x726 <calculateTopRegister+0x18>
     726:	1f 92       	push	r1
     728:	cd b7       	in	r28, 0x3d	; 61
     72a:	de b7       	in	r29, 0x3e	; 62
     72c:	48 01       	movw	r8, r16
     72e:	59 01       	movw	r10, r18
     730:	41 30       	cpi	r20, 0x01	; 1
     732:	21 f0       	breq	.+8      	; 0x73c <calculateTopRegister+0x2e>
     734:	42 30       	cpi	r20, 0x02	; 2
     736:	09 f4       	brne	.+2      	; 0x73a <calculateTopRegister+0x2c>
     738:	83 c0       	rjmp	.+262    	; 0x840 <calculateTopRegister+0x132>
     73a:	40 c1       	rjmp	.+640    	; 0x9bc <calculateTopRegister+0x2ae>
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	72 e1       	ldi	r23, 0x12	; 18
     740:	8a e7       	ldi	r24, 0x7A	; 122
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	a9 01       	movw	r20, r18
     746:	98 01       	movw	r18, r16
     748:	f5 d7       	rcall	.+4074   	; 0x1734 <__udivmodsi4>
     74a:	da 01       	movw	r26, r20
     74c:	c9 01       	movw	r24, r18
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	a1 09       	sbc	r26, r1
     752:	b1 09       	sbc	r27, r1
     754:	00 97       	sbiw	r24, 0x00	; 0
     756:	21 e0       	ldi	r18, 0x01	; 1
     758:	a2 07       	cpc	r26, r18
     75a:	b1 05       	cpc	r27, r1
     75c:	50 f4       	brcc	.+20     	; 0x772 <calculateTopRegister+0x64>
     75e:	49 ef       	ldi	r20, 0xF9	; 249
     760:	5f ef       	ldi	r21, 0xFF	; 255
     762:	6f ef       	ldi	r22, 0xFF	; 255
     764:	70 e0       	ldi	r23, 0x00	; 0
     766:	f7 01       	movw	r30, r14
     768:	40 83       	st	Z, r20
     76a:	51 83       	std	Z+1, r21	; 0x01
     76c:	62 83       	std	Z+2, r22	; 0x02
     76e:	73 83       	std	Z+3, r23	; 0x03
     770:	28 c1       	rjmp	.+592    	; 0x9c2 <calculateTopRegister+0x2b4>
     772:	60 e4       	ldi	r22, 0x40	; 64
     774:	72 e4       	ldi	r23, 0x42	; 66
     776:	8f e0       	ldi	r24, 0x0F	; 15
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a5 01       	movw	r20, r10
     77c:	94 01       	movw	r18, r8
     77e:	da d7       	rcall	.+4020   	; 0x1734 <__udivmodsi4>
     780:	da 01       	movw	r26, r20
     782:	c9 01       	movw	r24, r18
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	a1 09       	sbc	r26, r1
     788:	b1 09       	sbc	r27, r1
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	f1 e0       	ldi	r31, 0x01	; 1
     78e:	af 07       	cpc	r26, r31
     790:	b1 05       	cpc	r27, r1
     792:	50 f4       	brcc	.+20     	; 0x7a8 <calculateTopRegister+0x9a>
     794:	4a ef       	ldi	r20, 0xFA	; 250
     796:	5f ef       	ldi	r21, 0xFF	; 255
     798:	6f ef       	ldi	r22, 0xFF	; 255
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	f7 01       	movw	r30, r14
     79e:	40 83       	st	Z, r20
     7a0:	51 83       	std	Z+1, r21	; 0x01
     7a2:	62 83       	std	Z+2, r22	; 0x02
     7a4:	73 83       	std	Z+3, r23	; 0x03
     7a6:	0d c1       	rjmp	.+538    	; 0x9c2 <calculateTopRegister+0x2b4>
     7a8:	68 e4       	ldi	r22, 0x48	; 72
     7aa:	78 ee       	ldi	r23, 0xE8	; 232
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	a5 01       	movw	r20, r10
     7b2:	94 01       	movw	r18, r8
     7b4:	bf d7       	rcall	.+3966   	; 0x1734 <__udivmodsi4>
     7b6:	da 01       	movw	r26, r20
     7b8:	c9 01       	movw	r24, r18
     7ba:	01 97       	sbiw	r24, 0x01	; 1
     7bc:	a1 09       	sbc	r26, r1
     7be:	b1 09       	sbc	r27, r1
     7c0:	00 97       	sbiw	r24, 0x00	; 0
     7c2:	f1 e0       	ldi	r31, 0x01	; 1
     7c4:	af 07       	cpc	r26, r31
     7c6:	b1 05       	cpc	r27, r1
     7c8:	50 f4       	brcc	.+20     	; 0x7de <calculateTopRegister+0xd0>
     7ca:	4c ef       	ldi	r20, 0xFC	; 252
     7cc:	5f ef       	ldi	r21, 0xFF	; 255
     7ce:	6f ef       	ldi	r22, 0xFF	; 255
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	f7 01       	movw	r30, r14
     7d4:	40 83       	st	Z, r20
     7d6:	51 83       	std	Z+1, r21	; 0x01
     7d8:	62 83       	std	Z+2, r22	; 0x02
     7da:	73 83       	std	Z+3, r23	; 0x03
     7dc:	f2 c0       	rjmp	.+484    	; 0x9c2 <calculateTopRegister+0x2b4>
     7de:	62 e1       	ldi	r22, 0x12	; 18
     7e0:	7a e7       	ldi	r23, 0x7A	; 122
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	a5 01       	movw	r20, r10
     7e8:	94 01       	movw	r18, r8
     7ea:	a4 d7       	rcall	.+3912   	; 0x1734 <__udivmodsi4>
     7ec:	da 01       	movw	r26, r20
     7ee:	c9 01       	movw	r24, r18
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	a1 09       	sbc	r26, r1
     7f4:	b1 09       	sbc	r27, r1
     7f6:	00 97       	sbiw	r24, 0x00	; 0
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	af 07       	cpc	r26, r31
     7fc:	b1 05       	cpc	r27, r1
     7fe:	50 f4       	brcc	.+20     	; 0x814 <calculateTopRegister+0x106>
     800:	4e ef       	ldi	r20, 0xFE	; 254
     802:	5f ef       	ldi	r21, 0xFF	; 255
     804:	6f ef       	ldi	r22, 0xFF	; 255
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	f7 01       	movw	r30, r14
     80a:	40 83       	st	Z, r20
     80c:	51 83       	std	Z+1, r21	; 0x01
     80e:	62 83       	std	Z+2, r22	; 0x02
     810:	73 83       	std	Z+3, r23	; 0x03
     812:	d7 c0       	rjmp	.+430    	; 0x9c2 <calculateTopRegister+0x2b4>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	9f ef       	ldi	r25, 0xFF	; 255
     818:	af ef       	ldi	r26, 0xFF	; 255
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	f7 01       	movw	r30, r14
     81e:	80 83       	st	Z, r24
     820:	91 83       	std	Z+1, r25	; 0x01
     822:	a2 83       	std	Z+2, r26	; 0x02
     824:	b3 83       	std	Z+3, r27	; 0x03
     826:	64 e8       	ldi	r22, 0x84	; 132
     828:	7e e1       	ldi	r23, 0x1E	; 30
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a5 01       	movw	r20, r10
     830:	94 01       	movw	r18, r8
     832:	80 d7       	rcall	.+3840   	; 0x1734 <__udivmodsi4>
     834:	da 01       	movw	r26, r20
     836:	c9 01       	movw	r24, r18
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	a1 09       	sbc	r26, r1
     83c:	b1 09       	sbc	r27, r1
     83e:	c1 c0       	rjmp	.+386    	; 0x9c2 <calculateTopRegister+0x2b4>
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	72 e1       	ldi	r23, 0x12	; 18
     844:	8a e7       	ldi	r24, 0x7A	; 122
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	a9 01       	movw	r20, r18
     84a:	98 01       	movw	r18, r16
     84c:	73 d7       	rcall	.+3814   	; 0x1734 <__udivmodsi4>
     84e:	da 01       	movw	r26, r20
     850:	c9 01       	movw	r24, r18
     852:	01 97       	sbiw	r24, 0x01	; 1
     854:	a1 09       	sbc	r26, r1
     856:	b1 09       	sbc	r27, r1
     858:	8f 3f       	cpi	r24, 0xFF	; 255
     85a:	91 05       	cpc	r25, r1
     85c:	a1 05       	cpc	r26, r1
     85e:	b1 05       	cpc	r27, r1
     860:	09 f0       	breq	.+2      	; 0x864 <calculateTopRegister+0x156>
     862:	50 f4       	brcc	.+20     	; 0x878 <calculateTopRegister+0x16a>
     864:	49 ef       	ldi	r20, 0xF9	; 249
     866:	5f ef       	ldi	r21, 0xFF	; 255
     868:	6f ef       	ldi	r22, 0xFF	; 255
     86a:	70 e0       	ldi	r23, 0x00	; 0
     86c:	f7 01       	movw	r30, r14
     86e:	40 83       	st	Z, r20
     870:	51 83       	std	Z+1, r21	; 0x01
     872:	62 83       	std	Z+2, r22	; 0x02
     874:	73 83       	std	Z+3, r23	; 0x03
     876:	a5 c0       	rjmp	.+330    	; 0x9c2 <calculateTopRegister+0x2b4>
     878:	60 e4       	ldi	r22, 0x40	; 64
     87a:	72 e4       	ldi	r23, 0x42	; 66
     87c:	8f e0       	ldi	r24, 0x0F	; 15
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	a5 01       	movw	r20, r10
     882:	94 01       	movw	r18, r8
     884:	57 d7       	rcall	.+3758   	; 0x1734 <__udivmodsi4>
     886:	da 01       	movw	r26, r20
     888:	c9 01       	movw	r24, r18
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8f 3f       	cpi	r24, 0xFF	; 255
     892:	91 05       	cpc	r25, r1
     894:	a1 05       	cpc	r26, r1
     896:	b1 05       	cpc	r27, r1
     898:	09 f0       	breq	.+2      	; 0x89c <calculateTopRegister+0x18e>
     89a:	50 f4       	brcc	.+20     	; 0x8b0 <calculateTopRegister+0x1a2>
     89c:	4a ef       	ldi	r20, 0xFA	; 250
     89e:	5f ef       	ldi	r21, 0xFF	; 255
     8a0:	6f ef       	ldi	r22, 0xFF	; 255
     8a2:	70 e0       	ldi	r23, 0x00	; 0
     8a4:	f7 01       	movw	r30, r14
     8a6:	40 83       	st	Z, r20
     8a8:	51 83       	std	Z+1, r21	; 0x01
     8aa:	62 83       	std	Z+2, r22	; 0x02
     8ac:	73 83       	std	Z+3, r23	; 0x03
     8ae:	89 c0       	rjmp	.+274    	; 0x9c2 <calculateTopRegister+0x2b4>
     8b0:	60 e9       	ldi	r22, 0x90	; 144
     8b2:	70 ed       	ldi	r23, 0xD0	; 208
     8b4:	83 e0       	ldi	r24, 0x03	; 3
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	a5 01       	movw	r20, r10
     8ba:	94 01       	movw	r18, r8
     8bc:	3b d7       	rcall	.+3702   	; 0x1734 <__udivmodsi4>
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	a1 09       	sbc	r26, r1
     8c6:	b1 09       	sbc	r27, r1
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	91 05       	cpc	r25, r1
     8cc:	a1 05       	cpc	r26, r1
     8ce:	b1 05       	cpc	r27, r1
     8d0:	09 f0       	breq	.+2      	; 0x8d4 <calculateTopRegister+0x1c6>
     8d2:	50 f4       	brcc	.+20     	; 0x8e8 <calculateTopRegister+0x1da>
     8d4:	4b ef       	ldi	r20, 0xFB	; 251
     8d6:	5f ef       	ldi	r21, 0xFF	; 255
     8d8:	6f ef       	ldi	r22, 0xFF	; 255
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	f7 01       	movw	r30, r14
     8de:	40 83       	st	Z, r20
     8e0:	51 83       	std	Z+1, r21	; 0x01
     8e2:	62 83       	std	Z+2, r22	; 0x02
     8e4:	73 83       	std	Z+3, r23	; 0x03
     8e6:	6d c0       	rjmp	.+218    	; 0x9c2 <calculateTopRegister+0x2b4>
     8e8:	68 e4       	ldi	r22, 0x48	; 72
     8ea:	78 ee       	ldi	r23, 0xE8	; 232
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a5 01       	movw	r20, r10
     8f2:	94 01       	movw	r18, r8
     8f4:	1f d7       	rcall	.+3646   	; 0x1734 <__udivmodsi4>
     8f6:	da 01       	movw	r26, r20
     8f8:	c9 01       	movw	r24, r18
     8fa:	01 97       	sbiw	r24, 0x01	; 1
     8fc:	a1 09       	sbc	r26, r1
     8fe:	b1 09       	sbc	r27, r1
     900:	8f 3f       	cpi	r24, 0xFF	; 255
     902:	91 05       	cpc	r25, r1
     904:	a1 05       	cpc	r26, r1
     906:	b1 05       	cpc	r27, r1
     908:	09 f0       	breq	.+2      	; 0x90c <calculateTopRegister+0x1fe>
     90a:	50 f4       	brcc	.+20     	; 0x920 <calculateTopRegister+0x212>
     90c:	4c ef       	ldi	r20, 0xFC	; 252
     90e:	5f ef       	ldi	r21, 0xFF	; 255
     910:	6f ef       	ldi	r22, 0xFF	; 255
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	f7 01       	movw	r30, r14
     916:	40 83       	st	Z, r20
     918:	51 83       	std	Z+1, r21	; 0x01
     91a:	62 83       	std	Z+2, r22	; 0x02
     91c:	73 83       	std	Z+3, r23	; 0x03
     91e:	51 c0       	rjmp	.+162    	; 0x9c2 <calculateTopRegister+0x2b4>
     920:	64 e2       	ldi	r22, 0x24	; 36
     922:	74 ef       	ldi	r23, 0xF4	; 244
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a5 01       	movw	r20, r10
     92a:	94 01       	movw	r18, r8
     92c:	03 d7       	rcall	.+3590   	; 0x1734 <__udivmodsi4>
     92e:	da 01       	movw	r26, r20
     930:	c9 01       	movw	r24, r18
     932:	01 97       	sbiw	r24, 0x01	; 1
     934:	a1 09       	sbc	r26, r1
     936:	b1 09       	sbc	r27, r1
     938:	8f 3f       	cpi	r24, 0xFF	; 255
     93a:	91 05       	cpc	r25, r1
     93c:	a1 05       	cpc	r26, r1
     93e:	b1 05       	cpc	r27, r1
     940:	09 f0       	breq	.+2      	; 0x944 <calculateTopRegister+0x236>
     942:	50 f4       	brcc	.+20     	; 0x958 <calculateTopRegister+0x24a>
     944:	4d ef       	ldi	r20, 0xFD	; 253
     946:	5f ef       	ldi	r21, 0xFF	; 255
     948:	6f ef       	ldi	r22, 0xFF	; 255
     94a:	70 e0       	ldi	r23, 0x00	; 0
     94c:	f7 01       	movw	r30, r14
     94e:	40 83       	st	Z, r20
     950:	51 83       	std	Z+1, r21	; 0x01
     952:	62 83       	std	Z+2, r22	; 0x02
     954:	73 83       	std	Z+3, r23	; 0x03
     956:	35 c0       	rjmp	.+106    	; 0x9c2 <calculateTopRegister+0x2b4>
     958:	62 e1       	ldi	r22, 0x12	; 18
     95a:	7a e7       	ldi	r23, 0x7A	; 122
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	a5 01       	movw	r20, r10
     962:	94 01       	movw	r18, r8
     964:	e7 d6       	rcall	.+3534   	; 0x1734 <__udivmodsi4>
     966:	da 01       	movw	r26, r20
     968:	c9 01       	movw	r24, r18
     96a:	01 97       	sbiw	r24, 0x01	; 1
     96c:	a1 09       	sbc	r26, r1
     96e:	b1 09       	sbc	r27, r1
     970:	8f 3f       	cpi	r24, 0xFF	; 255
     972:	91 05       	cpc	r25, r1
     974:	a1 05       	cpc	r26, r1
     976:	b1 05       	cpc	r27, r1
     978:	09 f0       	breq	.+2      	; 0x97c <calculateTopRegister+0x26e>
     97a:	50 f4       	brcc	.+20     	; 0x990 <calculateTopRegister+0x282>
     97c:	4e ef       	ldi	r20, 0xFE	; 254
     97e:	5f ef       	ldi	r21, 0xFF	; 255
     980:	6f ef       	ldi	r22, 0xFF	; 255
     982:	70 e0       	ldi	r23, 0x00	; 0
     984:	f7 01       	movw	r30, r14
     986:	40 83       	st	Z, r20
     988:	51 83       	std	Z+1, r21	; 0x01
     98a:	62 83       	std	Z+2, r22	; 0x02
     98c:	73 83       	std	Z+3, r23	; 0x03
     98e:	19 c0       	rjmp	.+50     	; 0x9c2 <calculateTopRegister+0x2b4>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	9f ef       	ldi	r25, 0xFF	; 255
     994:	af ef       	ldi	r26, 0xFF	; 255
     996:	b0 e0       	ldi	r27, 0x00	; 0
     998:	f7 01       	movw	r30, r14
     99a:	80 83       	st	Z, r24
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	a2 83       	std	Z+2, r26	; 0x02
     9a0:	b3 83       	std	Z+3, r27	; 0x03
     9a2:	64 e8       	ldi	r22, 0x84	; 132
     9a4:	7e e1       	ldi	r23, 0x1E	; 30
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a5 01       	movw	r20, r10
     9ac:	94 01       	movw	r18, r8
     9ae:	c2 d6       	rcall	.+3460   	; 0x1734 <__udivmodsi4>
     9b0:	da 01       	movw	r26, r20
     9b2:	c9 01       	movw	r24, r18
     9b4:	01 97       	sbiw	r24, 0x01	; 1
     9b6:	a1 09       	sbc	r26, r1
     9b8:	b1 09       	sbc	r27, r1
     9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <calculateTopRegister+0x2b4>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	dc 01       	movw	r26, r24
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	ff 90       	pop	r15
     9d6:	ef 90       	pop	r14
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	9f 90       	pop	r9
     9de:	8f 90       	pop	r8
     9e0:	08 95       	ret

000009e2 <__vector_15>:
     9e2:	1f 92       	push	r1
     9e4:	0f 92       	push	r0
     9e6:	0f b6       	in	r0, 0x3f	; 63
     9e8:	0f 92       	push	r0
     9ea:	11 24       	eor	r1, r1
     9ec:	0b b6       	in	r0, 0x3b	; 59
     9ee:	0f 92       	push	r0
     9f0:	2f 93       	push	r18
     9f2:	3f 93       	push	r19
     9f4:	4f 93       	push	r20
     9f6:	5f 93       	push	r21
     9f8:	6f 93       	push	r22
     9fa:	7f 93       	push	r23
     9fc:	8f 93       	push	r24
     9fe:	9f 93       	push	r25
     a00:	af 93       	push	r26
     a02:	bf 93       	push	r27
     a04:	ef 93       	push	r30
     a06:	ff 93       	push	r31
     a08:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer1Callbacks>
     a0c:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer1Callbacks+0x1>
     a10:	09 95       	icall
     a12:	ff 91       	pop	r31
     a14:	ef 91       	pop	r30
     a16:	bf 91       	pop	r27
     a18:	af 91       	pop	r26
     a1a:	9f 91       	pop	r25
     a1c:	8f 91       	pop	r24
     a1e:	7f 91       	pop	r23
     a20:	6f 91       	pop	r22
     a22:	5f 91       	pop	r21
     a24:	4f 91       	pop	r20
     a26:	3f 91       	pop	r19
     a28:	2f 91       	pop	r18
     a2a:	0f 90       	pop	r0
     a2c:	0b be       	out	0x3b, r0	; 59
     a2e:	0f 90       	pop	r0
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	0f 90       	pop	r0
     a34:	1f 90       	pop	r1
     a36:	18 95       	reti

00000a38 <__vector_13>:
     a38:	1f 92       	push	r1
     a3a:	0f 92       	push	r0
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	0f 92       	push	r0
     a40:	11 24       	eor	r1, r1
     a42:	0b b6       	in	r0, 0x3b	; 59
     a44:	0f 92       	push	r0
     a46:	0f 93       	push	r16
     a48:	1f 93       	push	r17
     a4a:	2f 93       	push	r18
     a4c:	3f 93       	push	r19
     a4e:	4f 93       	push	r20
     a50:	5f 93       	push	r21
     a52:	6f 93       	push	r22
     a54:	7f 93       	push	r23
     a56:	8f 93       	push	r24
     a58:	9f 93       	push	r25
     a5a:	af 93       	push	r26
     a5c:	bf 93       	push	r27
     a5e:	cf 93       	push	r28
     a60:	df 93       	push	r29
     a62:	ef 93       	push	r30
     a64:	ff 93       	push	r31
     a66:	c1 e8       	ldi	r28, 0x81	; 129
     a68:	d0 e0       	ldi	r29, 0x00	; 0
     a6a:	88 81       	ld	r24, Y
     a6c:	64 e0       	ldi	r22, 0x04	; 4
     a6e:	cd dc       	rcall	.-1638   	; 0x40a <checkBit>
     a70:	18 2f       	mov	r17, r24
     a72:	88 81       	ld	r24, Y
     a74:	63 e0       	ldi	r22, 0x03	; 3
     a76:	c9 dc       	rcall	.-1646   	; 0x40a <checkBit>
     a78:	c1 2f       	mov	r28, r17
     a7a:	cc 0f       	add	r28, r28
     a7c:	cc 0f       	add	r28, r28
     a7e:	cc 0f       	add	r28, r28
     a80:	24 e0       	ldi	r18, 0x04	; 4
     a82:	82 9f       	mul	r24, r18
     a84:	c0 01       	movw	r24, r0
     a86:	11 24       	eor	r1, r1
     a88:	c8 2b       	or	r28, r24
     a8a:	00 e8       	ldi	r16, 0x80	; 128
     a8c:	10 e0       	ldi	r17, 0x00	; 0
     a8e:	f8 01       	movw	r30, r16
     a90:	80 81       	ld	r24, Z
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	ba dc       	rcall	.-1676   	; 0x40a <checkBit>
     a96:	d8 2f       	mov	r29, r24
     a98:	f8 01       	movw	r30, r16
     a9a:	80 81       	ld	r24, Z
     a9c:	60 e0       	ldi	r22, 0x00	; 0
     a9e:	b5 dc       	rcall	.-1686   	; 0x40a <checkBit>
     aa0:	dd 0f       	add	r29, r29
     aa2:	8c 2b       	or	r24, r28
     aa4:	8d 2b       	or	r24, r29
     aa6:	88 30       	cpi	r24, 0x08	; 8
     aa8:	18 f4       	brcc	.+6      	; 0xab0 <__vector_13+0x78>
     aaa:	84 30       	cpi	r24, 0x04	; 4
     aac:	19 f4       	brne	.+6      	; 0xab4 <__vector_13+0x7c>
     aae:	08 c0       	rjmp	.+16     	; 0xac0 <__vector_13+0x88>
     ab0:	80 fd       	sbrc	r24, 0
     ab2:	06 c0       	rjmp	.+12     	; 0xac0 <__vector_13+0x88>
     ab4:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <p_timer1Callbacks+0x2>
     ab8:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <p_timer1Callbacks+0x3>
     abc:	09 95       	icall
     abe:	05 c0       	rjmp	.+10     	; 0xaca <__vector_13+0x92>
     ac0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer1Callbacks>
     ac4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer1Callbacks+0x1>
     ac8:	09 95       	icall
     aca:	ff 91       	pop	r31
     acc:	ef 91       	pop	r30
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	bf 91       	pop	r27
     ad4:	af 91       	pop	r26
     ad6:	9f 91       	pop	r25
     ad8:	8f 91       	pop	r24
     ada:	7f 91       	pop	r23
     adc:	6f 91       	pop	r22
     ade:	5f 91       	pop	r21
     ae0:	4f 91       	pop	r20
     ae2:	3f 91       	pop	r19
     ae4:	2f 91       	pop	r18
     ae6:	1f 91       	pop	r17
     ae8:	0f 91       	pop	r16
     aea:	0f 90       	pop	r0
     aec:	0b be       	out	0x3b, r0	; 59
     aee:	0f 90       	pop	r0
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	0f 90       	pop	r0
     af4:	1f 90       	pop	r1
     af6:	18 95       	reti

00000af8 <__vector_14>:
     af8:	1f 92       	push	r1
     afa:	0f 92       	push	r0
     afc:	0f b6       	in	r0, 0x3f	; 63
     afe:	0f 92       	push	r0
     b00:	11 24       	eor	r1, r1
     b02:	0b b6       	in	r0, 0x3b	; 59
     b04:	0f 92       	push	r0
     b06:	2f 93       	push	r18
     b08:	3f 93       	push	r19
     b0a:	4f 93       	push	r20
     b0c:	5f 93       	push	r21
     b0e:	6f 93       	push	r22
     b10:	7f 93       	push	r23
     b12:	8f 93       	push	r24
     b14:	9f 93       	push	r25
     b16:	af 93       	push	r26
     b18:	bf 93       	push	r27
     b1a:	ef 93       	push	r30
     b1c:	ff 93       	push	r31
     b1e:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <p_timer1Callbacks+0x4>
     b22:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <p_timer1Callbacks+0x5>
     b26:	09 95       	icall
     b28:	ff 91       	pop	r31
     b2a:	ef 91       	pop	r30
     b2c:	bf 91       	pop	r27
     b2e:	af 91       	pop	r26
     b30:	9f 91       	pop	r25
     b32:	8f 91       	pop	r24
     b34:	7f 91       	pop	r23
     b36:	6f 91       	pop	r22
     b38:	5f 91       	pop	r21
     b3a:	4f 91       	pop	r20
     b3c:	3f 91       	pop	r19
     b3e:	2f 91       	pop	r18
     b40:	0f 90       	pop	r0
     b42:	0b be       	out	0x3b, r0	; 59
     b44:	0f 90       	pop	r0
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	0f 90       	pop	r0
     b4a:	1f 90       	pop	r1
     b4c:	18 95       	reti

00000b4e <__vector_12>:
     b4e:	1f 92       	push	r1
     b50:	0f 92       	push	r0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	0f 92       	push	r0
     b56:	11 24       	eor	r1, r1
     b58:	0b b6       	in	r0, 0x3b	; 59
     b5a:	0f 92       	push	r0
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	2f 93       	push	r18
     b62:	3f 93       	push	r19
     b64:	4f 93       	push	r20
     b66:	5f 93       	push	r21
     b68:	6f 93       	push	r22
     b6a:	7f 93       	push	r23
     b6c:	8f 93       	push	r24
     b6e:	9f 93       	push	r25
     b70:	af 93       	push	r26
     b72:	bf 93       	push	r27
     b74:	cf 93       	push	r28
     b76:	df 93       	push	r29
     b78:	ef 93       	push	r30
     b7a:	ff 93       	push	r31
     b7c:	c1 e8       	ldi	r28, 0x81	; 129
     b7e:	d0 e0       	ldi	r29, 0x00	; 0
     b80:	88 81       	ld	r24, Y
     b82:	64 e0       	ldi	r22, 0x04	; 4
     b84:	42 dc       	rcall	.-1916   	; 0x40a <checkBit>
     b86:	18 2f       	mov	r17, r24
     b88:	88 81       	ld	r24, Y
     b8a:	63 e0       	ldi	r22, 0x03	; 3
     b8c:	3e dc       	rcall	.-1924   	; 0x40a <checkBit>
     b8e:	c1 2f       	mov	r28, r17
     b90:	cc 0f       	add	r28, r28
     b92:	cc 0f       	add	r28, r28
     b94:	cc 0f       	add	r28, r28
     b96:	24 e0       	ldi	r18, 0x04	; 4
     b98:	82 9f       	mul	r24, r18
     b9a:	c0 01       	movw	r24, r0
     b9c:	11 24       	eor	r1, r1
     b9e:	c8 2b       	or	r28, r24
     ba0:	00 e8       	ldi	r16, 0x80	; 128
     ba2:	10 e0       	ldi	r17, 0x00	; 0
     ba4:	f8 01       	movw	r30, r16
     ba6:	80 81       	ld	r24, Z
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	2f dc       	rcall	.-1954   	; 0x40a <checkBit>
     bac:	d8 2f       	mov	r29, r24
     bae:	f8 01       	movw	r30, r16
     bb0:	80 81       	ld	r24, Z
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	2a dc       	rcall	.-1964   	; 0x40a <checkBit>
     bb6:	dd 0f       	add	r29, r29
     bb8:	8c 2b       	or	r24, r28
     bba:	8d 2b       	or	r24, r29
     bbc:	88 30       	cpi	r24, 0x08	; 8
     bbe:	10 f0       	brcs	.+4      	; 0xbc4 <__vector_12+0x76>
     bc0:	80 ff       	sbrs	r24, 0
     bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <__vector_12+0x82>
     bc4:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <p_timer1Callbacks+0x6>
     bc8:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <p_timer1Callbacks+0x7>
     bcc:	09 95       	icall
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__vector_12+0x8c>
     bd0:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer1Callbacks>
     bd4:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer1Callbacks+0x1>
     bd8:	09 95       	icall
     bda:	ff 91       	pop	r31
     bdc:	ef 91       	pop	r30
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	bf 91       	pop	r27
     be4:	af 91       	pop	r26
     be6:	9f 91       	pop	r25
     be8:	8f 91       	pop	r24
     bea:	7f 91       	pop	r23
     bec:	6f 91       	pop	r22
     bee:	5f 91       	pop	r21
     bf0:	4f 91       	pop	r20
     bf2:	3f 91       	pop	r19
     bf4:	2f 91       	pop	r18
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	0f 90       	pop	r0
     bfc:	0b be       	out	0x3b, r0	; 59
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	0f 90       	pop	r0
     c04:	1f 90       	pop	r1
     c06:	18 95       	reti

00000c08 <__vector_11>:
     c08:	1f 92       	push	r1
     c0a:	0f 92       	push	r0
     c0c:	0f b6       	in	r0, 0x3f	; 63
     c0e:	0f 92       	push	r0
     c10:	11 24       	eor	r1, r1
     c12:	0b b6       	in	r0, 0x3b	; 59
     c14:	0f 92       	push	r0
     c16:	2f 93       	push	r18
     c18:	3f 93       	push	r19
     c1a:	4f 93       	push	r20
     c1c:	5f 93       	push	r21
     c1e:	6f 93       	push	r22
     c20:	7f 93       	push	r23
     c22:	8f 93       	push	r24
     c24:	9f 93       	push	r25
     c26:	af 93       	push	r26
     c28:	bf 93       	push	r27
     c2a:	ef 93       	push	r30
     c2c:	ff 93       	push	r31
     c2e:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer2Callbacks>
     c32:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer2Callbacks+0x1>
     c36:	09 95       	icall
     c38:	ff 91       	pop	r31
     c3a:	ef 91       	pop	r30
     c3c:	bf 91       	pop	r27
     c3e:	af 91       	pop	r26
     c40:	9f 91       	pop	r25
     c42:	8f 91       	pop	r24
     c44:	7f 91       	pop	r23
     c46:	6f 91       	pop	r22
     c48:	5f 91       	pop	r21
     c4a:	4f 91       	pop	r20
     c4c:	3f 91       	pop	r19
     c4e:	2f 91       	pop	r18
     c50:	0f 90       	pop	r0
     c52:	0b be       	out	0x3b, r0	; 59
     c54:	0f 90       	pop	r0
     c56:	0f be       	out	0x3f, r0	; 63
     c58:	0f 90       	pop	r0
     c5a:	1f 90       	pop	r1
     c5c:	18 95       	reti

00000c5e <__vector_9>:
     c5e:	1f 92       	push	r1
     c60:	0f 92       	push	r0
     c62:	0f b6       	in	r0, 0x3f	; 63
     c64:	0f 92       	push	r0
     c66:	11 24       	eor	r1, r1
     c68:	0b b6       	in	r0, 0x3b	; 59
     c6a:	0f 92       	push	r0
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	ef 93       	push	r30
     c82:	ff 93       	push	r31
     c84:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     c88:	63 e0       	ldi	r22, 0x03	; 3
     c8a:	bf db       	rcall	.-2178   	; 0x40a <checkBit>
     c8c:	81 11       	cpse	r24, r1
     c8e:	0b c0       	rjmp	.+22     	; 0xca6 <__vector_9+0x48>
     c90:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     c94:	83 70       	andi	r24, 0x03	; 3
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	31 f0       	breq	.+12     	; 0xca6 <__vector_9+0x48>
     c9a:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer2Callbacks+0x2>
     c9e:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer2Callbacks+0x3>
     ca2:	09 95       	icall
     ca4:	05 c0       	rjmp	.+10     	; 0xcb0 <__vector_9+0x52>
     ca6:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer2Callbacks>
     caa:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer2Callbacks+0x1>
     cae:	09 95       	icall
     cb0:	ff 91       	pop	r31
     cb2:	ef 91       	pop	r30
     cb4:	bf 91       	pop	r27
     cb6:	af 91       	pop	r26
     cb8:	9f 91       	pop	r25
     cba:	8f 91       	pop	r24
     cbc:	7f 91       	pop	r23
     cbe:	6f 91       	pop	r22
     cc0:	5f 91       	pop	r21
     cc2:	4f 91       	pop	r20
     cc4:	3f 91       	pop	r19
     cc6:	2f 91       	pop	r18
     cc8:	0f 90       	pop	r0
     cca:	0b be       	out	0x3b, r0	; 59
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <__vector_10>:
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	0b b6       	in	r0, 0x3b	; 59
     ce2:	0f 92       	push	r0
     ce4:	2f 93       	push	r18
     ce6:	3f 93       	push	r19
     ce8:	4f 93       	push	r20
     cea:	5f 93       	push	r21
     cec:	6f 93       	push	r22
     cee:	7f 93       	push	r23
     cf0:	8f 93       	push	r24
     cf2:	9f 93       	push	r25
     cf4:	af 93       	push	r26
     cf6:	bf 93       	push	r27
     cf8:	ef 93       	push	r30
     cfa:	ff 93       	push	r31
     cfc:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p_timer2Callbacks+0x4>
     d00:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p_timer2Callbacks+0x5>
     d04:	09 95       	icall
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0b be       	out	0x3b, r0	; 59
     d22:	0f 90       	pop	r0
     d24:	0f be       	out	0x3f, r0	; 63
     d26:	0f 90       	pop	r0
     d28:	1f 90       	pop	r1
     d2a:	18 95       	reti

00000d2c <timer_init>:
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	29 97       	sbiw	r28, 0x09	; 9
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	4d 83       	std	Y+5, r20	; 0x05
     d4a:	5e 83       	std	Y+6, r21	; 0x06
     d4c:	6f 83       	std	Y+7, r22	; 0x07
     d4e:	78 87       	std	Y+8, r23	; 0x08
     d50:	89 87       	std	Y+9, r24	; 0x09
     d52:	0e 81       	ldd	r16, Y+6	; 0x06
     d54:	1f 81       	ldd	r17, Y+7	; 0x07
     d56:	28 85       	ldd	r18, Y+8	; 0x08
     d58:	39 85       	ldd	r19, Y+9	; 0x09
     d5a:	19 82       	std	Y+1, r1	; 0x01
     d5c:	1a 82       	std	Y+2, r1	; 0x02
     d5e:	1b 82       	std	Y+3, r1	; 0x03
     d60:	1c 82       	std	Y+4, r1	; 0x04
     d62:	41 30       	cpi	r20, 0x01	; 1
     d64:	21 f0       	breq	.+8      	; 0xd6e <timer_init+0x42>
     d66:	42 30       	cpi	r20, 0x02	; 2
     d68:	09 f4       	brne	.+2      	; 0xd6c <timer_init+0x40>
     d6a:	95 c0       	rjmp	.+298    	; 0xe96 <timer_init+0x16a>
     d6c:	1d c1       	rjmp	.+570    	; 0xfa8 <timer_init+0x27c>
     d6e:	09 3f       	cpi	r16, 0xF9	; 249
     d70:	8f ef       	ldi	r24, 0xFF	; 255
     d72:	18 07       	cpc	r17, r24
     d74:	28 07       	cpc	r18, r24
     d76:	31 05       	cpc	r19, r1
     d78:	28 f0       	brcs	.+10     	; 0xd84 <timer_init+0x58>
     d7a:	09 83       	std	Y+1, r16	; 0x01
     d7c:	1a 83       	std	Y+2, r17	; 0x02
     d7e:	2b 83       	std	Y+3, r18	; 0x03
     d80:	3c 83       	std	Y+4, r19	; 0x04
     d82:	15 c0       	rjmp	.+42     	; 0xdae <timer_init+0x82>
     d84:	ce 01       	movw	r24, r28
     d86:	01 96       	adiw	r24, 0x01	; 1
     d88:	7c 01       	movw	r14, r24
     d8a:	4d 81       	ldd	r20, Y+5	; 0x05
     d8c:	5e 81       	ldd	r21, Y+6	; 0x06
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	bc dc       	rcall	.-1672   	; 0x70e <calculateTopRegister>
     d96:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d9a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d9e:	64 e0       	ldi	r22, 0x04	; 4
     da0:	81 e8       	ldi	r24, 0x81	; 129
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	19 db       	rcall	.-2510   	; 0x3d8 <setBit>
     da6:	63 e0       	ldi	r22, 0x03	; 3
     da8:	81 e8       	ldi	r24, 0x81	; 129
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	15 db       	rcall	.-2518   	; 0x3d8 <setBit>
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	9a 81       	ldd	r25, Y+2	; 0x02
     db2:	ab 81       	ldd	r26, Y+3	; 0x03
     db4:	bc 81       	ldd	r27, Y+4	; 0x04
     db6:	8c 3f       	cpi	r24, 0xFC	; 252
     db8:	2f ef       	ldi	r18, 0xFF	; 255
     dba:	92 07       	cpc	r25, r18
     dbc:	a2 07       	cpc	r26, r18
     dbe:	b1 05       	cpc	r27, r1
     dc0:	59 f1       	breq	.+86     	; 0xe18 <timer_init+0xec>
     dc2:	60 f4       	brcc	.+24     	; 0xddc <timer_init+0xb0>
     dc4:	89 3f       	cpi	r24, 0xF9	; 249
     dc6:	2f ef       	ldi	r18, 0xFF	; 255
     dc8:	92 07       	cpc	r25, r18
     dca:	a2 07       	cpc	r26, r18
     dcc:	b1 05       	cpc	r27, r1
     dce:	91 f0       	breq	.+36     	; 0xdf4 <timer_init+0xc8>
     dd0:	8a 3f       	cpi	r24, 0xFA	; 250
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	af 4f       	sbci	r26, 0xFF	; 255
     dd6:	b1 05       	cpc	r27, r1
     dd8:	b1 f0       	breq	.+44     	; 0xe06 <timer_init+0xda>
     dda:	38 c0       	rjmp	.+112    	; 0xe4c <timer_init+0x120>
     ddc:	8e 3f       	cpi	r24, 0xFE	; 254
     dde:	2f ef       	ldi	r18, 0xFF	; 255
     de0:	92 07       	cpc	r25, r18
     de2:	a2 07       	cpc	r26, r18
     de4:	b1 05       	cpc	r27, r1
     de6:	09 f1       	breq	.+66     	; 0xe2a <timer_init+0xfe>
     de8:	8f 3f       	cpi	r24, 0xFF	; 255
     dea:	9f 4f       	sbci	r25, 0xFF	; 255
     dec:	af 4f       	sbci	r26, 0xFF	; 255
     dee:	b1 05       	cpc	r27, r1
     df0:	29 f1       	breq	.+74     	; 0xe3c <timer_init+0x110>
     df2:	2c c0       	rjmp	.+88     	; 0xe4c <timer_init+0x120>
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	a0 e0       	ldi	r26, 0x00	; 0
     dfa:	b0 e0       	ldi	r27, 0x00	; 0
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	9a 83       	std	Y+2, r25	; 0x02
     e00:	ab 83       	std	Y+3, r26	; 0x03
     e02:	bc 83       	std	Y+4, r27	; 0x04
     e04:	23 c0       	rjmp	.+70     	; 0xe4c <timer_init+0x120>
     e06:	82 e0       	ldi	r24, 0x02	; 2
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	a0 e0       	ldi	r26, 0x00	; 0
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	89 83       	std	Y+1, r24	; 0x01
     e10:	9a 83       	std	Y+2, r25	; 0x02
     e12:	ab 83       	std	Y+3, r26	; 0x03
     e14:	bc 83       	std	Y+4, r27	; 0x04
     e16:	1a c0       	rjmp	.+52     	; 0xe4c <timer_init+0x120>
     e18:	83 e0       	ldi	r24, 0x03	; 3
     e1a:	90 e0       	ldi	r25, 0x00	; 0
     e1c:	a0 e0       	ldi	r26, 0x00	; 0
     e1e:	b0 e0       	ldi	r27, 0x00	; 0
     e20:	89 83       	std	Y+1, r24	; 0x01
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	ab 83       	std	Y+3, r26	; 0x03
     e26:	bc 83       	std	Y+4, r27	; 0x04
     e28:	11 c0       	rjmp	.+34     	; 0xe4c <timer_init+0x120>
     e2a:	84 e0       	ldi	r24, 0x04	; 4
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	a0 e0       	ldi	r26, 0x00	; 0
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	89 83       	std	Y+1, r24	; 0x01
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	ab 83       	std	Y+3, r26	; 0x03
     e38:	bc 83       	std	Y+4, r27	; 0x04
     e3a:	08 c0       	rjmp	.+16     	; 0xe4c <timer_init+0x120>
     e3c:	85 e0       	ldi	r24, 0x05	; 5
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e0       	ldi	r26, 0x00	; 0
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	89 83       	std	Y+1, r24	; 0x01
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	ab 83       	std	Y+3, r26	; 0x03
     e4a:	bc 83       	std	Y+4, r27	; 0x04
     e4c:	49 81       	ldd	r20, Y+1	; 0x01
     e4e:	5a 81       	ldd	r21, Y+2	; 0x02
     e50:	6b 81       	ldd	r22, Y+3	; 0x03
     e52:	7c 81       	ldd	r23, Y+4	; 0x04
     e54:	76 95       	lsr	r23
     e56:	67 95       	ror	r22
     e58:	57 95       	ror	r21
     e5a:	47 95       	ror	r20
     e5c:	76 95       	lsr	r23
     e5e:	67 95       	ror	r22
     e60:	57 95       	ror	r21
     e62:	47 95       	ror	r20
     e64:	41 70       	andi	r20, 0x01	; 1
     e66:	62 e0       	ldi	r22, 0x02	; 2
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	9d da       	rcall	.-2758   	; 0x3a8 <updateBit>
     e6e:	49 81       	ldd	r20, Y+1	; 0x01
     e70:	5a 81       	ldd	r21, Y+2	; 0x02
     e72:	6b 81       	ldd	r22, Y+3	; 0x03
     e74:	7c 81       	ldd	r23, Y+4	; 0x04
     e76:	76 95       	lsr	r23
     e78:	67 95       	ror	r22
     e7a:	57 95       	ror	r21
     e7c:	47 95       	ror	r20
     e7e:	41 70       	andi	r20, 0x01	; 1
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	80 e3       	ldi	r24, 0x30	; 48
     e84:	91 e0       	ldi	r25, 0x01	; 1
     e86:	90 da       	rcall	.-2784   	; 0x3a8 <updateBit>
     e88:	49 81       	ldd	r20, Y+1	; 0x01
     e8a:	41 70       	andi	r20, 0x01	; 1
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	80 e3       	ldi	r24, 0x30	; 48
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	8a da       	rcall	.-2796   	; 0x3a8 <updateBit>
     e94:	89 c0       	rjmp	.+274    	; 0xfa8 <timer_init+0x27c>
     e96:	09 3f       	cpi	r16, 0xF9	; 249
     e98:	8f ef       	ldi	r24, 0xFF	; 255
     e9a:	18 07       	cpc	r17, r24
     e9c:	28 07       	cpc	r18, r24
     e9e:	31 05       	cpc	r19, r1
     ea0:	28 f0       	brcs	.+10     	; 0xeac <timer_init+0x180>
     ea2:	09 83       	std	Y+1, r16	; 0x01
     ea4:	1a 83       	std	Y+2, r17	; 0x02
     ea6:	2b 83       	std	Y+3, r18	; 0x03
     ea8:	3c 83       	std	Y+4, r19	; 0x04
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <timer_init+0x19e>
     eac:	ce 01       	movw	r24, r28
     eae:	01 96       	adiw	r24, 0x01	; 1
     eb0:	7c 01       	movw	r14, r24
     eb2:	4d 81       	ldd	r20, Y+5	; 0x05
     eb4:	5e 81       	ldd	r21, Y+6	; 0x06
     eb6:	6f 81       	ldd	r22, Y+7	; 0x07
     eb8:	78 85       	ldd	r23, Y+8	; 0x08
     eba:	89 85       	ldd	r24, Y+9	; 0x09
     ebc:	28 dc       	rcall	.-1968   	; 0x70e <calculateTopRegister>
     ebe:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	80 eb       	ldi	r24, 0xB0	; 176
     ec6:	90 e0       	ldi	r25, 0x00	; 0
     ec8:	87 da       	rcall	.-2802   	; 0x3d8 <setBit>
     eca:	89 81       	ldd	r24, Y+1	; 0x01
     ecc:	9a 81       	ldd	r25, Y+2	; 0x02
     ece:	ab 81       	ldd	r26, Y+3	; 0x03
     ed0:	bc 81       	ldd	r27, Y+4	; 0x04
     ed2:	fc 01       	movw	r30, r24
     ed4:	37 96       	adiw	r30, 0x07	; 7
     ed6:	e7 30       	cpi	r30, 0x07	; 7
     ed8:	f1 05       	cpc	r31, r1
     eda:	08 f0       	brcs	.+2      	; 0xede <timer_init+0x1b2>
     edc:	41 c0       	rjmp	.+130    	; 0xf60 <timer_init+0x234>
     ede:	ea 5b       	subi	r30, 0xBA	; 186
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	4a c4       	rjmp	.+2196   	; 0x1778 <__tablejump2__>
     ee4:	81 e0       	ldi	r24, 0x01	; 1
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	89 83       	std	Y+1, r24	; 0x01
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	ab 83       	std	Y+3, r26	; 0x03
     ef2:	bc 83       	std	Y+4, r27	; 0x04
     ef4:	35 c0       	rjmp	.+106    	; 0xf60 <timer_init+0x234>
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	b0 e0       	ldi	r27, 0x00	; 0
     efe:	89 83       	std	Y+1, r24	; 0x01
     f00:	9a 83       	std	Y+2, r25	; 0x02
     f02:	ab 83       	std	Y+3, r26	; 0x03
     f04:	bc 83       	std	Y+4, r27	; 0x04
     f06:	2c c0       	rjmp	.+88     	; 0xf60 <timer_init+0x234>
     f08:	83 e0       	ldi	r24, 0x03	; 3
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	9a 83       	std	Y+2, r25	; 0x02
     f14:	ab 83       	std	Y+3, r26	; 0x03
     f16:	bc 83       	std	Y+4, r27	; 0x04
     f18:	23 c0       	rjmp	.+70     	; 0xf60 <timer_init+0x234>
     f1a:	84 e0       	ldi	r24, 0x04	; 4
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	a0 e0       	ldi	r26, 0x00	; 0
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	9a 83       	std	Y+2, r25	; 0x02
     f26:	ab 83       	std	Y+3, r26	; 0x03
     f28:	bc 83       	std	Y+4, r27	; 0x04
     f2a:	1a c0       	rjmp	.+52     	; 0xf60 <timer_init+0x234>
     f2c:	85 e0       	ldi	r24, 0x05	; 5
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	a0 e0       	ldi	r26, 0x00	; 0
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	9a 83       	std	Y+2, r25	; 0x02
     f38:	ab 83       	std	Y+3, r26	; 0x03
     f3a:	bc 83       	std	Y+4, r27	; 0x04
     f3c:	11 c0       	rjmp	.+34     	; 0xf60 <timer_init+0x234>
     f3e:	86 e0       	ldi	r24, 0x06	; 6
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e0       	ldi	r26, 0x00	; 0
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	89 83       	std	Y+1, r24	; 0x01
     f48:	9a 83       	std	Y+2, r25	; 0x02
     f4a:	ab 83       	std	Y+3, r26	; 0x03
     f4c:	bc 83       	std	Y+4, r27	; 0x04
     f4e:	08 c0       	rjmp	.+16     	; 0xf60 <timer_init+0x234>
     f50:	87 e0       	ldi	r24, 0x07	; 7
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	9a 83       	std	Y+2, r25	; 0x02
     f5c:	ab 83       	std	Y+3, r26	; 0x03
     f5e:	bc 83       	std	Y+4, r27	; 0x04
     f60:	49 81       	ldd	r20, Y+1	; 0x01
     f62:	5a 81       	ldd	r21, Y+2	; 0x02
     f64:	6b 81       	ldd	r22, Y+3	; 0x03
     f66:	7c 81       	ldd	r23, Y+4	; 0x04
     f68:	76 95       	lsr	r23
     f6a:	67 95       	ror	r22
     f6c:	57 95       	ror	r21
     f6e:	47 95       	ror	r20
     f70:	76 95       	lsr	r23
     f72:	67 95       	ror	r22
     f74:	57 95       	ror	r21
     f76:	47 95       	ror	r20
     f78:	41 70       	andi	r20, 0x01	; 1
     f7a:	62 e0       	ldi	r22, 0x02	; 2
     f7c:	81 e3       	ldi	r24, 0x31	; 49
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	13 da       	rcall	.-3034   	; 0x3a8 <updateBit>
     f82:	49 81       	ldd	r20, Y+1	; 0x01
     f84:	5a 81       	ldd	r21, Y+2	; 0x02
     f86:	6b 81       	ldd	r22, Y+3	; 0x03
     f88:	7c 81       	ldd	r23, Y+4	; 0x04
     f8a:	76 95       	lsr	r23
     f8c:	67 95       	ror	r22
     f8e:	57 95       	ror	r21
     f90:	47 95       	ror	r20
     f92:	41 70       	andi	r20, 0x01	; 1
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	81 e3       	ldi	r24, 0x31	; 49
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	06 da       	rcall	.-3060   	; 0x3a8 <updateBit>
     f9c:	49 81       	ldd	r20, Y+1	; 0x01
     f9e:	41 70       	andi	r20, 0x01	; 1
     fa0:	60 e0       	ldi	r22, 0x00	; 0
     fa2:	81 e3       	ldi	r24, 0x31	; 49
     fa4:	91 e0       	ldi	r25, 0x01	; 1
     fa6:	00 da       	rcall	.-3072   	; 0x3a8 <updateBit>
     fa8:	29 96       	adiw	r28, 0x09	; 9
     faa:	0f b6       	in	r0, 0x3f	; 63
     fac:	f8 94       	cli
     fae:	de bf       	out	0x3e, r29	; 62
     fb0:	0f be       	out	0x3f, r0	; 63
     fb2:	cd bf       	out	0x3d, r28	; 61
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	ff 90       	pop	r15
     fbe:	ef 90       	pop	r14
     fc0:	08 95       	ret

00000fc2 <timer_start>:
}

void timer_start(timer_struct_t s_timer)
{
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	00 d0       	rcall	.+0      	; 0xfc8 <timer_start+0x6>
     fc8:	00 d0       	rcall	.+0      	; 0xfca <timer_start+0x8>
     fca:	1f 92       	push	r1
     fcc:	cd b7       	in	r28, 0x3d	; 61
     fce:	de b7       	in	r29, 0x3e	; 62
	switch(s_timer.peripheral)
     fd0:	41 30       	cpi	r20, 0x01	; 1
     fd2:	19 f0       	breq	.+6      	; 0xfda <timer_start+0x18>
     fd4:	42 30       	cpi	r20, 0x02	; 2
     fd6:	d1 f0       	breq	.+52     	; 0x100c <timer_start+0x4a>
     fd8:	31 c0       	rjmp	.+98     	; 0x103c <timer_start+0x7a>
			updateBit(&TCCR0B, CS00, (u8_timer0ClockSource & 1));
		#endif
			break;
		case TIMER1:
		#ifdef USING_TIMER1
			updateBit(&TCCR1B, CS12, (u8_timer1ClockSource >> 2) & 1);
     fda:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <u8_timer1ClockSource>
     fde:	42 fb       	bst	r20, 2
     fe0:	44 27       	eor	r20, r20
     fe2:	40 f9       	bld	r20, 0
     fe4:	62 e0       	ldi	r22, 0x02	; 2
     fe6:	81 e8       	ldi	r24, 0x81	; 129
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	de d9       	rcall	.-3140   	; 0x3a8 <updateBit>
			updateBit(&TCCR1B, CS11, (u8_timer1ClockSource >> 1) & 1);
     fec:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <u8_timer1ClockSource>
     ff0:	46 95       	lsr	r20
     ff2:	41 70       	andi	r20, 0x01	; 1
     ff4:	61 e0       	ldi	r22, 0x01	; 1
     ff6:	81 e8       	ldi	r24, 0x81	; 129
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	d6 d9       	rcall	.-3156   	; 0x3a8 <updateBit>
			updateBit(&TCCR1B, CS10, (u8_timer1ClockSource & 1));
     ffc:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <u8_timer1ClockSource>
    1000:	41 70       	andi	r20, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	81 e8       	ldi	r24, 0x81	; 129
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	cf d9       	rcall	.-3170   	; 0x3a8 <updateBit>
		#endif
			break;
    100a:	18 c0       	rjmp	.+48     	; 0x103c <timer_start+0x7a>
		case TIMER2:
		#ifdef USING_TIMER2
			updateBit(&TCCR2B, CS22, (u8_timer2ClockSource >> 2) & 1);
    100c:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <u8_timer2ClockSource>
    1010:	42 fb       	bst	r20, 2
    1012:	44 27       	eor	r20, r20
    1014:	40 f9       	bld	r20, 0
    1016:	62 e0       	ldi	r22, 0x02	; 2
    1018:	81 eb       	ldi	r24, 0xB1	; 177
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	c5 d9       	rcall	.-3190   	; 0x3a8 <updateBit>
			updateBit(&TCCR2B, CS21, (u8_timer2ClockSource >> 1) & 1);
    101e:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <u8_timer2ClockSource>
    1022:	46 95       	lsr	r20
    1024:	41 70       	andi	r20, 0x01	; 1
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	81 eb       	ldi	r24, 0xB1	; 177
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	bd d9       	rcall	.-3206   	; 0x3a8 <updateBit>
			updateBit(&TCCR2B, CS20, (u8_timer2ClockSource & 1));
    102e:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <u8_timer2ClockSource>
    1032:	41 70       	andi	r20, 0x01	; 1
    1034:	60 e0       	ldi	r22, 0x00	; 0
    1036:	81 eb       	ldi	r24, 0xB1	; 177
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	b6 d9       	rcall	.-3220   	; 0x3a8 <updateBit>
			updateBit(&TCCR3B, CS31, (u8_timer3ClockSource >> 1) & 1);
			updateBit(&TCCR3B, CS30, (u8_timer3ClockSource & 1));
		#endif
			break;
	}
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	08 95       	ret

0000104c <timer_stop>:

void timer_stop(timer_struct_t s_timer)
{
    104c:	cf 93       	push	r28
    104e:	df 93       	push	r29
    1050:	00 d0       	rcall	.+0      	; 0x1052 <timer_stop+0x6>
    1052:	00 d0       	rcall	.+0      	; 0x1054 <timer_stop+0x8>
    1054:	1f 92       	push	r1
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
    105a:	49 83       	std	Y+1, r20	; 0x01
    105c:	5a 83       	std	Y+2, r21	; 0x02
    105e:	6b 83       	std	Y+3, r22	; 0x03
    1060:	7c 83       	std	Y+4, r23	; 0x04
    1062:	8d 83       	std	Y+5, r24	; 0x05
	switch(s_timer.peripheral)
    1064:	41 30       	cpi	r20, 0x01	; 1
    1066:	19 f0       	breq	.+6      	; 0x106e <timer_stop+0x22>
    1068:	42 30       	cpi	r20, 0x02	; 2
    106a:	59 f0       	breq	.+22     	; 0x1082 <timer_stop+0x36>
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <timer_stop+0x48>
			TCCR0B = TCCR0B & ~(0b00000111);
		#endif
			break;
		case TIMER1:
		#ifdef USING_TIMER1
			u8_timer1ClockSource = TCCR1B & (0b00000111);
    106e:	e1 e8       	ldi	r30, 0x81	; 129
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	87 70       	andi	r24, 0x07	; 7
    1076:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <u8_timer1ClockSource>
			TCCR1B = TCCR1B & ~(0b00000111);
    107a:	80 81       	ld	r24, Z
    107c:	88 7f       	andi	r24, 0xF8	; 248
    107e:	80 83       	st	Z, r24
		#endif
			break;
    1080:	09 c0       	rjmp	.+18     	; 0x1094 <timer_stop+0x48>
		case TIMER2:
		#ifdef USING_TIMER2
			u8_timer2ClockSource = TCCR2B & (0b00000111);
    1082:	e1 eb       	ldi	r30, 0xB1	; 177
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	87 70       	andi	r24, 0x07	; 7
    108a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <u8_timer2ClockSource>
			TCCR2B = TCCR2B & ~(0b00000111);
    108e:	80 81       	ld	r24, Z
    1090:	88 7f       	andi	r24, 0xF8	; 248
    1092:	80 83       	st	Z, r24
			u8_timer3ClockSource = TCCR3B & (0b00000111);
			TCCR3B = TCCR3B & ~(0b00000111);
		#endif
			break;
	}
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	08 95       	ret

000010a4 <calculateUBRR>:
/************************************************************************/
/* Internal functions                                                   */
/************************************************************************/

u16 calculateUBRR(u32 u32_baudRate, bool *b_usingDoubleSpeed)
{
    10a4:	4f 92       	push	r4
    10a6:	5f 92       	push	r5
    10a8:	6f 92       	push	r6
    10aa:	7f 92       	push	r7
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	cf 93       	push	r28
    10be:	df 93       	push	r29
    10c0:	4b 01       	movw	r8, r22
    10c2:	5c 01       	movw	r10, r24
    10c4:	ea 01       	movw	r28, r20
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    10c6:	0f 2e       	mov	r0, r31
    10c8:	f0 e2       	ldi	r31, 0x20	; 32
    10ca:	4f 2e       	mov	r4, r31
    10cc:	f1 ea       	ldi	r31, 0xA1	; 161
    10ce:	5f 2e       	mov	r5, r31
    10d0:	f7 e0       	ldi	r31, 0x07	; 7
    10d2:	6f 2e       	mov	r6, r31
    10d4:	71 2c       	mov	r7, r1
    10d6:	f0 2d       	mov	r31, r0
    10d8:	c3 01       	movw	r24, r6
    10da:	b2 01       	movw	r22, r4
    10dc:	a5 01       	movw	r20, r10
    10de:	94 01       	movw	r18, r8
    10e0:	29 d3       	rcall	.+1618   	; 0x1734 <__udivmodsi4>
    10e2:	69 01       	movw	r12, r18
    10e4:	7a 01       	movw	r14, r20
	u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
    10e6:	c3 01       	movw	r24, r6
    10e8:	b2 01       	movw	r22, r4
    10ea:	24 d3       	rcall	.+1608   	; 0x1734 <__udivmodsi4>
    10ec:	ca 01       	movw	r24, r20
    10ee:	b9 01       	movw	r22, r18
    10f0:	a5 01       	movw	r20, r10
    10f2:	94 01       	movw	r18, r8
    10f4:	92 d9       	rcall	.-3292   	; 0x41a <calculateError>
    10f6:	44 97       	sbiw	r24, 0x14	; 20
    10f8:	30 f4       	brcc	.+12     	; 0x1106 <calculateUBRR+0x62>
{
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    10fa:	d7 01       	movw	r26, r14
    10fc:	c6 01       	movw	r24, r12
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	a1 09       	sbc	r26, r1
    1102:	b1 09       	sbc	r27, r1
    1104:	0e c0       	rjmp	.+28     	; 0x1122 <calculateUBRR+0x7e>
	u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
	{
		u8_divisor = 8;
		*b_usingDoubleSpeed = TRUE;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	88 83       	st	Y, r24
		u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    110a:	60 e4       	ldi	r22, 0x40	; 64
    110c:	72 e4       	ldi	r23, 0x42	; 66
    110e:	8f e0       	ldi	r24, 0x0F	; 15
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a5 01       	movw	r20, r10
    1114:	94 01       	movw	r18, r8
    1116:	0e d3       	rcall	.+1564   	; 0x1734 <__udivmodsi4>
    1118:	da 01       	movw	r26, r20
    111a:	c9 01       	movw	r24, r18
    111c:	01 97       	sbiw	r24, 0x01	; 1
    111e:	a1 09       	sbc	r26, r1
    1120:	b1 09       	sbc	r27, r1
		u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);
	}
	return u32_ubrr;
}
    1122:	df 91       	pop	r29
    1124:	cf 91       	pop	r28
    1126:	ff 90       	pop	r15
    1128:	ef 90       	pop	r14
    112a:	df 90       	pop	r13
    112c:	cf 90       	pop	r12
    112e:	bf 90       	pop	r11
    1130:	af 90       	pop	r10
    1132:	9f 90       	pop	r9
    1134:	8f 90       	pop	r8
    1136:	7f 90       	pop	r7
    1138:	6f 90       	pop	r6
    113a:	5f 90       	pop	r5
    113c:	4f 90       	pop	r4
    113e:	08 95       	ret

00001140 <__vector_20>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef UART0_INTERRUPT_MODE
ISR(USART0_RX_vect)
{
    1140:	1f 92       	push	r1
    1142:	0f 92       	push	r0
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	0f 92       	push	r0
    1148:	11 24       	eor	r1, r1
    114a:	0b b6       	in	r0, 0x3b	; 59
    114c:	0f 92       	push	r0
    114e:	2f 93       	push	r18
    1150:	3f 93       	push	r19
    1152:	4f 93       	push	r20
    1154:	5f 93       	push	r21
    1156:	6f 93       	push	r22
    1158:	7f 93       	push	r23
    115a:	8f 93       	push	r24
    115c:	9f 93       	push	r25
    115e:	af 93       	push	r26
    1160:	bf 93       	push	r27
    1162:	ef 93       	push	r30
    1164:	ff 93       	push	r31
	if (checkBit(UCSR0B, UCSZ02) == SET)
    1166:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    116a:	62 e0       	ldi	r22, 0x02	; 2
    116c:	4e d9       	rcall	.-3428   	; 0x40a <checkBit>
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	99 f4       	brne	.+38     	; 0x1198 <__vector_20+0x58>
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = ((UCSR0B & (1 << RXB80)) << 8) | UDR0;
    1172:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    117c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1180:	82 70       	andi	r24, 0x02	; 2
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	98 2f       	mov	r25, r24
    1186:	88 27       	eor	r24, r24
    1188:	82 2b       	or	r24, r18
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	e5 5c       	subi	r30, 0xC5	; 197
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
    1196:	0c c0       	rjmp	.+24     	; 0x11b0 <__vector_20+0x70>
	else
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = UDR0;
    1198:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	ee 0f       	add	r30, r30
    11a6:	ff 1f       	adc	r31, r31
    11a8:	e5 5c       	subi	r30, 0xC5	; 197
    11aa:	fe 4f       	sbci	r31, 0xFE	; 254
    11ac:	91 83       	std	Z+1, r25	; 0x01
    11ae:	80 83       	st	Z, r24
	if (u8_rx0LastReceivedIndex < UART_RX0_BUFFER_MAX_SIZE - 1)
    11b0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    11b4:	89 30       	cpi	r24, 0x09	; 9
    11b6:	30 f4       	brcc	.+12     	; 0x11c4 <__vector_20+0x84>
		u8_rx0LastReceivedIndex++;
    11b8:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    11bc:	8f 5f       	subi	r24, 0xFF	; 255
    11be:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <u8_rx0LastReceivedIndex>
    11c2:	02 c0       	rjmp	.+4      	; 0x11c8 <__vector_20+0x88>
	else
		u8_rx0LastReceivedIndex = 0;
    11c4:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <u8_rx0LastReceivedIndex>
	b_rx0Available = TRUE;
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <b_rx0Available>
}
    11ce:	ff 91       	pop	r31
    11d0:	ef 91       	pop	r30
    11d2:	bf 91       	pop	r27
    11d4:	af 91       	pop	r26
    11d6:	9f 91       	pop	r25
    11d8:	8f 91       	pop	r24
    11da:	7f 91       	pop	r23
    11dc:	6f 91       	pop	r22
    11de:	5f 91       	pop	r21
    11e0:	4f 91       	pop	r20
    11e2:	3f 91       	pop	r19
    11e4:	2f 91       	pop	r18
    11e6:	0f 90       	pop	r0
    11e8:	0b be       	out	0x3b, r0	; 59
    11ea:	0f 90       	pop	r0
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	0f 90       	pop	r0
    11f0:	1f 90       	pop	r1
    11f2:	18 95       	reti

000011f4 <__vector_21>:

ISR(USART0_UDRE_vect)
{
    11f4:	1f 92       	push	r1
    11f6:	0f 92       	push	r0
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	0f 92       	push	r0
    11fc:	11 24       	eor	r1, r1
    11fe:	0b b6       	in	r0, 0x3b	; 59
    1200:	0f 92       	push	r0
    1202:	2f 93       	push	r18
    1204:	3f 93       	push	r19
    1206:	4f 93       	push	r20
    1208:	5f 93       	push	r21
    120a:	6f 93       	push	r22
    120c:	7f 93       	push	r23
    120e:	8f 93       	push	r24
    1210:	9f 93       	push	r25
    1212:	af 93       	push	r26
    1214:	bf 93       	push	r27
    1216:	ef 93       	push	r30
    1218:	ff 93       	push	r31
	if (u8_tx0LastTransmittedIndex != u8_tx0LastRequestedIndex)
    121a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    121e:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <u8_tx0LastRequestedIndex>
    1222:	98 17       	cp	r25, r24
    1224:	69 f1       	breq	.+90     	; 0x1280 <__vector_21+0x8c>
	{
		if (checkBit(UCSR0B, UCSZ02) == SET)
    1226:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    122a:	62 e0       	ldi	r22, 0x02	; 2
    122c:	ee d8       	rcall	.-3620   	; 0x40a <checkBit>
    122e:	81 30       	cpi	r24, 0x01	; 1
    1230:	79 f4       	brne	.+30     	; 0x1250 <__vector_21+0x5c>
			UCSR0B |= (u8) (((au16_tx0Buffer[u8_tx0LastTransmittedIndex] >> 8) & 1) << TXB80);
    1232:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	ee 0f       	add	r30, r30
    123a:	ff 1f       	adc	r31, r31
    123c:	ef 5a       	subi	r30, 0xAF	; 175
    123e:	fe 4f       	sbci	r31, 0xFE	; 254
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	e1 ec       	ldi	r30, 0xC1	; 193
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	91 70       	andi	r25, 0x01	; 1
    124c:	89 2b       	or	r24, r25
    124e:	80 83       	st	Z, r24
		UDR0 = (u8) au16_tx0Buffer[u8_tx0LastTransmittedIndex];
    1250:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	ee 0f       	add	r30, r30
    1258:	ff 1f       	adc	r31, r31
    125a:	ef 5a       	subi	r30, 0xAF	; 175
    125c:	fe 4f       	sbci	r31, 0xFE	; 254
    125e:	80 81       	ld	r24, Z
    1260:	91 81       	ldd	r25, Z+1	; 0x01
    1262:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1266:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    126a:	89 30       	cpi	r24, 0x09	; 9
    126c:	30 f4       	brcc	.+12     	; 0x127a <__vector_21+0x86>
			u8_tx0LastTransmittedIndex++;
    126e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    1272:	8f 5f       	subi	r24, 0xFF	; 255
    1274:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <u8_tx0LastTransmittedIndex>
    1278:	07 c0       	rjmp	.+14     	; 0x1288 <__vector_21+0x94>
		else
			u8_tx0LastTransmittedIndex = 0;
    127a:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <u8_tx0LastTransmittedIndex>
    127e:	04 c0       	rjmp	.+8      	; 0x1288 <__vector_21+0x94>
	}
	else
		clearBit(&UCSR0B, UDRIE0);
    1280:	65 e0       	ldi	r22, 0x05	; 5
    1282:	81 ec       	ldi	r24, 0xC1	; 193
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	b4 d8       	rcall	.-3736   	; 0x3f0 <clearBit>
}
    1288:	ff 91       	pop	r31
    128a:	ef 91       	pop	r30
    128c:	bf 91       	pop	r27
    128e:	af 91       	pop	r26
    1290:	9f 91       	pop	r25
    1292:	8f 91       	pop	r24
    1294:	7f 91       	pop	r23
    1296:	6f 91       	pop	r22
    1298:	5f 91       	pop	r21
    129a:	4f 91       	pop	r20
    129c:	3f 91       	pop	r19
    129e:	2f 91       	pop	r18
    12a0:	0f 90       	pop	r0
    12a2:	0b be       	out	0x3b, r0	; 59
    12a4:	0f 90       	pop	r0
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	0f 90       	pop	r0
    12aa:	1f 90       	pop	r1
    12ac:	18 95       	reti

000012ae <__vector_22>:

ISR(USART0_TX_vect)
{
    12ae:	1f 92       	push	r1
    12b0:	0f 92       	push	r0
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	0f 92       	push	r0
    12b6:	11 24       	eor	r1, r1
    12b8:	0b b6       	in	r0, 0x3b	; 59
    12ba:	0f 92       	push	r0
    12bc:	8f 93       	push	r24
    12be:	9f 93       	push	r25
    12c0:	ef 93       	push	r30
    12c2:	ff 93       	push	r31
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
		au16_tx0Buffer[i] = 0;
    12c8:	fc 01       	movw	r30, r24
    12ca:	ee 0f       	add	r30, r30
    12cc:	ff 1f       	adc	r31, r31
    12ce:	ef 5a       	subi	r30, 0xAF	; 175
    12d0:	fe 4f       	sbci	r31, 0xFE	; 254
    12d2:	11 82       	std	Z+1, r1	; 0x01
    12d4:	10 82       	st	Z, r1
    12d6:	01 96       	adiw	r24, 0x01	; 1
}

ISR(USART0_TX_vect)
{
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
    12d8:	8a 30       	cpi	r24, 0x0A	; 10
    12da:	91 05       	cpc	r25, r1
    12dc:	a9 f7       	brne	.-22     	; 0x12c8 <__vector_22+0x1a>
		au16_tx0Buffer[i] = 0;
	u8_tx0LastTransmittedIndex = 0;
    12de:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <u8_tx0LastTransmittedIndex>
	u8_tx0LastRequestedIndex = 0;
    12e2:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <u8_tx0LastRequestedIndex>
}
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	9f 91       	pop	r25
    12ec:	8f 91       	pop	r24
    12ee:	0f 90       	pop	r0
    12f0:	0b be       	out	0x3b, r0	; 59
    12f2:	0f 90       	pop	r0
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	0f 90       	pop	r0
    12f8:	1f 90       	pop	r1
    12fa:	18 95       	reti

000012fc <uart_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void uart_init(uart_struct_t s_uart)
{
    12fc:	0f 93       	push	r16
    12fe:	1f 93       	push	r17
    1300:	cf 93       	push	r28
    1302:	df 93       	push	r29
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	2b 97       	sbiw	r28, 0x0b	; 11
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	de bf       	out	0x3e, r29	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	cd bf       	out	0x3d, r28	; 61
    1314:	0a 83       	std	Y+2, r16	; 0x02
    1316:	1b 83       	std	Y+3, r17	; 0x03
    1318:	2c 83       	std	Y+4, r18	; 0x04
    131a:	3d 83       	std	Y+5, r19	; 0x05
    131c:	4e 83       	std	Y+6, r20	; 0x06
    131e:	5f 83       	std	Y+7, r21	; 0x07
    1320:	68 87       	std	Y+8, r22	; 0x08
    1322:	79 87       	std	Y+9, r23	; 0x09
    1324:	8a 87       	std	Y+10, r24	; 0x0a
    1326:	9b 87       	std	Y+11, r25	; 0x0b
	u16 u16_ubrr;
	bool b_usingDoubleSpeed = FALSE;
    1328:	19 82       	std	Y+1, r1	; 0x01

	switch (s_uart.peripheral)
    132a:	01 11       	cpse	r16, r1
    132c:	a1 c0       	rjmp	.+322    	; 0x1470 <uart_init+0x174>
    132e:	19 2f       	mov	r17, r25
	{
	case UART0:
	#ifdef USING_UART0
		/* Set asynchronous mode */
		UCSR0C &= ~(0b11 << UMSEL00);
    1330:	e2 ec       	ldi	r30, 0xC2	; 194
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	8f 73       	andi	r24, 0x3F	; 63
    1338:	80 83       	st	Z, r24
		/* Set baud rate */
		u16_ubrr = calculateUBRR(s_uart.baudRate, &b_usingDoubleSpeed);
    133a:	6b 81       	ldd	r22, Y+3	; 0x03
    133c:	7c 81       	ldd	r23, Y+4	; 0x04
    133e:	8d 81       	ldd	r24, Y+5	; 0x05
    1340:	9e 81       	ldd	r25, Y+6	; 0x06
    1342:	ae 01       	movw	r20, r28
    1344:	4f 5f       	subi	r20, 0xFF	; 255
    1346:	5f 4f       	sbci	r21, 0xFF	; 255
    1348:	ad de       	rcall	.-678    	; 0x10a4 <calculateUBRR>
		UBRR0 = u16_ubrr;
    134a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    134e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		updateBit(&UCSR0A, U2X0, b_usingDoubleSpeed);
    1352:	49 81       	ldd	r20, Y+1	; 0x01
    1354:	61 e0       	ldi	r22, 0x01	; 1
    1356:	80 ec       	ldi	r24, 0xC0	; 192
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	26 d8       	rcall	.-4020   	; 0x3a8 <updateBit>
		/* Set frame size */
		switch (s_uart.frameSize)
    135c:	89 85       	ldd	r24, Y+9	; 0x09
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	31 f1       	breq	.+76     	; 0x13ae <uart_init+0xb2>
    1362:	28 f4       	brcc	.+10     	; 0x136e <uart_init+0x72>
    1364:	88 23       	and	r24, r24
    1366:	49 f0       	breq	.+18     	; 0x137a <uart_init+0x7e>
    1368:	81 30       	cpi	r24, 0x01	; 1
    136a:	a1 f0       	breq	.+40     	; 0x1394 <uart_init+0x98>
    136c:	49 c0       	rjmp	.+146    	; 0x1400 <uart_init+0x104>
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	59 f1       	breq	.+86     	; 0x13c8 <uart_init+0xcc>
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	09 f4       	brne	.+2      	; 0x1378 <uart_init+0x7c>
    1376:	35 c0       	rjmp	.+106    	; 0x13e2 <uart_init+0xe6>
    1378:	43 c0       	rjmp	.+134    	; 0x1400 <uart_init+0x104>
		{
			case _5BIT:
				clearBit(&UCSR0C, UCSZ00);
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	82 ec       	ldi	r24, 0xC2	; 194
    137e:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&UCSR0C, UCSZ01);
    1380:	37 d8       	rcall	.-3986   	; 0x3f0 <clearBit>
    1382:	62 e0       	ldi	r22, 0x02	; 2
    1384:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	33 d8       	rcall	.-3994   	; 0x3f0 <clearBit>
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	81 ec       	ldi	r24, 0xC1	; 193
				break;
    138e:	90 e0       	ldi	r25, 0x00	; 0
			case _6BIT:
				setBit(&UCSR0C, UCSZ00);
    1390:	2f d8       	rcall	.-4002   	; 0x3f0 <clearBit>
    1392:	36 c0       	rjmp	.+108    	; 0x1400 <uart_init+0x104>
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0C, UCSZ01);
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	1e d8       	rcall	.-4036   	; 0x3d8 <setBit>
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	26 d8       	rcall	.-4020   	; 0x3f0 <clearBit>
    13a4:	62 e0       	ldi	r22, 0x02	; 2
				break;
			case _7BIT:
				clearBit(&UCSR0C, UCSZ00);
    13a6:	81 ec       	ldi	r24, 0xC1	; 193
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	22 d8       	rcall	.-4028   	; 0x3f0 <clearBit>
    13ac:	29 c0       	rjmp	.+82     	; 0x1400 <uart_init+0x104>
				setBit(&UCSR0C, UCSZ01);
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	82 ec       	ldi	r24, 0xC2	; 194
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	1d d8       	rcall	.-4038   	; 0x3f0 <clearBit>
				clearBit(&UCSR0B, UCSZ02);
    13b6:	62 e0       	ldi	r22, 0x02	; 2
    13b8:	82 ec       	ldi	r24, 0xC2	; 194
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0d d8       	rcall	.-4070   	; 0x3d8 <setBit>
				break;
    13be:	62 e0       	ldi	r22, 0x02	; 2
			case _8BIT:
				setBit(&UCSR0C, UCSZ00);
    13c0:	81 ec       	ldi	r24, 0xC1	; 193
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	15 d8       	rcall	.-4054   	; 0x3f0 <clearBit>
    13c6:	1c c0       	rjmp	.+56     	; 0x1400 <uart_init+0x104>
				setBit(&UCSR0C, UCSZ01);
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	82 ec       	ldi	r24, 0xC2	; 194
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	04 d8       	rcall	.-4088   	; 0x3d8 <setBit>
    13d0:	62 e0       	ldi	r22, 0x02	; 2
				clearBit(&UCSR0B, UCSZ02);
    13d2:	82 ec       	ldi	r24, 0xC2	; 194
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	00 d8       	rcall	.-4096   	; 0x3d8 <setBit>
    13d8:	62 e0       	ldi	r22, 0x02	; 2
    13da:	81 ec       	ldi	r24, 0xC1	; 193
				break;
    13dc:	90 e0       	ldi	r25, 0x00	; 0
			case _9BIT:
				setBit(&UCSR0C, UCSZ00);
    13de:	08 d8       	rcall	.-4080   	; 0x3f0 <clearBit>
    13e0:	0f c0       	rjmp	.+30     	; 0x1400 <uart_init+0x104>
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	82 ec       	ldi	r24, 0xC2	; 194
    13e6:	90 e0       	ldi	r25, 0x00	; 0
				setBit(&UCSR0C, UCSZ01);
    13e8:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setBit>
    13ec:	62 e0       	ldi	r22, 0x02	; 2
    13ee:	82 ec       	ldi	r24, 0xC2	; 194
    13f0:	90 e0       	ldi	r25, 0x00	; 0
				setBit(&UCSR0B, UCSZ02);
    13f2:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setBit>
    13f6:	62 e0       	ldi	r22, 0x02	; 2
    13f8:	81 ec       	ldi	r24, 0xC1	; 193
    13fa:	90 e0       	ldi	r25, 0x00	; 0
				break;
		}
		/* Set number of stop bits */
		updateBit(&UCSR0C, USBS0, s_uart.stopBits);
    13fc:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setBit>
    1400:	4a 85       	ldd	r20, Y+10	; 0x0a
    1402:	63 e0       	ldi	r22, 0x03	; 3
    1404:	82 ec       	ldi	r24, 0xC2	; 194
    1406:	90 e0       	ldi	r25, 0x00	; 0
		/* Set parity check */
		if (s_uart.parityBit == NONE)
    1408:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <updateBit>
			UCSR0C &= ~(0b11 << UPM00);
    140c:	12 30       	cpi	r17, 0x02	; 2
    140e:	31 f4       	brne	.+12     	; 0x141c <uart_init+0x120>
    1410:	e2 ec       	ldi	r30, 0xC2	; 194
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	8f 7c       	andi	r24, 0xCF	; 207
		else
		{
			setBit(&UCSR0C, UPM01);
    1418:	80 83       	st	Z, r24
    141a:	0b c0       	rjmp	.+22     	; 0x1432 <uart_init+0x136>
    141c:	65 e0       	ldi	r22, 0x05	; 5
    141e:	82 ec       	ldi	r24, 0xC2	; 194
    1420:	90 e0       	ldi	r25, 0x00	; 0
			updateBit(&UCSR0C, UPM00, s_uart.parityBit);
    1422:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setBit>
    1426:	41 2f       	mov	r20, r17
    1428:	64 e0       	ldi	r22, 0x04	; 4
    142a:	82 ec       	ldi	r24, 0xC2	; 194
    142c:	90 e0       	ldi	r25, 0x00	; 0
		}
	#ifdef UART0_INTERRUPT_MODE
		/* Set interrupts */
		if (s_uart.useRx)
    142e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <updateBit>
    1432:	8f 81       	ldd	r24, Y+7	; 0x07
		{
			u8_rx0LastProcessedIndex = 0;
    1434:	88 23       	and	r24, r24
    1436:	59 f0       	breq	.+22     	; 0x144e <uart_init+0x152>
			u8_rx0LastReceivedIndex = 0;
    1438:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u8_rx0LastProcessedIndex>
			b_rx0Available = FALSE;
    143c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <u8_rx0LastReceivedIndex>
			setBit(&UCSR0B, RXCIE0);
    1440:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <b_rx0Available>
    1444:	67 e0       	ldi	r22, 0x07	; 7
    1446:	81 ec       	ldi	r24, 0xC1	; 193
    1448:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (s_uart.useTx)
    144a:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setBit>
    144e:	88 85       	ldd	r24, Y+8	; 0x08
		{
			u8_tx0LastRequestedIndex = 0;
    1450:	88 23       	and	r24, r24
    1452:	71 f0       	breq	.+28     	; 0x1470 <uart_init+0x174>
			u8_tx0LastTransmittedIndex = 0;
    1454:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <u8_tx0LastRequestedIndex>
			setBit(&UCSR0B, TXCIE0);
    1458:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <u8_tx0LastTransmittedIndex>
    145c:	66 e0       	ldi	r22, 0x06	; 6
    145e:	81 ec       	ldi	r24, 0xC1	; 193
    1460:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&UCSR0B, UDRIE0);
    1462:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setBit>
    1466:	65 e0       	ldi	r22, 0x05	; 5
    1468:	81 ec       	ldi	r24, 0xC1	; 193
    146a:	90 e0       	ldi	r25, 0x00	; 0
		}
	#endif
#endif
		break;
	}
}
    146c:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <setBit>
    1470:	2b 96       	adiw	r28, 0x0b	; 11
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	08 95       	ret

00001486 <uart_start>:

void uart_start(uart_struct_t s_uart)
{
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	2a 97       	sbiw	r28, 0x0a	; 10
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	6f 83       	std	Y+7, r22	; 0x07
	switch (s_uart.peripheral)
    14a0:	01 11       	cpse	r16, r1
    14a2:	0c c0       	rjmp	.+24     	; 0x14bc <uart_start+0x36>
	{
		case UART0:
		#ifdef USING_UART0
			updateBit(&UCSR0B, RXEN0, s_uart.useRx);
    14a4:	45 2f       	mov	r20, r21
    14a6:	64 e0       	ldi	r22, 0x04	; 4
    14a8:	81 ec       	ldi	r24, 0xC1	; 193
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <updateBit>
			updateBit(&UCSR0B, TXEN0, s_uart.useTx);
    14b0:	4f 81       	ldd	r20, Y+7	; 0x07
    14b2:	63 e0       	ldi	r22, 0x03	; 3
    14b4:	81 ec       	ldi	r24, 0xC1	; 193
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <updateBit>
			updateBit(&UCSR1B, RXEN1, s_uart.useRx);
			updateBit(&UCSR1B, TXEN1, s_uart.useTx);
		#endif
			break;
	}
}
    14bc:	2a 96       	adiw	r28, 0x0a	; 10
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    14d2:	1f 92       	push	r1
    14d4:	0f 92       	push	r0
    14d6:	0f b6       	in	r0, 0x3f	; 63
    14d8:	0f 92       	push	r0
    14da:	11 24       	eor	r1, r1
    14dc:	0b b6       	in	r0, 0x3b	; 59
    14de:	0f 92       	push	r0
    14e0:	2f 93       	push	r18
    14e2:	3f 93       	push	r19
    14e4:	4f 93       	push	r20
    14e6:	5f 93       	push	r21
    14e8:	6f 93       	push	r22
    14ea:	7f 93       	push	r23
    14ec:	8f 93       	push	r24
    14ee:	9f 93       	push	r25
    14f0:	af 93       	push	r26
    14f2:	bf 93       	push	r27
    14f4:	ef 93       	push	r30
    14f6:	ff 93       	push	r31
	p_wdgCallback();
    14f8:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <p_wdgCallback>
    14fc:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <p_wdgCallback+0x1>
    1500:	09 95       	icall
}
    1502:	ff 91       	pop	r31
    1504:	ef 91       	pop	r30
    1506:	bf 91       	pop	r27
    1508:	af 91       	pop	r26
    150a:	9f 91       	pop	r25
    150c:	8f 91       	pop	r24
    150e:	7f 91       	pop	r23
    1510:	6f 91       	pop	r22
    1512:	5f 91       	pop	r21
    1514:	4f 91       	pop	r20
    1516:	3f 91       	pop	r19
    1518:	2f 91       	pop	r18
    151a:	0f 90       	pop	r0
    151c:	0b be       	out	0x3b, r0	; 59
    151e:	0f 90       	pop	r0
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	0f 90       	pop	r0
    1524:	1f 90       	pop	r1
    1526:	18 95       	reti

00001528 <motor_init>:
	return 0.91*speed;
}


void motor_init(){
	motorEnable.direction = OUTPUT;
    1528:	eb e6       	ldi	r30, 0x6B	; 107
    152a:	f1 e0       	ldi	r31, 0x01	; 1
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	82 83       	std	Z+2, r24	; 0x02
	motorEnable.port = PD;
    1530:	93 e0       	ldi	r25, 0x03	; 3
    1532:	90 83       	st	Z, r25
	motorEnable.number = 2;
    1534:	22 e0       	ldi	r18, 0x02	; 2
    1536:	21 83       	std	Z+1, r18	; 0x01
	motorEnable.pullUp = NO_PULL;
    1538:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionA.direction = OUTPUT;
    153a:	e7 e6       	ldi	r30, 0x67	; 103
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionA.port = PD;
    1540:	90 83       	st	Z, r25
	motorDirectionA.number = 6;
    1542:	26 e0       	ldi	r18, 0x06	; 6
    1544:	21 83       	std	Z+1, r18	; 0x01
	motorDirectionA.pullUp = NO_PULL;
    1546:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionB.direction = OUTPUT;
    1548:	ef e6       	ldi	r30, 0x6F	; 111
    154a:	f1 e0       	ldi	r31, 0x01	; 1
    154c:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionB.port = PD;
    154e:	90 83       	st	Z, r25
	motorDirectionB.number = 3;
    1550:	91 83       	std	Z+1, r25	; 0x01
	motorDirectionB.pullUp = NO_PULL;
    1552:	13 82       	std	Z+3, r1	; 0x03
	
	motorTimer.frequency = 20000;
    1554:	e3 e7       	ldi	r30, 0x73	; 115
    1556:	f1 e0       	ldi	r31, 0x01	; 1
    1558:	40 e2       	ldi	r20, 0x20	; 32
    155a:	5e e4       	ldi	r21, 0x4E	; 78
    155c:	60 e0       	ldi	r22, 0x00	; 0
    155e:	70 e0       	ldi	r23, 0x00	; 0
    1560:	41 83       	std	Z+1, r20	; 0x01
    1562:	52 83       	std	Z+2, r21	; 0x02
    1564:	63 83       	std	Z+3, r22	; 0x03
    1566:	74 83       	std	Z+4, r23	; 0x04
	motorTimer.peripheral = TIMER1;
    1568:	80 83       	st	Z, r24
	
	motorPWM.base = motorTimer;
    156a:	95 e0       	ldi	r25, 0x05	; 5
    156c:	a8 e7       	ldi	r26, 0x78	; 120
    156e:	b1 e0       	ldi	r27, 0x01	; 1
    1570:	01 90       	ld	r0, Z+
    1572:	0d 92       	st	X+, r0
    1574:	9a 95       	dec	r25
    1576:	e1 f7       	brne	.-8      	; 0x1570 <motor_init+0x48>
	motorPWM.signalType = DUTY_CYCLE_VARIABLE;
    1578:	e8 e7       	ldi	r30, 0x78	; 120
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	15 82       	std	Z+5, r1	; 0x05
	motorPWM.mode = FAST_PWM;
    157e:	16 82       	std	Z+6, r1	; 0x06
	motorPWM.channelA.enabled = TRUE;
    1580:	87 83       	std	Z+7, r24	; 0x07
	motorPWM.channelA.invertedOutput = FALSE;
    1582:	10 86       	std	Z+8, r1	; 0x08
	motorPWM.channelB.enabled = TRUE;
    1584:	81 87       	std	Z+9, r24	; 0x09
	motorPWM.channelB.invertedOutput = FALSE;
    1586:	12 86       	std	Z+10, r1	; 0x0a
	
	gpio_init(motorEnable);
    1588:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorEnable>
    158c:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorEnable+0x1>
    1590:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorEnable+0x2>
    1594:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <motorEnable+0x3>
    1598:	0e 94 2c 01 	call	0x258	; 0x258 <gpio_init>
	gpio_init(motorDirectionA);
    159c:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <motorDirectionA>
    15a0:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <motorDirectionA+0x1>
    15a4:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <motorDirectionA+0x2>
    15a8:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <motorDirectionA+0x3>
    15ac:	0e 94 2c 01 	call	0x258	; 0x258 <gpio_init>
	gpio_init(motorDirectionB);
    15b0:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <motorDirectionB>
    15b4:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <motorDirectionB+0x1>
    15b8:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <motorDirectionB+0x2>
    15bc:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <motorDirectionB+0x3>
    15c0:	0e 94 2c 01 	call	0x258	; 0x258 <gpio_init>
	timer_init(motorTimer);
    15c4:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <motorTimer>
    15c8:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <motorTimer+0x1>
    15cc:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <motorTimer+0x2>
    15d0:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <motorTimer+0x3>
    15d4:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <motorTimer+0x4>
    15d8:	a9 db       	rcall	.-2222   	; 0xd2c <timer_init>
	pwm_init(&motorPWM);
    15da:	88 e7       	ldi	r24, 0x78	; 120
    15dc:	91 e0       	ldi	r25, 0x01	; 1
    15de:	0c 94 39 02 	jmp	0x472	; 0x472 <pwm_init>
    15e2:	08 95       	ret

000015e4 <motor_start>:
}

void motor_start(){
    15e4:	af 92       	push	r10
    15e6:	cf 92       	push	r12
    15e8:	ef 92       	push	r14
    15ea:	ff 92       	push	r15
    15ec:	0f 93       	push	r16
    15ee:	1f 93       	push	r17
    15f0:	cf 93       	push	r28
	gpio_out_reset(motorDirectionA);
    15f2:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <motorDirectionA>
    15f6:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <motorDirectionA+0x1>
    15fa:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <motorDirectionA+0x2>
    15fe:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <motorDirectionA+0x3>
    1602:	0e 94 b8 01 	call	0x370	; 0x370 <gpio_out_reset>
	gpio_out_reset(motorDirectionB);
    1606:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <motorDirectionB>
    160a:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <motorDirectionB+0x1>
    160e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <motorDirectionB+0x2>
    1612:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <motorDirectionB+0x3>
    1616:	0e 94 b8 01 	call	0x370	; 0x370 <gpio_out_reset>
	gpio_out_set(motorEnable);
    161a:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorEnable>
    161e:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorEnable+0x1>
    1622:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorEnable+0x2>
    1626:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <motorEnable+0x3>
    162a:	0e 94 9c 01 	call	0x338	; 0x338 <gpio_out_set>
	
	pwm_start(motorPWM);
    162e:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    1632:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    1636:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    163a:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    163e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    1642:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    1646:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    164a:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    164e:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    1652:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    1656:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    165a:	0e 94 ab 02 	call	0x556	; 0x556 <pwm_start>
	for(u8 i = 0; i <= 30; i += 10){
    165e:	c0 e0       	ldi	r28, 0x00	; 0
		pwm_setDutyCycle(motorPWM, CHANNEL_A, i);
    1660:	ac 2e       	mov	r10, r28
    1662:	c1 2c       	mov	r12, r1
    1664:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    1668:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    166c:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    1670:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    1674:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    1678:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    167c:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    1680:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    1684:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    1688:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    168c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    1690:	0e 94 ed 02 	call	0x5da	; 0x5da <pwm_setDutyCycle>
		pwm_setDutyCycle(motorPWM, CHANNEL_B, i);
    1694:	cc 24       	eor	r12, r12
    1696:	c3 94       	inc	r12
    1698:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    169c:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    16a0:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    16a4:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    16a8:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    16ac:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    16b0:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    16b4:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    16b8:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    16bc:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    16c0:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    16c4:	0e 94 ed 02 	call	0x5da	; 0x5da <pwm_setDutyCycle>
	gpio_out_reset(motorDirectionA);
	gpio_out_reset(motorDirectionB);
	gpio_out_set(motorEnable);
	
	pwm_start(motorPWM);
	for(u8 i = 0; i <= 30; i += 10){
    16c8:	c6 5f       	subi	r28, 0xF6	; 246
    16ca:	c8 32       	cpi	r28, 0x28	; 40
    16cc:	49 f6       	brne	.-110    	; 0x1660 <motor_start+0x7c>
		pwm_setDutyCycle(motorPWM, CHANNEL_A, i);
		pwm_setDutyCycle(motorPWM, CHANNEL_B, i);
	}
	
}
    16ce:	cf 91       	pop	r28
    16d0:	1f 91       	pop	r17
    16d2:	0f 91       	pop	r16
    16d4:	ff 90       	pop	r15
    16d6:	ef 90       	pop	r14
    16d8:	cf 90       	pop	r12
    16da:	af 90       	pop	r10
    16dc:	08 95       	ret

000016de <motor_stop>:

void motor_stop(){
    16de:	ef 92       	push	r14
    16e0:	ff 92       	push	r15
    16e2:	0f 93       	push	r16
    16e4:	1f 93       	push	r17
	pwm_stop(motorPWM);
    16e6:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    16ea:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    16ee:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    16f2:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    16f6:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    16fa:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    16fe:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    1702:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    1706:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    170a:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    170e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    1712:	0e 94 cc 02 	call	0x598	; 0x598 <pwm_stop>
	gpio_out_reset(motorEnable);
    1716:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorEnable>
    171a:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorEnable+0x1>
    171e:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorEnable+0x2>
    1722:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <motorEnable+0x3>
    1726:	0e 94 b8 01 	call	0x370	; 0x370 <gpio_out_reset>
}
    172a:	1f 91       	pop	r17
    172c:	0f 91       	pop	r16
    172e:	ff 90       	pop	r15
    1730:	ef 90       	pop	r14
    1732:	08 95       	ret

00001734 <__udivmodsi4>:
    1734:	a1 e2       	ldi	r26, 0x21	; 33
    1736:	1a 2e       	mov	r1, r26
    1738:	aa 1b       	sub	r26, r26
    173a:	bb 1b       	sub	r27, r27
    173c:	fd 01       	movw	r30, r26
    173e:	0d c0       	rjmp	.+26     	; 0x175a <__udivmodsi4_ep>

00001740 <__udivmodsi4_loop>:
    1740:	aa 1f       	adc	r26, r26
    1742:	bb 1f       	adc	r27, r27
    1744:	ee 1f       	adc	r30, r30
    1746:	ff 1f       	adc	r31, r31
    1748:	a2 17       	cp	r26, r18
    174a:	b3 07       	cpc	r27, r19
    174c:	e4 07       	cpc	r30, r20
    174e:	f5 07       	cpc	r31, r21
    1750:	20 f0       	brcs	.+8      	; 0x175a <__udivmodsi4_ep>
    1752:	a2 1b       	sub	r26, r18
    1754:	b3 0b       	sbc	r27, r19
    1756:	e4 0b       	sbc	r30, r20
    1758:	f5 0b       	sbc	r31, r21

0000175a <__udivmodsi4_ep>:
    175a:	66 1f       	adc	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	1a 94       	dec	r1
    1764:	69 f7       	brne	.-38     	; 0x1740 <__udivmodsi4_loop>
    1766:	60 95       	com	r22
    1768:	70 95       	com	r23
    176a:	80 95       	com	r24
    176c:	90 95       	com	r25
    176e:	9b 01       	movw	r18, r22
    1770:	ac 01       	movw	r20, r24
    1772:	bd 01       	movw	r22, r26
    1774:	cf 01       	movw	r24, r30
    1776:	08 95       	ret

00001778 <__tablejump2__>:
    1778:	ee 0f       	add	r30, r30
    177a:	ff 1f       	adc	r31, r31
    177c:	00 24       	eor	r0, r0
    177e:	00 1c       	adc	r0, r0
    1780:	0b be       	out	0x3b, r0	; 59
    1782:	07 90       	elpm	r0, Z+
    1784:	f6 91       	elpm	r31, Z
    1786:	e0 2d       	mov	r30, r0
    1788:	09 94       	ijmp

0000178a <__umulhisi3>:
    178a:	a2 9f       	mul	r26, r18
    178c:	b0 01       	movw	r22, r0
    178e:	b3 9f       	mul	r27, r19
    1790:	c0 01       	movw	r24, r0
    1792:	a3 9f       	mul	r26, r19
    1794:	70 0d       	add	r23, r0
    1796:	81 1d       	adc	r24, r1
    1798:	11 24       	eor	r1, r1
    179a:	91 1d       	adc	r25, r1
    179c:	b2 9f       	mul	r27, r18
    179e:	70 0d       	add	r23, r0
    17a0:	81 1d       	adc	r24, r1
    17a2:	11 24       	eor	r1, r1
    17a4:	91 1d       	adc	r25, r1
    17a6:	08 95       	ret

000017a8 <__muluhisi3>:
    17a8:	f0 df       	rcall	.-32     	; 0x178a <__umulhisi3>
    17aa:	a5 9f       	mul	r26, r21
    17ac:	90 0d       	add	r25, r0
    17ae:	b4 9f       	mul	r27, r20
    17b0:	90 0d       	add	r25, r0
    17b2:	a4 9f       	mul	r26, r20
    17b4:	80 0d       	add	r24, r0
    17b6:	91 1d       	adc	r25, r1
    17b8:	11 24       	eor	r1, r1
    17ba:	08 95       	ret

000017bc <_exit>:
    17bc:	f8 94       	cli

000017be <__stop_program>:
    17be:	ff cf       	rjmp	.-2      	; 0x17be <__stop_program>
