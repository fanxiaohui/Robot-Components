
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000ff4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f80  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800100  00800100  00000ff4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00001064  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000047be  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015fc  00000000  00000000  00005c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ed0  00000000  00000000  0000724e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f80  00000000  00000000  00009120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001489  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000336f  00000000  00000000  0000b529  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003a0  00000000  00000000  0000e898  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	f9 c0       	rjmp	.+498    	; 0x1f8 <__vector_1>
   6:	00 00       	nop
   8:	01 c1       	rjmp	.+514    	; 0x20c <__vector_2>
   a:	00 00       	nop
   c:	09 c1       	rjmp	.+530    	; 0x220 <__vector_3>
   e:	00 00       	nop
  10:	cb c0       	rjmp	.+406    	; 0x1a8 <__vector_4>
  12:	00 00       	nop
  14:	d3 c0       	rjmp	.+422    	; 0x1bc <__vector_5>
  16:	00 00       	nop
  18:	db c0       	rjmp	.+438    	; 0x1d0 <__vector_6>
  1a:	00 00       	nop
  1c:	e3 c0       	rjmp	.+454    	; 0x1e4 <__vector_7>
  1e:	00 00       	nop
  20:	2e c7       	rjmp	.+3676   	; 0xe7e <__vector_8>
  22:	00 00       	nop
  24:	53 c4       	rjmp	.+2214   	; 0x8cc <__vector_9>
  26:	00 00       	nop
  28:	8d c4       	rjmp	.+2330   	; 0x944 <__vector_10>
  2a:	00 00       	nop
  2c:	24 c4       	rjmp	.+2120   	; 0x876 <__vector_11>
  2e:	00 00       	nop
  30:	c5 c3       	rjmp	.+1930   	; 0x7bc <__vector_12>
  32:	00 00       	nop
  34:	38 c3       	rjmp	.+1648   	; 0x6a6 <__vector_13>
  36:	00 00       	nop
  38:	96 c3       	rjmp	.+1836   	; 0x766 <__vector_14>
  3a:	00 00       	nop
  3c:	09 c3       	rjmp	.+1554   	; 0x650 <__vector_15>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	b8 c2       	rjmp	.+1392   	; 0x5be <__vector_19>
  4e:	00 00       	nop
  50:	f2 c4       	rjmp	.+2532   	; 0xa36 <__vector_20>
  52:	00 00       	nop
  54:	4a c5       	rjmp	.+2708   	; 0xaea <__vector_21>
  56:	00 00       	nop
  58:	a5 c5       	rjmp	.+2890   	; 0xba4 <__vector_22>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	ff e0       	ldi	r31, 0x0F	; 15
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	aa 36       	cpi	r26, 0x6A	; 106
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	3a d0       	rcall	.+116    	; 0x138 <main>
  c4:	5b c7       	rjmp	.+3766   	; 0xf7c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <debug_init>:
{
	milliseconds++;
}

void debug_init()
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
	s_debugUart.baudRate = _9600;
  cc:	e0 e0       	ldi	r30, 0x00	; 0
  ce:	f1 e0       	ldi	r31, 0x01	; 1
  d0:	80 e8       	ldi	r24, 0x80	; 128
  d2:	18 2f       	mov	r17, r24
  d4:	81 83       	std	Z+1, r24	; 0x01
  d6:	85 e2       	ldi	r24, 0x25	; 37
  d8:	82 83       	std	Z+2, r24	; 0x02
  da:	13 82       	std	Z+3, r1	; 0x03
  dc:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	78 2f       	mov	r23, r24
  e2:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.peripheral = UART0;
  e8:	10 82       	st	Z, r1
	s_debugUart.stopBits = _1BIT;
  ea:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
  ec:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	68 2f       	mov	r22, r24
  f2:	86 83       	std	Z+6, r24	; 0x06
	uart_init(s_debugUart);
  f4:	00 e0       	ldi	r16, 0x00	; 0
  f6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
  fa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
  fe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x4>
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	80 e0       	ldi	r24, 0x00	; 0
 106:	75 d5       	rcall	.+2794   	; 0xbf2 <uart_init>
	uart_start(s_debugUart);
 108:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
 10c:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
 110:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
 114:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
 118:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x4>
 11c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x5>
 120:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end+0x6>
 124:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x7>
 128:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x8>
 12c:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x9>
 130:	1c d6       	rcall	.+3128   	; 0xd6a <uart_start>
}
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <main>:

int main(void)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	00 d0       	rcall	.+0      	; 0x13e <main+0x6>
 13e:	00 d0       	rcall	.+0      	; 0x140 <main+0x8>
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	u8 data[] = {'a', 'b', 'c', 'd'};
 144:	81 e6       	ldi	r24, 0x61	; 97
 146:	89 83       	std	Y+1, r24	; 0x01
 148:	82 e6       	ldi	r24, 0x62	; 98
 14a:	8a 83       	std	Y+2, r24	; 0x02
 14c:	83 e6       	ldi	r24, 0x63	; 99
 14e:	8b 83       	std	Y+3, r24	; 0x03
 150:	84 e6       	ldi	r24, 0x64	; 100
	VL53L0X_i2c_init();
	debug_init();
 152:	8c 83       	std	Y+4, r24	; 0x04
 154:	bf d6       	rcall	.+3454   	; 0xed4 <VL53L0X_i2c_init>
	sei();
 156:	b8 df       	rcall	.-144    	; 0xc8 <debug_init>
	
	i2c_transmit(8, data, 5);
 158:	78 94       	sei
 15a:	45 e0       	ldi	r20, 0x05	; 5
 15c:	be 01       	movw	r22, r28
 15e:	6f 5f       	subi	r22, 0xFF	; 255
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	88 e0       	ldi	r24, 0x08	; 8
 164:	3b d1       	rcall	.+630    	; 0x3dc <i2c_transmit>
 166:	ff cf       	rjmp	.-2      	; 0x166 <main+0x2e>

00000168 <gpio_changeDirection>:
/* Internal functions                                                   */
/************************************************************************/

void gpio_changeDirection(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
 168:	61 30       	cpi	r22, 0x01	; 1
 16a:	61 f0       	breq	.+24     	; 0x184 <gpio_changeDirection+0x1c>
 16c:	28 f0       	brcs	.+10     	; 0x178 <gpio_changeDirection+0x10>
 16e:	62 30       	cpi	r22, 0x02	; 2
 170:	79 f0       	breq	.+30     	; 0x190 <gpio_changeDirection+0x28>
 172:	63 30       	cpi	r22, 0x03	; 3
 174:	99 f0       	breq	.+38     	; 0x19c <gpio_changeDirection+0x34>
 176:	08 95       	ret
	{
		case PA:
			updateBit(&DDRA, s_gpio.number, s_gpio.direction);
 178:	48 2f       	mov	r20, r24
 17a:	67 2f       	mov	r22, r23
 17c:	81 e2       	ldi	r24, 0x21	; 33
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	c7 c1       	rjmp	.+910    	; 0x510 <updateBit>
			break;
 182:	08 95       	ret
		case PB:
			updateBit(&DDRB, s_gpio.number, s_gpio.direction);
 184:	48 2f       	mov	r20, r24
 186:	67 2f       	mov	r22, r23
 188:	84 e2       	ldi	r24, 0x24	; 36
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	c1 c1       	rjmp	.+898    	; 0x510 <updateBit>
			break;
 18e:	08 95       	ret
		case PC:
			updateBit(&DDRC, s_gpio.number, s_gpio.direction);
 190:	48 2f       	mov	r20, r24
 192:	67 2f       	mov	r22, r23
 194:	87 e2       	ldi	r24, 0x27	; 39
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	bb c1       	rjmp	.+886    	; 0x510 <updateBit>
			break;
 19a:	08 95       	ret
		case PD:
			updateBit(&DDRD, s_gpio.number, s_gpio.direction);
 19c:	48 2f       	mov	r20, r24
 19e:	67 2f       	mov	r22, r23
 1a0:	8a e2       	ldi	r24, 0x2A	; 42
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	b5 c1       	rjmp	.+874    	; 0x510 <updateBit>
 1a6:	08 95       	ret

000001a8 <__vector_4>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(PCINT0_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
#ifdef USING_PCINT0
	p_pcInt0Callback();
#endif
}
 1b2:	0f 90       	pop	r0
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	0f 90       	pop	r0
 1b8:	1f 90       	pop	r1
 1ba:	18 95       	reti

000001bc <__vector_5>:

ISR(PCINT1_vect)
{
 1bc:	1f 92       	push	r1
 1be:	0f 92       	push	r0
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	0f 92       	push	r0
 1c4:	11 24       	eor	r1, r1
#ifdef USING_PCINT1
	p_pcInt1Callback();
#endif
}
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <__vector_6>:

ISR(PCINT2_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
#ifdef USING_PCINT2
	p_pcInt2Callback();
#endif
}
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <__vector_7>:

ISR(PCINT3_vect)
{
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
#ifdef USING_PCINT3
	p_pcInt3Callback();
#endif
}
 1ee:	0f 90       	pop	r0
 1f0:	0f be       	out	0x3f, r0	; 63
 1f2:	0f 90       	pop	r0
 1f4:	1f 90       	pop	r1
 1f6:	18 95       	reti

000001f8 <__vector_1>:

ISR(INT0_vect)
{
 1f8:	1f 92       	push	r1
 1fa:	0f 92       	push	r0
 1fc:	0f b6       	in	r0, 0x3f	; 63
 1fe:	0f 92       	push	r0
 200:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[0]();
#endif
}
 202:	0f 90       	pop	r0
 204:	0f be       	out	0x3f, r0	; 63
 206:	0f 90       	pop	r0
 208:	1f 90       	pop	r1
 20a:	18 95       	reti

0000020c <__vector_2>:

ISR(INT1_vect)
{
 20c:	1f 92       	push	r1
 20e:	0f 92       	push	r0
 210:	0f b6       	in	r0, 0x3f	; 63
 212:	0f 92       	push	r0
 214:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[1]();
#endif
}
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_3>:

ISR(INT2_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
#ifdef USING_EXTINT
	p_extIntCallbacks[2]();
#endif
}
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <gpio_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void gpio_init(gpio_struct_t s_gpio)
{
 234:	0f 93       	push	r16
 236:	1f 93       	push	r17
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	c6 2f       	mov	r28, r22
 23e:	17 2f       	mov	r17, r23
 240:	d8 2f       	mov	r29, r24
	/* Configure pin direction */
	gpio_changeDirection(s_gpio);
 242:	09 2f       	mov	r16, r25

	/* Configure pin pull-up */
	if (s_gpio.direction == INPUT)
 244:	91 df       	rcall	.-222    	; 0x168 <gpio_changeDirection>
 246:	d1 11       	cpse	r29, r1
	{
		switch (s_gpio.port)
 248:	23 c0       	rjmp	.+70     	; 0x290 <gpio_init+0x5c>
 24a:	c1 30       	cpi	r28, 0x01	; 1
 24c:	81 f0       	breq	.+32     	; 0x26e <gpio_init+0x3a>
 24e:	28 f0       	brcs	.+10     	; 0x25a <gpio_init+0x26>
 250:	c2 30       	cpi	r28, 0x02	; 2
 252:	99 f0       	breq	.+38     	; 0x27a <gpio_init+0x46>
 254:	c3 30       	cpi	r28, 0x03	; 3
 256:	b9 f0       	breq	.+46     	; 0x286 <gpio_init+0x52>
		{
			case PA:
				updateBit(&PORTA, s_gpio.number, s_gpio.pullUp);
 258:	1b c0       	rjmp	.+54     	; 0x290 <gpio_init+0x5c>
 25a:	40 2f       	mov	r20, r16
 25c:	61 2f       	mov	r22, r17
 25e:	82 e2       	ldi	r24, 0x22	; 34
 260:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&DIDR0, s_gpio.number);
 262:	56 d1       	rcall	.+684    	; 0x510 <updateBit>
 264:	61 2f       	mov	r22, r17
 266:	8e e7       	ldi	r24, 0x7E	; 126
 268:	90 e0       	ldi	r25, 0x00	; 0
				break;
 26a:	76 d1       	rcall	.+748    	; 0x558 <clearBit>
			case PB:
				updateBit(&PORTB, s_gpio.number, s_gpio.pullUp);
 26c:	11 c0       	rjmp	.+34     	; 0x290 <gpio_init+0x5c>
 26e:	40 2f       	mov	r20, r16
 270:	61 2f       	mov	r22, r17
 272:	85 e2       	ldi	r24, 0x25	; 37
 274:	90 e0       	ldi	r25, 0x00	; 0
				break;
			case PC:
				updateBit(&PORTC, s_gpio.number, s_gpio.pullUp);
 276:	4c d1       	rcall	.+664    	; 0x510 <updateBit>
 278:	0b c0       	rjmp	.+22     	; 0x290 <gpio_init+0x5c>
 27a:	40 2f       	mov	r20, r16
 27c:	61 2f       	mov	r22, r17
				break;
			case PD:
				updateBit(&PORTD, s_gpio.number, s_gpio.pullUp);
 27e:	88 e2       	ldi	r24, 0x28	; 40
 280:	90 e0       	ldi	r25, 0x00	; 0
 282:	46 d1       	rcall	.+652    	; 0x510 <updateBit>
 284:	05 c0       	rjmp	.+10     	; 0x290 <gpio_init+0x5c>
 286:	40 2f       	mov	r20, r16
 288:	61 2f       	mov	r22, r17
				break;
		}
	}
}
 28a:	8b e2       	ldi	r24, 0x2B	; 43
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	40 d1       	rcall	.+640    	; 0x510 <updateBit>
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
 29a:	0f 93       	push	r16
 29c:	1f 93       	push	r17
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	8b 01       	movw	r16, r22
 2a4:	9c 01       	movw	r18, r24
 2a6:	ea 01       	movw	r28, r20
 2a8:	60 e0       	ldi	r22, 0x00	; 0
 2aa:	72 e1       	ldi	r23, 0x12	; 18
 2ac:	8a e7       	ldi	r24, 0x7A	; 122
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	a9 01       	movw	r20, r18
 2b2:	98 01       	movw	r18, r16
 2b4:	28 d6       	rcall	.+3152   	; 0xf06 <__udivmodsi4>
 2b6:	ba 01       	movw	r22, r20
 2b8:	a9 01       	movw	r20, r18
 2ba:	40 51       	subi	r20, 0x10	; 16
 2bc:	51 09       	sbc	r21, r1
 2be:	61 09       	sbc	r22, r1
 2c0:	71 09       	sbc	r23, r1
 2c2:	db 01       	movw	r26, r22
 2c4:	ca 01       	movw	r24, r20
 2c6:	b6 95       	lsr	r27
 2c8:	a7 95       	ror	r26
 2ca:	97 95       	ror	r25
 2cc:	87 95       	ror	r24
 2ce:	8f 3f       	cpi	r24, 0xFF	; 255
 2d0:	91 05       	cpc	r25, r1
 2d2:	a1 05       	cpc	r26, r1
 2d4:	b1 05       	cpc	r27, r1
 2d6:	09 f0       	breq	.+2      	; 0x2da <calculateTWBR+0x40>
 2d8:	10 f4       	brcc	.+4      	; 0x2de <calculateTWBR+0x44>
 2da:	18 82       	st	Y, r1
 2dc:	32 c0       	rjmp	.+100    	; 0x342 <calculateTWBR+0xa8>
 2de:	db 01       	movw	r26, r22
 2e0:	ca 01       	movw	r24, r20
 2e2:	68 94       	set
 2e4:	12 f8       	bld	r1, 2
 2e6:	b6 95       	lsr	r27
 2e8:	a7 95       	ror	r26
 2ea:	97 95       	ror	r25
 2ec:	87 95       	ror	r24
 2ee:	16 94       	lsr	r1
 2f0:	d1 f7       	brne	.-12     	; 0x2e6 <calculateTWBR+0x4c>
 2f2:	8f 3f       	cpi	r24, 0xFF	; 255
 2f4:	91 05       	cpc	r25, r1
 2f6:	a1 05       	cpc	r26, r1
 2f8:	b1 05       	cpc	r27, r1
 2fa:	09 f0       	breq	.+2      	; 0x2fe <calculateTWBR+0x64>
 2fc:	18 f4       	brcc	.+6      	; 0x304 <calculateTWBR+0x6a>
 2fe:	21 e0       	ldi	r18, 0x01	; 1
 300:	28 83       	st	Y, r18
 302:	1f c0       	rjmp	.+62     	; 0x342 <calculateTWBR+0xa8>
 304:	db 01       	movw	r26, r22
 306:	ca 01       	movw	r24, r20
 308:	68 94       	set
 30a:	14 f8       	bld	r1, 4
 30c:	b6 95       	lsr	r27
 30e:	a7 95       	ror	r26
 310:	97 95       	ror	r25
 312:	87 95       	ror	r24
 314:	16 94       	lsr	r1
 316:	d1 f7       	brne	.-12     	; 0x30c <calculateTWBR+0x72>
 318:	8f 3f       	cpi	r24, 0xFF	; 255
 31a:	91 05       	cpc	r25, r1
 31c:	a1 05       	cpc	r26, r1
 31e:	b1 05       	cpc	r27, r1
 320:	09 f0       	breq	.+2      	; 0x324 <calculateTWBR+0x8a>
 322:	18 f4       	brcc	.+6      	; 0x32a <calculateTWBR+0x90>
 324:	22 e0       	ldi	r18, 0x02	; 2
 326:	28 83       	st	Y, r18
 328:	0c c0       	rjmp	.+24     	; 0x342 <calculateTWBR+0xa8>
 32a:	83 e0       	ldi	r24, 0x03	; 3
 32c:	88 83       	st	Y, r24
 32e:	db 01       	movw	r26, r22
 330:	ca 01       	movw	r24, r20
 332:	68 94       	set
 334:	16 f8       	bld	r1, 6
 336:	b6 95       	lsr	r27
 338:	a7 95       	ror	r26
 33a:	97 95       	ror	r25
 33c:	87 95       	ror	r24
 33e:	16 94       	lsr	r1
 340:	d1 f7       	brne	.-12     	; 0x336 <calculateTWBR+0x9c>
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	0f 91       	pop	r16
 34a:	08 95       	ret

0000034c <stopAndGetErrorCode>:
 34c:	cf 93       	push	r28
 34e:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 352:	64 e0       	ldi	r22, 0x04	; 4
 354:	8c eb       	ldi	r24, 0xBC	; 188
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	f3 d0       	rcall	.+486    	; 0x540 <setBit>
 35a:	8c 2f       	mov	r24, r28
 35c:	88 7f       	andi	r24, 0xF8	; 248
 35e:	cf 91       	pop	r28
 360:	08 95       	ret

00000362 <i2c_init>:
 362:	cf 93       	push	r28
 364:	df 93       	push	r29
 366:	00 d0       	rcall	.+0      	; 0x368 <i2c_init+0x6>
 368:	00 d0       	rcall	.+0      	; 0x36a <i2c_init+0x8>
 36a:	00 d0       	rcall	.+0      	; 0x36c <i2c_init+0xa>
 36c:	cd b7       	in	r28, 0x3d	; 61
 36e:	de b7       	in	r29, 0x3e	; 62
 370:	5b 83       	std	Y+3, r21	; 0x03
 372:	6c 83       	std	Y+4, r22	; 0x04
 374:	7d 83       	std	Y+5, r23	; 0x05
 376:	8e 83       	std	Y+6, r24	; 0x06
 378:	6b 81       	ldd	r22, Y+3	; 0x03
 37a:	7c 81       	ldd	r23, Y+4	; 0x04
 37c:	8d 81       	ldd	r24, Y+5	; 0x05
 37e:	9e 81       	ldd	r25, Y+6	; 0x06
 380:	ae 01       	movw	r20, r28
 382:	4f 5f       	subi	r20, 0xFF	; 255
 384:	5f 4f       	sbci	r21, 0xFF	; 255
 386:	89 df       	rcall	.-238    	; 0x29a <calculateTWBR>
 388:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 38c:	60 e0       	ldi	r22, 0x00	; 0
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	f0 d0       	rcall	.+480    	; 0x572 <checkBit>
 392:	48 2f       	mov	r20, r24
 394:	60 e0       	ldi	r22, 0x00	; 0
 396:	89 eb       	ldi	r24, 0xB9	; 185
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	ba d0       	rcall	.+372    	; 0x510 <updateBit>
 39c:	61 e0       	ldi	r22, 0x01	; 1
 39e:	89 81       	ldd	r24, Y+1	; 0x01
 3a0:	e8 d0       	rcall	.+464    	; 0x572 <checkBit>
 3a2:	48 2f       	mov	r20, r24
 3a4:	61 e0       	ldi	r22, 0x01	; 1
 3a6:	89 eb       	ldi	r24, 0xB9	; 185
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	b2 d0       	rcall	.+356    	; 0x510 <updateBit>
 3ac:	62 e0       	ldi	r22, 0x02	; 2
 3ae:	71 e0       	ldi	r23, 0x01	; 1
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	3f df       	rcall	.-386    	; 0x234 <gpio_init>
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	3a df       	rcall	.-396    	; 0x234 <gpio_init>
 3c0:	26 96       	adiw	r28, 0x06	; 6
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	f8 94       	cli
 3c6:	de bf       	out	0x3e, r29	; 62
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	cd bf       	out	0x3d, r28	; 61
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <i2c_start>:
 3d2:	62 e0       	ldi	r22, 0x02	; 2
 3d4:	8c eb       	ldi	r24, 0xBC	; 188
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	b3 c0       	rjmp	.+358    	; 0x540 <setBit>
 3da:	08 95       	ret

000003dc <i2c_transmit>:
}

u8 i2c_transmit(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
 3dc:	af 92       	push	r10
 3de:	bf 92       	push	r11
 3e0:	cf 92       	push	r12
 3e2:	df 92       	push	r13
 3e4:	ef 92       	push	r14
 3e6:	ff 92       	push	r15
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	18 2f       	mov	r17, r24
 3f2:	6b 01       	movw	r12, r22
 3f4:	b4 2e       	mov	r11, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
 3f6:	65 e0       	ldi	r22, 0x05	; 5
 3f8:	8c eb       	ldi	r24, 0xBC	; 188
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	a1 d0       	rcall	.+322    	; 0x540 <setBit>
	/* Clear I2C flag */
	setBit(&TWCR, TWINT);
 3fe:	67 e0       	ldi	r22, 0x07	; 7
 400:	8c eb       	ldi	r24, 0xBC	; 188
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	9d d0       	rcall	.+314    	; 0x540 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
 406:	cc eb       	ldi	r28, 0xBC	; 188
 408:	d0 e0       	ldi	r29, 0x00	; 0
 40a:	88 81       	ld	r24, Y
 40c:	67 e0       	ldi	r22, 0x07	; 7
 40e:	b1 d0       	rcall	.+354    	; 0x572 <checkBit>
 410:	88 23       	and	r24, r24
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
 412:	d9 f3       	breq	.-10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 414:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 418:	88 7f       	andi	r24, 0xF8	; 248
 41a:	88 30       	cpi	r24, 0x08	; 8
 41c:	09 f0       	breq	.+2      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
 41e:	60 c0       	rjmp	.+192    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 420:	11 0f       	add	r17, r17
		/* Set write mode */
		clearBit(&TWDR, TWD0);
 422:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 426:	60 e0       	ldi	r22, 0x00	; 0
		/* Set repeated start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
 428:	8b eb       	ldi	r24, 0xBB	; 187
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	95 d0       	rcall	.+298    	; 0x558 <clearBit>
 42e:	65 e0       	ldi	r22, 0x05	; 5
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
 430:	8c eb       	ldi	r24, 0xBC	; 188
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	91 d0       	rcall	.+290    	; 0x558 <clearBit>
 436:	cc eb       	ldi	r28, 0xBC	; 188
 438:	d0 e0       	ldi	r29, 0x00	; 0
 43a:	88 81       	ld	r24, Y
 43c:	67 e0       	ldi	r22, 0x07	; 7
 43e:	99 d0       	rcall	.+306    	; 0x572 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
 440:	88 23       	and	r24, r24
 442:	d9 f3       	breq	.-10     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 444:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 448:	88 7f       	andi	r24, 0xF8	; 248
 44a:	88 31       	cpi	r24, 0x18	; 24
		{
			uart_transmit(s_debugUart, i);
 44c:	09 f0       	breq	.+2      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 44e:	46 c0       	rjmp	.+140    	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
 450:	e1 2c       	mov	r14, r1
 452:	f1 2c       	mov	r15, r1
 454:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
 458:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
 45c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
 460:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
 464:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end+0x4>
 468:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x5>
 46c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <__data_end+0x6>
 470:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <__data_end+0x7>
 474:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <__data_end+0x8>
 478:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__data_end+0x9>
			/* Transmit data */
			while (i != u8_dataLength)
 47c:	9a d4       	rcall	.+2356   	; 0xdb2 <uart_transmit>
 47e:	bb 20       	and	r11, r11
 480:	89 f1       	breq	.+98     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 482:	86 01       	movw	r16, r12
 484:	ba 94       	dec	r11
 486:	eb 2c       	mov	r14, r11
 488:	f1 2c       	mov	r15, r1
 48a:	8f ef       	ldi	r24, 0xFF	; 255
 48c:	e8 1a       	sub	r14, r24
 48e:	f8 0a       	sbc	r15, r24
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
 490:	ec 0c       	add	r14, r12
 492:	fd 1c       	adc	r15, r13
 494:	0f 2e       	mov	r0, r31
 496:	fb eb       	ldi	r31, 0xBB	; 187
 498:	af 2e       	mov	r10, r31
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
 49a:	b1 2c       	mov	r11, r1
 49c:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
 49e:	cc eb       	ldi	r28, 0xBC	; 188
 4a0:	d0 e0       	ldi	r29, 0x00	; 0
 4a2:	0f 2e       	mov	r0, r31
 4a4:	f9 eb       	ldi	r31, 0xB9	; 185
			uart_transmit(s_debugUart, i);
			/* Transmit data */
			while (i != u8_dataLength)
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
 4a6:	cf 2e       	mov	r12, r31
 4a8:	d1 2c       	mov	r13, r1
 4aa:	f0 2d       	mov	r31, r0
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
 4ac:	f8 01       	movw	r30, r16
 4ae:	81 91       	ld	r24, Z+
 4b0:	8f 01       	movw	r16, r30
 4b2:	f5 01       	movw	r30, r10
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
 4b4:	80 83       	st	Z, r24
 4b6:	67 e0       	ldi	r22, 0x07	; 7
 4b8:	ce 01       	movw	r24, r28
 4ba:	42 d0       	rcall	.+132    	; 0x540 <setBit>
 4bc:	88 81       	ld	r24, Y
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
 4be:	67 e0       	ldi	r22, 0x07	; 7
 4c0:	58 d0       	rcall	.+176    	; 0x572 <checkBit>
 4c2:	88 23       	and	r24, r24
					return stopAndGetErrorCode();
 4c4:	d9 f3       	breq	.-10     	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c6:	f6 01       	movw	r30, r12
 4c8:	80 81       	ld	r24, Z
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
		{
			uart_transmit(s_debugUart, i);
			/* Transmit data */
			while (i != u8_dataLength)
 4ca:	88 7f       	andi	r24, 0xF8	; 248
 4cc:	88 32       	cpi	r24, 0x28	; 40
 4ce:	11 f0       	breq	.+4      	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
					return stopAndGetErrorCode();
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
 4d0:	3d df       	rcall	.-390    	; 0x34c <stopAndGetErrorCode>
 4d2:	13 c0       	rjmp	.+38     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	}
	else
		return stopAndGetErrorCode();
 4d4:	0e 15       	cp	r16, r14
 4d6:	1f 05       	cpc	r17, r15
 4d8:	49 f7       	brne	.-46     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	
	/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
	setBit(&TWCR, TWSTO);
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
 4dc:	37 df       	rcall	.-402    	; 0x34c <stopAndGetErrorCode>
 4de:	0d c0       	rjmp	.+26     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
 4e0:	35 df       	rcall	.-406    	; 0x34c <stopAndGetErrorCode>
 4e2:	0b c0       	rjmp	.+22     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	/* Wait for stop condition to be sent. */
	while (checkBit(TWCR, TWSTO));
 4e4:	64 e0       	ldi	r22, 0x04	; 4
 4e6:	8c eb       	ldi	r24, 0xBC	; 188
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	2a d0       	rcall	.+84     	; 0x540 <setBit>
 4ec:	cc eb       	ldi	r28, 0xBC	; 188
 4ee:	d0 e0       	ldi	r29, 0x00	; 0
 4f0:	88 81       	ld	r24, Y
 4f2:	64 e0       	ldi	r22, 0x04	; 4

	return I2C_NO_ERROR;
}
 4f4:	3e d0       	rcall	.+124    	; 0x572 <checkBit>
 4f6:	81 11       	cpse	r24, r1
 4f8:	fb cf       	rjmp	.-10     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 4fa:	df 91       	pop	r29
 4fc:	cf 91       	pop	r28
 4fe:	1f 91       	pop	r17
 500:	0f 91       	pop	r16
 502:	ff 90       	pop	r15
 504:	ef 90       	pop	r14
 506:	df 90       	pop	r13
 508:	cf 90       	pop	r12
 50a:	bf 90       	pop	r11
 50c:	af 90       	pop	r10
 50e:	08 95       	ret

00000510 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
 510:	fc 01       	movw	r30, r24
 512:	94 2f       	mov	r25, r20
 514:	20 81       	ld	r18, Z
 516:	41 e0       	ldi	r20, 0x01	; 1
 518:	50 e0       	ldi	r21, 0x00	; 0
 51a:	06 2e       	mov	r0, r22
 51c:	02 c0       	rjmp	.+4      	; 0x522 <updateBit+0x12>
 51e:	44 0f       	add	r20, r20
 520:	55 1f       	adc	r21, r21
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <updateBit+0xe>
 526:	40 95       	com	r20
 528:	50 95       	com	r21
 52a:	24 23       	and	r18, r20
 52c:	49 2f       	mov	r20, r25
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <updateBit+0x26>
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <updateBit+0x22>
 53a:	42 2b       	or	r20, r18
 53c:	40 83       	st	Z, r20
 53e:	08 95       	ret

00000540 <setBit>:
 540:	fc 01       	movw	r30, r24
 542:	40 81       	ld	r20, Z
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <setBit+0xe>
 54a:	22 0f       	add	r18, r18
 54c:	33 1f       	adc	r19, r19
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <setBit+0xa>
 552:	24 2b       	or	r18, r20
 554:	20 83       	st	Z, r18
 556:	08 95       	ret

00000558 <clearBit>:
 558:	fc 01       	movw	r30, r24
 55a:	90 81       	ld	r25, Z
 55c:	21 e0       	ldi	r18, 0x01	; 1
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <clearBit+0xe>
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <clearBit+0xa>
 56a:	20 95       	com	r18
 56c:	29 23       	and	r18, r25
 56e:	20 83       	st	Z, r18
 570:	08 95       	ret

00000572 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	02 c0       	rjmp	.+4      	; 0x57a <checkBit+0x8>
 576:	95 95       	asr	r25
 578:	87 95       	ror	r24
 57a:	6a 95       	dec	r22
 57c:	e2 f7       	brpl	.-8      	; 0x576 <checkBit+0x4>
}
 57e:	81 70       	andi	r24, 0x01	; 1
 580:	08 95       	ret

00000582 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
 582:	cf 92       	push	r12
 584:	df 92       	push	r13
 586:	ef 92       	push	r14
 588:	ff 92       	push	r15
 58a:	69 01       	movw	r12, r18
 58c:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
 58e:	9b 01       	movw	r18, r22
 590:	ac 01       	movw	r20, r24
 592:	2c 19       	sub	r18, r12
 594:	3d 09       	sbc	r19, r13
 596:	4e 09       	sbc	r20, r14
 598:	5f 09       	sbc	r21, r15
 59a:	a8 ee       	ldi	r26, 0xE8	; 232
 59c:	b3 e0       	ldi	r27, 0x03	; 3
 59e:	e4 d4       	rcall	.+2504   	; 0xf68 <__muluhisi3>
 5a0:	a7 01       	movw	r20, r14
 5a2:	96 01       	movw	r18, r12
 5a4:	b0 d4       	rcall	.+2400   	; 0xf06 <__udivmodsi4>
 5a6:	c9 01       	movw	r24, r18
 5a8:	99 23       	and	r25, r25
 5aa:	24 f4       	brge	.+8      	; 0x5b4 <calculateError+0x32>
 5ac:	88 27       	eor	r24, r24
 5ae:	99 27       	eor	r25, r25
 5b0:	82 1b       	sub	r24, r18
 5b2:	93 0b       	sbc	r25, r19
}
 5b4:	ff 90       	pop	r15
 5b6:	ef 90       	pop	r14
 5b8:	df 90       	pop	r13
 5ba:	cf 90       	pop	r12
 5bc:	08 95       	ret

000005be <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
 5be:	1f 92       	push	r1
 5c0:	0f 92       	push	r0
 5c2:	0f b6       	in	r0, 0x3f	; 63
 5c4:	0f 92       	push	r0
 5c6:	11 24       	eor	r1, r1
 5c8:	0b b6       	in	r0, 0x3b	; 59
 5ca:	0f 92       	push	r0
 5cc:	8f 93       	push	r24
 5ce:	9f 93       	push	r25
 5d0:	ef 93       	push	r30
 5d2:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
 5d4:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <u8_RLastReceivedIndex>
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	8e b5       	in	r24, 0x2e	; 46
 5dc:	eb 5e       	subi	r30, 0xEB	; 235
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
 5e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u8_RLastReceivedIndex>
 5e6:	89 30       	cpi	r24, 0x09	; 9
 5e8:	30 f4       	brcc	.+12     	; 0x5f6 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
 5ea:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u8_RLastReceivedIndex>
 5ee:	8f 5f       	subi	r24, 0xFF	; 255
 5f0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <u8_RLastReceivedIndex>
 5f4:	02 c0       	rjmp	.+4      	; 0x5fa <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
 5f6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
 600:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <u8_TLastTransmittedIndex>
 604:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <u8_TLastRequestedIndex>
 608:	98 17       	cp	r25, r24
 60a:	a1 f0       	breq	.+40     	; 0x634 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
 60c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <u8_TLastTransmittedIndex>
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	e1 5e       	subi	r30, 0xE1	; 225
 614:	fe 4f       	sbci	r31, 0xFE	; 254
 616:	80 81       	ld	r24, Z
 618:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
 61a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_TLastTransmittedIndex>
 61e:	89 30       	cpi	r24, 0x09	; 9
 620:	30 f4       	brcc	.+12     	; 0x62e <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
 622:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_TLastTransmittedIndex>
 626:	8f 5f       	subi	r24, 0xFF	; 255
 628:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <u8_TLastTransmittedIndex>
 62c:	06 c0       	rjmp	.+12     	; 0x63a <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
 62e:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <u8_TLastTransmittedIndex>
 632:	03 c0       	rjmp	.+6      	; 0x63a <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
 634:	81 e0       	ldi	r24, 0x01	; 1
 636:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <b_TAvailable>
	}
}
 63a:	ff 91       	pop	r31
 63c:	ef 91       	pop	r30
 63e:	9f 91       	pop	r25
 640:	8f 91       	pop	r24
 642:	0f 90       	pop	r0
 644:	0b be       	out	0x3b, r0	; 59
 646:	0f 90       	pop	r0
 648:	0f be       	out	0x3f, r0	; 63
 64a:	0f 90       	pop	r0
 64c:	1f 90       	pop	r1
 64e:	18 95       	reti

00000650 <__vector_15>:
}
#endif

#ifdef TIMER1_INTERRUPT_MODE
ISR(TIMER1_OVF_vect)
{
 650:	1f 92       	push	r1
 652:	0f 92       	push	r0
 654:	0f b6       	in	r0, 0x3f	; 63
 656:	0f 92       	push	r0
 658:	11 24       	eor	r1, r1
 65a:	0b b6       	in	r0, 0x3b	; 59
 65c:	0f 92       	push	r0
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	4f 93       	push	r20
 664:	5f 93       	push	r21
 666:	6f 93       	push	r22
 668:	7f 93       	push	r23
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	af 93       	push	r26
 670:	bf 93       	push	r27
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31
	p_timer1Callbacks[OVERFLOW]();
 676:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <p_timer1Callbacks>
 67a:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <p_timer1Callbacks+0x1>
 67e:	09 95       	icall
}
 680:	ff 91       	pop	r31
 682:	ef 91       	pop	r30
 684:	bf 91       	pop	r27
 686:	af 91       	pop	r26
 688:	9f 91       	pop	r25
 68a:	8f 91       	pop	r24
 68c:	7f 91       	pop	r23
 68e:	6f 91       	pop	r22
 690:	5f 91       	pop	r21
 692:	4f 91       	pop	r20
 694:	3f 91       	pop	r19
 696:	2f 91       	pop	r18
 698:	0f 90       	pop	r0
 69a:	0b be       	out	0x3b, r0	; 59
 69c:	0f 90       	pop	r0
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	0f 90       	pop	r0
 6a2:	1f 90       	pop	r1
 6a4:	18 95       	reti

000006a6 <__vector_13>:

ISR(TIMER1_COMPA_vect)
{
 6a6:	1f 92       	push	r1
 6a8:	0f 92       	push	r0
 6aa:	0f b6       	in	r0, 0x3f	; 63
 6ac:	0f 92       	push	r0
 6ae:	11 24       	eor	r1, r1
 6b0:	0b b6       	in	r0, 0x3b	; 59
 6b2:	0f 92       	push	r0
 6b4:	0f 93       	push	r16
 6b6:	1f 93       	push	r17
 6b8:	2f 93       	push	r18
 6ba:	3f 93       	push	r19
 6bc:	4f 93       	push	r20
 6be:	5f 93       	push	r21
 6c0:	6f 93       	push	r22
 6c2:	7f 93       	push	r23
 6c4:	8f 93       	push	r24
 6c6:	9f 93       	push	r25
 6c8:	af 93       	push	r26
 6ca:	bf 93       	push	r27
 6cc:	cf 93       	push	r28
 6ce:	df 93       	push	r29
 6d0:	ef 93       	push	r30
 6d2:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
 6d4:	c1 e8       	ldi	r28, 0x81	; 129
 6d6:	d0 e0       	ldi	r29, 0x00	; 0
 6d8:	88 81       	ld	r24, Y
 6da:	64 e0       	ldi	r22, 0x04	; 4
 6dc:	4a df       	rcall	.-364    	; 0x572 <checkBit>
 6de:	18 2f       	mov	r17, r24
 6e0:	88 81       	ld	r24, Y
 6e2:	63 e0       	ldi	r22, 0x03	; 3
 6e4:	46 df       	rcall	.-372    	; 0x572 <checkBit>
 6e6:	c1 2f       	mov	r28, r17
 6e8:	cc 0f       	add	r28, r28
 6ea:	cc 0f       	add	r28, r28
 6ec:	cc 0f       	add	r28, r28
 6ee:	24 e0       	ldi	r18, 0x04	; 4
 6f0:	82 9f       	mul	r24, r18
 6f2:	c0 01       	movw	r24, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	c8 2b       	or	r28, r24
 6f8:	00 e8       	ldi	r16, 0x80	; 128
 6fa:	10 e0       	ldi	r17, 0x00	; 0
 6fc:	f8 01       	movw	r30, r16
 6fe:	80 81       	ld	r24, Z
 700:	61 e0       	ldi	r22, 0x01	; 1
 702:	37 df       	rcall	.-402    	; 0x572 <checkBit>
 704:	d8 2f       	mov	r29, r24
 706:	f8 01       	movw	r30, r16
 708:	80 81       	ld	r24, Z
 70a:	60 e0       	ldi	r22, 0x00	; 0
 70c:	32 df       	rcall	.-412    	; 0x572 <checkBit>
 70e:	dd 0f       	add	r29, r29
 710:	8c 2b       	or	r24, r28
 712:	8d 2b       	or	r24, r29
	if ((u8_wgm < 8 && u8_wgm != 4) || (u8_wgm >= 8 && u8_wgm % 2 == 0))
 714:	88 30       	cpi	r24, 0x08	; 8
 716:	18 f4       	brcc	.+6      	; 0x71e <__vector_13+0x78>
 718:	84 30       	cpi	r24, 0x04	; 4
 71a:	19 f4       	brne	.+6      	; 0x722 <__vector_13+0x7c>
 71c:	08 c0       	rjmp	.+16     	; 0x72e <__vector_13+0x88>
 71e:	80 fd       	sbrc	r24, 0
 720:	06 c0       	rjmp	.+12     	; 0x72e <__vector_13+0x88>
		p_timer1Callbacks[COMPARE_MATCH_A]();
 722:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <p_timer1Callbacks+0x2>
 726:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <p_timer1Callbacks+0x3>
 72a:	09 95       	icall
 72c:	05 c0       	rjmp	.+10     	; 0x738 <__vector_13+0x92>
	else
		p_timer1Callbacks[OVERFLOW]();
 72e:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <p_timer1Callbacks>
 732:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <p_timer1Callbacks+0x1>
 736:	09 95       	icall
}
 738:	ff 91       	pop	r31
 73a:	ef 91       	pop	r30
 73c:	df 91       	pop	r29
 73e:	cf 91       	pop	r28
 740:	bf 91       	pop	r27
 742:	af 91       	pop	r26
 744:	9f 91       	pop	r25
 746:	8f 91       	pop	r24
 748:	7f 91       	pop	r23
 74a:	6f 91       	pop	r22
 74c:	5f 91       	pop	r21
 74e:	4f 91       	pop	r20
 750:	3f 91       	pop	r19
 752:	2f 91       	pop	r18
 754:	1f 91       	pop	r17
 756:	0f 91       	pop	r16
 758:	0f 90       	pop	r0
 75a:	0b be       	out	0x3b, r0	; 59
 75c:	0f 90       	pop	r0
 75e:	0f be       	out	0x3f, r0	; 63
 760:	0f 90       	pop	r0
 762:	1f 90       	pop	r1
 764:	18 95       	reti

00000766 <__vector_14>:

ISR(TIMER1_COMPB_vect)
{
 766:	1f 92       	push	r1
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	0f 92       	push	r0
 76e:	11 24       	eor	r1, r1
 770:	0b b6       	in	r0, 0x3b	; 59
 772:	0f 92       	push	r0
 774:	2f 93       	push	r18
 776:	3f 93       	push	r19
 778:	4f 93       	push	r20
 77a:	5f 93       	push	r21
 77c:	6f 93       	push	r22
 77e:	7f 93       	push	r23
 780:	8f 93       	push	r24
 782:	9f 93       	push	r25
 784:	af 93       	push	r26
 786:	bf 93       	push	r27
 788:	ef 93       	push	r30
 78a:	ff 93       	push	r31
	p_timer1Callbacks[COMPARE_MATCH_B]();
 78c:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <p_timer1Callbacks+0x4>
 790:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <p_timer1Callbacks+0x5>
 794:	09 95       	icall
}
 796:	ff 91       	pop	r31
 798:	ef 91       	pop	r30
 79a:	bf 91       	pop	r27
 79c:	af 91       	pop	r26
 79e:	9f 91       	pop	r25
 7a0:	8f 91       	pop	r24
 7a2:	7f 91       	pop	r23
 7a4:	6f 91       	pop	r22
 7a6:	5f 91       	pop	r21
 7a8:	4f 91       	pop	r20
 7aa:	3f 91       	pop	r19
 7ac:	2f 91       	pop	r18
 7ae:	0f 90       	pop	r0
 7b0:	0b be       	out	0x3b, r0	; 59
 7b2:	0f 90       	pop	r0
 7b4:	0f be       	out	0x3f, r0	; 63
 7b6:	0f 90       	pop	r0
 7b8:	1f 90       	pop	r1
 7ba:	18 95       	reti

000007bc <__vector_12>:

ISR(TIMER1_CAPT_vect)
{
 7bc:	1f 92       	push	r1
 7be:	0f 92       	push	r0
 7c0:	0f b6       	in	r0, 0x3f	; 63
 7c2:	0f 92       	push	r0
 7c4:	11 24       	eor	r1, r1
 7c6:	0b b6       	in	r0, 0x3b	; 59
 7c8:	0f 92       	push	r0
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	2f 93       	push	r18
 7d0:	3f 93       	push	r19
 7d2:	4f 93       	push	r20
 7d4:	5f 93       	push	r21
 7d6:	6f 93       	push	r22
 7d8:	7f 93       	push	r23
 7da:	8f 93       	push	r24
 7dc:	9f 93       	push	r25
 7de:	af 93       	push	r26
 7e0:	bf 93       	push	r27
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	ef 93       	push	r30
 7e8:	ff 93       	push	r31
	u8 u8_wgm = checkBit(TCCR1B, WGM13) << 3 | checkBit(TCCR1B, WGM12) << 2 | checkBit(TCCR1A, WGM11) << 1 | checkBit(TCCR1A, WGM10);
 7ea:	c1 e8       	ldi	r28, 0x81	; 129
 7ec:	d0 e0       	ldi	r29, 0x00	; 0
 7ee:	88 81       	ld	r24, Y
 7f0:	64 e0       	ldi	r22, 0x04	; 4
 7f2:	bf de       	rcall	.-642    	; 0x572 <checkBit>
 7f4:	18 2f       	mov	r17, r24
 7f6:	88 81       	ld	r24, Y
 7f8:	63 e0       	ldi	r22, 0x03	; 3
 7fa:	bb de       	rcall	.-650    	; 0x572 <checkBit>
 7fc:	c1 2f       	mov	r28, r17
 7fe:	cc 0f       	add	r28, r28
 800:	cc 0f       	add	r28, r28
 802:	cc 0f       	add	r28, r28
 804:	24 e0       	ldi	r18, 0x04	; 4
 806:	82 9f       	mul	r24, r18
 808:	c0 01       	movw	r24, r0
 80a:	11 24       	eor	r1, r1
 80c:	c8 2b       	or	r28, r24
 80e:	00 e8       	ldi	r16, 0x80	; 128
 810:	10 e0       	ldi	r17, 0x00	; 0
 812:	f8 01       	movw	r30, r16
 814:	80 81       	ld	r24, Z
 816:	61 e0       	ldi	r22, 0x01	; 1
 818:	ac de       	rcall	.-680    	; 0x572 <checkBit>
 81a:	d8 2f       	mov	r29, r24
 81c:	f8 01       	movw	r30, r16
 81e:	80 81       	ld	r24, Z
 820:	60 e0       	ldi	r22, 0x00	; 0
 822:	a7 de       	rcall	.-690    	; 0x572 <checkBit>
 824:	dd 0f       	add	r29, r29
 826:	8c 2b       	or	r24, r28
 828:	8d 2b       	or	r24, r29
	if (!(u8_wgm >= 8 && u8_wgm % 2 == 0))
 82a:	88 30       	cpi	r24, 0x08	; 8
 82c:	10 f0       	brcs	.+4      	; 0x832 <__vector_12+0x76>
 82e:	80 ff       	sbrs	r24, 0
 830:	06 c0       	rjmp	.+12     	; 0x83e <__vector_12+0x82>
		p_timer1Callbacks[EXTERNAL]();
 832:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <p_timer1Callbacks+0x6>
 836:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <p_timer1Callbacks+0x7>
 83a:	09 95       	icall
 83c:	05 c0       	rjmp	.+10     	; 0x848 <__vector_12+0x8c>
	else
		p_timer1Callbacks[OVERFLOW]();
 83e:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <p_timer1Callbacks>
 842:	f0 91 2c 01 	lds	r31, 0x012C	; 0x80012c <p_timer1Callbacks+0x1>
 846:	09 95       	icall
}
 848:	ff 91       	pop	r31
 84a:	ef 91       	pop	r30
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	bf 91       	pop	r27
 852:	af 91       	pop	r26
 854:	9f 91       	pop	r25
 856:	8f 91       	pop	r24
 858:	7f 91       	pop	r23
 85a:	6f 91       	pop	r22
 85c:	5f 91       	pop	r21
 85e:	4f 91       	pop	r20
 860:	3f 91       	pop	r19
 862:	2f 91       	pop	r18
 864:	1f 91       	pop	r17
 866:	0f 91       	pop	r16
 868:	0f 90       	pop	r0
 86a:	0b be       	out	0x3b, r0	; 59
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_11>:
#endif

#ifdef TIMER2_INTERRUPT_MODE
ISR(TIMER2_OVF_vect)
{
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	0b b6       	in	r0, 0x3b	; 59
 882:	0f 92       	push	r0
 884:	2f 93       	push	r18
 886:	3f 93       	push	r19
 888:	4f 93       	push	r20
 88a:	5f 93       	push	r21
 88c:	6f 93       	push	r22
 88e:	7f 93       	push	r23
 890:	8f 93       	push	r24
 892:	9f 93       	push	r25
 894:	af 93       	push	r26
 896:	bf 93       	push	r27
 898:	ef 93       	push	r30
 89a:	ff 93       	push	r31
	p_timer2Callbacks[OVERFLOW]();
 89c:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <p_timer2Callbacks>
 8a0:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <p_timer2Callbacks+0x1>
 8a4:	09 95       	icall
}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	0f 90       	pop	r0
 8c0:	0b be       	out	0x3b, r0	; 59
 8c2:	0f 90       	pop	r0
 8c4:	0f be       	out	0x3f, r0	; 63
 8c6:	0f 90       	pop	r0
 8c8:	1f 90       	pop	r1
 8ca:	18 95       	reti

000008cc <__vector_9>:

ISR(TIMER2_COMPA_vect)
{
 8cc:	1f 92       	push	r1
 8ce:	0f 92       	push	r0
 8d0:	0f b6       	in	r0, 0x3f	; 63
 8d2:	0f 92       	push	r0
 8d4:	11 24       	eor	r1, r1
 8d6:	0b b6       	in	r0, 0x3b	; 59
 8d8:	0f 92       	push	r0
 8da:	2f 93       	push	r18
 8dc:	3f 93       	push	r19
 8de:	4f 93       	push	r20
 8e0:	5f 93       	push	r21
 8e2:	6f 93       	push	r22
 8e4:	7f 93       	push	r23
 8e6:	8f 93       	push	r24
 8e8:	9f 93       	push	r25
 8ea:	af 93       	push	r26
 8ec:	bf 93       	push	r27
 8ee:	ef 93       	push	r30
 8f0:	ff 93       	push	r31
	if ((checkBit(TCCR2B, WGM22) == CLEAR) && ((TCCR2A & 0b11) != 0b10))
 8f2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
 8f6:	63 e0       	ldi	r22, 0x03	; 3
 8f8:	3c de       	rcall	.-904    	; 0x572 <checkBit>
 8fa:	81 11       	cpse	r24, r1
 8fc:	0b c0       	rjmp	.+22     	; 0x914 <__vector_9+0x48>
 8fe:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
 902:	83 70       	andi	r24, 0x03	; 3
 904:	82 30       	cpi	r24, 0x02	; 2
 906:	31 f0       	breq	.+12     	; 0x914 <__vector_9+0x48>
		p_timer2Callbacks[COMPARE_MATCH_A]();
 908:	e0 91 37 01 	lds	r30, 0x0137	; 0x800137 <p_timer2Callbacks+0x2>
 90c:	f0 91 38 01 	lds	r31, 0x0138	; 0x800138 <p_timer2Callbacks+0x3>
 910:	09 95       	icall
 912:	05 c0       	rjmp	.+10     	; 0x91e <__vector_9+0x52>
	else
		p_timer2Callbacks[OVERFLOW]();
 914:	e0 91 35 01 	lds	r30, 0x0135	; 0x800135 <p_timer2Callbacks>
 918:	f0 91 36 01 	lds	r31, 0x0136	; 0x800136 <p_timer2Callbacks+0x1>
 91c:	09 95       	icall
}
 91e:	ff 91       	pop	r31
 920:	ef 91       	pop	r30
 922:	bf 91       	pop	r27
 924:	af 91       	pop	r26
 926:	9f 91       	pop	r25
 928:	8f 91       	pop	r24
 92a:	7f 91       	pop	r23
 92c:	6f 91       	pop	r22
 92e:	5f 91       	pop	r21
 930:	4f 91       	pop	r20
 932:	3f 91       	pop	r19
 934:	2f 91       	pop	r18
 936:	0f 90       	pop	r0
 938:	0b be       	out	0x3b, r0	; 59
 93a:	0f 90       	pop	r0
 93c:	0f be       	out	0x3f, r0	; 63
 93e:	0f 90       	pop	r0
 940:	1f 90       	pop	r1
 942:	18 95       	reti

00000944 <__vector_10>:

ISR(TIMER2_COMPB_vect)
{
 944:	1f 92       	push	r1
 946:	0f 92       	push	r0
 948:	0f b6       	in	r0, 0x3f	; 63
 94a:	0f 92       	push	r0
 94c:	11 24       	eor	r1, r1
 94e:	0b b6       	in	r0, 0x3b	; 59
 950:	0f 92       	push	r0
 952:	2f 93       	push	r18
 954:	3f 93       	push	r19
 956:	4f 93       	push	r20
 958:	5f 93       	push	r21
 95a:	6f 93       	push	r22
 95c:	7f 93       	push	r23
 95e:	8f 93       	push	r24
 960:	9f 93       	push	r25
 962:	af 93       	push	r26
 964:	bf 93       	push	r27
 966:	ef 93       	push	r30
 968:	ff 93       	push	r31
	p_timer2Callbacks[COMPARE_MATCH_B]();
 96a:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <p_timer2Callbacks+0x4>
 96e:	f0 91 3a 01 	lds	r31, 0x013A	; 0x80013a <p_timer2Callbacks+0x5>
 972:	09 95       	icall
}
 974:	ff 91       	pop	r31
 976:	ef 91       	pop	r30
 978:	bf 91       	pop	r27
 97a:	af 91       	pop	r26
 97c:	9f 91       	pop	r25
 97e:	8f 91       	pop	r24
 980:	7f 91       	pop	r23
 982:	6f 91       	pop	r22
 984:	5f 91       	pop	r21
 986:	4f 91       	pop	r20
 988:	3f 91       	pop	r19
 98a:	2f 91       	pop	r18
 98c:	0f 90       	pop	r0
 98e:	0b be       	out	0x3b, r0	; 59
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
 99a:	4f 92       	push	r4
 99c:	5f 92       	push	r5
 99e:	6f 92       	push	r6
 9a0:	7f 92       	push	r7
 9a2:	8f 92       	push	r8
 9a4:	9f 92       	push	r9
 9a6:	af 92       	push	r10
 9a8:	bf 92       	push	r11
 9aa:	cf 92       	push	r12
 9ac:	df 92       	push	r13
 9ae:	ef 92       	push	r14
 9b0:	ff 92       	push	r15
 9b2:	cf 93       	push	r28
 9b4:	df 93       	push	r29
 9b6:	4b 01       	movw	r8, r22
 9b8:	5c 01       	movw	r10, r24
 9ba:	ea 01       	movw	r28, r20
 9bc:	0f 2e       	mov	r0, r31
 9be:	f0 e2       	ldi	r31, 0x20	; 32
 9c0:	4f 2e       	mov	r4, r31
 9c2:	f1 ea       	ldi	r31, 0xA1	; 161
 9c4:	5f 2e       	mov	r5, r31
 9c6:	f7 e0       	ldi	r31, 0x07	; 7
 9c8:	6f 2e       	mov	r6, r31
 9ca:	71 2c       	mov	r7, r1
 9cc:	f0 2d       	mov	r31, r0
 9ce:	c3 01       	movw	r24, r6
 9d0:	b2 01       	movw	r22, r4
 9d2:	a5 01       	movw	r20, r10
 9d4:	94 01       	movw	r18, r8
 9d6:	97 d2       	rcall	.+1326   	; 0xf06 <__udivmodsi4>
 9d8:	69 01       	movw	r12, r18
 9da:	7a 01       	movw	r14, r20
 9dc:	c3 01       	movw	r24, r6
 9de:	b2 01       	movw	r22, r4
 9e0:	92 d2       	rcall	.+1316   	; 0xf06 <__udivmodsi4>
 9e2:	ca 01       	movw	r24, r20
 9e4:	b9 01       	movw	r22, r18
 9e6:	a5 01       	movw	r20, r10
 9e8:	94 01       	movw	r18, r8
 9ea:	cb dd       	rcall	.-1130   	; 0x582 <calculateError>
 9ec:	44 97       	sbiw	r24, 0x14	; 20
 9ee:	30 f4       	brcc	.+12     	; 0x9fc <calculateUBRR+0x62>
 9f0:	d7 01       	movw	r26, r14
 9f2:	c6 01       	movw	r24, r12
 9f4:	01 97       	sbiw	r24, 0x01	; 1
 9f6:	a1 09       	sbc	r26, r1
 9f8:	b1 09       	sbc	r27, r1
 9fa:	0e c0       	rjmp	.+28     	; 0xa18 <calculateUBRR+0x7e>
 9fc:	81 e0       	ldi	r24, 0x01	; 1
 9fe:	88 83       	st	Y, r24
 a00:	60 e4       	ldi	r22, 0x40	; 64
 a02:	72 e4       	ldi	r23, 0x42	; 66
 a04:	8f e0       	ldi	r24, 0x0F	; 15
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	a5 01       	movw	r20, r10
 a0a:	94 01       	movw	r18, r8
 a0c:	7c d2       	rcall	.+1272   	; 0xf06 <__udivmodsi4>
 a0e:	da 01       	movw	r26, r20
 a10:	c9 01       	movw	r24, r18
 a12:	01 97       	sbiw	r24, 0x01	; 1
 a14:	a1 09       	sbc	r26, r1
 a16:	b1 09       	sbc	r27, r1
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	ff 90       	pop	r15
 a1e:	ef 90       	pop	r14
 a20:	df 90       	pop	r13
 a22:	cf 90       	pop	r12
 a24:	bf 90       	pop	r11
 a26:	af 90       	pop	r10
 a28:	9f 90       	pop	r9
 a2a:	8f 90       	pop	r8
 a2c:	7f 90       	pop	r7
 a2e:	6f 90       	pop	r6
 a30:	5f 90       	pop	r5
 a32:	4f 90       	pop	r4
 a34:	08 95       	ret

00000a36 <__vector_20>:
 a36:	1f 92       	push	r1
 a38:	0f 92       	push	r0
 a3a:	0f b6       	in	r0, 0x3f	; 63
 a3c:	0f 92       	push	r0
 a3e:	11 24       	eor	r1, r1
 a40:	0b b6       	in	r0, 0x3b	; 59
 a42:	0f 92       	push	r0
 a44:	2f 93       	push	r18
 a46:	3f 93       	push	r19
 a48:	4f 93       	push	r20
 a4a:	5f 93       	push	r21
 a4c:	6f 93       	push	r22
 a4e:	7f 93       	push	r23
 a50:	8f 93       	push	r24
 a52:	9f 93       	push	r25
 a54:	af 93       	push	r26
 a56:	bf 93       	push	r27
 a58:	ef 93       	push	r30
 a5a:	ff 93       	push	r31
 a5c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a60:	62 e0       	ldi	r22, 0x02	; 2
 a62:	87 dd       	rcall	.-1266   	; 0x572 <checkBit>
 a64:	81 30       	cpi	r24, 0x01	; 1
 a66:	99 f4       	brne	.+38     	; 0xa8e <__vector_20+0x58>
 a68:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <u8_rx0LastReceivedIndex>
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 a72:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a76:	82 70       	andi	r24, 0x02	; 2
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	98 2f       	mov	r25, r24
 a7c:	88 27       	eor	r24, r24
 a7e:	82 2b       	or	r24, r18
 a80:	ee 0f       	add	r30, r30
 a82:	ff 1f       	adc	r31, r31
 a84:	e2 5c       	subi	r30, 0xC2	; 194
 a86:	fe 4f       	sbci	r31, 0xFE	; 254
 a88:	91 83       	std	Z+1, r25	; 0x01
 a8a:	80 83       	st	Z, r24
 a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <__vector_20+0x70>
 a8e:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <u8_rx0LastReceivedIndex>
 a92:	f0 e0       	ldi	r31, 0x00	; 0
 a94:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	ee 0f       	add	r30, r30
 a9c:	ff 1f       	adc	r31, r31
 a9e:	e2 5c       	subi	r30, 0xC2	; 194
 aa0:	fe 4f       	sbci	r31, 0xFE	; 254
 aa2:	91 83       	std	Z+1, r25	; 0x01
 aa4:	80 83       	st	Z, r24
 aa6:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <u8_rx0LastReceivedIndex>
 aaa:	89 30       	cpi	r24, 0x09	; 9
 aac:	30 f4       	brcc	.+12     	; 0xaba <__vector_20+0x84>
 aae:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <u8_rx0LastReceivedIndex>
 ab2:	8f 5f       	subi	r24, 0xFF	; 255
 ab4:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <u8_rx0LastReceivedIndex>
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <__vector_20+0x88>
 aba:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8_rx0LastReceivedIndex>
 abe:	81 e0       	ldi	r24, 0x01	; 1
 ac0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <b_rx0Available>
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0b be       	out	0x3b, r0	; 59
 ae0:	0f 90       	pop	r0
 ae2:	0f be       	out	0x3f, r0	; 63
 ae4:	0f 90       	pop	r0
 ae6:	1f 90       	pop	r1
 ae8:	18 95       	reti

00000aea <__vector_21>:
 aea:	1f 92       	push	r1
 aec:	0f 92       	push	r0
 aee:	0f b6       	in	r0, 0x3f	; 63
 af0:	0f 92       	push	r0
 af2:	11 24       	eor	r1, r1
 af4:	0b b6       	in	r0, 0x3b	; 59
 af6:	0f 92       	push	r0
 af8:	2f 93       	push	r18
 afa:	3f 93       	push	r19
 afc:	4f 93       	push	r20
 afe:	5f 93       	push	r21
 b00:	6f 93       	push	r22
 b02:	7f 93       	push	r23
 b04:	8f 93       	push	r24
 b06:	9f 93       	push	r25
 b08:	af 93       	push	r26
 b0a:	bf 93       	push	r27
 b0c:	ef 93       	push	r30
 b0e:	ff 93       	push	r31
 b10:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <u8_tx0LastTransmittedIndex>
 b14:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <u8_tx0LastRequestedIndex>
 b18:	98 17       	cp	r25, r24
 b1a:	69 f1       	breq	.+90     	; 0xb76 <__vector_21+0x8c>
 b1c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 b20:	62 e0       	ldi	r22, 0x02	; 2
 b22:	27 dd       	rcall	.-1458   	; 0x572 <checkBit>
 b24:	81 30       	cpi	r24, 0x01	; 1
 b26:	79 f4       	brne	.+30     	; 0xb46 <__vector_21+0x5c>
 b28:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <u8_tx0LastTransmittedIndex>
 b2c:	f0 e0       	ldi	r31, 0x00	; 0
 b2e:	ee 0f       	add	r30, r30
 b30:	ff 1f       	adc	r31, r31
 b32:	ec 5a       	subi	r30, 0xAC	; 172
 b34:	fe 4f       	sbci	r31, 0xFE	; 254
 b36:	80 81       	ld	r24, Z
 b38:	91 81       	ldd	r25, Z+1	; 0x01
 b3a:	e1 ec       	ldi	r30, 0xC1	; 193
 b3c:	f0 e0       	ldi	r31, 0x00	; 0
 b3e:	80 81       	ld	r24, Z
 b40:	91 70       	andi	r25, 0x01	; 1
 b42:	89 2b       	or	r24, r25
 b44:	80 83       	st	Z, r24
 b46:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <u8_tx0LastTransmittedIndex>
 b4a:	f0 e0       	ldi	r31, 0x00	; 0
 b4c:	ee 0f       	add	r30, r30
 b4e:	ff 1f       	adc	r31, r31
 b50:	ec 5a       	subi	r30, 0xAC	; 172
 b52:	fe 4f       	sbci	r31, 0xFE	; 254
 b54:	80 81       	ld	r24, Z
 b56:	91 81       	ldd	r25, Z+1	; 0x01
 b58:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 b5c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_tx0LastTransmittedIndex>
 b60:	89 30       	cpi	r24, 0x09	; 9
 b62:	30 f4       	brcc	.+12     	; 0xb70 <__vector_21+0x86>
 b64:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_tx0LastTransmittedIndex>
 b68:	8f 5f       	subi	r24, 0xFF	; 255
 b6a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8_tx0LastTransmittedIndex>
 b6e:	07 c0       	rjmp	.+14     	; 0xb7e <__vector_21+0x94>
 b70:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8_tx0LastTransmittedIndex>
 b74:	04 c0       	rjmp	.+8      	; 0xb7e <__vector_21+0x94>
 b76:	65 e0       	ldi	r22, 0x05	; 5
 b78:	81 ec       	ldi	r24, 0xC1	; 193
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	ed dc       	rcall	.-1574   	; 0x558 <clearBit>
 b7e:	ff 91       	pop	r31
 b80:	ef 91       	pop	r30
 b82:	bf 91       	pop	r27
 b84:	af 91       	pop	r26
 b86:	9f 91       	pop	r25
 b88:	8f 91       	pop	r24
 b8a:	7f 91       	pop	r23
 b8c:	6f 91       	pop	r22
 b8e:	5f 91       	pop	r21
 b90:	4f 91       	pop	r20
 b92:	3f 91       	pop	r19
 b94:	2f 91       	pop	r18
 b96:	0f 90       	pop	r0
 b98:	0b be       	out	0x3b, r0	; 59
 b9a:	0f 90       	pop	r0
 b9c:	0f be       	out	0x3f, r0	; 63
 b9e:	0f 90       	pop	r0
 ba0:	1f 90       	pop	r1
 ba2:	18 95       	reti

00000ba4 <__vector_22>:
 ba4:	1f 92       	push	r1
 ba6:	0f 92       	push	r0
 ba8:	0f b6       	in	r0, 0x3f	; 63
 baa:	0f 92       	push	r0
 bac:	11 24       	eor	r1, r1
 bae:	0b b6       	in	r0, 0x3b	; 59
 bb0:	0f 92       	push	r0
 bb2:	8f 93       	push	r24
 bb4:	9f 93       	push	r25
 bb6:	ef 93       	push	r30
 bb8:	ff 93       	push	r31
 bba:	80 e0       	ldi	r24, 0x00	; 0
 bbc:	90 e0       	ldi	r25, 0x00	; 0
 bbe:	fc 01       	movw	r30, r24
 bc0:	ee 0f       	add	r30, r30
 bc2:	ff 1f       	adc	r31, r31
 bc4:	ec 5a       	subi	r30, 0xAC	; 172
 bc6:	fe 4f       	sbci	r31, 0xFE	; 254
 bc8:	11 82       	std	Z+1, r1	; 0x01
 bca:	10 82       	st	Z, r1
 bcc:	01 96       	adiw	r24, 0x01	; 1
 bce:	8a 30       	cpi	r24, 0x0A	; 10
 bd0:	91 05       	cpc	r25, r1
 bd2:	a9 f7       	brne	.-22     	; 0xbbe <__vector_22+0x1a>
 bd4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8_tx0LastTransmittedIndex>
 bd8:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <u8_tx0LastRequestedIndex>
 bdc:	ff 91       	pop	r31
 bde:	ef 91       	pop	r30
 be0:	9f 91       	pop	r25
 be2:	8f 91       	pop	r24
 be4:	0f 90       	pop	r0
 be6:	0b be       	out	0x3b, r0	; 59
 be8:	0f 90       	pop	r0
 bea:	0f be       	out	0x3f, r0	; 63
 bec:	0f 90       	pop	r0
 bee:	1f 90       	pop	r1
 bf0:	18 95       	reti

00000bf2 <uart_init>:
 bf2:	0f 93       	push	r16
 bf4:	1f 93       	push	r17
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	cd b7       	in	r28, 0x3d	; 61
 bfc:	de b7       	in	r29, 0x3e	; 62
 bfe:	2b 97       	sbiw	r28, 0x0b	; 11
 c00:	0f b6       	in	r0, 0x3f	; 63
 c02:	f8 94       	cli
 c04:	de bf       	out	0x3e, r29	; 62
 c06:	0f be       	out	0x3f, r0	; 63
 c08:	cd bf       	out	0x3d, r28	; 61
 c0a:	0a 83       	std	Y+2, r16	; 0x02
 c0c:	1b 83       	std	Y+3, r17	; 0x03
 c0e:	2c 83       	std	Y+4, r18	; 0x04
 c10:	3d 83       	std	Y+5, r19	; 0x05
 c12:	4e 83       	std	Y+6, r20	; 0x06
 c14:	5f 83       	std	Y+7, r21	; 0x07
 c16:	68 87       	std	Y+8, r22	; 0x08
 c18:	79 87       	std	Y+9, r23	; 0x09
 c1a:	8a 87       	std	Y+10, r24	; 0x0a
 c1c:	9b 87       	std	Y+11, r25	; 0x0b
 c1e:	19 82       	std	Y+1, r1	; 0x01
 c20:	01 11       	cpse	r16, r1
 c22:	98 c0       	rjmp	.+304    	; 0xd54 <uart_init+0x162>
 c24:	19 2f       	mov	r17, r25
 c26:	e2 ec       	ldi	r30, 0xC2	; 194
 c28:	f0 e0       	ldi	r31, 0x00	; 0
 c2a:	80 81       	ld	r24, Z
 c2c:	8f 73       	andi	r24, 0x3F	; 63
 c2e:	80 83       	st	Z, r24
 c30:	6b 81       	ldd	r22, Y+3	; 0x03
 c32:	7c 81       	ldd	r23, Y+4	; 0x04
 c34:	8d 81       	ldd	r24, Y+5	; 0x05
 c36:	9e 81       	ldd	r25, Y+6	; 0x06
 c38:	ae 01       	movw	r20, r28
 c3a:	4f 5f       	subi	r20, 0xFF	; 255
 c3c:	5f 4f       	sbci	r21, 0xFF	; 255
 c3e:	ad de       	rcall	.-678    	; 0x99a <calculateUBRR>
 c40:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 c44:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 c48:	49 81       	ldd	r20, Y+1	; 0x01
 c4a:	61 e0       	ldi	r22, 0x01	; 1
 c4c:	80 ec       	ldi	r24, 0xC0	; 192
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	5f dc       	rcall	.-1858   	; 0x510 <updateBit>
 c52:	89 85       	ldd	r24, Y+9	; 0x09
 c54:	82 30       	cpi	r24, 0x02	; 2
 c56:	31 f1       	breq	.+76     	; 0xca4 <uart_init+0xb2>
 c58:	28 f4       	brcc	.+10     	; 0xc64 <uart_init+0x72>
 c5a:	88 23       	and	r24, r24
 c5c:	49 f0       	breq	.+18     	; 0xc70 <uart_init+0x7e>
 c5e:	81 30       	cpi	r24, 0x01	; 1
 c60:	a1 f0       	breq	.+40     	; 0xc8a <uart_init+0x98>
 c62:	46 c0       	rjmp	.+140    	; 0xcf0 <uart_init+0xfe>
 c64:	83 30       	cpi	r24, 0x03	; 3
 c66:	59 f1       	breq	.+86     	; 0xcbe <uart_init+0xcc>
 c68:	84 30       	cpi	r24, 0x04	; 4
 c6a:	09 f4       	brne	.+2      	; 0xc6e <uart_init+0x7c>
 c6c:	35 c0       	rjmp	.+106    	; 0xcd8 <uart_init+0xe6>
 c6e:	40 c0       	rjmp	.+128    	; 0xcf0 <uart_init+0xfe>
 c70:	61 e0       	ldi	r22, 0x01	; 1
 c72:	82 ec       	ldi	r24, 0xC2	; 194
 c74:	90 e0       	ldi	r25, 0x00	; 0
 c76:	70 dc       	rcall	.-1824   	; 0x558 <clearBit>
 c78:	62 e0       	ldi	r22, 0x02	; 2
 c7a:	82 ec       	ldi	r24, 0xC2	; 194
 c7c:	90 e0       	ldi	r25, 0x00	; 0
 c7e:	6c dc       	rcall	.-1832   	; 0x558 <clearBit>
 c80:	62 e0       	ldi	r22, 0x02	; 2
 c82:	81 ec       	ldi	r24, 0xC1	; 193
 c84:	90 e0       	ldi	r25, 0x00	; 0
 c86:	68 dc       	rcall	.-1840   	; 0x558 <clearBit>
 c88:	33 c0       	rjmp	.+102    	; 0xcf0 <uart_init+0xfe>
 c8a:	61 e0       	ldi	r22, 0x01	; 1
 c8c:	82 ec       	ldi	r24, 0xC2	; 194
 c8e:	90 e0       	ldi	r25, 0x00	; 0
 c90:	57 dc       	rcall	.-1874   	; 0x540 <setBit>
 c92:	62 e0       	ldi	r22, 0x02	; 2
 c94:	82 ec       	ldi	r24, 0xC2	; 194
 c96:	90 e0       	ldi	r25, 0x00	; 0
 c98:	5f dc       	rcall	.-1858   	; 0x558 <clearBit>
 c9a:	62 e0       	ldi	r22, 0x02	; 2
 c9c:	81 ec       	ldi	r24, 0xC1	; 193
 c9e:	90 e0       	ldi	r25, 0x00	; 0
 ca0:	5b dc       	rcall	.-1866   	; 0x558 <clearBit>
 ca2:	26 c0       	rjmp	.+76     	; 0xcf0 <uart_init+0xfe>
 ca4:	61 e0       	ldi	r22, 0x01	; 1
 ca6:	82 ec       	ldi	r24, 0xC2	; 194
 ca8:	90 e0       	ldi	r25, 0x00	; 0
 caa:	56 dc       	rcall	.-1876   	; 0x558 <clearBit>
 cac:	62 e0       	ldi	r22, 0x02	; 2
 cae:	82 ec       	ldi	r24, 0xC2	; 194
 cb0:	90 e0       	ldi	r25, 0x00	; 0
 cb2:	46 dc       	rcall	.-1908   	; 0x540 <setBit>
 cb4:	62 e0       	ldi	r22, 0x02	; 2
 cb6:	81 ec       	ldi	r24, 0xC1	; 193
 cb8:	90 e0       	ldi	r25, 0x00	; 0
 cba:	4e dc       	rcall	.-1892   	; 0x558 <clearBit>
 cbc:	19 c0       	rjmp	.+50     	; 0xcf0 <uart_init+0xfe>
 cbe:	61 e0       	ldi	r22, 0x01	; 1
 cc0:	82 ec       	ldi	r24, 0xC2	; 194
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	3d dc       	rcall	.-1926   	; 0x540 <setBit>
 cc6:	62 e0       	ldi	r22, 0x02	; 2
 cc8:	82 ec       	ldi	r24, 0xC2	; 194
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	39 dc       	rcall	.-1934   	; 0x540 <setBit>
 cce:	62 e0       	ldi	r22, 0x02	; 2
 cd0:	81 ec       	ldi	r24, 0xC1	; 193
 cd2:	90 e0       	ldi	r25, 0x00	; 0
 cd4:	41 dc       	rcall	.-1918   	; 0x558 <clearBit>
 cd6:	0c c0       	rjmp	.+24     	; 0xcf0 <uart_init+0xfe>
 cd8:	61 e0       	ldi	r22, 0x01	; 1
 cda:	82 ec       	ldi	r24, 0xC2	; 194
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	30 dc       	rcall	.-1952   	; 0x540 <setBit>
 ce0:	62 e0       	ldi	r22, 0x02	; 2
 ce2:	82 ec       	ldi	r24, 0xC2	; 194
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	2c dc       	rcall	.-1960   	; 0x540 <setBit>
 ce8:	62 e0       	ldi	r22, 0x02	; 2
 cea:	81 ec       	ldi	r24, 0xC1	; 193
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	28 dc       	rcall	.-1968   	; 0x540 <setBit>
 cf0:	4a 85       	ldd	r20, Y+10	; 0x0a
 cf2:	63 e0       	ldi	r22, 0x03	; 3
 cf4:	82 ec       	ldi	r24, 0xC2	; 194
 cf6:	90 e0       	ldi	r25, 0x00	; 0
 cf8:	0b dc       	rcall	.-2026   	; 0x510 <updateBit>
 cfa:	12 30       	cpi	r17, 0x02	; 2
 cfc:	31 f4       	brne	.+12     	; 0xd0a <uart_init+0x118>
 cfe:	e2 ec       	ldi	r30, 0xC2	; 194
 d00:	f0 e0       	ldi	r31, 0x00	; 0
 d02:	80 81       	ld	r24, Z
 d04:	8f 7c       	andi	r24, 0xCF	; 207
 d06:	80 83       	st	Z, r24
 d08:	09 c0       	rjmp	.+18     	; 0xd1c <uart_init+0x12a>
 d0a:	65 e0       	ldi	r22, 0x05	; 5
 d0c:	82 ec       	ldi	r24, 0xC2	; 194
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	17 dc       	rcall	.-2002   	; 0x540 <setBit>
 d12:	41 2f       	mov	r20, r17
 d14:	64 e0       	ldi	r22, 0x04	; 4
 d16:	82 ec       	ldi	r24, 0xC2	; 194
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	fa db       	rcall	.-2060   	; 0x510 <updateBit>
 d1c:	8f 81       	ldd	r24, Y+7	; 0x07
 d1e:	88 23       	and	r24, r24
 d20:	51 f0       	breq	.+20     	; 0xd36 <uart_init+0x144>
 d22:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <u8_rx0LastProcessedIndex>
 d26:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <u8_rx0LastReceivedIndex>
 d2a:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <b_rx0Available>
 d2e:	67 e0       	ldi	r22, 0x07	; 7
 d30:	81 ec       	ldi	r24, 0xC1	; 193
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	05 dc       	rcall	.-2038   	; 0x540 <setBit>
 d36:	88 85       	ldd	r24, Y+8	; 0x08
 d38:	88 23       	and	r24, r24
 d3a:	61 f0       	breq	.+24     	; 0xd54 <uart_init+0x162>
 d3c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <u8_tx0LastRequestedIndex>
 d40:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8_tx0LastTransmittedIndex>
 d44:	66 e0       	ldi	r22, 0x06	; 6
 d46:	81 ec       	ldi	r24, 0xC1	; 193
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	fa db       	rcall	.-2060   	; 0x540 <setBit>
 d4c:	65 e0       	ldi	r22, 0x05	; 5
 d4e:	81 ec       	ldi	r24, 0xC1	; 193
 d50:	90 e0       	ldi	r25, 0x00	; 0
 d52:	f6 db       	rcall	.-2068   	; 0x540 <setBit>
 d54:	2b 96       	adiw	r28, 0x0b	; 11
 d56:	0f b6       	in	r0, 0x3f	; 63
 d58:	f8 94       	cli
 d5a:	de bf       	out	0x3e, r29	; 62
 d5c:	0f be       	out	0x3f, r0	; 63
 d5e:	cd bf       	out	0x3d, r28	; 61
 d60:	df 91       	pop	r29
 d62:	cf 91       	pop	r28
 d64:	1f 91       	pop	r17
 d66:	0f 91       	pop	r16
 d68:	08 95       	ret

00000d6a <uart_start>:
 d6a:	0f 93       	push	r16
 d6c:	1f 93       	push	r17
 d6e:	cf 93       	push	r28
 d70:	df 93       	push	r29
 d72:	cd b7       	in	r28, 0x3d	; 61
 d74:	de b7       	in	r29, 0x3e	; 62
 d76:	2a 97       	sbiw	r28, 0x0a	; 10
 d78:	0f b6       	in	r0, 0x3f	; 63
 d7a:	f8 94       	cli
 d7c:	de bf       	out	0x3e, r29	; 62
 d7e:	0f be       	out	0x3f, r0	; 63
 d80:	cd bf       	out	0x3d, r28	; 61
 d82:	6f 83       	std	Y+7, r22	; 0x07
 d84:	01 11       	cpse	r16, r1
 d86:	0a c0       	rjmp	.+20     	; 0xd9c <uart_start+0x32>
 d88:	45 2f       	mov	r20, r21
 d8a:	64 e0       	ldi	r22, 0x04	; 4
 d8c:	81 ec       	ldi	r24, 0xC1	; 193
 d8e:	90 e0       	ldi	r25, 0x00	; 0
 d90:	bf db       	rcall	.-2178   	; 0x510 <updateBit>
 d92:	4f 81       	ldd	r20, Y+7	; 0x07
 d94:	63 e0       	ldi	r22, 0x03	; 3
 d96:	81 ec       	ldi	r24, 0xC1	; 193
 d98:	90 e0       	ldi	r25, 0x00	; 0
 d9a:	ba db       	rcall	.-2188   	; 0x510 <updateBit>
 d9c:	2a 96       	adiw	r28, 0x0a	; 10
 d9e:	0f b6       	in	r0, 0x3f	; 63
 da0:	f8 94       	cli
 da2:	de bf       	out	0x3e, r29	; 62
 da4:	0f be       	out	0x3f, r0	; 63
 da6:	cd bf       	out	0x3d, r28	; 61
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	1f 91       	pop	r17
 dae:	0f 91       	pop	r16
 db0:	08 95       	ret

00000db2 <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
 db2:	ef 92       	push	r14
 db4:	ff 92       	push	r15
 db6:	0f 93       	push	r16
 db8:	1f 93       	push	r17
 dba:	cf 93       	push	r28
 dbc:	df 93       	push	r29
 dbe:	cd b7       	in	r28, 0x3d	; 61
 dc0:	de b7       	in	r29, 0x3e	; 62
 dc2:	2a 97       	sbiw	r28, 0x0a	; 10
 dc4:	0f b6       	in	r0, 0x3f	; 63
 dc6:	f8 94       	cli
 dc8:	de bf       	out	0x3e, r29	; 62
 dca:	0f be       	out	0x3f, r0	; 63
 dcc:	cd bf       	out	0x3d, r28	; 61
 dce:	09 83       	std	Y+1, r16	; 0x01
 dd0:	1a 83       	std	Y+2, r17	; 0x02
 dd2:	2b 83       	std	Y+3, r18	; 0x03
 dd4:	3c 83       	std	Y+4, r19	; 0x04
 dd6:	4d 83       	std	Y+5, r20	; 0x05
 dd8:	5e 83       	std	Y+6, r21	; 0x06
 dda:	6f 83       	std	Y+7, r22	; 0x07
 ddc:	78 87       	std	Y+8, r23	; 0x08
 dde:	89 87       	std	Y+9, r24	; 0x09
 de0:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
 de2:	01 11       	cpse	r16, r1
 de4:	3f c0       	rjmp	.+126    	; 0xe64 <uart_transmit+0xb2>
	{
		case UART0:
		#ifdef USING_UART0
		#ifdef UART0_INTERRUPT_MODE
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
 de6:	00 ec       	ldi	r16, 0xC0	; 192
 de8:	10 e0       	ldi	r17, 0x00	; 0
 dea:	f8 01       	movw	r30, r16
 dec:	80 81       	ld	r24, Z
 dee:	65 e0       	ldi	r22, 0x05	; 5
 df0:	c0 db       	rcall	.-2176   	; 0x572 <checkBit>
 df2:	88 23       	and	r24, r24
 df4:	d1 f3       	breq	.-12     	; 0xdea <uart_transmit+0x38>
			au16_tx0Buffer[u8_tx0LastRequestedIndex] = u16_data;
 df6:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <u8_tx0LastRequestedIndex>
 dfa:	f0 e0       	ldi	r31, 0x00	; 0
 dfc:	ee 0f       	add	r30, r30
 dfe:	ff 1f       	adc	r31, r31
 e00:	ec 5a       	subi	r30, 0xAC	; 172
 e02:	fe 4f       	sbci	r31, 0xFE	; 254
 e04:	f1 82       	std	Z+1, r15	; 0x01
 e06:	e0 82       	st	Z, r14
			if (u8_tx0LastRequestedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
 e08:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <u8_tx0LastRequestedIndex>
 e0c:	89 30       	cpi	r24, 0x09	; 9
 e0e:	30 f4       	brcc	.+12     	; 0xe1c <uart_transmit+0x6a>
				u8_tx0LastRequestedIndex++;
 e10:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <u8_tx0LastRequestedIndex>
 e14:	8f 5f       	subi	r24, 0xFF	; 255
 e16:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <u8_tx0LastRequestedIndex>
 e1a:	02 c0       	rjmp	.+4      	; 0xe20 <uart_transmit+0x6e>
			else
				u8_tx0LastRequestedIndex = 0;
 e1c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <u8_tx0LastRequestedIndex>
			if (checkBit(UCSR0A, UDRE0) == SET)
 e20:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 e24:	65 e0       	ldi	r22, 0x05	; 5
 e26:	a5 db       	rcall	.-2230   	; 0x572 <checkBit>
 e28:	81 30       	cpi	r24, 0x01	; 1
 e2a:	e1 f4       	brne	.+56     	; 0xe64 <uart_transmit+0xb2>
			{
				if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
 e2c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_tx0LastTransmittedIndex>
 e30:	89 30       	cpi	r24, 0x09	; 9
 e32:	30 f4       	brcc	.+12     	; 0xe40 <uart_transmit+0x8e>
					u8_tx0LastTransmittedIndex++;
 e34:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <u8_tx0LastTransmittedIndex>
 e38:	8f 5f       	subi	r24, 0xFF	; 255
 e3a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <u8_tx0LastTransmittedIndex>
 e3e:	02 c0       	rjmp	.+4      	; 0xe44 <uart_transmit+0x92>
				else
					u8_tx0LastTransmittedIndex = 0;
 e40:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <u8_tx0LastTransmittedIndex>
				setBit(&UCSR0B, UDRIE0);
 e44:	65 e0       	ldi	r22, 0x05	; 5
 e46:	81 ec       	ldi	r24, 0xC1	; 193
 e48:	90 e0       	ldi	r25, 0x00	; 0
 e4a:	7a db       	rcall	.-2316   	; 0x540 <setBit>
				if (s_uart.frameSize == _9BIT)
 e4c:	88 85       	ldd	r24, Y+8	; 0x08
 e4e:	84 30       	cpi	r24, 0x04	; 4
 e50:	39 f4       	brne	.+14     	; 0xe60 <uart_transmit+0xae>
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
 e52:	e1 ec       	ldi	r30, 0xC1	; 193
 e54:	f0 e0       	ldi	r31, 0x00	; 0
 e56:	80 81       	ld	r24, Z
 e58:	9f 2d       	mov	r25, r15
 e5a:	91 70       	andi	r25, 0x01	; 1
 e5c:	89 2b       	or	r24, r25
 e5e:	80 83       	st	Z, r24
				UDR0 = (u8) u16_data;
 e60:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
 e64:	2a 96       	adiw	r28, 0x0a	; 10
 e66:	0f b6       	in	r0, 0x3f	; 63
 e68:	f8 94       	cli
 e6a:	de bf       	out	0x3e, r29	; 62
 e6c:	0f be       	out	0x3f, r0	; 63
 e6e:	cd bf       	out	0x3d, r28	; 61
 e70:	df 91       	pop	r29
 e72:	cf 91       	pop	r28
 e74:	1f 91       	pop	r17
 e76:	0f 91       	pop	r16
 e78:	ff 90       	pop	r15
 e7a:	ef 90       	pop	r14
 e7c:	08 95       	ret

00000e7e <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
 e7e:	1f 92       	push	r1
 e80:	0f 92       	push	r0
 e82:	0f b6       	in	r0, 0x3f	; 63
 e84:	0f 92       	push	r0
 e86:	11 24       	eor	r1, r1
 e88:	0b b6       	in	r0, 0x3b	; 59
 e8a:	0f 92       	push	r0
 e8c:	2f 93       	push	r18
 e8e:	3f 93       	push	r19
 e90:	4f 93       	push	r20
 e92:	5f 93       	push	r21
 e94:	6f 93       	push	r22
 e96:	7f 93       	push	r23
 e98:	8f 93       	push	r24
 e9a:	9f 93       	push	r25
 e9c:	af 93       	push	r26
 e9e:	bf 93       	push	r27
 ea0:	ef 93       	push	r30
 ea2:	ff 93       	push	r31
	p_wdgCallback();
 ea4:	e0 91 68 01 	lds	r30, 0x0168	; 0x800168 <p_wdgCallback>
 ea8:	f0 91 69 01 	lds	r31, 0x0169	; 0x800169 <p_wdgCallback+0x1>
 eac:	09 95       	icall
}
 eae:	ff 91       	pop	r31
 eb0:	ef 91       	pop	r30
 eb2:	bf 91       	pop	r27
 eb4:	af 91       	pop	r26
 eb6:	9f 91       	pop	r25
 eb8:	8f 91       	pop	r24
 eba:	7f 91       	pop	r23
 ebc:	6f 91       	pop	r22
 ebe:	5f 91       	pop	r21
 ec0:	4f 91       	pop	r20
 ec2:	3f 91       	pop	r19
 ec4:	2f 91       	pop	r18
 ec6:	0f 90       	pop	r0
 ec8:	0b be       	out	0x3b, r0	; 59
 eca:	0f 90       	pop	r0
 ecc:	0f be       	out	0x3f, r0	; 63
 ece:	0f 90       	pop	r0
 ed0:	1f 90       	pop	r1
 ed2:	18 95       	reti

00000ed4 <VL53L0X_i2c_init>:
#include "vl53l0x_def.h"
#include "i2c.h"

//#define I2C_DEBUG

int VL53L0X_i2c_init(void) {
 ed4:	cf 93       	push	r28
 ed6:	df 93       	push	r29
 ed8:	00 d0       	rcall	.+0      	; 0xeda <VL53L0X_i2c_init+0x6>
 eda:	00 d0       	rcall	.+0      	; 0xedc <VL53L0X_i2c_init+0x8>
 edc:	1f 92       	push	r1
 ede:	cd b7       	in	r28, 0x3d	; 61
 ee0:	de b7       	in	r29, 0x3e	; 62
	i2c_struct_t s_i2c;
	s_i2c.frequency = 80000;
 ee2:	80 e8       	ldi	r24, 0x80	; 128
 ee4:	58 2f       	mov	r21, r24
	s_i2c.mode = I2C_MASTER;
	i2c_init(s_i2c);
 ee6:	41 e0       	ldi	r20, 0x01	; 1
 ee8:	68 e3       	ldi	r22, 0x38	; 56
 eea:	71 e0       	ldi	r23, 0x01	; 1
 eec:	80 e0       	ldi	r24, 0x00	; 0
	i2c_start();
 eee:	39 da       	rcall	.-2958   	; 0x362 <i2c_init>
 ef0:	70 da       	rcall	.-2848   	; 0x3d2 <i2c_start>
	return VL53L0X_ERROR_NONE;
}
 ef2:	80 e0       	ldi	r24, 0x00	; 0
 ef4:	90 e0       	ldi	r25, 0x00	; 0
 ef6:	0f 90       	pop	r0
 ef8:	0f 90       	pop	r0
 efa:	0f 90       	pop	r0
 efc:	0f 90       	pop	r0
 efe:	0f 90       	pop	r0
 f00:	df 91       	pop	r29
 f02:	cf 91       	pop	r28
 f04:	08 95       	ret

00000f06 <__udivmodsi4>:
 f06:	a1 e2       	ldi	r26, 0x21	; 33
 f08:	1a 2e       	mov	r1, r26
 f0a:	aa 1b       	sub	r26, r26
 f0c:	bb 1b       	sub	r27, r27
 f0e:	fd 01       	movw	r30, r26
 f10:	0d c0       	rjmp	.+26     	; 0xf2c <__udivmodsi4_ep>

00000f12 <__udivmodsi4_loop>:
 f12:	aa 1f       	adc	r26, r26
 f14:	bb 1f       	adc	r27, r27
 f16:	ee 1f       	adc	r30, r30
 f18:	ff 1f       	adc	r31, r31
 f1a:	a2 17       	cp	r26, r18
 f1c:	b3 07       	cpc	r27, r19
 f1e:	e4 07       	cpc	r30, r20
 f20:	f5 07       	cpc	r31, r21
 f22:	20 f0       	brcs	.+8      	; 0xf2c <__udivmodsi4_ep>
 f24:	a2 1b       	sub	r26, r18
 f26:	b3 0b       	sbc	r27, r19
 f28:	e4 0b       	sbc	r30, r20
 f2a:	f5 0b       	sbc	r31, r21

00000f2c <__udivmodsi4_ep>:
 f2c:	66 1f       	adc	r22, r22
 f2e:	77 1f       	adc	r23, r23
 f30:	88 1f       	adc	r24, r24
 f32:	99 1f       	adc	r25, r25
 f34:	1a 94       	dec	r1
 f36:	69 f7       	brne	.-38     	; 0xf12 <__udivmodsi4_loop>
 f38:	60 95       	com	r22
 f3a:	70 95       	com	r23
 f3c:	80 95       	com	r24
 f3e:	90 95       	com	r25
 f40:	9b 01       	movw	r18, r22
 f42:	ac 01       	movw	r20, r24
 f44:	bd 01       	movw	r22, r26
 f46:	cf 01       	movw	r24, r30
 f48:	08 95       	ret

00000f4a <__umulhisi3>:
 f4a:	a2 9f       	mul	r26, r18
 f4c:	b0 01       	movw	r22, r0
 f4e:	b3 9f       	mul	r27, r19
 f50:	c0 01       	movw	r24, r0
 f52:	a3 9f       	mul	r26, r19
 f54:	70 0d       	add	r23, r0
 f56:	81 1d       	adc	r24, r1
 f58:	11 24       	eor	r1, r1
 f5a:	91 1d       	adc	r25, r1
 f5c:	b2 9f       	mul	r27, r18
 f5e:	70 0d       	add	r23, r0
 f60:	81 1d       	adc	r24, r1
 f62:	11 24       	eor	r1, r1
 f64:	91 1d       	adc	r25, r1
 f66:	08 95       	ret

00000f68 <__muluhisi3>:
 f68:	f0 df       	rcall	.-32     	; 0xf4a <__umulhisi3>
 f6a:	a5 9f       	mul	r26, r21
 f6c:	90 0d       	add	r25, r0
 f6e:	b4 9f       	mul	r27, r20
 f70:	90 0d       	add	r25, r0
 f72:	a4 9f       	mul	r26, r20
 f74:	80 0d       	add	r24, r0
 f76:	91 1d       	adc	r25, r1
 f78:	11 24       	eor	r1, r1
 f7a:	08 95       	ret

00000f7c <_exit>:
 f7c:	f8 94       	cli

00000f7e <__stop_program>:
 f7e:	ff cf       	rjmp	.-2      	; 0xf7e <__stop_program>
