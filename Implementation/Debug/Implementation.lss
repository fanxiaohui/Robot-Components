
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000026fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002688  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800100  00800100  000026fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000272c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000081f4  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b10  00000000  00000000  0000af30  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f1f  00000000  00000000  0000ca40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001470  00000000  00000000  0000f960  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001dd5  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c25  00000000  00000000  00012ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  000177ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	24 c1       	rjmp	.+584    	; 0x24e <__vector_1>
       6:	00 00       	nop
       8:	2c c1       	rjmp	.+600    	; 0x262 <__vector_2>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__vector_3>
       e:	00 00       	nop
      10:	f6 c0       	rjmp	.+492    	; 0x1fe <__vector_4>
      12:	00 00       	nop
      14:	fe c0       	rjmp	.+508    	; 0x212 <__vector_5>
      16:	00 00       	nop
      18:	06 c1       	rjmp	.+524    	; 0x226 <__vector_6>
      1a:	00 00       	nop
      1c:	0e c1       	rjmp	.+540    	; 0x23a <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <__vector_8>
      24:	6b c6       	rjmp	.+3286   	; 0xcfc <__vector_9>
      26:	00 00       	nop
      28:	a5 c6       	rjmp	.+3402   	; 0xd74 <__vector_10>
      2a:	00 00       	nop
      2c:	3c c6       	rjmp	.+3192   	; 0xca6 <__vector_11>
      2e:	00 00       	nop
      30:	dd c5       	rjmp	.+3002   	; 0xbec <__vector_12>
      32:	00 00       	nop
      34:	50 c5       	rjmp	.+2720   	; 0xad6 <__vector_13>
      36:	00 00       	nop
      38:	ae c5       	rjmp	.+2908   	; 0xb96 <__vector_14>
      3a:	00 00       	nop
      3c:	21 c5       	rjmp	.+2626   	; 0xa80 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c3       	rjmp	.+1716   	; 0x702 <__vector_19>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c2 07       	cpc	r28, r18
      8e:	cb 07       	cpc	r28, r27
      90:	d4 07       	cpc	r29, r20
      92:	dd 07       	cpc	r29, r29
      94:	e6 07       	cpc	r30, r22
      96:	ef 07       	cpc	r30, r31
      98:	f8 07       	cpc	r31, r24

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e8 e8       	ldi	r30, 0x88	; 136
      ae:	f6 e2       	ldi	r31, 0x26	; 38
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a0 35       	cpi	r26, 0x50	; 80
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 42 13 	jmp	0x2684	; 0x2684 <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:
#include "device.h"
#include "vl53l0x_example.h"

int main()
{
	device_disableJTAG();
      d8:	6e d0       	rcall	.+220    	; 0x1b6 <device_disableJTAG>
	debug_init();
      da:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <debug_init>
	distanceSensor_init();

	distanceSensor_maxSpeedTest();
      de:	02 d0       	rcall	.+4      	; 0xe4 <distanceSensor_init>
      e0:	4e d0       	rcall	.+156    	; 0x17e <distanceSensor_maxSpeedTest>
      e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0xa>

000000e4 <distanceSensor_init>:

	while (1)
	{
		distance = vl53l0x_readRangeContinuous(&s_frontSensor);
		if (distance != 0xffff)
			debug_writeDecimal(distance);
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	e4 e0       	ldi	r30, 0x04	; 4
      ea:	f1 e0       	ldi	r31, 0x01	; 1
      ec:	88 ee       	ldi	r24, 0xE8	; 232
      ee:	58 2f       	mov	r21, r24
      f0:	81 83       	std	Z+1, r24	; 0x01
      f2:	83 e0       	ldi	r24, 0x03	; 3
      f4:	82 83       	std	Z+2, r24	; 0x02
      f6:	13 82       	std	Z+3, r1	; 0x03
      f8:	14 82       	std	Z+4, r1	; 0x04
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	48 2f       	mov	r20, r24
      fe:	80 83       	st	Z, r24
     100:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     104:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     108:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     10c:	5e d6       	rcall	.+3260   	; 0xdca <timer_init>
     10e:	0a ee       	ldi	r16, 0xEA	; 234
     110:	12 e1       	ldi	r17, 0x12	; 18
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     118:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     11c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     120:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     124:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     128:	0e 94 32 09 	call	0x1264	; 0x1264 <timer_attachInterrupt>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     132:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     136:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     13a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     13e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     142:	d4 d7       	rcall	.+4008   	; 0x10ec <timer_enableInterrupt>
     144:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     148:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     14c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     150:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     154:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     158:	84 d7       	rcall	.+3848   	; 0x1062 <timer_start>
     15a:	e9 e0       	ldi	r30, 0x09	; 9
     15c:	f1 e0       	ldi	r31, 0x01	; 1
     15e:	89 e2       	ldi	r24, 0x29	; 41
     160:	80 83       	st	Z, r24
     162:	84 e6       	ldi	r24, 0x64	; 100
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	92 83       	std	Z+2, r25	; 0x02
     168:	81 83       	std	Z+1, r24	; 0x01
     16a:	82 e0       	ldi	r24, 0x02	; 2
     16c:	84 83       	std	Z+4, r24	; 0x04
     16e:	85 83       	std	Z+5, r24	; 0x05
     170:	78 94       	sei
     172:	cf 01       	movw	r24, r30
     174:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <vl53l0x_init>
     178:	1f 91       	pop	r17
     17a:	0f 91       	pop	r16
     17c:	08 95       	ret

0000017e <distanceSensor_maxSpeedTest>:
void distanceSensor_maxSpeedTest()
{
	u16 distance;
	u16 rangePeriod = 20;
	
	vl53l0x_start(&s_frontSensor);
     17e:	89 e0       	ldi	r24, 0x09	; 9
     180:	91 e0       	ldi	r25, 0x01	; 1
     182:	0e 94 1e 10 	call	0x203c	; 0x203c <vl53l0x_start>
	vl53l0x_startContinuous(&s_frontSensor, rangePeriod);
     186:	44 e1       	ldi	r20, 0x14	; 20
     188:	50 e0       	ldi	r21, 0x00	; 0
     18a:	60 e0       	ldi	r22, 0x00	; 0
     18c:	70 e0       	ldi	r23, 0x00	; 0
     18e:	89 e0       	ldi	r24, 0x09	; 9
     190:	91 e0       	ldi	r25, 0x01	; 1
     192:	0e 94 87 12 	call	0x250e	; 0x250e <vl53l0x_startContinuous>
	vl53l0x_setMode(&s_frontSensor, VL53L0X_MAX_SPEED);
     196:	63 e0       	ldi	r22, 0x03	; 3
     198:	89 e0       	ldi	r24, 0x09	; 9
     19a:	91 e0       	ldi	r25, 0x01	; 1
     19c:	0e 94 4c 12 	call	0x2498	; 0x2498 <vl53l0x_setMode>

	while (1)
	{
		distance = vl53l0x_readRangeContinuous(&s_frontSensor);
     1a0:	89 e0       	ldi	r24, 0x09	; 9
     1a2:	91 e0       	ldi	r25, 0x01	; 1
     1a4:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <vl53l0x_readRangeContinuous>
		if (distance != 0xffff)
     1a8:	8f 3f       	cpi	r24, 0xFF	; 255
     1aa:	2f ef       	ldi	r18, 0xFF	; 255
     1ac:	92 07       	cpc	r25, r18
     1ae:	c1 f3       	breq	.-16     	; 0x1a0 <distanceSensor_maxSpeedTest+0x22>
			debug_writeDecimal(distance);
     1b0:	0e 94 0d 0b 	call	0x161a	; 0x161a <debug_writeDecimal>
     1b4:	f5 cf       	rjmp	.-22     	; 0x1a0 <distanceSensor_maxSpeedTest+0x22>

000001b6 <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
     1b6:	80 e8       	ldi	r24, 0x80	; 128
     1b8:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     1ba:	85 bf       	out	0x35, r24	; 53
     1bc:	08 95       	ret

000001be <gpio_changeDirection>:
}

void gpio_setDirectionInput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = INPUT;
	gpio_changeDirection(*s_gpio);
     1be:	61 30       	cpi	r22, 0x01	; 1
     1c0:	61 f0       	breq	.+24     	; 0x1da <gpio_changeDirection+0x1c>
     1c2:	28 f0       	brcs	.+10     	; 0x1ce <gpio_changeDirection+0x10>
     1c4:	62 30       	cpi	r22, 0x02	; 2
     1c6:	79 f0       	breq	.+30     	; 0x1e6 <gpio_changeDirection+0x28>
     1c8:	63 30       	cpi	r22, 0x03	; 3
     1ca:	99 f0       	breq	.+38     	; 0x1f2 <gpio_changeDirection+0x34>
     1cc:	08 95       	ret
     1ce:	48 2f       	mov	r20, r24
     1d0:	67 2f       	mov	r22, r23
     1d2:	81 e2       	ldi	r24, 0x21	; 33
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	3c c2       	rjmp	.+1144   	; 0x650 <updateBit>
     1d8:	08 95       	ret
     1da:	48 2f       	mov	r20, r24
     1dc:	67 2f       	mov	r22, r23
     1de:	84 e2       	ldi	r24, 0x24	; 36
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	36 c2       	rjmp	.+1132   	; 0x650 <updateBit>
     1e4:	08 95       	ret
     1e6:	48 2f       	mov	r20, r24
     1e8:	67 2f       	mov	r22, r23
     1ea:	87 e2       	ldi	r24, 0x27	; 39
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	30 c2       	rjmp	.+1120   	; 0x650 <updateBit>
     1f0:	08 95       	ret
     1f2:	48 2f       	mov	r20, r24
     1f4:	67 2f       	mov	r22, r23
     1f6:	8a e2       	ldi	r24, 0x2A	; 42
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	2a c2       	rjmp	.+1108   	; 0x650 <updateBit>
     1fc:	08 95       	ret

000001fe <__vector_4>:
     1fe:	1f 92       	push	r1
     200:	0f 92       	push	r0
     202:	0f b6       	in	r0, 0x3f	; 63
     204:	0f 92       	push	r0
     206:	11 24       	eor	r1, r1
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <__vector_5>:
     212:	1f 92       	push	r1
     214:	0f 92       	push	r0
     216:	0f b6       	in	r0, 0x3f	; 63
     218:	0f 92       	push	r0
     21a:	11 24       	eor	r1, r1
     21c:	0f 90       	pop	r0
     21e:	0f be       	out	0x3f, r0	; 63
     220:	0f 90       	pop	r0
     222:	1f 90       	pop	r1
     224:	18 95       	reti

00000226 <__vector_6>:
     226:	1f 92       	push	r1
     228:	0f 92       	push	r0
     22a:	0f b6       	in	r0, 0x3f	; 63
     22c:	0f 92       	push	r0
     22e:	11 24       	eor	r1, r1
     230:	0f 90       	pop	r0
     232:	0f be       	out	0x3f, r0	; 63
     234:	0f 90       	pop	r0
     236:	1f 90       	pop	r1
     238:	18 95       	reti

0000023a <__vector_7>:
     23a:	1f 92       	push	r1
     23c:	0f 92       	push	r0
     23e:	0f b6       	in	r0, 0x3f	; 63
     240:	0f 92       	push	r0
     242:	11 24       	eor	r1, r1
     244:	0f 90       	pop	r0
     246:	0f be       	out	0x3f, r0	; 63
     248:	0f 90       	pop	r0
     24a:	1f 90       	pop	r1
     24c:	18 95       	reti

0000024e <__vector_1>:
     24e:	1f 92       	push	r1
     250:	0f 92       	push	r0
     252:	0f b6       	in	r0, 0x3f	; 63
     254:	0f 92       	push	r0
     256:	11 24       	eor	r1, r1
     258:	0f 90       	pop	r0
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	0f 90       	pop	r0
     25e:	1f 90       	pop	r1
     260:	18 95       	reti

00000262 <__vector_2>:
     262:	1f 92       	push	r1
     264:	0f 92       	push	r0
     266:	0f b6       	in	r0, 0x3f	; 63
     268:	0f 92       	push	r0
     26a:	11 24       	eor	r1, r1
     26c:	0f 90       	pop	r0
     26e:	0f be       	out	0x3f, r0	; 63
     270:	0f 90       	pop	r0
     272:	1f 90       	pop	r1
     274:	18 95       	reti

00000276 <__vector_3>:
     276:	1f 92       	push	r1
     278:	0f 92       	push	r0
     27a:	0f b6       	in	r0, 0x3f	; 63
     27c:	0f 92       	push	r0
     27e:	11 24       	eor	r1, r1
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <gpio_init>:
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	c6 2f       	mov	r28, r22
     294:	17 2f       	mov	r17, r23
     296:	d8 2f       	mov	r29, r24
     298:	09 2f       	mov	r16, r25
     29a:	91 df       	rcall	.-222    	; 0x1be <gpio_changeDirection>
     29c:	d1 11       	cpse	r29, r1
     29e:	23 c0       	rjmp	.+70     	; 0x2e6 <gpio_init+0x5c>
     2a0:	c1 30       	cpi	r28, 0x01	; 1
     2a2:	81 f0       	breq	.+32     	; 0x2c4 <gpio_init+0x3a>
     2a4:	28 f0       	brcs	.+10     	; 0x2b0 <gpio_init+0x26>
     2a6:	c2 30       	cpi	r28, 0x02	; 2
     2a8:	99 f0       	breq	.+38     	; 0x2d0 <gpio_init+0x46>
     2aa:	c3 30       	cpi	r28, 0x03	; 3
     2ac:	b9 f0       	breq	.+46     	; 0x2dc <gpio_init+0x52>
     2ae:	1b c0       	rjmp	.+54     	; 0x2e6 <gpio_init+0x5c>
     2b0:	40 2f       	mov	r20, r16
     2b2:	61 2f       	mov	r22, r17
     2b4:	82 e2       	ldi	r24, 0x22	; 34
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	cb d1       	rcall	.+918    	; 0x650 <updateBit>
     2ba:	61 2f       	mov	r22, r17
     2bc:	8e e7       	ldi	r24, 0x7E	; 126
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	eb d1       	rcall	.+982    	; 0x698 <clearBit>
     2c2:	11 c0       	rjmp	.+34     	; 0x2e6 <gpio_init+0x5c>
     2c4:	40 2f       	mov	r20, r16
     2c6:	61 2f       	mov	r22, r17
     2c8:	85 e2       	ldi	r24, 0x25	; 37
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	c1 d1       	rcall	.+898    	; 0x650 <updateBit>
     2ce:	0b c0       	rjmp	.+22     	; 0x2e6 <gpio_init+0x5c>
     2d0:	40 2f       	mov	r20, r16
     2d2:	61 2f       	mov	r22, r17
     2d4:	88 e2       	ldi	r24, 0x28	; 40
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	bb d1       	rcall	.+886    	; 0x650 <updateBit>
     2da:	05 c0       	rjmp	.+10     	; 0x2e6 <gpio_init+0x5c>
     2dc:	40 2f       	mov	r20, r16
     2de:	61 2f       	mov	r22, r17
     2e0:	8b e2       	ldi	r24, 0x2B	; 43
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	b5 d1       	rcall	.+874    	; 0x650 <updateBit>
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	08 95       	ret

000002f0 <gpio_setDirectionOutput>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
     2f0:	21 e0       	ldi	r18, 0x01	; 1
     2f2:	fc 01       	movw	r30, r24
     2f4:	22 83       	std	Z+2, r18	; 0x02
	gpio_changeDirection(*s_gpio);
     2f6:	60 81       	ld	r22, Z
     2f8:	71 81       	ldd	r23, Z+1	; 0x01
     2fa:	82 81       	ldd	r24, Z+2	; 0x02
     2fc:	93 81       	ldd	r25, Z+3	; 0x03
     2fe:	5f cf       	rjmp	.-322    	; 0x1be <gpio_changeDirection>
     300:	08 95       	ret

00000302 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     302:	61 30       	cpi	r22, 0x01	; 1
     304:	59 f0       	breq	.+22     	; 0x31c <gpio_out_set+0x1a>
     306:	28 f0       	brcs	.+10     	; 0x312 <gpio_out_set+0x10>
     308:	62 30       	cpi	r22, 0x02	; 2
     30a:	69 f0       	breq	.+26     	; 0x326 <gpio_out_set+0x24>
     30c:	63 30       	cpi	r22, 0x03	; 3
     30e:	81 f0       	breq	.+32     	; 0x330 <gpio_out_set+0x2e>
     310:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     312:	67 2f       	mov	r22, r23
     314:	82 e2       	ldi	r24, 0x22	; 34
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	b3 c1       	rjmp	.+870    	; 0x680 <setBit>
			break;
     31a:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     31c:	67 2f       	mov	r22, r23
     31e:	85 e2       	ldi	r24, 0x25	; 37
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	ae c1       	rjmp	.+860    	; 0x680 <setBit>
			break;
     324:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     326:	67 2f       	mov	r22, r23
     328:	88 e2       	ldi	r24, 0x28	; 40
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	a9 c1       	rjmp	.+850    	; 0x680 <setBit>
			break;
     32e:	08 95       	ret
		case PD:
			setBit(&PORTD, s_gpio.number);
     330:	67 2f       	mov	r22, r23
     332:	8b e2       	ldi	r24, 0x2B	; 43
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	a4 c1       	rjmp	.+840    	; 0x680 <setBit>
     338:	08 95       	ret

0000033a <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     33a:	0f 93       	push	r16
     33c:	1f 93       	push	r17
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	8b 01       	movw	r16, r22
     344:	9c 01       	movw	r18, r24
     346:	ea 01       	movw	r28, r20
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	72 e1       	ldi	r23, 0x12	; 18
     34c:	8a e7       	ldi	r24, 0x7A	; 122
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	a9 01       	movw	r20, r18
     352:	98 01       	movw	r18, r16
     354:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     358:	ba 01       	movw	r22, r20
     35a:	a9 01       	movw	r20, r18
     35c:	40 51       	subi	r20, 0x10	; 16
     35e:	51 09       	sbc	r21, r1
     360:	61 09       	sbc	r22, r1
     362:	71 09       	sbc	r23, r1
     364:	db 01       	movw	r26, r22
     366:	ca 01       	movw	r24, r20
     368:	b6 95       	lsr	r27
     36a:	a7 95       	ror	r26
     36c:	97 95       	ror	r25
     36e:	87 95       	ror	r24
     370:	8f 3f       	cpi	r24, 0xFF	; 255
     372:	91 05       	cpc	r25, r1
     374:	a1 05       	cpc	r26, r1
     376:	b1 05       	cpc	r27, r1
     378:	09 f0       	breq	.+2      	; 0x37c <calculateTWBR+0x42>
     37a:	10 f4       	brcc	.+4      	; 0x380 <calculateTWBR+0x46>
     37c:	18 82       	st	Y, r1
     37e:	32 c0       	rjmp	.+100    	; 0x3e4 <calculateTWBR+0xaa>
     380:	db 01       	movw	r26, r22
     382:	ca 01       	movw	r24, r20
     384:	68 94       	set
     386:	12 f8       	bld	r1, 2
     388:	b6 95       	lsr	r27
     38a:	a7 95       	ror	r26
     38c:	97 95       	ror	r25
     38e:	87 95       	ror	r24
     390:	16 94       	lsr	r1
     392:	d1 f7       	brne	.-12     	; 0x388 <calculateTWBR+0x4e>
     394:	8f 3f       	cpi	r24, 0xFF	; 255
     396:	91 05       	cpc	r25, r1
     398:	a1 05       	cpc	r26, r1
     39a:	b1 05       	cpc	r27, r1
     39c:	09 f0       	breq	.+2      	; 0x3a0 <calculateTWBR+0x66>
     39e:	18 f4       	brcc	.+6      	; 0x3a6 <calculateTWBR+0x6c>
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	28 83       	st	Y, r18
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <calculateTWBR+0xaa>
     3a6:	db 01       	movw	r26, r22
     3a8:	ca 01       	movw	r24, r20
     3aa:	68 94       	set
     3ac:	14 f8       	bld	r1, 4
     3ae:	b6 95       	lsr	r27
     3b0:	a7 95       	ror	r26
     3b2:	97 95       	ror	r25
     3b4:	87 95       	ror	r24
     3b6:	16 94       	lsr	r1
     3b8:	d1 f7       	brne	.-12     	; 0x3ae <calculateTWBR+0x74>
     3ba:	8f 3f       	cpi	r24, 0xFF	; 255
     3bc:	91 05       	cpc	r25, r1
     3be:	a1 05       	cpc	r26, r1
     3c0:	b1 05       	cpc	r27, r1
     3c2:	09 f0       	breq	.+2      	; 0x3c6 <calculateTWBR+0x8c>
     3c4:	18 f4       	brcc	.+6      	; 0x3cc <calculateTWBR+0x92>
     3c6:	22 e0       	ldi	r18, 0x02	; 2
     3c8:	28 83       	st	Y, r18
     3ca:	0c c0       	rjmp	.+24     	; 0x3e4 <calculateTWBR+0xaa>
     3cc:	83 e0       	ldi	r24, 0x03	; 3
     3ce:	88 83       	st	Y, r24
     3d0:	db 01       	movw	r26, r22
     3d2:	ca 01       	movw	r24, r20
     3d4:	68 94       	set
     3d6:	16 f8       	bld	r1, 6
     3d8:	b6 95       	lsr	r27
     3da:	a7 95       	ror	r26
     3dc:	97 95       	ror	r25
     3de:	87 95       	ror	r24
     3e0:	16 94       	lsr	r1
     3e2:	d1 f7       	brne	.-12     	; 0x3d8 <calculateTWBR+0x9e>
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	08 95       	ret

000003ee <i2c_init>:
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	1f 92       	push	r1
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	ae 01       	movw	r20, r28
     3fa:	4f 5f       	subi	r20, 0xFF	; 255
     3fc:	5f 4f       	sbci	r21, 0xFF	; 255
     3fe:	9d df       	rcall	.-198    	; 0x33a <calculateTWBR>
     400:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     404:	60 e0       	ldi	r22, 0x00	; 0
     406:	89 81       	ldd	r24, Y+1	; 0x01
     408:	54 d1       	rcall	.+680    	; 0x6b2 <checkBit>
     40a:	48 2f       	mov	r20, r24
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	89 eb       	ldi	r24, 0xB9	; 185
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	1e d1       	rcall	.+572    	; 0x650 <updateBit>
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	89 81       	ldd	r24, Y+1	; 0x01
     418:	4c d1       	rcall	.+664    	; 0x6b2 <checkBit>
     41a:	48 2f       	mov	r20, r24
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	89 eb       	ldi	r24, 0xB9	; 185
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	16 d1       	rcall	.+556    	; 0x650 <updateBit>
     424:	62 e0       	ldi	r22, 0x02	; 2
     426:	71 e0       	ldi	r23, 0x01	; 1
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	2e df       	rcall	.-420    	; 0x28a <gpio_init>
     42e:	62 e0       	ldi	r22, 0x02	; 2
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	80 e0       	ldi	r24, 0x00	; 0
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	29 df       	rcall	.-430    	; 0x28a <gpio_init>
     438:	0f 90       	pop	r0
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	08 95       	ret

00000440 <i2c_start>:
     440:	62 e0       	ldi	r22, 0x02	; 2
     442:	8c eb       	ldi	r24, 0xBC	; 188
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	1c c1       	rjmp	.+568    	; 0x680 <setBit>
     448:	08 95       	ret

0000044a <i2c_sendStart>:
}

u8 i2c_sendStart(u8 u8_address)
{
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	f8 2e       	mov	r15, r24
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);
     456:	cc eb       	ldi	r28, 0xBC	; 188
     458:	d0 e0       	ldi	r29, 0x00	; 0
     45a:	88 81       	ld	r24, Y
     45c:	62 e0       	ldi	r22, 0x02	; 2
     45e:	29 d1       	rcall	.+594    	; 0x6b2 <checkBit>
     460:	28 81       	ld	r18, Y
     462:	34 e0       	ldi	r19, 0x04	; 4
     464:	83 9f       	mul	r24, r19
     466:	c0 01       	movw	r24, r0
     468:	11 24       	eor	r1, r1
     46a:	80 6a       	ori	r24, 0xA0	; 160
     46c:	82 2b       	or	r24, r18
     46e:	88 83       	st	Y, r24
     470:	ce ef       	ldi	r28, 0xFE	; 254
     472:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until start condition has been sent */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     474:	0c eb       	ldi	r16, 0xBC	; 188
     476:	10 e0       	ldi	r17, 0x00	; 0
     478:	f8 01       	movw	r30, r16
     47a:	80 81       	ld	r24, Z
     47c:	67 e0       	ldi	r22, 0x07	; 7
     47e:	19 d1       	rcall	.+562    	; 0x6b2 <checkBit>
     480:	81 11       	cpse	r24, r1
     482:	33 c0       	rjmp	.+102    	; 0x4ea <i2c_sendStart+0xa0>
     484:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until start condition has been sent */
	while(--timeout > 0)
     486:	c1 f7       	brne	.-16     	; 0x478 <i2c_sendStart+0x2e>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     488:	8f ef       	ldi	r24, 0xFF	; 255
     48a:	3b c0       	rjmp	.+118    	; 0x502 <i2c_sendStart+0xb8>

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     48c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     490:	88 7f       	andi	r24, 0xF8	; 248
     492:	80 31       	cpi	r24, 0x10	; 16
     494:	21 f0       	breq	.+8      	; 0x49e <i2c_sendStart+0x54>
		return (TW_STATUS & 0xF8);
     496:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     49a:	88 7f       	andi	r24, 0xF8	; 248
     49c:	32 c0       	rjmp	.+100    	; 0x502 <i2c_sendStart+0xb8>

	/* Send device address */
	TWDR = u8_address;
     49e:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     4a2:	cc eb       	ldi	r28, 0xBC	; 188
     4a4:	d0 e0       	ldi	r29, 0x00	; 0
     4a6:	88 81       	ld	r24, Y
     4a8:	62 e0       	ldi	r22, 0x02	; 2
     4aa:	03 d1       	rcall	.+518    	; 0x6b2 <checkBit>
     4ac:	f4 e0       	ldi	r31, 0x04	; 4
     4ae:	8f 9f       	mul	r24, r31
     4b0:	c0 01       	movw	r24, r0
     4b2:	11 24       	eor	r1, r1
     4b4:	80 68       	ori	r24, 0x80	; 128
     4b6:	88 83       	st	Y, r24
     4b8:	ce ef       	ldi	r28, 0xFE	; 254
     4ba:	df ef       	ldi	r29, 0xFF	; 255

	/* Wail until address has been sent */
	while( --timeout > 0 )
		if(checkBit(TWCR, TWINT))
     4bc:	0c eb       	ldi	r16, 0xBC	; 188
     4be:	10 e0       	ldi	r17, 0x00	; 0
     4c0:	f8 01       	movw	r30, r16
     4c2:	80 81       	ld	r24, Z
     4c4:	67 e0       	ldi	r22, 0x07	; 7
     4c6:	f5 d0       	rcall	.+490    	; 0x6b2 <checkBit>
     4c8:	81 11       	cpse	r24, r1
     4ca:	15 c0       	rjmp	.+42     	; 0x4f6 <i2c_sendStart+0xac>
     4cc:	21 97       	sbiw	r28, 0x01	; 1
	/* Send device address */
	TWDR = u8_address;
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wail until address has been sent */
	while( --timeout > 0 )
     4ce:	c1 f7       	brne	.-16     	; 0x4c0 <i2c_sendStart+0x76>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     4d0:	8f ef       	ldi	r24, 0xFF	; 255
     4d2:	17 c0       	rjmp	.+46     	; 0x502 <i2c_sendStart+0xb8>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     4d4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4d8:	88 7f       	andi	r24, 0xF8	; 248
     4da:	80 34       	cpi	r24, 0x40	; 64
     4dc:	21 f0       	breq	.+8      	; 0x4e6 <i2c_sendStart+0x9c>
		return (TW_STATUS & 0xF8);
     4de:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4e2:	88 7f       	andi	r24, 0xF8	; 248
     4e4:	0e c0       	rjmp	.+28     	; 0x502 <i2c_sendStart+0xb8>

	return I2C_NO_ERROR;
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	0c c0       	rjmp	.+24     	; 0x502 <i2c_sendStart+0xb8>
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     4ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4ee:	88 7f       	andi	r24, 0xF8	; 248
     4f0:	88 30       	cpi	r24, 0x08	; 8
     4f2:	61 f6       	brne	.-104    	; 0x48c <i2c_sendStart+0x42>
     4f4:	d4 cf       	rjmp	.-88     	; 0x49e <i2c_sendStart+0x54>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     4f6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4fa:	88 7f       	andi	r24, 0xF8	; 248
     4fc:	88 31       	cpi	r24, 0x18	; 24
     4fe:	51 f7       	brne	.-44     	; 0x4d4 <i2c_sendStart+0x8a>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     500:	80 e0       	ldi	r24, 0x00	; 0
}
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	08 95       	ret

0000050e <i2c_sendRepStart>:

u8 i2c_sendRepStart(u8 u8_address)
{
	return i2c_sendStart(u8_address);
     50e:	9d cf       	rjmp	.-198    	; 0x44a <i2c_sendStart>
}
     510:	08 95       	ret

00000512 <i2c_sendStop>:

void i2c_sendStop(void)
{
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
     51a:	cc eb       	ldi	r28, 0xBC	; 188
     51c:	d0 e0       	ldi	r29, 0x00	; 0
     51e:	88 81       	ld	r24, Y
     520:	62 e0       	ldi	r22, 0x02	; 2
     522:	c7 d0       	rcall	.+398    	; 0x6b2 <checkBit>
     524:	28 81       	ld	r18, Y
     526:	34 e0       	ldi	r19, 0x04	; 4
     528:	83 9f       	mul	r24, r19
     52a:	c0 01       	movw	r24, r0
     52c:	11 24       	eor	r1, r1
     52e:	80 69       	ori	r24, 0x90	; 144
     530:	82 2b       	or	r24, r18
     532:	88 83       	st	Y, r24
     534:	ce ef       	ldi	r28, 0xFE	; 254
     536:	df ef       	ldi	r29, 0xFF	; 255
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
		if(!checkBit(TWCR, TWSTO))
     538:	0c eb       	ldi	r16, 0xBC	; 188
     53a:	10 e0       	ldi	r17, 0x00	; 0
     53c:	f8 01       	movw	r30, r16
     53e:	80 81       	ld	r24, Z
     540:	64 e0       	ldi	r22, 0x04	; 4
     542:	b7 d0       	rcall	.+366    	; 0x6b2 <checkBit>
     544:	88 23       	and	r24, r24
     546:	11 f0       	breq	.+4      	; 0x54c <i2c_sendStop+0x3a>
     548:	21 97       	sbiw	r28, 0x01	; 1
{
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
     54a:	c1 f7       	brne	.-16     	; 0x53c <i2c_sendStop+0x2a>
		if(!checkBit(TWCR, TWSTO))
			return;
}
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	1f 91       	pop	r17
     552:	0f 91       	pop	r16
     554:	08 95       	ret

00000556 <i2c_write>:

u8 i2c_write(u8 u8_data)
{
     556:	0f 93       	push	r16
     558:	1f 93       	push	r17
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send byte */
	TWDR = u8_data;
     55e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     562:	cc eb       	ldi	r28, 0xBC	; 188
     564:	d0 e0       	ldi	r29, 0x00	; 0
     566:	88 81       	ld	r24, Y
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	a3 d0       	rcall	.+326    	; 0x6b2 <checkBit>
     56c:	24 e0       	ldi	r18, 0x04	; 4
     56e:	82 9f       	mul	r24, r18
     570:	c0 01       	movw	r24, r0
     572:	11 24       	eor	r1, r1
     574:	80 68       	ori	r24, 0x80	; 128
     576:	88 83       	st	Y, r24
     578:	ce ef       	ldi	r28, 0xFE	; 254
     57a:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     57c:	0c eb       	ldi	r16, 0xBC	; 188
     57e:	10 e0       	ldi	r17, 0x00	; 0
     580:	f8 01       	movw	r30, r16
     582:	80 81       	ld	r24, Z
     584:	67 e0       	ldi	r22, 0x07	; 7
     586:	95 d0       	rcall	.+298    	; 0x6b2 <checkBit>
     588:	81 11       	cpse	r24, r1
     58a:	0f c0       	rjmp	.+30     	; 0x5aa <i2c_write+0x54>
     58c:	21 97       	sbiw	r28, 0x01	; 1
	/* Send byte */
	TWDR = u8_data;
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     58e:	c1 f7       	brne	.-16     	; 0x580 <i2c_write+0x2a>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     590:	8f ef       	ldi	r24, 0xFF	; 255
     592:	11 c0       	rjmp	.+34     	; 0x5b6 <i2c_write+0x60>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     594:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     598:	88 7f       	andi	r24, 0xF8	; 248
     59a:	80 34       	cpi	r24, 0x40	; 64
     59c:	21 f0       	breq	.+8      	; 0x5a6 <i2c_write+0x50>
		return (TW_STATUS & 0xF8);
     59e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5a2:	88 7f       	andi	r24, 0xF8	; 248
     5a4:	08 c0       	rjmp	.+16     	; 0x5b6 <i2c_write+0x60>

	return I2C_NO_ERROR;
     5a6:	80 e0       	ldi	r24, 0x00	; 0
     5a8:	06 c0       	rjmp	.+12     	; 0x5b6 <i2c_write+0x60>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     5aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5ae:	88 7f       	andi	r24, 0xF8	; 248
     5b0:	88 31       	cpi	r24, 0x18	; 24
     5b2:	81 f7       	brne	.-32     	; 0x594 <i2c_write+0x3e>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     5b4:	80 e0       	ldi	r24, 0x00	; 0
}
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	08 95       	ret

000005c0 <i2c_readAck>:

u8 i2c_readAck(void)
{
     5c0:	0f 93       	push	r16
     5c2:	1f 93       	push	r17
     5c4:	cf 93       	push	r28
     5c6:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);
     5c8:	cc eb       	ldi	r28, 0xBC	; 188
     5ca:	d0 e0       	ldi	r29, 0x00	; 0
     5cc:	88 81       	ld	r24, Y
     5ce:	62 e0       	ldi	r22, 0x02	; 2
     5d0:	70 d0       	rcall	.+224    	; 0x6b2 <checkBit>
     5d2:	24 e0       	ldi	r18, 0x04	; 4
     5d4:	82 9f       	mul	r24, r18
     5d6:	c0 01       	movw	r24, r0
     5d8:	11 24       	eor	r1, r1
     5da:	80 6c       	ori	r24, 0xC0	; 192
     5dc:	88 83       	st	Y, r24
     5de:	ce ef       	ldi	r28, 0xFE	; 254
     5e0:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     5e2:	0c eb       	ldi	r16, 0xBC	; 188
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	f8 01       	movw	r30, r16
     5e8:	80 81       	ld	r24, Z
     5ea:	67 e0       	ldi	r22, 0x07	; 7
     5ec:	62 d0       	rcall	.+196    	; 0x6b2 <checkBit>
     5ee:	88 23       	and	r24, r24
     5f0:	19 f0       	breq	.+6      	; 0x5f8 <i2c_readAck+0x38>
		return TWDR;
     5f2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     5f6:	03 c0       	rjmp	.+6      	; 0x5fe <i2c_readAck+0x3e>
     5f8:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     5fa:	a9 f7       	brne	.-22     	; 0x5e6 <i2c_readAck+0x26>
		if(checkBit(TWCR, TWINT))
		return TWDR;

	return I2C_BUS_LOCKED;
     5fc:	8f ef       	ldi	r24, 0xFF	; 255
}
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <i2c_readNak>:

u8 i2c_readNak(void)
{
     608:	0f 93       	push	r16
     60a:	1f 93       	push	r17
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     610:	cc eb       	ldi	r28, 0xBC	; 188
     612:	d0 e0       	ldi	r29, 0x00	; 0
     614:	88 81       	ld	r24, Y
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	4c d0       	rcall	.+152    	; 0x6b2 <checkBit>
     61a:	24 e0       	ldi	r18, 0x04	; 4
     61c:	82 9f       	mul	r24, r18
     61e:	c0 01       	movw	r24, r0
     620:	11 24       	eor	r1, r1
     622:	80 68       	ori	r24, 0x80	; 128
     624:	88 83       	st	Y, r24
     626:	ce ef       	ldi	r28, 0xFE	; 254
     628:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     62a:	0c eb       	ldi	r16, 0xBC	; 188
     62c:	10 e0       	ldi	r17, 0x00	; 0
     62e:	f8 01       	movw	r30, r16
     630:	80 81       	ld	r24, Z
     632:	67 e0       	ldi	r22, 0x07	; 7
     634:	3e d0       	rcall	.+124    	; 0x6b2 <checkBit>
     636:	88 23       	and	r24, r24
     638:	19 f0       	breq	.+6      	; 0x640 <i2c_readNak+0x38>
			return TWDR;
     63a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     63e:	03 c0       	rjmp	.+6      	; 0x646 <i2c_readNak+0x3e>
     640:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     642:	a9 f7       	brne	.-22     	; 0x62e <i2c_readNak+0x26>
		if(checkBit(TWCR, TWINT))
			return TWDR;

	return I2C_BUS_LOCKED;
     644:	8f ef       	ldi	r24, 0xFF	; 255
}
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	1f 91       	pop	r17
     64c:	0f 91       	pop	r16
     64e:	08 95       	ret

00000650 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     650:	fc 01       	movw	r30, r24
     652:	94 2f       	mov	r25, r20
     654:	20 81       	ld	r18, Z
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	06 2e       	mov	r0, r22
     65c:	02 c0       	rjmp	.+4      	; 0x662 <updateBit+0x12>
     65e:	44 0f       	add	r20, r20
     660:	55 1f       	adc	r21, r21
     662:	0a 94       	dec	r0
     664:	e2 f7       	brpl	.-8      	; 0x65e <updateBit+0xe>
     666:	40 95       	com	r20
     668:	50 95       	com	r21
     66a:	24 23       	and	r18, r20
     66c:	49 2f       	mov	r20, r25
     66e:	50 e0       	ldi	r21, 0x00	; 0
     670:	02 c0       	rjmp	.+4      	; 0x676 <updateBit+0x26>
     672:	44 0f       	add	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	6a 95       	dec	r22
     678:	e2 f7       	brpl	.-8      	; 0x672 <updateBit+0x22>
     67a:	42 2b       	or	r20, r18
     67c:	40 83       	st	Z, r20
     67e:	08 95       	ret

00000680 <setBit>:
     680:	fc 01       	movw	r30, r24
     682:	40 81       	ld	r20, Z
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	02 c0       	rjmp	.+4      	; 0x68e <setBit+0xe>
     68a:	22 0f       	add	r18, r18
     68c:	33 1f       	adc	r19, r19
     68e:	6a 95       	dec	r22
     690:	e2 f7       	brpl	.-8      	; 0x68a <setBit+0xa>
     692:	24 2b       	or	r18, r20
     694:	20 83       	st	Z, r18
     696:	08 95       	ret

00000698 <clearBit>:
     698:	fc 01       	movw	r30, r24
     69a:	90 81       	ld	r25, Z
     69c:	21 e0       	ldi	r18, 0x01	; 1
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <clearBit+0xe>
     6a2:	22 0f       	add	r18, r18
     6a4:	33 1f       	adc	r19, r19
     6a6:	6a 95       	dec	r22
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <clearBit+0xa>
     6aa:	20 95       	com	r18
     6ac:	29 23       	and	r18, r25
     6ae:	20 83       	st	Z, r18
     6b0:	08 95       	ret

000006b2 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	02 c0       	rjmp	.+4      	; 0x6ba <checkBit+0x8>
     6b6:	95 95       	asr	r25
     6b8:	87 95       	ror	r24
     6ba:	6a 95       	dec	r22
     6bc:	e2 f7       	brpl	.-8      	; 0x6b6 <checkBit+0x4>
}
     6be:	81 70       	andi	r24, 0x01	; 1
     6c0:	08 95       	ret

000006c2 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     6c2:	cf 92       	push	r12
     6c4:	df 92       	push	r13
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	69 01       	movw	r12, r18
     6cc:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	2c 19       	sub	r18, r12
     6d4:	3d 09       	sbc	r19, r13
     6d6:	4e 09       	sbc	r20, r14
     6d8:	5f 09       	sbc	r21, r15
     6da:	a8 ee       	ldi	r26, 0xE8	; 232
     6dc:	b3 e0       	ldi	r27, 0x03	; 3
     6de:	0e 94 38 13 	call	0x2670	; 0x2670 <__muluhisi3>
     6e2:	a7 01       	movw	r20, r14
     6e4:	96 01       	movw	r18, r12
     6e6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     6ea:	c9 01       	movw	r24, r18
     6ec:	99 23       	and	r25, r25
     6ee:	24 f4       	brge	.+8      	; 0x6f8 <calculateError+0x36>
     6f0:	88 27       	eor	r24, r24
     6f2:	99 27       	eor	r25, r25
     6f4:	82 1b       	sub	r24, r18
     6f6:	93 0b       	sbc	r25, r19
}
     6f8:	ff 90       	pop	r15
     6fa:	ef 90       	pop	r14
     6fc:	df 90       	pop	r13
     6fe:	cf 90       	pop	r12
     700:	08 95       	ret

00000702 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     702:	1f 92       	push	r1
     704:	0f 92       	push	r0
     706:	0f b6       	in	r0, 0x3f	; 63
     708:	0f 92       	push	r0
     70a:	11 24       	eor	r1, r1
     70c:	0b b6       	in	r0, 0x3b	; 59
     70e:	0f 92       	push	r0
     710:	8f 93       	push	r24
     712:	9f 93       	push	r25
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     718:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <u8_RLastReceivedIndex>
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	8e b5       	in	r24, 0x2e	; 46
     720:	e6 5e       	subi	r30, 0xE6	; 230
     722:	fe 4f       	sbci	r31, 0xFE	; 254
     724:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     726:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_RLastReceivedIndex>
     72a:	89 30       	cpi	r24, 0x09	; 9
     72c:	30 f4       	brcc	.+12     	; 0x73a <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     72e:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_RLastReceivedIndex>
     732:	8f 5f       	subi	r24, 0xFF	; 255
     734:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <u8_RLastReceivedIndex>
     738:	02 c0       	rjmp	.+4      	; 0x73e <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     73a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     744:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     748:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <u8_TLastRequestedIndex>
     74c:	98 17       	cp	r25, r24
     74e:	a1 f0       	breq	.+40     	; 0x778 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     750:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     754:	f0 e0       	ldi	r31, 0x00	; 0
     756:	ec 5d       	subi	r30, 0xDC	; 220
     758:	fe 4f       	sbci	r31, 0xFE	; 254
     75a:	80 81       	ld	r24, Z
     75c:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     75e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     762:	89 30       	cpi	r24, 0x09	; 9
     764:	30 f4       	brcc	.+12     	; 0x772 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     766:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <u8_TLastTransmittedIndex>
     770:	06 c0       	rjmp	.+12     	; 0x77e <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     772:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u8_TLastTransmittedIndex>
     776:	03 c0       	rjmp	.+6      	; 0x77e <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     778:	81 e0       	ldi	r24, 0x01	; 1
     77a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <b_TAvailable>
	}
}
     77e:	ff 91       	pop	r31
     780:	ef 91       	pop	r30
     782:	9f 91       	pop	r25
     784:	8f 91       	pop	r24
     786:	0f 90       	pop	r0
     788:	0b be       	out	0x3b, r0	; 59
     78a:	0f 90       	pop	r0
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	0f 90       	pop	r0
     790:	1f 90       	pop	r1
     792:	18 95       	reti

00000794 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     794:	8f 92       	push	r8
     796:	9f 92       	push	r9
     798:	af 92       	push	r10
     79a:	bf 92       	push	r11
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	0f 93       	push	r16
     7a2:	1f 93       	push	r17
     7a4:	cf 93       	push	r28
     7a6:	df 93       	push	r29
     7a8:	00 d0       	rcall	.+0      	; 0x7aa <calculateTopRegister+0x16>
     7aa:	00 d0       	rcall	.+0      	; 0x7ac <calculateTopRegister+0x18>
     7ac:	1f 92       	push	r1
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	48 01       	movw	r8, r16
     7b4:	59 01       	movw	r10, r18
     7b6:	41 30       	cpi	r20, 0x01	; 1
     7b8:	21 f0       	breq	.+8      	; 0x7c2 <calculateTopRegister+0x2e>
     7ba:	42 30       	cpi	r20, 0x02	; 2
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <calculateTopRegister+0x2c>
     7be:	88 c0       	rjmp	.+272    	; 0x8d0 <calculateTopRegister+0x13c>
     7c0:	4c c1       	rjmp	.+664    	; 0xa5a <calculateTopRegister+0x2c6>
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	72 e1       	ldi	r23, 0x12	; 18
     7c6:	8a e7       	ldi	r24, 0x7A	; 122
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	a9 01       	movw	r20, r18
     7cc:	98 01       	movw	r18, r16
     7ce:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     7d2:	da 01       	movw	r26, r20
     7d4:	c9 01       	movw	r24, r18
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	a1 09       	sbc	r26, r1
     7da:	b1 09       	sbc	r27, r1
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	21 e0       	ldi	r18, 0x01	; 1
     7e0:	a2 07       	cpc	r26, r18
     7e2:	b1 05       	cpc	r27, r1
     7e4:	50 f4       	brcc	.+20     	; 0x7fa <calculateTopRegister+0x66>
     7e6:	49 ef       	ldi	r20, 0xF9	; 249
     7e8:	5f ef       	ldi	r21, 0xFF	; 255
     7ea:	6f ef       	ldi	r22, 0xFF	; 255
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	f7 01       	movw	r30, r14
     7f0:	40 83       	st	Z, r20
     7f2:	51 83       	std	Z+1, r21	; 0x01
     7f4:	62 83       	std	Z+2, r22	; 0x02
     7f6:	73 83       	std	Z+3, r23	; 0x03
     7f8:	33 c1       	rjmp	.+614    	; 0xa60 <calculateTopRegister+0x2cc>
     7fa:	60 e4       	ldi	r22, 0x40	; 64
     7fc:	72 e4       	ldi	r23, 0x42	; 66
     7fe:	8f e0       	ldi	r24, 0x0F	; 15
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	a5 01       	movw	r20, r10
     804:	94 01       	movw	r18, r8
     806:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     80a:	da 01       	movw	r26, r20
     80c:	c9 01       	movw	r24, r18
     80e:	01 97       	sbiw	r24, 0x01	; 1
     810:	a1 09       	sbc	r26, r1
     812:	b1 09       	sbc	r27, r1
     814:	00 97       	sbiw	r24, 0x00	; 0
     816:	f1 e0       	ldi	r31, 0x01	; 1
     818:	af 07       	cpc	r26, r31
     81a:	b1 05       	cpc	r27, r1
     81c:	50 f4       	brcc	.+20     	; 0x832 <calculateTopRegister+0x9e>
     81e:	4a ef       	ldi	r20, 0xFA	; 250
     820:	5f ef       	ldi	r21, 0xFF	; 255
     822:	6f ef       	ldi	r22, 0xFF	; 255
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	f7 01       	movw	r30, r14
     828:	40 83       	st	Z, r20
     82a:	51 83       	std	Z+1, r21	; 0x01
     82c:	62 83       	std	Z+2, r22	; 0x02
     82e:	73 83       	std	Z+3, r23	; 0x03
     830:	17 c1       	rjmp	.+558    	; 0xa60 <calculateTopRegister+0x2cc>
     832:	68 e4       	ldi	r22, 0x48	; 72
     834:	78 ee       	ldi	r23, 0xE8	; 232
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	a5 01       	movw	r20, r10
     83c:	94 01       	movw	r18, r8
     83e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     842:	da 01       	movw	r26, r20
     844:	c9 01       	movw	r24, r18
     846:	01 97       	sbiw	r24, 0x01	; 1
     848:	a1 09       	sbc	r26, r1
     84a:	b1 09       	sbc	r27, r1
     84c:	00 97       	sbiw	r24, 0x00	; 0
     84e:	f1 e0       	ldi	r31, 0x01	; 1
     850:	af 07       	cpc	r26, r31
     852:	b1 05       	cpc	r27, r1
     854:	50 f4       	brcc	.+20     	; 0x86a <calculateTopRegister+0xd6>
     856:	4c ef       	ldi	r20, 0xFC	; 252
     858:	5f ef       	ldi	r21, 0xFF	; 255
     85a:	6f ef       	ldi	r22, 0xFF	; 255
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	f7 01       	movw	r30, r14
     860:	40 83       	st	Z, r20
     862:	51 83       	std	Z+1, r21	; 0x01
     864:	62 83       	std	Z+2, r22	; 0x02
     866:	73 83       	std	Z+3, r23	; 0x03
     868:	fb c0       	rjmp	.+502    	; 0xa60 <calculateTopRegister+0x2cc>
     86a:	62 e1       	ldi	r22, 0x12	; 18
     86c:	7a e7       	ldi	r23, 0x7A	; 122
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a5 01       	movw	r20, r10
     874:	94 01       	movw	r18, r8
     876:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     87a:	da 01       	movw	r26, r20
     87c:	c9 01       	movw	r24, r18
     87e:	01 97       	sbiw	r24, 0x01	; 1
     880:	a1 09       	sbc	r26, r1
     882:	b1 09       	sbc	r27, r1
     884:	00 97       	sbiw	r24, 0x00	; 0
     886:	f1 e0       	ldi	r31, 0x01	; 1
     888:	af 07       	cpc	r26, r31
     88a:	b1 05       	cpc	r27, r1
     88c:	50 f4       	brcc	.+20     	; 0x8a2 <calculateTopRegister+0x10e>
     88e:	4e ef       	ldi	r20, 0xFE	; 254
     890:	5f ef       	ldi	r21, 0xFF	; 255
     892:	6f ef       	ldi	r22, 0xFF	; 255
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	f7 01       	movw	r30, r14
     898:	40 83       	st	Z, r20
     89a:	51 83       	std	Z+1, r21	; 0x01
     89c:	62 83       	std	Z+2, r22	; 0x02
     89e:	73 83       	std	Z+3, r23	; 0x03
     8a0:	df c0       	rjmp	.+446    	; 0xa60 <calculateTopRegister+0x2cc>
     8a2:	8f ef       	ldi	r24, 0xFF	; 255
     8a4:	9f ef       	ldi	r25, 0xFF	; 255
     8a6:	af ef       	ldi	r26, 0xFF	; 255
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	f7 01       	movw	r30, r14
     8ac:	80 83       	st	Z, r24
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	a2 83       	std	Z+2, r26	; 0x02
     8b2:	b3 83       	std	Z+3, r27	; 0x03
     8b4:	64 e8       	ldi	r22, 0x84	; 132
     8b6:	7e e1       	ldi	r23, 0x1E	; 30
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	a5 01       	movw	r20, r10
     8be:	94 01       	movw	r18, r8
     8c0:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	a1 09       	sbc	r26, r1
     8cc:	b1 09       	sbc	r27, r1
     8ce:	c8 c0       	rjmp	.+400    	; 0xa60 <calculateTopRegister+0x2cc>
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	72 e1       	ldi	r23, 0x12	; 18
     8d4:	8a e7       	ldi	r24, 0x7A	; 122
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	a9 01       	movw	r20, r18
     8da:	98 01       	movw	r18, r16
     8dc:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     8e0:	da 01       	movw	r26, r20
     8e2:	c9 01       	movw	r24, r18
     8e4:	01 97       	sbiw	r24, 0x01	; 1
     8e6:	a1 09       	sbc	r26, r1
     8e8:	b1 09       	sbc	r27, r1
     8ea:	8f 3f       	cpi	r24, 0xFF	; 255
     8ec:	91 05       	cpc	r25, r1
     8ee:	a1 05       	cpc	r26, r1
     8f0:	b1 05       	cpc	r27, r1
     8f2:	09 f0       	breq	.+2      	; 0x8f6 <calculateTopRegister+0x162>
     8f4:	50 f4       	brcc	.+20     	; 0x90a <calculateTopRegister+0x176>
     8f6:	49 ef       	ldi	r20, 0xF9	; 249
     8f8:	5f ef       	ldi	r21, 0xFF	; 255
     8fa:	6f ef       	ldi	r22, 0xFF	; 255
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	f7 01       	movw	r30, r14
     900:	40 83       	st	Z, r20
     902:	51 83       	std	Z+1, r21	; 0x01
     904:	62 83       	std	Z+2, r22	; 0x02
     906:	73 83       	std	Z+3, r23	; 0x03
     908:	ab c0       	rjmp	.+342    	; 0xa60 <calculateTopRegister+0x2cc>
     90a:	60 e4       	ldi	r22, 0x40	; 64
     90c:	72 e4       	ldi	r23, 0x42	; 66
     90e:	8f e0       	ldi	r24, 0x0F	; 15
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	a5 01       	movw	r20, r10
     914:	94 01       	movw	r18, r8
     916:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     91a:	da 01       	movw	r26, r20
     91c:	c9 01       	movw	r24, r18
     91e:	01 97       	sbiw	r24, 0x01	; 1
     920:	a1 09       	sbc	r26, r1
     922:	b1 09       	sbc	r27, r1
     924:	8f 3f       	cpi	r24, 0xFF	; 255
     926:	91 05       	cpc	r25, r1
     928:	a1 05       	cpc	r26, r1
     92a:	b1 05       	cpc	r27, r1
     92c:	09 f0       	breq	.+2      	; 0x930 <calculateTopRegister+0x19c>
     92e:	50 f4       	brcc	.+20     	; 0x944 <calculateTopRegister+0x1b0>
     930:	4a ef       	ldi	r20, 0xFA	; 250
     932:	5f ef       	ldi	r21, 0xFF	; 255
     934:	6f ef       	ldi	r22, 0xFF	; 255
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	f7 01       	movw	r30, r14
     93a:	40 83       	st	Z, r20
     93c:	51 83       	std	Z+1, r21	; 0x01
     93e:	62 83       	std	Z+2, r22	; 0x02
     940:	73 83       	std	Z+3, r23	; 0x03
     942:	8e c0       	rjmp	.+284    	; 0xa60 <calculateTopRegister+0x2cc>
     944:	60 e9       	ldi	r22, 0x90	; 144
     946:	70 ed       	ldi	r23, 0xD0	; 208
     948:	83 e0       	ldi	r24, 0x03	; 3
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a5 01       	movw	r20, r10
     94e:	94 01       	movw	r18, r8
     950:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     954:	da 01       	movw	r26, r20
     956:	c9 01       	movw	r24, r18
     958:	01 97       	sbiw	r24, 0x01	; 1
     95a:	a1 09       	sbc	r26, r1
     95c:	b1 09       	sbc	r27, r1
     95e:	8f 3f       	cpi	r24, 0xFF	; 255
     960:	91 05       	cpc	r25, r1
     962:	a1 05       	cpc	r26, r1
     964:	b1 05       	cpc	r27, r1
     966:	09 f0       	breq	.+2      	; 0x96a <calculateTopRegister+0x1d6>
     968:	50 f4       	brcc	.+20     	; 0x97e <calculateTopRegister+0x1ea>
     96a:	4b ef       	ldi	r20, 0xFB	; 251
     96c:	5f ef       	ldi	r21, 0xFF	; 255
     96e:	6f ef       	ldi	r22, 0xFF	; 255
     970:	70 e0       	ldi	r23, 0x00	; 0
     972:	f7 01       	movw	r30, r14
     974:	40 83       	st	Z, r20
     976:	51 83       	std	Z+1, r21	; 0x01
     978:	62 83       	std	Z+2, r22	; 0x02
     97a:	73 83       	std	Z+3, r23	; 0x03
     97c:	71 c0       	rjmp	.+226    	; 0xa60 <calculateTopRegister+0x2cc>
     97e:	68 e4       	ldi	r22, 0x48	; 72
     980:	78 ee       	ldi	r23, 0xE8	; 232
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a5 01       	movw	r20, r10
     988:	94 01       	movw	r18, r8
     98a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     98e:	da 01       	movw	r26, r20
     990:	c9 01       	movw	r24, r18
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	a1 09       	sbc	r26, r1
     996:	b1 09       	sbc	r27, r1
     998:	8f 3f       	cpi	r24, 0xFF	; 255
     99a:	91 05       	cpc	r25, r1
     99c:	a1 05       	cpc	r26, r1
     99e:	b1 05       	cpc	r27, r1
     9a0:	09 f0       	breq	.+2      	; 0x9a4 <calculateTopRegister+0x210>
     9a2:	50 f4       	brcc	.+20     	; 0x9b8 <calculateTopRegister+0x224>
     9a4:	4c ef       	ldi	r20, 0xFC	; 252
     9a6:	5f ef       	ldi	r21, 0xFF	; 255
     9a8:	6f ef       	ldi	r22, 0xFF	; 255
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	f7 01       	movw	r30, r14
     9ae:	40 83       	st	Z, r20
     9b0:	51 83       	std	Z+1, r21	; 0x01
     9b2:	62 83       	std	Z+2, r22	; 0x02
     9b4:	73 83       	std	Z+3, r23	; 0x03
     9b6:	54 c0       	rjmp	.+168    	; 0xa60 <calculateTopRegister+0x2cc>
     9b8:	64 e2       	ldi	r22, 0x24	; 36
     9ba:	74 ef       	ldi	r23, 0xF4	; 244
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a5 01       	movw	r20, r10
     9c2:	94 01       	movw	r18, r8
     9c4:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     9c8:	da 01       	movw	r26, r20
     9ca:	c9 01       	movw	r24, r18
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	a1 09       	sbc	r26, r1
     9d0:	b1 09       	sbc	r27, r1
     9d2:	8f 3f       	cpi	r24, 0xFF	; 255
     9d4:	91 05       	cpc	r25, r1
     9d6:	a1 05       	cpc	r26, r1
     9d8:	b1 05       	cpc	r27, r1
     9da:	09 f0       	breq	.+2      	; 0x9de <calculateTopRegister+0x24a>
     9dc:	50 f4       	brcc	.+20     	; 0x9f2 <calculateTopRegister+0x25e>
     9de:	4d ef       	ldi	r20, 0xFD	; 253
     9e0:	5f ef       	ldi	r21, 0xFF	; 255
     9e2:	6f ef       	ldi	r22, 0xFF	; 255
     9e4:	70 e0       	ldi	r23, 0x00	; 0
     9e6:	f7 01       	movw	r30, r14
     9e8:	40 83       	st	Z, r20
     9ea:	51 83       	std	Z+1, r21	; 0x01
     9ec:	62 83       	std	Z+2, r22	; 0x02
     9ee:	73 83       	std	Z+3, r23	; 0x03
     9f0:	37 c0       	rjmp	.+110    	; 0xa60 <calculateTopRegister+0x2cc>
     9f2:	62 e1       	ldi	r22, 0x12	; 18
     9f4:	7a e7       	ldi	r23, 0x7A	; 122
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	a5 01       	movw	r20, r10
     9fc:	94 01       	movw	r18, r8
     9fe:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     a02:	da 01       	movw	r26, r20
     a04:	c9 01       	movw	r24, r18
     a06:	01 97       	sbiw	r24, 0x01	; 1
     a08:	a1 09       	sbc	r26, r1
     a0a:	b1 09       	sbc	r27, r1
     a0c:	8f 3f       	cpi	r24, 0xFF	; 255
     a0e:	91 05       	cpc	r25, r1
     a10:	a1 05       	cpc	r26, r1
     a12:	b1 05       	cpc	r27, r1
     a14:	09 f0       	breq	.+2      	; 0xa18 <calculateTopRegister+0x284>
     a16:	50 f4       	brcc	.+20     	; 0xa2c <calculateTopRegister+0x298>
     a18:	4e ef       	ldi	r20, 0xFE	; 254
     a1a:	5f ef       	ldi	r21, 0xFF	; 255
     a1c:	6f ef       	ldi	r22, 0xFF	; 255
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	f7 01       	movw	r30, r14
     a22:	40 83       	st	Z, r20
     a24:	51 83       	std	Z+1, r21	; 0x01
     a26:	62 83       	std	Z+2, r22	; 0x02
     a28:	73 83       	std	Z+3, r23	; 0x03
     a2a:	1a c0       	rjmp	.+52     	; 0xa60 <calculateTopRegister+0x2cc>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	9f ef       	ldi	r25, 0xFF	; 255
     a30:	af ef       	ldi	r26, 0xFF	; 255
     a32:	b0 e0       	ldi	r27, 0x00	; 0
     a34:	f7 01       	movw	r30, r14
     a36:	80 83       	st	Z, r24
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	a2 83       	std	Z+2, r26	; 0x02
     a3c:	b3 83       	std	Z+3, r27	; 0x03
     a3e:	64 e8       	ldi	r22, 0x84	; 132
     a40:	7e e1       	ldi	r23, 0x1E	; 30
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a5 01       	movw	r20, r10
     a48:	94 01       	movw	r18, r8
     a4a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
     a4e:	da 01       	movw	r26, r20
     a50:	c9 01       	movw	r24, r18
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	a1 09       	sbc	r26, r1
     a56:	b1 09       	sbc	r27, r1
     a58:	03 c0       	rjmp	.+6      	; 0xa60 <calculateTopRegister+0x2cc>
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	dc 01       	movw	r26, r24
     a60:	0f 90       	pop	r0
     a62:	0f 90       	pop	r0
     a64:	0f 90       	pop	r0
     a66:	0f 90       	pop	r0
     a68:	0f 90       	pop	r0
     a6a:	df 91       	pop	r29
     a6c:	cf 91       	pop	r28
     a6e:	1f 91       	pop	r17
     a70:	0f 91       	pop	r16
     a72:	ff 90       	pop	r15
     a74:	ef 90       	pop	r14
     a76:	bf 90       	pop	r11
     a78:	af 90       	pop	r10
     a7a:	9f 90       	pop	r9
     a7c:	8f 90       	pop	r8
     a7e:	08 95       	ret

00000a80 <__vector_15>:
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	0b b6       	in	r0, 0x3b	; 59
     a8c:	0f 92       	push	r0
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
     aa6:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <p_timer1Callbacks>
     aaa:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <p_timer1Callbacks+0x1>
     aae:	09 95       	icall
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	bf 91       	pop	r27
     ab6:	af 91       	pop	r26
     ab8:	9f 91       	pop	r25
     aba:	8f 91       	pop	r24
     abc:	7f 91       	pop	r23
     abe:	6f 91       	pop	r22
     ac0:	5f 91       	pop	r21
     ac2:	4f 91       	pop	r20
     ac4:	3f 91       	pop	r19
     ac6:	2f 91       	pop	r18
     ac8:	0f 90       	pop	r0
     aca:	0b be       	out	0x3b, r0	; 59
     acc:	0f 90       	pop	r0
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	0f 90       	pop	r0
     ad2:	1f 90       	pop	r1
     ad4:	18 95       	reti

00000ad6 <__vector_13>:
     ad6:	1f 92       	push	r1
     ad8:	0f 92       	push	r0
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	0f 92       	push	r0
     ade:	11 24       	eor	r1, r1
     ae0:	0b b6       	in	r0, 0x3b	; 59
     ae2:	0f 92       	push	r0
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	2f 93       	push	r18
     aea:	3f 93       	push	r19
     aec:	4f 93       	push	r20
     aee:	5f 93       	push	r21
     af0:	6f 93       	push	r22
     af2:	7f 93       	push	r23
     af4:	8f 93       	push	r24
     af6:	9f 93       	push	r25
     af8:	af 93       	push	r26
     afa:	bf 93       	push	r27
     afc:	cf 93       	push	r28
     afe:	df 93       	push	r29
     b00:	ef 93       	push	r30
     b02:	ff 93       	push	r31
     b04:	c1 e8       	ldi	r28, 0x81	; 129
     b06:	d0 e0       	ldi	r29, 0x00	; 0
     b08:	88 81       	ld	r24, Y
     b0a:	64 e0       	ldi	r22, 0x04	; 4
     b0c:	d2 dd       	rcall	.-1116   	; 0x6b2 <checkBit>
     b0e:	18 2f       	mov	r17, r24
     b10:	88 81       	ld	r24, Y
     b12:	63 e0       	ldi	r22, 0x03	; 3
     b14:	ce dd       	rcall	.-1124   	; 0x6b2 <checkBit>
     b16:	c1 2f       	mov	r28, r17
     b18:	cc 0f       	add	r28, r28
     b1a:	cc 0f       	add	r28, r28
     b1c:	cc 0f       	add	r28, r28
     b1e:	24 e0       	ldi	r18, 0x04	; 4
     b20:	82 9f       	mul	r24, r18
     b22:	c0 01       	movw	r24, r0
     b24:	11 24       	eor	r1, r1
     b26:	c8 2b       	or	r28, r24
     b28:	00 e8       	ldi	r16, 0x80	; 128
     b2a:	10 e0       	ldi	r17, 0x00	; 0
     b2c:	f8 01       	movw	r30, r16
     b2e:	80 81       	ld	r24, Z
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	bf dd       	rcall	.-1154   	; 0x6b2 <checkBit>
     b34:	d8 2f       	mov	r29, r24
     b36:	f8 01       	movw	r30, r16
     b38:	80 81       	ld	r24, Z
     b3a:	60 e0       	ldi	r22, 0x00	; 0
     b3c:	ba dd       	rcall	.-1164   	; 0x6b2 <checkBit>
     b3e:	dd 0f       	add	r29, r29
     b40:	8c 2b       	or	r24, r28
     b42:	8d 2b       	or	r24, r29
     b44:	88 30       	cpi	r24, 0x08	; 8
     b46:	18 f4       	brcc	.+6      	; 0xb4e <__vector_13+0x78>
     b48:	84 30       	cpi	r24, 0x04	; 4
     b4a:	19 f4       	brne	.+6      	; 0xb52 <__vector_13+0x7c>
     b4c:	08 c0       	rjmp	.+16     	; 0xb5e <__vector_13+0x88>
     b4e:	80 fd       	sbrc	r24, 0
     b50:	06 c0       	rjmp	.+12     	; 0xb5e <__vector_13+0x88>
     b52:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer1Callbacks+0x2>
     b56:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer1Callbacks+0x3>
     b5a:	09 95       	icall
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <__vector_13+0x92>
     b5e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <p_timer1Callbacks>
     b62:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <p_timer1Callbacks+0x1>
     b66:	09 95       	icall
     b68:	ff 91       	pop	r31
     b6a:	ef 91       	pop	r30
     b6c:	df 91       	pop	r29
     b6e:	cf 91       	pop	r28
     b70:	bf 91       	pop	r27
     b72:	af 91       	pop	r26
     b74:	9f 91       	pop	r25
     b76:	8f 91       	pop	r24
     b78:	7f 91       	pop	r23
     b7a:	6f 91       	pop	r22
     b7c:	5f 91       	pop	r21
     b7e:	4f 91       	pop	r20
     b80:	3f 91       	pop	r19
     b82:	2f 91       	pop	r18
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	0f 90       	pop	r0
     b8a:	0b be       	out	0x3b, r0	; 59
     b8c:	0f 90       	pop	r0
     b8e:	0f be       	out	0x3f, r0	; 63
     b90:	0f 90       	pop	r0
     b92:	1f 90       	pop	r1
     b94:	18 95       	reti

00000b96 <__vector_14>:
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	0b b6       	in	r0, 0x3b	; 59
     ba2:	0f 92       	push	r0
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
     bbc:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks+0x4>
     bc0:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x5>
     bc4:	09 95       	icall
     bc6:	ff 91       	pop	r31
     bc8:	ef 91       	pop	r30
     bca:	bf 91       	pop	r27
     bcc:	af 91       	pop	r26
     bce:	9f 91       	pop	r25
     bd0:	8f 91       	pop	r24
     bd2:	7f 91       	pop	r23
     bd4:	6f 91       	pop	r22
     bd6:	5f 91       	pop	r21
     bd8:	4f 91       	pop	r20
     bda:	3f 91       	pop	r19
     bdc:	2f 91       	pop	r18
     bde:	0f 90       	pop	r0
     be0:	0b be       	out	0x3b, r0	; 59
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <__vector_12>:
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
     bf6:	0b b6       	in	r0, 0x3b	; 59
     bf8:	0f 92       	push	r0
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
     c1a:	c1 e8       	ldi	r28, 0x81	; 129
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
     c1e:	88 81       	ld	r24, Y
     c20:	64 e0       	ldi	r22, 0x04	; 4
     c22:	47 dd       	rcall	.-1394   	; 0x6b2 <checkBit>
     c24:	18 2f       	mov	r17, r24
     c26:	88 81       	ld	r24, Y
     c28:	63 e0       	ldi	r22, 0x03	; 3
     c2a:	43 dd       	rcall	.-1402   	; 0x6b2 <checkBit>
     c2c:	c1 2f       	mov	r28, r17
     c2e:	cc 0f       	add	r28, r28
     c30:	cc 0f       	add	r28, r28
     c32:	cc 0f       	add	r28, r28
     c34:	24 e0       	ldi	r18, 0x04	; 4
     c36:	82 9f       	mul	r24, r18
     c38:	c0 01       	movw	r24, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	c8 2b       	or	r28, r24
     c3e:	00 e8       	ldi	r16, 0x80	; 128
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	f8 01       	movw	r30, r16
     c44:	80 81       	ld	r24, Z
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	34 dd       	rcall	.-1432   	; 0x6b2 <checkBit>
     c4a:	d8 2f       	mov	r29, r24
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 81       	ld	r24, Z
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	2f dd       	rcall	.-1442   	; 0x6b2 <checkBit>
     c54:	dd 0f       	add	r29, r29
     c56:	8c 2b       	or	r24, r28
     c58:	8d 2b       	or	r24, r29
     c5a:	88 30       	cpi	r24, 0x08	; 8
     c5c:	10 f0       	brcs	.+4      	; 0xc62 <__vector_12+0x76>
     c5e:	80 ff       	sbrs	r24, 0
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <__vector_12+0x82>
     c62:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p_timer1Callbacks+0x6>
     c66:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p_timer1Callbacks+0x7>
     c6a:	09 95       	icall
     c6c:	05 c0       	rjmp	.+10     	; 0xc78 <__vector_12+0x8c>
     c6e:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <p_timer1Callbacks>
     c72:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <p_timer1Callbacks+0x1>
     c76:	09 95       	icall
     c78:	ff 91       	pop	r31
     c7a:	ef 91       	pop	r30
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	bf 91       	pop	r27
     c82:	af 91       	pop	r26
     c84:	9f 91       	pop	r25
     c86:	8f 91       	pop	r24
     c88:	7f 91       	pop	r23
     c8a:	6f 91       	pop	r22
     c8c:	5f 91       	pop	r21
     c8e:	4f 91       	pop	r20
     c90:	3f 91       	pop	r19
     c92:	2f 91       	pop	r18
     c94:	1f 91       	pop	r17
     c96:	0f 91       	pop	r16
     c98:	0f 90       	pop	r0
     c9a:	0b be       	out	0x3b, r0	; 59
     c9c:	0f 90       	pop	r0
     c9e:	0f be       	out	0x3f, r0	; 63
     ca0:	0f 90       	pop	r0
     ca2:	1f 90       	pop	r1
     ca4:	18 95       	reti

00000ca6 <__vector_11>:
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	0b b6       	in	r0, 0x3b	; 59
     cb2:	0f 92       	push	r0
     cb4:	2f 93       	push	r18
     cb6:	3f 93       	push	r19
     cb8:	4f 93       	push	r20
     cba:	5f 93       	push	r21
     cbc:	6f 93       	push	r22
     cbe:	7f 93       	push	r23
     cc0:	8f 93       	push	r24
     cc2:	9f 93       	push	r25
     cc4:	af 93       	push	r26
     cc6:	bf 93       	push	r27
     cc8:	ef 93       	push	r30
     cca:	ff 93       	push	r31
     ccc:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p_timer2Callbacks>
     cd0:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <p_timer2Callbacks+0x1>
     cd4:	09 95       	icall
     cd6:	ff 91       	pop	r31
     cd8:	ef 91       	pop	r30
     cda:	bf 91       	pop	r27
     cdc:	af 91       	pop	r26
     cde:	9f 91       	pop	r25
     ce0:	8f 91       	pop	r24
     ce2:	7f 91       	pop	r23
     ce4:	6f 91       	pop	r22
     ce6:	5f 91       	pop	r21
     ce8:	4f 91       	pop	r20
     cea:	3f 91       	pop	r19
     cec:	2f 91       	pop	r18
     cee:	0f 90       	pop	r0
     cf0:	0b be       	out	0x3b, r0	; 59
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	0f 90       	pop	r0
     cf8:	1f 90       	pop	r1
     cfa:	18 95       	reti

00000cfc <__vector_9>:
     cfc:	1f 92       	push	r1
     cfe:	0f 92       	push	r0
     d00:	0f b6       	in	r0, 0x3f	; 63
     d02:	0f 92       	push	r0
     d04:	11 24       	eor	r1, r1
     d06:	0b b6       	in	r0, 0x3b	; 59
     d08:	0f 92       	push	r0
     d0a:	2f 93       	push	r18
     d0c:	3f 93       	push	r19
     d0e:	4f 93       	push	r20
     d10:	5f 93       	push	r21
     d12:	6f 93       	push	r22
     d14:	7f 93       	push	r23
     d16:	8f 93       	push	r24
     d18:	9f 93       	push	r25
     d1a:	af 93       	push	r26
     d1c:	bf 93       	push	r27
     d1e:	ef 93       	push	r30
     d20:	ff 93       	push	r31
     d22:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     d26:	63 e0       	ldi	r22, 0x03	; 3
     d28:	c4 dc       	rcall	.-1656   	; 0x6b2 <checkBit>
     d2a:	81 11       	cpse	r24, r1
     d2c:	0b c0       	rjmp	.+22     	; 0xd44 <__vector_9+0x48>
     d2e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     d32:	83 70       	andi	r24, 0x03	; 3
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	31 f0       	breq	.+12     	; 0xd44 <__vector_9+0x48>
     d38:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <p_timer2Callbacks+0x2>
     d3c:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <p_timer2Callbacks+0x3>
     d40:	09 95       	icall
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <__vector_9+0x52>
     d44:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p_timer2Callbacks>
     d48:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <p_timer2Callbacks+0x1>
     d4c:	09 95       	icall
     d4e:	ff 91       	pop	r31
     d50:	ef 91       	pop	r30
     d52:	bf 91       	pop	r27
     d54:	af 91       	pop	r26
     d56:	9f 91       	pop	r25
     d58:	8f 91       	pop	r24
     d5a:	7f 91       	pop	r23
     d5c:	6f 91       	pop	r22
     d5e:	5f 91       	pop	r21
     d60:	4f 91       	pop	r20
     d62:	3f 91       	pop	r19
     d64:	2f 91       	pop	r18
     d66:	0f 90       	pop	r0
     d68:	0b be       	out	0x3b, r0	; 59
     d6a:	0f 90       	pop	r0
     d6c:	0f be       	out	0x3f, r0	; 63
     d6e:	0f 90       	pop	r0
     d70:	1f 90       	pop	r1
     d72:	18 95       	reti

00000d74 <__vector_10>:
     d74:	1f 92       	push	r1
     d76:	0f 92       	push	r0
     d78:	0f b6       	in	r0, 0x3f	; 63
     d7a:	0f 92       	push	r0
     d7c:	11 24       	eor	r1, r1
     d7e:	0b b6       	in	r0, 0x3b	; 59
     d80:	0f 92       	push	r0
     d82:	2f 93       	push	r18
     d84:	3f 93       	push	r19
     d86:	4f 93       	push	r20
     d88:	5f 93       	push	r21
     d8a:	6f 93       	push	r22
     d8c:	7f 93       	push	r23
     d8e:	8f 93       	push	r24
     d90:	9f 93       	push	r25
     d92:	af 93       	push	r26
     d94:	bf 93       	push	r27
     d96:	ef 93       	push	r30
     d98:	ff 93       	push	r31
     d9a:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <p_timer2Callbacks+0x4>
     d9e:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <p_timer2Callbacks+0x5>
     da2:	09 95       	icall
     da4:	ff 91       	pop	r31
     da6:	ef 91       	pop	r30
     da8:	bf 91       	pop	r27
     daa:	af 91       	pop	r26
     dac:	9f 91       	pop	r25
     dae:	8f 91       	pop	r24
     db0:	7f 91       	pop	r23
     db2:	6f 91       	pop	r22
     db4:	5f 91       	pop	r21
     db6:	4f 91       	pop	r20
     db8:	3f 91       	pop	r19
     dba:	2f 91       	pop	r18
     dbc:	0f 90       	pop	r0
     dbe:	0b be       	out	0x3b, r0	; 59
     dc0:	0f 90       	pop	r0
     dc2:	0f be       	out	0x3f, r0	; 63
     dc4:	0f 90       	pop	r0
     dc6:	1f 90       	pop	r1
     dc8:	18 95       	reti

00000dca <timer_init>:
     dca:	ef 92       	push	r14
     dcc:	ff 92       	push	r15
     dce:	0f 93       	push	r16
     dd0:	1f 93       	push	r17
     dd2:	cf 93       	push	r28
     dd4:	df 93       	push	r29
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	29 97       	sbiw	r28, 0x09	; 9
     ddc:	0f b6       	in	r0, 0x3f	; 63
     dde:	f8 94       	cli
     de0:	de bf       	out	0x3e, r29	; 62
     de2:	0f be       	out	0x3f, r0	; 63
     de4:	cd bf       	out	0x3d, r28	; 61
     de6:	4d 83       	std	Y+5, r20	; 0x05
     de8:	5e 83       	std	Y+6, r21	; 0x06
     dea:	6f 83       	std	Y+7, r22	; 0x07
     dec:	78 87       	std	Y+8, r23	; 0x08
     dee:	89 87       	std	Y+9, r24	; 0x09
     df0:	0e 81       	ldd	r16, Y+6	; 0x06
     df2:	1f 81       	ldd	r17, Y+7	; 0x07
     df4:	28 85       	ldd	r18, Y+8	; 0x08
     df6:	39 85       	ldd	r19, Y+9	; 0x09
     df8:	19 82       	std	Y+1, r1	; 0x01
     dfa:	1a 82       	std	Y+2, r1	; 0x02
     dfc:	1b 82       	std	Y+3, r1	; 0x03
     dfe:	1c 82       	std	Y+4, r1	; 0x04
     e00:	41 30       	cpi	r20, 0x01	; 1
     e02:	21 f0       	breq	.+8      	; 0xe0c <timer_init+0x42>
     e04:	42 30       	cpi	r20, 0x02	; 2
     e06:	09 f4       	brne	.+2      	; 0xe0a <timer_init+0x40>
     e08:	95 c0       	rjmp	.+298    	; 0xf34 <timer_init+0x16a>
     e0a:	1e c1       	rjmp	.+572    	; 0x1048 <timer_init+0x27e>
     e0c:	09 3f       	cpi	r16, 0xF9	; 249
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	18 07       	cpc	r17, r24
     e12:	28 07       	cpc	r18, r24
     e14:	31 05       	cpc	r19, r1
     e16:	28 f0       	brcs	.+10     	; 0xe22 <timer_init+0x58>
     e18:	09 83       	std	Y+1, r16	; 0x01
     e1a:	1a 83       	std	Y+2, r17	; 0x02
     e1c:	2b 83       	std	Y+3, r18	; 0x03
     e1e:	3c 83       	std	Y+4, r19	; 0x04
     e20:	15 c0       	rjmp	.+42     	; 0xe4c <timer_init+0x82>
     e22:	ce 01       	movw	r24, r28
     e24:	01 96       	adiw	r24, 0x01	; 1
     e26:	7c 01       	movw	r14, r24
     e28:	4d 81       	ldd	r20, Y+5	; 0x05
     e2a:	5e 81       	ldd	r21, Y+6	; 0x06
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	b0 dc       	rcall	.-1696   	; 0x794 <calculateTopRegister>
     e34:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     e38:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     e3c:	64 e0       	ldi	r22, 0x04	; 4
     e3e:	81 e8       	ldi	r24, 0x81	; 129
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	1e dc       	rcall	.-1988   	; 0x680 <setBit>
     e44:	63 e0       	ldi	r22, 0x03	; 3
     e46:	81 e8       	ldi	r24, 0x81	; 129
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	1a dc       	rcall	.-1996   	; 0x680 <setBit>
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	9a 81       	ldd	r25, Y+2	; 0x02
     e50:	ab 81       	ldd	r26, Y+3	; 0x03
     e52:	bc 81       	ldd	r27, Y+4	; 0x04
     e54:	8c 3f       	cpi	r24, 0xFC	; 252
     e56:	2f ef       	ldi	r18, 0xFF	; 255
     e58:	92 07       	cpc	r25, r18
     e5a:	a2 07       	cpc	r26, r18
     e5c:	b1 05       	cpc	r27, r1
     e5e:	59 f1       	breq	.+86     	; 0xeb6 <timer_init+0xec>
     e60:	60 f4       	brcc	.+24     	; 0xe7a <timer_init+0xb0>
     e62:	89 3f       	cpi	r24, 0xF9	; 249
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	92 07       	cpc	r25, r18
     e68:	a2 07       	cpc	r26, r18
     e6a:	b1 05       	cpc	r27, r1
     e6c:	91 f0       	breq	.+36     	; 0xe92 <timer_init+0xc8>
     e6e:	8a 3f       	cpi	r24, 0xFA	; 250
     e70:	9f 4f       	sbci	r25, 0xFF	; 255
     e72:	af 4f       	sbci	r26, 0xFF	; 255
     e74:	b1 05       	cpc	r27, r1
     e76:	b1 f0       	breq	.+44     	; 0xea4 <timer_init+0xda>
     e78:	38 c0       	rjmp	.+112    	; 0xeea <timer_init+0x120>
     e7a:	8e 3f       	cpi	r24, 0xFE	; 254
     e7c:	2f ef       	ldi	r18, 0xFF	; 255
     e7e:	92 07       	cpc	r25, r18
     e80:	a2 07       	cpc	r26, r18
     e82:	b1 05       	cpc	r27, r1
     e84:	09 f1       	breq	.+66     	; 0xec8 <timer_init+0xfe>
     e86:	8f 3f       	cpi	r24, 0xFF	; 255
     e88:	9f 4f       	sbci	r25, 0xFF	; 255
     e8a:	af 4f       	sbci	r26, 0xFF	; 255
     e8c:	b1 05       	cpc	r27, r1
     e8e:	29 f1       	breq	.+74     	; 0xeda <timer_init+0x110>
     e90:	2c c0       	rjmp	.+88     	; 0xeea <timer_init+0x120>
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	a0 e0       	ldi	r26, 0x00	; 0
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	89 83       	std	Y+1, r24	; 0x01
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	ab 83       	std	Y+3, r26	; 0x03
     ea0:	bc 83       	std	Y+4, r27	; 0x04
     ea2:	23 c0       	rjmp	.+70     	; 0xeea <timer_init+0x120>
     ea4:	82 e0       	ldi	r24, 0x02	; 2
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	a0 e0       	ldi	r26, 0x00	; 0
     eaa:	b0 e0       	ldi	r27, 0x00	; 0
     eac:	89 83       	std	Y+1, r24	; 0x01
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	ab 83       	std	Y+3, r26	; 0x03
     eb2:	bc 83       	std	Y+4, r27	; 0x04
     eb4:	1a c0       	rjmp	.+52     	; 0xeea <timer_init+0x120>
     eb6:	83 e0       	ldi	r24, 0x03	; 3
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	a0 e0       	ldi	r26, 0x00	; 0
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	89 83       	std	Y+1, r24	; 0x01
     ec0:	9a 83       	std	Y+2, r25	; 0x02
     ec2:	ab 83       	std	Y+3, r26	; 0x03
     ec4:	bc 83       	std	Y+4, r27	; 0x04
     ec6:	11 c0       	rjmp	.+34     	; 0xeea <timer_init+0x120>
     ec8:	84 e0       	ldi	r24, 0x04	; 4
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	89 83       	std	Y+1, r24	; 0x01
     ed2:	9a 83       	std	Y+2, r25	; 0x02
     ed4:	ab 83       	std	Y+3, r26	; 0x03
     ed6:	bc 83       	std	Y+4, r27	; 0x04
     ed8:	08 c0       	rjmp	.+16     	; 0xeea <timer_init+0x120>
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	a0 e0       	ldi	r26, 0x00	; 0
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	89 83       	std	Y+1, r24	; 0x01
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	ab 83       	std	Y+3, r26	; 0x03
     ee8:	bc 83       	std	Y+4, r27	; 0x04
     eea:	49 81       	ldd	r20, Y+1	; 0x01
     eec:	5a 81       	ldd	r21, Y+2	; 0x02
     eee:	6b 81       	ldd	r22, Y+3	; 0x03
     ef0:	7c 81       	ldd	r23, Y+4	; 0x04
     ef2:	76 95       	lsr	r23
     ef4:	67 95       	ror	r22
     ef6:	57 95       	ror	r21
     ef8:	47 95       	ror	r20
     efa:	76 95       	lsr	r23
     efc:	67 95       	ror	r22
     efe:	57 95       	ror	r21
     f00:	47 95       	ror	r20
     f02:	41 70       	andi	r20, 0x01	; 1
     f04:	62 e0       	ldi	r22, 0x02	; 2
     f06:	88 e3       	ldi	r24, 0x38	; 56
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	a2 db       	rcall	.-2236   	; 0x650 <updateBit>
     f0c:	49 81       	ldd	r20, Y+1	; 0x01
     f0e:	5a 81       	ldd	r21, Y+2	; 0x02
     f10:	6b 81       	ldd	r22, Y+3	; 0x03
     f12:	7c 81       	ldd	r23, Y+4	; 0x04
     f14:	76 95       	lsr	r23
     f16:	67 95       	ror	r22
     f18:	57 95       	ror	r21
     f1a:	47 95       	ror	r20
     f1c:	41 70       	andi	r20, 0x01	; 1
     f1e:	61 e0       	ldi	r22, 0x01	; 1
     f20:	88 e3       	ldi	r24, 0x38	; 56
     f22:	91 e0       	ldi	r25, 0x01	; 1
     f24:	95 db       	rcall	.-2262   	; 0x650 <updateBit>
     f26:	49 81       	ldd	r20, Y+1	; 0x01
     f28:	41 70       	andi	r20, 0x01	; 1
     f2a:	60 e0       	ldi	r22, 0x00	; 0
     f2c:	88 e3       	ldi	r24, 0x38	; 56
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	8f db       	rcall	.-2274   	; 0x650 <updateBit>
     f32:	8a c0       	rjmp	.+276    	; 0x1048 <timer_init+0x27e>
     f34:	09 3f       	cpi	r16, 0xF9	; 249
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	18 07       	cpc	r17, r24
     f3a:	28 07       	cpc	r18, r24
     f3c:	31 05       	cpc	r19, r1
     f3e:	28 f0       	brcs	.+10     	; 0xf4a <timer_init+0x180>
     f40:	09 83       	std	Y+1, r16	; 0x01
     f42:	1a 83       	std	Y+2, r17	; 0x02
     f44:	2b 83       	std	Y+3, r18	; 0x03
     f46:	3c 83       	std	Y+4, r19	; 0x04
     f48:	0f c0       	rjmp	.+30     	; 0xf68 <timer_init+0x19e>
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	7c 01       	movw	r14, r24
     f50:	4d 81       	ldd	r20, Y+5	; 0x05
     f52:	5e 81       	ldd	r21, Y+6	; 0x06
     f54:	6f 81       	ldd	r22, Y+7	; 0x07
     f56:	78 85       	ldd	r23, Y+8	; 0x08
     f58:	89 85       	ldd	r24, Y+9	; 0x09
     f5a:	1c dc       	rcall	.-1992   	; 0x794 <calculateTopRegister>
     f5c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	80 eb       	ldi	r24, 0xB0	; 176
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	8c db       	rcall	.-2280   	; 0x680 <setBit>
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	9a 81       	ldd	r25, Y+2	; 0x02
     f6c:	ab 81       	ldd	r26, Y+3	; 0x03
     f6e:	bc 81       	ldd	r27, Y+4	; 0x04
     f70:	fc 01       	movw	r30, r24
     f72:	37 96       	adiw	r30, 0x07	; 7
     f74:	e7 30       	cpi	r30, 0x07	; 7
     f76:	f1 05       	cpc	r31, r1
     f78:	08 f0       	brcs	.+2      	; 0xf7c <timer_init+0x1b2>
     f7a:	42 c0       	rjmp	.+132    	; 0x1000 <timer_init+0x236>
     f7c:	ea 5b       	subi	r30, 0xBA	; 186
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	0c 94 20 13 	jmp	0x2640	; 0x2640 <__tablejump2__>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	a0 e0       	ldi	r26, 0x00	; 0
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	89 83       	std	Y+1, r24	; 0x01
     f8e:	9a 83       	std	Y+2, r25	; 0x02
     f90:	ab 83       	std	Y+3, r26	; 0x03
     f92:	bc 83       	std	Y+4, r27	; 0x04
     f94:	35 c0       	rjmp	.+106    	; 0x1000 <timer_init+0x236>
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a0 e0       	ldi	r26, 0x00	; 0
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	89 83       	std	Y+1, r24	; 0x01
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	ab 83       	std	Y+3, r26	; 0x03
     fa4:	bc 83       	std	Y+4, r27	; 0x04
     fa6:	2c c0       	rjmp	.+88     	; 0x1000 <timer_init+0x236>
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	ab 83       	std	Y+3, r26	; 0x03
     fb6:	bc 83       	std	Y+4, r27	; 0x04
     fb8:	23 c0       	rjmp	.+70     	; 0x1000 <timer_init+0x236>
     fba:	84 e0       	ldi	r24, 0x04	; 4
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	ab 83       	std	Y+3, r26	; 0x03
     fc8:	bc 83       	std	Y+4, r27	; 0x04
     fca:	1a c0       	rjmp	.+52     	; 0x1000 <timer_init+0x236>
     fcc:	85 e0       	ldi	r24, 0x05	; 5
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	ab 83       	std	Y+3, r26	; 0x03
     fda:	bc 83       	std	Y+4, r27	; 0x04
     fdc:	11 c0       	rjmp	.+34     	; 0x1000 <timer_init+0x236>
     fde:	86 e0       	ldi	r24, 0x06	; 6
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	ab 83       	std	Y+3, r26	; 0x03
     fec:	bc 83       	std	Y+4, r27	; 0x04
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <timer_init+0x236>
     ff0:	87 e0       	ldi	r24, 0x07	; 7
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	ab 83       	std	Y+3, r26	; 0x03
     ffe:	bc 83       	std	Y+4, r27	; 0x04
    1000:	49 81       	ldd	r20, Y+1	; 0x01
    1002:	5a 81       	ldd	r21, Y+2	; 0x02
    1004:	6b 81       	ldd	r22, Y+3	; 0x03
    1006:	7c 81       	ldd	r23, Y+4	; 0x04
    1008:	76 95       	lsr	r23
    100a:	67 95       	ror	r22
    100c:	57 95       	ror	r21
    100e:	47 95       	ror	r20
    1010:	76 95       	lsr	r23
    1012:	67 95       	ror	r22
    1014:	57 95       	ror	r21
    1016:	47 95       	ror	r20
    1018:	41 70       	andi	r20, 0x01	; 1
    101a:	62 e0       	ldi	r22, 0x02	; 2
    101c:	89 e3       	ldi	r24, 0x39	; 57
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	17 db       	rcall	.-2514   	; 0x650 <updateBit>
    1022:	49 81       	ldd	r20, Y+1	; 0x01
    1024:	5a 81       	ldd	r21, Y+2	; 0x02
    1026:	6b 81       	ldd	r22, Y+3	; 0x03
    1028:	7c 81       	ldd	r23, Y+4	; 0x04
    102a:	76 95       	lsr	r23
    102c:	67 95       	ror	r22
    102e:	57 95       	ror	r21
    1030:	47 95       	ror	r20
    1032:	41 70       	andi	r20, 0x01	; 1
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	89 e3       	ldi	r24, 0x39	; 57
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	0a db       	rcall	.-2540   	; 0x650 <updateBit>
    103c:	49 81       	ldd	r20, Y+1	; 0x01
    103e:	41 70       	andi	r20, 0x01	; 1
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	89 e3       	ldi	r24, 0x39	; 57
    1044:	91 e0       	ldi	r25, 0x01	; 1
    1046:	04 db       	rcall	.-2552   	; 0x650 <updateBit>
    1048:	29 96       	adiw	r28, 0x09	; 9
    104a:	0f b6       	in	r0, 0x3f	; 63
    104c:	f8 94       	cli
    104e:	de bf       	out	0x3e, r29	; 62
    1050:	0f be       	out	0x3f, r0	; 63
    1052:	cd bf       	out	0x3d, r28	; 61
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	08 95       	ret

00001062 <timer_start>:
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	00 d0       	rcall	.+0      	; 0x1068 <timer_start+0x6>
    1068:	00 d0       	rcall	.+0      	; 0x106a <timer_start+0x8>
    106a:	1f 92       	push	r1
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	41 30       	cpi	r20, 0x01	; 1
    1072:	19 f0       	breq	.+6      	; 0x107a <timer_start+0x18>
    1074:	42 30       	cpi	r20, 0x02	; 2
    1076:	d1 f0       	breq	.+52     	; 0x10ac <timer_start+0x4a>
    1078:	31 c0       	rjmp	.+98     	; 0x10dc <timer_start+0x7a>
    107a:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <u8_timer1ClockSource>
    107e:	42 fb       	bst	r20, 2
    1080:	44 27       	eor	r20, r20
    1082:	40 f9       	bld	r20, 0
    1084:	62 e0       	ldi	r22, 0x02	; 2
    1086:	81 e8       	ldi	r24, 0x81	; 129
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	e2 da       	rcall	.-2620   	; 0x650 <updateBit>
    108c:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <u8_timer1ClockSource>
    1090:	46 95       	lsr	r20
    1092:	41 70       	andi	r20, 0x01	; 1
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	81 e8       	ldi	r24, 0x81	; 129
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	da da       	rcall	.-2636   	; 0x650 <updateBit>
    109c:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <u8_timer1ClockSource>
    10a0:	41 70       	andi	r20, 0x01	; 1
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	81 e8       	ldi	r24, 0x81	; 129
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	d3 da       	rcall	.-2650   	; 0x650 <updateBit>
    10aa:	18 c0       	rjmp	.+48     	; 0x10dc <timer_start+0x7a>
    10ac:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <u8_timer2ClockSource>
    10b0:	42 fb       	bst	r20, 2
    10b2:	44 27       	eor	r20, r20
    10b4:	40 f9       	bld	r20, 0
    10b6:	62 e0       	ldi	r22, 0x02	; 2
    10b8:	81 eb       	ldi	r24, 0xB1	; 177
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	c9 da       	rcall	.-2670   	; 0x650 <updateBit>
    10be:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <u8_timer2ClockSource>
    10c2:	46 95       	lsr	r20
    10c4:	41 70       	andi	r20, 0x01	; 1
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	81 eb       	ldi	r24, 0xB1	; 177
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	c1 da       	rcall	.-2686   	; 0x650 <updateBit>
    10ce:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <u8_timer2ClockSource>
    10d2:	41 70       	andi	r20, 0x01	; 1
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	81 eb       	ldi	r24, 0xB1	; 177
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	ba da       	rcall	.-2700   	; 0x650 <updateBit>
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	08 95       	ret

000010ec <timer_enableInterrupt>:
    10ec:	cf 92       	push	r12
    10ee:	df 92       	push	r13
    10f0:	ef 92       	push	r14
    10f2:	ff 92       	push	r15
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	00 d0       	rcall	.+0      	; 0x10fe <timer_enableInterrupt+0x12>
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <timer_enableInterrupt+0x14>
    1100:	1f 92       	push	r1
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	49 83       	std	Y+1, r20	; 0x01
    1108:	5a 83       	std	Y+2, r21	; 0x02
    110a:	6b 83       	std	Y+3, r22	; 0x03
    110c:	7c 83       	std	Y+4, r23	; 0x04
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	02 2f       	mov	r16, r18
    1112:	41 30       	cpi	r20, 0x01	; 1
    1114:	21 f0       	breq	.+8      	; 0x111e <timer_enableInterrupt+0x32>
    1116:	42 30       	cpi	r20, 0x02	; 2
    1118:	09 f4       	brne	.+2      	; 0x111c <timer_enableInterrupt+0x30>
    111a:	5e c0       	rjmp	.+188    	; 0x11d8 <timer_enableInterrupt+0xec>
    111c:	95 c0       	rjmp	.+298    	; 0x1248 <timer_enableInterrupt+0x15c>
    111e:	0f 2e       	mov	r0, r31
    1120:	f1 e8       	ldi	r31, 0x81	; 129
    1122:	ef 2e       	mov	r14, r31
    1124:	f1 2c       	mov	r15, r1
    1126:	f0 2d       	mov	r31, r0
    1128:	f7 01       	movw	r30, r14
    112a:	80 81       	ld	r24, Z
    112c:	64 e0       	ldi	r22, 0x04	; 4
    112e:	c1 da       	rcall	.-2686   	; 0x6b2 <checkBit>
    1130:	18 2f       	mov	r17, r24
    1132:	f7 01       	movw	r30, r14
    1134:	80 81       	ld	r24, Z
    1136:	63 e0       	ldi	r22, 0x03	; 3
    1138:	bc da       	rcall	.-2696   	; 0x6b2 <checkBit>
    113a:	11 0f       	add	r17, r17
    113c:	11 0f       	add	r17, r17
    113e:	11 0f       	add	r17, r17
    1140:	f4 e0       	ldi	r31, 0x04	; 4
    1142:	8f 9f       	mul	r24, r31
    1144:	c0 01       	movw	r24, r0
    1146:	11 24       	eor	r1, r1
    1148:	18 2b       	or	r17, r24
    114a:	68 94       	set
    114c:	cc 24       	eor	r12, r12
    114e:	c7 f8       	bld	r12, 7
    1150:	d1 2c       	mov	r13, r1
    1152:	f6 01       	movw	r30, r12
    1154:	80 81       	ld	r24, Z
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	ac da       	rcall	.-2728   	; 0x6b2 <checkBit>
    115a:	f8 2e       	mov	r15, r24
    115c:	f6 01       	movw	r30, r12
    115e:	80 81       	ld	r24, Z
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	a7 da       	rcall	.-2738   	; 0x6b2 <checkBit>
    1164:	ff 0c       	add	r15, r15
    1166:	81 2b       	or	r24, r17
    1168:	8f 29       	or	r24, r15
    116a:	01 30       	cpi	r16, 0x01	; 1
    116c:	d9 f0       	breq	.+54     	; 0x11a4 <timer_enableInterrupt+0xb8>
    116e:	28 f0       	brcs	.+10     	; 0x117a <timer_enableInterrupt+0x8e>
    1170:	02 30       	cpi	r16, 0x02	; 2
    1172:	21 f1       	breq	.+72     	; 0x11bc <timer_enableInterrupt+0xd0>
    1174:	03 30       	cpi	r16, 0x03	; 3
    1176:	39 f1       	breq	.+78     	; 0x11c6 <timer_enableInterrupt+0xda>
    1178:	67 c0       	rjmp	.+206    	; 0x1248 <timer_enableInterrupt+0x15c>
    117a:	88 30       	cpi	r24, 0x08	; 8
    117c:	38 f4       	brcc	.+14     	; 0x118c <timer_enableInterrupt+0xa0>
    117e:	84 30       	cpi	r24, 0x04	; 4
    1180:	61 f0       	breq	.+24     	; 0x119a <timer_enableInterrupt+0xae>
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	8f e6       	ldi	r24, 0x6F	; 111
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	7b da       	rcall	.-2826   	; 0x680 <setBit>
    118a:	5e c0       	rjmp	.+188    	; 0x1248 <timer_enableInterrupt+0x15c>
    118c:	80 fd       	sbrc	r24, 0
    118e:	05 c0       	rjmp	.+10     	; 0x119a <timer_enableInterrupt+0xae>
    1190:	65 e0       	ldi	r22, 0x05	; 5
    1192:	8f e6       	ldi	r24, 0x6F	; 111
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	74 da       	rcall	.-2840   	; 0x680 <setBit>
    1198:	57 c0       	rjmp	.+174    	; 0x1248 <timer_enableInterrupt+0x15c>
    119a:	61 e0       	ldi	r22, 0x01	; 1
    119c:	8f e6       	ldi	r24, 0x6F	; 111
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	6f da       	rcall	.-2850   	; 0x680 <setBit>
    11a2:	52 c0       	rjmp	.+164    	; 0x1248 <timer_enableInterrupt+0x15c>
    11a4:	88 30       	cpi	r24, 0x08	; 8
    11a6:	18 f4       	brcc	.+6      	; 0x11ae <timer_enableInterrupt+0xc2>
    11a8:	84 30       	cpi	r24, 0x04	; 4
    11aa:	19 f4       	brne	.+6      	; 0x11b2 <timer_enableInterrupt+0xc6>
    11ac:	4d c0       	rjmp	.+154    	; 0x1248 <timer_enableInterrupt+0x15c>
    11ae:	80 fd       	sbrc	r24, 0
    11b0:	4b c0       	rjmp	.+150    	; 0x1248 <timer_enableInterrupt+0x15c>
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	8f e6       	ldi	r24, 0x6F	; 111
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	63 da       	rcall	.-2874   	; 0x680 <setBit>
    11ba:	46 c0       	rjmp	.+140    	; 0x1248 <timer_enableInterrupt+0x15c>
    11bc:	62 e0       	ldi	r22, 0x02	; 2
    11be:	8f e6       	ldi	r24, 0x6F	; 111
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	5e da       	rcall	.-2884   	; 0x680 <setBit>
    11c4:	41 c0       	rjmp	.+130    	; 0x1248 <timer_enableInterrupt+0x15c>
    11c6:	88 30       	cpi	r24, 0x08	; 8
    11c8:	10 f0       	brcs	.+4      	; 0x11ce <timer_enableInterrupt+0xe2>
    11ca:	80 ff       	sbrs	r24, 0
    11cc:	3d c0       	rjmp	.+122    	; 0x1248 <timer_enableInterrupt+0x15c>
    11ce:	65 e0       	ldi	r22, 0x05	; 5
    11d0:	8f e6       	ldi	r24, 0x6F	; 111
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	55 da       	rcall	.-2902   	; 0x680 <setBit>
    11d6:	38 c0       	rjmp	.+112    	; 0x1248 <timer_enableInterrupt+0x15c>
    11d8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    11dc:	63 e0       	ldi	r22, 0x03	; 3
    11de:	69 da       	rcall	.-2862   	; 0x6b2 <checkBit>
    11e0:	18 2f       	mov	r17, r24
    11e2:	0f 2e       	mov	r0, r31
    11e4:	f0 eb       	ldi	r31, 0xB0	; 176
    11e6:	ef 2e       	mov	r14, r31
    11e8:	f1 2c       	mov	r15, r1
    11ea:	f0 2d       	mov	r31, r0
    11ec:	f7 01       	movw	r30, r14
    11ee:	80 81       	ld	r24, Z
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	5f da       	rcall	.-2882   	; 0x6b2 <checkBit>
    11f4:	11 0f       	add	r17, r17
    11f6:	11 0f       	add	r17, r17
    11f8:	88 0f       	add	r24, r24
    11fa:	18 2b       	or	r17, r24
    11fc:	f7 01       	movw	r30, r14
    11fe:	80 81       	ld	r24, Z
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	57 da       	rcall	.-2898   	; 0x6b2 <checkBit>
    1204:	81 2b       	or	r24, r17
    1206:	01 30       	cpi	r16, 0x01	; 1
    1208:	91 f0       	breq	.+36     	; 0x122e <timer_enableInterrupt+0x142>
    120a:	18 f0       	brcs	.+6      	; 0x1212 <timer_enableInterrupt+0x126>
    120c:	02 30       	cpi	r16, 0x02	; 2
    120e:	c1 f0       	breq	.+48     	; 0x1240 <timer_enableInterrupt+0x154>
    1210:	1b c0       	rjmp	.+54     	; 0x1248 <timer_enableInterrupt+0x15c>
    1212:	84 30       	cpi	r24, 0x04	; 4
    1214:	38 f4       	brcc	.+14     	; 0x1224 <timer_enableInterrupt+0x138>
    1216:	82 30       	cpi	r24, 0x02	; 2
    1218:	29 f0       	breq	.+10     	; 0x1224 <timer_enableInterrupt+0x138>
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	80 e7       	ldi	r24, 0x70	; 112
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	2f da       	rcall	.-2978   	; 0x680 <setBit>
    1222:	12 c0       	rjmp	.+36     	; 0x1248 <timer_enableInterrupt+0x15c>
    1224:	61 e0       	ldi	r22, 0x01	; 1
    1226:	80 e7       	ldi	r24, 0x70	; 112
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	2a da       	rcall	.-2988   	; 0x680 <setBit>
    122c:	0d c0       	rjmp	.+26     	; 0x1248 <timer_enableInterrupt+0x15c>
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	58 f4       	brcc	.+22     	; 0x1248 <timer_enableInterrupt+0x15c>
    1232:	82 30       	cpi	r24, 0x02	; 2
    1234:	49 f0       	breq	.+18     	; 0x1248 <timer_enableInterrupt+0x15c>
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	80 e7       	ldi	r24, 0x70	; 112
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	21 da       	rcall	.-3006   	; 0x680 <setBit>
    123e:	04 c0       	rjmp	.+8      	; 0x1248 <timer_enableInterrupt+0x15c>
    1240:	62 e0       	ldi	r22, 0x02	; 2
    1242:	80 e7       	ldi	r24, 0x70	; 112
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	1c da       	rcall	.-3016   	; 0x680 <setBit>
    1248:	0f 90       	pop	r0
    124a:	0f 90       	pop	r0
    124c:	0f 90       	pop	r0
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
    1252:	df 91       	pop	r29
    1254:	cf 91       	pop	r28
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	df 90       	pop	r13
    1260:	cf 90       	pop	r12
    1262:	08 95       	ret

00001264 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    1264:	0f 93       	push	r16
    1266:	1f 93       	push	r17
    1268:	cf 93       	push	r28
    126a:	df 93       	push	r29
    126c:	00 d0       	rcall	.+0      	; 0x126e <timer_attachInterrupt+0xa>
    126e:	00 d0       	rcall	.+0      	; 0x1270 <timer_attachInterrupt+0xc>
    1270:	1f 92       	push	r1
    1272:	cd b7       	in	r28, 0x3d	; 61
    1274:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    1276:	41 30       	cpi	r20, 0x01	; 1
    1278:	19 f0       	breq	.+6      	; 0x1280 <timer_attachInterrupt+0x1c>
    127a:	42 30       	cpi	r20, 0x02	; 2
    127c:	51 f0       	breq	.+20     	; 0x1292 <timer_attachInterrupt+0x2e>
    127e:	11 c0       	rjmp	.+34     	; 0x12a2 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    1280:	e2 2f       	mov	r30, r18
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	e0 5d       	subi	r30, 0xD0	; 208
    128a:	fe 4f       	sbci	r31, 0xFE	; 254
    128c:	11 83       	std	Z+1, r17	; 0x01
    128e:	00 83       	st	Z, r16
		#endif
			break;
    1290:	08 c0       	rjmp	.+16     	; 0x12a2 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    1292:	e2 2f       	mov	r30, r18
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	ee 0f       	add	r30, r30
    1298:	ff 1f       	adc	r31, r31
    129a:	e6 5c       	subi	r30, 0xC6	; 198
    129c:	fe 4f       	sbci	r31, 0xFE	; 254
    129e:	11 83       	std	Z+1, r17	; 0x01
    12a0:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	1f 91       	pop	r17
    12b2:	0f 91       	pop	r16
    12b4:	08 95       	ret

000012b6 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    12b6:	4f 92       	push	r4
    12b8:	5f 92       	push	r5
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	4b 01       	movw	r8, r22
    12d4:	5c 01       	movw	r10, r24
    12d6:	ea 01       	movw	r28, r20
    12d8:	0f 2e       	mov	r0, r31
    12da:	f0 e2       	ldi	r31, 0x20	; 32
    12dc:	4f 2e       	mov	r4, r31
    12de:	f1 ea       	ldi	r31, 0xA1	; 161
    12e0:	5f 2e       	mov	r5, r31
    12e2:	f7 e0       	ldi	r31, 0x07	; 7
    12e4:	6f 2e       	mov	r6, r31
    12e6:	71 2c       	mov	r7, r1
    12e8:	f0 2d       	mov	r31, r0
    12ea:	c3 01       	movw	r24, r6
    12ec:	b2 01       	movw	r22, r4
    12ee:	a5 01       	movw	r20, r10
    12f0:	94 01       	movw	r18, r8
    12f2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    12f6:	69 01       	movw	r12, r18
    12f8:	7a 01       	movw	r14, r20
    12fa:	c3 01       	movw	r24, r6
    12fc:	b2 01       	movw	r22, r4
    12fe:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    1302:	ca 01       	movw	r24, r20
    1304:	b9 01       	movw	r22, r18
    1306:	a5 01       	movw	r20, r10
    1308:	94 01       	movw	r18, r8
    130a:	db d9       	rcall	.-3146   	; 0x6c2 <calculateError>
    130c:	44 97       	sbiw	r24, 0x14	; 20
    130e:	30 f4       	brcc	.+12     	; 0x131c <calculateUBRR+0x66>
    1310:	d7 01       	movw	r26, r14
    1312:	c6 01       	movw	r24, r12
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	a1 09       	sbc	r26, r1
    1318:	b1 09       	sbc	r27, r1
    131a:	0f c0       	rjmp	.+30     	; 0x133a <calculateUBRR+0x84>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	88 83       	st	Y, r24
    1320:	60 e4       	ldi	r22, 0x40	; 64
    1322:	72 e4       	ldi	r23, 0x42	; 66
    1324:	8f e0       	ldi	r24, 0x0F	; 15
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	a5 01       	movw	r20, r10
    132a:	94 01       	movw	r18, r8
    132c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    1330:	da 01       	movw	r26, r20
    1332:	c9 01       	movw	r24, r18
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	a1 09       	sbc	r26, r1
    1338:	b1 09       	sbc	r27, r1
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	ff 90       	pop	r15
    1340:	ef 90       	pop	r14
    1342:	df 90       	pop	r13
    1344:	cf 90       	pop	r12
    1346:	bf 90       	pop	r11
    1348:	af 90       	pop	r10
    134a:	9f 90       	pop	r9
    134c:	8f 90       	pop	r8
    134e:	7f 90       	pop	r7
    1350:	6f 90       	pop	r6
    1352:	5f 90       	pop	r5
    1354:	4f 90       	pop	r4
    1356:	08 95       	ret

00001358 <uart_init>:
    1358:	0f 93       	push	r16
    135a:	1f 93       	push	r17
    135c:	cf 93       	push	r28
    135e:	df 93       	push	r29
    1360:	cd b7       	in	r28, 0x3d	; 61
    1362:	de b7       	in	r29, 0x3e	; 62
    1364:	2b 97       	sbiw	r28, 0x0b	; 11
    1366:	0f b6       	in	r0, 0x3f	; 63
    1368:	f8 94       	cli
    136a:	de bf       	out	0x3e, r29	; 62
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	cd bf       	out	0x3d, r28	; 61
    1370:	0a 83       	std	Y+2, r16	; 0x02
    1372:	1b 83       	std	Y+3, r17	; 0x03
    1374:	2c 83       	std	Y+4, r18	; 0x04
    1376:	3d 83       	std	Y+5, r19	; 0x05
    1378:	4e 83       	std	Y+6, r20	; 0x06
    137a:	5f 83       	std	Y+7, r21	; 0x07
    137c:	68 87       	std	Y+8, r22	; 0x08
    137e:	79 87       	std	Y+9, r23	; 0x09
    1380:	8a 87       	std	Y+10, r24	; 0x0a
    1382:	9b 87       	std	Y+11, r25	; 0x0b
    1384:	19 82       	std	Y+1, r1	; 0x01
    1386:	01 11       	cpse	r16, r1
    1388:	7c c0       	rjmp	.+248    	; 0x1482 <uart_init+0x12a>
    138a:	19 2f       	mov	r17, r25
    138c:	e2 ec       	ldi	r30, 0xC2	; 194
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	8f 73       	andi	r24, 0x3F	; 63
    1394:	80 83       	st	Z, r24
    1396:	6b 81       	ldd	r22, Y+3	; 0x03
    1398:	7c 81       	ldd	r23, Y+4	; 0x04
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	ae 01       	movw	r20, r28
    13a0:	4f 5f       	subi	r20, 0xFF	; 255
    13a2:	5f 4f       	sbci	r21, 0xFF	; 255
    13a4:	88 df       	rcall	.-240    	; 0x12b6 <calculateUBRR>
    13a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    13aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    13ae:	49 81       	ldd	r20, Y+1	; 0x01
    13b0:	61 e0       	ldi	r22, 0x01	; 1
    13b2:	80 ec       	ldi	r24, 0xC0	; 192
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	4c d9       	rcall	.-3432   	; 0x650 <updateBit>
    13b8:	89 85       	ldd	r24, Y+9	; 0x09
    13ba:	82 30       	cpi	r24, 0x02	; 2
    13bc:	31 f1       	breq	.+76     	; 0x140a <uart_init+0xb2>
    13be:	28 f4       	brcc	.+10     	; 0x13ca <uart_init+0x72>
    13c0:	88 23       	and	r24, r24
    13c2:	49 f0       	breq	.+18     	; 0x13d6 <uart_init+0x7e>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	a1 f0       	breq	.+40     	; 0x13f0 <uart_init+0x98>
    13c8:	46 c0       	rjmp	.+140    	; 0x1456 <uart_init+0xfe>
    13ca:	83 30       	cpi	r24, 0x03	; 3
    13cc:	59 f1       	breq	.+86     	; 0x1424 <uart_init+0xcc>
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <uart_init+0x7c>
    13d2:	35 c0       	rjmp	.+106    	; 0x143e <uart_init+0xe6>
    13d4:	40 c0       	rjmp	.+128    	; 0x1456 <uart_init+0xfe>
    13d6:	61 e0       	ldi	r22, 0x01	; 1
    13d8:	82 ec       	ldi	r24, 0xC2	; 194
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	5d d9       	rcall	.-3398   	; 0x698 <clearBit>
    13de:	62 e0       	ldi	r22, 0x02	; 2
    13e0:	82 ec       	ldi	r24, 0xC2	; 194
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	59 d9       	rcall	.-3406   	; 0x698 <clearBit>
    13e6:	62 e0       	ldi	r22, 0x02	; 2
    13e8:	81 ec       	ldi	r24, 0xC1	; 193
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	55 d9       	rcall	.-3414   	; 0x698 <clearBit>
    13ee:	33 c0       	rjmp	.+102    	; 0x1456 <uart_init+0xfe>
    13f0:	61 e0       	ldi	r22, 0x01	; 1
    13f2:	82 ec       	ldi	r24, 0xC2	; 194
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	44 d9       	rcall	.-3448   	; 0x680 <setBit>
    13f8:	62 e0       	ldi	r22, 0x02	; 2
    13fa:	82 ec       	ldi	r24, 0xC2	; 194
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	4c d9       	rcall	.-3432   	; 0x698 <clearBit>
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	81 ec       	ldi	r24, 0xC1	; 193
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	48 d9       	rcall	.-3440   	; 0x698 <clearBit>
    1408:	26 c0       	rjmp	.+76     	; 0x1456 <uart_init+0xfe>
    140a:	61 e0       	ldi	r22, 0x01	; 1
    140c:	82 ec       	ldi	r24, 0xC2	; 194
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	43 d9       	rcall	.-3450   	; 0x698 <clearBit>
    1412:	62 e0       	ldi	r22, 0x02	; 2
    1414:	82 ec       	ldi	r24, 0xC2	; 194
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	33 d9       	rcall	.-3482   	; 0x680 <setBit>
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	81 ec       	ldi	r24, 0xC1	; 193
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	3b d9       	rcall	.-3466   	; 0x698 <clearBit>
    1422:	19 c0       	rjmp	.+50     	; 0x1456 <uart_init+0xfe>
    1424:	61 e0       	ldi	r22, 0x01	; 1
    1426:	82 ec       	ldi	r24, 0xC2	; 194
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	2a d9       	rcall	.-3500   	; 0x680 <setBit>
    142c:	62 e0       	ldi	r22, 0x02	; 2
    142e:	82 ec       	ldi	r24, 0xC2	; 194
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	26 d9       	rcall	.-3508   	; 0x680 <setBit>
    1434:	62 e0       	ldi	r22, 0x02	; 2
    1436:	81 ec       	ldi	r24, 0xC1	; 193
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	2e d9       	rcall	.-3492   	; 0x698 <clearBit>
    143c:	0c c0       	rjmp	.+24     	; 0x1456 <uart_init+0xfe>
    143e:	61 e0       	ldi	r22, 0x01	; 1
    1440:	82 ec       	ldi	r24, 0xC2	; 194
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	1d d9       	rcall	.-3526   	; 0x680 <setBit>
    1446:	62 e0       	ldi	r22, 0x02	; 2
    1448:	82 ec       	ldi	r24, 0xC2	; 194
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	19 d9       	rcall	.-3534   	; 0x680 <setBit>
    144e:	62 e0       	ldi	r22, 0x02	; 2
    1450:	81 ec       	ldi	r24, 0xC1	; 193
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	15 d9       	rcall	.-3542   	; 0x680 <setBit>
    1456:	4a 85       	ldd	r20, Y+10	; 0x0a
    1458:	63 e0       	ldi	r22, 0x03	; 3
    145a:	82 ec       	ldi	r24, 0xC2	; 194
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	f8 d8       	rcall	.-3600   	; 0x650 <updateBit>
    1460:	12 30       	cpi	r17, 0x02	; 2
    1462:	31 f4       	brne	.+12     	; 0x1470 <uart_init+0x118>
    1464:	e2 ec       	ldi	r30, 0xC2	; 194
    1466:	f0 e0       	ldi	r31, 0x00	; 0
    1468:	80 81       	ld	r24, Z
    146a:	8f 7c       	andi	r24, 0xCF	; 207
    146c:	80 83       	st	Z, r24
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <uart_init+0x12a>
    1470:	65 e0       	ldi	r22, 0x05	; 5
    1472:	82 ec       	ldi	r24, 0xC2	; 194
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	04 d9       	rcall	.-3576   	; 0x680 <setBit>
    1478:	41 2f       	mov	r20, r17
    147a:	64 e0       	ldi	r22, 0x04	; 4
    147c:	82 ec       	ldi	r24, 0xC2	; 194
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	e7 d8       	rcall	.-3634   	; 0x650 <updateBit>
    1482:	2b 96       	adiw	r28, 0x0b	; 11
    1484:	0f b6       	in	r0, 0x3f	; 63
    1486:	f8 94       	cli
    1488:	de bf       	out	0x3e, r29	; 62
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	cd bf       	out	0x3d, r28	; 61
    148e:	df 91       	pop	r29
    1490:	cf 91       	pop	r28
    1492:	1f 91       	pop	r17
    1494:	0f 91       	pop	r16
    1496:	08 95       	ret

00001498 <uart_start>:
    1498:	0f 93       	push	r16
    149a:	1f 93       	push	r17
    149c:	cf 93       	push	r28
    149e:	df 93       	push	r29
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	2a 97       	sbiw	r28, 0x0a	; 10
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	6f 83       	std	Y+7, r22	; 0x07
    14b2:	01 11       	cpse	r16, r1
    14b4:	0a c0       	rjmp	.+20     	; 0x14ca <uart_start+0x32>
    14b6:	45 2f       	mov	r20, r21
    14b8:	64 e0       	ldi	r22, 0x04	; 4
    14ba:	81 ec       	ldi	r24, 0xC1	; 193
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	c8 d8       	rcall	.-3696   	; 0x650 <updateBit>
    14c0:	4f 81       	ldd	r20, Y+7	; 0x07
    14c2:	63 e0       	ldi	r22, 0x03	; 3
    14c4:	81 ec       	ldi	r24, 0xC1	; 193
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	c3 d8       	rcall	.-3706   	; 0x650 <updateBit>
    14ca:	2a 96       	adiw	r28, 0x0a	; 10
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	08 95       	ret

000014e0 <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	2a 97       	sbiw	r28, 0x0a	; 10
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	09 83       	std	Y+1, r16	; 0x01
    14fe:	1a 83       	std	Y+2, r17	; 0x02
    1500:	2b 83       	std	Y+3, r18	; 0x03
    1502:	3c 83       	std	Y+4, r19	; 0x04
    1504:	4d 83       	std	Y+5, r20	; 0x05
    1506:	5e 83       	std	Y+6, r21	; 0x06
    1508:	6f 83       	std	Y+7, r22	; 0x07
    150a:	78 87       	std	Y+8, r23	; 0x08
    150c:	89 87       	std	Y+9, r24	; 0x09
    150e:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    1510:	01 11       	cpse	r16, r1
    1512:	13 c0       	rjmp	.+38     	; 0x153a <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    1514:	00 ec       	ldi	r16, 0xC0	; 192
    1516:	10 e0       	ldi	r17, 0x00	; 0
    1518:	f8 01       	movw	r30, r16
    151a:	80 81       	ld	r24, Z
    151c:	65 e0       	ldi	r22, 0x05	; 5
    151e:	c9 d8       	rcall	.-3694   	; 0x6b2 <checkBit>
    1520:	88 23       	and	r24, r24
    1522:	d1 f3       	breq	.-12     	; 0x1518 <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
    1524:	88 85       	ldd	r24, Y+8	; 0x08
    1526:	84 30       	cpi	r24, 0x04	; 4
    1528:	31 f4       	brne	.+12     	; 0x1536 <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
    152a:	4f 2d       	mov	r20, r15
    152c:	41 70       	andi	r20, 0x01	; 1
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	81 ec       	ldi	r24, 0xC1	; 193
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	8d d8       	rcall	.-3814   	; 0x650 <updateBit>
			UDR0 = (u8) u16_data;
    1536:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    153a:	2a 96       	adiw	r28, 0x0a	; 10
    153c:	0f b6       	in	r0, 0x3f	; 63
    153e:	f8 94       	cli
    1540:	de bf       	out	0x3e, r29	; 62
    1542:	0f be       	out	0x3f, r0	; 63
    1544:	cd bf       	out	0x3d, r28	; 61
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	ff 90       	pop	r15
    1550:	ef 90       	pop	r14
    1552:	08 95       	ret

00001554 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    1554:	1f 92       	push	r1
    1556:	0f 92       	push	r0
    1558:	0f b6       	in	r0, 0x3f	; 63
    155a:	0f 92       	push	r0
    155c:	11 24       	eor	r1, r1
    155e:	0b b6       	in	r0, 0x3b	; 59
    1560:	0f 92       	push	r0
    1562:	2f 93       	push	r18
    1564:	3f 93       	push	r19
    1566:	4f 93       	push	r20
    1568:	5f 93       	push	r21
    156a:	6f 93       	push	r22
    156c:	7f 93       	push	r23
    156e:	8f 93       	push	r24
    1570:	9f 93       	push	r25
    1572:	af 93       	push	r26
    1574:	bf 93       	push	r27
    1576:	ef 93       	push	r30
    1578:	ff 93       	push	r31
	p_wdgCallback();
    157a:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <p_wdgCallback>
    157e:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <p_wdgCallback+0x1>
    1582:	09 95       	icall
}
    1584:	ff 91       	pop	r31
    1586:	ef 91       	pop	r30
    1588:	bf 91       	pop	r27
    158a:	af 91       	pop	r26
    158c:	9f 91       	pop	r25
    158e:	8f 91       	pop	r24
    1590:	7f 91       	pop	r23
    1592:	6f 91       	pop	r22
    1594:	5f 91       	pop	r21
    1596:	4f 91       	pop	r20
    1598:	3f 91       	pop	r19
    159a:	2f 91       	pop	r18
    159c:	0f 90       	pop	r0
    159e:	0b be       	out	0x3b, r0	; 59
    15a0:	0f 90       	pop	r0
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	0f 90       	pop	r0
    15a6:	1f 90       	pop	r1
    15a8:	18 95       	reti

000015aa <debug_init>:
	byteToASCIIHex(u8_ASCIIData + 4, u32_data >> 8);
	byteToASCIIHex(u8_ASCIIData + 6, u32_data);
	for (u8 i = 0; i < 8; i++)
		uart_transmit(s_debugUart, u8_ASCIIData[i]);
	uart_transmit(s_debugUart, '\n');
}
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	e2 e4       	ldi	r30, 0x42	; 66
    15b0:	f1 e0       	ldi	r31, 0x01	; 1
    15b2:	80 e0       	ldi	r24, 0x00	; 0
    15b4:	18 2f       	mov	r17, r24
    15b6:	81 83       	std	Z+1, r24	; 0x01
    15b8:	81 ee       	ldi	r24, 0xE1	; 225
    15ba:	82 83       	std	Z+2, r24	; 0x02
    15bc:	13 82       	std	Z+3, r1	; 0x03
    15be:	14 82       	std	Z+4, r1	; 0x04
    15c0:	83 e0       	ldi	r24, 0x03	; 3
    15c2:	78 2f       	mov	r23, r24
    15c4:	87 83       	std	Z+7, r24	; 0x07
    15c6:	92 e0       	ldi	r25, 0x02	; 2
    15c8:	91 87       	std	Z+9, r25	; 0x09
    15ca:	10 82       	st	Z, r1
    15cc:	10 86       	std	Z+8, r1	; 0x08
    15ce:	15 82       	std	Z+5, r1	; 0x05
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	68 2f       	mov	r22, r24
    15d4:	86 83       	std	Z+6, r24	; 0x06
    15d6:	00 e0       	ldi	r16, 0x00	; 0
    15d8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    15dc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    15e0:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	b7 de       	rcall	.-658    	; 0x1358 <uart_init>
    15ea:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    15ee:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    15f2:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    15f6:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    15fa:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    15fe:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1602:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1606:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    160a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    160e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1612:	42 df       	rcall	.-380    	; 0x1498 <uart_start>
    1614:	1f 91       	pop	r17
    1616:	0f 91       	pop	r16
    1618:	08 95       	ret

0000161a <debug_writeDecimal>:

void debug_writeDecimal(u16 u16_data)
{
    161a:	cf 92       	push	r12
    161c:	df 92       	push	r13
    161e:	ef 92       	push	r14
    1620:	ff 92       	push	r15
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
    162a:	ec 01       	movw	r28, r24
	uart_transmit(s_debugUart, u16_data / 10000 % 10 + '0');
    162c:	9c 01       	movw	r18, r24
    162e:	32 95       	swap	r19
    1630:	22 95       	swap	r18
    1632:	2f 70       	andi	r18, 0x0F	; 15
    1634:	23 27       	eor	r18, r19
    1636:	3f 70       	andi	r19, 0x0F	; 15
    1638:	23 27       	eor	r18, r19
    163a:	a7 e4       	ldi	r26, 0x47	; 71
    163c:	b3 e0       	ldi	r27, 0x03	; 3
    163e:	0e 94 29 13 	call	0x2652	; 0x2652 <__umulhisi3>
    1642:	7c 01       	movw	r14, r24
    1644:	f6 94       	lsr	r15
    1646:	e7 94       	ror	r14
    1648:	f6 94       	lsr	r15
    164a:	e7 94       	ror	r14
    164c:	f6 94       	lsr	r15
    164e:	e7 94       	ror	r14
    1650:	97 01       	movw	r18, r14
    1652:	ad ec       	ldi	r26, 0xCD	; 205
    1654:	bc ec       	ldi	r27, 0xCC	; 204
    1656:	fd d7       	rcall	.+4090   	; 0x2652 <__umulhisi3>
    1658:	96 95       	lsr	r25
    165a:	87 95       	ror	r24
    165c:	96 95       	lsr	r25
    165e:	87 95       	ror	r24
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	9c 01       	movw	r18, r24
    1666:	22 0f       	add	r18, r18
    1668:	33 1f       	adc	r19, r19
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	82 0f       	add	r24, r18
    1678:	93 1f       	adc	r25, r19
    167a:	e8 1a       	sub	r14, r24
    167c:	f9 0a       	sbc	r15, r25
    167e:	80 e3       	ldi	r24, 0x30	; 48
    1680:	e8 0e       	add	r14, r24
    1682:	f1 1c       	adc	r15, r1
    1684:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    1688:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    168c:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    1690:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    1694:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    1698:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    169c:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    16a0:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    16a4:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    16a8:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    16ac:	19 df       	rcall	.-462    	; 0x14e0 <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 1000 % 10 + '0');
    16ae:	9e 01       	movw	r18, r28
    16b0:	36 95       	lsr	r19
    16b2:	27 95       	ror	r18
    16b4:	36 95       	lsr	r19
    16b6:	27 95       	ror	r18
    16b8:	36 95       	lsr	r19
    16ba:	27 95       	ror	r18
    16bc:	a5 ec       	ldi	r26, 0xC5	; 197
    16be:	b0 e2       	ldi	r27, 0x20	; 32
    16c0:	c8 d7       	rcall	.+3984   	; 0x2652 <__umulhisi3>
    16c2:	7c 01       	movw	r14, r24
    16c4:	f6 94       	lsr	r15
    16c6:	e7 94       	ror	r14
    16c8:	f6 94       	lsr	r15
    16ca:	e7 94       	ror	r14
    16cc:	f6 94       	lsr	r15
    16ce:	e7 94       	ror	r14
    16d0:	f6 94       	lsr	r15
    16d2:	e7 94       	ror	r14
    16d4:	97 01       	movw	r18, r14
    16d6:	ad ec       	ldi	r26, 0xCD	; 205
    16d8:	bc ec       	ldi	r27, 0xCC	; 204
    16da:	bb d7       	rcall	.+3958   	; 0x2652 <__umulhisi3>
    16dc:	96 95       	lsr	r25
    16de:	87 95       	ror	r24
    16e0:	96 95       	lsr	r25
    16e2:	87 95       	ror	r24
    16e4:	96 95       	lsr	r25
    16e6:	87 95       	ror	r24
    16e8:	9c 01       	movw	r18, r24
    16ea:	22 0f       	add	r18, r18
    16ec:	33 1f       	adc	r19, r19
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	82 0f       	add	r24, r18
    16fc:	93 1f       	adc	r25, r19
    16fe:	e8 1a       	sub	r14, r24
    1700:	f9 0a       	sbc	r15, r25
    1702:	80 e3       	ldi	r24, 0x30	; 48
    1704:	e8 0e       	add	r14, r24
    1706:	f1 1c       	adc	r15, r1
    1708:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    170c:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    1710:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    1714:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    1718:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    171c:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1720:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1724:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    1728:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    172c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1730:	d7 de       	rcall	.-594    	; 0x14e0 <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 100 % 10 + '0');
    1732:	9e 01       	movw	r18, r28
    1734:	36 95       	lsr	r19
    1736:	27 95       	ror	r18
    1738:	36 95       	lsr	r19
    173a:	27 95       	ror	r18
    173c:	ab e7       	ldi	r26, 0x7B	; 123
    173e:	b4 e1       	ldi	r27, 0x14	; 20
    1740:	88 d7       	rcall	.+3856   	; 0x2652 <__umulhisi3>
    1742:	7c 01       	movw	r14, r24
    1744:	f6 94       	lsr	r15
    1746:	e7 94       	ror	r14
    1748:	97 01       	movw	r18, r14
    174a:	ad ec       	ldi	r26, 0xCD	; 205
    174c:	bc ec       	ldi	r27, 0xCC	; 204
    174e:	81 d7       	rcall	.+3842   	; 0x2652 <__umulhisi3>
    1750:	96 95       	lsr	r25
    1752:	87 95       	ror	r24
    1754:	96 95       	lsr	r25
    1756:	87 95       	ror	r24
    1758:	96 95       	lsr	r25
    175a:	87 95       	ror	r24
    175c:	9c 01       	movw	r18, r24
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	88 0f       	add	r24, r24
    176c:	99 1f       	adc	r25, r25
    176e:	82 0f       	add	r24, r18
    1770:	93 1f       	adc	r25, r19
    1772:	e8 1a       	sub	r14, r24
    1774:	f9 0a       	sbc	r15, r25
    1776:	80 e3       	ldi	r24, 0x30	; 48
    1778:	e8 0e       	add	r14, r24
    177a:	f1 1c       	adc	r15, r1
    177c:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    1780:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    1784:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    1788:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    178c:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    1790:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1794:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1798:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    179c:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    17a0:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
	uart_transmit(s_debugUart, u16_data / 10 % 10 + '0');
    17a4:	9d de       	rcall	.-710    	; 0x14e0 <uart_transmit>
    17a6:	9e 01       	movw	r18, r28
    17a8:	ad ec       	ldi	r26, 0xCD	; 205
    17aa:	bc ec       	ldi	r27, 0xCC	; 204
    17ac:	52 d7       	rcall	.+3748   	; 0x2652 <__umulhisi3>
    17ae:	6c 01       	movw	r12, r24
    17b0:	d6 94       	lsr	r13
    17b2:	c7 94       	ror	r12
    17b4:	d6 94       	lsr	r13
    17b6:	c7 94       	ror	r12
    17b8:	d6 94       	lsr	r13
    17ba:	c7 94       	ror	r12
    17bc:	96 01       	movw	r18, r12
    17be:	49 d7       	rcall	.+3730   	; 0x2652 <__umulhisi3>
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	96 95       	lsr	r25
    17ca:	87 95       	ror	r24
    17cc:	9c 01       	movw	r18, r24
    17ce:	22 0f       	add	r18, r18
    17d0:	33 1f       	adc	r19, r19
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	88 0f       	add	r24, r24
    17dc:	99 1f       	adc	r25, r25
    17de:	82 0f       	add	r24, r18
    17e0:	93 1f       	adc	r25, r19
    17e2:	76 01       	movw	r14, r12
    17e4:	e8 1a       	sub	r14, r24
    17e6:	f9 0a       	sbc	r15, r25
    17e8:	80 e3       	ldi	r24, 0x30	; 48
    17ea:	e8 0e       	add	r14, r24
    17ec:	f1 1c       	adc	r15, r1
    17ee:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    17f2:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    17f6:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    17fa:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    17fe:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    1802:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1806:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    180a:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    180e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    1812:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1816:	64 de       	rcall	.-824    	; 0x14e0 <uart_transmit>
	uart_transmit(s_debugUart, u16_data % 10 + '0');
    1818:	c6 01       	movw	r24, r12
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	cc 0c       	add	r12, r12
    1820:	dd 1c       	adc	r13, r13
    1822:	cc 0c       	add	r12, r12
    1824:	dd 1c       	adc	r13, r13
    1826:	cc 0c       	add	r12, r12
    1828:	dd 1c       	adc	r13, r13
    182a:	c8 0e       	add	r12, r24
    182c:	d9 1e       	adc	r13, r25
    182e:	7e 01       	movw	r14, r28
    1830:	ec 18       	sub	r14, r12
    1832:	fd 08       	sbc	r15, r13
    1834:	80 e3       	ldi	r24, 0x30	; 48
    1836:	e8 0e       	add	r14, r24
    1838:	f1 1c       	adc	r15, r1
    183a:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    183e:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    1842:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    1846:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    184a:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    184e:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1852:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1856:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    185a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    185e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1862:	3e de       	rcall	.-900    	; 0x14e0 <uart_transmit>
	uart_transmit(s_debugUart, '\n');
    1864:	0f 2e       	mov	r0, r31
    1866:	fa e0       	ldi	r31, 0x0A	; 10
    1868:	ef 2e       	mov	r14, r31
    186a:	f1 2c       	mov	r15, r1
    186c:	f0 2d       	mov	r31, r0
    186e:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    1872:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    1876:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    187a:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    187e:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    1882:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1886:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    188a:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    188e:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    1892:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1896:	24 de       	rcall	.-952    	; 0x14e0 <uart_transmit>
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	08 95       	ret

000018aa <startTimeout>:

	temp = readReg16Bit(ps_sensor, RESULT_RANGE_STATUS + 10);
	writeReg(ps_sensor, SYSTEM_INTERRUPT_CLEAR, 0x01);

	return temp;
}
    18aa:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
    18ae:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
    18b2:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end+0x2>
    18b6:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x3>
    18ba:	fc 01       	movw	r30, r24
    18bc:	51 87       	std	Z+9, r21	; 0x09
    18be:	40 87       	std	Z+8, r20	; 0x08
    18c0:	08 95       	ret

000018c2 <checkTimeoutExpired>:
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	fc 01       	movw	r30, r24
    18c8:	41 81       	ldd	r20, Z+1	; 0x01
    18ca:	52 81       	ldd	r21, Z+2	; 0x02
    18cc:	41 15       	cp	r20, r1
    18ce:	51 05       	cpc	r21, r1
    18d0:	c1 f0       	breq	.+48     	; 0x1902 <checkTimeoutExpired+0x40>
    18d2:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
    18d6:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
    18da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
    18de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
    18e2:	80 85       	ldd	r24, Z+8	; 0x08
    18e4:	91 85       	ldd	r25, Z+9	; 0x09
    18e6:	08 1b       	sub	r16, r24
    18e8:	19 0b       	sbc	r17, r25
    18ea:	21 09       	sbc	r18, r1
    18ec:	31 09       	sbc	r19, r1
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	70 e0       	ldi	r23, 0x00	; 0
    18f2:	81 e0       	ldi	r24, 0x01	; 1
    18f4:	40 17       	cp	r20, r16
    18f6:	51 07       	cpc	r21, r17
    18f8:	62 07       	cpc	r22, r18
    18fa:	73 07       	cpc	r23, r19
    18fc:	18 f0       	brcs	.+6      	; 0x1904 <checkTimeoutExpired+0x42>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <checkTimeoutExpired+0x42>
    1902:	80 e0       	ldi	r24, 0x00	; 0
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <writeReg>:
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	d6 2f       	mov	r29, r22
    1910:	c4 2f       	mov	r28, r20
    1912:	fc 01       	movw	r30, r24
    1914:	80 81       	ld	r24, Z
    1916:	88 0f       	add	r24, r24
    1918:	0e 94 25 02 	call	0x44a	; 0x44a <i2c_sendStart>
    191c:	8d 2f       	mov	r24, r29
    191e:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1922:	8c 2f       	mov	r24, r28
    1924:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1928:	0e 94 89 02 	call	0x512	; 0x512 <i2c_sendStop>
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <writeReg16Bit>:
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	16 2f       	mov	r17, r22
    193a:	c4 2f       	mov	r28, r20
    193c:	d5 2f       	mov	r29, r21
    193e:	fc 01       	movw	r30, r24
    1940:	80 81       	ld	r24, Z
    1942:	88 0f       	add	r24, r24
    1944:	0e 94 25 02 	call	0x44a	; 0x44a <i2c_sendStart>
    1948:	81 2f       	mov	r24, r17
    194a:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    194e:	8d 2f       	mov	r24, r29
    1950:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1954:	8c 2f       	mov	r24, r28
    1956:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    195a:	0e 94 89 02 	call	0x512	; 0x512 <i2c_sendStop>
    195e:	df 91       	pop	r29
    1960:	cf 91       	pop	r28
    1962:	1f 91       	pop	r17
    1964:	08 95       	ret

00001966 <writeReg32Bit>:
    1966:	ff 92       	push	r15
    1968:	0f 93       	push	r16
    196a:	1f 93       	push	r17
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	f6 2e       	mov	r15, r22
    1972:	c2 2f       	mov	r28, r18
    1974:	d3 2f       	mov	r29, r19
    1976:	14 2f       	mov	r17, r20
    1978:	05 2f       	mov	r16, r21
    197a:	fc 01       	movw	r30, r24
    197c:	80 81       	ld	r24, Z
    197e:	88 0f       	add	r24, r24
    1980:	0e 94 25 02 	call	0x44a	; 0x44a <i2c_sendStart>
    1984:	8f 2d       	mov	r24, r15
    1986:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    198a:	80 2f       	mov	r24, r16
    198c:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1990:	81 2f       	mov	r24, r17
    1992:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1996:	8d 2f       	mov	r24, r29
    1998:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    199c:	8c 2f       	mov	r24, r28
    199e:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    19a2:	0e 94 89 02 	call	0x512	; 0x512 <i2c_sendStop>
    19a6:	df 91       	pop	r29
    19a8:	cf 91       	pop	r28
    19aa:	1f 91       	pop	r17
    19ac:	0f 91       	pop	r16
    19ae:	ff 90       	pop	r15
    19b0:	08 95       	ret

000019b2 <readReg>:
    19b2:	1f 93       	push	r17
    19b4:	cf 93       	push	r28
    19b6:	df 93       	push	r29
    19b8:	ec 01       	movw	r28, r24
    19ba:	16 2f       	mov	r17, r22
    19bc:	88 81       	ld	r24, Y
    19be:	88 0f       	add	r24, r24
    19c0:	0e 94 25 02 	call	0x44a	; 0x44a <i2c_sendStart>
    19c4:	81 2f       	mov	r24, r17
    19c6:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    19ca:	88 81       	ld	r24, Y
    19cc:	88 0f       	add	r24, r24
    19ce:	81 60       	ori	r24, 0x01	; 1
    19d0:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_sendRepStart>
    19d4:	0e 94 04 03 	call	0x608	; 0x608 <i2c_readNak>
    19d8:	c8 2f       	mov	r28, r24
    19da:	0e 94 89 02 	call	0x512	; 0x512 <i2c_sendStop>
    19de:	8c 2f       	mov	r24, r28
    19e0:	df 91       	pop	r29
    19e2:	cf 91       	pop	r28
    19e4:	1f 91       	pop	r17
    19e6:	08 95       	ret

000019e8 <readReg16Bit>:
    19e8:	1f 93       	push	r17
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	ec 01       	movw	r28, r24
    19f0:	16 2f       	mov	r17, r22
    19f2:	88 81       	ld	r24, Y
    19f4:	88 0f       	add	r24, r24
    19f6:	0e 94 25 02 	call	0x44a	; 0x44a <i2c_sendStart>
    19fa:	81 2f       	mov	r24, r17
    19fc:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1a00:	88 81       	ld	r24, Y
    1a02:	88 0f       	add	r24, r24
    1a04:	81 60       	ori	r24, 0x01	; 1
    1a06:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_sendRepStart>
    1a0a:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_readAck>
    1a0e:	c8 2f       	mov	r28, r24
    1a10:	d0 e0       	ldi	r29, 0x00	; 0
    1a12:	dc 2f       	mov	r29, r28
    1a14:	cc 27       	eor	r28, r28
    1a16:	0e 94 04 03 	call	0x608	; 0x608 <i2c_readNak>
    1a1a:	c8 2b       	or	r28, r24
    1a1c:	0e 94 89 02 	call	0x512	; 0x512 <i2c_sendStop>
    1a20:	ce 01       	movw	r24, r28
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	1f 91       	pop	r17
    1a28:	08 95       	ret

00001a2a <writeMulti>:
    1a2a:	ef 92       	push	r14
    1a2c:	ff 92       	push	r15
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	d6 2f       	mov	r29, r22
    1a38:	7a 01       	movw	r14, r20
    1a3a:	c2 2f       	mov	r28, r18
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	88 0f       	add	r24, r24
    1a42:	0e 94 25 02 	call	0x44a	; 0x44a <i2c_sendStart>
    1a46:	8d 2f       	mov	r24, r29
    1a48:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	8c 0f       	add	r24, r28
    1a50:	cc 23       	and	r28, r28
    1a52:	69 f0       	breq	.+26     	; 0x1a6e <writeMulti+0x44>
    1a54:	e7 01       	movw	r28, r14
    1a56:	08 2f       	mov	r16, r24
    1a58:	10 e0       	ldi	r17, 0x00	; 0
    1a5a:	0f 5f       	subi	r16, 0xFF	; 255
    1a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a5e:	0e 0d       	add	r16, r14
    1a60:	1f 1d       	adc	r17, r15
    1a62:	89 91       	ld	r24, Y+
    1a64:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1a68:	c0 17       	cp	r28, r16
    1a6a:	d1 07       	cpc	r29, r17
    1a6c:	d1 f7       	brne	.-12     	; 0x1a62 <writeMulti+0x38>
    1a6e:	0e 94 89 02 	call	0x512	; 0x512 <i2c_sendStop>
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	08 95       	ret

00001a80 <readMulti>:
    1a80:	ef 92       	push	r14
    1a82:	ff 92       	push	r15
    1a84:	0f 93       	push	r16
    1a86:	1f 93       	push	r17
    1a88:	cf 93       	push	r28
    1a8a:	df 93       	push	r29
    1a8c:	8c 01       	movw	r16, r24
    1a8e:	d6 2f       	mov	r29, r22
    1a90:	e4 2e       	mov	r14, r20
    1a92:	f5 2e       	mov	r15, r21
    1a94:	c2 2f       	mov	r28, r18
    1a96:	fc 01       	movw	r30, r24
    1a98:	80 81       	ld	r24, Z
    1a9a:	88 0f       	add	r24, r24
    1a9c:	0e 94 25 02 	call	0x44a	; 0x44a <i2c_sendStart>
    1aa0:	8d 2f       	mov	r24, r29
    1aa2:	0e 94 ab 02 	call	0x556	; 0x556 <i2c_write>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	80 81       	ld	r24, Z
    1aaa:	88 0f       	add	r24, r24
    1aac:	81 60       	ori	r24, 0x01	; 1
    1aae:	0e 94 87 02 	call	0x50e	; 0x50e <i2c_sendRepStart>
    1ab2:	cc 23       	and	r28, r28
    1ab4:	91 f0       	breq	.+36     	; 0x1ada <readMulti+0x5a>
    1ab6:	0e 2d       	mov	r16, r14
    1ab8:	1f 2d       	mov	r17, r15
    1aba:	c2 30       	cpi	r28, 0x02	; 2
    1abc:	28 f0       	brcs	.+10     	; 0x1ac8 <readMulti+0x48>
    1abe:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <i2c_readAck>
    1ac2:	f8 01       	movw	r30, r16
    1ac4:	80 83       	st	Z, r24
    1ac6:	04 c0       	rjmp	.+8      	; 0x1ad0 <readMulti+0x50>
    1ac8:	0e 94 04 03 	call	0x608	; 0x608 <i2c_readNak>
    1acc:	f8 01       	movw	r30, r16
    1ace:	80 83       	st	Z, r24
    1ad0:	c1 50       	subi	r28, 0x01	; 1
    1ad2:	0f 5f       	subi	r16, 0xFF	; 255
    1ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad6:	c1 11       	cpse	r28, r1
    1ad8:	f0 cf       	rjmp	.-32     	; 0x1aba <readMulti+0x3a>
    1ada:	0e 94 89 02 	call	0x512	; 0x512 <i2c_sendStop>
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	08 95       	ret

00001aec <getSpadInfo>:
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	ec 01       	movw	r28, r24
    1afa:	7b 01       	movw	r14, r22
    1afc:	8a 01       	movw	r16, r20
    1afe:	41 e0       	ldi	r20, 0x01	; 1
    1b00:	60 e8       	ldi	r22, 0x80	; 128
    1b02:	03 df       	rcall	.-506    	; 0x190a <writeReg>
    1b04:	41 e0       	ldi	r20, 0x01	; 1
    1b06:	6f ef       	ldi	r22, 0xFF	; 255
    1b08:	ce 01       	movw	r24, r28
    1b0a:	ff de       	rcall	.-514    	; 0x190a <writeReg>
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	ce 01       	movw	r24, r28
    1b12:	fb de       	rcall	.-522    	; 0x190a <writeReg>
    1b14:	46 e0       	ldi	r20, 0x06	; 6
    1b16:	6f ef       	ldi	r22, 0xFF	; 255
    1b18:	ce 01       	movw	r24, r28
    1b1a:	f7 de       	rcall	.-530    	; 0x190a <writeReg>
    1b1c:	63 e8       	ldi	r22, 0x83	; 131
    1b1e:	ce 01       	movw	r24, r28
    1b20:	48 df       	rcall	.-368    	; 0x19b2 <readReg>
    1b22:	48 2f       	mov	r20, r24
    1b24:	44 60       	ori	r20, 0x04	; 4
    1b26:	63 e8       	ldi	r22, 0x83	; 131
    1b28:	ce 01       	movw	r24, r28
    1b2a:	ef de       	rcall	.-546    	; 0x190a <writeReg>
    1b2c:	47 e0       	ldi	r20, 0x07	; 7
    1b2e:	6f ef       	ldi	r22, 0xFF	; 255
    1b30:	ce 01       	movw	r24, r28
    1b32:	eb de       	rcall	.-554    	; 0x190a <writeReg>
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	61 e8       	ldi	r22, 0x81	; 129
    1b38:	ce 01       	movw	r24, r28
    1b3a:	e7 de       	rcall	.-562    	; 0x190a <writeReg>
    1b3c:	41 e0       	ldi	r20, 0x01	; 1
    1b3e:	60 e8       	ldi	r22, 0x80	; 128
    1b40:	ce 01       	movw	r24, r28
    1b42:	e3 de       	rcall	.-570    	; 0x190a <writeReg>
    1b44:	4b e6       	ldi	r20, 0x6B	; 107
    1b46:	64 e9       	ldi	r22, 0x94	; 148
    1b48:	ce 01       	movw	r24, r28
    1b4a:	df de       	rcall	.-578    	; 0x190a <writeReg>
    1b4c:	40 e0       	ldi	r20, 0x00	; 0
    1b4e:	63 e8       	ldi	r22, 0x83	; 131
    1b50:	ce 01       	movw	r24, r28
    1b52:	db de       	rcall	.-586    	; 0x190a <writeReg>
    1b54:	ce 01       	movw	r24, r28
    1b56:	a9 de       	rcall	.-686    	; 0x18aa <startTimeout>
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <getSpadInfo+0x76>
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	b2 de       	rcall	.-668    	; 0x18c2 <checkTimeoutExpired>
    1b5e:	81 11       	cpse	r24, r1
    1b60:	37 c0       	rjmp	.+110    	; 0x1bd0 <getSpadInfo+0xe4>
    1b62:	63 e8       	ldi	r22, 0x83	; 131
    1b64:	ce 01       	movw	r24, r28
    1b66:	25 df       	rcall	.-438    	; 0x19b2 <readReg>
    1b68:	88 23       	and	r24, r24
    1b6a:	b9 f3       	breq	.-18     	; 0x1b5a <getSpadInfo+0x6e>
    1b6c:	41 e0       	ldi	r20, 0x01	; 1
    1b6e:	63 e8       	ldi	r22, 0x83	; 131
    1b70:	ce 01       	movw	r24, r28
    1b72:	cb de       	rcall	.-618    	; 0x190a <writeReg>
    1b74:	62 e9       	ldi	r22, 0x92	; 146
    1b76:	ce 01       	movw	r24, r28
    1b78:	1c df       	rcall	.-456    	; 0x19b2 <readReg>
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	9f 77       	andi	r25, 0x7F	; 127
    1b7e:	f7 01       	movw	r30, r14
    1b80:	90 83       	st	Z, r25
    1b82:	88 1f       	adc	r24, r24
    1b84:	88 27       	eor	r24, r24
    1b86:	88 1f       	adc	r24, r24
    1b88:	f8 01       	movw	r30, r16
    1b8a:	80 83       	st	Z, r24
    1b8c:	40 e0       	ldi	r20, 0x00	; 0
    1b8e:	61 e8       	ldi	r22, 0x81	; 129
    1b90:	ce 01       	movw	r24, r28
    1b92:	bb de       	rcall	.-650    	; 0x190a <writeReg>
    1b94:	46 e0       	ldi	r20, 0x06	; 6
    1b96:	6f ef       	ldi	r22, 0xFF	; 255
    1b98:	ce 01       	movw	r24, r28
    1b9a:	b7 de       	rcall	.-658    	; 0x190a <writeReg>
    1b9c:	63 e8       	ldi	r22, 0x83	; 131
    1b9e:	ce 01       	movw	r24, r28
    1ba0:	08 df       	rcall	.-496    	; 0x19b2 <readReg>
    1ba2:	48 2f       	mov	r20, r24
    1ba4:	4b 7f       	andi	r20, 0xFB	; 251
    1ba6:	63 e8       	ldi	r22, 0x83	; 131
    1ba8:	ce 01       	movw	r24, r28
    1baa:	af de       	rcall	.-674    	; 0x190a <writeReg>
    1bac:	41 e0       	ldi	r20, 0x01	; 1
    1bae:	6f ef       	ldi	r22, 0xFF	; 255
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	ab de       	rcall	.-682    	; 0x190a <writeReg>
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	60 e0       	ldi	r22, 0x00	; 0
    1bb8:	ce 01       	movw	r24, r28
    1bba:	a7 de       	rcall	.-690    	; 0x190a <writeReg>
    1bbc:	40 e0       	ldi	r20, 0x00	; 0
    1bbe:	6f ef       	ldi	r22, 0xFF	; 255
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	a3 de       	rcall	.-698    	; 0x190a <writeReg>
    1bc4:	40 e0       	ldi	r20, 0x00	; 0
    1bc6:	60 e8       	ldi	r22, 0x80	; 128
    1bc8:	ce 01       	movw	r24, r28
    1bca:	9f de       	rcall	.-706    	; 0x190a <writeReg>
    1bcc:	81 e0       	ldi	r24, 0x01	; 1
    1bce:	01 c0       	rjmp	.+2      	; 0x1bd2 <getSpadInfo+0xe6>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	df 91       	pop	r29
    1bd4:	cf 91       	pop	r28
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	ef 90       	pop	r14
    1bde:	08 95       	ret

00001be0 <getSequenceStepEnables>:
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	eb 01       	movw	r28, r22
    1be6:	61 e0       	ldi	r22, 0x01	; 1
    1be8:	e4 de       	rcall	.-568    	; 0x19b2 <readReg>
    1bea:	84 fb       	bst	r24, 4
    1bec:	99 27       	eor	r25, r25
    1bee:	90 f9       	bld	r25, 0
    1bf0:	98 83       	st	Y, r25
    1bf2:	83 fb       	bst	r24, 3
    1bf4:	99 27       	eor	r25, r25
    1bf6:	90 f9       	bld	r25, 0
    1bf8:	9a 83       	std	Y+2, r25	; 0x02
    1bfa:	82 fb       	bst	r24, 2
    1bfc:	99 27       	eor	r25, r25
    1bfe:	90 f9       	bld	r25, 0
    1c00:	99 83       	std	Y+1, r25	; 0x01
    1c02:	86 fb       	bst	r24, 6
    1c04:	99 27       	eor	r25, r25
    1c06:	90 f9       	bld	r25, 0
    1c08:	9b 83       	std	Y+3, r25	; 0x03
    1c0a:	88 1f       	adc	r24, r24
    1c0c:	88 27       	eor	r24, r24
    1c0e:	88 1f       	adc	r24, r24
    1c10:	8c 83       	std	Y+4, r24	; 0x04
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <encodeTimeout>:
    1c18:	0f 93       	push	r16
    1c1a:	1f 93       	push	r17
    1c1c:	00 97       	sbiw	r24, 0x00	; 0
    1c1e:	19 f1       	breq	.+70     	; 0x1c66 <encodeTimeout+0x4e>
    1c20:	ac 01       	movw	r20, r24
    1c22:	41 50       	subi	r20, 0x01	; 1
    1c24:	51 09       	sbc	r21, r1
    1c26:	60 e0       	ldi	r22, 0x00	; 0
    1c28:	70 e0       	ldi	r23, 0x00	; 0
    1c2a:	db 01       	movw	r26, r22
    1c2c:	ca 01       	movw	r24, r20
    1c2e:	88 27       	eor	r24, r24
    1c30:	89 2b       	or	r24, r25
    1c32:	8a 2b       	or	r24, r26
    1c34:	8b 2b       	or	r24, r27
    1c36:	79 f0       	breq	.+30     	; 0x1c56 <encodeTimeout+0x3e>
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	76 95       	lsr	r23
    1c3e:	67 95       	ror	r22
    1c40:	57 95       	ror	r21
    1c42:	47 95       	ror	r20
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	8a 01       	movw	r16, r20
    1c48:	9b 01       	movw	r18, r22
    1c4a:	00 27       	eor	r16, r16
    1c4c:	01 2b       	or	r16, r17
    1c4e:	02 2b       	or	r16, r18
    1c50:	03 2b       	or	r16, r19
    1c52:	a1 f7       	brne	.-24     	; 0x1c3c <encodeTimeout+0x24>
    1c54:	02 c0       	rjmp	.+4      	; 0x1c5a <encodeTimeout+0x42>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	98 2f       	mov	r25, r24
    1c5c:	88 27       	eor	r24, r24
    1c5e:	55 27       	eor	r21, r21
    1c60:	84 2b       	or	r24, r20
    1c62:	95 2b       	or	r25, r21
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <encodeTimeout+0x52>
    1c66:	80 e0       	ldi	r24, 0x00	; 0
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	1f 91       	pop	r17
    1c6c:	0f 91       	pop	r16
    1c6e:	08 95       	ret

00001c70 <decodeTimeout>:
    1c70:	9c 01       	movw	r18, r24
    1c72:	33 27       	eor	r19, r19
    1c74:	a9 01       	movw	r20, r18
    1c76:	02 c0       	rjmp	.+4      	; 0x1c7c <decodeTimeout+0xc>
    1c78:	44 0f       	add	r20, r20
    1c7a:	55 1f       	adc	r21, r21
    1c7c:	9a 95       	dec	r25
    1c7e:	e2 f7       	brpl	.-8      	; 0x1c78 <decodeTimeout+0x8>
    1c80:	ca 01       	movw	r24, r20
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	08 95       	ret

00001c86 <timeoutMclksToMicroseconds>:
    1c86:	4f 92       	push	r4
    1c88:	5f 92       	push	r5
    1c8a:	6f 92       	push	r6
    1c8c:	7f 92       	push	r7
    1c8e:	8f 92       	push	r8
    1c90:	9f 92       	push	r9
    1c92:	af 92       	push	r10
    1c94:	bf 92       	push	r11
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	3c 01       	movw	r6, r24
    1ca0:	a6 2f       	mov	r26, r22
    1ca2:	b0 e0       	ldi	r27, 0x00	; 0
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	3f e2       	ldi	r19, 0x2F	; 47
    1ca8:	4a e3       	ldi	r20, 0x3A	; 58
    1caa:	50 e0       	ldi	r21, 0x00	; 0
    1cac:	e1 d4       	rcall	.+2498   	; 0x2670 <__muluhisi3>
    1cae:	6b 01       	movw	r12, r22
    1cb0:	7c 01       	movw	r14, r24
    1cb2:	24 ef       	ldi	r18, 0xF4	; 244
    1cb4:	c2 0e       	add	r12, r18
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	d2 1e       	adc	r13, r18
    1cba:	e1 1c       	adc	r14, r1
    1cbc:	f1 1c       	adc	r15, r1
    1cbe:	0f 2e       	mov	r0, r31
    1cc0:	f8 ee       	ldi	r31, 0xE8	; 232
    1cc2:	8f 2e       	mov	r8, r31
    1cc4:	f3 e0       	ldi	r31, 0x03	; 3
    1cc6:	9f 2e       	mov	r9, r31
    1cc8:	a1 2c       	mov	r10, r1
    1cca:	b1 2c       	mov	r11, r1
    1ccc:	f0 2d       	mov	r31, r0
    1cce:	c7 01       	movw	r24, r14
    1cd0:	b6 01       	movw	r22, r12
    1cd2:	a5 01       	movw	r20, r10
    1cd4:	94 01       	movw	r18, r8
    1cd6:	92 d4       	rcall	.+2340   	; 0x25fc <__udivmodsi4>
    1cd8:	d3 01       	movw	r26, r6
    1cda:	ca d4       	rcall	.+2452   	; 0x2670 <__muluhisi3>
    1cdc:	2b 01       	movw	r4, r22
    1cde:	3c 01       	movw	r6, r24
    1ce0:	c7 01       	movw	r24, r14
    1ce2:	b6 01       	movw	r22, r12
    1ce4:	20 ed       	ldi	r18, 0xD0	; 208
    1ce6:	37 e0       	ldi	r19, 0x07	; 7
    1ce8:	40 e0       	ldi	r20, 0x00	; 0
    1cea:	50 e0       	ldi	r21, 0x00	; 0
    1cec:	87 d4       	rcall	.+2318   	; 0x25fc <__udivmodsi4>
    1cee:	c3 01       	movw	r24, r6
    1cf0:	b2 01       	movw	r22, r4
    1cf2:	62 0f       	add	r22, r18
    1cf4:	73 1f       	adc	r23, r19
    1cf6:	84 1f       	adc	r24, r20
    1cf8:	95 1f       	adc	r25, r21
    1cfa:	a5 01       	movw	r20, r10
    1cfc:	94 01       	movw	r18, r8
    1cfe:	7e d4       	rcall	.+2300   	; 0x25fc <__udivmodsi4>
    1d00:	ca 01       	movw	r24, r20
    1d02:	b9 01       	movw	r22, r18
    1d04:	ff 90       	pop	r15
    1d06:	ef 90       	pop	r14
    1d08:	df 90       	pop	r13
    1d0a:	cf 90       	pop	r12
    1d0c:	bf 90       	pop	r11
    1d0e:	af 90       	pop	r10
    1d10:	9f 90       	pop	r9
    1d12:	8f 90       	pop	r8
    1d14:	7f 90       	pop	r7
    1d16:	6f 90       	pop	r6
    1d18:	5f 90       	pop	r5
    1d1a:	4f 90       	pop	r4
    1d1c:	08 95       	ret

00001d1e <getVcselPulsePeriod>:
    1d1e:	61 11       	cpse	r22, r1
    1d20:	05 c0       	rjmp	.+10     	; 0x1d2c <getVcselPulsePeriod+0xe>
    1d22:	60 e5       	ldi	r22, 0x50	; 80
    1d24:	46 de       	rcall	.-884    	; 0x19b2 <readReg>
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	88 0f       	add	r24, r24
    1d2a:	08 95       	ret
    1d2c:	61 30       	cpi	r22, 0x01	; 1
    1d2e:	29 f4       	brne	.+10     	; 0x1d3a <getVcselPulsePeriod+0x1c>
    1d30:	60 e7       	ldi	r22, 0x70	; 112
    1d32:	3f de       	rcall	.-898    	; 0x19b2 <readReg>
    1d34:	8f 5f       	subi	r24, 0xFF	; 255
    1d36:	88 0f       	add	r24, r24
    1d38:	08 95       	ret
    1d3a:	8f ef       	ldi	r24, 0xFF	; 255
    1d3c:	08 95       	ret

00001d3e <getSequenceStepTimeouts>:
    1d3e:	ef 92       	push	r14
    1d40:	ff 92       	push	r15
    1d42:	0f 93       	push	r16
    1d44:	1f 93       	push	r17
    1d46:	cf 93       	push	r28
    1d48:	df 93       	push	r29
    1d4a:	8c 01       	movw	r16, r24
    1d4c:	7b 01       	movw	r14, r22
    1d4e:	ea 01       	movw	r28, r20
    1d50:	60 e0       	ldi	r22, 0x00	; 0
    1d52:	e5 df       	rcall	.-54     	; 0x1d1e <getVcselPulsePeriod>
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	99 83       	std	Y+1, r25	; 0x01
    1d58:	88 83       	st	Y, r24
    1d5a:	66 e4       	ldi	r22, 0x46	; 70
    1d5c:	c8 01       	movw	r24, r16
    1d5e:	29 de       	rcall	.-942    	; 0x19b2 <readReg>
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	01 96       	adiw	r24, 0x01	; 1
    1d64:	9d 83       	std	Y+5, r25	; 0x05
    1d66:	8c 83       	std	Y+4, r24	; 0x04
    1d68:	68 81       	ld	r22, Y
    1d6a:	8d df       	rcall	.-230    	; 0x1c86 <timeoutMclksToMicroseconds>
    1d6c:	6a 87       	std	Y+10, r22	; 0x0a
    1d6e:	7b 87       	std	Y+11, r23	; 0x0b
    1d70:	8c 87       	std	Y+12, r24	; 0x0c
    1d72:	9d 87       	std	Y+13, r25	; 0x0d
    1d74:	61 e5       	ldi	r22, 0x51	; 81
    1d76:	c8 01       	movw	r24, r16
    1d78:	37 de       	rcall	.-914    	; 0x19e8 <readReg16Bit>
    1d7a:	7a df       	rcall	.-268    	; 0x1c70 <decodeTimeout>
    1d7c:	9f 83       	std	Y+7, r25	; 0x07
    1d7e:	8e 83       	std	Y+6, r24	; 0x06
    1d80:	68 81       	ld	r22, Y
    1d82:	81 df       	rcall	.-254    	; 0x1c86 <timeoutMclksToMicroseconds>
    1d84:	6e 87       	std	Y+14, r22	; 0x0e
    1d86:	7f 87       	std	Y+15, r23	; 0x0f
    1d88:	88 8b       	std	Y+16, r24	; 0x10
    1d8a:	99 8b       	std	Y+17, r25	; 0x11
    1d8c:	61 e0       	ldi	r22, 0x01	; 1
    1d8e:	c8 01       	movw	r24, r16
    1d90:	c6 df       	rcall	.-116    	; 0x1d1e <getVcselPulsePeriod>
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	9b 83       	std	Y+3, r25	; 0x03
    1d96:	8a 83       	std	Y+2, r24	; 0x02
    1d98:	61 e7       	ldi	r22, 0x71	; 113
    1d9a:	c8 01       	movw	r24, r16
    1d9c:	25 de       	rcall	.-950    	; 0x19e8 <readReg16Bit>
    1d9e:	68 df       	rcall	.-304    	; 0x1c70 <decodeTimeout>
    1da0:	99 87       	std	Y+9, r25	; 0x09
    1da2:	88 87       	std	Y+8, r24	; 0x08
    1da4:	f7 01       	movw	r30, r14
    1da6:	23 81       	ldd	r18, Z+3	; 0x03
    1da8:	22 23       	and	r18, r18
    1daa:	31 f0       	breq	.+12     	; 0x1db8 <getSequenceStepTimeouts+0x7a>
    1dac:	2e 81       	ldd	r18, Y+6	; 0x06
    1dae:	3f 81       	ldd	r19, Y+7	; 0x07
    1db0:	82 1b       	sub	r24, r18
    1db2:	93 0b       	sbc	r25, r19
    1db4:	99 87       	std	Y+9, r25	; 0x09
    1db6:	88 87       	std	Y+8, r24	; 0x08
    1db8:	6a 81       	ldd	r22, Y+2	; 0x02
    1dba:	88 85       	ldd	r24, Y+8	; 0x08
    1dbc:	99 85       	ldd	r25, Y+9	; 0x09
    1dbe:	63 df       	rcall	.-314    	; 0x1c86 <timeoutMclksToMicroseconds>
    1dc0:	6a 8b       	std	Y+18, r22	; 0x12
    1dc2:	7b 8b       	std	Y+19, r23	; 0x13
    1dc4:	8c 8b       	std	Y+20, r24	; 0x14
    1dc6:	9d 8b       	std	Y+21, r25	; 0x15
    1dc8:	df 91       	pop	r29
    1dca:	cf 91       	pop	r28
    1dcc:	1f 91       	pop	r17
    1dce:	0f 91       	pop	r16
    1dd0:	ff 90       	pop	r15
    1dd2:	ef 90       	pop	r14
    1dd4:	08 95       	ret

00001dd6 <timeoutMicrosecondsToMclks>:
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	4b 01       	movw	r8, r22
    1de8:	5c 01       	movw	r10, r24
    1dea:	a4 2f       	mov	r26, r20
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	3f e2       	ldi	r19, 0x2F	; 47
    1df2:	4a e3       	ldi	r20, 0x3A	; 58
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	3c d4       	rcall	.+2168   	; 0x2670 <__muluhisi3>
    1df8:	6b 01       	movw	r12, r22
    1dfa:	7c 01       	movw	r14, r24
    1dfc:	24 ef       	ldi	r18, 0xF4	; 244
    1dfe:	c2 0e       	add	r12, r18
    1e00:	21 e0       	ldi	r18, 0x01	; 1
    1e02:	d2 1e       	adc	r13, r18
    1e04:	e1 1c       	adc	r14, r1
    1e06:	f1 1c       	adc	r15, r1
    1e08:	a8 ee       	ldi	r26, 0xE8	; 232
    1e0a:	b3 e0       	ldi	r27, 0x03	; 3
    1e0c:	a5 01       	movw	r20, r10
    1e0e:	94 01       	movw	r18, r8
    1e10:	2f d4       	rcall	.+2142   	; 0x2670 <__muluhisi3>
    1e12:	4b 01       	movw	r8, r22
    1e14:	5c 01       	movw	r10, r24
    1e16:	c7 01       	movw	r24, r14
    1e18:	b6 01       	movw	r22, r12
    1e1a:	20 ed       	ldi	r18, 0xD0	; 208
    1e1c:	37 e0       	ldi	r19, 0x07	; 7
    1e1e:	40 e0       	ldi	r20, 0x00	; 0
    1e20:	50 e0       	ldi	r21, 0x00	; 0
    1e22:	ec d3       	rcall	.+2008   	; 0x25fc <__udivmodsi4>
    1e24:	82 0e       	add	r8, r18
    1e26:	93 1e       	adc	r9, r19
    1e28:	a4 1e       	adc	r10, r20
    1e2a:	b5 1e       	adc	r11, r21
    1e2c:	c7 01       	movw	r24, r14
    1e2e:	b6 01       	movw	r22, r12
    1e30:	28 ee       	ldi	r18, 0xE8	; 232
    1e32:	33 e0       	ldi	r19, 0x03	; 3
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	50 e0       	ldi	r21, 0x00	; 0
    1e38:	e1 d3       	rcall	.+1986   	; 0x25fc <__udivmodsi4>
    1e3a:	c5 01       	movw	r24, r10
    1e3c:	b4 01       	movw	r22, r8
    1e3e:	de d3       	rcall	.+1980   	; 0x25fc <__udivmodsi4>
    1e40:	ca 01       	movw	r24, r20
    1e42:	b9 01       	movw	r22, r18
    1e44:	ff 90       	pop	r15
    1e46:	ef 90       	pop	r14
    1e48:	df 90       	pop	r13
    1e4a:	cf 90       	pop	r12
    1e4c:	bf 90       	pop	r11
    1e4e:	af 90       	pop	r10
    1e50:	9f 90       	pop	r9
    1e52:	8f 90       	pop	r8
    1e54:	08 95       	ret

00001e56 <performSingleRefCalibration>:
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	ec 01       	movw	r28, r24
    1e5c:	46 2f       	mov	r20, r22
    1e5e:	41 60       	ori	r20, 0x01	; 1
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	53 dd       	rcall	.-1370   	; 0x190a <writeReg>
    1e64:	ce 01       	movw	r24, r28
    1e66:	21 dd       	rcall	.-1470   	; 0x18aa <startTimeout>
    1e68:	04 c0       	rjmp	.+8      	; 0x1e72 <performSingleRefCalibration+0x1c>
    1e6a:	ce 01       	movw	r24, r28
    1e6c:	2a dd       	rcall	.-1452   	; 0x18c2 <checkTimeoutExpired>
    1e6e:	81 11       	cpse	r24, r1
    1e70:	0f c0       	rjmp	.+30     	; 0x1e90 <performSingleRefCalibration+0x3a>
    1e72:	63 e1       	ldi	r22, 0x13	; 19
    1e74:	ce 01       	movw	r24, r28
    1e76:	9d dd       	rcall	.-1222   	; 0x19b2 <readReg>
    1e78:	87 70       	andi	r24, 0x07	; 7
    1e7a:	b9 f3       	breq	.-18     	; 0x1e6a <performSingleRefCalibration+0x14>
    1e7c:	41 e0       	ldi	r20, 0x01	; 1
    1e7e:	6b e0       	ldi	r22, 0x0B	; 11
    1e80:	ce 01       	movw	r24, r28
    1e82:	43 dd       	rcall	.-1402   	; 0x190a <writeReg>
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	60 e0       	ldi	r22, 0x00	; 0
    1e88:	ce 01       	movw	r24, r28
    1e8a:	3f dd       	rcall	.-1410   	; 0x190a <writeReg>
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	01 c0       	rjmp	.+2      	; 0x1e92 <performSingleRefCalibration+0x3c>
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	08 95       	ret

00001e98 <setMeasurementTimingBudget>:
    1e98:	8f 92       	push	r8
    1e9a:	9f 92       	push	r9
    1e9c:	af 92       	push	r10
    1e9e:	bf 92       	push	r11
    1ea0:	df 92       	push	r13
    1ea2:	ef 92       	push	r14
    1ea4:	ff 92       	push	r15
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	6b 97       	sbiw	r28, 0x1b	; 27
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	40 32       	cpi	r20, 0x20	; 32
    1ec0:	2e e4       	ldi	r18, 0x4E	; 78
    1ec2:	52 07       	cpc	r21, r18
    1ec4:	61 05       	cpc	r22, r1
    1ec6:	71 05       	cpc	r23, r1
    1ec8:	08 f4       	brcc	.+2      	; 0x1ecc <setMeasurementTimingBudget+0x34>
    1eca:	74 c0       	rjmp	.+232    	; 0x1fb4 <setMeasurementTimingBudget+0x11c>
    1ecc:	4a 01       	movw	r8, r20
    1ece:	5b 01       	movw	r10, r22
    1ed0:	7c 01       	movw	r14, r24
    1ed2:	be 01       	movw	r22, r28
    1ed4:	6f 5f       	subi	r22, 0xFF	; 255
    1ed6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed8:	83 de       	rcall	.-762    	; 0x1be0 <getSequenceStepEnables>
    1eda:	ae 01       	movw	r20, r28
    1edc:	4a 5f       	subi	r20, 0xFA	; 250
    1ede:	5f 4f       	sbci	r21, 0xFF	; 255
    1ee0:	be 01       	movw	r22, r28
    1ee2:	6f 5f       	subi	r22, 0xFF	; 255
    1ee4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee6:	c7 01       	movw	r24, r14
    1ee8:	2a df       	rcall	.-428    	; 0x1d3e <getSequenceStepTimeouts>
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	88 23       	and	r24, r24
    1eee:	49 f0       	breq	.+18     	; 0x1f02 <setMeasurementTimingBudget+0x6a>
    1ef0:	08 89       	ldd	r16, Y+16	; 0x10
    1ef2:	19 89       	ldd	r17, Y+17	; 0x11
    1ef4:	2a 89       	ldd	r18, Y+18	; 0x12
    1ef6:	3b 89       	ldd	r19, Y+19	; 0x13
    1ef8:	0a 5c       	subi	r16, 0xCA	; 202
    1efa:	14 4f       	sbci	r17, 0xF4	; 244
    1efc:	2f 4f       	sbci	r18, 0xFF	; 255
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	04 c0       	rjmp	.+8      	; 0x1f0a <setMeasurementTimingBudget+0x72>
    1f02:	08 ee       	ldi	r16, 0xE8	; 232
    1f04:	18 e0       	ldi	r17, 0x08	; 8
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	88 23       	and	r24, r24
    1f0e:	89 f0       	breq	.+34     	; 0x1f32 <setMeasurementTimingBudget+0x9a>
    1f10:	88 89       	ldd	r24, Y+16	; 0x10
    1f12:	99 89       	ldd	r25, Y+17	; 0x11
    1f14:	aa 89       	ldd	r26, Y+18	; 0x12
    1f16:	bb 89       	ldd	r27, Y+19	; 0x13
    1f18:	8e 54       	subi	r24, 0x4E	; 78
    1f1a:	9d 4f       	sbci	r25, 0xFD	; 253
    1f1c:	af 4f       	sbci	r26, 0xFF	; 255
    1f1e:	bf 4f       	sbci	r27, 0xFF	; 255
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	aa 1f       	adc	r26, r26
    1f26:	bb 1f       	adc	r27, r27
    1f28:	08 0f       	add	r16, r24
    1f2a:	19 1f       	adc	r17, r25
    1f2c:	2a 1f       	adc	r18, r26
    1f2e:	3b 1f       	adc	r19, r27
    1f30:	0f c0       	rjmp	.+30     	; 0x1f50 <setMeasurementTimingBudget+0xb8>
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	88 23       	and	r24, r24
    1f36:	61 f0       	breq	.+24     	; 0x1f50 <setMeasurementTimingBudget+0xb8>
    1f38:	88 89       	ldd	r24, Y+16	; 0x10
    1f3a:	99 89       	ldd	r25, Y+17	; 0x11
    1f3c:	aa 89       	ldd	r26, Y+18	; 0x12
    1f3e:	bb 89       	ldd	r27, Y+19	; 0x13
    1f40:	8c 56       	subi	r24, 0x6C	; 108
    1f42:	9d 4f       	sbci	r25, 0xFD	; 253
    1f44:	af 4f       	sbci	r26, 0xFF	; 255
    1f46:	bf 4f       	sbci	r27, 0xFF	; 255
    1f48:	08 0f       	add	r16, r24
    1f4a:	19 1f       	adc	r17, r25
    1f4c:	2a 1f       	adc	r18, r26
    1f4e:	3b 1f       	adc	r19, r27
    1f50:	dc 80       	ldd	r13, Y+4	; 0x04
    1f52:	dd 20       	and	r13, r13
    1f54:	61 f0       	breq	.+24     	; 0x1f6e <setMeasurementTimingBudget+0xd6>
    1f56:	8c 89       	ldd	r24, Y+20	; 0x14
    1f58:	9d 89       	ldd	r25, Y+21	; 0x15
    1f5a:	ae 89       	ldd	r26, Y+22	; 0x16
    1f5c:	bf 89       	ldd	r27, Y+23	; 0x17
    1f5e:	8c 56       	subi	r24, 0x6C	; 108
    1f60:	9d 4f       	sbci	r25, 0xFD	; 253
    1f62:	af 4f       	sbci	r26, 0xFF	; 255
    1f64:	bf 4f       	sbci	r27, 0xFF	; 255
    1f66:	08 0f       	add	r16, r24
    1f68:	19 1f       	adc	r17, r25
    1f6a:	2a 1f       	adc	r18, r26
    1f6c:	3b 1f       	adc	r19, r27
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	88 23       	and	r24, r24
    1f72:	11 f1       	breq	.+68     	; 0x1fb8 <setMeasurementTimingBudget+0x120>
    1f74:	0a 5d       	subi	r16, 0xDA	; 218
    1f76:	1d 4f       	sbci	r17, 0xFD	; 253
    1f78:	2f 4f       	sbci	r18, 0xFF	; 255
    1f7a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7c:	80 16       	cp	r8, r16
    1f7e:	91 06       	cpc	r9, r17
    1f80:	a2 06       	cpc	r10, r18
    1f82:	b3 06       	cpc	r11, r19
    1f84:	d8 f0       	brcs	.+54     	; 0x1fbc <setMeasurementTimingBudget+0x124>
    1f86:	c5 01       	movw	r24, r10
    1f88:	b4 01       	movw	r22, r8
    1f8a:	60 1b       	sub	r22, r16
    1f8c:	71 0b       	sbc	r23, r17
    1f8e:	82 0b       	sbc	r24, r18
    1f90:	93 0b       	sbc	r25, r19
    1f92:	48 85       	ldd	r20, Y+8	; 0x08
    1f94:	20 df       	rcall	.-448    	; 0x1dd6 <timeoutMicrosecondsToMclks>
    1f96:	9b 01       	movw	r18, r22
    1f98:	dd 20       	and	r13, r13
    1f9a:	21 f0       	breq	.+8      	; 0x1fa4 <setMeasurementTimingBudget+0x10c>
    1f9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1fa0:	26 0f       	add	r18, r22
    1fa2:	37 1f       	adc	r19, r23
    1fa4:	c9 01       	movw	r24, r18
    1fa6:	38 de       	rcall	.-912    	; 0x1c18 <encodeTimeout>
    1fa8:	ac 01       	movw	r20, r24
    1faa:	61 e7       	ldi	r22, 0x71	; 113
    1fac:	c7 01       	movw	r24, r14
    1fae:	c1 dc       	rcall	.-1662   	; 0x1932 <writeReg16Bit>
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	05 c0       	rjmp	.+10     	; 0x1fbe <setMeasurementTimingBudget+0x126>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	03 c0       	rjmp	.+6      	; 0x1fbe <setMeasurementTimingBudget+0x126>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	01 c0       	rjmp	.+2      	; 0x1fbe <setMeasurementTimingBudget+0x126>
    1fbc:	80 e0       	ldi	r24, 0x00	; 0
    1fbe:	6b 96       	adiw	r28, 0x1b	; 27
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	df 91       	pop	r29
    1fcc:	cf 91       	pop	r28
    1fce:	1f 91       	pop	r17
    1fd0:	0f 91       	pop	r16
    1fd2:	ff 90       	pop	r15
    1fd4:	ef 90       	pop	r14
    1fd6:	df 90       	pop	r13
    1fd8:	bf 90       	pop	r11
    1fda:	af 90       	pop	r10
    1fdc:	9f 90       	pop	r9
    1fde:	8f 90       	pop	r8
    1fe0:	08 95       	ret

00001fe2 <vl53l0x_init>:
    1fe2:	cf 93       	push	r28
    1fe4:	df 93       	push	r29
    1fe6:	ec 01       	movw	r28, r24
    1fe8:	80 e8       	ldi	r24, 0x80	; 128
    1fea:	9a e1       	ldi	r25, 0x1A	; 26
    1fec:	a6 e0       	ldi	r26, 0x06	; 6
    1fee:	b0 e0       	ldi	r27, 0x00	; 0
    1ff0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <s_i2cInterface>
    1ff4:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <s_i2cInterface+0x1>
    1ff8:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <s_i2cInterface+0x2>
    1ffc:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <s_i2cInterface+0x3>
    2000:	60 e8       	ldi	r22, 0x80	; 128
    2002:	7a e1       	ldi	r23, 0x1A	; 26
    2004:	86 e0       	ldi	r24, 0x06	; 6
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 f7 01 	call	0x3ee	; 0x3ee <i2c_init>
    200c:	0e 94 20 02 	call	0x440	; 0x440 <i2c_start>
    2010:	1a 82       	std	Y+2, r1	; 0x02
    2012:	19 82       	std	Y+1, r1	; 0x01
    2014:	1b 82       	std	Y+3, r1	; 0x03
    2016:	6c 81       	ldd	r22, Y+4	; 0x04
    2018:	7d 81       	ldd	r23, Y+5	; 0x05
    201a:	8e 81       	ldd	r24, Y+6	; 0x06
    201c:	9f 81       	ldd	r25, Y+7	; 0x07
    201e:	0e 94 45 01 	call	0x28a	; 0x28a <gpio_init>
    2022:	ce 01       	movw	r24, r28
    2024:	04 96       	adiw	r24, 0x04	; 4
    2026:	0e 94 78 01 	call	0x2f0	; 0x2f0 <gpio_setDirectionOutput>
    202a:	6c 81       	ldd	r22, Y+4	; 0x04
    202c:	7d 81       	ldd	r23, Y+5	; 0x05
    202e:	8e 81       	ldd	r24, Y+6	; 0x06
    2030:	9f 81       	ldd	r25, Y+7	; 0x07
    2032:	0e 94 81 01 	call	0x302	; 0x302 <gpio_out_set>
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	08 95       	ret

0000203c <vl53l0x_start>:
    203c:	0f 93       	push	r16
    203e:	1f 93       	push	r17
    2040:	cf 93       	push	r28
    2042:	df 93       	push	r29
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
    2048:	28 97       	sbiw	r28, 0x08	; 8
    204a:	0f b6       	in	r0, 0x3f	; 63
    204c:	f8 94       	cli
    204e:	de bf       	out	0x3e, r29	; 62
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	cd bf       	out	0x3d, r28	; 61
    2054:	8c 01       	movw	r16, r24
    2056:	69 e8       	ldi	r22, 0x89	; 137
    2058:	ac dc       	rcall	.-1704   	; 0x19b2 <readReg>
    205a:	48 2f       	mov	r20, r24
    205c:	41 60       	ori	r20, 0x01	; 1
    205e:	69 e8       	ldi	r22, 0x89	; 137
    2060:	c8 01       	movw	r24, r16
    2062:	53 dc       	rcall	.-1882   	; 0x190a <writeReg>
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	68 e8       	ldi	r22, 0x88	; 136
    2068:	c8 01       	movw	r24, r16
    206a:	4f dc       	rcall	.-1890   	; 0x190a <writeReg>
    206c:	41 e0       	ldi	r20, 0x01	; 1
    206e:	60 e8       	ldi	r22, 0x80	; 128
    2070:	c8 01       	movw	r24, r16
    2072:	4b dc       	rcall	.-1898   	; 0x190a <writeReg>
    2074:	41 e0       	ldi	r20, 0x01	; 1
    2076:	6f ef       	ldi	r22, 0xFF	; 255
    2078:	c8 01       	movw	r24, r16
    207a:	47 dc       	rcall	.-1906   	; 0x190a <writeReg>
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	c8 01       	movw	r24, r16
    2082:	43 dc       	rcall	.-1914   	; 0x190a <writeReg>
    2084:	61 e9       	ldi	r22, 0x91	; 145
    2086:	c8 01       	movw	r24, r16
    2088:	94 dc       	rcall	.-1752   	; 0x19b2 <readReg>
    208a:	f8 01       	movw	r30, r16
    208c:	82 87       	std	Z+10, r24	; 0x0a
    208e:	41 e0       	ldi	r20, 0x01	; 1
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	c8 01       	movw	r24, r16
    2094:	3a dc       	rcall	.-1932   	; 0x190a <writeReg>
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	6f ef       	ldi	r22, 0xFF	; 255
    209a:	c8 01       	movw	r24, r16
    209c:	36 dc       	rcall	.-1940   	; 0x190a <writeReg>
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	60 e8       	ldi	r22, 0x80	; 128
    20a2:	c8 01       	movw	r24, r16
    20a4:	32 dc       	rcall	.-1948   	; 0x190a <writeReg>
    20a6:	60 e6       	ldi	r22, 0x60	; 96
    20a8:	c8 01       	movw	r24, r16
    20aa:	83 dc       	rcall	.-1786   	; 0x19b2 <readReg>
    20ac:	48 2f       	mov	r20, r24
    20ae:	42 61       	ori	r20, 0x12	; 18
    20b0:	60 e6       	ldi	r22, 0x60	; 96
    20b2:	c8 01       	movw	r24, r16
    20b4:	2a dc       	rcall	.-1964   	; 0x190a <writeReg>
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	64 e4       	ldi	r22, 0x44	; 68
    20bc:	c8 01       	movw	r24, r16
    20be:	39 dc       	rcall	.-1934   	; 0x1932 <writeReg16Bit>
    20c0:	4f ef       	ldi	r20, 0xFF	; 255
    20c2:	61 e0       	ldi	r22, 0x01	; 1
    20c4:	c8 01       	movw	r24, r16
    20c6:	21 dc       	rcall	.-1982   	; 0x190a <writeReg>
    20c8:	ae 01       	movw	r20, r28
    20ca:	4e 5f       	subi	r20, 0xFE	; 254
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	be 01       	movw	r22, r28
    20d0:	6f 5f       	subi	r22, 0xFF	; 255
    20d2:	7f 4f       	sbci	r23, 0xFF	; 255
    20d4:	c8 01       	movw	r24, r16
    20d6:	0a dd       	rcall	.-1516   	; 0x1aec <getSpadInfo>
    20d8:	88 23       	and	r24, r24
    20da:	09 f4       	brne	.+2      	; 0x20de <vl53l0x_start+0xa2>
    20dc:	d2 c1       	rjmp	.+932    	; 0x2482 <vl53l0x_start+0x446>
    20de:	26 e0       	ldi	r18, 0x06	; 6
    20e0:	ae 01       	movw	r20, r28
    20e2:	4d 5f       	subi	r20, 0xFD	; 253
    20e4:	5f 4f       	sbci	r21, 0xFF	; 255
    20e6:	60 eb       	ldi	r22, 0xB0	; 176
    20e8:	c8 01       	movw	r24, r16
    20ea:	ca dc       	rcall	.-1644   	; 0x1a80 <readMulti>
    20ec:	41 e0       	ldi	r20, 0x01	; 1
    20ee:	6f ef       	ldi	r22, 0xFF	; 255
    20f0:	c8 01       	movw	r24, r16
    20f2:	0b dc       	rcall	.-2026   	; 0x190a <writeReg>
    20f4:	40 e0       	ldi	r20, 0x00	; 0
    20f6:	6f e4       	ldi	r22, 0x4F	; 79
    20f8:	c8 01       	movw	r24, r16
    20fa:	07 dc       	rcall	.-2034   	; 0x190a <writeReg>
    20fc:	4c e2       	ldi	r20, 0x2C	; 44
    20fe:	6e e4       	ldi	r22, 0x4E	; 78
    2100:	c8 01       	movw	r24, r16
    2102:	03 dc       	rcall	.-2042   	; 0x190a <writeReg>
    2104:	40 e0       	ldi	r20, 0x00	; 0
    2106:	6f ef       	ldi	r22, 0xFF	; 255
    2108:	c8 01       	movw	r24, r16
    210a:	ff db       	rcall	.-2050   	; 0x190a <writeReg>
    210c:	44 eb       	ldi	r20, 0xB4	; 180
    210e:	66 eb       	ldi	r22, 0xB6	; 182
    2110:	c8 01       	movw	r24, r16
    2112:	fb db       	rcall	.-2058   	; 0x190a <writeReg>
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	81 11       	cpse	r24, r1
    2118:	02 c0       	rjmp	.+4      	; 0x211e <vl53l0x_start+0xe2>
    211a:	60 e0       	ldi	r22, 0x00	; 0
    211c:	01 c0       	rjmp	.+2      	; 0x2120 <vl53l0x_start+0xe4>
    211e:	6c e0       	ldi	r22, 0x0C	; 12
    2120:	a9 81       	ldd	r26, Y+1	; 0x01
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	70 e0       	ldi	r23, 0x00	; 0
    2126:	41 e0       	ldi	r20, 0x01	; 1
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	86 17       	cp	r24, r22
    212c:	10 f0       	brcs	.+4      	; 0x2132 <vl53l0x_start+0xf6>
    212e:	a7 13       	cpse	r26, r23
    2130:	18 c0       	rjmp	.+48     	; 0x2162 <vl53l0x_start+0x126>
    2132:	98 2f       	mov	r25, r24
    2134:	96 95       	lsr	r25
    2136:	96 95       	lsr	r25
    2138:	96 95       	lsr	r25
    213a:	e3 e0       	ldi	r30, 0x03	; 3
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	ec 0f       	add	r30, r28
    2140:	fd 1f       	adc	r31, r29
    2142:	e9 0f       	add	r30, r25
    2144:	f1 1d       	adc	r31, r1
    2146:	98 2f       	mov	r25, r24
    2148:	97 70       	andi	r25, 0x07	; 7
    214a:	9a 01       	movw	r18, r20
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <vl53l0x_start+0x116>
    214e:	22 0f       	add	r18, r18
    2150:	33 1f       	adc	r19, r19
    2152:	9a 95       	dec	r25
    2154:	e2 f7       	brpl	.-8      	; 0x214e <vl53l0x_start+0x112>
    2156:	92 2f       	mov	r25, r18
    2158:	90 95       	com	r25
    215a:	20 81       	ld	r18, Z
    215c:	92 23       	and	r25, r18
    215e:	90 83       	st	Z, r25
    2160:	15 c0       	rjmp	.+42     	; 0x218c <vl53l0x_start+0x150>
    2162:	98 2f       	mov	r25, r24
    2164:	96 95       	lsr	r25
    2166:	96 95       	lsr	r25
    2168:	96 95       	lsr	r25
    216a:	e3 e0       	ldi	r30, 0x03	; 3
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	ec 0f       	add	r30, r28
    2170:	fd 1f       	adc	r31, r29
    2172:	e9 0f       	add	r30, r25
    2174:	f1 1d       	adc	r31, r1
    2176:	20 81       	ld	r18, Z
    2178:	30 e0       	ldi	r19, 0x00	; 0
    217a:	98 2f       	mov	r25, r24
    217c:	97 70       	andi	r25, 0x07	; 7
    217e:	02 c0       	rjmp	.+4      	; 0x2184 <vl53l0x_start+0x148>
    2180:	35 95       	asr	r19
    2182:	27 95       	ror	r18
    2184:	9a 95       	dec	r25
    2186:	e2 f7       	brpl	.-8      	; 0x2180 <vl53l0x_start+0x144>
    2188:	20 fd       	sbrc	r18, 0
    218a:	7f 5f       	subi	r23, 0xFF	; 255
    218c:	8f 5f       	subi	r24, 0xFF	; 255
    218e:	80 33       	cpi	r24, 0x30	; 48
    2190:	61 f6       	brne	.-104    	; 0x212a <vl53l0x_start+0xee>
    2192:	26 e0       	ldi	r18, 0x06	; 6
    2194:	ae 01       	movw	r20, r28
    2196:	4d 5f       	subi	r20, 0xFD	; 253
    2198:	5f 4f       	sbci	r21, 0xFF	; 255
    219a:	60 eb       	ldi	r22, 0xB0	; 176
    219c:	c8 01       	movw	r24, r16
    219e:	45 dc       	rcall	.-1910   	; 0x1a2a <writeMulti>
    21a0:	41 e0       	ldi	r20, 0x01	; 1
    21a2:	6f ef       	ldi	r22, 0xFF	; 255
    21a4:	c8 01       	movw	r24, r16
    21a6:	b1 db       	rcall	.-2206   	; 0x190a <writeReg>
    21a8:	40 e0       	ldi	r20, 0x00	; 0
    21aa:	60 e0       	ldi	r22, 0x00	; 0
    21ac:	c8 01       	movw	r24, r16
    21ae:	ad db       	rcall	.-2214   	; 0x190a <writeReg>
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	6f ef       	ldi	r22, 0xFF	; 255
    21b4:	c8 01       	movw	r24, r16
    21b6:	a9 db       	rcall	.-2222   	; 0x190a <writeReg>
    21b8:	40 e0       	ldi	r20, 0x00	; 0
    21ba:	69 e0       	ldi	r22, 0x09	; 9
    21bc:	c8 01       	movw	r24, r16
    21be:	a5 db       	rcall	.-2230   	; 0x190a <writeReg>
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	60 e1       	ldi	r22, 0x10	; 16
    21c4:	c8 01       	movw	r24, r16
    21c6:	a1 db       	rcall	.-2238   	; 0x190a <writeReg>
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	61 e1       	ldi	r22, 0x11	; 17
    21cc:	c8 01       	movw	r24, r16
    21ce:	9d db       	rcall	.-2246   	; 0x190a <writeReg>
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	64 e2       	ldi	r22, 0x24	; 36
    21d4:	c8 01       	movw	r24, r16
    21d6:	99 db       	rcall	.-2254   	; 0x190a <writeReg>
    21d8:	4f ef       	ldi	r20, 0xFF	; 255
    21da:	65 e2       	ldi	r22, 0x25	; 37
    21dc:	c8 01       	movw	r24, r16
    21de:	95 db       	rcall	.-2262   	; 0x190a <writeReg>
    21e0:	40 e0       	ldi	r20, 0x00	; 0
    21e2:	65 e7       	ldi	r22, 0x75	; 117
    21e4:	c8 01       	movw	r24, r16
    21e6:	91 db       	rcall	.-2270   	; 0x190a <writeReg>
    21e8:	41 e0       	ldi	r20, 0x01	; 1
    21ea:	6f ef       	ldi	r22, 0xFF	; 255
    21ec:	c8 01       	movw	r24, r16
    21ee:	8d db       	rcall	.-2278   	; 0x190a <writeReg>
    21f0:	4c e2       	ldi	r20, 0x2C	; 44
    21f2:	6e e4       	ldi	r22, 0x4E	; 78
    21f4:	c8 01       	movw	r24, r16
    21f6:	89 db       	rcall	.-2286   	; 0x190a <writeReg>
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	68 e4       	ldi	r22, 0x48	; 72
    21fc:	c8 01       	movw	r24, r16
    21fe:	85 db       	rcall	.-2294   	; 0x190a <writeReg>
    2200:	40 e2       	ldi	r20, 0x20	; 32
    2202:	60 e3       	ldi	r22, 0x30	; 48
    2204:	c8 01       	movw	r24, r16
    2206:	81 db       	rcall	.-2302   	; 0x190a <writeReg>
    2208:	40 e0       	ldi	r20, 0x00	; 0
    220a:	6f ef       	ldi	r22, 0xFF	; 255
    220c:	c8 01       	movw	r24, r16
    220e:	7d db       	rcall	.-2310   	; 0x190a <writeReg>
    2210:	49 e0       	ldi	r20, 0x09	; 9
    2212:	60 e3       	ldi	r22, 0x30	; 48
    2214:	c8 01       	movw	r24, r16
    2216:	79 db       	rcall	.-2318   	; 0x190a <writeReg>
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	64 e5       	ldi	r22, 0x54	; 84
    221c:	c8 01       	movw	r24, r16
    221e:	75 db       	rcall	.-2326   	; 0x190a <writeReg>
    2220:	44 e0       	ldi	r20, 0x04	; 4
    2222:	61 e3       	ldi	r22, 0x31	; 49
    2224:	c8 01       	movw	r24, r16
    2226:	71 db       	rcall	.-2334   	; 0x190a <writeReg>
    2228:	43 e0       	ldi	r20, 0x03	; 3
    222a:	62 e3       	ldi	r22, 0x32	; 50
    222c:	c8 01       	movw	r24, r16
    222e:	6d db       	rcall	.-2342   	; 0x190a <writeReg>
    2230:	43 e8       	ldi	r20, 0x83	; 131
    2232:	60 e4       	ldi	r22, 0x40	; 64
    2234:	c8 01       	movw	r24, r16
    2236:	69 db       	rcall	.-2350   	; 0x190a <writeReg>
    2238:	45 e2       	ldi	r20, 0x25	; 37
    223a:	66 e4       	ldi	r22, 0x46	; 70
    223c:	c8 01       	movw	r24, r16
    223e:	65 db       	rcall	.-2358   	; 0x190a <writeReg>
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	60 e6       	ldi	r22, 0x60	; 96
    2244:	c8 01       	movw	r24, r16
    2246:	61 db       	rcall	.-2366   	; 0x190a <writeReg>
    2248:	40 e0       	ldi	r20, 0x00	; 0
    224a:	67 e2       	ldi	r22, 0x27	; 39
    224c:	c8 01       	movw	r24, r16
    224e:	5d db       	rcall	.-2374   	; 0x190a <writeReg>
    2250:	46 e0       	ldi	r20, 0x06	; 6
    2252:	60 e5       	ldi	r22, 0x50	; 80
    2254:	c8 01       	movw	r24, r16
    2256:	59 db       	rcall	.-2382   	; 0x190a <writeReg>
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	61 e5       	ldi	r22, 0x51	; 81
    225c:	c8 01       	movw	r24, r16
    225e:	55 db       	rcall	.-2390   	; 0x190a <writeReg>
    2260:	46 e9       	ldi	r20, 0x96	; 150
    2262:	62 e5       	ldi	r22, 0x52	; 82
    2264:	c8 01       	movw	r24, r16
    2266:	51 db       	rcall	.-2398   	; 0x190a <writeReg>
    2268:	48 e0       	ldi	r20, 0x08	; 8
    226a:	66 e5       	ldi	r22, 0x56	; 86
    226c:	c8 01       	movw	r24, r16
    226e:	4d db       	rcall	.-2406   	; 0x190a <writeReg>
    2270:	40 e3       	ldi	r20, 0x30	; 48
    2272:	67 e5       	ldi	r22, 0x57	; 87
    2274:	c8 01       	movw	r24, r16
    2276:	49 db       	rcall	.-2414   	; 0x190a <writeReg>
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	61 e6       	ldi	r22, 0x61	; 97
    227c:	c8 01       	movw	r24, r16
    227e:	45 db       	rcall	.-2422   	; 0x190a <writeReg>
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	62 e6       	ldi	r22, 0x62	; 98
    2284:	c8 01       	movw	r24, r16
    2286:	41 db       	rcall	.-2430   	; 0x190a <writeReg>
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	64 e6       	ldi	r22, 0x64	; 100
    228c:	c8 01       	movw	r24, r16
    228e:	3d db       	rcall	.-2438   	; 0x190a <writeReg>
    2290:	40 e0       	ldi	r20, 0x00	; 0
    2292:	65 e6       	ldi	r22, 0x65	; 101
    2294:	c8 01       	movw	r24, r16
    2296:	39 db       	rcall	.-2446   	; 0x190a <writeReg>
    2298:	40 ea       	ldi	r20, 0xA0	; 160
    229a:	66 e6       	ldi	r22, 0x66	; 102
    229c:	c8 01       	movw	r24, r16
    229e:	35 db       	rcall	.-2454   	; 0x190a <writeReg>
    22a0:	41 e0       	ldi	r20, 0x01	; 1
    22a2:	6f ef       	ldi	r22, 0xFF	; 255
    22a4:	c8 01       	movw	r24, r16
    22a6:	31 db       	rcall	.-2462   	; 0x190a <writeReg>
    22a8:	42 e3       	ldi	r20, 0x32	; 50
    22aa:	62 e2       	ldi	r22, 0x22	; 34
    22ac:	c8 01       	movw	r24, r16
    22ae:	2d db       	rcall	.-2470   	; 0x190a <writeReg>
    22b0:	44 e1       	ldi	r20, 0x14	; 20
    22b2:	67 e4       	ldi	r22, 0x47	; 71
    22b4:	c8 01       	movw	r24, r16
    22b6:	29 db       	rcall	.-2478   	; 0x190a <writeReg>
    22b8:	4f ef       	ldi	r20, 0xFF	; 255
    22ba:	69 e4       	ldi	r22, 0x49	; 73
    22bc:	c8 01       	movw	r24, r16
    22be:	25 db       	rcall	.-2486   	; 0x190a <writeReg>
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	6a e4       	ldi	r22, 0x4A	; 74
    22c4:	c8 01       	movw	r24, r16
    22c6:	21 db       	rcall	.-2494   	; 0x190a <writeReg>
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	6f ef       	ldi	r22, 0xFF	; 255
    22cc:	c8 01       	movw	r24, r16
    22ce:	1d db       	rcall	.-2502   	; 0x190a <writeReg>
    22d0:	4a e0       	ldi	r20, 0x0A	; 10
    22d2:	6a e7       	ldi	r22, 0x7A	; 122
    22d4:	c8 01       	movw	r24, r16
    22d6:	19 db       	rcall	.-2510   	; 0x190a <writeReg>
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	6b e7       	ldi	r22, 0x7B	; 123
    22dc:	c8 01       	movw	r24, r16
    22de:	15 db       	rcall	.-2518   	; 0x190a <writeReg>
    22e0:	41 e2       	ldi	r20, 0x21	; 33
    22e2:	68 e7       	ldi	r22, 0x78	; 120
    22e4:	c8 01       	movw	r24, r16
    22e6:	11 db       	rcall	.-2526   	; 0x190a <writeReg>
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	6f ef       	ldi	r22, 0xFF	; 255
    22ec:	c8 01       	movw	r24, r16
    22ee:	0d db       	rcall	.-2534   	; 0x190a <writeReg>
    22f0:	44 e3       	ldi	r20, 0x34	; 52
    22f2:	63 e2       	ldi	r22, 0x23	; 35
    22f4:	c8 01       	movw	r24, r16
    22f6:	09 db       	rcall	.-2542   	; 0x190a <writeReg>
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	62 e4       	ldi	r22, 0x42	; 66
    22fc:	c8 01       	movw	r24, r16
    22fe:	05 db       	rcall	.-2550   	; 0x190a <writeReg>
    2300:	4f ef       	ldi	r20, 0xFF	; 255
    2302:	64 e4       	ldi	r22, 0x44	; 68
    2304:	c8 01       	movw	r24, r16
    2306:	01 db       	rcall	.-2558   	; 0x190a <writeReg>
    2308:	46 e2       	ldi	r20, 0x26	; 38
    230a:	65 e4       	ldi	r22, 0x45	; 69
    230c:	c8 01       	movw	r24, r16
    230e:	fd da       	rcall	.-2566   	; 0x190a <writeReg>
    2310:	45 e0       	ldi	r20, 0x05	; 5
    2312:	66 e4       	ldi	r22, 0x46	; 70
    2314:	c8 01       	movw	r24, r16
    2316:	f9 da       	rcall	.-2574   	; 0x190a <writeReg>
    2318:	40 e4       	ldi	r20, 0x40	; 64
    231a:	60 e4       	ldi	r22, 0x40	; 64
    231c:	c8 01       	movw	r24, r16
    231e:	f5 da       	rcall	.-2582   	; 0x190a <writeReg>
    2320:	46 e0       	ldi	r20, 0x06	; 6
    2322:	6e e0       	ldi	r22, 0x0E	; 14
    2324:	c8 01       	movw	r24, r16
    2326:	f1 da       	rcall	.-2590   	; 0x190a <writeReg>
    2328:	4a e1       	ldi	r20, 0x1A	; 26
    232a:	60 e2       	ldi	r22, 0x20	; 32
    232c:	c8 01       	movw	r24, r16
    232e:	ed da       	rcall	.-2598   	; 0x190a <writeReg>
    2330:	40 e4       	ldi	r20, 0x40	; 64
    2332:	63 e4       	ldi	r22, 0x43	; 67
    2334:	c8 01       	movw	r24, r16
    2336:	e9 da       	rcall	.-2606   	; 0x190a <writeReg>
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	6f ef       	ldi	r22, 0xFF	; 255
    233c:	c8 01       	movw	r24, r16
    233e:	e5 da       	rcall	.-2614   	; 0x190a <writeReg>
    2340:	43 e0       	ldi	r20, 0x03	; 3
    2342:	64 e3       	ldi	r22, 0x34	; 52
    2344:	c8 01       	movw	r24, r16
    2346:	e1 da       	rcall	.-2622   	; 0x190a <writeReg>
    2348:	44 e4       	ldi	r20, 0x44	; 68
    234a:	65 e3       	ldi	r22, 0x35	; 53
    234c:	c8 01       	movw	r24, r16
    234e:	dd da       	rcall	.-2630   	; 0x190a <writeReg>
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	6f ef       	ldi	r22, 0xFF	; 255
    2354:	c8 01       	movw	r24, r16
    2356:	d9 da       	rcall	.-2638   	; 0x190a <writeReg>
    2358:	44 e0       	ldi	r20, 0x04	; 4
    235a:	61 e3       	ldi	r22, 0x31	; 49
    235c:	c8 01       	movw	r24, r16
    235e:	d5 da       	rcall	.-2646   	; 0x190a <writeReg>
    2360:	49 e0       	ldi	r20, 0x09	; 9
    2362:	6b e4       	ldi	r22, 0x4B	; 75
    2364:	c8 01       	movw	r24, r16
    2366:	d1 da       	rcall	.-2654   	; 0x190a <writeReg>
    2368:	45 e0       	ldi	r20, 0x05	; 5
    236a:	6c e4       	ldi	r22, 0x4C	; 76
    236c:	c8 01       	movw	r24, r16
    236e:	cd da       	rcall	.-2662   	; 0x190a <writeReg>
    2370:	44 e0       	ldi	r20, 0x04	; 4
    2372:	6d e4       	ldi	r22, 0x4D	; 77
    2374:	c8 01       	movw	r24, r16
    2376:	c9 da       	rcall	.-2670   	; 0x190a <writeReg>
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	6f ef       	ldi	r22, 0xFF	; 255
    237c:	c8 01       	movw	r24, r16
    237e:	c5 da       	rcall	.-2678   	; 0x190a <writeReg>
    2380:	40 e0       	ldi	r20, 0x00	; 0
    2382:	64 e4       	ldi	r22, 0x44	; 68
    2384:	c8 01       	movw	r24, r16
    2386:	c1 da       	rcall	.-2686   	; 0x190a <writeReg>
    2388:	40 e2       	ldi	r20, 0x20	; 32
    238a:	65 e4       	ldi	r22, 0x45	; 69
    238c:	c8 01       	movw	r24, r16
    238e:	bd da       	rcall	.-2694   	; 0x190a <writeReg>
    2390:	48 e0       	ldi	r20, 0x08	; 8
    2392:	67 e4       	ldi	r22, 0x47	; 71
    2394:	c8 01       	movw	r24, r16
    2396:	b9 da       	rcall	.-2702   	; 0x190a <writeReg>
    2398:	48 e2       	ldi	r20, 0x28	; 40
    239a:	68 e4       	ldi	r22, 0x48	; 72
    239c:	c8 01       	movw	r24, r16
    239e:	b5 da       	rcall	.-2710   	; 0x190a <writeReg>
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	67 e6       	ldi	r22, 0x67	; 103
    23a4:	c8 01       	movw	r24, r16
    23a6:	b1 da       	rcall	.-2718   	; 0x190a <writeReg>
    23a8:	44 e0       	ldi	r20, 0x04	; 4
    23aa:	60 e7       	ldi	r22, 0x70	; 112
    23ac:	c8 01       	movw	r24, r16
    23ae:	ad da       	rcall	.-2726   	; 0x190a <writeReg>
    23b0:	41 e0       	ldi	r20, 0x01	; 1
    23b2:	61 e7       	ldi	r22, 0x71	; 113
    23b4:	c8 01       	movw	r24, r16
    23b6:	a9 da       	rcall	.-2734   	; 0x190a <writeReg>
    23b8:	4e ef       	ldi	r20, 0xFE	; 254
    23ba:	62 e7       	ldi	r22, 0x72	; 114
    23bc:	c8 01       	movw	r24, r16
    23be:	a5 da       	rcall	.-2742   	; 0x190a <writeReg>
    23c0:	40 e0       	ldi	r20, 0x00	; 0
    23c2:	66 e7       	ldi	r22, 0x76	; 118
    23c4:	c8 01       	movw	r24, r16
    23c6:	a1 da       	rcall	.-2750   	; 0x190a <writeReg>
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	67 e7       	ldi	r22, 0x77	; 119
    23cc:	c8 01       	movw	r24, r16
    23ce:	9d da       	rcall	.-2758   	; 0x190a <writeReg>
    23d0:	41 e0       	ldi	r20, 0x01	; 1
    23d2:	6f ef       	ldi	r22, 0xFF	; 255
    23d4:	c8 01       	movw	r24, r16
    23d6:	99 da       	rcall	.-2766   	; 0x190a <writeReg>
    23d8:	41 e0       	ldi	r20, 0x01	; 1
    23da:	6d e0       	ldi	r22, 0x0D	; 13
    23dc:	c8 01       	movw	r24, r16
    23de:	95 da       	rcall	.-2774   	; 0x190a <writeReg>
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	6f ef       	ldi	r22, 0xFF	; 255
    23e4:	c8 01       	movw	r24, r16
    23e6:	91 da       	rcall	.-2782   	; 0x190a <writeReg>
    23e8:	41 e0       	ldi	r20, 0x01	; 1
    23ea:	60 e8       	ldi	r22, 0x80	; 128
    23ec:	c8 01       	movw	r24, r16
    23ee:	8d da       	rcall	.-2790   	; 0x190a <writeReg>
    23f0:	48 ef       	ldi	r20, 0xF8	; 248
    23f2:	61 e0       	ldi	r22, 0x01	; 1
    23f4:	c8 01       	movw	r24, r16
    23f6:	89 da       	rcall	.-2798   	; 0x190a <writeReg>
    23f8:	41 e0       	ldi	r20, 0x01	; 1
    23fa:	6f ef       	ldi	r22, 0xFF	; 255
    23fc:	c8 01       	movw	r24, r16
    23fe:	85 da       	rcall	.-2806   	; 0x190a <writeReg>
    2400:	41 e0       	ldi	r20, 0x01	; 1
    2402:	6e e8       	ldi	r22, 0x8E	; 142
    2404:	c8 01       	movw	r24, r16
    2406:	81 da       	rcall	.-2814   	; 0x190a <writeReg>
    2408:	41 e0       	ldi	r20, 0x01	; 1
    240a:	60 e0       	ldi	r22, 0x00	; 0
    240c:	c8 01       	movw	r24, r16
    240e:	7d da       	rcall	.-2822   	; 0x190a <writeReg>
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	6f ef       	ldi	r22, 0xFF	; 255
    2414:	c8 01       	movw	r24, r16
    2416:	79 da       	rcall	.-2830   	; 0x190a <writeReg>
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	60 e8       	ldi	r22, 0x80	; 128
    241c:	c8 01       	movw	r24, r16
    241e:	75 da       	rcall	.-2838   	; 0x190a <writeReg>
    2420:	44 e0       	ldi	r20, 0x04	; 4
    2422:	6a e0       	ldi	r22, 0x0A	; 10
    2424:	c8 01       	movw	r24, r16
    2426:	71 da       	rcall	.-2846   	; 0x190a <writeReg>
    2428:	64 e8       	ldi	r22, 0x84	; 132
    242a:	c8 01       	movw	r24, r16
    242c:	c2 da       	rcall	.-2684   	; 0x19b2 <readReg>
    242e:	48 2f       	mov	r20, r24
    2430:	4f 7e       	andi	r20, 0xEF	; 239
    2432:	64 e8       	ldi	r22, 0x84	; 132
    2434:	c8 01       	movw	r24, r16
    2436:	69 da       	rcall	.-2862   	; 0x190a <writeReg>
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	6b e0       	ldi	r22, 0x0B	; 11
    243c:	c8 01       	movw	r24, r16
    243e:	65 da       	rcall	.-2870   	; 0x190a <writeReg>
    2440:	48 ee       	ldi	r20, 0xE8	; 232
    2442:	61 e0       	ldi	r22, 0x01	; 1
    2444:	c8 01       	movw	r24, r16
    2446:	61 da       	rcall	.-2878   	; 0x190a <writeReg>
    2448:	4e e1       	ldi	r20, 0x1E	; 30
    244a:	50 e0       	ldi	r21, 0x00	; 0
    244c:	60 e0       	ldi	r22, 0x00	; 0
    244e:	70 e0       	ldi	r23, 0x00	; 0
    2450:	c8 01       	movw	r24, r16
    2452:	22 dd       	rcall	.-1468   	; 0x1e98 <setMeasurementTimingBudget>
    2454:	41 e0       	ldi	r20, 0x01	; 1
    2456:	61 e0       	ldi	r22, 0x01	; 1
    2458:	c8 01       	movw	r24, r16
    245a:	57 da       	rcall	.-2898   	; 0x190a <writeReg>
    245c:	60 e4       	ldi	r22, 0x40	; 64
    245e:	c8 01       	movw	r24, r16
    2460:	fa dc       	rcall	.-1548   	; 0x1e56 <performSingleRefCalibration>
    2462:	88 23       	and	r24, r24
    2464:	71 f0       	breq	.+28     	; 0x2482 <vl53l0x_start+0x446>
    2466:	42 e0       	ldi	r20, 0x02	; 2
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	c8 01       	movw	r24, r16
    246c:	4e da       	rcall	.-2916   	; 0x190a <writeReg>
    246e:	60 e0       	ldi	r22, 0x00	; 0
    2470:	c8 01       	movw	r24, r16
    2472:	f1 dc       	rcall	.-1566   	; 0x1e56 <performSingleRefCalibration>
    2474:	88 23       	and	r24, r24
    2476:	29 f0       	breq	.+10     	; 0x2482 <vl53l0x_start+0x446>
    2478:	48 ee       	ldi	r20, 0xE8	; 232
    247a:	61 e0       	ldi	r22, 0x01	; 1
    247c:	c8 01       	movw	r24, r16
    247e:	45 da       	rcall	.-2934   	; 0x190a <writeReg>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	28 96       	adiw	r28, 0x08	; 8
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	df 91       	pop	r29
    2490:	cf 91       	pop	r28
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	08 95       	ret

00002498 <vl53l0x_setMode>:
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	ec 01       	movw	r28, r24
    249e:	61 30       	cpi	r22, 0x01	; 1
    24a0:	89 f0       	breq	.+34     	; 0x24c4 <vl53l0x_setMode+0x2c>
    24a2:	28 f0       	brcs	.+10     	; 0x24ae <vl53l0x_setMode+0x16>
    24a4:	62 30       	cpi	r22, 0x02	; 2
    24a6:	c9 f0       	breq	.+50     	; 0x24da <vl53l0x_setMode+0x42>
    24a8:	63 30       	cpi	r22, 0x03	; 3
    24aa:	11 f1       	breq	.+68     	; 0x24f0 <vl53l0x_setMode+0x58>
    24ac:	2c c0       	rjmp	.+88     	; 0x2506 <vl53l0x_setMode+0x6e>
    24ae:	40 e2       	ldi	r20, 0x20	; 32
    24b0:	50 e0       	ldi	r21, 0x00	; 0
    24b2:	64 e4       	ldi	r22, 0x44	; 68
    24b4:	3e da       	rcall	.-2948   	; 0x1932 <writeReg16Bit>
    24b6:	40 e3       	ldi	r20, 0x30	; 48
    24b8:	55 e7       	ldi	r21, 0x75	; 117
    24ba:	60 e0       	ldi	r22, 0x00	; 0
    24bc:	70 e0       	ldi	r23, 0x00	; 0
    24be:	ce 01       	movw	r24, r28
    24c0:	eb dc       	rcall	.-1578   	; 0x1e98 <setMeasurementTimingBudget>
    24c2:	22 c0       	rjmp	.+68     	; 0x2508 <vl53l0x_setMode+0x70>
    24c4:	40 e2       	ldi	r20, 0x20	; 32
    24c6:	50 e0       	ldi	r21, 0x00	; 0
    24c8:	64 e4       	ldi	r22, 0x44	; 68
    24ca:	33 da       	rcall	.-2970   	; 0x1932 <writeReg16Bit>
    24cc:	40 e4       	ldi	r20, 0x40	; 64
    24ce:	5d e0       	ldi	r21, 0x0D	; 13
    24d0:	63 e0       	ldi	r22, 0x03	; 3
    24d2:	70 e0       	ldi	r23, 0x00	; 0
    24d4:	ce 01       	movw	r24, r28
    24d6:	e0 dc       	rcall	.-1600   	; 0x1e98 <setMeasurementTimingBudget>
    24d8:	17 c0       	rjmp	.+46     	; 0x2508 <vl53l0x_setMode+0x70>
    24da:	4c e0       	ldi	r20, 0x0C	; 12
    24dc:	50 e0       	ldi	r21, 0x00	; 0
    24de:	64 e4       	ldi	r22, 0x44	; 68
    24e0:	28 da       	rcall	.-2992   	; 0x1932 <writeReg16Bit>
    24e2:	48 ee       	ldi	r20, 0xE8	; 232
    24e4:	50 e8       	ldi	r21, 0x80	; 128
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	ce 01       	movw	r24, r28
    24ec:	d5 dc       	rcall	.-1622   	; 0x1e98 <setMeasurementTimingBudget>
    24ee:	0c c0       	rjmp	.+24     	; 0x2508 <vl53l0x_setMode+0x70>
    24f0:	40 e2       	ldi	r20, 0x20	; 32
    24f2:	50 e0       	ldi	r21, 0x00	; 0
    24f4:	64 e4       	ldi	r22, 0x44	; 68
    24f6:	1d da       	rcall	.-3014   	; 0x1932 <writeReg16Bit>
    24f8:	40 e2       	ldi	r20, 0x20	; 32
    24fa:	5e e4       	ldi	r21, 0x4E	; 78
    24fc:	60 e0       	ldi	r22, 0x00	; 0
    24fe:	70 e0       	ldi	r23, 0x00	; 0
    2500:	ce 01       	movw	r24, r28
    2502:	ca dc       	rcall	.-1644   	; 0x1e98 <setMeasurementTimingBudget>
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <vl53l0x_setMode+0x70>
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	08 95       	ret

0000250e <vl53l0x_startContinuous>:
    250e:	cf 92       	push	r12
    2510:	df 92       	push	r13
    2512:	ef 92       	push	r14
    2514:	ff 92       	push	r15
    2516:	cf 93       	push	r28
    2518:	df 93       	push	r29
    251a:	ec 01       	movw	r28, r24
    251c:	6a 01       	movw	r12, r20
    251e:	7b 01       	movw	r14, r22
    2520:	41 e0       	ldi	r20, 0x01	; 1
    2522:	60 e8       	ldi	r22, 0x80	; 128
    2524:	f2 d9       	rcall	.-3100   	; 0x190a <writeReg>
    2526:	41 e0       	ldi	r20, 0x01	; 1
    2528:	6f ef       	ldi	r22, 0xFF	; 255
    252a:	ce 01       	movw	r24, r28
    252c:	ee d9       	rcall	.-3108   	; 0x190a <writeReg>
    252e:	40 e0       	ldi	r20, 0x00	; 0
    2530:	60 e0       	ldi	r22, 0x00	; 0
    2532:	ce 01       	movw	r24, r28
    2534:	ea d9       	rcall	.-3116   	; 0x190a <writeReg>
    2536:	4a 85       	ldd	r20, Y+10	; 0x0a
    2538:	61 e9       	ldi	r22, 0x91	; 145
    253a:	ce 01       	movw	r24, r28
    253c:	e6 d9       	rcall	.-3124   	; 0x190a <writeReg>
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	ce 01       	movw	r24, r28
    2544:	e2 d9       	rcall	.-3132   	; 0x190a <writeReg>
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	6f ef       	ldi	r22, 0xFF	; 255
    254a:	ce 01       	movw	r24, r28
    254c:	de d9       	rcall	.-3140   	; 0x190a <writeReg>
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	60 e8       	ldi	r22, 0x80	; 128
    2552:	ce 01       	movw	r24, r28
    2554:	da d9       	rcall	.-3148   	; 0x190a <writeReg>
    2556:	c1 14       	cp	r12, r1
    2558:	d1 04       	cpc	r13, r1
    255a:	e1 04       	cpc	r14, r1
    255c:	f1 04       	cpc	r15, r1
    255e:	a9 f0       	breq	.+42     	; 0x258a <vl53l0x_startContinuous+0x7c>
    2560:	68 ef       	ldi	r22, 0xF8	; 248
    2562:	ce 01       	movw	r24, r28
    2564:	41 da       	rcall	.-2942   	; 0x19e8 <readReg16Bit>
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	31 f0       	breq	.+12     	; 0x2576 <vl53l0x_startContinuous+0x68>
    256a:	dc 01       	movw	r26, r24
    256c:	a7 01       	movw	r20, r14
    256e:	96 01       	movw	r18, r12
    2570:	7f d0       	rcall	.+254    	; 0x2670 <__muluhisi3>
    2572:	6b 01       	movw	r12, r22
    2574:	7c 01       	movw	r14, r24
    2576:	a7 01       	movw	r20, r14
    2578:	96 01       	movw	r18, r12
    257a:	64 e0       	ldi	r22, 0x04	; 4
    257c:	ce 01       	movw	r24, r28
    257e:	f3 d9       	rcall	.-3098   	; 0x1966 <writeReg32Bit>
    2580:	44 e0       	ldi	r20, 0x04	; 4
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	ce 01       	movw	r24, r28
    2586:	c1 d9       	rcall	.-3198   	; 0x190a <writeReg>
    2588:	04 c0       	rjmp	.+8      	; 0x2592 <vl53l0x_startContinuous+0x84>
    258a:	42 e0       	ldi	r20, 0x02	; 2
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	ce 01       	movw	r24, r28
    2590:	bc d9       	rcall	.-3208   	; 0x190a <writeReg>
    2592:	df 91       	pop	r29
    2594:	cf 91       	pop	r28
    2596:	ff 90       	pop	r15
    2598:	ef 90       	pop	r14
    259a:	df 90       	pop	r13
    259c:	cf 90       	pop	r12
    259e:	08 95       	ret

000025a0 <vl53l0x_readRangeContinuous>:
    25a0:	0f 93       	push	r16
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	ec 01       	movw	r28, r24
    25aa:	63 e1       	ldi	r22, 0x13	; 19
    25ac:	02 da       	rcall	.-3068   	; 0x19b2 <readReg>
    25ae:	87 70       	andi	r24, 0x07	; 7
    25b0:	49 f0       	breq	.+18     	; 0x25c4 <vl53l0x_readRangeContinuous+0x24>
    25b2:	6e e1       	ldi	r22, 0x1E	; 30
    25b4:	ce 01       	movw	r24, r28
    25b6:	18 da       	rcall	.-3024   	; 0x19e8 <readReg16Bit>
    25b8:	8c 01       	movw	r16, r24
    25ba:	41 e0       	ldi	r20, 0x01	; 1
    25bc:	6b e0       	ldi	r22, 0x0B	; 11
    25be:	ce 01       	movw	r24, r28
    25c0:	a4 d9       	rcall	.-3256   	; 0x190a <writeReg>
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <vl53l0x_readRangeContinuous+0x28>
    25c4:	0f ef       	ldi	r16, 0xFF	; 255
    25c6:	1f ef       	ldi	r17, 0xFF	; 255
    25c8:	c8 01       	movw	r24, r16
    25ca:	df 91       	pop	r29
    25cc:	cf 91       	pop	r28
    25ce:	1f 91       	pop	r17
    25d0:	0f 91       	pop	r16
    25d2:	08 95       	ret

000025d4 <vl53l0x_incrementTimeoutCounter>:

void vl53l0x_incrementTimeoutCounter()
{
	u32_milliseconds++;
    25d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    25d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    25dc:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
    25e0:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
    25e4:	01 96       	adiw	r24, 0x01	; 1
    25e6:	a1 1d       	adc	r26, r1
    25e8:	b1 1d       	adc	r27, r1
    25ea:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
    25ee:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
    25f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
    25f6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
    25fa:	08 95       	ret

000025fc <__udivmodsi4>:
    25fc:	a1 e2       	ldi	r26, 0x21	; 33
    25fe:	1a 2e       	mov	r1, r26
    2600:	aa 1b       	sub	r26, r26
    2602:	bb 1b       	sub	r27, r27
    2604:	fd 01       	movw	r30, r26
    2606:	0d c0       	rjmp	.+26     	; 0x2622 <__udivmodsi4_ep>

00002608 <__udivmodsi4_loop>:
    2608:	aa 1f       	adc	r26, r26
    260a:	bb 1f       	adc	r27, r27
    260c:	ee 1f       	adc	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	a2 17       	cp	r26, r18
    2612:	b3 07       	cpc	r27, r19
    2614:	e4 07       	cpc	r30, r20
    2616:	f5 07       	cpc	r31, r21
    2618:	20 f0       	brcs	.+8      	; 0x2622 <__udivmodsi4_ep>
    261a:	a2 1b       	sub	r26, r18
    261c:	b3 0b       	sbc	r27, r19
    261e:	e4 0b       	sbc	r30, r20
    2620:	f5 0b       	sbc	r31, r21

00002622 <__udivmodsi4_ep>:
    2622:	66 1f       	adc	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	88 1f       	adc	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	1a 94       	dec	r1
    262c:	69 f7       	brne	.-38     	; 0x2608 <__udivmodsi4_loop>
    262e:	60 95       	com	r22
    2630:	70 95       	com	r23
    2632:	80 95       	com	r24
    2634:	90 95       	com	r25
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	bd 01       	movw	r22, r26
    263c:	cf 01       	movw	r24, r30
    263e:	08 95       	ret

00002640 <__tablejump2__>:
    2640:	ee 0f       	add	r30, r30
    2642:	ff 1f       	adc	r31, r31
    2644:	00 24       	eor	r0, r0
    2646:	00 1c       	adc	r0, r0
    2648:	0b be       	out	0x3b, r0	; 59
    264a:	07 90       	elpm	r0, Z+
    264c:	f6 91       	elpm	r31, Z
    264e:	e0 2d       	mov	r30, r0
    2650:	09 94       	ijmp

00002652 <__umulhisi3>:
    2652:	a2 9f       	mul	r26, r18
    2654:	b0 01       	movw	r22, r0
    2656:	b3 9f       	mul	r27, r19
    2658:	c0 01       	movw	r24, r0
    265a:	a3 9f       	mul	r26, r19
    265c:	70 0d       	add	r23, r0
    265e:	81 1d       	adc	r24, r1
    2660:	11 24       	eor	r1, r1
    2662:	91 1d       	adc	r25, r1
    2664:	b2 9f       	mul	r27, r18
    2666:	70 0d       	add	r23, r0
    2668:	81 1d       	adc	r24, r1
    266a:	11 24       	eor	r1, r1
    266c:	91 1d       	adc	r25, r1
    266e:	08 95       	ret

00002670 <__muluhisi3>:
    2670:	f0 df       	rcall	.-32     	; 0x2652 <__umulhisi3>
    2672:	a5 9f       	mul	r26, r21
    2674:	90 0d       	add	r25, r0
    2676:	b4 9f       	mul	r27, r20
    2678:	90 0d       	add	r25, r0
    267a:	a4 9f       	mul	r26, r20
    267c:	80 0d       	add	r24, r0
    267e:	91 1d       	adc	r25, r1
    2680:	11 24       	eor	r1, r1
    2682:	08 95       	ret

00002684 <_exit>:
    2684:	f8 94       	cli

00002686 <__stop_program>:
    2686:	ff cf       	rjmp	.-2      	; 0x2686 <__stop_program>
