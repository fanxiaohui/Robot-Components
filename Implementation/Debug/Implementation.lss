
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00002706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002692  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000050  00800100  00800100  00002706  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002706  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005d0  00000000  00000000  00002778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000081d4  00000000  00000000  00002d48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001b10  00000000  00000000  0000af1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f19  00000000  00000000  0000ca2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001470  00000000  00000000  0000f948  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001dd5  00000000  00000000  00010db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004c25  00000000  00000000  00012b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000570  00000000  00000000  000177b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__vector_1>
       6:	00 00       	nop
       8:	47 c1       	rjmp	.+654    	; 0x298 <__vector_2>
       a:	00 00       	nop
       c:	4f c1       	rjmp	.+670    	; 0x2ac <__vector_3>
       e:	00 00       	nop
      10:	11 c1       	rjmp	.+546    	; 0x234 <__vector_4>
      12:	00 00       	nop
      14:	19 c1       	rjmp	.+562    	; 0x248 <__vector_5>
      16:	00 00       	nop
      18:	21 c1       	rjmp	.+578    	; 0x25c <__vector_6>
      1a:	00 00       	nop
      1c:	29 c1       	rjmp	.+594    	; 0x270 <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 e1 0a 	jmp	0x15c2	; 0x15c2 <__vector_8>
      24:	a2 c6       	rjmp	.+3396   	; 0xd6a <__vector_9>
      26:	00 00       	nop
      28:	dc c6       	rjmp	.+3512   	; 0xde2 <__vector_10>
      2a:	00 00       	nop
      2c:	73 c6       	rjmp	.+3302   	; 0xd14 <__vector_11>
      2e:	00 00       	nop
      30:	14 c6       	rjmp	.+3112   	; 0xc5a <__vector_12>
      32:	00 00       	nop
      34:	87 c5       	rjmp	.+2830   	; 0xb44 <__vector_13>
      36:	00 00       	nop
      38:	e5 c5       	rjmp	.+3018   	; 0xc04 <__vector_14>
      3a:	00 00       	nop
      3c:	58 c5       	rjmp	.+2736   	; 0xaee <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	91 c3       	rjmp	.+1826   	; 0x770 <__vector_19>
      4e:	00 00       	nop
      50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
      52:	00 00       	nop
      54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
      56:	00 00       	nop
      58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f9 07       	cpc	r31, r25
      8e:	02 08       	sbc	r0, r2
      90:	0b 08       	sbc	r0, r11
      92:	14 08       	sbc	r1, r4
      94:	1d 08       	sbc	r1, r13
      96:	26 08       	sbc	r2, r6
      98:	2f 08       	sbc	r2, r15

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e2 e9       	ldi	r30, 0x92	; 146
      ae:	f6 e2       	ldi	r31, 0x26	; 38
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a0 30       	cpi	r26, 0x00	; 0
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	a0 e0       	ldi	r26, 0x00	; 0
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a0 35       	cpi	r26, 0x50	; 80
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	03 d0       	rcall	.+6      	; 0xd8 <main>
      d2:	0c 94 47 13 	jmp	0x268e	; 0x268e <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <main>:
#include "device.h"
#include "vl53l0x_example.h"

int main()
{
	device_disableJTAG();
      d8:	89 d0       	rcall	.+274    	; 0x1ec <device_disableJTAG>
	debug_init();
      da:	0e 94 0c 0b 	call	0x1618	; 0x1618 <debug_init>
	distanceSensor_init();

	distanceSensor_sleepTest();
      de:	02 d0       	rcall	.+4      	; 0xe4 <distanceSensor_init>
      e0:	4f d0       	rcall	.+158    	; 0x180 <distanceSensor_sleepTest>
      e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0xa>

000000e4 <distanceSensor_init>:
	while (1)
	{
		/* This can be put in a scheduler if no GPIO pin from the sensor is available */
		distance = vl53l0x_readRangeContinuous(&s_frontSensor);
		if (distance != 0xffff)
			debug_writeDecimal(distance);
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	e4 e0       	ldi	r30, 0x04	; 4
      ea:	f1 e0       	ldi	r31, 0x01	; 1
      ec:	88 ee       	ldi	r24, 0xE8	; 232
      ee:	58 2f       	mov	r21, r24
      f0:	81 83       	std	Z+1, r24	; 0x01
      f2:	83 e0       	ldi	r24, 0x03	; 3
      f4:	82 83       	std	Z+2, r24	; 0x02
      f6:	13 82       	std	Z+3, r1	; 0x03
      f8:	14 82       	std	Z+4, r1	; 0x04
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	48 2f       	mov	r20, r24
      fe:	80 83       	st	Z, r24
     100:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     104:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     108:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     10c:	95 d6       	rcall	.+3370   	; 0xe38 <timer_init>
     10e:	0f ee       	ldi	r16, 0xEF	; 239
     110:	12 e1       	ldi	r17, 0x12	; 18
     112:	20 e0       	ldi	r18, 0x00	; 0
     114:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     118:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     11c:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     120:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     124:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     128:	0e 94 69 09 	call	0x12d2	; 0x12d2 <timer_attachInterrupt>
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     132:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     136:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     13a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     13e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     142:	0e 94 ad 08 	call	0x115a	; 0x115a <timer_enableInterrupt>
     146:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <s_timeoutTimer>
     14a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <s_timeoutTimer+0x1>
     14e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <s_timeoutTimer+0x2>
     152:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <s_timeoutTimer+0x3>
     156:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <s_timeoutTimer+0x4>
     15a:	ba d7       	rcall	.+3956   	; 0x10d0 <timer_start>
     15c:	e9 e0       	ldi	r30, 0x09	; 9
     15e:	f1 e0       	ldi	r31, 0x01	; 1
     160:	89 e2       	ldi	r24, 0x29	; 41
     162:	80 83       	st	Z, r24
     164:	84 e6       	ldi	r24, 0x64	; 100
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	92 83       	std	Z+2, r25	; 0x02
     16a:	81 83       	std	Z+1, r24	; 0x01
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	84 83       	std	Z+4, r24	; 0x04
     170:	85 83       	std	Z+5, r24	; 0x05
     172:	78 94       	sei
     174:	cf 01       	movw	r24, r30
     176:	0e 94 27 10 	call	0x204e	; 0x204e <vl53l0x_init>
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	08 95       	ret

00000180 <distanceSensor_sleepTest>:
void distanceSensor_sleepTest()
{
	u8 i = 0;
	u16 distance;

	vl53l0x_start(&s_frontSensor);
     180:	89 e0       	ldi	r24, 0x09	; 9
     182:	91 e0       	ldi	r25, 0x01	; 1
     184:	0e 94 4e 10 	call	0x209c	; 0x209c <vl53l0x_start>
	vl53l0x_startContinuous(&s_frontSensor, 30);
     188:	4e e1       	ldi	r20, 0x1E	; 30
     18a:	50 e0       	ldi	r21, 0x00	; 0
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	70 e0       	ldi	r23, 0x00	; 0
     190:	89 e0       	ldi	r24, 0x09	; 9
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	0e 94 8c 12 	call	0x2518	; 0x2518 <vl53l0x_startContinuous>
	}
}

void distanceSensor_sleepTest()
{
	u8 i = 0;
     198:	c0 e0       	ldi	r28, 0x00	; 0
     19a:	0b c0       	rjmp	.+22     	; 0x1b2 <distanceSensor_sleepTest+0x32>

	while (1)
	{
		while (i < 100)
		{
			distance = vl53l0x_readRangeContinuous(&s_frontSensor);
     19c:	89 e0       	ldi	r24, 0x09	; 9
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 d5 12 	call	0x25aa	; 0x25aa <vl53l0x_readRangeContinuous>
			if (distance != 0xffff)
     1a4:	8f 3f       	cpi	r24, 0xFF	; 255
     1a6:	2f ef       	ldi	r18, 0xFF	; 255
     1a8:	92 07       	cpc	r25, r18
     1aa:	19 f0       	breq	.+6      	; 0x1b2 <distanceSensor_sleepTest+0x32>
			{
				debug_writeDecimal(distance);
     1ac:	0e 94 44 0b 	call	0x1688	; 0x1688 <debug_writeDecimal>
				i++;
     1b0:	cf 5f       	subi	r28, 0xFF	; 255
	vl53l0x_start(&s_frontSensor);
	vl53l0x_startContinuous(&s_frontSensor, 30);

	while (1)
	{
		while (i < 100)
     1b2:	c4 36       	cpi	r28, 0x64	; 100
     1b4:	98 f3       	brcs	.-26     	; 0x19c <distanceSensor_sleepTest+0x1c>
			{
				debug_writeDecimal(distance);
				i++;
			}
		}
		vl53l0x_stop(&s_frontSensor);
     1b6:	89 e0       	ldi	r24, 0x09	; 9
     1b8:	91 e0       	ldi	r25, 0x01	; 1
     1ba:	0e 94 84 12 	call	0x2508	; 0x2508 <vl53l0x_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1be:	8f ef       	ldi	r24, 0xFF	; 255
     1c0:	9d e3       	ldi	r25, 0x3D	; 61
     1c2:	29 e4       	ldi	r18, 0x49	; 73
     1c4:	81 50       	subi	r24, 0x01	; 1
     1c6:	90 40       	sbci	r25, 0x00	; 0
     1c8:	20 40       	sbci	r18, 0x00	; 0
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <distanceSensor_sleepTest+0x44>
     1cc:	00 c0       	rjmp	.+0      	; 0x1ce <distanceSensor_sleepTest+0x4e>
     1ce:	00 00       	nop
		_delay_ms(3000);
		i = 0;
		vl53l0x_start(&s_frontSensor);
     1d0:	89 e0       	ldi	r24, 0x09	; 9
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	0e 94 4e 10 	call	0x209c	; 0x209c <vl53l0x_start>
		vl53l0x_startContinuous(&s_frontSensor, 30);
     1d8:	4e e1       	ldi	r20, 0x1E	; 30
     1da:	50 e0       	ldi	r21, 0x00	; 0
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	89 e0       	ldi	r24, 0x09	; 9
     1e2:	91 e0       	ldi	r25, 0x01	; 1
     1e4:	0e 94 8c 12 	call	0x2518	; 0x2518 <vl53l0x_startContinuous>
				i++;
			}
		}
		vl53l0x_stop(&s_frontSensor);
		_delay_ms(3000);
		i = 0;
     1e8:	c0 e0       	ldi	r28, 0x00	; 0
		vl53l0x_start(&s_frontSensor);
		vl53l0x_startContinuous(&s_frontSensor, 30);
	}
     1ea:	e3 cf       	rjmp	.-58     	; 0x1b2 <distanceSensor_sleepTest+0x32>

000001ec <device_disableJTAG>:
/* Exported functions                                                   */
/************************************************************************/

void device_disableJTAG()
{
	MCUCR = 0x80;
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     1f0:	85 bf       	out	0x35, r24	; 53
     1f2:	08 95       	ret

000001f4 <gpio_changeDirection>:
}

void gpio_setDirectionInput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = INPUT;
	gpio_changeDirection(*s_gpio);
     1f4:	61 30       	cpi	r22, 0x01	; 1
     1f6:	61 f0       	breq	.+24     	; 0x210 <gpio_changeDirection+0x1c>
     1f8:	28 f0       	brcs	.+10     	; 0x204 <gpio_changeDirection+0x10>
     1fa:	62 30       	cpi	r22, 0x02	; 2
     1fc:	79 f0       	breq	.+30     	; 0x21c <gpio_changeDirection+0x28>
     1fe:	63 30       	cpi	r22, 0x03	; 3
     200:	99 f0       	breq	.+38     	; 0x228 <gpio_changeDirection+0x34>
     202:	08 95       	ret
     204:	48 2f       	mov	r20, r24
     206:	67 2f       	mov	r22, r23
     208:	81 e2       	ldi	r24, 0x21	; 33
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	58 c2       	rjmp	.+1200   	; 0x6be <updateBit>
     20e:	08 95       	ret
     210:	48 2f       	mov	r20, r24
     212:	67 2f       	mov	r22, r23
     214:	84 e2       	ldi	r24, 0x24	; 36
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	52 c2       	rjmp	.+1188   	; 0x6be <updateBit>
     21a:	08 95       	ret
     21c:	48 2f       	mov	r20, r24
     21e:	67 2f       	mov	r22, r23
     220:	87 e2       	ldi	r24, 0x27	; 39
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	4c c2       	rjmp	.+1176   	; 0x6be <updateBit>
     226:	08 95       	ret
     228:	48 2f       	mov	r20, r24
     22a:	67 2f       	mov	r22, r23
     22c:	8a e2       	ldi	r24, 0x2A	; 42
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	46 c2       	rjmp	.+1164   	; 0x6be <updateBit>
     232:	08 95       	ret

00000234 <__vector_4>:
     234:	1f 92       	push	r1
     236:	0f 92       	push	r0
     238:	0f b6       	in	r0, 0x3f	; 63
     23a:	0f 92       	push	r0
     23c:	11 24       	eor	r1, r1
     23e:	0f 90       	pop	r0
     240:	0f be       	out	0x3f, r0	; 63
     242:	0f 90       	pop	r0
     244:	1f 90       	pop	r1
     246:	18 95       	reti

00000248 <__vector_5>:
     248:	1f 92       	push	r1
     24a:	0f 92       	push	r0
     24c:	0f b6       	in	r0, 0x3f	; 63
     24e:	0f 92       	push	r0
     250:	11 24       	eor	r1, r1
     252:	0f 90       	pop	r0
     254:	0f be       	out	0x3f, r0	; 63
     256:	0f 90       	pop	r0
     258:	1f 90       	pop	r1
     25a:	18 95       	reti

0000025c <__vector_6>:
     25c:	1f 92       	push	r1
     25e:	0f 92       	push	r0
     260:	0f b6       	in	r0, 0x3f	; 63
     262:	0f 92       	push	r0
     264:	11 24       	eor	r1, r1
     266:	0f 90       	pop	r0
     268:	0f be       	out	0x3f, r0	; 63
     26a:	0f 90       	pop	r0
     26c:	1f 90       	pop	r1
     26e:	18 95       	reti

00000270 <__vector_7>:
     270:	1f 92       	push	r1
     272:	0f 92       	push	r0
     274:	0f b6       	in	r0, 0x3f	; 63
     276:	0f 92       	push	r0
     278:	11 24       	eor	r1, r1
     27a:	0f 90       	pop	r0
     27c:	0f be       	out	0x3f, r0	; 63
     27e:	0f 90       	pop	r0
     280:	1f 90       	pop	r1
     282:	18 95       	reti

00000284 <__vector_1>:
     284:	1f 92       	push	r1
     286:	0f 92       	push	r0
     288:	0f b6       	in	r0, 0x3f	; 63
     28a:	0f 92       	push	r0
     28c:	11 24       	eor	r1, r1
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <__vector_2>:
     298:	1f 92       	push	r1
     29a:	0f 92       	push	r0
     29c:	0f b6       	in	r0, 0x3f	; 63
     29e:	0f 92       	push	r0
     2a0:	11 24       	eor	r1, r1
     2a2:	0f 90       	pop	r0
     2a4:	0f be       	out	0x3f, r0	; 63
     2a6:	0f 90       	pop	r0
     2a8:	1f 90       	pop	r1
     2aa:	18 95       	reti

000002ac <__vector_3>:
     2ac:	1f 92       	push	r1
     2ae:	0f 92       	push	r0
     2b0:	0f b6       	in	r0, 0x3f	; 63
     2b2:	0f 92       	push	r0
     2b4:	11 24       	eor	r1, r1
     2b6:	0f 90       	pop	r0
     2b8:	0f be       	out	0x3f, r0	; 63
     2ba:	0f 90       	pop	r0
     2bc:	1f 90       	pop	r1
     2be:	18 95       	reti

000002c0 <gpio_init>:
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	c6 2f       	mov	r28, r22
     2ca:	17 2f       	mov	r17, r23
     2cc:	d8 2f       	mov	r29, r24
     2ce:	09 2f       	mov	r16, r25
     2d0:	91 df       	rcall	.-222    	; 0x1f4 <gpio_changeDirection>
     2d2:	d1 11       	cpse	r29, r1
     2d4:	23 c0       	rjmp	.+70     	; 0x31c <gpio_init+0x5c>
     2d6:	c1 30       	cpi	r28, 0x01	; 1
     2d8:	81 f0       	breq	.+32     	; 0x2fa <gpio_init+0x3a>
     2da:	28 f0       	brcs	.+10     	; 0x2e6 <gpio_init+0x26>
     2dc:	c2 30       	cpi	r28, 0x02	; 2
     2de:	99 f0       	breq	.+38     	; 0x306 <gpio_init+0x46>
     2e0:	c3 30       	cpi	r28, 0x03	; 3
     2e2:	b9 f0       	breq	.+46     	; 0x312 <gpio_init+0x52>
     2e4:	1b c0       	rjmp	.+54     	; 0x31c <gpio_init+0x5c>
     2e6:	40 2f       	mov	r20, r16
     2e8:	61 2f       	mov	r22, r17
     2ea:	82 e2       	ldi	r24, 0x22	; 34
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	e7 d1       	rcall	.+974    	; 0x6be <updateBit>
     2f0:	61 2f       	mov	r22, r17
     2f2:	8e e7       	ldi	r24, 0x7E	; 126
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	07 d2       	rcall	.+1038   	; 0x706 <clearBit>
     2f8:	11 c0       	rjmp	.+34     	; 0x31c <gpio_init+0x5c>
     2fa:	40 2f       	mov	r20, r16
     2fc:	61 2f       	mov	r22, r17
     2fe:	85 e2       	ldi	r24, 0x25	; 37
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	dd d1       	rcall	.+954    	; 0x6be <updateBit>
     304:	0b c0       	rjmp	.+22     	; 0x31c <gpio_init+0x5c>
     306:	40 2f       	mov	r20, r16
     308:	61 2f       	mov	r22, r17
     30a:	88 e2       	ldi	r24, 0x28	; 40
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	d7 d1       	rcall	.+942    	; 0x6be <updateBit>
     310:	05 c0       	rjmp	.+10     	; 0x31c <gpio_init+0x5c>
     312:	40 2f       	mov	r20, r16
     314:	61 2f       	mov	r22, r17
     316:	8b e2       	ldi	r24, 0x2B	; 43
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	d1 d1       	rcall	.+930    	; 0x6be <updateBit>
     31c:	df 91       	pop	r29
     31e:	cf 91       	pop	r28
     320:	1f 91       	pop	r17
     322:	0f 91       	pop	r16
     324:	08 95       	ret

00000326 <gpio_setDirectionOutput>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
     326:	21 e0       	ldi	r18, 0x01	; 1
     328:	fc 01       	movw	r30, r24
     32a:	22 83       	std	Z+2, r18	; 0x02
	gpio_changeDirection(*s_gpio);
     32c:	60 81       	ld	r22, Z
     32e:	71 81       	ldd	r23, Z+1	; 0x01
     330:	82 81       	ldd	r24, Z+2	; 0x02
     332:	93 81       	ldd	r25, Z+3	; 0x03
     334:	5f cf       	rjmp	.-322    	; 0x1f4 <gpio_changeDirection>
     336:	08 95       	ret

00000338 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     338:	61 30       	cpi	r22, 0x01	; 1
     33a:	59 f0       	breq	.+22     	; 0x352 <gpio_out_set+0x1a>
     33c:	28 f0       	brcs	.+10     	; 0x348 <gpio_out_set+0x10>
     33e:	62 30       	cpi	r22, 0x02	; 2
     340:	69 f0       	breq	.+26     	; 0x35c <gpio_out_set+0x24>
     342:	63 30       	cpi	r22, 0x03	; 3
     344:	81 f0       	breq	.+32     	; 0x366 <gpio_out_set+0x2e>
     346:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     348:	67 2f       	mov	r22, r23
     34a:	82 e2       	ldi	r24, 0x22	; 34
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	cf c1       	rjmp	.+926    	; 0x6ee <setBit>
			break;
     350:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     352:	67 2f       	mov	r22, r23
     354:	85 e2       	ldi	r24, 0x25	; 37
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	ca c1       	rjmp	.+916    	; 0x6ee <setBit>
			break;
     35a:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     35c:	67 2f       	mov	r22, r23
     35e:	88 e2       	ldi	r24, 0x28	; 40
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	c5 c1       	rjmp	.+906    	; 0x6ee <setBit>
			break;
     364:	08 95       	ret
		case PD:
			setBit(&PORTD, s_gpio.number);
     366:	67 2f       	mov	r22, r23
     368:	8b e2       	ldi	r24, 0x2B	; 43
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	c0 c1       	rjmp	.+896    	; 0x6ee <setBit>
     36e:	08 95       	ret

00000370 <gpio_out_reset>:
	}
}

void gpio_out_reset(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     370:	61 30       	cpi	r22, 0x01	; 1
     372:	59 f0       	breq	.+22     	; 0x38a <gpio_out_reset+0x1a>
     374:	28 f0       	brcs	.+10     	; 0x380 <gpio_out_reset+0x10>
     376:	62 30       	cpi	r22, 0x02	; 2
     378:	69 f0       	breq	.+26     	; 0x394 <gpio_out_reset+0x24>
     37a:	63 30       	cpi	r22, 0x03	; 3
     37c:	81 f0       	breq	.+32     	; 0x39e <gpio_out_reset+0x2e>
     37e:	08 95       	ret
	{
		case PA:
			clearBit(&PORTA, s_gpio.number);
     380:	67 2f       	mov	r22, r23
     382:	82 e2       	ldi	r24, 0x22	; 34
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	bf c1       	rjmp	.+894    	; 0x706 <clearBit>
			break;
     388:	08 95       	ret
		case PB:
			clearBit(&PORTB, s_gpio.number);
     38a:	67 2f       	mov	r22, r23
     38c:	85 e2       	ldi	r24, 0x25	; 37
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	ba c1       	rjmp	.+884    	; 0x706 <clearBit>
			break;
     392:	08 95       	ret
		case PC:
			clearBit(&PORTC, s_gpio.number);
     394:	67 2f       	mov	r22, r23
     396:	88 e2       	ldi	r24, 0x28	; 40
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	b5 c1       	rjmp	.+874    	; 0x706 <clearBit>
			break;
     39c:	08 95       	ret
		case PD:
			clearBit(&PORTD, s_gpio.number);
     39e:	67 2f       	mov	r22, r23
     3a0:	8b e2       	ldi	r24, 0x2B	; 43
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	b0 c1       	rjmp	.+864    	; 0x706 <clearBit>
     3a6:	08 95       	ret

000003a8 <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     3a8:	0f 93       	push	r16
     3aa:	1f 93       	push	r17
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	8b 01       	movw	r16, r22
     3b2:	9c 01       	movw	r18, r24
     3b4:	ea 01       	movw	r28, r20
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	72 e1       	ldi	r23, 0x12	; 18
     3ba:	8a e7       	ldi	r24, 0x7A	; 122
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	a9 01       	movw	r20, r18
     3c0:	98 01       	movw	r18, r16
     3c2:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     3c6:	ba 01       	movw	r22, r20
     3c8:	a9 01       	movw	r20, r18
     3ca:	40 51       	subi	r20, 0x10	; 16
     3cc:	51 09       	sbc	r21, r1
     3ce:	61 09       	sbc	r22, r1
     3d0:	71 09       	sbc	r23, r1
     3d2:	db 01       	movw	r26, r22
     3d4:	ca 01       	movw	r24, r20
     3d6:	b6 95       	lsr	r27
     3d8:	a7 95       	ror	r26
     3da:	97 95       	ror	r25
     3dc:	87 95       	ror	r24
     3de:	8f 3f       	cpi	r24, 0xFF	; 255
     3e0:	91 05       	cpc	r25, r1
     3e2:	a1 05       	cpc	r26, r1
     3e4:	b1 05       	cpc	r27, r1
     3e6:	09 f0       	breq	.+2      	; 0x3ea <calculateTWBR+0x42>
     3e8:	10 f4       	brcc	.+4      	; 0x3ee <calculateTWBR+0x46>
     3ea:	18 82       	st	Y, r1
     3ec:	32 c0       	rjmp	.+100    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     3ee:	db 01       	movw	r26, r22
     3f0:	ca 01       	movw	r24, r20
     3f2:	68 94       	set
     3f4:	12 f8       	bld	r1, 2
     3f6:	b6 95       	lsr	r27
     3f8:	a7 95       	ror	r26
     3fa:	97 95       	ror	r25
     3fc:	87 95       	ror	r24
     3fe:	16 94       	lsr	r1
     400:	d1 f7       	brne	.-12     	; 0x3f6 <calculateTWBR+0x4e>
     402:	8f 3f       	cpi	r24, 0xFF	; 255
     404:	91 05       	cpc	r25, r1
     406:	a1 05       	cpc	r26, r1
     408:	b1 05       	cpc	r27, r1
     40a:	09 f0       	breq	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40c:	18 f4       	brcc	.+6      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     40e:	21 e0       	ldi	r18, 0x01	; 1
     410:	28 83       	st	Y, r18
     412:	1f c0       	rjmp	.+62     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     414:	db 01       	movw	r26, r22
     416:	ca 01       	movw	r24, r20
     418:	68 94       	set
     41a:	14 f8       	bld	r1, 4
     41c:	b6 95       	lsr	r27
     41e:	a7 95       	ror	r26
     420:	97 95       	ror	r25
     422:	87 95       	ror	r24
     424:	16 94       	lsr	r1
     426:	d1 f7       	brne	.-12     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     428:	8f 3f       	cpi	r24, 0xFF	; 255
     42a:	91 05       	cpc	r25, r1
     42c:	a1 05       	cpc	r26, r1
     42e:	b1 05       	cpc	r27, r1
     430:	09 f0       	breq	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     432:	18 f4       	brcc	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	22 e0       	ldi	r18, 0x02	; 2
     436:	28 83       	st	Y, r18
     438:	0c c0       	rjmp	.+24     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     43a:	83 e0       	ldi	r24, 0x03	; 3
     43c:	88 83       	st	Y, r24
     43e:	db 01       	movw	r26, r22
     440:	ca 01       	movw	r24, r20
     442:	68 94       	set
     444:	16 f8       	bld	r1, 6
     446:	b6 95       	lsr	r27
     448:	a7 95       	ror	r26
     44a:	97 95       	ror	r25
     44c:	87 95       	ror	r24
     44e:	16 94       	lsr	r1
     450:	d1 f7       	brne	.-12     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	1f 91       	pop	r17
     458:	0f 91       	pop	r16
     45a:	08 95       	ret

0000045c <i2c_init>:
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	1f 92       	push	r1
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	ae 01       	movw	r20, r28
     468:	4f 5f       	subi	r20, 0xFF	; 255
     46a:	5f 4f       	sbci	r21, 0xFF	; 255
     46c:	9d df       	rcall	.-198    	; 0x3a8 <calculateTWBR>
     46e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	54 d1       	rcall	.+680    	; 0x720 <checkBit>
     478:	48 2f       	mov	r20, r24
     47a:	60 e0       	ldi	r22, 0x00	; 0
     47c:	89 eb       	ldi	r24, 0xB9	; 185
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	1e d1       	rcall	.+572    	; 0x6be <updateBit>
     482:	61 e0       	ldi	r22, 0x01	; 1
     484:	89 81       	ldd	r24, Y+1	; 0x01
     486:	4c d1       	rcall	.+664    	; 0x720 <checkBit>
     488:	48 2f       	mov	r20, r24
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	89 eb       	ldi	r24, 0xB9	; 185
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	16 d1       	rcall	.+556    	; 0x6be <updateBit>
     492:	62 e0       	ldi	r22, 0x02	; 2
     494:	71 e0       	ldi	r23, 0x01	; 1
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	12 df       	rcall	.-476    	; 0x2c0 <gpio_init>
     49c:	62 e0       	ldi	r22, 0x02	; 2
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	91 e0       	ldi	r25, 0x01	; 1
     4a4:	0d df       	rcall	.-486    	; 0x2c0 <gpio_init>
     4a6:	0f 90       	pop	r0
     4a8:	df 91       	pop	r29
     4aa:	cf 91       	pop	r28
     4ac:	08 95       	ret

000004ae <i2c_start>:
     4ae:	62 e0       	ldi	r22, 0x02	; 2
     4b0:	8c eb       	ldi	r24, 0xBC	; 188
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	1c c1       	rjmp	.+568    	; 0x6ee <setBit>
     4b6:	08 95       	ret

000004b8 <i2c_sendStart>:
}

u8 i2c_sendStart(u8 u8_address)
{
     4b8:	ff 92       	push	r15
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	f8 2e       	mov	r15, r24
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);
     4c4:	cc eb       	ldi	r28, 0xBC	; 188
     4c6:	d0 e0       	ldi	r29, 0x00	; 0
     4c8:	88 81       	ld	r24, Y
     4ca:	62 e0       	ldi	r22, 0x02	; 2
     4cc:	29 d1       	rcall	.+594    	; 0x720 <checkBit>
     4ce:	28 81       	ld	r18, Y
     4d0:	34 e0       	ldi	r19, 0x04	; 4
     4d2:	83 9f       	mul	r24, r19
     4d4:	c0 01       	movw	r24, r0
     4d6:	11 24       	eor	r1, r1
     4d8:	80 6a       	ori	r24, 0xA0	; 160
     4da:	82 2b       	or	r24, r18
     4dc:	88 83       	st	Y, r24
     4de:	ce ef       	ldi	r28, 0xFE	; 254
     4e0:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until start condition has been sent */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     4e2:	0c eb       	ldi	r16, 0xBC	; 188
     4e4:	10 e0       	ldi	r17, 0x00	; 0
     4e6:	f8 01       	movw	r30, r16
     4e8:	80 81       	ld	r24, Z
     4ea:	67 e0       	ldi	r22, 0x07	; 7
     4ec:	19 d1       	rcall	.+562    	; 0x720 <checkBit>
     4ee:	81 11       	cpse	r24, r1
     4f0:	33 c0       	rjmp	.+102    	; 0x558 <i2c_sendStart+0xa0>
     4f2:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Send START condition */
	TWCR |= (1 << TWINT) | (1 << TWSTA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until start condition has been sent */
	while(--timeout > 0)
     4f4:	c1 f7       	brne	.-16     	; 0x4e6 <i2c_sendStart+0x2e>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	3b c0       	rjmp	.+118    	; 0x570 <i2c_sendStart+0xb8>

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     4fa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4fe:	88 7f       	andi	r24, 0xF8	; 248
     500:	80 31       	cpi	r24, 0x10	; 16
     502:	21 f0       	breq	.+8      	; 0x50c <i2c_sendStart+0x54>
		return (TW_STATUS & 0xF8);
     504:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     508:	88 7f       	andi	r24, 0xF8	; 248
     50a:	32 c0       	rjmp	.+100    	; 0x570 <i2c_sendStart+0xb8>

	/* Send device address */
	TWDR = u8_address;
     50c:	f0 92 bb 00 	sts	0x00BB, r15	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     510:	cc eb       	ldi	r28, 0xBC	; 188
     512:	d0 e0       	ldi	r29, 0x00	; 0
     514:	88 81       	ld	r24, Y
     516:	62 e0       	ldi	r22, 0x02	; 2
     518:	03 d1       	rcall	.+518    	; 0x720 <checkBit>
     51a:	f4 e0       	ldi	r31, 0x04	; 4
     51c:	8f 9f       	mul	r24, r31
     51e:	c0 01       	movw	r24, r0
     520:	11 24       	eor	r1, r1
     522:	80 68       	ori	r24, 0x80	; 128
     524:	88 83       	st	Y, r24
     526:	ce ef       	ldi	r28, 0xFE	; 254
     528:	df ef       	ldi	r29, 0xFF	; 255

	/* Wail until address has been sent */
	while( --timeout > 0 )
		if(checkBit(TWCR, TWINT))
     52a:	0c eb       	ldi	r16, 0xBC	; 188
     52c:	10 e0       	ldi	r17, 0x00	; 0
     52e:	f8 01       	movw	r30, r16
     530:	80 81       	ld	r24, Z
     532:	67 e0       	ldi	r22, 0x07	; 7
     534:	f5 d0       	rcall	.+490    	; 0x720 <checkBit>
     536:	81 11       	cpse	r24, r1
     538:	15 c0       	rjmp	.+42     	; 0x564 <i2c_sendStart+0xac>
     53a:	21 97       	sbiw	r28, 0x01	; 1
	/* Send device address */
	TWDR = u8_address;
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wail until address has been sent */
	while( --timeout > 0 )
     53c:	c1 f7       	brne	.-16     	; 0x52e <i2c_sendStart+0x76>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     53e:	8f ef       	ldi	r24, 0xFF	; 255
     540:	17 c0       	rjmp	.+46     	; 0x570 <i2c_sendStart+0xb8>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     542:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     546:	88 7f       	andi	r24, 0xF8	; 248
     548:	80 34       	cpi	r24, 0x40	; 64
     54a:	21 f0       	breq	.+8      	; 0x554 <i2c_sendStart+0x9c>
		return (TW_STATUS & 0xF8);
     54c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     550:	88 7f       	andi	r24, 0xF8	; 248
     552:	0e c0       	rjmp	.+28     	; 0x570 <i2c_sendStart+0xb8>

	return I2C_NO_ERROR;
     554:	80 e0       	ldi	r24, 0x00	; 0
     556:	0c c0       	rjmp	.+24     	; 0x570 <i2c_sendStart+0xb8>
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	timeout=0xFFFF;
	/* Check if start or repeated start condition was sent */
	if (((TW_STATUS & 0xF8) != TW_START) && ((TW_STATUS & 0xF8) != TW_REP_START))
     558:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     55c:	88 7f       	andi	r24, 0xF8	; 248
     55e:	88 30       	cpi	r24, 0x08	; 8
     560:	61 f6       	brne	.-104    	; 0x4fa <i2c_sendStart+0x42>
     562:	d4 cf       	rjmp	.-88     	; 0x50c <i2c_sendStart+0x54>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     564:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     568:	88 7f       	andi	r24, 0xF8	; 248
     56a:	88 31       	cpi	r24, 0x18	; 24
     56c:	51 f7       	brne	.-44     	; 0x542 <i2c_sendStart+0x8a>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     56e:	80 e0       	ldi	r24, 0x00	; 0
}
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	08 95       	ret

0000057c <i2c_sendRepStart>:

u8 i2c_sendRepStart(u8 u8_address)
{
	return i2c_sendStart(u8_address);
     57c:	9d cf       	rjmp	.-198    	; 0x4b8 <i2c_sendStart>
}
     57e:	08 95       	ret

00000580 <i2c_sendStop>:

void i2c_sendStop(void)
{
     580:	0f 93       	push	r16
     582:	1f 93       	push	r17
     584:	cf 93       	push	r28
     586:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
     588:	cc eb       	ldi	r28, 0xBC	; 188
     58a:	d0 e0       	ldi	r29, 0x00	; 0
     58c:	88 81       	ld	r24, Y
     58e:	62 e0       	ldi	r22, 0x02	; 2
     590:	c7 d0       	rcall	.+398    	; 0x720 <checkBit>
     592:	28 81       	ld	r18, Y
     594:	34 e0       	ldi	r19, 0x04	; 4
     596:	83 9f       	mul	r24, r19
     598:	c0 01       	movw	r24, r0
     59a:	11 24       	eor	r1, r1
     59c:	80 69       	ori	r24, 0x90	; 144
     59e:	82 2b       	or	r24, r18
     5a0:	88 83       	st	Y, r24
     5a2:	ce ef       	ldi	r28, 0xFE	; 254
     5a4:	df ef       	ldi	r29, 0xFF	; 255
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
		if(!checkBit(TWCR, TWSTO))
     5a6:	0c eb       	ldi	r16, 0xBC	; 188
     5a8:	10 e0       	ldi	r17, 0x00	; 0
     5aa:	f8 01       	movw	r30, r16
     5ac:	80 81       	ld	r24, Z
     5ae:	64 e0       	ldi	r22, 0x04	; 4
     5b0:	b7 d0       	rcall	.+366    	; 0x720 <checkBit>
     5b2:	88 23       	and	r24, r24
     5b4:	11 f0       	breq	.+4      	; 0x5ba <i2c_sendStop+0x3a>
     5b6:	21 97       	sbiw	r28, 0x01	; 1
{
	u16 timeout=0xFFFF;
	/* Send stop condition */
	TWCR |= (1 << TWINT) | (1 << TWSTO) | (checkBit(TWCR, TWEN) << TWEN);
	/* Wait until stop condition is sent and bus is released */
	while(--timeout > 0)
     5b8:	c1 f7       	brne	.-16     	; 0x5aa <i2c_sendStop+0x2a>
		if(!checkBit(TWCR, TWSTO))
			return;
}
     5ba:	df 91       	pop	r29
     5bc:	cf 91       	pop	r28
     5be:	1f 91       	pop	r17
     5c0:	0f 91       	pop	r16
     5c2:	08 95       	ret

000005c4 <i2c_write>:

u8 i2c_write(u8 u8_data)
{
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Send byte */
	TWDR = u8_data;
     5cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     5d0:	cc eb       	ldi	r28, 0xBC	; 188
     5d2:	d0 e0       	ldi	r29, 0x00	; 0
     5d4:	88 81       	ld	r24, Y
     5d6:	62 e0       	ldi	r22, 0x02	; 2
     5d8:	a3 d0       	rcall	.+326    	; 0x720 <checkBit>
     5da:	24 e0       	ldi	r18, 0x04	; 4
     5dc:	82 9f       	mul	r24, r18
     5de:	c0 01       	movw	r24, r0
     5e0:	11 24       	eor	r1, r1
     5e2:	80 68       	ori	r24, 0x80	; 128
     5e4:	88 83       	st	Y, r24
     5e6:	ce ef       	ldi	r28, 0xFE	; 254
     5e8:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     5ea:	0c eb       	ldi	r16, 0xBC	; 188
     5ec:	10 e0       	ldi	r17, 0x00	; 0
     5ee:	f8 01       	movw	r30, r16
     5f0:	80 81       	ld	r24, Z
     5f2:	67 e0       	ldi	r22, 0x07	; 7
     5f4:	95 d0       	rcall	.+298    	; 0x720 <checkBit>
     5f6:	81 11       	cpse	r24, r1
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <i2c_write+0x54>
     5fa:	21 97       	sbiw	r28, 0x01	; 1
	/* Send byte */
	TWDR = u8_data;
	TWCR = (1 << TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     5fc:	c1 f7       	brne	.-16     	; 0x5ee <i2c_write+0x2a>
		if(checkBit(TWCR, TWINT))
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;
     5fe:	8f ef       	ldi	r24, 0xFF	; 255
     600:	11 c0       	rjmp	.+34     	; 0x624 <i2c_write+0x60>

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     602:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     606:	88 7f       	andi	r24, 0xF8	; 248
     608:	80 34       	cpi	r24, 0x40	; 64
     60a:	21 f0       	breq	.+8      	; 0x614 <i2c_write+0x50>
		return (TW_STATUS & 0xF8);
     60c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     610:	88 7f       	andi	r24, 0xF8	; 248
     612:	08 c0       	rjmp	.+16     	; 0x624 <i2c_write+0x60>

	return I2C_NO_ERROR;
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	06 c0       	rjmp	.+12     	; 0x624 <i2c_write+0x60>
			break;
	if(timeout == 0)
		return I2C_BUS_LOCKED;

	/* Check if ACK was received */
	if (((TW_STATUS & 0xF8) != TW_MT_SLA_ACK) && ((TW_STATUS & 0xF8) != TW_MR_SLA_ACK))
     618:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     61c:	88 7f       	andi	r24, 0xF8	; 248
     61e:	88 31       	cpi	r24, 0x18	; 24
     620:	81 f7       	brne	.-32     	; 0x602 <i2c_write+0x3e>
		return (TW_STATUS & 0xF8);

	return I2C_NO_ERROR;
     622:	80 e0       	ldi	r24, 0x00	; 0
}
     624:	df 91       	pop	r29
     626:	cf 91       	pop	r28
     628:	1f 91       	pop	r17
     62a:	0f 91       	pop	r16
     62c:	08 95       	ret

0000062e <i2c_readAck>:

u8 i2c_readAck(void)
{
     62e:	0f 93       	push	r16
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);
     636:	cc eb       	ldi	r28, 0xBC	; 188
     638:	d0 e0       	ldi	r29, 0x00	; 0
     63a:	88 81       	ld	r24, Y
     63c:	62 e0       	ldi	r22, 0x02	; 2
     63e:	70 d0       	rcall	.+224    	; 0x720 <checkBit>
     640:	24 e0       	ldi	r18, 0x04	; 4
     642:	82 9f       	mul	r24, r18
     644:	c0 01       	movw	r24, r0
     646:	11 24       	eor	r1, r1
     648:	80 6c       	ori	r24, 0xC0	; 192
     64a:	88 83       	st	Y, r24
     64c:	ce ef       	ldi	r28, 0xFE	; 254
     64e:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     650:	0c eb       	ldi	r16, 0xBC	; 188
     652:	10 e0       	ldi	r17, 0x00	; 0
     654:	f8 01       	movw	r30, r16
     656:	80 81       	ld	r24, Z
     658:	67 e0       	ldi	r22, 0x07	; 7
     65a:	62 d0       	rcall	.+196    	; 0x720 <checkBit>
     65c:	88 23       	and	r24, r24
     65e:	19 f0       	breq	.+6      	; 0x666 <i2c_readAck+0x38>
		return TWDR;
     660:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     664:	03 c0       	rjmp	.+6      	; 0x66c <i2c_readAck+0x3e>
     666:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (1<<TWEA) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     668:	a9 f7       	brne	.-22     	; 0x654 <i2c_readAck+0x26>
		if(checkBit(TWCR, TWINT))
		return TWDR;

	return I2C_BUS_LOCKED;
     66a:	8f ef       	ldi	r24, 0xFF	; 255
}
     66c:	df 91       	pop	r29
     66e:	cf 91       	pop	r28
     670:	1f 91       	pop	r17
     672:	0f 91       	pop	r16
     674:	08 95       	ret

00000676 <i2c_readNak>:

u8 i2c_readNak(void)
{
     676:	0f 93       	push	r16
     678:	1f 93       	push	r17
     67a:	cf 93       	push	r28
     67c:	df 93       	push	r29
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);
     67e:	cc eb       	ldi	r28, 0xBC	; 188
     680:	d0 e0       	ldi	r29, 0x00	; 0
     682:	88 81       	ld	r24, Y
     684:	62 e0       	ldi	r22, 0x02	; 2
     686:	4c d0       	rcall	.+152    	; 0x720 <checkBit>
     688:	24 e0       	ldi	r18, 0x04	; 4
     68a:	82 9f       	mul	r24, r18
     68c:	c0 01       	movw	r24, r0
     68e:	11 24       	eor	r1, r1
     690:	80 68       	ori	r24, 0x80	; 128
     692:	88 83       	st	Y, r24
     694:	ce ef       	ldi	r28, 0xFE	; 254
     696:	df ef       	ldi	r29, 0xFF	; 255

	/* Wait until transmission is completed */
	while(--timeout > 0)
		if(checkBit(TWCR, TWINT))
     698:	0c eb       	ldi	r16, 0xBC	; 188
     69a:	10 e0       	ldi	r17, 0x00	; 0
     69c:	f8 01       	movw	r30, r16
     69e:	80 81       	ld	r24, Z
     6a0:	67 e0       	ldi	r22, 0x07	; 7
     6a2:	3e d0       	rcall	.+124    	; 0x720 <checkBit>
     6a4:	88 23       	and	r24, r24
     6a6:	19 f0       	breq	.+6      	; 0x6ae <i2c_readNak+0x38>
			return TWDR;
     6a8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     6ac:	03 c0       	rjmp	.+6      	; 0x6b4 <i2c_readNak+0x3e>
     6ae:	21 97       	sbiw	r28, 0x01	; 1
	u16 timeout=0xFFFF;
	/* Receive byte */
	TWCR = (1<<TWINT) | (checkBit(TWCR, TWEN) << TWEN);

	/* Wait until transmission is completed */
	while(--timeout > 0)
     6b0:	a9 f7       	brne	.-22     	; 0x69c <i2c_readNak+0x26>
		if(checkBit(TWCR, TWINT))
			return TWDR;

	return I2C_BUS_LOCKED;
     6b2:	8f ef       	ldi	r24, 0xFF	; 255
}
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	08 95       	ret

000006be <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     6be:	fc 01       	movw	r30, r24
     6c0:	94 2f       	mov	r25, r20
     6c2:	20 81       	ld	r18, Z
     6c4:	41 e0       	ldi	r20, 0x01	; 1
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	06 2e       	mov	r0, r22
     6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <updateBit+0x12>
     6cc:	44 0f       	add	r20, r20
     6ce:	55 1f       	adc	r21, r21
     6d0:	0a 94       	dec	r0
     6d2:	e2 f7       	brpl	.-8      	; 0x6cc <updateBit+0xe>
     6d4:	40 95       	com	r20
     6d6:	50 95       	com	r21
     6d8:	24 23       	and	r18, r20
     6da:	49 2f       	mov	r20, r25
     6dc:	50 e0       	ldi	r21, 0x00	; 0
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <updateBit+0x26>
     6e0:	44 0f       	add	r20, r20
     6e2:	55 1f       	adc	r21, r21
     6e4:	6a 95       	dec	r22
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <updateBit+0x22>
     6e8:	42 2b       	or	r20, r18
     6ea:	40 83       	st	Z, r20
     6ec:	08 95       	ret

000006ee <setBit>:
     6ee:	fc 01       	movw	r30, r24
     6f0:	40 81       	ld	r20, Z
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	30 e0       	ldi	r19, 0x00	; 0
     6f6:	02 c0       	rjmp	.+4      	; 0x6fc <setBit+0xe>
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	6a 95       	dec	r22
     6fe:	e2 f7       	brpl	.-8      	; 0x6f8 <setBit+0xa>
     700:	24 2b       	or	r18, r20
     702:	20 83       	st	Z, r18
     704:	08 95       	ret

00000706 <clearBit>:
     706:	fc 01       	movw	r30, r24
     708:	90 81       	ld	r25, Z
     70a:	21 e0       	ldi	r18, 0x01	; 1
     70c:	30 e0       	ldi	r19, 0x00	; 0
     70e:	02 c0       	rjmp	.+4      	; 0x714 <clearBit+0xe>
     710:	22 0f       	add	r18, r18
     712:	33 1f       	adc	r19, r19
     714:	6a 95       	dec	r22
     716:	e2 f7       	brpl	.-8      	; 0x710 <clearBit+0xa>
     718:	20 95       	com	r18
     71a:	29 23       	and	r18, r25
     71c:	20 83       	st	Z, r18
     71e:	08 95       	ret

00000720 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	02 c0       	rjmp	.+4      	; 0x728 <checkBit+0x8>
     724:	95 95       	asr	r25
     726:	87 95       	ror	r24
     728:	6a 95       	dec	r22
     72a:	e2 f7       	brpl	.-8      	; 0x724 <checkBit+0x4>
}
     72c:	81 70       	andi	r24, 0x01	; 1
     72e:	08 95       	ret

00000730 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     730:	cf 92       	push	r12
     732:	df 92       	push	r13
     734:	ef 92       	push	r14
     736:	ff 92       	push	r15
     738:	69 01       	movw	r12, r18
     73a:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	2c 19       	sub	r18, r12
     742:	3d 09       	sbc	r19, r13
     744:	4e 09       	sbc	r20, r14
     746:	5f 09       	sbc	r21, r15
     748:	a8 ee       	ldi	r26, 0xE8	; 232
     74a:	b3 e0       	ldi	r27, 0x03	; 3
     74c:	0e 94 3d 13 	call	0x267a	; 0x267a <__muluhisi3>
     750:	a7 01       	movw	r20, r14
     752:	96 01       	movw	r18, r12
     754:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     758:	c9 01       	movw	r24, r18
     75a:	99 23       	and	r25, r25
     75c:	24 f4       	brge	.+8      	; 0x766 <calculateError+0x36>
     75e:	88 27       	eor	r24, r24
     760:	99 27       	eor	r25, r25
     762:	82 1b       	sub	r24, r18
     764:	93 0b       	sbc	r25, r19
}
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	cf 90       	pop	r12
     76e:	08 95       	ret

00000770 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     770:	1f 92       	push	r1
     772:	0f 92       	push	r0
     774:	0f b6       	in	r0, 0x3f	; 63
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	0b b6       	in	r0, 0x3b	; 59
     77c:	0f 92       	push	r0
     77e:	8f 93       	push	r24
     780:	9f 93       	push	r25
     782:	ef 93       	push	r30
     784:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     786:	e0 91 19 01 	lds	r30, 0x0119	; 0x800119 <u8_RLastReceivedIndex>
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	8e b5       	in	r24, 0x2e	; 46
     78e:	e6 5e       	subi	r30, 0xE6	; 230
     790:	fe 4f       	sbci	r31, 0xFE	; 254
     792:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     794:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_RLastReceivedIndex>
     798:	89 30       	cpi	r24, 0x09	; 9
     79a:	30 f4       	brcc	.+12     	; 0x7a8 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     79c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <u8_RLastReceivedIndex>
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
     7a2:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <u8_RLastReceivedIndex>
     7a6:	02 c0       	rjmp	.+4      	; 0x7ac <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     7a8:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <b_RAvailable>

	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     7b2:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     7b6:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <u8_TLastRequestedIndex>
     7ba:	98 17       	cp	r25, r24
     7bc:	a1 f0       	breq	.+40     	; 0x7e6 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     7be:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	ec 5d       	subi	r30, 0xDC	; 220
     7c6:	fe 4f       	sbci	r31, 0xFE	; 254
     7c8:	80 81       	ld	r24, Z
     7ca:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     7cc:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     7d0:	89 30       	cpi	r24, 0x09	; 9
     7d2:	30 f4       	brcc	.+12     	; 0x7e0 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     7d4:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <u8_TLastTransmittedIndex>
     7d8:	8f 5f       	subi	r24, 0xFF	; 255
     7da:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <u8_TLastTransmittedIndex>
     7de:	06 c0       	rjmp	.+12     	; 0x7ec <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     7e0:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u8_TLastTransmittedIndex>
     7e4:	03 c0       	rjmp	.+6      	; 0x7ec <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     7e6:	81 e0       	ldi	r24, 0x01	; 1
     7e8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <b_TAvailable>
	}
}
     7ec:	ff 91       	pop	r31
     7ee:	ef 91       	pop	r30
     7f0:	9f 91       	pop	r25
     7f2:	8f 91       	pop	r24
     7f4:	0f 90       	pop	r0
     7f6:	0b be       	out	0x3b, r0	; 59
     7f8:	0f 90       	pop	r0
     7fa:	0f be       	out	0x3f, r0	; 63
     7fc:	0f 90       	pop	r0
     7fe:	1f 90       	pop	r1
     800:	18 95       	reti

00000802 <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	ef 92       	push	r14
     80c:	ff 92       	push	r15
     80e:	0f 93       	push	r16
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	00 d0       	rcall	.+0      	; 0x818 <calculateTopRegister+0x16>
     818:	00 d0       	rcall	.+0      	; 0x81a <calculateTopRegister+0x18>
     81a:	1f 92       	push	r1
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	48 01       	movw	r8, r16
     822:	59 01       	movw	r10, r18
     824:	41 30       	cpi	r20, 0x01	; 1
     826:	21 f0       	breq	.+8      	; 0x830 <calculateTopRegister+0x2e>
     828:	42 30       	cpi	r20, 0x02	; 2
     82a:	09 f4       	brne	.+2      	; 0x82e <calculateTopRegister+0x2c>
     82c:	88 c0       	rjmp	.+272    	; 0x93e <calculateTopRegister+0x13c>
     82e:	4c c1       	rjmp	.+664    	; 0xac8 <calculateTopRegister+0x2c6>
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	72 e1       	ldi	r23, 0x12	; 18
     834:	8a e7       	ldi	r24, 0x7A	; 122
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	a9 01       	movw	r20, r18
     83a:	98 01       	movw	r18, r16
     83c:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     840:	da 01       	movw	r26, r20
     842:	c9 01       	movw	r24, r18
     844:	01 97       	sbiw	r24, 0x01	; 1
     846:	a1 09       	sbc	r26, r1
     848:	b1 09       	sbc	r27, r1
     84a:	00 97       	sbiw	r24, 0x00	; 0
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	a2 07       	cpc	r26, r18
     850:	b1 05       	cpc	r27, r1
     852:	50 f4       	brcc	.+20     	; 0x868 <calculateTopRegister+0x66>
     854:	49 ef       	ldi	r20, 0xF9	; 249
     856:	5f ef       	ldi	r21, 0xFF	; 255
     858:	6f ef       	ldi	r22, 0xFF	; 255
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	f7 01       	movw	r30, r14
     85e:	40 83       	st	Z, r20
     860:	51 83       	std	Z+1, r21	; 0x01
     862:	62 83       	std	Z+2, r22	; 0x02
     864:	73 83       	std	Z+3, r23	; 0x03
     866:	33 c1       	rjmp	.+614    	; 0xace <calculateTopRegister+0x2cc>
     868:	60 e4       	ldi	r22, 0x40	; 64
     86a:	72 e4       	ldi	r23, 0x42	; 66
     86c:	8f e0       	ldi	r24, 0x0F	; 15
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	a5 01       	movw	r20, r10
     872:	94 01       	movw	r18, r8
     874:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     878:	da 01       	movw	r26, r20
     87a:	c9 01       	movw	r24, r18
     87c:	01 97       	sbiw	r24, 0x01	; 1
     87e:	a1 09       	sbc	r26, r1
     880:	b1 09       	sbc	r27, r1
     882:	00 97       	sbiw	r24, 0x00	; 0
     884:	f1 e0       	ldi	r31, 0x01	; 1
     886:	af 07       	cpc	r26, r31
     888:	b1 05       	cpc	r27, r1
     88a:	50 f4       	brcc	.+20     	; 0x8a0 <calculateTopRegister+0x9e>
     88c:	4a ef       	ldi	r20, 0xFA	; 250
     88e:	5f ef       	ldi	r21, 0xFF	; 255
     890:	6f ef       	ldi	r22, 0xFF	; 255
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	f7 01       	movw	r30, r14
     896:	40 83       	st	Z, r20
     898:	51 83       	std	Z+1, r21	; 0x01
     89a:	62 83       	std	Z+2, r22	; 0x02
     89c:	73 83       	std	Z+3, r23	; 0x03
     89e:	17 c1       	rjmp	.+558    	; 0xace <calculateTopRegister+0x2cc>
     8a0:	68 e4       	ldi	r22, 0x48	; 72
     8a2:	78 ee       	ldi	r23, 0xE8	; 232
     8a4:	81 e0       	ldi	r24, 0x01	; 1
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	a5 01       	movw	r20, r10
     8aa:	94 01       	movw	r18, r8
     8ac:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     8b0:	da 01       	movw	r26, r20
     8b2:	c9 01       	movw	r24, r18
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	a1 09       	sbc	r26, r1
     8b8:	b1 09       	sbc	r27, r1
     8ba:	00 97       	sbiw	r24, 0x00	; 0
     8bc:	f1 e0       	ldi	r31, 0x01	; 1
     8be:	af 07       	cpc	r26, r31
     8c0:	b1 05       	cpc	r27, r1
     8c2:	50 f4       	brcc	.+20     	; 0x8d8 <calculateTopRegister+0xd6>
     8c4:	4c ef       	ldi	r20, 0xFC	; 252
     8c6:	5f ef       	ldi	r21, 0xFF	; 255
     8c8:	6f ef       	ldi	r22, 0xFF	; 255
     8ca:	70 e0       	ldi	r23, 0x00	; 0
     8cc:	f7 01       	movw	r30, r14
     8ce:	40 83       	st	Z, r20
     8d0:	51 83       	std	Z+1, r21	; 0x01
     8d2:	62 83       	std	Z+2, r22	; 0x02
     8d4:	73 83       	std	Z+3, r23	; 0x03
     8d6:	fb c0       	rjmp	.+502    	; 0xace <calculateTopRegister+0x2cc>
     8d8:	62 e1       	ldi	r22, 0x12	; 18
     8da:	7a e7       	ldi	r23, 0x7A	; 122
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a5 01       	movw	r20, r10
     8e2:	94 01       	movw	r18, r8
     8e4:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     8e8:	da 01       	movw	r26, r20
     8ea:	c9 01       	movw	r24, r18
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	a1 09       	sbc	r26, r1
     8f0:	b1 09       	sbc	r27, r1
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	f1 e0       	ldi	r31, 0x01	; 1
     8f6:	af 07       	cpc	r26, r31
     8f8:	b1 05       	cpc	r27, r1
     8fa:	50 f4       	brcc	.+20     	; 0x910 <calculateTopRegister+0x10e>
     8fc:	4e ef       	ldi	r20, 0xFE	; 254
     8fe:	5f ef       	ldi	r21, 0xFF	; 255
     900:	6f ef       	ldi	r22, 0xFF	; 255
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	f7 01       	movw	r30, r14
     906:	40 83       	st	Z, r20
     908:	51 83       	std	Z+1, r21	; 0x01
     90a:	62 83       	std	Z+2, r22	; 0x02
     90c:	73 83       	std	Z+3, r23	; 0x03
     90e:	df c0       	rjmp	.+446    	; 0xace <calculateTopRegister+0x2cc>
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	9f ef       	ldi	r25, 0xFF	; 255
     914:	af ef       	ldi	r26, 0xFF	; 255
     916:	b0 e0       	ldi	r27, 0x00	; 0
     918:	f7 01       	movw	r30, r14
     91a:	80 83       	st	Z, r24
     91c:	91 83       	std	Z+1, r25	; 0x01
     91e:	a2 83       	std	Z+2, r26	; 0x02
     920:	b3 83       	std	Z+3, r27	; 0x03
     922:	64 e8       	ldi	r22, 0x84	; 132
     924:	7e e1       	ldi	r23, 0x1E	; 30
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	a5 01       	movw	r20, r10
     92c:	94 01       	movw	r18, r8
     92e:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     932:	da 01       	movw	r26, r20
     934:	c9 01       	movw	r24, r18
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	c8 c0       	rjmp	.+400    	; 0xace <calculateTopRegister+0x2cc>
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	72 e1       	ldi	r23, 0x12	; 18
     942:	8a e7       	ldi	r24, 0x7A	; 122
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a9 01       	movw	r20, r18
     948:	98 01       	movw	r18, r16
     94a:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     94e:	da 01       	movw	r26, r20
     950:	c9 01       	movw	r24, r18
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	a1 09       	sbc	r26, r1
     956:	b1 09       	sbc	r27, r1
     958:	8f 3f       	cpi	r24, 0xFF	; 255
     95a:	91 05       	cpc	r25, r1
     95c:	a1 05       	cpc	r26, r1
     95e:	b1 05       	cpc	r27, r1
     960:	09 f0       	breq	.+2      	; 0x964 <calculateTopRegister+0x162>
     962:	50 f4       	brcc	.+20     	; 0x978 <calculateTopRegister+0x176>
     964:	49 ef       	ldi	r20, 0xF9	; 249
     966:	5f ef       	ldi	r21, 0xFF	; 255
     968:	6f ef       	ldi	r22, 0xFF	; 255
     96a:	70 e0       	ldi	r23, 0x00	; 0
     96c:	f7 01       	movw	r30, r14
     96e:	40 83       	st	Z, r20
     970:	51 83       	std	Z+1, r21	; 0x01
     972:	62 83       	std	Z+2, r22	; 0x02
     974:	73 83       	std	Z+3, r23	; 0x03
     976:	ab c0       	rjmp	.+342    	; 0xace <calculateTopRegister+0x2cc>
     978:	60 e4       	ldi	r22, 0x40	; 64
     97a:	72 e4       	ldi	r23, 0x42	; 66
     97c:	8f e0       	ldi	r24, 0x0F	; 15
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	a5 01       	movw	r20, r10
     982:	94 01       	movw	r18, r8
     984:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     988:	da 01       	movw	r26, r20
     98a:	c9 01       	movw	r24, r18
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	a1 09       	sbc	r26, r1
     990:	b1 09       	sbc	r27, r1
     992:	8f 3f       	cpi	r24, 0xFF	; 255
     994:	91 05       	cpc	r25, r1
     996:	a1 05       	cpc	r26, r1
     998:	b1 05       	cpc	r27, r1
     99a:	09 f0       	breq	.+2      	; 0x99e <calculateTopRegister+0x19c>
     99c:	50 f4       	brcc	.+20     	; 0x9b2 <calculateTopRegister+0x1b0>
     99e:	4a ef       	ldi	r20, 0xFA	; 250
     9a0:	5f ef       	ldi	r21, 0xFF	; 255
     9a2:	6f ef       	ldi	r22, 0xFF	; 255
     9a4:	70 e0       	ldi	r23, 0x00	; 0
     9a6:	f7 01       	movw	r30, r14
     9a8:	40 83       	st	Z, r20
     9aa:	51 83       	std	Z+1, r21	; 0x01
     9ac:	62 83       	std	Z+2, r22	; 0x02
     9ae:	73 83       	std	Z+3, r23	; 0x03
     9b0:	8e c0       	rjmp	.+284    	; 0xace <calculateTopRegister+0x2cc>
     9b2:	60 e9       	ldi	r22, 0x90	; 144
     9b4:	70 ed       	ldi	r23, 0xD0	; 208
     9b6:	83 e0       	ldi	r24, 0x03	; 3
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a5 01       	movw	r20, r10
     9bc:	94 01       	movw	r18, r8
     9be:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     9c2:	da 01       	movw	r26, r20
     9c4:	c9 01       	movw	r24, r18
     9c6:	01 97       	sbiw	r24, 0x01	; 1
     9c8:	a1 09       	sbc	r26, r1
     9ca:	b1 09       	sbc	r27, r1
     9cc:	8f 3f       	cpi	r24, 0xFF	; 255
     9ce:	91 05       	cpc	r25, r1
     9d0:	a1 05       	cpc	r26, r1
     9d2:	b1 05       	cpc	r27, r1
     9d4:	09 f0       	breq	.+2      	; 0x9d8 <calculateTopRegister+0x1d6>
     9d6:	50 f4       	brcc	.+20     	; 0x9ec <calculateTopRegister+0x1ea>
     9d8:	4b ef       	ldi	r20, 0xFB	; 251
     9da:	5f ef       	ldi	r21, 0xFF	; 255
     9dc:	6f ef       	ldi	r22, 0xFF	; 255
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	f7 01       	movw	r30, r14
     9e2:	40 83       	st	Z, r20
     9e4:	51 83       	std	Z+1, r21	; 0x01
     9e6:	62 83       	std	Z+2, r22	; 0x02
     9e8:	73 83       	std	Z+3, r23	; 0x03
     9ea:	71 c0       	rjmp	.+226    	; 0xace <calculateTopRegister+0x2cc>
     9ec:	68 e4       	ldi	r22, 0x48	; 72
     9ee:	78 ee       	ldi	r23, 0xE8	; 232
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	a5 01       	movw	r20, r10
     9f6:	94 01       	movw	r18, r8
     9f8:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     9fc:	da 01       	movw	r26, r20
     9fe:	c9 01       	movw	r24, r18
     a00:	01 97       	sbiw	r24, 0x01	; 1
     a02:	a1 09       	sbc	r26, r1
     a04:	b1 09       	sbc	r27, r1
     a06:	8f 3f       	cpi	r24, 0xFF	; 255
     a08:	91 05       	cpc	r25, r1
     a0a:	a1 05       	cpc	r26, r1
     a0c:	b1 05       	cpc	r27, r1
     a0e:	09 f0       	breq	.+2      	; 0xa12 <calculateTopRegister+0x210>
     a10:	50 f4       	brcc	.+20     	; 0xa26 <calculateTopRegister+0x224>
     a12:	4c ef       	ldi	r20, 0xFC	; 252
     a14:	5f ef       	ldi	r21, 0xFF	; 255
     a16:	6f ef       	ldi	r22, 0xFF	; 255
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	f7 01       	movw	r30, r14
     a1c:	40 83       	st	Z, r20
     a1e:	51 83       	std	Z+1, r21	; 0x01
     a20:	62 83       	std	Z+2, r22	; 0x02
     a22:	73 83       	std	Z+3, r23	; 0x03
     a24:	54 c0       	rjmp	.+168    	; 0xace <calculateTopRegister+0x2cc>
     a26:	64 e2       	ldi	r22, 0x24	; 36
     a28:	74 ef       	ldi	r23, 0xF4	; 244
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	a5 01       	movw	r20, r10
     a30:	94 01       	movw	r18, r8
     a32:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     a36:	da 01       	movw	r26, r20
     a38:	c9 01       	movw	r24, r18
     a3a:	01 97       	sbiw	r24, 0x01	; 1
     a3c:	a1 09       	sbc	r26, r1
     a3e:	b1 09       	sbc	r27, r1
     a40:	8f 3f       	cpi	r24, 0xFF	; 255
     a42:	91 05       	cpc	r25, r1
     a44:	a1 05       	cpc	r26, r1
     a46:	b1 05       	cpc	r27, r1
     a48:	09 f0       	breq	.+2      	; 0xa4c <calculateTopRegister+0x24a>
     a4a:	50 f4       	brcc	.+20     	; 0xa60 <calculateTopRegister+0x25e>
     a4c:	4d ef       	ldi	r20, 0xFD	; 253
     a4e:	5f ef       	ldi	r21, 0xFF	; 255
     a50:	6f ef       	ldi	r22, 0xFF	; 255
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	f7 01       	movw	r30, r14
     a56:	40 83       	st	Z, r20
     a58:	51 83       	std	Z+1, r21	; 0x01
     a5a:	62 83       	std	Z+2, r22	; 0x02
     a5c:	73 83       	std	Z+3, r23	; 0x03
     a5e:	37 c0       	rjmp	.+110    	; 0xace <calculateTopRegister+0x2cc>
     a60:	62 e1       	ldi	r22, 0x12	; 18
     a62:	7a e7       	ldi	r23, 0x7A	; 122
     a64:	80 e0       	ldi	r24, 0x00	; 0
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	a5 01       	movw	r20, r10
     a6a:	94 01       	movw	r18, r8
     a6c:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     a70:	da 01       	movw	r26, r20
     a72:	c9 01       	movw	r24, r18
     a74:	01 97       	sbiw	r24, 0x01	; 1
     a76:	a1 09       	sbc	r26, r1
     a78:	b1 09       	sbc	r27, r1
     a7a:	8f 3f       	cpi	r24, 0xFF	; 255
     a7c:	91 05       	cpc	r25, r1
     a7e:	a1 05       	cpc	r26, r1
     a80:	b1 05       	cpc	r27, r1
     a82:	09 f0       	breq	.+2      	; 0xa86 <calculateTopRegister+0x284>
     a84:	50 f4       	brcc	.+20     	; 0xa9a <calculateTopRegister+0x298>
     a86:	4e ef       	ldi	r20, 0xFE	; 254
     a88:	5f ef       	ldi	r21, 0xFF	; 255
     a8a:	6f ef       	ldi	r22, 0xFF	; 255
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	f7 01       	movw	r30, r14
     a90:	40 83       	st	Z, r20
     a92:	51 83       	std	Z+1, r21	; 0x01
     a94:	62 83       	std	Z+2, r22	; 0x02
     a96:	73 83       	std	Z+3, r23	; 0x03
     a98:	1a c0       	rjmp	.+52     	; 0xace <calculateTopRegister+0x2cc>
     a9a:	8f ef       	ldi	r24, 0xFF	; 255
     a9c:	9f ef       	ldi	r25, 0xFF	; 255
     a9e:	af ef       	ldi	r26, 0xFF	; 255
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	f7 01       	movw	r30, r14
     aa4:	80 83       	st	Z, r24
     aa6:	91 83       	std	Z+1, r25	; 0x01
     aa8:	a2 83       	std	Z+2, r26	; 0x02
     aaa:	b3 83       	std	Z+3, r27	; 0x03
     aac:	64 e8       	ldi	r22, 0x84	; 132
     aae:	7e e1       	ldi	r23, 0x1E	; 30
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	a5 01       	movw	r20, r10
     ab6:	94 01       	movw	r18, r8
     ab8:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
     abc:	da 01       	movw	r26, r20
     abe:	c9 01       	movw	r24, r18
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	a1 09       	sbc	r26, r1
     ac4:	b1 09       	sbc	r27, r1
     ac6:	03 c0       	rjmp	.+6      	; 0xace <calculateTopRegister+0x2cc>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	dc 01       	movw	r26, r24
     ace:	0f 90       	pop	r0
     ad0:	0f 90       	pop	r0
     ad2:	0f 90       	pop	r0
     ad4:	0f 90       	pop	r0
     ad6:	0f 90       	pop	r0
     ad8:	df 91       	pop	r29
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	ff 90       	pop	r15
     ae2:	ef 90       	pop	r14
     ae4:	bf 90       	pop	r11
     ae6:	af 90       	pop	r10
     ae8:	9f 90       	pop	r9
     aea:	8f 90       	pop	r8
     aec:	08 95       	ret

00000aee <__vector_15>:
     aee:	1f 92       	push	r1
     af0:	0f 92       	push	r0
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	0f 92       	push	r0
     af6:	11 24       	eor	r1, r1
     af8:	0b b6       	in	r0, 0x3b	; 59
     afa:	0f 92       	push	r0
     afc:	2f 93       	push	r18
     afe:	3f 93       	push	r19
     b00:	4f 93       	push	r20
     b02:	5f 93       	push	r21
     b04:	6f 93       	push	r22
     b06:	7f 93       	push	r23
     b08:	8f 93       	push	r24
     b0a:	9f 93       	push	r25
     b0c:	af 93       	push	r26
     b0e:	bf 93       	push	r27
     b10:	ef 93       	push	r30
     b12:	ff 93       	push	r31
     b14:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <p_timer1Callbacks>
     b18:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <p_timer1Callbacks+0x1>
     b1c:	09 95       	icall
     b1e:	ff 91       	pop	r31
     b20:	ef 91       	pop	r30
     b22:	bf 91       	pop	r27
     b24:	af 91       	pop	r26
     b26:	9f 91       	pop	r25
     b28:	8f 91       	pop	r24
     b2a:	7f 91       	pop	r23
     b2c:	6f 91       	pop	r22
     b2e:	5f 91       	pop	r21
     b30:	4f 91       	pop	r20
     b32:	3f 91       	pop	r19
     b34:	2f 91       	pop	r18
     b36:	0f 90       	pop	r0
     b38:	0b be       	out	0x3b, r0	; 59
     b3a:	0f 90       	pop	r0
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	0f 90       	pop	r0
     b40:	1f 90       	pop	r1
     b42:	18 95       	reti

00000b44 <__vector_13>:
     b44:	1f 92       	push	r1
     b46:	0f 92       	push	r0
     b48:	0f b6       	in	r0, 0x3f	; 63
     b4a:	0f 92       	push	r0
     b4c:	11 24       	eor	r1, r1
     b4e:	0b b6       	in	r0, 0x3b	; 59
     b50:	0f 92       	push	r0
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	2f 93       	push	r18
     b58:	3f 93       	push	r19
     b5a:	4f 93       	push	r20
     b5c:	5f 93       	push	r21
     b5e:	6f 93       	push	r22
     b60:	7f 93       	push	r23
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
     b6e:	ef 93       	push	r30
     b70:	ff 93       	push	r31
     b72:	c1 e8       	ldi	r28, 0x81	; 129
     b74:	d0 e0       	ldi	r29, 0x00	; 0
     b76:	88 81       	ld	r24, Y
     b78:	64 e0       	ldi	r22, 0x04	; 4
     b7a:	d2 dd       	rcall	.-1116   	; 0x720 <checkBit>
     b7c:	18 2f       	mov	r17, r24
     b7e:	88 81       	ld	r24, Y
     b80:	63 e0       	ldi	r22, 0x03	; 3
     b82:	ce dd       	rcall	.-1124   	; 0x720 <checkBit>
     b84:	c1 2f       	mov	r28, r17
     b86:	cc 0f       	add	r28, r28
     b88:	cc 0f       	add	r28, r28
     b8a:	cc 0f       	add	r28, r28
     b8c:	24 e0       	ldi	r18, 0x04	; 4
     b8e:	82 9f       	mul	r24, r18
     b90:	c0 01       	movw	r24, r0
     b92:	11 24       	eor	r1, r1
     b94:	c8 2b       	or	r28, r24
     b96:	00 e8       	ldi	r16, 0x80	; 128
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 81       	ld	r24, Z
     b9e:	61 e0       	ldi	r22, 0x01	; 1
     ba0:	bf dd       	rcall	.-1154   	; 0x720 <checkBit>
     ba2:	d8 2f       	mov	r29, r24
     ba4:	f8 01       	movw	r30, r16
     ba6:	80 81       	ld	r24, Z
     ba8:	60 e0       	ldi	r22, 0x00	; 0
     baa:	ba dd       	rcall	.-1164   	; 0x720 <checkBit>
     bac:	dd 0f       	add	r29, r29
     bae:	8c 2b       	or	r24, r28
     bb0:	8d 2b       	or	r24, r29
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__vector_13+0x78>
     bb6:	84 30       	cpi	r24, 0x04	; 4
     bb8:	19 f4       	brne	.+6      	; 0xbc0 <__vector_13+0x7c>
     bba:	08 c0       	rjmp	.+16     	; 0xbcc <__vector_13+0x88>
     bbc:	80 fd       	sbrc	r24, 0
     bbe:	06 c0       	rjmp	.+12     	; 0xbcc <__vector_13+0x88>
     bc0:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer1Callbacks+0x2>
     bc4:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer1Callbacks+0x3>
     bc8:	09 95       	icall
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <__vector_13+0x92>
     bcc:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <p_timer1Callbacks>
     bd0:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <p_timer1Callbacks+0x1>
     bd4:	09 95       	icall
     bd6:	ff 91       	pop	r31
     bd8:	ef 91       	pop	r30
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	bf 91       	pop	r27
     be0:	af 91       	pop	r26
     be2:	9f 91       	pop	r25
     be4:	8f 91       	pop	r24
     be6:	7f 91       	pop	r23
     be8:	6f 91       	pop	r22
     bea:	5f 91       	pop	r21
     bec:	4f 91       	pop	r20
     bee:	3f 91       	pop	r19
     bf0:	2f 91       	pop	r18
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	0f 90       	pop	r0
     bf8:	0b be       	out	0x3b, r0	; 59
     bfa:	0f 90       	pop	r0
     bfc:	0f be       	out	0x3f, r0	; 63
     bfe:	0f 90       	pop	r0
     c00:	1f 90       	pop	r1
     c02:	18 95       	reti

00000c04 <__vector_14>:
     c04:	1f 92       	push	r1
     c06:	0f 92       	push	r0
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	0f 92       	push	r0
     c0c:	11 24       	eor	r1, r1
     c0e:	0b b6       	in	r0, 0x3b	; 59
     c10:	0f 92       	push	r0
     c12:	2f 93       	push	r18
     c14:	3f 93       	push	r19
     c16:	4f 93       	push	r20
     c18:	5f 93       	push	r21
     c1a:	6f 93       	push	r22
     c1c:	7f 93       	push	r23
     c1e:	8f 93       	push	r24
     c20:	9f 93       	push	r25
     c22:	af 93       	push	r26
     c24:	bf 93       	push	r27
     c26:	ef 93       	push	r30
     c28:	ff 93       	push	r31
     c2a:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer1Callbacks+0x4>
     c2e:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer1Callbacks+0x5>
     c32:	09 95       	icall
     c34:	ff 91       	pop	r31
     c36:	ef 91       	pop	r30
     c38:	bf 91       	pop	r27
     c3a:	af 91       	pop	r26
     c3c:	9f 91       	pop	r25
     c3e:	8f 91       	pop	r24
     c40:	7f 91       	pop	r23
     c42:	6f 91       	pop	r22
     c44:	5f 91       	pop	r21
     c46:	4f 91       	pop	r20
     c48:	3f 91       	pop	r19
     c4a:	2f 91       	pop	r18
     c4c:	0f 90       	pop	r0
     c4e:	0b be       	out	0x3b, r0	; 59
     c50:	0f 90       	pop	r0
     c52:	0f be       	out	0x3f, r0	; 63
     c54:	0f 90       	pop	r0
     c56:	1f 90       	pop	r1
     c58:	18 95       	reti

00000c5a <__vector_12>:
     c5a:	1f 92       	push	r1
     c5c:	0f 92       	push	r0
     c5e:	0f b6       	in	r0, 0x3f	; 63
     c60:	0f 92       	push	r0
     c62:	11 24       	eor	r1, r1
     c64:	0b b6       	in	r0, 0x3b	; 59
     c66:	0f 92       	push	r0
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	2f 93       	push	r18
     c6e:	3f 93       	push	r19
     c70:	4f 93       	push	r20
     c72:	5f 93       	push	r21
     c74:	6f 93       	push	r22
     c76:	7f 93       	push	r23
     c78:	8f 93       	push	r24
     c7a:	9f 93       	push	r25
     c7c:	af 93       	push	r26
     c7e:	bf 93       	push	r27
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	ef 93       	push	r30
     c86:	ff 93       	push	r31
     c88:	c1 e8       	ldi	r28, 0x81	; 129
     c8a:	d0 e0       	ldi	r29, 0x00	; 0
     c8c:	88 81       	ld	r24, Y
     c8e:	64 e0       	ldi	r22, 0x04	; 4
     c90:	47 dd       	rcall	.-1394   	; 0x720 <checkBit>
     c92:	18 2f       	mov	r17, r24
     c94:	88 81       	ld	r24, Y
     c96:	63 e0       	ldi	r22, 0x03	; 3
     c98:	43 dd       	rcall	.-1402   	; 0x720 <checkBit>
     c9a:	c1 2f       	mov	r28, r17
     c9c:	cc 0f       	add	r28, r28
     c9e:	cc 0f       	add	r28, r28
     ca0:	cc 0f       	add	r28, r28
     ca2:	24 e0       	ldi	r18, 0x04	; 4
     ca4:	82 9f       	mul	r24, r18
     ca6:	c0 01       	movw	r24, r0
     ca8:	11 24       	eor	r1, r1
     caa:	c8 2b       	or	r28, r24
     cac:	00 e8       	ldi	r16, 0x80	; 128
     cae:	10 e0       	ldi	r17, 0x00	; 0
     cb0:	f8 01       	movw	r30, r16
     cb2:	80 81       	ld	r24, Z
     cb4:	61 e0       	ldi	r22, 0x01	; 1
     cb6:	34 dd       	rcall	.-1432   	; 0x720 <checkBit>
     cb8:	d8 2f       	mov	r29, r24
     cba:	f8 01       	movw	r30, r16
     cbc:	80 81       	ld	r24, Z
     cbe:	60 e0       	ldi	r22, 0x00	; 0
     cc0:	2f dd       	rcall	.-1442   	; 0x720 <checkBit>
     cc2:	dd 0f       	add	r29, r29
     cc4:	8c 2b       	or	r24, r28
     cc6:	8d 2b       	or	r24, r29
     cc8:	88 30       	cpi	r24, 0x08	; 8
     cca:	10 f0       	brcs	.+4      	; 0xcd0 <__vector_12+0x76>
     ccc:	80 ff       	sbrs	r24, 0
     cce:	06 c0       	rjmp	.+12     	; 0xcdc <__vector_12+0x82>
     cd0:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p_timer1Callbacks+0x6>
     cd4:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p_timer1Callbacks+0x7>
     cd8:	09 95       	icall
     cda:	05 c0       	rjmp	.+10     	; 0xce6 <__vector_12+0x8c>
     cdc:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <p_timer1Callbacks>
     ce0:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <p_timer1Callbacks+0x1>
     ce4:	09 95       	icall
     ce6:	ff 91       	pop	r31
     ce8:	ef 91       	pop	r30
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	1f 91       	pop	r17
     d04:	0f 91       	pop	r16
     d06:	0f 90       	pop	r0
     d08:	0b be       	out	0x3b, r0	; 59
     d0a:	0f 90       	pop	r0
     d0c:	0f be       	out	0x3f, r0	; 63
     d0e:	0f 90       	pop	r0
     d10:	1f 90       	pop	r1
     d12:	18 95       	reti

00000d14 <__vector_11>:
     d14:	1f 92       	push	r1
     d16:	0f 92       	push	r0
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	0f 92       	push	r0
     d1c:	11 24       	eor	r1, r1
     d1e:	0b b6       	in	r0, 0x3b	; 59
     d20:	0f 92       	push	r0
     d22:	2f 93       	push	r18
     d24:	3f 93       	push	r19
     d26:	4f 93       	push	r20
     d28:	5f 93       	push	r21
     d2a:	6f 93       	push	r22
     d2c:	7f 93       	push	r23
     d2e:	8f 93       	push	r24
     d30:	9f 93       	push	r25
     d32:	af 93       	push	r26
     d34:	bf 93       	push	r27
     d36:	ef 93       	push	r30
     d38:	ff 93       	push	r31
     d3a:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p_timer2Callbacks>
     d3e:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <p_timer2Callbacks+0x1>
     d42:	09 95       	icall
     d44:	ff 91       	pop	r31
     d46:	ef 91       	pop	r30
     d48:	bf 91       	pop	r27
     d4a:	af 91       	pop	r26
     d4c:	9f 91       	pop	r25
     d4e:	8f 91       	pop	r24
     d50:	7f 91       	pop	r23
     d52:	6f 91       	pop	r22
     d54:	5f 91       	pop	r21
     d56:	4f 91       	pop	r20
     d58:	3f 91       	pop	r19
     d5a:	2f 91       	pop	r18
     d5c:	0f 90       	pop	r0
     d5e:	0b be       	out	0x3b, r0	; 59
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <__vector_9>:
     d6a:	1f 92       	push	r1
     d6c:	0f 92       	push	r0
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	0f 92       	push	r0
     d72:	11 24       	eor	r1, r1
     d74:	0b b6       	in	r0, 0x3b	; 59
     d76:	0f 92       	push	r0
     d78:	2f 93       	push	r18
     d7a:	3f 93       	push	r19
     d7c:	4f 93       	push	r20
     d7e:	5f 93       	push	r21
     d80:	6f 93       	push	r22
     d82:	7f 93       	push	r23
     d84:	8f 93       	push	r24
     d86:	9f 93       	push	r25
     d88:	af 93       	push	r26
     d8a:	bf 93       	push	r27
     d8c:	ef 93       	push	r30
     d8e:	ff 93       	push	r31
     d90:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     d94:	63 e0       	ldi	r22, 0x03	; 3
     d96:	c4 dc       	rcall	.-1656   	; 0x720 <checkBit>
     d98:	81 11       	cpse	r24, r1
     d9a:	0b c0       	rjmp	.+22     	; 0xdb2 <__vector_9+0x48>
     d9c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     da0:	83 70       	andi	r24, 0x03	; 3
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	31 f0       	breq	.+12     	; 0xdb2 <__vector_9+0x48>
     da6:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <p_timer2Callbacks+0x2>
     daa:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <p_timer2Callbacks+0x3>
     dae:	09 95       	icall
     db0:	05 c0       	rjmp	.+10     	; 0xdbc <__vector_9+0x52>
     db2:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <p_timer2Callbacks>
     db6:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <p_timer2Callbacks+0x1>
     dba:	09 95       	icall
     dbc:	ff 91       	pop	r31
     dbe:	ef 91       	pop	r30
     dc0:	bf 91       	pop	r27
     dc2:	af 91       	pop	r26
     dc4:	9f 91       	pop	r25
     dc6:	8f 91       	pop	r24
     dc8:	7f 91       	pop	r23
     dca:	6f 91       	pop	r22
     dcc:	5f 91       	pop	r21
     dce:	4f 91       	pop	r20
     dd0:	3f 91       	pop	r19
     dd2:	2f 91       	pop	r18
     dd4:	0f 90       	pop	r0
     dd6:	0b be       	out	0x3b, r0	; 59
     dd8:	0f 90       	pop	r0
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	0f 90       	pop	r0
     dde:	1f 90       	pop	r1
     de0:	18 95       	reti

00000de2 <__vector_10>:
     de2:	1f 92       	push	r1
     de4:	0f 92       	push	r0
     de6:	0f b6       	in	r0, 0x3f	; 63
     de8:	0f 92       	push	r0
     dea:	11 24       	eor	r1, r1
     dec:	0b b6       	in	r0, 0x3b	; 59
     dee:	0f 92       	push	r0
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <p_timer2Callbacks+0x4>
     e0c:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <p_timer2Callbacks+0x5>
     e10:	09 95       	icall
     e12:	ff 91       	pop	r31
     e14:	ef 91       	pop	r30
     e16:	bf 91       	pop	r27
     e18:	af 91       	pop	r26
     e1a:	9f 91       	pop	r25
     e1c:	8f 91       	pop	r24
     e1e:	7f 91       	pop	r23
     e20:	6f 91       	pop	r22
     e22:	5f 91       	pop	r21
     e24:	4f 91       	pop	r20
     e26:	3f 91       	pop	r19
     e28:	2f 91       	pop	r18
     e2a:	0f 90       	pop	r0
     e2c:	0b be       	out	0x3b, r0	; 59
     e2e:	0f 90       	pop	r0
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	0f 90       	pop	r0
     e34:	1f 90       	pop	r1
     e36:	18 95       	reti

00000e38 <timer_init>:
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	0f 93       	push	r16
     e3e:	1f 93       	push	r17
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	cd b7       	in	r28, 0x3d	; 61
     e46:	de b7       	in	r29, 0x3e	; 62
     e48:	29 97       	sbiw	r28, 0x09	; 9
     e4a:	0f b6       	in	r0, 0x3f	; 63
     e4c:	f8 94       	cli
     e4e:	de bf       	out	0x3e, r29	; 62
     e50:	0f be       	out	0x3f, r0	; 63
     e52:	cd bf       	out	0x3d, r28	; 61
     e54:	4d 83       	std	Y+5, r20	; 0x05
     e56:	5e 83       	std	Y+6, r21	; 0x06
     e58:	6f 83       	std	Y+7, r22	; 0x07
     e5a:	78 87       	std	Y+8, r23	; 0x08
     e5c:	89 87       	std	Y+9, r24	; 0x09
     e5e:	0e 81       	ldd	r16, Y+6	; 0x06
     e60:	1f 81       	ldd	r17, Y+7	; 0x07
     e62:	28 85       	ldd	r18, Y+8	; 0x08
     e64:	39 85       	ldd	r19, Y+9	; 0x09
     e66:	19 82       	std	Y+1, r1	; 0x01
     e68:	1a 82       	std	Y+2, r1	; 0x02
     e6a:	1b 82       	std	Y+3, r1	; 0x03
     e6c:	1c 82       	std	Y+4, r1	; 0x04
     e6e:	41 30       	cpi	r20, 0x01	; 1
     e70:	21 f0       	breq	.+8      	; 0xe7a <timer_init+0x42>
     e72:	42 30       	cpi	r20, 0x02	; 2
     e74:	09 f4       	brne	.+2      	; 0xe78 <timer_init+0x40>
     e76:	95 c0       	rjmp	.+298    	; 0xfa2 <timer_init+0x16a>
     e78:	1e c1       	rjmp	.+572    	; 0x10b6 <timer_init+0x27e>
     e7a:	09 3f       	cpi	r16, 0xF9	; 249
     e7c:	8f ef       	ldi	r24, 0xFF	; 255
     e7e:	18 07       	cpc	r17, r24
     e80:	28 07       	cpc	r18, r24
     e82:	31 05       	cpc	r19, r1
     e84:	28 f0       	brcs	.+10     	; 0xe90 <timer_init+0x58>
     e86:	09 83       	std	Y+1, r16	; 0x01
     e88:	1a 83       	std	Y+2, r17	; 0x02
     e8a:	2b 83       	std	Y+3, r18	; 0x03
     e8c:	3c 83       	std	Y+4, r19	; 0x04
     e8e:	15 c0       	rjmp	.+42     	; 0xeba <timer_init+0x82>
     e90:	ce 01       	movw	r24, r28
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	7c 01       	movw	r14, r24
     e96:	4d 81       	ldd	r20, Y+5	; 0x05
     e98:	5e 81       	ldd	r21, Y+6	; 0x06
     e9a:	6f 81       	ldd	r22, Y+7	; 0x07
     e9c:	78 85       	ldd	r23, Y+8	; 0x08
     e9e:	89 85       	ldd	r24, Y+9	; 0x09
     ea0:	b0 dc       	rcall	.-1696   	; 0x802 <calculateTopRegister>
     ea2:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     ea6:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     eaa:	64 e0       	ldi	r22, 0x04	; 4
     eac:	81 e8       	ldi	r24, 0x81	; 129
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	1e dc       	rcall	.-1988   	; 0x6ee <setBit>
     eb2:	63 e0       	ldi	r22, 0x03	; 3
     eb4:	81 e8       	ldi	r24, 0x81	; 129
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	1a dc       	rcall	.-1996   	; 0x6ee <setBit>
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	ab 81       	ldd	r26, Y+3	; 0x03
     ec0:	bc 81       	ldd	r27, Y+4	; 0x04
     ec2:	8c 3f       	cpi	r24, 0xFC	; 252
     ec4:	2f ef       	ldi	r18, 0xFF	; 255
     ec6:	92 07       	cpc	r25, r18
     ec8:	a2 07       	cpc	r26, r18
     eca:	b1 05       	cpc	r27, r1
     ecc:	59 f1       	breq	.+86     	; 0xf24 <timer_init+0xec>
     ece:	60 f4       	brcc	.+24     	; 0xee8 <timer_init+0xb0>
     ed0:	89 3f       	cpi	r24, 0xF9	; 249
     ed2:	2f ef       	ldi	r18, 0xFF	; 255
     ed4:	92 07       	cpc	r25, r18
     ed6:	a2 07       	cpc	r26, r18
     ed8:	b1 05       	cpc	r27, r1
     eda:	91 f0       	breq	.+36     	; 0xf00 <timer_init+0xc8>
     edc:	8a 3f       	cpi	r24, 0xFA	; 250
     ede:	9f 4f       	sbci	r25, 0xFF	; 255
     ee0:	af 4f       	sbci	r26, 0xFF	; 255
     ee2:	b1 05       	cpc	r27, r1
     ee4:	b1 f0       	breq	.+44     	; 0xf12 <timer_init+0xda>
     ee6:	38 c0       	rjmp	.+112    	; 0xf58 <timer_init+0x120>
     ee8:	8e 3f       	cpi	r24, 0xFE	; 254
     eea:	2f ef       	ldi	r18, 0xFF	; 255
     eec:	92 07       	cpc	r25, r18
     eee:	a2 07       	cpc	r26, r18
     ef0:	b1 05       	cpc	r27, r1
     ef2:	09 f1       	breq	.+66     	; 0xf36 <timer_init+0xfe>
     ef4:	8f 3f       	cpi	r24, 0xFF	; 255
     ef6:	9f 4f       	sbci	r25, 0xFF	; 255
     ef8:	af 4f       	sbci	r26, 0xFF	; 255
     efa:	b1 05       	cpc	r27, r1
     efc:	29 f1       	breq	.+74     	; 0xf48 <timer_init+0x110>
     efe:	2c c0       	rjmp	.+88     	; 0xf58 <timer_init+0x120>
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	ab 83       	std	Y+3, r26	; 0x03
     f0e:	bc 83       	std	Y+4, r27	; 0x04
     f10:	23 c0       	rjmp	.+70     	; 0xf58 <timer_init+0x120>
     f12:	82 e0       	ldi	r24, 0x02	; 2
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	ab 83       	std	Y+3, r26	; 0x03
     f20:	bc 83       	std	Y+4, r27	; 0x04
     f22:	1a c0       	rjmp	.+52     	; 0xf58 <timer_init+0x120>
     f24:	83 e0       	ldi	r24, 0x03	; 3
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a0 e0       	ldi	r26, 0x00	; 0
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	ab 83       	std	Y+3, r26	; 0x03
     f32:	bc 83       	std	Y+4, r27	; 0x04
     f34:	11 c0       	rjmp	.+34     	; 0xf58 <timer_init+0x120>
     f36:	84 e0       	ldi	r24, 0x04	; 4
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	ab 83       	std	Y+3, r26	; 0x03
     f44:	bc 83       	std	Y+4, r27	; 0x04
     f46:	08 c0       	rjmp	.+16     	; 0xf58 <timer_init+0x120>
     f48:	85 e0       	ldi	r24, 0x05	; 5
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	89 83       	std	Y+1, r24	; 0x01
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	ab 83       	std	Y+3, r26	; 0x03
     f56:	bc 83       	std	Y+4, r27	; 0x04
     f58:	49 81       	ldd	r20, Y+1	; 0x01
     f5a:	5a 81       	ldd	r21, Y+2	; 0x02
     f5c:	6b 81       	ldd	r22, Y+3	; 0x03
     f5e:	7c 81       	ldd	r23, Y+4	; 0x04
     f60:	76 95       	lsr	r23
     f62:	67 95       	ror	r22
     f64:	57 95       	ror	r21
     f66:	47 95       	ror	r20
     f68:	76 95       	lsr	r23
     f6a:	67 95       	ror	r22
     f6c:	57 95       	ror	r21
     f6e:	47 95       	ror	r20
     f70:	41 70       	andi	r20, 0x01	; 1
     f72:	62 e0       	ldi	r22, 0x02	; 2
     f74:	88 e3       	ldi	r24, 0x38	; 56
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	a2 db       	rcall	.-2236   	; 0x6be <updateBit>
     f7a:	49 81       	ldd	r20, Y+1	; 0x01
     f7c:	5a 81       	ldd	r21, Y+2	; 0x02
     f7e:	6b 81       	ldd	r22, Y+3	; 0x03
     f80:	7c 81       	ldd	r23, Y+4	; 0x04
     f82:	76 95       	lsr	r23
     f84:	67 95       	ror	r22
     f86:	57 95       	ror	r21
     f88:	47 95       	ror	r20
     f8a:	41 70       	andi	r20, 0x01	; 1
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	88 e3       	ldi	r24, 0x38	; 56
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	95 db       	rcall	.-2262   	; 0x6be <updateBit>
     f94:	49 81       	ldd	r20, Y+1	; 0x01
     f96:	41 70       	andi	r20, 0x01	; 1
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	88 e3       	ldi	r24, 0x38	; 56
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	8f db       	rcall	.-2274   	; 0x6be <updateBit>
     fa0:	8a c0       	rjmp	.+276    	; 0x10b6 <timer_init+0x27e>
     fa2:	09 3f       	cpi	r16, 0xF9	; 249
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	18 07       	cpc	r17, r24
     fa8:	28 07       	cpc	r18, r24
     faa:	31 05       	cpc	r19, r1
     fac:	28 f0       	brcs	.+10     	; 0xfb8 <timer_init+0x180>
     fae:	09 83       	std	Y+1, r16	; 0x01
     fb0:	1a 83       	std	Y+2, r17	; 0x02
     fb2:	2b 83       	std	Y+3, r18	; 0x03
     fb4:	3c 83       	std	Y+4, r19	; 0x04
     fb6:	0f c0       	rjmp	.+30     	; 0xfd6 <timer_init+0x19e>
     fb8:	ce 01       	movw	r24, r28
     fba:	01 96       	adiw	r24, 0x01	; 1
     fbc:	7c 01       	movw	r14, r24
     fbe:	4d 81       	ldd	r20, Y+5	; 0x05
     fc0:	5e 81       	ldd	r21, Y+6	; 0x06
     fc2:	6f 81       	ldd	r22, Y+7	; 0x07
     fc4:	78 85       	ldd	r23, Y+8	; 0x08
     fc6:	89 85       	ldd	r24, Y+9	; 0x09
     fc8:	1c dc       	rcall	.-1992   	; 0x802 <calculateTopRegister>
     fca:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	80 eb       	ldi	r24, 0xB0	; 176
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	8c db       	rcall	.-2280   	; 0x6ee <setBit>
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	ab 81       	ldd	r26, Y+3	; 0x03
     fdc:	bc 81       	ldd	r27, Y+4	; 0x04
     fde:	fc 01       	movw	r30, r24
     fe0:	37 96       	adiw	r30, 0x07	; 7
     fe2:	e7 30       	cpi	r30, 0x07	; 7
     fe4:	f1 05       	cpc	r31, r1
     fe6:	08 f0       	brcs	.+2      	; 0xfea <timer_init+0x1b2>
     fe8:	42 c0       	rjmp	.+132    	; 0x106e <timer_init+0x236>
     fea:	ea 5b       	subi	r30, 0xBA	; 186
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	0c 94 25 13 	jmp	0x264a	; 0x264a <__tablejump2__>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	a0 e0       	ldi	r26, 0x00	; 0
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	ab 83       	std	Y+3, r26	; 0x03
    1000:	bc 83       	std	Y+4, r27	; 0x04
    1002:	35 c0       	rjmp	.+106    	; 0x106e <timer_init+0x236>
    1004:	82 e0       	ldi	r24, 0x02	; 2
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	a0 e0       	ldi	r26, 0x00	; 0
    100a:	b0 e0       	ldi	r27, 0x00	; 0
    100c:	89 83       	std	Y+1, r24	; 0x01
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	ab 83       	std	Y+3, r26	; 0x03
    1012:	bc 83       	std	Y+4, r27	; 0x04
    1014:	2c c0       	rjmp	.+88     	; 0x106e <timer_init+0x236>
    1016:	83 e0       	ldi	r24, 0x03	; 3
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a0 e0       	ldi	r26, 0x00	; 0
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	89 83       	std	Y+1, r24	; 0x01
    1020:	9a 83       	std	Y+2, r25	; 0x02
    1022:	ab 83       	std	Y+3, r26	; 0x03
    1024:	bc 83       	std	Y+4, r27	; 0x04
    1026:	23 c0       	rjmp	.+70     	; 0x106e <timer_init+0x236>
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	a0 e0       	ldi	r26, 0x00	; 0
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	ab 83       	std	Y+3, r26	; 0x03
    1036:	bc 83       	std	Y+4, r27	; 0x04
    1038:	1a c0       	rjmp	.+52     	; 0x106e <timer_init+0x236>
    103a:	85 e0       	ldi	r24, 0x05	; 5
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	a0 e0       	ldi	r26, 0x00	; 0
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	9a 83       	std	Y+2, r25	; 0x02
    1046:	ab 83       	std	Y+3, r26	; 0x03
    1048:	bc 83       	std	Y+4, r27	; 0x04
    104a:	11 c0       	rjmp	.+34     	; 0x106e <timer_init+0x236>
    104c:	86 e0       	ldi	r24, 0x06	; 6
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	a0 e0       	ldi	r26, 0x00	; 0
    1052:	b0 e0       	ldi	r27, 0x00	; 0
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	9a 83       	std	Y+2, r25	; 0x02
    1058:	ab 83       	std	Y+3, r26	; 0x03
    105a:	bc 83       	std	Y+4, r27	; 0x04
    105c:	08 c0       	rjmp	.+16     	; 0x106e <timer_init+0x236>
    105e:	87 e0       	ldi	r24, 0x07	; 7
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	a0 e0       	ldi	r26, 0x00	; 0
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	89 83       	std	Y+1, r24	; 0x01
    1068:	9a 83       	std	Y+2, r25	; 0x02
    106a:	ab 83       	std	Y+3, r26	; 0x03
    106c:	bc 83       	std	Y+4, r27	; 0x04
    106e:	49 81       	ldd	r20, Y+1	; 0x01
    1070:	5a 81       	ldd	r21, Y+2	; 0x02
    1072:	6b 81       	ldd	r22, Y+3	; 0x03
    1074:	7c 81       	ldd	r23, Y+4	; 0x04
    1076:	76 95       	lsr	r23
    1078:	67 95       	ror	r22
    107a:	57 95       	ror	r21
    107c:	47 95       	ror	r20
    107e:	76 95       	lsr	r23
    1080:	67 95       	ror	r22
    1082:	57 95       	ror	r21
    1084:	47 95       	ror	r20
    1086:	41 70       	andi	r20, 0x01	; 1
    1088:	62 e0       	ldi	r22, 0x02	; 2
    108a:	89 e3       	ldi	r24, 0x39	; 57
    108c:	91 e0       	ldi	r25, 0x01	; 1
    108e:	17 db       	rcall	.-2514   	; 0x6be <updateBit>
    1090:	49 81       	ldd	r20, Y+1	; 0x01
    1092:	5a 81       	ldd	r21, Y+2	; 0x02
    1094:	6b 81       	ldd	r22, Y+3	; 0x03
    1096:	7c 81       	ldd	r23, Y+4	; 0x04
    1098:	76 95       	lsr	r23
    109a:	67 95       	ror	r22
    109c:	57 95       	ror	r21
    109e:	47 95       	ror	r20
    10a0:	41 70       	andi	r20, 0x01	; 1
    10a2:	61 e0       	ldi	r22, 0x01	; 1
    10a4:	89 e3       	ldi	r24, 0x39	; 57
    10a6:	91 e0       	ldi	r25, 0x01	; 1
    10a8:	0a db       	rcall	.-2540   	; 0x6be <updateBit>
    10aa:	49 81       	ldd	r20, Y+1	; 0x01
    10ac:	41 70       	andi	r20, 0x01	; 1
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	89 e3       	ldi	r24, 0x39	; 57
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	04 db       	rcall	.-2552   	; 0x6be <updateBit>
    10b6:	29 96       	adiw	r28, 0x09	; 9
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	08 95       	ret

000010d0 <timer_start>:
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <timer_start+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <timer_start+0x8>
    10d8:	1f 92       	push	r1
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	41 30       	cpi	r20, 0x01	; 1
    10e0:	19 f0       	breq	.+6      	; 0x10e8 <timer_start+0x18>
    10e2:	42 30       	cpi	r20, 0x02	; 2
    10e4:	d1 f0       	breq	.+52     	; 0x111a <timer_start+0x4a>
    10e6:	31 c0       	rjmp	.+98     	; 0x114a <timer_start+0x7a>
    10e8:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <u8_timer1ClockSource>
    10ec:	42 fb       	bst	r20, 2
    10ee:	44 27       	eor	r20, r20
    10f0:	40 f9       	bld	r20, 0
    10f2:	62 e0       	ldi	r22, 0x02	; 2
    10f4:	81 e8       	ldi	r24, 0x81	; 129
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	e2 da       	rcall	.-2620   	; 0x6be <updateBit>
    10fa:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <u8_timer1ClockSource>
    10fe:	46 95       	lsr	r20
    1100:	41 70       	andi	r20, 0x01	; 1
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	81 e8       	ldi	r24, 0x81	; 129
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	da da       	rcall	.-2636   	; 0x6be <updateBit>
    110a:	40 91 38 01 	lds	r20, 0x0138	; 0x800138 <u8_timer1ClockSource>
    110e:	41 70       	andi	r20, 0x01	; 1
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	81 e8       	ldi	r24, 0x81	; 129
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	d3 da       	rcall	.-2650   	; 0x6be <updateBit>
    1118:	18 c0       	rjmp	.+48     	; 0x114a <timer_start+0x7a>
    111a:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <u8_timer2ClockSource>
    111e:	42 fb       	bst	r20, 2
    1120:	44 27       	eor	r20, r20
    1122:	40 f9       	bld	r20, 0
    1124:	62 e0       	ldi	r22, 0x02	; 2
    1126:	81 eb       	ldi	r24, 0xB1	; 177
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	c9 da       	rcall	.-2670   	; 0x6be <updateBit>
    112c:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <u8_timer2ClockSource>
    1130:	46 95       	lsr	r20
    1132:	41 70       	andi	r20, 0x01	; 1
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	81 eb       	ldi	r24, 0xB1	; 177
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	c1 da       	rcall	.-2686   	; 0x6be <updateBit>
    113c:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <u8_timer2ClockSource>
    1140:	41 70       	andi	r20, 0x01	; 1
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	81 eb       	ldi	r24, 0xB1	; 177
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	ba da       	rcall	.-2700   	; 0x6be <updateBit>
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	df 91       	pop	r29
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <timer_enableInterrupt>:
    115a:	cf 92       	push	r12
    115c:	df 92       	push	r13
    115e:	ef 92       	push	r14
    1160:	ff 92       	push	r15
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	cf 93       	push	r28
    1168:	df 93       	push	r29
    116a:	00 d0       	rcall	.+0      	; 0x116c <timer_enableInterrupt+0x12>
    116c:	00 d0       	rcall	.+0      	; 0x116e <timer_enableInterrupt+0x14>
    116e:	1f 92       	push	r1
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	49 83       	std	Y+1, r20	; 0x01
    1176:	5a 83       	std	Y+2, r21	; 0x02
    1178:	6b 83       	std	Y+3, r22	; 0x03
    117a:	7c 83       	std	Y+4, r23	; 0x04
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	02 2f       	mov	r16, r18
    1180:	41 30       	cpi	r20, 0x01	; 1
    1182:	21 f0       	breq	.+8      	; 0x118c <timer_enableInterrupt+0x32>
    1184:	42 30       	cpi	r20, 0x02	; 2
    1186:	09 f4       	brne	.+2      	; 0x118a <timer_enableInterrupt+0x30>
    1188:	5e c0       	rjmp	.+188    	; 0x1246 <timer_enableInterrupt+0xec>
    118a:	95 c0       	rjmp	.+298    	; 0x12b6 <timer_enableInterrupt+0x15c>
    118c:	0f 2e       	mov	r0, r31
    118e:	f1 e8       	ldi	r31, 0x81	; 129
    1190:	ef 2e       	mov	r14, r31
    1192:	f1 2c       	mov	r15, r1
    1194:	f0 2d       	mov	r31, r0
    1196:	f7 01       	movw	r30, r14
    1198:	80 81       	ld	r24, Z
    119a:	64 e0       	ldi	r22, 0x04	; 4
    119c:	c1 da       	rcall	.-2686   	; 0x720 <checkBit>
    119e:	18 2f       	mov	r17, r24
    11a0:	f7 01       	movw	r30, r14
    11a2:	80 81       	ld	r24, Z
    11a4:	63 e0       	ldi	r22, 0x03	; 3
    11a6:	bc da       	rcall	.-2696   	; 0x720 <checkBit>
    11a8:	11 0f       	add	r17, r17
    11aa:	11 0f       	add	r17, r17
    11ac:	11 0f       	add	r17, r17
    11ae:	f4 e0       	ldi	r31, 0x04	; 4
    11b0:	8f 9f       	mul	r24, r31
    11b2:	c0 01       	movw	r24, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	18 2b       	or	r17, r24
    11b8:	68 94       	set
    11ba:	cc 24       	eor	r12, r12
    11bc:	c7 f8       	bld	r12, 7
    11be:	d1 2c       	mov	r13, r1
    11c0:	f6 01       	movw	r30, r12
    11c2:	80 81       	ld	r24, Z
    11c4:	61 e0       	ldi	r22, 0x01	; 1
    11c6:	ac da       	rcall	.-2728   	; 0x720 <checkBit>
    11c8:	f8 2e       	mov	r15, r24
    11ca:	f6 01       	movw	r30, r12
    11cc:	80 81       	ld	r24, Z
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	a7 da       	rcall	.-2738   	; 0x720 <checkBit>
    11d2:	ff 0c       	add	r15, r15
    11d4:	81 2b       	or	r24, r17
    11d6:	8f 29       	or	r24, r15
    11d8:	01 30       	cpi	r16, 0x01	; 1
    11da:	d9 f0       	breq	.+54     	; 0x1212 <timer_enableInterrupt+0xb8>
    11dc:	28 f0       	brcs	.+10     	; 0x11e8 <timer_enableInterrupt+0x8e>
    11de:	02 30       	cpi	r16, 0x02	; 2
    11e0:	21 f1       	breq	.+72     	; 0x122a <timer_enableInterrupt+0xd0>
    11e2:	03 30       	cpi	r16, 0x03	; 3
    11e4:	39 f1       	breq	.+78     	; 0x1234 <timer_enableInterrupt+0xda>
    11e6:	67 c0       	rjmp	.+206    	; 0x12b6 <timer_enableInterrupt+0x15c>
    11e8:	88 30       	cpi	r24, 0x08	; 8
    11ea:	38 f4       	brcc	.+14     	; 0x11fa <timer_enableInterrupt+0xa0>
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	61 f0       	breq	.+24     	; 0x1208 <timer_enableInterrupt+0xae>
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	8f e6       	ldi	r24, 0x6F	; 111
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	7b da       	rcall	.-2826   	; 0x6ee <setBit>
    11f8:	5e c0       	rjmp	.+188    	; 0x12b6 <timer_enableInterrupt+0x15c>
    11fa:	80 fd       	sbrc	r24, 0
    11fc:	05 c0       	rjmp	.+10     	; 0x1208 <timer_enableInterrupt+0xae>
    11fe:	65 e0       	ldi	r22, 0x05	; 5
    1200:	8f e6       	ldi	r24, 0x6F	; 111
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	74 da       	rcall	.-2840   	; 0x6ee <setBit>
    1206:	57 c0       	rjmp	.+174    	; 0x12b6 <timer_enableInterrupt+0x15c>
    1208:	61 e0       	ldi	r22, 0x01	; 1
    120a:	8f e6       	ldi	r24, 0x6F	; 111
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	6f da       	rcall	.-2850   	; 0x6ee <setBit>
    1210:	52 c0       	rjmp	.+164    	; 0x12b6 <timer_enableInterrupt+0x15c>
    1212:	88 30       	cpi	r24, 0x08	; 8
    1214:	18 f4       	brcc	.+6      	; 0x121c <timer_enableInterrupt+0xc2>
    1216:	84 30       	cpi	r24, 0x04	; 4
    1218:	19 f4       	brne	.+6      	; 0x1220 <timer_enableInterrupt+0xc6>
    121a:	4d c0       	rjmp	.+154    	; 0x12b6 <timer_enableInterrupt+0x15c>
    121c:	80 fd       	sbrc	r24, 0
    121e:	4b c0       	rjmp	.+150    	; 0x12b6 <timer_enableInterrupt+0x15c>
    1220:	61 e0       	ldi	r22, 0x01	; 1
    1222:	8f e6       	ldi	r24, 0x6F	; 111
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	63 da       	rcall	.-2874   	; 0x6ee <setBit>
    1228:	46 c0       	rjmp	.+140    	; 0x12b6 <timer_enableInterrupt+0x15c>
    122a:	62 e0       	ldi	r22, 0x02	; 2
    122c:	8f e6       	ldi	r24, 0x6F	; 111
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	5e da       	rcall	.-2884   	; 0x6ee <setBit>
    1232:	41 c0       	rjmp	.+130    	; 0x12b6 <timer_enableInterrupt+0x15c>
    1234:	88 30       	cpi	r24, 0x08	; 8
    1236:	10 f0       	brcs	.+4      	; 0x123c <timer_enableInterrupt+0xe2>
    1238:	80 ff       	sbrs	r24, 0
    123a:	3d c0       	rjmp	.+122    	; 0x12b6 <timer_enableInterrupt+0x15c>
    123c:	65 e0       	ldi	r22, 0x05	; 5
    123e:	8f e6       	ldi	r24, 0x6F	; 111
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	55 da       	rcall	.-2902   	; 0x6ee <setBit>
    1244:	38 c0       	rjmp	.+112    	; 0x12b6 <timer_enableInterrupt+0x15c>
    1246:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    124a:	63 e0       	ldi	r22, 0x03	; 3
    124c:	69 da       	rcall	.-2862   	; 0x720 <checkBit>
    124e:	18 2f       	mov	r17, r24
    1250:	0f 2e       	mov	r0, r31
    1252:	f0 eb       	ldi	r31, 0xB0	; 176
    1254:	ef 2e       	mov	r14, r31
    1256:	f1 2c       	mov	r15, r1
    1258:	f0 2d       	mov	r31, r0
    125a:	f7 01       	movw	r30, r14
    125c:	80 81       	ld	r24, Z
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	5f da       	rcall	.-2882   	; 0x720 <checkBit>
    1262:	11 0f       	add	r17, r17
    1264:	11 0f       	add	r17, r17
    1266:	88 0f       	add	r24, r24
    1268:	18 2b       	or	r17, r24
    126a:	f7 01       	movw	r30, r14
    126c:	80 81       	ld	r24, Z
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	57 da       	rcall	.-2898   	; 0x720 <checkBit>
    1272:	81 2b       	or	r24, r17
    1274:	01 30       	cpi	r16, 0x01	; 1
    1276:	91 f0       	breq	.+36     	; 0x129c <timer_enableInterrupt+0x142>
    1278:	18 f0       	brcs	.+6      	; 0x1280 <timer_enableInterrupt+0x126>
    127a:	02 30       	cpi	r16, 0x02	; 2
    127c:	c1 f0       	breq	.+48     	; 0x12ae <timer_enableInterrupt+0x154>
    127e:	1b c0       	rjmp	.+54     	; 0x12b6 <timer_enableInterrupt+0x15c>
    1280:	84 30       	cpi	r24, 0x04	; 4
    1282:	38 f4       	brcc	.+14     	; 0x1292 <timer_enableInterrupt+0x138>
    1284:	82 30       	cpi	r24, 0x02	; 2
    1286:	29 f0       	breq	.+10     	; 0x1292 <timer_enableInterrupt+0x138>
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	80 e7       	ldi	r24, 0x70	; 112
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	2f da       	rcall	.-2978   	; 0x6ee <setBit>
    1290:	12 c0       	rjmp	.+36     	; 0x12b6 <timer_enableInterrupt+0x15c>
    1292:	61 e0       	ldi	r22, 0x01	; 1
    1294:	80 e7       	ldi	r24, 0x70	; 112
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	2a da       	rcall	.-2988   	; 0x6ee <setBit>
    129a:	0d c0       	rjmp	.+26     	; 0x12b6 <timer_enableInterrupt+0x15c>
    129c:	84 30       	cpi	r24, 0x04	; 4
    129e:	58 f4       	brcc	.+22     	; 0x12b6 <timer_enableInterrupt+0x15c>
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	49 f0       	breq	.+18     	; 0x12b6 <timer_enableInterrupt+0x15c>
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	80 e7       	ldi	r24, 0x70	; 112
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	21 da       	rcall	.-3006   	; 0x6ee <setBit>
    12ac:	04 c0       	rjmp	.+8      	; 0x12b6 <timer_enableInterrupt+0x15c>
    12ae:	62 e0       	ldi	r22, 0x02	; 2
    12b0:	80 e7       	ldi	r24, 0x70	; 112
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	1c da       	rcall	.-3016   	; 0x6ee <setBit>
    12b6:	0f 90       	pop	r0
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	08 95       	ret

000012d2 <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    12d2:	0f 93       	push	r16
    12d4:	1f 93       	push	r17
    12d6:	cf 93       	push	r28
    12d8:	df 93       	push	r29
    12da:	00 d0       	rcall	.+0      	; 0x12dc <timer_attachInterrupt+0xa>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <timer_attachInterrupt+0xc>
    12de:	1f 92       	push	r1
    12e0:	cd b7       	in	r28, 0x3d	; 61
    12e2:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    12e4:	41 30       	cpi	r20, 0x01	; 1
    12e6:	19 f0       	breq	.+6      	; 0x12ee <timer_attachInterrupt+0x1c>
    12e8:	42 30       	cpi	r20, 0x02	; 2
    12ea:	51 f0       	breq	.+20     	; 0x1300 <timer_attachInterrupt+0x2e>
    12ec:	11 c0       	rjmp	.+34     	; 0x1310 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    12ee:	e2 2f       	mov	r30, r18
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	e0 5d       	subi	r30, 0xD0	; 208
    12f8:	fe 4f       	sbci	r31, 0xFE	; 254
    12fa:	11 83       	std	Z+1, r17	; 0x01
    12fc:	00 83       	st	Z, r16
		#endif
			break;
    12fe:	08 c0       	rjmp	.+16     	; 0x1310 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    1300:	e2 2f       	mov	r30, r18
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	ee 0f       	add	r30, r30
    1306:	ff 1f       	adc	r31, r31
    1308:	e6 5c       	subi	r30, 0xC6	; 198
    130a:	fe 4f       	sbci	r31, 0xFE	; 254
    130c:	11 83       	std	Z+1, r17	; 0x01
    130e:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    1324:	4f 92       	push	r4
    1326:	5f 92       	push	r5
    1328:	6f 92       	push	r6
    132a:	7f 92       	push	r7
    132c:	8f 92       	push	r8
    132e:	9f 92       	push	r9
    1330:	af 92       	push	r10
    1332:	bf 92       	push	r11
    1334:	cf 92       	push	r12
    1336:	df 92       	push	r13
    1338:	ef 92       	push	r14
    133a:	ff 92       	push	r15
    133c:	cf 93       	push	r28
    133e:	df 93       	push	r29
    1340:	4b 01       	movw	r8, r22
    1342:	5c 01       	movw	r10, r24
    1344:	ea 01       	movw	r28, r20
    1346:	0f 2e       	mov	r0, r31
    1348:	f0 e2       	ldi	r31, 0x20	; 32
    134a:	4f 2e       	mov	r4, r31
    134c:	f1 ea       	ldi	r31, 0xA1	; 161
    134e:	5f 2e       	mov	r5, r31
    1350:	f7 e0       	ldi	r31, 0x07	; 7
    1352:	6f 2e       	mov	r6, r31
    1354:	71 2c       	mov	r7, r1
    1356:	f0 2d       	mov	r31, r0
    1358:	c3 01       	movw	r24, r6
    135a:	b2 01       	movw	r22, r4
    135c:	a5 01       	movw	r20, r10
    135e:	94 01       	movw	r18, r8
    1360:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
    1364:	69 01       	movw	r12, r18
    1366:	7a 01       	movw	r14, r20
    1368:	c3 01       	movw	r24, r6
    136a:	b2 01       	movw	r22, r4
    136c:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
    1370:	ca 01       	movw	r24, r20
    1372:	b9 01       	movw	r22, r18
    1374:	a5 01       	movw	r20, r10
    1376:	94 01       	movw	r18, r8
    1378:	db d9       	rcall	.-3146   	; 0x730 <calculateError>
    137a:	44 97       	sbiw	r24, 0x14	; 20
    137c:	30 f4       	brcc	.+12     	; 0x138a <calculateUBRR+0x66>
    137e:	d7 01       	movw	r26, r14
    1380:	c6 01       	movw	r24, r12
    1382:	01 97       	sbiw	r24, 0x01	; 1
    1384:	a1 09       	sbc	r26, r1
    1386:	b1 09       	sbc	r27, r1
    1388:	0f c0       	rjmp	.+30     	; 0x13a8 <calculateUBRR+0x84>
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	88 83       	st	Y, r24
    138e:	60 e4       	ldi	r22, 0x40	; 64
    1390:	72 e4       	ldi	r23, 0x42	; 66
    1392:	8f e0       	ldi	r24, 0x0F	; 15
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	a5 01       	movw	r20, r10
    1398:	94 01       	movw	r18, r8
    139a:	0e 94 03 13 	call	0x2606	; 0x2606 <__udivmodsi4>
    139e:	da 01       	movw	r26, r20
    13a0:	c9 01       	movw	r24, r18
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	a1 09       	sbc	r26, r1
    13a6:	b1 09       	sbc	r27, r1
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	ff 90       	pop	r15
    13ae:	ef 90       	pop	r14
    13b0:	df 90       	pop	r13
    13b2:	cf 90       	pop	r12
    13b4:	bf 90       	pop	r11
    13b6:	af 90       	pop	r10
    13b8:	9f 90       	pop	r9
    13ba:	8f 90       	pop	r8
    13bc:	7f 90       	pop	r7
    13be:	6f 90       	pop	r6
    13c0:	5f 90       	pop	r5
    13c2:	4f 90       	pop	r4
    13c4:	08 95       	ret

000013c6 <uart_init>:
    13c6:	0f 93       	push	r16
    13c8:	1f 93       	push	r17
    13ca:	cf 93       	push	r28
    13cc:	df 93       	push	r29
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
    13d2:	2b 97       	sbiw	r28, 0x0b	; 11
    13d4:	0f b6       	in	r0, 0x3f	; 63
    13d6:	f8 94       	cli
    13d8:	de bf       	out	0x3e, r29	; 62
    13da:	0f be       	out	0x3f, r0	; 63
    13dc:	cd bf       	out	0x3d, r28	; 61
    13de:	0a 83       	std	Y+2, r16	; 0x02
    13e0:	1b 83       	std	Y+3, r17	; 0x03
    13e2:	2c 83       	std	Y+4, r18	; 0x04
    13e4:	3d 83       	std	Y+5, r19	; 0x05
    13e6:	4e 83       	std	Y+6, r20	; 0x06
    13e8:	5f 83       	std	Y+7, r21	; 0x07
    13ea:	68 87       	std	Y+8, r22	; 0x08
    13ec:	79 87       	std	Y+9, r23	; 0x09
    13ee:	8a 87       	std	Y+10, r24	; 0x0a
    13f0:	9b 87       	std	Y+11, r25	; 0x0b
    13f2:	19 82       	std	Y+1, r1	; 0x01
    13f4:	01 11       	cpse	r16, r1
    13f6:	7c c0       	rjmp	.+248    	; 0x14f0 <uart_init+0x12a>
    13f8:	19 2f       	mov	r17, r25
    13fa:	e2 ec       	ldi	r30, 0xC2	; 194
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	8f 73       	andi	r24, 0x3F	; 63
    1402:	80 83       	st	Z, r24
    1404:	6b 81       	ldd	r22, Y+3	; 0x03
    1406:	7c 81       	ldd	r23, Y+4	; 0x04
    1408:	8d 81       	ldd	r24, Y+5	; 0x05
    140a:	9e 81       	ldd	r25, Y+6	; 0x06
    140c:	ae 01       	movw	r20, r28
    140e:	4f 5f       	subi	r20, 0xFF	; 255
    1410:	5f 4f       	sbci	r21, 0xFF	; 255
    1412:	88 df       	rcall	.-240    	; 0x1324 <calculateUBRR>
    1414:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1418:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    141c:	49 81       	ldd	r20, Y+1	; 0x01
    141e:	61 e0       	ldi	r22, 0x01	; 1
    1420:	80 ec       	ldi	r24, 0xC0	; 192
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	4c d9       	rcall	.-3432   	; 0x6be <updateBit>
    1426:	89 85       	ldd	r24, Y+9	; 0x09
    1428:	82 30       	cpi	r24, 0x02	; 2
    142a:	31 f1       	breq	.+76     	; 0x1478 <uart_init+0xb2>
    142c:	28 f4       	brcc	.+10     	; 0x1438 <uart_init+0x72>
    142e:	88 23       	and	r24, r24
    1430:	49 f0       	breq	.+18     	; 0x1444 <uart_init+0x7e>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	a1 f0       	breq	.+40     	; 0x145e <uart_init+0x98>
    1436:	46 c0       	rjmp	.+140    	; 0x14c4 <uart_init+0xfe>
    1438:	83 30       	cpi	r24, 0x03	; 3
    143a:	59 f1       	breq	.+86     	; 0x1492 <uart_init+0xcc>
    143c:	84 30       	cpi	r24, 0x04	; 4
    143e:	09 f4       	brne	.+2      	; 0x1442 <uart_init+0x7c>
    1440:	35 c0       	rjmp	.+106    	; 0x14ac <uart_init+0xe6>
    1442:	40 c0       	rjmp	.+128    	; 0x14c4 <uart_init+0xfe>
    1444:	61 e0       	ldi	r22, 0x01	; 1
    1446:	82 ec       	ldi	r24, 0xC2	; 194
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	5d d9       	rcall	.-3398   	; 0x706 <clearBit>
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	82 ec       	ldi	r24, 0xC2	; 194
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	59 d9       	rcall	.-3406   	; 0x706 <clearBit>
    1454:	62 e0       	ldi	r22, 0x02	; 2
    1456:	81 ec       	ldi	r24, 0xC1	; 193
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	55 d9       	rcall	.-3414   	; 0x706 <clearBit>
    145c:	33 c0       	rjmp	.+102    	; 0x14c4 <uart_init+0xfe>
    145e:	61 e0       	ldi	r22, 0x01	; 1
    1460:	82 ec       	ldi	r24, 0xC2	; 194
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	44 d9       	rcall	.-3448   	; 0x6ee <setBit>
    1466:	62 e0       	ldi	r22, 0x02	; 2
    1468:	82 ec       	ldi	r24, 0xC2	; 194
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	4c d9       	rcall	.-3432   	; 0x706 <clearBit>
    146e:	62 e0       	ldi	r22, 0x02	; 2
    1470:	81 ec       	ldi	r24, 0xC1	; 193
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	48 d9       	rcall	.-3440   	; 0x706 <clearBit>
    1476:	26 c0       	rjmp	.+76     	; 0x14c4 <uart_init+0xfe>
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	82 ec       	ldi	r24, 0xC2	; 194
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	43 d9       	rcall	.-3450   	; 0x706 <clearBit>
    1480:	62 e0       	ldi	r22, 0x02	; 2
    1482:	82 ec       	ldi	r24, 0xC2	; 194
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	33 d9       	rcall	.-3482   	; 0x6ee <setBit>
    1488:	62 e0       	ldi	r22, 0x02	; 2
    148a:	81 ec       	ldi	r24, 0xC1	; 193
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	3b d9       	rcall	.-3466   	; 0x706 <clearBit>
    1490:	19 c0       	rjmp	.+50     	; 0x14c4 <uart_init+0xfe>
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	82 ec       	ldi	r24, 0xC2	; 194
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	2a d9       	rcall	.-3500   	; 0x6ee <setBit>
    149a:	62 e0       	ldi	r22, 0x02	; 2
    149c:	82 ec       	ldi	r24, 0xC2	; 194
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	26 d9       	rcall	.-3508   	; 0x6ee <setBit>
    14a2:	62 e0       	ldi	r22, 0x02	; 2
    14a4:	81 ec       	ldi	r24, 0xC1	; 193
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	2e d9       	rcall	.-3492   	; 0x706 <clearBit>
    14aa:	0c c0       	rjmp	.+24     	; 0x14c4 <uart_init+0xfe>
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	82 ec       	ldi	r24, 0xC2	; 194
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	1d d9       	rcall	.-3526   	; 0x6ee <setBit>
    14b4:	62 e0       	ldi	r22, 0x02	; 2
    14b6:	82 ec       	ldi	r24, 0xC2	; 194
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	19 d9       	rcall	.-3534   	; 0x6ee <setBit>
    14bc:	62 e0       	ldi	r22, 0x02	; 2
    14be:	81 ec       	ldi	r24, 0xC1	; 193
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	15 d9       	rcall	.-3542   	; 0x6ee <setBit>
    14c4:	4a 85       	ldd	r20, Y+10	; 0x0a
    14c6:	63 e0       	ldi	r22, 0x03	; 3
    14c8:	82 ec       	ldi	r24, 0xC2	; 194
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	f8 d8       	rcall	.-3600   	; 0x6be <updateBit>
    14ce:	12 30       	cpi	r17, 0x02	; 2
    14d0:	31 f4       	brne	.+12     	; 0x14de <uart_init+0x118>
    14d2:	e2 ec       	ldi	r30, 0xC2	; 194
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	8f 7c       	andi	r24, 0xCF	; 207
    14da:	80 83       	st	Z, r24
    14dc:	09 c0       	rjmp	.+18     	; 0x14f0 <uart_init+0x12a>
    14de:	65 e0       	ldi	r22, 0x05	; 5
    14e0:	82 ec       	ldi	r24, 0xC2	; 194
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	04 d9       	rcall	.-3576   	; 0x6ee <setBit>
    14e6:	41 2f       	mov	r20, r17
    14e8:	64 e0       	ldi	r22, 0x04	; 4
    14ea:	82 ec       	ldi	r24, 0xC2	; 194
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	e7 d8       	rcall	.-3634   	; 0x6be <updateBit>
    14f0:	2b 96       	adiw	r28, 0x0b	; 11
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	de bf       	out	0x3e, r29	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	cd bf       	out	0x3d, r28	; 61
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	08 95       	ret

00001506 <uart_start>:
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	cd b7       	in	r28, 0x3d	; 61
    1510:	de b7       	in	r29, 0x3e	; 62
    1512:	2a 97       	sbiw	r28, 0x0a	; 10
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	f8 94       	cli
    1518:	de bf       	out	0x3e, r29	; 62
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	cd bf       	out	0x3d, r28	; 61
    151e:	6f 83       	std	Y+7, r22	; 0x07
    1520:	01 11       	cpse	r16, r1
    1522:	0a c0       	rjmp	.+20     	; 0x1538 <uart_start+0x32>
    1524:	45 2f       	mov	r20, r21
    1526:	64 e0       	ldi	r22, 0x04	; 4
    1528:	81 ec       	ldi	r24, 0xC1	; 193
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	c8 d8       	rcall	.-3696   	; 0x6be <updateBit>
    152e:	4f 81       	ldd	r20, Y+7	; 0x07
    1530:	63 e0       	ldi	r22, 0x03	; 3
    1532:	81 ec       	ldi	r24, 0xC1	; 193
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	c3 d8       	rcall	.-3706   	; 0x6be <updateBit>
    1538:	2a 96       	adiw	r28, 0x0a	; 10
    153a:	0f b6       	in	r0, 0x3f	; 63
    153c:	f8 94       	cli
    153e:	de bf       	out	0x3e, r29	; 62
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	cd bf       	out	0x3d, r28	; 61
    1544:	df 91       	pop	r29
    1546:	cf 91       	pop	r28
    1548:	1f 91       	pop	r17
    154a:	0f 91       	pop	r16
    154c:	08 95       	ret

0000154e <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
    155e:	2a 97       	sbiw	r28, 0x0a	; 10
    1560:	0f b6       	in	r0, 0x3f	; 63
    1562:	f8 94       	cli
    1564:	de bf       	out	0x3e, r29	; 62
    1566:	0f be       	out	0x3f, r0	; 63
    1568:	cd bf       	out	0x3d, r28	; 61
    156a:	09 83       	std	Y+1, r16	; 0x01
    156c:	1a 83       	std	Y+2, r17	; 0x02
    156e:	2b 83       	std	Y+3, r18	; 0x03
    1570:	3c 83       	std	Y+4, r19	; 0x04
    1572:	4d 83       	std	Y+5, r20	; 0x05
    1574:	5e 83       	std	Y+6, r21	; 0x06
    1576:	6f 83       	std	Y+7, r22	; 0x07
    1578:	78 87       	std	Y+8, r23	; 0x08
    157a:	89 87       	std	Y+9, r24	; 0x09
    157c:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    157e:	01 11       	cpse	r16, r1
    1580:	13 c0       	rjmp	.+38     	; 0x15a8 <uart_transmit+0x5a>
				if (s_uart.frameSize == _9BIT)
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
				UDR0 = (u8) u16_data;
			}
		#else
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    1582:	00 ec       	ldi	r16, 0xC0	; 192
    1584:	10 e0       	ldi	r17, 0x00	; 0
    1586:	f8 01       	movw	r30, r16
    1588:	80 81       	ld	r24, Z
    158a:	65 e0       	ldi	r22, 0x05	; 5
    158c:	c9 d8       	rcall	.-3694   	; 0x720 <checkBit>
    158e:	88 23       	and	r24, r24
    1590:	d1 f3       	breq	.-12     	; 0x1586 <uart_transmit+0x38>
			if (s_uart.frameSize == _9BIT)
    1592:	88 85       	ldd	r24, Y+8	; 0x08
    1594:	84 30       	cpi	r24, 0x04	; 4
    1596:	31 f4       	brne	.+12     	; 0x15a4 <uart_transmit+0x56>
			updateBit(&UCSR0B, TXB80, (u8) ((u16_data >> 8) & 1));
    1598:	4f 2d       	mov	r20, r15
    159a:	41 70       	andi	r20, 0x01	; 1
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	81 ec       	ldi	r24, 0xC1	; 193
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	8d d8       	rcall	.-3814   	; 0x6be <updateBit>
			UDR0 = (u8) u16_data;
    15a4:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    15a8:	2a 96       	adiw	r28, 0x0a	; 10
    15aa:	0f b6       	in	r0, 0x3f	; 63
    15ac:	f8 94       	cli
    15ae:	de bf       	out	0x3e, r29	; 62
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	cd bf       	out	0x3d, r28	; 61
    15b4:	df 91       	pop	r29
    15b6:	cf 91       	pop	r28
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	ff 90       	pop	r15
    15be:	ef 90       	pop	r14
    15c0:	08 95       	ret

000015c2 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    15c2:	1f 92       	push	r1
    15c4:	0f 92       	push	r0
    15c6:	0f b6       	in	r0, 0x3f	; 63
    15c8:	0f 92       	push	r0
    15ca:	11 24       	eor	r1, r1
    15cc:	0b b6       	in	r0, 0x3b	; 59
    15ce:	0f 92       	push	r0
    15d0:	2f 93       	push	r18
    15d2:	3f 93       	push	r19
    15d4:	4f 93       	push	r20
    15d6:	5f 93       	push	r21
    15d8:	6f 93       	push	r22
    15da:	7f 93       	push	r23
    15dc:	8f 93       	push	r24
    15de:	9f 93       	push	r25
    15e0:	af 93       	push	r26
    15e2:	bf 93       	push	r27
    15e4:	ef 93       	push	r30
    15e6:	ff 93       	push	r31
	p_wdgCallback();
    15e8:	e0 91 40 01 	lds	r30, 0x0140	; 0x800140 <p_wdgCallback>
    15ec:	f0 91 41 01 	lds	r31, 0x0141	; 0x800141 <p_wdgCallback+0x1>
    15f0:	09 95       	icall
}
    15f2:	ff 91       	pop	r31
    15f4:	ef 91       	pop	r30
    15f6:	bf 91       	pop	r27
    15f8:	af 91       	pop	r26
    15fa:	9f 91       	pop	r25
    15fc:	8f 91       	pop	r24
    15fe:	7f 91       	pop	r23
    1600:	6f 91       	pop	r22
    1602:	5f 91       	pop	r21
    1604:	4f 91       	pop	r20
    1606:	3f 91       	pop	r19
    1608:	2f 91       	pop	r18
    160a:	0f 90       	pop	r0
    160c:	0b be       	out	0x3b, r0	; 59
    160e:	0f 90       	pop	r0
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	0f 90       	pop	r0
    1614:	1f 90       	pop	r1
    1616:	18 95       	reti

00001618 <debug_init>:
	byteToASCIIHex(u8_ASCIIData + 4, u32_data >> 8);
	byteToASCIIHex(u8_ASCIIData + 6, u32_data);
	for (u8 i = 0; i < 8; i++)
		uart_transmit(s_debugUart, u8_ASCIIData[i]);
	uart_transmit(s_debugUart, '\n');
}
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	e2 e4       	ldi	r30, 0x42	; 66
    161e:	f1 e0       	ldi	r31, 0x01	; 1
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	18 2f       	mov	r17, r24
    1624:	81 83       	std	Z+1, r24	; 0x01
    1626:	81 ee       	ldi	r24, 0xE1	; 225
    1628:	82 83       	std	Z+2, r24	; 0x02
    162a:	13 82       	std	Z+3, r1	; 0x03
    162c:	14 82       	std	Z+4, r1	; 0x04
    162e:	83 e0       	ldi	r24, 0x03	; 3
    1630:	78 2f       	mov	r23, r24
    1632:	87 83       	std	Z+7, r24	; 0x07
    1634:	92 e0       	ldi	r25, 0x02	; 2
    1636:	91 87       	std	Z+9, r25	; 0x09
    1638:	10 82       	st	Z, r1
    163a:	10 86       	std	Z+8, r1	; 0x08
    163c:	15 82       	std	Z+5, r1	; 0x05
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	68 2f       	mov	r22, r24
    1642:	86 83       	std	Z+6, r24	; 0x06
    1644:	00 e0       	ldi	r16, 0x00	; 0
    1646:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    164a:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    164e:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    1652:	50 e0       	ldi	r21, 0x00	; 0
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	b7 de       	rcall	.-658    	; 0x13c6 <uart_init>
    1658:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    165c:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    1660:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    1664:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    1668:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    166c:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1670:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1674:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    1678:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    167c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1680:	42 df       	rcall	.-380    	; 0x1506 <uart_start>
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <debug_writeDecimal>:

void debug_writeDecimal(u16 u16_data)
{
    1688:	cf 92       	push	r12
    168a:	df 92       	push	r13
    168c:	ef 92       	push	r14
    168e:	ff 92       	push	r15
    1690:	0f 93       	push	r16
    1692:	1f 93       	push	r17
    1694:	cf 93       	push	r28
    1696:	df 93       	push	r29
    1698:	ec 01       	movw	r28, r24
	uart_transmit(s_debugUart, u16_data / 10000 % 10 + '0');
    169a:	9c 01       	movw	r18, r24
    169c:	32 95       	swap	r19
    169e:	22 95       	swap	r18
    16a0:	2f 70       	andi	r18, 0x0F	; 15
    16a2:	23 27       	eor	r18, r19
    16a4:	3f 70       	andi	r19, 0x0F	; 15
    16a6:	23 27       	eor	r18, r19
    16a8:	a7 e4       	ldi	r26, 0x47	; 71
    16aa:	b3 e0       	ldi	r27, 0x03	; 3
    16ac:	d7 d7       	rcall	.+4014   	; 0x265c <__umulhisi3>
    16ae:	7c 01       	movw	r14, r24
    16b0:	f6 94       	lsr	r15
    16b2:	e7 94       	ror	r14
    16b4:	f6 94       	lsr	r15
    16b6:	e7 94       	ror	r14
    16b8:	f6 94       	lsr	r15
    16ba:	e7 94       	ror	r14
    16bc:	97 01       	movw	r18, r14
    16be:	ad ec       	ldi	r26, 0xCD	; 205
    16c0:	bc ec       	ldi	r27, 0xCC	; 204
    16c2:	cc d7       	rcall	.+3992   	; 0x265c <__umulhisi3>
    16c4:	96 95       	lsr	r25
    16c6:	87 95       	ror	r24
    16c8:	96 95       	lsr	r25
    16ca:	87 95       	ror	r24
    16cc:	96 95       	lsr	r25
    16ce:	87 95       	ror	r24
    16d0:	9c 01       	movw	r18, r24
    16d2:	22 0f       	add	r18, r18
    16d4:	33 1f       	adc	r19, r19
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	88 0f       	add	r24, r24
    16e0:	99 1f       	adc	r25, r25
    16e2:	82 0f       	add	r24, r18
    16e4:	93 1f       	adc	r25, r19
    16e6:	e8 1a       	sub	r14, r24
    16e8:	f9 0a       	sbc	r15, r25
    16ea:	80 e3       	ldi	r24, 0x30	; 48
    16ec:	e8 0e       	add	r14, r24
    16ee:	f1 1c       	adc	r15, r1
    16f0:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    16f4:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    16f8:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    16fc:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    1700:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    1704:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1708:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    170c:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    1710:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    1714:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1718:	1a df       	rcall	.-460    	; 0x154e <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 1000 % 10 + '0');
    171a:	9e 01       	movw	r18, r28
    171c:	36 95       	lsr	r19
    171e:	27 95       	ror	r18
    1720:	36 95       	lsr	r19
    1722:	27 95       	ror	r18
    1724:	36 95       	lsr	r19
    1726:	27 95       	ror	r18
    1728:	a5 ec       	ldi	r26, 0xC5	; 197
    172a:	b0 e2       	ldi	r27, 0x20	; 32
    172c:	97 d7       	rcall	.+3886   	; 0x265c <__umulhisi3>
    172e:	7c 01       	movw	r14, r24
    1730:	f6 94       	lsr	r15
    1732:	e7 94       	ror	r14
    1734:	f6 94       	lsr	r15
    1736:	e7 94       	ror	r14
    1738:	f6 94       	lsr	r15
    173a:	e7 94       	ror	r14
    173c:	f6 94       	lsr	r15
    173e:	e7 94       	ror	r14
    1740:	97 01       	movw	r18, r14
    1742:	ad ec       	ldi	r26, 0xCD	; 205
    1744:	bc ec       	ldi	r27, 0xCC	; 204
    1746:	8a d7       	rcall	.+3860   	; 0x265c <__umulhisi3>
    1748:	96 95       	lsr	r25
    174a:	87 95       	ror	r24
    174c:	96 95       	lsr	r25
    174e:	87 95       	ror	r24
    1750:	96 95       	lsr	r25
    1752:	87 95       	ror	r24
    1754:	9c 01       	movw	r18, r24
    1756:	22 0f       	add	r18, r18
    1758:	33 1f       	adc	r19, r19
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	88 0f       	add	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	88 0f       	add	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	82 0f       	add	r24, r18
    1768:	93 1f       	adc	r25, r19
    176a:	e8 1a       	sub	r14, r24
    176c:	f9 0a       	sbc	r15, r25
    176e:	80 e3       	ldi	r24, 0x30	; 48
    1770:	e8 0e       	add	r14, r24
    1772:	f1 1c       	adc	r15, r1
    1774:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    1778:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    177c:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    1780:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    1784:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    1788:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    178c:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1790:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    1794:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    1798:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    179c:	d8 de       	rcall	.-592    	; 0x154e <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 100 % 10 + '0');
    179e:	9e 01       	movw	r18, r28
    17a0:	36 95       	lsr	r19
    17a2:	27 95       	ror	r18
    17a4:	36 95       	lsr	r19
    17a6:	27 95       	ror	r18
    17a8:	ab e7       	ldi	r26, 0x7B	; 123
    17aa:	b4 e1       	ldi	r27, 0x14	; 20
    17ac:	57 d7       	rcall	.+3758   	; 0x265c <__umulhisi3>
    17ae:	7c 01       	movw	r14, r24
    17b0:	f6 94       	lsr	r15
    17b2:	e7 94       	ror	r14
    17b4:	97 01       	movw	r18, r14
    17b6:	ad ec       	ldi	r26, 0xCD	; 205
    17b8:	bc ec       	ldi	r27, 0xCC	; 204
    17ba:	50 d7       	rcall	.+3744   	; 0x265c <__umulhisi3>
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	9c 01       	movw	r18, r24
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	e8 1a       	sub	r14, r24
    17e0:	f9 0a       	sbc	r15, r25
    17e2:	80 e3       	ldi	r24, 0x30	; 48
    17e4:	e8 0e       	add	r14, r24
    17e6:	f1 1c       	adc	r15, r1
    17e8:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    17ec:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    17f0:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    17f4:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    17f8:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    17fc:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1800:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1804:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    1808:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    180c:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1810:	9e de       	rcall	.-708    	; 0x154e <uart_transmit>
	uart_transmit(s_debugUart, u16_data / 10 % 10 + '0');
    1812:	9e 01       	movw	r18, r28
    1814:	ad ec       	ldi	r26, 0xCD	; 205
    1816:	bc ec       	ldi	r27, 0xCC	; 204
    1818:	21 d7       	rcall	.+3650   	; 0x265c <__umulhisi3>
    181a:	6c 01       	movw	r12, r24
    181c:	d6 94       	lsr	r13
    181e:	c7 94       	ror	r12
    1820:	d6 94       	lsr	r13
    1822:	c7 94       	ror	r12
    1824:	d6 94       	lsr	r13
    1826:	c7 94       	ror	r12
    1828:	96 01       	movw	r18, r12
    182a:	18 d7       	rcall	.+3632   	; 0x265c <__umulhisi3>
    182c:	96 95       	lsr	r25
    182e:	87 95       	ror	r24
    1830:	96 95       	lsr	r25
    1832:	87 95       	ror	r24
    1834:	96 95       	lsr	r25
    1836:	87 95       	ror	r24
    1838:	9c 01       	movw	r18, r24
    183a:	22 0f       	add	r18, r18
    183c:	33 1f       	adc	r19, r19
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	82 0f       	add	r24, r18
    184c:	93 1f       	adc	r25, r19
    184e:	76 01       	movw	r14, r12
    1850:	e8 1a       	sub	r14, r24
    1852:	f9 0a       	sbc	r15, r25
    1854:	80 e3       	ldi	r24, 0x30	; 48
    1856:	e8 0e       	add	r14, r24
    1858:	f1 1c       	adc	r15, r1
    185a:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    185e:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    1862:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    1866:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    186a:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    186e:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    1872:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    1876:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    187a:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    187e:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1882:	65 de       	rcall	.-822    	; 0x154e <uart_transmit>
	uart_transmit(s_debugUart, u16_data % 10 + '0');
    1884:	c6 01       	movw	r24, r12
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	cc 0c       	add	r12, r12
    188c:	dd 1c       	adc	r13, r13
    188e:	cc 0c       	add	r12, r12
    1890:	dd 1c       	adc	r13, r13
    1892:	cc 0c       	add	r12, r12
    1894:	dd 1c       	adc	r13, r13
    1896:	c8 0e       	add	r12, r24
    1898:	d9 1e       	adc	r13, r25
    189a:	7e 01       	movw	r14, r28
    189c:	ec 18       	sub	r14, r12
    189e:	fd 08       	sbc	r15, r13
    18a0:	80 e3       	ldi	r24, 0x30	; 48
    18a2:	e8 0e       	add	r14, r24
    18a4:	f1 1c       	adc	r15, r1
    18a6:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    18aa:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    18ae:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    18b2:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    18b6:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    18ba:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    18be:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    18c2:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    18c6:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    18ca:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    18ce:	3f de       	rcall	.-898    	; 0x154e <uart_transmit>
	uart_transmit(s_debugUart, '\n');
    18d0:	0f 2e       	mov	r0, r31
    18d2:	fa e0       	ldi	r31, 0x0A	; 10
    18d4:	ef 2e       	mov	r14, r31
    18d6:	f1 2c       	mov	r15, r1
    18d8:	f0 2d       	mov	r31, r0
    18da:	00 91 42 01 	lds	r16, 0x0142	; 0x800142 <s_debugUart>
    18de:	10 91 43 01 	lds	r17, 0x0143	; 0x800143 <s_debugUart+0x1>
    18e2:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <s_debugUart+0x2>
    18e6:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <s_debugUart+0x3>
    18ea:	40 91 46 01 	lds	r20, 0x0146	; 0x800146 <s_debugUart+0x4>
    18ee:	50 91 47 01 	lds	r21, 0x0147	; 0x800147 <s_debugUart+0x5>
    18f2:	60 91 48 01 	lds	r22, 0x0148	; 0x800148 <s_debugUart+0x6>
    18f6:	70 91 49 01 	lds	r23, 0x0149	; 0x800149 <s_debugUart+0x7>
    18fa:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <s_debugUart+0x8>
    18fe:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <s_debugUart+0x9>
    1902:	25 de       	rcall	.-950    	; 0x154e <uart_transmit>
}
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	ff 90       	pop	r15
    190e:	ef 90       	pop	r14
    1910:	df 90       	pop	r13
    1912:	cf 90       	pop	r12
    1914:	08 95       	ret

00001916 <startTimeout>:

	temp = readReg16Bit(ps_sensor, RESULT_RANGE_STATUS + 10);
	writeReg(ps_sensor, SYSTEM_INTERRUPT_CLEAR, 0x01);

	return temp;
}
    1916:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__data_end>
    191a:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__data_end+0x1>
    191e:	60 91 02 01 	lds	r22, 0x0102	; 0x800102 <__data_end+0x2>
    1922:	70 91 03 01 	lds	r23, 0x0103	; 0x800103 <__data_end+0x3>
    1926:	fc 01       	movw	r30, r24
    1928:	51 87       	std	Z+9, r21	; 0x09
    192a:	40 87       	std	Z+8, r20	; 0x08
    192c:	08 95       	ret

0000192e <checkTimeoutExpired>:
    192e:	0f 93       	push	r16
    1930:	1f 93       	push	r17
    1932:	fc 01       	movw	r30, r24
    1934:	41 81       	ldd	r20, Z+1	; 0x01
    1936:	52 81       	ldd	r21, Z+2	; 0x02
    1938:	41 15       	cp	r20, r1
    193a:	51 05       	cpc	r21, r1
    193c:	c1 f0       	breq	.+48     	; 0x196e <checkTimeoutExpired+0x40>
    193e:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_end>
    1942:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_end+0x1>
    1946:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end+0x2>
    194a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x3>
    194e:	80 85       	ldd	r24, Z+8	; 0x08
    1950:	91 85       	ldd	r25, Z+9	; 0x09
    1952:	08 1b       	sub	r16, r24
    1954:	19 0b       	sbc	r17, r25
    1956:	21 09       	sbc	r18, r1
    1958:	31 09       	sbc	r19, r1
    195a:	60 e0       	ldi	r22, 0x00	; 0
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	40 17       	cp	r20, r16
    1962:	51 07       	cpc	r21, r17
    1964:	62 07       	cpc	r22, r18
    1966:	73 07       	cpc	r23, r19
    1968:	18 f0       	brcs	.+6      	; 0x1970 <checkTimeoutExpired+0x42>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <checkTimeoutExpired+0x42>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	08 95       	ret

00001976 <writeReg>:
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	d6 2f       	mov	r29, r22
    197c:	c4 2f       	mov	r28, r20
    197e:	fc 01       	movw	r30, r24
    1980:	80 81       	ld	r24, Z
    1982:	88 0f       	add	r24, r24
    1984:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <i2c_sendStart>
    1988:	8d 2f       	mov	r24, r29
    198a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    198e:	8c 2f       	mov	r24, r28
    1990:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1994:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_sendStop>
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	08 95       	ret

0000199e <writeReg16Bit>:
    199e:	1f 93       	push	r17
    19a0:	cf 93       	push	r28
    19a2:	df 93       	push	r29
    19a4:	16 2f       	mov	r17, r22
    19a6:	c4 2f       	mov	r28, r20
    19a8:	d5 2f       	mov	r29, r21
    19aa:	fc 01       	movw	r30, r24
    19ac:	80 81       	ld	r24, Z
    19ae:	88 0f       	add	r24, r24
    19b0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <i2c_sendStart>
    19b4:	81 2f       	mov	r24, r17
    19b6:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    19ba:	8d 2f       	mov	r24, r29
    19bc:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    19c0:	8c 2f       	mov	r24, r28
    19c2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    19c6:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_sendStop>
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	08 95       	ret

000019d2 <writeReg32Bit>:
    19d2:	ff 92       	push	r15
    19d4:	0f 93       	push	r16
    19d6:	1f 93       	push	r17
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	f6 2e       	mov	r15, r22
    19de:	c2 2f       	mov	r28, r18
    19e0:	d3 2f       	mov	r29, r19
    19e2:	14 2f       	mov	r17, r20
    19e4:	05 2f       	mov	r16, r21
    19e6:	fc 01       	movw	r30, r24
    19e8:	80 81       	ld	r24, Z
    19ea:	88 0f       	add	r24, r24
    19ec:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <i2c_sendStart>
    19f0:	8f 2d       	mov	r24, r15
    19f2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    19f6:	80 2f       	mov	r24, r16
    19f8:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    19fc:	81 2f       	mov	r24, r17
    19fe:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1a02:	8d 2f       	mov	r24, r29
    1a04:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1a08:	8c 2f       	mov	r24, r28
    1a0a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1a0e:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_sendStop>
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	08 95       	ret

00001a1e <readReg>:
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	ec 01       	movw	r28, r24
    1a26:	16 2f       	mov	r17, r22
    1a28:	88 81       	ld	r24, Y
    1a2a:	88 0f       	add	r24, r24
    1a2c:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <i2c_sendStart>
    1a30:	81 2f       	mov	r24, r17
    1a32:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1a36:	88 81       	ld	r24, Y
    1a38:	88 0f       	add	r24, r24
    1a3a:	81 60       	ori	r24, 0x01	; 1
    1a3c:	0e 94 be 02 	call	0x57c	; 0x57c <i2c_sendRepStart>
    1a40:	0e 94 3b 03 	call	0x676	; 0x676 <i2c_readNak>
    1a44:	c8 2f       	mov	r28, r24
    1a46:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_sendStop>
    1a4a:	8c 2f       	mov	r24, r28
    1a4c:	df 91       	pop	r29
    1a4e:	cf 91       	pop	r28
    1a50:	1f 91       	pop	r17
    1a52:	08 95       	ret

00001a54 <readReg16Bit>:
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
    1a5a:	ec 01       	movw	r28, r24
    1a5c:	16 2f       	mov	r17, r22
    1a5e:	88 81       	ld	r24, Y
    1a60:	88 0f       	add	r24, r24
    1a62:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <i2c_sendStart>
    1a66:	81 2f       	mov	r24, r17
    1a68:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1a6c:	88 81       	ld	r24, Y
    1a6e:	88 0f       	add	r24, r24
    1a70:	81 60       	ori	r24, 0x01	; 1
    1a72:	0e 94 be 02 	call	0x57c	; 0x57c <i2c_sendRepStart>
    1a76:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_readAck>
    1a7a:	c8 2f       	mov	r28, r24
    1a7c:	d0 e0       	ldi	r29, 0x00	; 0
    1a7e:	dc 2f       	mov	r29, r28
    1a80:	cc 27       	eor	r28, r28
    1a82:	0e 94 3b 03 	call	0x676	; 0x676 <i2c_readNak>
    1a86:	c8 2b       	or	r28, r24
    1a88:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_sendStop>
    1a8c:	ce 01       	movw	r24, r28
    1a8e:	df 91       	pop	r29
    1a90:	cf 91       	pop	r28
    1a92:	1f 91       	pop	r17
    1a94:	08 95       	ret

00001a96 <writeMulti>:
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	d6 2f       	mov	r29, r22
    1aa4:	7a 01       	movw	r14, r20
    1aa6:	c2 2f       	mov	r28, r18
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	80 81       	ld	r24, Z
    1aac:	88 0f       	add	r24, r24
    1aae:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <i2c_sendStart>
    1ab2:	8d 2f       	mov	r24, r29
    1ab4:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	8c 0f       	add	r24, r28
    1abc:	cc 23       	and	r28, r28
    1abe:	69 f0       	breq	.+26     	; 0x1ada <writeMulti+0x44>
    1ac0:	e7 01       	movw	r28, r14
    1ac2:	08 2f       	mov	r16, r24
    1ac4:	10 e0       	ldi	r17, 0x00	; 0
    1ac6:	0f 5f       	subi	r16, 0xFF	; 255
    1ac8:	1f 4f       	sbci	r17, 0xFF	; 255
    1aca:	0e 0d       	add	r16, r14
    1acc:	1f 1d       	adc	r17, r15
    1ace:	89 91       	ld	r24, Y+
    1ad0:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1ad4:	c0 17       	cp	r28, r16
    1ad6:	d1 07       	cpc	r29, r17
    1ad8:	d1 f7       	brne	.-12     	; 0x1ace <writeMulti+0x38>
    1ada:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_sendStop>
    1ade:	df 91       	pop	r29
    1ae0:	cf 91       	pop	r28
    1ae2:	1f 91       	pop	r17
    1ae4:	0f 91       	pop	r16
    1ae6:	ff 90       	pop	r15
    1ae8:	ef 90       	pop	r14
    1aea:	08 95       	ret

00001aec <readMulti>:
    1aec:	ef 92       	push	r14
    1aee:	ff 92       	push	r15
    1af0:	0f 93       	push	r16
    1af2:	1f 93       	push	r17
    1af4:	cf 93       	push	r28
    1af6:	df 93       	push	r29
    1af8:	8c 01       	movw	r16, r24
    1afa:	d6 2f       	mov	r29, r22
    1afc:	e4 2e       	mov	r14, r20
    1afe:	f5 2e       	mov	r15, r21
    1b00:	c2 2f       	mov	r28, r18
    1b02:	fc 01       	movw	r30, r24
    1b04:	80 81       	ld	r24, Z
    1b06:	88 0f       	add	r24, r24
    1b08:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <i2c_sendStart>
    1b0c:	8d 2f       	mov	r24, r29
    1b0e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <i2c_write>
    1b12:	f8 01       	movw	r30, r16
    1b14:	80 81       	ld	r24, Z
    1b16:	88 0f       	add	r24, r24
    1b18:	81 60       	ori	r24, 0x01	; 1
    1b1a:	0e 94 be 02 	call	0x57c	; 0x57c <i2c_sendRepStart>
    1b1e:	cc 23       	and	r28, r28
    1b20:	91 f0       	breq	.+36     	; 0x1b46 <readMulti+0x5a>
    1b22:	0e 2d       	mov	r16, r14
    1b24:	1f 2d       	mov	r17, r15
    1b26:	c2 30       	cpi	r28, 0x02	; 2
    1b28:	28 f0       	brcs	.+10     	; 0x1b34 <readMulti+0x48>
    1b2a:	0e 94 17 03 	call	0x62e	; 0x62e <i2c_readAck>
    1b2e:	f8 01       	movw	r30, r16
    1b30:	80 83       	st	Z, r24
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <readMulti+0x50>
    1b34:	0e 94 3b 03 	call	0x676	; 0x676 <i2c_readNak>
    1b38:	f8 01       	movw	r30, r16
    1b3a:	80 83       	st	Z, r24
    1b3c:	c1 50       	subi	r28, 0x01	; 1
    1b3e:	0f 5f       	subi	r16, 0xFF	; 255
    1b40:	1f 4f       	sbci	r17, 0xFF	; 255
    1b42:	c1 11       	cpse	r28, r1
    1b44:	f0 cf       	rjmp	.-32     	; 0x1b26 <readMulti+0x3a>
    1b46:	0e 94 c0 02 	call	0x580	; 0x580 <i2c_sendStop>
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	08 95       	ret

00001b58 <getSpadInfo>:
    1b58:	ef 92       	push	r14
    1b5a:	ff 92       	push	r15
    1b5c:	0f 93       	push	r16
    1b5e:	1f 93       	push	r17
    1b60:	cf 93       	push	r28
    1b62:	df 93       	push	r29
    1b64:	ec 01       	movw	r28, r24
    1b66:	7b 01       	movw	r14, r22
    1b68:	8a 01       	movw	r16, r20
    1b6a:	41 e0       	ldi	r20, 0x01	; 1
    1b6c:	60 e8       	ldi	r22, 0x80	; 128
    1b6e:	03 df       	rcall	.-506    	; 0x1976 <writeReg>
    1b70:	41 e0       	ldi	r20, 0x01	; 1
    1b72:	6f ef       	ldi	r22, 0xFF	; 255
    1b74:	ce 01       	movw	r24, r28
    1b76:	ff de       	rcall	.-514    	; 0x1976 <writeReg>
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	ce 01       	movw	r24, r28
    1b7e:	fb de       	rcall	.-522    	; 0x1976 <writeReg>
    1b80:	46 e0       	ldi	r20, 0x06	; 6
    1b82:	6f ef       	ldi	r22, 0xFF	; 255
    1b84:	ce 01       	movw	r24, r28
    1b86:	f7 de       	rcall	.-530    	; 0x1976 <writeReg>
    1b88:	63 e8       	ldi	r22, 0x83	; 131
    1b8a:	ce 01       	movw	r24, r28
    1b8c:	48 df       	rcall	.-368    	; 0x1a1e <readReg>
    1b8e:	48 2f       	mov	r20, r24
    1b90:	44 60       	ori	r20, 0x04	; 4
    1b92:	63 e8       	ldi	r22, 0x83	; 131
    1b94:	ce 01       	movw	r24, r28
    1b96:	ef de       	rcall	.-546    	; 0x1976 <writeReg>
    1b98:	47 e0       	ldi	r20, 0x07	; 7
    1b9a:	6f ef       	ldi	r22, 0xFF	; 255
    1b9c:	ce 01       	movw	r24, r28
    1b9e:	eb de       	rcall	.-554    	; 0x1976 <writeReg>
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	61 e8       	ldi	r22, 0x81	; 129
    1ba4:	ce 01       	movw	r24, r28
    1ba6:	e7 de       	rcall	.-562    	; 0x1976 <writeReg>
    1ba8:	41 e0       	ldi	r20, 0x01	; 1
    1baa:	60 e8       	ldi	r22, 0x80	; 128
    1bac:	ce 01       	movw	r24, r28
    1bae:	e3 de       	rcall	.-570    	; 0x1976 <writeReg>
    1bb0:	4b e6       	ldi	r20, 0x6B	; 107
    1bb2:	64 e9       	ldi	r22, 0x94	; 148
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	df de       	rcall	.-578    	; 0x1976 <writeReg>
    1bb8:	40 e0       	ldi	r20, 0x00	; 0
    1bba:	63 e8       	ldi	r22, 0x83	; 131
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	db de       	rcall	.-586    	; 0x1976 <writeReg>
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	a9 de       	rcall	.-686    	; 0x1916 <startTimeout>
    1bc4:	04 c0       	rjmp	.+8      	; 0x1bce <getSpadInfo+0x76>
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	b2 de       	rcall	.-668    	; 0x192e <checkTimeoutExpired>
    1bca:	81 11       	cpse	r24, r1
    1bcc:	37 c0       	rjmp	.+110    	; 0x1c3c <getSpadInfo+0xe4>
    1bce:	63 e8       	ldi	r22, 0x83	; 131
    1bd0:	ce 01       	movw	r24, r28
    1bd2:	25 df       	rcall	.-438    	; 0x1a1e <readReg>
    1bd4:	88 23       	and	r24, r24
    1bd6:	b9 f3       	breq	.-18     	; 0x1bc6 <getSpadInfo+0x6e>
    1bd8:	41 e0       	ldi	r20, 0x01	; 1
    1bda:	63 e8       	ldi	r22, 0x83	; 131
    1bdc:	ce 01       	movw	r24, r28
    1bde:	cb de       	rcall	.-618    	; 0x1976 <writeReg>
    1be0:	62 e9       	ldi	r22, 0x92	; 146
    1be2:	ce 01       	movw	r24, r28
    1be4:	1c df       	rcall	.-456    	; 0x1a1e <readReg>
    1be6:	98 2f       	mov	r25, r24
    1be8:	9f 77       	andi	r25, 0x7F	; 127
    1bea:	f7 01       	movw	r30, r14
    1bec:	90 83       	st	Z, r25
    1bee:	88 1f       	adc	r24, r24
    1bf0:	88 27       	eor	r24, r24
    1bf2:	88 1f       	adc	r24, r24
    1bf4:	f8 01       	movw	r30, r16
    1bf6:	80 83       	st	Z, r24
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	61 e8       	ldi	r22, 0x81	; 129
    1bfc:	ce 01       	movw	r24, r28
    1bfe:	bb de       	rcall	.-650    	; 0x1976 <writeReg>
    1c00:	46 e0       	ldi	r20, 0x06	; 6
    1c02:	6f ef       	ldi	r22, 0xFF	; 255
    1c04:	ce 01       	movw	r24, r28
    1c06:	b7 de       	rcall	.-658    	; 0x1976 <writeReg>
    1c08:	63 e8       	ldi	r22, 0x83	; 131
    1c0a:	ce 01       	movw	r24, r28
    1c0c:	08 df       	rcall	.-496    	; 0x1a1e <readReg>
    1c0e:	48 2f       	mov	r20, r24
    1c10:	4b 7f       	andi	r20, 0xFB	; 251
    1c12:	63 e8       	ldi	r22, 0x83	; 131
    1c14:	ce 01       	movw	r24, r28
    1c16:	af de       	rcall	.-674    	; 0x1976 <writeReg>
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	6f ef       	ldi	r22, 0xFF	; 255
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	ab de       	rcall	.-682    	; 0x1976 <writeReg>
    1c20:	41 e0       	ldi	r20, 0x01	; 1
    1c22:	60 e0       	ldi	r22, 0x00	; 0
    1c24:	ce 01       	movw	r24, r28
    1c26:	a7 de       	rcall	.-690    	; 0x1976 <writeReg>
    1c28:	40 e0       	ldi	r20, 0x00	; 0
    1c2a:	6f ef       	ldi	r22, 0xFF	; 255
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	a3 de       	rcall	.-698    	; 0x1976 <writeReg>
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	60 e8       	ldi	r22, 0x80	; 128
    1c34:	ce 01       	movw	r24, r28
    1c36:	9f de       	rcall	.-706    	; 0x1976 <writeReg>
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <getSpadInfo+0xe6>
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	ff 90       	pop	r15
    1c48:	ef 90       	pop	r14
    1c4a:	08 95       	ret

00001c4c <getSequenceStepEnables>:
    1c4c:	cf 93       	push	r28
    1c4e:	df 93       	push	r29
    1c50:	eb 01       	movw	r28, r22
    1c52:	61 e0       	ldi	r22, 0x01	; 1
    1c54:	e4 de       	rcall	.-568    	; 0x1a1e <readReg>
    1c56:	84 fb       	bst	r24, 4
    1c58:	99 27       	eor	r25, r25
    1c5a:	90 f9       	bld	r25, 0
    1c5c:	98 83       	st	Y, r25
    1c5e:	83 fb       	bst	r24, 3
    1c60:	99 27       	eor	r25, r25
    1c62:	90 f9       	bld	r25, 0
    1c64:	9a 83       	std	Y+2, r25	; 0x02
    1c66:	82 fb       	bst	r24, 2
    1c68:	99 27       	eor	r25, r25
    1c6a:	90 f9       	bld	r25, 0
    1c6c:	99 83       	std	Y+1, r25	; 0x01
    1c6e:	86 fb       	bst	r24, 6
    1c70:	99 27       	eor	r25, r25
    1c72:	90 f9       	bld	r25, 0
    1c74:	9b 83       	std	Y+3, r25	; 0x03
    1c76:	88 1f       	adc	r24, r24
    1c78:	88 27       	eor	r24, r24
    1c7a:	88 1f       	adc	r24, r24
    1c7c:	8c 83       	std	Y+4, r24	; 0x04
    1c7e:	df 91       	pop	r29
    1c80:	cf 91       	pop	r28
    1c82:	08 95       	ret

00001c84 <encodeTimeout>:
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	19 f1       	breq	.+70     	; 0x1cd2 <encodeTimeout+0x4e>
    1c8c:	ac 01       	movw	r20, r24
    1c8e:	41 50       	subi	r20, 0x01	; 1
    1c90:	51 09       	sbc	r21, r1
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	70 e0       	ldi	r23, 0x00	; 0
    1c96:	db 01       	movw	r26, r22
    1c98:	ca 01       	movw	r24, r20
    1c9a:	88 27       	eor	r24, r24
    1c9c:	89 2b       	or	r24, r25
    1c9e:	8a 2b       	or	r24, r26
    1ca0:	8b 2b       	or	r24, r27
    1ca2:	79 f0       	breq	.+30     	; 0x1cc2 <encodeTimeout+0x3e>
    1ca4:	80 e0       	ldi	r24, 0x00	; 0
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	76 95       	lsr	r23
    1caa:	67 95       	ror	r22
    1cac:	57 95       	ror	r21
    1cae:	47 95       	ror	r20
    1cb0:	01 96       	adiw	r24, 0x01	; 1
    1cb2:	8a 01       	movw	r16, r20
    1cb4:	9b 01       	movw	r18, r22
    1cb6:	00 27       	eor	r16, r16
    1cb8:	01 2b       	or	r16, r17
    1cba:	02 2b       	or	r16, r18
    1cbc:	03 2b       	or	r16, r19
    1cbe:	a1 f7       	brne	.-24     	; 0x1ca8 <encodeTimeout+0x24>
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <encodeTimeout+0x42>
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	98 2f       	mov	r25, r24
    1cc8:	88 27       	eor	r24, r24
    1cca:	55 27       	eor	r21, r21
    1ccc:	84 2b       	or	r24, r20
    1cce:	95 2b       	or	r25, r21
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <encodeTimeout+0x52>
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	08 95       	ret

00001cdc <decodeTimeout>:
    1cdc:	9c 01       	movw	r18, r24
    1cde:	33 27       	eor	r19, r19
    1ce0:	a9 01       	movw	r20, r18
    1ce2:	02 c0       	rjmp	.+4      	; 0x1ce8 <decodeTimeout+0xc>
    1ce4:	44 0f       	add	r20, r20
    1ce6:	55 1f       	adc	r21, r21
    1ce8:	9a 95       	dec	r25
    1cea:	e2 f7       	brpl	.-8      	; 0x1ce4 <decodeTimeout+0x8>
    1cec:	ca 01       	movw	r24, r20
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	08 95       	ret

00001cf2 <timeoutMclksToMicroseconds>:
    1cf2:	4f 92       	push	r4
    1cf4:	5f 92       	push	r5
    1cf6:	6f 92       	push	r6
    1cf8:	7f 92       	push	r7
    1cfa:	8f 92       	push	r8
    1cfc:	9f 92       	push	r9
    1cfe:	af 92       	push	r10
    1d00:	bf 92       	push	r11
    1d02:	cf 92       	push	r12
    1d04:	df 92       	push	r13
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	3c 01       	movw	r6, r24
    1d0c:	a6 2f       	mov	r26, r22
    1d0e:	b0 e0       	ldi	r27, 0x00	; 0
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	3f e2       	ldi	r19, 0x2F	; 47
    1d14:	4a e3       	ldi	r20, 0x3A	; 58
    1d16:	50 e0       	ldi	r21, 0x00	; 0
    1d18:	b0 d4       	rcall	.+2400   	; 0x267a <__muluhisi3>
    1d1a:	6b 01       	movw	r12, r22
    1d1c:	7c 01       	movw	r14, r24
    1d1e:	24 ef       	ldi	r18, 0xF4	; 244
    1d20:	c2 0e       	add	r12, r18
    1d22:	21 e0       	ldi	r18, 0x01	; 1
    1d24:	d2 1e       	adc	r13, r18
    1d26:	e1 1c       	adc	r14, r1
    1d28:	f1 1c       	adc	r15, r1
    1d2a:	0f 2e       	mov	r0, r31
    1d2c:	f8 ee       	ldi	r31, 0xE8	; 232
    1d2e:	8f 2e       	mov	r8, r31
    1d30:	f3 e0       	ldi	r31, 0x03	; 3
    1d32:	9f 2e       	mov	r9, r31
    1d34:	a1 2c       	mov	r10, r1
    1d36:	b1 2c       	mov	r11, r1
    1d38:	f0 2d       	mov	r31, r0
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	a5 01       	movw	r20, r10
    1d40:	94 01       	movw	r18, r8
    1d42:	61 d4       	rcall	.+2242   	; 0x2606 <__udivmodsi4>
    1d44:	d3 01       	movw	r26, r6
    1d46:	99 d4       	rcall	.+2354   	; 0x267a <__muluhisi3>
    1d48:	2b 01       	movw	r4, r22
    1d4a:	3c 01       	movw	r6, r24
    1d4c:	c7 01       	movw	r24, r14
    1d4e:	b6 01       	movw	r22, r12
    1d50:	20 ed       	ldi	r18, 0xD0	; 208
    1d52:	37 e0       	ldi	r19, 0x07	; 7
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	50 e0       	ldi	r21, 0x00	; 0
    1d58:	56 d4       	rcall	.+2220   	; 0x2606 <__udivmodsi4>
    1d5a:	c3 01       	movw	r24, r6
    1d5c:	b2 01       	movw	r22, r4
    1d5e:	62 0f       	add	r22, r18
    1d60:	73 1f       	adc	r23, r19
    1d62:	84 1f       	adc	r24, r20
    1d64:	95 1f       	adc	r25, r21
    1d66:	a5 01       	movw	r20, r10
    1d68:	94 01       	movw	r18, r8
    1d6a:	4d d4       	rcall	.+2202   	; 0x2606 <__udivmodsi4>
    1d6c:	ca 01       	movw	r24, r20
    1d6e:	b9 01       	movw	r22, r18
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	bf 90       	pop	r11
    1d7a:	af 90       	pop	r10
    1d7c:	9f 90       	pop	r9
    1d7e:	8f 90       	pop	r8
    1d80:	7f 90       	pop	r7
    1d82:	6f 90       	pop	r6
    1d84:	5f 90       	pop	r5
    1d86:	4f 90       	pop	r4
    1d88:	08 95       	ret

00001d8a <getVcselPulsePeriod>:
    1d8a:	61 11       	cpse	r22, r1
    1d8c:	05 c0       	rjmp	.+10     	; 0x1d98 <getVcselPulsePeriod+0xe>
    1d8e:	60 e5       	ldi	r22, 0x50	; 80
    1d90:	46 de       	rcall	.-884    	; 0x1a1e <readReg>
    1d92:	8f 5f       	subi	r24, 0xFF	; 255
    1d94:	88 0f       	add	r24, r24
    1d96:	08 95       	ret
    1d98:	61 30       	cpi	r22, 0x01	; 1
    1d9a:	29 f4       	brne	.+10     	; 0x1da6 <getVcselPulsePeriod+0x1c>
    1d9c:	60 e7       	ldi	r22, 0x70	; 112
    1d9e:	3f de       	rcall	.-898    	; 0x1a1e <readReg>
    1da0:	8f 5f       	subi	r24, 0xFF	; 255
    1da2:	88 0f       	add	r24, r24
    1da4:	08 95       	ret
    1da6:	8f ef       	ldi	r24, 0xFF	; 255
    1da8:	08 95       	ret

00001daa <getSequenceStepTimeouts>:
    1daa:	ef 92       	push	r14
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	8c 01       	movw	r16, r24
    1db8:	7b 01       	movw	r14, r22
    1dba:	ea 01       	movw	r28, r20
    1dbc:	60 e0       	ldi	r22, 0x00	; 0
    1dbe:	e5 df       	rcall	.-54     	; 0x1d8a <getVcselPulsePeriod>
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	99 83       	std	Y+1, r25	; 0x01
    1dc4:	88 83       	st	Y, r24
    1dc6:	66 e4       	ldi	r22, 0x46	; 70
    1dc8:	c8 01       	movw	r24, r16
    1dca:	29 de       	rcall	.-942    	; 0x1a1e <readReg>
    1dcc:	90 e0       	ldi	r25, 0x00	; 0
    1dce:	01 96       	adiw	r24, 0x01	; 1
    1dd0:	9d 83       	std	Y+5, r25	; 0x05
    1dd2:	8c 83       	std	Y+4, r24	; 0x04
    1dd4:	68 81       	ld	r22, Y
    1dd6:	8d df       	rcall	.-230    	; 0x1cf2 <timeoutMclksToMicroseconds>
    1dd8:	6a 87       	std	Y+10, r22	; 0x0a
    1dda:	7b 87       	std	Y+11, r23	; 0x0b
    1ddc:	8c 87       	std	Y+12, r24	; 0x0c
    1dde:	9d 87       	std	Y+13, r25	; 0x0d
    1de0:	61 e5       	ldi	r22, 0x51	; 81
    1de2:	c8 01       	movw	r24, r16
    1de4:	37 de       	rcall	.-914    	; 0x1a54 <readReg16Bit>
    1de6:	7a df       	rcall	.-268    	; 0x1cdc <decodeTimeout>
    1de8:	9f 83       	std	Y+7, r25	; 0x07
    1dea:	8e 83       	std	Y+6, r24	; 0x06
    1dec:	68 81       	ld	r22, Y
    1dee:	81 df       	rcall	.-254    	; 0x1cf2 <timeoutMclksToMicroseconds>
    1df0:	6e 87       	std	Y+14, r22	; 0x0e
    1df2:	7f 87       	std	Y+15, r23	; 0x0f
    1df4:	88 8b       	std	Y+16, r24	; 0x10
    1df6:	99 8b       	std	Y+17, r25	; 0x11
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	c6 df       	rcall	.-116    	; 0x1d8a <getVcselPulsePeriod>
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	9b 83       	std	Y+3, r25	; 0x03
    1e02:	8a 83       	std	Y+2, r24	; 0x02
    1e04:	61 e7       	ldi	r22, 0x71	; 113
    1e06:	c8 01       	movw	r24, r16
    1e08:	25 de       	rcall	.-950    	; 0x1a54 <readReg16Bit>
    1e0a:	68 df       	rcall	.-304    	; 0x1cdc <decodeTimeout>
    1e0c:	99 87       	std	Y+9, r25	; 0x09
    1e0e:	88 87       	std	Y+8, r24	; 0x08
    1e10:	f7 01       	movw	r30, r14
    1e12:	23 81       	ldd	r18, Z+3	; 0x03
    1e14:	22 23       	and	r18, r18
    1e16:	31 f0       	breq	.+12     	; 0x1e24 <getSequenceStepTimeouts+0x7a>
    1e18:	2e 81       	ldd	r18, Y+6	; 0x06
    1e1a:	3f 81       	ldd	r19, Y+7	; 0x07
    1e1c:	82 1b       	sub	r24, r18
    1e1e:	93 0b       	sbc	r25, r19
    1e20:	99 87       	std	Y+9, r25	; 0x09
    1e22:	88 87       	std	Y+8, r24	; 0x08
    1e24:	6a 81       	ldd	r22, Y+2	; 0x02
    1e26:	88 85       	ldd	r24, Y+8	; 0x08
    1e28:	99 85       	ldd	r25, Y+9	; 0x09
    1e2a:	63 df       	rcall	.-314    	; 0x1cf2 <timeoutMclksToMicroseconds>
    1e2c:	6a 8b       	std	Y+18, r22	; 0x12
    1e2e:	7b 8b       	std	Y+19, r23	; 0x13
    1e30:	8c 8b       	std	Y+20, r24	; 0x14
    1e32:	9d 8b       	std	Y+21, r25	; 0x15
    1e34:	df 91       	pop	r29
    1e36:	cf 91       	pop	r28
    1e38:	1f 91       	pop	r17
    1e3a:	0f 91       	pop	r16
    1e3c:	ff 90       	pop	r15
    1e3e:	ef 90       	pop	r14
    1e40:	08 95       	ret

00001e42 <timeoutMicrosecondsToMclks>:
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	4b 01       	movw	r8, r22
    1e54:	5c 01       	movw	r10, r24
    1e56:	a4 2f       	mov	r26, r20
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	3f e2       	ldi	r19, 0x2F	; 47
    1e5e:	4a e3       	ldi	r20, 0x3A	; 58
    1e60:	50 e0       	ldi	r21, 0x00	; 0
    1e62:	0b d4       	rcall	.+2070   	; 0x267a <__muluhisi3>
    1e64:	6b 01       	movw	r12, r22
    1e66:	7c 01       	movw	r14, r24
    1e68:	24 ef       	ldi	r18, 0xF4	; 244
    1e6a:	c2 0e       	add	r12, r18
    1e6c:	21 e0       	ldi	r18, 0x01	; 1
    1e6e:	d2 1e       	adc	r13, r18
    1e70:	e1 1c       	adc	r14, r1
    1e72:	f1 1c       	adc	r15, r1
    1e74:	a8 ee       	ldi	r26, 0xE8	; 232
    1e76:	b3 e0       	ldi	r27, 0x03	; 3
    1e78:	a5 01       	movw	r20, r10
    1e7a:	94 01       	movw	r18, r8
    1e7c:	fe d3       	rcall	.+2044   	; 0x267a <__muluhisi3>
    1e7e:	4b 01       	movw	r8, r22
    1e80:	5c 01       	movw	r10, r24
    1e82:	c7 01       	movw	r24, r14
    1e84:	b6 01       	movw	r22, r12
    1e86:	20 ed       	ldi	r18, 0xD0	; 208
    1e88:	37 e0       	ldi	r19, 0x07	; 7
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e0       	ldi	r21, 0x00	; 0
    1e8e:	bb d3       	rcall	.+1910   	; 0x2606 <__udivmodsi4>
    1e90:	82 0e       	add	r8, r18
    1e92:	93 1e       	adc	r9, r19
    1e94:	a4 1e       	adc	r10, r20
    1e96:	b5 1e       	adc	r11, r21
    1e98:	c7 01       	movw	r24, r14
    1e9a:	b6 01       	movw	r22, r12
    1e9c:	28 ee       	ldi	r18, 0xE8	; 232
    1e9e:	33 e0       	ldi	r19, 0x03	; 3
    1ea0:	40 e0       	ldi	r20, 0x00	; 0
    1ea2:	50 e0       	ldi	r21, 0x00	; 0
    1ea4:	b0 d3       	rcall	.+1888   	; 0x2606 <__udivmodsi4>
    1ea6:	c5 01       	movw	r24, r10
    1ea8:	b4 01       	movw	r22, r8
    1eaa:	ad d3       	rcall	.+1882   	; 0x2606 <__udivmodsi4>
    1eac:	ca 01       	movw	r24, r20
    1eae:	b9 01       	movw	r22, r18
    1eb0:	ff 90       	pop	r15
    1eb2:	ef 90       	pop	r14
    1eb4:	df 90       	pop	r13
    1eb6:	cf 90       	pop	r12
    1eb8:	bf 90       	pop	r11
    1eba:	af 90       	pop	r10
    1ebc:	9f 90       	pop	r9
    1ebe:	8f 90       	pop	r8
    1ec0:	08 95       	ret

00001ec2 <performSingleRefCalibration>:
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	ec 01       	movw	r28, r24
    1ec8:	46 2f       	mov	r20, r22
    1eca:	41 60       	ori	r20, 0x01	; 1
    1ecc:	60 e0       	ldi	r22, 0x00	; 0
    1ece:	53 dd       	rcall	.-1370   	; 0x1976 <writeReg>
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	21 dd       	rcall	.-1470   	; 0x1916 <startTimeout>
    1ed4:	04 c0       	rjmp	.+8      	; 0x1ede <performSingleRefCalibration+0x1c>
    1ed6:	ce 01       	movw	r24, r28
    1ed8:	2a dd       	rcall	.-1452   	; 0x192e <checkTimeoutExpired>
    1eda:	81 11       	cpse	r24, r1
    1edc:	0f c0       	rjmp	.+30     	; 0x1efc <performSingleRefCalibration+0x3a>
    1ede:	63 e1       	ldi	r22, 0x13	; 19
    1ee0:	ce 01       	movw	r24, r28
    1ee2:	9d dd       	rcall	.-1222   	; 0x1a1e <readReg>
    1ee4:	87 70       	andi	r24, 0x07	; 7
    1ee6:	b9 f3       	breq	.-18     	; 0x1ed6 <performSingleRefCalibration+0x14>
    1ee8:	41 e0       	ldi	r20, 0x01	; 1
    1eea:	6b e0       	ldi	r22, 0x0B	; 11
    1eec:	ce 01       	movw	r24, r28
    1eee:	43 dd       	rcall	.-1402   	; 0x1976 <writeReg>
    1ef0:	40 e0       	ldi	r20, 0x00	; 0
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	3f dd       	rcall	.-1410   	; 0x1976 <writeReg>
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <performSingleRefCalibration+0x3c>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	08 95       	ret

00001f04 <setMeasurementTimingBudget>:
    1f04:	8f 92       	push	r8
    1f06:	9f 92       	push	r9
    1f08:	af 92       	push	r10
    1f0a:	bf 92       	push	r11
    1f0c:	df 92       	push	r13
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	6b 97       	sbiw	r28, 0x1b	; 27
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	40 32       	cpi	r20, 0x20	; 32
    1f2c:	2e e4       	ldi	r18, 0x4E	; 78
    1f2e:	52 07       	cpc	r21, r18
    1f30:	61 05       	cpc	r22, r1
    1f32:	71 05       	cpc	r23, r1
    1f34:	08 f4       	brcc	.+2      	; 0x1f38 <setMeasurementTimingBudget+0x34>
    1f36:	74 c0       	rjmp	.+232    	; 0x2020 <setMeasurementTimingBudget+0x11c>
    1f38:	4a 01       	movw	r8, r20
    1f3a:	5b 01       	movw	r10, r22
    1f3c:	7c 01       	movw	r14, r24
    1f3e:	be 01       	movw	r22, r28
    1f40:	6f 5f       	subi	r22, 0xFF	; 255
    1f42:	7f 4f       	sbci	r23, 0xFF	; 255
    1f44:	83 de       	rcall	.-762    	; 0x1c4c <getSequenceStepEnables>
    1f46:	ae 01       	movw	r20, r28
    1f48:	4a 5f       	subi	r20, 0xFA	; 250
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	be 01       	movw	r22, r28
    1f4e:	6f 5f       	subi	r22, 0xFF	; 255
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	c7 01       	movw	r24, r14
    1f54:	2a df       	rcall	.-428    	; 0x1daa <getSequenceStepTimeouts>
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	88 23       	and	r24, r24
    1f5a:	49 f0       	breq	.+18     	; 0x1f6e <setMeasurementTimingBudget+0x6a>
    1f5c:	08 89       	ldd	r16, Y+16	; 0x10
    1f5e:	19 89       	ldd	r17, Y+17	; 0x11
    1f60:	2a 89       	ldd	r18, Y+18	; 0x12
    1f62:	3b 89       	ldd	r19, Y+19	; 0x13
    1f64:	0a 5c       	subi	r16, 0xCA	; 202
    1f66:	14 4f       	sbci	r17, 0xF4	; 244
    1f68:	2f 4f       	sbci	r18, 0xFF	; 255
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <setMeasurementTimingBudget+0x72>
    1f6e:	08 ee       	ldi	r16, 0xE8	; 232
    1f70:	18 e0       	ldi	r17, 0x08	; 8
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	8b 81       	ldd	r24, Y+3	; 0x03
    1f78:	88 23       	and	r24, r24
    1f7a:	89 f0       	breq	.+34     	; 0x1f9e <setMeasurementTimingBudget+0x9a>
    1f7c:	88 89       	ldd	r24, Y+16	; 0x10
    1f7e:	99 89       	ldd	r25, Y+17	; 0x11
    1f80:	aa 89       	ldd	r26, Y+18	; 0x12
    1f82:	bb 89       	ldd	r27, Y+19	; 0x13
    1f84:	8e 54       	subi	r24, 0x4E	; 78
    1f86:	9d 4f       	sbci	r25, 0xFD	; 253
    1f88:	af 4f       	sbci	r26, 0xFF	; 255
    1f8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f8c:	88 0f       	add	r24, r24
    1f8e:	99 1f       	adc	r25, r25
    1f90:	aa 1f       	adc	r26, r26
    1f92:	bb 1f       	adc	r27, r27
    1f94:	08 0f       	add	r16, r24
    1f96:	19 1f       	adc	r17, r25
    1f98:	2a 1f       	adc	r18, r26
    1f9a:	3b 1f       	adc	r19, r27
    1f9c:	0f c0       	rjmp	.+30     	; 0x1fbc <setMeasurementTimingBudget+0xb8>
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	88 23       	and	r24, r24
    1fa2:	61 f0       	breq	.+24     	; 0x1fbc <setMeasurementTimingBudget+0xb8>
    1fa4:	88 89       	ldd	r24, Y+16	; 0x10
    1fa6:	99 89       	ldd	r25, Y+17	; 0x11
    1fa8:	aa 89       	ldd	r26, Y+18	; 0x12
    1faa:	bb 89       	ldd	r27, Y+19	; 0x13
    1fac:	8c 56       	subi	r24, 0x6C	; 108
    1fae:	9d 4f       	sbci	r25, 0xFD	; 253
    1fb0:	af 4f       	sbci	r26, 0xFF	; 255
    1fb2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fb4:	08 0f       	add	r16, r24
    1fb6:	19 1f       	adc	r17, r25
    1fb8:	2a 1f       	adc	r18, r26
    1fba:	3b 1f       	adc	r19, r27
    1fbc:	dc 80       	ldd	r13, Y+4	; 0x04
    1fbe:	dd 20       	and	r13, r13
    1fc0:	61 f0       	breq	.+24     	; 0x1fda <setMeasurementTimingBudget+0xd6>
    1fc2:	8c 89       	ldd	r24, Y+20	; 0x14
    1fc4:	9d 89       	ldd	r25, Y+21	; 0x15
    1fc6:	ae 89       	ldd	r26, Y+22	; 0x16
    1fc8:	bf 89       	ldd	r27, Y+23	; 0x17
    1fca:	8c 56       	subi	r24, 0x6C	; 108
    1fcc:	9d 4f       	sbci	r25, 0xFD	; 253
    1fce:	af 4f       	sbci	r26, 0xFF	; 255
    1fd0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fd2:	08 0f       	add	r16, r24
    1fd4:	19 1f       	adc	r17, r25
    1fd6:	2a 1f       	adc	r18, r26
    1fd8:	3b 1f       	adc	r19, r27
    1fda:	8d 81       	ldd	r24, Y+5	; 0x05
    1fdc:	88 23       	and	r24, r24
    1fde:	11 f1       	breq	.+68     	; 0x2024 <setMeasurementTimingBudget+0x120>
    1fe0:	0a 5d       	subi	r16, 0xDA	; 218
    1fe2:	1d 4f       	sbci	r17, 0xFD	; 253
    1fe4:	2f 4f       	sbci	r18, 0xFF	; 255
    1fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe8:	80 16       	cp	r8, r16
    1fea:	91 06       	cpc	r9, r17
    1fec:	a2 06       	cpc	r10, r18
    1fee:	b3 06       	cpc	r11, r19
    1ff0:	d8 f0       	brcs	.+54     	; 0x2028 <setMeasurementTimingBudget+0x124>
    1ff2:	c5 01       	movw	r24, r10
    1ff4:	b4 01       	movw	r22, r8
    1ff6:	60 1b       	sub	r22, r16
    1ff8:	71 0b       	sbc	r23, r17
    1ffa:	82 0b       	sbc	r24, r18
    1ffc:	93 0b       	sbc	r25, r19
    1ffe:	48 85       	ldd	r20, Y+8	; 0x08
    2000:	20 df       	rcall	.-448    	; 0x1e42 <timeoutMicrosecondsToMclks>
    2002:	9b 01       	movw	r18, r22
    2004:	dd 20       	and	r13, r13
    2006:	21 f0       	breq	.+8      	; 0x2010 <setMeasurementTimingBudget+0x10c>
    2008:	2c 85       	ldd	r18, Y+12	; 0x0c
    200a:	3d 85       	ldd	r19, Y+13	; 0x0d
    200c:	26 0f       	add	r18, r22
    200e:	37 1f       	adc	r19, r23
    2010:	c9 01       	movw	r24, r18
    2012:	38 de       	rcall	.-912    	; 0x1c84 <encodeTimeout>
    2014:	ac 01       	movw	r20, r24
    2016:	61 e7       	ldi	r22, 0x71	; 113
    2018:	c7 01       	movw	r24, r14
    201a:	c1 dc       	rcall	.-1662   	; 0x199e <writeReg16Bit>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	05 c0       	rjmp	.+10     	; 0x202a <setMeasurementTimingBudget+0x126>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	03 c0       	rjmp	.+6      	; 0x202a <setMeasurementTimingBudget+0x126>
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	01 c0       	rjmp	.+2      	; 0x202a <setMeasurementTimingBudget+0x126>
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	6b 96       	adiw	r28, 0x1b	; 27
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	df 91       	pop	r29
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	ff 90       	pop	r15
    2040:	ef 90       	pop	r14
    2042:	df 90       	pop	r13
    2044:	bf 90       	pop	r11
    2046:	af 90       	pop	r10
    2048:	9f 90       	pop	r9
    204a:	8f 90       	pop	r8
    204c:	08 95       	ret

0000204e <vl53l0x_init>:
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	ec 01       	movw	r28, r24
    2054:	80 e8       	ldi	r24, 0x80	; 128
    2056:	9a e1       	ldi	r25, 0x1A	; 26
    2058:	a6 e0       	ldi	r26, 0x06	; 6
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <s_i2cInterface>
    2060:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <s_i2cInterface+0x1>
    2064:	a0 93 4e 01 	sts	0x014E, r26	; 0x80014e <s_i2cInterface+0x2>
    2068:	b0 93 4f 01 	sts	0x014F, r27	; 0x80014f <s_i2cInterface+0x3>
    206c:	60 e8       	ldi	r22, 0x80	; 128
    206e:	7a e1       	ldi	r23, 0x1A	; 26
    2070:	86 e0       	ldi	r24, 0x06	; 6
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 2e 02 	call	0x45c	; 0x45c <i2c_init>
    2078:	0e 94 57 02 	call	0x4ae	; 0x4ae <i2c_start>
    207c:	1a 82       	std	Y+2, r1	; 0x02
    207e:	19 82       	std	Y+1, r1	; 0x01
    2080:	1b 82       	std	Y+3, r1	; 0x03
    2082:	6c 81       	ldd	r22, Y+4	; 0x04
    2084:	7d 81       	ldd	r23, Y+5	; 0x05
    2086:	8e 81       	ldd	r24, Y+6	; 0x06
    2088:	9f 81       	ldd	r25, Y+7	; 0x07
    208a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <gpio_init>
    208e:	ce 01       	movw	r24, r28
    2090:	04 96       	adiw	r24, 0x04	; 4
    2092:	0e 94 93 01 	call	0x326	; 0x326 <gpio_setDirectionOutput>
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	08 95       	ret

0000209c <vl53l0x_start>:
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	cf 93       	push	r28
    20a2:	df 93       	push	r29
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	28 97       	sbiw	r28, 0x08	; 8
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	8c 01       	movw	r16, r24
    20b6:	fc 01       	movw	r30, r24
    20b8:	64 81       	ldd	r22, Z+4	; 0x04
    20ba:	75 81       	ldd	r23, Z+5	; 0x05
    20bc:	86 81       	ldd	r24, Z+6	; 0x06
    20be:	97 81       	ldd	r25, Z+7	; 0x07
    20c0:	0e 94 9c 01 	call	0x338	; 0x338 <gpio_out_set>
    20c4:	69 e8       	ldi	r22, 0x89	; 137
    20c6:	c8 01       	movw	r24, r16
    20c8:	aa dc       	rcall	.-1708   	; 0x1a1e <readReg>
    20ca:	48 2f       	mov	r20, r24
    20cc:	41 60       	ori	r20, 0x01	; 1
    20ce:	69 e8       	ldi	r22, 0x89	; 137
    20d0:	c8 01       	movw	r24, r16
    20d2:	51 dc       	rcall	.-1886   	; 0x1976 <writeReg>
    20d4:	40 e0       	ldi	r20, 0x00	; 0
    20d6:	68 e8       	ldi	r22, 0x88	; 136
    20d8:	c8 01       	movw	r24, r16
    20da:	4d dc       	rcall	.-1894   	; 0x1976 <writeReg>
    20dc:	41 e0       	ldi	r20, 0x01	; 1
    20de:	60 e8       	ldi	r22, 0x80	; 128
    20e0:	c8 01       	movw	r24, r16
    20e2:	49 dc       	rcall	.-1902   	; 0x1976 <writeReg>
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	6f ef       	ldi	r22, 0xFF	; 255
    20e8:	c8 01       	movw	r24, r16
    20ea:	45 dc       	rcall	.-1910   	; 0x1976 <writeReg>
    20ec:	40 e0       	ldi	r20, 0x00	; 0
    20ee:	60 e0       	ldi	r22, 0x00	; 0
    20f0:	c8 01       	movw	r24, r16
    20f2:	41 dc       	rcall	.-1918   	; 0x1976 <writeReg>
    20f4:	61 e9       	ldi	r22, 0x91	; 145
    20f6:	c8 01       	movw	r24, r16
    20f8:	92 dc       	rcall	.-1756   	; 0x1a1e <readReg>
    20fa:	f8 01       	movw	r30, r16
    20fc:	82 87       	std	Z+10, r24	; 0x0a
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	60 e0       	ldi	r22, 0x00	; 0
    2102:	c8 01       	movw	r24, r16
    2104:	38 dc       	rcall	.-1936   	; 0x1976 <writeReg>
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	6f ef       	ldi	r22, 0xFF	; 255
    210a:	c8 01       	movw	r24, r16
    210c:	34 dc       	rcall	.-1944   	; 0x1976 <writeReg>
    210e:	40 e0       	ldi	r20, 0x00	; 0
    2110:	60 e8       	ldi	r22, 0x80	; 128
    2112:	c8 01       	movw	r24, r16
    2114:	30 dc       	rcall	.-1952   	; 0x1976 <writeReg>
    2116:	60 e6       	ldi	r22, 0x60	; 96
    2118:	c8 01       	movw	r24, r16
    211a:	81 dc       	rcall	.-1790   	; 0x1a1e <readReg>
    211c:	48 2f       	mov	r20, r24
    211e:	42 61       	ori	r20, 0x12	; 18
    2120:	60 e6       	ldi	r22, 0x60	; 96
    2122:	c8 01       	movw	r24, r16
    2124:	28 dc       	rcall	.-1968   	; 0x1976 <writeReg>
    2126:	40 e2       	ldi	r20, 0x20	; 32
    2128:	50 e0       	ldi	r21, 0x00	; 0
    212a:	64 e4       	ldi	r22, 0x44	; 68
    212c:	c8 01       	movw	r24, r16
    212e:	37 dc       	rcall	.-1938   	; 0x199e <writeReg16Bit>
    2130:	4f ef       	ldi	r20, 0xFF	; 255
    2132:	61 e0       	ldi	r22, 0x01	; 1
    2134:	c8 01       	movw	r24, r16
    2136:	1f dc       	rcall	.-1986   	; 0x1976 <writeReg>
    2138:	ae 01       	movw	r20, r28
    213a:	4e 5f       	subi	r20, 0xFE	; 254
    213c:	5f 4f       	sbci	r21, 0xFF	; 255
    213e:	be 01       	movw	r22, r28
    2140:	6f 5f       	subi	r22, 0xFF	; 255
    2142:	7f 4f       	sbci	r23, 0xFF	; 255
    2144:	c8 01       	movw	r24, r16
    2146:	08 dd       	rcall	.-1520   	; 0x1b58 <getSpadInfo>
    2148:	88 23       	and	r24, r24
    214a:	09 f4       	brne	.+2      	; 0x214e <vl53l0x_start+0xb2>
    214c:	d2 c1       	rjmp	.+932    	; 0x24f2 <vl53l0x_start+0x456>
    214e:	26 e0       	ldi	r18, 0x06	; 6
    2150:	ae 01       	movw	r20, r28
    2152:	4d 5f       	subi	r20, 0xFD	; 253
    2154:	5f 4f       	sbci	r21, 0xFF	; 255
    2156:	60 eb       	ldi	r22, 0xB0	; 176
    2158:	c8 01       	movw	r24, r16
    215a:	c8 dc       	rcall	.-1648   	; 0x1aec <readMulti>
    215c:	41 e0       	ldi	r20, 0x01	; 1
    215e:	6f ef       	ldi	r22, 0xFF	; 255
    2160:	c8 01       	movw	r24, r16
    2162:	09 dc       	rcall	.-2030   	; 0x1976 <writeReg>
    2164:	40 e0       	ldi	r20, 0x00	; 0
    2166:	6f e4       	ldi	r22, 0x4F	; 79
    2168:	c8 01       	movw	r24, r16
    216a:	05 dc       	rcall	.-2038   	; 0x1976 <writeReg>
    216c:	4c e2       	ldi	r20, 0x2C	; 44
    216e:	6e e4       	ldi	r22, 0x4E	; 78
    2170:	c8 01       	movw	r24, r16
    2172:	01 dc       	rcall	.-2046   	; 0x1976 <writeReg>
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	6f ef       	ldi	r22, 0xFF	; 255
    2178:	c8 01       	movw	r24, r16
    217a:	fd db       	rcall	.-2054   	; 0x1976 <writeReg>
    217c:	44 eb       	ldi	r20, 0xB4	; 180
    217e:	66 eb       	ldi	r22, 0xB6	; 182
    2180:	c8 01       	movw	r24, r16
    2182:	f9 db       	rcall	.-2062   	; 0x1976 <writeReg>
    2184:	8a 81       	ldd	r24, Y+2	; 0x02
    2186:	81 11       	cpse	r24, r1
    2188:	02 c0       	rjmp	.+4      	; 0x218e <vl53l0x_start+0xf2>
    218a:	60 e0       	ldi	r22, 0x00	; 0
    218c:	01 c0       	rjmp	.+2      	; 0x2190 <vl53l0x_start+0xf4>
    218e:	6c e0       	ldi	r22, 0x0C	; 12
    2190:	a9 81       	ldd	r26, Y+1	; 0x01
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	70 e0       	ldi	r23, 0x00	; 0
    2196:	41 e0       	ldi	r20, 0x01	; 1
    2198:	50 e0       	ldi	r21, 0x00	; 0
    219a:	86 17       	cp	r24, r22
    219c:	10 f0       	brcs	.+4      	; 0x21a2 <vl53l0x_start+0x106>
    219e:	a7 13       	cpse	r26, r23
    21a0:	18 c0       	rjmp	.+48     	; 0x21d2 <vl53l0x_start+0x136>
    21a2:	98 2f       	mov	r25, r24
    21a4:	96 95       	lsr	r25
    21a6:	96 95       	lsr	r25
    21a8:	96 95       	lsr	r25
    21aa:	e3 e0       	ldi	r30, 0x03	; 3
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	ec 0f       	add	r30, r28
    21b0:	fd 1f       	adc	r31, r29
    21b2:	e9 0f       	add	r30, r25
    21b4:	f1 1d       	adc	r31, r1
    21b6:	98 2f       	mov	r25, r24
    21b8:	97 70       	andi	r25, 0x07	; 7
    21ba:	9a 01       	movw	r18, r20
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vl53l0x_start+0x126>
    21be:	22 0f       	add	r18, r18
    21c0:	33 1f       	adc	r19, r19
    21c2:	9a 95       	dec	r25
    21c4:	e2 f7       	brpl	.-8      	; 0x21be <vl53l0x_start+0x122>
    21c6:	92 2f       	mov	r25, r18
    21c8:	90 95       	com	r25
    21ca:	20 81       	ld	r18, Z
    21cc:	92 23       	and	r25, r18
    21ce:	90 83       	st	Z, r25
    21d0:	15 c0       	rjmp	.+42     	; 0x21fc <vl53l0x_start+0x160>
    21d2:	98 2f       	mov	r25, r24
    21d4:	96 95       	lsr	r25
    21d6:	96 95       	lsr	r25
    21d8:	96 95       	lsr	r25
    21da:	e3 e0       	ldi	r30, 0x03	; 3
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	ec 0f       	add	r30, r28
    21e0:	fd 1f       	adc	r31, r29
    21e2:	e9 0f       	add	r30, r25
    21e4:	f1 1d       	adc	r31, r1
    21e6:	20 81       	ld	r18, Z
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	98 2f       	mov	r25, r24
    21ec:	97 70       	andi	r25, 0x07	; 7
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <vl53l0x_start+0x158>
    21f0:	35 95       	asr	r19
    21f2:	27 95       	ror	r18
    21f4:	9a 95       	dec	r25
    21f6:	e2 f7       	brpl	.-8      	; 0x21f0 <vl53l0x_start+0x154>
    21f8:	20 fd       	sbrc	r18, 0
    21fa:	7f 5f       	subi	r23, 0xFF	; 255
    21fc:	8f 5f       	subi	r24, 0xFF	; 255
    21fe:	80 33       	cpi	r24, 0x30	; 48
    2200:	61 f6       	brne	.-104    	; 0x219a <vl53l0x_start+0xfe>
    2202:	26 e0       	ldi	r18, 0x06	; 6
    2204:	ae 01       	movw	r20, r28
    2206:	4d 5f       	subi	r20, 0xFD	; 253
    2208:	5f 4f       	sbci	r21, 0xFF	; 255
    220a:	60 eb       	ldi	r22, 0xB0	; 176
    220c:	c8 01       	movw	r24, r16
    220e:	43 dc       	rcall	.-1914   	; 0x1a96 <writeMulti>
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	6f ef       	ldi	r22, 0xFF	; 255
    2214:	c8 01       	movw	r24, r16
    2216:	af db       	rcall	.-2210   	; 0x1976 <writeReg>
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	60 e0       	ldi	r22, 0x00	; 0
    221c:	c8 01       	movw	r24, r16
    221e:	ab db       	rcall	.-2218   	; 0x1976 <writeReg>
    2220:	40 e0       	ldi	r20, 0x00	; 0
    2222:	6f ef       	ldi	r22, 0xFF	; 255
    2224:	c8 01       	movw	r24, r16
    2226:	a7 db       	rcall	.-2226   	; 0x1976 <writeReg>
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	69 e0       	ldi	r22, 0x09	; 9
    222c:	c8 01       	movw	r24, r16
    222e:	a3 db       	rcall	.-2234   	; 0x1976 <writeReg>
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	60 e1       	ldi	r22, 0x10	; 16
    2234:	c8 01       	movw	r24, r16
    2236:	9f db       	rcall	.-2242   	; 0x1976 <writeReg>
    2238:	40 e0       	ldi	r20, 0x00	; 0
    223a:	61 e1       	ldi	r22, 0x11	; 17
    223c:	c8 01       	movw	r24, r16
    223e:	9b db       	rcall	.-2250   	; 0x1976 <writeReg>
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	64 e2       	ldi	r22, 0x24	; 36
    2244:	c8 01       	movw	r24, r16
    2246:	97 db       	rcall	.-2258   	; 0x1976 <writeReg>
    2248:	4f ef       	ldi	r20, 0xFF	; 255
    224a:	65 e2       	ldi	r22, 0x25	; 37
    224c:	c8 01       	movw	r24, r16
    224e:	93 db       	rcall	.-2266   	; 0x1976 <writeReg>
    2250:	40 e0       	ldi	r20, 0x00	; 0
    2252:	65 e7       	ldi	r22, 0x75	; 117
    2254:	c8 01       	movw	r24, r16
    2256:	8f db       	rcall	.-2274   	; 0x1976 <writeReg>
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	6f ef       	ldi	r22, 0xFF	; 255
    225c:	c8 01       	movw	r24, r16
    225e:	8b db       	rcall	.-2282   	; 0x1976 <writeReg>
    2260:	4c e2       	ldi	r20, 0x2C	; 44
    2262:	6e e4       	ldi	r22, 0x4E	; 78
    2264:	c8 01       	movw	r24, r16
    2266:	87 db       	rcall	.-2290   	; 0x1976 <writeReg>
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	68 e4       	ldi	r22, 0x48	; 72
    226c:	c8 01       	movw	r24, r16
    226e:	83 db       	rcall	.-2298   	; 0x1976 <writeReg>
    2270:	40 e2       	ldi	r20, 0x20	; 32
    2272:	60 e3       	ldi	r22, 0x30	; 48
    2274:	c8 01       	movw	r24, r16
    2276:	7f db       	rcall	.-2306   	; 0x1976 <writeReg>
    2278:	40 e0       	ldi	r20, 0x00	; 0
    227a:	6f ef       	ldi	r22, 0xFF	; 255
    227c:	c8 01       	movw	r24, r16
    227e:	7b db       	rcall	.-2314   	; 0x1976 <writeReg>
    2280:	49 e0       	ldi	r20, 0x09	; 9
    2282:	60 e3       	ldi	r22, 0x30	; 48
    2284:	c8 01       	movw	r24, r16
    2286:	77 db       	rcall	.-2322   	; 0x1976 <writeReg>
    2288:	40 e0       	ldi	r20, 0x00	; 0
    228a:	64 e5       	ldi	r22, 0x54	; 84
    228c:	c8 01       	movw	r24, r16
    228e:	73 db       	rcall	.-2330   	; 0x1976 <writeReg>
    2290:	44 e0       	ldi	r20, 0x04	; 4
    2292:	61 e3       	ldi	r22, 0x31	; 49
    2294:	c8 01       	movw	r24, r16
    2296:	6f db       	rcall	.-2338   	; 0x1976 <writeReg>
    2298:	43 e0       	ldi	r20, 0x03	; 3
    229a:	62 e3       	ldi	r22, 0x32	; 50
    229c:	c8 01       	movw	r24, r16
    229e:	6b db       	rcall	.-2346   	; 0x1976 <writeReg>
    22a0:	43 e8       	ldi	r20, 0x83	; 131
    22a2:	60 e4       	ldi	r22, 0x40	; 64
    22a4:	c8 01       	movw	r24, r16
    22a6:	67 db       	rcall	.-2354   	; 0x1976 <writeReg>
    22a8:	45 e2       	ldi	r20, 0x25	; 37
    22aa:	66 e4       	ldi	r22, 0x46	; 70
    22ac:	c8 01       	movw	r24, r16
    22ae:	63 db       	rcall	.-2362   	; 0x1976 <writeReg>
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	60 e6       	ldi	r22, 0x60	; 96
    22b4:	c8 01       	movw	r24, r16
    22b6:	5f db       	rcall	.-2370   	; 0x1976 <writeReg>
    22b8:	40 e0       	ldi	r20, 0x00	; 0
    22ba:	67 e2       	ldi	r22, 0x27	; 39
    22bc:	c8 01       	movw	r24, r16
    22be:	5b db       	rcall	.-2378   	; 0x1976 <writeReg>
    22c0:	46 e0       	ldi	r20, 0x06	; 6
    22c2:	60 e5       	ldi	r22, 0x50	; 80
    22c4:	c8 01       	movw	r24, r16
    22c6:	57 db       	rcall	.-2386   	; 0x1976 <writeReg>
    22c8:	40 e0       	ldi	r20, 0x00	; 0
    22ca:	61 e5       	ldi	r22, 0x51	; 81
    22cc:	c8 01       	movw	r24, r16
    22ce:	53 db       	rcall	.-2394   	; 0x1976 <writeReg>
    22d0:	46 e9       	ldi	r20, 0x96	; 150
    22d2:	62 e5       	ldi	r22, 0x52	; 82
    22d4:	c8 01       	movw	r24, r16
    22d6:	4f db       	rcall	.-2402   	; 0x1976 <writeReg>
    22d8:	48 e0       	ldi	r20, 0x08	; 8
    22da:	66 e5       	ldi	r22, 0x56	; 86
    22dc:	c8 01       	movw	r24, r16
    22de:	4b db       	rcall	.-2410   	; 0x1976 <writeReg>
    22e0:	40 e3       	ldi	r20, 0x30	; 48
    22e2:	67 e5       	ldi	r22, 0x57	; 87
    22e4:	c8 01       	movw	r24, r16
    22e6:	47 db       	rcall	.-2418   	; 0x1976 <writeReg>
    22e8:	40 e0       	ldi	r20, 0x00	; 0
    22ea:	61 e6       	ldi	r22, 0x61	; 97
    22ec:	c8 01       	movw	r24, r16
    22ee:	43 db       	rcall	.-2426   	; 0x1976 <writeReg>
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	62 e6       	ldi	r22, 0x62	; 98
    22f4:	c8 01       	movw	r24, r16
    22f6:	3f db       	rcall	.-2434   	; 0x1976 <writeReg>
    22f8:	40 e0       	ldi	r20, 0x00	; 0
    22fa:	64 e6       	ldi	r22, 0x64	; 100
    22fc:	c8 01       	movw	r24, r16
    22fe:	3b db       	rcall	.-2442   	; 0x1976 <writeReg>
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	65 e6       	ldi	r22, 0x65	; 101
    2304:	c8 01       	movw	r24, r16
    2306:	37 db       	rcall	.-2450   	; 0x1976 <writeReg>
    2308:	40 ea       	ldi	r20, 0xA0	; 160
    230a:	66 e6       	ldi	r22, 0x66	; 102
    230c:	c8 01       	movw	r24, r16
    230e:	33 db       	rcall	.-2458   	; 0x1976 <writeReg>
    2310:	41 e0       	ldi	r20, 0x01	; 1
    2312:	6f ef       	ldi	r22, 0xFF	; 255
    2314:	c8 01       	movw	r24, r16
    2316:	2f db       	rcall	.-2466   	; 0x1976 <writeReg>
    2318:	42 e3       	ldi	r20, 0x32	; 50
    231a:	62 e2       	ldi	r22, 0x22	; 34
    231c:	c8 01       	movw	r24, r16
    231e:	2b db       	rcall	.-2474   	; 0x1976 <writeReg>
    2320:	44 e1       	ldi	r20, 0x14	; 20
    2322:	67 e4       	ldi	r22, 0x47	; 71
    2324:	c8 01       	movw	r24, r16
    2326:	27 db       	rcall	.-2482   	; 0x1976 <writeReg>
    2328:	4f ef       	ldi	r20, 0xFF	; 255
    232a:	69 e4       	ldi	r22, 0x49	; 73
    232c:	c8 01       	movw	r24, r16
    232e:	23 db       	rcall	.-2490   	; 0x1976 <writeReg>
    2330:	40 e0       	ldi	r20, 0x00	; 0
    2332:	6a e4       	ldi	r22, 0x4A	; 74
    2334:	c8 01       	movw	r24, r16
    2336:	1f db       	rcall	.-2498   	; 0x1976 <writeReg>
    2338:	40 e0       	ldi	r20, 0x00	; 0
    233a:	6f ef       	ldi	r22, 0xFF	; 255
    233c:	c8 01       	movw	r24, r16
    233e:	1b db       	rcall	.-2506   	; 0x1976 <writeReg>
    2340:	4a e0       	ldi	r20, 0x0A	; 10
    2342:	6a e7       	ldi	r22, 0x7A	; 122
    2344:	c8 01       	movw	r24, r16
    2346:	17 db       	rcall	.-2514   	; 0x1976 <writeReg>
    2348:	40 e0       	ldi	r20, 0x00	; 0
    234a:	6b e7       	ldi	r22, 0x7B	; 123
    234c:	c8 01       	movw	r24, r16
    234e:	13 db       	rcall	.-2522   	; 0x1976 <writeReg>
    2350:	41 e2       	ldi	r20, 0x21	; 33
    2352:	68 e7       	ldi	r22, 0x78	; 120
    2354:	c8 01       	movw	r24, r16
    2356:	0f db       	rcall	.-2530   	; 0x1976 <writeReg>
    2358:	41 e0       	ldi	r20, 0x01	; 1
    235a:	6f ef       	ldi	r22, 0xFF	; 255
    235c:	c8 01       	movw	r24, r16
    235e:	0b db       	rcall	.-2538   	; 0x1976 <writeReg>
    2360:	44 e3       	ldi	r20, 0x34	; 52
    2362:	63 e2       	ldi	r22, 0x23	; 35
    2364:	c8 01       	movw	r24, r16
    2366:	07 db       	rcall	.-2546   	; 0x1976 <writeReg>
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	62 e4       	ldi	r22, 0x42	; 66
    236c:	c8 01       	movw	r24, r16
    236e:	03 db       	rcall	.-2554   	; 0x1976 <writeReg>
    2370:	4f ef       	ldi	r20, 0xFF	; 255
    2372:	64 e4       	ldi	r22, 0x44	; 68
    2374:	c8 01       	movw	r24, r16
    2376:	ff da       	rcall	.-2562   	; 0x1976 <writeReg>
    2378:	46 e2       	ldi	r20, 0x26	; 38
    237a:	65 e4       	ldi	r22, 0x45	; 69
    237c:	c8 01       	movw	r24, r16
    237e:	fb da       	rcall	.-2570   	; 0x1976 <writeReg>
    2380:	45 e0       	ldi	r20, 0x05	; 5
    2382:	66 e4       	ldi	r22, 0x46	; 70
    2384:	c8 01       	movw	r24, r16
    2386:	f7 da       	rcall	.-2578   	; 0x1976 <writeReg>
    2388:	40 e4       	ldi	r20, 0x40	; 64
    238a:	60 e4       	ldi	r22, 0x40	; 64
    238c:	c8 01       	movw	r24, r16
    238e:	f3 da       	rcall	.-2586   	; 0x1976 <writeReg>
    2390:	46 e0       	ldi	r20, 0x06	; 6
    2392:	6e e0       	ldi	r22, 0x0E	; 14
    2394:	c8 01       	movw	r24, r16
    2396:	ef da       	rcall	.-2594   	; 0x1976 <writeReg>
    2398:	4a e1       	ldi	r20, 0x1A	; 26
    239a:	60 e2       	ldi	r22, 0x20	; 32
    239c:	c8 01       	movw	r24, r16
    239e:	eb da       	rcall	.-2602   	; 0x1976 <writeReg>
    23a0:	40 e4       	ldi	r20, 0x40	; 64
    23a2:	63 e4       	ldi	r22, 0x43	; 67
    23a4:	c8 01       	movw	r24, r16
    23a6:	e7 da       	rcall	.-2610   	; 0x1976 <writeReg>
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	6f ef       	ldi	r22, 0xFF	; 255
    23ac:	c8 01       	movw	r24, r16
    23ae:	e3 da       	rcall	.-2618   	; 0x1976 <writeReg>
    23b0:	43 e0       	ldi	r20, 0x03	; 3
    23b2:	64 e3       	ldi	r22, 0x34	; 52
    23b4:	c8 01       	movw	r24, r16
    23b6:	df da       	rcall	.-2626   	; 0x1976 <writeReg>
    23b8:	44 e4       	ldi	r20, 0x44	; 68
    23ba:	65 e3       	ldi	r22, 0x35	; 53
    23bc:	c8 01       	movw	r24, r16
    23be:	db da       	rcall	.-2634   	; 0x1976 <writeReg>
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	6f ef       	ldi	r22, 0xFF	; 255
    23c4:	c8 01       	movw	r24, r16
    23c6:	d7 da       	rcall	.-2642   	; 0x1976 <writeReg>
    23c8:	44 e0       	ldi	r20, 0x04	; 4
    23ca:	61 e3       	ldi	r22, 0x31	; 49
    23cc:	c8 01       	movw	r24, r16
    23ce:	d3 da       	rcall	.-2650   	; 0x1976 <writeReg>
    23d0:	49 e0       	ldi	r20, 0x09	; 9
    23d2:	6b e4       	ldi	r22, 0x4B	; 75
    23d4:	c8 01       	movw	r24, r16
    23d6:	cf da       	rcall	.-2658   	; 0x1976 <writeReg>
    23d8:	45 e0       	ldi	r20, 0x05	; 5
    23da:	6c e4       	ldi	r22, 0x4C	; 76
    23dc:	c8 01       	movw	r24, r16
    23de:	cb da       	rcall	.-2666   	; 0x1976 <writeReg>
    23e0:	44 e0       	ldi	r20, 0x04	; 4
    23e2:	6d e4       	ldi	r22, 0x4D	; 77
    23e4:	c8 01       	movw	r24, r16
    23e6:	c7 da       	rcall	.-2674   	; 0x1976 <writeReg>
    23e8:	40 e0       	ldi	r20, 0x00	; 0
    23ea:	6f ef       	ldi	r22, 0xFF	; 255
    23ec:	c8 01       	movw	r24, r16
    23ee:	c3 da       	rcall	.-2682   	; 0x1976 <writeReg>
    23f0:	40 e0       	ldi	r20, 0x00	; 0
    23f2:	64 e4       	ldi	r22, 0x44	; 68
    23f4:	c8 01       	movw	r24, r16
    23f6:	bf da       	rcall	.-2690   	; 0x1976 <writeReg>
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	65 e4       	ldi	r22, 0x45	; 69
    23fc:	c8 01       	movw	r24, r16
    23fe:	bb da       	rcall	.-2698   	; 0x1976 <writeReg>
    2400:	48 e0       	ldi	r20, 0x08	; 8
    2402:	67 e4       	ldi	r22, 0x47	; 71
    2404:	c8 01       	movw	r24, r16
    2406:	b7 da       	rcall	.-2706   	; 0x1976 <writeReg>
    2408:	48 e2       	ldi	r20, 0x28	; 40
    240a:	68 e4       	ldi	r22, 0x48	; 72
    240c:	c8 01       	movw	r24, r16
    240e:	b3 da       	rcall	.-2714   	; 0x1976 <writeReg>
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	67 e6       	ldi	r22, 0x67	; 103
    2414:	c8 01       	movw	r24, r16
    2416:	af da       	rcall	.-2722   	; 0x1976 <writeReg>
    2418:	44 e0       	ldi	r20, 0x04	; 4
    241a:	60 e7       	ldi	r22, 0x70	; 112
    241c:	c8 01       	movw	r24, r16
    241e:	ab da       	rcall	.-2730   	; 0x1976 <writeReg>
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	61 e7       	ldi	r22, 0x71	; 113
    2424:	c8 01       	movw	r24, r16
    2426:	a7 da       	rcall	.-2738   	; 0x1976 <writeReg>
    2428:	4e ef       	ldi	r20, 0xFE	; 254
    242a:	62 e7       	ldi	r22, 0x72	; 114
    242c:	c8 01       	movw	r24, r16
    242e:	a3 da       	rcall	.-2746   	; 0x1976 <writeReg>
    2430:	40 e0       	ldi	r20, 0x00	; 0
    2432:	66 e7       	ldi	r22, 0x76	; 118
    2434:	c8 01       	movw	r24, r16
    2436:	9f da       	rcall	.-2754   	; 0x1976 <writeReg>
    2438:	40 e0       	ldi	r20, 0x00	; 0
    243a:	67 e7       	ldi	r22, 0x77	; 119
    243c:	c8 01       	movw	r24, r16
    243e:	9b da       	rcall	.-2762   	; 0x1976 <writeReg>
    2440:	41 e0       	ldi	r20, 0x01	; 1
    2442:	6f ef       	ldi	r22, 0xFF	; 255
    2444:	c8 01       	movw	r24, r16
    2446:	97 da       	rcall	.-2770   	; 0x1976 <writeReg>
    2448:	41 e0       	ldi	r20, 0x01	; 1
    244a:	6d e0       	ldi	r22, 0x0D	; 13
    244c:	c8 01       	movw	r24, r16
    244e:	93 da       	rcall	.-2778   	; 0x1976 <writeReg>
    2450:	40 e0       	ldi	r20, 0x00	; 0
    2452:	6f ef       	ldi	r22, 0xFF	; 255
    2454:	c8 01       	movw	r24, r16
    2456:	8f da       	rcall	.-2786   	; 0x1976 <writeReg>
    2458:	41 e0       	ldi	r20, 0x01	; 1
    245a:	60 e8       	ldi	r22, 0x80	; 128
    245c:	c8 01       	movw	r24, r16
    245e:	8b da       	rcall	.-2794   	; 0x1976 <writeReg>
    2460:	48 ef       	ldi	r20, 0xF8	; 248
    2462:	61 e0       	ldi	r22, 0x01	; 1
    2464:	c8 01       	movw	r24, r16
    2466:	87 da       	rcall	.-2802   	; 0x1976 <writeReg>
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	6f ef       	ldi	r22, 0xFF	; 255
    246c:	c8 01       	movw	r24, r16
    246e:	83 da       	rcall	.-2810   	; 0x1976 <writeReg>
    2470:	41 e0       	ldi	r20, 0x01	; 1
    2472:	6e e8       	ldi	r22, 0x8E	; 142
    2474:	c8 01       	movw	r24, r16
    2476:	7f da       	rcall	.-2818   	; 0x1976 <writeReg>
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	60 e0       	ldi	r22, 0x00	; 0
    247c:	c8 01       	movw	r24, r16
    247e:	7b da       	rcall	.-2826   	; 0x1976 <writeReg>
    2480:	40 e0       	ldi	r20, 0x00	; 0
    2482:	6f ef       	ldi	r22, 0xFF	; 255
    2484:	c8 01       	movw	r24, r16
    2486:	77 da       	rcall	.-2834   	; 0x1976 <writeReg>
    2488:	40 e0       	ldi	r20, 0x00	; 0
    248a:	60 e8       	ldi	r22, 0x80	; 128
    248c:	c8 01       	movw	r24, r16
    248e:	73 da       	rcall	.-2842   	; 0x1976 <writeReg>
    2490:	44 e0       	ldi	r20, 0x04	; 4
    2492:	6a e0       	ldi	r22, 0x0A	; 10
    2494:	c8 01       	movw	r24, r16
    2496:	6f da       	rcall	.-2850   	; 0x1976 <writeReg>
    2498:	64 e8       	ldi	r22, 0x84	; 132
    249a:	c8 01       	movw	r24, r16
    249c:	c0 da       	rcall	.-2688   	; 0x1a1e <readReg>
    249e:	48 2f       	mov	r20, r24
    24a0:	4f 7e       	andi	r20, 0xEF	; 239
    24a2:	64 e8       	ldi	r22, 0x84	; 132
    24a4:	c8 01       	movw	r24, r16
    24a6:	67 da       	rcall	.-2866   	; 0x1976 <writeReg>
    24a8:	41 e0       	ldi	r20, 0x01	; 1
    24aa:	6b e0       	ldi	r22, 0x0B	; 11
    24ac:	c8 01       	movw	r24, r16
    24ae:	63 da       	rcall	.-2874   	; 0x1976 <writeReg>
    24b0:	48 ee       	ldi	r20, 0xE8	; 232
    24b2:	61 e0       	ldi	r22, 0x01	; 1
    24b4:	c8 01       	movw	r24, r16
    24b6:	5f da       	rcall	.-2882   	; 0x1976 <writeReg>
    24b8:	4e e1       	ldi	r20, 0x1E	; 30
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	60 e0       	ldi	r22, 0x00	; 0
    24be:	70 e0       	ldi	r23, 0x00	; 0
    24c0:	c8 01       	movw	r24, r16
    24c2:	20 dd       	rcall	.-1472   	; 0x1f04 <setMeasurementTimingBudget>
    24c4:	41 e0       	ldi	r20, 0x01	; 1
    24c6:	61 e0       	ldi	r22, 0x01	; 1
    24c8:	c8 01       	movw	r24, r16
    24ca:	55 da       	rcall	.-2902   	; 0x1976 <writeReg>
    24cc:	60 e4       	ldi	r22, 0x40	; 64
    24ce:	c8 01       	movw	r24, r16
    24d0:	f8 dc       	rcall	.-1552   	; 0x1ec2 <performSingleRefCalibration>
    24d2:	88 23       	and	r24, r24
    24d4:	71 f0       	breq	.+28     	; 0x24f2 <vl53l0x_start+0x456>
    24d6:	42 e0       	ldi	r20, 0x02	; 2
    24d8:	61 e0       	ldi	r22, 0x01	; 1
    24da:	c8 01       	movw	r24, r16
    24dc:	4c da       	rcall	.-2920   	; 0x1976 <writeReg>
    24de:	60 e0       	ldi	r22, 0x00	; 0
    24e0:	c8 01       	movw	r24, r16
    24e2:	ef dc       	rcall	.-1570   	; 0x1ec2 <performSingleRefCalibration>
    24e4:	88 23       	and	r24, r24
    24e6:	29 f0       	breq	.+10     	; 0x24f2 <vl53l0x_start+0x456>
    24e8:	48 ee       	ldi	r20, 0xE8	; 232
    24ea:	61 e0       	ldi	r22, 0x01	; 1
    24ec:	c8 01       	movw	r24, r16
    24ee:	43 da       	rcall	.-2938   	; 0x1976 <writeReg>
    24f0:	81 e0       	ldi	r24, 0x01	; 1
    24f2:	28 96       	adiw	r28, 0x08	; 8
    24f4:	0f b6       	in	r0, 0x3f	; 63
    24f6:	f8 94       	cli
    24f8:	de bf       	out	0x3e, r29	; 62
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	cd bf       	out	0x3d, r28	; 61
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	1f 91       	pop	r17
    2504:	0f 91       	pop	r16
    2506:	08 95       	ret

00002508 <vl53l0x_stop>:
    2508:	fc 01       	movw	r30, r24
    250a:	64 81       	ldd	r22, Z+4	; 0x04
    250c:	75 81       	ldd	r23, Z+5	; 0x05
    250e:	86 81       	ldd	r24, Z+6	; 0x06
    2510:	97 81       	ldd	r25, Z+7	; 0x07
    2512:	0c 94 b8 01 	jmp	0x370	; 0x370 <gpio_out_reset>
    2516:	08 95       	ret

00002518 <vl53l0x_startContinuous>:
    2518:	cf 92       	push	r12
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	ec 01       	movw	r28, r24
    2526:	6a 01       	movw	r12, r20
    2528:	7b 01       	movw	r14, r22
    252a:	41 e0       	ldi	r20, 0x01	; 1
    252c:	60 e8       	ldi	r22, 0x80	; 128
    252e:	23 da       	rcall	.-3002   	; 0x1976 <writeReg>
    2530:	41 e0       	ldi	r20, 0x01	; 1
    2532:	6f ef       	ldi	r22, 0xFF	; 255
    2534:	ce 01       	movw	r24, r28
    2536:	1f da       	rcall	.-3010   	; 0x1976 <writeReg>
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	60 e0       	ldi	r22, 0x00	; 0
    253c:	ce 01       	movw	r24, r28
    253e:	1b da       	rcall	.-3018   	; 0x1976 <writeReg>
    2540:	4a 85       	ldd	r20, Y+10	; 0x0a
    2542:	61 e9       	ldi	r22, 0x91	; 145
    2544:	ce 01       	movw	r24, r28
    2546:	17 da       	rcall	.-3026   	; 0x1976 <writeReg>
    2548:	41 e0       	ldi	r20, 0x01	; 1
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	ce 01       	movw	r24, r28
    254e:	13 da       	rcall	.-3034   	; 0x1976 <writeReg>
    2550:	40 e0       	ldi	r20, 0x00	; 0
    2552:	6f ef       	ldi	r22, 0xFF	; 255
    2554:	ce 01       	movw	r24, r28
    2556:	0f da       	rcall	.-3042   	; 0x1976 <writeReg>
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	60 e8       	ldi	r22, 0x80	; 128
    255c:	ce 01       	movw	r24, r28
    255e:	0b da       	rcall	.-3050   	; 0x1976 <writeReg>
    2560:	c1 14       	cp	r12, r1
    2562:	d1 04       	cpc	r13, r1
    2564:	e1 04       	cpc	r14, r1
    2566:	f1 04       	cpc	r15, r1
    2568:	a9 f0       	breq	.+42     	; 0x2594 <vl53l0x_startContinuous+0x7c>
    256a:	68 ef       	ldi	r22, 0xF8	; 248
    256c:	ce 01       	movw	r24, r28
    256e:	72 da       	rcall	.-2844   	; 0x1a54 <readReg16Bit>
    2570:	00 97       	sbiw	r24, 0x00	; 0
    2572:	31 f0       	breq	.+12     	; 0x2580 <vl53l0x_startContinuous+0x68>
    2574:	dc 01       	movw	r26, r24
    2576:	a7 01       	movw	r20, r14
    2578:	96 01       	movw	r18, r12
    257a:	7f d0       	rcall	.+254    	; 0x267a <__muluhisi3>
    257c:	6b 01       	movw	r12, r22
    257e:	7c 01       	movw	r14, r24
    2580:	a7 01       	movw	r20, r14
    2582:	96 01       	movw	r18, r12
    2584:	64 e0       	ldi	r22, 0x04	; 4
    2586:	ce 01       	movw	r24, r28
    2588:	24 da       	rcall	.-3000   	; 0x19d2 <writeReg32Bit>
    258a:	44 e0       	ldi	r20, 0x04	; 4
    258c:	60 e0       	ldi	r22, 0x00	; 0
    258e:	ce 01       	movw	r24, r28
    2590:	f2 d9       	rcall	.-3100   	; 0x1976 <writeReg>
    2592:	04 c0       	rjmp	.+8      	; 0x259c <vl53l0x_startContinuous+0x84>
    2594:	42 e0       	ldi	r20, 0x02	; 2
    2596:	60 e0       	ldi	r22, 0x00	; 0
    2598:	ce 01       	movw	r24, r28
    259a:	ed d9       	rcall	.-3110   	; 0x1976 <writeReg>
    259c:	df 91       	pop	r29
    259e:	cf 91       	pop	r28
    25a0:	ff 90       	pop	r15
    25a2:	ef 90       	pop	r14
    25a4:	df 90       	pop	r13
    25a6:	cf 90       	pop	r12
    25a8:	08 95       	ret

000025aa <vl53l0x_readRangeContinuous>:
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	ec 01       	movw	r28, r24
    25b4:	63 e1       	ldi	r22, 0x13	; 19
    25b6:	33 da       	rcall	.-2970   	; 0x1a1e <readReg>
    25b8:	87 70       	andi	r24, 0x07	; 7
    25ba:	49 f0       	breq	.+18     	; 0x25ce <vl53l0x_readRangeContinuous+0x24>
    25bc:	6e e1       	ldi	r22, 0x1E	; 30
    25be:	ce 01       	movw	r24, r28
    25c0:	49 da       	rcall	.-2926   	; 0x1a54 <readReg16Bit>
    25c2:	8c 01       	movw	r16, r24
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	6b e0       	ldi	r22, 0x0B	; 11
    25c8:	ce 01       	movw	r24, r28
    25ca:	d5 d9       	rcall	.-3158   	; 0x1976 <writeReg>
    25cc:	02 c0       	rjmp	.+4      	; 0x25d2 <vl53l0x_readRangeContinuous+0x28>
    25ce:	0f ef       	ldi	r16, 0xFF	; 255
    25d0:	1f ef       	ldi	r17, 0xFF	; 255
    25d2:	c8 01       	movw	r24, r16
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	1f 91       	pop	r17
    25da:	0f 91       	pop	r16
    25dc:	08 95       	ret

000025de <vl53l0x_incrementTimeoutCounter>:

void vl53l0x_incrementTimeoutCounter()
{
	u32_milliseconds++;
    25de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
    25e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
    25e6:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
    25ea:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
    25ee:	01 96       	adiw	r24, 0x01	; 1
    25f0:	a1 1d       	adc	r26, r1
    25f2:	b1 1d       	adc	r27, r1
    25f4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
    25f8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
    25fc:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
    2600:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
    2604:	08 95       	ret

00002606 <__udivmodsi4>:
    2606:	a1 e2       	ldi	r26, 0x21	; 33
    2608:	1a 2e       	mov	r1, r26
    260a:	aa 1b       	sub	r26, r26
    260c:	bb 1b       	sub	r27, r27
    260e:	fd 01       	movw	r30, r26
    2610:	0d c0       	rjmp	.+26     	; 0x262c <__udivmodsi4_ep>

00002612 <__udivmodsi4_loop>:
    2612:	aa 1f       	adc	r26, r26
    2614:	bb 1f       	adc	r27, r27
    2616:	ee 1f       	adc	r30, r30
    2618:	ff 1f       	adc	r31, r31
    261a:	a2 17       	cp	r26, r18
    261c:	b3 07       	cpc	r27, r19
    261e:	e4 07       	cpc	r30, r20
    2620:	f5 07       	cpc	r31, r21
    2622:	20 f0       	brcs	.+8      	; 0x262c <__udivmodsi4_ep>
    2624:	a2 1b       	sub	r26, r18
    2626:	b3 0b       	sbc	r27, r19
    2628:	e4 0b       	sbc	r30, r20
    262a:	f5 0b       	sbc	r31, r21

0000262c <__udivmodsi4_ep>:
    262c:	66 1f       	adc	r22, r22
    262e:	77 1f       	adc	r23, r23
    2630:	88 1f       	adc	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	1a 94       	dec	r1
    2636:	69 f7       	brne	.-38     	; 0x2612 <__udivmodsi4_loop>
    2638:	60 95       	com	r22
    263a:	70 95       	com	r23
    263c:	80 95       	com	r24
    263e:	90 95       	com	r25
    2640:	9b 01       	movw	r18, r22
    2642:	ac 01       	movw	r20, r24
    2644:	bd 01       	movw	r22, r26
    2646:	cf 01       	movw	r24, r30
    2648:	08 95       	ret

0000264a <__tablejump2__>:
    264a:	ee 0f       	add	r30, r30
    264c:	ff 1f       	adc	r31, r31
    264e:	00 24       	eor	r0, r0
    2650:	00 1c       	adc	r0, r0
    2652:	0b be       	out	0x3b, r0	; 59
    2654:	07 90       	elpm	r0, Z+
    2656:	f6 91       	elpm	r31, Z
    2658:	e0 2d       	mov	r30, r0
    265a:	09 94       	ijmp

0000265c <__umulhisi3>:
    265c:	a2 9f       	mul	r26, r18
    265e:	b0 01       	movw	r22, r0
    2660:	b3 9f       	mul	r27, r19
    2662:	c0 01       	movw	r24, r0
    2664:	a3 9f       	mul	r26, r19
    2666:	70 0d       	add	r23, r0
    2668:	81 1d       	adc	r24, r1
    266a:	11 24       	eor	r1, r1
    266c:	91 1d       	adc	r25, r1
    266e:	b2 9f       	mul	r27, r18
    2670:	70 0d       	add	r23, r0
    2672:	81 1d       	adc	r24, r1
    2674:	11 24       	eor	r1, r1
    2676:	91 1d       	adc	r25, r1
    2678:	08 95       	ret

0000267a <__muluhisi3>:
    267a:	f0 df       	rcall	.-32     	; 0x265c <__umulhisi3>
    267c:	a5 9f       	mul	r26, r21
    267e:	90 0d       	add	r25, r0
    2680:	b4 9f       	mul	r27, r20
    2682:	90 0d       	add	r25, r0
    2684:	a4 9f       	mul	r26, r20
    2686:	80 0d       	add	r24, r0
    2688:	91 1d       	adc	r25, r1
    268a:	11 24       	eor	r1, r1
    268c:	08 95       	ret

0000268e <_exit>:
    268e:	f8 94       	cli

00002690 <__stop_program>:
    2690:	ff cf       	rjmp	.-2      	; 0x2690 <__stop_program>
