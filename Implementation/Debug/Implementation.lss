
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000181a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017a6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  00800100  00800100  0000181a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  0000188c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049fd  00000000  00000000  00001cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000176e  00000000  00000000  000066a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ffe  00000000  00000000  00007e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000efc  00000000  00000000  00009e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016b2  00000000  00000000  0000ad14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca9  00000000  00000000  0000c3c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000380  00000000  00000000  0000f06f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	fe c0       	rjmp	.+508    	; 0x202 <__vector_1>
       6:	00 00       	nop
       8:	06 c1       	rjmp	.+524    	; 0x216 <__vector_2>
       a:	00 00       	nop
       c:	0e c1       	rjmp	.+540    	; 0x22a <__vector_3>
       e:	00 00       	nop
      10:	d0 c0       	rjmp	.+416    	; 0x1b2 <__vector_4>
      12:	00 00       	nop
      14:	d8 c0       	rjmp	.+432    	; 0x1c6 <__vector_5>
      16:	00 00       	nop
      18:	e0 c0       	rjmp	.+448    	; 0x1da <__vector_6>
      1a:	00 00       	nop
      1c:	e8 c0       	rjmp	.+464    	; 0x1ee <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 5c 0a 	jmp	0x14b8	; 0x14b8 <__vector_8>
      24:	0f c6       	rjmp	.+3102   	; 0xc44 <__vector_9>
      26:	00 00       	nop
      28:	49 c6       	rjmp	.+3218   	; 0xcbc <__vector_10>
      2a:	00 00       	nop
      2c:	e0 c5       	rjmp	.+3008   	; 0xbee <__vector_11>
      2e:	00 00       	nop
      30:	81 c5       	rjmp	.+2818   	; 0xb34 <__vector_12>
      32:	00 00       	nop
      34:	f4 c4       	rjmp	.+2536   	; 0xa1e <__vector_13>
      36:	00 00       	nop
      38:	52 c5       	rjmp	.+2724   	; 0xade <__vector_14>
      3a:	00 00       	nop
      3c:	c5 c4       	rjmp	.+2442   	; 0x9c8 <__vector_15>
      3e:	00 00       	nop
      40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
      42:	00 00       	nop
      44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
      46:	00 00       	nop
      48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0a c3       	rjmp	.+1556   	; 0x662 <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_20>
      54:	0c 94 ed 08 	jmp	0x11da	; 0x11da <__vector_21>
      58:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <__vector_22>
      5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
      5e:	00 00       	nop
      60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
      62:	00 00       	nop
      64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
      66:	00 00       	nop
      68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
      6a:	00 00       	nop
      6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
      6e:	00 00       	nop
      70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
      72:	00 00       	nop
      74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
      76:	00 00       	nop
      78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
      7e:	00 00       	nop
      80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
      82:	00 00       	nop
      84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
      86:	00 00       	nop
      88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	65 07       	cpc	r22, r21
      8e:	6e 07       	cpc	r22, r30
      90:	77 07       	cpc	r23, r23
      92:	80 07       	cpc	r24, r16
      94:	89 07       	cpc	r24, r25
      96:	92 07       	cpc	r25, r18
      98:	9b 07       	cpc	r25, r27

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
      a6:	21 e0       	ldi	r18, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a3 38       	cpi	r26, 0x83	; 131
      b2:	b2 07       	cpc	r27, r18
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	3d d0       	rcall	.+122    	; 0x132 <main>
      b8:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <_exit>

000000bc <__bad_interrupt>:
      bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <debug_init>:
#include <util/delay.h>

uart_struct_t s_debugUart;

void debug_init()
{
      be:	0f 93       	push	r16
      c0:	1f 93       	push	r17
	s_debugUart.peripheral = UART0;
      c2:	e0 e0       	ldi	r30, 0x00	; 0
      c4:	f1 e0       	ldi	r31, 0x01	; 1
      c6:	10 82       	st	Z, r1
	s_debugUart.baudRate = _9600;
      c8:	80 e8       	ldi	r24, 0x80	; 128
      ca:	18 2f       	mov	r17, r24
      cc:	81 83       	std	Z+1, r24	; 0x01
      ce:	85 e2       	ldi	r24, 0x25	; 37
      d0:	82 83       	std	Z+2, r24	; 0x02
      d2:	13 82       	std	Z+3, r1	; 0x03
      d4:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
      d6:	83 e0       	ldi	r24, 0x03	; 3
      d8:	78 2f       	mov	r23, r24
      da:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
      dc:	92 e0       	ldi	r25, 0x02	; 2
      de:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.stopBits = _1BIT;
      e0:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = FALSE;
      e2:	15 82       	std	Z+5, r1	; 0x05
	s_debugUart.useTx = TRUE;
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	68 2f       	mov	r22, r24
      e8:	86 83       	std	Z+6, r24	; 0x06

	uart_init(s_debugUart);
      ea:	00 e0       	ldi	r16, 0x00	; 0
      ec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
      f0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
      f4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <_edata+0x4>
      f8:	50 e0       	ldi	r21, 0x00	; 0
      fa:	80 e0       	ldi	r24, 0x00	; 0
      fc:	0e 94 71 09 	call	0x12e2	; 0x12e2 <uart_init>
	uart_start(s_debugUart);
     100:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
     104:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
     108:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
     10c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
     110:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <_edata+0x4>
     114:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <_edata+0x5>
     118:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_edata+0x6>
     11c:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_edata+0x7>
     120:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_edata+0x8>
     124:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_edata+0x9>
     128:	0e 94 36 0a 	call	0x146c	; 0x146c <uart_start>
}
     12c:	1f 91       	pop	r17
     12e:	0f 91       	pop	r16
     130:	08 95       	ret

00000132 <main>:


int main(void)
{
	device_disableJTAG();
	debug_init();
     132:	1b d0       	rcall	.+54     	; 0x16a <device_disableJTAG>
     134:	c4 df       	rcall	.-120    	; 0xbe <debug_init>
	motor_init();
     136:	0e 94 87 0a 	call	0x150e	; 0x150e <motor_init>
	//encoder_init();
	//encoder_start();
	sei();
     13a:	78 94       	sei
    while (1)
    {
		motor_start();
     13c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <motor_start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	2f ef       	ldi	r18, 0xFF	; 255
     142:	8b e7       	ldi	r24, 0x7B	; 123
     144:	92 e9       	ldi	r25, 0x92	; 146
     146:	21 50       	subi	r18, 0x01	; 1
     148:	80 40       	sbci	r24, 0x00	; 0
     14a:	90 40       	sbci	r25, 0x00	; 0
     14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x14>
     14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x1e>
     150:	00 00       	nop
		//_delay_ms(2000);
		//motor_individualDirSpeed(FORWARD, 50, BACKWARD, 50);
		_delay_ms(6000);
		//motor_individualDirSpeed(BACKWARD, 50, FORWARD, 50);
		//_delay_ms(6000);
		motor_stop();
     152:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <motor_stop>
     156:	2f ef       	ldi	r18, 0xFF	; 255
     158:	89 e6       	ldi	r24, 0x69	; 105
     15a:	98 e1       	ldi	r25, 0x18	; 24
     15c:	21 50       	subi	r18, 0x01	; 1
     15e:	80 40       	sbci	r24, 0x00	; 0
     160:	90 40       	sbci	r25, 0x00	; 0
     162:	e1 f7       	brne	.-8      	; 0x15c <main+0x2a>
     164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x34>
     166:	00 00       	nop
     168:	e9 cf       	rjmp	.-46     	; 0x13c <main+0xa>

0000016a <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     16a:	80 e8       	ldi	r24, 0x80	; 128
     16c:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     16e:	85 bf       	out	0x35, r24	; 53
     170:	08 95       	ret

00000172 <gpio_changeDirection>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
     172:	61 30       	cpi	r22, 0x01	; 1
     174:	61 f0       	breq	.+24     	; 0x18e <gpio_changeDirection+0x1c>
     176:	28 f0       	brcs	.+10     	; 0x182 <gpio_changeDirection+0x10>
     178:	62 30       	cpi	r22, 0x02	; 2
     17a:	79 f0       	breq	.+30     	; 0x19a <gpio_changeDirection+0x28>
     17c:	63 30       	cpi	r22, 0x03	; 3
     17e:	99 f0       	breq	.+38     	; 0x1a6 <gpio_changeDirection+0x34>
     180:	08 95       	ret
     182:	48 2f       	mov	r20, r24
     184:	67 2f       	mov	r22, r23
     186:	81 e2       	ldi	r24, 0x21	; 33
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	01 c1       	rjmp	.+514    	; 0x38e <updateBit>
     18c:	08 95       	ret
     18e:	48 2f       	mov	r20, r24
     190:	67 2f       	mov	r22, r23
     192:	84 e2       	ldi	r24, 0x24	; 36
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	fb c0       	rjmp	.+502    	; 0x38e <updateBit>
     198:	08 95       	ret
     19a:	48 2f       	mov	r20, r24
     19c:	67 2f       	mov	r22, r23
     19e:	87 e2       	ldi	r24, 0x27	; 39
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	f5 c0       	rjmp	.+490    	; 0x38e <updateBit>
     1a4:	08 95       	ret
     1a6:	48 2f       	mov	r20, r24
     1a8:	67 2f       	mov	r22, r23
     1aa:	8a e2       	ldi	r24, 0x2A	; 42
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	ef c0       	rjmp	.+478    	; 0x38e <updateBit>
     1b0:	08 95       	ret

000001b2 <__vector_4>:
     1b2:	1f 92       	push	r1
     1b4:	0f 92       	push	r0
     1b6:	0f b6       	in	r0, 0x3f	; 63
     1b8:	0f 92       	push	r0
     1ba:	11 24       	eor	r1, r1
     1bc:	0f 90       	pop	r0
     1be:	0f be       	out	0x3f, r0	; 63
     1c0:	0f 90       	pop	r0
     1c2:	1f 90       	pop	r1
     1c4:	18 95       	reti

000001c6 <__vector_5>:
     1c6:	1f 92       	push	r1
     1c8:	0f 92       	push	r0
     1ca:	0f b6       	in	r0, 0x3f	; 63
     1cc:	0f 92       	push	r0
     1ce:	11 24       	eor	r1, r1
     1d0:	0f 90       	pop	r0
     1d2:	0f be       	out	0x3f, r0	; 63
     1d4:	0f 90       	pop	r0
     1d6:	1f 90       	pop	r1
     1d8:	18 95       	reti

000001da <__vector_6>:
     1da:	1f 92       	push	r1
     1dc:	0f 92       	push	r0
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	0f 92       	push	r0
     1e2:	11 24       	eor	r1, r1
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <__vector_7>:
     1ee:	1f 92       	push	r1
     1f0:	0f 92       	push	r0
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	0f 92       	push	r0
     1f6:	11 24       	eor	r1, r1
     1f8:	0f 90       	pop	r0
     1fa:	0f be       	out	0x3f, r0	; 63
     1fc:	0f 90       	pop	r0
     1fe:	1f 90       	pop	r1
     200:	18 95       	reti

00000202 <__vector_1>:
     202:	1f 92       	push	r1
     204:	0f 92       	push	r0
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	0f 92       	push	r0
     20a:	11 24       	eor	r1, r1
     20c:	0f 90       	pop	r0
     20e:	0f be       	out	0x3f, r0	; 63
     210:	0f 90       	pop	r0
     212:	1f 90       	pop	r1
     214:	18 95       	reti

00000216 <__vector_2>:
     216:	1f 92       	push	r1
     218:	0f 92       	push	r0
     21a:	0f b6       	in	r0, 0x3f	; 63
     21c:	0f 92       	push	r0
     21e:	11 24       	eor	r1, r1
     220:	0f 90       	pop	r0
     222:	0f be       	out	0x3f, r0	; 63
     224:	0f 90       	pop	r0
     226:	1f 90       	pop	r1
     228:	18 95       	reti

0000022a <__vector_3>:
     22a:	1f 92       	push	r1
     22c:	0f 92       	push	r0
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	0f 92       	push	r0
     232:	11 24       	eor	r1, r1
     234:	0f 90       	pop	r0
     236:	0f be       	out	0x3f, r0	; 63
     238:	0f 90       	pop	r0
     23a:	1f 90       	pop	r1
     23c:	18 95       	reti

0000023e <gpio_init>:
     23e:	ef 92       	push	r14
     240:	ff 92       	push	r15
     242:	0f 93       	push	r16
     244:	1f 93       	push	r17
     246:	cf 93       	push	r28
     248:	df 93       	push	r29
     24a:	c6 2f       	mov	r28, r22
     24c:	f7 2e       	mov	r15, r23
     24e:	d8 2f       	mov	r29, r24
     250:	e9 2e       	mov	r14, r25
     252:	e0 e0       	ldi	r30, 0x00	; 0
     254:	f1 e0       	ldi	r31, 0x01	; 1
     256:	10 82       	st	Z, r1
     258:	80 e8       	ldi	r24, 0x80	; 128
     25a:	18 2f       	mov	r17, r24
     25c:	81 83       	std	Z+1, r24	; 0x01
     25e:	85 e2       	ldi	r24, 0x25	; 37
     260:	82 83       	std	Z+2, r24	; 0x02
     262:	13 82       	std	Z+3, r1	; 0x03
     264:	14 82       	std	Z+4, r1	; 0x04
     266:	83 e0       	ldi	r24, 0x03	; 3
     268:	78 2f       	mov	r23, r24
     26a:	87 83       	std	Z+7, r24	; 0x07
     26c:	92 e0       	ldi	r25, 0x02	; 2
     26e:	91 87       	std	Z+9, r25	; 0x09
     270:	10 86       	std	Z+8, r1	; 0x08
     272:	15 82       	std	Z+5, r1	; 0x05
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	68 2f       	mov	r22, r24
     278:	86 83       	std	Z+6, r24	; 0x06
     27a:	00 e0       	ldi	r16, 0x00	; 0
     27c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
     280:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
     284:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <_edata+0x4>
     288:	50 e0       	ldi	r21, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <uart_init>
     290:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <_edata>
     294:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <_edata+0x1>
     298:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <_edata+0x2>
     29c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <_edata+0x3>
     2a0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <_edata+0x4>
     2a4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <_edata+0x5>
     2a8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <_edata+0x6>
     2ac:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <_edata+0x7>
     2b0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_edata+0x8>
     2b4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <_edata+0x9>
     2b8:	0e 94 36 0a 	call	0x146c	; 0x146c <uart_start>
     2bc:	6c 2f       	mov	r22, r28
     2be:	7f 2d       	mov	r23, r15
     2c0:	8d 2f       	mov	r24, r29
     2c2:	9e 2d       	mov	r25, r14
     2c4:	56 df       	rcall	.-340    	; 0x172 <gpio_changeDirection>
     2c6:	d1 11       	cpse	r29, r1
     2c8:	23 c0       	rjmp	.+70     	; 0x310 <gpio_init+0xd2>
     2ca:	c1 30       	cpi	r28, 0x01	; 1
     2cc:	81 f0       	breq	.+32     	; 0x2ee <gpio_init+0xb0>
     2ce:	28 f0       	brcs	.+10     	; 0x2da <gpio_init+0x9c>
     2d0:	c2 30       	cpi	r28, 0x02	; 2
     2d2:	99 f0       	breq	.+38     	; 0x2fa <gpio_init+0xbc>
     2d4:	c3 30       	cpi	r28, 0x03	; 3
     2d6:	b9 f0       	breq	.+46     	; 0x306 <gpio_init+0xc8>
     2d8:	1b c0       	rjmp	.+54     	; 0x310 <gpio_init+0xd2>
     2da:	4e 2d       	mov	r20, r14
     2dc:	6f 2d       	mov	r22, r15
     2de:	82 e2       	ldi	r24, 0x22	; 34
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	55 d0       	rcall	.+170    	; 0x38e <updateBit>
     2e4:	6f 2d       	mov	r22, r15
     2e6:	8e e7       	ldi	r24, 0x7E	; 126
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	75 d0       	rcall	.+234    	; 0x3d6 <clearBit>
     2ec:	11 c0       	rjmp	.+34     	; 0x310 <gpio_init+0xd2>
     2ee:	4e 2d       	mov	r20, r14
     2f0:	6f 2d       	mov	r22, r15
     2f2:	85 e2       	ldi	r24, 0x25	; 37
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	4b d0       	rcall	.+150    	; 0x38e <updateBit>
     2f8:	0b c0       	rjmp	.+22     	; 0x310 <gpio_init+0xd2>
     2fa:	4e 2d       	mov	r20, r14
     2fc:	6f 2d       	mov	r22, r15
     2fe:	88 e2       	ldi	r24, 0x28	; 40
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	45 d0       	rcall	.+138    	; 0x38e <updateBit>
     304:	05 c0       	rjmp	.+10     	; 0x310 <gpio_init+0xd2>
     306:	4e 2d       	mov	r20, r14
     308:	6f 2d       	mov	r22, r15
     30a:	8b e2       	ldi	r24, 0x2B	; 43
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	3f d0       	rcall	.+126    	; 0x38e <updateBit>
     310:	df 91       	pop	r29
     312:	cf 91       	pop	r28
     314:	1f 91       	pop	r17
     316:	0f 91       	pop	r16
     318:	ff 90       	pop	r15
     31a:	ef 90       	pop	r14
     31c:	08 95       	ret

0000031e <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     31e:	61 30       	cpi	r22, 0x01	; 1
     320:	59 f0       	breq	.+22     	; 0x338 <gpio_out_set+0x1a>
     322:	28 f0       	brcs	.+10     	; 0x32e <gpio_out_set+0x10>
     324:	62 30       	cpi	r22, 0x02	; 2
     326:	69 f0       	breq	.+26     	; 0x342 <gpio_out_set+0x24>
     328:	63 30       	cpi	r22, 0x03	; 3
     32a:	81 f0       	breq	.+32     	; 0x34c <gpio_out_set+0x2e>
     32c:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     32e:	67 2f       	mov	r22, r23
     330:	82 e2       	ldi	r24, 0x22	; 34
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	44 c0       	rjmp	.+136    	; 0x3be <setBit>
			break;
     336:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     338:	67 2f       	mov	r22, r23
     33a:	85 e2       	ldi	r24, 0x25	; 37
     33c:	90 e0       	ldi	r25, 0x00	; 0
     33e:	3f c0       	rjmp	.+126    	; 0x3be <setBit>
			break;
     340:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     342:	67 2f       	mov	r22, r23
     344:	88 e2       	ldi	r24, 0x28	; 40
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	3a c0       	rjmp	.+116    	; 0x3be <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
     34a:	08 95       	ret
     34c:	67 2f       	mov	r22, r23
     34e:	8b e2       	ldi	r24, 0x2B	; 43
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	35 c0       	rjmp	.+106    	; 0x3be <setBit>
     354:	08 95       	ret

00000356 <gpio_out_reset>:
	}
}

void gpio_out_reset(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     356:	61 30       	cpi	r22, 0x01	; 1
     358:	59 f0       	breq	.+22     	; 0x370 <gpio_out_reset+0x1a>
     35a:	28 f0       	brcs	.+10     	; 0x366 <gpio_out_reset+0x10>
     35c:	62 30       	cpi	r22, 0x02	; 2
     35e:	69 f0       	breq	.+26     	; 0x37a <gpio_out_reset+0x24>
     360:	63 30       	cpi	r22, 0x03	; 3
     362:	81 f0       	breq	.+32     	; 0x384 <gpio_out_reset+0x2e>
     364:	08 95       	ret
	{
		case PA:
			clearBit(&PORTA, s_gpio.number);
     366:	67 2f       	mov	r22, r23
     368:	82 e2       	ldi	r24, 0x22	; 34
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	34 c0       	rjmp	.+104    	; 0x3d6 <clearBit>
			break;
     36e:	08 95       	ret
		case PB:
			clearBit(&PORTB, s_gpio.number);
     370:	67 2f       	mov	r22, r23
     372:	85 e2       	ldi	r24, 0x25	; 37
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	2f c0       	rjmp	.+94     	; 0x3d6 <clearBit>
			break;
     378:	08 95       	ret
		case PC:
			clearBit(&PORTC, s_gpio.number);
     37a:	67 2f       	mov	r22, r23
     37c:	88 e2       	ldi	r24, 0x28	; 40
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	2a c0       	rjmp	.+84     	; 0x3d6 <clearBit>
			break;
		case PD:
			clearBit(&PORTD, s_gpio.number);
     382:	08 95       	ret
     384:	67 2f       	mov	r22, r23
     386:	8b e2       	ldi	r24, 0x2B	; 43
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	25 c0       	rjmp	.+74     	; 0x3d6 <clearBit>
     38c:	08 95       	ret

0000038e <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     38e:	fc 01       	movw	r30, r24
     390:	94 2f       	mov	r25, r20
     392:	20 81       	ld	r18, Z
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	50 e0       	ldi	r21, 0x00	; 0
     398:	06 2e       	mov	r0, r22
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <updateBit+0x12>
     39c:	44 0f       	add	r20, r20
     39e:	55 1f       	adc	r21, r21
     3a0:	0a 94       	dec	r0
     3a2:	e2 f7       	brpl	.-8      	; 0x39c <updateBit+0xe>
     3a4:	40 95       	com	r20
     3a6:	50 95       	com	r21
     3a8:	24 23       	and	r18, r20
     3aa:	49 2f       	mov	r20, r25
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <updateBit+0x26>
     3b0:	44 0f       	add	r20, r20
     3b2:	55 1f       	adc	r21, r21
     3b4:	6a 95       	dec	r22
     3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <updateBit+0x22>
     3b8:	42 2b       	or	r20, r18
     3ba:	40 83       	st	Z, r20
     3bc:	08 95       	ret

000003be <setBit>:
     3be:	fc 01       	movw	r30, r24
     3c0:	40 81       	ld	r20, Z
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	30 e0       	ldi	r19, 0x00	; 0
     3c6:	02 c0       	rjmp	.+4      	; 0x3cc <setBit+0xe>
     3c8:	22 0f       	add	r18, r18
     3ca:	33 1f       	adc	r19, r19
     3cc:	6a 95       	dec	r22
     3ce:	e2 f7       	brpl	.-8      	; 0x3c8 <setBit+0xa>
     3d0:	24 2b       	or	r18, r20
     3d2:	20 83       	st	Z, r18
     3d4:	08 95       	ret

000003d6 <clearBit>:
     3d6:	fc 01       	movw	r30, r24
     3d8:	90 81       	ld	r25, Z
     3da:	21 e0       	ldi	r18, 0x01	; 1
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	02 c0       	rjmp	.+4      	; 0x3e4 <clearBit+0xe>
     3e0:	22 0f       	add	r18, r18
     3e2:	33 1f       	adc	r19, r19
     3e4:	6a 95       	dec	r22
     3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <clearBit+0xa>
     3e8:	20 95       	com	r18
     3ea:	29 23       	and	r18, r25
     3ec:	20 83       	st	Z, r18
     3ee:	08 95       	ret

000003f0 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <checkBit+0x8>
     3f4:	95 95       	asr	r25
     3f6:	87 95       	ror	r24
     3f8:	6a 95       	dec	r22
     3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <checkBit+0x4>
}
     3fc:	81 70       	andi	r24, 0x01	; 1
     3fe:	08 95       	ret

00000400 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     400:	cf 92       	push	r12
     402:	df 92       	push	r13
     404:	ef 92       	push	r14
     406:	ff 92       	push	r15
     408:	69 01       	movw	r12, r18
     40a:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     40c:	9b 01       	movw	r18, r22
     40e:	ac 01       	movw	r20, r24
     410:	2c 19       	sub	r18, r12
     412:	3d 09       	sbc	r19, r13
     414:	4e 09       	sbc	r20, r14
     416:	5f 09       	sbc	r21, r15
     418:	a8 ee       	ldi	r26, 0xE8	; 232
     41a:	b3 e0       	ldi	r27, 0x03	; 3
     41c:	0e 94 c7 0b 	call	0x178e	; 0x178e <__muluhisi3>
     420:	a7 01       	movw	r20, r14
     422:	96 01       	movw	r18, r12
     424:	0e 94 8d 0b 	call	0x171a	; 0x171a <__udivmodsi4>
     428:	c9 01       	movw	r24, r18
     42a:	99 23       	and	r25, r25
     42c:	24 f4       	brge	.+8      	; 0x436 <calculateError+0x36>
     42e:	88 27       	eor	r24, r24
     430:	99 27       	eor	r25, r25
     432:	82 1b       	sub	r24, r18
     434:	93 0b       	sbc	r25, r19
}
     436:	ff 90       	pop	r15
     438:	ef 90       	pop	r14
     43a:	df 90       	pop	r13
     43c:	cf 90       	pop	r12
     43e:	08 95       	ret

00000440 <ruleOfThree>:

u16 ruleOfThree(u16 u16_extreme, u16 u16_mean1, u16 u16_mean2)
{
     440:	fc 01       	movw	r30, r24
     442:	9b 01       	movw	r18, r22
	u32 u32_result;
	u32_result = (u32) u16_mean1 * u16_mean2 / u16_extreme;
	return (u16) u32_result;
     444:	da 01       	movw	r26, r20
     446:	0e 94 b8 0b 	call	0x1770	; 0x1770 <__umulhisi3>
     44a:	9f 01       	movw	r18, r30
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	50 e0       	ldi	r21, 0x00	; 0
     450:	0e 94 8d 0b 	call	0x171a	; 0x171a <__udivmodsi4>
     454:	c9 01       	movw	r24, r18
     456:	08 95       	ret

00000458 <pwm_init>:
			OCR3A = ruleOfThree(100, u8_pwm3aPercent, ICR3);
			OCR3B = ruleOfThree(100, u8_pwm3bPercent, ICR3);
		#endif
			break;
	}
}
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	48 81       	ld	r20, Y
     460:	59 81       	ldd	r21, Y+1	; 0x01
     462:	6a 81       	ldd	r22, Y+2	; 0x02
     464:	7b 81       	ldd	r23, Y+3	; 0x03
     466:	8c 81       	ldd	r24, Y+4	; 0x04
     468:	54 d4       	rcall	.+2216   	; 0xd12 <timer_init>
     46a:	88 81       	ld	r24, Y
     46c:	81 30       	cpi	r24, 0x01	; 1
     46e:	09 f0       	breq	.+2      	; 0x472 <pwm_init+0x1a>
     470:	62 c0       	rjmp	.+196    	; 0x536 <pwm_init+0xde>
     472:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     476:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     47a:	89 2b       	or	r24, r25
     47c:	49 f0       	breq	.+18     	; 0x490 <pwm_init+0x38>
     47e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     482:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     486:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     48a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     48e:	06 c0       	rjmp	.+12     	; 0x49c <pwm_init+0x44>
     490:	8f ef       	ldi	r24, 0xFF	; 255
     492:	9f ef       	ldi	r25, 0xFF	; 255
     494:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     498:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     49c:	64 e0       	ldi	r22, 0x04	; 4
     49e:	81 e8       	ldi	r24, 0x81	; 129
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	8d df       	rcall	.-230    	; 0x3be <setBit>
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	80 e8       	ldi	r24, 0x80	; 128
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	95 df       	rcall	.-214    	; 0x3d6 <clearBit>
     4ac:	8e 81       	ldd	r24, Y+6	; 0x06
     4ae:	88 23       	and	r24, r24
     4b0:	19 f0       	breq	.+6      	; 0x4b8 <pwm_init+0x60>
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	51 f0       	breq	.+20     	; 0x4ca <pwm_init+0x72>
     4b6:	19 c0       	rjmp	.+50     	; 0x4ea <pwm_init+0x92>
     4b8:	63 e0       	ldi	r22, 0x03	; 3
     4ba:	81 e8       	ldi	r24, 0x81	; 129
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	7f df       	rcall	.-258    	; 0x3be <setBit>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	80 e8       	ldi	r24, 0x80	; 128
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	7b df       	rcall	.-266    	; 0x3be <setBit>
     4c8:	10 c0       	rjmp	.+32     	; 0x4ea <pwm_init+0x92>
     4ca:	63 e0       	ldi	r22, 0x03	; 3
     4cc:	81 e8       	ldi	r24, 0x81	; 129
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	82 df       	rcall	.-252    	; 0x3d6 <clearBit>
     4d2:	8d 81       	ldd	r24, Y+5	; 0x05
     4d4:	88 23       	and	r24, r24
     4d6:	29 f0       	breq	.+10     	; 0x4e2 <pwm_init+0x8a>
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	80 e8       	ldi	r24, 0x80	; 128
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	7b df       	rcall	.-266    	; 0x3d6 <clearBit>
     4e0:	04 c0       	rjmp	.+8      	; 0x4ea <pwm_init+0x92>
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	80 e8       	ldi	r24, 0x80	; 128
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	6a df       	rcall	.-300    	; 0x3be <setBit>
     4ea:	8f 81       	ldd	r24, Y+7	; 0x07
     4ec:	88 23       	and	r24, r24
     4ee:	71 f0       	breq	.+28     	; 0x50c <pwm_init+0xb4>
     4f0:	67 e0       	ldi	r22, 0x07	; 7
     4f2:	80 e8       	ldi	r24, 0x80	; 128
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	63 df       	rcall	.-314    	; 0x3be <setBit>
     4f8:	48 85       	ldd	r20, Y+8	; 0x08
     4fa:	66 e0       	ldi	r22, 0x06	; 6
     4fc:	80 e8       	ldi	r24, 0x80	; 128
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	46 df       	rcall	.-372    	; 0x38e <updateBit>
     502:	63 e0       	ldi	r22, 0x03	; 3
     504:	75 e0       	ldi	r23, 0x05	; 5
     506:	81 e0       	ldi	r24, 0x01	; 1
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	99 de       	rcall	.-718    	; 0x23e <gpio_init>
     50c:	89 85       	ldd	r24, Y+9	; 0x09
     50e:	88 23       	and	r24, r24
     510:	71 f0       	breq	.+28     	; 0x52e <pwm_init+0xd6>
     512:	65 e0       	ldi	r22, 0x05	; 5
     514:	80 e8       	ldi	r24, 0x80	; 128
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	52 df       	rcall	.-348    	; 0x3be <setBit>
     51a:	4a 85       	ldd	r20, Y+10	; 0x0a
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	80 e8       	ldi	r24, 0x80	; 128
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	35 df       	rcall	.-406    	; 0x38e <updateBit>
     524:	63 e0       	ldi	r22, 0x03	; 3
     526:	74 e0       	ldi	r23, 0x04	; 4
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	88 de       	rcall	.-752    	; 0x23e <gpio_init>
     52e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <u8_pwm1aPercent>
     532:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <u8_pwm1bPercent>
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	08 95       	ret

0000053c <pwm_start>:
     53c:	ef 92       	push	r14
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	cd b7       	in	r28, 0x3d	; 61
     54a:	de b7       	in	r29, 0x3e	; 62
     54c:	2b 97       	sbiw	r28, 0x0b	; 11
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	4e 2d       	mov	r20, r14
     55a:	5f 2d       	mov	r21, r15
     55c:	60 2f       	mov	r22, r16
     55e:	71 2f       	mov	r23, r17
     560:	82 2f       	mov	r24, r18
     562:	22 d5       	rcall	.+2628   	; 0xfa8 <timer_start>
     564:	2b 96       	adiw	r28, 0x0b	; 11
     566:	0f b6       	in	r0, 0x3f	; 63
     568:	f8 94       	cli
     56a:	de bf       	out	0x3e, r29	; 62
     56c:	0f be       	out	0x3f, r0	; 63
     56e:	cd bf       	out	0x3d, r28	; 61
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	1f 91       	pop	r17
     576:	0f 91       	pop	r16
     578:	ff 90       	pop	r15
     57a:	ef 90       	pop	r14
     57c:	08 95       	ret

0000057e <pwm_stop>:
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	cd b7       	in	r28, 0x3d	; 61
     58c:	de b7       	in	r29, 0x3e	; 62
     58e:	2b 97       	sbiw	r28, 0x0b	; 11
     590:	0f b6       	in	r0, 0x3f	; 63
     592:	f8 94       	cli
     594:	de bf       	out	0x3e, r29	; 62
     596:	0f be       	out	0x3f, r0	; 63
     598:	cd bf       	out	0x3d, r28	; 61
     59a:	4e 2d       	mov	r20, r14
     59c:	5f 2d       	mov	r21, r15
     59e:	60 2f       	mov	r22, r16
     5a0:	71 2f       	mov	r23, r17
     5a2:	82 2f       	mov	r24, r18
     5a4:	46 d5       	rcall	.+2700   	; 0x1032 <timer_stop>
     5a6:	2b 96       	adiw	r28, 0x0b	; 11
     5a8:	0f b6       	in	r0, 0x3f	; 63
     5aa:	f8 94       	cli
     5ac:	de bf       	out	0x3e, r29	; 62
     5ae:	0f be       	out	0x3f, r0	; 63
     5b0:	cd bf       	out	0x3d, r28	; 61
     5b2:	df 91       	pop	r29
     5b4:	cf 91       	pop	r28
     5b6:	1f 91       	pop	r17
     5b8:	0f 91       	pop	r16
     5ba:	ff 90       	pop	r15
     5bc:	ef 90       	pop	r14
     5be:	08 95       	ret

000005c0 <pwm_setDutyCycle>:

void pwm_setDutyCycle(pwm_struct_t s_pwm, timer_channel_enum_t e_channel, u8 u8_percent)
{
     5c0:	af 92       	push	r10
     5c2:	cf 92       	push	r12
     5c4:	ef 92       	push	r14
     5c6:	ff 92       	push	r15
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	2b 97       	sbiw	r28, 0x0b	; 11
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	9e 2d       	mov	r25, r14
     5e2:	e9 82       	std	Y+1, r14	; 0x01
     5e4:	fa 82       	std	Y+2, r15	; 0x02
     5e6:	0b 83       	std	Y+3, r16	; 0x03
     5e8:	1c 83       	std	Y+4, r17	; 0x04
     5ea:	2d 83       	std	Y+5, r18	; 0x05
     5ec:	3e 83       	std	Y+6, r19	; 0x06
     5ee:	4f 83       	std	Y+7, r20	; 0x07
     5f0:	58 87       	std	Y+8, r21	; 0x08
     5f2:	69 87       	std	Y+9, r22	; 0x09
     5f4:	7a 87       	std	Y+10, r23	; 0x0a
     5f6:	8b 87       	std	Y+11, r24	; 0x0b
	switch(s_pwm.base.peripheral)
     5f8:	91 30       	cpi	r25, 0x01	; 1
     5fa:	21 f5       	brne	.+72     	; 0x644 <pwm_setDutyCycle+0x84>
     5fc:	8c 2d       	mov	r24, r12
			}
		#endif
			break;
		case TIMER1:
		#ifdef USING_PWM1
			if (e_channel == CHANNEL_A)
     5fe:	c1 10       	cpse	r12, r1
     600:	10 c0       	rjmp	.+32     	; 0x622 <pwm_setDutyCycle+0x62>
			{
				u8_pwm1aPercent = u8_percent;
     602:	a0 92 0b 01 	sts	0x010B, r10	; 0x80010b <u8_pwm1aPercent>
				OCR1A = ruleOfThree(100, u8_percent, ICR1);
     606:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     60a:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     60e:	6a 2d       	mov	r22, r10
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	84 e6       	ldi	r24, 0x64	; 100
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	14 df       	rcall	.-472    	; 0x440 <ruleOfThree>
     618:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     61c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     620:	11 c0       	rjmp	.+34     	; 0x644 <pwm_setDutyCycle+0x84>
			}
			if (e_channel == CHANNEL_B)
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	79 f4       	brne	.+30     	; 0x644 <pwm_setDutyCycle+0x84>
			{
				u8_pwm1bPercent = u8_percent;
     626:	a0 92 0a 01 	sts	0x010A, r10	; 0x80010a <u8_pwm1bPercent>
				OCR1B = ruleOfThree(100, u8_percent, ICR1);
     62a:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     62e:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     632:	6a 2d       	mov	r22, r10
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	84 e6       	ldi	r24, 0x64	; 100
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	02 df       	rcall	.-508    	; 0x440 <ruleOfThree>
     63c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     640:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
				OCR3B = ruleOfThree(100, u8_percent, ICR3);
			}
		#endif
			break;
	}
}
     644:	2b 96       	adiw	r28, 0x0b	; 11
     646:	0f b6       	in	r0, 0x3f	; 63
     648:	f8 94       	cli
     64a:	de bf       	out	0x3e, r29	; 62
     64c:	0f be       	out	0x3f, r0	; 63
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	ef 90       	pop	r14
     65c:	cf 90       	pop	r12
     65e:	af 90       	pop	r10
     660:	08 95       	ret

00000662 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     662:	1f 92       	push	r1
     664:	0f 92       	push	r0
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	0f 92       	push	r0
     66a:	11 24       	eor	r1, r1
     66c:	0b b6       	in	r0, 0x3b	; 59
     66e:	0f 92       	push	r0
     670:	8f 93       	push	r24
     672:	9f 93       	push	r25
     674:	ef 93       	push	r30
     676:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     678:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <u8_RLastReceivedIndex>
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	8e b5       	in	r24, 0x2e	; 46
     680:	ee 5e       	subi	r30, 0xEE	; 238
     682:	fe 4f       	sbci	r31, 0xFE	; 254
     684:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     686:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_RLastReceivedIndex>
     68a:	89 30       	cpi	r24, 0x09	; 9
     68c:	30 f4       	brcc	.+12     	; 0x69a <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     68e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <u8_RLastReceivedIndex>
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <u8_RLastReceivedIndex>
     698:	02 c0       	rjmp	.+4      	; 0x69e <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     69a:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     6a4:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6a8:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <u8_TLastRequestedIndex>
     6ac:	98 17       	cp	r25, r24
     6ae:	a1 f0       	breq	.+40     	; 0x6d8 <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     6b0:	e0 91 0e 01 	lds	r30, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	e4 5e       	subi	r30, 0xE4	; 228
     6b8:	fe 4f       	sbci	r31, 0xFE	; 254
     6ba:	80 81       	ld	r24, Z
     6bc:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     6be:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6c2:	89 30       	cpi	r24, 0x09	; 9
     6c4:	30 f4       	brcc	.+12     	; 0x6d2 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     6c6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <u8_TLastTransmittedIndex>
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <u8_TLastTransmittedIndex>
     6d0:	06 c0       	rjmp	.+12     	; 0x6de <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     6d2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <u8_TLastTransmittedIndex>
     6d6:	03 c0       	rjmp	.+6      	; 0x6de <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <b_TAvailable>
	}
}
     6de:	ff 91       	pop	r31
     6e0:	ef 91       	pop	r30
     6e2:	9f 91       	pop	r25
     6e4:	8f 91       	pop	r24
     6e6:	0f 90       	pop	r0
     6e8:	0b be       	out	0x3b, r0	; 59
     6ea:	0f 90       	pop	r0
     6ec:	0f be       	out	0x3f, r0	; 63
     6ee:	0f 90       	pop	r0
     6f0:	1f 90       	pop	r1
     6f2:	18 95       	reti

000006f4 <calculateTopRegister>:
	setBit(&GTCCR, PSRSYNC);
}

void timer_synchronisedStart()
{
	clearBit(&GTCCR, TSM);
     6f4:	8f 92       	push	r8
     6f6:	9f 92       	push	r9
     6f8:	af 92       	push	r10
     6fa:	bf 92       	push	r11
     6fc:	ef 92       	push	r14
     6fe:	ff 92       	push	r15
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	df 93       	push	r29
     708:	00 d0       	rcall	.+0      	; 0x70a <calculateTopRegister+0x16>
     70a:	00 d0       	rcall	.+0      	; 0x70c <calculateTopRegister+0x18>
     70c:	1f 92       	push	r1
     70e:	cd b7       	in	r28, 0x3d	; 61
     710:	de b7       	in	r29, 0x3e	; 62
     712:	48 01       	movw	r8, r16
     714:	59 01       	movw	r10, r18
     716:	41 30       	cpi	r20, 0x01	; 1
     718:	21 f0       	breq	.+8      	; 0x722 <calculateTopRegister+0x2e>
     71a:	42 30       	cpi	r20, 0x02	; 2
     71c:	09 f4       	brne	.+2      	; 0x720 <calculateTopRegister+0x2c>
     71e:	83 c0       	rjmp	.+262    	; 0x826 <calculateTopRegister+0x132>
     720:	40 c1       	rjmp	.+640    	; 0x9a2 <calculateTopRegister+0x2ae>
     722:	60 e0       	ldi	r22, 0x00	; 0
     724:	72 e1       	ldi	r23, 0x12	; 18
     726:	8a e7       	ldi	r24, 0x7A	; 122
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	a9 01       	movw	r20, r18
     72c:	98 01       	movw	r18, r16
     72e:	f5 d7       	rcall	.+4074   	; 0x171a <__udivmodsi4>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	01 97       	sbiw	r24, 0x01	; 1
     736:	a1 09       	sbc	r26, r1
     738:	b1 09       	sbc	r27, r1
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	21 e0       	ldi	r18, 0x01	; 1
     73e:	a2 07       	cpc	r26, r18
     740:	b1 05       	cpc	r27, r1
     742:	50 f4       	brcc	.+20     	; 0x758 <calculateTopRegister+0x64>
     744:	49 ef       	ldi	r20, 0xF9	; 249
     746:	5f ef       	ldi	r21, 0xFF	; 255
     748:	6f ef       	ldi	r22, 0xFF	; 255
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	f7 01       	movw	r30, r14
     74e:	40 83       	st	Z, r20
     750:	51 83       	std	Z+1, r21	; 0x01
     752:	62 83       	std	Z+2, r22	; 0x02
     754:	73 83       	std	Z+3, r23	; 0x03
     756:	28 c1       	rjmp	.+592    	; 0x9a8 <calculateTopRegister+0x2b4>
     758:	60 e4       	ldi	r22, 0x40	; 64
     75a:	72 e4       	ldi	r23, 0x42	; 66
     75c:	8f e0       	ldi	r24, 0x0F	; 15
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	a5 01       	movw	r20, r10
     762:	94 01       	movw	r18, r8
     764:	da d7       	rcall	.+4020   	; 0x171a <__udivmodsi4>
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	01 97       	sbiw	r24, 0x01	; 1
     76c:	a1 09       	sbc	r26, r1
     76e:	b1 09       	sbc	r27, r1
     770:	00 97       	sbiw	r24, 0x00	; 0
     772:	f1 e0       	ldi	r31, 0x01	; 1
     774:	af 07       	cpc	r26, r31
     776:	b1 05       	cpc	r27, r1
     778:	50 f4       	brcc	.+20     	; 0x78e <calculateTopRegister+0x9a>
     77a:	4a ef       	ldi	r20, 0xFA	; 250
     77c:	5f ef       	ldi	r21, 0xFF	; 255
     77e:	6f ef       	ldi	r22, 0xFF	; 255
     780:	70 e0       	ldi	r23, 0x00	; 0
     782:	f7 01       	movw	r30, r14
     784:	40 83       	st	Z, r20
     786:	51 83       	std	Z+1, r21	; 0x01
     788:	62 83       	std	Z+2, r22	; 0x02
     78a:	73 83       	std	Z+3, r23	; 0x03
     78c:	0d c1       	rjmp	.+538    	; 0x9a8 <calculateTopRegister+0x2b4>
     78e:	68 e4       	ldi	r22, 0x48	; 72
     790:	78 ee       	ldi	r23, 0xE8	; 232
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	a5 01       	movw	r20, r10
     798:	94 01       	movw	r18, r8
     79a:	bf d7       	rcall	.+3966   	; 0x171a <__udivmodsi4>
     79c:	da 01       	movw	r26, r20
     79e:	c9 01       	movw	r24, r18
     7a0:	01 97       	sbiw	r24, 0x01	; 1
     7a2:	a1 09       	sbc	r26, r1
     7a4:	b1 09       	sbc	r27, r1
     7a6:	00 97       	sbiw	r24, 0x00	; 0
     7a8:	f1 e0       	ldi	r31, 0x01	; 1
     7aa:	af 07       	cpc	r26, r31
     7ac:	b1 05       	cpc	r27, r1
     7ae:	50 f4       	brcc	.+20     	; 0x7c4 <calculateTopRegister+0xd0>
     7b0:	4c ef       	ldi	r20, 0xFC	; 252
     7b2:	5f ef       	ldi	r21, 0xFF	; 255
     7b4:	6f ef       	ldi	r22, 0xFF	; 255
     7b6:	70 e0       	ldi	r23, 0x00	; 0
     7b8:	f7 01       	movw	r30, r14
     7ba:	40 83       	st	Z, r20
     7bc:	51 83       	std	Z+1, r21	; 0x01
     7be:	62 83       	std	Z+2, r22	; 0x02
     7c0:	73 83       	std	Z+3, r23	; 0x03
     7c2:	f2 c0       	rjmp	.+484    	; 0x9a8 <calculateTopRegister+0x2b4>
     7c4:	62 e1       	ldi	r22, 0x12	; 18
     7c6:	7a e7       	ldi	r23, 0x7A	; 122
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	a5 01       	movw	r20, r10
     7ce:	94 01       	movw	r18, r8
     7d0:	a4 d7       	rcall	.+3912   	; 0x171a <__udivmodsi4>
     7d2:	da 01       	movw	r26, r20
     7d4:	c9 01       	movw	r24, r18
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	a1 09       	sbc	r26, r1
     7da:	b1 09       	sbc	r27, r1
     7dc:	00 97       	sbiw	r24, 0x00	; 0
     7de:	f1 e0       	ldi	r31, 0x01	; 1
     7e0:	af 07       	cpc	r26, r31
     7e2:	b1 05       	cpc	r27, r1
     7e4:	50 f4       	brcc	.+20     	; 0x7fa <calculateTopRegister+0x106>
     7e6:	4e ef       	ldi	r20, 0xFE	; 254
     7e8:	5f ef       	ldi	r21, 0xFF	; 255
     7ea:	6f ef       	ldi	r22, 0xFF	; 255
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	f7 01       	movw	r30, r14
     7f0:	40 83       	st	Z, r20
     7f2:	51 83       	std	Z+1, r21	; 0x01
     7f4:	62 83       	std	Z+2, r22	; 0x02
     7f6:	73 83       	std	Z+3, r23	; 0x03
     7f8:	d7 c0       	rjmp	.+430    	; 0x9a8 <calculateTopRegister+0x2b4>
     7fa:	8f ef       	ldi	r24, 0xFF	; 255
     7fc:	9f ef       	ldi	r25, 0xFF	; 255
     7fe:	af ef       	ldi	r26, 0xFF	; 255
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	f7 01       	movw	r30, r14
     804:	80 83       	st	Z, r24
     806:	91 83       	std	Z+1, r25	; 0x01
     808:	a2 83       	std	Z+2, r26	; 0x02
     80a:	b3 83       	std	Z+3, r27	; 0x03
     80c:	64 e8       	ldi	r22, 0x84	; 132
     80e:	7e e1       	ldi	r23, 0x1E	; 30
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	a5 01       	movw	r20, r10
     816:	94 01       	movw	r18, r8
     818:	80 d7       	rcall	.+3840   	; 0x171a <__udivmodsi4>
     81a:	da 01       	movw	r26, r20
     81c:	c9 01       	movw	r24, r18
     81e:	01 97       	sbiw	r24, 0x01	; 1
     820:	a1 09       	sbc	r26, r1
     822:	b1 09       	sbc	r27, r1
     824:	c1 c0       	rjmp	.+386    	; 0x9a8 <calculateTopRegister+0x2b4>
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	72 e1       	ldi	r23, 0x12	; 18
     82a:	8a e7       	ldi	r24, 0x7A	; 122
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	a9 01       	movw	r20, r18
     830:	98 01       	movw	r18, r16
     832:	73 d7       	rcall	.+3814   	; 0x171a <__udivmodsi4>
     834:	da 01       	movw	r26, r20
     836:	c9 01       	movw	r24, r18
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	a1 09       	sbc	r26, r1
     83c:	b1 09       	sbc	r27, r1
     83e:	8f 3f       	cpi	r24, 0xFF	; 255
     840:	91 05       	cpc	r25, r1
     842:	a1 05       	cpc	r26, r1
     844:	b1 05       	cpc	r27, r1
     846:	09 f0       	breq	.+2      	; 0x84a <calculateTopRegister+0x156>
     848:	50 f4       	brcc	.+20     	; 0x85e <calculateTopRegister+0x16a>
     84a:	49 ef       	ldi	r20, 0xF9	; 249
     84c:	5f ef       	ldi	r21, 0xFF	; 255
     84e:	6f ef       	ldi	r22, 0xFF	; 255
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	f7 01       	movw	r30, r14
     854:	40 83       	st	Z, r20
     856:	51 83       	std	Z+1, r21	; 0x01
     858:	62 83       	std	Z+2, r22	; 0x02
     85a:	73 83       	std	Z+3, r23	; 0x03
     85c:	a5 c0       	rjmp	.+330    	; 0x9a8 <calculateTopRegister+0x2b4>
     85e:	60 e4       	ldi	r22, 0x40	; 64
     860:	72 e4       	ldi	r23, 0x42	; 66
     862:	8f e0       	ldi	r24, 0x0F	; 15
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	a5 01       	movw	r20, r10
     868:	94 01       	movw	r18, r8
     86a:	57 d7       	rcall	.+3758   	; 0x171a <__udivmodsi4>
     86c:	da 01       	movw	r26, r20
     86e:	c9 01       	movw	r24, r18
     870:	01 97       	sbiw	r24, 0x01	; 1
     872:	a1 09       	sbc	r26, r1
     874:	b1 09       	sbc	r27, r1
     876:	8f 3f       	cpi	r24, 0xFF	; 255
     878:	91 05       	cpc	r25, r1
     87a:	a1 05       	cpc	r26, r1
     87c:	b1 05       	cpc	r27, r1
     87e:	09 f0       	breq	.+2      	; 0x882 <calculateTopRegister+0x18e>
     880:	50 f4       	brcc	.+20     	; 0x896 <calculateTopRegister+0x1a2>
     882:	4a ef       	ldi	r20, 0xFA	; 250
     884:	5f ef       	ldi	r21, 0xFF	; 255
     886:	6f ef       	ldi	r22, 0xFF	; 255
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	f7 01       	movw	r30, r14
     88c:	40 83       	st	Z, r20
     88e:	51 83       	std	Z+1, r21	; 0x01
     890:	62 83       	std	Z+2, r22	; 0x02
     892:	73 83       	std	Z+3, r23	; 0x03
     894:	89 c0       	rjmp	.+274    	; 0x9a8 <calculateTopRegister+0x2b4>
     896:	60 e9       	ldi	r22, 0x90	; 144
     898:	70 ed       	ldi	r23, 0xD0	; 208
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	a5 01       	movw	r20, r10
     8a0:	94 01       	movw	r18, r8
     8a2:	3b d7       	rcall	.+3702   	; 0x171a <__udivmodsi4>
     8a4:	da 01       	movw	r26, r20
     8a6:	c9 01       	movw	r24, r18
     8a8:	01 97       	sbiw	r24, 0x01	; 1
     8aa:	a1 09       	sbc	r26, r1
     8ac:	b1 09       	sbc	r27, r1
     8ae:	8f 3f       	cpi	r24, 0xFF	; 255
     8b0:	91 05       	cpc	r25, r1
     8b2:	a1 05       	cpc	r26, r1
     8b4:	b1 05       	cpc	r27, r1
     8b6:	09 f0       	breq	.+2      	; 0x8ba <calculateTopRegister+0x1c6>
     8b8:	50 f4       	brcc	.+20     	; 0x8ce <calculateTopRegister+0x1da>
     8ba:	4b ef       	ldi	r20, 0xFB	; 251
     8bc:	5f ef       	ldi	r21, 0xFF	; 255
     8be:	6f ef       	ldi	r22, 0xFF	; 255
     8c0:	70 e0       	ldi	r23, 0x00	; 0
     8c2:	f7 01       	movw	r30, r14
     8c4:	40 83       	st	Z, r20
     8c6:	51 83       	std	Z+1, r21	; 0x01
     8c8:	62 83       	std	Z+2, r22	; 0x02
     8ca:	73 83       	std	Z+3, r23	; 0x03
     8cc:	6d c0       	rjmp	.+218    	; 0x9a8 <calculateTopRegister+0x2b4>
     8ce:	68 e4       	ldi	r22, 0x48	; 72
     8d0:	78 ee       	ldi	r23, 0xE8	; 232
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	a5 01       	movw	r20, r10
     8d8:	94 01       	movw	r18, r8
     8da:	1f d7       	rcall	.+3646   	; 0x171a <__udivmodsi4>
     8dc:	da 01       	movw	r26, r20
     8de:	c9 01       	movw	r24, r18
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	a1 09       	sbc	r26, r1
     8e4:	b1 09       	sbc	r27, r1
     8e6:	8f 3f       	cpi	r24, 0xFF	; 255
     8e8:	91 05       	cpc	r25, r1
     8ea:	a1 05       	cpc	r26, r1
     8ec:	b1 05       	cpc	r27, r1
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <calculateTopRegister+0x1fe>
     8f0:	50 f4       	brcc	.+20     	; 0x906 <calculateTopRegister+0x212>
     8f2:	4c ef       	ldi	r20, 0xFC	; 252
     8f4:	5f ef       	ldi	r21, 0xFF	; 255
     8f6:	6f ef       	ldi	r22, 0xFF	; 255
     8f8:	70 e0       	ldi	r23, 0x00	; 0
     8fa:	f7 01       	movw	r30, r14
     8fc:	40 83       	st	Z, r20
     8fe:	51 83       	std	Z+1, r21	; 0x01
     900:	62 83       	std	Z+2, r22	; 0x02
     902:	73 83       	std	Z+3, r23	; 0x03
     904:	51 c0       	rjmp	.+162    	; 0x9a8 <calculateTopRegister+0x2b4>
     906:	64 e2       	ldi	r22, 0x24	; 36
     908:	74 ef       	ldi	r23, 0xF4	; 244
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	a5 01       	movw	r20, r10
     910:	94 01       	movw	r18, r8
     912:	03 d7       	rcall	.+3590   	; 0x171a <__udivmodsi4>
     914:	da 01       	movw	r26, r20
     916:	c9 01       	movw	r24, r18
     918:	01 97       	sbiw	r24, 0x01	; 1
     91a:	a1 09       	sbc	r26, r1
     91c:	b1 09       	sbc	r27, r1
     91e:	8f 3f       	cpi	r24, 0xFF	; 255
     920:	91 05       	cpc	r25, r1
     922:	a1 05       	cpc	r26, r1
     924:	b1 05       	cpc	r27, r1
     926:	09 f0       	breq	.+2      	; 0x92a <calculateTopRegister+0x236>
     928:	50 f4       	brcc	.+20     	; 0x93e <calculateTopRegister+0x24a>
     92a:	4d ef       	ldi	r20, 0xFD	; 253
     92c:	5f ef       	ldi	r21, 0xFF	; 255
     92e:	6f ef       	ldi	r22, 0xFF	; 255
     930:	70 e0       	ldi	r23, 0x00	; 0
     932:	f7 01       	movw	r30, r14
     934:	40 83       	st	Z, r20
     936:	51 83       	std	Z+1, r21	; 0x01
     938:	62 83       	std	Z+2, r22	; 0x02
     93a:	73 83       	std	Z+3, r23	; 0x03
     93c:	35 c0       	rjmp	.+106    	; 0x9a8 <calculateTopRegister+0x2b4>
     93e:	62 e1       	ldi	r22, 0x12	; 18
     940:	7a e7       	ldi	r23, 0x7A	; 122
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	a5 01       	movw	r20, r10
     948:	94 01       	movw	r18, r8
     94a:	e7 d6       	rcall	.+3534   	; 0x171a <__udivmodsi4>
     94c:	da 01       	movw	r26, r20
     94e:	c9 01       	movw	r24, r18
     950:	01 97       	sbiw	r24, 0x01	; 1
     952:	a1 09       	sbc	r26, r1
     954:	b1 09       	sbc	r27, r1
     956:	8f 3f       	cpi	r24, 0xFF	; 255
     958:	91 05       	cpc	r25, r1
     95a:	a1 05       	cpc	r26, r1
     95c:	b1 05       	cpc	r27, r1
     95e:	09 f0       	breq	.+2      	; 0x962 <calculateTopRegister+0x26e>
     960:	50 f4       	brcc	.+20     	; 0x976 <calculateTopRegister+0x282>
     962:	4e ef       	ldi	r20, 0xFE	; 254
     964:	5f ef       	ldi	r21, 0xFF	; 255
     966:	6f ef       	ldi	r22, 0xFF	; 255
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	f7 01       	movw	r30, r14
     96c:	40 83       	st	Z, r20
     96e:	51 83       	std	Z+1, r21	; 0x01
     970:	62 83       	std	Z+2, r22	; 0x02
     972:	73 83       	std	Z+3, r23	; 0x03
     974:	19 c0       	rjmp	.+50     	; 0x9a8 <calculateTopRegister+0x2b4>
     976:	8f ef       	ldi	r24, 0xFF	; 255
     978:	9f ef       	ldi	r25, 0xFF	; 255
     97a:	af ef       	ldi	r26, 0xFF	; 255
     97c:	b0 e0       	ldi	r27, 0x00	; 0
     97e:	f7 01       	movw	r30, r14
     980:	80 83       	st	Z, r24
     982:	91 83       	std	Z+1, r25	; 0x01
     984:	a2 83       	std	Z+2, r26	; 0x02
     986:	b3 83       	std	Z+3, r27	; 0x03
     988:	64 e8       	ldi	r22, 0x84	; 132
     98a:	7e e1       	ldi	r23, 0x1E	; 30
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	a5 01       	movw	r20, r10
     992:	94 01       	movw	r18, r8
     994:	c2 d6       	rcall	.+3460   	; 0x171a <__udivmodsi4>
     996:	da 01       	movw	r26, r20
     998:	c9 01       	movw	r24, r18
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	a1 09       	sbc	r26, r1
     99e:	b1 09       	sbc	r27, r1
     9a0:	03 c0       	rjmp	.+6      	; 0x9a8 <calculateTopRegister+0x2b4>
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	dc 01       	movw	r26, r24
     9a8:	0f 90       	pop	r0
     9aa:	0f 90       	pop	r0
     9ac:	0f 90       	pop	r0
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	df 91       	pop	r29
     9b4:	cf 91       	pop	r28
     9b6:	1f 91       	pop	r17
     9b8:	0f 91       	pop	r16
     9ba:	ff 90       	pop	r15
     9bc:	ef 90       	pop	r14
     9be:	bf 90       	pop	r11
     9c0:	af 90       	pop	r10
     9c2:	9f 90       	pop	r9
     9c4:	8f 90       	pop	r8
     9c6:	08 95       	ret

000009c8 <__vector_15>:
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	0b b6       	in	r0, 0x3b	; 59
     9d4:	0f 92       	push	r0
     9d6:	2f 93       	push	r18
     9d8:	3f 93       	push	r19
     9da:	4f 93       	push	r20
     9dc:	5f 93       	push	r21
     9de:	6f 93       	push	r22
     9e0:	7f 93       	push	r23
     9e2:	8f 93       	push	r24
     9e4:	9f 93       	push	r25
     9e6:	af 93       	push	r26
     9e8:	bf 93       	push	r27
     9ea:	ef 93       	push	r30
     9ec:	ff 93       	push	r31
     9ee:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer1Callbacks>
     9f2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer1Callbacks+0x1>
     9f6:	09 95       	icall
     9f8:	ff 91       	pop	r31
     9fa:	ef 91       	pop	r30
     9fc:	bf 91       	pop	r27
     9fe:	af 91       	pop	r26
     a00:	9f 91       	pop	r25
     a02:	8f 91       	pop	r24
     a04:	7f 91       	pop	r23
     a06:	6f 91       	pop	r22
     a08:	5f 91       	pop	r21
     a0a:	4f 91       	pop	r20
     a0c:	3f 91       	pop	r19
     a0e:	2f 91       	pop	r18
     a10:	0f 90       	pop	r0
     a12:	0b be       	out	0x3b, r0	; 59
     a14:	0f 90       	pop	r0
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	0f 90       	pop	r0
     a1a:	1f 90       	pop	r1
     a1c:	18 95       	reti

00000a1e <__vector_13>:
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	0b b6       	in	r0, 0x3b	; 59
     a2a:	0f 92       	push	r0
     a2c:	0f 93       	push	r16
     a2e:	1f 93       	push	r17
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	ef 93       	push	r30
     a4a:	ff 93       	push	r31
     a4c:	c1 e8       	ldi	r28, 0x81	; 129
     a4e:	d0 e0       	ldi	r29, 0x00	; 0
     a50:	88 81       	ld	r24, Y
     a52:	64 e0       	ldi	r22, 0x04	; 4
     a54:	cd dc       	rcall	.-1638   	; 0x3f0 <checkBit>
     a56:	18 2f       	mov	r17, r24
     a58:	88 81       	ld	r24, Y
     a5a:	63 e0       	ldi	r22, 0x03	; 3
     a5c:	c9 dc       	rcall	.-1646   	; 0x3f0 <checkBit>
     a5e:	c1 2f       	mov	r28, r17
     a60:	cc 0f       	add	r28, r28
     a62:	cc 0f       	add	r28, r28
     a64:	cc 0f       	add	r28, r28
     a66:	24 e0       	ldi	r18, 0x04	; 4
     a68:	82 9f       	mul	r24, r18
     a6a:	c0 01       	movw	r24, r0
     a6c:	11 24       	eor	r1, r1
     a6e:	c8 2b       	or	r28, r24
     a70:	00 e8       	ldi	r16, 0x80	; 128
     a72:	10 e0       	ldi	r17, 0x00	; 0
     a74:	f8 01       	movw	r30, r16
     a76:	80 81       	ld	r24, Z
     a78:	61 e0       	ldi	r22, 0x01	; 1
     a7a:	ba dc       	rcall	.-1676   	; 0x3f0 <checkBit>
     a7c:	d8 2f       	mov	r29, r24
     a7e:	f8 01       	movw	r30, r16
     a80:	80 81       	ld	r24, Z
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	b5 dc       	rcall	.-1686   	; 0x3f0 <checkBit>
     a86:	dd 0f       	add	r29, r29
     a88:	8c 2b       	or	r24, r28
     a8a:	8d 2b       	or	r24, r29
     a8c:	88 30       	cpi	r24, 0x08	; 8
     a8e:	18 f4       	brcc	.+6      	; 0xa96 <__vector_13+0x78>
     a90:	84 30       	cpi	r24, 0x04	; 4
     a92:	19 f4       	brne	.+6      	; 0xa9a <__vector_13+0x7c>
     a94:	08 c0       	rjmp	.+16     	; 0xaa6 <__vector_13+0x88>
     a96:	80 fd       	sbrc	r24, 0
     a98:	06 c0       	rjmp	.+12     	; 0xaa6 <__vector_13+0x88>
     a9a:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <p_timer1Callbacks+0x2>
     a9e:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <p_timer1Callbacks+0x3>
     aa2:	09 95       	icall
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <__vector_13+0x92>
     aa6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer1Callbacks>
     aaa:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer1Callbacks+0x1>
     aae:	09 95       	icall
     ab0:	ff 91       	pop	r31
     ab2:	ef 91       	pop	r30
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	bf 91       	pop	r27
     aba:	af 91       	pop	r26
     abc:	9f 91       	pop	r25
     abe:	8f 91       	pop	r24
     ac0:	7f 91       	pop	r23
     ac2:	6f 91       	pop	r22
     ac4:	5f 91       	pop	r21
     ac6:	4f 91       	pop	r20
     ac8:	3f 91       	pop	r19
     aca:	2f 91       	pop	r18
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	0f 90       	pop	r0
     ad2:	0b be       	out	0x3b, r0	; 59
     ad4:	0f 90       	pop	r0
     ad6:	0f be       	out	0x3f, r0	; 63
     ad8:	0f 90       	pop	r0
     ada:	1f 90       	pop	r1
     adc:	18 95       	reti

00000ade <__vector_14>:
     ade:	1f 92       	push	r1
     ae0:	0f 92       	push	r0
     ae2:	0f b6       	in	r0, 0x3f	; 63
     ae4:	0f 92       	push	r0
     ae6:	11 24       	eor	r1, r1
     ae8:	0b b6       	in	r0, 0x3b	; 59
     aea:	0f 92       	push	r0
     aec:	2f 93       	push	r18
     aee:	3f 93       	push	r19
     af0:	4f 93       	push	r20
     af2:	5f 93       	push	r21
     af4:	6f 93       	push	r22
     af6:	7f 93       	push	r23
     af8:	8f 93       	push	r24
     afa:	9f 93       	push	r25
     afc:	af 93       	push	r26
     afe:	bf 93       	push	r27
     b00:	ef 93       	push	r30
     b02:	ff 93       	push	r31
     b04:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <p_timer1Callbacks+0x4>
     b08:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <p_timer1Callbacks+0x5>
     b0c:	09 95       	icall
     b0e:	ff 91       	pop	r31
     b10:	ef 91       	pop	r30
     b12:	bf 91       	pop	r27
     b14:	af 91       	pop	r26
     b16:	9f 91       	pop	r25
     b18:	8f 91       	pop	r24
     b1a:	7f 91       	pop	r23
     b1c:	6f 91       	pop	r22
     b1e:	5f 91       	pop	r21
     b20:	4f 91       	pop	r20
     b22:	3f 91       	pop	r19
     b24:	2f 91       	pop	r18
     b26:	0f 90       	pop	r0
     b28:	0b be       	out	0x3b, r0	; 59
     b2a:	0f 90       	pop	r0
     b2c:	0f be       	out	0x3f, r0	; 63
     b2e:	0f 90       	pop	r0
     b30:	1f 90       	pop	r1
     b32:	18 95       	reti

00000b34 <__vector_12>:
     b34:	1f 92       	push	r1
     b36:	0f 92       	push	r0
     b38:	0f b6       	in	r0, 0x3f	; 63
     b3a:	0f 92       	push	r0
     b3c:	11 24       	eor	r1, r1
     b3e:	0b b6       	in	r0, 0x3b	; 59
     b40:	0f 92       	push	r0
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	2f 93       	push	r18
     b48:	3f 93       	push	r19
     b4a:	4f 93       	push	r20
     b4c:	5f 93       	push	r21
     b4e:	6f 93       	push	r22
     b50:	7f 93       	push	r23
     b52:	8f 93       	push	r24
     b54:	9f 93       	push	r25
     b56:	af 93       	push	r26
     b58:	bf 93       	push	r27
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	ef 93       	push	r30
     b60:	ff 93       	push	r31
     b62:	c1 e8       	ldi	r28, 0x81	; 129
     b64:	d0 e0       	ldi	r29, 0x00	; 0
     b66:	88 81       	ld	r24, Y
     b68:	64 e0       	ldi	r22, 0x04	; 4
     b6a:	42 dc       	rcall	.-1916   	; 0x3f0 <checkBit>
     b6c:	18 2f       	mov	r17, r24
     b6e:	88 81       	ld	r24, Y
     b70:	63 e0       	ldi	r22, 0x03	; 3
     b72:	3e dc       	rcall	.-1924   	; 0x3f0 <checkBit>
     b74:	c1 2f       	mov	r28, r17
     b76:	cc 0f       	add	r28, r28
     b78:	cc 0f       	add	r28, r28
     b7a:	cc 0f       	add	r28, r28
     b7c:	24 e0       	ldi	r18, 0x04	; 4
     b7e:	82 9f       	mul	r24, r18
     b80:	c0 01       	movw	r24, r0
     b82:	11 24       	eor	r1, r1
     b84:	c8 2b       	or	r28, r24
     b86:	00 e8       	ldi	r16, 0x80	; 128
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 81       	ld	r24, Z
     b8e:	61 e0       	ldi	r22, 0x01	; 1
     b90:	2f dc       	rcall	.-1954   	; 0x3f0 <checkBit>
     b92:	d8 2f       	mov	r29, r24
     b94:	f8 01       	movw	r30, r16
     b96:	80 81       	ld	r24, Z
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	2a dc       	rcall	.-1964   	; 0x3f0 <checkBit>
     b9c:	dd 0f       	add	r29, r29
     b9e:	8c 2b       	or	r24, r28
     ba0:	8d 2b       	or	r24, r29
     ba2:	88 30       	cpi	r24, 0x08	; 8
     ba4:	10 f0       	brcs	.+4      	; 0xbaa <__vector_12+0x76>
     ba6:	80 ff       	sbrs	r24, 0
     ba8:	06 c0       	rjmp	.+12     	; 0xbb6 <__vector_12+0x82>
     baa:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <p_timer1Callbacks+0x6>
     bae:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <p_timer1Callbacks+0x7>
     bb2:	09 95       	icall
     bb4:	05 c0       	rjmp	.+10     	; 0xbc0 <__vector_12+0x8c>
     bb6:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <p_timer1Callbacks>
     bba:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <p_timer1Callbacks+0x1>
     bbe:	09 95       	icall
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	bf 91       	pop	r27
     bca:	af 91       	pop	r26
     bcc:	9f 91       	pop	r25
     bce:	8f 91       	pop	r24
     bd0:	7f 91       	pop	r23
     bd2:	6f 91       	pop	r22
     bd4:	5f 91       	pop	r21
     bd6:	4f 91       	pop	r20
     bd8:	3f 91       	pop	r19
     bda:	2f 91       	pop	r18
     bdc:	1f 91       	pop	r17
     bde:	0f 91       	pop	r16
     be0:	0f 90       	pop	r0
     be2:	0b be       	out	0x3b, r0	; 59
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <__vector_11>:
     bee:	1f 92       	push	r1
     bf0:	0f 92       	push	r0
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	0f 92       	push	r0
     bf6:	11 24       	eor	r1, r1
     bf8:	0b b6       	in	r0, 0x3b	; 59
     bfa:	0f 92       	push	r0
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	4f 93       	push	r20
     c02:	5f 93       	push	r21
     c04:	6f 93       	push	r22
     c06:	7f 93       	push	r23
     c08:	8f 93       	push	r24
     c0a:	9f 93       	push	r25
     c0c:	af 93       	push	r26
     c0e:	bf 93       	push	r27
     c10:	ef 93       	push	r30
     c12:	ff 93       	push	r31
     c14:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer2Callbacks>
     c18:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer2Callbacks+0x1>
     c1c:	09 95       	icall
     c1e:	ff 91       	pop	r31
     c20:	ef 91       	pop	r30
     c22:	bf 91       	pop	r27
     c24:	af 91       	pop	r26
     c26:	9f 91       	pop	r25
     c28:	8f 91       	pop	r24
     c2a:	7f 91       	pop	r23
     c2c:	6f 91       	pop	r22
     c2e:	5f 91       	pop	r21
     c30:	4f 91       	pop	r20
     c32:	3f 91       	pop	r19
     c34:	2f 91       	pop	r18
     c36:	0f 90       	pop	r0
     c38:	0b be       	out	0x3b, r0	; 59
     c3a:	0f 90       	pop	r0
     c3c:	0f be       	out	0x3f, r0	; 63
     c3e:	0f 90       	pop	r0
     c40:	1f 90       	pop	r1
     c42:	18 95       	reti

00000c44 <__vector_9>:
     c44:	1f 92       	push	r1
     c46:	0f 92       	push	r0
     c48:	0f b6       	in	r0, 0x3f	; 63
     c4a:	0f 92       	push	r0
     c4c:	11 24       	eor	r1, r1
     c4e:	0b b6       	in	r0, 0x3b	; 59
     c50:	0f 92       	push	r0
     c52:	2f 93       	push	r18
     c54:	3f 93       	push	r19
     c56:	4f 93       	push	r20
     c58:	5f 93       	push	r21
     c5a:	6f 93       	push	r22
     c5c:	7f 93       	push	r23
     c5e:	8f 93       	push	r24
     c60:	9f 93       	push	r25
     c62:	af 93       	push	r26
     c64:	bf 93       	push	r27
     c66:	ef 93       	push	r30
     c68:	ff 93       	push	r31
     c6a:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     c6e:	63 e0       	ldi	r22, 0x03	; 3
     c70:	bf db       	rcall	.-2178   	; 0x3f0 <checkBit>
     c72:	81 11       	cpse	r24, r1
     c74:	0b c0       	rjmp	.+22     	; 0xc8c <__vector_9+0x48>
     c76:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     c7a:	83 70       	andi	r24, 0x03	; 3
     c7c:	82 30       	cpi	r24, 0x02	; 2
     c7e:	31 f0       	breq	.+12     	; 0xc8c <__vector_9+0x48>
     c80:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <p_timer2Callbacks+0x2>
     c84:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <p_timer2Callbacks+0x3>
     c88:	09 95       	icall
     c8a:	05 c0       	rjmp	.+10     	; 0xc96 <__vector_9+0x52>
     c8c:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <p_timer2Callbacks>
     c90:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <p_timer2Callbacks+0x1>
     c94:	09 95       	icall
     c96:	ff 91       	pop	r31
     c98:	ef 91       	pop	r30
     c9a:	bf 91       	pop	r27
     c9c:	af 91       	pop	r26
     c9e:	9f 91       	pop	r25
     ca0:	8f 91       	pop	r24
     ca2:	7f 91       	pop	r23
     ca4:	6f 91       	pop	r22
     ca6:	5f 91       	pop	r21
     ca8:	4f 91       	pop	r20
     caa:	3f 91       	pop	r19
     cac:	2f 91       	pop	r18
     cae:	0f 90       	pop	r0
     cb0:	0b be       	out	0x3b, r0	; 59
     cb2:	0f 90       	pop	r0
     cb4:	0f be       	out	0x3f, r0	; 63
     cb6:	0f 90       	pop	r0
     cb8:	1f 90       	pop	r1
     cba:	18 95       	reti

00000cbc <__vector_10>:
     cbc:	1f 92       	push	r1
     cbe:	0f 92       	push	r0
     cc0:	0f b6       	in	r0, 0x3f	; 63
     cc2:	0f 92       	push	r0
     cc4:	11 24       	eor	r1, r1
     cc6:	0b b6       	in	r0, 0x3b	; 59
     cc8:	0f 92       	push	r0
     cca:	2f 93       	push	r18
     ccc:	3f 93       	push	r19
     cce:	4f 93       	push	r20
     cd0:	5f 93       	push	r21
     cd2:	6f 93       	push	r22
     cd4:	7f 93       	push	r23
     cd6:	8f 93       	push	r24
     cd8:	9f 93       	push	r25
     cda:	af 93       	push	r26
     cdc:	bf 93       	push	r27
     cde:	ef 93       	push	r30
     ce0:	ff 93       	push	r31
     ce2:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <p_timer2Callbacks+0x4>
     ce6:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <p_timer2Callbacks+0x5>
     cea:	09 95       	icall
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0b be       	out	0x3b, r0	; 59
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	0f 90       	pop	r0
     d0e:	1f 90       	pop	r1
     d10:	18 95       	reti

00000d12 <timer_init>:
     d12:	ef 92       	push	r14
     d14:	ff 92       	push	r15
     d16:	0f 93       	push	r16
     d18:	1f 93       	push	r17
     d1a:	cf 93       	push	r28
     d1c:	df 93       	push	r29
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
     d22:	29 97       	sbiw	r28, 0x09	; 9
     d24:	0f b6       	in	r0, 0x3f	; 63
     d26:	f8 94       	cli
     d28:	de bf       	out	0x3e, r29	; 62
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	cd bf       	out	0x3d, r28	; 61
     d2e:	4d 83       	std	Y+5, r20	; 0x05
     d30:	5e 83       	std	Y+6, r21	; 0x06
     d32:	6f 83       	std	Y+7, r22	; 0x07
     d34:	78 87       	std	Y+8, r23	; 0x08
     d36:	89 87       	std	Y+9, r24	; 0x09
     d38:	0e 81       	ldd	r16, Y+6	; 0x06
     d3a:	1f 81       	ldd	r17, Y+7	; 0x07
     d3c:	28 85       	ldd	r18, Y+8	; 0x08
     d3e:	39 85       	ldd	r19, Y+9	; 0x09
     d40:	19 82       	std	Y+1, r1	; 0x01
     d42:	1a 82       	std	Y+2, r1	; 0x02
     d44:	1b 82       	std	Y+3, r1	; 0x03
     d46:	1c 82       	std	Y+4, r1	; 0x04
     d48:	41 30       	cpi	r20, 0x01	; 1
     d4a:	21 f0       	breq	.+8      	; 0xd54 <timer_init+0x42>
     d4c:	42 30       	cpi	r20, 0x02	; 2
     d4e:	09 f4       	brne	.+2      	; 0xd52 <timer_init+0x40>
     d50:	95 c0       	rjmp	.+298    	; 0xe7c <timer_init+0x16a>
     d52:	1d c1       	rjmp	.+570    	; 0xf8e <timer_init+0x27c>
     d54:	09 3f       	cpi	r16, 0xF9	; 249
     d56:	8f ef       	ldi	r24, 0xFF	; 255
     d58:	18 07       	cpc	r17, r24
     d5a:	28 07       	cpc	r18, r24
     d5c:	31 05       	cpc	r19, r1
     d5e:	28 f0       	brcs	.+10     	; 0xd6a <timer_init+0x58>
     d60:	09 83       	std	Y+1, r16	; 0x01
     d62:	1a 83       	std	Y+2, r17	; 0x02
     d64:	2b 83       	std	Y+3, r18	; 0x03
     d66:	3c 83       	std	Y+4, r19	; 0x04
     d68:	15 c0       	rjmp	.+42     	; 0xd94 <timer_init+0x82>
     d6a:	ce 01       	movw	r24, r28
     d6c:	01 96       	adiw	r24, 0x01	; 1
     d6e:	7c 01       	movw	r14, r24
     d70:	4d 81       	ldd	r20, Y+5	; 0x05
     d72:	5e 81       	ldd	r21, Y+6	; 0x06
     d74:	6f 81       	ldd	r22, Y+7	; 0x07
     d76:	78 85       	ldd	r23, Y+8	; 0x08
     d78:	89 85       	ldd	r24, Y+9	; 0x09
     d7a:	bc dc       	rcall	.-1672   	; 0x6f4 <calculateTopRegister>
     d7c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     d80:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     d84:	64 e0       	ldi	r22, 0x04	; 4
     d86:	81 e8       	ldi	r24, 0x81	; 129
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	19 db       	rcall	.-2510   	; 0x3be <setBit>
     d8c:	63 e0       	ldi	r22, 0x03	; 3
     d8e:	81 e8       	ldi	r24, 0x81	; 129
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	15 db       	rcall	.-2518   	; 0x3be <setBit>
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	ab 81       	ldd	r26, Y+3	; 0x03
     d9a:	bc 81       	ldd	r27, Y+4	; 0x04
     d9c:	8c 3f       	cpi	r24, 0xFC	; 252
     d9e:	2f ef       	ldi	r18, 0xFF	; 255
     da0:	92 07       	cpc	r25, r18
     da2:	a2 07       	cpc	r26, r18
     da4:	b1 05       	cpc	r27, r1
     da6:	59 f1       	breq	.+86     	; 0xdfe <timer_init+0xec>
     da8:	60 f4       	brcc	.+24     	; 0xdc2 <timer_init+0xb0>
     daa:	89 3f       	cpi	r24, 0xF9	; 249
     dac:	2f ef       	ldi	r18, 0xFF	; 255
     dae:	92 07       	cpc	r25, r18
     db0:	a2 07       	cpc	r26, r18
     db2:	b1 05       	cpc	r27, r1
     db4:	91 f0       	breq	.+36     	; 0xdda <timer_init+0xc8>
     db6:	8a 3f       	cpi	r24, 0xFA	; 250
     db8:	9f 4f       	sbci	r25, 0xFF	; 255
     dba:	af 4f       	sbci	r26, 0xFF	; 255
     dbc:	b1 05       	cpc	r27, r1
     dbe:	b1 f0       	breq	.+44     	; 0xdec <timer_init+0xda>
     dc0:	38 c0       	rjmp	.+112    	; 0xe32 <timer_init+0x120>
     dc2:	8e 3f       	cpi	r24, 0xFE	; 254
     dc4:	2f ef       	ldi	r18, 0xFF	; 255
     dc6:	92 07       	cpc	r25, r18
     dc8:	a2 07       	cpc	r26, r18
     dca:	b1 05       	cpc	r27, r1
     dcc:	09 f1       	breq	.+66     	; 0xe10 <timer_init+0xfe>
     dce:	8f 3f       	cpi	r24, 0xFF	; 255
     dd0:	9f 4f       	sbci	r25, 0xFF	; 255
     dd2:	af 4f       	sbci	r26, 0xFF	; 255
     dd4:	b1 05       	cpc	r27, r1
     dd6:	29 f1       	breq	.+74     	; 0xe22 <timer_init+0x110>
     dd8:	2c c0       	rjmp	.+88     	; 0xe32 <timer_init+0x120>
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	89 83       	std	Y+1, r24	; 0x01
     de4:	9a 83       	std	Y+2, r25	; 0x02
     de6:	ab 83       	std	Y+3, r26	; 0x03
     de8:	bc 83       	std	Y+4, r27	; 0x04
     dea:	23 c0       	rjmp	.+70     	; 0xe32 <timer_init+0x120>
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	89 83       	std	Y+1, r24	; 0x01
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	ab 83       	std	Y+3, r26	; 0x03
     dfa:	bc 83       	std	Y+4, r27	; 0x04
     dfc:	1a c0       	rjmp	.+52     	; 0xe32 <timer_init+0x120>
     dfe:	83 e0       	ldi	r24, 0x03	; 3
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	a0 e0       	ldi	r26, 0x00	; 0
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	89 83       	std	Y+1, r24	; 0x01
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	ab 83       	std	Y+3, r26	; 0x03
     e0c:	bc 83       	std	Y+4, r27	; 0x04
     e0e:	11 c0       	rjmp	.+34     	; 0xe32 <timer_init+0x120>
     e10:	84 e0       	ldi	r24, 0x04	; 4
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	a0 e0       	ldi	r26, 0x00	; 0
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	89 83       	std	Y+1, r24	; 0x01
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	ab 83       	std	Y+3, r26	; 0x03
     e1e:	bc 83       	std	Y+4, r27	; 0x04
     e20:	08 c0       	rjmp	.+16     	; 0xe32 <timer_init+0x120>
     e22:	85 e0       	ldi	r24, 0x05	; 5
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	89 83       	std	Y+1, r24	; 0x01
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	ab 83       	std	Y+3, r26	; 0x03
     e30:	bc 83       	std	Y+4, r27	; 0x04
     e32:	49 81       	ldd	r20, Y+1	; 0x01
     e34:	5a 81       	ldd	r21, Y+2	; 0x02
     e36:	6b 81       	ldd	r22, Y+3	; 0x03
     e38:	7c 81       	ldd	r23, Y+4	; 0x04
     e3a:	76 95       	lsr	r23
     e3c:	67 95       	ror	r22
     e3e:	57 95       	ror	r21
     e40:	47 95       	ror	r20
     e42:	76 95       	lsr	r23
     e44:	67 95       	ror	r22
     e46:	57 95       	ror	r21
     e48:	47 95       	ror	r20
     e4a:	41 70       	andi	r20, 0x01	; 1
     e4c:	62 e0       	ldi	r22, 0x02	; 2
     e4e:	80 e3       	ldi	r24, 0x30	; 48
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	9d da       	rcall	.-2758   	; 0x38e <updateBit>
     e54:	49 81       	ldd	r20, Y+1	; 0x01
     e56:	5a 81       	ldd	r21, Y+2	; 0x02
     e58:	6b 81       	ldd	r22, Y+3	; 0x03
     e5a:	7c 81       	ldd	r23, Y+4	; 0x04
     e5c:	76 95       	lsr	r23
     e5e:	67 95       	ror	r22
     e60:	57 95       	ror	r21
     e62:	47 95       	ror	r20
     e64:	41 70       	andi	r20, 0x01	; 1
     e66:	61 e0       	ldi	r22, 0x01	; 1
     e68:	80 e3       	ldi	r24, 0x30	; 48
     e6a:	91 e0       	ldi	r25, 0x01	; 1
     e6c:	90 da       	rcall	.-2784   	; 0x38e <updateBit>
     e6e:	49 81       	ldd	r20, Y+1	; 0x01
     e70:	41 70       	andi	r20, 0x01	; 1
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	80 e3       	ldi	r24, 0x30	; 48
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	8a da       	rcall	.-2796   	; 0x38e <updateBit>
     e7a:	89 c0       	rjmp	.+274    	; 0xf8e <timer_init+0x27c>
     e7c:	09 3f       	cpi	r16, 0xF9	; 249
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	18 07       	cpc	r17, r24
     e82:	28 07       	cpc	r18, r24
     e84:	31 05       	cpc	r19, r1
     e86:	28 f0       	brcs	.+10     	; 0xe92 <timer_init+0x180>
     e88:	09 83       	std	Y+1, r16	; 0x01
     e8a:	1a 83       	std	Y+2, r17	; 0x02
     e8c:	2b 83       	std	Y+3, r18	; 0x03
     e8e:	3c 83       	std	Y+4, r19	; 0x04
     e90:	0f c0       	rjmp	.+30     	; 0xeb0 <timer_init+0x19e>
     e92:	ce 01       	movw	r24, r28
     e94:	01 96       	adiw	r24, 0x01	; 1
     e96:	7c 01       	movw	r14, r24
     e98:	4d 81       	ldd	r20, Y+5	; 0x05
     e9a:	5e 81       	ldd	r21, Y+6	; 0x06
     e9c:	6f 81       	ldd	r22, Y+7	; 0x07
     e9e:	78 85       	ldd	r23, Y+8	; 0x08
     ea0:	89 85       	ldd	r24, Y+9	; 0x09
     ea2:	28 dc       	rcall	.-1968   	; 0x6f4 <calculateTopRegister>
     ea4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
     ea8:	61 e0       	ldi	r22, 0x01	; 1
     eaa:	80 eb       	ldi	r24, 0xB0	; 176
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	87 da       	rcall	.-2802   	; 0x3be <setBit>
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	ab 81       	ldd	r26, Y+3	; 0x03
     eb6:	bc 81       	ldd	r27, Y+4	; 0x04
     eb8:	fc 01       	movw	r30, r24
     eba:	37 96       	adiw	r30, 0x07	; 7
     ebc:	e7 30       	cpi	r30, 0x07	; 7
     ebe:	f1 05       	cpc	r31, r1
     ec0:	08 f0       	brcs	.+2      	; 0xec4 <timer_init+0x1b2>
     ec2:	41 c0       	rjmp	.+130    	; 0xf46 <timer_init+0x234>
     ec4:	ea 5b       	subi	r30, 0xBA	; 186
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	4a c4       	rjmp	.+2196   	; 0x175e <__tablejump2__>
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	a0 e0       	ldi	r26, 0x00	; 0
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	89 83       	std	Y+1, r24	; 0x01
     ed4:	9a 83       	std	Y+2, r25	; 0x02
     ed6:	ab 83       	std	Y+3, r26	; 0x03
     ed8:	bc 83       	std	Y+4, r27	; 0x04
     eda:	35 c0       	rjmp	.+106    	; 0xf46 <timer_init+0x234>
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	a0 e0       	ldi	r26, 0x00	; 0
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	89 83       	std	Y+1, r24	; 0x01
     ee6:	9a 83       	std	Y+2, r25	; 0x02
     ee8:	ab 83       	std	Y+3, r26	; 0x03
     eea:	bc 83       	std	Y+4, r27	; 0x04
     eec:	2c c0       	rjmp	.+88     	; 0xf46 <timer_init+0x234>
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	a0 e0       	ldi	r26, 0x00	; 0
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	89 83       	std	Y+1, r24	; 0x01
     ef8:	9a 83       	std	Y+2, r25	; 0x02
     efa:	ab 83       	std	Y+3, r26	; 0x03
     efc:	bc 83       	std	Y+4, r27	; 0x04
     efe:	23 c0       	rjmp	.+70     	; 0xf46 <timer_init+0x234>
     f00:	84 e0       	ldi	r24, 0x04	; 4
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	a0 e0       	ldi	r26, 0x00	; 0
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	89 83       	std	Y+1, r24	; 0x01
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	ab 83       	std	Y+3, r26	; 0x03
     f0e:	bc 83       	std	Y+4, r27	; 0x04
     f10:	1a c0       	rjmp	.+52     	; 0xf46 <timer_init+0x234>
     f12:	85 e0       	ldi	r24, 0x05	; 5
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e0       	ldi	r26, 0x00	; 0
     f18:	b0 e0       	ldi	r27, 0x00	; 0
     f1a:	89 83       	std	Y+1, r24	; 0x01
     f1c:	9a 83       	std	Y+2, r25	; 0x02
     f1e:	ab 83       	std	Y+3, r26	; 0x03
     f20:	bc 83       	std	Y+4, r27	; 0x04
     f22:	11 c0       	rjmp	.+34     	; 0xf46 <timer_init+0x234>
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	a0 e0       	ldi	r26, 0x00	; 0
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	89 83       	std	Y+1, r24	; 0x01
     f2e:	9a 83       	std	Y+2, r25	; 0x02
     f30:	ab 83       	std	Y+3, r26	; 0x03
     f32:	bc 83       	std	Y+4, r27	; 0x04
     f34:	08 c0       	rjmp	.+16     	; 0xf46 <timer_init+0x234>
     f36:	87 e0       	ldi	r24, 0x07	; 7
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	89 83       	std	Y+1, r24	; 0x01
     f40:	9a 83       	std	Y+2, r25	; 0x02
     f42:	ab 83       	std	Y+3, r26	; 0x03
     f44:	bc 83       	std	Y+4, r27	; 0x04
     f46:	49 81       	ldd	r20, Y+1	; 0x01
     f48:	5a 81       	ldd	r21, Y+2	; 0x02
     f4a:	6b 81       	ldd	r22, Y+3	; 0x03
     f4c:	7c 81       	ldd	r23, Y+4	; 0x04
     f4e:	76 95       	lsr	r23
     f50:	67 95       	ror	r22
     f52:	57 95       	ror	r21
     f54:	47 95       	ror	r20
     f56:	76 95       	lsr	r23
     f58:	67 95       	ror	r22
     f5a:	57 95       	ror	r21
     f5c:	47 95       	ror	r20
     f5e:	41 70       	andi	r20, 0x01	; 1
     f60:	62 e0       	ldi	r22, 0x02	; 2
     f62:	81 e3       	ldi	r24, 0x31	; 49
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	13 da       	rcall	.-3034   	; 0x38e <updateBit>
     f68:	49 81       	ldd	r20, Y+1	; 0x01
     f6a:	5a 81       	ldd	r21, Y+2	; 0x02
     f6c:	6b 81       	ldd	r22, Y+3	; 0x03
     f6e:	7c 81       	ldd	r23, Y+4	; 0x04
     f70:	76 95       	lsr	r23
     f72:	67 95       	ror	r22
     f74:	57 95       	ror	r21
     f76:	47 95       	ror	r20
     f78:	41 70       	andi	r20, 0x01	; 1
     f7a:	61 e0       	ldi	r22, 0x01	; 1
     f7c:	81 e3       	ldi	r24, 0x31	; 49
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	06 da       	rcall	.-3060   	; 0x38e <updateBit>
     f82:	49 81       	ldd	r20, Y+1	; 0x01
     f84:	41 70       	andi	r20, 0x01	; 1
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	81 e3       	ldi	r24, 0x31	; 49
     f8a:	91 e0       	ldi	r25, 0x01	; 1
     f8c:	00 da       	rcall	.-3072   	; 0x38e <updateBit>
     f8e:	29 96       	adiw	r28, 0x09	; 9
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	de bf       	out	0x3e, r29	; 62
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	cd bf       	out	0x3d, r28	; 61
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	1f 91       	pop	r17
     fa0:	0f 91       	pop	r16
     fa2:	ff 90       	pop	r15
     fa4:	ef 90       	pop	r14
     fa6:	08 95       	ret

00000fa8 <timer_start>:
}

void timer_start(timer_struct_t s_timer)
{
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	00 d0       	rcall	.+0      	; 0xfae <timer_start+0x6>
     fae:	00 d0       	rcall	.+0      	; 0xfb0 <timer_start+0x8>
     fb0:	1f 92       	push	r1
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
	switch(s_timer.peripheral)
     fb6:	41 30       	cpi	r20, 0x01	; 1
     fb8:	19 f0       	breq	.+6      	; 0xfc0 <timer_start+0x18>
     fba:	42 30       	cpi	r20, 0x02	; 2
     fbc:	d1 f0       	breq	.+52     	; 0xff2 <timer_start+0x4a>
     fbe:	31 c0       	rjmp	.+98     	; 0x1022 <timer_start+0x7a>
			updateBit(&TCCR0B, CS00, (u8_timer0ClockSource & 1));
		#endif
			break;
		case TIMER1:
		#ifdef USING_TIMER1
			updateBit(&TCCR1B, CS12, (u8_timer1ClockSource >> 2) & 1);
     fc0:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <u8_timer1ClockSource>
     fc4:	42 fb       	bst	r20, 2
     fc6:	44 27       	eor	r20, r20
     fc8:	40 f9       	bld	r20, 0
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	81 e8       	ldi	r24, 0x81	; 129
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	de d9       	rcall	.-3140   	; 0x38e <updateBit>
			updateBit(&TCCR1B, CS11, (u8_timer1ClockSource >> 1) & 1);
     fd2:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <u8_timer1ClockSource>
     fd6:	46 95       	lsr	r20
     fd8:	41 70       	andi	r20, 0x01	; 1
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	81 e8       	ldi	r24, 0x81	; 129
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	d6 d9       	rcall	.-3156   	; 0x38e <updateBit>
			updateBit(&TCCR1B, CS10, (u8_timer1ClockSource & 1));
     fe2:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <u8_timer1ClockSource>
     fe6:	41 70       	andi	r20, 0x01	; 1
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	81 e8       	ldi	r24, 0x81	; 129
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	cf d9       	rcall	.-3170   	; 0x38e <updateBit>
		#endif
			break;
     ff0:	18 c0       	rjmp	.+48     	; 0x1022 <timer_start+0x7a>
		case TIMER2:
		#ifdef USING_TIMER2
			updateBit(&TCCR2B, CS22, (u8_timer2ClockSource >> 2) & 1);
     ff2:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <u8_timer2ClockSource>
     ff6:	42 fb       	bst	r20, 2
     ff8:	44 27       	eor	r20, r20
     ffa:	40 f9       	bld	r20, 0
     ffc:	62 e0       	ldi	r22, 0x02	; 2
     ffe:	81 eb       	ldi	r24, 0xB1	; 177
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	c5 d9       	rcall	.-3190   	; 0x38e <updateBit>
			updateBit(&TCCR2B, CS21, (u8_timer2ClockSource >> 1) & 1);
    1004:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <u8_timer2ClockSource>
    1008:	46 95       	lsr	r20
    100a:	41 70       	andi	r20, 0x01	; 1
    100c:	61 e0       	ldi	r22, 0x01	; 1
    100e:	81 eb       	ldi	r24, 0xB1	; 177
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	bd d9       	rcall	.-3206   	; 0x38e <updateBit>
			updateBit(&TCCR2B, CS20, (u8_timer2ClockSource & 1));
    1014:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <u8_timer2ClockSource>
    1018:	41 70       	andi	r20, 0x01	; 1
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	81 eb       	ldi	r24, 0xB1	; 177
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	b6 d9       	rcall	.-3220   	; 0x38e <updateBit>
			updateBit(&TCCR3B, CS31, (u8_timer3ClockSource >> 1) & 1);
			updateBit(&TCCR3B, CS30, (u8_timer3ClockSource & 1));
		#endif
			break;
	}
}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	df 91       	pop	r29
    102e:	cf 91       	pop	r28
    1030:	08 95       	ret

00001032 <timer_stop>:

void timer_stop(timer_struct_t s_timer)
{
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	00 d0       	rcall	.+0      	; 0x1038 <timer_stop+0x6>
    1038:	00 d0       	rcall	.+0      	; 0x103a <timer_stop+0x8>
    103a:	1f 92       	push	r1
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	49 83       	std	Y+1, r20	; 0x01
    1042:	5a 83       	std	Y+2, r21	; 0x02
    1044:	6b 83       	std	Y+3, r22	; 0x03
    1046:	7c 83       	std	Y+4, r23	; 0x04
    1048:	8d 83       	std	Y+5, r24	; 0x05
	switch(s_timer.peripheral)
    104a:	41 30       	cpi	r20, 0x01	; 1
    104c:	19 f0       	breq	.+6      	; 0x1054 <timer_stop+0x22>
    104e:	42 30       	cpi	r20, 0x02	; 2
    1050:	59 f0       	breq	.+22     	; 0x1068 <timer_stop+0x36>
    1052:	13 c0       	rjmp	.+38     	; 0x107a <timer_stop+0x48>
			TCCR0B = TCCR0B & ~(0b00000111);
		#endif
			break;
		case TIMER1:
		#ifdef USING_TIMER1
			u8_timer1ClockSource = TCCR1B & (0b00000111);
    1054:	e1 e8       	ldi	r30, 0x81	; 129
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	87 70       	andi	r24, 0x07	; 7
    105c:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <u8_timer1ClockSource>
			TCCR1B = TCCR1B & ~(0b00000111);
    1060:	80 81       	ld	r24, Z
    1062:	88 7f       	andi	r24, 0xF8	; 248
    1064:	80 83       	st	Z, r24
		#endif
			break;
    1066:	09 c0       	rjmp	.+18     	; 0x107a <timer_stop+0x48>
		case TIMER2:
		#ifdef USING_TIMER2
			u8_timer2ClockSource = TCCR2B & (0b00000111);
    1068:	e1 eb       	ldi	r30, 0xB1	; 177
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	80 81       	ld	r24, Z
    106e:	87 70       	andi	r24, 0x07	; 7
    1070:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <u8_timer2ClockSource>
			TCCR2B = TCCR2B & ~(0b00000111);
    1074:	80 81       	ld	r24, Z
    1076:	88 7f       	andi	r24, 0xF8	; 248
    1078:	80 83       	st	Z, r24
			u8_timer3ClockSource = TCCR3B & (0b00000111);
			TCCR3B = TCCR3B & ~(0b00000111);
		#endif
			break;
	}
}
    107a:	0f 90       	pop	r0
    107c:	0f 90       	pop	r0
    107e:	0f 90       	pop	r0
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <calculateUBRR>:
/************************************************************************/
/* Internal functions                                                   */
/************************************************************************/

u16 calculateUBRR(u32 u32_baudRate, bool *b_usingDoubleSpeed)
{
    108a:	4f 92       	push	r4
    108c:	5f 92       	push	r5
    108e:	6f 92       	push	r6
    1090:	7f 92       	push	r7
    1092:	8f 92       	push	r8
    1094:	9f 92       	push	r9
    1096:	af 92       	push	r10
    1098:	bf 92       	push	r11
    109a:	cf 92       	push	r12
    109c:	df 92       	push	r13
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	4b 01       	movw	r8, r22
    10a8:	5c 01       	movw	r10, r24
    10aa:	ea 01       	movw	r28, r20
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    10ac:	0f 2e       	mov	r0, r31
    10ae:	f0 e2       	ldi	r31, 0x20	; 32
    10b0:	4f 2e       	mov	r4, r31
    10b2:	f1 ea       	ldi	r31, 0xA1	; 161
    10b4:	5f 2e       	mov	r5, r31
    10b6:	f7 e0       	ldi	r31, 0x07	; 7
    10b8:	6f 2e       	mov	r6, r31
    10ba:	71 2c       	mov	r7, r1
    10bc:	f0 2d       	mov	r31, r0
    10be:	c3 01       	movw	r24, r6
    10c0:	b2 01       	movw	r22, r4
    10c2:	a5 01       	movw	r20, r10
    10c4:	94 01       	movw	r18, r8
    10c6:	29 d3       	rcall	.+1618   	; 0x171a <__udivmodsi4>
    10c8:	69 01       	movw	r12, r18
    10ca:	7a 01       	movw	r14, r20
	u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
    10cc:	c3 01       	movw	r24, r6
    10ce:	b2 01       	movw	r22, r4
    10d0:	24 d3       	rcall	.+1608   	; 0x171a <__udivmodsi4>
    10d2:	ca 01       	movw	r24, r20
    10d4:	b9 01       	movw	r22, r18
    10d6:	a5 01       	movw	r20, r10
    10d8:	94 01       	movw	r18, r8
    10da:	92 d9       	rcall	.-3292   	; 0x400 <calculateError>
    10dc:	44 97       	sbiw	r24, 0x14	; 20
    10de:	30 f4       	brcc	.+12     	; 0x10ec <calculateUBRR+0x62>
{
	u32 u32_ubrr;
	u8 u8_divisor = 16;
	u32 u32_actualBaudRate;

	u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    10e0:	d7 01       	movw	r26, r14
    10e2:	c6 01       	movw	r24, r12
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	a1 09       	sbc	r26, r1
    10e8:	b1 09       	sbc	r27, r1
    10ea:	0e c0       	rjmp	.+28     	; 0x1108 <calculateUBRR+0x7e>
	u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);

	if (calculateError(u32_actualBaudRate, u32_baudRate) >= 20)
	{
		u8_divisor = 8;
		*b_usingDoubleSpeed = TRUE;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	88 83       	st	Y, r24
		u32_ubrr = SYSTEM_CLOCK_FREQUENCY / u8_divisor / u32_baudRate - 1;
    10f0:	60 e4       	ldi	r22, 0x40	; 64
    10f2:	72 e4       	ldi	r23, 0x42	; 66
    10f4:	8f e0       	ldi	r24, 0x0F	; 15
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a5 01       	movw	r20, r10
    10fa:	94 01       	movw	r18, r8
    10fc:	0e d3       	rcall	.+1564   	; 0x171a <__udivmodsi4>
    10fe:	da 01       	movw	r26, r20
    1100:	c9 01       	movw	r24, r18
    1102:	01 97       	sbiw	r24, 0x01	; 1
    1104:	a1 09       	sbc	r26, r1
    1106:	b1 09       	sbc	r27, r1
		u32_actualBaudRate = SYSTEM_CLOCK_FREQUENCY / u8_divisor / (u32_ubrr + 1);
	}
	return u32_ubrr;
}
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	ff 90       	pop	r15
    110e:	ef 90       	pop	r14
    1110:	df 90       	pop	r13
    1112:	cf 90       	pop	r12
    1114:	bf 90       	pop	r11
    1116:	af 90       	pop	r10
    1118:	9f 90       	pop	r9
    111a:	8f 90       	pop	r8
    111c:	7f 90       	pop	r7
    111e:	6f 90       	pop	r6
    1120:	5f 90       	pop	r5
    1122:	4f 90       	pop	r4
    1124:	08 95       	ret

00001126 <__vector_20>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef UART0_INTERRUPT_MODE
ISR(USART0_RX_vect)
{
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	0b b6       	in	r0, 0x3b	; 59
    1132:	0f 92       	push	r0
    1134:	2f 93       	push	r18
    1136:	3f 93       	push	r19
    1138:	4f 93       	push	r20
    113a:	5f 93       	push	r21
    113c:	6f 93       	push	r22
    113e:	7f 93       	push	r23
    1140:	8f 93       	push	r24
    1142:	9f 93       	push	r25
    1144:	af 93       	push	r26
    1146:	bf 93       	push	r27
    1148:	ef 93       	push	r30
    114a:	ff 93       	push	r31
	if (checkBit(UCSR0B, UCSZ02) == SET)
    114c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1150:	62 e0       	ldi	r22, 0x02	; 2
    1152:	4e d9       	rcall	.-3428   	; 0x3f0 <checkBit>
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	99 f4       	brne	.+38     	; 0x117e <__vector_20+0x58>
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = ((UCSR0B & (1 << RXB80)) << 8) | UDR0;
    1158:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1162:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1166:	82 70       	andi	r24, 0x02	; 2
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	98 2f       	mov	r25, r24
    116c:	88 27       	eor	r24, r24
    116e:	82 2b       	or	r24, r18
    1170:	ee 0f       	add	r30, r30
    1172:	ff 1f       	adc	r31, r31
    1174:	e5 5c       	subi	r30, 0xC5	; 197
    1176:	fe 4f       	sbci	r31, 0xFE	; 254
    1178:	91 83       	std	Z+1, r25	; 0x01
    117a:	80 83       	st	Z, r24
    117c:	0c c0       	rjmp	.+24     	; 0x1196 <__vector_20+0x70>
	else
		au16_rx0Buffer[u8_rx0LastReceivedIndex] = UDR0;
    117e:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	ee 0f       	add	r30, r30
    118c:	ff 1f       	adc	r31, r31
    118e:	e5 5c       	subi	r30, 0xC5	; 197
    1190:	fe 4f       	sbci	r31, 0xFE	; 254
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
	if (u8_rx0LastReceivedIndex < UART_RX0_BUFFER_MAX_SIZE - 1)
    1196:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    119a:	89 30       	cpi	r24, 0x09	; 9
    119c:	30 f4       	brcc	.+12     	; 0x11aa <__vector_20+0x84>
		u8_rx0LastReceivedIndex++;
    119e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <u8_rx0LastReceivedIndex>
    11a2:	8f 5f       	subi	r24, 0xFF	; 255
    11a4:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <u8_rx0LastReceivedIndex>
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <__vector_20+0x88>
	else
		u8_rx0LastReceivedIndex = 0;
    11aa:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <u8_rx0LastReceivedIndex>
	b_rx0Available = TRUE;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <b_rx0Available>
}
    11b4:	ff 91       	pop	r31
    11b6:	ef 91       	pop	r30
    11b8:	bf 91       	pop	r27
    11ba:	af 91       	pop	r26
    11bc:	9f 91       	pop	r25
    11be:	8f 91       	pop	r24
    11c0:	7f 91       	pop	r23
    11c2:	6f 91       	pop	r22
    11c4:	5f 91       	pop	r21
    11c6:	4f 91       	pop	r20
    11c8:	3f 91       	pop	r19
    11ca:	2f 91       	pop	r18
    11cc:	0f 90       	pop	r0
    11ce:	0b be       	out	0x3b, r0	; 59
    11d0:	0f 90       	pop	r0
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	0f 90       	pop	r0
    11d6:	1f 90       	pop	r1
    11d8:	18 95       	reti

000011da <__vector_21>:

ISR(USART0_UDRE_vect)
{
    11da:	1f 92       	push	r1
    11dc:	0f 92       	push	r0
    11de:	0f b6       	in	r0, 0x3f	; 63
    11e0:	0f 92       	push	r0
    11e2:	11 24       	eor	r1, r1
    11e4:	0b b6       	in	r0, 0x3b	; 59
    11e6:	0f 92       	push	r0
    11e8:	2f 93       	push	r18
    11ea:	3f 93       	push	r19
    11ec:	4f 93       	push	r20
    11ee:	5f 93       	push	r21
    11f0:	6f 93       	push	r22
    11f2:	7f 93       	push	r23
    11f4:	8f 93       	push	r24
    11f6:	9f 93       	push	r25
    11f8:	af 93       	push	r26
    11fa:	bf 93       	push	r27
    11fc:	ef 93       	push	r30
    11fe:	ff 93       	push	r31
	if (u8_tx0LastTransmittedIndex != u8_tx0LastRequestedIndex)
    1200:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    1204:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <u8_tx0LastRequestedIndex>
    1208:	98 17       	cp	r25, r24
    120a:	69 f1       	breq	.+90     	; 0x1266 <__vector_21+0x8c>
	{
		if (checkBit(UCSR0B, UCSZ02) == SET)
    120c:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1210:	62 e0       	ldi	r22, 0x02	; 2
    1212:	ee d8       	rcall	.-3620   	; 0x3f0 <checkBit>
    1214:	81 30       	cpi	r24, 0x01	; 1
    1216:	79 f4       	brne	.+30     	; 0x1236 <__vector_21+0x5c>
			UCSR0B |= (u8) (((au16_tx0Buffer[u8_tx0LastTransmittedIndex] >> 8) & 1) << TXB80);
    1218:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	ee 0f       	add	r30, r30
    1220:	ff 1f       	adc	r31, r31
    1222:	ef 5a       	subi	r30, 0xAF	; 175
    1224:	fe 4f       	sbci	r31, 0xFE	; 254
    1226:	80 81       	ld	r24, Z
    1228:	91 81       	ldd	r25, Z+1	; 0x01
    122a:	e1 ec       	ldi	r30, 0xC1	; 193
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	91 70       	andi	r25, 0x01	; 1
    1232:	89 2b       	or	r24, r25
    1234:	80 83       	st	Z, r24
		UDR0 = (u8) au16_tx0Buffer[u8_tx0LastTransmittedIndex];
    1236:	e0 91 39 01 	lds	r30, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	ee 0f       	add	r30, r30
    123e:	ff 1f       	adc	r31, r31
    1240:	ef 5a       	subi	r30, 0xAF	; 175
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	80 81       	ld	r24, Z
    1246:	91 81       	ldd	r25, Z+1	; 0x01
    1248:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    124c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    1250:	89 30       	cpi	r24, 0x09	; 9
    1252:	30 f4       	brcc	.+12     	; 0x1260 <__vector_21+0x86>
			u8_tx0LastTransmittedIndex++;
    1254:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <u8_tx0LastTransmittedIndex>
    1258:	8f 5f       	subi	r24, 0xFF	; 255
    125a:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <u8_tx0LastTransmittedIndex>
    125e:	07 c0       	rjmp	.+14     	; 0x126e <__vector_21+0x94>
		else
			u8_tx0LastTransmittedIndex = 0;
    1260:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <u8_tx0LastTransmittedIndex>
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__vector_21+0x94>
	}
	else
		clearBit(&UCSR0B, UDRIE0);
    1266:	65 e0       	ldi	r22, 0x05	; 5
    1268:	81 ec       	ldi	r24, 0xC1	; 193
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	b4 d8       	rcall	.-3736   	; 0x3d6 <clearBit>
}
    126e:	ff 91       	pop	r31
    1270:	ef 91       	pop	r30
    1272:	bf 91       	pop	r27
    1274:	af 91       	pop	r26
    1276:	9f 91       	pop	r25
    1278:	8f 91       	pop	r24
    127a:	7f 91       	pop	r23
    127c:	6f 91       	pop	r22
    127e:	5f 91       	pop	r21
    1280:	4f 91       	pop	r20
    1282:	3f 91       	pop	r19
    1284:	2f 91       	pop	r18
    1286:	0f 90       	pop	r0
    1288:	0b be       	out	0x3b, r0	; 59
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	1f 90       	pop	r1
    1292:	18 95       	reti

00001294 <__vector_22>:

ISR(USART0_TX_vect)
{
    1294:	1f 92       	push	r1
    1296:	0f 92       	push	r0
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	0f 92       	push	r0
    129c:	11 24       	eor	r1, r1
    129e:	0b b6       	in	r0, 0x3b	; 59
    12a0:	0f 92       	push	r0
    12a2:	8f 93       	push	r24
    12a4:	9f 93       	push	r25
    12a6:	ef 93       	push	r30
    12a8:	ff 93       	push	r31
    12aa:	80 e0       	ldi	r24, 0x00	; 0
    12ac:	90 e0       	ldi	r25, 0x00	; 0
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
		au16_tx0Buffer[i] = 0;
    12ae:	fc 01       	movw	r30, r24
    12b0:	ee 0f       	add	r30, r30
    12b2:	ff 1f       	adc	r31, r31
    12b4:	ef 5a       	subi	r30, 0xAF	; 175
    12b6:	fe 4f       	sbci	r31, 0xFE	; 254
    12b8:	11 82       	std	Z+1, r1	; 0x01
    12ba:	10 82       	st	Z, r1
    12bc:	01 96       	adiw	r24, 0x01	; 1
}

ISR(USART0_TX_vect)
{
	u8 i;
	for (i = 0; i < UART_TX0_BUFFER_MAX_SIZE; i++)
    12be:	8a 30       	cpi	r24, 0x0A	; 10
    12c0:	91 05       	cpc	r25, r1
    12c2:	a9 f7       	brne	.-22     	; 0x12ae <__vector_22+0x1a>
		au16_tx0Buffer[i] = 0;
	u8_tx0LastTransmittedIndex = 0;
    12c4:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <u8_tx0LastTransmittedIndex>
	u8_tx0LastRequestedIndex = 0;
    12c8:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <u8_tx0LastRequestedIndex>
}
    12cc:	ff 91       	pop	r31
    12ce:	ef 91       	pop	r30
    12d0:	9f 91       	pop	r25
    12d2:	8f 91       	pop	r24
    12d4:	0f 90       	pop	r0
    12d6:	0b be       	out	0x3b, r0	; 59
    12d8:	0f 90       	pop	r0
    12da:	0f be       	out	0x3f, r0	; 63
    12dc:	0f 90       	pop	r0
    12de:	1f 90       	pop	r1
    12e0:	18 95       	reti

000012e2 <uart_init>:
/************************************************************************/
/* Exported functions                                                   */
/************************************************************************/

void uart_init(uart_struct_t s_uart)
{
    12e2:	0f 93       	push	r16
    12e4:	1f 93       	push	r17
    12e6:	cf 93       	push	r28
    12e8:	df 93       	push	r29
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	2b 97       	sbiw	r28, 0x0b	; 11
    12f0:	0f b6       	in	r0, 0x3f	; 63
    12f2:	f8 94       	cli
    12f4:	de bf       	out	0x3e, r29	; 62
    12f6:	0f be       	out	0x3f, r0	; 63
    12f8:	cd bf       	out	0x3d, r28	; 61
    12fa:	0a 83       	std	Y+2, r16	; 0x02
    12fc:	1b 83       	std	Y+3, r17	; 0x03
    12fe:	2c 83       	std	Y+4, r18	; 0x04
    1300:	3d 83       	std	Y+5, r19	; 0x05
    1302:	4e 83       	std	Y+6, r20	; 0x06
    1304:	5f 83       	std	Y+7, r21	; 0x07
    1306:	68 87       	std	Y+8, r22	; 0x08
    1308:	79 87       	std	Y+9, r23	; 0x09
    130a:	8a 87       	std	Y+10, r24	; 0x0a
    130c:	9b 87       	std	Y+11, r25	; 0x0b
	u16 u16_ubrr;
	bool b_usingDoubleSpeed = FALSE;
    130e:	19 82       	std	Y+1, r1	; 0x01

	switch (s_uart.peripheral)
    1310:	01 11       	cpse	r16, r1
    1312:	a1 c0       	rjmp	.+322    	; 0x1456 <uart_init+0x174>
    1314:	19 2f       	mov	r17, r25
	{
	case UART0:
	#ifdef USING_UART0
		/* Set asynchronous mode */
		UCSR0C &= ~(0b11 << UMSEL00);
    1316:	e2 ec       	ldi	r30, 0xC2	; 194
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8f 73       	andi	r24, 0x3F	; 63
    131e:	80 83       	st	Z, r24
		/* Set baud rate */
		u16_ubrr = calculateUBRR(s_uart.baudRate, &b_usingDoubleSpeed);
    1320:	6b 81       	ldd	r22, Y+3	; 0x03
    1322:	7c 81       	ldd	r23, Y+4	; 0x04
    1324:	8d 81       	ldd	r24, Y+5	; 0x05
    1326:	9e 81       	ldd	r25, Y+6	; 0x06
    1328:	ae 01       	movw	r20, r28
    132a:	4f 5f       	subi	r20, 0xFF	; 255
    132c:	5f 4f       	sbci	r21, 0xFF	; 255
    132e:	ad de       	rcall	.-678    	; 0x108a <calculateUBRR>
		UBRR0 = u16_ubrr;
    1330:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    1334:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
		updateBit(&UCSR0A, U2X0, b_usingDoubleSpeed);
    1338:	49 81       	ldd	r20, Y+1	; 0x01
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	80 ec       	ldi	r24, 0xC0	; 192
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	26 d8       	rcall	.-4020   	; 0x38e <updateBit>
		/* Set frame size */
		switch (s_uart.frameSize)
    1342:	89 85       	ldd	r24, Y+9	; 0x09
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	31 f1       	breq	.+76     	; 0x1394 <uart_init+0xb2>
    1348:	28 f4       	brcc	.+10     	; 0x1354 <uart_init+0x72>
    134a:	88 23       	and	r24, r24
    134c:	49 f0       	breq	.+18     	; 0x1360 <uart_init+0x7e>
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	a1 f0       	breq	.+40     	; 0x137a <uart_init+0x98>
    1352:	49 c0       	rjmp	.+146    	; 0x13e6 <uart_init+0x104>
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	59 f1       	breq	.+86     	; 0x13ae <uart_init+0xcc>
    1358:	84 30       	cpi	r24, 0x04	; 4
    135a:	09 f4       	brne	.+2      	; 0x135e <uart_init+0x7c>
    135c:	35 c0       	rjmp	.+106    	; 0x13c8 <uart_init+0xe6>
    135e:	43 c0       	rjmp	.+134    	; 0x13e6 <uart_init+0x104>
		{
			case _5BIT:
				clearBit(&UCSR0C, UCSZ00);
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	82 ec       	ldi	r24, 0xC2	; 194
    1364:	90 e0       	ldi	r25, 0x00	; 0
				clearBit(&UCSR0C, UCSZ01);
    1366:	37 d8       	rcall	.-3986   	; 0x3d6 <clearBit>
    1368:	62 e0       	ldi	r22, 0x02	; 2
    136a:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	33 d8       	rcall	.-3994   	; 0x3d6 <clearBit>
    1370:	62 e0       	ldi	r22, 0x02	; 2
    1372:	81 ec       	ldi	r24, 0xC1	; 193
				break;
    1374:	90 e0       	ldi	r25, 0x00	; 0
			case _6BIT:
				setBit(&UCSR0C, UCSZ00);
    1376:	2f d8       	rcall	.-4002   	; 0x3d6 <clearBit>
    1378:	36 c0       	rjmp	.+108    	; 0x13e6 <uart_init+0x104>
    137a:	61 e0       	ldi	r22, 0x01	; 1
    137c:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0C, UCSZ01);
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	1e d8       	rcall	.-4036   	; 0x3be <setBit>
    1382:	62 e0       	ldi	r22, 0x02	; 2
    1384:	82 ec       	ldi	r24, 0xC2	; 194
				clearBit(&UCSR0B, UCSZ02);
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	26 d8       	rcall	.-4020   	; 0x3d6 <clearBit>
    138a:	62 e0       	ldi	r22, 0x02	; 2
				break;
			case _7BIT:
				clearBit(&UCSR0C, UCSZ00);
    138c:	81 ec       	ldi	r24, 0xC1	; 193
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	22 d8       	rcall	.-4028   	; 0x3d6 <clearBit>
    1392:	29 c0       	rjmp	.+82     	; 0x13e6 <uart_init+0x104>
				setBit(&UCSR0C, UCSZ01);
    1394:	61 e0       	ldi	r22, 0x01	; 1
    1396:	82 ec       	ldi	r24, 0xC2	; 194
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	1d d8       	rcall	.-4038   	; 0x3d6 <clearBit>
				clearBit(&UCSR0B, UCSZ02);
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	82 ec       	ldi	r24, 0xC2	; 194
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0d d8       	rcall	.-4070   	; 0x3be <setBit>
				break;
    13a4:	62 e0       	ldi	r22, 0x02	; 2
			case _8BIT:
				setBit(&UCSR0C, UCSZ00);
    13a6:	81 ec       	ldi	r24, 0xC1	; 193
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	15 d8       	rcall	.-4054   	; 0x3d6 <clearBit>
    13ac:	1c c0       	rjmp	.+56     	; 0x13e6 <uart_init+0x104>
				setBit(&UCSR0C, UCSZ01);
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	82 ec       	ldi	r24, 0xC2	; 194
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	04 d8       	rcall	.-4088   	; 0x3be <setBit>
    13b6:	62 e0       	ldi	r22, 0x02	; 2
				clearBit(&UCSR0B, UCSZ02);
    13b8:	82 ec       	ldi	r24, 0xC2	; 194
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	00 d8       	rcall	.-4096   	; 0x3be <setBit>
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	81 ec       	ldi	r24, 0xC1	; 193
				break;
    13c2:	90 e0       	ldi	r25, 0x00	; 0
			case _9BIT:
				setBit(&UCSR0C, UCSZ00);
    13c4:	08 d8       	rcall	.-4080   	; 0x3d6 <clearBit>
    13c6:	0f c0       	rjmp	.+30     	; 0x13e6 <uart_init+0x104>
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	82 ec       	ldi	r24, 0xC2	; 194
    13cc:	90 e0       	ldi	r25, 0x00	; 0
				setBit(&UCSR0C, UCSZ01);
    13ce:	0e 94 df 01 	call	0x3be	; 0x3be <setBit>
    13d2:	62 e0       	ldi	r22, 0x02	; 2
    13d4:	82 ec       	ldi	r24, 0xC2	; 194
    13d6:	90 e0       	ldi	r25, 0x00	; 0
				setBit(&UCSR0B, UCSZ02);
    13d8:	0e 94 df 01 	call	0x3be	; 0x3be <setBit>
    13dc:	62 e0       	ldi	r22, 0x02	; 2
    13de:	81 ec       	ldi	r24, 0xC1	; 193
    13e0:	90 e0       	ldi	r25, 0x00	; 0
				break;
		}
		/* Set number of stop bits */
		updateBit(&UCSR0C, USBS0, s_uart.stopBits);
    13e2:	0e 94 df 01 	call	0x3be	; 0x3be <setBit>
    13e6:	4a 85       	ldd	r20, Y+10	; 0x0a
    13e8:	63 e0       	ldi	r22, 0x03	; 3
    13ea:	82 ec       	ldi	r24, 0xC2	; 194
    13ec:	90 e0       	ldi	r25, 0x00	; 0
		/* Set parity check */
		if (s_uart.parityBit == NONE)
    13ee:	0e 94 c7 01 	call	0x38e	; 0x38e <updateBit>
			UCSR0C &= ~(0b11 << UPM00);
    13f2:	12 30       	cpi	r17, 0x02	; 2
    13f4:	31 f4       	brne	.+12     	; 0x1402 <uart_init+0x120>
    13f6:	e2 ec       	ldi	r30, 0xC2	; 194
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	8f 7c       	andi	r24, 0xCF	; 207
		else
		{
			setBit(&UCSR0C, UPM01);
    13fe:	80 83       	st	Z, r24
    1400:	0b c0       	rjmp	.+22     	; 0x1418 <uart_init+0x136>
    1402:	65 e0       	ldi	r22, 0x05	; 5
    1404:	82 ec       	ldi	r24, 0xC2	; 194
    1406:	90 e0       	ldi	r25, 0x00	; 0
			updateBit(&UCSR0C, UPM00, s_uart.parityBit);
    1408:	0e 94 df 01 	call	0x3be	; 0x3be <setBit>
    140c:	41 2f       	mov	r20, r17
    140e:	64 e0       	ldi	r22, 0x04	; 4
    1410:	82 ec       	ldi	r24, 0xC2	; 194
    1412:	90 e0       	ldi	r25, 0x00	; 0
		}
	#ifdef UART0_INTERRUPT_MODE
		/* Set interrupts */
		if (s_uart.useRx)
    1414:	0e 94 c7 01 	call	0x38e	; 0x38e <updateBit>
    1418:	8f 81       	ldd	r24, Y+7	; 0x07
		{
			u8_rx0LastProcessedIndex = 0;
    141a:	88 23       	and	r24, r24
    141c:	59 f0       	breq	.+22     	; 0x1434 <uart_init+0x152>
			u8_rx0LastReceivedIndex = 0;
    141e:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <u8_rx0LastProcessedIndex>
			b_rx0Available = FALSE;
    1422:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <u8_rx0LastReceivedIndex>
			setBit(&UCSR0B, RXCIE0);
    1426:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <b_rx0Available>
    142a:	67 e0       	ldi	r22, 0x07	; 7
    142c:	81 ec       	ldi	r24, 0xC1	; 193
    142e:	90 e0       	ldi	r25, 0x00	; 0
		}
		if (s_uart.useTx)
    1430:	0e 94 df 01 	call	0x3be	; 0x3be <setBit>
    1434:	88 85       	ldd	r24, Y+8	; 0x08
		{
			u8_tx0LastRequestedIndex = 0;
    1436:	88 23       	and	r24, r24
    1438:	71 f0       	breq	.+28     	; 0x1456 <uart_init+0x174>
			u8_tx0LastTransmittedIndex = 0;
    143a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <u8_tx0LastRequestedIndex>
			setBit(&UCSR0B, TXCIE0);
    143e:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <u8_tx0LastTransmittedIndex>
    1442:	66 e0       	ldi	r22, 0x06	; 6
    1444:	81 ec       	ldi	r24, 0xC1	; 193
    1446:	90 e0       	ldi	r25, 0x00	; 0
			setBit(&UCSR0B, UDRIE0);
    1448:	0e 94 df 01 	call	0x3be	; 0x3be <setBit>
    144c:	65 e0       	ldi	r22, 0x05	; 5
    144e:	81 ec       	ldi	r24, 0xC1	; 193
    1450:	90 e0       	ldi	r25, 0x00	; 0
		}
	#endif
#endif
		break;
	}
}
    1452:	0e 94 df 01 	call	0x3be	; 0x3be <setBit>
    1456:	2b 96       	adiw	r28, 0x0b	; 11
    1458:	0f b6       	in	r0, 0x3f	; 63
    145a:	f8 94       	cli
    145c:	de bf       	out	0x3e, r29	; 62
    145e:	0f be       	out	0x3f, r0	; 63
    1460:	cd bf       	out	0x3d, r28	; 61
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	08 95       	ret

0000146c <uart_start>:

void uart_start(uart_struct_t s_uart)
{
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	2a 97       	sbiw	r28, 0x0a	; 10
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	6f 83       	std	Y+7, r22	; 0x07
	switch (s_uart.peripheral)
    1486:	01 11       	cpse	r16, r1
    1488:	0c c0       	rjmp	.+24     	; 0x14a2 <uart_start+0x36>
	{
		case UART0:
		#ifdef USING_UART0
			updateBit(&UCSR0B, RXEN0, s_uart.useRx);
    148a:	45 2f       	mov	r20, r21
    148c:	64 e0       	ldi	r22, 0x04	; 4
    148e:	81 ec       	ldi	r24, 0xC1	; 193
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 c7 01 	call	0x38e	; 0x38e <updateBit>
			updateBit(&UCSR0B, TXEN0, s_uart.useTx);
    1496:	4f 81       	ldd	r20, Y+7	; 0x07
    1498:	63 e0       	ldi	r22, 0x03	; 3
    149a:	81 ec       	ldi	r24, 0xC1	; 193
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	0e 94 c7 01 	call	0x38e	; 0x38e <updateBit>
			updateBit(&UCSR1B, RXEN1, s_uart.useRx);
			updateBit(&UCSR1B, TXEN1, s_uart.useTx);
		#endif
			break;
	}
}
    14a2:	2a 96       	adiw	r28, 0x0a	; 10
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	de bf       	out	0x3e, r29	; 62
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	cd bf       	out	0x3d, r28	; 61
    14ae:	df 91       	pop	r29
    14b0:	cf 91       	pop	r28
    14b2:	1f 91       	pop	r17
    14b4:	0f 91       	pop	r16
    14b6:	08 95       	ret

000014b8 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    14b8:	1f 92       	push	r1
    14ba:	0f 92       	push	r0
    14bc:	0f b6       	in	r0, 0x3f	; 63
    14be:	0f 92       	push	r0
    14c0:	11 24       	eor	r1, r1
    14c2:	0b b6       	in	r0, 0x3b	; 59
    14c4:	0f 92       	push	r0
    14c6:	2f 93       	push	r18
    14c8:	3f 93       	push	r19
    14ca:	4f 93       	push	r20
    14cc:	5f 93       	push	r21
    14ce:	6f 93       	push	r22
    14d0:	7f 93       	push	r23
    14d2:	8f 93       	push	r24
    14d4:	9f 93       	push	r25
    14d6:	af 93       	push	r26
    14d8:	bf 93       	push	r27
    14da:	ef 93       	push	r30
    14dc:	ff 93       	push	r31
	p_wdgCallback();
    14de:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <p_wdgCallback>
    14e2:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <p_wdgCallback+0x1>
    14e6:	09 95       	icall
}
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	bf 91       	pop	r27
    14ee:	af 91       	pop	r26
    14f0:	9f 91       	pop	r25
    14f2:	8f 91       	pop	r24
    14f4:	7f 91       	pop	r23
    14f6:	6f 91       	pop	r22
    14f8:	5f 91       	pop	r21
    14fa:	4f 91       	pop	r20
    14fc:	3f 91       	pop	r19
    14fe:	2f 91       	pop	r18
    1500:	0f 90       	pop	r0
    1502:	0b be       	out	0x3b, r0	; 59
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <motor_init>:
	return 0.91*speed;
}


void motor_init(){
	motorEnable.direction = OUTPUT;
    150e:	eb e6       	ldi	r30, 0x6B	; 107
    1510:	f1 e0       	ldi	r31, 0x01	; 1
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	82 83       	std	Z+2, r24	; 0x02
	motorEnable.port = PD;
    1516:	93 e0       	ldi	r25, 0x03	; 3
    1518:	90 83       	st	Z, r25
	motorEnable.number = 2;
    151a:	22 e0       	ldi	r18, 0x02	; 2
    151c:	21 83       	std	Z+1, r18	; 0x01
	motorEnable.pullUp = NO_PULL;
    151e:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionA.direction = OUTPUT;
    1520:	e7 e6       	ldi	r30, 0x67	; 103
    1522:	f1 e0       	ldi	r31, 0x01	; 1
    1524:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionA.port = PD;
    1526:	90 83       	st	Z, r25
	motorDirectionA.number = 6;
    1528:	26 e0       	ldi	r18, 0x06	; 6
    152a:	21 83       	std	Z+1, r18	; 0x01
	motorDirectionA.pullUp = NO_PULL;
    152c:	13 82       	std	Z+3, r1	; 0x03
	
	motorDirectionB.direction = OUTPUT;
    152e:	ef e6       	ldi	r30, 0x6F	; 111
    1530:	f1 e0       	ldi	r31, 0x01	; 1
    1532:	82 83       	std	Z+2, r24	; 0x02
	motorDirectionB.port = PD;
    1534:	90 83       	st	Z, r25
	motorDirectionB.number = 3;
    1536:	91 83       	std	Z+1, r25	; 0x01
	motorDirectionB.pullUp = NO_PULL;
    1538:	13 82       	std	Z+3, r1	; 0x03
	
	motorTimer.frequency = 20000;
    153a:	e3 e7       	ldi	r30, 0x73	; 115
    153c:	f1 e0       	ldi	r31, 0x01	; 1
    153e:	40 e2       	ldi	r20, 0x20	; 32
    1540:	5e e4       	ldi	r21, 0x4E	; 78
    1542:	60 e0       	ldi	r22, 0x00	; 0
    1544:	70 e0       	ldi	r23, 0x00	; 0
    1546:	41 83       	std	Z+1, r20	; 0x01
    1548:	52 83       	std	Z+2, r21	; 0x02
    154a:	63 83       	std	Z+3, r22	; 0x03
    154c:	74 83       	std	Z+4, r23	; 0x04
	motorTimer.peripheral = TIMER1;
    154e:	80 83       	st	Z, r24
	
	motorPWM.base = motorTimer;
    1550:	95 e0       	ldi	r25, 0x05	; 5
    1552:	a8 e7       	ldi	r26, 0x78	; 120
    1554:	b1 e0       	ldi	r27, 0x01	; 1
    1556:	01 90       	ld	r0, Z+
    1558:	0d 92       	st	X+, r0
    155a:	9a 95       	dec	r25
    155c:	e1 f7       	brne	.-8      	; 0x1556 <motor_init+0x48>
	motorPWM.signalType = DUTY_CYCLE_VARIABLE;
    155e:	e8 e7       	ldi	r30, 0x78	; 120
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	15 82       	std	Z+5, r1	; 0x05
	motorPWM.mode = FAST_PWM;
    1564:	16 82       	std	Z+6, r1	; 0x06
	motorPWM.channelA.enabled = TRUE;
    1566:	87 83       	std	Z+7, r24	; 0x07
	motorPWM.channelA.invertedOutput = FALSE;
    1568:	10 86       	std	Z+8, r1	; 0x08
	motorPWM.channelB.enabled = TRUE;
    156a:	81 87       	std	Z+9, r24	; 0x09
	motorPWM.channelB.invertedOutput = FALSE;
    156c:	12 86       	std	Z+10, r1	; 0x0a
	
	gpio_init(motorEnable);
    156e:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorEnable>
    1572:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorEnable+0x1>
    1576:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorEnable+0x2>
    157a:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <motorEnable+0x3>
    157e:	0e 94 1f 01 	call	0x23e	; 0x23e <gpio_init>
	gpio_init(motorDirectionA);
    1582:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <motorDirectionA>
    1586:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <motorDirectionA+0x1>
    158a:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <motorDirectionA+0x2>
    158e:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <motorDirectionA+0x3>
    1592:	0e 94 1f 01 	call	0x23e	; 0x23e <gpio_init>
	gpio_init(motorDirectionB);
    1596:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <motorDirectionB>
    159a:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <motorDirectionB+0x1>
    159e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <motorDirectionB+0x2>
    15a2:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <motorDirectionB+0x3>
    15a6:	0e 94 1f 01 	call	0x23e	; 0x23e <gpio_init>
	timer_init(motorTimer);
    15aa:	40 91 73 01 	lds	r20, 0x0173	; 0x800173 <motorTimer>
    15ae:	50 91 74 01 	lds	r21, 0x0174	; 0x800174 <motorTimer+0x1>
    15b2:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <motorTimer+0x2>
    15b6:	70 91 76 01 	lds	r23, 0x0176	; 0x800176 <motorTimer+0x3>
    15ba:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <motorTimer+0x4>
    15be:	a9 db       	rcall	.-2222   	; 0xd12 <timer_init>
	pwm_init(&motorPWM);
    15c0:	88 e7       	ldi	r24, 0x78	; 120
    15c2:	91 e0       	ldi	r25, 0x01	; 1
    15c4:	0c 94 2c 02 	jmp	0x458	; 0x458 <pwm_init>
    15c8:	08 95       	ret

000015ca <motor_start>:
}

void motor_start(){
    15ca:	af 92       	push	r10
    15cc:	cf 92       	push	r12
    15ce:	ef 92       	push	r14
    15d0:	ff 92       	push	r15
    15d2:	0f 93       	push	r16
    15d4:	1f 93       	push	r17
    15d6:	cf 93       	push	r28
	gpio_out_reset(motorDirectionA);
    15d8:	60 91 67 01 	lds	r22, 0x0167	; 0x800167 <motorDirectionA>
    15dc:	70 91 68 01 	lds	r23, 0x0168	; 0x800168 <motorDirectionA+0x1>
    15e0:	80 91 69 01 	lds	r24, 0x0169	; 0x800169 <motorDirectionA+0x2>
    15e4:	90 91 6a 01 	lds	r25, 0x016A	; 0x80016a <motorDirectionA+0x3>
    15e8:	0e 94 ab 01 	call	0x356	; 0x356 <gpio_out_reset>
	gpio_out_reset(motorDirectionB);
    15ec:	60 91 6f 01 	lds	r22, 0x016F	; 0x80016f <motorDirectionB>
    15f0:	70 91 70 01 	lds	r23, 0x0170	; 0x800170 <motorDirectionB+0x1>
    15f4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <motorDirectionB+0x2>
    15f8:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <motorDirectionB+0x3>
    15fc:	0e 94 ab 01 	call	0x356	; 0x356 <gpio_out_reset>
	gpio_out_set(motorEnable);
    1600:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorEnable>
    1604:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorEnable+0x1>
    1608:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorEnable+0x2>
    160c:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <motorEnable+0x3>
    1610:	0e 94 8f 01 	call	0x31e	; 0x31e <gpio_out_set>
	
	pwm_start(motorPWM);
    1614:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    1618:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    161c:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    1620:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    1624:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    1628:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    162c:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    1630:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    1634:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    1638:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    163c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    1640:	0e 94 9e 02 	call	0x53c	; 0x53c <pwm_start>
	for(u8 i = 0; i <= 30; i += 10){
    1644:	c0 e0       	ldi	r28, 0x00	; 0
		pwm_setDutyCycle(motorPWM, CHANNEL_A, i);
    1646:	ac 2e       	mov	r10, r28
    1648:	c1 2c       	mov	r12, r1
    164a:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    164e:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    1652:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    1656:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    165a:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    165e:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    1662:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    1666:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    166a:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    166e:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    1672:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    1676:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pwm_setDutyCycle>
		pwm_setDutyCycle(motorPWM, CHANNEL_B, i);
    167a:	cc 24       	eor	r12, r12
    167c:	c3 94       	inc	r12
    167e:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    1682:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    1686:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    168a:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    168e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    1692:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    1696:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    169a:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    169e:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    16a2:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    16a6:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    16aa:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <pwm_setDutyCycle>
	gpio_out_reset(motorDirectionA);
	gpio_out_reset(motorDirectionB);
	gpio_out_set(motorEnable);
	
	pwm_start(motorPWM);
	for(u8 i = 0; i <= 30; i += 10){
    16ae:	c6 5f       	subi	r28, 0xF6	; 246
    16b0:	c8 32       	cpi	r28, 0x28	; 40
    16b2:	49 f6       	brne	.-110    	; 0x1646 <motor_start+0x7c>
		pwm_setDutyCycle(motorPWM, CHANNEL_A, i);
		pwm_setDutyCycle(motorPWM, CHANNEL_B, i);
	}
	
}
    16b4:	cf 91       	pop	r28
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	cf 90       	pop	r12
    16c0:	af 90       	pop	r10
    16c2:	08 95       	ret

000016c4 <motor_stop>:

void motor_stop(){
    16c4:	ef 92       	push	r14
    16c6:	ff 92       	push	r15
    16c8:	0f 93       	push	r16
    16ca:	1f 93       	push	r17
	pwm_stop(motorPWM);
    16cc:	e0 90 78 01 	lds	r14, 0x0178	; 0x800178 <motorPWM>
    16d0:	f0 90 79 01 	lds	r15, 0x0179	; 0x800179 <motorPWM+0x1>
    16d4:	00 91 7a 01 	lds	r16, 0x017A	; 0x80017a <motorPWM+0x2>
    16d8:	10 91 7b 01 	lds	r17, 0x017B	; 0x80017b <motorPWM+0x3>
    16dc:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <motorPWM+0x4>
    16e0:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <motorPWM+0x5>
    16e4:	40 91 7e 01 	lds	r20, 0x017E	; 0x80017e <motorPWM+0x6>
    16e8:	50 91 7f 01 	lds	r21, 0x017F	; 0x80017f <motorPWM+0x7>
    16ec:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <motorPWM+0x8>
    16f0:	70 91 81 01 	lds	r23, 0x0181	; 0x800181 <motorPWM+0x9>
    16f4:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <motorPWM+0xa>
    16f8:	0e 94 bf 02 	call	0x57e	; 0x57e <pwm_stop>
	gpio_out_reset(motorEnable);
    16fc:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorEnable>
    1700:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorEnable+0x1>
    1704:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorEnable+0x2>
    1708:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <motorEnable+0x3>
    170c:	0e 94 ab 01 	call	0x356	; 0x356 <gpio_out_reset>
}
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	08 95       	ret

0000171a <__udivmodsi4>:
    171a:	a1 e2       	ldi	r26, 0x21	; 33
    171c:	1a 2e       	mov	r1, r26
    171e:	aa 1b       	sub	r26, r26
    1720:	bb 1b       	sub	r27, r27
    1722:	fd 01       	movw	r30, r26
    1724:	0d c0       	rjmp	.+26     	; 0x1740 <__udivmodsi4_ep>

00001726 <__udivmodsi4_loop>:
    1726:	aa 1f       	adc	r26, r26
    1728:	bb 1f       	adc	r27, r27
    172a:	ee 1f       	adc	r30, r30
    172c:	ff 1f       	adc	r31, r31
    172e:	a2 17       	cp	r26, r18
    1730:	b3 07       	cpc	r27, r19
    1732:	e4 07       	cpc	r30, r20
    1734:	f5 07       	cpc	r31, r21
    1736:	20 f0       	brcs	.+8      	; 0x1740 <__udivmodsi4_ep>
    1738:	a2 1b       	sub	r26, r18
    173a:	b3 0b       	sbc	r27, r19
    173c:	e4 0b       	sbc	r30, r20
    173e:	f5 0b       	sbc	r31, r21

00001740 <__udivmodsi4_ep>:
    1740:	66 1f       	adc	r22, r22
    1742:	77 1f       	adc	r23, r23
    1744:	88 1f       	adc	r24, r24
    1746:	99 1f       	adc	r25, r25
    1748:	1a 94       	dec	r1
    174a:	69 f7       	brne	.-38     	; 0x1726 <__udivmodsi4_loop>
    174c:	60 95       	com	r22
    174e:	70 95       	com	r23
    1750:	80 95       	com	r24
    1752:	90 95       	com	r25
    1754:	9b 01       	movw	r18, r22
    1756:	ac 01       	movw	r20, r24
    1758:	bd 01       	movw	r22, r26
    175a:	cf 01       	movw	r24, r30
    175c:	08 95       	ret

0000175e <__tablejump2__>:
    175e:	ee 0f       	add	r30, r30
    1760:	ff 1f       	adc	r31, r31
    1762:	00 24       	eor	r0, r0
    1764:	00 1c       	adc	r0, r0
    1766:	0b be       	out	0x3b, r0	; 59
    1768:	07 90       	elpm	r0, Z+
    176a:	f6 91       	elpm	r31, Z
    176c:	e0 2d       	mov	r30, r0
    176e:	09 94       	ijmp

00001770 <__umulhisi3>:
    1770:	a2 9f       	mul	r26, r18
    1772:	b0 01       	movw	r22, r0
    1774:	b3 9f       	mul	r27, r19
    1776:	c0 01       	movw	r24, r0
    1778:	a3 9f       	mul	r26, r19
    177a:	70 0d       	add	r23, r0
    177c:	81 1d       	adc	r24, r1
    177e:	11 24       	eor	r1, r1
    1780:	91 1d       	adc	r25, r1
    1782:	b2 9f       	mul	r27, r18
    1784:	70 0d       	add	r23, r0
    1786:	81 1d       	adc	r24, r1
    1788:	11 24       	eor	r1, r1
    178a:	91 1d       	adc	r25, r1
    178c:	08 95       	ret

0000178e <__muluhisi3>:
    178e:	f0 df       	rcall	.-32     	; 0x1770 <__umulhisi3>
    1790:	a5 9f       	mul	r26, r21
    1792:	90 0d       	add	r25, r0
    1794:	b4 9f       	mul	r27, r20
    1796:	90 0d       	add	r25, r0
    1798:	a4 9f       	mul	r26, r20
    179a:	80 0d       	add	r24, r0
    179c:	91 1d       	adc	r25, r1
    179e:	11 24       	eor	r1, r1
    17a0:	08 95       	ret

000017a2 <_exit>:
    17a2:	f8 94       	cli

000017a4 <__stop_program>:
    17a4:	ff cf       	rjmp	.-2      	; 0x17a4 <__stop_program>
