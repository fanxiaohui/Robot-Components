
Implementation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ba  00800100  00006722  000067b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006722  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001b4  008003ba  008003ba  00006a70  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006a70  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006aa0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009c8  00000000  00000000  00006ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00010c46  00000000  00000000  000074a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000022fd  00000000  00000000  000180ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000060aa  00000000  00000000  0001a3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000029e8  00000000  00000000  00020498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004751  00000000  00000000  00022e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001143d  00000000  00000000  000275d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  00038a0e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	8d c1       	rjmp	.+794    	; 0x320 <__vector_1>
       6:	00 00       	nop
       8:	95 c1       	rjmp	.+810    	; 0x334 <__vector_2>
       a:	00 00       	nop
       c:	9d c1       	rjmp	.+826    	; 0x348 <__vector_3>
       e:	00 00       	nop
      10:	5f c1       	rjmp	.+702    	; 0x2d0 <__vector_4>
      12:	00 00       	nop
      14:	67 c1       	rjmp	.+718    	; 0x2e4 <__vector_5>
      16:	00 00       	nop
      18:	6f c1       	rjmp	.+734    	; 0x2f8 <__vector_6>
      1a:	00 00       	nop
      1c:	77 c1       	rjmp	.+750    	; 0x30c <__vector_7>
      1e:	00 00       	nop
      20:	0c 94 60 0c 	jmp	0x18c0	; 0x18c0 <__vector_8>
      24:	f6 c6       	rjmp	.+3564   	; 0xe12 <__vector_9>
      26:	00 00       	nop
      28:	30 c7       	rjmp	.+3680   	; 0xe8a <__vector_10>
      2a:	00 00       	nop
      2c:	c7 c6       	rjmp	.+3470   	; 0xdbc <__vector_11>
      2e:	00 00       	nop
      30:	68 c6       	rjmp	.+3280   	; 0xd02 <__vector_12>
      32:	00 00       	nop
      34:	db c5       	rjmp	.+2998   	; 0xbec <__vector_13>
      36:	00 00       	nop
      38:	39 c6       	rjmp	.+3186   	; 0xcac <__vector_14>
      3a:	00 00       	nop
      3c:	ac c5       	rjmp	.+2904   	; 0xb96 <__vector_15>
      3e:	00 00       	nop
      40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
      42:	00 00       	nop
      44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
      46:	00 00       	nop
      48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	e5 c3       	rjmp	.+1994   	; 0x818 <__vector_19>
      4e:	00 00       	nop
      50:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_20>
      54:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__vector_21>
      58:	0c 94 ee 0a 	jmp	0x15dc	; 0x15dc <__vector_22>
      5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
      62:	00 00       	nop
      64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
      66:	00 00       	nop
      68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
      72:	00 00       	nop
      74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
      76:	00 00       	nop
      78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
      82:	00 00       	nop
      84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
      86:	00 00       	nop
      88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4d 08       	sbc	r4, r13
      8e:	56 08       	sbc	r5, r6
      90:	5f 08       	sbc	r5, r15
      92:	68 08       	sbc	r6, r8
      94:	71 08       	sbc	r7, r1
      96:	7a 08       	sbc	r7, r10
      98:	83 08       	sbc	r8, r3

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e4       	ldi	r29, 0x40	; 64
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	13 e0       	ldi	r17, 0x03	; 3
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e2 e2       	ldi	r30, 0x22	; 34
      ae:	f7 e6       	ldi	r31, 0x67	; 103
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	aa 3b       	cpi	r26, 0xBA	; 186
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	25 e0       	ldi	r18, 0x05	; 5
      c2:	aa eb       	ldi	r26, 0xBA	; 186
      c4:	b3 e0       	ldi	r27, 0x03	; 3
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 36       	cpi	r26, 0x6E	; 110
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	90 d0       	rcall	.+288    	; 0x1f2 <main>
      d2:	0c 94 8f 33 	jmp	0x671e	; 0x671e <_exit>

000000d6 <__bad_interrupt>:
      d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <incrementMillis>:
	uart_start(s_debugUart);
}

void incrementMillis()
{
	milliseconds++;
      d8:	80 91 ba 03 	lds	r24, 0x03BA	; 0x8003ba <__data_end>
      dc:	90 91 bb 03 	lds	r25, 0x03BB	; 0x8003bb <__data_end+0x1>
      e0:	a0 91 bc 03 	lds	r26, 0x03BC	; 0x8003bc <__data_end+0x2>
      e4:	b0 91 bd 03 	lds	r27, 0x03BD	; 0x8003bd <__data_end+0x3>
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	a1 1d       	adc	r26, r1
      ec:	b1 1d       	adc	r27, r1
      ee:	80 93 ba 03 	sts	0x03BA, r24	; 0x8003ba <__data_end>
      f2:	90 93 bb 03 	sts	0x03BB, r25	; 0x8003bb <__data_end+0x1>
      f6:	a0 93 bc 03 	sts	0x03BC, r26	; 0x8003bc <__data_end+0x2>
      fa:	b0 93 bd 03 	sts	0x03BD, r27	; 0x8003bd <__data_end+0x3>
      fe:	08 95       	ret

00000100 <debug_init>:
timer_struct_t s_schedulerTimer;

volatile u32 milliseconds = 0;

void debug_init()
{
     100:	0f 93       	push	r16
     102:	1f 93       	push	r17
	s_debugUart.peripheral = UART0;
     104:	ee eb       	ldi	r30, 0xBE	; 190
     106:	f3 e0       	ldi	r31, 0x03	; 3
     108:	10 82       	st	Z, r1
	s_debugUart.baudRate = _19200;
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	18 2f       	mov	r17, r24
     10e:	81 83       	std	Z+1, r24	; 0x01
     110:	8b e4       	ldi	r24, 0x4B	; 75
     112:	82 83       	std	Z+2, r24	; 0x02
     114:	13 82       	std	Z+3, r1	; 0x03
     116:	14 82       	std	Z+4, r1	; 0x04
	s_debugUart.frameSize = _8BIT;
     118:	83 e0       	ldi	r24, 0x03	; 3
     11a:	78 2f       	mov	r23, r24
     11c:	87 83       	std	Z+7, r24	; 0x07
	s_debugUart.parityBit = NONE;
     11e:	92 e0       	ldi	r25, 0x02	; 2
     120:	91 87       	std	Z+9, r25	; 0x09
	s_debugUart.stopBits = _1BIT;
     122:	10 86       	std	Z+8, r1	; 0x08
	s_debugUart.useRx = TRUE;
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	58 2f       	mov	r21, r24
     128:	85 83       	std	Z+5, r24	; 0x05
	s_debugUart.useTx = TRUE;
     12a:	68 2f       	mov	r22, r24
     12c:	86 83       	std	Z+6, r24	; 0x06

	uart_init(s_debugUart);
     12e:	00 e0       	ldi	r16, 0x00	; 0
     130:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     134:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     138:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     13c:	80 e0       	ldi	r24, 0x00	; 0
     13e:	0e 94 15 0b 	call	0x162a	; 0x162a <uart_init>
	uart_start(s_debugUart);
     142:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <s_debugUart>
     146:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <s_debugUart+0x1>
     14a:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     14e:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     152:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     156:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <s_debugUart+0x5>
     15a:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <s_debugUart+0x6>
     15e:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <s_debugUart+0x7>
     162:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <s_debugUart+0x8>
     166:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <s_debugUart+0x9>
     16a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <uart_start>
}
     16e:	1f 91       	pop	r17
     170:	0f 91       	pop	r16
     172:	08 95       	ret

00000174 <scheduler_init>:
{
	milliseconds++;
}

void scheduler_init()
{
     174:	0f 93       	push	r16
     176:	1f 93       	push	r17
	s_schedulerTimer.frequency = 1000;
     178:	e8 ec       	ldi	r30, 0xC8	; 200
     17a:	f3 e0       	ldi	r31, 0x03	; 3
     17c:	88 ee       	ldi	r24, 0xE8	; 232
     17e:	58 2f       	mov	r21, r24
     180:	81 83       	std	Z+1, r24	; 0x01
     182:	83 e0       	ldi	r24, 0x03	; 3
     184:	82 83       	std	Z+2, r24	; 0x02
     186:	13 82       	std	Z+3, r1	; 0x03
     188:	14 82       	std	Z+4, r1	; 0x04
	s_schedulerTimer.peripheral = TIMER1;
     18a:	81 e0       	ldi	r24, 0x01	; 1
     18c:	48 2f       	mov	r20, r24
     18e:	80 83       	st	Z, r24

	timer_init(s_schedulerTimer);
     190:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     194:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     198:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     19c:	a1 d6       	rcall	.+3394   	; 0xee0 <timer_init>
	timer_attachInterrupt(s_schedulerTimer, OVERFLOW, incrementMillis);
     19e:	0c e6       	ldi	r16, 0x6C	; 108
     1a0:	10 e0       	ldi	r17, 0x00	; 0
     1a2:	20 e0       	ldi	r18, 0x00	; 0
     1a4:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <s_schedulerTimer>
     1a8:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <s_schedulerTimer+0x1>
     1ac:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     1b0:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     1b4:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     1b8:	0e 94 bd 09 	call	0x137a	; 0x137a <timer_attachInterrupt>
	timer_enableInterrupt(s_schedulerTimer, OVERFLOW);
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <s_schedulerTimer>
     1c2:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <s_schedulerTimer+0x1>
     1c6:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     1ca:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     1ce:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     1d2:	0e 94 01 09 	call	0x1202	; 0x1202 <timer_enableInterrupt>
	timer_start(s_schedulerTimer);
     1d6:	40 91 c8 03 	lds	r20, 0x03C8	; 0x8003c8 <s_schedulerTimer>
     1da:	50 91 c9 03 	lds	r21, 0x03C9	; 0x8003c9 <s_schedulerTimer+0x1>
     1de:	60 91 ca 03 	lds	r22, 0x03CA	; 0x8003ca <s_schedulerTimer+0x2>
     1e2:	70 91 cb 03 	lds	r23, 0x03CB	; 0x8003cb <s_schedulerTimer+0x3>
     1e6:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <s_schedulerTimer+0x4>
     1ea:	c6 d7       	rcall	.+3980   	; 0x1178 <timer_start>
}
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	08 95       	ret

000001f2 <main>:

int main(void)
{
	device_disableJTAG();
     1f2:	4a d0       	rcall	.+148    	; 0x288 <device_disableJTAG>
     1f4:	85 df       	rcall	.-246    	; 0x100 <debug_init>
     1f6:	be df       	rcall	.-132    	; 0x174 <scheduler_init>
     1f8:	78 94       	sei
     1fa:	0e 94 8b 0c 	call	0x1916	; 0x1916 <vl53l0x_init>
     1fe:	0e 94 df 0c 	call	0x19be	; 0x19be <vl53l0x_calibrate>
     202:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <vl53l0x_start>
     206:	0f 2e       	mov	r0, r31
     208:	f1 e6       	ldi	r31, 0x61	; 97
     20a:	ef 2e       	mov	r14, r31
     20c:	f1 2c       	mov	r15, r1
     20e:	f0 2d       	mov	r31, r0
     210:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <s_debugUart>
     214:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <s_debugUart+0x1>
     218:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     21c:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     220:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     224:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <s_debugUart+0x5>
     228:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <s_debugUart+0x6>
     22c:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <s_debugUart+0x7>
     230:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <s_debugUart+0x8>
     234:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <s_debugUart+0x9>
     238:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <uart_transmit>
     23c:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <vl53l0x_getDistance>
     240:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <b_vl53l0x_testConnection>
     244:	e8 2e       	mov	r14, r24
     246:	f1 2c       	mov	r15, r1
     248:	00 91 be 03 	lds	r16, 0x03BE	; 0x8003be <s_debugUart>
     24c:	10 91 bf 03 	lds	r17, 0x03BF	; 0x8003bf <s_debugUart+0x1>
     250:	20 91 c0 03 	lds	r18, 0x03C0	; 0x8003c0 <s_debugUart+0x2>
     254:	30 91 c1 03 	lds	r19, 0x03C1	; 0x8003c1 <s_debugUart+0x3>
     258:	40 91 c2 03 	lds	r20, 0x03C2	; 0x8003c2 <s_debugUart+0x4>
     25c:	50 91 c3 03 	lds	r21, 0x03C3	; 0x8003c3 <s_debugUart+0x5>
     260:	60 91 c4 03 	lds	r22, 0x03C4	; 0x8003c4 <s_debugUart+0x6>
     264:	70 91 c5 03 	lds	r23, 0x03C5	; 0x8003c5 <s_debugUart+0x7>
     268:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <s_debugUart+0x8>
     26c:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <s_debugUart+0x9>
     270:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <uart_transmit>
     274:	2f ef       	ldi	r18, 0xFF	; 255
     276:	80 e7       	ldi	r24, 0x70	; 112
     278:	92 e0       	ldi	r25, 0x02	; 2
     27a:	21 50       	subi	r18, 0x01	; 1
     27c:	80 40       	sbci	r24, 0x00	; 0
     27e:	90 40       	sbci	r25, 0x00	; 0
     280:	e1 f7       	brne	.-8      	; 0x27a <main+0x88>
     282:	00 c0       	rjmp	.+0      	; 0x284 <main+0x92>
     284:	00 00       	nop
     286:	da cf       	rjmp	.-76     	; 0x23c <main+0x4a>

00000288 <device_disableJTAG>:
/************************************************************************/

void device_disableJTAG()
{
#ifndef USING_JTAG_PROGRAMMING
	MCUCR = 0x80;
     288:	80 e8       	ldi	r24, 0x80	; 128
     28a:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0x80;
     28c:	85 bf       	out	0x35, r24	; 53
     28e:	08 95       	ret

00000290 <gpio_changeDirection>:
}

void gpio_setDirectionOutput(gpio_struct_t *s_gpio)
{
	s_gpio->direction = OUTPUT;
	gpio_changeDirection(*s_gpio);
     290:	61 30       	cpi	r22, 0x01	; 1
     292:	61 f0       	breq	.+24     	; 0x2ac <gpio_changeDirection+0x1c>
     294:	28 f0       	brcs	.+10     	; 0x2a0 <gpio_changeDirection+0x10>
     296:	62 30       	cpi	r22, 0x02	; 2
     298:	79 f0       	breq	.+30     	; 0x2b8 <gpio_changeDirection+0x28>
     29a:	63 30       	cpi	r22, 0x03	; 3
     29c:	99 f0       	breq	.+38     	; 0x2c4 <gpio_changeDirection+0x34>
     29e:	08 95       	ret
     2a0:	48 2f       	mov	r20, r24
     2a2:	67 2f       	mov	r22, r23
     2a4:	81 e2       	ldi	r24, 0x21	; 33
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	5e c2       	rjmp	.+1212   	; 0x766 <updateBit>
     2aa:	08 95       	ret
     2ac:	48 2f       	mov	r20, r24
     2ae:	67 2f       	mov	r22, r23
     2b0:	84 e2       	ldi	r24, 0x24	; 36
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	58 c2       	rjmp	.+1200   	; 0x766 <updateBit>
     2b6:	08 95       	ret
     2b8:	48 2f       	mov	r20, r24
     2ba:	67 2f       	mov	r22, r23
     2bc:	87 e2       	ldi	r24, 0x27	; 39
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	52 c2       	rjmp	.+1188   	; 0x766 <updateBit>
     2c2:	08 95       	ret
     2c4:	48 2f       	mov	r20, r24
     2c6:	67 2f       	mov	r22, r23
     2c8:	8a e2       	ldi	r24, 0x2A	; 42
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	4c c2       	rjmp	.+1176   	; 0x766 <updateBit>
     2ce:	08 95       	ret

000002d0 <__vector_4>:
     2d0:	1f 92       	push	r1
     2d2:	0f 92       	push	r0
     2d4:	0f b6       	in	r0, 0x3f	; 63
     2d6:	0f 92       	push	r0
     2d8:	11 24       	eor	r1, r1
     2da:	0f 90       	pop	r0
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	0f 90       	pop	r0
     2e0:	1f 90       	pop	r1
     2e2:	18 95       	reti

000002e4 <__vector_5>:
     2e4:	1f 92       	push	r1
     2e6:	0f 92       	push	r0
     2e8:	0f b6       	in	r0, 0x3f	; 63
     2ea:	0f 92       	push	r0
     2ec:	11 24       	eor	r1, r1
     2ee:	0f 90       	pop	r0
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	0f 90       	pop	r0
     2f4:	1f 90       	pop	r1
     2f6:	18 95       	reti

000002f8 <__vector_6>:
     2f8:	1f 92       	push	r1
     2fa:	0f 92       	push	r0
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	0f 92       	push	r0
     300:	11 24       	eor	r1, r1
     302:	0f 90       	pop	r0
     304:	0f be       	out	0x3f, r0	; 63
     306:	0f 90       	pop	r0
     308:	1f 90       	pop	r1
     30a:	18 95       	reti

0000030c <__vector_7>:
     30c:	1f 92       	push	r1
     30e:	0f 92       	push	r0
     310:	0f b6       	in	r0, 0x3f	; 63
     312:	0f 92       	push	r0
     314:	11 24       	eor	r1, r1
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <__vector_1>:
     320:	1f 92       	push	r1
     322:	0f 92       	push	r0
     324:	0f b6       	in	r0, 0x3f	; 63
     326:	0f 92       	push	r0
     328:	11 24       	eor	r1, r1
     32a:	0f 90       	pop	r0
     32c:	0f be       	out	0x3f, r0	; 63
     32e:	0f 90       	pop	r0
     330:	1f 90       	pop	r1
     332:	18 95       	reti

00000334 <__vector_2>:
     334:	1f 92       	push	r1
     336:	0f 92       	push	r0
     338:	0f b6       	in	r0, 0x3f	; 63
     33a:	0f 92       	push	r0
     33c:	11 24       	eor	r1, r1
     33e:	0f 90       	pop	r0
     340:	0f be       	out	0x3f, r0	; 63
     342:	0f 90       	pop	r0
     344:	1f 90       	pop	r1
     346:	18 95       	reti

00000348 <__vector_3>:
     348:	1f 92       	push	r1
     34a:	0f 92       	push	r0
     34c:	0f b6       	in	r0, 0x3f	; 63
     34e:	0f 92       	push	r0
     350:	11 24       	eor	r1, r1
     352:	0f 90       	pop	r0
     354:	0f be       	out	0x3f, r0	; 63
     356:	0f 90       	pop	r0
     358:	1f 90       	pop	r1
     35a:	18 95       	reti

0000035c <gpio_init>:
     35c:	0f 93       	push	r16
     35e:	1f 93       	push	r17
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
     364:	c6 2f       	mov	r28, r22
     366:	17 2f       	mov	r17, r23
     368:	d8 2f       	mov	r29, r24
     36a:	09 2f       	mov	r16, r25
     36c:	91 df       	rcall	.-222    	; 0x290 <gpio_changeDirection>
     36e:	d1 11       	cpse	r29, r1
     370:	23 c0       	rjmp	.+70     	; 0x3b8 <gpio_init+0x5c>
     372:	c1 30       	cpi	r28, 0x01	; 1
     374:	81 f0       	breq	.+32     	; 0x396 <gpio_init+0x3a>
     376:	28 f0       	brcs	.+10     	; 0x382 <gpio_init+0x26>
     378:	c2 30       	cpi	r28, 0x02	; 2
     37a:	99 f0       	breq	.+38     	; 0x3a2 <gpio_init+0x46>
     37c:	c3 30       	cpi	r28, 0x03	; 3
     37e:	b9 f0       	breq	.+46     	; 0x3ae <gpio_init+0x52>
     380:	1b c0       	rjmp	.+54     	; 0x3b8 <gpio_init+0x5c>
     382:	40 2f       	mov	r20, r16
     384:	61 2f       	mov	r22, r17
     386:	82 e2       	ldi	r24, 0x22	; 34
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	ed d1       	rcall	.+986    	; 0x766 <updateBit>
     38c:	61 2f       	mov	r22, r17
     38e:	8e e7       	ldi	r24, 0x7E	; 126
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0d d2       	rcall	.+1050   	; 0x7ae <clearBit>
     394:	11 c0       	rjmp	.+34     	; 0x3b8 <gpio_init+0x5c>
     396:	40 2f       	mov	r20, r16
     398:	61 2f       	mov	r22, r17
     39a:	85 e2       	ldi	r24, 0x25	; 37
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	e3 d1       	rcall	.+966    	; 0x766 <updateBit>
     3a0:	0b c0       	rjmp	.+22     	; 0x3b8 <gpio_init+0x5c>
     3a2:	40 2f       	mov	r20, r16
     3a4:	61 2f       	mov	r22, r17
     3a6:	88 e2       	ldi	r24, 0x28	; 40
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	dd d1       	rcall	.+954    	; 0x766 <updateBit>
     3ac:	05 c0       	rjmp	.+10     	; 0x3b8 <gpio_init+0x5c>
     3ae:	40 2f       	mov	r20, r16
     3b0:	61 2f       	mov	r22, r17
     3b2:	8b e2       	ldi	r24, 0x2B	; 43
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	d7 d1       	rcall	.+942    	; 0x766 <updateBit>
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	0f 91       	pop	r16
     3c0:	08 95       	ret

000003c2 <gpio_out_set>:
}

void gpio_out_set(gpio_struct_t s_gpio)
{
	switch (s_gpio.port)
     3c2:	61 30       	cpi	r22, 0x01	; 1
     3c4:	59 f0       	breq	.+22     	; 0x3dc <gpio_out_set+0x1a>
     3c6:	28 f0       	brcs	.+10     	; 0x3d2 <gpio_out_set+0x10>
     3c8:	62 30       	cpi	r22, 0x02	; 2
     3ca:	69 f0       	breq	.+26     	; 0x3e6 <gpio_out_set+0x24>
     3cc:	63 30       	cpi	r22, 0x03	; 3
     3ce:	81 f0       	breq	.+32     	; 0x3f0 <gpio_out_set+0x2e>
     3d0:	08 95       	ret
	{
		case PA:
			setBit(&PORTA, s_gpio.number);
     3d2:	67 2f       	mov	r22, r23
     3d4:	82 e2       	ldi	r24, 0x22	; 34
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	de c1       	rjmp	.+956    	; 0x796 <setBit>
			break;
     3da:	08 95       	ret
		case PB:
			setBit(&PORTB, s_gpio.number);
     3dc:	67 2f       	mov	r22, r23
     3de:	85 e2       	ldi	r24, 0x25	; 37
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	d9 c1       	rjmp	.+946    	; 0x796 <setBit>
			break;
     3e4:	08 95       	ret
		case PC:
			setBit(&PORTC, s_gpio.number);
     3e6:	67 2f       	mov	r22, r23
     3e8:	88 e2       	ldi	r24, 0x28	; 40
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	d4 c1       	rjmp	.+936    	; 0x796 <setBit>
			break;
		case PD:
			setBit(&PORTD, s_gpio.number);
     3ee:	08 95       	ret
     3f0:	67 2f       	mov	r22, r23
     3f2:	8b e2       	ldi	r24, 0x2B	; 43
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	cf c1       	rjmp	.+926    	; 0x796 <setBit>
     3f8:	08 95       	ret

000003fa <calculateTWBR>:
	setBit(&TWCR, TWEN);
}

void i2c_stop()
{
	clearBit(&TWCR, TWEN);
     3fa:	0f 93       	push	r16
     3fc:	1f 93       	push	r17
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	8b 01       	movw	r16, r22
     404:	9c 01       	movw	r18, r24
     406:	ea 01       	movw	r28, r20
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	72 e1       	ldi	r23, 0x12	; 18
     40c:	8a e7       	ldi	r24, 0x7A	; 122
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	a9 01       	movw	r20, r18
     412:	98 01       	movw	r18, r16
     414:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     418:	ba 01       	movw	r22, r20
     41a:	a9 01       	movw	r20, r18
     41c:	40 51       	subi	r20, 0x10	; 16
     41e:	51 09       	sbc	r21, r1
     420:	61 09       	sbc	r22, r1
     422:	71 09       	sbc	r23, r1
     424:	db 01       	movw	r26, r22
     426:	ca 01       	movw	r24, r20
     428:	b6 95       	lsr	r27
     42a:	a7 95       	ror	r26
     42c:	97 95       	ror	r25
     42e:	87 95       	ror	r24
     430:	8f 3f       	cpi	r24, 0xFF	; 255
     432:	91 05       	cpc	r25, r1
     434:	a1 05       	cpc	r26, r1
     436:	b1 05       	cpc	r27, r1
     438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43a:	10 f4       	brcc	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
     43c:	18 82       	st	Y, r1
     43e:	32 c0       	rjmp	.+100    	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     440:	db 01       	movw	r26, r22
     442:	ca 01       	movw	r24, r20
     444:	68 94       	set
     446:	12 f8       	bld	r1, 2
     448:	b6 95       	lsr	r27
     44a:	a7 95       	ror	r26
     44c:	97 95       	ror	r25
     44e:	87 95       	ror	r24
     450:	16 94       	lsr	r1
     452:	d1 f7       	brne	.-12     	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
     454:	8f 3f       	cpi	r24, 0xFF	; 255
     456:	91 05       	cpc	r25, r1
     458:	a1 05       	cpc	r26, r1
     45a:	b1 05       	cpc	r27, r1
     45c:	09 f0       	breq	.+2      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     45e:	18 f4       	brcc	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     460:	21 e0       	ldi	r18, 0x01	; 1
     462:	28 83       	st	Y, r18
     464:	1f c0       	rjmp	.+62     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     466:	db 01       	movw	r26, r22
     468:	ca 01       	movw	r24, r20
     46a:	68 94       	set
     46c:	14 f8       	bld	r1, 4
     46e:	b6 95       	lsr	r27
     470:	a7 95       	ror	r26
     472:	97 95       	ror	r25
     474:	87 95       	ror	r24
     476:	16 94       	lsr	r1
     478:	d1 f7       	brne	.-12     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
     47a:	8f 3f       	cpi	r24, 0xFF	; 255
     47c:	91 05       	cpc	r25, r1
     47e:	a1 05       	cpc	r26, r1
     480:	b1 05       	cpc	r27, r1
     482:	09 f0       	breq	.+2      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
     484:	18 f4       	brcc	.+6      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     486:	22 e0       	ldi	r18, 0x02	; 2
     488:	28 83       	st	Y, r18
     48a:	0c c0       	rjmp	.+24     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	88 83       	st	Y, r24
     490:	db 01       	movw	r26, r22
     492:	ca 01       	movw	r24, r20
     494:	68 94       	set
     496:	16 f8       	bld	r1, 6
     498:	b6 95       	lsr	r27
     49a:	a7 95       	ror	r26
     49c:	97 95       	ror	r25
     49e:	87 95       	ror	r24
     4a0:	16 94       	lsr	r1
     4a2:	d1 f7       	brne	.-12     	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     4a4:	df 91       	pop	r29
     4a6:	cf 91       	pop	r28
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret

000004ae <stopAndGetErrorCode>:
     4ae:	cf 93       	push	r28
     4b0:	c0 91 b9 00 	lds	r28, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     4b4:	64 e0       	ldi	r22, 0x04	; 4
     4b6:	8c eb       	ldi	r24, 0xBC	; 188
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	6d d1       	rcall	.+730    	; 0x796 <setBit>
     4bc:	8c 2f       	mov	r24, r28
     4be:	88 7f       	andi	r24, 0xF8	; 248
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <i2c_init>:
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <i2c_init+0x6>
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <i2c_init+0x8>
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <i2c_init+0xa>
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	5b 83       	std	Y+3, r21	; 0x03
     4d4:	6c 83       	std	Y+4, r22	; 0x04
     4d6:	7d 83       	std	Y+5, r23	; 0x05
     4d8:	8e 83       	std	Y+6, r24	; 0x06
     4da:	6b 81       	ldd	r22, Y+3	; 0x03
     4dc:	7c 81       	ldd	r23, Y+4	; 0x04
     4de:	8d 81       	ldd	r24, Y+5	; 0x05
     4e0:	9e 81       	ldd	r25, Y+6	; 0x06
     4e2:	ae 01       	movw	r20, r28
     4e4:	4f 5f       	subi	r20, 0xFF	; 255
     4e6:	5f 4f       	sbci	r21, 0xFF	; 255
     4e8:	88 df       	rcall	.-240    	; 0x3fa <calculateTWBR>
     4ea:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
     4ee:	60 e0       	ldi	r22, 0x00	; 0
     4f0:	89 81       	ldd	r24, Y+1	; 0x01
     4f2:	6a d1       	rcall	.+724    	; 0x7c8 <checkBit>
     4f4:	48 2f       	mov	r20, r24
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	89 eb       	ldi	r24, 0xB9	; 185
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	34 d1       	rcall	.+616    	; 0x766 <updateBit>
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	89 81       	ldd	r24, Y+1	; 0x01
     502:	62 d1       	rcall	.+708    	; 0x7c8 <checkBit>
     504:	48 2f       	mov	r20, r24
     506:	61 e0       	ldi	r22, 0x01	; 1
     508:	89 eb       	ldi	r24, 0xB9	; 185
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	2c d1       	rcall	.+600    	; 0x766 <updateBit>
     50e:	62 e0       	ldi	r22, 0x02	; 2
     510:	71 e0       	ldi	r23, 0x01	; 1
     512:	80 e0       	ldi	r24, 0x00	; 0
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	22 df       	rcall	.-444    	; 0x35c <gpio_init>
     518:	62 e0       	ldi	r22, 0x02	; 2
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	1d df       	rcall	.-454    	; 0x35c <gpio_init>
     522:	26 96       	adiw	r28, 0x06	; 6
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
     52e:	df 91       	pop	r29
     530:	cf 91       	pop	r28
     532:	08 95       	ret

00000534 <i2c_start>:
     534:	62 e0       	ldi	r22, 0x02	; 2
     536:	8c eb       	ldi	r24, 0xBC	; 188
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	2d c1       	rjmp	.+602    	; 0x796 <setBit>
     53c:	08 95       	ret

0000053e <i2c_transmit>:
}

u8 i2c_transmit(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	18 2f       	mov	r17, r24
     554:	6b 01       	movw	r12, r22
     556:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     558:	65 e0       	ldi	r22, 0x05	; 5
     55a:	8c eb       	ldi	r24, 0xBC	; 188
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	1b d1       	rcall	.+566    	; 0x796 <setBit>
	/* Clear I2C flag */
	setBit(&TWCR, TWINT);
     560:	67 e0       	ldi	r22, 0x07	; 7
     562:	8c eb       	ldi	r24, 0xBC	; 188
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	17 d1       	rcall	.+558    	; 0x796 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     568:	cc eb       	ldi	r28, 0xBC	; 188
     56a:	d0 e0       	ldi	r29, 0x00	; 0
     56c:	88 81       	ld	r24, Y
     56e:	67 e0       	ldi	r22, 0x07	; 7
     570:	2b d1       	rcall	.+598    	; 0x7c8 <checkBit>
     572:	88 23       	and	r24, r24
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     574:	d9 f3       	breq	.-10     	; 0x56c <i2c_transmit+0x2e>
     576:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     57a:	88 7f       	andi	r24, 0xF8	; 248
     57c:	88 30       	cpi	r24, 0x08	; 8
     57e:	09 f0       	breq	.+2      	; 0x582 <i2c_transmit+0x44>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     580:	47 c0       	rjmp	.+142    	; 0x610 <i2c_transmit+0xd2>
     582:	11 0f       	add	r17, r17
		/* Set write mode */
		clearBit(&TWDR, TWD0);
     584:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     588:	60 e0       	ldi	r22, 0x00	; 0
		/* Clear start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     58a:	8b eb       	ldi	r24, 0xBB	; 187
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0f d1       	rcall	.+542    	; 0x7ae <clearBit>
     590:	65 e0       	ldi	r22, 0x05	; 5
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     592:	8c eb       	ldi	r24, 0xBC	; 188
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0b d1       	rcall	.+534    	; 0x7ae <clearBit>
     598:	cc eb       	ldi	r28, 0xBC	; 188
     59a:	d0 e0       	ldi	r29, 0x00	; 0
     59c:	88 81       	ld	r24, Y
     59e:	67 e0       	ldi	r22, 0x07	; 7
     5a0:	13 d1       	rcall	.+550    	; 0x7c8 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
     5a2:	88 23       	and	r24, r24
     5a4:	d9 f3       	breq	.-10     	; 0x59c <i2c_transmit+0x5e>
     5a6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     5aa:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Transmit data */
			while (i != u8_dataLength)
     5ac:	88 31       	cpi	r24, 0x18	; 24
     5ae:	71 f5       	brne	.+92     	; 0x60c <i2c_transmit+0xce>
     5b0:	ee 20       	and	r14, r14
     5b2:	81 f1       	breq	.+96     	; 0x614 <i2c_transmit+0xd6>
     5b4:	86 01       	movw	r16, r12
     5b6:	ea 94       	dec	r14
     5b8:	f1 2c       	mov	r15, r1
     5ba:	8f ef       	ldi	r24, 0xFF	; 255
     5bc:	e8 1a       	sub	r14, r24
     5be:	f8 0a       	sbc	r15, r24
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     5c0:	ec 0c       	add	r14, r12
     5c2:	fd 1c       	adc	r15, r13
     5c4:	0f 2e       	mov	r0, r31
     5c6:	fb eb       	ldi	r31, 0xBB	; 187
     5c8:	af 2e       	mov	r10, r31
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     5ca:	b1 2c       	mov	r11, r1
     5cc:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     5ce:	cc eb       	ldi	r28, 0xBC	; 188
     5d0:	d0 e0       	ldi	r29, 0x00	; 0
     5d2:	0f 2e       	mov	r0, r31
     5d4:	f9 eb       	ldi	r31, 0xB9	; 185
     5d6:	cf 2e       	mov	r12, r31
		{
			/* Transmit data */
			while (i != u8_dataLength)
			{
				/* Set next byte to write */
				TWDR = au8_data[i];
     5d8:	d1 2c       	mov	r13, r1
     5da:	f0 2d       	mov	r31, r0
     5dc:	f8 01       	movw	r30, r16
				/* Clear I2C flag */
				setBit(&TWCR, TWINT);
     5de:	81 91       	ld	r24, Z+
     5e0:	8f 01       	movw	r16, r30
     5e2:	f5 01       	movw	r30, r10
     5e4:	80 83       	st	Z, r24
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     5e6:	67 e0       	ldi	r22, 0x07	; 7
     5e8:	ce 01       	movw	r24, r28
     5ea:	d5 d0       	rcall	.+426    	; 0x796 <setBit>
     5ec:	88 81       	ld	r24, Y
     5ee:	67 e0       	ldi	r22, 0x07	; 7
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_WRITE_ACK)
     5f0:	eb d0       	rcall	.+470    	; 0x7c8 <checkBit>
     5f2:	88 23       	and	r24, r24
     5f4:	d9 f3       	breq	.-10     	; 0x5ec <i2c_transmit+0xae>
					return stopAndGetErrorCode();
     5f6:	f6 01       	movw	r30, r12
     5f8:	80 81       	ld	r24, Z
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_WRITE_ACK)
		{
			/* Transmit data */
			while (i != u8_dataLength)
     5fa:	88 7f       	andi	r24, 0xF8	; 248
     5fc:	88 32       	cpi	r24, 0x28	; 40
     5fe:	11 f0       	breq	.+4      	; 0x604 <i2c_transmit+0xc6>
					return stopAndGetErrorCode();
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     600:	56 df       	rcall	.-340    	; 0x4ae <stopAndGetErrorCode>
     602:	13 c0       	rjmp	.+38     	; 0x62a <i2c_transmit+0xec>
	}
	else
		return stopAndGetErrorCode();
     604:	0e 15       	cp	r16, r14
     606:	1f 05       	cpc	r17, r15

	/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
	setBit(&TWCR, TWSTO);
     608:	49 f7       	brne	.-46     	; 0x5dc <i2c_transmit+0x9e>
     60a:	04 c0       	rjmp	.+8      	; 0x614 <i2c_transmit+0xd6>
     60c:	50 df       	rcall	.-352    	; 0x4ae <stopAndGetErrorCode>
     60e:	0d c0       	rjmp	.+26     	; 0x62a <i2c_transmit+0xec>
     610:	4e df       	rcall	.-356    	; 0x4ae <stopAndGetErrorCode>
	/* Wait for stop condition to be sent. */
	while (checkBit(TWCR, TWSTO));
     612:	0b c0       	rjmp	.+22     	; 0x62a <i2c_transmit+0xec>
     614:	64 e0       	ldi	r22, 0x04	; 4
     616:	8c eb       	ldi	r24, 0xBC	; 188
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	bd d0       	rcall	.+378    	; 0x796 <setBit>
     61c:	cc eb       	ldi	r28, 0xBC	; 188
     61e:	d0 e0       	ldi	r29, 0x00	; 0
     620:	88 81       	ld	r24, Y

	return I2C_NO_ERROR;
}
     622:	64 e0       	ldi	r22, 0x04	; 4
     624:	d1 d0       	rcall	.+418    	; 0x7c8 <checkBit>
     626:	81 11       	cpse	r24, r1
     628:	fb cf       	rjmp	.-10     	; 0x620 <i2c_transmit+0xe2>
     62a:	df 91       	pop	r29
     62c:	cf 91       	pop	r28
     62e:	1f 91       	pop	r17
     630:	0f 91       	pop	r16
     632:	ff 90       	pop	r15
     634:	ef 90       	pop	r14
     636:	df 90       	pop	r13
     638:	cf 90       	pop	r12
     63a:	bf 90       	pop	r11
     63c:	af 90       	pop	r10
     63e:	08 95       	ret

00000640 <i2c_receive>:

u8 i2c_receive(u8 u8_address, u8 *au8_data, u8 u8_dataLength)
{
     640:	af 92       	push	r10
     642:	bf 92       	push	r11
     644:	cf 92       	push	r12
     646:	df 92       	push	r13
     648:	ef 92       	push	r14
     64a:	ff 92       	push	r15
     64c:	0f 93       	push	r16
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	18 2f       	mov	r17, r24
     656:	6b 01       	movw	r12, r22
     658:	e4 2e       	mov	r14, r20
	u8 i = 0;
	/* Send start condition */
	setBit(&TWCR, TWSTA);
     65a:	65 e0       	ldi	r22, 0x05	; 5
     65c:	8c eb       	ldi	r24, 0xBC	; 188
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	9a d0       	rcall	.+308    	; 0x796 <setBit>
	/* Clear I2C flag */
	setBit(&TWCR, TWINT);
     662:	67 e0       	ldi	r22, 0x07	; 7
     664:	8c eb       	ldi	r24, 0xBC	; 188
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	96 d0       	rcall	.+300    	; 0x796 <setBit>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     66a:	cc eb       	ldi	r28, 0xBC	; 188
     66c:	d0 e0       	ldi	r29, 0x00	; 0
     66e:	88 81       	ld	r24, Y
     670:	67 e0       	ldi	r22, 0x07	; 7
     672:	aa d0       	rcall	.+340    	; 0x7c8 <checkBit>
     674:	88 23       	and	r24, r24
	/* Check if start condition was issued */
	if ((TWSR & 0xF8) == I2C_START)
     676:	d9 f3       	breq	.-10     	; 0x66e <i2c_receive+0x2e>
     678:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     67c:	88 7f       	andi	r24, 0xF8	; 248
     67e:	88 30       	cpi	r24, 0x08	; 8
     680:	09 f0       	breq	.+2      	; 0x684 <i2c_receive+0x44>
	{
		/* Set slave address */
		TWDR = u8_address << 1;
     682:	47 c0       	rjmp	.+142    	; 0x712 <i2c_receive+0xd2>
     684:	11 0f       	add	r17, r17
		/* Set read mode */
		setBit(&TWDR, TWD0);
     686:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
     68a:	60 e0       	ldi	r22, 0x00	; 0
		/* Clear start condition. Also clears I2C flag because it writes a 1 to it. */
		clearBit(&TWCR, TWSTA);
     68c:	8b eb       	ldi	r24, 0xBB	; 187
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	82 d0       	rcall	.+260    	; 0x796 <setBit>
     692:	65 e0       	ldi	r22, 0x05	; 5
		/* Wait for interrupt flag */
		while (!checkBit(TWCR, TWINT));
     694:	8c eb       	ldi	r24, 0xBC	; 188
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	8a d0       	rcall	.+276    	; 0x7ae <clearBit>
     69a:	cc eb       	ldi	r28, 0xBC	; 188
     69c:	d0 e0       	ldi	r29, 0x00	; 0
     69e:	88 81       	ld	r24, Y
     6a0:	67 e0       	ldi	r22, 0x07	; 7
     6a2:	92 d0       	rcall	.+292    	; 0x7c8 <checkBit>
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
     6a4:	88 23       	and	r24, r24
     6a6:	d9 f3       	breq	.-10     	; 0x69e <i2c_receive+0x5e>
     6a8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     6ac:	88 7f       	andi	r24, 0xF8	; 248
		{
			/* Receive data */
			while (i != u8_dataLength)
     6ae:	80 34       	cpi	r24, 0x40	; 64
     6b0:	71 f5       	brne	.+92     	; 0x70e <i2c_receive+0xce>
     6b2:	ee 20       	and	r14, r14
     6b4:	81 f1       	breq	.+96     	; 0x716 <i2c_receive+0xd6>
     6b6:	86 01       	movw	r16, r12
     6b8:	ea 94       	dec	r14
     6ba:	f1 2c       	mov	r15, r1
     6bc:	8f ef       	ldi	r24, 0xFF	; 255
     6be:	e8 1a       	sub	r14, r24
     6c0:	f8 0a       	sbc	r15, r24
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     6c2:	ec 0c       	add	r14, r12
     6c4:	fd 1c       	adc	r15, r13
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     6c6:	cc eb       	ldi	r28, 0xBC	; 188
     6c8:	d0 e0       	ldi	r29, 0x00	; 0
     6ca:	0f 2e       	mov	r0, r31
     6cc:	f9 eb       	ldi	r31, 0xB9	; 185
     6ce:	cf 2e       	mov	r12, r31
					return stopAndGetErrorCode();
				/* Read next byte */
				au8_data[i] = TWDR;
     6d0:	d1 2c       	mov	r13, r1
     6d2:	f0 2d       	mov	r31, r0
     6d4:	0f 2e       	mov	r0, r31
		{
			/* Receive data */
			while (i != u8_dataLength)
			{
				/* Transmit ACK after a transfer */
				setBit(&TWCR, TWEA);
     6d6:	fb eb       	ldi	r31, 0xBB	; 187
     6d8:	af 2e       	mov	r10, r31
     6da:	b1 2c       	mov	r11, r1
     6dc:	f0 2d       	mov	r31, r0
				/* Wait for interrupt flag */
				while (!checkBit(TWCR, TWINT));
     6de:	66 e0       	ldi	r22, 0x06	; 6
     6e0:	ce 01       	movw	r24, r28
     6e2:	59 d0       	rcall	.+178    	; 0x796 <setBit>
     6e4:	88 81       	ld	r24, Y
     6e6:	67 e0       	ldi	r22, 0x07	; 7
				/* Check if slave didn't sent ACK */
				if ((TWSR & 0xF8) != I2C_DATA_READ_ACK)
     6e8:	6f d0       	rcall	.+222    	; 0x7c8 <checkBit>
     6ea:	88 23       	and	r24, r24
     6ec:	d9 f3       	breq	.-10     	; 0x6e4 <i2c_receive+0xa4>
     6ee:	f6 01       	movw	r30, r12
     6f0:	80 81       	ld	r24, Z
					return stopAndGetErrorCode();
     6f2:	88 7f       	andi	r24, 0xF8	; 248
     6f4:	80 35       	cpi	r24, 0x50	; 80
				/* Read next byte */
				au8_data[i] = TWDR;
     6f6:	11 f0       	breq	.+4      	; 0x6fc <i2c_receive+0xbc>
     6f8:	da de       	rcall	.-588    	; 0x4ae <stopAndGetErrorCode>
     6fa:	2a c0       	rjmp	.+84     	; 0x750 <i2c_receive+0x110>
		while (!checkBit(TWCR, TWINT));
		/* Check if ACK was received */
		if ((TWSR & 0xF8) == I2C_SLAVE_READ_ACK)
		{
			/* Receive data */
			while (i != u8_dataLength)
     6fc:	f5 01       	movw	r30, r10
     6fe:	80 81       	ld	r24, Z
     700:	f8 01       	movw	r30, r16
				au8_data[i] = TWDR;
				i++;
			}
		}
		else
			return stopAndGetErrorCode();
     702:	81 93       	st	Z+, r24
     704:	8f 01       	movw	r16, r30
	}
	else
		return stopAndGetErrorCode();
     706:	ee 15       	cp	r30, r14
     708:	ff 05       	cpc	r31, r15

	/* Send NACK after all expected transfers are done. Also clears I2C flag because it writes a 1 to it. */
	clearBit(&TWCR, TWEA);
     70a:	49 f7       	brne	.-46     	; 0x6de <i2c_receive+0x9e>
     70c:	04 c0       	rjmp	.+8      	; 0x716 <i2c_receive+0xd6>
     70e:	cf de       	rcall	.-610    	; 0x4ae <stopAndGetErrorCode>
     710:	1f c0       	rjmp	.+62     	; 0x750 <i2c_receive+0x110>
     712:	cd de       	rcall	.-614    	; 0x4ae <stopAndGetErrorCode>
	/* Wait for interrupt flag */
	while (!checkBit(TWCR, TWINT));
     714:	1d c0       	rjmp	.+58     	; 0x750 <i2c_receive+0x110>
     716:	66 e0       	ldi	r22, 0x06	; 6
     718:	8c eb       	ldi	r24, 0xBC	; 188
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	48 d0       	rcall	.+144    	; 0x7ae <clearBit>
     71e:	cc eb       	ldi	r28, 0xBC	; 188
	/* If NACK was sent, all is good */
	if ((TWSR & 0xF8) == I2C_DATA_READ_NACK)
     720:	d0 e0       	ldi	r29, 0x00	; 0
     722:	88 81       	ld	r24, Y
     724:	67 e0       	ldi	r22, 0x07	; 7
     726:	50 d0       	rcall	.+160    	; 0x7c8 <checkBit>
	{
		/* Send stop condition. Also clears I2C flag because it writes a 1 to it. */
		setBit(&TWCR, TWSTO);
     728:	88 23       	and	r24, r24
     72a:	d9 f3       	breq	.-10     	; 0x722 <i2c_receive+0xe2>
     72c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
     730:	88 7f       	andi	r24, 0xF8	; 248
		/* Wait for stop condition to be sent. */
		while (checkBit(TWCR, TWSTO));
     732:	88 35       	cpi	r24, 0x58	; 88
     734:	61 f4       	brne	.+24     	; 0x74e <i2c_receive+0x10e>
     736:	64 e0       	ldi	r22, 0x04	; 4
     738:	8c eb       	ldi	r24, 0xBC	; 188
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	2c d0       	rcall	.+88     	; 0x796 <setBit>
     73e:	cc eb       	ldi	r28, 0xBC	; 188
     740:	d0 e0       	ldi	r29, 0x00	; 0
     742:	88 81       	ld	r24, Y
	}

	return I2C_NO_ERROR;
     744:	64 e0       	ldi	r22, 0x04	; 4
}
     746:	40 d0       	rcall	.+128    	; 0x7c8 <checkBit>
     748:	81 11       	cpse	r24, r1
     74a:	fb cf       	rjmp	.-10     	; 0x742 <i2c_receive+0x102>
     74c:	01 c0       	rjmp	.+2      	; 0x750 <i2c_receive+0x110>
     74e:	80 e0       	ldi	r24, 0x00	; 0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	ff 90       	pop	r15
     75a:	ef 90       	pop	r14
     75c:	df 90       	pop	r13
     75e:	cf 90       	pop	r12
     760:	bf 90       	pop	r11
     762:	af 90       	pop	r10
     764:	08 95       	ret

00000766 <updateBit>:
	*u8_register &= ~(1 << u8_bitPosition);
}

void toggleBit(volatile u8 *u8_register, u8 u8_bitPosition)
{
	*u8_register ^= (1 << u8_bitPosition);
     766:	fc 01       	movw	r30, r24
     768:	94 2f       	mov	r25, r20
     76a:	20 81       	ld	r18, Z
     76c:	41 e0       	ldi	r20, 0x01	; 1
     76e:	50 e0       	ldi	r21, 0x00	; 0
     770:	06 2e       	mov	r0, r22
     772:	02 c0       	rjmp	.+4      	; 0x778 <updateBit+0x12>
     774:	44 0f       	add	r20, r20
     776:	55 1f       	adc	r21, r21
     778:	0a 94       	dec	r0
     77a:	e2 f7       	brpl	.-8      	; 0x774 <updateBit+0xe>
     77c:	40 95       	com	r20
     77e:	50 95       	com	r21
     780:	24 23       	and	r18, r20
     782:	49 2f       	mov	r20, r25
     784:	50 e0       	ldi	r21, 0x00	; 0
     786:	02 c0       	rjmp	.+4      	; 0x78c <updateBit+0x26>
     788:	44 0f       	add	r20, r20
     78a:	55 1f       	adc	r21, r21
     78c:	6a 95       	dec	r22
     78e:	e2 f7       	brpl	.-8      	; 0x788 <updateBit+0x22>
     790:	42 2b       	or	r20, r18
     792:	40 83       	st	Z, r20
     794:	08 95       	ret

00000796 <setBit>:
     796:	fc 01       	movw	r30, r24
     798:	40 81       	ld	r20, Z
     79a:	21 e0       	ldi	r18, 0x01	; 1
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	02 c0       	rjmp	.+4      	; 0x7a4 <setBit+0xe>
     7a0:	22 0f       	add	r18, r18
     7a2:	33 1f       	adc	r19, r19
     7a4:	6a 95       	dec	r22
     7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <setBit+0xa>
     7a8:	24 2b       	or	r18, r20
     7aa:	20 83       	st	Z, r18
     7ac:	08 95       	ret

000007ae <clearBit>:
     7ae:	fc 01       	movw	r30, r24
     7b0:	90 81       	ld	r25, Z
     7b2:	21 e0       	ldi	r18, 0x01	; 1
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	02 c0       	rjmp	.+4      	; 0x7bc <clearBit+0xe>
     7b8:	22 0f       	add	r18, r18
     7ba:	33 1f       	adc	r19, r19
     7bc:	6a 95       	dec	r22
     7be:	e2 f7       	brpl	.-8      	; 0x7b8 <clearBit+0xa>
     7c0:	20 95       	com	r18
     7c2:	29 23       	and	r18, r25
     7c4:	20 83       	st	Z, r18
     7c6:	08 95       	ret

000007c8 <checkBit>:
}

bitValue checkBit(u8 u8_register, u8 u8_bitPosition)
{
	return (u8_register >> u8_bitPosition) & 1;
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <checkBit+0x8>
     7cc:	95 95       	asr	r25
     7ce:	87 95       	ror	r24
     7d0:	6a 95       	dec	r22
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <checkBit+0x4>
}
     7d4:	81 70       	andi	r24, 0x01	; 1
     7d6:	08 95       	ret

000007d8 <calculateError>:

u16 calculateError(u32 u32_actualValue, u32 u32_expectedValue)
{
     7d8:	cf 92       	push	r12
     7da:	df 92       	push	r13
     7dc:	ef 92       	push	r14
     7de:	ff 92       	push	r15
     7e0:	69 01       	movw	r12, r18
     7e2:	7a 01       	movw	r14, r20
	s32 s32_error;
	s32_error = (u32_actualValue - u32_expectedValue) * 1000 / u32_expectedValue;

	return abs(s32_error);
     7e4:	9b 01       	movw	r18, r22
     7e6:	ac 01       	movw	r20, r24
     7e8:	2c 19       	sub	r18, r12
     7ea:	3d 09       	sbc	r19, r13
     7ec:	4e 09       	sbc	r20, r14
     7ee:	5f 09       	sbc	r21, r15
     7f0:	a8 ee       	ldi	r26, 0xE8	; 232
     7f2:	b3 e0       	ldi	r27, 0x03	; 3
     7f4:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
     7f8:	a7 01       	movw	r20, r14
     7fa:	96 01       	movw	r18, r12
     7fc:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     800:	c9 01       	movw	r24, r18
     802:	99 23       	and	r25, r25
     804:	24 f4       	brge	.+8      	; 0x80e <calculateError+0x36>
     806:	88 27       	eor	r24, r24
     808:	99 27       	eor	r25, r25
     80a:	82 1b       	sub	r24, r18
     80c:	93 0b       	sbc	r25, r19
}
     80e:	ff 90       	pop	r15
     810:	ef 90       	pop	r14
     812:	df 90       	pop	r13
     814:	cf 90       	pop	r12
     816:	08 95       	ret

00000818 <__vector_19>:
/* Interrupt handlers                                                   */
/************************************************************************/

#ifdef SPI_INTERRUPT_MODE
ISR(SPI_STC_vect)
{
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	0b b6       	in	r0, 0x3b	; 59
     824:	0f 92       	push	r0
     826:	8f 93       	push	r24
     828:	9f 93       	push	r25
     82a:	ef 93       	push	r30
     82c:	ff 93       	push	r31
	au8_RBuffer[u8_RLastReceivedIndex] = SPDR;
     82e:	e0 91 d2 03 	lds	r30, 0x03D2	; 0x8003d2 <u8_RLastReceivedIndex>
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	8e b5       	in	r24, 0x2e	; 46
     836:	ed 52       	subi	r30, 0x2D	; 45
     838:	fc 4f       	sbci	r31, 0xFC	; 252
     83a:	80 83       	st	Z, r24
	if (u8_RLastReceivedIndex < SPI_R_BUFFER_MAX_SIZE - 1)
     83c:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <u8_RLastReceivedIndex>
     840:	89 30       	cpi	r24, 0x09	; 9
     842:	30 f4       	brcc	.+12     	; 0x850 <__vector_19+0x38>
		u8_RLastReceivedIndex++;
     844:	80 91 d2 03 	lds	r24, 0x03D2	; 0x8003d2 <u8_RLastReceivedIndex>
     848:	8f 5f       	subi	r24, 0xFF	; 255
     84a:	80 93 d2 03 	sts	0x03D2, r24	; 0x8003d2 <u8_RLastReceivedIndex>
     84e:	02 c0       	rjmp	.+4      	; 0x854 <__vector_19+0x3c>
	else
		u8_RLastReceivedIndex = 0;
     850:	10 92 d2 03 	sts	0x03D2, r1	; 0x8003d2 <u8_RLastReceivedIndex>
	b_RAvailable = TRUE;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 d1 03 	sts	0x03D1, r24	; 0x8003d1 <b_RAvailable>
	
	if (u8_TLastTransmittedIndex != u8_TLastRequestedIndex)
     85a:	90 91 cf 03 	lds	r25, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     85e:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <u8_TLastRequestedIndex>
     862:	98 17       	cp	r25, r24
     864:	a1 f0       	breq	.+40     	; 0x88e <__vector_19+0x76>
	{
		SPDR = au8_TBuffer[u8_TLastTransmittedIndex];
     866:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	e3 52       	subi	r30, 0x23	; 35
     86e:	fc 4f       	sbci	r31, 0xFC	; 252
     870:	80 81       	ld	r24, Z
     872:	8e bd       	out	0x2e, r24	; 46
		if (u8_TLastTransmittedIndex < SPI_T_BUFFER_MAX_SIZE - 1)
     874:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     878:	89 30       	cpi	r24, 0x09	; 9
     87a:	30 f4       	brcc	.+12     	; 0x888 <__vector_19+0x70>
			u8_TLastTransmittedIndex++;
     87c:	80 91 cf 03 	lds	r24, 0x03CF	; 0x8003cf <u8_TLastTransmittedIndex>
     880:	8f 5f       	subi	r24, 0xFF	; 255
     882:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <u8_TLastTransmittedIndex>
     886:	06 c0       	rjmp	.+12     	; 0x894 <__vector_19+0x7c>
		else
			u8_TLastTransmittedIndex = 0;
     888:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <u8_TLastTransmittedIndex>
     88c:	03 c0       	rjmp	.+6      	; 0x894 <__vector_19+0x7c>
	}
	else
	{
		b_TAvailable = TRUE;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 e7 03 	sts	0x03E7, r24	; 0x8003e7 <b_TAvailable>
	}
}
     894:	ff 91       	pop	r31
     896:	ef 91       	pop	r30
     898:	9f 91       	pop	r25
     89a:	8f 91       	pop	r24
     89c:	0f 90       	pop	r0
     89e:	0b be       	out	0x3b, r0	; 59
     8a0:	0f 90       	pop	r0
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	0f 90       	pop	r0
     8a6:	1f 90       	pop	r1
     8a8:	18 95       	reti

000008aa <calculateTopRegister>:
					break;
			}
		#endif
			break;
	}
}
     8aa:	8f 92       	push	r8
     8ac:	9f 92       	push	r9
     8ae:	af 92       	push	r10
     8b0:	bf 92       	push	r11
     8b2:	ef 92       	push	r14
     8b4:	ff 92       	push	r15
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <calculateTopRegister+0x16>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <calculateTopRegister+0x18>
     8c2:	1f 92       	push	r1
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	48 01       	movw	r8, r16
     8ca:	59 01       	movw	r10, r18
     8cc:	41 30       	cpi	r20, 0x01	; 1
     8ce:	21 f0       	breq	.+8      	; 0x8d8 <calculateTopRegister+0x2e>
     8d0:	42 30       	cpi	r20, 0x02	; 2
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <calculateTopRegister+0x2c>
     8d4:	88 c0       	rjmp	.+272    	; 0x9e6 <calculateTopRegister+0x13c>
     8d6:	4c c1       	rjmp	.+664    	; 0xb70 <calculateTopRegister+0x2c6>
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	72 e1       	ldi	r23, 0x12	; 18
     8dc:	8a e7       	ldi	r24, 0x7A	; 122
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	98 01       	movw	r18, r16
     8e4:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     8e8:	da 01       	movw	r26, r20
     8ea:	c9 01       	movw	r24, r18
     8ec:	01 97       	sbiw	r24, 0x01	; 1
     8ee:	a1 09       	sbc	r26, r1
     8f0:	b1 09       	sbc	r27, r1
     8f2:	00 97       	sbiw	r24, 0x00	; 0
     8f4:	21 e0       	ldi	r18, 0x01	; 1
     8f6:	a2 07       	cpc	r26, r18
     8f8:	b1 05       	cpc	r27, r1
     8fa:	50 f4       	brcc	.+20     	; 0x910 <calculateTopRegister+0x66>
     8fc:	49 ef       	ldi	r20, 0xF9	; 249
     8fe:	5f ef       	ldi	r21, 0xFF	; 255
     900:	6f ef       	ldi	r22, 0xFF	; 255
     902:	70 e0       	ldi	r23, 0x00	; 0
     904:	f7 01       	movw	r30, r14
     906:	40 83       	st	Z, r20
     908:	51 83       	std	Z+1, r21	; 0x01
     90a:	62 83       	std	Z+2, r22	; 0x02
     90c:	73 83       	std	Z+3, r23	; 0x03
     90e:	33 c1       	rjmp	.+614    	; 0xb76 <calculateTopRegister+0x2cc>
     910:	60 e4       	ldi	r22, 0x40	; 64
     912:	72 e4       	ldi	r23, 0x42	; 66
     914:	8f e0       	ldi	r24, 0x0F	; 15
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	a5 01       	movw	r20, r10
     91a:	94 01       	movw	r18, r8
     91c:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     920:	da 01       	movw	r26, r20
     922:	c9 01       	movw	r24, r18
     924:	01 97       	sbiw	r24, 0x01	; 1
     926:	a1 09       	sbc	r26, r1
     928:	b1 09       	sbc	r27, r1
     92a:	00 97       	sbiw	r24, 0x00	; 0
     92c:	f1 e0       	ldi	r31, 0x01	; 1
     92e:	af 07       	cpc	r26, r31
     930:	b1 05       	cpc	r27, r1
     932:	50 f4       	brcc	.+20     	; 0x948 <calculateTopRegister+0x9e>
     934:	4a ef       	ldi	r20, 0xFA	; 250
     936:	5f ef       	ldi	r21, 0xFF	; 255
     938:	6f ef       	ldi	r22, 0xFF	; 255
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	f7 01       	movw	r30, r14
     93e:	40 83       	st	Z, r20
     940:	51 83       	std	Z+1, r21	; 0x01
     942:	62 83       	std	Z+2, r22	; 0x02
     944:	73 83       	std	Z+3, r23	; 0x03
     946:	17 c1       	rjmp	.+558    	; 0xb76 <calculateTopRegister+0x2cc>
     948:	68 e4       	ldi	r22, 0x48	; 72
     94a:	78 ee       	ldi	r23, 0xE8	; 232
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	a5 01       	movw	r20, r10
     952:	94 01       	movw	r18, r8
     954:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     958:	da 01       	movw	r26, r20
     95a:	c9 01       	movw	r24, r18
     95c:	01 97       	sbiw	r24, 0x01	; 1
     95e:	a1 09       	sbc	r26, r1
     960:	b1 09       	sbc	r27, r1
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	f1 e0       	ldi	r31, 0x01	; 1
     966:	af 07       	cpc	r26, r31
     968:	b1 05       	cpc	r27, r1
     96a:	50 f4       	brcc	.+20     	; 0x980 <calculateTopRegister+0xd6>
     96c:	4c ef       	ldi	r20, 0xFC	; 252
     96e:	5f ef       	ldi	r21, 0xFF	; 255
     970:	6f ef       	ldi	r22, 0xFF	; 255
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	f7 01       	movw	r30, r14
     976:	40 83       	st	Z, r20
     978:	51 83       	std	Z+1, r21	; 0x01
     97a:	62 83       	std	Z+2, r22	; 0x02
     97c:	73 83       	std	Z+3, r23	; 0x03
     97e:	fb c0       	rjmp	.+502    	; 0xb76 <calculateTopRegister+0x2cc>
     980:	62 e1       	ldi	r22, 0x12	; 18
     982:	7a e7       	ldi	r23, 0x7A	; 122
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a5 01       	movw	r20, r10
     98a:	94 01       	movw	r18, r8
     98c:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     990:	da 01       	movw	r26, r20
     992:	c9 01       	movw	r24, r18
     994:	01 97       	sbiw	r24, 0x01	; 1
     996:	a1 09       	sbc	r26, r1
     998:	b1 09       	sbc	r27, r1
     99a:	00 97       	sbiw	r24, 0x00	; 0
     99c:	f1 e0       	ldi	r31, 0x01	; 1
     99e:	af 07       	cpc	r26, r31
     9a0:	b1 05       	cpc	r27, r1
     9a2:	50 f4       	brcc	.+20     	; 0x9b8 <calculateTopRegister+0x10e>
     9a4:	4e ef       	ldi	r20, 0xFE	; 254
     9a6:	5f ef       	ldi	r21, 0xFF	; 255
     9a8:	6f ef       	ldi	r22, 0xFF	; 255
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	f7 01       	movw	r30, r14
     9ae:	40 83       	st	Z, r20
     9b0:	51 83       	std	Z+1, r21	; 0x01
     9b2:	62 83       	std	Z+2, r22	; 0x02
     9b4:	73 83       	std	Z+3, r23	; 0x03
     9b6:	df c0       	rjmp	.+446    	; 0xb76 <calculateTopRegister+0x2cc>
     9b8:	8f ef       	ldi	r24, 0xFF	; 255
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	af ef       	ldi	r26, 0xFF	; 255
     9be:	b0 e0       	ldi	r27, 0x00	; 0
     9c0:	f7 01       	movw	r30, r14
     9c2:	80 83       	st	Z, r24
     9c4:	91 83       	std	Z+1, r25	; 0x01
     9c6:	a2 83       	std	Z+2, r26	; 0x02
     9c8:	b3 83       	std	Z+3, r27	; 0x03
     9ca:	64 e8       	ldi	r22, 0x84	; 132
     9cc:	7e e1       	ldi	r23, 0x1E	; 30
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a5 01       	movw	r20, r10
     9d4:	94 01       	movw	r18, r8
     9d6:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     9da:	da 01       	movw	r26, r20
     9dc:	c9 01       	movw	r24, r18
     9de:	01 97       	sbiw	r24, 0x01	; 1
     9e0:	a1 09       	sbc	r26, r1
     9e2:	b1 09       	sbc	r27, r1
     9e4:	c8 c0       	rjmp	.+400    	; 0xb76 <calculateTopRegister+0x2cc>
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	72 e1       	ldi	r23, 0x12	; 18
     9ea:	8a e7       	ldi	r24, 0x7A	; 122
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	a9 01       	movw	r20, r18
     9f0:	98 01       	movw	r18, r16
     9f2:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     9f6:	da 01       	movw	r26, r20
     9f8:	c9 01       	movw	r24, r18
     9fa:	01 97       	sbiw	r24, 0x01	; 1
     9fc:	a1 09       	sbc	r26, r1
     9fe:	b1 09       	sbc	r27, r1
     a00:	8f 3f       	cpi	r24, 0xFF	; 255
     a02:	91 05       	cpc	r25, r1
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	09 f0       	breq	.+2      	; 0xa0c <calculateTopRegister+0x162>
     a0a:	50 f4       	brcc	.+20     	; 0xa20 <calculateTopRegister+0x176>
     a0c:	49 ef       	ldi	r20, 0xF9	; 249
     a0e:	5f ef       	ldi	r21, 0xFF	; 255
     a10:	6f ef       	ldi	r22, 0xFF	; 255
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	f7 01       	movw	r30, r14
     a16:	40 83       	st	Z, r20
     a18:	51 83       	std	Z+1, r21	; 0x01
     a1a:	62 83       	std	Z+2, r22	; 0x02
     a1c:	73 83       	std	Z+3, r23	; 0x03
     a1e:	ab c0       	rjmp	.+342    	; 0xb76 <calculateTopRegister+0x2cc>
     a20:	60 e4       	ldi	r22, 0x40	; 64
     a22:	72 e4       	ldi	r23, 0x42	; 66
     a24:	8f e0       	ldi	r24, 0x0F	; 15
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	a5 01       	movw	r20, r10
     a2a:	94 01       	movw	r18, r8
     a2c:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     a30:	da 01       	movw	r26, r20
     a32:	c9 01       	movw	r24, r18
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	a1 09       	sbc	r26, r1
     a38:	b1 09       	sbc	r27, r1
     a3a:	8f 3f       	cpi	r24, 0xFF	; 255
     a3c:	91 05       	cpc	r25, r1
     a3e:	a1 05       	cpc	r26, r1
     a40:	b1 05       	cpc	r27, r1
     a42:	09 f0       	breq	.+2      	; 0xa46 <calculateTopRegister+0x19c>
     a44:	50 f4       	brcc	.+20     	; 0xa5a <calculateTopRegister+0x1b0>
     a46:	4a ef       	ldi	r20, 0xFA	; 250
     a48:	5f ef       	ldi	r21, 0xFF	; 255
     a4a:	6f ef       	ldi	r22, 0xFF	; 255
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	f7 01       	movw	r30, r14
     a50:	40 83       	st	Z, r20
     a52:	51 83       	std	Z+1, r21	; 0x01
     a54:	62 83       	std	Z+2, r22	; 0x02
     a56:	73 83       	std	Z+3, r23	; 0x03
     a58:	8e c0       	rjmp	.+284    	; 0xb76 <calculateTopRegister+0x2cc>
     a5a:	60 e9       	ldi	r22, 0x90	; 144
     a5c:	70 ed       	ldi	r23, 0xD0	; 208
     a5e:	83 e0       	ldi	r24, 0x03	; 3
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	a5 01       	movw	r20, r10
     a64:	94 01       	movw	r18, r8
     a66:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     a6a:	da 01       	movw	r26, r20
     a6c:	c9 01       	movw	r24, r18
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	a1 09       	sbc	r26, r1
     a72:	b1 09       	sbc	r27, r1
     a74:	8f 3f       	cpi	r24, 0xFF	; 255
     a76:	91 05       	cpc	r25, r1
     a78:	a1 05       	cpc	r26, r1
     a7a:	b1 05       	cpc	r27, r1
     a7c:	09 f0       	breq	.+2      	; 0xa80 <calculateTopRegister+0x1d6>
     a7e:	50 f4       	brcc	.+20     	; 0xa94 <calculateTopRegister+0x1ea>
     a80:	4b ef       	ldi	r20, 0xFB	; 251
     a82:	5f ef       	ldi	r21, 0xFF	; 255
     a84:	6f ef       	ldi	r22, 0xFF	; 255
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	f7 01       	movw	r30, r14
     a8a:	40 83       	st	Z, r20
     a8c:	51 83       	std	Z+1, r21	; 0x01
     a8e:	62 83       	std	Z+2, r22	; 0x02
     a90:	73 83       	std	Z+3, r23	; 0x03
     a92:	71 c0       	rjmp	.+226    	; 0xb76 <calculateTopRegister+0x2cc>
     a94:	68 e4       	ldi	r22, 0x48	; 72
     a96:	78 ee       	ldi	r23, 0xE8	; 232
     a98:	81 e0       	ldi	r24, 0x01	; 1
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a5 01       	movw	r20, r10
     a9e:	94 01       	movw	r18, r8
     aa0:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     aa4:	da 01       	movw	r26, r20
     aa6:	c9 01       	movw	r24, r18
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	a1 09       	sbc	r26, r1
     aac:	b1 09       	sbc	r27, r1
     aae:	8f 3f       	cpi	r24, 0xFF	; 255
     ab0:	91 05       	cpc	r25, r1
     ab2:	a1 05       	cpc	r26, r1
     ab4:	b1 05       	cpc	r27, r1
     ab6:	09 f0       	breq	.+2      	; 0xaba <calculateTopRegister+0x210>
     ab8:	50 f4       	brcc	.+20     	; 0xace <calculateTopRegister+0x224>
     aba:	4c ef       	ldi	r20, 0xFC	; 252
     abc:	5f ef       	ldi	r21, 0xFF	; 255
     abe:	6f ef       	ldi	r22, 0xFF	; 255
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	f7 01       	movw	r30, r14
     ac4:	40 83       	st	Z, r20
     ac6:	51 83       	std	Z+1, r21	; 0x01
     ac8:	62 83       	std	Z+2, r22	; 0x02
     aca:	73 83       	std	Z+3, r23	; 0x03
     acc:	54 c0       	rjmp	.+168    	; 0xb76 <calculateTopRegister+0x2cc>
     ace:	64 e2       	ldi	r22, 0x24	; 36
     ad0:	74 ef       	ldi	r23, 0xF4	; 244
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	a5 01       	movw	r20, r10
     ad8:	94 01       	movw	r18, r8
     ada:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     ade:	da 01       	movw	r26, r20
     ae0:	c9 01       	movw	r24, r18
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	a1 09       	sbc	r26, r1
     ae6:	b1 09       	sbc	r27, r1
     ae8:	8f 3f       	cpi	r24, 0xFF	; 255
     aea:	91 05       	cpc	r25, r1
     aec:	a1 05       	cpc	r26, r1
     aee:	b1 05       	cpc	r27, r1
     af0:	09 f0       	breq	.+2      	; 0xaf4 <calculateTopRegister+0x24a>
     af2:	50 f4       	brcc	.+20     	; 0xb08 <calculateTopRegister+0x25e>
     af4:	4d ef       	ldi	r20, 0xFD	; 253
     af6:	5f ef       	ldi	r21, 0xFF	; 255
     af8:	6f ef       	ldi	r22, 0xFF	; 255
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	f7 01       	movw	r30, r14
     afe:	40 83       	st	Z, r20
     b00:	51 83       	std	Z+1, r21	; 0x01
     b02:	62 83       	std	Z+2, r22	; 0x02
     b04:	73 83       	std	Z+3, r23	; 0x03
     b06:	37 c0       	rjmp	.+110    	; 0xb76 <calculateTopRegister+0x2cc>
     b08:	62 e1       	ldi	r22, 0x12	; 18
     b0a:	7a e7       	ldi	r23, 0x7A	; 122
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a5 01       	movw	r20, r10
     b12:	94 01       	movw	r18, r8
     b14:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     b18:	da 01       	movw	r26, r20
     b1a:	c9 01       	movw	r24, r18
     b1c:	01 97       	sbiw	r24, 0x01	; 1
     b1e:	a1 09       	sbc	r26, r1
     b20:	b1 09       	sbc	r27, r1
     b22:	8f 3f       	cpi	r24, 0xFF	; 255
     b24:	91 05       	cpc	r25, r1
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	09 f0       	breq	.+2      	; 0xb2e <calculateTopRegister+0x284>
     b2c:	50 f4       	brcc	.+20     	; 0xb42 <calculateTopRegister+0x298>
     b2e:	4e ef       	ldi	r20, 0xFE	; 254
     b30:	5f ef       	ldi	r21, 0xFF	; 255
     b32:	6f ef       	ldi	r22, 0xFF	; 255
     b34:	70 e0       	ldi	r23, 0x00	; 0
     b36:	f7 01       	movw	r30, r14
     b38:	40 83       	st	Z, r20
     b3a:	51 83       	std	Z+1, r21	; 0x01
     b3c:	62 83       	std	Z+2, r22	; 0x02
     b3e:	73 83       	std	Z+3, r23	; 0x03
     b40:	1a c0       	rjmp	.+52     	; 0xb76 <calculateTopRegister+0x2cc>
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	9f ef       	ldi	r25, 0xFF	; 255
     b46:	af ef       	ldi	r26, 0xFF	; 255
     b48:	b0 e0       	ldi	r27, 0x00	; 0
     b4a:	f7 01       	movw	r30, r14
     b4c:	80 83       	st	Z, r24
     b4e:	91 83       	std	Z+1, r25	; 0x01
     b50:	a2 83       	std	Z+2, r26	; 0x02
     b52:	b3 83       	std	Z+3, r27	; 0x03
     b54:	64 e8       	ldi	r22, 0x84	; 132
     b56:	7e e1       	ldi	r23, 0x1E	; 30
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	a5 01       	movw	r20, r10
     b5e:	94 01       	movw	r18, r8
     b60:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
     b64:	da 01       	movw	r26, r20
     b66:	c9 01       	movw	r24, r18
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	a1 09       	sbc	r26, r1
     b6c:	b1 09       	sbc	r27, r1
     b6e:	03 c0       	rjmp	.+6      	; 0xb76 <calculateTopRegister+0x2cc>
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	dc 01       	movw	r26, r24
     b76:	0f 90       	pop	r0
     b78:	0f 90       	pop	r0
     b7a:	0f 90       	pop	r0
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	bf 90       	pop	r11
     b8e:	af 90       	pop	r10
     b90:	9f 90       	pop	r9
     b92:	8f 90       	pop	r8
     b94:	08 95       	ret

00000b96 <__vector_15>:
     b96:	1f 92       	push	r1
     b98:	0f 92       	push	r0
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	0f 92       	push	r0
     b9e:	11 24       	eor	r1, r1
     ba0:	0b b6       	in	r0, 0x3b	; 59
     ba2:	0f 92       	push	r0
     ba4:	2f 93       	push	r18
     ba6:	3f 93       	push	r19
     ba8:	4f 93       	push	r20
     baa:	5f 93       	push	r21
     bac:	6f 93       	push	r22
     bae:	7f 93       	push	r23
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	af 93       	push	r26
     bb6:	bf 93       	push	r27
     bb8:	ef 93       	push	r30
     bba:	ff 93       	push	r31
     bbc:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <p_timer1Callbacks>
     bc0:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <p_timer1Callbacks+0x1>
     bc4:	09 95       	icall
     bc6:	ff 91       	pop	r31
     bc8:	ef 91       	pop	r30
     bca:	bf 91       	pop	r27
     bcc:	af 91       	pop	r26
     bce:	9f 91       	pop	r25
     bd0:	8f 91       	pop	r24
     bd2:	7f 91       	pop	r23
     bd4:	6f 91       	pop	r22
     bd6:	5f 91       	pop	r21
     bd8:	4f 91       	pop	r20
     bda:	3f 91       	pop	r19
     bdc:	2f 91       	pop	r18
     bde:	0f 90       	pop	r0
     be0:	0b be       	out	0x3b, r0	; 59
     be2:	0f 90       	pop	r0
     be4:	0f be       	out	0x3f, r0	; 63
     be6:	0f 90       	pop	r0
     be8:	1f 90       	pop	r1
     bea:	18 95       	reti

00000bec <__vector_13>:
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
     bf6:	0b b6       	in	r0, 0x3b	; 59
     bf8:	0f 92       	push	r0
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	2f 93       	push	r18
     c00:	3f 93       	push	r19
     c02:	4f 93       	push	r20
     c04:	5f 93       	push	r21
     c06:	6f 93       	push	r22
     c08:	7f 93       	push	r23
     c0a:	8f 93       	push	r24
     c0c:	9f 93       	push	r25
     c0e:	af 93       	push	r26
     c10:	bf 93       	push	r27
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	ef 93       	push	r30
     c18:	ff 93       	push	r31
     c1a:	c1 e8       	ldi	r28, 0x81	; 129
     c1c:	d0 e0       	ldi	r29, 0x00	; 0
     c1e:	88 81       	ld	r24, Y
     c20:	64 e0       	ldi	r22, 0x04	; 4
     c22:	d2 dd       	rcall	.-1116   	; 0x7c8 <checkBit>
     c24:	18 2f       	mov	r17, r24
     c26:	88 81       	ld	r24, Y
     c28:	63 e0       	ldi	r22, 0x03	; 3
     c2a:	ce dd       	rcall	.-1124   	; 0x7c8 <checkBit>
     c2c:	c1 2f       	mov	r28, r17
     c2e:	cc 0f       	add	r28, r28
     c30:	cc 0f       	add	r28, r28
     c32:	cc 0f       	add	r28, r28
     c34:	24 e0       	ldi	r18, 0x04	; 4
     c36:	82 9f       	mul	r24, r18
     c38:	c0 01       	movw	r24, r0
     c3a:	11 24       	eor	r1, r1
     c3c:	c8 2b       	or	r28, r24
     c3e:	00 e8       	ldi	r16, 0x80	; 128
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	f8 01       	movw	r30, r16
     c44:	80 81       	ld	r24, Z
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	bf dd       	rcall	.-1154   	; 0x7c8 <checkBit>
     c4a:	d8 2f       	mov	r29, r24
     c4c:	f8 01       	movw	r30, r16
     c4e:	80 81       	ld	r24, Z
     c50:	60 e0       	ldi	r22, 0x00	; 0
     c52:	ba dd       	rcall	.-1164   	; 0x7c8 <checkBit>
     c54:	dd 0f       	add	r29, r29
     c56:	8c 2b       	or	r24, r28
     c58:	8d 2b       	or	r24, r29
     c5a:	88 30       	cpi	r24, 0x08	; 8
     c5c:	18 f4       	brcc	.+6      	; 0xc64 <__vector_13+0x78>
     c5e:	84 30       	cpi	r24, 0x04	; 4
     c60:	19 f4       	brne	.+6      	; 0xc68 <__vector_13+0x7c>
     c62:	08 c0       	rjmp	.+16     	; 0xc74 <__vector_13+0x88>
     c64:	80 fd       	sbrc	r24, 0
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <__vector_13+0x88>
     c68:	e0 91 eb 03 	lds	r30, 0x03EB	; 0x8003eb <p_timer1Callbacks+0x2>
     c6c:	f0 91 ec 03 	lds	r31, 0x03EC	; 0x8003ec <p_timer1Callbacks+0x3>
     c70:	09 95       	icall
     c72:	05 c0       	rjmp	.+10     	; 0xc7e <__vector_13+0x92>
     c74:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <p_timer1Callbacks>
     c78:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <p_timer1Callbacks+0x1>
     c7c:	09 95       	icall
     c7e:	ff 91       	pop	r31
     c80:	ef 91       	pop	r30
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	bf 91       	pop	r27
     c88:	af 91       	pop	r26
     c8a:	9f 91       	pop	r25
     c8c:	8f 91       	pop	r24
     c8e:	7f 91       	pop	r23
     c90:	6f 91       	pop	r22
     c92:	5f 91       	pop	r21
     c94:	4f 91       	pop	r20
     c96:	3f 91       	pop	r19
     c98:	2f 91       	pop	r18
     c9a:	1f 91       	pop	r17
     c9c:	0f 91       	pop	r16
     c9e:	0f 90       	pop	r0
     ca0:	0b be       	out	0x3b, r0	; 59
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0f 90       	pop	r0
     ca8:	1f 90       	pop	r1
     caa:	18 95       	reti

00000cac <__vector_14>:
     cac:	1f 92       	push	r1
     cae:	0f 92       	push	r0
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	0f 92       	push	r0
     cb4:	11 24       	eor	r1, r1
     cb6:	0b b6       	in	r0, 0x3b	; 59
     cb8:	0f 92       	push	r0
     cba:	2f 93       	push	r18
     cbc:	3f 93       	push	r19
     cbe:	4f 93       	push	r20
     cc0:	5f 93       	push	r21
     cc2:	6f 93       	push	r22
     cc4:	7f 93       	push	r23
     cc6:	8f 93       	push	r24
     cc8:	9f 93       	push	r25
     cca:	af 93       	push	r26
     ccc:	bf 93       	push	r27
     cce:	ef 93       	push	r30
     cd0:	ff 93       	push	r31
     cd2:	e0 91 ed 03 	lds	r30, 0x03ED	; 0x8003ed <p_timer1Callbacks+0x4>
     cd6:	f0 91 ee 03 	lds	r31, 0x03EE	; 0x8003ee <p_timer1Callbacks+0x5>
     cda:	09 95       	icall
     cdc:	ff 91       	pop	r31
     cde:	ef 91       	pop	r30
     ce0:	bf 91       	pop	r27
     ce2:	af 91       	pop	r26
     ce4:	9f 91       	pop	r25
     ce6:	8f 91       	pop	r24
     ce8:	7f 91       	pop	r23
     cea:	6f 91       	pop	r22
     cec:	5f 91       	pop	r21
     cee:	4f 91       	pop	r20
     cf0:	3f 91       	pop	r19
     cf2:	2f 91       	pop	r18
     cf4:	0f 90       	pop	r0
     cf6:	0b be       	out	0x3b, r0	; 59
     cf8:	0f 90       	pop	r0
     cfa:	0f be       	out	0x3f, r0	; 63
     cfc:	0f 90       	pop	r0
     cfe:	1f 90       	pop	r1
     d00:	18 95       	reti

00000d02 <__vector_12>:
     d02:	1f 92       	push	r1
     d04:	0f 92       	push	r0
     d06:	0f b6       	in	r0, 0x3f	; 63
     d08:	0f 92       	push	r0
     d0a:	11 24       	eor	r1, r1
     d0c:	0b b6       	in	r0, 0x3b	; 59
     d0e:	0f 92       	push	r0
     d10:	0f 93       	push	r16
     d12:	1f 93       	push	r17
     d14:	2f 93       	push	r18
     d16:	3f 93       	push	r19
     d18:	4f 93       	push	r20
     d1a:	5f 93       	push	r21
     d1c:	6f 93       	push	r22
     d1e:	7f 93       	push	r23
     d20:	8f 93       	push	r24
     d22:	9f 93       	push	r25
     d24:	af 93       	push	r26
     d26:	bf 93       	push	r27
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
     d30:	c1 e8       	ldi	r28, 0x81	; 129
     d32:	d0 e0       	ldi	r29, 0x00	; 0
     d34:	88 81       	ld	r24, Y
     d36:	64 e0       	ldi	r22, 0x04	; 4
     d38:	47 dd       	rcall	.-1394   	; 0x7c8 <checkBit>
     d3a:	18 2f       	mov	r17, r24
     d3c:	88 81       	ld	r24, Y
     d3e:	63 e0       	ldi	r22, 0x03	; 3
     d40:	43 dd       	rcall	.-1402   	; 0x7c8 <checkBit>
     d42:	c1 2f       	mov	r28, r17
     d44:	cc 0f       	add	r28, r28
     d46:	cc 0f       	add	r28, r28
     d48:	cc 0f       	add	r28, r28
     d4a:	24 e0       	ldi	r18, 0x04	; 4
     d4c:	82 9f       	mul	r24, r18
     d4e:	c0 01       	movw	r24, r0
     d50:	11 24       	eor	r1, r1
     d52:	c8 2b       	or	r28, r24
     d54:	00 e8       	ldi	r16, 0x80	; 128
     d56:	10 e0       	ldi	r17, 0x00	; 0
     d58:	f8 01       	movw	r30, r16
     d5a:	80 81       	ld	r24, Z
     d5c:	61 e0       	ldi	r22, 0x01	; 1
     d5e:	34 dd       	rcall	.-1432   	; 0x7c8 <checkBit>
     d60:	d8 2f       	mov	r29, r24
     d62:	f8 01       	movw	r30, r16
     d64:	80 81       	ld	r24, Z
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	2f dd       	rcall	.-1442   	; 0x7c8 <checkBit>
     d6a:	dd 0f       	add	r29, r29
     d6c:	8c 2b       	or	r24, r28
     d6e:	8d 2b       	or	r24, r29
     d70:	88 30       	cpi	r24, 0x08	; 8
     d72:	10 f0       	brcs	.+4      	; 0xd78 <__vector_12+0x76>
     d74:	80 ff       	sbrs	r24, 0
     d76:	06 c0       	rjmp	.+12     	; 0xd84 <__vector_12+0x82>
     d78:	e0 91 ef 03 	lds	r30, 0x03EF	; 0x8003ef <p_timer1Callbacks+0x6>
     d7c:	f0 91 f0 03 	lds	r31, 0x03F0	; 0x8003f0 <p_timer1Callbacks+0x7>
     d80:	09 95       	icall
     d82:	05 c0       	rjmp	.+10     	; 0xd8e <__vector_12+0x8c>
     d84:	e0 91 e9 03 	lds	r30, 0x03E9	; 0x8003e9 <p_timer1Callbacks>
     d88:	f0 91 ea 03 	lds	r31, 0x03EA	; 0x8003ea <p_timer1Callbacks+0x1>
     d8c:	09 95       	icall
     d8e:	ff 91       	pop	r31
     d90:	ef 91       	pop	r30
     d92:	df 91       	pop	r29
     d94:	cf 91       	pop	r28
     d96:	bf 91       	pop	r27
     d98:	af 91       	pop	r26
     d9a:	9f 91       	pop	r25
     d9c:	8f 91       	pop	r24
     d9e:	7f 91       	pop	r23
     da0:	6f 91       	pop	r22
     da2:	5f 91       	pop	r21
     da4:	4f 91       	pop	r20
     da6:	3f 91       	pop	r19
     da8:	2f 91       	pop	r18
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	0f 90       	pop	r0
     db0:	0b be       	out	0x3b, r0	; 59
     db2:	0f 90       	pop	r0
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	0f 90       	pop	r0
     db8:	1f 90       	pop	r1
     dba:	18 95       	reti

00000dbc <__vector_11>:
     dbc:	1f 92       	push	r1
     dbe:	0f 92       	push	r0
     dc0:	0f b6       	in	r0, 0x3f	; 63
     dc2:	0f 92       	push	r0
     dc4:	11 24       	eor	r1, r1
     dc6:	0b b6       	in	r0, 0x3b	; 59
     dc8:	0f 92       	push	r0
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
     de2:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <p_timer2Callbacks>
     de6:	f0 91 f4 03 	lds	r31, 0x03F4	; 0x8003f4 <p_timer2Callbacks+0x1>
     dea:	09 95       	icall
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0b be       	out	0x3b, r0	; 59
     e08:	0f 90       	pop	r0
     e0a:	0f be       	out	0x3f, r0	; 63
     e0c:	0f 90       	pop	r0
     e0e:	1f 90       	pop	r1
     e10:	18 95       	reti

00000e12 <__vector_9>:
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	0b b6       	in	r0, 0x3b	; 59
     e1e:	0f 92       	push	r0
     e20:	2f 93       	push	r18
     e22:	3f 93       	push	r19
     e24:	4f 93       	push	r20
     e26:	5f 93       	push	r21
     e28:	6f 93       	push	r22
     e2a:	7f 93       	push	r23
     e2c:	8f 93       	push	r24
     e2e:	9f 93       	push	r25
     e30:	af 93       	push	r26
     e32:	bf 93       	push	r27
     e34:	ef 93       	push	r30
     e36:	ff 93       	push	r31
     e38:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
     e3c:	63 e0       	ldi	r22, 0x03	; 3
     e3e:	c4 dc       	rcall	.-1656   	; 0x7c8 <checkBit>
     e40:	81 11       	cpse	r24, r1
     e42:	0b c0       	rjmp	.+22     	; 0xe5a <__vector_9+0x48>
     e44:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e48:	83 70       	andi	r24, 0x03	; 3
     e4a:	82 30       	cpi	r24, 0x02	; 2
     e4c:	31 f0       	breq	.+12     	; 0xe5a <__vector_9+0x48>
     e4e:	e0 91 f5 03 	lds	r30, 0x03F5	; 0x8003f5 <p_timer2Callbacks+0x2>
     e52:	f0 91 f6 03 	lds	r31, 0x03F6	; 0x8003f6 <p_timer2Callbacks+0x3>
     e56:	09 95       	icall
     e58:	05 c0       	rjmp	.+10     	; 0xe64 <__vector_9+0x52>
     e5a:	e0 91 f3 03 	lds	r30, 0x03F3	; 0x8003f3 <p_timer2Callbacks>
     e5e:	f0 91 f4 03 	lds	r31, 0x03F4	; 0x8003f4 <p_timer2Callbacks+0x1>
     e62:	09 95       	icall
     e64:	ff 91       	pop	r31
     e66:	ef 91       	pop	r30
     e68:	bf 91       	pop	r27
     e6a:	af 91       	pop	r26
     e6c:	9f 91       	pop	r25
     e6e:	8f 91       	pop	r24
     e70:	7f 91       	pop	r23
     e72:	6f 91       	pop	r22
     e74:	5f 91       	pop	r21
     e76:	4f 91       	pop	r20
     e78:	3f 91       	pop	r19
     e7a:	2f 91       	pop	r18
     e7c:	0f 90       	pop	r0
     e7e:	0b be       	out	0x3b, r0	; 59
     e80:	0f 90       	pop	r0
     e82:	0f be       	out	0x3f, r0	; 63
     e84:	0f 90       	pop	r0
     e86:	1f 90       	pop	r1
     e88:	18 95       	reti

00000e8a <__vector_10>:
     e8a:	1f 92       	push	r1
     e8c:	0f 92       	push	r0
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	0f 92       	push	r0
     e92:	11 24       	eor	r1, r1
     e94:	0b b6       	in	r0, 0x3b	; 59
     e96:	0f 92       	push	r0
     e98:	2f 93       	push	r18
     e9a:	3f 93       	push	r19
     e9c:	4f 93       	push	r20
     e9e:	5f 93       	push	r21
     ea0:	6f 93       	push	r22
     ea2:	7f 93       	push	r23
     ea4:	8f 93       	push	r24
     ea6:	9f 93       	push	r25
     ea8:	af 93       	push	r26
     eaa:	bf 93       	push	r27
     eac:	ef 93       	push	r30
     eae:	ff 93       	push	r31
     eb0:	e0 91 f7 03 	lds	r30, 0x03F7	; 0x8003f7 <p_timer2Callbacks+0x4>
     eb4:	f0 91 f8 03 	lds	r31, 0x03F8	; 0x8003f8 <p_timer2Callbacks+0x5>
     eb8:	09 95       	icall
     eba:	ff 91       	pop	r31
     ebc:	ef 91       	pop	r30
     ebe:	bf 91       	pop	r27
     ec0:	af 91       	pop	r26
     ec2:	9f 91       	pop	r25
     ec4:	8f 91       	pop	r24
     ec6:	7f 91       	pop	r23
     ec8:	6f 91       	pop	r22
     eca:	5f 91       	pop	r21
     ecc:	4f 91       	pop	r20
     ece:	3f 91       	pop	r19
     ed0:	2f 91       	pop	r18
     ed2:	0f 90       	pop	r0
     ed4:	0b be       	out	0x3b, r0	; 59
     ed6:	0f 90       	pop	r0
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	0f 90       	pop	r0
     edc:	1f 90       	pop	r1
     ede:	18 95       	reti

00000ee0 <timer_init>:
     ee0:	ef 92       	push	r14
     ee2:	ff 92       	push	r15
     ee4:	0f 93       	push	r16
     ee6:	1f 93       	push	r17
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	29 97       	sbiw	r28, 0x09	; 9
     ef2:	0f b6       	in	r0, 0x3f	; 63
     ef4:	f8 94       	cli
     ef6:	de bf       	out	0x3e, r29	; 62
     ef8:	0f be       	out	0x3f, r0	; 63
     efa:	cd bf       	out	0x3d, r28	; 61
     efc:	4d 83       	std	Y+5, r20	; 0x05
     efe:	5e 83       	std	Y+6, r21	; 0x06
     f00:	6f 83       	std	Y+7, r22	; 0x07
     f02:	78 87       	std	Y+8, r23	; 0x08
     f04:	89 87       	std	Y+9, r24	; 0x09
     f06:	0e 81       	ldd	r16, Y+6	; 0x06
     f08:	1f 81       	ldd	r17, Y+7	; 0x07
     f0a:	28 85       	ldd	r18, Y+8	; 0x08
     f0c:	39 85       	ldd	r19, Y+9	; 0x09
     f0e:	19 82       	std	Y+1, r1	; 0x01
     f10:	1a 82       	std	Y+2, r1	; 0x02
     f12:	1b 82       	std	Y+3, r1	; 0x03
     f14:	1c 82       	std	Y+4, r1	; 0x04
     f16:	41 30       	cpi	r20, 0x01	; 1
     f18:	21 f0       	breq	.+8      	; 0xf22 <timer_init+0x42>
     f1a:	42 30       	cpi	r20, 0x02	; 2
     f1c:	09 f4       	brne	.+2      	; 0xf20 <timer_init+0x40>
     f1e:	95 c0       	rjmp	.+298    	; 0x104a <timer_init+0x16a>
     f20:	1e c1       	rjmp	.+572    	; 0x115e <timer_init+0x27e>
     f22:	09 3f       	cpi	r16, 0xF9	; 249
     f24:	8f ef       	ldi	r24, 0xFF	; 255
     f26:	18 07       	cpc	r17, r24
     f28:	28 07       	cpc	r18, r24
     f2a:	31 05       	cpc	r19, r1
     f2c:	28 f0       	brcs	.+10     	; 0xf38 <timer_init+0x58>
     f2e:	09 83       	std	Y+1, r16	; 0x01
     f30:	1a 83       	std	Y+2, r17	; 0x02
     f32:	2b 83       	std	Y+3, r18	; 0x03
     f34:	3c 83       	std	Y+4, r19	; 0x04
     f36:	15 c0       	rjmp	.+42     	; 0xf62 <timer_init+0x82>
     f38:	ce 01       	movw	r24, r28
     f3a:	01 96       	adiw	r24, 0x01	; 1
     f3c:	7c 01       	movw	r14, r24
     f3e:	4d 81       	ldd	r20, Y+5	; 0x05
     f40:	5e 81       	ldd	r21, Y+6	; 0x06
     f42:	6f 81       	ldd	r22, Y+7	; 0x07
     f44:	78 85       	ldd	r23, Y+8	; 0x08
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	b0 dc       	rcall	.-1696   	; 0x8aa <calculateTopRegister>
     f4a:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
     f4e:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
     f52:	64 e0       	ldi	r22, 0x04	; 4
     f54:	81 e8       	ldi	r24, 0x81	; 129
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	1e dc       	rcall	.-1988   	; 0x796 <setBit>
     f5a:	63 e0       	ldi	r22, 0x03	; 3
     f5c:	81 e8       	ldi	r24, 0x81	; 129
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	1a dc       	rcall	.-1996   	; 0x796 <setBit>
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	ab 81       	ldd	r26, Y+3	; 0x03
     f68:	bc 81       	ldd	r27, Y+4	; 0x04
     f6a:	8c 3f       	cpi	r24, 0xFC	; 252
     f6c:	2f ef       	ldi	r18, 0xFF	; 255
     f6e:	92 07       	cpc	r25, r18
     f70:	a2 07       	cpc	r26, r18
     f72:	b1 05       	cpc	r27, r1
     f74:	59 f1       	breq	.+86     	; 0xfcc <timer_init+0xec>
     f76:	60 f4       	brcc	.+24     	; 0xf90 <timer_init+0xb0>
     f78:	89 3f       	cpi	r24, 0xF9	; 249
     f7a:	2f ef       	ldi	r18, 0xFF	; 255
     f7c:	92 07       	cpc	r25, r18
     f7e:	a2 07       	cpc	r26, r18
     f80:	b1 05       	cpc	r27, r1
     f82:	91 f0       	breq	.+36     	; 0xfa8 <timer_init+0xc8>
     f84:	8a 3f       	cpi	r24, 0xFA	; 250
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	af 4f       	sbci	r26, 0xFF	; 255
     f8a:	b1 05       	cpc	r27, r1
     f8c:	b1 f0       	breq	.+44     	; 0xfba <timer_init+0xda>
     f8e:	38 c0       	rjmp	.+112    	; 0x1000 <timer_init+0x120>
     f90:	8e 3f       	cpi	r24, 0xFE	; 254
     f92:	2f ef       	ldi	r18, 0xFF	; 255
     f94:	92 07       	cpc	r25, r18
     f96:	a2 07       	cpc	r26, r18
     f98:	b1 05       	cpc	r27, r1
     f9a:	09 f1       	breq	.+66     	; 0xfde <timer_init+0xfe>
     f9c:	8f 3f       	cpi	r24, 0xFF	; 255
     f9e:	9f 4f       	sbci	r25, 0xFF	; 255
     fa0:	af 4f       	sbci	r26, 0xFF	; 255
     fa2:	b1 05       	cpc	r27, r1
     fa4:	29 f1       	breq	.+74     	; 0xff0 <timer_init+0x110>
     fa6:	2c c0       	rjmp	.+88     	; 0x1000 <timer_init+0x120>
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	ab 83       	std	Y+3, r26	; 0x03
     fb6:	bc 83       	std	Y+4, r27	; 0x04
     fb8:	23 c0       	rjmp	.+70     	; 0x1000 <timer_init+0x120>
     fba:	82 e0       	ldi	r24, 0x02	; 2
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	a0 e0       	ldi	r26, 0x00	; 0
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	89 83       	std	Y+1, r24	; 0x01
     fc4:	9a 83       	std	Y+2, r25	; 0x02
     fc6:	ab 83       	std	Y+3, r26	; 0x03
     fc8:	bc 83       	std	Y+4, r27	; 0x04
     fca:	1a c0       	rjmp	.+52     	; 0x1000 <timer_init+0x120>
     fcc:	83 e0       	ldi	r24, 0x03	; 3
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	9a 83       	std	Y+2, r25	; 0x02
     fd8:	ab 83       	std	Y+3, r26	; 0x03
     fda:	bc 83       	std	Y+4, r27	; 0x04
     fdc:	11 c0       	rjmp	.+34     	; 0x1000 <timer_init+0x120>
     fde:	84 e0       	ldi	r24, 0x04	; 4
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	a0 e0       	ldi	r26, 0x00	; 0
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	ab 83       	std	Y+3, r26	; 0x03
     fec:	bc 83       	std	Y+4, r27	; 0x04
     fee:	08 c0       	rjmp	.+16     	; 0x1000 <timer_init+0x120>
     ff0:	85 e0       	ldi	r24, 0x05	; 5
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	a0 e0       	ldi	r26, 0x00	; 0
     ff6:	b0 e0       	ldi	r27, 0x00	; 0
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	ab 83       	std	Y+3, r26	; 0x03
     ffe:	bc 83       	std	Y+4, r27	; 0x04
    1000:	49 81       	ldd	r20, Y+1	; 0x01
    1002:	5a 81       	ldd	r21, Y+2	; 0x02
    1004:	6b 81       	ldd	r22, Y+3	; 0x03
    1006:	7c 81       	ldd	r23, Y+4	; 0x04
    1008:	76 95       	lsr	r23
    100a:	67 95       	ror	r22
    100c:	57 95       	ror	r21
    100e:	47 95       	ror	r20
    1010:	76 95       	lsr	r23
    1012:	67 95       	ror	r22
    1014:	57 95       	ror	r21
    1016:	47 95       	ror	r20
    1018:	41 70       	andi	r20, 0x01	; 1
    101a:	62 e0       	ldi	r22, 0x02	; 2
    101c:	81 ef       	ldi	r24, 0xF1	; 241
    101e:	93 e0       	ldi	r25, 0x03	; 3
    1020:	a2 db       	rcall	.-2236   	; 0x766 <updateBit>
    1022:	49 81       	ldd	r20, Y+1	; 0x01
    1024:	5a 81       	ldd	r21, Y+2	; 0x02
    1026:	6b 81       	ldd	r22, Y+3	; 0x03
    1028:	7c 81       	ldd	r23, Y+4	; 0x04
    102a:	76 95       	lsr	r23
    102c:	67 95       	ror	r22
    102e:	57 95       	ror	r21
    1030:	47 95       	ror	r20
    1032:	41 70       	andi	r20, 0x01	; 1
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	81 ef       	ldi	r24, 0xF1	; 241
    1038:	93 e0       	ldi	r25, 0x03	; 3
    103a:	95 db       	rcall	.-2262   	; 0x766 <updateBit>
    103c:	49 81       	ldd	r20, Y+1	; 0x01
    103e:	41 70       	andi	r20, 0x01	; 1
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	81 ef       	ldi	r24, 0xF1	; 241
    1044:	93 e0       	ldi	r25, 0x03	; 3
    1046:	8f db       	rcall	.-2274   	; 0x766 <updateBit>
    1048:	8a c0       	rjmp	.+276    	; 0x115e <timer_init+0x27e>
    104a:	09 3f       	cpi	r16, 0xF9	; 249
    104c:	8f ef       	ldi	r24, 0xFF	; 255
    104e:	18 07       	cpc	r17, r24
    1050:	28 07       	cpc	r18, r24
    1052:	31 05       	cpc	r19, r1
    1054:	28 f0       	brcs	.+10     	; 0x1060 <timer_init+0x180>
    1056:	09 83       	std	Y+1, r16	; 0x01
    1058:	1a 83       	std	Y+2, r17	; 0x02
    105a:	2b 83       	std	Y+3, r18	; 0x03
    105c:	3c 83       	std	Y+4, r19	; 0x04
    105e:	0f c0       	rjmp	.+30     	; 0x107e <timer_init+0x19e>
    1060:	ce 01       	movw	r24, r28
    1062:	01 96       	adiw	r24, 0x01	; 1
    1064:	7c 01       	movw	r14, r24
    1066:	4d 81       	ldd	r20, Y+5	; 0x05
    1068:	5e 81       	ldd	r21, Y+6	; 0x06
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	1c dc       	rcall	.-1992   	; 0x8aa <calculateTopRegister>
    1072:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
    1076:	61 e0       	ldi	r22, 0x01	; 1
    1078:	80 eb       	ldi	r24, 0xB0	; 176
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	8c db       	rcall	.-2280   	; 0x796 <setBit>
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	9a 81       	ldd	r25, Y+2	; 0x02
    1082:	ab 81       	ldd	r26, Y+3	; 0x03
    1084:	bc 81       	ldd	r27, Y+4	; 0x04
    1086:	fc 01       	movw	r30, r24
    1088:	37 96       	adiw	r30, 0x07	; 7
    108a:	e7 30       	cpi	r30, 0x07	; 7
    108c:	f1 05       	cpc	r31, r1
    108e:	08 f0       	brcs	.+2      	; 0x1092 <timer_init+0x1b2>
    1090:	42 c0       	rjmp	.+132    	; 0x1116 <timer_init+0x236>
    1092:	ea 5b       	subi	r30, 0xBA	; 186
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	0c 94 20 33 	jmp	0x6640	; 0x6640 <__tablejump2__>
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	89 83       	std	Y+1, r24	; 0x01
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	ab 83       	std	Y+3, r26	; 0x03
    10a8:	bc 83       	std	Y+4, r27	; 0x04
    10aa:	35 c0       	rjmp	.+106    	; 0x1116 <timer_init+0x236>
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	a0 e0       	ldi	r26, 0x00	; 0
    10b2:	b0 e0       	ldi	r27, 0x00	; 0
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	9a 83       	std	Y+2, r25	; 0x02
    10b8:	ab 83       	std	Y+3, r26	; 0x03
    10ba:	bc 83       	std	Y+4, r27	; 0x04
    10bc:	2c c0       	rjmp	.+88     	; 0x1116 <timer_init+0x236>
    10be:	83 e0       	ldi	r24, 0x03	; 3
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	a0 e0       	ldi	r26, 0x00	; 0
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	9a 83       	std	Y+2, r25	; 0x02
    10ca:	ab 83       	std	Y+3, r26	; 0x03
    10cc:	bc 83       	std	Y+4, r27	; 0x04
    10ce:	23 c0       	rjmp	.+70     	; 0x1116 <timer_init+0x236>
    10d0:	84 e0       	ldi	r24, 0x04	; 4
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	89 83       	std	Y+1, r24	; 0x01
    10da:	9a 83       	std	Y+2, r25	; 0x02
    10dc:	ab 83       	std	Y+3, r26	; 0x03
    10de:	bc 83       	std	Y+4, r27	; 0x04
    10e0:	1a c0       	rjmp	.+52     	; 0x1116 <timer_init+0x236>
    10e2:	85 e0       	ldi	r24, 0x05	; 5
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	a0 e0       	ldi	r26, 0x00	; 0
    10e8:	b0 e0       	ldi	r27, 0x00	; 0
    10ea:	89 83       	std	Y+1, r24	; 0x01
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	ab 83       	std	Y+3, r26	; 0x03
    10f0:	bc 83       	std	Y+4, r27	; 0x04
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <timer_init+0x236>
    10f4:	86 e0       	ldi	r24, 0x06	; 6
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	a0 e0       	ldi	r26, 0x00	; 0
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	89 83       	std	Y+1, r24	; 0x01
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	ab 83       	std	Y+3, r26	; 0x03
    1102:	bc 83       	std	Y+4, r27	; 0x04
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <timer_init+0x236>
    1106:	87 e0       	ldi	r24, 0x07	; 7
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	a0 e0       	ldi	r26, 0x00	; 0
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	89 83       	std	Y+1, r24	; 0x01
    1110:	9a 83       	std	Y+2, r25	; 0x02
    1112:	ab 83       	std	Y+3, r26	; 0x03
    1114:	bc 83       	std	Y+4, r27	; 0x04
    1116:	49 81       	ldd	r20, Y+1	; 0x01
    1118:	5a 81       	ldd	r21, Y+2	; 0x02
    111a:	6b 81       	ldd	r22, Y+3	; 0x03
    111c:	7c 81       	ldd	r23, Y+4	; 0x04
    111e:	76 95       	lsr	r23
    1120:	67 95       	ror	r22
    1122:	57 95       	ror	r21
    1124:	47 95       	ror	r20
    1126:	76 95       	lsr	r23
    1128:	67 95       	ror	r22
    112a:	57 95       	ror	r21
    112c:	47 95       	ror	r20
    112e:	41 70       	andi	r20, 0x01	; 1
    1130:	62 e0       	ldi	r22, 0x02	; 2
    1132:	82 ef       	ldi	r24, 0xF2	; 242
    1134:	93 e0       	ldi	r25, 0x03	; 3
    1136:	17 db       	rcall	.-2514   	; 0x766 <updateBit>
    1138:	49 81       	ldd	r20, Y+1	; 0x01
    113a:	5a 81       	ldd	r21, Y+2	; 0x02
    113c:	6b 81       	ldd	r22, Y+3	; 0x03
    113e:	7c 81       	ldd	r23, Y+4	; 0x04
    1140:	76 95       	lsr	r23
    1142:	67 95       	ror	r22
    1144:	57 95       	ror	r21
    1146:	47 95       	ror	r20
    1148:	41 70       	andi	r20, 0x01	; 1
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	82 ef       	ldi	r24, 0xF2	; 242
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	0a db       	rcall	.-2540   	; 0x766 <updateBit>
    1152:	49 81       	ldd	r20, Y+1	; 0x01
    1154:	41 70       	andi	r20, 0x01	; 1
    1156:	60 e0       	ldi	r22, 0x00	; 0
    1158:	82 ef       	ldi	r24, 0xF2	; 242
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	04 db       	rcall	.-2552   	; 0x766 <updateBit>
    115e:	29 96       	adiw	r28, 0x09	; 9
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <timer_start>:
    1178:	cf 93       	push	r28
    117a:	df 93       	push	r29
    117c:	00 d0       	rcall	.+0      	; 0x117e <timer_start+0x6>
    117e:	00 d0       	rcall	.+0      	; 0x1180 <timer_start+0x8>
    1180:	1f 92       	push	r1
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	41 30       	cpi	r20, 0x01	; 1
    1188:	19 f0       	breq	.+6      	; 0x1190 <timer_start+0x18>
    118a:	42 30       	cpi	r20, 0x02	; 2
    118c:	d1 f0       	breq	.+52     	; 0x11c2 <timer_start+0x4a>
    118e:	31 c0       	rjmp	.+98     	; 0x11f2 <timer_start+0x7a>
    1190:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <u8_timer1ClockSource>
    1194:	42 fb       	bst	r20, 2
    1196:	44 27       	eor	r20, r20
    1198:	40 f9       	bld	r20, 0
    119a:	62 e0       	ldi	r22, 0x02	; 2
    119c:	81 e8       	ldi	r24, 0x81	; 129
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	e2 da       	rcall	.-2620   	; 0x766 <updateBit>
    11a2:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <u8_timer1ClockSource>
    11a6:	46 95       	lsr	r20
    11a8:	41 70       	andi	r20, 0x01	; 1
    11aa:	61 e0       	ldi	r22, 0x01	; 1
    11ac:	81 e8       	ldi	r24, 0x81	; 129
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	da da       	rcall	.-2636   	; 0x766 <updateBit>
    11b2:	40 91 f1 03 	lds	r20, 0x03F1	; 0x8003f1 <u8_timer1ClockSource>
    11b6:	41 70       	andi	r20, 0x01	; 1
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	81 e8       	ldi	r24, 0x81	; 129
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	d3 da       	rcall	.-2650   	; 0x766 <updateBit>
    11c0:	18 c0       	rjmp	.+48     	; 0x11f2 <timer_start+0x7a>
    11c2:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <u8_timer2ClockSource>
    11c6:	42 fb       	bst	r20, 2
    11c8:	44 27       	eor	r20, r20
    11ca:	40 f9       	bld	r20, 0
    11cc:	62 e0       	ldi	r22, 0x02	; 2
    11ce:	81 eb       	ldi	r24, 0xB1	; 177
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	c9 da       	rcall	.-2670   	; 0x766 <updateBit>
    11d4:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <u8_timer2ClockSource>
    11d8:	46 95       	lsr	r20
    11da:	41 70       	andi	r20, 0x01	; 1
    11dc:	61 e0       	ldi	r22, 0x01	; 1
    11de:	81 eb       	ldi	r24, 0xB1	; 177
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	c1 da       	rcall	.-2686   	; 0x766 <updateBit>
    11e4:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <u8_timer2ClockSource>
    11e8:	41 70       	andi	r20, 0x01	; 1
    11ea:	60 e0       	ldi	r22, 0x00	; 0
    11ec:	81 eb       	ldi	r24, 0xB1	; 177
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	ba da       	rcall	.-2700   	; 0x766 <updateBit>
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <timer_enableInterrupt>:
    1202:	cf 92       	push	r12
    1204:	df 92       	push	r13
    1206:	ef 92       	push	r14
    1208:	ff 92       	push	r15
    120a:	0f 93       	push	r16
    120c:	1f 93       	push	r17
    120e:	cf 93       	push	r28
    1210:	df 93       	push	r29
    1212:	00 d0       	rcall	.+0      	; 0x1214 <timer_enableInterrupt+0x12>
    1214:	00 d0       	rcall	.+0      	; 0x1216 <timer_enableInterrupt+0x14>
    1216:	1f 92       	push	r1
    1218:	cd b7       	in	r28, 0x3d	; 61
    121a:	de b7       	in	r29, 0x3e	; 62
    121c:	49 83       	std	Y+1, r20	; 0x01
    121e:	5a 83       	std	Y+2, r21	; 0x02
    1220:	6b 83       	std	Y+3, r22	; 0x03
    1222:	7c 83       	std	Y+4, r23	; 0x04
    1224:	8d 83       	std	Y+5, r24	; 0x05
    1226:	02 2f       	mov	r16, r18
    1228:	41 30       	cpi	r20, 0x01	; 1
    122a:	21 f0       	breq	.+8      	; 0x1234 <timer_enableInterrupt+0x32>
    122c:	42 30       	cpi	r20, 0x02	; 2
    122e:	09 f4       	brne	.+2      	; 0x1232 <timer_enableInterrupt+0x30>
    1230:	5e c0       	rjmp	.+188    	; 0x12ee <timer_enableInterrupt+0xec>
    1232:	95 c0       	rjmp	.+298    	; 0x135e <timer_enableInterrupt+0x15c>
    1234:	0f 2e       	mov	r0, r31
    1236:	f1 e8       	ldi	r31, 0x81	; 129
    1238:	ef 2e       	mov	r14, r31
    123a:	f1 2c       	mov	r15, r1
    123c:	f0 2d       	mov	r31, r0
    123e:	f7 01       	movw	r30, r14
    1240:	80 81       	ld	r24, Z
    1242:	64 e0       	ldi	r22, 0x04	; 4
    1244:	c1 da       	rcall	.-2686   	; 0x7c8 <checkBit>
    1246:	18 2f       	mov	r17, r24
    1248:	f7 01       	movw	r30, r14
    124a:	80 81       	ld	r24, Z
    124c:	63 e0       	ldi	r22, 0x03	; 3
    124e:	bc da       	rcall	.-2696   	; 0x7c8 <checkBit>
    1250:	11 0f       	add	r17, r17
    1252:	11 0f       	add	r17, r17
    1254:	11 0f       	add	r17, r17
    1256:	f4 e0       	ldi	r31, 0x04	; 4
    1258:	8f 9f       	mul	r24, r31
    125a:	c0 01       	movw	r24, r0
    125c:	11 24       	eor	r1, r1
    125e:	18 2b       	or	r17, r24
    1260:	68 94       	set
    1262:	cc 24       	eor	r12, r12
    1264:	c7 f8       	bld	r12, 7
    1266:	d1 2c       	mov	r13, r1
    1268:	f6 01       	movw	r30, r12
    126a:	80 81       	ld	r24, Z
    126c:	61 e0       	ldi	r22, 0x01	; 1
    126e:	ac da       	rcall	.-2728   	; 0x7c8 <checkBit>
    1270:	f8 2e       	mov	r15, r24
    1272:	f6 01       	movw	r30, r12
    1274:	80 81       	ld	r24, Z
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	a7 da       	rcall	.-2738   	; 0x7c8 <checkBit>
    127a:	ff 0c       	add	r15, r15
    127c:	81 2b       	or	r24, r17
    127e:	8f 29       	or	r24, r15
    1280:	01 30       	cpi	r16, 0x01	; 1
    1282:	d9 f0       	breq	.+54     	; 0x12ba <timer_enableInterrupt+0xb8>
    1284:	28 f0       	brcs	.+10     	; 0x1290 <timer_enableInterrupt+0x8e>
    1286:	02 30       	cpi	r16, 0x02	; 2
    1288:	21 f1       	breq	.+72     	; 0x12d2 <timer_enableInterrupt+0xd0>
    128a:	03 30       	cpi	r16, 0x03	; 3
    128c:	39 f1       	breq	.+78     	; 0x12dc <timer_enableInterrupt+0xda>
    128e:	67 c0       	rjmp	.+206    	; 0x135e <timer_enableInterrupt+0x15c>
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	38 f4       	brcc	.+14     	; 0x12a2 <timer_enableInterrupt+0xa0>
    1294:	84 30       	cpi	r24, 0x04	; 4
    1296:	61 f0       	breq	.+24     	; 0x12b0 <timer_enableInterrupt+0xae>
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	8f e6       	ldi	r24, 0x6F	; 111
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	7b da       	rcall	.-2826   	; 0x796 <setBit>
    12a0:	5e c0       	rjmp	.+188    	; 0x135e <timer_enableInterrupt+0x15c>
    12a2:	80 fd       	sbrc	r24, 0
    12a4:	05 c0       	rjmp	.+10     	; 0x12b0 <timer_enableInterrupt+0xae>
    12a6:	65 e0       	ldi	r22, 0x05	; 5
    12a8:	8f e6       	ldi	r24, 0x6F	; 111
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	74 da       	rcall	.-2840   	; 0x796 <setBit>
    12ae:	57 c0       	rjmp	.+174    	; 0x135e <timer_enableInterrupt+0x15c>
    12b0:	61 e0       	ldi	r22, 0x01	; 1
    12b2:	8f e6       	ldi	r24, 0x6F	; 111
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	6f da       	rcall	.-2850   	; 0x796 <setBit>
    12b8:	52 c0       	rjmp	.+164    	; 0x135e <timer_enableInterrupt+0x15c>
    12ba:	88 30       	cpi	r24, 0x08	; 8
    12bc:	18 f4       	brcc	.+6      	; 0x12c4 <timer_enableInterrupt+0xc2>
    12be:	84 30       	cpi	r24, 0x04	; 4
    12c0:	19 f4       	brne	.+6      	; 0x12c8 <timer_enableInterrupt+0xc6>
    12c2:	4d c0       	rjmp	.+154    	; 0x135e <timer_enableInterrupt+0x15c>
    12c4:	80 fd       	sbrc	r24, 0
    12c6:	4b c0       	rjmp	.+150    	; 0x135e <timer_enableInterrupt+0x15c>
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	8f e6       	ldi	r24, 0x6F	; 111
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	63 da       	rcall	.-2874   	; 0x796 <setBit>
    12d0:	46 c0       	rjmp	.+140    	; 0x135e <timer_enableInterrupt+0x15c>
    12d2:	62 e0       	ldi	r22, 0x02	; 2
    12d4:	8f e6       	ldi	r24, 0x6F	; 111
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	5e da       	rcall	.-2884   	; 0x796 <setBit>
    12da:	41 c0       	rjmp	.+130    	; 0x135e <timer_enableInterrupt+0x15c>
    12dc:	88 30       	cpi	r24, 0x08	; 8
    12de:	10 f0       	brcs	.+4      	; 0x12e4 <timer_enableInterrupt+0xe2>
    12e0:	80 ff       	sbrs	r24, 0
    12e2:	3d c0       	rjmp	.+122    	; 0x135e <timer_enableInterrupt+0x15c>
    12e4:	65 e0       	ldi	r22, 0x05	; 5
    12e6:	8f e6       	ldi	r24, 0x6F	; 111
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	55 da       	rcall	.-2902   	; 0x796 <setBit>
    12ec:	38 c0       	rjmp	.+112    	; 0x135e <timer_enableInterrupt+0x15c>
    12ee:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    12f2:	63 e0       	ldi	r22, 0x03	; 3
    12f4:	69 da       	rcall	.-2862   	; 0x7c8 <checkBit>
    12f6:	18 2f       	mov	r17, r24
    12f8:	0f 2e       	mov	r0, r31
    12fa:	f0 eb       	ldi	r31, 0xB0	; 176
    12fc:	ef 2e       	mov	r14, r31
    12fe:	f1 2c       	mov	r15, r1
    1300:	f0 2d       	mov	r31, r0
    1302:	f7 01       	movw	r30, r14
    1304:	80 81       	ld	r24, Z
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	5f da       	rcall	.-2882   	; 0x7c8 <checkBit>
    130a:	11 0f       	add	r17, r17
    130c:	11 0f       	add	r17, r17
    130e:	88 0f       	add	r24, r24
    1310:	18 2b       	or	r17, r24
    1312:	f7 01       	movw	r30, r14
    1314:	80 81       	ld	r24, Z
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	57 da       	rcall	.-2898   	; 0x7c8 <checkBit>
    131a:	81 2b       	or	r24, r17
    131c:	01 30       	cpi	r16, 0x01	; 1
    131e:	91 f0       	breq	.+36     	; 0x1344 <timer_enableInterrupt+0x142>
    1320:	18 f0       	brcs	.+6      	; 0x1328 <timer_enableInterrupt+0x126>
    1322:	02 30       	cpi	r16, 0x02	; 2
    1324:	c1 f0       	breq	.+48     	; 0x1356 <timer_enableInterrupt+0x154>
    1326:	1b c0       	rjmp	.+54     	; 0x135e <timer_enableInterrupt+0x15c>
    1328:	84 30       	cpi	r24, 0x04	; 4
    132a:	38 f4       	brcc	.+14     	; 0x133a <timer_enableInterrupt+0x138>
    132c:	82 30       	cpi	r24, 0x02	; 2
    132e:	29 f0       	breq	.+10     	; 0x133a <timer_enableInterrupt+0x138>
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	80 e7       	ldi	r24, 0x70	; 112
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	2f da       	rcall	.-2978   	; 0x796 <setBit>
    1338:	12 c0       	rjmp	.+36     	; 0x135e <timer_enableInterrupt+0x15c>
    133a:	61 e0       	ldi	r22, 0x01	; 1
    133c:	80 e7       	ldi	r24, 0x70	; 112
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	2a da       	rcall	.-2988   	; 0x796 <setBit>
    1342:	0d c0       	rjmp	.+26     	; 0x135e <timer_enableInterrupt+0x15c>
    1344:	84 30       	cpi	r24, 0x04	; 4
    1346:	58 f4       	brcc	.+22     	; 0x135e <timer_enableInterrupt+0x15c>
    1348:	82 30       	cpi	r24, 0x02	; 2
    134a:	49 f0       	breq	.+18     	; 0x135e <timer_enableInterrupt+0x15c>
    134c:	61 e0       	ldi	r22, 0x01	; 1
    134e:	80 e7       	ldi	r24, 0x70	; 112
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	21 da       	rcall	.-3006   	; 0x796 <setBit>
    1354:	04 c0       	rjmp	.+8      	; 0x135e <timer_enableInterrupt+0x15c>
    1356:	62 e0       	ldi	r22, 0x02	; 2
    1358:	80 e7       	ldi	r24, 0x70	; 112
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	1c da       	rcall	.-3016   	; 0x796 <setBit>
    135e:	0f 90       	pop	r0
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	ff 90       	pop	r15
    1372:	ef 90       	pop	r14
    1374:	df 90       	pop	r13
    1376:	cf 90       	pop	r12
    1378:	08 95       	ret

0000137a <timer_attachInterrupt>:

void timer_attachInterrupt(timer_struct_t s_timer, timer_interruptType_enum_t e_interruptType, void (*p_function)(void))
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	cf 93       	push	r28
    1380:	df 93       	push	r29
    1382:	00 d0       	rcall	.+0      	; 0x1384 <timer_attachInterrupt+0xa>
    1384:	00 d0       	rcall	.+0      	; 0x1386 <timer_attachInterrupt+0xc>
    1386:	1f 92       	push	r1
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
	switch (s_timer.peripheral)
    138c:	41 30       	cpi	r20, 0x01	; 1
    138e:	19 f0       	breq	.+6      	; 0x1396 <timer_attachInterrupt+0x1c>
    1390:	42 30       	cpi	r20, 0x02	; 2
    1392:	51 f0       	breq	.+20     	; 0x13a8 <timer_attachInterrupt+0x2e>
    1394:	11 c0       	rjmp	.+34     	; 0x13b8 <timer_attachInterrupt+0x3e>
			p_timer0Callbacks[e_interruptType] = p_function;
		#endif
			break;
		case TIMER1:
		#ifdef TIMER1_INTERRUPT_MODE
			p_timer1Callbacks[e_interruptType] = p_function;
    1396:	e2 2f       	mov	r30, r18
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	ee 0f       	add	r30, r30
    139c:	ff 1f       	adc	r31, r31
    139e:	e7 51       	subi	r30, 0x17	; 23
    13a0:	fc 4f       	sbci	r31, 0xFC	; 252
    13a2:	11 83       	std	Z+1, r17	; 0x01
    13a4:	00 83       	st	Z, r16
		#endif
			break;
    13a6:	08 c0       	rjmp	.+16     	; 0x13b8 <timer_attachInterrupt+0x3e>
		case TIMER2:
		#ifdef TIMER2_INTERRUPT_MODE
			p_timer2Callbacks[e_interruptType] = p_function;
    13a8:	e2 2f       	mov	r30, r18
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	ee 0f       	add	r30, r30
    13ae:	ff 1f       	adc	r31, r31
    13b0:	ed 50       	subi	r30, 0x0D	; 13
    13b2:	fc 4f       	sbci	r31, 0xFC	; 252
    13b4:	11 83       	std	Z+1, r17	; 0x01
    13b6:	00 83       	st	Z, r16
		#ifdef TIMER3_INTERRUPT_MODE
			p_timer3Callbacks[e_interruptType] = p_function;
		#endif
			break;
	}
}
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	0f 90       	pop	r0
    13be:	0f 90       	pop	r0
    13c0:	0f 90       	pop	r0
    13c2:	df 91       	pop	r29
    13c4:	cf 91       	pop	r28
    13c6:	1f 91       	pop	r17
    13c8:	0f 91       	pop	r16
    13ca:	08 95       	ret

000013cc <calculateUBRR>:
			while (checkBit(UCSR1B, RXEN1) == SET);
			while (checkBit(UCSR1B, TXEN1) == SET);
		#endif
			break;
	}
}
    13cc:	4f 92       	push	r4
    13ce:	5f 92       	push	r5
    13d0:	6f 92       	push	r6
    13d2:	7f 92       	push	r7
    13d4:	8f 92       	push	r8
    13d6:	9f 92       	push	r9
    13d8:	af 92       	push	r10
    13da:	bf 92       	push	r11
    13dc:	cf 92       	push	r12
    13de:	df 92       	push	r13
    13e0:	ef 92       	push	r14
    13e2:	ff 92       	push	r15
    13e4:	cf 93       	push	r28
    13e6:	df 93       	push	r29
    13e8:	4b 01       	movw	r8, r22
    13ea:	5c 01       	movw	r10, r24
    13ec:	ea 01       	movw	r28, r20
    13ee:	0f 2e       	mov	r0, r31
    13f0:	f0 e2       	ldi	r31, 0x20	; 32
    13f2:	4f 2e       	mov	r4, r31
    13f4:	f1 ea       	ldi	r31, 0xA1	; 161
    13f6:	5f 2e       	mov	r5, r31
    13f8:	f7 e0       	ldi	r31, 0x07	; 7
    13fa:	6f 2e       	mov	r6, r31
    13fc:	71 2c       	mov	r7, r1
    13fe:	f0 2d       	mov	r31, r0
    1400:	c3 01       	movw	r24, r6
    1402:	b2 01       	movw	r22, r4
    1404:	a5 01       	movw	r20, r10
    1406:	94 01       	movw	r18, r8
    1408:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    140c:	69 01       	movw	r12, r18
    140e:	7a 01       	movw	r14, r20
    1410:	c3 01       	movw	r24, r6
    1412:	b2 01       	movw	r22, r4
    1414:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    1418:	ca 01       	movw	r24, r20
    141a:	b9 01       	movw	r22, r18
    141c:	a5 01       	movw	r20, r10
    141e:	94 01       	movw	r18, r8
    1420:	db d9       	rcall	.-3146   	; 0x7d8 <calculateError>
    1422:	44 97       	sbiw	r24, 0x14	; 20
    1424:	30 f4       	brcc	.+12     	; 0x1432 <calculateUBRR+0x66>
    1426:	d7 01       	movw	r26, r14
    1428:	c6 01       	movw	r24, r12
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	a1 09       	sbc	r26, r1
    142e:	b1 09       	sbc	r27, r1
    1430:	0f c0       	rjmp	.+30     	; 0x1450 <calculateUBRR+0x84>
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	88 83       	st	Y, r24
    1436:	60 e4       	ldi	r22, 0x40	; 64
    1438:	72 e4       	ldi	r23, 0x42	; 66
    143a:	8f e0       	ldi	r24, 0x0F	; 15
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	a5 01       	movw	r20, r10
    1440:	94 01       	movw	r18, r8
    1442:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    1446:	da 01       	movw	r26, r20
    1448:	c9 01       	movw	r24, r18
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	a1 09       	sbc	r26, r1
    144e:	b1 09       	sbc	r27, r1
    1450:	df 91       	pop	r29
    1452:	cf 91       	pop	r28
    1454:	ff 90       	pop	r15
    1456:	ef 90       	pop	r14
    1458:	df 90       	pop	r13
    145a:	cf 90       	pop	r12
    145c:	bf 90       	pop	r11
    145e:	af 90       	pop	r10
    1460:	9f 90       	pop	r9
    1462:	8f 90       	pop	r8
    1464:	7f 90       	pop	r7
    1466:	6f 90       	pop	r6
    1468:	5f 90       	pop	r5
    146a:	4f 90       	pop	r4
    146c:	08 95       	ret

0000146e <__vector_20>:
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	0b b6       	in	r0, 0x3b	; 59
    147a:	0f 92       	push	r0
    147c:	2f 93       	push	r18
    147e:	3f 93       	push	r19
    1480:	4f 93       	push	r20
    1482:	5f 93       	push	r21
    1484:	6f 93       	push	r22
    1486:	7f 93       	push	r23
    1488:	8f 93       	push	r24
    148a:	9f 93       	push	r25
    148c:	af 93       	push	r26
    148e:	bf 93       	push	r27
    1490:	ef 93       	push	r30
    1492:	ff 93       	push	r31
    1494:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1498:	62 e0       	ldi	r22, 0x02	; 2
    149a:	96 d9       	rcall	.-3284   	; 0x7c8 <checkBit>
    149c:	81 30       	cpi	r24, 0x01	; 1
    149e:	99 f4       	brne	.+38     	; 0x14c6 <__vector_20+0x58>
    14a0:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    14aa:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14ae:	82 70       	andi	r24, 0x02	; 2
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	98 2f       	mov	r25, r24
    14b4:	88 27       	eor	r24, r24
    14b6:	82 2b       	or	r24, r18
    14b8:	ee 0f       	add	r30, r30
    14ba:	ff 1f       	adc	r31, r31
    14bc:	e4 50       	subi	r30, 0x04	; 4
    14be:	fc 4f       	sbci	r31, 0xFC	; 252
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	80 83       	st	Z, r24
    14c4:	0c c0       	rjmp	.+24     	; 0x14de <__vector_20+0x70>
    14c6:	e0 91 fb 03 	lds	r30, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	e4 50       	subi	r30, 0x04	; 4
    14d8:	fc 4f       	sbci	r31, 0xFC	; 252
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
    14de:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    14e2:	89 30       	cpi	r24, 0x09	; 9
    14e4:	30 f4       	brcc	.+12     	; 0x14f2 <__vector_20+0x84>
    14e6:	80 91 fb 03 	lds	r24, 0x03FB	; 0x8003fb <u8_rx0LastReceivedIndex>
    14ea:	8f 5f       	subi	r24, 0xFF	; 255
    14ec:	80 93 fb 03 	sts	0x03FB, r24	; 0x8003fb <u8_rx0LastReceivedIndex>
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <__vector_20+0x88>
    14f2:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <u8_rx0LastReceivedIndex>
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	80 93 11 04 	sts	0x0411, r24	; 0x800411 <b_rx0Available>
    14fc:	ff 91       	pop	r31
    14fe:	ef 91       	pop	r30
    1500:	bf 91       	pop	r27
    1502:	af 91       	pop	r26
    1504:	9f 91       	pop	r25
    1506:	8f 91       	pop	r24
    1508:	7f 91       	pop	r23
    150a:	6f 91       	pop	r22
    150c:	5f 91       	pop	r21
    150e:	4f 91       	pop	r20
    1510:	3f 91       	pop	r19
    1512:	2f 91       	pop	r18
    1514:	0f 90       	pop	r0
    1516:	0b be       	out	0x3b, r0	; 59
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <__vector_21>:
    1522:	1f 92       	push	r1
    1524:	0f 92       	push	r0
    1526:	0f b6       	in	r0, 0x3f	; 63
    1528:	0f 92       	push	r0
    152a:	11 24       	eor	r1, r1
    152c:	0b b6       	in	r0, 0x3b	; 59
    152e:	0f 92       	push	r0
    1530:	2f 93       	push	r18
    1532:	3f 93       	push	r19
    1534:	4f 93       	push	r20
    1536:	5f 93       	push	r21
    1538:	6f 93       	push	r22
    153a:	7f 93       	push	r23
    153c:	8f 93       	push	r24
    153e:	9f 93       	push	r25
    1540:	af 93       	push	r26
    1542:	bf 93       	push	r27
    1544:	ef 93       	push	r30
    1546:	ff 93       	push	r31
    1548:	90 91 fa 03 	lds	r25, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    154c:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1550:	98 17       	cp	r25, r24
    1552:	69 f1       	breq	.+90     	; 0x15ae <__vector_21+0x8c>
    1554:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	36 d9       	rcall	.-3476   	; 0x7c8 <checkBit>
    155c:	81 30       	cpi	r24, 0x01	; 1
    155e:	79 f4       	brne	.+30     	; 0x157e <__vector_21+0x5c>
    1560:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	ee 0f       	add	r30, r30
    1568:	ff 1f       	adc	r31, r31
    156a:	ee 5e       	subi	r30, 0xEE	; 238
    156c:	fb 4f       	sbci	r31, 0xFB	; 251
    156e:	80 81       	ld	r24, Z
    1570:	91 81       	ldd	r25, Z+1	; 0x01
    1572:	e1 ec       	ldi	r30, 0xC1	; 193
    1574:	f0 e0       	ldi	r31, 0x00	; 0
    1576:	80 81       	ld	r24, Z
    1578:	91 70       	andi	r25, 0x01	; 1
    157a:	89 2b       	or	r24, r25
    157c:	80 83       	st	Z, r24
    157e:	e0 91 fa 03 	lds	r30, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1582:	f0 e0       	ldi	r31, 0x00	; 0
    1584:	ee 0f       	add	r30, r30
    1586:	ff 1f       	adc	r31, r31
    1588:	ee 5e       	subi	r30, 0xEE	; 238
    158a:	fb 4f       	sbci	r31, 0xFB	; 251
    158c:	80 81       	ld	r24, Z
    158e:	91 81       	ldd	r25, Z+1	; 0x01
    1590:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1594:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1598:	89 30       	cpi	r24, 0x09	; 9
    159a:	30 f4       	brcc	.+12     	; 0x15a8 <__vector_21+0x86>
    159c:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    15a0:	8f 5f       	subi	r24, 0xFF	; 255
    15a2:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_tx0LastTransmittedIndex>
    15a6:	07 c0       	rjmp	.+14     	; 0x15b6 <__vector_21+0x94>
    15a8:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
    15ac:	04 c0       	rjmp	.+8      	; 0x15b6 <__vector_21+0x94>
    15ae:	65 e0       	ldi	r22, 0x05	; 5
    15b0:	81 ec       	ldi	r24, 0xC1	; 193
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	fc d8       	rcall	.-3592   	; 0x7ae <clearBit>
    15b6:	ff 91       	pop	r31
    15b8:	ef 91       	pop	r30
    15ba:	bf 91       	pop	r27
    15bc:	af 91       	pop	r26
    15be:	9f 91       	pop	r25
    15c0:	8f 91       	pop	r24
    15c2:	7f 91       	pop	r23
    15c4:	6f 91       	pop	r22
    15c6:	5f 91       	pop	r21
    15c8:	4f 91       	pop	r20
    15ca:	3f 91       	pop	r19
    15cc:	2f 91       	pop	r18
    15ce:	0f 90       	pop	r0
    15d0:	0b be       	out	0x3b, r0	; 59
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0
    15d8:	1f 90       	pop	r1
    15da:	18 95       	reti

000015dc <__vector_22>:
    15dc:	1f 92       	push	r1
    15de:	0f 92       	push	r0
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	0f 92       	push	r0
    15e4:	11 24       	eor	r1, r1
    15e6:	0b b6       	in	r0, 0x3b	; 59
    15e8:	0f 92       	push	r0
    15ea:	8f 93       	push	r24
    15ec:	9f 93       	push	r25
    15ee:	ef 93       	push	r30
    15f0:	ff 93       	push	r31
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	fc 01       	movw	r30, r24
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	ee 5e       	subi	r30, 0xEE	; 238
    15fe:	fb 4f       	sbci	r31, 0xFB	; 251
    1600:	11 82       	std	Z+1, r1	; 0x01
    1602:	10 82       	st	Z, r1
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	8a 30       	cpi	r24, 0x0A	; 10
    1608:	91 05       	cpc	r25, r1
    160a:	a9 f7       	brne	.-22     	; 0x15f6 <__vector_22+0x1a>
    160c:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1610:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1614:	ff 91       	pop	r31
    1616:	ef 91       	pop	r30
    1618:	9f 91       	pop	r25
    161a:	8f 91       	pop	r24
    161c:	0f 90       	pop	r0
    161e:	0b be       	out	0x3b, r0	; 59
    1620:	0f 90       	pop	r0
    1622:	0f be       	out	0x3f, r0	; 63
    1624:	0f 90       	pop	r0
    1626:	1f 90       	pop	r1
    1628:	18 95       	reti

0000162a <uart_init>:
    162a:	0f 93       	push	r16
    162c:	1f 93       	push	r17
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	2b 97       	sbiw	r28, 0x0b	; 11
    1638:	0f b6       	in	r0, 0x3f	; 63
    163a:	f8 94       	cli
    163c:	de bf       	out	0x3e, r29	; 62
    163e:	0f be       	out	0x3f, r0	; 63
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	0a 83       	std	Y+2, r16	; 0x02
    1644:	1b 83       	std	Y+3, r17	; 0x03
    1646:	2c 83       	std	Y+4, r18	; 0x04
    1648:	3d 83       	std	Y+5, r19	; 0x05
    164a:	4e 83       	std	Y+6, r20	; 0x06
    164c:	5f 83       	std	Y+7, r21	; 0x07
    164e:	68 87       	std	Y+8, r22	; 0x08
    1650:	79 87       	std	Y+9, r23	; 0x09
    1652:	8a 87       	std	Y+10, r24	; 0x0a
    1654:	9b 87       	std	Y+11, r25	; 0x0b
    1656:	19 82       	std	Y+1, r1	; 0x01
    1658:	01 11       	cpse	r16, r1
    165a:	98 c0       	rjmp	.+304    	; 0x178c <uart_init+0x162>
    165c:	19 2f       	mov	r17, r25
    165e:	e2 ec       	ldi	r30, 0xC2	; 194
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	8f 73       	andi	r24, 0x3F	; 63
    1666:	80 83       	st	Z, r24
    1668:	6b 81       	ldd	r22, Y+3	; 0x03
    166a:	7c 81       	ldd	r23, Y+4	; 0x04
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
    166e:	9e 81       	ldd	r25, Y+6	; 0x06
    1670:	ae 01       	movw	r20, r28
    1672:	4f 5f       	subi	r20, 0xFF	; 255
    1674:	5f 4f       	sbci	r21, 0xFF	; 255
    1676:	aa de       	rcall	.-684    	; 0x13cc <calculateUBRR>
    1678:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    167c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    1680:	49 81       	ldd	r20, Y+1	; 0x01
    1682:	61 e0       	ldi	r22, 0x01	; 1
    1684:	80 ec       	ldi	r24, 0xC0	; 192
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	6e d8       	rcall	.-3876   	; 0x766 <updateBit>
    168a:	89 85       	ldd	r24, Y+9	; 0x09
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	31 f1       	breq	.+76     	; 0x16dc <uart_init+0xb2>
    1690:	28 f4       	brcc	.+10     	; 0x169c <uart_init+0x72>
    1692:	88 23       	and	r24, r24
    1694:	49 f0       	breq	.+18     	; 0x16a8 <uart_init+0x7e>
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	a1 f0       	breq	.+40     	; 0x16c2 <uart_init+0x98>
    169a:	46 c0       	rjmp	.+140    	; 0x1728 <uart_init+0xfe>
    169c:	83 30       	cpi	r24, 0x03	; 3
    169e:	59 f1       	breq	.+86     	; 0x16f6 <uart_init+0xcc>
    16a0:	84 30       	cpi	r24, 0x04	; 4
    16a2:	09 f4       	brne	.+2      	; 0x16a6 <uart_init+0x7c>
    16a4:	35 c0       	rjmp	.+106    	; 0x1710 <uart_init+0xe6>
    16a6:	40 c0       	rjmp	.+128    	; 0x1728 <uart_init+0xfe>
    16a8:	61 e0       	ldi	r22, 0x01	; 1
    16aa:	82 ec       	ldi	r24, 0xC2	; 194
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	7f d8       	rcall	.-3842   	; 0x7ae <clearBit>
    16b0:	62 e0       	ldi	r22, 0x02	; 2
    16b2:	82 ec       	ldi	r24, 0xC2	; 194
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	7b d8       	rcall	.-3850   	; 0x7ae <clearBit>
    16b8:	62 e0       	ldi	r22, 0x02	; 2
    16ba:	81 ec       	ldi	r24, 0xC1	; 193
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	77 d8       	rcall	.-3858   	; 0x7ae <clearBit>
    16c0:	33 c0       	rjmp	.+102    	; 0x1728 <uart_init+0xfe>
    16c2:	61 e0       	ldi	r22, 0x01	; 1
    16c4:	82 ec       	ldi	r24, 0xC2	; 194
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	66 d8       	rcall	.-3892   	; 0x796 <setBit>
    16ca:	62 e0       	ldi	r22, 0x02	; 2
    16cc:	82 ec       	ldi	r24, 0xC2	; 194
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	6e d8       	rcall	.-3876   	; 0x7ae <clearBit>
    16d2:	62 e0       	ldi	r22, 0x02	; 2
    16d4:	81 ec       	ldi	r24, 0xC1	; 193
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	6a d8       	rcall	.-3884   	; 0x7ae <clearBit>
    16da:	26 c0       	rjmp	.+76     	; 0x1728 <uart_init+0xfe>
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	82 ec       	ldi	r24, 0xC2	; 194
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	65 d8       	rcall	.-3894   	; 0x7ae <clearBit>
    16e4:	62 e0       	ldi	r22, 0x02	; 2
    16e6:	82 ec       	ldi	r24, 0xC2	; 194
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	55 d8       	rcall	.-3926   	; 0x796 <setBit>
    16ec:	62 e0       	ldi	r22, 0x02	; 2
    16ee:	81 ec       	ldi	r24, 0xC1	; 193
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	5d d8       	rcall	.-3910   	; 0x7ae <clearBit>
    16f4:	19 c0       	rjmp	.+50     	; 0x1728 <uart_init+0xfe>
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	82 ec       	ldi	r24, 0xC2	; 194
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	4c d8       	rcall	.-3944   	; 0x796 <setBit>
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	82 ec       	ldi	r24, 0xC2	; 194
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	48 d8       	rcall	.-3952   	; 0x796 <setBit>
    1706:	62 e0       	ldi	r22, 0x02	; 2
    1708:	81 ec       	ldi	r24, 0xC1	; 193
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	50 d8       	rcall	.-3936   	; 0x7ae <clearBit>
    170e:	0c c0       	rjmp	.+24     	; 0x1728 <uart_init+0xfe>
    1710:	61 e0       	ldi	r22, 0x01	; 1
    1712:	82 ec       	ldi	r24, 0xC2	; 194
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	3f d8       	rcall	.-3970   	; 0x796 <setBit>
    1718:	62 e0       	ldi	r22, 0x02	; 2
    171a:	82 ec       	ldi	r24, 0xC2	; 194
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	3b d8       	rcall	.-3978   	; 0x796 <setBit>
    1720:	62 e0       	ldi	r22, 0x02	; 2
    1722:	81 ec       	ldi	r24, 0xC1	; 193
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	37 d8       	rcall	.-3986   	; 0x796 <setBit>
    1728:	4a 85       	ldd	r20, Y+10	; 0x0a
    172a:	63 e0       	ldi	r22, 0x03	; 3
    172c:	82 ec       	ldi	r24, 0xC2	; 194
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	1a d8       	rcall	.-4044   	; 0x766 <updateBit>
    1732:	12 30       	cpi	r17, 0x02	; 2
    1734:	31 f4       	brne	.+12     	; 0x1742 <uart_init+0x118>
    1736:	e2 ec       	ldi	r30, 0xC2	; 194
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	8f 7c       	andi	r24, 0xCF	; 207
    173e:	80 83       	st	Z, r24
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <uart_init+0x12a>
    1742:	65 e0       	ldi	r22, 0x05	; 5
    1744:	82 ec       	ldi	r24, 0xC2	; 194
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	26 d8       	rcall	.-4020   	; 0x796 <setBit>
    174a:	41 2f       	mov	r20, r17
    174c:	64 e0       	ldi	r22, 0x04	; 4
    174e:	82 ec       	ldi	r24, 0xC2	; 194
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	09 d8       	rcall	.-4078   	; 0x766 <updateBit>
    1754:	8f 81       	ldd	r24, Y+7	; 0x07
    1756:	88 23       	and	r24, r24
    1758:	51 f0       	breq	.+20     	; 0x176e <uart_init+0x144>
    175a:	10 92 10 04 	sts	0x0410, r1	; 0x800410 <u8_rx0LastProcessedIndex>
    175e:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <u8_rx0LastReceivedIndex>
    1762:	10 92 11 04 	sts	0x0411, r1	; 0x800411 <b_rx0Available>
    1766:	67 e0       	ldi	r22, 0x07	; 7
    1768:	81 ec       	ldi	r24, 0xC1	; 193
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	14 d8       	rcall	.-4056   	; 0x796 <setBit>
    176e:	88 85       	ldd	r24, Y+8	; 0x08
    1770:	88 23       	and	r24, r24
    1772:	61 f0       	breq	.+24     	; 0x178c <uart_init+0x162>
    1774:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1778:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
    177c:	66 e0       	ldi	r22, 0x06	; 6
    177e:	81 ec       	ldi	r24, 0xC1	; 193
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	09 d8       	rcall	.-4078   	; 0x796 <setBit>
    1784:	65 e0       	ldi	r22, 0x05	; 5
    1786:	81 ec       	ldi	r24, 0xC1	; 193
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	05 d8       	rcall	.-4086   	; 0x796 <setBit>
    178c:	2b 96       	adiw	r28, 0x0b	; 11
    178e:	0f b6       	in	r0, 0x3f	; 63
    1790:	f8 94       	cli
    1792:	de bf       	out	0x3e, r29	; 62
    1794:	0f be       	out	0x3f, r0	; 63
    1796:	cd bf       	out	0x3d, r28	; 61
    1798:	df 91       	pop	r29
    179a:	cf 91       	pop	r28
    179c:	1f 91       	pop	r17
    179e:	0f 91       	pop	r16
    17a0:	08 95       	ret

000017a2 <uart_start>:
    17a2:	0f 93       	push	r16
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	2a 97       	sbiw	r28, 0x0a	; 10
    17b0:	0f b6       	in	r0, 0x3f	; 63
    17b2:	f8 94       	cli
    17b4:	de bf       	out	0x3e, r29	; 62
    17b6:	0f be       	out	0x3f, r0	; 63
    17b8:	cd bf       	out	0x3d, r28	; 61
    17ba:	6f 83       	std	Y+7, r22	; 0x07
    17bc:	01 11       	cpse	r16, r1
    17be:	0c c0       	rjmp	.+24     	; 0x17d8 <uart_start+0x36>
    17c0:	45 2f       	mov	r20, r21
    17c2:	64 e0       	ldi	r22, 0x04	; 4
    17c4:	81 ec       	ldi	r24, 0xC1	; 193
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 b3 03 	call	0x766	; 0x766 <updateBit>
    17cc:	4f 81       	ldd	r20, Y+7	; 0x07
    17ce:	63 e0       	ldi	r22, 0x03	; 3
    17d0:	81 ec       	ldi	r24, 0xC1	; 193
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	0e 94 b3 03 	call	0x766	; 0x766 <updateBit>
    17d8:	2a 96       	adiw	r28, 0x0a	; 10
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0f 91       	pop	r16
    17ec:	08 95       	ret

000017ee <uart_transmit>:

void uart_transmit(uart_struct_t s_uart, u16 u16_data)
{
    17ee:	ef 92       	push	r14
    17f0:	ff 92       	push	r15
    17f2:	0f 93       	push	r16
    17f4:	1f 93       	push	r17
    17f6:	cf 93       	push	r28
    17f8:	df 93       	push	r29
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
    17fe:	2a 97       	sbiw	r28, 0x0a	; 10
    1800:	0f b6       	in	r0, 0x3f	; 63
    1802:	f8 94       	cli
    1804:	de bf       	out	0x3e, r29	; 62
    1806:	0f be       	out	0x3f, r0	; 63
    1808:	cd bf       	out	0x3d, r28	; 61
    180a:	09 83       	std	Y+1, r16	; 0x01
    180c:	1a 83       	std	Y+2, r17	; 0x02
    180e:	2b 83       	std	Y+3, r18	; 0x03
    1810:	3c 83       	std	Y+4, r19	; 0x04
    1812:	4d 83       	std	Y+5, r20	; 0x05
    1814:	5e 83       	std	Y+6, r21	; 0x06
    1816:	6f 83       	std	Y+7, r22	; 0x07
    1818:	78 87       	std	Y+8, r23	; 0x08
    181a:	89 87       	std	Y+9, r24	; 0x09
    181c:	9a 87       	std	Y+10, r25	; 0x0a
	switch (s_uart.peripheral)
    181e:	01 11       	cpse	r16, r1
    1820:	42 c0       	rjmp	.+132    	; 0x18a6 <uart_transmit+0xb8>
	{
		case UART0:
		#ifdef USING_UART0
		#ifdef UART0_INTERRUPT_MODE
			while (checkBit(UCSR0A, UDRE0) == CLEAR);
    1822:	00 ec       	ldi	r16, 0xC0	; 192
    1824:	10 e0       	ldi	r17, 0x00	; 0
    1826:	f8 01       	movw	r30, r16
    1828:	80 81       	ld	r24, Z
    182a:	65 e0       	ldi	r22, 0x05	; 5
    182c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <checkBit>
    1830:	88 23       	and	r24, r24
    1832:	c9 f3       	breq	.-14     	; 0x1826 <uart_transmit+0x38>
			au16_tx0Buffer[u8_tx0LastRequestedIndex] = u16_data;
    1834:	e0 91 f9 03 	lds	r30, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	ee 0f       	add	r30, r30
    183c:	ff 1f       	adc	r31, r31
    183e:	ee 5e       	subi	r30, 0xEE	; 238
    1840:	fb 4f       	sbci	r31, 0xFB	; 251
    1842:	f1 82       	std	Z+1, r15	; 0x01
    1844:	e0 82       	st	Z, r14
			if (u8_tx0LastRequestedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    1846:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    184a:	89 30       	cpi	r24, 0x09	; 9
    184c:	30 f4       	brcc	.+12     	; 0x185a <uart_transmit+0x6c>
				u8_tx0LastRequestedIndex++;
    184e:	80 91 f9 03 	lds	r24, 0x03F9	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1852:	8f 5f       	subi	r24, 0xFF	; 255
    1854:	80 93 f9 03 	sts	0x03F9, r24	; 0x8003f9 <u8_tx0LastRequestedIndex>
    1858:	02 c0       	rjmp	.+4      	; 0x185e <uart_transmit+0x70>
			else
				u8_tx0LastRequestedIndex = 0;
    185a:	10 92 f9 03 	sts	0x03F9, r1	; 0x8003f9 <u8_tx0LastRequestedIndex>
			if (checkBit(UCSR0A, UDRE0) == SET)
    185e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    1862:	65 e0       	ldi	r22, 0x05	; 5
    1864:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <checkBit>
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	e9 f4       	brne	.+58     	; 0x18a6 <uart_transmit+0xb8>
			{
				if (u8_tx0LastTransmittedIndex < UART_TX0_BUFFER_MAX_SIZE - 1)
    186c:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1870:	89 30       	cpi	r24, 0x09	; 9
    1872:	30 f4       	brcc	.+12     	; 0x1880 <uart_transmit+0x92>
					u8_tx0LastTransmittedIndex++;
    1874:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <u8_tx0LastTransmittedIndex>
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <u8_tx0LastTransmittedIndex>
    187e:	02 c0       	rjmp	.+4      	; 0x1884 <uart_transmit+0x96>
				else
					u8_tx0LastTransmittedIndex = 0;
    1880:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <u8_tx0LastTransmittedIndex>
				setBit(&UCSR0B, UDRIE0);
    1884:	65 e0       	ldi	r22, 0x05	; 5
    1886:	81 ec       	ldi	r24, 0xC1	; 193
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 cb 03 	call	0x796	; 0x796 <setBit>
				if (s_uart.frameSize == _9BIT)
    188e:	88 85       	ldd	r24, Y+8	; 0x08
    1890:	84 30       	cpi	r24, 0x04	; 4
    1892:	39 f4       	brne	.+14     	; 0x18a2 <uart_transmit+0xb4>
					UCSR0B |= (((u16_data >> 8) & 1) << TXB80);
    1894:	e1 ec       	ldi	r30, 0xC1	; 193
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	9f 2d       	mov	r25, r15
    189c:	91 70       	andi	r25, 0x01	; 1
    189e:	89 2b       	or	r24, r25
    18a0:	80 83       	st	Z, r24
				UDR0 = (u8) u16_data;
    18a2:	e0 92 c6 00 	sts	0x00C6, r14	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
			UDR1 = (u8) u16_data;
		#endif
		#endif
			break;
	}
}
    18a6:	2a 96       	adiw	r28, 0x0a	; 10
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	08 95       	ret

000018c0 <__vector_8>:
/************************************************************************/
/* Interrupt handlers                                                   */
/************************************************************************/

ISR(WDT_vect)
{
    18c0:	1f 92       	push	r1
    18c2:	0f 92       	push	r0
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	0f 92       	push	r0
    18c8:	11 24       	eor	r1, r1
    18ca:	0b b6       	in	r0, 0x3b	; 59
    18cc:	0f 92       	push	r0
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
	p_wdgCallback();
    18e6:	e0 91 26 04 	lds	r30, 0x0426	; 0x800426 <p_wdgCallback>
    18ea:	f0 91 27 04 	lds	r31, 0x0427	; 0x800427 <p_wdgCallback+0x1>
    18ee:	09 95       	icall
}
    18f0:	ff 91       	pop	r31
    18f2:	ef 91       	pop	r30
    18f4:	bf 91       	pop	r27
    18f6:	af 91       	pop	r26
    18f8:	9f 91       	pop	r25
    18fa:	8f 91       	pop	r24
    18fc:	7f 91       	pop	r23
    18fe:	6f 91       	pop	r22
    1900:	5f 91       	pop	r21
    1902:	4f 91       	pop	r20
    1904:	3f 91       	pop	r19
    1906:	2f 91       	pop	r18
    1908:	0f 90       	pop	r0
    190a:	0b be       	out	0x3b, r0	; 59
    190c:	0f 90       	pop	r0
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	0f 90       	pop	r0
    1912:	1f 90       	pop	r1
    1914:	18 95       	reti

00001916 <vl53l0x_init>:
		return 0;
}

void vl53l0x_getDeviceID(u8 *major, u8* minor)
{
	VL53L0X_GetProductRevision(&frontSensor, major, minor);
    1916:	1f 93       	push	r17
    1918:	cf 93       	push	r28
    191a:	df 93       	push	r29
    191c:	00 d0       	rcall	.+0      	; 0x191e <vl53l0x_init+0x8>
    191e:	00 d0       	rcall	.+0      	; 0x1920 <vl53l0x_init+0xa>
    1920:	1f 92       	push	r1
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
    1926:	e8 e2       	ldi	r30, 0x28	; 40
    1928:	f4 e0       	ldi	r31, 0x04	; 4
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	80 83       	st	Z, r24
    192e:	81 83       	std	Z+1, r24	; 0x01
    1930:	11 e0       	ldi	r17, 0x01	; 1
    1932:	12 83       	std	Z+2, r17	; 0x02
    1934:	13 82       	std	Z+3, r1	; 0x03
    1936:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <s_xshutPin>
    193a:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <s_xshutPin+0x1>
    193e:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <s_xshutPin+0x2>
    1942:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <s_xshutPin+0x3>
    1946:	0e 94 ae 01 	call	0x35c	; 0x35c <gpio_init>
    194a:	80 e8       	ldi	r24, 0x80	; 128
    194c:	58 2f       	mov	r21, r24
    194e:	8a 83       	std	Y+2, r24	; 0x02
    1950:	88 e3       	ldi	r24, 0x38	; 56
    1952:	8b 83       	std	Y+3, r24	; 0x03
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	8c 83       	std	Y+4, r24	; 0x04
    1958:	1d 82       	std	Y+5, r1	; 0x05
    195a:	19 83       	std	Y+1, r17	; 0x01
    195c:	41 e0       	ldi	r20, 0x01	; 1
    195e:	68 e3       	ldi	r22, 0x38	; 56
    1960:	71 e0       	ldi	r23, 0x01	; 1
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	0e 94 62 02 	call	0x4c4	; 0x4c4 <i2c_init>
    1968:	0e 94 9a 02 	call	0x534	; 0x534 <i2c_start>
    196c:	60 91 28 04 	lds	r22, 0x0428	; 0x800428 <s_xshutPin>
    1970:	70 91 29 04 	lds	r23, 0x0429	; 0x800429 <s_xshutPin+0x1>
    1974:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <s_xshutPin+0x2>
    1978:	90 91 2b 04 	lds	r25, 0x042B	; 0x80042b <s_xshutPin+0x3>
    197c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <gpio_out_set>
    1980:	8f ec       	ldi	r24, 0xCF	; 207
    1982:	97 e0       	ldi	r25, 0x07	; 7
    1984:	01 97       	sbiw	r24, 0x01	; 1
    1986:	f1 f7       	brne	.-4      	; 0x1984 <vl53l0x_init+0x6e>
    1988:	00 c0       	rjmp	.+0      	; 0x198a <vl53l0x_init+0x74>
    198a:	00 00       	nop
    198c:	8f e8       	ldi	r24, 0x8F	; 143
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	01 97       	sbiw	r24, 0x01	; 1
    1992:	f1 f7       	brne	.-4      	; 0x1990 <vl53l0x_init+0x7a>
    1994:	00 c0       	rjmp	.+0      	; 0x1996 <vl53l0x_init+0x80>
    1996:	00 00       	nop
    1998:	89 e2       	ldi	r24, 0x29	; 41
    199a:	80 93 6d 05 	sts	0x056D, r24	; 0x80056d <frontSensor+0x141>
    199e:	8c e2       	ldi	r24, 0x2C	; 44
    19a0:	94 e0       	ldi	r25, 0x04	; 4
    19a2:	18 d5       	rcall	.+2608   	; 0x23d4 <VL53L0X_DataInit>
    19a4:	8c e2       	ldi	r24, 0x2C	; 44
    19a6:	94 e0       	ldi	r25, 0x04	; 4
    19a8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <VL53L0X_StaticInit>
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	08 95       	ret

000019be <vl53l0x_calibrate>:
    19be:	cf 93       	push	r28
    19c0:	df 93       	push	r29
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	2f 97       	sbiw	r28, 0x0f	; 15
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	ae 01       	movw	r20, r28
    19d4:	4b 5f       	subi	r20, 0xFB	; 251
    19d6:	5f 4f       	sbci	r21, 0xFF	; 255
    19d8:	be 01       	movw	r22, r28
    19da:	6f 5f       	subi	r22, 0xFF	; 255
    19dc:	7f 4f       	sbci	r23, 0xFF	; 255
    19de:	8c e2       	ldi	r24, 0x2C	; 44
    19e0:	94 e0       	ldi	r25, 0x04	; 4
    19e2:	0e 94 46 18 	call	0x308c	; 0x308c <VL53L0X_GetReferenceSpads>
    19e6:	49 81       	ldd	r20, Y+1	; 0x01
    19e8:	5a 81       	ldd	r21, Y+2	; 0x02
    19ea:	6b 81       	ldd	r22, Y+3	; 0x03
    19ec:	7c 81       	ldd	r23, Y+4	; 0x04
    19ee:	2d 81       	ldd	r18, Y+5	; 0x05
    19f0:	8c e2       	ldi	r24, 0x2C	; 44
    19f2:	94 e0       	ldi	r25, 0x04	; 4
    19f4:	0e 94 44 18 	call	0x3088	; 0x3088 <VL53L0X_SetReferenceSpads>
    19f8:	ae 01       	movw	r20, r28
    19fa:	49 5f       	subi	r20, 0xF9	; 249
    19fc:	5f 4f       	sbci	r21, 0xFF	; 255
    19fe:	be 01       	movw	r22, r28
    1a00:	6a 5f       	subi	r22, 0xFA	; 250
    1a02:	7f 4f       	sbci	r23, 0xFF	; 255
    1a04:	8c e2       	ldi	r24, 0x2C	; 44
    1a06:	94 e0       	ldi	r25, 0x04	; 4
    1a08:	c7 d2       	rcall	.+1422   	; 0x1f98 <VL53L0X_GetRefCalibration>
    1a0a:	4f 81       	ldd	r20, Y+7	; 0x07
    1a0c:	6e 81       	ldd	r22, Y+6	; 0x06
    1a0e:	8c e2       	ldi	r24, 0x2C	; 44
    1a10:	94 e0       	ldi	r25, 0x04	; 4
    1a12:	bf d2       	rcall	.+1406   	; 0x1f92 <VL53L0X_SetRefCalibration>
    1a14:	be 01       	movw	r22, r28
    1a16:	68 5f       	subi	r22, 0xF8	; 248
    1a18:	7f 4f       	sbci	r23, 0xFF	; 255
    1a1a:	8c e2       	ldi	r24, 0x2C	; 44
    1a1c:	94 e0       	ldi	r25, 0x04	; 4
    1a1e:	a2 d0       	rcall	.+324    	; 0x1b64 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
    1a20:	48 85       	ldd	r20, Y+8	; 0x08
    1a22:	59 85       	ldd	r21, Y+9	; 0x09
    1a24:	6a 85       	ldd	r22, Y+10	; 0x0a
    1a26:	7b 85       	ldd	r23, Y+11	; 0x0b
    1a28:	8c e2       	ldi	r24, 0x2C	; 44
    1a2a:	94 e0       	ldi	r25, 0x04	; 4
    1a2c:	98 d0       	rcall	.+304    	; 0x1b5e <VL53L0X_SetOffsetCalibrationDataMicroMeter>
    1a2e:	be 01       	movw	r22, r28
    1a30:	64 5f       	subi	r22, 0xF4	; 244
    1a32:	7f 4f       	sbci	r23, 0xFF	; 255
    1a34:	8c e2       	ldi	r24, 0x2C	; 44
    1a36:	94 e0       	ldi	r25, 0x04	; 4
    1a38:	6a d2       	rcall	.+1236   	; 0x1f0e <VL53L0X_GetXTalkCompensationRateMegaCps>
    1a3a:	4c 85       	ldd	r20, Y+12	; 0x0c
    1a3c:	5d 85       	ldd	r21, Y+13	; 0x0d
    1a3e:	6e 85       	ldd	r22, Y+14	; 0x0e
    1a40:	7f 85       	ldd	r23, Y+15	; 0x0f
    1a42:	8c e2       	ldi	r24, 0x2C	; 44
    1a44:	94 e0       	ldi	r25, 0x04	; 4
    1a46:	29 d2       	rcall	.+1106   	; 0x1e9a <VL53L0X_SetXTalkCompensationRateMegaCps>
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	8c e2       	ldi	r24, 0x2C	; 44
    1a4c:	94 e0       	ldi	r25, 0x04	; 4
    1a4e:	ec d1       	rcall	.+984    	; 0x1e28 <VL53L0X_SetXTalkCompensationEnable>
    1a50:	2f 96       	adiw	r28, 0x0f	; 15
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	de bf       	out	0x3e, r29	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	cd bf       	out	0x3d, r28	; 61
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
    1a60:	08 95       	ret

00001a62 <vl53l0x_start>:
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	8c e2       	ldi	r24, 0x2C	; 44
    1a66:	94 e0       	ldi	r25, 0x04	; 4
    1a68:	80 c0       	rjmp	.+256    	; 0x1b6a <VL53L0X_SetDeviceMode>
    1a6a:	08 95       	ret

00001a6c <vl53l0x_writeRegister>:
    1a6c:	df 92       	push	r13
    1a6e:	ef 92       	push	r14
    1a70:	ff 92       	push	r15
    1a72:	0f 93       	push	r16
    1a74:	1f 93       	push	r17
    1a76:	cf 93       	push	r28
    1a78:	df 93       	push	r29
    1a7a:	1f 92       	push	r1
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    1a80:	18 2f       	mov	r17, r24
    1a82:	69 83       	std	Y+1, r22	; 0x01
    1a84:	7a 01       	movw	r14, r20
    1a86:	d2 2e       	mov	r13, r18
    1a88:	41 e0       	ldi	r20, 0x01	; 1
    1a8a:	be 01       	movw	r22, r28
    1a8c:	6f 5f       	subi	r22, 0xFF	; 255
    1a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a90:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_transmit>
    1a94:	08 2f       	mov	r16, r24
    1a96:	4d 2d       	mov	r20, r13
    1a98:	b7 01       	movw	r22, r14
    1a9a:	81 2f       	mov	r24, r17
    1a9c:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_transmit>
    1aa0:	80 2b       	or	r24, r16
    1aa2:	0f 90       	pop	r0
    1aa4:	df 91       	pop	r29
    1aa6:	cf 91       	pop	r28
    1aa8:	1f 91       	pop	r17
    1aaa:	0f 91       	pop	r16
    1aac:	ff 90       	pop	r15
    1aae:	ef 90       	pop	r14
    1ab0:	df 90       	pop	r13
    1ab2:	08 95       	ret

00001ab4 <vl53l0x_readRegister>:
    1ab4:	df 92       	push	r13
    1ab6:	ef 92       	push	r14
    1ab8:	ff 92       	push	r15
    1aba:	0f 93       	push	r16
    1abc:	1f 93       	push	r17
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	1f 92       	push	r1
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	18 2f       	mov	r17, r24
    1aca:	69 83       	std	Y+1, r22	; 0x01
    1acc:	7a 01       	movw	r14, r20
    1ace:	d2 2e       	mov	r13, r18
    1ad0:	41 e0       	ldi	r20, 0x01	; 1
    1ad2:	be 01       	movw	r22, r28
    1ad4:	6f 5f       	subi	r22, 0xFF	; 255
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	0e 94 9f 02 	call	0x53e	; 0x53e <i2c_transmit>
    1adc:	08 2f       	mov	r16, r24
    1ade:	4d 2d       	mov	r20, r13
    1ae0:	b7 01       	movw	r22, r14
    1ae2:	81 2f       	mov	r24, r17
    1ae4:	0e 94 20 03 	call	0x640	; 0x640 <i2c_receive>
    1ae8:	80 2b       	or	r24, r16
    1aea:	0f 90       	pop	r0
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	08 95       	ret

00001afc <b_vl53l0x_testConnection>:
    1afc:	cf 93       	push	r28
    1afe:	df 93       	push	r29
    1b00:	1f 92       	push	r1
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	21 e0       	ldi	r18, 0x01	; 1
    1b08:	ae 01       	movw	r20, r28
    1b0a:	4f 5f       	subi	r20, 0xFF	; 255
    1b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b0e:	60 ec       	ldi	r22, 0xC0	; 192
    1b10:	89 e2       	ldi	r24, 0x29	; 41
    1b12:	d0 df       	rcall	.-96     	; 0x1ab4 <vl53l0x_readRegister>
    1b14:	81 11       	cpse	r24, r1
    1b16:	02 c0       	rjmp	.+4      	; 0x1b1c <b_vl53l0x_testConnection+0x20>
    1b18:	89 81       	ldd	r24, Y+1	; 0x01
    1b1a:	01 c0       	rjmp	.+2      	; 0x1b1e <b_vl53l0x_testConnection+0x22>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	0f 90       	pop	r0
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <vl53l0x_getDistance>:
}

u16 vl53l0x_getDistance()
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	cd b7       	in	r28, 0x3d	; 61
    1b2c:	de b7       	in	r29, 0x3e	; 62
    1b2e:	69 97       	sbiw	r28, 0x19	; 25
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	de bf       	out	0x3e, r29	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	cd bf       	out	0x3d, r28	; 61
	u16 u16_returnValue = 0;
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	VL53L0X_PerformSingleRangingMeasurement(&frontSensor, &rangingMeasurementData);
    1b3a:	be 01       	movw	r22, r28
    1b3c:	6f 5f       	subi	r22, 0xFF	; 255
    1b3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b40:	8c e2       	ldi	r24, 0x2C	; 44
    1b42:	94 e0       	ldi	r25, 0x04	; 4
    1b44:	0e 94 ef 15 	call	0x2bde	; 0x2bde <VL53L0X_PerformSingleRangingMeasurement>
	u16_returnValue = rangingMeasurementData.RangeStatus;
    1b48:	89 8d       	ldd	r24, Y+25	; 0x19

	return u16_returnValue;
}
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	69 96       	adiw	r28, 0x19	; 25
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	08 95       	ret

00001b5e <VL53L0X_SetOffsetCalibrationDataMicroMeter>:
    1b5e:	0c 94 48 18 	jmp	0x3090	; 0x3090 <VL53L0X_set_offset_calibration_data_micro_meter>
    1b62:	08 95       	ret

00001b64 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
    1b64:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <VL53L0X_get_offset_calibration_data_micro_meter>
    1b68:	08 95       	ret

00001b6a <VL53L0X_SetDeviceMode>:
    1b6a:	63 30       	cpi	r22, 0x03	; 3
    1b6c:	41 f0       	breq	.+16     	; 0x1b7e <VL53L0X_SetDeviceMode+0x14>
    1b6e:	18 f4       	brcc	.+6      	; 0x1b76 <VL53L0X_SetDeviceMode+0xc>
    1b70:	62 30       	cpi	r22, 0x02	; 2
    1b72:	28 f0       	brcs	.+10     	; 0x1b7e <VL53L0X_SetDeviceMode+0x14>
    1b74:	08 c0       	rjmp	.+16     	; 0x1b86 <VL53L0X_SetDeviceMode+0x1c>
    1b76:	2c ee       	ldi	r18, 0xEC	; 236
    1b78:	26 0f       	add	r18, r22
    1b7a:	22 30       	cpi	r18, 0x02	; 2
    1b7c:	20 f4       	brcc	.+8      	; 0x1b86 <VL53L0X_SetDeviceMode+0x1c>
    1b7e:	fc 01       	movw	r30, r24
    1b80:	60 8b       	std	Z+16, r22	; 0x10
    1b82:	80 e0       	ldi	r24, 0x00	; 0
    1b84:	08 95       	ret
    1b86:	88 ef       	ldi	r24, 0xF8	; 248
    1b88:	08 95       	ret

00001b8a <VL53L0X_GetFractionEnable>:
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	eb 01       	movw	r28, r22
    1b90:	ab 01       	movw	r20, r22
    1b92:	69 e0       	ldi	r22, 0x09	; 9
    1b94:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    1b98:	81 11       	cpse	r24, r1
    1b9a:	03 c0       	rjmp	.+6      	; 0x1ba2 <VL53L0X_GetFractionEnable+0x18>
    1b9c:	98 81       	ld	r25, Y
    1b9e:	91 70       	andi	r25, 0x01	; 1
    1ba0:	98 83       	st	Y, r25
    1ba2:	df 91       	pop	r29
    1ba4:	cf 91       	pop	r28
    1ba6:	08 95       	ret

00001ba8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
    1ba8:	0c 94 de 27 	jmp	0x4fbc	; 0x4fbc <VL53L0X_set_measurement_timing_budget_micro_seconds>
    1bac:	08 95       	ret

00001bae <VL53L0X_GetVcselPulsePeriod>:
    1bae:	0c 94 b5 27 	jmp	0x4f6a	; 0x4f6a <VL53L0X_get_vcsel_pulse_period>
    1bb2:	08 95       	ret

00001bb4 <VL53L0X_SetSequenceStepEnable>:
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	1f 92       	push	r1
    1bc4:	cd b7       	in	r28, 0x3d	; 61
    1bc6:	de b7       	in	r29, 0x3e	; 62
    1bc8:	7c 01       	movw	r14, r24
    1bca:	06 2f       	mov	r16, r22
    1bcc:	d4 2e       	mov	r13, r20
    1bce:	19 82       	std	Y+1, r1	; 0x01
    1bd0:	ae 01       	movw	r20, r28
    1bd2:	4f 5f       	subi	r20, 0xFF	; 255
    1bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1bd6:	61 e0       	ldi	r22, 0x01	; 1
    1bd8:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    1bdc:	18 2f       	mov	r17, r24
    1bde:	81 11       	cpse	r24, r1
    1be0:	56 c0       	rjmp	.+172    	; 0x1c8e <VL53L0X_SetSequenceStepEnable+0xda>
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	91 e0       	ldi	r25, 0x01	; 1
    1be6:	d9 12       	cpse	r13, r25
    1be8:	1c c0       	rjmp	.+56     	; 0x1c22 <VL53L0X_SetSequenceStepEnable+0x6e>
    1bea:	02 30       	cpi	r16, 0x02	; 2
    1bec:	89 f0       	breq	.+34     	; 0x1c10 <VL53L0X_SetSequenceStepEnable+0x5c>
    1bee:	28 f4       	brcc	.+10     	; 0x1bfa <VL53L0X_SetSequenceStepEnable+0x46>
    1bf0:	00 23       	and	r16, r16
    1bf2:	41 f0       	breq	.+16     	; 0x1c04 <VL53L0X_SetSequenceStepEnable+0x50>
    1bf4:	01 30       	cpi	r16, 0x01	; 1
    1bf6:	49 f0       	breq	.+18     	; 0x1c0a <VL53L0X_SetSequenceStepEnable+0x56>
    1bf8:	44 c0       	rjmp	.+136    	; 0x1c82 <VL53L0X_SetSequenceStepEnable+0xce>
    1bfa:	03 30       	cpi	r16, 0x03	; 3
    1bfc:	61 f0       	breq	.+24     	; 0x1c16 <VL53L0X_SetSequenceStepEnable+0x62>
    1bfe:	04 30       	cpi	r16, 0x04	; 4
    1c00:	69 f0       	breq	.+26     	; 0x1c1c <VL53L0X_SetSequenceStepEnable+0x68>
    1c02:	3f c0       	rjmp	.+126    	; 0x1c82 <VL53L0X_SetSequenceStepEnable+0xce>
    1c04:	08 2f       	mov	r16, r24
    1c06:	00 61       	ori	r16, 0x10	; 16
    1c08:	40 c0       	rjmp	.+128    	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c0a:	08 2f       	mov	r16, r24
    1c0c:	08 62       	ori	r16, 0x28	; 40
    1c0e:	3d c0       	rjmp	.+122    	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c10:	08 2f       	mov	r16, r24
    1c12:	04 60       	ori	r16, 0x04	; 4
    1c14:	3a c0       	rjmp	.+116    	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c16:	08 2f       	mov	r16, r24
    1c18:	00 64       	ori	r16, 0x40	; 64
    1c1a:	37 c0       	rjmp	.+110    	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c1c:	08 2f       	mov	r16, r24
    1c1e:	00 68       	ori	r16, 0x80	; 128
    1c20:	34 c0       	rjmp	.+104    	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c22:	02 30       	cpi	r16, 0x02	; 2
    1c24:	89 f0       	breq	.+34     	; 0x1c48 <VL53L0X_SetSequenceStepEnable+0x94>
    1c26:	28 f4       	brcc	.+10     	; 0x1c32 <VL53L0X_SetSequenceStepEnable+0x7e>
    1c28:	00 23       	and	r16, r16
    1c2a:	41 f0       	breq	.+16     	; 0x1c3c <VL53L0X_SetSequenceStepEnable+0x88>
    1c2c:	01 30       	cpi	r16, 0x01	; 1
    1c2e:	49 f0       	breq	.+18     	; 0x1c42 <VL53L0X_SetSequenceStepEnable+0x8e>
    1c30:	2a c0       	rjmp	.+84     	; 0x1c86 <VL53L0X_SetSequenceStepEnable+0xd2>
    1c32:	03 30       	cpi	r16, 0x03	; 3
    1c34:	61 f0       	breq	.+24     	; 0x1c4e <VL53L0X_SetSequenceStepEnable+0x9a>
    1c36:	04 30       	cpi	r16, 0x04	; 4
    1c38:	69 f0       	breq	.+26     	; 0x1c54 <VL53L0X_SetSequenceStepEnable+0xa0>
    1c3a:	25 c0       	rjmp	.+74     	; 0x1c86 <VL53L0X_SetSequenceStepEnable+0xd2>
    1c3c:	08 2f       	mov	r16, r24
    1c3e:	0f 7e       	andi	r16, 0xEF	; 239
    1c40:	24 c0       	rjmp	.+72     	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c42:	08 2f       	mov	r16, r24
    1c44:	07 7d       	andi	r16, 0xD7	; 215
    1c46:	21 c0       	rjmp	.+66     	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c48:	08 2f       	mov	r16, r24
    1c4a:	0b 7f       	andi	r16, 0xFB	; 251
    1c4c:	1e c0       	rjmp	.+60     	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c4e:	08 2f       	mov	r16, r24
    1c50:	0f 7b       	andi	r16, 0xBF	; 191
    1c52:	1b c0       	rjmp	.+54     	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c54:	08 2f       	mov	r16, r24
    1c56:	0f 77       	andi	r16, 0x7F	; 127
    1c58:	18 c0       	rjmp	.+48     	; 0x1c8a <VL53L0X_SetSequenceStepEnable+0xd6>
    1c5a:	40 2f       	mov	r20, r16
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	c7 01       	movw	r24, r14
    1c60:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    1c64:	18 2f       	mov	r17, r24
    1c66:	81 11       	cpse	r24, r1
    1c68:	12 c0       	rjmp	.+36     	; 0x1c8e <VL53L0X_SetSequenceStepEnable+0xda>
    1c6a:	f7 01       	movw	r30, r14
    1c6c:	e3 5e       	subi	r30, 0xE3	; 227
    1c6e:	fe 4f       	sbci	r31, 0xFE	; 254
    1c70:	00 83       	st	Z, r16
    1c72:	f7 01       	movw	r30, r14
    1c74:	42 89       	ldd	r20, Z+18	; 0x12
    1c76:	53 89       	ldd	r21, Z+19	; 0x13
    1c78:	64 89       	ldd	r22, Z+20	; 0x14
    1c7a:	75 89       	ldd	r23, Z+21	; 0x15
    1c7c:	c7 01       	movw	r24, r14
    1c7e:	94 df       	rcall	.-216    	; 0x1ba8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
    1c80:	06 c0       	rjmp	.+12     	; 0x1c8e <VL53L0X_SetSequenceStepEnable+0xda>
    1c82:	1c ef       	ldi	r17, 0xFC	; 252
    1c84:	04 c0       	rjmp	.+8      	; 0x1c8e <VL53L0X_SetSequenceStepEnable+0xda>
    1c86:	1c ef       	ldi	r17, 0xFC	; 252
    1c88:	02 c0       	rjmp	.+4      	; 0x1c8e <VL53L0X_SetSequenceStepEnable+0xda>
    1c8a:	80 13       	cpse	r24, r16
    1c8c:	e6 cf       	rjmp	.-52     	; 0x1c5a <VL53L0X_SetSequenceStepEnable+0xa6>
    1c8e:	81 2f       	mov	r24, r17
    1c90:	0f 90       	pop	r0
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	ff 90       	pop	r15
    1c9c:	ef 90       	pop	r14
    1c9e:	df 90       	pop	r13
    1ca0:	08 95       	ret

00001ca2 <sequence_step_enabled>:
    1ca2:	62 30       	cpi	r22, 0x02	; 2
    1ca4:	d9 f0       	breq	.+54     	; 0x1cdc <sequence_step_enabled+0x3a>
    1ca6:	28 f4       	brcc	.+10     	; 0x1cb2 <sequence_step_enabled+0x10>
    1ca8:	66 23       	and	r22, r22
    1caa:	59 f0       	breq	.+22     	; 0x1cc2 <sequence_step_enabled+0x20>
    1cac:	61 30       	cpi	r22, 0x01	; 1
    1cae:	79 f0       	breq	.+30     	; 0x1cce <sequence_step_enabled+0x2c>
    1cb0:	04 c0       	rjmp	.+8      	; 0x1cba <sequence_step_enabled+0x18>
    1cb2:	63 30       	cpi	r22, 0x03	; 3
    1cb4:	d1 f0       	breq	.+52     	; 0x1cea <sequence_step_enabled+0x48>
    1cb6:	64 30       	cpi	r22, 0x04	; 4
    1cb8:	f9 f0       	breq	.+62     	; 0x1cf8 <sequence_step_enabled+0x56>
    1cba:	f9 01       	movw	r30, r18
    1cbc:	10 82       	st	Z, r1
    1cbe:	8c ef       	ldi	r24, 0xFC	; 252
    1cc0:	08 95       	ret
    1cc2:	42 95       	swap	r20
    1cc4:	41 70       	andi	r20, 0x01	; 1
    1cc6:	f9 01       	movw	r30, r18
    1cc8:	40 83       	st	Z, r20
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	08 95       	ret
    1cce:	43 fb       	bst	r20, 3
    1cd0:	44 27       	eor	r20, r20
    1cd2:	40 f9       	bld	r20, 0
    1cd4:	f9 01       	movw	r30, r18
    1cd6:	40 83       	st	Z, r20
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	08 95       	ret
    1cdc:	42 fb       	bst	r20, 2
    1cde:	44 27       	eor	r20, r20
    1ce0:	40 f9       	bld	r20, 0
    1ce2:	f9 01       	movw	r30, r18
    1ce4:	40 83       	st	Z, r20
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	08 95       	ret
    1cea:	46 fb       	bst	r20, 6
    1cec:	44 27       	eor	r20, r20
    1cee:	40 f9       	bld	r20, 0
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	40 83       	st	Z, r20
    1cf4:	80 e0       	ldi	r24, 0x00	; 0
    1cf6:	08 95       	ret
    1cf8:	44 1f       	adc	r20, r20
    1cfa:	44 27       	eor	r20, r20
    1cfc:	44 1f       	adc	r20, r20
    1cfe:	f9 01       	movw	r30, r18
    1d00:	40 83       	st	Z, r20
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	08 95       	ret

00001d06 <VL53L0X_GetSequenceStepEnables>:
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	1f 92       	push	r1
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	8c 01       	movw	r16, r24
    1d1a:	7b 01       	movw	r14, r22
    1d1c:	19 82       	std	Y+1, r1	; 0x01
    1d1e:	ae 01       	movw	r20, r28
    1d20:	4f 5f       	subi	r20, 0xFF	; 255
    1d22:	5f 4f       	sbci	r21, 0xFF	; 255
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    1d2a:	81 11       	cpse	r24, r1
    1d2c:	20 c0       	rjmp	.+64     	; 0x1d6e <VL53L0X_GetSequenceStepEnables+0x68>
    1d2e:	97 01       	movw	r18, r14
    1d30:	49 81       	ldd	r20, Y+1	; 0x01
    1d32:	60 e0       	ldi	r22, 0x00	; 0
    1d34:	c8 01       	movw	r24, r16
    1d36:	b5 df       	rcall	.-150    	; 0x1ca2 <sequence_step_enabled>
    1d38:	81 11       	cpse	r24, r1
    1d3a:	22 c0       	rjmp	.+68     	; 0x1d80 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d3c:	97 01       	movw	r18, r14
    1d3e:	2e 5f       	subi	r18, 0xFE	; 254
    1d40:	3f 4f       	sbci	r19, 0xFF	; 255
    1d42:	49 81       	ldd	r20, Y+1	; 0x01
    1d44:	61 e0       	ldi	r22, 0x01	; 1
    1d46:	c8 01       	movw	r24, r16
    1d48:	ac df       	rcall	.-168    	; 0x1ca2 <sequence_step_enabled>
    1d4a:	81 11       	cpse	r24, r1
    1d4c:	19 c0       	rjmp	.+50     	; 0x1d80 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d4e:	97 01       	movw	r18, r14
    1d50:	2f 5f       	subi	r18, 0xFF	; 255
    1d52:	3f 4f       	sbci	r19, 0xFF	; 255
    1d54:	49 81       	ldd	r20, Y+1	; 0x01
    1d56:	62 e0       	ldi	r22, 0x02	; 2
    1d58:	c8 01       	movw	r24, r16
    1d5a:	a3 df       	rcall	.-186    	; 0x1ca2 <sequence_step_enabled>
    1d5c:	81 11       	cpse	r24, r1
    1d5e:	10 c0       	rjmp	.+32     	; 0x1d80 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d60:	97 01       	movw	r18, r14
    1d62:	2d 5f       	subi	r18, 0xFD	; 253
    1d64:	3f 4f       	sbci	r19, 0xFF	; 255
    1d66:	49 81       	ldd	r20, Y+1	; 0x01
    1d68:	63 e0       	ldi	r22, 0x03	; 3
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	9a df       	rcall	.-204    	; 0x1ca2 <sequence_step_enabled>
    1d6e:	81 11       	cpse	r24, r1
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <VL53L0X_GetSequenceStepEnables+0x7a>
    1d72:	97 01       	movw	r18, r14
    1d74:	2c 5f       	subi	r18, 0xFC	; 252
    1d76:	3f 4f       	sbci	r19, 0xFF	; 255
    1d78:	49 81       	ldd	r20, Y+1	; 0x01
    1d7a:	64 e0       	ldi	r22, 0x04	; 4
    1d7c:	c8 01       	movw	r24, r16
    1d7e:	91 df       	rcall	.-222    	; 0x1ca2 <sequence_step_enabled>
    1d80:	0f 90       	pop	r0
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	08 95       	ret

00001d90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
    1d90:	cf 92       	push	r12
    1d92:	df 92       	push	r13
    1d94:	ef 92       	push	r14
    1d96:	ff 92       	push	r15
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x10>
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x12>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x14>
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	7c 01       	movw	r14, r24
    1daa:	6b 01       	movw	r12, r22
    1dac:	ae 01       	movw	r20, r28
    1dae:	4f 5f       	subi	r20, 0xFF	; 255
    1db0:	5f 4f       	sbci	r21, 0xFF	; 255
    1db2:	68 ef       	ldi	r22, 0xF8	; 248
    1db4:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    1db8:	18 2f       	mov	r17, r24
    1dba:	81 11       	cpse	r24, r1
    1dbc:	26 c0       	rjmp	.+76     	; 0x1e0a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    1dbe:	ae 01       	movw	r20, r28
    1dc0:	4d 5f       	subi	r20, 0xFD	; 253
    1dc2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dc4:	64 e0       	ldi	r22, 0x04	; 4
    1dc6:	c7 01       	movw	r24, r14
    1dc8:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    1dcc:	18 2f       	mov	r17, r24
    1dce:	81 11       	cpse	r24, r1
    1dd0:	1c c0       	rjmp	.+56     	; 0x1e0a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x7a>
    1dd2:	29 81       	ldd	r18, Y+1	; 0x01
    1dd4:	3a 81       	ldd	r19, Y+2	; 0x02
    1dd6:	21 15       	cp	r18, r1
    1dd8:	31 05       	cpc	r19, r1
    1dda:	69 f0       	breq	.+26     	; 0x1df6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x66>
    1ddc:	40 e0       	ldi	r20, 0x00	; 0
    1dde:	50 e0       	ldi	r21, 0x00	; 0
    1de0:	6b 81       	ldd	r22, Y+3	; 0x03
    1de2:	7c 81       	ldd	r23, Y+4	; 0x04
    1de4:	8d 81       	ldd	r24, Y+5	; 0x05
    1de6:	9e 81       	ldd	r25, Y+6	; 0x06
    1de8:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    1dec:	f6 01       	movw	r30, r12
    1dee:	20 83       	st	Z, r18
    1df0:	31 83       	std	Z+1, r19	; 0x01
    1df2:	42 83       	std	Z+2, r20	; 0x02
    1df4:	53 83       	std	Z+3, r21	; 0x03
    1df6:	f6 01       	movw	r30, r12
    1df8:	80 81       	ld	r24, Z
    1dfa:	91 81       	ldd	r25, Z+1	; 0x01
    1dfc:	a2 81       	ldd	r26, Z+2	; 0x02
    1dfe:	b3 81       	ldd	r27, Z+3	; 0x03
    1e00:	f7 01       	movw	r30, r14
    1e02:	86 8b       	std	Z+22, r24	; 0x16
    1e04:	97 8b       	std	Z+23, r25	; 0x17
    1e06:	a0 8f       	std	Z+24, r26	; 0x18
    1e08:	b1 8f       	std	Z+25, r27	; 0x19
    1e0a:	81 2f       	mov	r24, r17
    1e0c:	26 96       	adiw	r28, 0x06	; 6
    1e0e:	0f b6       	in	r0, 0x3f	; 63
    1e10:	f8 94       	cli
    1e12:	de bf       	out	0x3e, r29	; 62
    1e14:	0f be       	out	0x3f, r0	; 63
    1e16:	cd bf       	out	0x3d, r28	; 61
    1e18:	df 91       	pop	r29
    1e1a:	cf 91       	pop	r28
    1e1c:	1f 91       	pop	r17
    1e1e:	ff 90       	pop	r15
    1e20:	ef 90       	pop	r14
    1e22:	df 90       	pop	r13
    1e24:	cf 90       	pop	r12
    1e26:	08 95       	ret

00001e28 <VL53L0X_SetXTalkCompensationEnable>:
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	ec 01       	movw	r28, r24
    1e2e:	66 23       	and	r22, r22
    1e30:	91 f0       	breq	.+36     	; 0x1e56 <VL53L0X_SetXTalkCompensationEnable+0x2e>
    1e32:	fc 01       	movw	r30, r24
    1e34:	e7 5c       	subi	r30, 0xC7	; 199
    1e36:	fe 4f       	sbci	r31, 0xFE	; 254
    1e38:	80 81       	ld	r24, Z
    1e3a:	91 81       	ldd	r25, Z+1	; 0x01
    1e3c:	88 3e       	cpi	r24, 0xE8	; 232
    1e3e:	93 40       	sbci	r25, 0x03	; 3
    1e40:	91 f4       	brne	.+36     	; 0x1e66 <VL53L0X_SetXTalkCompensationEnable+0x3e>
    1e42:	4d 8d       	ldd	r20, Y+29	; 0x1d
    1e44:	5e 8d       	ldd	r21, Y+30	; 0x1e
    1e46:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e48:	78 a1       	ldd	r23, Y+32	; 0x20
    1e4a:	10 c0       	rjmp	.+32     	; 0x1e6c <VL53L0X_SetXTalkCompensationEnable+0x44>
    1e4c:	1a 8e       	std	Y+26, r1	; 0x1a
    1e4e:	1c c0       	rjmp	.+56     	; 0x1e88 <VL53L0X_SetXTalkCompensationEnable+0x60>
    1e50:	91 e0       	ldi	r25, 0x01	; 1
    1e52:	9a 8f       	std	Y+26, r25	; 0x1a
    1e54:	19 c0       	rjmp	.+50     	; 0x1e88 <VL53L0X_SetXTalkCompensationEnable+0x60>
    1e56:	40 e0       	ldi	r20, 0x00	; 0
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	60 e2       	ldi	r22, 0x20	; 32
    1e5c:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    1e60:	81 11       	cpse	r24, r1
    1e62:	12 c0       	rjmp	.+36     	; 0x1e88 <VL53L0X_SetXTalkCompensationEnable+0x60>
    1e64:	f3 cf       	rjmp	.-26     	; 0x1e4c <VL53L0X_SetXTalkCompensationEnable+0x24>
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	50 e0       	ldi	r21, 0x00	; 0
    1e6a:	ba 01       	movw	r22, r20
    1e6c:	68 94       	set
    1e6e:	12 f8       	bld	r1, 2
    1e70:	76 95       	lsr	r23
    1e72:	67 95       	ror	r22
    1e74:	57 95       	ror	r21
    1e76:	47 95       	ror	r20
    1e78:	16 94       	lsr	r1
    1e7a:	d1 f7       	brne	.-12     	; 0x1e70 <VL53L0X_SetXTalkCompensationEnable+0x48>
    1e7c:	60 e2       	ldi	r22, 0x20	; 32
    1e7e:	ce 01       	movw	r24, r28
    1e80:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    1e84:	88 23       	and	r24, r24
    1e86:	21 f3       	breq	.-56     	; 0x1e50 <VL53L0X_SetXTalkCompensationEnable+0x28>
    1e88:	df 91       	pop	r29
    1e8a:	cf 91       	pop	r28
    1e8c:	08 95       	ret

00001e8e <VL53L0X_GetXTalkCompensationEnable>:
    1e8e:	fc 01       	movw	r30, r24
    1e90:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e92:	fb 01       	movw	r30, r22
    1e94:	80 83       	st	Z, r24
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	08 95       	ret

00001e9a <VL53L0X_SetXTalkCompensationRateMegaCps>:
    1e9a:	cf 92       	push	r12
    1e9c:	df 92       	push	r13
    1e9e:	ef 92       	push	r14
    1ea0:	ff 92       	push	r15
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	fc 01       	movw	r30, r24
    1ea8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1eaa:	21 11       	cpse	r18, r1
    1eac:	06 c0       	rjmp	.+12     	; 0x1eba <VL53L0X_SetXTalkCompensationRateMegaCps+0x20>
    1eae:	45 8f       	std	Z+29, r20	; 0x1d
    1eb0:	56 8f       	std	Z+30, r21	; 0x1e
    1eb2:	67 8f       	std	Z+31, r22	; 0x1f
    1eb4:	70 a3       	std	Z+32, r23	; 0x20
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	23 c0       	rjmp	.+70     	; 0x1f00 <VL53L0X_SetXTalkCompensationRateMegaCps+0x66>
    1eba:	fc 01       	movw	r30, r24
    1ebc:	e7 5c       	subi	r30, 0xC7	; 199
    1ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    1ec0:	20 81       	ld	r18, Z
    1ec2:	31 81       	ldd	r19, Z+1	; 0x01
    1ec4:	28 3e       	cpi	r18, 0xE8	; 232
    1ec6:	33 40       	sbci	r19, 0x03	; 3
    1ec8:	61 f4       	brne	.+24     	; 0x1ee2 <VL53L0X_SetXTalkCompensationRateMegaCps+0x48>
    1eca:	6a 01       	movw	r12, r20
    1ecc:	7b 01       	movw	r14, r22
    1ece:	68 94       	set
    1ed0:	12 f8       	bld	r1, 2
    1ed2:	f6 94       	lsr	r15
    1ed4:	e7 94       	ror	r14
    1ed6:	d7 94       	ror	r13
    1ed8:	c7 94       	ror	r12
    1eda:	16 94       	lsr	r1
    1edc:	d1 f7       	brne	.-12     	; 0x1ed2 <VL53L0X_SetXTalkCompensationRateMegaCps+0x38>
    1ede:	96 01       	movw	r18, r12
    1ee0:	02 c0       	rjmp	.+4      	; 0x1ee6 <VL53L0X_SetXTalkCompensationRateMegaCps+0x4c>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	6a 01       	movw	r12, r20
    1ee8:	7b 01       	movw	r14, r22
    1eea:	ec 01       	movw	r28, r24
    1eec:	a9 01       	movw	r20, r18
    1eee:	60 e2       	ldi	r22, 0x20	; 32
    1ef0:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	04 c0       	rjmp	.+8      	; 0x1f00 <VL53L0X_SetXTalkCompensationRateMegaCps+0x66>
    1ef8:	cd 8e       	std	Y+29, r12	; 0x1d
    1efa:	de 8e       	std	Y+30, r13	; 0x1e
    1efc:	ef 8e       	std	Y+31, r14	; 0x1f
    1efe:	f8 a2       	std	Y+32, r15	; 0x20
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	ff 90       	pop	r15
    1f06:	ef 90       	pop	r14
    1f08:	df 90       	pop	r13
    1f0a:	cf 90       	pop	r12
    1f0c:	08 95       	ret

00001f0e <VL53L0X_GetXTalkCompensationRateMegaCps>:
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <VL53L0X_GetXTalkCompensationRateMegaCps+0xe>
    1f1c:	cd b7       	in	r28, 0x3d	; 61
    1f1e:	de b7       	in	r29, 0x3e	; 62
    1f20:	8c 01       	movw	r16, r24
    1f22:	7b 01       	movw	r14, r22
    1f24:	ae 01       	movw	r20, r28
    1f26:	4f 5f       	subi	r20, 0xFF	; 255
    1f28:	5f 4f       	sbci	r21, 0xFF	; 255
    1f2a:	60 e2       	ldi	r22, 0x20	; 32
    1f2c:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    1f30:	81 11       	cpse	r24, r1
    1f32:	26 c0       	rjmp	.+76     	; 0x1f80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    1f34:	49 81       	ldd	r20, Y+1	; 0x01
    1f36:	5a 81       	ldd	r21, Y+2	; 0x02
    1f38:	41 15       	cp	r20, r1
    1f3a:	51 05       	cpc	r21, r1
    1f3c:	69 f4       	brne	.+26     	; 0x1f58 <VL53L0X_GetXTalkCompensationRateMegaCps+0x4a>
    1f3e:	f8 01       	movw	r30, r16
    1f40:	45 8d       	ldd	r20, Z+29	; 0x1d
    1f42:	56 8d       	ldd	r21, Z+30	; 0x1e
    1f44:	67 8d       	ldd	r22, Z+31	; 0x1f
    1f46:	70 a1       	ldd	r23, Z+32	; 0x20
    1f48:	f7 01       	movw	r30, r14
    1f4a:	40 83       	st	Z, r20
    1f4c:	51 83       	std	Z+1, r21	; 0x01
    1f4e:	62 83       	std	Z+2, r22	; 0x02
    1f50:	73 83       	std	Z+3, r23	; 0x03
    1f52:	f8 01       	movw	r30, r16
    1f54:	12 8e       	std	Z+26, r1	; 0x1a
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <VL53L0X_GetXTalkCompensationRateMegaCps+0x72>
    1f58:	44 0f       	add	r20, r20
    1f5a:	55 1f       	adc	r21, r21
    1f5c:	44 0f       	add	r20, r20
    1f5e:	55 1f       	adc	r21, r21
    1f60:	44 0f       	add	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	60 e0       	ldi	r22, 0x00	; 0
    1f66:	70 e0       	ldi	r23, 0x00	; 0
    1f68:	f7 01       	movw	r30, r14
    1f6a:	40 83       	st	Z, r20
    1f6c:	51 83       	std	Z+1, r21	; 0x01
    1f6e:	62 83       	std	Z+2, r22	; 0x02
    1f70:	73 83       	std	Z+3, r23	; 0x03
    1f72:	f8 01       	movw	r30, r16
    1f74:	45 8f       	std	Z+29, r20	; 0x1d
    1f76:	56 8f       	std	Z+30, r21	; 0x1e
    1f78:	67 8f       	std	Z+31, r22	; 0x1f
    1f7a:	70 a3       	std	Z+32, r23	; 0x20
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	92 8f       	std	Z+26, r25	; 0x1a
    1f80:	0f 90       	pop	r0
    1f82:	0f 90       	pop	r0
    1f84:	df 91       	pop	r29
    1f86:	cf 91       	pop	r28
    1f88:	1f 91       	pop	r17
    1f8a:	0f 91       	pop	r16
    1f8c:	ff 90       	pop	r15
    1f8e:	ef 90       	pop	r14
    1f90:	08 95       	ret

00001f92 <VL53L0X_SetRefCalibration>:
    1f92:	0c 94 77 20 	jmp	0x40ee	; 0x40ee <VL53L0X_set_ref_calibration>
    1f96:	08 95       	ret

00001f98 <VL53L0X_GetRefCalibration>:
    1f98:	0c 94 9c 20 	jmp	0x4138	; 0x4138 <VL53L0X_get_ref_calibration>
    1f9c:	08 95       	ret

00001f9e <VL53L0X_SetLimitCheckEnable>:
    1f9e:	8f 92       	push	r8
    1fa0:	9f 92       	push	r9
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	ef 92       	push	r14
    1fa8:	ff 92       	push	r15
    1faa:	1f 93       	push	r17
    1fac:	cf 93       	push	r28
    1fae:	df 93       	push	r29
    1fb0:	66 30       	cpi	r22, 0x06	; 6
    1fb2:	71 05       	cpc	r23, r1
    1fb4:	08 f0       	brcs	.+2      	; 0x1fb8 <VL53L0X_SetLimitCheckEnable+0x1a>
    1fb6:	47 c0       	rjmp	.+142    	; 0x2046 <VL53L0X_SetLimitCheckEnable+0xa8>
    1fb8:	44 23       	and	r20, r20
    1fba:	09 f4       	brne	.+2      	; 0x1fbe <VL53L0X_SetLimitCheckEnable+0x20>
    1fbc:	48 c0       	rjmp	.+144    	; 0x204e <VL53L0X_SetLimitCheckEnable+0xb0>
    1fbe:	fb 01       	movw	r30, r22
    1fc0:	ee 0f       	add	r30, r30
    1fc2:	ff 1f       	adc	r31, r31
    1fc4:	ee 0f       	add	r30, r30
    1fc6:	ff 1f       	adc	r31, r31
    1fc8:	e8 0f       	add	r30, r24
    1fca:	f9 1f       	adc	r31, r25
    1fcc:	81 a8       	ldd	r8, Z+49	; 0x31
    1fce:	92 a8       	ldd	r9, Z+50	; 0x32
    1fd0:	a3 a8       	ldd	r10, Z+51	; 0x33
    1fd2:	b4 a8       	ldd	r11, Z+52	; 0x34
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	31 e0       	ldi	r19, 0x01	; 1
    1fd8:	3f c0       	rjmp	.+126    	; 0x2058 <VL53L0X_SetLimitCheckEnable+0xba>
    1fda:	f7 01       	movw	r30, r14
    1fdc:	35 a3       	std	Z+37, r19	; 0x25
    1fde:	26 c0       	rjmp	.+76     	; 0x202c <VL53L0X_SetLimitCheckEnable+0x8e>
    1fe0:	b5 01       	movw	r22, r10
    1fe2:	a4 01       	movw	r20, r8
    1fe4:	03 2e       	mov	r0, r19
    1fe6:	39 e0       	ldi	r19, 0x09	; 9
    1fe8:	76 95       	lsr	r23
    1fea:	67 95       	ror	r22
    1fec:	57 95       	ror	r21
    1fee:	47 95       	ror	r20
    1ff0:	3a 95       	dec	r19
    1ff2:	d1 f7       	brne	.-12     	; 0x1fe8 <VL53L0X_SetLimitCheckEnable+0x4a>
    1ff4:	30 2d       	mov	r19, r0
    1ff6:	64 e4       	ldi	r22, 0x44	; 68
    1ff8:	c7 01       	movw	r24, r14
    1ffa:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <VL53L0X_SetLimitCheckEnable+0x8a>
    2000:	f7 01       	movw	r30, r14
    2002:	37 a3       	std	Z+39, r19	; 0x27
    2004:	13 c0       	rjmp	.+38     	; 0x202c <VL53L0X_SetLimitCheckEnable+0x8e>
    2006:	f7 01       	movw	r30, r14
    2008:	30 a7       	std	Z+40, r19	; 0x28
    200a:	10 c0       	rjmp	.+32     	; 0x202c <VL53L0X_SetLimitCheckEnable+0x8e>
    200c:	22 0f       	add	r18, r18
    200e:	4e ef       	ldi	r20, 0xFE	; 254
    2010:	60 e6       	ldi	r22, 0x60	; 96
    2012:	c7 01       	movw	r24, r14
    2014:	0e 94 31 32 	call	0x6462	; 0x6462 <VL53L0X_UpdateByte>
    2018:	07 c0       	rjmp	.+14     	; 0x2028 <VL53L0X_SetLimitCheckEnable+0x8a>
    201a:	22 95       	swap	r18
    201c:	20 7f       	andi	r18, 0xF0	; 240
    201e:	4f ee       	ldi	r20, 0xEF	; 239
    2020:	60 e6       	ldi	r22, 0x60	; 96
    2022:	c7 01       	movw	r24, r14
    2024:	0e 94 31 32 	call	0x6462	; 0x6462 <VL53L0X_UpdateByte>
    2028:	81 11       	cpse	r24, r1
    202a:	2d c0       	rjmp	.+90     	; 0x2086 <VL53L0X_SetLimitCheckEnable+0xe8>
    202c:	11 11       	cpse	r17, r1
    202e:	05 c0       	rjmp	.+10     	; 0x203a <VL53L0X_SetLimitCheckEnable+0x9c>
    2030:	ce 0d       	add	r28, r14
    2032:	df 1d       	adc	r29, r15
    2034:	1d a2       	std	Y+37, r1	; 0x25
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	26 c0       	rjmp	.+76     	; 0x2086 <VL53L0X_SetLimitCheckEnable+0xe8>
    203a:	ce 0d       	add	r28, r14
    203c:	df 1d       	adc	r29, r15
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	8d a3       	std	Y+37, r24	; 0x25
    2042:	80 e0       	ldi	r24, 0x00	; 0
    2044:	20 c0       	rjmp	.+64     	; 0x2086 <VL53L0X_SetLimitCheckEnable+0xe8>
    2046:	8c ef       	ldi	r24, 0xFC	; 252
    2048:	1e c0       	rjmp	.+60     	; 0x2086 <VL53L0X_SetLimitCheckEnable+0xe8>
    204a:	8c ef       	ldi	r24, 0xFC	; 252
    204c:	1c c0       	rjmp	.+56     	; 0x2086 <VL53L0X_SetLimitCheckEnable+0xe8>
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	81 2c       	mov	r8, r1
    2054:	91 2c       	mov	r9, r1
    2056:	54 01       	movw	r10, r8
    2058:	14 2f       	mov	r17, r20
    205a:	eb 01       	movw	r28, r22
    205c:	7c 01       	movw	r14, r24
    205e:	62 30       	cpi	r22, 0x02	; 2
    2060:	71 05       	cpc	r23, r1
    2062:	71 f2       	breq	.-100    	; 0x2000 <VL53L0X_SetLimitCheckEnable+0x62>
    2064:	40 f4       	brcc	.+16     	; 0x2076 <VL53L0X_SetLimitCheckEnable+0xd8>
    2066:	20 97       	sbiw	r28, 0x00	; 0
    2068:	09 f4       	brne	.+2      	; 0x206c <VL53L0X_SetLimitCheckEnable+0xce>
    206a:	b7 cf       	rjmp	.-146    	; 0x1fda <VL53L0X_SetLimitCheckEnable+0x3c>
    206c:	61 30       	cpi	r22, 0x01	; 1
    206e:	71 05       	cpc	r23, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <VL53L0X_SetLimitCheckEnable+0xd6>
    2072:	b6 cf       	rjmp	.-148    	; 0x1fe0 <VL53L0X_SetLimitCheckEnable+0x42>
    2074:	ea cf       	rjmp	.-44     	; 0x204a <VL53L0X_SetLimitCheckEnable+0xac>
    2076:	64 30       	cpi	r22, 0x04	; 4
    2078:	71 05       	cpc	r23, r1
    207a:	41 f2       	breq	.-112    	; 0x200c <VL53L0X_SetLimitCheckEnable+0x6e>
    207c:	20 f2       	brcs	.-120    	; 0x2006 <VL53L0X_SetLimitCheckEnable+0x68>
    207e:	65 30       	cpi	r22, 0x05	; 5
    2080:	71 05       	cpc	r23, r1
    2082:	59 f2       	breq	.-106    	; 0x201a <VL53L0X_SetLimitCheckEnable+0x7c>
    2084:	e2 cf       	rjmp	.-60     	; 0x204a <VL53L0X_SetLimitCheckEnable+0xac>
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	ff 90       	pop	r15
    208e:	ef 90       	pop	r14
    2090:	bf 90       	pop	r11
    2092:	af 90       	pop	r10
    2094:	9f 90       	pop	r9
    2096:	8f 90       	pop	r8
    2098:	08 95       	ret

0000209a <VL53L0X_GetLimitCheckEnable>:
    209a:	66 30       	cpi	r22, 0x06	; 6
    209c:	71 05       	cpc	r23, r1
    209e:	20 f0       	brcs	.+8      	; 0x20a8 <VL53L0X_GetLimitCheckEnable+0xe>
    20a0:	fa 01       	movw	r30, r20
    20a2:	10 82       	st	Z, r1
    20a4:	8c ef       	ldi	r24, 0xFC	; 252
    20a6:	08 95       	ret
    20a8:	fc 01       	movw	r30, r24
    20aa:	e6 0f       	add	r30, r22
    20ac:	f7 1f       	adc	r31, r23
    20ae:	85 a1       	ldd	r24, Z+37	; 0x25
    20b0:	fa 01       	movw	r30, r20
    20b2:	80 83       	st	Z, r24
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	08 95       	ret

000020b8 <VL53L0X_SetLimitCheckValue>:
    20b8:	cf 92       	push	r12
    20ba:	df 92       	push	r13
    20bc:	ef 92       	push	r14
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	fc 01       	movw	r30, r24
    20ca:	e6 0f       	add	r30, r22
    20cc:	f7 1f       	adc	r31, r23
    20ce:	e5 a1       	ldd	r30, Z+37	; 0x25
    20d0:	e1 11       	cpse	r30, r1
    20d2:	0d c0       	rjmp	.+26     	; 0x20ee <VL53L0X_SetLimitCheckValue+0x36>
    20d4:	66 0f       	add	r22, r22
    20d6:	77 1f       	adc	r23, r23
    20d8:	66 0f       	add	r22, r22
    20da:	77 1f       	adc	r23, r23
    20dc:	ec 01       	movw	r28, r24
    20de:	c6 0f       	add	r28, r22
    20e0:	d7 1f       	adc	r29, r23
    20e2:	29 ab       	std	Y+49, r18	; 0x31
    20e4:	3a ab       	std	Y+50, r19	; 0x32
    20e6:	4b ab       	std	Y+51, r20	; 0x33
    20e8:	5c ab       	std	Y+52, r21	; 0x34
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	56 c0       	rjmp	.+172    	; 0x219a <VL53L0X_SetLimitCheckValue+0xe2>
    20ee:	69 01       	movw	r12, r18
    20f0:	7a 01       	movw	r14, r20
    20f2:	eb 01       	movw	r28, r22
    20f4:	8c 01       	movw	r16, r24
    20f6:	62 30       	cpi	r22, 0x02	; 2
    20f8:	71 05       	cpc	r23, r1
    20fa:	19 f1       	breq	.+70     	; 0x2142 <VL53L0X_SetLimitCheckValue+0x8a>
    20fc:	30 f4       	brcc	.+12     	; 0x210a <VL53L0X_SetLimitCheckValue+0x52>
    20fe:	20 97       	sbiw	r28, 0x00	; 0
    2100:	59 f0       	breq	.+22     	; 0x2118 <VL53L0X_SetLimitCheckValue+0x60>
    2102:	61 30       	cpi	r22, 0x01	; 1
    2104:	71 05       	cpc	r23, r1
    2106:	71 f0       	breq	.+28     	; 0x2124 <VL53L0X_SetLimitCheckValue+0x6c>
    2108:	38 c0       	rjmp	.+112    	; 0x217a <VL53L0X_SetLimitCheckValue+0xc2>
    210a:	63 30       	cpi	r22, 0x03	; 3
    210c:	71 05       	cpc	r23, r1
    210e:	f9 f0       	breq	.+62     	; 0x214e <VL53L0X_SetLimitCheckValue+0x96>
    2110:	66 30       	cpi	r22, 0x06	; 6
    2112:	71 05       	cpc	r23, r1
    2114:	18 f1       	brcs	.+70     	; 0x215c <VL53L0X_SetLimitCheckValue+0xa4>
    2116:	31 c0       	rjmp	.+98     	; 0x217a <VL53L0X_SetLimitCheckValue+0xc2>
    2118:	fc 01       	movw	r30, r24
    211a:	21 ab       	std	Z+49, r18	; 0x31
    211c:	32 ab       	std	Z+50, r19	; 0x32
    211e:	43 ab       	std	Z+51, r20	; 0x33
    2120:	54 ab       	std	Z+52, r21	; 0x34
    2122:	2e c0       	rjmp	.+92     	; 0x2180 <VL53L0X_SetLimitCheckValue+0xc8>
    2124:	ba 01       	movw	r22, r20
    2126:	a9 01       	movw	r20, r18
    2128:	03 2e       	mov	r0, r19
    212a:	39 e0       	ldi	r19, 0x09	; 9
    212c:	76 95       	lsr	r23
    212e:	67 95       	ror	r22
    2130:	57 95       	ror	r21
    2132:	47 95       	ror	r20
    2134:	3a 95       	dec	r19
    2136:	d1 f7       	brne	.-12     	; 0x212c <VL53L0X_SetLimitCheckValue+0x74>
    2138:	30 2d       	mov	r19, r0
    213a:	64 e4       	ldi	r22, 0x44	; 68
    213c:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    2140:	1d c0       	rjmp	.+58     	; 0x217c <VL53L0X_SetLimitCheckValue+0xc4>
    2142:	fc 01       	movw	r30, r24
    2144:	21 af       	std	Z+57, r18	; 0x39
    2146:	32 af       	std	Z+58, r19	; 0x3a
    2148:	43 af       	std	Z+59, r20	; 0x3b
    214a:	54 af       	std	Z+60, r21	; 0x3c
    214c:	19 c0       	rjmp	.+50     	; 0x2180 <VL53L0X_SetLimitCheckValue+0xc8>
    214e:	fc 01       	movw	r30, r24
    2150:	fd 96       	adiw	r30, 0x3d	; 61
    2152:	20 83       	st	Z, r18
    2154:	31 83       	std	Z+1, r19	; 0x01
    2156:	42 83       	std	Z+2, r20	; 0x02
    2158:	53 83       	std	Z+3, r21	; 0x03
    215a:	12 c0       	rjmp	.+36     	; 0x2180 <VL53L0X_SetLimitCheckValue+0xc8>
    215c:	ba 01       	movw	r22, r20
    215e:	a9 01       	movw	r20, r18
    2160:	03 2e       	mov	r0, r19
    2162:	39 e0       	ldi	r19, 0x09	; 9
    2164:	76 95       	lsr	r23
    2166:	67 95       	ror	r22
    2168:	57 95       	ror	r21
    216a:	47 95       	ror	r20
    216c:	3a 95       	dec	r19
    216e:	d1 f7       	brne	.-12     	; 0x2164 <VL53L0X_SetLimitCheckValue+0xac>
    2170:	30 2d       	mov	r19, r0
    2172:	64 e6       	ldi	r22, 0x64	; 100
    2174:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    2178:	01 c0       	rjmp	.+2      	; 0x217c <VL53L0X_SetLimitCheckValue+0xc4>
    217a:	8c ef       	ldi	r24, 0xFC	; 252
    217c:	81 11       	cpse	r24, r1
    217e:	0d c0       	rjmp	.+26     	; 0x219a <VL53L0X_SetLimitCheckValue+0xe2>
    2180:	be 01       	movw	r22, r28
    2182:	66 0f       	add	r22, r22
    2184:	77 1f       	adc	r23, r23
    2186:	66 0f       	add	r22, r22
    2188:	77 1f       	adc	r23, r23
    218a:	e8 01       	movw	r28, r16
    218c:	c6 0f       	add	r28, r22
    218e:	d7 1f       	adc	r29, r23
    2190:	c9 aa       	std	Y+49, r12	; 0x31
    2192:	da aa       	std	Y+50, r13	; 0x32
    2194:	eb aa       	std	Y+51, r14	; 0x33
    2196:	fc aa       	std	Y+52, r15	; 0x34
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	1f 91       	pop	r17
    21a0:	0f 91       	pop	r16
    21a2:	ff 90       	pop	r15
    21a4:	ef 90       	pop	r14
    21a6:	df 90       	pop	r13
    21a8:	cf 90       	pop	r12
    21aa:	08 95       	ret

000021ac <VL53L0X_GetLimitCheckValue>:
    21ac:	ef 92       	push	r14
    21ae:	ff 92       	push	r15
    21b0:	0f 93       	push	r16
    21b2:	1f 93       	push	r17
    21b4:	cf 93       	push	r28
    21b6:	df 93       	push	r29
    21b8:	00 d0       	rcall	.+0      	; 0x21ba <VL53L0X_GetLimitCheckValue+0xe>
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
    21be:	8c 01       	movw	r16, r24
    21c0:	7a 01       	movw	r14, r20
    21c2:	62 30       	cpi	r22, 0x02	; 2
    21c4:	71 05       	cpc	r23, r1
    21c6:	51 f1       	breq	.+84     	; 0x221c <VL53L0X_GetLimitCheckValue+0x70>
    21c8:	38 f4       	brcc	.+14     	; 0x21d8 <VL53L0X_GetLimitCheckValue+0x2c>
    21ca:	61 15       	cp	r22, r1
    21cc:	71 05       	cpc	r23, r1
    21ce:	59 f0       	breq	.+22     	; 0x21e6 <VL53L0X_GetLimitCheckValue+0x3a>
    21d0:	61 30       	cpi	r22, 0x01	; 1
    21d2:	71 05       	cpc	r23, r1
    21d4:	71 f0       	breq	.+28     	; 0x21f2 <VL53L0X_GetLimitCheckValue+0x46>
    21d6:	59 c0       	rjmp	.+178    	; 0x228a <VL53L0X_GetLimitCheckValue+0xde>
    21d8:	63 30       	cpi	r22, 0x03	; 3
    21da:	71 05       	cpc	r23, r1
    21dc:	29 f1       	breq	.+74     	; 0x2228 <VL53L0X_GetLimitCheckValue+0x7c>
    21de:	66 30       	cpi	r22, 0x06	; 6
    21e0:	71 05       	cpc	r23, r1
    21e2:	48 f1       	brcs	.+82     	; 0x2236 <VL53L0X_GetLimitCheckValue+0x8a>
    21e4:	52 c0       	rjmp	.+164    	; 0x228a <VL53L0X_GetLimitCheckValue+0xde>
    21e6:	fc 01       	movw	r30, r24
    21e8:	81 a9       	ldd	r24, Z+49	; 0x31
    21ea:	92 a9       	ldd	r25, Z+50	; 0x32
    21ec:	a3 a9       	ldd	r26, Z+51	; 0x33
    21ee:	b4 a9       	ldd	r27, Z+52	; 0x34
    21f0:	4e c0       	rjmp	.+156    	; 0x228e <VL53L0X_GetLimitCheckValue+0xe2>
    21f2:	ae 01       	movw	r20, r28
    21f4:	4f 5f       	subi	r20, 0xFF	; 255
    21f6:	5f 4f       	sbci	r21, 0xFF	; 255
    21f8:	64 e4       	ldi	r22, 0x44	; 68
    21fa:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    21fe:	81 11       	cpse	r24, r1
    2200:	4c c0       	rjmp	.+152    	; 0x229a <VL53L0X_GetLimitCheckValue+0xee>
    2202:	99 81       	ldd	r25, Y+1	; 0x01
    2204:	40 e0       	ldi	r20, 0x00	; 0
    2206:	50 e0       	ldi	r21, 0x00	; 0
    2208:	59 2f       	mov	r21, r25
    220a:	55 0f       	add	r21, r21
    220c:	60 e0       	ldi	r22, 0x00	; 0
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	41 15       	cp	r20, r1
    2212:	51 05       	cpc	r21, r1
    2214:	61 05       	cpc	r22, r1
    2216:	71 05       	cpc	r23, r1
    2218:	f1 f0       	breq	.+60     	; 0x2256 <VL53L0X_GetLimitCheckValue+0xaa>
    221a:	2a c0       	rjmp	.+84     	; 0x2270 <VL53L0X_GetLimitCheckValue+0xc4>
    221c:	fc 01       	movw	r30, r24
    221e:	81 ad       	ldd	r24, Z+57	; 0x39
    2220:	92 ad       	ldd	r25, Z+58	; 0x3a
    2222:	a3 ad       	ldd	r26, Z+59	; 0x3b
    2224:	b4 ad       	ldd	r27, Z+60	; 0x3c
    2226:	33 c0       	rjmp	.+102    	; 0x228e <VL53L0X_GetLimitCheckValue+0xe2>
    2228:	fc 01       	movw	r30, r24
    222a:	fd 96       	adiw	r30, 0x3d	; 61
    222c:	80 81       	ld	r24, Z
    222e:	91 81       	ldd	r25, Z+1	; 0x01
    2230:	a2 81       	ldd	r26, Z+2	; 0x02
    2232:	b3 81       	ldd	r27, Z+3	; 0x03
    2234:	2c c0       	rjmp	.+88     	; 0x228e <VL53L0X_GetLimitCheckValue+0xe2>
    2236:	ae 01       	movw	r20, r28
    2238:	4f 5f       	subi	r20, 0xFF	; 255
    223a:	5f 4f       	sbci	r21, 0xFF	; 255
    223c:	64 e6       	ldi	r22, 0x64	; 100
    223e:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    2242:	81 11       	cpse	r24, r1
    2244:	2a c0       	rjmp	.+84     	; 0x229a <VL53L0X_GetLimitCheckValue+0xee>
    2246:	29 81       	ldd	r18, Y+1	; 0x01
    2248:	80 e0       	ldi	r24, 0x00	; 0
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	92 2f       	mov	r25, r18
    224e:	99 0f       	add	r25, r25
    2250:	a0 e0       	ldi	r26, 0x00	; 0
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	1c c0       	rjmp	.+56     	; 0x228e <VL53L0X_GetLimitCheckValue+0xe2>
    2256:	f8 01       	movw	r30, r16
    2258:	45 a9       	ldd	r20, Z+53	; 0x35
    225a:	56 a9       	ldd	r21, Z+54	; 0x36
    225c:	67 a9       	ldd	r22, Z+55	; 0x37
    225e:	70 ad       	ldd	r23, Z+56	; 0x38
    2260:	f7 01       	movw	r30, r14
    2262:	40 83       	st	Z, r20
    2264:	51 83       	std	Z+1, r21	; 0x01
    2266:	62 83       	std	Z+2, r22	; 0x02
    2268:	73 83       	std	Z+3, r23	; 0x03
    226a:	f8 01       	movw	r30, r16
    226c:	16 a2       	std	Z+38, r1	; 0x26
    226e:	15 c0       	rjmp	.+42     	; 0x229a <VL53L0X_GetLimitCheckValue+0xee>
    2270:	f7 01       	movw	r30, r14
    2272:	40 83       	st	Z, r20
    2274:	51 83       	std	Z+1, r21	; 0x01
    2276:	62 83       	std	Z+2, r22	; 0x02
    2278:	73 83       	std	Z+3, r23	; 0x03
    227a:	f8 01       	movw	r30, r16
    227c:	45 ab       	std	Z+53, r20	; 0x35
    227e:	56 ab       	std	Z+54, r21	; 0x36
    2280:	67 ab       	std	Z+55, r22	; 0x37
    2282:	70 af       	std	Z+56, r23	; 0x38
    2284:	91 e0       	ldi	r25, 0x01	; 1
    2286:	96 a3       	std	Z+38, r25	; 0x26
    2288:	08 c0       	rjmp	.+16     	; 0x229a <VL53L0X_GetLimitCheckValue+0xee>
    228a:	8c ef       	ldi	r24, 0xFC	; 252
    228c:	06 c0       	rjmp	.+12     	; 0x229a <VL53L0X_GetLimitCheckValue+0xee>
    228e:	f7 01       	movw	r30, r14
    2290:	80 83       	st	Z, r24
    2292:	91 83       	std	Z+1, r25	; 0x01
    2294:	a2 83       	std	Z+2, r26	; 0x02
    2296:	b3 83       	std	Z+3, r27	; 0x03
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	df 91       	pop	r29
    22a0:	cf 91       	pop	r28
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	08 95       	ret

000022ac <VL53L0X_GetWrapAroundCheckEnable>:
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	1f 92       	push	r1
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	8c 01       	movw	r16, r24
    22c0:	7b 01       	movw	r14, r22
    22c2:	ae 01       	movw	r20, r28
    22c4:	4f 5f       	subi	r20, 0xFF	; 255
    22c6:	5f 4f       	sbci	r21, 0xFF	; 255
    22c8:	61 e0       	ldi	r22, 0x01	; 1
    22ca:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    22ce:	81 11       	cpse	r24, r1
    22d0:	13 c0       	rjmp	.+38     	; 0x22f8 <VL53L0X_GetWrapAroundCheckEnable+0x4c>
    22d2:	99 81       	ldd	r25, Y+1	; 0x01
    22d4:	f8 01       	movw	r30, r16
    22d6:	e3 5e       	subi	r30, 0xE3	; 227
    22d8:	fe 4f       	sbci	r31, 0xFE	; 254
    22da:	90 83       	st	Z, r25
    22dc:	99 23       	and	r25, r25
    22de:	24 f4       	brge	.+8      	; 0x22e8 <VL53L0X_GetWrapAroundCheckEnable+0x3c>
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	f7 01       	movw	r30, r14
    22e4:	90 83       	st	Z, r25
    22e6:	02 c0       	rjmp	.+4      	; 0x22ec <VL53L0X_GetWrapAroundCheckEnable+0x40>
    22e8:	f7 01       	movw	r30, r14
    22ea:	10 82       	st	Z, r1
    22ec:	f7 01       	movw	r30, r14
    22ee:	90 81       	ld	r25, Z
    22f0:	f8 01       	movw	r30, r16
    22f2:	e7 5b       	subi	r30, 0xB7	; 183
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	90 83       	st	Z, r25
    22f8:	0f 90       	pop	r0
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	08 95       	ret

00002308 <VL53L0X_GetDeviceParameters>:
    2308:	8f 92       	push	r8
    230a:	9f 92       	push	r9
    230c:	af 92       	push	r10
    230e:	bf 92       	push	r11
    2310:	cf 92       	push	r12
    2312:	df 92       	push	r13
    2314:	ef 92       	push	r14
    2316:	ff 92       	push	r15
    2318:	0f 93       	push	r16
    231a:	1f 93       	push	r17
    231c:	cf 93       	push	r28
    231e:	df 93       	push	r29
    2320:	ec 01       	movw	r28, r24
    2322:	7b 01       	movw	r14, r22
    2324:	88 89       	ldd	r24, Y+16	; 0x10
    2326:	fb 01       	movw	r30, r22
    2328:	80 83       	st	Z, r24
    232a:	6a 5f       	subi	r22, 0xFA	; 250
    232c:	7f 4f       	sbci	r23, 0xFF	; 255
    232e:	ce 01       	movw	r24, r28
    2330:	2f dd       	rcall	.-1442   	; 0x1d90 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
    2332:	81 11       	cpse	r24, r1
    2334:	33 c0       	rjmp	.+102    	; 0x239c <VL53L0X_GetDeviceParameters+0x94>
    2336:	f7 01       	movw	r30, r14
    2338:	12 86       	std	Z+10, r1	; 0x0a
    233a:	b7 01       	movw	r22, r14
    233c:	63 5f       	subi	r22, 0xF3	; 243
    233e:	7f 4f       	sbci	r23, 0xFF	; 255
    2340:	ce 01       	movw	r24, r28
    2342:	e5 dd       	rcall	.-1078   	; 0x1f0e <VL53L0X_GetXTalkCompensationRateMegaCps>
    2344:	81 11       	cpse	r24, r1
    2346:	39 c0       	rjmp	.+114    	; 0x23ba <VL53L0X_GetDeviceParameters+0xb2>
    2348:	b7 01       	movw	r22, r14
    234a:	6f 5e       	subi	r22, 0xEF	; 239
    234c:	7f 4f       	sbci	r23, 0xFF	; 255
    234e:	ce 01       	movw	r24, r28
    2350:	d5 d6       	rcall	.+3498   	; 0x30fc <VL53L0X_get_offset_calibration_data_micro_meter>
    2352:	81 11       	cpse	r24, r1
    2354:	32 c0       	rjmp	.+100    	; 0x23ba <VL53L0X_GetDeviceParameters+0xb2>
    2356:	87 01       	movw	r16, r14
    2358:	0f 5d       	subi	r16, 0xDF	; 223
    235a:	1f 4f       	sbci	r17, 0xFF	; 255
    235c:	5e 01       	movw	r10, r28
    235e:	f5 e2       	ldi	r31, 0x25	; 37
    2360:	af 0e       	add	r10, r31
    2362:	b1 1c       	adc	r11, r1
    2364:	67 01       	movw	r12, r14
    2366:	85 e1       	ldi	r24, 0x15	; 21
    2368:	c8 0e       	add	r12, r24
    236a:	d1 1c       	adc	r13, r1
    236c:	81 2c       	mov	r8, r1
    236e:	91 2c       	mov	r9, r1
    2370:	a8 01       	movw	r20, r16
    2372:	b4 01       	movw	r22, r8
    2374:	ce 01       	movw	r24, r28
    2376:	1a df       	rcall	.-460    	; 0x21ac <VL53L0X_GetLimitCheckValue>
    2378:	81 11       	cpse	r24, r1
    237a:	1f c0       	rjmp	.+62     	; 0x23ba <VL53L0X_GetDeviceParameters+0xb2>
    237c:	f5 01       	movw	r30, r10
    237e:	81 91       	ld	r24, Z+
    2380:	5f 01       	movw	r10, r30
    2382:	f6 01       	movw	r30, r12
    2384:	81 93       	st	Z+, r24
    2386:	6f 01       	movw	r12, r30
    2388:	ff ef       	ldi	r31, 0xFF	; 255
    238a:	8f 1a       	sub	r8, r31
    238c:	9f 0a       	sbc	r9, r31
    238e:	0c 5f       	subi	r16, 0xFC	; 252
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	86 e0       	ldi	r24, 0x06	; 6
    2394:	88 16       	cp	r8, r24
    2396:	91 04       	cpc	r9, r1
    2398:	59 f7       	brne	.-42     	; 0x2370 <VL53L0X_GetDeviceParameters+0x68>
    239a:	02 c0       	rjmp	.+4      	; 0x23a0 <VL53L0X_GetDeviceParameters+0x98>
    239c:	81 11       	cpse	r24, r1
    239e:	0d c0       	rjmp	.+26     	; 0x23ba <VL53L0X_GetDeviceParameters+0xb2>
    23a0:	b7 01       	movw	r22, r14
    23a2:	67 5c       	subi	r22, 0xC7	; 199
    23a4:	7f 4f       	sbci	r23, 0xFF	; 255
    23a6:	ce 01       	movw	r24, r28
    23a8:	81 df       	rcall	.-254    	; 0x22ac <VL53L0X_GetWrapAroundCheckEnable>
    23aa:	81 11       	cpse	r24, r1
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <VL53L0X_GetDeviceParameters+0xb2>
    23ae:	b7 01       	movw	r22, r14
    23b0:	6e 5f       	subi	r22, 0xFE	; 254
    23b2:	7f 4f       	sbci	r23, 0xFF	; 255
    23b4:	ce 01       	movw	r24, r28
    23b6:	0e 94 c3 28 	call	0x5186	; 0x5186 <VL53L0X_get_measurement_timing_budget_micro_seconds>
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	df 90       	pop	r13
    23c8:	cf 90       	pop	r12
    23ca:	bf 90       	pop	r11
    23cc:	af 90       	pop	r10
    23ce:	9f 90       	pop	r9
    23d0:	8f 90       	pop	r8
    23d2:	08 95       	ret

000023d4 <VL53L0X_DataInit>:
    23d4:	ef 92       	push	r14
    23d6:	ff 92       	push	r15
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	eb 97       	sbiw	r28, 0x3b	; 59
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	8c 01       	movw	r16, r24
    23f2:	21 e0       	ldi	r18, 0x01	; 1
    23f4:	4e ef       	ldi	r20, 0xFE	; 254
    23f6:	69 e8       	ldi	r22, 0x89	; 137
    23f8:	0e 94 31 32 	call	0x6462	; 0x6462 <VL53L0X_UpdateByte>
    23fc:	81 11       	cpse	r24, r1
    23fe:	05 c0       	rjmp	.+10     	; 0x240a <VL53L0X_DataInit+0x36>
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	68 e8       	ldi	r22, 0x88	; 136
    2404:	c8 01       	movw	r24, r16
    2406:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    240a:	f8 01       	movw	r30, r16
    240c:	e1 52       	subi	r30, 0x21	; 33
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	10 82       	st	Z, r1
    2412:	88 ee       	ldi	r24, 0xE8	; 232
    2414:	93 e0       	ldi	r25, 0x03	; 3
    2416:	e6 5a       	subi	r30, 0xA6	; 166
    2418:	ff 4f       	sbci	r31, 0xFF	; 255
    241a:	91 83       	std	Z+1, r25	; 0x01
    241c:	80 83       	st	Z, r24
    241e:	80 e9       	ldi	r24, 0x90	; 144
    2420:	91 e0       	ldi	r25, 0x01	; 1
    2422:	32 96       	adiw	r30, 0x02	; 2
    2424:	91 83       	std	Z+1, r25	; 0x01
    2426:	80 83       	st	Z, r24
    2428:	85 e8       	ldi	r24, 0x85	; 133
    242a:	9b e6       	ldi	r25, 0x6B	; 107
    242c:	a1 e0       	ldi	r26, 0x01	; 1
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	32 96       	adiw	r30, 0x02	; 2
    2432:	80 83       	st	Z, r24
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	a2 83       	std	Z+2, r26	; 0x02
    2438:	b3 83       	std	Z+3, r27	; 0x03
    243a:	84 ea       	ldi	r24, 0xA4	; 164
    243c:	90 e7       	ldi	r25, 0x70	; 112
    243e:	a9 e0       	ldi	r26, 0x09	; 9
    2440:	b0 e0       	ldi	r27, 0x00	; 0
    2442:	e5 57       	subi	r30, 0x75	; 117
    2444:	f1 09       	sbc	r31, r1
    2446:	80 83       	st	Z, r24
    2448:	91 83       	std	Z+1, r25	; 0x01
    244a:	a2 83       	std	Z+2, r26	; 0x02
    244c:	b3 83       	std	Z+3, r27	; 0x03
    244e:	f8 01       	movw	r30, r16
    2450:	15 8e       	std	Z+29, r1	; 0x1d
    2452:	16 8e       	std	Z+30, r1	; 0x1e
    2454:	17 8e       	std	Z+31, r1	; 0x1f
    2456:	10 a2       	std	Z+32, r1	; 0x20
    2458:	be 01       	movw	r22, r28
    245a:	6f 5f       	subi	r22, 0xFF	; 255
    245c:	7f 4f       	sbci	r23, 0xFF	; 255
    245e:	c8 01       	movw	r24, r16
    2460:	53 df       	rcall	.-346    	; 0x2308 <VL53L0X_GetDeviceParameters>
    2462:	f8 2e       	mov	r15, r24
    2464:	81 11       	cpse	r24, r1
    2466:	0b c0       	rjmp	.+22     	; 0x247e <VL53L0X_DataInit+0xaa>
    2468:	19 82       	std	Y+1, r1	; 0x01
    246a:	1a 82       	std	Y+2, r1	; 0x02
    246c:	8a e3       	ldi	r24, 0x3A	; 58
    246e:	fe 01       	movw	r30, r28
    2470:	31 96       	adiw	r30, 0x01	; 1
    2472:	d8 01       	movw	r26, r16
    2474:	50 96       	adiw	r26, 0x10	; 16
    2476:	01 90       	ld	r0, Z+
    2478:	0d 92       	st	X+, r0
    247a:	8a 95       	dec	r24
    247c:	e1 f7       	brne	.-8      	; 0x2476 <VL53L0X_DataInit+0xa2>
    247e:	84 e6       	ldi	r24, 0x64	; 100
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	f8 01       	movw	r30, r16
    2484:	ef 5d       	subi	r30, 0xDF	; 223
    2486:	fe 4f       	sbci	r31, 0xFE	; 254
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
    248c:	84 e8       	ldi	r24, 0x84	; 132
    248e:	93 e0       	ldi	r25, 0x03	; 3
    2490:	32 96       	adiw	r30, 0x02	; 2
    2492:	91 83       	std	Z+1, r25	; 0x01
    2494:	80 83       	st	Z, r24
    2496:	84 ef       	ldi	r24, 0xF4	; 244
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	32 96       	adiw	r30, 0x02	; 2
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	9a e0       	ldi	r25, 0x0A	; 10
    24a4:	33 96       	adiw	r30, 0x03	; 3
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	70 96       	adiw	r30, 0x10	; 16
    24ae:	80 83       	st	Z, r24
    24b0:	41 e0       	ldi	r20, 0x01	; 1
    24b2:	60 e8       	ldi	r22, 0x80	; 128
    24b4:	c8 01       	movw	r24, r16
    24b6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    24ba:	e8 2e       	mov	r14, r24
    24bc:	41 e0       	ldi	r20, 0x01	; 1
    24be:	6f ef       	ldi	r22, 0xFF	; 255
    24c0:	c8 01       	movw	r24, r16
    24c2:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    24c6:	8e 29       	or	r24, r14
    24c8:	f8 2a       	or	r15, r24
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	60 e0       	ldi	r22, 0x00	; 0
    24ce:	c8 01       	movw	r24, r16
    24d0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    24d4:	f8 2a       	or	r15, r24
    24d6:	ae 01       	movw	r20, r28
    24d8:	45 5c       	subi	r20, 0xC5	; 197
    24da:	5f 4f       	sbci	r21, 0xFF	; 255
    24dc:	61 e9       	ldi	r22, 0x91	; 145
    24de:	c8 01       	movw	r24, r16
    24e0:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    24e4:	f8 2a       	or	r15, r24
    24e6:	8b ad       	ldd	r24, Y+59	; 0x3b
    24e8:	f8 01       	movw	r30, r16
    24ea:	e9 5d       	subi	r30, 0xD9	; 217
    24ec:	fe 4f       	sbci	r31, 0xFE	; 254
    24ee:	80 83       	st	Z, r24
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	60 e0       	ldi	r22, 0x00	; 0
    24f4:	c8 01       	movw	r24, r16
    24f6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    24fa:	f8 2a       	or	r15, r24
    24fc:	40 e0       	ldi	r20, 0x00	; 0
    24fe:	6f ef       	ldi	r22, 0xFF	; 255
    2500:	c8 01       	movw	r24, r16
    2502:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2506:	f8 2a       	or	r15, r24
    2508:	40 e0       	ldi	r20, 0x00	; 0
    250a:	60 e8       	ldi	r22, 0x80	; 128
    250c:	c8 01       	movw	r24, r16
    250e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2512:	8f 29       	or	r24, r15
    2514:	09 f4       	brne	.+2      	; 0x2518 <VL53L0X_DataInit+0x144>
    2516:	69 c0       	rjmp	.+210    	; 0x25ea <VL53L0X_DataInit+0x216>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <VL53L0X_DataInit+0x16e>
    251a:	81 11       	cpse	r24, r1
    251c:	12 c0       	rjmp	.+36     	; 0x2542 <VL53L0X_DataInit+0x16e>
    251e:	41 e0       	ldi	r20, 0x01	; 1
    2520:	b7 01       	movw	r22, r14
    2522:	c8 01       	movw	r24, r16
    2524:	3c dd       	rcall	.-1416   	; 0x1f9e <VL53L0X_SetLimitCheckEnable>
    2526:	ff ef       	ldi	r31, 0xFF	; 255
    2528:	ef 1a       	sub	r14, r31
    252a:	ff 0a       	sbc	r15, r31
    252c:	96 e0       	ldi	r25, 0x06	; 6
    252e:	e9 16       	cp	r14, r25
    2530:	f1 04       	cpc	r15, r1
    2532:	99 f7       	brne	.-26     	; 0x251a <VL53L0X_DataInit+0x146>
    2534:	81 11       	cpse	r24, r1
    2536:	1a c0       	rjmp	.+52     	; 0x256c <VL53L0X_DataInit+0x198>
    2538:	40 e0       	ldi	r20, 0x00	; 0
    253a:	62 e0       	ldi	r22, 0x02	; 2
    253c:	70 e0       	ldi	r23, 0x00	; 0
    253e:	c8 01       	movw	r24, r16
    2540:	2e dd       	rcall	.-1444   	; 0x1f9e <VL53L0X_SetLimitCheckEnable>
    2542:	81 11       	cpse	r24, r1
    2544:	1d c0       	rjmp	.+58     	; 0x2580 <VL53L0X_DataInit+0x1ac>
    2546:	40 e0       	ldi	r20, 0x00	; 0
    2548:	63 e0       	ldi	r22, 0x03	; 3
    254a:	70 e0       	ldi	r23, 0x00	; 0
    254c:	c8 01       	movw	r24, r16
    254e:	27 dd       	rcall	.-1458   	; 0x1f9e <VL53L0X_SetLimitCheckEnable>
    2550:	81 11       	cpse	r24, r1
    2552:	20 c0       	rjmp	.+64     	; 0x2594 <VL53L0X_DataInit+0x1c0>
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	64 e0       	ldi	r22, 0x04	; 4
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	c8 01       	movw	r24, r16
    255c:	20 dd       	rcall	.-1472   	; 0x1f9e <VL53L0X_SetLimitCheckEnable>
    255e:	81 11       	cpse	r24, r1
    2560:	23 c0       	rjmp	.+70     	; 0x25a8 <VL53L0X_DataInit+0x1d4>
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	65 e0       	ldi	r22, 0x05	; 5
    2566:	70 e0       	ldi	r23, 0x00	; 0
    2568:	c8 01       	movw	r24, r16
    256a:	19 dd       	rcall	.-1486   	; 0x1f9e <VL53L0X_SetLimitCheckEnable>
    256c:	81 11       	cpse	r24, r1
    256e:	25 c0       	rjmp	.+74     	; 0x25ba <VL53L0X_DataInit+0x1e6>
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	42 e1       	ldi	r20, 0x12	; 18
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	60 e0       	ldi	r22, 0x00	; 0
    257a:	70 e0       	ldi	r23, 0x00	; 0
    257c:	c8 01       	movw	r24, r16
    257e:	9c dd       	rcall	.-1224   	; 0x20b8 <VL53L0X_SetLimitCheckValue>
    2580:	81 11       	cpse	r24, r1
    2582:	2c c0       	rjmp	.+88     	; 0x25dc <VL53L0X_DataInit+0x208>
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e4       	ldi	r19, 0x40	; 64
    2588:	40 e0       	ldi	r20, 0x00	; 0
    258a:	50 e0       	ldi	r21, 0x00	; 0
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	70 e0       	ldi	r23, 0x00	; 0
    2590:	c8 01       	movw	r24, r16
    2592:	92 dd       	rcall	.-1244   	; 0x20b8 <VL53L0X_SetLimitCheckValue>
    2594:	81 11       	cpse	r24, r1
    2596:	32 c0       	rjmp	.+100    	; 0x25fc <VL53L0X_DataInit+0x228>
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	43 e2       	ldi	r20, 0x23	; 35
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	62 e0       	ldi	r22, 0x02	; 2
    25a2:	70 e0       	ldi	r23, 0x00	; 0
    25a4:	c8 01       	movw	r24, r16
    25a6:	88 dd       	rcall	.-1264   	; 0x20b8 <VL53L0X_SetLimitCheckValue>
    25a8:	81 11       	cpse	r24, r1
    25aa:	28 c0       	rjmp	.+80     	; 0x25fc <VL53L0X_DataInit+0x228>
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	a9 01       	movw	r20, r18
    25b2:	63 e0       	ldi	r22, 0x03	; 3
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	c8 01       	movw	r24, r16
    25b8:	7f dd       	rcall	.-1282   	; 0x20b8 <VL53L0X_SetLimitCheckValue>
    25ba:	81 11       	cpse	r24, r1
    25bc:	1f c0       	rjmp	.+62     	; 0x25fc <VL53L0X_DataInit+0x228>
    25be:	8f ef       	ldi	r24, 0xFF	; 255
    25c0:	f8 01       	movw	r30, r16
    25c2:	e3 5e       	subi	r30, 0xE3	; 227
    25c4:	fe 4f       	sbci	r31, 0xFE	; 254
    25c6:	80 83       	st	Z, r24
    25c8:	4f ef       	ldi	r20, 0xFF	; 255
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	c8 01       	movw	r24, r16
    25ce:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    25d2:	91 e0       	ldi	r25, 0x01	; 1
    25d4:	f8 01       	movw	r30, r16
    25d6:	e1 5e       	subi	r30, 0xE1	; 225
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	90 83       	st	Z, r25
    25dc:	81 11       	cpse	r24, r1
    25de:	0e c0       	rjmp	.+28     	; 0x25fc <VL53L0X_DataInit+0x228>
    25e0:	f8 01       	movw	r30, r16
    25e2:	ec 5f       	subi	r30, 0xFC	; 252
    25e4:	fe 4f       	sbci	r31, 0xFE	; 254
    25e6:	10 82       	st	Z, r1
    25e8:	09 c0       	rjmp	.+18     	; 0x25fc <VL53L0X_DataInit+0x228>
    25ea:	41 e0       	ldi	r20, 0x01	; 1
    25ec:	60 e0       	ldi	r22, 0x00	; 0
    25ee:	70 e0       	ldi	r23, 0x00	; 0
    25f0:	c8 01       	movw	r24, r16
    25f2:	d5 dc       	rcall	.-1622   	; 0x1f9e <VL53L0X_SetLimitCheckEnable>
    25f4:	ee 24       	eor	r14, r14
    25f6:	e3 94       	inc	r14
    25f8:	f1 2c       	mov	r15, r1
    25fa:	8f cf       	rjmp	.-226    	; 0x251a <VL53L0X_DataInit+0x146>
    25fc:	eb 96       	adiw	r28, 0x3b	; 59
    25fe:	0f b6       	in	r0, 0x3f	; 63
    2600:	f8 94       	cli
    2602:	de bf       	out	0x3e, r29	; 62
    2604:	0f be       	out	0x3f, r0	; 63
    2606:	cd bf       	out	0x3d, r28	; 61
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	ff 90       	pop	r15
    2612:	ef 90       	pop	r14
    2614:	08 95       	ret

00002616 <VL53L0X_GetRangingMeasurementData>:
    2616:	2f 92       	push	r2
    2618:	3f 92       	push	r3
    261a:	4f 92       	push	r4
    261c:	5f 92       	push	r5
    261e:	6f 92       	push	r6
    2620:	7f 92       	push	r7
    2622:	8f 92       	push	r8
    2624:	9f 92       	push	r9
    2626:	af 92       	push	r10
    2628:	bf 92       	push	r11
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	a6 97       	sbiw	r28, 0x26	; 38
    2640:	0f b6       	in	r0, 0x3f	; 63
    2642:	f8 94       	cli
    2644:	de bf       	out	0x3e, r29	; 62
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	cd bf       	out	0x3d, r28	; 61
    264a:	4c 01       	movw	r8, r24
    264c:	5b 01       	movw	r10, r22
    264e:	0c e0       	ldi	r16, 0x0C	; 12
    2650:	10 e0       	ldi	r17, 0x00	; 0
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	ae 01       	movw	r20, r28
    2658:	4e 5f       	subi	r20, 0xFE	; 254
    265a:	5f 4f       	sbci	r21, 0xFF	; 255
    265c:	64 e1       	ldi	r22, 0x14	; 20
    265e:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <VL53L0X_ReadMulti>
    2662:	81 11       	cpse	r24, r1
    2664:	fb c0       	rjmp	.+502    	; 0x285c <VL53L0X_GetRangingMeasurementData+0x246>
    2666:	d5 01       	movw	r26, r10
    2668:	56 96       	adiw	r26, 0x16	; 22
    266a:	1c 92       	st	X, r1
    266c:	56 97       	sbiw	r26, 0x16	; 22
    266e:	f5 01       	movw	r30, r10
    2670:	10 82       	st	Z, r1
    2672:	11 82       	std	Z+1, r1	; 0x01
    2674:	12 82       	std	Z+2, r1	; 0x02
    2676:	13 82       	std	Z+3, r1	; 0x03
    2678:	2c 85       	ldd	r18, Y+12	; 0x0c
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	32 2f       	mov	r19, r18
    267e:	22 27       	eor	r18, r18
    2680:	8d 85       	ldd	r24, Y+13	; 0x0d
    2682:	28 0f       	add	r18, r24
    2684:	31 1d       	adc	r19, r1
    2686:	14 96       	adiw	r26, 0x04	; 4
    2688:	1d 92       	st	X+, r1
    268a:	1d 92       	st	X+, r1
    268c:	1d 92       	st	X+, r1
    268e:	1c 92       	st	X, r1
    2690:	17 97       	sbiw	r26, 0x07	; 7
    2692:	49 84       	ldd	r4, Y+9	; 0x09
    2694:	51 2c       	mov	r5, r1
    2696:	54 2c       	mov	r5, r4
    2698:	44 24       	eor	r4, r4
    269a:	55 0c       	add	r5, r5
    269c:	61 2c       	mov	r6, r1
    269e:	71 2c       	mov	r7, r1
    26a0:	44 86       	std	Z+12, r4	; 0x0c
    26a2:	55 86       	std	Z+13, r5	; 0x0d
    26a4:	66 86       	std	Z+14, r6	; 0x0e
    26a6:	77 86       	std	Z+15, r7	; 0x0f
    26a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	98 2f       	mov	r25, r24
    26ae:	88 27       	eor	r24, r24
    26b0:	99 0f       	add	r25, r25
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	80 8b       	std	Z+16, r24	; 0x10
    26b8:	91 8b       	std	Z+17, r25	; 0x11
    26ba:	a2 8b       	std	Z+18, r26	; 0x12
    26bc:	b3 8b       	std	Z+19, r27	; 0x13
    26be:	0c 81       	ldd	r16, Y+4	; 0x04
    26c0:	10 e0       	ldi	r17, 0x00	; 0
    26c2:	10 2f       	mov	r17, r16
    26c4:	00 27       	eor	r16, r16
    26c6:	8d 81       	ldd	r24, Y+5	; 0x05
    26c8:	08 0f       	add	r16, r24
    26ca:	11 1d       	adc	r17, r1
    26cc:	15 8b       	std	Z+21, r17	; 0x15
    26ce:	04 8b       	std	Z+20, r16	; 0x14
    26d0:	3a 80       	ldd	r3, Y+2	; 0x02
    26d2:	f4 01       	movw	r30, r8
    26d4:	e7 5c       	subi	r30, 0xC7	; 199
    26d6:	fe 4f       	sbci	r31, 0xFE	; 254
    26d8:	40 81       	ld	r20, Z
    26da:	51 81       	ldd	r21, Z+1	; 0x01
    26dc:	7b 97       	sbiw	r30, 0x1b	; 27
    26de:	20 80       	ld	r2, Z
    26e0:	48 3e       	cpi	r20, 0xE8	; 232
    26e2:	f3 e0       	ldi	r31, 0x03	; 3
    26e4:	5f 07       	cpc	r21, r31
    26e6:	09 f4       	brne	.+2      	; 0x26ea <VL53L0X_GetRangingMeasurementData+0xd4>
    26e8:	46 c0       	rjmp	.+140    	; 0x2776 <VL53L0X_GetRangingMeasurementData+0x160>
    26ea:	24 9f       	mul	r18, r20
    26ec:	c0 01       	movw	r24, r0
    26ee:	25 9f       	mul	r18, r21
    26f0:	90 0d       	add	r25, r0
    26f2:	34 9f       	mul	r19, r20
    26f4:	90 0d       	add	r25, r0
    26f6:	11 24       	eor	r1, r1
    26f8:	9c 01       	movw	r18, r24
    26fa:	2c 50       	subi	r18, 0x0C	; 12
    26fc:	3e 4f       	sbci	r19, 0xFE	; 254
    26fe:	36 95       	lsr	r19
    2700:	27 95       	ror	r18
    2702:	36 95       	lsr	r19
    2704:	27 95       	ror	r18
    2706:	36 95       	lsr	r19
    2708:	27 95       	ror	r18
    270a:	a5 ec       	ldi	r26, 0xC5	; 197
    270c:	b0 e2       	ldi	r27, 0x20	; 32
    270e:	0e 94 29 33 	call	0x6652	; 0x6652 <__umulhisi3>
    2712:	9c 01       	movw	r18, r24
    2714:	32 95       	swap	r19
    2716:	22 95       	swap	r18
    2718:	2f 70       	andi	r18, 0x0F	; 15
    271a:	23 27       	eor	r18, r19
    271c:	3f 70       	andi	r19, 0x0F	; 15
    271e:	23 27       	eor	r18, r19
    2720:	d4 01       	movw	r26, r8
    2722:	5d 96       	adiw	r26, 0x1d	; 29
    2724:	4d 91       	ld	r20, X+
    2726:	5d 91       	ld	r21, X+
    2728:	6d 91       	ld	r22, X+
    272a:	7c 91       	ld	r23, X
    272c:	90 97       	sbiw	r26, 0x20	; 32
    272e:	5a 96       	adiw	r26, 0x1a	; 26
    2730:	8c 91       	ld	r24, X
    2732:	88 23       	and	r24, r24
    2734:	01 f1       	breq	.+64     	; 0x2776 <VL53L0X_GetRangingMeasurementData+0x160>
    2736:	04 9f       	mul	r16, r20
    2738:	60 01       	movw	r12, r0
    273a:	05 9f       	mul	r16, r21
    273c:	d0 0c       	add	r13, r0
    273e:	14 9f       	mul	r17, r20
    2740:	d0 0c       	add	r13, r0
    2742:	11 24       	eor	r1, r1
    2744:	cd 2c       	mov	r12, r13
    2746:	dd 24       	eor	r13, r13
    2748:	e1 2c       	mov	r14, r1
    274a:	f1 2c       	mov	r15, r1
    274c:	4c 14       	cp	r4, r12
    274e:	5d 04       	cpc	r5, r13
    2750:	6e 04       	cpc	r6, r14
    2752:	7f 04       	cpc	r7, r15
    2754:	29 f4       	brne	.+10     	; 0x2760 <VL53L0X_GetRangingMeasurementData+0x14a>
    2756:	21 10       	cpse	r2, r1
    2758:	11 c0       	rjmp	.+34     	; 0x277c <VL53L0X_GetRangingMeasurementData+0x166>
    275a:	20 ee       	ldi	r18, 0xE0	; 224
    275c:	3a e8       	ldi	r19, 0x8A	; 138
    275e:	1e c0       	rjmp	.+60     	; 0x279c <VL53L0X_GetRangingMeasurementData+0x186>
    2760:	d9 01       	movw	r26, r18
    2762:	a3 01       	movw	r20, r6
    2764:	92 01       	movw	r18, r4
    2766:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
    276a:	2c 19       	sub	r18, r12
    276c:	3d 09       	sbc	r19, r13
    276e:	4e 09       	sbc	r20, r14
    2770:	5f 09       	sbc	r21, r15
    2772:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    2776:	22 20       	and	r2, r2
    2778:	89 f0       	breq	.+34     	; 0x279c <VL53L0X_GetRangingMeasurementData+0x186>
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <VL53L0X_GetRangingMeasurementData+0x16a>
    277c:	28 eb       	ldi	r18, 0xB8	; 184
    277e:	32 e2       	ldi	r19, 0x22	; 34
    2780:	c9 01       	movw	r24, r18
    2782:	96 95       	lsr	r25
    2784:	87 95       	ror	r24
    2786:	96 95       	lsr	r25
    2788:	87 95       	ror	r24
    278a:	f5 01       	movw	r30, r10
    278c:	91 87       	std	Z+9, r25	; 0x09
    278e:	80 87       	std	Z+8, r24	; 0x08
    2790:	22 95       	swap	r18
    2792:	22 0f       	add	r18, r18
    2794:	22 0f       	add	r18, r18
    2796:	20 7c       	andi	r18, 0xC0	; 192
    2798:	27 8b       	std	Z+23, r18	; 0x17
    279a:	07 c0       	rjmp	.+14     	; 0x27aa <VL53L0X_GetRangingMeasurementData+0x194>
    279c:	d5 01       	movw	r26, r10
    279e:	19 96       	adiw	r26, 0x09	; 9
    27a0:	3c 93       	st	X, r19
    27a2:	2e 93       	st	-X, r18
    27a4:	18 97       	sbiw	r26, 0x08	; 8
    27a6:	57 96       	adiw	r26, 0x17	; 23
    27a8:	1c 92       	st	X, r1
    27aa:	fe 01       	movw	r30, r28
    27ac:	31 96       	adiw	r30, 0x01	; 1
    27ae:	6f 01       	movw	r12, r30
    27b0:	75 01       	movw	r14, r10
    27b2:	a3 01       	movw	r20, r6
    27b4:	92 01       	movw	r18, r4
    27b6:	63 2d       	mov	r22, r3
    27b8:	c4 01       	movw	r24, r8
    27ba:	0e 94 17 30 	call	0x602e	; 0x602e <VL53L0X_get_pal_range_status>
    27be:	81 11       	cpse	r24, r1
    27c0:	4d c0       	rjmp	.+154    	; 0x285c <VL53L0X_GetRangingMeasurementData+0x246>
    27c2:	99 81       	ldd	r25, Y+1	; 0x01
    27c4:	d5 01       	movw	r26, r10
    27c6:	58 96       	adiw	r26, 0x18	; 24
    27c8:	9c 93       	st	X, r25
    27ca:	ba e4       	ldi	r27, 0x4A	; 74
    27cc:	8b 0e       	add	r8, r27
    27ce:	91 1c       	adc	r9, r1
    27d0:	29 e1       	ldi	r18, 0x19	; 25
    27d2:	f4 01       	movw	r30, r8
    27d4:	de 01       	movw	r26, r28
    27d6:	1e 96       	adiw	r26, 0x0e	; 14
    27d8:	01 90       	ld	r0, Z+
    27da:	0d 92       	st	X+, r0
    27dc:	2a 95       	dec	r18
    27de:	e1 f7       	brne	.-8      	; 0x27d8 <VL53L0X_GetRangingMeasurementData+0x1c2>
    27e0:	d5 01       	movw	r26, r10
    27e2:	18 96       	adiw	r26, 0x08	; 8
    27e4:	ed 91       	ld	r30, X+
    27e6:	fc 91       	ld	r31, X
    27e8:	19 97       	sbiw	r26, 0x09	; 9
    27ea:	57 96       	adiw	r26, 0x17	; 23
    27ec:	3c 90       	ld	r3, X
    27ee:	57 97       	sbiw	r26, 0x17	; 23
    27f0:	1a 96       	adiw	r26, 0x0a	; 10
    27f2:	6d 91       	ld	r22, X+
    27f4:	7c 91       	ld	r23, X
    27f6:	1b 97       	sbiw	r26, 0x0b	; 11
    27f8:	1c 96       	adiw	r26, 0x0c	; 12
    27fa:	4d 90       	ld	r4, X+
    27fc:	5d 90       	ld	r5, X+
    27fe:	6d 90       	ld	r6, X+
    2800:	7c 90       	ld	r7, X
    2802:	1f 97       	sbiw	r26, 0x0f	; 15
    2804:	50 96       	adiw	r26, 0x10	; 16
    2806:	cd 90       	ld	r12, X+
    2808:	dd 90       	ld	r13, X+
    280a:	ed 90       	ld	r14, X+
    280c:	fc 90       	ld	r15, X
    280e:	53 97       	sbiw	r26, 0x13	; 19
    2810:	54 96       	adiw	r26, 0x14	; 20
    2812:	4d 91       	ld	r20, X+
    2814:	5c 91       	ld	r21, X
    2816:	55 97       	sbiw	r26, 0x15	; 21
    2818:	14 96       	adiw	r26, 0x04	; 4
    281a:	0d 91       	ld	r16, X+
    281c:	1d 91       	ld	r17, X+
    281e:	2d 91       	ld	r18, X+
    2820:	3c 91       	ld	r19, X
    2822:	17 97       	sbiw	r26, 0x07	; 7
    2824:	0a 8b       	std	Y+18, r16	; 0x12
    2826:	1b 8b       	std	Y+19, r17	; 0x13
    2828:	2c 8b       	std	Y+20, r18	; 0x14
    282a:	3d 8b       	std	Y+21, r19	; 0x15
    282c:	ff 8b       	std	Y+23, r31	; 0x17
    282e:	ee 8b       	std	Y+22, r30	; 0x16
    2830:	79 8f       	std	Y+25, r23	; 0x19
    2832:	68 8f       	std	Y+24, r22	; 0x18
    2834:	4a 8e       	std	Y+26, r4	; 0x1a
    2836:	5b 8e       	std	Y+27, r5	; 0x1b
    2838:	6c 8e       	std	Y+28, r6	; 0x1c
    283a:	7d 8e       	std	Y+29, r7	; 0x1d
    283c:	ce 8e       	std	Y+30, r12	; 0x1e
    283e:	df 8e       	std	Y+31, r13	; 0x1f
    2840:	e8 a2       	std	Y+32, r14	; 0x20
    2842:	f9 a2       	std	Y+33, r15	; 0x21
    2844:	5b a3       	std	Y+35, r21	; 0x23
    2846:	4a a3       	std	Y+34, r20	; 0x22
    2848:	3d a2       	std	Y+37, r3	; 0x25
    284a:	9e a3       	std	Y+38, r25	; 0x26
    284c:	99 e1       	ldi	r25, 0x19	; 25
    284e:	fe 01       	movw	r30, r28
    2850:	3e 96       	adiw	r30, 0x0e	; 14
    2852:	d4 01       	movw	r26, r8
    2854:	01 90       	ld	r0, Z+
    2856:	0d 92       	st	X+, r0
    2858:	9a 95       	dec	r25
    285a:	e1 f7       	brne	.-8      	; 0x2854 <VL53L0X_GetRangingMeasurementData+0x23e>
    285c:	a6 96       	adiw	r28, 0x26	; 38
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	df 91       	pop	r29
    286a:	cf 91       	pop	r28
    286c:	1f 91       	pop	r17
    286e:	0f 91       	pop	r16
    2870:	ff 90       	pop	r15
    2872:	ef 90       	pop	r14
    2874:	df 90       	pop	r13
    2876:	cf 90       	pop	r12
    2878:	bf 90       	pop	r11
    287a:	af 90       	pop	r10
    287c:	9f 90       	pop	r9
    287e:	8f 90       	pop	r8
    2880:	7f 90       	pop	r7
    2882:	6f 90       	pop	r6
    2884:	5f 90       	pop	r5
    2886:	4f 90       	pop	r4
    2888:	3f 90       	pop	r3
    288a:	2f 90       	pop	r2
    288c:	08 95       	ret

0000288e <VL53L0X_GetInterruptThresholds>:
    288e:	cf 92       	push	r12
    2890:	df 92       	push	r13
    2892:	ef 92       	push	r14
    2894:	ff 92       	push	r15
    2896:	0f 93       	push	r16
    2898:	1f 93       	push	r17
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	00 d0       	rcall	.+0      	; 0x28a0 <VL53L0X_GetInterruptThresholds+0x12>
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	8c 01       	movw	r16, r24
    28a6:	6a 01       	movw	r12, r20
    28a8:	79 01       	movw	r14, r18
    28aa:	ae 01       	movw	r20, r28
    28ac:	4f 5f       	subi	r20, 0xFF	; 255
    28ae:	5f 4f       	sbci	r21, 0xFF	; 255
    28b0:	6e e0       	ldi	r22, 0x0E	; 14
    28b2:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    28b6:	49 81       	ldd	r20, Y+1	; 0x01
    28b8:	5a 81       	ldd	r21, Y+2	; 0x02
    28ba:	5f 70       	andi	r21, 0x0F	; 15
    28bc:	60 e0       	ldi	r22, 0x00	; 0
    28be:	70 e0       	ldi	r23, 0x00	; 0
    28c0:	03 2e       	mov	r0, r19
    28c2:	31 e1       	ldi	r19, 0x11	; 17
    28c4:	44 0f       	add	r20, r20
    28c6:	55 1f       	adc	r21, r21
    28c8:	66 1f       	adc	r22, r22
    28ca:	77 1f       	adc	r23, r23
    28cc:	3a 95       	dec	r19
    28ce:	d1 f7       	brne	.-12     	; 0x28c4 <VL53L0X_GetInterruptThresholds+0x36>
    28d0:	30 2d       	mov	r19, r0
    28d2:	f6 01       	movw	r30, r12
    28d4:	40 83       	st	Z, r20
    28d6:	51 83       	std	Z+1, r21	; 0x01
    28d8:	62 83       	std	Z+2, r22	; 0x02
    28da:	73 83       	std	Z+3, r23	; 0x03
    28dc:	81 11       	cpse	r24, r1
    28de:	1a c0       	rjmp	.+52     	; 0x2914 <VL53L0X_GetInterruptThresholds+0x86>
    28e0:	ae 01       	movw	r20, r28
    28e2:	4f 5f       	subi	r20, 0xFF	; 255
    28e4:	5f 4f       	sbci	r21, 0xFF	; 255
    28e6:	6c e0       	ldi	r22, 0x0C	; 12
    28e8:	c8 01       	movw	r24, r16
    28ea:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    28ee:	49 81       	ldd	r20, Y+1	; 0x01
    28f0:	5a 81       	ldd	r21, Y+2	; 0x02
    28f2:	5f 70       	andi	r21, 0x0F	; 15
    28f4:	60 e0       	ldi	r22, 0x00	; 0
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	03 2e       	mov	r0, r19
    28fa:	31 e1       	ldi	r19, 0x11	; 17
    28fc:	44 0f       	add	r20, r20
    28fe:	55 1f       	adc	r21, r21
    2900:	66 1f       	adc	r22, r22
    2902:	77 1f       	adc	r23, r23
    2904:	3a 95       	dec	r19
    2906:	d1 f7       	brne	.-12     	; 0x28fc <VL53L0X_GetInterruptThresholds+0x6e>
    2908:	30 2d       	mov	r19, r0
    290a:	f7 01       	movw	r30, r14
    290c:	40 83       	st	Z, r20
    290e:	51 83       	std	Z+1, r21	; 0x01
    2910:	62 83       	std	Z+2, r22	; 0x02
    2912:	73 83       	std	Z+3, r23	; 0x03
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	df 91       	pop	r29
    291a:	cf 91       	pop	r28
    291c:	1f 91       	pop	r17
    291e:	0f 91       	pop	r16
    2920:	ff 90       	pop	r15
    2922:	ef 90       	pop	r14
    2924:	df 90       	pop	r13
    2926:	cf 90       	pop	r12
    2928:	08 95       	ret

0000292a <VL53L0X_CheckAndLoadInterruptSettings>:
    292a:	ef 92       	push	r14
    292c:	ff 92       	push	r15
    292e:	1f 93       	push	r17
    2930:	cf 93       	push	r28
    2932:	df 93       	push	r29
    2934:	cd b7       	in	r28, 0x3d	; 61
    2936:	de b7       	in	r29, 0x3e	; 62
    2938:	28 97       	sbiw	r28, 0x08	; 8
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	9c 01       	movw	r18, r24
    2946:	fc 01       	movw	r30, r24
    2948:	e2 53       	subi	r30, 0x32	; 50
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	90 81       	ld	r25, Z
    294e:	91 50       	subi	r25, 0x01	; 1
    2950:	93 30       	cpi	r25, 0x03	; 3
    2952:	08 f0       	brcs	.+2      	; 0x2956 <VL53L0X_CheckAndLoadInterruptSettings+0x2c>
    2954:	40 c0       	rjmp	.+128    	; 0x29d6 <VL53L0X_CheckAndLoadInterruptSettings+0xac>
    2956:	16 2f       	mov	r17, r22
    2958:	79 01       	movw	r14, r18
    295a:	9e 01       	movw	r18, r28
    295c:	2b 5f       	subi	r18, 0xFB	; 251
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	ae 01       	movw	r20, r28
    2962:	4f 5f       	subi	r20, 0xFF	; 255
    2964:	5f 4f       	sbci	r21, 0xFF	; 255
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	c7 01       	movw	r24, r14
    296a:	91 df       	rcall	.-222    	; 0x288e <VL53L0X_GetInterruptThresholds>
    296c:	49 81       	ldd	r20, Y+1	; 0x01
    296e:	5a 81       	ldd	r21, Y+2	; 0x02
    2970:	6b 81       	ldd	r22, Y+3	; 0x03
    2972:	7c 81       	ldd	r23, Y+4	; 0x04
    2974:	41 30       	cpi	r20, 0x01	; 1
    2976:	51 05       	cpc	r21, r1
    2978:	6f 4f       	sbci	r22, 0xFF	; 255
    297a:	71 05       	cpc	r23, r1
    297c:	48 f4       	brcc	.+18     	; 0x2990 <VL53L0X_CheckAndLoadInterruptSettings+0x66>
    297e:	4d 81       	ldd	r20, Y+5	; 0x05
    2980:	5e 81       	ldd	r21, Y+6	; 0x06
    2982:	6f 81       	ldd	r22, Y+7	; 0x07
    2984:	78 85       	ldd	r23, Y+8	; 0x08
    2986:	41 30       	cpi	r20, 0x01	; 1
    2988:	51 05       	cpc	r21, r1
    298a:	6f 4f       	sbci	r22, 0xFF	; 255
    298c:	71 05       	cpc	r23, r1
    298e:	20 f1       	brcs	.+72     	; 0x29d8 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2990:	81 11       	cpse	r24, r1
    2992:	22 c0       	rjmp	.+68     	; 0x29d8 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    2994:	11 23       	and	r17, r17
    2996:	31 f0       	breq	.+12     	; 0x29a4 <VL53L0X_CheckAndLoadInterruptSettings+0x7a>
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	71 e0       	ldi	r23, 0x01	; 1
    299c:	c7 01       	movw	r24, r14
    299e:	0e 94 bc 29 	call	0x5378	; 0x5378 <VL53L0X_load_tuning_settings>
    29a2:	1a c0       	rjmp	.+52     	; 0x29d8 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    29a4:	44 e0       	ldi	r20, 0x04	; 4
    29a6:	6f ef       	ldi	r22, 0xFF	; 255
    29a8:	c7 01       	movw	r24, r14
    29aa:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    29ae:	18 2f       	mov	r17, r24
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	60 e7       	ldi	r22, 0x70	; 112
    29b4:	c7 01       	movw	r24, r14
    29b6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    29ba:	18 2b       	or	r17, r24
    29bc:	40 e0       	ldi	r20, 0x00	; 0
    29be:	6f ef       	ldi	r22, 0xFF	; 255
    29c0:	c7 01       	movw	r24, r14
    29c2:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    29c6:	18 2b       	or	r17, r24
    29c8:	40 e0       	ldi	r20, 0x00	; 0
    29ca:	60 e8       	ldi	r22, 0x80	; 128
    29cc:	c7 01       	movw	r24, r14
    29ce:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    29d2:	81 2b       	or	r24, r17
    29d4:	01 c0       	rjmp	.+2      	; 0x29d8 <VL53L0X_CheckAndLoadInterruptSettings+0xae>
    29d6:	80 e0       	ldi	r24, 0x00	; 0
    29d8:	28 96       	adiw	r28, 0x08	; 8
    29da:	0f b6       	in	r0, 0x3f	; 63
    29dc:	f8 94       	cli
    29de:	de bf       	out	0x3e, r29	; 62
    29e0:	0f be       	out	0x3f, r0	; 63
    29e2:	cd bf       	out	0x3d, r28	; 61
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	ff 90       	pop	r15
    29ec:	ef 90       	pop	r14
    29ee:	08 95       	ret

000029f0 <VL53L0X_StartMeasurement>:
    29f0:	cf 92       	push	r12
    29f2:	df 92       	push	r13
    29f4:	ef 92       	push	r14
    29f6:	ff 92       	push	r15
    29f8:	0f 93       	push	r16
    29fa:	1f 93       	push	r17
    29fc:	cf 93       	push	r28
    29fe:	df 93       	push	r29
    2a00:	1f 92       	push	r1
    2a02:	cd b7       	in	r28, 0x3d	; 61
    2a04:	de b7       	in	r29, 0x3e	; 62
    2a06:	8c 01       	movw	r16, r24
    2a08:	fc 01       	movw	r30, r24
    2a0a:	f0 88       	ldd	r15, Z+16	; 0x10
    2a0c:	41 e0       	ldi	r20, 0x01	; 1
    2a0e:	60 e8       	ldi	r22, 0x80	; 128
    2a10:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a14:	41 e0       	ldi	r20, 0x01	; 1
    2a16:	6f ef       	ldi	r22, 0xFF	; 255
    2a18:	c8 01       	movw	r24, r16
    2a1a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	60 e0       	ldi	r22, 0x00	; 0
    2a22:	c8 01       	movw	r24, r16
    2a24:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a28:	f8 01       	movw	r30, r16
    2a2a:	e9 5d       	subi	r30, 0xD9	; 217
    2a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2e:	40 81       	ld	r20, Z
    2a30:	61 e9       	ldi	r22, 0x91	; 145
    2a32:	c8 01       	movw	r24, r16
    2a34:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a38:	41 e0       	ldi	r20, 0x01	; 1
    2a3a:	60 e0       	ldi	r22, 0x00	; 0
    2a3c:	c8 01       	movw	r24, r16
    2a3e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	6f ef       	ldi	r22, 0xFF	; 255
    2a46:	c8 01       	movw	r24, r16
    2a48:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a4c:	40 e0       	ldi	r20, 0x00	; 0
    2a4e:	60 e8       	ldi	r22, 0x80	; 128
    2a50:	c8 01       	movw	r24, r16
    2a52:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a56:	f1 e0       	ldi	r31, 0x01	; 1
    2a58:	ff 16       	cp	r15, r31
    2a5a:	e9 f1       	breq	.+122    	; 0x2ad6 <VL53L0X_StartMeasurement+0xe6>
    2a5c:	ff 16       	cp	r15, r31
    2a5e:	28 f0       	brcs	.+10     	; 0x2a6a <VL53L0X_StartMeasurement+0x7a>
    2a60:	93 e0       	ldi	r25, 0x03	; 3
    2a62:	f9 16       	cp	r15, r25
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <VL53L0X_StartMeasurement+0x78>
    2a66:	49 c0       	rjmp	.+146    	; 0x2afa <VL53L0X_StartMeasurement+0x10a>
    2a68:	5a c0       	rjmp	.+180    	; 0x2b1e <VL53L0X_StartMeasurement+0x12e>
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	60 e0       	ldi	r22, 0x00	; 0
    2a6e:	c8 01       	movw	r24, r16
    2a70:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2a74:	91 e0       	ldi	r25, 0x01	; 1
    2a76:	99 83       	std	Y+1, r25	; 0x01
    2a78:	88 23       	and	r24, r24
    2a7a:	71 f0       	breq	.+28     	; 0x2a98 <VL53L0X_StartMeasurement+0xa8>
    2a7c:	51 c0       	rjmp	.+162    	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2a7e:	c1 14       	cp	r12, r1
    2a80:	d1 04       	cpc	r13, r1
    2a82:	e1 04       	cpc	r14, r1
    2a84:	f1 04       	cpc	r15, r1
    2a86:	59 f0       	breq	.+22     	; 0x2a9e <VL53L0X_StartMeasurement+0xae>
    2a88:	ae 01       	movw	r20, r28
    2a8a:	4f 5f       	subi	r20, 0xFF	; 255
    2a8c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8e:	60 e0       	ldi	r22, 0x00	; 0
    2a90:	c8 01       	movw	r24, r16
    2a92:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    2a96:	03 c0       	rjmp	.+6      	; 0x2a9e <VL53L0X_StartMeasurement+0xae>
    2a98:	c1 2c       	mov	r12, r1
    2a9a:	d1 2c       	mov	r13, r1
    2a9c:	76 01       	movw	r14, r12
    2a9e:	ef ef       	ldi	r30, 0xFF	; 255
    2aa0:	ce 1a       	sub	r12, r30
    2aa2:	de 0a       	sbc	r13, r30
    2aa4:	ee 0a       	sbc	r14, r30
    2aa6:	fe 0a       	sbc	r15, r30
    2aa8:	99 81       	ldd	r25, Y+1	; 0x01
    2aaa:	90 ff       	sbrs	r25, 0
    2aac:	0b c0       	rjmp	.+22     	; 0x2ac4 <VL53L0X_StartMeasurement+0xd4>
    2aae:	81 11       	cpse	r24, r1
    2ab0:	09 c0       	rjmp	.+18     	; 0x2ac4 <VL53L0X_StartMeasurement+0xd4>
    2ab2:	f0 ed       	ldi	r31, 0xD0	; 208
    2ab4:	cf 16       	cp	r12, r31
    2ab6:	f7 e0       	ldi	r31, 0x07	; 7
    2ab8:	df 06       	cpc	r13, r31
    2aba:	e1 04       	cpc	r14, r1
    2abc:	f1 04       	cpc	r15, r1
    2abe:	f9 f6       	brne	.-66     	; 0x2a7e <VL53L0X_StartMeasurement+0x8e>
    2ac0:	89 ef       	ldi	r24, 0xF9	; 249
    2ac2:	2e c0       	rjmp	.+92     	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2ac4:	90 ed       	ldi	r25, 0xD0	; 208
    2ac6:	c9 16       	cp	r12, r25
    2ac8:	97 e0       	ldi	r25, 0x07	; 7
    2aca:	d9 06       	cpc	r13, r25
    2acc:	e1 04       	cpc	r14, r1
    2ace:	f1 04       	cpc	r15, r1
    2ad0:	38 f1       	brcs	.+78     	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2ad2:	89 ef       	ldi	r24, 0xF9	; 249
    2ad4:	25 c0       	rjmp	.+74     	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2ad6:	81 11       	cpse	r24, r1
    2ad8:	03 c0       	rjmp	.+6      	; 0x2ae0 <VL53L0X_StartMeasurement+0xf0>
    2ada:	61 e0       	ldi	r22, 0x01	; 1
    2adc:	c8 01       	movw	r24, r16
    2ade:	25 df       	rcall	.-438    	; 0x292a <VL53L0X_CheckAndLoadInterruptSettings>
    2ae0:	42 e0       	ldi	r20, 0x02	; 2
    2ae2:	60 e0       	ldi	r22, 0x00	; 0
    2ae4:	c8 01       	movw	r24, r16
    2ae6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2aea:	81 11       	cpse	r24, r1
    2aec:	19 c0       	rjmp	.+50     	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2aee:	f8 01       	movw	r30, r16
    2af0:	e1 5e       	subi	r30, 0xE1	; 225
    2af2:	fe 4f       	sbci	r31, 0xFE	; 254
    2af4:	94 e0       	ldi	r25, 0x04	; 4
    2af6:	90 83       	st	Z, r25
    2af8:	13 c0       	rjmp	.+38     	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2afa:	81 11       	cpse	r24, r1
    2afc:	03 c0       	rjmp	.+6      	; 0x2b04 <VL53L0X_StartMeasurement+0x114>
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	c8 01       	movw	r24, r16
    2b02:	13 df       	rcall	.-474    	; 0x292a <VL53L0X_CheckAndLoadInterruptSettings>
    2b04:	44 e0       	ldi	r20, 0x04	; 4
    2b06:	60 e0       	ldi	r22, 0x00	; 0
    2b08:	c8 01       	movw	r24, r16
    2b0a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2b0e:	81 11       	cpse	r24, r1
    2b10:	07 c0       	rjmp	.+14     	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2b12:	f8 01       	movw	r30, r16
    2b14:	e1 5e       	subi	r30, 0xE1	; 225
    2b16:	fe 4f       	sbci	r31, 0xFE	; 254
    2b18:	94 e0       	ldi	r25, 0x04	; 4
    2b1a:	90 83       	st	Z, r25
    2b1c:	01 c0       	rjmp	.+2      	; 0x2b20 <VL53L0X_StartMeasurement+0x130>
    2b1e:	88 ef       	ldi	r24, 0xF8	; 248
    2b20:	0f 90       	pop	r0
    2b22:	df 91       	pop	r29
    2b24:	cf 91       	pop	r28
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	ff 90       	pop	r15
    2b2c:	ef 90       	pop	r14
    2b2e:	df 90       	pop	r13
    2b30:	cf 90       	pop	r12
    2b32:	08 95       	ret

00002b34 <VL53L0X_PerformSingleMeasurement>:
    2b34:	1f 93       	push	r17
    2b36:	cf 93       	push	r28
    2b38:	df 93       	push	r29
    2b3a:	ec 01       	movw	r28, r24
    2b3c:	18 89       	ldd	r17, Y+16	; 0x10
    2b3e:	11 11       	cpse	r17, r1
    2b40:	04 c0       	rjmp	.+8      	; 0x2b4a <VL53L0X_PerformSingleMeasurement+0x16>
    2b42:	56 df       	rcall	.-340    	; 0x29f0 <VL53L0X_StartMeasurement>
    2b44:	81 11       	cpse	r24, r1
    2b46:	12 c0       	rjmp	.+36     	; 0x2b6c <VL53L0X_PerformSingleMeasurement+0x38>
    2b48:	0c c0       	rjmp	.+24     	; 0x2b62 <VL53L0X_PerformSingleMeasurement+0x2e>
    2b4a:	0e 94 b3 20 	call	0x4166	; 0x4166 <VL53L0X_measurement_poll_for_completion>
    2b4e:	81 11       	cpse	r24, r1
    2b50:	0d c0       	rjmp	.+26     	; 0x2b6c <VL53L0X_PerformSingleMeasurement+0x38>
    2b52:	11 11       	cpse	r17, r1
    2b54:	0b c0       	rjmp	.+22     	; 0x2b6c <VL53L0X_PerformSingleMeasurement+0x38>
    2b56:	c1 5e       	subi	r28, 0xE1	; 225
    2b58:	de 4f       	sbci	r29, 0xFE	; 254
    2b5a:	83 e0       	ldi	r24, 0x03	; 3
    2b5c:	88 83       	st	Y, r24
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	05 c0       	rjmp	.+10     	; 0x2b6c <VL53L0X_PerformSingleMeasurement+0x38>
    2b62:	ce 01       	movw	r24, r28
    2b64:	0e 94 b3 20 	call	0x4166	; 0x4166 <VL53L0X_measurement_poll_for_completion>
    2b68:	88 23       	and	r24, r24
    2b6a:	a9 f3       	breq	.-22     	; 0x2b56 <VL53L0X_PerformSingleMeasurement+0x22>
    2b6c:	df 91       	pop	r29
    2b6e:	cf 91       	pop	r28
    2b70:	1f 91       	pop	r17
    2b72:	08 95       	ret

00002b74 <VL53L0X_ClearInterruptMask>:
    2b74:	ef 92       	push	r14
    2b76:	ff 92       	push	r15
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	1f 92       	push	r1
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	7c 01       	movw	r14, r24
    2b88:	00 e0       	ldi	r16, 0x00	; 0
    2b8a:	41 e0       	ldi	r20, 0x01	; 1
    2b8c:	6b e0       	ldi	r22, 0x0B	; 11
    2b8e:	c7 01       	movw	r24, r14
    2b90:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2b94:	18 2f       	mov	r17, r24
    2b96:	40 e0       	ldi	r20, 0x00	; 0
    2b98:	6b e0       	ldi	r22, 0x0B	; 11
    2b9a:	c7 01       	movw	r24, r14
    2b9c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2ba0:	18 2b       	or	r17, r24
    2ba2:	ae 01       	movw	r20, r28
    2ba4:	4f 5f       	subi	r20, 0xFF	; 255
    2ba6:	5f 4f       	sbci	r21, 0xFF	; 255
    2ba8:	63 e1       	ldi	r22, 0x13	; 19
    2baa:	c7 01       	movw	r24, r14
    2bac:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    2bb0:	81 2b       	or	r24, r17
    2bb2:	0f 5f       	subi	r16, 0xFF	; 255
    2bb4:	99 81       	ldd	r25, Y+1	; 0x01
    2bb6:	97 70       	andi	r25, 0x07	; 7
    2bb8:	29 f0       	breq	.+10     	; 0x2bc4 <VL53L0X_ClearInterruptMask+0x50>
    2bba:	03 30       	cpi	r16, 0x03	; 3
    2bbc:	39 f0       	breq	.+14     	; 0x2bcc <VL53L0X_ClearInterruptMask+0x58>
    2bbe:	88 23       	and	r24, r24
    2bc0:	21 f3       	breq	.-56     	; 0x2b8a <VL53L0X_ClearInterruptMask+0x16>
    2bc2:	05 c0       	rjmp	.+10     	; 0x2bce <VL53L0X_ClearInterruptMask+0x5a>
    2bc4:	03 30       	cpi	r16, 0x03	; 3
    2bc6:	18 f0       	brcs	.+6      	; 0x2bce <VL53L0X_ClearInterruptMask+0x5a>
    2bc8:	84 ef       	ldi	r24, 0xF4	; 244
    2bca:	01 c0       	rjmp	.+2      	; 0x2bce <VL53L0X_ClearInterruptMask+0x5a>
    2bcc:	84 ef       	ldi	r24, 0xF4	; 244
    2bce:	0f 90       	pop	r0
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	08 95       	ret

00002bde <VL53L0X_PerformSingleRangingMeasurement>:
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	ec 01       	movw	r28, r24
    2be8:	8b 01       	movw	r16, r22
    2bea:	60 e0       	ldi	r22, 0x00	; 0
    2bec:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <VL53L0X_SetDeviceMode>
    2bf0:	81 11       	cpse	r24, r1
    2bf2:	0e c0       	rjmp	.+28     	; 0x2c10 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	9e df       	rcall	.-196    	; 0x2b34 <VL53L0X_PerformSingleMeasurement>
    2bf8:	81 11       	cpse	r24, r1
    2bfa:	0a c0       	rjmp	.+20     	; 0x2c10 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2bfc:	b8 01       	movw	r22, r16
    2bfe:	ce 01       	movw	r24, r28
    2c00:	0a dd       	rcall	.-1516   	; 0x2616 <VL53L0X_GetRangingMeasurementData>
    2c02:	81 11       	cpse	r24, r1
    2c04:	05 c0       	rjmp	.+10     	; 0x2c10 <VL53L0X_PerformSingleRangingMeasurement+0x32>
    2c06:	40 e0       	ldi	r20, 0x00	; 0
    2c08:	50 e0       	ldi	r21, 0x00	; 0
    2c0a:	ba 01       	movw	r22, r20
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	b2 df       	rcall	.-156    	; 0x2b74 <VL53L0X_ClearInterruptMask>
    2c10:	df 91       	pop	r29
    2c12:	cf 91       	pop	r28
    2c14:	1f 91       	pop	r17
    2c16:	0f 91       	pop	r16
    2c18:	08 95       	ret

00002c1a <VL53L0X_SetGpioConfig>:
    2c1a:	0f 93       	push	r16
    2c1c:	1f 93       	push	r17
    2c1e:	cf 93       	push	r28
    2c20:	df 93       	push	r29
    2c22:	61 11       	cpse	r22, r1
    2c24:	9b c0       	rjmp	.+310    	; 0x2d5c <VL53L0X_SetGpioConfig+0x142>
    2c26:	12 2f       	mov	r17, r18
    2c28:	ec 01       	movw	r28, r24
    2c2a:	44 31       	cpi	r20, 0x14	; 20
    2c2c:	51 f4       	brne	.+20     	; 0x2c42 <VL53L0X_SetGpioConfig+0x28>
    2c2e:	00 23       	and	r16, r16
    2c30:	11 f0       	breq	.+4      	; 0x2c36 <VL53L0X_SetGpioConfig+0x1c>
    2c32:	41 e0       	ldi	r20, 0x01	; 1
    2c34:	01 c0       	rjmp	.+2      	; 0x2c38 <VL53L0X_SetGpioConfig+0x1e>
    2c36:	40 e1       	ldi	r20, 0x10	; 16
    2c38:	64 e8       	ldi	r22, 0x84	; 132
    2c3a:	ce 01       	movw	r24, r28
    2c3c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c40:	93 c0       	rjmp	.+294    	; 0x2d68 <VL53L0X_SetGpioConfig+0x14e>
    2c42:	45 31       	cpi	r20, 0x15	; 21
    2c44:	09 f0       	breq	.+2      	; 0x2c48 <VL53L0X_SetGpioConfig+0x2e>
    2c46:	5a c0       	rjmp	.+180    	; 0x2cfc <VL53L0X_SetGpioConfig+0xe2>
    2c48:	41 e0       	ldi	r20, 0x01	; 1
    2c4a:	6f ef       	ldi	r22, 0xFF	; 255
    2c4c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c50:	18 2f       	mov	r17, r24
    2c52:	40 e0       	ldi	r20, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	ce 01       	movw	r24, r28
    2c58:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c5c:	18 2b       	or	r17, r24
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	6f ef       	ldi	r22, 0xFF	; 255
    2c62:	ce 01       	movw	r24, r28
    2c64:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c68:	18 2b       	or	r17, r24
    2c6a:	41 e0       	ldi	r20, 0x01	; 1
    2c6c:	60 e8       	ldi	r22, 0x80	; 128
    2c6e:	ce 01       	movw	r24, r28
    2c70:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c74:	18 2b       	or	r17, r24
    2c76:	42 e0       	ldi	r20, 0x02	; 2
    2c78:	65 e8       	ldi	r22, 0x85	; 133
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c80:	18 2b       	or	r17, r24
    2c82:	44 e0       	ldi	r20, 0x04	; 4
    2c84:	6f ef       	ldi	r22, 0xFF	; 255
    2c86:	ce 01       	movw	r24, r28
    2c88:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c8c:	18 2b       	or	r17, r24
    2c8e:	40 e0       	ldi	r20, 0x00	; 0
    2c90:	6d ec       	ldi	r22, 0xCD	; 205
    2c92:	ce 01       	movw	r24, r28
    2c94:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2c98:	18 2b       	or	r17, r24
    2c9a:	41 e1       	ldi	r20, 0x11	; 17
    2c9c:	6c ec       	ldi	r22, 0xCC	; 204
    2c9e:	ce 01       	movw	r24, r28
    2ca0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2ca4:	18 2b       	or	r17, r24
    2ca6:	47 e0       	ldi	r20, 0x07	; 7
    2ca8:	6f ef       	ldi	r22, 0xFF	; 255
    2caa:	ce 01       	movw	r24, r28
    2cac:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2cb0:	18 2b       	or	r17, r24
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	6e eb       	ldi	r22, 0xBE	; 190
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2cbc:	18 2b       	or	r17, r24
    2cbe:	46 e0       	ldi	r20, 0x06	; 6
    2cc0:	6f ef       	ldi	r22, 0xFF	; 255
    2cc2:	ce 01       	movw	r24, r28
    2cc4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2cc8:	18 2b       	or	r17, r24
    2cca:	49 e0       	ldi	r20, 0x09	; 9
    2ccc:	6c ec       	ldi	r22, 0xCC	; 204
    2cce:	ce 01       	movw	r24, r28
    2cd0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2cd4:	18 2b       	or	r17, r24
    2cd6:	40 e0       	ldi	r20, 0x00	; 0
    2cd8:	6f ef       	ldi	r22, 0xFF	; 255
    2cda:	ce 01       	movw	r24, r28
    2cdc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2ce0:	18 2b       	or	r17, r24
    2ce2:	41 e0       	ldi	r20, 0x01	; 1
    2ce4:	6f ef       	ldi	r22, 0xFF	; 255
    2ce6:	ce 01       	movw	r24, r28
    2ce8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2cec:	18 2b       	or	r17, r24
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	60 e0       	ldi	r22, 0x00	; 0
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2cf8:	81 2b       	or	r24, r17
    2cfa:	36 c0       	rjmp	.+108    	; 0x2d68 <VL53L0X_SetGpioConfig+0x14e>
    2cfc:	22 30       	cpi	r18, 0x02	; 2
    2cfe:	59 f0       	breq	.+22     	; 0x2d16 <VL53L0X_SetGpioConfig+0xfc>
    2d00:	28 f4       	brcc	.+10     	; 0x2d0c <VL53L0X_SetGpioConfig+0xf2>
    2d02:	22 23       	and	r18, r18
    2d04:	61 f0       	breq	.+24     	; 0x2d1e <VL53L0X_SetGpioConfig+0x104>
    2d06:	21 30       	cpi	r18, 0x01	; 1
    2d08:	59 f1       	breq	.+86     	; 0x2d60 <VL53L0X_SetGpioConfig+0x146>
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <VL53L0X_SetGpioConfig+0x110>
    2d0c:	23 30       	cpi	r18, 0x03	; 3
    2d0e:	51 f1       	breq	.+84     	; 0x2d64 <VL53L0X_SetGpioConfig+0x14a>
    2d10:	24 30       	cpi	r18, 0x04	; 4
    2d12:	19 f0       	breq	.+6      	; 0x2d1a <VL53L0X_SetGpioConfig+0x100>
    2d14:	0a c0       	rjmp	.+20     	; 0x2d2a <VL53L0X_SetGpioConfig+0x110>
    2d16:	42 e0       	ldi	r20, 0x02	; 2
    2d18:	03 c0       	rjmp	.+6      	; 0x2d20 <VL53L0X_SetGpioConfig+0x106>
    2d1a:	44 e0       	ldi	r20, 0x04	; 4
    2d1c:	01 c0       	rjmp	.+2      	; 0x2d20 <VL53L0X_SetGpioConfig+0x106>
    2d1e:	40 e0       	ldi	r20, 0x00	; 0
    2d20:	6a e0       	ldi	r22, 0x0A	; 10
    2d22:	ce 01       	movw	r24, r28
    2d24:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2d28:	01 c0       	rjmp	.+2      	; 0x2d2c <VL53L0X_SetGpioConfig+0x112>
    2d2a:	85 ef       	ldi	r24, 0xF5	; 245
    2d2c:	81 11       	cpse	r24, r1
    2d2e:	1c c0       	rjmp	.+56     	; 0x2d68 <VL53L0X_SetGpioConfig+0x14e>
    2d30:	00 23       	and	r16, r16
    2d32:	11 f0       	breq	.+4      	; 0x2d38 <VL53L0X_SetGpioConfig+0x11e>
    2d34:	20 e1       	ldi	r18, 0x10	; 16
    2d36:	01 c0       	rjmp	.+2      	; 0x2d3a <VL53L0X_SetGpioConfig+0x120>
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	4f ee       	ldi	r20, 0xEF	; 239
    2d3c:	64 e8       	ldi	r22, 0x84	; 132
    2d3e:	ce 01       	movw	r24, r28
    2d40:	0e 94 31 32 	call	0x6462	; 0x6462 <VL53L0X_UpdateByte>
    2d44:	81 11       	cpse	r24, r1
    2d46:	10 c0       	rjmp	.+32     	; 0x2d68 <VL53L0X_SetGpioConfig+0x14e>
    2d48:	fe 01       	movw	r30, r28
    2d4a:	e2 53       	subi	r30, 0x32	; 50
    2d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4e:	10 83       	st	Z, r17
    2d50:	40 e0       	ldi	r20, 0x00	; 0
    2d52:	50 e0       	ldi	r21, 0x00	; 0
    2d54:	ba 01       	movw	r22, r20
    2d56:	ce 01       	movw	r24, r28
    2d58:	0d df       	rcall	.-486    	; 0x2b74 <VL53L0X_ClearInterruptMask>
    2d5a:	06 c0       	rjmp	.+12     	; 0x2d68 <VL53L0X_SetGpioConfig+0x14e>
    2d5c:	86 ef       	ldi	r24, 0xF6	; 246
    2d5e:	04 c0       	rjmp	.+8      	; 0x2d68 <VL53L0X_SetGpioConfig+0x14e>
    2d60:	41 e0       	ldi	r20, 0x01	; 1
    2d62:	de cf       	rjmp	.-68     	; 0x2d20 <VL53L0X_SetGpioConfig+0x106>
    2d64:	43 e0       	ldi	r20, 0x03	; 3
    2d66:	dc cf       	rjmp	.-72     	; 0x2d20 <VL53L0X_SetGpioConfig+0x106>
    2d68:	df 91       	pop	r29
    2d6a:	cf 91       	pop	r28
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	08 95       	ret

00002d72 <VL53L0X_StaticInit>:
    2d72:	ef 92       	push	r14
    2d74:	ff 92       	push	r15
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	c7 54       	subi	r28, 0x47	; 71
    2d84:	d1 09       	sbc	r29, r1
    2d86:	0f b6       	in	r0, 0x3f	; 63
    2d88:	f8 94       	cli
    2d8a:	de bf       	out	0x3e, r29	; 62
    2d8c:	0f be       	out	0x3f, r0	; 63
    2d8e:	cd bf       	out	0x3d, r28	; 61
    2d90:	7c 01       	movw	r14, r24
    2d92:	fe 01       	movw	r30, r28
    2d94:	31 96       	adiw	r30, 0x01	; 1
    2d96:	8a e3       	ldi	r24, 0x3A	; 58
    2d98:	df 01       	movw	r26, r30
    2d9a:	1d 92       	st	X+, r1
    2d9c:	8a 95       	dec	r24
    2d9e:	e9 f7       	brne	.-6      	; 0x2d9a <VL53L0X_StaticInit+0x28>
    2da0:	1c ae       	std	Y+60, r1	; 0x3c
    2da2:	1b ae       	std	Y+59, r1	; 0x3b
    2da4:	1d ae       	std	Y+61, r1	; 0x3d
    2da6:	1e ae       	std	Y+62, r1	; 0x3e
    2da8:	23 96       	adiw	r28, 0x03	; 3
    2daa:	1c ae       	std	Y+60, r1	; 0x3c
    2dac:	1d ae       	std	Y+61, r1	; 0x3d
    2dae:	1e ae       	std	Y+62, r1	; 0x3e
    2db0:	1f ae       	std	Y+63, r1	; 0x3f
    2db2:	23 97       	sbiw	r28, 0x03	; 3
    2db4:	61 e0       	ldi	r22, 0x01	; 1
    2db6:	c7 01       	movw	r24, r14
    2db8:	0e 94 89 21 	call	0x4312	; 0x4312 <VL53L0X_get_info_from_device>
    2dbc:	f7 01       	movw	r30, r14
    2dbe:	ed 5f       	subi	r30, 0xFD	; 253
    2dc0:	fe 4f       	sbci	r31, 0xFE	; 254
    2dc2:	20 81       	ld	r18, Z
    2dc4:	22 30       	cpi	r18, 0x02	; 2
    2dc6:	a0 f4       	brcc	.+40     	; 0x2df0 <VL53L0X_StaticInit+0x7e>
    2dc8:	31 97       	sbiw	r30, 0x01	; 1
    2dca:	40 81       	ld	r20, Z
    2dcc:	50 e0       	ldi	r21, 0x00	; 0
    2dce:	60 e0       	ldi	r22, 0x00	; 0
    2dd0:	70 e0       	ldi	r23, 0x00	; 0
    2dd2:	21 30       	cpi	r18, 0x01	; 1
    2dd4:	31 f4       	brne	.+12     	; 0x2de2 <VL53L0X_StaticInit+0x70>
    2dd6:	41 32       	cpi	r20, 0x21	; 33
    2dd8:	51 05       	cpc	r21, r1
    2dda:	61 05       	cpc	r22, r1
    2ddc:	71 05       	cpc	r23, r1
    2dde:	40 f4       	brcc	.+16     	; 0x2df0 <VL53L0X_StaticInit+0x7e>
    2de0:	10 c0       	rjmp	.+32     	; 0x2e02 <VL53L0X_StaticInit+0x90>
    2de2:	21 11       	cpse	r18, r1
    2de4:	0e c0       	rjmp	.+28     	; 0x2e02 <VL53L0X_StaticInit+0x90>
    2de6:	4d 30       	cpi	r20, 0x0D	; 13
    2de8:	51 05       	cpc	r21, r1
    2dea:	61 05       	cpc	r22, r1
    2dec:	71 05       	cpc	r23, r1
    2dee:	48 f0       	brcs	.+18     	; 0x2e02 <VL53L0X_StaticInit+0x90>
    2df0:	ae 01       	movw	r20, r28
    2df2:	42 5c       	subi	r20, 0xC2	; 194
    2df4:	5f 4f       	sbci	r21, 0xFF	; 255
    2df6:	be 01       	movw	r22, r28
    2df8:	61 5c       	subi	r22, 0xC1	; 193
    2dfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2dfc:	c7 01       	movw	r24, r14
    2dfe:	3e d7       	rcall	.+3708   	; 0x3c7c <VL53L0X_perform_ref_spad_management>
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <VL53L0X_StaticInit+0x94>
    2e02:	c7 01       	movw	r24, r14
    2e04:	b8 d4       	rcall	.+2416   	; 0x3776 <VL53L0X_set_reference_spads>
    2e06:	81 11       	cpse	r24, r1
    2e08:	26 c0       	rjmp	.+76     	; 0x2e56 <VL53L0X_StaticInit+0xe4>
    2e0a:	f7 01       	movw	r30, r14
    2e0c:	e8 5c       	subi	r30, 0xC8	; 200
    2e0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2e10:	80 81       	ld	r24, Z
    2e12:	81 11       	cpse	r24, r1
    2e14:	be c0       	rjmp	.+380    	; 0x2f92 <VL53L0X_StaticInit+0x220>
    2e16:	32 97       	sbiw	r30, 0x02	; 2
    2e18:	60 81       	ld	r22, Z
    2e1a:	71 81       	ldd	r23, Z+1	; 0x01
    2e1c:	bc c0       	rjmp	.+376    	; 0x2f96 <VL53L0X_StaticInit+0x224>
    2e1e:	00 e0       	ldi	r16, 0x00	; 0
    2e20:	24 e0       	ldi	r18, 0x04	; 4
    2e22:	40 e0       	ldi	r20, 0x00	; 0
    2e24:	60 e0       	ldi	r22, 0x00	; 0
    2e26:	c7 01       	movw	r24, r14
    2e28:	f8 de       	rcall	.-528    	; 0x2c1a <VL53L0X_SetGpioConfig>
    2e2a:	81 11       	cpse	r24, r1
    2e2c:	6c c0       	rjmp	.+216    	; 0x2f06 <VL53L0X_StaticInit+0x194>
    2e2e:	41 e0       	ldi	r20, 0x01	; 1
    2e30:	6f ef       	ldi	r22, 0xFF	; 255
    2e32:	c7 01       	movw	r24, r14
    2e34:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2e38:	18 2f       	mov	r17, r24
    2e3a:	ae 01       	movw	r20, r28
    2e3c:	45 5c       	subi	r20, 0xC5	; 197
    2e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e40:	64 e8       	ldi	r22, 0x84	; 132
    2e42:	c7 01       	movw	r24, r14
    2e44:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    2e48:	18 2b       	or	r17, r24
    2e4a:	40 e0       	ldi	r20, 0x00	; 0
    2e4c:	6f ef       	ldi	r22, 0xFF	; 255
    2e4e:	c7 01       	movw	r24, r14
    2e50:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    2e54:	81 2b       	or	r24, r17
    2e56:	81 11       	cpse	r24, r1
    2e58:	a5 c0       	rjmp	.+330    	; 0x2fa4 <VL53L0X_StaticInit+0x232>
    2e5a:	f7 01       	movw	r30, r14
    2e5c:	e8 53       	subi	r30, 0x38	; 56
    2e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e60:	8b ad       	ldd	r24, Y+59	; 0x3b
    2e62:	9c ad       	ldd	r25, Y+60	; 0x3c
    2e64:	82 95       	swap	r24
    2e66:	92 95       	swap	r25
    2e68:	90 7f       	andi	r25, 0xF0	; 240
    2e6a:	98 27       	eor	r25, r24
    2e6c:	80 7f       	andi	r24, 0xF0	; 240
    2e6e:	98 27       	eor	r25, r24
    2e70:	a0 e0       	ldi	r26, 0x00	; 0
    2e72:	b0 e0       	ldi	r27, 0x00	; 0
    2e74:	80 83       	st	Z, r24
    2e76:	91 83       	std	Z+1, r25	; 0x01
    2e78:	a2 83       	std	Z+2, r26	; 0x02
    2e7a:	b3 83       	std	Z+3, r27	; 0x03
    2e7c:	be 01       	movw	r22, r28
    2e7e:	6f 5f       	subi	r22, 0xFF	; 255
    2e80:	7f 4f       	sbci	r23, 0xFF	; 255
    2e82:	c7 01       	movw	r24, r14
    2e84:	41 da       	rcall	.-2942   	; 0x2308 <VL53L0X_GetDeviceParameters>
    2e86:	81 11       	cpse	r24, r1
    2e88:	29 c0       	rjmp	.+82     	; 0x2edc <VL53L0X_StaticInit+0x16a>
    2e8a:	be 01       	movw	r22, r28
    2e8c:	63 5c       	subi	r22, 0xC3	; 195
    2e8e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e90:	c7 01       	movw	r24, r14
    2e92:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <VL53L0X_GetFractionEnable>
    2e96:	81 11       	cpse	r24, r1
    2e98:	21 c0       	rjmp	.+66     	; 0x2edc <VL53L0X_StaticInit+0x16a>
    2e9a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2e9c:	f7 01       	movw	r30, r14
    2e9e:	e2 5e       	subi	r30, 0xE2	; 226
    2ea0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ea2:	80 83       	st	Z, r24
    2ea4:	8a e3       	ldi	r24, 0x3A	; 58
    2ea6:	fe 01       	movw	r30, r28
    2ea8:	31 96       	adiw	r30, 0x01	; 1
    2eaa:	d7 01       	movw	r26, r14
    2eac:	50 96       	adiw	r26, 0x10	; 16
    2eae:	01 90       	ld	r0, Z+
    2eb0:	0d 92       	st	X+, r0
    2eb2:	8a 95       	dec	r24
    2eb4:	e1 f7       	brne	.-8      	; 0x2eae <VL53L0X_StaticInit+0x13c>
    2eb6:	ae 01       	movw	r20, r28
    2eb8:	43 5c       	subi	r20, 0xC3	; 195
    2eba:	5f 4f       	sbci	r21, 0xFF	; 255
    2ebc:	61 e0       	ldi	r22, 0x01	; 1
    2ebe:	c7 01       	movw	r24, r14
    2ec0:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    2ec4:	81 11       	cpse	r24, r1
    2ec6:	71 c0       	rjmp	.+226    	; 0x2faa <VL53L0X_StaticInit+0x238>
    2ec8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2eca:	f7 01       	movw	r30, r14
    2ecc:	e3 5e       	subi	r30, 0xE3	; 227
    2ece:	fe 4f       	sbci	r31, 0xFE	; 254
    2ed0:	80 83       	st	Z, r24
    2ed2:	40 e0       	ldi	r20, 0x00	; 0
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	c7 01       	movw	r24, r14
    2ed8:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <VL53L0X_SetSequenceStepEnable>
    2edc:	81 11       	cpse	r24, r1
    2ede:	65 c0       	rjmp	.+202    	; 0x2faa <VL53L0X_StaticInit+0x238>
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	62 e0       	ldi	r22, 0x02	; 2
    2ee4:	c7 01       	movw	r24, r14
    2ee6:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <VL53L0X_SetSequenceStepEnable>
    2eea:	81 11       	cpse	r24, r1
    2eec:	1c c0       	rjmp	.+56     	; 0x2f26 <VL53L0X_StaticInit+0x1b4>
    2eee:	83 e0       	ldi	r24, 0x03	; 3
    2ef0:	f7 01       	movw	r30, r14
    2ef2:	e1 5e       	subi	r30, 0xE1	; 225
    2ef4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ef6:	80 83       	st	Z, r24
    2ef8:	ae 01       	movw	r20, r28
    2efa:	4d 5b       	subi	r20, 0xBD	; 189
    2efc:	5f 4f       	sbci	r21, 0xFF	; 255
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	c7 01       	movw	r24, r14
    2f02:	0e 94 b5 27 	call	0x4f6a	; 0x4f6a <VL53L0X_get_vcsel_pulse_period>
    2f06:	81 11       	cpse	r24, r1
    2f08:	1e c0       	rjmp	.+60     	; 0x2f46 <VL53L0X_StaticInit+0x1d4>
    2f0a:	24 96       	adiw	r28, 0x04	; 4
    2f0c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f0e:	24 97       	sbiw	r28, 0x04	; 4
    2f10:	f7 01       	movw	r30, r14
    2f12:	e8 52       	subi	r30, 0x28	; 40
    2f14:	ff 4f       	sbci	r31, 0xFF	; 255
    2f16:	80 83       	st	Z, r24
    2f18:	ae 01       	movw	r20, r28
    2f1a:	4d 5b       	subi	r20, 0xBD	; 189
    2f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1e:	61 e0       	ldi	r22, 0x01	; 1
    2f20:	c7 01       	movw	r24, r14
    2f22:	0e 94 b5 27 	call	0x4f6a	; 0x4f6a <VL53L0X_get_vcsel_pulse_period>
    2f26:	81 11       	cpse	r24, r1
    2f28:	24 c0       	rjmp	.+72     	; 0x2f72 <VL53L0X_StaticInit+0x200>
    2f2a:	24 96       	adiw	r28, 0x04	; 4
    2f2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    2f2e:	24 97       	sbiw	r28, 0x04	; 4
    2f30:	f7 01       	movw	r30, r14
    2f32:	ed 52       	subi	r30, 0x2D	; 45
    2f34:	ff 4f       	sbci	r31, 0xFF	; 255
    2f36:	80 83       	st	Z, r24
    2f38:	ae 01       	movw	r20, r28
    2f3a:	4c 5b       	subi	r20, 0xBC	; 188
    2f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f3e:	63 e0       	ldi	r22, 0x03	; 3
    2f40:	c7 01       	movw	r24, r14
    2f42:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <get_sequence_step_timeout>
    2f46:	81 11       	cpse	r24, r1
    2f48:	30 c0       	rjmp	.+96     	; 0x2faa <VL53L0X_StaticInit+0x238>
    2f4a:	28 96       	adiw	r28, 0x08	; 8
    2f4c:	8c ad       	ldd	r24, Y+60	; 0x3c
    2f4e:	9d ad       	ldd	r25, Y+61	; 0x3d
    2f50:	ae ad       	ldd	r26, Y+62	; 0x3e
    2f52:	bf ad       	ldd	r27, Y+63	; 0x3f
    2f54:	28 97       	sbiw	r28, 0x08	; 8
    2f56:	f7 01       	movw	r30, r14
    2f58:	ec 52       	subi	r30, 0x2C	; 44
    2f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5c:	80 83       	st	Z, r24
    2f5e:	91 83       	std	Z+1, r25	; 0x01
    2f60:	a2 83       	std	Z+2, r26	; 0x02
    2f62:	b3 83       	std	Z+3, r27	; 0x03
    2f64:	ae 01       	movw	r20, r28
    2f66:	4c 5b       	subi	r20, 0xBC	; 188
    2f68:	5f 4f       	sbci	r21, 0xFF	; 255
    2f6a:	64 e0       	ldi	r22, 0x04	; 4
    2f6c:	c7 01       	movw	r24, r14
    2f6e:	0e 94 ec 25 	call	0x4bd8	; 0x4bd8 <get_sequence_step_timeout>
    2f72:	81 11       	cpse	r24, r1
    2f74:	1a c0       	rjmp	.+52     	; 0x2faa <VL53L0X_StaticInit+0x238>
    2f76:	f7 01       	movw	r30, r14
    2f78:	e1 53       	subi	r30, 0x31	; 49
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	28 96       	adiw	r28, 0x08	; 8
    2f7e:	4c ad       	ldd	r20, Y+60	; 0x3c
    2f80:	5d ad       	ldd	r21, Y+61	; 0x3d
    2f82:	6e ad       	ldd	r22, Y+62	; 0x3e
    2f84:	7f ad       	ldd	r23, Y+63	; 0x3f
    2f86:	28 97       	sbiw	r28, 0x08	; 8
    2f88:	40 83       	st	Z, r20
    2f8a:	51 83       	std	Z+1, r21	; 0x01
    2f8c:	62 83       	std	Z+2, r22	; 0x02
    2f8e:	73 83       	std	Z+3, r23	; 0x03
    2f90:	0c c0       	rjmp	.+24     	; 0x2faa <VL53L0X_StaticInit+0x238>
    2f92:	66 eb       	ldi	r22, 0xB6	; 182
    2f94:	72 e0       	ldi	r23, 0x02	; 2
    2f96:	c7 01       	movw	r24, r14
    2f98:	0e 94 bc 29 	call	0x5378	; 0x5378 <VL53L0X_load_tuning_settings>
    2f9c:	88 23       	and	r24, r24
    2f9e:	09 f4       	brne	.+2      	; 0x2fa2 <VL53L0X_StaticInit+0x230>
    2fa0:	3e cf       	rjmp	.-388    	; 0x2e1e <VL53L0X_StaticInit+0xac>
    2fa2:	71 cf       	rjmp	.-286    	; 0x2e86 <VL53L0X_StaticInit+0x114>
    2fa4:	88 23       	and	r24, r24
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <VL53L0X_StaticInit+0x238>
    2fa8:	86 cf       	rjmp	.-244    	; 0x2eb6 <VL53L0X_StaticInit+0x144>
    2faa:	c9 5b       	subi	r28, 0xB9	; 185
    2fac:	df 4f       	sbci	r29, 0xFF	; 255
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	08 95       	ret

00002fc6 <VL53L0X_GetInterruptMaskStatus>:
    2fc6:	0f 93       	push	r16
    2fc8:	1f 93       	push	r17
    2fca:	cf 93       	push	r28
    2fcc:	df 93       	push	r29
    2fce:	1f 92       	push	r1
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	8b 01       	movw	r16, r22
    2fd6:	ae 01       	movw	r20, r28
    2fd8:	4f 5f       	subi	r20, 0xFF	; 255
    2fda:	5f 4f       	sbci	r21, 0xFF	; 255
    2fdc:	63 e1       	ldi	r22, 0x13	; 19
    2fde:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    2fe2:	99 81       	ldd	r25, Y+1	; 0x01
    2fe4:	49 2f       	mov	r20, r25
    2fe6:	47 70       	andi	r20, 0x07	; 7
    2fe8:	50 e0       	ldi	r21, 0x00	; 0
    2fea:	60 e0       	ldi	r22, 0x00	; 0
    2fec:	70 e0       	ldi	r23, 0x00	; 0
    2fee:	f8 01       	movw	r30, r16
    2ff0:	40 83       	st	Z, r20
    2ff2:	51 83       	std	Z+1, r21	; 0x01
    2ff4:	62 83       	std	Z+2, r22	; 0x02
    2ff6:	73 83       	std	Z+3, r23	; 0x03
    2ff8:	98 71       	andi	r25, 0x18	; 24
    2ffa:	09 f0       	breq	.+2      	; 0x2ffe <VL53L0X_GetInterruptMaskStatus+0x38>
    2ffc:	8a ef       	ldi	r24, 0xFA	; 250
    2ffe:	0f 90       	pop	r0
    3000:	df 91       	pop	r29
    3002:	cf 91       	pop	r28
    3004:	1f 91       	pop	r17
    3006:	0f 91       	pop	r16
    3008:	08 95       	ret

0000300a <VL53L0X_GetMeasurementDataReady>:
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	00 d0       	rcall	.+0      	; 0x3014 <VL53L0X_GetMeasurementDataReady+0xa>
    3014:	00 d0       	rcall	.+0      	; 0x3016 <VL53L0X_GetMeasurementDataReady+0xc>
    3016:	1f 92       	push	r1
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	8b 01       	movw	r16, r22
    301e:	fc 01       	movw	r30, r24
    3020:	e2 53       	subi	r30, 0x32	; 50
    3022:	ff 4f       	sbci	r31, 0xFF	; 255
    3024:	20 81       	ld	r18, Z
    3026:	24 30       	cpi	r18, 0x04	; 4
    3028:	a1 f4       	brne	.+40     	; 0x3052 <VL53L0X_GetMeasurementDataReady+0x48>
    302a:	be 01       	movw	r22, r28
    302c:	6e 5f       	subi	r22, 0xFE	; 254
    302e:	7f 4f       	sbci	r23, 0xFF	; 255
    3030:	ca df       	rcall	.-108    	; 0x2fc6 <VL53L0X_GetInterruptMaskStatus>
    3032:	4a 81       	ldd	r20, Y+2	; 0x02
    3034:	5b 81       	ldd	r21, Y+3	; 0x03
    3036:	6c 81       	ldd	r22, Y+4	; 0x04
    3038:	7d 81       	ldd	r23, Y+5	; 0x05
    303a:	44 30       	cpi	r20, 0x04	; 4
    303c:	51 05       	cpc	r21, r1
    303e:	61 05       	cpc	r22, r1
    3040:	71 05       	cpc	r23, r1
    3042:	21 f4       	brne	.+8      	; 0x304c <VL53L0X_GetMeasurementDataReady+0x42>
    3044:	91 e0       	ldi	r25, 0x01	; 1
    3046:	f8 01       	movw	r30, r16
    3048:	90 83       	st	Z, r25
    304a:	14 c0       	rjmp	.+40     	; 0x3074 <VL53L0X_GetMeasurementDataReady+0x6a>
    304c:	f8 01       	movw	r30, r16
    304e:	10 82       	st	Z, r1
    3050:	11 c0       	rjmp	.+34     	; 0x3074 <VL53L0X_GetMeasurementDataReady+0x6a>
    3052:	ae 01       	movw	r20, r28
    3054:	4f 5f       	subi	r20, 0xFF	; 255
    3056:	5f 4f       	sbci	r21, 0xFF	; 255
    3058:	64 e1       	ldi	r22, 0x14	; 20
    305a:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    305e:	81 11       	cpse	r24, r1
    3060:	09 c0       	rjmp	.+18     	; 0x3074 <VL53L0X_GetMeasurementDataReady+0x6a>
    3062:	99 81       	ldd	r25, Y+1	; 0x01
    3064:	90 ff       	sbrs	r25, 0
    3066:	04 c0       	rjmp	.+8      	; 0x3070 <VL53L0X_GetMeasurementDataReady+0x66>
    3068:	91 e0       	ldi	r25, 0x01	; 1
    306a:	f8 01       	movw	r30, r16
    306c:	90 83       	st	Z, r25
    306e:	02 c0       	rjmp	.+4      	; 0x3074 <VL53L0X_GetMeasurementDataReady+0x6a>
    3070:	f8 01       	movw	r30, r16
    3072:	10 82       	st	Z, r1
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	0f 90       	pop	r0
    307c:	0f 90       	pop	r0
    307e:	df 91       	pop	r29
    3080:	cf 91       	pop	r28
    3082:	1f 91       	pop	r17
    3084:	0f 91       	pop	r16
    3086:	08 95       	ret

00003088 <VL53L0X_SetReferenceSpads>:
    3088:	76 c3       	rjmp	.+1772   	; 0x3776 <VL53L0X_set_reference_spads>
    308a:	08 95       	ret

0000308c <VL53L0X_GetReferenceSpads>:
    308c:	1c c4       	rjmp	.+2104   	; 0x38c6 <VL53L0X_get_reference_spads>
    308e:	08 95       	ret

00003090 <VL53L0X_set_offset_calibration_data_micro_meter>:
					CorrectedOffsetMicroMeters);
		}
	}

	return Status;
}
    3090:	cf 93       	push	r28
    3092:	df 93       	push	r29
    3094:	ec 01       	movw	r28, r24
    3096:	41 15       	cp	r20, r1
    3098:	20 e3       	ldi	r18, 0x30	; 48
    309a:	52 07       	cpc	r21, r18
    309c:	28 ef       	ldi	r18, 0xF8	; 248
    309e:	62 07       	cpc	r22, r18
    30a0:	2f ef       	ldi	r18, 0xFF	; 255
    30a2:	72 07       	cpc	r23, r18
    30a4:	24 f4       	brge	.+8      	; 0x30ae <VL53L0X_set_offset_calibration_data_micro_meter+0x1e>
    30a6:	40 e0       	ldi	r20, 0x00	; 0
    30a8:	50 e3       	ldi	r21, 0x30	; 48
    30aa:	68 ef       	ldi	r22, 0xF8	; 248
    30ac:	7f ef       	ldi	r23, 0xFF	; 255
    30ae:	cb 01       	movw	r24, r22
    30b0:	ba 01       	movw	r22, r20
    30b2:	69 31       	cpi	r22, 0x19	; 25
    30b4:	2c ec       	ldi	r18, 0xCC	; 204
    30b6:	72 07       	cpc	r23, r18
    30b8:	27 e0       	ldi	r18, 0x07	; 7
    30ba:	82 07       	cpc	r24, r18
    30bc:	91 05       	cpc	r25, r1
    30be:	24 f0       	brlt	.+8      	; 0x30c8 <VL53L0X_set_offset_calibration_data_micro_meter+0x38>
    30c0:	68 e1       	ldi	r22, 0x18	; 24
    30c2:	7c ec       	ldi	r23, 0xCC	; 204
    30c4:	87 e0       	ldi	r24, 0x07	; 7
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	99 23       	and	r25, r25
    30ca:	3c f0       	brlt	.+14     	; 0x30da <VL53L0X_set_offset_calibration_data_micro_meter+0x4a>
    30cc:	2a ef       	ldi	r18, 0xFA	; 250
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e0       	ldi	r20, 0x00	; 0
    30d2:	50 e0       	ldi	r21, 0x00	; 0
    30d4:	0e 94 04 33 	call	0x6608	; 0x6608 <__divmodsi4>
    30d8:	09 c0       	rjmp	.+18     	; 0x30ec <VL53L0X_set_offset_calibration_data_micro_meter+0x5c>
    30da:	2a ef       	ldi	r18, 0xFA	; 250
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e0       	ldi	r20, 0x00	; 0
    30e0:	50 e0       	ldi	r21, 0x00	; 0
    30e2:	0e 94 04 33 	call	0x6608	; 0x6608 <__divmodsi4>
    30e6:	30 5f       	subi	r19, 0xF0	; 240
    30e8:	4f 4f       	sbci	r20, 0xFF	; 255
    30ea:	5f 4f       	sbci	r21, 0xFF	; 255
    30ec:	a9 01       	movw	r20, r18
    30ee:	68 e2       	ldi	r22, 0x28	; 40
    30f0:	ce 01       	movw	r24, r28
    30f2:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    30f6:	df 91       	pop	r29
    30f8:	cf 91       	pop	r28
    30fa:	08 95       	ret

000030fc <VL53L0X_get_offset_calibration_data_micro_meter>:
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	00 d0       	rcall	.+0      	; 0x3106 <VL53L0X_get_offset_calibration_data_micro_meter+0xa>
    3106:	cd b7       	in	r28, 0x3d	; 61
    3108:	de b7       	in	r29, 0x3e	; 62
    310a:	8b 01       	movw	r16, r22
    310c:	ae 01       	movw	r20, r28
    310e:	4f 5f       	subi	r20, 0xFF	; 255
    3110:	5f 4f       	sbci	r21, 0xFF	; 255
    3112:	68 e2       	ldi	r22, 0x28	; 40
    3114:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    3118:	81 11       	cpse	r24, r1
    311a:	27 c0       	rjmp	.+78     	; 0x316a <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    311c:	29 81       	ldd	r18, Y+1	; 0x01
    311e:	3a 81       	ldd	r19, Y+2	; 0x02
    3120:	3f 70       	andi	r19, 0x0F	; 15
    3122:	21 15       	cp	r18, r1
    3124:	98 e0       	ldi	r25, 0x08	; 8
    3126:	39 07       	cpc	r19, r25
    3128:	88 f0       	brcs	.+34     	; 0x314c <VL53L0X_get_offset_calibration_data_micro_meter+0x50>
    312a:	30 51       	subi	r19, 0x10	; 16
    312c:	9a ef       	ldi	r25, 0xFA	; 250
    312e:	92 9f       	mul	r25, r18
    3130:	a0 01       	movw	r20, r0
    3132:	93 9f       	mul	r25, r19
    3134:	50 0d       	add	r21, r0
    3136:	11 24       	eor	r1, r1
    3138:	05 2e       	mov	r0, r21
    313a:	00 0c       	add	r0, r0
    313c:	66 0b       	sbc	r22, r22
    313e:	77 0b       	sbc	r23, r23
    3140:	f8 01       	movw	r30, r16
    3142:	40 83       	st	Z, r20
    3144:	51 83       	std	Z+1, r21	; 0x01
    3146:	62 83       	std	Z+2, r22	; 0x02
    3148:	73 83       	std	Z+3, r23	; 0x03
    314a:	0f c0       	rjmp	.+30     	; 0x316a <VL53L0X_get_offset_calibration_data_micro_meter+0x6e>
    314c:	9a ef       	ldi	r25, 0xFA	; 250
    314e:	92 9f       	mul	r25, r18
    3150:	a0 01       	movw	r20, r0
    3152:	93 9f       	mul	r25, r19
    3154:	50 0d       	add	r21, r0
    3156:	11 24       	eor	r1, r1
    3158:	05 2e       	mov	r0, r21
    315a:	00 0c       	add	r0, r0
    315c:	66 0b       	sbc	r22, r22
    315e:	77 0b       	sbc	r23, r23
    3160:	f8 01       	movw	r30, r16
    3162:	40 83       	st	Z, r20
    3164:	51 83       	std	Z+1, r21	; 0x01
    3166:	62 83       	std	Z+2, r22	; 0x02
    3168:	73 83       	std	Z+3, r23	; 0x03
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	df 91       	pop	r29
    3170:	cf 91       	pop	r28
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	08 95       	ret

00003178 <get_next_good_spad>:

void get_next_good_spad(u8 goodSpadArray[], u32 size,
			u32 curr, s32 *next)
{
    3178:	7f 92       	push	r7
    317a:	8f 92       	push	r8
    317c:	9f 92       	push	r9
    317e:	af 92       	push	r10
    3180:	bf 92       	push	r11
    3182:	cf 92       	push	r12
    3184:	df 92       	push	r13
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	cf 93       	push	r28
    3190:	df 93       	push	r29
    3192:	e7 01       	movw	r28, r14
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
    3194:	cc 24       	eor	r12, r12
    3196:	ca 94       	dec	r12
    3198:	dc 2c       	mov	r13, r12
    319a:	76 01       	movw	r14, r12
    319c:	c8 82       	st	Y, r12
    319e:	d9 82       	std	Y+1, r13	; 0x01
    31a0:	ea 82       	std	Y+2, r14	; 0x02
    31a2:	fb 82       	std	Y+3, r15	; 0x03

	startIndex = curr / cSpadsPerByte;
    31a4:	68 01       	movw	r12, r16
    31a6:	79 01       	movw	r14, r18
    31a8:	68 94       	set
    31aa:	12 f8       	bld	r1, 2
    31ac:	f6 94       	lsr	r15
    31ae:	e7 94       	ror	r14
    31b0:	d7 94       	ror	r13
    31b2:	c7 94       	ror	r12
    31b4:	16 94       	lsr	r1
    31b6:	d1 f7       	brne	.-12     	; 0x31ac <get_next_good_spad+0x34>
	fineOffset = curr % cSpadsPerByte;
    31b8:	48 01       	movw	r8, r16
    31ba:	59 01       	movw	r10, r18
    31bc:	e7 e0       	ldi	r30, 0x07	; 7
    31be:	8e 22       	and	r8, r30
    31c0:	99 24       	eor	r9, r9
    31c2:	aa 24       	eor	r10, r10
    31c4:	bb 24       	eor	r11, r11

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
    31c6:	c4 16       	cp	r12, r20
    31c8:	d5 06       	cpc	r13, r21
    31ca:	e6 06       	cpc	r14, r22
    31cc:	f7 06       	cpc	r15, r23
    31ce:	08 f0       	brcs	.+2      	; 0x31d2 <get_next_good_spad+0x5a>
    31d0:	47 c0       	rjmp	.+142    	; 0x3260 <get_next_good_spad+0xe8>
    31d2:	fc 01       	movw	r30, r24
    31d4:	ec 0d       	add	r30, r12
    31d6:	fd 1d       	adc	r31, r13
    31d8:	d7 01       	movw	r26, r14
    31da:	c6 01       	movw	r24, r12
				coarseIndex++) {
		fineIndex = 0;
		dataByte = goodSpadArray[coarseIndex];
    31dc:	71 90       	ld	r7, Z+

		if (coarseIndex == startIndex) {
    31de:	c8 16       	cp	r12, r24
    31e0:	d9 06       	cpc	r13, r25
    31e2:	ea 06       	cpc	r14, r26
    31e4:	fb 06       	cpc	r15, r27
    31e6:	61 f4       	brne	.+24     	; 0x3200 <get_next_good_spad+0x88>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
    31e8:	27 2d       	mov	r18, r7
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	08 2c       	mov	r0, r8
    31ee:	02 c0       	rjmp	.+4      	; 0x31f4 <get_next_good_spad+0x7c>
    31f0:	35 95       	asr	r19
    31f2:	27 95       	ror	r18
    31f4:	0a 94       	dec	r0
    31f6:	e2 f7       	brpl	.-8      	; 0x31f0 <get_next_good_spad+0x78>
    31f8:	72 2e       	mov	r7, r18
			fineIndex = fineOffset;
    31fa:	95 01       	movw	r18, r10
    31fc:	84 01       	movw	r16, r8
    31fe:	03 c0       	rjmp	.+6      	; 0x3206 <get_next_good_spad+0x8e>
	startIndex = curr / cSpadsPerByte;
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
				coarseIndex++) {
		fineIndex = 0;
    3200:	00 e0       	ldi	r16, 0x00	; 0
    3202:	10 e0       	ldi	r17, 0x00	; 0
    3204:	98 01       	movw	r18, r16
			dataByte >>= fineOffset;
			fineIndex = fineOffset;
		}

		while (fineIndex < cSpadsPerByte) {
			if ((dataByte & 0x1) == 1) {
    3206:	70 fe       	sbrs	r7, 0
    3208:	18 c0       	rjmp	.+48     	; 0x323a <get_next_good_spad+0xc2>
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <get_next_good_spad+0x98>
    320c:	70 fe       	sbrs	r7, 0
    320e:	15 c0       	rjmp	.+42     	; 0x323a <get_next_good_spad+0xc2>
				success = 1;
				*next = coarseIndex * cSpadsPerByte + fineIndex;
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	aa 1f       	adc	r26, r26
    3216:	bb 1f       	adc	r27, r27
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	aa 1f       	adc	r26, r26
    321e:	bb 1f       	adc	r27, r27
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	aa 1f       	adc	r26, r26
    3226:	bb 1f       	adc	r27, r27
    3228:	08 0f       	add	r16, r24
    322a:	19 1f       	adc	r17, r25
    322c:	2a 1f       	adc	r18, r26
    322e:	3b 1f       	adc	r19, r27
    3230:	08 83       	st	Y, r16
    3232:	19 83       	std	Y+1, r17	; 0x01
    3234:	2a 83       	std	Y+2, r18	; 0x02
    3236:	3b 83       	std	Y+3, r19	; 0x03
    3238:	13 c0       	rjmp	.+38     	; 0x3260 <get_next_good_spad+0xe8>
				break;
			}
			dataByte >>= 1;
    323a:	76 94       	lsr	r7
			fineIndex++;
    323c:	0f 5f       	subi	r16, 0xFF	; 255
    323e:	1f 4f       	sbci	r17, 0xFF	; 255
    3240:	2f 4f       	sbci	r18, 0xFF	; 255
    3242:	3f 4f       	sbci	r19, 0xFF	; 255
			 * spad bit before iterating */
			dataByte >>= fineOffset;
			fineIndex = fineOffset;
		}

		while (fineIndex < cSpadsPerByte) {
    3244:	08 30       	cpi	r16, 0x08	; 8
    3246:	11 05       	cpc	r17, r1
    3248:	21 05       	cpc	r18, r1
    324a:	31 05       	cpc	r19, r1
    324c:	f8 f2       	brcs	.-66     	; 0x320c <get_next_good_spad+0x94>

	startIndex = curr / cSpadsPerByte;
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
				coarseIndex++) {
    324e:	01 96       	adiw	r24, 0x01	; 1
    3250:	a1 1d       	adc	r26, r1
    3252:	b1 1d       	adc	r27, r1
	*next = -1;

	startIndex = curr / cSpadsPerByte;
	fineOffset = curr % cSpadsPerByte;

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
    3254:	84 17       	cp	r24, r20
    3256:	95 07       	cpc	r25, r21
    3258:	a6 07       	cpc	r26, r22
    325a:	b7 07       	cpc	r27, r23
    325c:	08 f4       	brcc	.+2      	; 0x3260 <get_next_good_spad+0xe8>
    325e:	be cf       	rjmp	.-132    	; 0x31dc <get_next_good_spad+0x64>
			}
			dataByte >>= 1;
			fineIndex++;
		}
	}
}
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	df 90       	pop	r13
    326e:	cf 90       	pop	r12
    3270:	bf 90       	pop	r11
    3272:	af 90       	pop	r10
    3274:	9f 90       	pop	r9
    3276:	8f 90       	pop	r8
    3278:	7f 90       	pop	r7
    327a:	08 95       	ret

0000327c <is_aperture>:
	 * deriving the quadrant.
	 */
	u32 quadrant;
	u8 isAperture = 1;
	quadrant = spadIndex >> 6;
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	68 94       	set
    3282:	15 f8       	bld	r1, 5
    3284:	b6 95       	lsr	r27
    3286:	a7 95       	ror	r26
    3288:	97 95       	ror	r25
    328a:	87 95       	ror	r24
    328c:	16 94       	lsr	r1
    328e:	d1 f7       	brne	.-12     	; 0x3284 <is_aperture+0x8>
    3290:	bc 01       	movw	r22, r24
    3292:	66 0f       	add	r22, r22
    3294:	77 1f       	adc	r23, r23
    3296:	66 0f       	add	r22, r22
    3298:	77 1f       	adc	r23, r23
    329a:	fb 01       	movw	r30, r22
    329c:	e7 55       	subi	r30, 0x57	; 87
    329e:	fc 4f       	sbci	r31, 0xFC	; 252
		isAperture = 0;

	return isAperture;
    32a0:	81 e0       	ldi	r24, 0x01	; 1
    32a2:	40 81       	ld	r20, Z
    32a4:	51 81       	ldd	r21, Z+1	; 0x01
    32a6:	62 81       	ldd	r22, Z+2	; 0x02
    32a8:	73 81       	ldd	r23, Z+3	; 0x03
    32aa:	45 2b       	or	r20, r21
    32ac:	46 2b       	or	r20, r22
    32ae:	47 2b       	or	r20, r23
    32b0:	09 f4       	brne	.+2      	; 0x32b4 <is_aperture+0x38>
    32b2:	80 e0       	ldi	r24, 0x00	; 0
}
    32b4:	08 95       	ret

000032b6 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(u8 spadArray[], u32 size,
	u32 spadIndex)
{
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	u32 cSpadsPerByte = 8;
	u32 coarseIndex;
	u32 fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
    32c2:	68 01       	movw	r12, r16
    32c4:	79 01       	movw	r14, r18
    32c6:	68 94       	set
    32c8:	12 f8       	bld	r1, 2
    32ca:	f6 94       	lsr	r15
    32cc:	e7 94       	ror	r14
    32ce:	d7 94       	ror	r13
    32d0:	c7 94       	ror	r12
    32d2:	16 94       	lsr	r1
    32d4:	d1 f7       	brne	.-12     	; 0x32ca <enable_spad_bit+0x14>
	fineIndex = spadIndex % cSpadsPerByte;
    32d6:	07 70       	andi	r16, 0x07	; 7
    32d8:	11 27       	eor	r17, r17
    32da:	22 27       	eor	r18, r18
    32dc:	33 27       	eor	r19, r19
	if (coarseIndex >= size)
    32de:	c4 16       	cp	r12, r20
    32e0:	d5 06       	cpc	r13, r21
    32e2:	e6 06       	cpc	r14, r22
    32e4:	f7 06       	cpc	r15, r23
    32e6:	78 f4       	brcc	.+30     	; 0x3306 <enable_spad_bit+0x50>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
    32e8:	fc 01       	movw	r30, r24
    32ea:	ec 0d       	add	r30, r12
    32ec:	fd 1d       	adc	r31, r13
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <enable_spad_bit+0x42>
    32f4:	88 0f       	add	r24, r24
    32f6:	99 1f       	adc	r25, r25
    32f8:	0a 95       	dec	r16
    32fa:	e2 f7       	brpl	.-8      	; 0x32f4 <enable_spad_bit+0x3e>
    32fc:	90 81       	ld	r25, Z
    32fe:	89 2b       	or	r24, r25
    3300:	80 83       	st	Z, r24


VL53L0X_Error enable_spad_bit(u8 spadArray[], u32 size,
	u32 spadIndex)
{
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	01 c0       	rjmp	.+2      	; 0x3308 <enable_spad_bit+0x52>
	u32 fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
	fineIndex = spadIndex % cSpadsPerByte;
	if (coarseIndex >= size)
		status = VL53L0X_ERROR_REF_SPAD_INIT;
    3306:	8e ec       	ldi	r24, 0xCE	; 206
	else
		spadArray[coarseIndex] |= (1 << fineIndex);

	return status;
}
    3308:	1f 91       	pop	r17
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	df 90       	pop	r13
    3312:	cf 90       	pop	r12
    3314:	08 95       	ret

00003316 <count_enabled_spads>:

VL53L0X_Error count_enabled_spads(u8 spadArray[],
		u32 byteCount, u32 maxSpads,
		u32 *pTotalSpadsEnabled, u8 *pIsAperture)
{
    3316:	2f 92       	push	r2
    3318:	3f 92       	push	r3
    331a:	4f 92       	push	r4
    331c:	5f 92       	push	r5
    331e:	6f 92       	push	r6
    3320:	7f 92       	push	r7
    3322:	8f 92       	push	r8
    3324:	9f 92       	push	r9
    3326:	af 92       	push	r10
    3328:	bf 92       	push	r11
    332a:	cf 92       	push	r12
    332c:	df 92       	push	r13
    332e:	ef 92       	push	r14
    3330:	ff 92       	push	r15
    3332:	0f 93       	push	r16
    3334:	1f 93       	push	r17
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	2b 97       	sbiw	r28, 0x0b	; 11
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
    334a:	9e 83       	std	Y+6, r25	; 0x06
    334c:	8d 83       	std	Y+5, r24	; 0x05
    334e:	f7 01       	movw	r30, r14
    3350:	d9 86       	std	Y+9, r13	; 0x09
    3352:	c8 86       	std	Y+8, r12	; 0x08

	/* The entire array will not be used for spads, therefore the last
	 * byte and last bit is determined from the max spads value.
	 */

	lastByte = maxSpads / cSpadsPerByte;
    3354:	d9 01       	movw	r26, r18
    3356:	c8 01       	movw	r24, r16
    3358:	68 94       	set
    335a:	12 f8       	bld	r1, 2
    335c:	b6 95       	lsr	r27
    335e:	a7 95       	ror	r26
    3360:	97 95       	ror	r25
    3362:	87 95       	ror	r24
    3364:	16 94       	lsr	r1
    3366:	d1 f7       	brne	.-12     	; 0x335c <count_enabled_spads+0x46>
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	9a 83       	std	Y+2, r25	; 0x02
    336c:	ab 83       	std	Y+3, r26	; 0x03
    336e:	bc 83       	std	Y+4, r27	; 0x04
	lastBit = maxSpads % cSpadsPerByte;
    3370:	28 01       	movw	r4, r16
    3372:	39 01       	movw	r6, r18
    3374:	97 e0       	ldi	r25, 0x07	; 7
    3376:	49 22       	and	r4, r25
    3378:	55 24       	eor	r5, r5
    337a:	66 24       	eor	r6, r6
    337c:	77 24       	eor	r7, r7

	/* Check that the max spads value does not exceed the array bounds. */
	if (lastByte >= byteCount)
    337e:	89 81       	ldd	r24, Y+1	; 0x01
    3380:	9a 81       	ldd	r25, Y+2	; 0x02
    3382:	ab 81       	ldd	r26, Y+3	; 0x03
    3384:	bc 81       	ldd	r27, Y+4	; 0x04
    3386:	84 17       	cp	r24, r20
    3388:	95 07       	cpc	r25, r21
    338a:	a6 07       	cpc	r26, r22
    338c:	b7 07       	cpc	r27, r23
    338e:	18 f0       	brcs	.+6      	; 0x3396 <count_enabled_spads+0x80>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
    3390:	9e ec       	ldi	r25, 0xCE	; 206
    3392:	9f 83       	std	Y+7, r25	; 0x07
    3394:	01 c0       	rjmp	.+2      	; 0x3398 <count_enabled_spads+0x82>

VL53L0X_Error count_enabled_spads(u8 spadArray[],
		u32 byteCount, u32 maxSpads,
		u32 *pTotalSpadsEnabled, u8 *pIsAperture)
{
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
    3396:	1f 82       	std	Y+7, r1	; 0x07

	/* Check that the max spads value does not exceed the array bounds. */
	if (lastByte >= byteCount)
		status = VL53L0X_ERROR_REF_SPAD_INIT;

	*pTotalSpadsEnabled = 0;
    3398:	10 82       	st	Z, r1
    339a:	11 82       	std	Z+1, r1	; 0x01
    339c:	12 82       	std	Z+2, r1	; 0x02
    339e:	13 82       	std	Z+3, r1	; 0x03

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
    33a0:	89 80       	ldd	r8, Y+1	; 0x01
    33a2:	9a 80       	ldd	r9, Y+2	; 0x02
    33a4:	ab 80       	ldd	r10, Y+3	; 0x03
    33a6:	bc 80       	ldd	r11, Y+4	; 0x04
    33a8:	a1 e0       	ldi	r26, 0x01	; 1
    33aa:	8a 1a       	sub	r8, r26
    33ac:	91 08       	sbc	r9, r1
    33ae:	a1 08       	sbc	r10, r1
    33b0:	b1 08       	sbc	r11, r1
    33b2:	2d 80       	ldd	r2, Y+5	; 0x05
    33b4:	3e 80       	ldd	r3, Y+6	; 0x06
	u32 lastByte;
	u32 lastBit;
	u32 byteIndex = 0;
	u32 bitIndex = 0;
	u8 tempByte;
	u8 spadTypeIdentified = 0;
    33b6:	30 e0       	ldi	r19, 0x00	; 0
		status = VL53L0X_ERROR_REF_SPAD_INIT;

	*pTotalSpadsEnabled = 0;

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
    33b8:	c1 2c       	mov	r12, r1
    33ba:	d1 2c       	mov	r13, r1
    33bc:	76 01       	movw	r14, r12
		for (bitIndex = 0; bitIndex <= cSpadsPerByte; bitIndex++) {
			if ((tempByte & 0x01) == 1) {
				(*pTotalSpadsEnabled)++;

				if (!spadTypeIdentified) {
					*pIsAperture = 1;
    33be:	11 e0       	ldi	r17, 0x01	; 1
    33c0:	01 2f       	mov	r16, r17
    33c2:	68 85       	ldd	r22, Y+8	; 0x08
    33c4:	79 85       	ldd	r23, Y+9	; 0x09

	*pTotalSpadsEnabled = 0;

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
		tempByte = spadArray[byteIndex];
    33c6:	d1 01       	movw	r26, r2
    33c8:	2d 91       	ld	r18, X+
    33ca:	1d 01       	movw	r2, r26

		for (bitIndex = 0; bitIndex <= cSpadsPerByte; bitIndex++) {
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	90 e0       	ldi	r25, 0x00	; 0
    33d0:	dc 01       	movw	r26, r24
    33d2:	fb 87       	std	Y+11, r31	; 0x0b
    33d4:	ea 87       	std	Y+10, r30	; 0x0a
    33d6:	79 87       	std	Y+9, r23	; 0x09
    33d8:	68 87       	std	Y+8, r22	; 0x08
			if ((tempByte & 0x01) == 1) {
    33da:	20 ff       	sbrs	r18, 0
    33dc:	26 c0       	rjmp	.+76     	; 0x342a <count_enabled_spads+0x114>
				(*pTotalSpadsEnabled)++;
    33de:	ea 85       	ldd	r30, Y+10	; 0x0a
    33e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    33e2:	40 81       	ld	r20, Z
    33e4:	51 81       	ldd	r21, Z+1	; 0x01
    33e6:	62 81       	ldd	r22, Z+2	; 0x02
    33e8:	73 81       	ldd	r23, Z+3	; 0x03
    33ea:	4f 5f       	subi	r20, 0xFF	; 255
    33ec:	5f 4f       	sbci	r21, 0xFF	; 255
    33ee:	6f 4f       	sbci	r22, 0xFF	; 255
    33f0:	7f 4f       	sbci	r23, 0xFF	; 255
    33f2:	40 83       	st	Z, r20
    33f4:	51 83       	std	Z+1, r21	; 0x01
    33f6:	62 83       	std	Z+2, r22	; 0x02
    33f8:	73 83       	std	Z+3, r23	; 0x03

				if (!spadTypeIdentified) {
    33fa:	31 11       	cpse	r19, r1
    33fc:	16 c0       	rjmp	.+44     	; 0x342a <count_enabled_spads+0x114>
					*pIsAperture = 1;
    33fe:	e8 85       	ldd	r30, Y+8	; 0x08
    3400:	f9 85       	ldd	r31, Y+9	; 0x09
    3402:	10 83       	st	Z, r17
					if ((byteIndex < 2) && (bitIndex < 4))
    3404:	f2 e0       	ldi	r31, 0x02	; 2
    3406:	cf 16       	cp	r12, r31
    3408:	d1 04       	cpc	r13, r1
    340a:	e1 04       	cpc	r14, r1
    340c:	f1 04       	cpc	r15, r1
    340e:	50 f4       	brcc	.+20     	; 0x3424 <count_enabled_spads+0x10e>
    3410:	84 30       	cpi	r24, 0x04	; 4
    3412:	91 05       	cpc	r25, r1
    3414:	a1 05       	cpc	r26, r1
    3416:	b1 05       	cpc	r27, r1
    3418:	38 f4       	brcc	.+14     	; 0x3428 <count_enabled_spads+0x112>
							*pIsAperture = 0;
    341a:	e8 85       	ldd	r30, Y+8	; 0x08
    341c:	f9 85       	ldd	r31, Y+9	; 0x09
    341e:	10 82       	st	Z, r1
					spadTypeIdentified = 1;
    3420:	30 2f       	mov	r19, r16
    3422:	03 c0       	rjmp	.+6      	; 0x342a <count_enabled_spads+0x114>
    3424:	30 2f       	mov	r19, r16
    3426:	01 c0       	rjmp	.+2      	; 0x342a <count_enabled_spads+0x114>
    3428:	30 2f       	mov	r19, r16
				}
			}
			tempByte >>= 1;
    342a:	26 95       	lsr	r18

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
		tempByte = spadArray[byteIndex];

		for (bitIndex = 0; bitIndex <= cSpadsPerByte; bitIndex++) {
    342c:	01 96       	adiw	r24, 0x01	; 1
    342e:	a1 1d       	adc	r26, r1
    3430:	b1 1d       	adc	r27, r1
    3432:	89 30       	cpi	r24, 0x09	; 9
    3434:	91 05       	cpc	r25, r1
    3436:	a1 05       	cpc	r26, r1
    3438:	b1 05       	cpc	r27, r1
    343a:	79 f6       	brne	.-98     	; 0x33da <count_enabled_spads+0xc4>
    343c:	ea 85       	ldd	r30, Y+10	; 0x0a
    343e:	fb 85       	ldd	r31, Y+11	; 0x0b
    3440:	68 85       	ldd	r22, Y+8	; 0x08
    3442:	79 85       	ldd	r23, Y+9	; 0x09
		status = VL53L0X_ERROR_REF_SPAD_INIT;

	*pTotalSpadsEnabled = 0;

	/* Count the bits enabled in the whole bytes */
	for (byteIndex = 0; byteIndex <= (lastByte - 1); byteIndex++) {
    3444:	4f ef       	ldi	r20, 0xFF	; 255
    3446:	c4 1a       	sub	r12, r20
    3448:	d4 0a       	sbc	r13, r20
    344a:	e4 0a       	sbc	r14, r20
    344c:	f4 0a       	sbc	r15, r20
    344e:	8c 14       	cp	r8, r12
    3450:	9d 04       	cpc	r9, r13
    3452:	ae 04       	cpc	r10, r14
    3454:	bf 04       	cpc	r11, r15
    3456:	08 f0       	brcs	.+2      	; 0x345a <count_enabled_spads+0x144>
    3458:	b6 cf       	rjmp	.-148    	; 0x33c6 <count_enabled_spads+0xb0>
	}

	/* Count the number of bits enabled in the last byte accounting
	 * for the fact that not all bits in the byte may be used.
	 */
	tempByte = spadArray[lastByte];
    345a:	ad 81       	ldd	r26, Y+5	; 0x05
    345c:	be 81       	ldd	r27, Y+6	; 0x06
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	9a 81       	ldd	r25, Y+2	; 0x02
    3462:	a8 0f       	add	r26, r24
    3464:	b9 1f       	adc	r27, r25
    3466:	2c 91       	ld	r18, X

	for (bitIndex = 0; bitIndex <= lastBit; bitIndex++) {
    3468:	80 e0       	ldi	r24, 0x00	; 0
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	dc 01       	movw	r26, r24
		if ((tempByte & 0x01) == 1)
    346e:	21 70       	andi	r18, 0x01	; 1
    3470:	22 23       	and	r18, r18
    3472:	61 f0       	breq	.+24     	; 0x348c <count_enabled_spads+0x176>
			(*pTotalSpadsEnabled)++;
    3474:	40 81       	ld	r20, Z
    3476:	51 81       	ldd	r21, Z+1	; 0x01
    3478:	62 81       	ldd	r22, Z+2	; 0x02
    347a:	73 81       	ldd	r23, Z+3	; 0x03
    347c:	4f 5f       	subi	r20, 0xFF	; 255
    347e:	5f 4f       	sbci	r21, 0xFF	; 255
    3480:	6f 4f       	sbci	r22, 0xFF	; 255
    3482:	7f 4f       	sbci	r23, 0xFF	; 255
    3484:	40 83       	st	Z, r20
    3486:	51 83       	std	Z+1, r21	; 0x01
    3488:	62 83       	std	Z+2, r22	; 0x02
    348a:	73 83       	std	Z+3, r23	; 0x03
	/* Count the number of bits enabled in the last byte accounting
	 * for the fact that not all bits in the byte may be used.
	 */
	tempByte = spadArray[lastByte];

	for (bitIndex = 0; bitIndex <= lastBit; bitIndex++) {
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	a1 1d       	adc	r26, r1
    3490:	b1 1d       	adc	r27, r1
    3492:	48 16       	cp	r4, r24
    3494:	59 06       	cpc	r5, r25
    3496:	6a 06       	cpc	r6, r26
    3498:	7b 06       	cpc	r7, r27
    349a:	50 f7       	brcc	.-44     	; 0x3470 <count_enabled_spads+0x15a>
		if ((tempByte & 0x01) == 1)
			(*pTotalSpadsEnabled)++;
	}

	return status;
}
    349c:	8f 81       	ldd	r24, Y+7	; 0x07
    349e:	2b 96       	adiw	r28, 0x0b	; 11
    34a0:	0f b6       	in	r0, 0x3f	; 63
    34a2:	f8 94       	cli
    34a4:	de bf       	out	0x3e, r29	; 62
    34a6:	0f be       	out	0x3f, r0	; 63
    34a8:	cd bf       	out	0x3d, r28	; 61
    34aa:	df 91       	pop	r29
    34ac:	cf 91       	pop	r28
    34ae:	1f 91       	pop	r17
    34b0:	0f 91       	pop	r16
    34b2:	ff 90       	pop	r15
    34b4:	ef 90       	pop	r14
    34b6:	df 90       	pop	r13
    34b8:	cf 90       	pop	r12
    34ba:	bf 90       	pop	r11
    34bc:	af 90       	pop	r10
    34be:	9f 90       	pop	r9
    34c0:	8f 90       	pop	r8
    34c2:	7f 90       	pop	r7
    34c4:	6f 90       	pop	r6
    34c6:	5f 90       	pop	r5
    34c8:	4f 90       	pop	r4
    34ca:	3f 90       	pop	r3
    34cc:	2f 90       	pop	r2
    34ce:	08 95       	ret

000034d0 <set_ref_spad_map>:

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, u8 *refSpadArray)
{
    34d0:	0f 93       	push	r16
    34d2:	1f 93       	push	r17
    34d4:	ab 01       	movw	r20, r22
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
    34d6:	06 e0       	ldi	r16, 0x06	; 6
    34d8:	10 e0       	ldi	r17, 0x00	; 0
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	60 eb       	ldi	r22, 0xB0	; 176
    34e0:	0e 94 cb 31 	call	0x6396	; 0x6396 <VL53L0X_WriteMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
}
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	08 95       	ret

000034ea <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, u8 *refSpadArray)
{
    34ea:	0f 93       	push	r16
    34ec:	1f 93       	push	r17
    34ee:	ab 01       	movw	r20, r22
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
    34f0:	06 e0       	ldi	r16, 0x06	; 6
    34f2:	10 e0       	ldi	r17, 0x00	; 0
    34f4:	20 e0       	ldi	r18, 0x00	; 0
    34f6:	30 e0       	ldi	r19, 0x00	; 0
    34f8:	60 eb       	ldi	r22, 0xB0	; 176
    34fa:	0e 94 e4 31 	call	0x63c8	; 0x63c8 <VL53L0X_ReadMulti>
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
}
    34fe:	1f 91       	pop	r17
    3500:	0f 91       	pop	r16
    3502:	08 95       	ret

00003504 <enable_ref_spads>:
				u32 size,
				u32 start,
				u32 offset,
				u32 spadCount,
				u32 *lastSpad)
{
    3504:	3f 92       	push	r3
    3506:	4f 92       	push	r4
    3508:	5f 92       	push	r5
    350a:	6f 92       	push	r6
    350c:	7f 92       	push	r7
    350e:	8f 92       	push	r8
    3510:	9f 92       	push	r9
    3512:	af 92       	push	r10
    3514:	bf 92       	push	r11
    3516:	cf 92       	push	r12
    3518:	df 92       	push	r13
    351a:	ef 92       	push	r14
    351c:	ff 92       	push	r15
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	cf 93       	push	r28
    3524:	df 93       	push	r29
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
    352a:	64 97       	sbiw	r28, 0x14	; 20
    352c:	0f b6       	in	r0, 0x3f	; 63
    352e:	f8 94       	cli
    3530:	de bf       	out	0x3e, r29	; 62
    3532:	0f be       	out	0x3f, r0	; 63
    3534:	cd bf       	out	0x3d, r28	; 61
    3536:	9c 8b       	std	Y+20, r25	; 0x14
    3538:	8b 8b       	std	Y+19, r24	; 0x13
    353a:	36 2e       	mov	r3, r22
    353c:	5a 8b       	std	Y+18, r21	; 0x12
    353e:	49 8b       	std	Y+17, r20	; 0x11
    3540:	38 8b       	std	Y+16, r19	; 0x10
    3542:	2f 87       	std	Y+15, r18	; 0x0f
    3544:	eb 86       	std	Y+11, r14	; 0x0b
    3546:	fc 86       	std	Y+12, r15	; 0x0c
    3548:	0d 87       	std	Y+13, r16	; 0x0d
    354a:	1e 87       	std	Y+14, r17	; 0x0e
    354c:	25 01       	movw	r4, r10
    354e:	36 01       	movw	r6, r12
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
	u32 index;
	u32 i;
	s32 nextGoodSpad = offset;
    3550:	28 a5       	ldd	r18, Y+40	; 0x28
    3552:	39 a5       	ldd	r19, Y+41	; 0x29
    3554:	4a a5       	ldd	r20, Y+42	; 0x2a
    3556:	5b a5       	ldd	r21, Y+43	; 0x2b
    3558:	29 83       	std	Y+1, r18	; 0x01
    355a:	3a 83       	std	Y+2, r19	; 0x02
    355c:	4b 83       	std	Y+3, r20	; 0x03
    355e:	5c 83       	std	Y+4, r21	; 0x04
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
    3560:	8c a5       	ldd	r24, Y+44	; 0x2c
    3562:	9d a5       	ldd	r25, Y+45	; 0x2d
    3564:	ae a5       	ldd	r26, Y+46	; 0x2e
    3566:	bf a5       	ldd	r27, Y+47	; 0x2f
    3568:	89 2b       	or	r24, r25
    356a:	8a 2b       	or	r24, r26
    356c:	8b 2b       	or	r24, r27
    356e:	09 f4       	brne	.+2      	; 0x3572 <enable_ref_spads+0x6e>
    3570:	7a c0       	rjmp	.+244    	; 0x3666 <enable_ref_spads+0x162>
    3572:	81 2c       	mov	r8, r1
    3574:	91 2c       	mov	r9, r1
    3576:	54 01       	movw	r10, r8
		get_next_good_spad(goodSpadArray, size, currentSpad,
    3578:	de 01       	movw	r26, r28
    357a:	11 96       	adiw	r26, 0x01	; 1
    357c:	7d 01       	movw	r14, r26
    357e:	08 a5       	ldd	r16, Y+40	; 0x28
    3580:	19 a5       	ldd	r17, Y+41	; 0x29
    3582:	2a a5       	ldd	r18, Y+42	; 0x2a
    3584:	3b a5       	ldd	r19, Y+43	; 0x2b
    3586:	4b 85       	ldd	r20, Y+11	; 0x0b
    3588:	5c 85       	ldd	r21, Y+12	; 0x0c
    358a:	6d 85       	ldd	r22, Y+13	; 0x0d
    358c:	7e 85       	ldd	r23, Y+14	; 0x0e
    358e:	89 89       	ldd	r24, Y+17	; 0x11
    3590:	9a 89       	ldd	r25, Y+18	; 0x12
    3592:	f2 dd       	rcall	.-1052   	; 0x3178 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
    3594:	c9 80       	ldd	r12, Y+1	; 0x01
    3596:	da 80       	ldd	r13, Y+2	; 0x02
    3598:	eb 80       	ldd	r14, Y+3	; 0x03
    359a:	fc 80       	ldd	r15, Y+4	; 0x04
    359c:	bf ef       	ldi	r27, 0xFF	; 255
    359e:	cb 16       	cp	r12, r27
    35a0:	db 06       	cpc	r13, r27
    35a2:	eb 06       	cpc	r14, r27
    35a4:	fb 06       	cpc	r15, r27
    35a6:	09 f4       	brne	.+2      	; 0x35aa <enable_ref_spads+0xa6>
    35a8:	72 c0       	rjmp	.+228    	; 0x368e <enable_ref_spads+0x18a>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
    35aa:	c7 01       	movw	r24, r14
    35ac:	b6 01       	movw	r22, r12
    35ae:	64 0d       	add	r22, r4
    35b0:	75 1d       	adc	r23, r5
    35b2:	86 1d       	adc	r24, r6
    35b4:	97 1d       	adc	r25, r7
    35b6:	62 de       	rcall	.-828    	; 0x327c <is_aperture>
    35b8:	83 11       	cpse	r24, r3
    35ba:	69 c0       	rjmp	.+210    	; 0x368e <enable_ref_spads+0x18a>
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
			break;
		}
		currentSpad = (u32)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
    35bc:	97 01       	movw	r18, r14
    35be:	86 01       	movw	r16, r12
    35c0:	4b 85       	ldd	r20, Y+11	; 0x0b
    35c2:	5c 85       	ldd	r21, Y+12	; 0x0c
    35c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    35c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    35c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    35ca:	98 89       	ldd	r25, Y+16	; 0x10
    35cc:	74 de       	rcall	.-792    	; 0x32b6 <enable_spad_bit>
		currentSpad++;
    35ce:	a7 01       	movw	r20, r14
    35d0:	96 01       	movw	r18, r12
    35d2:	2f 5f       	subi	r18, 0xFF	; 255
    35d4:	3f 4f       	sbci	r19, 0xFF	; 255
    35d6:	4f 4f       	sbci	r20, 0xFF	; 255
    35d8:	5f 4f       	sbci	r21, 0xFF	; 255
    35da:	28 a7       	std	Y+40, r18	; 0x28
    35dc:	39 a7       	std	Y+41, r19	; 0x29
    35de:	4a a7       	std	Y+42, r20	; 0x2a
    35e0:	5b a7       	std	Y+43, r21	; 0x2b
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
	for (index = 0; index < spadCount; index++) {
    35e2:	3f ef       	ldi	r19, 0xFF	; 255
    35e4:	83 1a       	sub	r8, r19
    35e6:	93 0a       	sbc	r9, r19
    35e8:	a3 0a       	sbc	r10, r19
    35ea:	b3 0a       	sbc	r11, r19
    35ec:	8c a5       	ldd	r24, Y+44	; 0x2c
    35ee:	9d a5       	ldd	r25, Y+45	; 0x2d
    35f0:	ae a5       	ldd	r26, Y+46	; 0x2e
    35f2:	bf a5       	ldd	r27, Y+47	; 0x2f
    35f4:	88 15       	cp	r24, r8
    35f6:	99 05       	cpc	r25, r9
    35f8:	aa 05       	cpc	r26, r10
    35fa:	bb 05       	cpc	r27, r11
    35fc:	09 f0       	breq	.+2      	; 0x3600 <enable_ref_spads+0xfc>
    35fe:	bc cf       	rjmp	.-136    	; 0x3578 <enable_ref_spads+0x74>
    3600:	32 c0       	rjmp	.+100    	; 0x3666 <enable_ref_spads+0x162>
	if (status == VL53L0X_ERROR_NONE)
		status = set_ref_spad_map(Dev, spadArray);


	if (status == VL53L0X_ERROR_NONE) {
		status = get_ref_spad_map(Dev, checkSpadArray);
    3602:	be 01       	movw	r22, r28
    3604:	6b 5f       	subi	r22, 0xFB	; 251
    3606:	7f 4f       	sbci	r23, 0xFF	; 255
    3608:	8b 89       	ldd	r24, Y+19	; 0x13
    360a:	9c 89       	ldd	r25, Y+20	; 0x14
    360c:	6e df       	rcall	.-292    	; 0x34ea <get_ref_spad_map>

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
    360e:	2b 85       	ldd	r18, Y+11	; 0x0b
    3610:	3c 85       	ldd	r19, Y+12	; 0x0c
    3612:	4d 85       	ldd	r20, Y+13	; 0x0d
    3614:	5e 85       	ldd	r21, Y+14	; 0x0e
    3616:	23 2b       	or	r18, r19
    3618:	24 2b       	or	r18, r20
    361a:	25 2b       	or	r18, r21
    361c:	09 f4       	brne	.+2      	; 0x3620 <enable_ref_spads+0x11c>
    361e:	43 c0       	rjmp	.+134    	; 0x36a6 <enable_ref_spads+0x1a2>
			if (spadArray[i] != checkSpadArray[i]) {
    3620:	af 85       	ldd	r26, Y+15	; 0x0f
    3622:	b8 89       	ldd	r27, Y+16	; 0x10
    3624:	2c 91       	ld	r18, X
    3626:	9d 81       	ldd	r25, Y+5	; 0x05
    3628:	29 13       	cpse	r18, r25
    362a:	19 c0       	rjmp	.+50     	; 0x365e <enable_ref_spads+0x15a>
    362c:	11 96       	adiw	r26, 0x01	; 1
    362e:	fe 01       	movw	r30, r28
    3630:	36 96       	adiw	r30, 0x06	; 6
    3632:	40 e0       	ldi	r20, 0x00	; 0
    3634:	50 e0       	ldi	r21, 0x00	; 0
    3636:	ba 01       	movw	r22, r20
    3638:	cb 84       	ldd	r12, Y+11	; 0x0b
    363a:	dc 84       	ldd	r13, Y+12	; 0x0c
    363c:	ed 84       	ldd	r14, Y+13	; 0x0d
    363e:	fe 84       	ldd	r15, Y+14	; 0x0e
    3640:	04 c0       	rjmp	.+8      	; 0x364a <enable_ref_spads+0x146>
    3642:	2d 91       	ld	r18, X+
    3644:	91 91       	ld	r25, Z+
    3646:	29 13       	cpse	r18, r25
    3648:	0c c0       	rjmp	.+24     	; 0x3662 <enable_ref_spads+0x15e>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
				break;
			}
			i++;
    364a:	4f 5f       	subi	r20, 0xFF	; 255
    364c:	5f 4f       	sbci	r21, 0xFF	; 255
    364e:	6f 4f       	sbci	r22, 0xFF	; 255
    3650:	7f 4f       	sbci	r23, 0xFF	; 255
		status = get_ref_spad_map(Dev, checkSpadArray);

		i = 0;

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
    3652:	c4 16       	cp	r12, r20
    3654:	d5 06       	cpc	r13, r21
    3656:	e6 06       	cpc	r14, r22
    3658:	f7 06       	cpc	r15, r23
    365a:	99 f7       	brne	.-26     	; 0x3642 <enable_ref_spads+0x13e>
    365c:	24 c0       	rjmp	.+72     	; 0x36a6 <enable_ref_spads+0x1a2>
			if (spadArray[i] != checkSpadArray[i]) {
				status = VL53L0X_ERROR_REF_SPAD_INIT;
    365e:	8e ec       	ldi	r24, 0xCE	; 206
    3660:	22 c0       	rjmp	.+68     	; 0x36a6 <enable_ref_spads+0x1a2>
    3662:	8e ec       	ldi	r24, 0xCE	; 206
    3664:	20 c0       	rjmp	.+64     	; 0x36a6 <enable_ref_spads+0x1a2>
		}
		currentSpad = (u32)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
    3666:	28 a5       	ldd	r18, Y+40	; 0x28
    3668:	39 a5       	ldd	r19, Y+41	; 0x29
    366a:	4a a5       	ldd	r20, Y+42	; 0x2a
    366c:	5b a5       	ldd	r21, Y+43	; 0x2b
    366e:	a8 a9       	ldd	r26, Y+48	; 0x30
    3670:	b9 a9       	ldd	r27, Y+49	; 0x31
    3672:	2d 93       	st	X+, r18
    3674:	3d 93       	st	X+, r19
    3676:	4d 93       	st	X+, r20
    3678:	5c 93       	st	X, r21

	if (status == VL53L0X_ERROR_NONE)
		status = set_ref_spad_map(Dev, spadArray);
    367a:	13 97       	sbiw	r26, 0x03	; 3
    367c:	6f 85       	ldd	r22, Y+15	; 0x0f
    367e:	78 89       	ldd	r23, Y+16	; 0x10
    3680:	8b 89       	ldd	r24, Y+19	; 0x13
    3682:	9c 89       	ldd	r25, Y+20	; 0x14


	if (status == VL53L0X_ERROR_NONE) {
    3684:	25 df       	rcall	.-438    	; 0x34d0 <set_ref_spad_map>
    3686:	88 23       	and	r24, r24
    3688:	09 f4       	brne	.+2      	; 0x368c <enable_ref_spads+0x188>
    368a:	bb cf       	rjmp	.-138    	; 0x3602 <enable_ref_spads+0xfe>
		}
		currentSpad = (u32)nextGoodSpad;
		enable_spad_bit(spadArray, size, currentSpad);
		currentSpad++;
	}
	*lastSpad = currentSpad;
    368c:	0c c0       	rjmp	.+24     	; 0x36a6 <enable_ref_spads+0x1a2>
    368e:	28 a5       	ldd	r18, Y+40	; 0x28
    3690:	39 a5       	ldd	r19, Y+41	; 0x29
    3692:	4a a5       	ldd	r20, Y+42	; 0x2a
    3694:	5b a5       	ldd	r21, Y+43	; 0x2b
    3696:	a8 a9       	ldd	r26, Y+48	; 0x30
    3698:	b9 a9       	ldd	r27, Y+49	; 0x31
    369a:	2d 93       	st	X+, r18
    369c:	3d 93       	st	X+, r19
    369e:	4d 93       	st	X+, r20
    36a0:	5c 93       	st	X, r21
    36a2:	13 97       	sbiw	r26, 0x03	; 3
			}
			i++;
		}
	}
	return status;
}
    36a4:	8e ec       	ldi	r24, 0xCE	; 206
    36a6:	64 96       	adiw	r28, 0x14	; 20
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	df 91       	pop	r29
    36b4:	cf 91       	pop	r28
    36b6:	1f 91       	pop	r17
    36b8:	0f 91       	pop	r16
    36ba:	ff 90       	pop	r15
    36bc:	ef 90       	pop	r14
    36be:	df 90       	pop	r13
    36c0:	cf 90       	pop	r12
    36c2:	bf 90       	pop	r11
    36c4:	af 90       	pop	r10
    36c6:	9f 90       	pop	r9
    36c8:	8f 90       	pop	r8
    36ca:	7f 90       	pop	r7
    36cc:	6f 90       	pop	r6
    36ce:	5f 90       	pop	r5
    36d0:	4f 90       	pop	r4
    36d2:	3f 90       	pop	r3
    36d4:	08 95       	ret

000036d6 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		u16 *refSignalRate)
{
    36d6:	cf 92       	push	r12
    36d8:	df 92       	push	r13
    36da:	ff 92       	push	r15
    36dc:	0f 93       	push	r16
    36de:	1f 93       	push	r17
    36e0:	cf 93       	push	r28
    36e2:	df 93       	push	r29
    36e4:	cd b7       	in	r28, 0x3d	; 61
    36e6:	de b7       	in	r29, 0x3e	; 62
    36e8:	69 97       	sbiw	r28, 0x19	; 25
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	de bf       	out	0x3e, r29	; 62
    36f0:	0f be       	out	0x3f, r0	; 63
    36f2:	cd bf       	out	0x3d, r28	; 61
    36f4:	8c 01       	movw	r16, r24
    36f6:	6b 01       	movw	r12, r22

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    36f8:	fc 01       	movw	r30, r24
    36fa:	e3 5e       	subi	r30, 0xE3	; 227
    36fc:	fe 4f       	sbci	r31, 0xFE	; 254
    36fe:	f0 80       	ld	r15, Z

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
		status = VL53L0X_WrByte(Dev,
    3700:	40 ec       	ldi	r20, 0xC0	; 192
    3702:	61 e0       	ldi	r22, 0x01	; 1
    3704:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
    3708:	81 11       	cpse	r24, r1
    370a:	1a c0       	rjmp	.+52     	; 0x3740 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
    370c:	be 01       	movw	r22, r28
    370e:	6f 5f       	subi	r22, 0xFF	; 255
    3710:	7f 4f       	sbci	r23, 0xFF	; 255
    3712:	c8 01       	movw	r24, r16
    3714:	64 da       	rcall	.-2872   	; 0x2bde <VL53L0X_PerformSingleRangingMeasurement>
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
    3716:	81 11       	cpse	r24, r1
    3718:	20 c0       	rjmp	.+64     	; 0x375a <perform_ref_signal_measurement+0x84>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	6f ef       	ldi	r22, 0xFF	; 255
    371e:	c8 01       	movw	r24, r16
    3720:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE)
    3724:	81 11       	cpse	r24, r1
    3726:	19 c0       	rjmp	.+50     	; 0x375a <perform_ref_signal_measurement+0x84>
		status = VL53L0X_RdWord(Dev,
    3728:	a6 01       	movw	r20, r12
    372a:	66 eb       	ldi	r22, 0xB6	; 182
    372c:	c8 01       	movw	r24, r16
    372e:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
    3732:	81 11       	cpse	r24, r1
    3734:	12 c0       	rjmp	.+36     	; 0x375a <perform_ref_signal_measurement+0x84>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    3736:	40 e0       	ldi	r20, 0x00	; 0
    3738:	6f ef       	ldi	r22, 0xFF	; 255
    373a:	c8 01       	movw	r24, r16
    373c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (status == VL53L0X_ERROR_NONE) {
    3740:	81 11       	cpse	r24, r1
    3742:	0b c0       	rjmp	.+22     	; 0x375a <perform_ref_signal_measurement+0x84>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3744:	4f 2d       	mov	r20, r15
    3746:	61 e0       	ldi	r22, 0x01	; 1
    3748:	c8 01       	movw	r24, r16
    374a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
    374e:	81 11       	cpse	r24, r1
    3750:	04 c0       	rjmp	.+8      	; 0x375a <perform_ref_signal_measurement+0x84>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3752:	f8 01       	movw	r30, r16
    3754:	e3 5e       	subi	r30, 0xE3	; 227
    3756:	fe 4f       	sbci	r31, 0xFE	; 254
    3758:	f0 82       	st	Z, r15
	}

	return status;
}
    375a:	69 96       	adiw	r28, 0x19	; 25
    375c:	0f b6       	in	r0, 0x3f	; 63
    375e:	f8 94       	cli
    3760:	de bf       	out	0x3e, r29	; 62
    3762:	0f be       	out	0x3f, r0	; 63
    3764:	cd bf       	out	0x3d, r28	; 61
    3766:	df 91       	pop	r29
    3768:	cf 91       	pop	r28
    376a:	1f 91       	pop	r17
    376c:	0f 91       	pop	r16
    376e:	ff 90       	pop	r15
    3770:	df 90       	pop	r13
    3772:	cf 90       	pop	r12
    3774:	08 95       	ret

00003776 <VL53L0X_set_reference_spads>:
	return Status;
}

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 u32 count, u8 isApertureSpads)
{
    3776:	6f 92       	push	r6
    3778:	7f 92       	push	r7
    377a:	8f 92       	push	r8
    377c:	9f 92       	push	r9
    377e:	af 92       	push	r10
    3780:	bf 92       	push	r11
    3782:	cf 92       	push	r12
    3784:	df 92       	push	r13
    3786:	ef 92       	push	r14
    3788:	ff 92       	push	r15
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	00 d0       	rcall	.+0      	; 0x3794 <VL53L0X_set_reference_spads+0x1e>
    3794:	00 d0       	rcall	.+0      	; 0x3796 <VL53L0X_set_reference_spads+0x20>
    3796:	cd b7       	in	r28, 0x3d	; 61
    3798:	de b7       	in	r29, 0x3e	; 62
    379a:	4c 01       	movw	r8, r24
    379c:	64 2e       	mov	r6, r20
    379e:	15 2f       	mov	r17, r21
    37a0:	06 2f       	mov	r16, r22
    37a2:	b7 2e       	mov	r11, r23
    37a4:	72 2e       	mov	r7, r18
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    37a6:	41 e0       	ldi	r20, 0x01	; 1
    37a8:	6f ef       	ldi	r22, 0xFF	; 255
    37aa:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    37ae:	81 11       	cpse	r24, r1
    37b0:	1a c0       	rjmp	.+52     	; 0x37e6 <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev,
    37b2:	40 e0       	ldi	r20, 0x00	; 0
    37b4:	6f e4       	ldi	r22, 0x4F	; 79
    37b6:	c4 01       	movw	r24, r8
    37b8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
    37bc:	81 11       	cpse	r24, r1
    37be:	13 c0       	rjmp	.+38     	; 0x37e6 <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev,
    37c0:	4c e2       	ldi	r20, 0x2C	; 44
    37c2:	6e e4       	ldi	r22, 0x4E	; 78
    37c4:	c4 01       	movw	r24, r8
    37c6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
    37ca:	81 11       	cpse	r24, r1
    37cc:	0c c0       	rjmp	.+24     	; 0x37e6 <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    37ce:	40 e0       	ldi	r20, 0x00	; 0
    37d0:	6f ef       	ldi	r22, 0xFF	; 255
    37d2:	c4 01       	movw	r24, r8
    37d4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    37d8:	81 11       	cpse	r24, r1
    37da:	05 c0       	rjmp	.+10     	; 0x37e6 <VL53L0X_set_reference_spads+0x70>
		Status = VL53L0X_WrByte(Dev,
    37dc:	44 eb       	ldi	r20, 0xB4	; 180
    37de:	66 eb       	ldi	r22, 0xB6	; 182
    37e0:	c4 01       	movw	r24, r8
    37e2:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
    37e6:	f4 01       	movw	r30, r8
    37e8:	ef 5e       	subi	r30, 0xEF	; 239
    37ea:	fe 4f       	sbci	r31, 0xFE	; 254
    37ec:	10 82       	st	Z, r1
    37ee:	31 96       	adiw	r30, 0x01	; 1
    37f0:	10 82       	st	Z, r1
    37f2:	31 96       	adiw	r30, 0x01	; 1
    37f4:	10 82       	st	Z, r1
    37f6:	31 96       	adiw	r30, 0x01	; 1
    37f8:	10 82       	st	Z, r1
    37fa:	31 96       	adiw	r30, 0x01	; 1
    37fc:	10 82       	st	Z, r1
    37fe:	31 96       	adiw	r30, 0x01	; 1
    3800:	10 82       	st	Z, r1

	if (isApertureSpads) {
    3802:	71 10       	cpse	r7, r1
    3804:	0a c0       	rjmp	.+20     	; 0x381a <VL53L0X_set_reference_spads+0xa4>

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 u32 count, u8 isApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u32 currentSpadIndex = 0;
    3806:	c1 2c       	mov	r12, r1
    3808:	d1 2c       	mov	r13, r1
    380a:	76 01       	movw	r14, r12
    380c:	18 c0       	rjmp	.+48     	; 0x383e <VL53L0X_set_reference_spads+0xc8>

	if (isApertureSpads) {
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
    380e:	2f ef       	ldi	r18, 0xFF	; 255
    3810:	c2 1a       	sub	r12, r18
    3812:	d2 0a       	sbc	r13, r18
    3814:	e2 0a       	sbc	r14, r18
    3816:	f2 0a       	sbc	r15, r18
    3818:	03 c0       	rjmp	.+6      	; 0x3820 <VL53L0X_set_reference_spads+0xaa>
    381a:	c1 2c       	mov	r12, r1
    381c:	d1 2c       	mov	r13, r1
    381e:	76 01       	movw	r14, r12
	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;

	if (isApertureSpads) {
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
    3820:	c7 01       	movw	r24, r14
    3822:	b6 01       	movw	r22, r12
    3824:	6c 54       	subi	r22, 0x4C	; 76
    3826:	7f 4f       	sbci	r23, 0xFF	; 255
    3828:	8f 4f       	sbci	r24, 0xFF	; 255
    382a:	9f 4f       	sbci	r25, 0xFF	; 255
    382c:	27 dd       	rcall	.-1458   	; 0x327c <is_aperture>
    382e:	81 11       	cpse	r24, r1
    3830:	06 c0       	rjmp	.+12     	; 0x383e <VL53L0X_set_reference_spads+0xc8>
    3832:	3c e2       	ldi	r19, 0x2C	; 44
    3834:	c3 16       	cp	r12, r19
    3836:	d1 04       	cpc	r13, r1
    3838:	e1 04       	cpc	r14, r1
    383a:	f1 04       	cpc	r15, r1
    383c:	41 f7       	brne	.-48     	; 0x380e <VL53L0X_set_reference_spads+0x98>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
		}
	}
	Status = enable_ref_spads(Dev,
    383e:	ce 01       	movw	r24, r28
    3840:	01 96       	adiw	r24, 0x01	; 1
    3842:	9f 93       	push	r25
    3844:	8f 93       	push	r24
    3846:	bf 92       	push	r11
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	6f 92       	push	r6
    384e:	ff 92       	push	r15
    3850:	ef 92       	push	r14
    3852:	df 92       	push	r13
    3854:	cf 92       	push	r12
    3856:	0f 2e       	mov	r0, r31
    3858:	f4 eb       	ldi	r31, 0xB4	; 180
    385a:	af 2e       	mov	r10, r31
    385c:	b1 2c       	mov	r11, r1
    385e:	c1 2c       	mov	r12, r1
    3860:	d1 2c       	mov	r13, r1
    3862:	f0 2d       	mov	r31, r0
    3864:	16 e0       	ldi	r17, 0x06	; 6
    3866:	e1 2e       	mov	r14, r17
    3868:	f1 2c       	mov	r15, r1
    386a:	00 e0       	ldi	r16, 0x00	; 0
    386c:	10 e0       	ldi	r17, 0x00	; 0
    386e:	94 01       	movw	r18, r8
    3870:	2f 5e       	subi	r18, 0xEF	; 239
    3872:	3e 4f       	sbci	r19, 0xFE	; 254
    3874:	a4 01       	movw	r20, r8
    3876:	49 5e       	subi	r20, 0xE9	; 233
    3878:	5e 4f       	sbci	r21, 0xFE	; 254
    387a:	67 2d       	mov	r22, r7
    387c:	c4 01       	movw	r24, r8
    387e:	42 de       	rcall	.-892    	; 0x3504 <enable_ref_spads>
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
    3880:	0f b6       	in	r0, 0x3f	; 63
    3882:	f8 94       	cli
    3884:	de bf       	out	0x3e, r29	; 62
    3886:	0f be       	out	0x3f, r0	; 63
    3888:	cd bf       	out	0x3d, r28	; 61
    388a:	81 11       	cpse	r24, r1
    388c:	09 c0       	rjmp	.+18     	; 0x38a0 <VL53L0X_set_reference_spads+0x12a>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
    388e:	f4 01       	movw	r30, r8
    3890:	ec 5f       	subi	r30, 0xFC	; 252
    3892:	fe 4f       	sbci	r31, 0xFE	; 254
    3894:	91 e0       	ldi	r25, 0x01	; 1
    3896:	90 83       	st	Z, r25
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3898:	32 97       	sbiw	r30, 0x02	; 2
    389a:	60 82       	st	Z, r6
			ReferenceSpadCount, (u8)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    389c:	31 96       	adiw	r30, 0x01	; 1
    389e:	70 82       	st	Z, r7
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
}
    38a0:	0f 90       	pop	r0
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	df 91       	pop	r29
    38aa:	cf 91       	pop	r28
    38ac:	1f 91       	pop	r17
    38ae:	0f 91       	pop	r16
    38b0:	ff 90       	pop	r15
    38b2:	ef 90       	pop	r14
    38b4:	df 90       	pop	r13
    38b6:	cf 90       	pop	r12
    38b8:	bf 90       	pop	r11
    38ba:	af 90       	pop	r10
    38bc:	9f 90       	pop	r9
    38be:	8f 90       	pop	r8
    38c0:	7f 90       	pop	r7
    38c2:	6f 90       	pop	r6
    38c4:	08 95       	ret

000038c6 <VL53L0X_get_reference_spads>:

VL53L0X_Error VL53L0X_get_reference_spads(VL53L0X_DEV Dev,
			u32 *pSpadCount, u8 *pIsApertureSpads)
{
    38c6:	6f 92       	push	r6
    38c8:	7f 92       	push	r7
    38ca:	8f 92       	push	r8
    38cc:	9f 92       	push	r9
    38ce:	af 92       	push	r10
    38d0:	bf 92       	push	r11
    38d2:	cf 92       	push	r12
    38d4:	df 92       	push	r13
    38d6:	ef 92       	push	r14
    38d8:	ff 92       	push	r15
    38da:	0f 93       	push	r16
    38dc:	1f 93       	push	r17
    38de:	cf 93       	push	r28
    38e0:	df 93       	push	r29
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	2b 97       	sbiw	r28, 0x0b	; 11
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
	u8 refSpadsInitialised;
	u8 refSpadArray[6];
	u32 cMaxSpadCount = 44;
	u32 cSpadArraySize = 6;
	u32 spadsEnabled;
	u8 isApertureSpads = 0;
    38f2:	1b 86       	std	Y+11, r1	; 0x0b

	refSpadsInitialised = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
    38f4:	fc 01       	movw	r30, r24
    38f6:	ec 5f       	subi	r30, 0xFC	; 252
    38f8:	fe 4f       	sbci	r31, 0xFE	; 254
					RefSpadsInitialised);

	if (refSpadsInitialised == 1) {
    38fa:	20 81       	ld	r18, Z
    38fc:	21 30       	cpi	r18, 0x01	; 1
    38fe:	91 f4       	brne	.+36     	; 0x3924 <VL53L0X_get_reference_spads+0x5e>

		*pSpadCount = (u32)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
    3900:	32 97       	sbiw	r30, 0x02	; 2
    3902:	80 80       	ld	r8, Z
    3904:	91 2c       	mov	r9, r1
    3906:	a1 2c       	mov	r10, r1
    3908:	b1 2c       	mov	r11, r1
    390a:	fb 01       	movw	r30, r22
    390c:	80 82       	st	Z, r8
    390e:	91 82       	std	Z+1, r9	; 0x01
    3910:	a2 82       	std	Z+2, r10	; 0x02
    3912:	b3 82       	std	Z+3, r11	; 0x03
			ReferenceSpadCount);
		*pIsApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
    3914:	fc 01       	movw	r30, r24
    3916:	ed 5f       	subi	r30, 0xFD	; 253
    3918:	fe 4f       	sbci	r31, 0xFE	; 254
    391a:	80 81       	ld	r24, Z
    391c:	fa 01       	movw	r30, r20
    391e:	80 83       	st	Z, r24
}

VL53L0X_Error VL53L0X_get_reference_spads(VL53L0X_DEV Dev,
			u32 *pSpadCount, u8 *pIsApertureSpads)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	30 c0       	rjmp	.+96     	; 0x3984 <VL53L0X_get_reference_spads+0xbe>
    3924:	5a 01       	movw	r10, r20
    3926:	4b 01       	movw	r8, r22
    3928:	3c 01       	movw	r6, r24
		*pIsApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
			ReferenceSpadType);
	} else {

		/* obtain spad info from device.*/
		Status = get_ref_spad_map(Dev, refSpadArray);
    392a:	be 01       	movw	r22, r28
    392c:	6f 5f       	subi	r22, 0xFF	; 255
    392e:	7f 4f       	sbci	r23, 0xFF	; 255
    3930:	dc dd       	rcall	.-1096   	; 0x34ea <get_ref_spad_map>

		if (Status == VL53L0X_ERROR_NONE) {
    3932:	81 11       	cpse	r24, r1
    3934:	27 c0       	rjmp	.+78     	; 0x3984 <VL53L0X_get_reference_spads+0xbe>
			/* count enabled spads within spad map array and
			 * determine if Aperture or Non-Aperture.
			 */
			Status = count_enabled_spads(refSpadArray,
    3936:	ce 01       	movw	r24, r28
    3938:	0b 96       	adiw	r24, 0x0b	; 11
    393a:	6c 01       	movw	r12, r24
    393c:	fe 01       	movw	r30, r28
    393e:	37 96       	adiw	r30, 0x07	; 7
    3940:	7f 01       	movw	r14, r30
    3942:	0c e2       	ldi	r16, 0x2C	; 44
    3944:	10 e0       	ldi	r17, 0x00	; 0
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	46 e0       	ldi	r20, 0x06	; 6
    394c:	50 e0       	ldi	r21, 0x00	; 0
    394e:	60 e0       	ldi	r22, 0x00	; 0
    3950:	70 e0       	ldi	r23, 0x00	; 0
    3952:	0a 97       	sbiw	r24, 0x0a	; 10
    3954:	e0 dc       	rcall	.-1600   	; 0x3316 <count_enabled_spads>
							cSpadArraySize,
							cMaxSpadCount,
							&spadsEnabled,
							&isApertureSpads);

			if (Status == VL53L0X_ERROR_NONE) {
    3956:	81 11       	cpse	r24, r1
    3958:	15 c0       	rjmp	.+42     	; 0x3984 <VL53L0X_get_reference_spads+0xbe>

				*pSpadCount = spadsEnabled;
    395a:	2f 81       	ldd	r18, Y+7	; 0x07
    395c:	48 85       	ldd	r20, Y+8	; 0x08
    395e:	39 85       	ldd	r19, Y+9	; 0x09
    3960:	9a 85       	ldd	r25, Y+10	; 0x0a
    3962:	f4 01       	movw	r30, r8
    3964:	20 83       	st	Z, r18
    3966:	41 83       	std	Z+1, r20	; 0x01
    3968:	32 83       	std	Z+2, r19	; 0x02
    396a:	93 83       	std	Z+3, r25	; 0x03
				*pIsApertureSpads = isApertureSpads;
    396c:	9b 85       	ldd	r25, Y+11	; 0x0b
    396e:	f5 01       	movw	r30, r10
    3970:	90 83       	st	Z, r25

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3972:	f3 01       	movw	r30, r6
    3974:	ec 5f       	subi	r30, 0xFC	; 252
    3976:	fe 4f       	sbci	r31, 0xFE	; 254
    3978:	31 e0       	ldi	r19, 0x01	; 1
    397a:	30 83       	st	Z, r19
					RefSpadsInitialised, 1);
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    397c:	32 97       	sbiw	r30, 0x02	; 2
    397e:	20 83       	st	Z, r18
					ReferenceSpadCount,
					(u8)spadsEnabled);
				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    3980:	31 96       	adiw	r30, 0x01	; 1
    3982:	90 83       	st	Z, r25
			}
		}
	}

	return Status;
}
    3984:	2b 96       	adiw	r28, 0x0b	; 11
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	1f 91       	pop	r17
    3996:	0f 91       	pop	r16
    3998:	ff 90       	pop	r15
    399a:	ef 90       	pop	r14
    399c:	df 90       	pop	r13
    399e:	cf 90       	pop	r12
    39a0:	bf 90       	pop	r11
    39a2:	af 90       	pop	r10
    39a4:	9f 90       	pop	r9
    39a6:	8f 90       	pop	r8
    39a8:	7f 90       	pop	r7
    39aa:	6f 90       	pop	r6
    39ac:	08 95       	ret

000039ae <VL53L0X_perform_single_ref_calibration>:


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		u8 vhv_init_byte)
{
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	ec 01       	movw	r28, r24
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
    39b4:	46 2f       	mov	r20, r22
    39b6:	41 60       	ori	r20, 0x01	; 1
    39b8:	60 e0       	ldi	r22, 0x00	; 0
    39ba:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
    39be:	81 11       	cpse	r24, r1
    39c0:	10 c0       	rjmp	.+32     	; 0x39e2 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
    39c2:	ce 01       	movw	r24, r28
    39c4:	d0 d3       	rcall	.+1952   	; 0x4166 <VL53L0X_measurement_poll_for_completion>

	if (Status == VL53L0X_ERROR_NONE)
    39c6:	81 11       	cpse	r24, r1
    39c8:	0c c0       	rjmp	.+24     	; 0x39e2 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
    39ca:	40 e0       	ldi	r20, 0x00	; 0
    39cc:	50 e0       	ldi	r21, 0x00	; 0
    39ce:	ba 01       	movw	r22, r20
    39d0:	ce 01       	movw	r24, r28
    39d2:	d0 d8       	rcall	.-3680   	; 0x2b74 <VL53L0X_ClearInterruptMask>

	if (Status == VL53L0X_ERROR_NONE)
    39d4:	81 11       	cpse	r24, r1
    39d6:	05 c0       	rjmp	.+10     	; 0x39e2 <VL53L0X_perform_single_ref_calibration+0x34>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	60 e0       	ldi	r22, 0x00	; 0
    39dc:	ce 01       	movw	r24, r28
    39de:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	return Status;
}
    39e2:	df 91       	pop	r29
    39e4:	cf 91       	pop	r28
    39e6:	08 95       	ret

000039e8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, u8 read_not_write,
	u8 VhvSettings, u8 PhaseCal,
	u8 *pVhvSettings, u8 *pPhaseCal,
	const u8 vhv_enable, const u8 phase_enable)
{
    39e8:	5f 92       	push	r5
    39ea:	6f 92       	push	r6
    39ec:	7f 92       	push	r7
    39ee:	8f 92       	push	r8
    39f0:	9f 92       	push	r9
    39f2:	af 92       	push	r10
    39f4:	bf 92       	push	r11
    39f6:	cf 92       	push	r12
    39f8:	df 92       	push	r13
    39fa:	ef 92       	push	r14
    39fc:	ff 92       	push	r15
    39fe:	0f 93       	push	r16
    3a00:	1f 93       	push	r17
    3a02:	cf 93       	push	r28
    3a04:	df 93       	push	r29
    3a06:	1f 92       	push	r1
    3a08:	cd b7       	in	r28, 0x3d	; 61
    3a0a:	de b7       	in	r29, 0x3e	; 62
    3a0c:	4c 01       	movw	r8, r24
    3a0e:	d6 2e       	mov	r13, r22
    3a10:	54 2e       	mov	r5, r20
    3a12:	b2 2e       	mov	r11, r18
    3a14:	38 01       	movw	r6, r16
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 PhaseCalint = 0;
    3a16:	19 82       	std	Y+1, r1	; 0x01

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    3a18:	41 e0       	ldi	r20, 0x01	; 1
    3a1a:	6f ef       	ldi	r22, 0xFF	; 255
    3a1c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    3a20:	18 2f       	mov	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
    3a22:	40 e0       	ldi	r20, 0x00	; 0
    3a24:	60 e0       	ldi	r22, 0x00	; 0
    3a26:	c4 01       	movw	r24, r8
    3a28:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    3a2c:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    3a2e:	40 e0       	ldi	r20, 0x00	; 0
    3a30:	6f ef       	ldi	r22, 0xFF	; 255
    3a32:	c4 01       	movw	r24, r8
    3a34:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    3a38:	18 2b       	or	r17, r24

	if (read_not_write) {
    3a3a:	dd 20       	and	r13, r13
    3a3c:	99 f0       	breq	.+38     	; 0x3a64 <VL53L0X_ref_calibration_io+0x7c>
		if (vhv_enable)
    3a3e:	cc 20       	and	r12, r12
    3a40:	31 f0       	breq	.+12     	; 0x3a4e <VL53L0X_ref_calibration_io+0x66>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
    3a42:	a3 01       	movw	r20, r6
    3a44:	6b ec       	ldi	r22, 0xCB	; 203
    3a46:	c4 01       	movw	r24, r8
    3a48:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    3a4c:	18 2b       	or	r17, r24
		if (phase_enable)
    3a4e:	aa 20       	and	r10, r10
    3a50:	d1 f0       	breq	.+52     	; 0x3a86 <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
    3a52:	ae 01       	movw	r20, r28
    3a54:	4f 5f       	subi	r20, 0xFF	; 255
    3a56:	5f 4f       	sbci	r21, 0xFF	; 255
    3a58:	6e ee       	ldi	r22, 0xEE	; 238
    3a5a:	c4 01       	movw	r24, r8
    3a5c:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    3a60:	18 2b       	or	r17, r24
    3a62:	11 c0       	rjmp	.+34     	; 0x3a86 <VL53L0X_ref_calibration_io+0x9e>
	} else {
		if (vhv_enable)
    3a64:	cc 20       	and	r12, r12
    3a66:	31 f0       	breq	.+12     	; 0x3a74 <VL53L0X_ref_calibration_io+0x8c>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
    3a68:	45 2d       	mov	r20, r5
    3a6a:	6b ec       	ldi	r22, 0xCB	; 203
    3a6c:	c4 01       	movw	r24, r8
    3a6e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    3a72:	18 2b       	or	r17, r24
		if (phase_enable)
    3a74:	aa 20       	and	r10, r10
    3a76:	39 f0       	breq	.+14     	; 0x3a86 <VL53L0X_ref_calibration_io+0x9e>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
    3a78:	2b 2d       	mov	r18, r11
    3a7a:	40 e8       	ldi	r20, 0x80	; 128
    3a7c:	6e ee       	ldi	r22, 0xEE	; 238
    3a7e:	c4 01       	movw	r24, r8
    3a80:	0e 94 31 32 	call	0x6462	; 0x6462 <VL53L0X_UpdateByte>
    3a84:	18 2b       	or	r17, r24
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
    3a86:	41 e0       	ldi	r20, 0x01	; 1
    3a88:	6f ef       	ldi	r22, 0xFF	; 255
    3a8a:	c4 01       	movw	r24, r8
    3a8c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    3a90:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
    3a92:	41 e0       	ldi	r20, 0x01	; 1
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	c4 01       	movw	r24, r8
    3a98:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    3a9c:	18 2b       	or	r17, r24
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
    3a9e:	40 e0       	ldi	r20, 0x00	; 0
    3aa0:	6f ef       	ldi	r22, 0xFF	; 255
    3aa2:	c4 01       	movw	r24, r8
    3aa4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	*pPhaseCal = (u8)(PhaseCalint&0xEF);
    3aa8:	99 81       	ldd	r25, Y+1	; 0x01
    3aaa:	9f 7e       	andi	r25, 0xEF	; 239
    3aac:	f7 01       	movw	r30, r14
    3aae:	90 83       	st	Z, r25

	return Status;
}
    3ab0:	81 2b       	or	r24, r17
    3ab2:	0f 90       	pop	r0
    3ab4:	df 91       	pop	r29
    3ab6:	cf 91       	pop	r28
    3ab8:	1f 91       	pop	r17
    3aba:	0f 91       	pop	r16
    3abc:	ff 90       	pop	r15
    3abe:	ef 90       	pop	r14
    3ac0:	df 90       	pop	r13
    3ac2:	cf 90       	pop	r12
    3ac4:	bf 90       	pop	r11
    3ac6:	af 90       	pop	r10
    3ac8:	9f 90       	pop	r9
    3aca:	8f 90       	pop	r8
    3acc:	7f 90       	pop	r7
    3ace:	6f 90       	pop	r6
    3ad0:	5f 90       	pop	r5
    3ad2:	08 95       	ret

00003ad4 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	u8 *pVhvSettings, const u8 get_data_enable,
	const u8 restore_config)
{
    3ad4:	8f 92       	push	r8
    3ad6:	9f 92       	push	r9
    3ad8:	af 92       	push	r10
    3ada:	bf 92       	push	r11
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	1f 92       	push	r1
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	4c 01       	movw	r8, r24
    3af4:	8b 01       	movw	r16, r22
    3af6:	f4 2e       	mov	r15, r20
    3af8:	d2 2e       	mov	r13, r18
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 SequenceConfig = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u8 PhaseCalInt = 0;
    3afa:	19 82       	std	Y+1, r1	; 0x01

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    3afc:	22 23       	and	r18, r18
    3afe:	29 f0       	breq	.+10     	; 0x3b0a <VL53L0X_perform_vhv_calibration+0x36>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    3b00:	fc 01       	movw	r30, r24
    3b02:	e3 5e       	subi	r30, 0xE3	; 227
    3b04:	fe 4f       	sbci	r31, 0xFE	; 254
    3b06:	b0 80       	ld	r11, Z
    3b08:	01 c0       	rjmp	.+2      	; 0x3b0c <VL53L0X_perform_vhv_calibration+0x38>
VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	u8 *pVhvSettings, const u8 get_data_enable,
	const u8 restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 SequenceConfig = 0;
    3b0a:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
    3b0c:	41 e0       	ldi	r20, 0x01	; 1
    3b0e:	61 e0       	ldi	r22, 0x01	; 1
    3b10:	c4 01       	movw	r24, r8
    3b12:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3b16:	81 11       	cpse	r24, r1
    3b18:	14 c0       	rjmp	.+40     	; 0x3b42 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
    3b1a:	60 e4       	ldi	r22, 0x40	; 64
    3b1c:	c4 01       	movw	r24, r8
    3b1e:	47 df       	rcall	.-370    	; 0x39ae <VL53L0X_perform_single_ref_calibration>

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    3b20:	81 11       	cpse	r24, r1
    3b22:	0f c0       	rjmp	.+30     	; 0x3b42 <VL53L0X_perform_vhv_calibration+0x6e>
    3b24:	91 e0       	ldi	r25, 0x01	; 1
    3b26:	f9 12       	cpse	r15, r25
    3b28:	0c c0       	rjmp	.+24     	; 0x3b42 <VL53L0X_perform_vhv_calibration+0x6e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    3b2a:	a1 2c       	mov	r10, r1
    3b2c:	cc 24       	eor	r12, r12
    3b2e:	c3 94       	inc	r12
    3b30:	fe 01       	movw	r30, r28
    3b32:	31 96       	adiw	r30, 0x01	; 1
    3b34:	7f 01       	movw	r14, r30
    3b36:	20 e0       	ldi	r18, 0x00	; 0
    3b38:	40 e0       	ldi	r20, 0x00	; 0
    3b3a:	61 e0       	ldi	r22, 0x01	; 1
    3b3c:	c4 01       	movw	r24, r8
    3b3e:	54 df       	rcall	.-344    	; 0x39e8 <VL53L0X_ref_calibration_io>
    3b40:	02 c0       	rjmp	.+4      	; 0x3b46 <VL53L0X_perform_vhv_calibration+0x72>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
    3b42:	f8 01       	movw	r30, r16
    3b44:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    3b46:	81 11       	cpse	r24, r1
    3b48:	0d c0       	rjmp	.+26     	; 0x3b64 <VL53L0X_perform_vhv_calibration+0x90>
    3b4a:	dd 20       	and	r13, r13
    3b4c:	59 f0       	breq	.+22     	; 0x3b64 <VL53L0X_perform_vhv_calibration+0x90>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3b4e:	4b 2d       	mov	r20, r11
    3b50:	61 e0       	ldi	r22, 0x01	; 1
    3b52:	c4 01       	movw	r24, r8
    3b54:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    3b58:	81 11       	cpse	r24, r1
    3b5a:	04 c0       	rjmp	.+8      	; 0x3b64 <VL53L0X_perform_vhv_calibration+0x90>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3b5c:	f4 01       	movw	r30, r8
    3b5e:	e3 5e       	subi	r30, 0xE3	; 227
    3b60:	fe 4f       	sbci	r31, 0xFE	; 254
    3b62:	b0 82       	st	Z, r11

	}

	return Status;
}
    3b64:	0f 90       	pop	r0
    3b66:	df 91       	pop	r29
    3b68:	cf 91       	pop	r28
    3b6a:	1f 91       	pop	r17
    3b6c:	0f 91       	pop	r16
    3b6e:	ff 90       	pop	r15
    3b70:	ef 90       	pop	r14
    3b72:	df 90       	pop	r13
    3b74:	cf 90       	pop	r12
    3b76:	bf 90       	pop	r11
    3b78:	af 90       	pop	r10
    3b7a:	9f 90       	pop	r9
    3b7c:	8f 90       	pop	r8
    3b7e:	08 95       	ret

00003b80 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	u8 *pPhaseCal, const u8 get_data_enable,
	const u8 restore_config)
{
    3b80:	8f 92       	push	r8
    3b82:	9f 92       	push	r9
    3b84:	af 92       	push	r10
    3b86:	bf 92       	push	r11
    3b88:	cf 92       	push	r12
    3b8a:	df 92       	push	r13
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	1f 92       	push	r1
    3b9a:	cd b7       	in	r28, 0x3d	; 61
    3b9c:	de b7       	in	r29, 0x3e	; 62
    3b9e:	4c 01       	movw	r8, r24
    3ba0:	7b 01       	movw	r14, r22
    3ba2:	14 2f       	mov	r17, r20
    3ba4:	d2 2e       	mov	r13, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
    3ba6:	22 23       	and	r18, r18
    3ba8:	29 f0       	breq	.+10     	; 0x3bb4 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    3baa:	fc 01       	movw	r30, r24
    3bac:	e3 5e       	subi	r30, 0xE3	; 227
    3bae:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb0:	b0 80       	ld	r11, Z
    3bb2:	01 c0       	rjmp	.+2      	; 0x3bb6 <VL53L0X_perform_phase_calibration+0x36>
VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	u8 *pPhaseCal, const u8 get_data_enable,
	const u8 restore_config)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 SequenceConfig = 0;
    3bb4:	b1 2c       	mov	r11, r1

	if (restore_config)
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
    3bb6:	42 e0       	ldi	r20, 0x02	; 2
    3bb8:	61 e0       	ldi	r22, 0x01	; 1
    3bba:	c4 01       	movw	r24, r8
    3bbc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3bc0:	81 11       	cpse	r24, r1
    3bc2:	13 c0       	rjmp	.+38     	; 0x3bea <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
    3bc4:	60 e0       	ldi	r22, 0x00	; 0
    3bc6:	c4 01       	movw	r24, r8
    3bc8:	f2 de       	rcall	.-540    	; 0x39ae <VL53L0X_perform_single_ref_calibration>

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
    3bca:	81 11       	cpse	r24, r1
    3bcc:	0e c0       	rjmp	.+28     	; 0x3bea <VL53L0X_perform_phase_calibration+0x6a>
    3bce:	11 30       	cpi	r17, 0x01	; 1
    3bd0:	61 f4       	brne	.+24     	; 0x3bea <VL53L0X_perform_phase_calibration+0x6a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
    3bd2:	aa 24       	eor	r10, r10
    3bd4:	a3 94       	inc	r10
    3bd6:	c1 2c       	mov	r12, r1
    3bd8:	8e 01       	movw	r16, r28
    3bda:	0f 5f       	subi	r16, 0xFF	; 255
    3bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	40 e0       	ldi	r20, 0x00	; 0
    3be2:	61 e0       	ldi	r22, 0x01	; 1
    3be4:	c4 01       	movw	r24, r8
    3be6:	00 df       	rcall	.-512    	; 0x39e8 <VL53L0X_ref_calibration_io>
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <VL53L0X_perform_phase_calibration+0x6e>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
    3bea:	f7 01       	movw	r30, r14
    3bec:	10 82       	st	Z, r1


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
    3bee:	81 11       	cpse	r24, r1
    3bf0:	0d c0       	rjmp	.+26     	; 0x3c0c <VL53L0X_perform_phase_calibration+0x8c>
    3bf2:	dd 20       	and	r13, r13
    3bf4:	59 f0       	breq	.+22     	; 0x3c0c <VL53L0X_perform_phase_calibration+0x8c>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3bf6:	4b 2d       	mov	r20, r11
    3bf8:	61 e0       	ldi	r22, 0x01	; 1
    3bfa:	c4 01       	movw	r24, r8
    3bfc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    3c00:	81 11       	cpse	r24, r1
    3c02:	04 c0       	rjmp	.+8      	; 0x3c0c <VL53L0X_perform_phase_calibration+0x8c>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3c04:	f4 01       	movw	r30, r8
    3c06:	e3 5e       	subi	r30, 0xE3	; 227
    3c08:	fe 4f       	sbci	r31, 0xFE	; 254
    3c0a:	b0 82       	st	Z, r11

	}

	return Status;
}
    3c0c:	0f 90       	pop	r0
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	bf 90       	pop	r11
    3c20:	af 90       	pop	r10
    3c22:	9f 90       	pop	r9
    3c24:	8f 90       	pop	r8
    3c26:	08 95       	ret

00003c28 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	u8 *pVhvSettings, u8 *pPhaseCal, u8 get_data_enable)
{
    3c28:	ef 92       	push	r14
    3c2a:	ff 92       	push	r15
    3c2c:	0f 93       	push	r16
    3c2e:	1f 93       	push	r17
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	ec 01       	movw	r28, r24
    3c36:	7a 01       	movw	r14, r20
    3c38:	12 2f       	mov	r17, r18

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
    3c3a:	fc 01       	movw	r30, r24
    3c3c:	e3 5e       	subi	r30, 0xE3	; 227
    3c3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3c40:	00 81       	ld	r16, Z

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
    3c42:	20 e0       	ldi	r18, 0x00	; 0
    3c44:	41 2f       	mov	r20, r17
    3c46:	46 df       	rcall	.-372    	; 0x3ad4 <VL53L0X_perform_vhv_calibration>
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
    3c48:	81 11       	cpse	r24, r1
    3c4a:	11 c0       	rjmp	.+34     	; 0x3c6e <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	41 2f       	mov	r20, r17
    3c50:	b7 01       	movw	r22, r14
    3c52:	ce 01       	movw	r24, r28
    3c54:	95 df       	rcall	.-214    	; 0x3b80 <VL53L0X_perform_phase_calibration>
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
    3c56:	81 11       	cpse	r24, r1
    3c58:	0a c0       	rjmp	.+20     	; 0x3c6e <VL53L0X_perform_ref_calibration+0x46>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
    3c5a:	40 2f       	mov	r20, r16
    3c5c:	61 e0       	ldi	r22, 0x01	; 1
    3c5e:	ce 01       	movw	r24, r28
    3c60:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
    3c64:	81 11       	cpse	r24, r1
    3c66:	03 c0       	rjmp	.+6      	; 0x3c6e <VL53L0X_perform_ref_calibration+0x46>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
    3c68:	c3 5e       	subi	r28, 0xE3	; 227
    3c6a:	de 4f       	sbci	r29, 0xFE	; 254
    3c6c:	08 83       	st	Y, r16

	}

	return Status;
}
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	08 95       	ret

00003c7c <VL53L0X_perform_ref_spad_management>:
}

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				u32 *refSpadCount,
				u8 *isApertureSpads)
{
    3c7c:	2f 92       	push	r2
    3c7e:	3f 92       	push	r3
    3c80:	4f 92       	push	r4
    3c82:	5f 92       	push	r5
    3c84:	6f 92       	push	r6
    3c86:	7f 92       	push	r7
    3c88:	8f 92       	push	r8
    3c8a:	9f 92       	push	r9
    3c8c:	af 92       	push	r10
    3c8e:	bf 92       	push	r11
    3c90:	cf 92       	push	r12
    3c92:	df 92       	push	r13
    3c94:	ef 92       	push	r14
    3c96:	ff 92       	push	r15
    3c98:	0f 93       	push	r16
    3c9a:	1f 93       	push	r17
    3c9c:	cf 93       	push	r28
    3c9e:	df 93       	push	r29
    3ca0:	cd b7       	in	r28, 0x3d	; 61
    3ca2:	de b7       	in	r29, 0x3e	; 62
    3ca4:	a7 97       	sbiw	r28, 0x27	; 39
    3ca6:	0f b6       	in	r0, 0x3f	; 63
    3ca8:	f8 94       	cli
    3caa:	de bf       	out	0x3e, r29	; 62
    3cac:	0f be       	out	0x3f, r0	; 63
    3cae:	cd bf       	out	0x3d, r28	; 61
    3cb0:	4c 01       	movw	r8, r24
    3cb2:	7c a3       	std	Y+36, r23	; 0x24
    3cb4:	6b a3       	std	Y+35, r22	; 0x23
    3cb6:	5e a3       	std	Y+38, r21	; 0x26
    3cb8:	4d a3       	std	Y+37, r20	; 0x25
	u8 lastSpadArray[6];
	u8 startSelect = 0xB4;
	u32 minimumSpadCount = 3;
	u32 maxSpadCount = 44;
	u32 currentSpadIndex = 0;
	u32 lastSpadIndex = 0;
    3cba:	1f 82       	std	Y+7, r1	; 0x07
    3cbc:	18 86       	std	Y+8, r1	; 0x08
    3cbe:	19 86       	std	Y+9, r1	; 0x09
    3cc0:	1a 86       	std	Y+10, r1	; 0x0a
	s32 nextGoodSpad = 0;
    3cc2:	1b 86       	std	Y+11, r1	; 0x0b
    3cc4:	1c 86       	std	Y+12, r1	; 0x0c
    3cc6:	1d 86       	std	Y+13, r1	; 0x0d
    3cc8:	1e 86       	std	Y+14, r1	; 0x0e
	u32 index = 0;
	u32 spadArraySize = 6;
	u32 signalRateDiff = 0;
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
    3cca:	19 8a       	std	Y+17, r1	; 0x11
	u8 PhaseCal = 0;
    3ccc:	1a 8a       	std	Y+18, r1	; 0x12
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
    3cce:	fc 01       	movw	r30, r24
    3cd0:	e8 5d       	subi	r30, 0xD8	; 216
    3cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3cd4:	60 80       	ld	r6, Z
    3cd6:	71 80       	ldd	r7, Z+1	; 0x01
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
    3cd8:	77 97       	sbiw	r30, 0x17	; 23
    3cda:	10 82       	st	Z, r1
    3cdc:	31 96       	adiw	r30, 0x01	; 1
    3cde:	10 82       	st	Z, r1
    3ce0:	31 96       	adiw	r30, 0x01	; 1
    3ce2:	10 82       	st	Z, r1
    3ce4:	31 96       	adiw	r30, 0x01	; 1
    3ce6:	10 82       	st	Z, r1
    3ce8:	31 96       	adiw	r30, 0x01	; 1
    3cea:	10 82       	st	Z, r1
    3cec:	31 96       	adiw	r30, 0x01	; 1
    3cee:	10 82       	st	Z, r1


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    3cf0:	41 e0       	ldi	r20, 0x01	; 1
    3cf2:	6f ef       	ldi	r22, 0xFF	; 255
    3cf4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3cf8:	81 11       	cpse	r24, r1
    3cfa:	1a c0       	rjmp	.+52     	; 0x3d30 <VL53L0X_perform_ref_spad_management+0xb4>
		Status = VL53L0X_WrByte(Dev,
    3cfc:	40 e0       	ldi	r20, 0x00	; 0
    3cfe:	6f e4       	ldi	r22, 0x4F	; 79
    3d00:	c4 01       	movw	r24, r8
    3d02:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
    3d06:	81 11       	cpse	r24, r1
    3d08:	1a c0       	rjmp	.+52     	; 0x3d3e <VL53L0X_perform_ref_spad_management+0xc2>
		Status = VL53L0X_WrByte(Dev,
    3d0a:	4c e2       	ldi	r20, 0x2C	; 44
    3d0c:	6e e4       	ldi	r22, 0x4E	; 78
    3d0e:	c4 01       	movw	r24, r8
    3d10:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
    3d14:	81 11       	cpse	r24, r1
    3d16:	1e c0       	rjmp	.+60     	; 0x3d54 <VL53L0X_perform_ref_spad_management+0xd8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    3d18:	40 e0       	ldi	r20, 0x00	; 0
    3d1a:	6f ef       	ldi	r22, 0xFF	; 255
    3d1c:	c4 01       	movw	r24, r8
    3d1e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>

	if (Status == VL53L0X_ERROR_NONE)
    3d22:	81 11       	cpse	r24, r1
    3d24:	44 c0       	rjmp	.+136    	; 0x3dae <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_WrByte(Dev,
    3d26:	44 eb       	ldi	r20, 0xB4	; 180
    3d28:	66 eb       	ldi	r22, 0xB6	; 182
    3d2a:	c4 01       	movw	r24, r8
    3d2c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
    3d30:	81 11       	cpse	r24, r1
    3d32:	c4 c1       	rjmp	.+904    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
		Status = VL53L0X_WrByte(Dev,
    3d34:	40 e0       	ldi	r20, 0x00	; 0
    3d36:	60 e8       	ldi	r22, 0x80	; 128
    3d38:	c4 01       	movw	r24, r8
    3d3a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
    3d3e:	81 11       	cpse	r24, r1
    3d40:	76 c1       	rjmp	.+748    	; 0x402e <VL53L0X_perform_ref_spad_management+0x3b2>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	ae 01       	movw	r20, r28
    3d46:	4e 5e       	subi	r20, 0xEE	; 238
    3d48:	5f 4f       	sbci	r21, 0xFF	; 255
    3d4a:	be 01       	movw	r22, r28
    3d4c:	6f 5e       	subi	r22, 0xEF	; 239
    3d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d50:	c4 01       	movw	r24, r8
    3d52:	6a df       	rcall	.-300    	; 0x3c28 <VL53L0X_perform_ref_calibration>
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
    3d54:	81 11       	cpse	r24, r1
    3d56:	b2 c1       	rjmp	.+868    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
		lastSpadIndex = currentSpadIndex;
    3d58:	1f 82       	std	Y+7, r1	; 0x07
    3d5a:	18 86       	std	Y+8, r1	; 0x08
    3d5c:	19 86       	std	Y+9, r1	; 0x09
    3d5e:	1a 86       	std	Y+10, r1	; 0x0a
		needAptSpads = 0;
		Status = enable_ref_spads(Dev,
    3d60:	ce 01       	movw	r24, r28
    3d62:	07 96       	adiw	r24, 0x07	; 7
    3d64:	9f 93       	push	r25
    3d66:	8f 93       	push	r24
    3d68:	1f 92       	push	r1
    3d6a:	1f 92       	push	r1
    3d6c:	1f 92       	push	r1
    3d6e:	83 e0       	ldi	r24, 0x03	; 3
    3d70:	8f 93       	push	r24
    3d72:	1f 92       	push	r1
    3d74:	1f 92       	push	r1
    3d76:	1f 92       	push	r1
    3d78:	1f 92       	push	r1
    3d7a:	0f 2e       	mov	r0, r31
    3d7c:	f4 eb       	ldi	r31, 0xB4	; 180
    3d7e:	af 2e       	mov	r10, r31
    3d80:	b1 2c       	mov	r11, r1
    3d82:	c1 2c       	mov	r12, r1
    3d84:	d1 2c       	mov	r13, r1
    3d86:	f0 2d       	mov	r31, r0
    3d88:	16 e0       	ldi	r17, 0x06	; 6
    3d8a:	e1 2e       	mov	r14, r17
    3d8c:	f1 2c       	mov	r15, r1
    3d8e:	00 e0       	ldi	r16, 0x00	; 0
    3d90:	10 e0       	ldi	r17, 0x00	; 0
    3d92:	94 01       	movw	r18, r8
    3d94:	2f 5e       	subi	r18, 0xEF	; 239
    3d96:	3e 4f       	sbci	r19, 0xFE	; 254
    3d98:	a4 01       	movw	r20, r8
    3d9a:	49 5e       	subi	r20, 0xE9	; 233
    3d9c:	5e 4f       	sbci	r21, 0xFE	; 254
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	c4 01       	movw	r24, r8
    3da2:	b0 db       	rcall	.-2208   	; 0x3504 <enable_ref_spads>
    3da4:	0f b6       	in	r0, 0x3f	; 63
    3da6:	f8 94       	cli
    3da8:	de bf       	out	0x3e, r29	; 62
    3daa:	0f be       	out	0x3f, r0	; 63
    3dac:	cd bf       	out	0x3d, r28	; 61
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
    3dae:	81 11       	cpse	r24, r1
    3db0:	85 c1       	rjmp	.+778    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
		currentSpadIndex = lastSpadIndex;
    3db2:	af 80       	ldd	r10, Y+7	; 0x07
    3db4:	b8 84       	ldd	r11, Y+8	; 0x08
    3db6:	c9 84       	ldd	r12, Y+9	; 0x09
    3db8:	da 84       	ldd	r13, Y+10	; 0x0a

		Status = perform_ref_signal_measurement(Dev,
    3dba:	be 01       	movw	r22, r28
    3dbc:	61 5f       	subi	r22, 0xF1	; 241
    3dbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3dc0:	c4 01       	movw	r24, r8
    3dc2:	89 dc       	rcall	.-1774   	; 0x36d6 <perform_ref_signal_measurement>
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
    3dc4:	81 11       	cpse	r24, r1
    3dc6:	7a c1       	rjmp	.+756    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
    3dc8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dca:	98 89       	ldd	r25, Y+16	; 0x10
    3dcc:	68 16       	cp	r6, r24
    3dce:	79 06       	cpc	r7, r25
    3dd0:	08 f0       	brcs	.+2      	; 0x3dd4 <VL53L0X_perform_ref_spad_management+0x158>
    3dd2:	57 c1       	rjmp	.+686    	; 0x4082 <VL53L0X_perform_ref_spad_management+0x406>
			(peakSignalRateRef > targetRefRate)) {
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
    3dd4:	f4 01       	movw	r30, r8
    3dd6:	ef 5e       	subi	r30, 0xEF	; 239
    3dd8:	fe 4f       	sbci	r31, 0xFE	; 254
    3dda:	10 82       	st	Z, r1
    3ddc:	31 96       	adiw	r30, 0x01	; 1
    3dde:	10 82       	st	Z, r1
    3de0:	31 96       	adiw	r30, 0x01	; 1
    3de2:	10 82       	st	Z, r1
    3de4:	31 96       	adiw	r30, 0x01	; 1
    3de6:	10 82       	st	Z, r1
    3de8:	31 96       	adiw	r30, 0x01	; 1
    3dea:	10 82       	st	Z, r1
    3dec:	31 96       	adiw	r30, 0x01	; 1
    3dee:	10 82       	st	Z, r1
    3df0:	05 c0       	rjmp	.+10     	; 0x3dfc <VL53L0X_perform_ref_spad_management+0x180>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
    3df2:	3f ef       	ldi	r19, 0xFF	; 255
    3df4:	a3 1a       	sub	r10, r19
    3df6:	b3 0a       	sbc	r11, r19
    3df8:	c3 0a       	sbc	r12, r19
    3dfa:	d3 0a       	sbc	r13, r19
			for (index = 0; index < spadArraySize; index++)
				Dev->Data.SpadData.RefSpadEnables[index] = 0;


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
    3dfc:	c6 01       	movw	r24, r12
    3dfe:	b5 01       	movw	r22, r10
    3e00:	6c 54       	subi	r22, 0x4C	; 76
    3e02:	7f 4f       	sbci	r23, 0xFF	; 255
    3e04:	8f 4f       	sbci	r24, 0xFF	; 255
    3e06:	9f 4f       	sbci	r25, 0xFF	; 255
    3e08:	39 da       	rcall	.-2958   	; 0x327c <is_aperture>
    3e0a:	81 11       	cpse	r24, r1
    3e0c:	06 c0       	rjmp	.+12     	; 0x3e1a <VL53L0X_perform_ref_spad_management+0x19e>
				== 0) && (currentSpadIndex < maxSpadCount)) {
    3e0e:	4c e2       	ldi	r20, 0x2C	; 44
    3e10:	a4 16       	cp	r10, r20
    3e12:	b1 04       	cpc	r11, r1
    3e14:	c1 04       	cpc	r12, r1
    3e16:	d1 04       	cpc	r13, r1
    3e18:	60 f3       	brcs	.-40     	; 0x3df2 <VL53L0X_perform_ref_spad_management+0x176>
				currentSpadIndex++;
			}

			needAptSpads = 1;

			Status = enable_ref_spads(Dev,
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	07 96       	adiw	r24, 0x07	; 7
    3e1e:	9f 93       	push	r25
    3e20:	8f 93       	push	r24
    3e22:	1f 92       	push	r1
    3e24:	1f 92       	push	r1
    3e26:	1f 92       	push	r1
    3e28:	83 e0       	ldi	r24, 0x03	; 3
    3e2a:	8f 93       	push	r24
    3e2c:	df 92       	push	r13
    3e2e:	cf 92       	push	r12
    3e30:	bf 92       	push	r11
    3e32:	af 92       	push	r10
    3e34:	0f 2e       	mov	r0, r31
    3e36:	f4 eb       	ldi	r31, 0xB4	; 180
    3e38:	af 2e       	mov	r10, r31
    3e3a:	b1 2c       	mov	r11, r1
    3e3c:	c1 2c       	mov	r12, r1
    3e3e:	d1 2c       	mov	r13, r1
    3e40:	f0 2d       	mov	r31, r0
    3e42:	16 e0       	ldi	r17, 0x06	; 6
    3e44:	e1 2e       	mov	r14, r17
    3e46:	f1 2c       	mov	r15, r1
    3e48:	00 e0       	ldi	r16, 0x00	; 0
    3e4a:	10 e0       	ldi	r17, 0x00	; 0
    3e4c:	94 01       	movw	r18, r8
    3e4e:	2f 5e       	subi	r18, 0xEF	; 239
    3e50:	3e 4f       	sbci	r19, 0xFE	; 254
    3e52:	a4 01       	movw	r20, r8
    3e54:	49 5e       	subi	r20, 0xE9	; 233
    3e56:	5e 4f       	sbci	r21, 0xFE	; 254
    3e58:	61 e0       	ldi	r22, 0x01	; 1
    3e5a:	c4 01       	movw	r24, r8
    3e5c:	53 db       	rcall	.-2394   	; 0x3504 <enable_ref_spads>
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    3e5e:	0f b6       	in	r0, 0x3f	; 63
    3e60:	f8 94       	cli
    3e62:	de bf       	out	0x3e, r29	; 62
    3e64:	0f be       	out	0x3f, r0	; 63
    3e66:	cd bf       	out	0x3d, r28	; 61
    3e68:	81 11       	cpse	r24, r1
    3e6a:	28 c1       	rjmp	.+592    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
				currentSpadIndex = lastSpadIndex;
    3e6c:	af 80       	ldd	r10, Y+7	; 0x07
    3e6e:	b8 84       	ldd	r11, Y+8	; 0x08
    3e70:	c9 84       	ldd	r12, Y+9	; 0x09
				Status = perform_ref_signal_measurement(Dev,
    3e72:	da 84       	ldd	r13, Y+10	; 0x0a
    3e74:	be 01       	movw	r22, r28
    3e76:	61 5f       	subi	r22, 0xF1	; 241
    3e78:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7a:	c4 01       	movw	r24, r8
    3e7c:	2c dc       	rcall	.-1960   	; 0x36d6 <perform_ref_signal_measurement>
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
    3e7e:	81 11       	cpse	r24, r1
    3e80:	1d c1       	rjmp	.+570    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
    3e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e84:	98 89       	ldd	r25, Y+16	; 0x10
    3e86:	68 16       	cp	r6, r24
    3e88:	79 06       	cpc	r7, r25
    3e8a:	08 f0       	brcs	.+2      	; 0x3e8e <VL53L0X_perform_ref_spad_management+0x212>
    3e8c:	03 c1       	rjmp	.+518    	; 0x4094 <VL53L0X_perform_ref_spad_management+0x418>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
    3e8e:	b1 e0       	ldi	r27, 0x01	; 1
    3e90:	bf a3       	std	Y+39, r27	; 0x27
					refSpadCount_int = minimumSpadCount;
    3e92:	0f 2e       	mov	r0, r31
    3e94:	f3 e0       	ldi	r31, 0x03	; 3
    3e96:	2f 2e       	mov	r2, r31
    3e98:	31 2c       	mov	r3, r1
    3e9a:	41 2c       	mov	r4, r1
    3e9c:	51 2c       	mov	r5, r1
    3e9e:	f0 2d       	mov	r31, r0
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    3ea0:	21 e0       	ldi	r18, 0x01	; 1
    3ea2:	30 e0       	ldi	r19, 0x00	; 0
    3ea4:	40 e0       	ldi	r20, 0x00	; 0
    3ea6:	50 e0       	ldi	r21, 0x00	; 0
    3ea8:	29 8f       	std	Y+25, r18	; 0x19
    3eaa:	3a 8f       	std	Y+26, r19	; 0x1a
    3eac:	4b 8f       	std	Y+27, r20	; 0x1b
    3eae:	5c 8f       	std	Y+28, r21	; 0x1c
    3eb0:	fd c0       	rjmp	.+506    	; 0x40ac <VL53L0X_perform_ref_spad_management+0x430>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
    3eb2:	39 8d       	ldd	r19, Y+25	; 0x19
    3eb4:	3f a3       	std	Y+39, r19	; 0x27
		refSpadCount_int	= minimumSpadCount;

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
    3eb6:	26 e0       	ldi	r18, 0x06	; 6
    3eb8:	f4 01       	movw	r30, r8
    3eba:	ef 5e       	subi	r30, 0xEF	; 239
    3ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    3ebe:	de 01       	movw	r26, r28
    3ec0:	11 96       	adiw	r26, 0x01	; 1
    3ec2:	01 90       	ld	r0, Z+
    3ec4:	0d 92       	st	X+, r0
    3ec6:	2a 95       	dec	r18
    3ec8:	e1 f7       	brne	.-8      	; 0x3ec2 <VL53L0X_perform_ref_spad_management+0x246>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
    3eca:	86 19       	sub	r24, r6
    3ecc:	97 09       	sbc	r25, r7
    3ece:	9c 01       	movw	r18, r24
    3ed0:	22 f4       	brpl	.+8      	; 0x3eda <VL53L0X_perform_ref_spad_management+0x25e>
    3ed2:	22 27       	eor	r18, r18
    3ed4:	33 27       	eor	r19, r19
    3ed6:	28 1b       	sub	r18, r24
    3ed8:	39 0b       	sbc	r19, r25
    3eda:	c9 01       	movw	r24, r18
    3edc:	33 0f       	add	r19, r19
    3ede:	aa 0b       	sbc	r26, r26
    3ee0:	bb 0b       	sbc	r27, r27
    3ee2:	8f 8f       	std	Y+31, r24	; 0x1f
    3ee4:	98 a3       	std	Y+32, r25	; 0x20
    3ee6:	a9 a3       	std	Y+33, r26	; 0x21
    3ee8:	ba a3       	std	Y+34, r27	; 0x22
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
		refSpadCount_int	= minimumSpadCount;
    3eea:	23 e0       	ldi	r18, 0x03	; 3
    3eec:	30 e0       	ldi	r19, 0x00	; 0
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	50 e0       	ldi	r21, 0x00	; 0
    3ef2:	2d 8b       	std	Y+21, r18	; 0x15
    3ef4:	3e 8b       	std	Y+22, r19	; 0x16
    3ef6:	4f 8b       	std	Y+23, r20	; 0x17
    3ef8:	58 8f       	std	Y+24, r21	; 0x18
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
    3efa:	a4 01       	movw	r20, r8
    3efc:	49 5e       	subi	r20, 0xE9	; 233
    3efe:	5e 4f       	sbci	r21, 0xFE	; 254
    3f00:	5e 8f       	std	Y+30, r21	; 0x1e
    3f02:	4d 8f       	std	Y+29, r20	; 0x1d

			(refSpadCount_int)++;

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
    3f04:	c4 01       	movw	r24, r8
    3f06:	8f 5e       	subi	r24, 0xEF	; 239
    3f08:	9e 4f       	sbci	r25, 0xFE	; 254
    3f0a:	9c 8b       	std	Y+20, r25	; 0x14
    3f0c:	8b 8b       	std	Y+19, r24	; 0x13
		lastSignalRateDiff = abs(peakSignalRateRef -
			targetRefRate);
		complete = 0;

		while (!complete) {
			get_next_good_spad(
    3f0e:	de 01       	movw	r26, r28
    3f10:	1b 96       	adiw	r26, 0x0b	; 11
    3f12:	7d 01       	movw	r14, r26
    3f14:	96 01       	movw	r18, r12
    3f16:	85 01       	movw	r16, r10
    3f18:	46 e0       	ldi	r20, 0x06	; 6
    3f1a:	50 e0       	ldi	r21, 0x00	; 0
    3f1c:	60 e0       	ldi	r22, 0x00	; 0
    3f1e:	70 e0       	ldi	r23, 0x00	; 0
    3f20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3f22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3f24:	29 d9       	rcall	.-3502   	; 0x3178 <get_next_good_spad>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
    3f26:	cb 84       	ldd	r12, Y+11	; 0x0b
    3f28:	dc 84       	ldd	r13, Y+12	; 0x0c
    3f2a:	ed 84       	ldd	r14, Y+13	; 0x0d
    3f2c:	fe 84       	ldd	r15, Y+14	; 0x0e
    3f2e:	bf ef       	ldi	r27, 0xFF	; 255
    3f30:	cb 16       	cp	r12, r27
    3f32:	db 06       	cpc	r13, r27
    3f34:	eb 06       	cpc	r14, r27
    3f36:	fb 06       	cpc	r15, r27
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <VL53L0X_perform_ref_spad_management+0x2c0>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((u32)startSelect + nextGoodSpad) !=
    3f3a:	bf c0       	rjmp	.+382    	; 0x40ba <VL53L0X_perform_ref_spad_management+0x43e>
    3f3c:	c7 01       	movw	r24, r14
    3f3e:	b6 01       	movw	r22, r12
    3f40:	6c 54       	subi	r22, 0x4C	; 76
    3f42:	7f 4f       	sbci	r23, 0xFF	; 255
    3f44:	8f 4f       	sbci	r24, 0xFF	; 255
    3f46:	9f 4f       	sbci	r25, 0xFF	; 255
    3f48:	99 d9       	rcall	.-3278   	; 0x327c <is_aperture>
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	a0 e0       	ldi	r26, 0x00	; 0
    3f4e:	b0 e0       	ldi	r27, 0x00	; 0
    3f50:	29 8d       	ldd	r18, Y+25	; 0x19
    3f52:	3a 8d       	ldd	r19, Y+26	; 0x1a
    3f54:	4b 8d       	ldd	r20, Y+27	; 0x1b
    3f56:	5c 8d       	ldd	r21, Y+28	; 0x1c
    3f58:	82 17       	cp	r24, r18
    3f5a:	93 07       	cpc	r25, r19
    3f5c:	a4 07       	cpc	r26, r20
    3f5e:	b5 07       	cpc	r27, r21
    3f60:	09 f0       	breq	.+2      	; 0x3f64 <VL53L0X_perform_ref_spad_management+0x2e8>
    3f62:	71 c0       	rjmp	.+226    	; 0x4046 <VL53L0X_perform_ref_spad_management+0x3ca>
				 */
				complete = 1;
				break;
			}

			(refSpadCount_int)++;
    3f64:	2d 88       	ldd	r2, Y+21	; 0x15
    3f66:	3e 88       	ldd	r3, Y+22	; 0x16
    3f68:	4f 88       	ldd	r4, Y+23	; 0x17
    3f6a:	58 8c       	ldd	r5, Y+24	; 0x18
    3f6c:	3f ef       	ldi	r19, 0xFF	; 255
    3f6e:	23 1a       	sub	r2, r19
    3f70:	33 0a       	sbc	r3, r19
    3f72:	43 0a       	sbc	r4, r19

			currentSpadIndex = nextGoodSpad;
			Status = enable_spad_bit(
    3f74:	53 0a       	sbc	r5, r19
    3f76:	97 01       	movw	r18, r14
    3f78:	86 01       	movw	r16, r12
    3f7a:	46 e0       	ldi	r20, 0x06	; 6
    3f7c:	50 e0       	ldi	r21, 0x00	; 0
    3f7e:	60 e0       	ldi	r22, 0x00	; 0
    3f80:	70 e0       	ldi	r23, 0x00	; 0
    3f82:	8b 89       	ldd	r24, Y+19	; 0x13
    3f84:	9c 89       	ldd	r25, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables,
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
    3f86:	97 d9       	rcall	.-3282   	; 0x32b6 <enable_spad_bit>
    3f88:	81 11       	cpse	r24, r1
				currentSpadIndex++;
    3f8a:	98 c0       	rjmp	.+304    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
    3f8c:	56 01       	movw	r10, r12
    3f8e:	67 01       	movw	r12, r14
    3f90:	4f ef       	ldi	r20, 0xFF	; 255
    3f92:	a4 1a       	sub	r10, r20
    3f94:	b4 0a       	sbc	r11, r20
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
    3f96:	c4 0a       	sbc	r12, r20
    3f98:	d4 0a       	sbc	r13, r20
    3f9a:	6b 89       	ldd	r22, Y+19	; 0x13
    3f9c:	7c 89       	ldd	r23, Y+20	; 0x14
					Dev->Data.SpadData.RefSpadEnables);
			}

			if (Status != VL53L0X_ERROR_NONE)
    3f9e:	c4 01       	movw	r24, r8
    3fa0:	97 da       	rcall	.-2770   	; 0x34d0 <set_ref_spad_map>
				break;

			Status = perform_ref_signal_measurement(Dev,
    3fa2:	81 11       	cpse	r24, r1
    3fa4:	8b c0       	rjmp	.+278    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
    3fa6:	be 01       	movw	r22, r28
    3fa8:	61 5f       	subi	r22, 0xF1	; 241
    3faa:	7f 4f       	sbci	r23, 0xFF	; 255
    3fac:	c4 01       	movw	r24, r8
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
    3fae:	93 db       	rcall	.-2266   	; 0x36d6 <perform_ref_signal_measurement>
    3fb0:	81 11       	cpse	r24, r1
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    3fb2:	84 c0       	rjmp	.+264    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
    3fb4:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fb6:	98 89       	ldd	r25, Y+16	; 0x10
    3fb8:	9c 01       	movw	r18, r24
    3fba:	26 19       	sub	r18, r6
    3fbc:	37 09       	sbc	r19, r7
    3fbe:	a9 01       	movw	r20, r18
    3fc0:	22 f4       	brpl	.+8      	; 0x3fca <VL53L0X_perform_ref_spad_management+0x34e>
    3fc2:	44 27       	eor	r20, r20
    3fc4:	55 27       	eor	r21, r21
    3fc6:	42 1b       	sub	r20, r18
    3fc8:	53 0b       	sbc	r21, r19
    3fca:	05 2e       	mov	r0, r21
    3fcc:	00 0c       	add	r0, r0
    3fce:	66 0b       	sbc	r22, r22

			if (peakSignalRateRef > targetRefRate) {
    3fd0:	77 0b       	sbc	r23, r23
    3fd2:	68 16       	cp	r6, r24
    3fd4:	79 06       	cpc	r7, r25
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
    3fd6:	c8 f4       	brcc	.+50     	; 0x400a <VL53L0X_perform_ref_spad_management+0x38e>
    3fd8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3fda:	98 a1       	ldd	r25, Y+32	; 0x20
    3fdc:	a9 a1       	ldd	r26, Y+33	; 0x21
    3fde:	ba a1       	ldd	r27, Y+34	; 0x22
    3fe0:	84 17       	cp	r24, r20
    3fe2:	95 07       	cpc	r25, r21
    3fe4:	a6 07       	cpc	r26, r22
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
    3fe6:	b7 07       	cpc	r27, r23
    3fe8:	90 f5       	brcc	.+100    	; 0x404e <VL53L0X_perform_ref_spad_management+0x3d2>
    3fea:	be 01       	movw	r22, r28
    3fec:	6f 5f       	subi	r22, 0xFF	; 255
    3fee:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff0:	c4 01       	movw	r24, r8
							lastSpadArray);
					memcpy(
    3ff2:	6e da       	rcall	.-2852   	; 0x34d0 <set_ref_spad_map>
    3ff4:	96 e0       	ldi	r25, 0x06	; 6
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	31 96       	adiw	r30, 0x01	; 1
    3ffa:	d4 01       	movw	r26, r8
    3ffc:	af 5e       	subi	r26, 0xEF	; 239
    3ffe:	be 4f       	sbci	r27, 0xFE	; 254
    4000:	01 90       	ld	r0, Z+
    4002:	0d 92       	st	X+, r0
    4004:	9a 95       	dec	r25
    4006:	e1 f7       	brne	.-8      	; 0x4000 <VL53L0X_perform_ref_spad_management+0x384>
				}
				complete = 1;
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
				memcpy(lastSpadArray,
    4008:	17 c0       	rjmp	.+46     	; 0x4038 <VL53L0X_perform_ref_spad_management+0x3bc>
    400a:	86 e0       	ldi	r24, 0x06	; 6
    400c:	eb 89       	ldd	r30, Y+19	; 0x13
    400e:	fc 89       	ldd	r31, Y+20	; 0x14
    4010:	de 01       	movw	r26, r28
    4012:	11 96       	adiw	r26, 0x01	; 1
    4014:	01 90       	ld	r0, Z+
    4016:	0d 92       	st	X+, r0
    4018:	8a 95       	dec	r24
				 */
				complete = 1;
				break;
			}

			(refSpadCount_int)++;
    401a:	e1 f7       	brne	.-8      	; 0x4014 <VL53L0X_perform_ref_spad_management+0x398>
    401c:	2d 8a       	std	Y+21, r2	; 0x15
    401e:	3e 8a       	std	Y+22, r3	; 0x16
    4020:	4f 8a       	std	Y+23, r4	; 0x17
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
    4022:	58 8e       	std	Y+24, r5	; 0x18
    4024:	4f 8f       	std	Y+31, r20	; 0x1f
    4026:	58 a3       	std	Y+32, r21	; 0x20
    4028:	69 a3       	std	Y+33, r22	; 0x21
    402a:	7a a3       	std	Y+34, r23	; 0x22
    402c:	70 cf       	rjmp	.-288    	; 0x3f0e <VL53L0X_perform_ref_spad_management+0x292>
    402e:	1f a2       	std	Y+39, r1	; 0x27
    4030:	1d 8a       	std	Y+21, r1	; 0x15
    4032:	1e 8a       	std	Y+22, r1	; 0x16
    4034:	1f 8a       	std	Y+23, r1	; 0x17
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
    4036:	18 8e       	std	Y+24, r1	; 0x18
    4038:	81 11       	cpse	r24, r1
    403a:	40 c0       	rjmp	.+128    	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
    403c:	2d 88       	ldd	r2, Y+21	; 0x15
    403e:	3e 88       	ldd	r3, Y+22	; 0x16
    4040:	4f 88       	ldd	r4, Y+23	; 0x17
    4042:	58 8c       	ldd	r5, Y+24	; 0x18
    4044:	04 c0       	rjmp	.+8      	; 0x404e <VL53L0X_perform_ref_spad_management+0x3d2>
    4046:	2d 88       	ldd	r2, Y+21	; 0x15
    4048:	3e 88       	ldd	r3, Y+22	; 0x16
    404a:	4f 88       	ldd	r4, Y+23	; 0x17
		*refSpadCount = refSpadCount_int;
    404c:	58 8c       	ldd	r5, Y+24	; 0x18
    404e:	ab a1       	ldd	r26, Y+35	; 0x23
    4050:	bc a1       	ldd	r27, Y+36	; 0x24
    4052:	2d 92       	st	X+, r2
    4054:	3d 92       	st	X+, r3
    4056:	4d 92       	st	X+, r4
    4058:	5c 92       	st	X, r5
		*isApertureSpads = isApertureSpads_int;
    405a:	13 97       	sbiw	r26, 0x03	; 3
    405c:	2f a1       	ldd	r18, Y+39	; 0x27
    405e:	ed a1       	ldd	r30, Y+37	; 0x25
    4060:	fe a1       	ldd	r31, Y+38	; 0x26

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
    4062:	20 83       	st	Z, r18
    4064:	f4 01       	movw	r30, r8
    4066:	ec 5f       	subi	r30, 0xFC	; 252
    4068:	fe 4f       	sbci	r31, 0xFE	; 254
    406a:	81 e0       	ldi	r24, 0x01	; 1
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    406c:	80 83       	st	Z, r24
    406e:	32 97       	sbiw	r30, 0x02	; 2
    4070:	8c 91       	ld	r24, X
			ReferenceSpadCount, (u8)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
    4072:	80 83       	st	Z, r24
    4074:	ad a1       	ldd	r26, Y+37	; 0x25
    4076:	be a1       	ldd	r27, Y+38	; 0x26
    4078:	8c 91       	ld	r24, X
    407a:	31 96       	adiw	r30, 0x01	; 1
    407c:	80 83       	st	Z, r24
    407e:	80 e0       	ldi	r24, 0x00	; 0
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
	u8	 isApertureSpads_int = 0;
    4080:	1d c0       	rjmp	.+58     	; 0x40bc <VL53L0X_perform_ref_spad_management+0x440>
	u32 signalRateDiff = 0;
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
    4082:	1f a2       	std	Y+39, r1	; 0x27
    4084:	21 2c       	mov	r2, r1
    4086:	31 2c       	mov	r3, r1
					isApertureSpads_int = 1;
					refSpadCount_int = minimumSpadCount;
				}
			}
		} else {
			needAptSpads = 0;
    4088:	21 01       	movw	r4, r2
    408a:	19 8e       	std	Y+25, r1	; 0x19
    408c:	1a 8e       	std	Y+26, r1	; 0x1a
    408e:	1b 8e       	std	Y+27, r1	; 0x1b
    4090:	1c 8e       	std	Y+28, r1	; 0x1c
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
	u8	 isApertureSpads_int = 0;
    4092:	0c c0       	rjmp	.+24     	; 0x40ac <VL53L0X_perform_ref_spad_management+0x430>
	u32 signalRateDiff = 0;
	u32 lastSignalRateDiff = 0;
	u8 complete = 0;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;
	u32 refSpadCount_int = 0;
    4094:	1f a2       	std	Y+39, r1	; 0x27
    4096:	21 2c       	mov	r2, r1
    4098:	31 2c       	mov	r3, r1
			while ((is_aperture(startSelect + currentSpadIndex)
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
			}

			needAptSpads = 1;
    409a:	21 01       	movw	r4, r2
    409c:	21 e0       	ldi	r18, 0x01	; 1
    409e:	30 e0       	ldi	r19, 0x00	; 0
    40a0:	40 e0       	ldi	r20, 0x00	; 0
    40a2:	50 e0       	ldi	r21, 0x00	; 0
    40a4:	29 8f       	std	Y+25, r18	; 0x19
    40a6:	3a 8f       	std	Y+26, r19	; 0x1a
    40a8:	4b 8f       	std	Y+27, r20	; 0x1b
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
		(peakSignalRateRef < targetRefRate)) {
    40aa:	5c 8f       	std	Y+28, r21	; 0x1c
    40ac:	8f 85       	ldd	r24, Y+15	; 0x0f
		} else {
			needAptSpads = 0;
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
    40ae:	98 89       	ldd	r25, Y+16	; 0x10
    40b0:	86 15       	cp	r24, r6
    40b2:	97 05       	cpc	r25, r7
    40b4:	08 f4       	brcc	.+2      	; 0x40b8 <VL53L0X_perform_ref_spad_management+0x43c>
    40b6:	fd ce       	rjmp	.-518    	; 0x3eb2 <VL53L0X_perform_ref_spad_management+0x236>
				Dev->Data.SpadData.RefGoodSpadMap,
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
    40b8:	ca cf       	rjmp	.-108    	; 0x404e <VL53L0X_perform_ref_spad_management+0x3d2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
}
    40ba:	8e ec       	ldi	r24, 0xCE	; 206
    40bc:	a7 96       	adiw	r28, 0x27	; 39
    40be:	0f b6       	in	r0, 0x3f	; 63
    40c0:	f8 94       	cli
    40c2:	de bf       	out	0x3e, r29	; 62
    40c4:	0f be       	out	0x3f, r0	; 63
    40c6:	cd bf       	out	0x3d, r28	; 61
    40c8:	df 91       	pop	r29
    40ca:	cf 91       	pop	r28
    40cc:	1f 91       	pop	r17
    40ce:	0f 91       	pop	r16
    40d0:	ff 90       	pop	r15
    40d2:	ef 90       	pop	r14
    40d4:	df 90       	pop	r13
    40d6:	cf 90       	pop	r12
    40d8:	bf 90       	pop	r11
    40da:	af 90       	pop	r10
    40dc:	9f 90       	pop	r9
    40de:	8f 90       	pop	r8
    40e0:	7f 90       	pop	r7
    40e2:	6f 90       	pop	r6
    40e4:	5f 90       	pop	r5
    40e6:	4f 90       	pop	r4
    40e8:	3f 90       	pop	r3
    40ea:	2f 90       	pop	r2
    40ec:	08 95       	ret

000040ee <VL53L0X_set_ref_calibration>:
	return Status;
}

VL53L0X_Error VL53L0X_set_ref_calibration(VL53L0X_DEV Dev,
		u8 VhvSettings, u8 PhaseCal)
{
    40ee:	af 92       	push	r10
    40f0:	cf 92       	push	r12
    40f2:	ef 92       	push	r14
    40f4:	ff 92       	push	r15
    40f6:	0f 93       	push	r16
    40f8:	1f 93       	push	r17
    40fa:	cf 93       	push	r28
    40fc:	df 93       	push	r29
    40fe:	00 d0       	rcall	.+0      	; 0x4100 <__stack+0x1>
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	24 2f       	mov	r18, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 pVhvSettings;
	u8 pPhaseCal;

	Status = VL53L0X_ref_calibration_io(Dev, 0,
    4106:	aa 24       	eor	r10, r10
    4108:	a3 94       	inc	r10
    410a:	cc 24       	eor	r12, r12
    410c:	c3 94       	inc	r12
    410e:	ae 01       	movw	r20, r28
    4110:	4e 5f       	subi	r20, 0xFE	; 254
    4112:	5f 4f       	sbci	r21, 0xFF	; 255
    4114:	7a 01       	movw	r14, r20
    4116:	8e 01       	movw	r16, r28
    4118:	0f 5f       	subi	r16, 0xFF	; 255
    411a:	1f 4f       	sbci	r17, 0xFF	; 255
    411c:	46 2f       	mov	r20, r22
    411e:	60 e0       	ldi	r22, 0x00	; 0
    4120:	63 dc       	rcall	.-1850   	; 0x39e8 <VL53L0X_ref_calibration_io>
		VhvSettings, PhaseCal,
		&pVhvSettings, &pPhaseCal,
		1, 1);

	return Status;
}
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	df 91       	pop	r29
    4128:	cf 91       	pop	r28
    412a:	1f 91       	pop	r17
    412c:	0f 91       	pop	r16
    412e:	ff 90       	pop	r15
    4130:	ef 90       	pop	r14
    4132:	cf 90       	pop	r12
    4134:	af 90       	pop	r10
    4136:	08 95       	ret

00004138 <VL53L0X_get_ref_calibration>:

VL53L0X_Error VL53L0X_get_ref_calibration(VL53L0X_DEV Dev,
		u8 *pVhvSettings, u8 *pPhaseCal)
{
    4138:	af 92       	push	r10
    413a:	cf 92       	push	r12
    413c:	ef 92       	push	r14
    413e:	ff 92       	push	r15
    4140:	0f 93       	push	r16
    4142:	1f 93       	push	r17
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 VhvSettings = 0;
	u8 PhaseCal = 0;

	Status = VL53L0X_ref_calibration_io(Dev, 1,
    4144:	aa 24       	eor	r10, r10
    4146:	a3 94       	inc	r10
    4148:	cc 24       	eor	r12, r12
    414a:	c3 94       	inc	r12
    414c:	7a 01       	movw	r14, r20
    414e:	8b 01       	movw	r16, r22
    4150:	20 e0       	ldi	r18, 0x00	; 0
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	61 e0       	ldi	r22, 0x01	; 1
    4156:	48 dc       	rcall	.-1904   	; 0x39e8 <VL53L0X_ref_calibration_io>
		VhvSettings, PhaseCal,
		pVhvSettings, pPhaseCal,
		1, 1);

	return Status;
}
    4158:	1f 91       	pop	r17
    415a:	0f 91       	pop	r16
    415c:	ff 90       	pop	r15
    415e:	ef 90       	pop	r14
    4160:	cf 90       	pop	r12
    4162:	af 90       	pop	r10
    4164:	08 95       	ret

00004166 <VL53L0X_measurement_poll_for_completion>:
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_perform_phase_calibration(
			Dev, &PhaseCalInt, 0, 1);

	return Status;
}
    4166:	ef 92       	push	r14
    4168:	ff 92       	push	r15
    416a:	0f 93       	push	r16
    416c:	1f 93       	push	r17
    416e:	cf 93       	push	r28
    4170:	df 93       	push	r29
    4172:	1f 92       	push	r1
    4174:	cd b7       	in	r28, 0x3d	; 61
    4176:	de b7       	in	r29, 0x3e	; 62
    4178:	7c 01       	movw	r14, r24
    417a:	19 82       	std	Y+1, r1	; 0x01
    417c:	00 e0       	ldi	r16, 0x00	; 0
    417e:	10 e0       	ldi	r17, 0x00	; 0
    4180:	be 01       	movw	r22, r28
    4182:	6f 5f       	subi	r22, 0xFF	; 255
    4184:	7f 4f       	sbci	r23, 0xFF	; 255
    4186:	c7 01       	movw	r24, r14
    4188:	0e 94 05 18 	call	0x300a	; 0x300a <VL53L0X_GetMeasurementDataReady>
    418c:	81 11       	cpse	r24, r1
    418e:	0e c0       	rjmp	.+28     	; 0x41ac <VL53L0X_measurement_poll_for_completion+0x46>
    4190:	99 81       	ldd	r25, Y+1	; 0x01
    4192:	91 30       	cpi	r25, 0x01	; 1
    4194:	59 f0       	breq	.+22     	; 0x41ac <VL53L0X_measurement_poll_for_completion+0x46>
    4196:	0f 5f       	subi	r16, 0xFF	; 255
    4198:	1f 4f       	sbci	r17, 0xFF	; 255
    419a:	00 3d       	cpi	r16, 0xD0	; 208
    419c:	87 e0       	ldi	r24, 0x07	; 7
    419e:	18 07       	cpc	r17, r24
    41a0:	21 f0       	breq	.+8      	; 0x41aa <VL53L0X_measurement_poll_for_completion+0x44>
    41a2:	c7 01       	movw	r24, r14
    41a4:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <VL53L0X_PollingDelay>
    41a8:	eb cf       	rjmp	.-42     	; 0x4180 <VL53L0X_measurement_poll_for_completion+0x1a>
    41aa:	89 ef       	ldi	r24, 0xF9	; 249
    41ac:	0f 90       	pop	r0
    41ae:	df 91       	pop	r29
    41b0:	cf 91       	pop	r28
    41b2:	1f 91       	pop	r17
    41b4:	0f 91       	pop	r16
    41b6:	ff 90       	pop	r15
    41b8:	ef 90       	pop	r14
    41ba:	08 95       	ret

000041bc <VL53L0X_isqrt>:
    41bc:	cf 92       	push	r12
    41be:	df 92       	push	r13
    41c0:	ef 92       	push	r14
    41c2:	ff 92       	push	r15
    41c4:	0f 93       	push	r16
    41c6:	1f 93       	push	r17
    41c8:	8b 01       	movw	r16, r22
    41ca:	9c 01       	movw	r18, r24
    41cc:	01 15       	cp	r16, r1
    41ce:	11 05       	cpc	r17, r1
    41d0:	21 05       	cpc	r18, r1
    41d2:	80 e4       	ldi	r24, 0x40	; 64
    41d4:	38 07       	cpc	r19, r24
    41d6:	b0 f4       	brcc	.+44     	; 0x4204 <VL53L0X_isqrt+0x48>
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	a0 e0       	ldi	r26, 0x00	; 0
    41de:	b0 e4       	ldi	r27, 0x40	; 64
    41e0:	b6 95       	lsr	r27
    41e2:	a7 95       	ror	r26
    41e4:	97 95       	ror	r25
    41e6:	87 95       	ror	r24
    41e8:	b6 95       	lsr	r27
    41ea:	a7 95       	ror	r26
    41ec:	97 95       	ror	r25
    41ee:	87 95       	ror	r24
    41f0:	08 17       	cp	r16, r24
    41f2:	19 07       	cpc	r17, r25
    41f4:	2a 07       	cpc	r18, r26
    41f6:	3b 07       	cpc	r19, r27
    41f8:	98 f3       	brcs	.-26     	; 0x41e0 <VL53L0X_isqrt+0x24>
    41fa:	00 97       	sbiw	r24, 0x00	; 0
    41fc:	a1 05       	cpc	r26, r1
    41fe:	b1 05       	cpc	r27, r1
    4200:	29 f4       	brne	.+10     	; 0x420c <VL53L0X_isqrt+0x50>
    4202:	30 c0       	rjmp	.+96     	; 0x4264 <VL53L0X_isqrt+0xa8>
    4204:	80 e0       	ldi	r24, 0x00	; 0
    4206:	90 e0       	ldi	r25, 0x00	; 0
    4208:	a0 e0       	ldi	r26, 0x00	; 0
    420a:	b0 e4       	ldi	r27, 0x40	; 64
    420c:	40 e0       	ldi	r20, 0x00	; 0
    420e:	50 e0       	ldi	r21, 0x00	; 0
    4210:	ba 01       	movw	r22, r20
    4212:	6a 01       	movw	r12, r20
    4214:	7b 01       	movw	r14, r22
    4216:	c8 0e       	add	r12, r24
    4218:	d9 1e       	adc	r13, r25
    421a:	ea 1e       	adc	r14, r26
    421c:	fb 1e       	adc	r15, r27
    421e:	0c 15       	cp	r16, r12
    4220:	1d 05       	cpc	r17, r13
    4222:	2e 05       	cpc	r18, r14
    4224:	3f 05       	cpc	r19, r15
    4226:	68 f0       	brcs	.+26     	; 0x4242 <VL53L0X_isqrt+0x86>
    4228:	0c 19       	sub	r16, r12
    422a:	1d 09       	sbc	r17, r13
    422c:	2e 09       	sbc	r18, r14
    422e:	3f 09       	sbc	r19, r15
    4230:	76 95       	lsr	r23
    4232:	67 95       	ror	r22
    4234:	57 95       	ror	r21
    4236:	47 95       	ror	r20
    4238:	48 0f       	add	r20, r24
    423a:	59 1f       	adc	r21, r25
    423c:	6a 1f       	adc	r22, r26
    423e:	7b 1f       	adc	r23, r27
    4240:	04 c0       	rjmp	.+8      	; 0x424a <VL53L0X_isqrt+0x8e>
    4242:	76 95       	lsr	r23
    4244:	67 95       	ror	r22
    4246:	57 95       	ror	r21
    4248:	47 95       	ror	r20
    424a:	b6 95       	lsr	r27
    424c:	a7 95       	ror	r26
    424e:	97 95       	ror	r25
    4250:	87 95       	ror	r24
    4252:	b6 95       	lsr	r27
    4254:	a7 95       	ror	r26
    4256:	97 95       	ror	r25
    4258:	87 95       	ror	r24
    425a:	00 97       	sbiw	r24, 0x00	; 0
    425c:	a1 05       	cpc	r26, r1
    425e:	b1 05       	cpc	r27, r1
    4260:	c1 f6       	brne	.-80     	; 0x4212 <VL53L0X_isqrt+0x56>
    4262:	03 c0       	rjmp	.+6      	; 0x426a <VL53L0X_isqrt+0xae>
    4264:	40 e0       	ldi	r20, 0x00	; 0
    4266:	50 e0       	ldi	r21, 0x00	; 0
    4268:	ba 01       	movw	r22, r20
    426a:	cb 01       	movw	r24, r22
    426c:	ba 01       	movw	r22, r20
    426e:	1f 91       	pop	r17
    4270:	0f 91       	pop	r16
    4272:	ff 90       	pop	r15
    4274:	ef 90       	pop	r14
    4276:	df 90       	pop	r13
    4278:	cf 90       	pop	r12
    427a:	08 95       	ret

0000427c <VL53L0X_device_read_strobe>:
    427c:	af 92       	push	r10
    427e:	bf 92       	push	r11
    4280:	cf 92       	push	r12
    4282:	df 92       	push	r13
    4284:	ef 92       	push	r14
    4286:	ff 92       	push	r15
    4288:	1f 93       	push	r17
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    428e:	1f 92       	push	r1
    4290:	cd b7       	in	r28, 0x3d	; 61
    4292:	de b7       	in	r29, 0x3e	; 62
    4294:	5c 01       	movw	r10, r24
    4296:	40 e0       	ldi	r20, 0x00	; 0
    4298:	63 e8       	ldi	r22, 0x83	; 131
    429a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    429e:	18 2f       	mov	r17, r24
    42a0:	81 11       	cpse	r24, r1
    42a2:	26 c0       	rjmp	.+76     	; 0x42f0 <VL53L0X_device_read_strobe+0x74>
    42a4:	c1 2c       	mov	r12, r1
    42a6:	d1 2c       	mov	r13, r1
    42a8:	76 01       	movw	r14, r12
    42aa:	ae 01       	movw	r20, r28
    42ac:	4f 5f       	subi	r20, 0xFF	; 255
    42ae:	5f 4f       	sbci	r21, 0xFF	; 255
    42b0:	63 e8       	ldi	r22, 0x83	; 131
    42b2:	c5 01       	movw	r24, r10
    42b4:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    42b8:	18 2f       	mov	r17, r24
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	81 11       	cpse	r24, r1
    42be:	10 c0       	rjmp	.+32     	; 0x42e0 <VL53L0X_device_read_strobe+0x64>
    42c0:	11 11       	cpse	r17, r1
    42c2:	0e c0       	rjmp	.+28     	; 0x42e0 <VL53L0X_device_read_strobe+0x64>
    42c4:	8f ef       	ldi	r24, 0xFF	; 255
    42c6:	c8 1a       	sub	r12, r24
    42c8:	d8 0a       	sbc	r13, r24
    42ca:	e8 0a       	sbc	r14, r24
    42cc:	f8 0a       	sbc	r15, r24
    42ce:	80 ed       	ldi	r24, 0xD0	; 208
    42d0:	c8 16       	cp	r12, r24
    42d2:	87 e0       	ldi	r24, 0x07	; 7
    42d4:	d8 06       	cpc	r13, r24
    42d6:	e1 04       	cpc	r14, r1
    42d8:	f1 04       	cpc	r15, r1
    42da:	39 f7       	brne	.-50     	; 0x42aa <VL53L0X_device_read_strobe+0x2e>
    42dc:	19 ef       	ldi	r17, 0xF9	; 249
    42de:	08 c0       	rjmp	.+16     	; 0x42f0 <VL53L0X_device_read_strobe+0x74>
    42e0:	80 ed       	ldi	r24, 0xD0	; 208
    42e2:	c8 16       	cp	r12, r24
    42e4:	87 e0       	ldi	r24, 0x07	; 7
    42e6:	d8 06       	cpc	r13, r24
    42e8:	e1 04       	cpc	r14, r1
    42ea:	f1 04       	cpc	r15, r1
    42ec:	08 f0       	brcs	.+2      	; 0x42f0 <VL53L0X_device_read_strobe+0x74>
    42ee:	19 ef       	ldi	r17, 0xF9	; 249
    42f0:	41 e0       	ldi	r20, 0x01	; 1
    42f2:	63 e8       	ldi	r22, 0x83	; 131
    42f4:	c5 01       	movw	r24, r10
    42f6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    42fa:	81 2b       	or	r24, r17
    42fc:	0f 90       	pop	r0
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	ff 90       	pop	r15
    4306:	ef 90       	pop	r14
    4308:	df 90       	pop	r13
    430a:	cf 90       	pop	r12
    430c:	bf 90       	pop	r11
    430e:	af 90       	pop	r10
    4310:	08 95       	ret

00004312 <VL53L0X_get_info_from_device>:
    4312:	2f 92       	push	r2
    4314:	3f 92       	push	r3
    4316:	4f 92       	push	r4
    4318:	5f 92       	push	r5
    431a:	6f 92       	push	r6
    431c:	7f 92       	push	r7
    431e:	8f 92       	push	r8
    4320:	9f 92       	push	r9
    4322:	af 92       	push	r10
    4324:	bf 92       	push	r11
    4326:	cf 92       	push	r12
    4328:	df 92       	push	r13
    432a:	ef 92       	push	r14
    432c:	ff 92       	push	r15
    432e:	0f 93       	push	r16
    4330:	1f 93       	push	r17
    4332:	cf 93       	push	r28
    4334:	df 93       	push	r29
    4336:	cd b7       	in	r28, 0x3d	; 61
    4338:	de b7       	in	r29, 0x3e	; 62
    433a:	aa 97       	sbiw	r28, 0x2a	; 42
    433c:	0f b6       	in	r0, 0x3f	; 63
    433e:	f8 94       	cli
    4340:	de bf       	out	0x3e, r29	; 62
    4342:	0f be       	out	0x3f, r0	; 63
    4344:	cd bf       	out	0x3d, r28	; 61
    4346:	18 86       	std	Y+8, r1	; 0x08
    4348:	19 86       	std	Y+9, r1	; 0x09
    434a:	1a 86       	std	Y+10, r1	; 0x0a
    434c:	1b 86       	std	Y+11, r1	; 0x0b
    434e:	1c 86       	std	Y+12, r1	; 0x0c
    4350:	1d 86       	std	Y+13, r1	; 0x0d
    4352:	1e 86       	std	Y+14, r1	; 0x0e
    4354:	1f 86       	std	Y+15, r1	; 0x0f
    4356:	fc 01       	movw	r30, r24
    4358:	e1 52       	subi	r30, 0x21	; 33
    435a:	ff 4f       	sbci	r31, 0xFF	; 255
    435c:	d0 80       	ld	r13, Z
    435e:	27 e0       	ldi	r18, 0x07	; 7
    4360:	d2 16       	cp	r13, r18
    4362:	09 f4       	brne	.+2      	; 0x4366 <VL53L0X_get_info_from_device+0x54>
    4364:	76 c3       	rjmp	.+1772   	; 0x4a52 <VL53L0X_get_info_from_device+0x740>
    4366:	06 2f       	mov	r16, r22
    4368:	7c 01       	movw	r14, r24
    436a:	41 e0       	ldi	r20, 0x01	; 1
    436c:	60 e8       	ldi	r22, 0x80	; 128
    436e:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4372:	18 2f       	mov	r17, r24
    4374:	41 e0       	ldi	r20, 0x01	; 1
    4376:	6f ef       	ldi	r22, 0xFF	; 255
    4378:	c7 01       	movw	r24, r14
    437a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    437e:	18 2b       	or	r17, r24
    4380:	40 e0       	ldi	r20, 0x00	; 0
    4382:	60 e0       	ldi	r22, 0x00	; 0
    4384:	c7 01       	movw	r24, r14
    4386:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    438a:	18 2b       	or	r17, r24
    438c:	46 e0       	ldi	r20, 0x06	; 6
    438e:	6f ef       	ldi	r22, 0xFF	; 255
    4390:	c7 01       	movw	r24, r14
    4392:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4396:	18 2b       	or	r17, r24
    4398:	ae 01       	movw	r20, r28
    439a:	4f 5f       	subi	r20, 0xFF	; 255
    439c:	5f 4f       	sbci	r21, 0xFF	; 255
    439e:	63 e8       	ldi	r22, 0x83	; 131
    43a0:	c7 01       	movw	r24, r14
    43a2:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    43a6:	18 2b       	or	r17, r24
    43a8:	49 81       	ldd	r20, Y+1	; 0x01
    43aa:	44 60       	ori	r20, 0x04	; 4
    43ac:	63 e8       	ldi	r22, 0x83	; 131
    43ae:	c7 01       	movw	r24, r14
    43b0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    43b4:	18 2b       	or	r17, r24
    43b6:	47 e0       	ldi	r20, 0x07	; 7
    43b8:	6f ef       	ldi	r22, 0xFF	; 255
    43ba:	c7 01       	movw	r24, r14
    43bc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    43c0:	18 2b       	or	r17, r24
    43c2:	41 e0       	ldi	r20, 0x01	; 1
    43c4:	61 e8       	ldi	r22, 0x81	; 129
    43c6:	c7 01       	movw	r24, r14
    43c8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    43cc:	18 2b       	or	r17, r24
    43ce:	c7 01       	movw	r24, r14
    43d0:	0e 94 d1 32 	call	0x65a2	; 0x65a2 <VL53L0X_PollingDelay>
    43d4:	18 2b       	or	r17, r24
    43d6:	41 e0       	ldi	r20, 0x01	; 1
    43d8:	60 e8       	ldi	r22, 0x80	; 128
    43da:	c7 01       	movw	r24, r14
    43dc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    43e0:	18 2b       	or	r17, r24
    43e2:	80 2f       	mov	r24, r16
    43e4:	81 70       	andi	r24, 0x01	; 1
    43e6:	28 2e       	mov	r2, r24
    43e8:	00 ff       	sbrs	r16, 0
    43ea:	56 c0       	rjmp	.+172    	; 0x4498 <VL53L0X_get_info_from_device+0x186>
    43ec:	d0 fc       	sbrc	r13, 0
    43ee:	57 c0       	rjmp	.+174    	; 0x449e <VL53L0X_get_info_from_device+0x18c>
    43f0:	4b e6       	ldi	r20, 0x6B	; 107
    43f2:	64 e9       	ldi	r22, 0x94	; 148
    43f4:	c7 01       	movw	r24, r14
    43f6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    43fa:	c8 2e       	mov	r12, r24
    43fc:	c7 01       	movw	r24, r14
    43fe:	3e df       	rcall	.-388    	; 0x427c <VL53L0X_device_read_strobe>
    4400:	8c 29       	or	r24, r12
    4402:	18 2b       	or	r17, r24
    4404:	ae 01       	movw	r20, r28
    4406:	4e 5f       	subi	r20, 0xFE	; 254
    4408:	5f 4f       	sbci	r21, 0xFF	; 255
    440a:	60 e9       	ldi	r22, 0x90	; 144
    440c:	c7 01       	movw	r24, r14
    440e:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    4412:	18 2b       	or	r17, r24
    4414:	8a 81       	ldd	r24, Y+2	; 0x02
    4416:	9b 81       	ldd	r25, Y+3	; 0x03
    4418:	ac 81       	ldd	r26, Y+4	; 0x04
    441a:	bd 81       	ldd	r27, Y+5	; 0x05
    441c:	e9 2f       	mov	r30, r25
    441e:	ef 77       	andi	r30, 0x7F	; 127
    4420:	e9 a7       	std	Y+41, r30	; 0x29
    4422:	07 2e       	mov	r0, r23
    4424:	7f e0       	ldi	r23, 0x0F	; 15
    4426:	b6 95       	lsr	r27
    4428:	a7 95       	ror	r26
    442a:	97 95       	ror	r25
    442c:	87 95       	ror	r24
    442e:	7a 95       	dec	r23
    4430:	d1 f7       	brne	.-12     	; 0x4426 <VL53L0X_get_info_from_device+0x114>
    4432:	70 2d       	mov	r23, r0
    4434:	f8 2f       	mov	r31, r24
    4436:	f1 70       	andi	r31, 0x01	; 1
    4438:	fa a7       	std	Y+42, r31	; 0x2a
    443a:	44 e2       	ldi	r20, 0x24	; 36
    443c:	64 e9       	ldi	r22, 0x94	; 148
    443e:	c7 01       	movw	r24, r14
    4440:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4444:	18 2b       	or	r17, r24
    4446:	c7 01       	movw	r24, r14
    4448:	19 df       	rcall	.-462    	; 0x427c <VL53L0X_device_read_strobe>
    444a:	18 2b       	or	r17, r24
    444c:	ae 01       	movw	r20, r28
    444e:	4e 5f       	subi	r20, 0xFE	; 254
    4450:	5f 4f       	sbci	r21, 0xFF	; 255
    4452:	60 e9       	ldi	r22, 0x90	; 144
    4454:	c7 01       	movw	r24, r14
    4456:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    445a:	18 2b       	or	r17, r24
    445c:	8a 81       	ldd	r24, Y+2	; 0x02
    445e:	9b 81       	ldd	r25, Y+3	; 0x03
    4460:	2c 81       	ldd	r18, Y+4	; 0x04
    4462:	3d 81       	ldd	r19, Y+5	; 0x05
    4464:	3b a3       	std	Y+35, r19	; 0x23
    4466:	2c a3       	std	Y+36, r18	; 0x24
    4468:	9d a3       	std	Y+37, r25	; 0x25
    446a:	8e a3       	std	Y+38, r24	; 0x26
    446c:	45 e2       	ldi	r20, 0x25	; 37
    446e:	64 e9       	ldi	r22, 0x94	; 148
    4470:	c7 01       	movw	r24, r14
    4472:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4476:	18 2b       	or	r17, r24
    4478:	c7 01       	movw	r24, r14
    447a:	00 df       	rcall	.-512    	; 0x427c <VL53L0X_device_read_strobe>
    447c:	18 2b       	or	r17, r24
    447e:	ae 01       	movw	r20, r28
    4480:	4e 5f       	subi	r20, 0xFE	; 254
    4482:	5f 4f       	sbci	r21, 0xFF	; 255
    4484:	60 e9       	ldi	r22, 0x90	; 144
    4486:	c7 01       	movw	r24, r14
    4488:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    448c:	18 2b       	or	r17, r24
    448e:	8c 81       	ldd	r24, Y+4	; 0x04
    4490:	9d 81       	ldd	r25, Y+5	; 0x05
    4492:	9f a3       	std	Y+39, r25	; 0x27
    4494:	88 a7       	std	Y+40, r24	; 0x28
    4496:	05 c0       	rjmp	.+10     	; 0x44a2 <VL53L0X_get_info_from_device+0x190>
    4498:	1a a6       	std	Y+42, r1	; 0x2a
    449a:	19 a6       	std	Y+41, r1	; 0x29
    449c:	02 c0       	rjmp	.+4      	; 0x44a2 <VL53L0X_get_info_from_device+0x190>
    449e:	1a a6       	std	Y+42, r1	; 0x2a
    44a0:	19 a6       	std	Y+41, r1	; 0x29
    44a2:	20 2f       	mov	r18, r16
    44a4:	22 70       	andi	r18, 0x02	; 2
    44a6:	32 2e       	mov	r3, r18
    44a8:	01 ff       	sbrs	r16, 1
    44aa:	60 c1       	rjmp	.+704    	; 0x476c <VL53L0X_get_info_from_device+0x45a>
    44ac:	d1 fc       	sbrc	r13, 1
    44ae:	5e c1       	rjmp	.+700    	; 0x476c <VL53L0X_get_info_from_device+0x45a>
    44b0:	42 e0       	ldi	r20, 0x02	; 2
    44b2:	64 e9       	ldi	r22, 0x94	; 148
    44b4:	c7 01       	movw	r24, r14
    44b6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    44ba:	c8 2e       	mov	r12, r24
    44bc:	c7 01       	movw	r24, r14
    44be:	de de       	rcall	.-580    	; 0x427c <VL53L0X_device_read_strobe>
    44c0:	8c 29       	or	r24, r12
    44c2:	18 2b       	or	r17, r24
    44c4:	ae 01       	movw	r20, r28
    44c6:	4a 5f       	subi	r20, 0xFA	; 250
    44c8:	5f 4f       	sbci	r21, 0xFF	; 255
    44ca:	60 e9       	ldi	r22, 0x90	; 144
    44cc:	c7 01       	movw	r24, r14
    44ce:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    44d2:	18 2b       	or	r17, r24
    44d4:	4b e7       	ldi	r20, 0x7B	; 123
    44d6:	64 e9       	ldi	r22, 0x94	; 148
    44d8:	c7 01       	movw	r24, r14
    44da:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    44de:	18 2b       	or	r17, r24
    44e0:	c7 01       	movw	r24, r14
    44e2:	cc de       	rcall	.-616    	; 0x427c <VL53L0X_device_read_strobe>
    44e4:	18 2b       	or	r17, r24
    44e6:	ae 01       	movw	r20, r28
    44e8:	49 5f       	subi	r20, 0xF9	; 249
    44ea:	5f 4f       	sbci	r21, 0xFF	; 255
    44ec:	60 e9       	ldi	r22, 0x90	; 144
    44ee:	c7 01       	movw	r24, r14
    44f0:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    44f4:	18 2b       	or	r17, r24
    44f6:	47 e7       	ldi	r20, 0x77	; 119
    44f8:	64 e9       	ldi	r22, 0x94	; 148
    44fa:	c7 01       	movw	r24, r14
    44fc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4500:	18 2b       	or	r17, r24
    4502:	c7 01       	movw	r24, r14
    4504:	bb de       	rcall	.-650    	; 0x427c <VL53L0X_device_read_strobe>
    4506:	18 2b       	or	r17, r24
    4508:	ae 01       	movw	r20, r28
    450a:	4e 5f       	subi	r20, 0xFE	; 254
    450c:	5f 4f       	sbci	r21, 0xFF	; 255
    450e:	60 e9       	ldi	r22, 0x90	; 144
    4510:	c7 01       	movw	r24, r14
    4512:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    4516:	18 2b       	or	r17, r24
    4518:	4a 81       	ldd	r20, Y+2	; 0x02
    451a:	5b 81       	ldd	r21, Y+3	; 0x03
    451c:	6c 81       	ldd	r22, Y+4	; 0x04
    451e:	7d 81       	ldd	r23, Y+5	; 0x05
    4520:	db 01       	movw	r26, r22
    4522:	ca 01       	movw	r24, r20
    4524:	07 2e       	mov	r0, r23
    4526:	79 e1       	ldi	r23, 0x19	; 25
    4528:	b6 95       	lsr	r27
    452a:	a7 95       	ror	r26
    452c:	97 95       	ror	r25
    452e:	87 95       	ror	r24
    4530:	7a 95       	dec	r23
    4532:	d1 f7       	brne	.-12     	; 0x4528 <VL53L0X_get_info_from_device+0x216>
    4534:	70 2d       	mov	r23, r0
    4536:	8f 77       	andi	r24, 0x7F	; 127
    4538:	88 8b       	std	Y+16, r24	; 0x10
    453a:	db 01       	movw	r26, r22
    453c:	ca 01       	movw	r24, r20
    453e:	07 2e       	mov	r0, r23
    4540:	72 e1       	ldi	r23, 0x12	; 18
    4542:	b6 95       	lsr	r27
    4544:	a7 95       	ror	r26
    4546:	97 95       	ror	r25
    4548:	87 95       	ror	r24
    454a:	7a 95       	dec	r23
    454c:	d1 f7       	brne	.-12     	; 0x4542 <VL53L0X_get_info_from_device+0x230>
    454e:	70 2d       	mov	r23, r0
    4550:	8f 77       	andi	r24, 0x7F	; 127
    4552:	89 8b       	std	Y+17, r24	; 0x11
    4554:	db 01       	movw	r26, r22
    4556:	ca 01       	movw	r24, r20
    4558:	07 2e       	mov	r0, r23
    455a:	7b e0       	ldi	r23, 0x0B	; 11
    455c:	b6 95       	lsr	r27
    455e:	a7 95       	ror	r26
    4560:	97 95       	ror	r25
    4562:	87 95       	ror	r24
    4564:	7a 95       	dec	r23
    4566:	d1 f7       	brne	.-12     	; 0x455c <VL53L0X_get_info_from_device+0x24a>
    4568:	70 2d       	mov	r23, r0
    456a:	8f 77       	andi	r24, 0x7F	; 127
    456c:	8a 8b       	std	Y+18, r24	; 0x12
    456e:	db 01       	movw	r26, r22
    4570:	ca 01       	movw	r24, r20
    4572:	68 94       	set
    4574:	13 f8       	bld	r1, 3
    4576:	b6 95       	lsr	r27
    4578:	a7 95       	ror	r26
    457a:	97 95       	ror	r25
    457c:	87 95       	ror	r24
    457e:	16 94       	lsr	r1
    4580:	d1 f7       	brne	.-12     	; 0x4576 <VL53L0X_get_info_from_device+0x264>
    4582:	8f 77       	andi	r24, 0x7F	; 127
    4584:	8b 8b       	std	Y+19, r24	; 0x13
    4586:	4f 70       	andi	r20, 0x0F	; 15
    4588:	44 0f       	add	r20, r20
    458a:	44 0f       	add	r20, r20
    458c:	44 0f       	add	r20, r20
    458e:	49 83       	std	Y+1, r20	; 0x01
    4590:	48 e7       	ldi	r20, 0x78	; 120
    4592:	64 e9       	ldi	r22, 0x94	; 148
    4594:	c7 01       	movw	r24, r14
    4596:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    459a:	18 2b       	or	r17, r24
    459c:	c7 01       	movw	r24, r14
    459e:	6e de       	rcall	.-804    	; 0x427c <VL53L0X_device_read_strobe>
    45a0:	18 2b       	or	r17, r24
    45a2:	ae 01       	movw	r20, r28
    45a4:	4e 5f       	subi	r20, 0xFE	; 254
    45a6:	5f 4f       	sbci	r21, 0xFF	; 255
    45a8:	60 e9       	ldi	r22, 0x90	; 144
    45aa:	c7 01       	movw	r24, r14
    45ac:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    45b0:	18 2b       	or	r17, r24
    45b2:	8a 81       	ldd	r24, Y+2	; 0x02
    45b4:	9b 81       	ldd	r25, Y+3	; 0x03
    45b6:	ac 81       	ldd	r26, Y+4	; 0x04
    45b8:	bd 81       	ldd	r27, Y+5	; 0x05
    45ba:	ac 01       	movw	r20, r24
    45bc:	bd 01       	movw	r22, r26
    45be:	03 2e       	mov	r0, r19
    45c0:	3d e1       	ldi	r19, 0x1D	; 29
    45c2:	76 95       	lsr	r23
    45c4:	67 95       	ror	r22
    45c6:	57 95       	ror	r21
    45c8:	47 95       	ror	r20
    45ca:	3a 95       	dec	r19
    45cc:	d1 f7       	brne	.-12     	; 0x45c2 <VL53L0X_get_info_from_device+0x2b0>
    45ce:	30 2d       	mov	r19, r0
    45d0:	4f 77       	andi	r20, 0x7F	; 127
    45d2:	39 81       	ldd	r19, Y+1	; 0x01
    45d4:	24 2f       	mov	r18, r20
    45d6:	23 0f       	add	r18, r19
    45d8:	2c 8b       	std	Y+20, r18	; 0x14
    45da:	ac 01       	movw	r20, r24
    45dc:	bd 01       	movw	r22, r26
    45de:	03 2e       	mov	r0, r19
    45e0:	36 e1       	ldi	r19, 0x16	; 22
    45e2:	76 95       	lsr	r23
    45e4:	67 95       	ror	r22
    45e6:	57 95       	ror	r21
    45e8:	47 95       	ror	r20
    45ea:	3a 95       	dec	r19
    45ec:	d1 f7       	brne	.-12     	; 0x45e2 <VL53L0X_get_info_from_device+0x2d0>
    45ee:	30 2d       	mov	r19, r0
    45f0:	4f 77       	andi	r20, 0x7F	; 127
    45f2:	4d 8b       	std	Y+21, r20	; 0x15
    45f4:	ac 01       	movw	r20, r24
    45f6:	bd 01       	movw	r22, r26
    45f8:	03 2e       	mov	r0, r19
    45fa:	3f e0       	ldi	r19, 0x0F	; 15
    45fc:	76 95       	lsr	r23
    45fe:	67 95       	ror	r22
    4600:	57 95       	ror	r21
    4602:	47 95       	ror	r20
    4604:	3a 95       	dec	r19
    4606:	d1 f7       	brne	.-12     	; 0x45fc <VL53L0X_get_info_from_device+0x2ea>
    4608:	30 2d       	mov	r19, r0
    460a:	4f 77       	andi	r20, 0x7F	; 127
    460c:	4e 8b       	std	Y+22, r20	; 0x16
    460e:	29 2f       	mov	r18, r25
    4610:	2f 77       	andi	r18, 0x7F	; 127
    4612:	2f 8b       	std	Y+23, r18	; 0x17
    4614:	ac 01       	movw	r20, r24
    4616:	bd 01       	movw	r22, r26
    4618:	76 95       	lsr	r23
    461a:	67 95       	ror	r22
    461c:	57 95       	ror	r21
    461e:	47 95       	ror	r20
    4620:	4f 77       	andi	r20, 0x7F	; 127
    4622:	48 8f       	std	Y+24, r20	; 0x18
    4624:	98 2f       	mov	r25, r24
    4626:	91 70       	andi	r25, 0x01	; 1
    4628:	92 95       	swap	r25
    462a:	99 0f       	add	r25, r25
    462c:	99 0f       	add	r25, r25
    462e:	90 7c       	andi	r25, 0xC0	; 192
    4630:	99 83       	std	Y+1, r25	; 0x01
    4632:	49 e7       	ldi	r20, 0x79	; 121
    4634:	64 e9       	ldi	r22, 0x94	; 148
    4636:	c7 01       	movw	r24, r14
    4638:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    463c:	18 2b       	or	r17, r24
    463e:	c7 01       	movw	r24, r14
    4640:	1d de       	rcall	.-966    	; 0x427c <VL53L0X_device_read_strobe>
    4642:	18 2b       	or	r17, r24
    4644:	ae 01       	movw	r20, r28
    4646:	4e 5f       	subi	r20, 0xFE	; 254
    4648:	5f 4f       	sbci	r21, 0xFF	; 255
    464a:	60 e9       	ldi	r22, 0x90	; 144
    464c:	c7 01       	movw	r24, r14
    464e:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    4652:	18 2b       	or	r17, r24
    4654:	8a 81       	ldd	r24, Y+2	; 0x02
    4656:	9b 81       	ldd	r25, Y+3	; 0x03
    4658:	ac 81       	ldd	r26, Y+4	; 0x04
    465a:	bd 81       	ldd	r27, Y+5	; 0x05
    465c:	ac 01       	movw	r20, r24
    465e:	bd 01       	movw	r22, r26
    4660:	03 2e       	mov	r0, r19
    4662:	3a e1       	ldi	r19, 0x1A	; 26
    4664:	76 95       	lsr	r23
    4666:	67 95       	ror	r22
    4668:	57 95       	ror	r21
    466a:	47 95       	ror	r20
    466c:	3a 95       	dec	r19
    466e:	d1 f7       	brne	.-12     	; 0x4664 <VL53L0X_get_info_from_device+0x352>
    4670:	30 2d       	mov	r19, r0
    4672:	4f 77       	andi	r20, 0x7F	; 127
    4674:	39 81       	ldd	r19, Y+1	; 0x01
    4676:	24 2f       	mov	r18, r20
    4678:	23 0f       	add	r18, r19
    467a:	29 8f       	std	Y+25, r18	; 0x19
    467c:	ac 01       	movw	r20, r24
    467e:	bd 01       	movw	r22, r26
    4680:	03 2e       	mov	r0, r19
    4682:	33 e1       	ldi	r19, 0x13	; 19
    4684:	76 95       	lsr	r23
    4686:	67 95       	ror	r22
    4688:	57 95       	ror	r21
    468a:	47 95       	ror	r20
    468c:	3a 95       	dec	r19
    468e:	d1 f7       	brne	.-12     	; 0x4684 <VL53L0X_get_info_from_device+0x372>
    4690:	30 2d       	mov	r19, r0
    4692:	4f 77       	andi	r20, 0x7F	; 127
    4694:	4a 8f       	std	Y+26, r20	; 0x1a
    4696:	ac 01       	movw	r20, r24
    4698:	bd 01       	movw	r22, r26
    469a:	03 2e       	mov	r0, r19
    469c:	3c e0       	ldi	r19, 0x0C	; 12
    469e:	76 95       	lsr	r23
    46a0:	67 95       	ror	r22
    46a2:	57 95       	ror	r21
    46a4:	47 95       	ror	r20
    46a6:	3a 95       	dec	r19
    46a8:	d1 f7       	brne	.-12     	; 0x469e <VL53L0X_get_info_from_device+0x38c>
    46aa:	30 2d       	mov	r19, r0
    46ac:	4f 77       	andi	r20, 0x7F	; 127
    46ae:	4b 8f       	std	Y+27, r20	; 0x1b
    46b0:	ac 01       	movw	r20, r24
    46b2:	bd 01       	movw	r22, r26
    46b4:	68 94       	set
    46b6:	14 f8       	bld	r1, 4
    46b8:	76 95       	lsr	r23
    46ba:	67 95       	ror	r22
    46bc:	57 95       	ror	r21
    46be:	47 95       	ror	r20
    46c0:	16 94       	lsr	r1
    46c2:	d1 f7       	brne	.-12     	; 0x46b8 <VL53L0X_get_info_from_device+0x3a6>
    46c4:	4f 77       	andi	r20, 0x7F	; 127
    46c6:	4c 8f       	std	Y+28, r20	; 0x1c
    46c8:	98 2f       	mov	r25, r24
    46ca:	9f 71       	andi	r25, 0x1F	; 31
    46cc:	99 0f       	add	r25, r25
    46ce:	99 0f       	add	r25, r25
    46d0:	99 83       	std	Y+1, r25	; 0x01
    46d2:	4a e7       	ldi	r20, 0x7A	; 122
    46d4:	64 e9       	ldi	r22, 0x94	; 148
    46d6:	c7 01       	movw	r24, r14
    46d8:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    46dc:	18 2b       	or	r17, r24
    46de:	c7 01       	movw	r24, r14
    46e0:	cd dd       	rcall	.-1126   	; 0x427c <VL53L0X_device_read_strobe>
    46e2:	18 2b       	or	r17, r24
    46e4:	ae 01       	movw	r20, r28
    46e6:	4e 5f       	subi	r20, 0xFE	; 254
    46e8:	5f 4f       	sbci	r21, 0xFF	; 255
    46ea:	60 e9       	ldi	r22, 0x90	; 144
    46ec:	c7 01       	movw	r24, r14
    46ee:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    46f2:	18 2b       	or	r17, r24
    46f4:	8a 81       	ldd	r24, Y+2	; 0x02
    46f6:	9b 81       	ldd	r25, Y+3	; 0x03
    46f8:	ac 81       	ldd	r26, Y+4	; 0x04
    46fa:	bd 81       	ldd	r27, Y+5	; 0x05
    46fc:	ac 01       	movw	r20, r24
    46fe:	bd 01       	movw	r22, r26
    4700:	03 2e       	mov	r0, r19
    4702:	3e e1       	ldi	r19, 0x1E	; 30
    4704:	76 95       	lsr	r23
    4706:	67 95       	ror	r22
    4708:	57 95       	ror	r21
    470a:	47 95       	ror	r20
    470c:	3a 95       	dec	r19
    470e:	d1 f7       	brne	.-12     	; 0x4704 <VL53L0X_get_info_from_device+0x3f2>
    4710:	30 2d       	mov	r19, r0
    4712:	4f 77       	andi	r20, 0x7F	; 127
    4714:	39 81       	ldd	r19, Y+1	; 0x01
    4716:	24 2f       	mov	r18, r20
    4718:	23 0f       	add	r18, r19
    471a:	2d 8f       	std	Y+29, r18	; 0x1d
    471c:	ac 01       	movw	r20, r24
    471e:	bd 01       	movw	r22, r26
    4720:	03 2e       	mov	r0, r19
    4722:	37 e1       	ldi	r19, 0x17	; 23
    4724:	76 95       	lsr	r23
    4726:	67 95       	ror	r22
    4728:	57 95       	ror	r21
    472a:	47 95       	ror	r20
    472c:	3a 95       	dec	r19
    472e:	d1 f7       	brne	.-12     	; 0x4724 <VL53L0X_get_info_from_device+0x412>
    4730:	30 2d       	mov	r19, r0
    4732:	4f 77       	andi	r20, 0x7F	; 127
    4734:	4e 8f       	std	Y+30, r20	; 0x1e
    4736:	2a 2f       	mov	r18, r26
    4738:	2f 77       	andi	r18, 0x7F	; 127
    473a:	2f 8f       	std	Y+31, r18	; 0x1f
    473c:	ac 01       	movw	r20, r24
    473e:	bd 01       	movw	r22, r26
    4740:	03 2e       	mov	r0, r19
    4742:	39 e0       	ldi	r19, 0x09	; 9
    4744:	76 95       	lsr	r23
    4746:	67 95       	ror	r22
    4748:	57 95       	ror	r21
    474a:	47 95       	ror	r20
    474c:	3a 95       	dec	r19
    474e:	d1 f7       	brne	.-12     	; 0x4744 <VL53L0X_get_info_from_device+0x432>
    4750:	30 2d       	mov	r19, r0
    4752:	4f 77       	andi	r20, 0x7F	; 127
    4754:	48 a3       	std	Y+32, r20	; 0x20
    4756:	b6 95       	lsr	r27
    4758:	a7 95       	ror	r26
    475a:	97 95       	ror	r25
    475c:	87 95       	ror	r24
    475e:	b6 95       	lsr	r27
    4760:	a7 95       	ror	r26
    4762:	97 95       	ror	r25
    4764:	87 95       	ror	r24
    4766:	8f 77       	andi	r24, 0x7F	; 127
    4768:	89 a3       	std	Y+33, r24	; 0x21
    476a:	1a a2       	std	Y+34, r1	; 0x22
    476c:	80 2f       	mov	r24, r16
    476e:	84 70       	andi	r24, 0x04	; 4
    4770:	c8 2e       	mov	r12, r24
    4772:	02 ff       	sbrs	r16, 2
    4774:	98 c0       	rjmp	.+304    	; 0x48a6 <VL53L0X_get_info_from_device+0x594>
    4776:	d2 fc       	sbrc	r13, 2
    4778:	9d c0       	rjmp	.+314    	; 0x48b4 <VL53L0X_get_info_from_device+0x5a2>
    477a:	4b e7       	ldi	r20, 0x7B	; 123
    477c:	64 e9       	ldi	r22, 0x94	; 148
    477e:	c7 01       	movw	r24, r14
    4780:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4784:	b8 2e       	mov	r11, r24
    4786:	c7 01       	movw	r24, r14
    4788:	79 dd       	rcall	.-1294   	; 0x427c <VL53L0X_device_read_strobe>
    478a:	8b 29       	or	r24, r11
    478c:	18 2b       	or	r17, r24
    478e:	ae 01       	movw	r20, r28
    4790:	48 5f       	subi	r20, 0xF8	; 248
    4792:	5f 4f       	sbci	r21, 0xFF	; 255
    4794:	60 e9       	ldi	r22, 0x90	; 144
    4796:	c7 01       	movw	r24, r14
    4798:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    479c:	18 2b       	or	r17, r24
    479e:	4c e7       	ldi	r20, 0x7C	; 124
    47a0:	64 e9       	ldi	r22, 0x94	; 148
    47a2:	c7 01       	movw	r24, r14
    47a4:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    47a8:	18 2b       	or	r17, r24
    47aa:	c7 01       	movw	r24, r14
    47ac:	67 dd       	rcall	.-1330   	; 0x427c <VL53L0X_device_read_strobe>
    47ae:	18 2b       	or	r17, r24
    47b0:	ae 01       	movw	r20, r28
    47b2:	44 5f       	subi	r20, 0xF4	; 244
    47b4:	5f 4f       	sbci	r21, 0xFF	; 255
    47b6:	60 e9       	ldi	r22, 0x90	; 144
    47b8:	c7 01       	movw	r24, r14
    47ba:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    47be:	18 2b       	or	r17, r24
    47c0:	43 e7       	ldi	r20, 0x73	; 115
    47c2:	64 e9       	ldi	r22, 0x94	; 148
    47c4:	c7 01       	movw	r24, r14
    47c6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    47ca:	18 2b       	or	r17, r24
    47cc:	c7 01       	movw	r24, r14
    47ce:	56 dd       	rcall	.-1364   	; 0x427c <VL53L0X_device_read_strobe>
    47d0:	18 2b       	or	r17, r24
    47d2:	ae 01       	movw	r20, r28
    47d4:	4e 5f       	subi	r20, 0xFE	; 254
    47d6:	5f 4f       	sbci	r21, 0xFF	; 255
    47d8:	60 e9       	ldi	r22, 0x90	; 144
    47da:	c7 01       	movw	r24, r14
    47dc:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    47e0:	18 2b       	or	r17, r24
    47e2:	8a 80       	ldd	r8, Y+2	; 0x02
    47e4:	9b 80       	ldd	r9, Y+3	; 0x03
    47e6:	ac 80       	ldd	r10, Y+4	; 0x04
    47e8:	bd 80       	ldd	r11, Y+5	; 0x05
    47ea:	ba 2c       	mov	r11, r10
    47ec:	a9 2c       	mov	r10, r9
    47ee:	98 2c       	mov	r9, r8
    47f0:	88 24       	eor	r8, r8
    47f2:	24 01       	movw	r4, r8
    47f4:	35 01       	movw	r6, r10
    47f6:	66 24       	eor	r6, r6
    47f8:	77 24       	eor	r7, r7
    47fa:	44 e7       	ldi	r20, 0x74	; 116
    47fc:	64 e9       	ldi	r22, 0x94	; 148
    47fe:	c7 01       	movw	r24, r14
    4800:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4804:	18 2b       	or	r17, r24
    4806:	c7 01       	movw	r24, r14
    4808:	39 dd       	rcall	.-1422   	; 0x427c <VL53L0X_device_read_strobe>
    480a:	18 2b       	or	r17, r24
    480c:	ae 01       	movw	r20, r28
    480e:	4e 5f       	subi	r20, 0xFE	; 254
    4810:	5f 4f       	sbci	r21, 0xFF	; 255
    4812:	60 e9       	ldi	r22, 0x90	; 144
    4814:	c7 01       	movw	r24, r14
    4816:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    481a:	18 2b       	or	r17, r24
    481c:	8a 80       	ldd	r8, Y+2	; 0x02
    481e:	9b 80       	ldd	r9, Y+3	; 0x03
    4820:	ac 80       	ldd	r10, Y+4	; 0x04
    4822:	bd 80       	ldd	r11, Y+5	; 0x05
    4824:	8b 2c       	mov	r8, r11
    4826:	99 24       	eor	r9, r9
    4828:	aa 24       	eor	r10, r10
    482a:	bb 24       	eor	r11, r11
    482c:	84 28       	or	r8, r4
    482e:	95 28       	or	r9, r5
    4830:	a6 28       	or	r10, r6
    4832:	b7 28       	or	r11, r7
    4834:	45 e7       	ldi	r20, 0x75	; 117
    4836:	64 e9       	ldi	r22, 0x94	; 148
    4838:	c7 01       	movw	r24, r14
    483a:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    483e:	18 2b       	or	r17, r24
    4840:	c7 01       	movw	r24, r14
    4842:	1c dd       	rcall	.-1480   	; 0x427c <VL53L0X_device_read_strobe>
    4844:	18 2b       	or	r17, r24
    4846:	ae 01       	movw	r20, r28
    4848:	4e 5f       	subi	r20, 0xFE	; 254
    484a:	5f 4f       	sbci	r21, 0xFF	; 255
    484c:	60 e9       	ldi	r22, 0x90	; 144
    484e:	c7 01       	movw	r24, r14
    4850:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    4854:	18 2b       	or	r17, r24
    4856:	4a 80       	ldd	r4, Y+2	; 0x02
    4858:	5b 80       	ldd	r5, Y+3	; 0x03
    485a:	6c 80       	ldd	r6, Y+4	; 0x04
    485c:	7d 80       	ldd	r7, Y+5	; 0x05
    485e:	76 2c       	mov	r7, r6
    4860:	65 2c       	mov	r6, r5
    4862:	54 2c       	mov	r5, r4
    4864:	44 24       	eor	r4, r4
    4866:	66 24       	eor	r6, r6
    4868:	77 24       	eor	r7, r7
    486a:	46 e7       	ldi	r20, 0x76	; 118
    486c:	64 e9       	ldi	r22, 0x94	; 148
    486e:	c7 01       	movw	r24, r14
    4870:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4874:	18 2b       	or	r17, r24
    4876:	c7 01       	movw	r24, r14
    4878:	01 dd       	rcall	.-1534   	; 0x427c <VL53L0X_device_read_strobe>
    487a:	18 2b       	or	r17, r24
    487c:	ae 01       	movw	r20, r28
    487e:	4e 5f       	subi	r20, 0xFE	; 254
    4880:	5f 4f       	sbci	r21, 0xFF	; 255
    4882:	60 e9       	ldi	r22, 0x90	; 144
    4884:	c7 01       	movw	r24, r14
    4886:	0e 94 9e 32 	call	0x653c	; 0x653c <VL53L0X_RdDWord>
    488a:	18 2b       	or	r17, r24
    488c:	8a 81       	ldd	r24, Y+2	; 0x02
    488e:	9b 81       	ldd	r25, Y+3	; 0x03
    4890:	ac 81       	ldd	r26, Y+4	; 0x04
    4892:	bd 81       	ldd	r27, Y+5	; 0x05
    4894:	8b 2f       	mov	r24, r27
    4896:	99 27       	eor	r25, r25
    4898:	aa 27       	eor	r26, r26
    489a:	bb 27       	eor	r27, r27
    489c:	48 2a       	or	r4, r24
    489e:	59 2a       	or	r5, r25
    48a0:	6a 2a       	or	r6, r26
    48a2:	7b 2a       	or	r7, r27
    48a4:	0d c0       	rjmp	.+26     	; 0x48c0 <VL53L0X_get_info_from_device+0x5ae>
    48a6:	81 2c       	mov	r8, r1
    48a8:	91 2c       	mov	r9, r1
    48aa:	54 01       	movw	r10, r8
    48ac:	41 2c       	mov	r4, r1
    48ae:	51 2c       	mov	r5, r1
    48b0:	32 01       	movw	r6, r4
    48b2:	06 c0       	rjmp	.+12     	; 0x48c0 <VL53L0X_get_info_from_device+0x5ae>
    48b4:	81 2c       	mov	r8, r1
    48b6:	91 2c       	mov	r9, r1
    48b8:	54 01       	movw	r10, r8
    48ba:	41 2c       	mov	r4, r1
    48bc:	51 2c       	mov	r5, r1
    48be:	32 01       	movw	r6, r4
    48c0:	40 e0       	ldi	r20, 0x00	; 0
    48c2:	61 e8       	ldi	r22, 0x81	; 129
    48c4:	c7 01       	movw	r24, r14
    48c6:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    48ca:	18 2b       	or	r17, r24
    48cc:	46 e0       	ldi	r20, 0x06	; 6
    48ce:	6f ef       	ldi	r22, 0xFF	; 255
    48d0:	c7 01       	movw	r24, r14
    48d2:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    48d6:	18 2b       	or	r17, r24
    48d8:	ae 01       	movw	r20, r28
    48da:	4f 5f       	subi	r20, 0xFF	; 255
    48dc:	5f 4f       	sbci	r21, 0xFF	; 255
    48de:	63 e8       	ldi	r22, 0x83	; 131
    48e0:	c7 01       	movw	r24, r14
    48e2:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    48e6:	18 2b       	or	r17, r24
    48e8:	49 81       	ldd	r20, Y+1	; 0x01
    48ea:	4b 7f       	andi	r20, 0xFB	; 251
    48ec:	63 e8       	ldi	r22, 0x83	; 131
    48ee:	c7 01       	movw	r24, r14
    48f0:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    48f4:	18 2b       	or	r17, r24
    48f6:	41 e0       	ldi	r20, 0x01	; 1
    48f8:	6f ef       	ldi	r22, 0xFF	; 255
    48fa:	c7 01       	movw	r24, r14
    48fc:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4900:	18 2b       	or	r17, r24
    4902:	41 e0       	ldi	r20, 0x01	; 1
    4904:	60 e0       	ldi	r22, 0x00	; 0
    4906:	c7 01       	movw	r24, r14
    4908:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    490c:	18 2b       	or	r17, r24
    490e:	40 e0       	ldi	r20, 0x00	; 0
    4910:	6f ef       	ldi	r22, 0xFF	; 255
    4912:	c7 01       	movw	r24, r14
    4914:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4918:	18 2b       	or	r17, r24
    491a:	40 e0       	ldi	r20, 0x00	; 0
    491c:	60 e8       	ldi	r22, 0x80	; 128
    491e:	c7 01       	movw	r24, r14
    4920:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4924:	18 2b       	or	r17, r24
    4926:	09 f0       	breq	.+2      	; 0x492a <VL53L0X_get_info_from_device+0x618>
    4928:	95 c0       	rjmp	.+298    	; 0x4a54 <VL53L0X_get_info_from_device+0x742>
    492a:	22 20       	and	r2, r2
    492c:	b9 f0       	breq	.+46     	; 0x495c <VL53L0X_get_info_from_device+0x64a>
    492e:	d0 fc       	sbrc	r13, 0
    4930:	15 c0       	rjmp	.+42     	; 0x495c <VL53L0X_get_info_from_device+0x64a>
    4932:	f7 01       	movw	r30, r14
    4934:	ee 5f       	subi	r30, 0xFE	; 254
    4936:	fe 4f       	sbci	r31, 0xFE	; 254
    4938:	29 a5       	ldd	r18, Y+41	; 0x29
    493a:	20 83       	st	Z, r18
    493c:	31 96       	adiw	r30, 0x01	; 1
    493e:	8a a5       	ldd	r24, Y+42	; 0x2a
    4940:	80 83       	st	Z, r24
    4942:	fe 01       	movw	r30, r28
    4944:	b3 96       	adiw	r30, 0x23	; 35
    4946:	d7 01       	movw	r26, r14
    4948:	a9 5e       	subi	r26, 0xE9	; 233
    494a:	be 4f       	sbci	r27, 0xFE	; 254
    494c:	9e 01       	movw	r18, r28
    494e:	27 5d       	subi	r18, 0xD7	; 215
    4950:	3f 4f       	sbci	r19, 0xFF	; 255
    4952:	81 91       	ld	r24, Z+
    4954:	8d 93       	st	X+, r24
    4956:	2e 17       	cp	r18, r30
    4958:	3f 07       	cpc	r19, r31
    495a:	d9 f7       	brne	.-10     	; 0x4952 <VL53L0X_get_info_from_device+0x640>
    495c:	33 20       	and	r3, r3
    495e:	29 f1       	breq	.+74     	; 0x49aa <VL53L0X_get_info_from_device+0x698>
    4960:	d1 fc       	sbrc	r13, 1
    4962:	23 c0       	rjmp	.+70     	; 0x49aa <VL53L0X_get_info_from_device+0x698>
    4964:	8e 81       	ldd	r24, Y+6	; 0x06
    4966:	f7 01       	movw	r30, r14
    4968:	e0 52       	subi	r30, 0x20	; 32
    496a:	ff 4f       	sbci	r31, 0xFF	; 255
    496c:	80 83       	st	Z, r24
    496e:	8f 81       	ldd	r24, Y+7	; 0x07
    4970:	31 96       	adiw	r30, 0x01	; 1
    4972:	80 83       	st	Z, r24
    4974:	97 01       	movw	r18, r14
    4976:	2e 51       	subi	r18, 0x1E	; 30
    4978:	3f 4f       	sbci	r19, 0xFF	; 255
    497a:	98 89       	ldd	r25, Y+16	; 0x10
    497c:	99 23       	and	r25, r25
    497e:	81 f0       	breq	.+32     	; 0x49a0 <VL53L0X_get_info_from_device+0x68e>
    4980:	80 e0       	ldi	r24, 0x00	; 0
    4982:	f9 01       	movw	r30, r18
    4984:	e8 0f       	add	r30, r24
    4986:	f1 1d       	adc	r31, r1
    4988:	90 83       	st	Z, r25
    498a:	8f 5f       	subi	r24, 0xFF	; 255
    498c:	e0 e1       	ldi	r30, 0x10	; 16
    498e:	f0 e0       	ldi	r31, 0x00	; 0
    4990:	ec 0f       	add	r30, r28
    4992:	fd 1f       	adc	r31, r29
    4994:	e8 0f       	add	r30, r24
    4996:	f1 1d       	adc	r31, r1
    4998:	90 81       	ld	r25, Z
    499a:	91 11       	cpse	r25, r1
    499c:	f2 cf       	rjmp	.-28     	; 0x4982 <VL53L0X_get_info_from_device+0x670>
    499e:	01 c0       	rjmp	.+2      	; 0x49a2 <VL53L0X_get_info_from_device+0x690>
    49a0:	80 e0       	ldi	r24, 0x00	; 0
    49a2:	f9 01       	movw	r30, r18
    49a4:	e8 0f       	add	r30, r24
    49a6:	f1 1d       	adc	r31, r1
    49a8:	10 82       	st	Z, r1
    49aa:	cc 20       	and	r12, r12
    49ac:	09 f4       	brne	.+2      	; 0x49b0 <VL53L0X_get_info_from_device+0x69e>
    49ae:	4b c0       	rjmp	.+150    	; 0x4a46 <VL53L0X_get_info_from_device+0x734>
    49b0:	d2 fc       	sbrc	r13, 2
    49b2:	49 c0       	rjmp	.+146    	; 0x4a46 <VL53L0X_get_info_from_device+0x734>
    49b4:	88 85       	ldd	r24, Y+8	; 0x08
    49b6:	99 85       	ldd	r25, Y+9	; 0x09
    49b8:	aa 85       	ldd	r26, Y+10	; 0x0a
    49ba:	bb 85       	ldd	r27, Y+11	; 0x0b
    49bc:	f7 01       	movw	r30, r14
    49be:	eb 5f       	subi	r30, 0xFB	; 251
    49c0:	fe 4f       	sbci	r31, 0xFE	; 254
    49c2:	80 83       	st	Z, r24
    49c4:	91 83       	std	Z+1, r25	; 0x01
    49c6:	a2 83       	std	Z+2, r26	; 0x02
    49c8:	b3 83       	std	Z+3, r27	; 0x03
    49ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    49cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    49ce:	ae 85       	ldd	r26, Y+14	; 0x0e
    49d0:	bf 85       	ldd	r27, Y+15	; 0x0f
    49d2:	34 96       	adiw	r30, 0x04	; 4
    49d4:	80 83       	st	Z, r24
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	a2 83       	std	Z+2, r26	; 0x02
    49da:	b3 83       	std	Z+3, r27	; 0x03
    49dc:	34 96       	adiw	r30, 0x04	; 4
    49de:	07 2e       	mov	r0, r23
    49e0:	79 e0       	ldi	r23, 0x09	; 9
    49e2:	88 0c       	add	r8, r8
    49e4:	99 1c       	adc	r9, r9
    49e6:	aa 1c       	adc	r10, r10
    49e8:	bb 1c       	adc	r11, r11
    49ea:	7a 95       	dec	r23
    49ec:	d1 f7       	brne	.-12     	; 0x49e2 <VL53L0X_get_info_from_device+0x6d0>
    49ee:	70 2d       	mov	r23, r0
    49f0:	80 82       	st	Z, r8
    49f2:	91 82       	std	Z+1, r9	; 0x01
    49f4:	a2 82       	std	Z+2, r10	; 0x02
    49f6:	b3 82       	std	Z+3, r11	; 0x03
    49f8:	41 14       	cp	r4, r1
    49fa:	51 04       	cpc	r5, r1
    49fc:	61 04       	cpc	r6, r1
    49fe:	71 04       	cpc	r7, r1
    4a00:	b9 f0       	breq	.+46     	; 0x4a30 <VL53L0X_get_info_from_device+0x71e>
    4a02:	a3 01       	movw	r20, r6
    4a04:	92 01       	movw	r18, r4
    4a06:	39 51       	subi	r19, 0x19	; 25
    4a08:	41 09       	sbc	r20, r1
    4a0a:	51 09       	sbc	r21, r1
    4a0c:	a8 ee       	ldi	r26, 0xE8	; 232
    4a0e:	b3 e0       	ldi	r27, 0x03	; 3
    4a10:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
    4a14:	dc 01       	movw	r26, r24
    4a16:	cb 01       	movw	r24, r22
    4a18:	68 94       	set
    4a1a:	13 f8       	bld	r1, 3
    4a1c:	b6 95       	lsr	r27
    4a1e:	a7 95       	ror	r26
    4a20:	97 95       	ror	r25
    4a22:	87 95       	ror	r24
    4a24:	16 94       	lsr	r1
    4a26:	d1 f7       	brne	.-12     	; 0x4a1c <VL53L0X_get_info_from_device+0x70a>
    4a28:	91 95       	neg	r25
    4a2a:	81 95       	neg	r24
    4a2c:	91 09       	sbc	r25, r1
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <VL53L0X_get_info_from_device+0x722>
    4a30:	80 e0       	ldi	r24, 0x00	; 0
    4a32:	90 e0       	ldi	r25, 0x00	; 0
    4a34:	09 2e       	mov	r0, r25
    4a36:	00 0c       	add	r0, r0
    4a38:	aa 0b       	sbc	r26, r26
    4a3a:	bb 0b       	sbc	r27, r27
    4a3c:	f7 01       	movw	r30, r14
    4a3e:	84 87       	std	Z+12, r24	; 0x0c
    4a40:	95 87       	std	Z+13, r25	; 0x0d
    4a42:	a6 87       	std	Z+14, r26	; 0x0e
    4a44:	b7 87       	std	Z+15, r27	; 0x0f
    4a46:	f7 01       	movw	r30, r14
    4a48:	e1 52       	subi	r30, 0x21	; 33
    4a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4c:	0d 29       	or	r16, r13
    4a4e:	00 83       	st	Z, r16
    4a50:	01 c0       	rjmp	.+2      	; 0x4a54 <VL53L0X_get_info_from_device+0x742>
    4a52:	10 e0       	ldi	r17, 0x00	; 0
    4a54:	81 2f       	mov	r24, r17
    4a56:	aa 96       	adiw	r28, 0x2a	; 42
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	f8 94       	cli
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	0f be       	out	0x3f, r0	; 63
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	df 91       	pop	r29
    4a64:	cf 91       	pop	r28
    4a66:	1f 91       	pop	r17
    4a68:	0f 91       	pop	r16
    4a6a:	ff 90       	pop	r15
    4a6c:	ef 90       	pop	r14
    4a6e:	df 90       	pop	r13
    4a70:	cf 90       	pop	r12
    4a72:	bf 90       	pop	r11
    4a74:	af 90       	pop	r10
    4a76:	9f 90       	pop	r9
    4a78:	8f 90       	pop	r8
    4a7a:	7f 90       	pop	r7
    4a7c:	6f 90       	pop	r6
    4a7e:	5f 90       	pop	r5
    4a80:	4f 90       	pop	r4
    4a82:	3f 90       	pop	r3
    4a84:	2f 90       	pop	r2
    4a86:	08 95       	ret

00004a88 <VL53L0X_encode_timeout>:
    4a88:	0f 93       	push	r16
    4a8a:	1f 93       	push	r17
    4a8c:	61 15       	cp	r22, r1
    4a8e:	71 05       	cpc	r23, r1
    4a90:	81 05       	cpc	r24, r1
    4a92:	91 05       	cpc	r25, r1
    4a94:	21 f1       	breq	.+72     	; 0x4ade <VL53L0X_encode_timeout+0x56>
    4a96:	ab 01       	movw	r20, r22
    4a98:	bc 01       	movw	r22, r24
    4a9a:	41 50       	subi	r20, 0x01	; 1
    4a9c:	51 09       	sbc	r21, r1
    4a9e:	61 09       	sbc	r22, r1
    4aa0:	71 09       	sbc	r23, r1
    4aa2:	db 01       	movw	r26, r22
    4aa4:	ca 01       	movw	r24, r20
    4aa6:	88 27       	eor	r24, r24
    4aa8:	89 2b       	or	r24, r25
    4aaa:	8a 2b       	or	r24, r26
    4aac:	8b 2b       	or	r24, r27
    4aae:	79 f0       	breq	.+30     	; 0x4ace <VL53L0X_encode_timeout+0x46>
    4ab0:	80 e0       	ldi	r24, 0x00	; 0
    4ab2:	90 e0       	ldi	r25, 0x00	; 0
    4ab4:	76 95       	lsr	r23
    4ab6:	67 95       	ror	r22
    4ab8:	57 95       	ror	r21
    4aba:	47 95       	ror	r20
    4abc:	01 96       	adiw	r24, 0x01	; 1
    4abe:	8a 01       	movw	r16, r20
    4ac0:	9b 01       	movw	r18, r22
    4ac2:	00 27       	eor	r16, r16
    4ac4:	01 2b       	or	r16, r17
    4ac6:	02 2b       	or	r16, r18
    4ac8:	03 2b       	or	r16, r19
    4aca:	a1 f7       	brne	.-24     	; 0x4ab4 <VL53L0X_encode_timeout+0x2c>
    4acc:	02 c0       	rjmp	.+4      	; 0x4ad2 <VL53L0X_encode_timeout+0x4a>
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	98 2f       	mov	r25, r24
    4ad4:	88 27       	eor	r24, r24
    4ad6:	55 27       	eor	r21, r21
    4ad8:	84 0f       	add	r24, r20
    4ada:	95 1f       	adc	r25, r21
    4adc:	02 c0       	rjmp	.+4      	; 0x4ae2 <VL53L0X_encode_timeout+0x5a>
    4ade:	80 e0       	ldi	r24, 0x00	; 0
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	1f 91       	pop	r17
    4ae4:	0f 91       	pop	r16
    4ae6:	08 95       	ret

00004ae8 <VL53L0X_calc_timeout_mclks>:
    4ae8:	8f 92       	push	r8
    4aea:	9f 92       	push	r9
    4aec:	af 92       	push	r10
    4aee:	bf 92       	push	r11
    4af0:	cf 92       	push	r12
    4af2:	df 92       	push	r13
    4af4:	ef 92       	push	r14
    4af6:	ff 92       	push	r15
    4af8:	4a 01       	movw	r8, r20
    4afa:	5b 01       	movw	r10, r22
    4afc:	a2 2f       	mov	r26, r18
    4afe:	b0 e0       	ldi	r27, 0x00	; 0
    4b00:	20 e0       	ldi	r18, 0x00	; 0
    4b02:	3f e2       	ldi	r19, 0x2F	; 47
    4b04:	4a e3       	ldi	r20, 0x3A	; 58
    4b06:	50 e0       	ldi	r21, 0x00	; 0
    4b08:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
    4b0c:	6b 01       	movw	r12, r22
    4b0e:	7c 01       	movw	r14, r24
    4b10:	24 ef       	ldi	r18, 0xF4	; 244
    4b12:	c2 0e       	add	r12, r18
    4b14:	21 e0       	ldi	r18, 0x01	; 1
    4b16:	d2 1e       	adc	r13, r18
    4b18:	e1 1c       	adc	r14, r1
    4b1a:	f1 1c       	adc	r15, r1
    4b1c:	a8 ee       	ldi	r26, 0xE8	; 232
    4b1e:	b3 e0       	ldi	r27, 0x03	; 3
    4b20:	a5 01       	movw	r20, r10
    4b22:	94 01       	movw	r18, r8
    4b24:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
    4b28:	4b 01       	movw	r8, r22
    4b2a:	5c 01       	movw	r10, r24
    4b2c:	c7 01       	movw	r24, r14
    4b2e:	b6 01       	movw	r22, r12
    4b30:	20 ed       	ldi	r18, 0xD0	; 208
    4b32:	37 e0       	ldi	r19, 0x07	; 7
    4b34:	40 e0       	ldi	r20, 0x00	; 0
    4b36:	50 e0       	ldi	r21, 0x00	; 0
    4b38:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    4b3c:	82 0e       	add	r8, r18
    4b3e:	93 1e       	adc	r9, r19
    4b40:	a4 1e       	adc	r10, r20
    4b42:	b5 1e       	adc	r11, r21
    4b44:	c7 01       	movw	r24, r14
    4b46:	b6 01       	movw	r22, r12
    4b48:	28 ee       	ldi	r18, 0xE8	; 232
    4b4a:	33 e0       	ldi	r19, 0x03	; 3
    4b4c:	40 e0       	ldi	r20, 0x00	; 0
    4b4e:	50 e0       	ldi	r21, 0x00	; 0
    4b50:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    4b54:	c5 01       	movw	r24, r10
    4b56:	b4 01       	movw	r22, r8
    4b58:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    4b5c:	ca 01       	movw	r24, r20
    4b5e:	b9 01       	movw	r22, r18
    4b60:	ff 90       	pop	r15
    4b62:	ef 90       	pop	r14
    4b64:	df 90       	pop	r13
    4b66:	cf 90       	pop	r12
    4b68:	bf 90       	pop	r11
    4b6a:	af 90       	pop	r10
    4b6c:	9f 90       	pop	r9
    4b6e:	8f 90       	pop	r8
    4b70:	08 95       	ret

00004b72 <VL53L0X_calc_timeout_us>:
    4b72:	cf 92       	push	r12
    4b74:	df 92       	push	r13
    4b76:	ef 92       	push	r14
    4b78:	ff 92       	push	r15
    4b7a:	cf 93       	push	r28
    4b7c:	df 93       	push	r29
    4b7e:	eb 01       	movw	r28, r22
    4b80:	a4 2f       	mov	r26, r20
    4b82:	b0 e0       	ldi	r27, 0x00	; 0
    4b84:	20 e0       	ldi	r18, 0x00	; 0
    4b86:	3f e2       	ldi	r19, 0x2F	; 47
    4b88:	4a e3       	ldi	r20, 0x3A	; 58
    4b8a:	50 e0       	ldi	r21, 0x00	; 0
    4b8c:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
    4b90:	6c 50       	subi	r22, 0x0C	; 12
    4b92:	7e 4f       	sbci	r23, 0xFE	; 254
    4b94:	8f 4f       	sbci	r24, 0xFF	; 255
    4b96:	9f 4f       	sbci	r25, 0xFF	; 255
    4b98:	0f 2e       	mov	r0, r31
    4b9a:	f8 ee       	ldi	r31, 0xE8	; 232
    4b9c:	cf 2e       	mov	r12, r31
    4b9e:	f3 e0       	ldi	r31, 0x03	; 3
    4ba0:	df 2e       	mov	r13, r31
    4ba2:	e1 2c       	mov	r14, r1
    4ba4:	f1 2c       	mov	r15, r1
    4ba6:	f0 2d       	mov	r31, r0
    4ba8:	a7 01       	movw	r20, r14
    4baa:	96 01       	movw	r18, r12
    4bac:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    4bb0:	de 01       	movw	r26, r28
    4bb2:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
    4bb6:	6c 50       	subi	r22, 0x0C	; 12
    4bb8:	7e 4f       	sbci	r23, 0xFE	; 254
    4bba:	8f 4f       	sbci	r24, 0xFF	; 255
    4bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    4bbe:	a7 01       	movw	r20, r14
    4bc0:	96 01       	movw	r18, r12
    4bc2:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <__udivmodsi4>
    4bc6:	ca 01       	movw	r24, r20
    4bc8:	b9 01       	movw	r22, r18
    4bca:	df 91       	pop	r29
    4bcc:	cf 91       	pop	r28
    4bce:	ff 90       	pop	r15
    4bd0:	ef 90       	pop	r14
    4bd2:	df 90       	pop	r13
    4bd4:	cf 90       	pop	r12
    4bd6:	08 95       	ret

00004bd8 <get_sequence_step_timeout>:
    4bd8:	af 92       	push	r10
    4bda:	bf 92       	push	r11
    4bdc:	cf 92       	push	r12
    4bde:	df 92       	push	r13
    4be0:	ef 92       	push	r14
    4be2:	ff 92       	push	r15
    4be4:	1f 93       	push	r17
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
    4bea:	cd b7       	in	r28, 0x3d	; 61
    4bec:	de b7       	in	r29, 0x3e	; 62
    4bee:	2b 97       	sbiw	r28, 0x0b	; 11
    4bf0:	0f b6       	in	r0, 0x3f	; 63
    4bf2:	f8 94       	cli
    4bf4:	de bf       	out	0x3e, r29	; 62
    4bf6:	0f be       	out	0x3f, r0	; 63
    4bf8:	cd bf       	out	0x3d, r28	; 61
    4bfa:	7c 01       	movw	r14, r24
    4bfc:	6a 01       	movw	r12, r20
    4bfe:	1a 82       	std	Y+2, r1	; 0x02
    4c00:	1c 82       	std	Y+4, r1	; 0x04
    4c02:	1b 82       	std	Y+3, r1	; 0x03
    4c04:	63 30       	cpi	r22, 0x03	; 3
    4c06:	00 f5       	brcc	.+64     	; 0x4c48 <get_sequence_step_timeout+0x70>
    4c08:	ae 01       	movw	r20, r28
    4c0a:	4f 5f       	subi	r20, 0xFF	; 255
    4c0c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c0e:	60 e0       	ldi	r22, 0x00	; 0
    4c10:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4c14:	18 2f       	mov	r17, r24
    4c16:	81 11       	cpse	r24, r1
    4c18:	08 c0       	rjmp	.+16     	; 0x4c2a <get_sequence_step_timeout+0x52>
    4c1a:	ae 01       	movw	r20, r28
    4c1c:	4e 5f       	subi	r20, 0xFE	; 254
    4c1e:	5f 4f       	sbci	r21, 0xFF	; 255
    4c20:	66 e4       	ldi	r22, 0x46	; 70
    4c22:	c7 01       	movw	r24, r14
    4c24:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
    4c28:	18 2f       	mov	r17, r24
    4c2a:	6a 81       	ldd	r22, Y+2	; 0x02
    4c2c:	86 2f       	mov	r24, r22
    4c2e:	90 e0       	ldi	r25, 0x00	; 0
    4c30:	a0 e0       	ldi	r26, 0x00	; 0
    4c32:	b0 e0       	ldi	r27, 0x00	; 0
    4c34:	bc 01       	movw	r22, r24
    4c36:	cd 01       	movw	r24, r26
    4c38:	6f 5f       	subi	r22, 0xFF	; 255
    4c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    4c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    4c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c40:	49 81       	ldd	r20, Y+1	; 0x01
    4c42:	c7 01       	movw	r24, r14
    4c44:	96 df       	rcall	.-212    	; 0x4b72 <VL53L0X_calc_timeout_us>
    4c46:	a4 c0       	rjmp	.+328    	; 0x4d90 <get_sequence_step_timeout+0x1b8>
    4c48:	63 30       	cpi	r22, 0x03	; 3
    4c4a:	99 f5       	brne	.+102    	; 0x4cb2 <get_sequence_step_timeout+0xda>
    4c4c:	ae 01       	movw	r20, r28
    4c4e:	4f 5f       	subi	r20, 0xFF	; 255
    4c50:	5f 4f       	sbci	r21, 0xFF	; 255
    4c52:	60 e0       	ldi	r22, 0x00	; 0
    4c54:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4c58:	18 2f       	mov	r17, r24
    4c5a:	81 11       	cpse	r24, r1
    4c5c:	91 c0       	rjmp	.+290    	; 0x4d80 <get_sequence_step_timeout+0x1a8>
    4c5e:	ae 01       	movw	r20, r28
    4c60:	4f 5f       	subi	r20, 0xFF	; 255
    4c62:	5f 4f       	sbci	r21, 0xFF	; 255
    4c64:	60 e0       	ldi	r22, 0x00	; 0
    4c66:	c7 01       	movw	r24, r14
    4c68:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4c6c:	18 2f       	mov	r17, r24
    4c6e:	81 11       	cpse	r24, r1
    4c70:	08 c0       	rjmp	.+16     	; 0x4c82 <get_sequence_step_timeout+0xaa>
    4c72:	ae 01       	movw	r20, r28
    4c74:	4d 5f       	subi	r20, 0xFD	; 253
    4c76:	5f 4f       	sbci	r21, 0xFF	; 255
    4c78:	61 e5       	ldi	r22, 0x51	; 81
    4c7a:	c7 01       	movw	r24, r14
    4c7c:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    4c80:	18 2f       	mov	r17, r24
    4c82:	2b 81       	ldd	r18, Y+3	; 0x03
    4c84:	3c 81       	ldd	r19, Y+4	; 0x04
    4c86:	b9 01       	movw	r22, r18
    4c88:	77 27       	eor	r23, r23
    4c8a:	cb 01       	movw	r24, r22
    4c8c:	a0 e0       	ldi	r26, 0x00	; 0
    4c8e:	b0 e0       	ldi	r27, 0x00	; 0
    4c90:	04 c0       	rjmp	.+8      	; 0x4c9a <get_sequence_step_timeout+0xc2>
    4c92:	88 0f       	add	r24, r24
    4c94:	99 1f       	adc	r25, r25
    4c96:	aa 1f       	adc	r26, r26
    4c98:	bb 1f       	adc	r27, r27
    4c9a:	3a 95       	dec	r19
    4c9c:	d2 f7       	brpl	.-12     	; 0x4c92 <get_sequence_step_timeout+0xba>
    4c9e:	bc 01       	movw	r22, r24
    4ca0:	cd 01       	movw	r24, r26
    4ca2:	6f 5f       	subi	r22, 0xFF	; 255
    4ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    4caa:	49 81       	ldd	r20, Y+1	; 0x01
    4cac:	c7 01       	movw	r24, r14
    4cae:	61 df       	rcall	.-318    	; 0x4b72 <VL53L0X_calc_timeout_us>
    4cb0:	6f c0       	rjmp	.+222    	; 0x4d90 <get_sequence_step_timeout+0x1b8>
    4cb2:	64 30       	cpi	r22, 0x04	; 4
    4cb4:	09 f0       	breq	.+2      	; 0x4cb8 <get_sequence_step_timeout+0xe0>
    4cb6:	68 c0       	rjmp	.+208    	; 0x4d88 <get_sequence_step_timeout+0x1b0>
    4cb8:	be 01       	movw	r22, r28
    4cba:	69 5f       	subi	r22, 0xF9	; 249
    4cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    4cbe:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <VL53L0X_GetSequenceStepEnables>
    4cc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    4cc4:	88 23       	and	r24, r24
    4cc6:	31 f1       	breq	.+76     	; 0x4d14 <get_sequence_step_timeout+0x13c>
    4cc8:	ae 01       	movw	r20, r28
    4cca:	4f 5f       	subi	r20, 0xFF	; 255
    4ccc:	5f 4f       	sbci	r21, 0xFF	; 255
    4cce:	60 e0       	ldi	r22, 0x00	; 0
    4cd0:	c7 01       	movw	r24, r14
    4cd2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4cd6:	18 2f       	mov	r17, r24
    4cd8:	81 11       	cpse	r24, r1
    4cda:	41 c0       	rjmp	.+130    	; 0x4d5e <get_sequence_step_timeout+0x186>
    4cdc:	ae 01       	movw	r20, r28
    4cde:	4d 5f       	subi	r20, 0xFD	; 253
    4ce0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ce2:	61 e5       	ldi	r22, 0x51	; 81
    4ce4:	c7 01       	movw	r24, r14
    4ce6:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    4cea:	18 2f       	mov	r17, r24
    4cec:	2b 81       	ldd	r18, Y+3	; 0x03
    4cee:	3c 81       	ldd	r19, Y+4	; 0x04
    4cf0:	c9 01       	movw	r24, r18
    4cf2:	99 27       	eor	r25, r25
    4cf4:	a0 e0       	ldi	r26, 0x00	; 0
    4cf6:	b0 e0       	ldi	r27, 0x00	; 0
    4cf8:	04 c0       	rjmp	.+8      	; 0x4d02 <get_sequence_step_timeout+0x12a>
    4cfa:	88 0f       	add	r24, r24
    4cfc:	99 1f       	adc	r25, r25
    4cfe:	aa 1f       	adc	r26, r26
    4d00:	bb 1f       	adc	r27, r27
    4d02:	3a 95       	dec	r19
    4d04:	d2 f7       	brpl	.-12     	; 0x4cfa <get_sequence_step_timeout+0x122>
    4d06:	01 96       	adiw	r24, 0x01	; 1
    4d08:	a1 1d       	adc	r26, r1
    4d0a:	b1 1d       	adc	r27, r1
    4d0c:	5c 01       	movw	r10, r24
    4d0e:	11 11       	cpse	r17, r1
    4d10:	2b c0       	rjmp	.+86     	; 0x4d68 <get_sequence_step_timeout+0x190>
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <get_sequence_step_timeout+0x140>
    4d14:	a1 2c       	mov	r10, r1
    4d16:	b1 2c       	mov	r11, r1
    4d18:	ae 01       	movw	r20, r28
    4d1a:	4f 5f       	subi	r20, 0xFF	; 255
    4d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4d1e:	61 e0       	ldi	r22, 0x01	; 1
    4d20:	c7 01       	movw	r24, r14
    4d22:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4d26:	18 2f       	mov	r17, r24
    4d28:	81 11       	cpse	r24, r1
    4d2a:	21 c0       	rjmp	.+66     	; 0x4d6e <get_sequence_step_timeout+0x196>
    4d2c:	ae 01       	movw	r20, r28
    4d2e:	4b 5f       	subi	r20, 0xFB	; 251
    4d30:	5f 4f       	sbci	r21, 0xFF	; 255
    4d32:	61 e7       	ldi	r22, 0x71	; 113
    4d34:	c7 01       	movw	r24, r14
    4d36:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    4d3a:	18 2f       	mov	r17, r24
    4d3c:	2d 81       	ldd	r18, Y+5	; 0x05
    4d3e:	3e 81       	ldd	r19, Y+6	; 0x06
    4d40:	c9 01       	movw	r24, r18
    4d42:	99 27       	eor	r25, r25
    4d44:	a0 e0       	ldi	r26, 0x00	; 0
    4d46:	b0 e0       	ldi	r27, 0x00	; 0
    4d48:	04 c0       	rjmp	.+8      	; 0x4d52 <get_sequence_step_timeout+0x17a>
    4d4a:	88 0f       	add	r24, r24
    4d4c:	99 1f       	adc	r25, r25
    4d4e:	aa 1f       	adc	r26, r26
    4d50:	bb 1f       	adc	r27, r27
    4d52:	3a 95       	dec	r19
    4d54:	d2 f7       	brpl	.-12     	; 0x4d4a <get_sequence_step_timeout+0x172>
    4d56:	01 96       	adiw	r24, 0x01	; 1
    4d58:	a1 1d       	adc	r26, r1
    4d5a:	b1 1d       	adc	r27, r1
    4d5c:	0a c0       	rjmp	.+20     	; 0x4d72 <get_sequence_step_timeout+0x19a>
    4d5e:	a1 2c       	mov	r10, r1
    4d60:	b1 2c       	mov	r11, r1
    4d62:	80 e0       	ldi	r24, 0x00	; 0
    4d64:	90 e0       	ldi	r25, 0x00	; 0
    4d66:	05 c0       	rjmp	.+10     	; 0x4d72 <get_sequence_step_timeout+0x19a>
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	02 c0       	rjmp	.+4      	; 0x4d72 <get_sequence_step_timeout+0x19a>
    4d6e:	80 e0       	ldi	r24, 0x00	; 0
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	bc 01       	movw	r22, r24
    4d74:	6a 19       	sub	r22, r10
    4d76:	7b 09       	sbc	r23, r11
    4d78:	49 81       	ldd	r20, Y+1	; 0x01
    4d7a:	c7 01       	movw	r24, r14
    4d7c:	fa de       	rcall	.-524    	; 0x4b72 <VL53L0X_calc_timeout_us>
    4d7e:	08 c0       	rjmp	.+16     	; 0x4d90 <get_sequence_step_timeout+0x1b8>
    4d80:	60 e0       	ldi	r22, 0x00	; 0
    4d82:	70 e0       	ldi	r23, 0x00	; 0
    4d84:	cb 01       	movw	r24, r22
    4d86:	04 c0       	rjmp	.+8      	; 0x4d90 <get_sequence_step_timeout+0x1b8>
    4d88:	60 e0       	ldi	r22, 0x00	; 0
    4d8a:	70 e0       	ldi	r23, 0x00	; 0
    4d8c:	cb 01       	movw	r24, r22
    4d8e:	10 e0       	ldi	r17, 0x00	; 0
    4d90:	f6 01       	movw	r30, r12
    4d92:	60 83       	st	Z, r22
    4d94:	71 83       	std	Z+1, r23	; 0x01
    4d96:	82 83       	std	Z+2, r24	; 0x02
    4d98:	93 83       	std	Z+3, r25	; 0x03
    4d9a:	81 2f       	mov	r24, r17
    4d9c:	2b 96       	adiw	r28, 0x0b	; 11
    4d9e:	0f b6       	in	r0, 0x3f	; 63
    4da0:	f8 94       	cli
    4da2:	de bf       	out	0x3e, r29	; 62
    4da4:	0f be       	out	0x3f, r0	; 63
    4da6:	cd bf       	out	0x3d, r28	; 61
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	1f 91       	pop	r17
    4dae:	ff 90       	pop	r15
    4db0:	ef 90       	pop	r14
    4db2:	df 90       	pop	r13
    4db4:	cf 90       	pop	r12
    4db6:	bf 90       	pop	r11
    4db8:	af 90       	pop	r10
    4dba:	08 95       	ret

00004dbc <set_sequence_step_timeout>:
    4dbc:	8f 92       	push	r8
    4dbe:	9f 92       	push	r9
    4dc0:	af 92       	push	r10
    4dc2:	bf 92       	push	r11
    4dc4:	cf 92       	push	r12
    4dc6:	df 92       	push	r13
    4dc8:	ef 92       	push	r14
    4dca:	ff 92       	push	r15
    4dcc:	0f 93       	push	r16
    4dce:	1f 93       	push	r17
    4dd0:	cf 93       	push	r28
    4dd2:	df 93       	push	r29
    4dd4:	cd b7       	in	r28, 0x3d	; 61
    4dd6:	de b7       	in	r29, 0x3e	; 62
    4dd8:	28 97       	sbiw	r28, 0x08	; 8
    4dda:	0f b6       	in	r0, 0x3f	; 63
    4ddc:	f8 94       	cli
    4dde:	de bf       	out	0x3e, r29	; 62
    4de0:	0f be       	out	0x3f, r0	; 63
    4de2:	cd bf       	out	0x3d, r28	; 61
    4de4:	8c 01       	movw	r16, r24
    4de6:	49 01       	movw	r8, r18
    4de8:	5a 01       	movw	r10, r20
    4dea:	63 30       	cpi	r22, 0x03	; 3
    4dec:	18 f5       	brcc	.+70     	; 0x4e34 <set_sequence_step_timeout+0x78>
    4dee:	ae 01       	movw	r20, r28
    4df0:	4f 5f       	subi	r20, 0xFF	; 255
    4df2:	5f 4f       	sbci	r21, 0xFF	; 255
    4df4:	60 e0       	ldi	r22, 0x00	; 0
    4df6:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4dfa:	f8 2e       	mov	r15, r24
    4dfc:	81 11       	cpse	r24, r1
    4dfe:	a1 c0       	rjmp	.+322    	; 0x4f42 <set_sequence_step_timeout+0x186>
    4e00:	29 81       	ldd	r18, Y+1	; 0x01
    4e02:	b5 01       	movw	r22, r10
    4e04:	a4 01       	movw	r20, r8
    4e06:	c8 01       	movw	r24, r16
    4e08:	6f de       	rcall	.-802    	; 0x4ae8 <VL53L0X_calc_timeout_mclks>
    4e0a:	61 30       	cpi	r22, 0x01	; 1
    4e0c:	21 e0       	ldi	r18, 0x01	; 1
    4e0e:	72 07       	cpc	r23, r18
    4e10:	18 f4       	brcc	.+6      	; 0x4e18 <set_sequence_step_timeout+0x5c>
    4e12:	4f ef       	ldi	r20, 0xFF	; 255
    4e14:	46 0f       	add	r20, r22
    4e16:	01 c0       	rjmp	.+2      	; 0x4e1a <set_sequence_step_timeout+0x5e>
    4e18:	4f ef       	ldi	r20, 0xFF	; 255
    4e1a:	f8 01       	movw	r30, r16
    4e1c:	e4 53       	subi	r30, 0x34	; 52
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	84 2f       	mov	r24, r20
    4e22:	90 e0       	ldi	r25, 0x00	; 0
    4e24:	91 83       	std	Z+1, r25	; 0x01
    4e26:	80 83       	st	Z, r24
    4e28:	66 e4       	ldi	r22, 0x46	; 70
    4e2a:	c8 01       	movw	r24, r16
    4e2c:	0e 94 fd 31 	call	0x63fa	; 0x63fa <VL53L0X_WrByte>
    4e30:	f8 2e       	mov	r15, r24
    4e32:	87 c0       	rjmp	.+270    	; 0x4f42 <set_sequence_step_timeout+0x186>
    4e34:	63 30       	cpi	r22, 0x03	; 3
    4e36:	41 f5       	brne	.+80     	; 0x4e88 <set_sequence_step_timeout+0xcc>
    4e38:	ae 01       	movw	r20, r28
    4e3a:	4f 5f       	subi	r20, 0xFF	; 255
    4e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    4e3e:	60 e0       	ldi	r22, 0x00	; 0
    4e40:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4e44:	f8 2e       	mov	r15, r24
    4e46:	29 81       	ldd	r18, Y+1	; 0x01
    4e48:	b5 01       	movw	r22, r10
    4e4a:	a4 01       	movw	r20, r8
    4e4c:	c8 01       	movw	r24, r16
    4e4e:	4c de       	rcall	.-872    	; 0x4ae8 <VL53L0X_calc_timeout_mclks>
    4e50:	88 27       	eor	r24, r24
    4e52:	99 27       	eor	r25, r25
    4e54:	19 de       	rcall	.-974    	; 0x4a88 <VL53L0X_encode_timeout>
    4e56:	9b 83       	std	Y+3, r25	; 0x03
    4e58:	8a 83       	std	Y+2, r24	; 0x02
    4e5a:	f8 01       	movw	r30, r16
    4e5c:	e4 53       	subi	r30, 0x34	; 52
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	91 83       	std	Z+1, r25	; 0x01
    4e62:	80 83       	st	Z, r24
    4e64:	f1 10       	cpse	r15, r1
    4e66:	6d c0       	rjmp	.+218    	; 0x4f42 <set_sequence_step_timeout+0x186>
    4e68:	ac 01       	movw	r20, r24
    4e6a:	61 e5       	ldi	r22, 0x51	; 81
    4e6c:	c8 01       	movw	r24, r16
    4e6e:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    4e72:	f8 2e       	mov	r15, r24
    4e74:	81 11       	cpse	r24, r1
    4e76:	65 c0       	rjmp	.+202    	; 0x4f42 <set_sequence_step_timeout+0x186>
    4e78:	f8 01       	movw	r30, r16
    4e7a:	ec 52       	subi	r30, 0x2C	; 44
    4e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7e:	80 82       	st	Z, r8
    4e80:	91 82       	std	Z+1, r9	; 0x01
    4e82:	a2 82       	std	Z+2, r10	; 0x02
    4e84:	b3 82       	std	Z+3, r11	; 0x03
    4e86:	5d c0       	rjmp	.+186    	; 0x4f42 <set_sequence_step_timeout+0x186>
    4e88:	64 30       	cpi	r22, 0x04	; 4
    4e8a:	09 f0       	breq	.+2      	; 0x4e8e <set_sequence_step_timeout+0xd2>
    4e8c:	56 c0       	rjmp	.+172    	; 0x4f3a <set_sequence_step_timeout+0x17e>
    4e8e:	be 01       	movw	r22, r28
    4e90:	6c 5f       	subi	r22, 0xFC	; 252
    4e92:	7f 4f       	sbci	r23, 0xFF	; 255
    4e94:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <VL53L0X_GetSequenceStepEnables>
    4e98:	8f 81       	ldd	r24, Y+7	; 0x07
    4e9a:	88 23       	and	r24, r24
    4e9c:	41 f1       	breq	.+80     	; 0x4eee <set_sequence_step_timeout+0x132>
    4e9e:	ae 01       	movw	r20, r28
    4ea0:	4f 5f       	subi	r20, 0xFF	; 255
    4ea2:	5f 4f       	sbci	r21, 0xFF	; 255
    4ea4:	60 e0       	ldi	r22, 0x00	; 0
    4ea6:	c8 01       	movw	r24, r16
    4ea8:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4eac:	f8 2e       	mov	r15, r24
    4eae:	81 11       	cpse	r24, r1
    4eb0:	48 c0       	rjmp	.+144    	; 0x4f42 <set_sequence_step_timeout+0x186>
    4eb2:	ae 01       	movw	r20, r28
    4eb4:	4e 5f       	subi	r20, 0xFE	; 254
    4eb6:	5f 4f       	sbci	r21, 0xFF	; 255
    4eb8:	61 e5       	ldi	r22, 0x51	; 81
    4eba:	c8 01       	movw	r24, r16
    4ebc:	0e 94 77 32 	call	0x64ee	; 0x64ee <VL53L0X_RdWord>
    4ec0:	f8 2e       	mov	r15, r24
    4ec2:	81 11       	cpse	r24, r1
    4ec4:	3e c0       	rjmp	.+124    	; 0x4f42 <set_sequence_step_timeout+0x186>
    4ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    4eca:	6c 01       	movw	r12, r24
    4ecc:	dd 24       	eor	r13, r13
    4ece:	e1 2c       	mov	r14, r1
    4ed0:	f1 2c       	mov	r15, r1
    4ed2:	04 c0       	rjmp	.+8      	; 0x4edc <set_sequence_step_timeout+0x120>
    4ed4:	cc 0c       	add	r12, r12
    4ed6:	dd 1c       	adc	r13, r13
    4ed8:	ee 1c       	adc	r14, r14
    4eda:	ff 1c       	adc	r15, r15
    4edc:	9a 95       	dec	r25
    4ede:	d2 f7       	brpl	.-12     	; 0x4ed4 <set_sequence_step_timeout+0x118>
    4ee0:	d7 01       	movw	r26, r14
    4ee2:	c6 01       	movw	r24, r12
    4ee4:	01 96       	adiw	r24, 0x01	; 1
    4ee6:	a1 1d       	adc	r26, r1
    4ee8:	b1 1d       	adc	r27, r1
    4eea:	6c 01       	movw	r12, r24
    4eec:	02 c0       	rjmp	.+4      	; 0x4ef2 <set_sequence_step_timeout+0x136>
    4eee:	c1 2c       	mov	r12, r1
    4ef0:	d1 2c       	mov	r13, r1
    4ef2:	ae 01       	movw	r20, r28
    4ef4:	4f 5f       	subi	r20, 0xFF	; 255
    4ef6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ef8:	61 e0       	ldi	r22, 0x01	; 1
    4efa:	c8 01       	movw	r24, r16
    4efc:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <VL53L0X_GetVcselPulsePeriod>
    4f00:	f8 2e       	mov	r15, r24
    4f02:	81 11       	cpse	r24, r1
    4f04:	1e c0       	rjmp	.+60     	; 0x4f42 <set_sequence_step_timeout+0x186>
    4f06:	29 81       	ldd	r18, Y+1	; 0x01
    4f08:	b5 01       	movw	r22, r10
    4f0a:	a4 01       	movw	r20, r8
    4f0c:	c8 01       	movw	r24, r16
    4f0e:	ec dd       	rcall	.-1064   	; 0x4ae8 <VL53L0X_calc_timeout_mclks>
    4f10:	6c 0d       	add	r22, r12
    4f12:	7d 1d       	adc	r23, r13
    4f14:	81 1d       	adc	r24, r1
    4f16:	91 1d       	adc	r25, r1
    4f18:	b7 dd       	rcall	.-1170   	; 0x4a88 <VL53L0X_encode_timeout>
    4f1a:	ac 01       	movw	r20, r24
    4f1c:	61 e7       	ldi	r22, 0x71	; 113
    4f1e:	c8 01       	movw	r24, r16
    4f20:	0e 94 16 32 	call	0x642c	; 0x642c <VL53L0X_WrWord>
    4f24:	f8 2e       	mov	r15, r24
    4f26:	81 11       	cpse	r24, r1
    4f28:	0c c0       	rjmp	.+24     	; 0x4f42 <set_sequence_step_timeout+0x186>
    4f2a:	f8 01       	movw	r30, r16
    4f2c:	e1 53       	subi	r30, 0x31	; 49
    4f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f30:	80 82       	st	Z, r8
    4f32:	91 82       	std	Z+1, r9	; 0x01
    4f34:	a2 82       	std	Z+2, r10	; 0x02
    4f36:	b3 82       	std	Z+3, r11	; 0x03
    4f38:	04 c0       	rjmp	.+8      	; 0x4f42 <set_sequence_step_timeout+0x186>
    4f3a:	0f 2e       	mov	r0, r31
    4f3c:	fc ef       	ldi	r31, 0xFC	; 252
    4f3e:	ff 2e       	mov	r15, r31
    4f40:	f0 2d       	mov	r31, r0
    4f42:	8f 2d       	mov	r24, r15
    4f44:	28 96       	adiw	r28, 0x08	; 8
    4f46:	0f b6       	in	r0, 0x3f	; 63
    4f48:	f8 94       	cli
    4f4a:	de bf       	out	0x3e, r29	; 62
    4f4c:	0f be       	out	0x3f, r0	; 63
    4f4e:	cd bf       	out	0x3d, r28	; 61
    4f50:	df 91       	pop	r29
    4f52:	cf 91       	pop	r28
    4f54:	1f 91       	pop	r17
    4f56:	0f 91       	pop	r16
    4f58:	ff 90       	pop	r15
    4f5a:	ef 90       	pop	r14
    4f5c:	df 90       	pop	r13
    4f5e:	cf 90       	pop	r12
    4f60:	bf 90       	pop	r11
    4f62:	af 90       	pop	r10
    4f64:	9f 90       	pop	r9
    4f66:	8f 90       	pop	r8
    4f68:	08 95       	ret

00004f6a <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, u8 *pVCSELPulsePeriodPCLK)
{
    4f6a:	0f 93       	push	r16
    4f6c:	1f 93       	push	r17
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
    4f72:	1f 92       	push	r1
    4f74:	cd b7       	in	r28, 0x3d	; 61
    4f76:	de b7       	in	r29, 0x3e	; 62
    4f78:	8a 01       	movw	r16, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 vcsel_period_reg;

	switch (VcselPeriodType) {
    4f7a:	66 23       	and	r22, r22
    4f7c:	19 f0       	breq	.+6      	; 0x4f84 <VL53L0X_get_vcsel_pulse_period+0x1a>
    4f7e:	61 30       	cpi	r22, 0x01	; 1
    4f80:	41 f0       	breq	.+16     	; 0x4f92 <VL53L0X_get_vcsel_pulse_period+0x28>
    4f82:	0e c0       	rjmp	.+28     	; 0x4fa0 <VL53L0X_get_vcsel_pulse_period+0x36>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
    4f84:	ae 01       	movw	r20, r28
    4f86:	4f 5f       	subi	r20, 0xFF	; 255
    4f88:	5f 4f       	sbci	r21, 0xFF	; 255
    4f8a:	60 e5       	ldi	r22, 0x50	; 80
    4f8c:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    4f90:	08 c0       	rjmp	.+16     	; 0x4fa2 <VL53L0X_get_vcsel_pulse_period+0x38>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
    4f92:	ae 01       	movw	r20, r28
    4f94:	4f 5f       	subi	r20, 0xFF	; 255
    4f96:	5f 4f       	sbci	r21, 0xFF	; 255
    4f98:	60 e7       	ldi	r22, 0x70	; 112
    4f9a:	0e 94 6a 32 	call	0x64d4	; 0x64d4 <VL53L0X_RdByte>
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
    4f9e:	01 c0       	rjmp	.+2      	; 0x4fa2 <VL53L0X_get_vcsel_pulse_period+0x38>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
    4fa0:	8c ef       	ldi	r24, 0xFC	; 252
	}

	if (Status == VL53L0X_ERROR_NONE)
    4fa2:	81 11       	cpse	r24, r1
    4fa4:	05 c0       	rjmp	.+10     	; 0x4fb0 <VL53L0X_get_vcsel_pulse_period+0x46>
		*pVCSELPulsePeriodPCLK =
    4fa6:	99 81       	ldd	r25, Y+1	; 0x01
    4fa8:	9f 5f       	subi	r25, 0xFF	; 255
    4faa:	99 0f       	add	r25, r25
    4fac:	f8 01       	movw	r30, r16
    4fae:	90 83       	st	Z, r25
			VL53L0X_decode_vcsel_period(vcsel_period_reg);

	return Status;
}
    4fb0:	0f 90       	pop	r0
    4fb2:	df 91       	pop	r29
    4fb4:	cf 91       	pop	r28
    4fb6:	1f 91       	pop	r17
    4fb8:	0f 91       	pop	r16
    4fba:	08 95       	ret

00004fbc <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		u32 MeasurementTimingBudgetMicroSeconds)
{
    4fbc:	8f 92       	push	r8
    4fbe:	9f 92       	push	r9
    4fc0:	af 92       	push	r10
    4fc2:	bf 92       	push	r11
    4fc4:	cf 92       	push	r12
    4fc6:	df 92       	push	r13
    4fc8:	ef 92       	push	r14
    4fca:	ff 92       	push	r15
    4fcc:	0f 93       	push	r16
    4fce:	1f 93       	push	r17
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	cd b7       	in	r28, 0x3d	; 61
    4fd6:	de b7       	in	r29, 0x3e	; 62
    4fd8:	2d 97       	sbiw	r28, 0x0d	; 13
    4fda:	0f b6       	in	r0, 0x3f	; 63
    4fdc:	f8 94       	cli
    4fde:	de bf       	out	0x3e, r29	; 62
    4fe0:	0f be       	out	0x3f, r0	; 63
    4fe2:	cd bf       	out	0x3d, r28	; 61
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u32 FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	u32 MsrcDccTccTimeoutMicroSeconds	= 2000;
    4fe4:	0f 2e       	mov	r0, r31
    4fe6:	f0 ed       	ldi	r31, 0xD0	; 208
    4fe8:	cf 2e       	mov	r12, r31
    4fea:	f7 e0       	ldi	r31, 0x07	; 7
    4fec:	df 2e       	mov	r13, r31
    4fee:	e1 2c       	mov	r14, r1
    4ff0:	f1 2c       	mov	r15, r1
    4ff2:	f0 2d       	mov	r31, r0
    4ff4:	ce 82       	std	Y+6, r12	; 0x06
    4ff6:	df 82       	std	Y+7, r13	; 0x07
    4ff8:	e8 86       	std	Y+8, r14	; 0x08
    4ffa:	f9 86       	std	Y+9, r15	; 0x09
	u32 MsrcOverheadMicroSeconds		= 660;
	u32 TccOverheadMicroSeconds		= 590;
	u32 DssOverheadMicroSeconds		= 690;
	u32 PreRangeOverheadMicroSeconds	= 660;
	u32 FinalRangeOverheadMicroSeconds = 550;
	u32 PreRangeTimeoutMicroSeconds	= 0;
    4ffc:	1a 86       	std	Y+10, r1	; 0x0a
    4ffe:	1b 86       	std	Y+11, r1	; 0x0b
    5000:	1c 86       	std	Y+12, r1	; 0x0c
    5002:	1d 86       	std	Y+13, r1	; 0x0d
	u32 cMinTimingBudgetMicroSeconds	= 20000;
	u32 SubTimeout = 0;

	if (MeasurementTimingBudgetMicroSeconds
    5004:	40 32       	cpi	r20, 0x20	; 32
    5006:	2e e4       	ldi	r18, 0x4E	; 78
    5008:	52 07       	cpc	r21, r18
    500a:	61 05       	cpc	r22, r1
    500c:	71 05       	cpc	r23, r1
    500e:	08 f4       	brcc	.+2      	; 0x5012 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x56>
    5010:	94 c0       	rjmp	.+296    	; 0x513a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x17e>
    5012:	6a 01       	movw	r12, r20
    5014:	7b 01       	movw	r14, r22
    5016:	8c 01       	movw	r16, r24

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    5018:	be 01       	movw	r22, r28
    501a:	6f 5f       	subi	r22, 0xFF	; 255
    501c:	7f 4f       	sbci	r23, 0xFF	; 255
    501e:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <VL53L0X_GetSequenceStepEnables>

	if (Status == VL53L0X_ERROR_NONE &&
    5022:	81 11       	cpse	r24, r1
    5024:	9d c0       	rjmp	.+314    	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
	}

	FinalRangeTimingBudgetMicroSeconds =
    5026:	46 01       	movw	r8, r12
    5028:	57 01       	movw	r10, r14
    502a:	86 e3       	ldi	r24, 0x36	; 54
    502c:	88 1a       	sub	r8, r24
    502e:	8b e0       	ldi	r24, 0x0B	; 11
    5030:	98 0a       	sbc	r9, r24
    5032:	a1 08       	sbc	r10, r1
    5034:	b1 08       	sbc	r11, r1
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);

	if (Status == VL53L0X_ERROR_NONE &&
    5036:	89 81       	ldd	r24, Y+1	; 0x01
    5038:	81 11       	cpse	r24, r1
    503a:	07 c0       	rjmp	.+14     	; 0x504a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		(SchedulerSequenceSteps.TccOn  ||
    503c:	8a 81       	ldd	r24, Y+2	; 0x02
    503e:	81 11       	cpse	r24, r1
    5040:	04 c0       	rjmp	.+8      	; 0x504a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
		SchedulerSequenceSteps.MsrcOn ||
    5042:	8b 81       	ldd	r24, Y+3	; 0x03
    5044:	88 23       	and	r24, r24
    5046:	09 f4       	brne	.+2      	; 0x504a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x8e>
    5048:	84 c0       	rjmp	.+264    	; 0x5152 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
		SchedulerSequenceSteps.DssOn)) {

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
    504a:	ae 01       	movw	r20, r28
    504c:	4a 5f       	subi	r20, 0xFA	; 250
    504e:	5f 4f       	sbci	r21, 0xFF	; 255
    5050:	62 e0       	ldi	r22, 0x02	; 2
    5052:	c8 01       	movw	r24, r16
    5054:	c1 dd       	rcall	.-1150   	; 0x4bd8 <get_sequence_step_timeout>
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
    5056:	81 11       	cpse	r24, r1
    5058:	83 c0       	rjmp	.+262    	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			return Status;

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
    505a:	89 81       	ldd	r24, Y+1	; 0x01
    505c:	88 23       	and	r24, r24
    505e:	09 f4       	brne	.+2      	; 0x5062 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xa6>
    5060:	74 c0       	rjmp	.+232    	; 0x514a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18e>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
    5062:	8e 81       	ldd	r24, Y+6	; 0x06
    5064:	9f 81       	ldd	r25, Y+7	; 0x07
    5066:	a8 85       	ldd	r26, Y+8	; 0x08
    5068:	b9 85       	ldd	r27, Y+9	; 0x09
    506a:	82 5b       	subi	r24, 0xB2	; 178
    506c:	9d 4f       	sbci	r25, 0xFD	; 253
    506e:	af 4f       	sbci	r26, 0xFF	; 255
    5070:	bf 4f       	sbci	r27, 0xFF	; 255
				+ TccOverheadMicroSeconds;

			if (SubTimeout <
    5072:	88 15       	cp	r24, r8
    5074:	99 05       	cpc	r25, r9
    5076:	aa 05       	cpc	r26, r10
    5078:	bb 05       	cpc	r27, r11
    507a:	08 f0       	brcs	.+2      	; 0x507e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xc2>
    507c:	60 c0       	rjmp	.+192    	; 0x513e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
    507e:	88 1a       	sub	r8, r24
    5080:	99 0a       	sbc	r9, r25
    5082:	aa 0a       	sbc	r10, r26
    5084:	bb 0a       	sbc	r11, r27
    5086:	61 c0       	rjmp	.+194    	; 0x514a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18e>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
    5088:	8e 81       	ldd	r24, Y+6	; 0x06
    508a:	9f 81       	ldd	r25, Y+7	; 0x07
    508c:	a8 85       	ldd	r26, Y+8	; 0x08
    508e:	b9 85       	ldd	r27, Y+9	; 0x09
    5090:	8e 54       	subi	r24, 0x4E	; 78
    5092:	9d 4f       	sbci	r25, 0xFD	; 253
    5094:	af 4f       	sbci	r26, 0xFF	; 255
    5096:	bf 4f       	sbci	r27, 0xFF	; 255
    5098:	88 0f       	add	r24, r24
    509a:	99 1f       	adc	r25, r25
    509c:	aa 1f       	adc	r26, r26
    509e:	bb 1f       	adc	r27, r27
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    50a0:	88 15       	cp	r24, r8
    50a2:	99 05       	cpc	r25, r9
    50a4:	aa 05       	cpc	r26, r10
    50a6:	bb 05       	cpc	r27, r11
    50a8:	08 f0       	brcs	.+2      	; 0x50ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
    50aa:	57 c0       	rjmp	.+174    	; 0x515a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x19e>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    50ac:	88 1a       	sub	r8, r24
    50ae:	99 0a       	sbc	r9, r25
    50b0:	aa 0a       	sbc	r10, r26
    50b2:	bb 0a       	sbc	r11, r27
    50b4:	4e c0       	rjmp	.+156    	; 0x5152 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
    50b6:	8a 81       	ldd	r24, Y+2	; 0x02
    50b8:	88 23       	and	r24, r24
    50ba:	09 f4       	brne	.+2      	; 0x50be <VL53L0X_set_measurement_timing_budget_micro_seconds+0x102>
    50bc:	4a c0       	rjmp	.+148    	; 0x5152 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
    50be:	8e 81       	ldd	r24, Y+6	; 0x06
    50c0:	9f 81       	ldd	r25, Y+7	; 0x07
    50c2:	a8 85       	ldd	r26, Y+8	; 0x08
    50c4:	b9 85       	ldd	r27, Y+9	; 0x09
    50c6:	8c 56       	subi	r24, 0x6C	; 108
    50c8:	9d 4f       	sbci	r25, 0xFD	; 253
    50ca:	af 4f       	sbci	r26, 0xFF	; 255
    50cc:	bf 4f       	sbci	r27, 0xFF	; 255
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    50ce:	88 15       	cp	r24, r8
    50d0:	99 05       	cpc	r25, r9
    50d2:	aa 05       	cpc	r26, r10
    50d4:	bb 05       	cpc	r27, r11
    50d6:	08 f0       	brcs	.+2      	; 0x50da <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11e>
    50d8:	42 c0       	rjmp	.+132    	; 0x515e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a2>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
    50da:	88 1a       	sub	r8, r24
    50dc:	99 0a       	sbc	r9, r25
    50de:	aa 0a       	sbc	r10, r26
    50e0:	bb 0a       	sbc	r11, r27
    50e2:	37 c0       	rjmp	.+110    	; 0x5152 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x196>

	if (SchedulerSequenceSteps.PreRangeOn) {

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
    50e4:	ae 01       	movw	r20, r28
    50e6:	46 5f       	subi	r20, 0xF6	; 246
    50e8:	5f 4f       	sbci	r21, 0xFF	; 255
    50ea:	63 e0       	ldi	r22, 0x03	; 3
    50ec:	c8 01       	movw	r24, r16
    50ee:	74 dd       	rcall	.-1304   	; 0x4bd8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
    50f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    50f2:	5b 85       	ldd	r21, Y+11	; 0x0b
    50f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    50f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    50f8:	4c 56       	subi	r20, 0x6C	; 108
    50fa:	5d 4f       	sbci	r21, 0xFD	; 253
    50fc:	6f 4f       	sbci	r22, 0xFF	; 255
    50fe:	7f 4f       	sbci	r23, 0xFF	; 255
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
    5100:	48 15       	cp	r20, r8
    5102:	59 05       	cpc	r21, r9
    5104:	6a 05       	cpc	r22, r10
    5106:	7b 05       	cpc	r23, r11
    5108:	e0 f4       	brcc	.+56     	; 0x5142 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x186>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    510a:	81 11       	cpse	r24, r1
    510c:	29 c0       	rjmp	.+82     	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>

		SubTimeout = PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
    510e:	84 1a       	sub	r8, r20
    5110:	95 0a       	sbc	r9, r21
    5112:	a6 0a       	sbc	r10, r22
    5114:	b7 0a       	sbc	r11, r23
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
    5116:	8d 81       	ldd	r24, Y+5	; 0x05
    5118:	88 23       	and	r24, r24
    511a:	a9 f0       	breq	.+42     	; 0x5146 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x18a>
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
    511c:	a5 01       	movw	r20, r10
    511e:	94 01       	movw	r18, r8
    5120:	26 52       	subi	r18, 0x26	; 38
    5122:	32 40       	sbci	r19, 0x02	; 2
    5124:	41 09       	sbc	r20, r1
    5126:	51 09       	sbc	r21, r1
    5128:	64 e0       	ldi	r22, 0x04	; 4
    512a:	c8 01       	movw	r24, r16
    512c:	47 de       	rcall	.-882    	; 0x4dbc <set_sequence_step_timeout>
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
    512e:	f8 01       	movw	r30, r16
    5130:	c2 8a       	std	Z+18, r12	; 0x12
    5132:	d3 8a       	std	Z+19, r13	; 0x13
    5134:	e4 8a       	std	Z+20, r14	; 0x14
    5136:	f5 8a       	std	Z+21, r15	; 0x15
    5138:	13 c0       	rjmp	.+38     	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
	u32 SubTimeout = 0;

	if (MeasurementTimingBudgetMicroSeconds
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
		return Status;
    513a:	8c ef       	ldi	r24, 0xFC	; 252
    513c:	11 c0       	rjmp	.+34     	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    513e:	8c ef       	ldi	r24, 0xFC	; 252
    5140:	0f c0       	rjmp	.+30     	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    5142:	8c ef       	ldi	r24, 0xFC	; 252
    5144:	0d c0       	rjmp	.+26     	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
    5146:	80 e0       	ldi	r24, 0x00	; 0
    5148:	0b c0       	rjmp	.+22     	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
		if (Status != VL53L0X_ERROR_NONE) {
			return Status;
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
    514a:	8b 81       	ldd	r24, Y+3	; 0x03
    514c:	81 11       	cpse	r24, r1
    514e:	9c cf       	rjmp	.-200    	; 0x5088 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xcc>
    5150:	b2 cf       	rjmp	.-156    	; 0x50b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xfa>

	if (Status != VL53L0X_ERROR_NONE) {
		return Status;
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
    5152:	8c 81       	ldd	r24, Y+4	; 0x04
    5154:	88 23       	and	r24, r24
    5156:	f9 f2       	breq	.-66     	; 0x5116 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x15a>
    5158:	c5 cf       	rjmp	.-118    	; 0x50e4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x128>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    515a:	8c ef       	ldi	r24, 0xFC	; 252
    515c:	01 c0       	rjmp	.+2      	; 0x5160 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1a4>
			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    515e:	8c ef       	ldi	r24, 0xFC	; 252
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);
	}

	return Status;
}
    5160:	2d 96       	adiw	r28, 0x0d	; 13
    5162:	0f b6       	in	r0, 0x3f	; 63
    5164:	f8 94       	cli
    5166:	de bf       	out	0x3e, r29	; 62
    5168:	0f be       	out	0x3f, r0	; 63
    516a:	cd bf       	out	0x3d, r28	; 61
    516c:	df 91       	pop	r29
    516e:	cf 91       	pop	r28
    5170:	1f 91       	pop	r17
    5172:	0f 91       	pop	r16
    5174:	ff 90       	pop	r15
    5176:	ef 90       	pop	r14
    5178:	df 90       	pop	r13
    517a:	cf 90       	pop	r12
    517c:	bf 90       	pop	r11
    517e:	af 90       	pop	r10
    5180:	9f 90       	pop	r9
    5182:	8f 90       	pop	r8
    5184:	08 95       	ret

00005186 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		u32 *pMeasurementTimingBudgetMicroSeconds)
{
    5186:	8f 92       	push	r8
    5188:	9f 92       	push	r9
    518a:	af 92       	push	r10
    518c:	bf 92       	push	r11
    518e:	cf 92       	push	r12
    5190:	df 92       	push	r13
    5192:	ff 92       	push	r15
    5194:	0f 93       	push	r16
    5196:	1f 93       	push	r17
    5198:	cf 93       	push	r28
    519a:	df 93       	push	r29
    519c:	cd b7       	in	r28, 0x3d	; 61
    519e:	de b7       	in	r29, 0x3e	; 62
    51a0:	61 97       	sbiw	r28, 0x11	; 17
    51a2:	0f b6       	in	r0, 0x3f	; 63
    51a4:	f8 94       	cli
    51a6:	de bf       	out	0x3e, r29	; 62
    51a8:	0f be       	out	0x3f, r0	; 63
    51aa:	cd bf       	out	0x3d, r28	; 61
    51ac:	6c 01       	movw	r12, r24
    51ae:	8b 01       	movw	r16, r22
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	u32 FinalRangeTimeoutMicroSeconds;
	u32 MsrcDccTccTimeoutMicroSeconds	= 2000;
    51b0:	80 ed       	ldi	r24, 0xD0	; 208
    51b2:	97 e0       	ldi	r25, 0x07	; 7
    51b4:	a0 e0       	ldi	r26, 0x00	; 0
    51b6:	b0 e0       	ldi	r27, 0x00	; 0
    51b8:	8a 87       	std	Y+10, r24	; 0x0a
    51ba:	9b 87       	std	Y+11, r25	; 0x0b
    51bc:	ac 87       	std	Y+12, r26	; 0x0c
    51be:	bd 87       	std	Y+13, r27	; 0x0d
	u32 MsrcOverheadMicroSeconds		= 660;
	u32 TccOverheadMicroSeconds		= 590;
	u32 DssOverheadMicroSeconds		= 690;
	u32 PreRangeOverheadMicroSeconds	= 660;
	u32 FinalRangeOverheadMicroSeconds = 550;
	u32 PreRangeTimeoutMicroSeconds	= 0;
    51c0:	1e 86       	std	Y+14, r1	; 0x0e
    51c2:	1f 86       	std	Y+15, r1	; 0x0f
    51c4:	18 8a       	std	Y+16, r1	; 0x10
    51c6:	19 8a       	std	Y+17, r1	; 0x11

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
    51c8:	86 e3       	ldi	r24, 0x36	; 54
    51ca:	9b e0       	ldi	r25, 0x0B	; 11
    51cc:	a0 e0       	ldi	r26, 0x00	; 0
    51ce:	b0 e0       	ldi	r27, 0x00	; 0
    51d0:	fb 01       	movw	r30, r22
    51d2:	80 83       	st	Z, r24
    51d4:	91 83       	std	Z+1, r25	; 0x01
    51d6:	a2 83       	std	Z+2, r26	; 0x02
    51d8:	b3 83       	std	Z+3, r27	; 0x03

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
    51da:	be 01       	movw	r22, r28
    51dc:	6f 5f       	subi	r22, 0xFF	; 255
    51de:	7f 4f       	sbci	r23, 0xFF	; 255
    51e0:	c6 01       	movw	r24, r12
    51e2:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <VL53L0X_GetSequenceStepEnables>
    51e6:	f8 2e       	mov	r15, r24

	if (Status != VL53L0X_ERROR_NONE) {
    51e8:	81 11       	cpse	r24, r1
    51ea:	b3 c0       	rjmp	.+358    	; 0x5352 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		return Status;
	}


	if (SchedulerSequenceSteps.TccOn  ||
    51ec:	89 81       	ldd	r24, Y+1	; 0x01
    51ee:	81 11       	cpse	r24, r1
    51f0:	07 c0       	rjmp	.+14     	; 0x5200 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    51f2:	8a 81       	ldd	r24, Y+2	; 0x02
    51f4:	81 11       	cpse	r24, r1
    51f6:	04 c0       	rjmp	.+8      	; 0x5200 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
		SchedulerSequenceSteps.MsrcOn ||
    51f8:	8b 81       	ldd	r24, Y+3	; 0x03
    51fa:	88 23       	and	r24, r24
    51fc:	09 f4       	brne	.+2      	; 0x5200 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x7a>
    51fe:	a5 c0       	rjmp	.+330    	; 0x534a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    5200:	ae 01       	movw	r20, r28
    5202:	46 5f       	subi	r20, 0xF6	; 246
    5204:	5f 4f       	sbci	r21, 0xFF	; 255
    5206:	62 e0       	ldi	r22, 0x02	; 2
    5208:	c6 01       	movw	r24, r12
    520a:	e6 dc       	rcall	.-1588   	; 0x4bd8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
    520c:	81 11       	cpse	r24, r1
    520e:	97 c0       	rjmp	.+302    	; 0x533e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1b8>
			if (SchedulerSequenceSteps.TccOn) {
    5210:	89 81       	ldd	r24, Y+1	; 0x01
    5212:	88 23       	and	r24, r24
    5214:	a9 f0       	breq	.+42     	; 0x5240 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xba>
				*pMeasurementTimingBudgetMicroSeconds +=
    5216:	8a 85       	ldd	r24, Y+10	; 0x0a
    5218:	9b 85       	ldd	r25, Y+11	; 0x0b
    521a:	ac 85       	ldd	r26, Y+12	; 0x0c
    521c:	bd 85       	ldd	r27, Y+13	; 0x0d
    521e:	82 5b       	subi	r24, 0xB2	; 178
    5220:	9d 4f       	sbci	r25, 0xFD	; 253
    5222:	af 4f       	sbci	r26, 0xFF	; 255
    5224:	bf 4f       	sbci	r27, 0xFF	; 255
    5226:	f8 01       	movw	r30, r16
    5228:	40 81       	ld	r20, Z
    522a:	51 81       	ldd	r21, Z+1	; 0x01
    522c:	62 81       	ldd	r22, Z+2	; 0x02
    522e:	73 81       	ldd	r23, Z+3	; 0x03
    5230:	84 0f       	add	r24, r20
    5232:	95 1f       	adc	r25, r21
    5234:	a6 1f       	adc	r26, r22
    5236:	b7 1f       	adc	r27, r23
    5238:	80 83       	st	Z, r24
    523a:	91 83       	std	Z+1, r25	; 0x01
    523c:	a2 83       	std	Z+2, r26	; 0x02
    523e:	b3 83       	std	Z+3, r27	; 0x03
					MsrcDccTccTimeoutMicroSeconds +
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
    5240:	8b 81       	ldd	r24, Y+3	; 0x03
    5242:	88 23       	and	r24, r24
    5244:	d1 f0       	breq	.+52     	; 0x527a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xf4>
				*pMeasurementTimingBudgetMicroSeconds +=
    5246:	8a 85       	ldd	r24, Y+10	; 0x0a
    5248:	9b 85       	ldd	r25, Y+11	; 0x0b
    524a:	ac 85       	ldd	r26, Y+12	; 0x0c
    524c:	bd 85       	ldd	r27, Y+13	; 0x0d
    524e:	8e 54       	subi	r24, 0x4E	; 78
    5250:	9d 4f       	sbci	r25, 0xFD	; 253
    5252:	af 4f       	sbci	r26, 0xFF	; 255
    5254:	bf 4f       	sbci	r27, 0xFF	; 255
    5256:	88 0f       	add	r24, r24
    5258:	99 1f       	adc	r25, r25
    525a:	aa 1f       	adc	r26, r26
    525c:	bb 1f       	adc	r27, r27
    525e:	f8 01       	movw	r30, r16
    5260:	40 81       	ld	r20, Z
    5262:	51 81       	ldd	r21, Z+1	; 0x01
    5264:	62 81       	ldd	r22, Z+2	; 0x02
    5266:	73 81       	ldd	r23, Z+3	; 0x03
    5268:	84 0f       	add	r24, r20
    526a:	95 1f       	adc	r25, r21
    526c:	a6 1f       	adc	r26, r22
    526e:	b7 1f       	adc	r27, r23
    5270:	80 83       	st	Z, r24
    5272:	91 83       	std	Z+1, r25	; 0x01
    5274:	a2 83       	std	Z+2, r26	; 0x02
    5276:	b3 83       	std	Z+3, r27	; 0x03
    5278:	68 c0       	rjmp	.+208    	; 0x534a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				2 * (MsrcDccTccTimeoutMicroSeconds +
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
    527a:	8a 81       	ldd	r24, Y+2	; 0x02
    527c:	88 23       	and	r24, r24
    527e:	09 f4       	brne	.+2      	; 0x5282 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xfc>
    5280:	64 c0       	rjmp	.+200    	; 0x534a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
				*pMeasurementTimingBudgetMicroSeconds +=
    5282:	8a 85       	ldd	r24, Y+10	; 0x0a
    5284:	9b 85       	ldd	r25, Y+11	; 0x0b
    5286:	ac 85       	ldd	r26, Y+12	; 0x0c
    5288:	bd 85       	ldd	r27, Y+13	; 0x0d
    528a:	8c 56       	subi	r24, 0x6C	; 108
    528c:	9d 4f       	sbci	r25, 0xFD	; 253
    528e:	af 4f       	sbci	r26, 0xFF	; 255
    5290:	bf 4f       	sbci	r27, 0xFF	; 255
    5292:	f8 01       	movw	r30, r16
    5294:	40 81       	ld	r20, Z
    5296:	51 81       	ldd	r21, Z+1	; 0x01
    5298:	62 81       	ldd	r22, Z+2	; 0x02
    529a:	73 81       	ldd	r23, Z+3	; 0x03
    529c:	84 0f       	add	r24, r20
    529e:	95 1f       	adc	r25, r21
    52a0:	a6 1f       	adc	r26, r22
    52a2:	b7 1f       	adc	r27, r23
    52a4:	80 83       	st	Z, r24
    52a6:	91 83       	std	Z+1, r25	; 0x01
    52a8:	a2 83       	std	Z+2, r26	; 0x02
    52aa:	b3 83       	std	Z+3, r27	; 0x03
    52ac:	4e c0       	rjmp	.+156    	; 0x534a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c4>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    52ae:	ae 01       	movw	r20, r28
    52b0:	42 5f       	subi	r20, 0xF2	; 242
    52b2:	5f 4f       	sbci	r21, 0xFF	; 255
    52b4:	63 e0       	ldi	r22, 0x03	; 3
    52b6:	c6 01       	movw	r24, r12
    52b8:	8f dc       	rcall	.-1762   	; 0x4bd8 <get_sequence_step_timeout>
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    52ba:	4e 85       	ldd	r20, Y+14	; 0x0e
    52bc:	5f 85       	ldd	r21, Y+15	; 0x0f
    52be:	68 89       	ldd	r22, Y+16	; 0x10
    52c0:	79 89       	ldd	r23, Y+17	; 0x11
    52c2:	4c 56       	subi	r20, 0x6C	; 108
    52c4:	5d 4f       	sbci	r21, 0xFD	; 253
    52c6:	6f 4f       	sbci	r22, 0xFF	; 255
    52c8:	7f 4f       	sbci	r23, 0xFF	; 255
    52ca:	f8 01       	movw	r30, r16
    52cc:	80 80       	ld	r8, Z
    52ce:	91 80       	ldd	r9, Z+1	; 0x01
    52d0:	a2 80       	ldd	r10, Z+2	; 0x02
    52d2:	b3 80       	ldd	r11, Z+3	; 0x03
    52d4:	48 0d       	add	r20, r8
    52d6:	59 1d       	adc	r21, r9
    52d8:	6a 1d       	adc	r22, r10
    52da:	7b 1d       	adc	r23, r11
    52dc:	40 83       	st	Z, r20
    52de:	51 83       	std	Z+1, r21	; 0x01
    52e0:	62 83       	std	Z+2, r22	; 0x02
    52e2:	73 83       	std	Z+3, r23	; 0x03
				PreRangeTimeoutMicroSeconds +
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    52e4:	81 11       	cpse	r24, r1
    52e6:	2d c0       	rjmp	.+90     	; 0x5342 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1bc>
		if (SchedulerSequenceSteps.FinalRangeOn) {
    52e8:	8d 81       	ldd	r24, Y+5	; 0x05
    52ea:	88 23       	and	r24, r24
    52ec:	e9 f0       	breq	.+58     	; 0x5328 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1a2>
			Status = get_sequence_step_timeout(Dev,
    52ee:	ae 01       	movw	r20, r28
    52f0:	4a 5f       	subi	r20, 0xFA	; 250
    52f2:	5f 4f       	sbci	r21, 0xFF	; 255
    52f4:	64 e0       	ldi	r22, 0x04	; 4
    52f6:	c6 01       	movw	r24, r12
    52f8:	6f dc       	rcall	.-1826   	; 0x4bd8 <get_sequence_step_timeout>
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
    52fa:	4e 81       	ldd	r20, Y+6	; 0x06
    52fc:	5f 81       	ldd	r21, Y+7	; 0x07
    52fe:	68 85       	ldd	r22, Y+8	; 0x08
    5300:	79 85       	ldd	r23, Y+9	; 0x09
    5302:	4a 5d       	subi	r20, 0xDA	; 218
    5304:	5d 4f       	sbci	r21, 0xFD	; 253
    5306:	6f 4f       	sbci	r22, 0xFF	; 255
    5308:	7f 4f       	sbci	r23, 0xFF	; 255
    530a:	f8 01       	movw	r30, r16
    530c:	80 80       	ld	r8, Z
    530e:	91 80       	ldd	r9, Z+1	; 0x01
    5310:	a2 80       	ldd	r10, Z+2	; 0x02
    5312:	b3 80       	ldd	r11, Z+3	; 0x03
    5314:	48 0d       	add	r20, r8
    5316:	59 1d       	adc	r21, r9
    5318:	6a 1d       	adc	r22, r10
    531a:	7b 1d       	adc	r23, r11
    531c:	40 83       	st	Z, r20
    531e:	51 83       	std	Z+1, r21	; 0x01
    5320:	62 83       	std	Z+2, r22	; 0x02
    5322:	73 83       	std	Z+3, r23	; 0x03
				(FinalRangeTimeoutMicroSeconds +
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    5324:	81 11       	cpse	r24, r1
    5326:	0f c0       	rjmp	.+30     	; 0x5346 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1c0>
		VL53L0X_SETPARAMETERFIELD(Dev,
    5328:	f8 01       	movw	r30, r16
    532a:	80 81       	ld	r24, Z
    532c:	91 81       	ldd	r25, Z+1	; 0x01
    532e:	a2 81       	ldd	r26, Z+2	; 0x02
    5330:	b3 81       	ldd	r27, Z+3	; 0x03
    5332:	f6 01       	movw	r30, r12
    5334:	82 8b       	std	Z+18, r24	; 0x12
    5336:	93 8b       	std	Z+19, r25	; 0x13
    5338:	a4 8b       	std	Z+20, r26	; 0x14
    533a:	b5 8b       	std	Z+21, r27	; 0x15
    533c:	0a c0       	rjmp	.+20     	; 0x5352 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>

	if (SchedulerSequenceSteps.TccOn  ||
		SchedulerSequenceSteps.MsrcOn ||
		SchedulerSequenceSteps.DssOn) {

		Status = get_sequence_step_timeout(Dev,
    533e:	f8 2e       	mov	r15, r24
    5340:	08 c0       	rjmp	.+16     	; 0x5352 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    5342:	f8 2e       	mov	r15, r24
    5344:	06 c0       	rjmp	.+12     	; 0x5352 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.FinalRangeOn) {
			Status = get_sequence_step_timeout(Dev,
    5346:	f8 2e       	mov	r15, r24
    5348:	04 c0       	rjmp	.+8      	; 0x5352 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x1cc>
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
		if (SchedulerSequenceSteps.PreRangeOn) {
    534a:	8c 81       	ldd	r24, Y+4	; 0x04
    534c:	88 23       	and	r24, r24
    534e:	61 f2       	breq	.-104    	; 0x52e8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x162>
    5350:	ae cf       	rjmp	.-164    	; 0x52ae <VL53L0X_get_measurement_timing_budget_micro_seconds+0x128>
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}
	
	return Status;
}
    5352:	8f 2d       	mov	r24, r15
    5354:	61 96       	adiw	r28, 0x11	; 17
    5356:	0f b6       	in	r0, 0x3f	; 63
    5358:	f8 94       	cli
    535a:	de bf       	out	0x3e, r29	; 62
    535c:	0f be       	out	0x3f, r0	; 63
    535e:	cd bf       	out	0x3d, r28	; 61
    5360:	df 91       	pop	r29
    5362:	cf 91       	pop	r28
    5364:	1f 91       	pop	r17
    5366:	0f 91       	pop	r16
    5368:	ff 90       	pop	r15
    536a:	df 90       	pop	r13
    536c:	cf 90       	pop	r12
    536e:	bf 90       	pop	r11
    5370:	af 90       	pop	r10
    5372:	9f 90       	pop	r9
    5374:	8f 90       	pop	r8
    5376:	08 95       	ret

00005378 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		u8 *pTuningSettingBuffer)
{
    5378:	2f 92       	push	r2
    537a:	3f 92       	push	r3
    537c:	4f 92       	push	r4
    537e:	5f 92       	push	r5
    5380:	6f 92       	push	r6
    5382:	7f 92       	push	r7
    5384:	8f 92       	push	r8
    5386:	9f 92       	push	r9
    5388:	af 92       	push	r10
    538a:	bf 92       	push	r11
    538c:	cf 92       	push	r12
    538e:	df 92       	push	r13
    5390:	ef 92       	push	r14
    5392:	ff 92       	push	r15
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	00 d0       	rcall	.+0      	; 0x539e <VL53L0X_load_tuning_settings+0x26>
    539e:	00 d0       	rcall	.+0      	; 0x53a0 <VL53L0X_load_tuning_settings+0x28>
    53a0:	cd b7       	in	r28, 0x3d	; 61
    53a2:	de b7       	in	r29, 0x3e	; 62
    53a4:	5c 01       	movw	r10, r24
    53a6:	6b 01       	movw	r12, r22
	u8 NumberOfWrites;
	u8 Address;
	u8 localBuffer[4]; /* max */
	u16 Temp16;

	Index = 0;
    53a8:	e1 2c       	mov	r14, r1
    53aa:	f1 2c       	mov	r15, r1


VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		u8 *pTuningSettingBuffer)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    53ac:	80 e0       	ldi	r24, 0x00	; 0
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    53ae:	35 01       	movw	r6, r10
    53b0:	2d ed       	ldi	r18, 0xDD	; 221
    53b2:	62 1a       	sub	r6, r18
    53b4:	2e ef       	ldi	r18, 0xFE	; 254
    53b6:	72 0a       	sbc	r7, r18
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    53b8:	45 01       	movw	r8, r10
    53ba:	9f ed       	ldi	r25, 0xDF	; 223
    53bc:	89 1a       	sub	r8, r25
    53be:	9e ef       	ldi	r25, 0xFE	; 254
    53c0:	99 0a       	sbc	r9, r25
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    53c2:	25 01       	movw	r4, r10
    53c4:	eb ed       	ldi	r30, 0xDB	; 219
    53c6:	4e 1a       	sub	r4, r30
    53c8:	ee ef       	ldi	r30, 0xFE	; 254
    53ca:	5e 0a       	sbc	r5, r30
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    53cc:	15 01       	movw	r2, r10
    53ce:	f8 ed       	ldi	r31, 0xD8	; 216
    53d0:	2f 1a       	sub	r2, r31
    53d2:	fe ef       	ldi	r31, 0xFE	; 254
    53d4:	3f 0a       	sbc	r3, r31
	u8 localBuffer[4]; /* max */
	u16 Temp16;

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    53d6:	90 c0       	rjmp	.+288    	; 0x54f8 <VL53L0X_load_tuning_settings+0x180>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    53d8:	97 01       	movw	r18, r14
    53da:	2f 5f       	subi	r18, 0xFF	; 255
    53dc:	3f 4f       	sbci	r19, 0xFF	; 255
		if (NumberOfWrites == 0xFF) {
    53de:	0f 3f       	cpi	r16, 0xFF	; 255
    53e0:	09 f0       	breq	.+2      	; 0x53e4 <VL53L0X_load_tuning_settings+0x6c>
    53e2:	5f c0       	rjmp	.+190    	; 0x54a2 <VL53L0X_load_tuning_settings+0x12a>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    53e4:	a7 01       	movw	r20, r14
    53e6:	4e 5f       	subi	r20, 0xFE	; 254
    53e8:	5f 4f       	sbci	r21, 0xFF	; 255
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
    53ea:	f6 01       	movw	r30, r12
    53ec:	e2 0f       	add	r30, r18
    53ee:	f3 1f       	adc	r31, r19
			Index++;
			switch (SelectParam) {
    53f0:	90 81       	ld	r25, Z
    53f2:	91 30       	cpi	r25, 0x01	; 1
    53f4:	d1 f0       	breq	.+52     	; 0x542a <VL53L0X_load_tuning_settings+0xb2>
    53f6:	28 f0       	brcs	.+10     	; 0x5402 <VL53L0X_load_tuning_settings+0x8a>
    53f8:	92 30       	cpi	r25, 0x02	; 2
    53fa:	59 f1       	breq	.+86     	; 0x5452 <VL53L0X_load_tuning_settings+0xda>
    53fc:	93 30       	cpi	r25, 0x03	; 3
    53fe:	e9 f1       	breq	.+122    	; 0x547a <VL53L0X_load_tuning_settings+0x102>
    5400:	76 c0       	rjmp	.+236    	; 0x54ee <VL53L0X_load_tuning_settings+0x176>
			case 0: /* u16 SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    5402:	f6 01       	movw	r30, r12
    5404:	ee 0d       	add	r30, r14
    5406:	ff 1d       	adc	r31, r15
    5408:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    540a:	24 e0       	ldi	r18, 0x04	; 4
    540c:	e2 0e       	add	r14, r18
    540e:	f1 1c       	adc	r15, r1
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
			switch (SelectParam) {
			case 0: /* u16 SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    5410:	f6 01       	movw	r30, r12
    5412:	e4 0f       	add	r30, r20
    5414:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
    5416:	20 81       	ld	r18, Z
    5418:	30 e0       	ldi	r19, 0x00	; 0
    541a:	32 2f       	mov	r19, r18
    541c:	22 27       	eor	r18, r18
    541e:	29 0f       	add	r18, r25
    5420:	31 1d       	adc	r19, r1
    5422:	f4 01       	movw	r30, r8
    5424:	31 83       	std	Z+1, r19	; 0x01
    5426:	20 83       	st	Z, r18
				break;
    5428:	67 c0       	rjmp	.+206    	; 0x54f8 <VL53L0X_load_tuning_settings+0x180>
			case 1: /* u16 SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    542a:	f6 01       	movw	r30, r12
    542c:	ee 0d       	add	r30, r14
    542e:	ff 1d       	adc	r31, r15
    5430:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    5432:	f4 e0       	ldi	r31, 0x04	; 4
    5434:	ef 0e       	add	r14, r31
    5436:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
				break;
			case 1: /* u16 SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    5438:	f6 01       	movw	r30, r12
    543a:	e4 0f       	add	r30, r20
    543c:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
    543e:	20 81       	ld	r18, Z
    5440:	30 e0       	ldi	r19, 0x00	; 0
    5442:	32 2f       	mov	r19, r18
    5444:	22 27       	eor	r18, r18
    5446:	29 0f       	add	r18, r25
    5448:	31 1d       	adc	r19, r1
    544a:	f3 01       	movw	r30, r6
    544c:	31 83       	std	Z+1, r19	; 0x01
    544e:	20 83       	st	Z, r18
					Temp16);
				break;
    5450:	53 c0       	rjmp	.+166    	; 0x54f8 <VL53L0X_load_tuning_settings+0x180>
			case 2: /* u16 SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    5452:	f6 01       	movw	r30, r12
    5454:	ee 0d       	add	r30, r14
    5456:	ff 1d       	adc	r31, r15
    5458:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    545a:	f4 e0       	ldi	r31, 0x04	; 4
    545c:	ef 0e       	add	r14, r31
    545e:	f1 1c       	adc	r15, r1
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
					Temp16);
				break;
			case 2: /* u16 SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    5460:	f6 01       	movw	r30, r12
    5462:	e4 0f       	add	r30, r20
    5464:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
    5466:	20 81       	ld	r18, Z
    5468:	30 e0       	ldi	r19, 0x00	; 0
    546a:	32 2f       	mov	r19, r18
    546c:	22 27       	eor	r18, r18
    546e:	29 0f       	add	r18, r25
    5470:	31 1d       	adc	r19, r1
    5472:	f2 01       	movw	r30, r4
    5474:	31 83       	std	Z+1, r19	; 0x01
    5476:	20 83       	st	Z, r18
				break;
    5478:	3f c0       	rjmp	.+126    	; 0x54f8 <VL53L0X_load_tuning_settings+0x180>
			case 3: /* u16 targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
    547a:	f6 01       	movw	r30, r12
    547c:	ee 0d       	add	r30, r14
    547e:	ff 1d       	adc	r31, r15
    5480:	93 81       	ldd	r25, Z+3	; 0x03
				Index++;
    5482:	f4 e0       	ldi	r31, 0x04	; 4
    5484:	ef 0e       	add	r14, r31
    5486:	f1 1c       	adc	r15, r1
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
				break;
			case 3: /* u16 targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
    5488:	f6 01       	movw	r30, r12
    548a:	e4 0f       	add	r30, r20
    548c:	f5 1f       	adc	r31, r21
				Index++;
				lsb = *(pTuningSettingBuffer + Index);
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
    548e:	20 81       	ld	r18, Z
    5490:	30 e0       	ldi	r19, 0x00	; 0
    5492:	32 2f       	mov	r19, r18
    5494:	22 27       	eor	r18, r18
    5496:	29 0f       	add	r18, r25
    5498:	31 1d       	adc	r19, r1
    549a:	f1 01       	movw	r30, r2
    549c:	31 83       	std	Z+1, r19	; 0x01
    549e:	20 83       	st	Z, r18
				break;
    54a0:	2b c0       	rjmp	.+86     	; 0x54f8 <VL53L0X_load_tuning_settings+0x180>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
			}

		} else if (NumberOfWrites <= 4) {
    54a2:	05 30       	cpi	r16, 0x05	; 5
    54a4:	38 f5       	brcc	.+78     	; 0x54f4 <VL53L0X_load_tuning_settings+0x17c>
			Address = *(pTuningSettingBuffer + Index);
    54a6:	f6 01       	movw	r30, r12
    54a8:	e2 0f       	add	r30, r18
    54aa:	f3 1f       	adc	r31, r19
    54ac:	60 81       	ld	r22, Z
			Index++;
    54ae:	f2 e0       	ldi	r31, 0x02	; 2
    54b0:	ef 0e       	add	r14, r31
    54b2:	f1 1c       	adc	r15, r1

			for (i = 0; i < NumberOfWrites; i++) {
    54b4:	00 23       	and	r16, r16
    54b6:	91 f0       	breq	.+36     	; 0x54dc <VL53L0X_load_tuning_settings+0x164>
    54b8:	97 01       	movw	r18, r14
    54ba:	d6 01       	movw	r26, r12
    54bc:	ae 0d       	add	r26, r14
    54be:	bf 1d       	adc	r27, r15
    54c0:	fe 01       	movw	r30, r28
    54c2:	31 96       	adiw	r30, 0x01	; 1
    54c4:	e0 2e       	mov	r14, r16
    54c6:	f1 2c       	mov	r15, r1
    54c8:	cf 01       	movw	r24, r30
    54ca:	8e 0d       	add	r24, r14
    54cc:	9f 1d       	adc	r25, r15
				localBuffer[i] = *(pTuningSettingBuffer +
    54ce:	4d 91       	ld	r20, X+
    54d0:	41 93       	st	Z+, r20

		} else if (NumberOfWrites <= 4) {
			Address = *(pTuningSettingBuffer + Index);
			Index++;

			for (i = 0; i < NumberOfWrites; i++) {
    54d2:	e8 17       	cp	r30, r24
    54d4:	f9 07       	cpc	r31, r25
    54d6:	d9 f7       	brne	.-10     	; 0x54ce <VL53L0X_load_tuning_settings+0x156>
    54d8:	e2 0e       	add	r14, r18
    54da:	f3 1e       	adc	r15, r19
				localBuffer[i] = *(pTuningSettingBuffer +
							Index);
				Index++;
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
    54dc:	10 e0       	ldi	r17, 0x00	; 0
    54de:	20 e0       	ldi	r18, 0x00	; 0
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	ae 01       	movw	r20, r28
    54e4:	4f 5f       	subi	r20, 0xFF	; 255
    54e6:	5f 4f       	sbci	r21, 0xFF	; 255
    54e8:	c5 01       	movw	r24, r10
    54ea:	55 d7       	rcall	.+3754   	; 0x6396 <VL53L0X_WriteMulti>
    54ec:	05 c0       	rjmp	.+10     	; 0x54f8 <VL53L0X_load_tuning_settings+0x180>
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
		if (NumberOfWrites == 0xFF) {
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
			Index++;
    54ee:	7a 01       	movw	r14, r20
				Index++;
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
				PALDevDataSet(Dev, targetRefRate, Temp16);
				break;
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
    54f0:	8c ef       	ldi	r24, 0xFC	; 252
    54f2:	02 c0       	rjmp	.+4      	; 0x54f8 <VL53L0X_load_tuning_settings+0x180>
	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
		Index++;
    54f4:	79 01       	movw	r14, r18

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
    54f6:	8c ef       	ldi	r24, 0xFC	; 252
	u8 localBuffer[4]; /* max */
	u16 Temp16;

	Index = 0;

	while ((*(pTuningSettingBuffer + Index) != 0) &&
    54f8:	f6 01       	movw	r30, r12
    54fa:	ee 0d       	add	r30, r14
    54fc:	ff 1d       	adc	r31, r15
    54fe:	00 81       	ld	r16, Z
    5500:	00 23       	and	r16, r16
    5502:	19 f0       	breq	.+6      	; 0x550a <VL53L0X_load_tuning_settings+0x192>
    5504:	88 23       	and	r24, r24
    5506:	09 f4       	brne	.+2      	; 0x550a <VL53L0X_load_tuning_settings+0x192>
    5508:	67 cf       	rjmp	.-306    	; 0x53d8 <VL53L0X_load_tuning_settings+0x60>
			Status = VL53L0X_ERROR_INVALID_PARAMS;
		}
	}

	return Status;
}
    550a:	0f 90       	pop	r0
    550c:	0f 90       	pop	r0
    550e:	0f 90       	pop	r0
    5510:	0f 90       	pop	r0
    5512:	df 91       	pop	r29
    5514:	cf 91       	pop	r28
    5516:	1f 91       	pop	r17
    5518:	0f 91       	pop	r16
    551a:	ff 90       	pop	r15
    551c:	ef 90       	pop	r14
    551e:	df 90       	pop	r13
    5520:	cf 90       	pop	r12
    5522:	bf 90       	pop	r11
    5524:	af 90       	pop	r10
    5526:	9f 90       	pop	r9
    5528:	8f 90       	pop	r8
    552a:	7f 90       	pop	r7
    552c:	6f 90       	pop	r6
    552e:	5f 90       	pop	r5
    5530:	4f 90       	pop	r4
    5532:	3f 90       	pop	r3
    5534:	2f 90       	pop	r2
    5536:	08 95       	ret

00005538 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	f1616 *ptotal_xtalk_rate_mcps)
{
    5538:	cf 92       	push	r12
    553a:	df 92       	push	r13
    553c:	ef 92       	push	r14
    553e:	ff 92       	push	r15
    5540:	0f 93       	push	r16
    5542:	1f 93       	push	r17
    5544:	cf 93       	push	r28
    5546:	df 93       	push	r29
    5548:	1f 92       	push	r1
    554a:	cd b7       	in	r28, 0x3d	; 61
    554c:	de b7       	in	r29, 0x3e	; 62
    554e:	7c 01       	movw	r14, r24
    5550:	6b 01       	movw	r12, r22
    5552:	8a 01       	movw	r16, r20

	u8 xtalkCompEnable;
	f1616 totalXtalkMegaCps;
	f1616 xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
    5554:	da 01       	movw	r26, r20
    5556:	1d 92       	st	X+, r1
    5558:	1d 92       	st	X+, r1
    555a:	1d 92       	st	X+, r1
    555c:	1c 92       	st	X, r1
    555e:	13 97       	sbiw	r26, 0x03	; 3

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
    5560:	be 01       	movw	r22, r28
    5562:	6f 5f       	subi	r22, 0xFF	; 255
    5564:	7f 4f       	sbci	r23, 0xFF	; 255
    5566:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <VL53L0X_GetXTalkCompensationEnable>
    556a:	e8 2f       	mov	r30, r24
	if (Status == VL53L0X_ERROR_NONE) {
    556c:	81 11       	cpse	r24, r1
    556e:	22 c0       	rjmp	.+68     	; 0x55b4 <VL53L0X_get_total_xtalk_rate+0x7c>

		if (xtalkCompEnable) {
    5570:	89 81       	ldd	r24, Y+1	; 0x01
    5572:	88 23       	and	r24, r24
    5574:	f9 f0       	breq	.+62     	; 0x55b4 <VL53L0X_get_total_xtalk_rate+0x7c>
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
    5576:	d6 01       	movw	r26, r12
    5578:	54 96       	adiw	r26, 0x14	; 20
    557a:	8d 91       	ld	r24, X+
    557c:	9c 91       	ld	r25, X
    557e:	55 97       	sbiw	r26, 0x15	; 21
    5580:	d7 01       	movw	r26, r14
    5582:	5d 96       	adiw	r26, 0x1d	; 29
    5584:	2d 91       	ld	r18, X+
    5586:	3d 91       	ld	r19, X+
    5588:	4d 91       	ld	r20, X+
    558a:	5c 91       	ld	r21, X
    558c:	90 97       	sbiw	r26, 0x20	; 32
    558e:	dc 01       	movw	r26, r24
    5590:	0e 94 38 33 	call	0x6670	; 0x6670 <__muluhisi3>
    5594:	dc 01       	movw	r26, r24
    5596:	cb 01       	movw	r24, r22
    5598:	80 58       	subi	r24, 0x80	; 128
    559a:	9f 4f       	sbci	r25, 0xFF	; 255
    559c:	af 4f       	sbci	r26, 0xFF	; 255
    559e:	bf 4f       	sbci	r27, 0xFF	; 255
    55a0:	49 2f       	mov	r20, r25
    55a2:	5a 2f       	mov	r21, r26
    55a4:	6b 2f       	mov	r22, r27
    55a6:	77 27       	eor	r23, r23
    55a8:	d8 01       	movw	r26, r16
    55aa:	4d 93       	st	X+, r20
    55ac:	5d 93       	st	X+, r21
    55ae:	6d 93       	st	X+, r22
    55b0:	7c 93       	st	X, r23
    55b2:	13 97       	sbiw	r26, 0x03	; 3
				(totalXtalkMegaCps + 0x80) >> 8;
		}
	}

	return Status;
}
    55b4:	8e 2f       	mov	r24, r30
    55b6:	0f 90       	pop	r0
    55b8:	df 91       	pop	r29
    55ba:	cf 91       	pop	r28
    55bc:	1f 91       	pop	r17
    55be:	0f 91       	pop	r16
    55c0:	ff 90       	pop	r15
    55c2:	ef 90       	pop	r14
    55c4:	df 90       	pop	r13
    55c6:	cf 90       	pop	r12
    55c8:	08 95       	ret

000055ca <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	f1616 *ptotal_signal_rate_mcps)
{
    55ca:	cf 92       	push	r12
    55cc:	df 92       	push	r13
    55ce:	ef 92       	push	r14
    55d0:	ff 92       	push	r15
    55d2:	0f 93       	push	r16
    55d4:	1f 93       	push	r17
    55d6:	cf 93       	push	r28
    55d8:	df 93       	push	r29
    55da:	00 d0       	rcall	.+0      	; 0x55dc <VL53L0X_get_total_signal_rate+0x12>
    55dc:	00 d0       	rcall	.+0      	; 0x55de <VL53L0X_get_total_signal_rate+0x14>
    55de:	cd b7       	in	r28, 0x3d	; 61
    55e0:	de b7       	in	r29, 0x3e	; 62
    55e2:	8a 01       	movw	r16, r20
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	f1616 totalXtalkMegaCps;

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
    55e4:	fb 01       	movw	r30, r22
    55e6:	c4 84       	ldd	r12, Z+12	; 0x0c
    55e8:	d5 84       	ldd	r13, Z+13	; 0x0d
    55ea:	e6 84       	ldd	r14, Z+14	; 0x0e
    55ec:	f7 84       	ldd	r15, Z+15	; 0x0f
	f1616 *ptotal_signal_rate_mcps)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	f1616 totalXtalkMegaCps;

	*ptotal_signal_rate_mcps =
    55ee:	fa 01       	movw	r30, r20
    55f0:	c0 82       	st	Z, r12
    55f2:	d1 82       	std	Z+1, r13	; 0x01
    55f4:	e2 82       	std	Z+2, r14	; 0x02
    55f6:	f3 82       	std	Z+3, r15	; 0x03
		pRangingMeasurementData->SignalRateRtnMegaCps;

	Status = VL53L0X_get_total_xtalk_rate(
    55f8:	ae 01       	movw	r20, r28
    55fa:	4f 5f       	subi	r20, 0xFF	; 255
    55fc:	5f 4f       	sbci	r21, 0xFF	; 255
    55fe:	9c df       	rcall	.-200    	; 0x5538 <VL53L0X_get_total_xtalk_rate>
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
    5600:	81 11       	cpse	r24, r1
    5602:	11 c0       	rjmp	.+34     	; 0x5626 <VL53L0X_get_total_signal_rate+0x5c>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
    5604:	f8 01       	movw	r30, r16
    5606:	c0 80       	ld	r12, Z
    5608:	d1 80       	ldd	r13, Z+1	; 0x01
    560a:	e2 80       	ldd	r14, Z+2	; 0x02
    560c:	f3 80       	ldd	r15, Z+3	; 0x03
    560e:	49 81       	ldd	r20, Y+1	; 0x01
    5610:	5a 81       	ldd	r21, Y+2	; 0x02
    5612:	6b 81       	ldd	r22, Y+3	; 0x03
    5614:	7c 81       	ldd	r23, Y+4	; 0x04
    5616:	4c 0d       	add	r20, r12
    5618:	5d 1d       	adc	r21, r13
    561a:	6e 1d       	adc	r22, r14
    561c:	7f 1d       	adc	r23, r15
    561e:	40 83       	st	Z, r20
    5620:	51 83       	std	Z+1, r21	; 0x01
    5622:	62 83       	std	Z+2, r22	; 0x02
    5624:	73 83       	std	Z+3, r23	; 0x03

	return Status;
}
    5626:	0f 90       	pop	r0
    5628:	0f 90       	pop	r0
    562a:	0f 90       	pop	r0
    562c:	0f 90       	pop	r0
    562e:	df 91       	pop	r29
    5630:	cf 91       	pop	r28
    5632:	1f 91       	pop	r17
    5634:	0f 91       	pop	r16
    5636:	ff 90       	pop	r15
    5638:	ef 90       	pop	r14
    563a:	df 90       	pop	r13
    563c:	cf 90       	pop	r12
    563e:	08 95       	ret

00005640 <VL53L0X_calc_dmax>:
	f1616 pwMult,
	u32 sigmaEstimateP1,
	f1616 sigmaEstimateP2,
	u32 peakVcselDuration_us,
	u32 *pdmax_mm)
{
    5640:	4f 92       	push	r4
    5642:	5f 92       	push	r5
    5644:	6f 92       	push	r6
    5646:	7f 92       	push	r7
    5648:	8f 92       	push	r8
    564a:	9f 92       	push	r9
    564c:	af 92       	push	r10
    564e:	bf 92       	push	r11
    5650:	cf 92       	push	r12
    5652:	df 92       	push	r13
    5654:	ef 92       	push	r14
    5656:	ff 92       	push	r15
    5658:	0f 93       	push	r16
    565a:	1f 93       	push	r17
    565c:	cf 93       	push	r28
    565e:	df 93       	push	r29
    5660:	cd b7       	in	r28, 0x3d	; 61
    5662:	de b7       	in	r29, 0x3e	; 62
    5664:	64 97       	sbiw	r28, 0x14	; 20
    5666:	0f b6       	in	r0, 0x3f	; 63
    5668:	f8 94       	cli
    566a:	de bf       	out	0x3e, r29	; 62
    566c:	0f be       	out	0x3f, r0	; 63
    566e:	cd bf       	out	0x3d, r28	; 61
    5670:	49 87       	std	Y+9, r20	; 0x09
    5672:	5a 87       	std	Y+10, r21	; 0x0a
    5674:	6b 87       	std	Y+11, r22	; 0x0b
    5676:	7c 87       	std	Y+12, r23	; 0x0c
    5678:	09 83       	std	Y+1, r16	; 0x01
    567a:	1a 83       	std	Y+2, r17	; 0x02
    567c:	2b 83       	std	Y+3, r18	; 0x03
    567e:	3c 83       	std	Y+4, r19	; 0x04
	u32 signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
    5680:	fc 01       	movw	r30, r24
    5682:	e5 5c       	subi	r30, 0xC5	; 197
    5684:	fe 4f       	sbci	r31, 0xFE	; 254
	f1616 sigmaEstP2Tmp;
	u32 signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;

	dmaxCalRange_mm =
    5686:	20 81       	ld	r18, Z
    5688:	31 81       	ldd	r19, Z+1	; 0x01
    568a:	29 01       	movw	r4, r18
    568c:	61 2c       	mov	r6, r1
    568e:	71 2c       	mov	r7, r1
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);

	dmaxCalSignalRateRtn_mcps =
    5690:	32 96       	adiw	r30, 0x02	; 2

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
    5692:	60 81       	ld	r22, Z
    5694:	71 81       	ldd	r23, Z+1	; 0x01
    5696:	82 81       	ldd	r24, Z+2	; 0x02
    5698:	93 81       	ldd	r25, Z+3	; 0x03
    569a:	a3 01       	movw	r20, r6
    569c:	92 01       	movw	r18, r4
    569e:	83 d7       	rcall	.+3846   	; 0x65a6 <__mulsi3>
    56a0:	dc 01       	movw	r26, r24
    56a2:	cb 01       	movw	r24, r22
    56a4:	80 58       	subi	r24, 0x80	; 128
    56a6:	9f 4f       	sbci	r25, 0xFF	; 255
    56a8:	af 4f       	sbci	r26, 0xFF	; 255
    56aa:	bf 4f       	sbci	r27, 0xFF	; 255
    56ac:	69 2f       	mov	r22, r25
    56ae:	7a 2f       	mov	r23, r26
    56b0:	8b 2f       	mov	r24, r27
	SignalAt0mm *= dmaxCalRange_mm;
    56b2:	99 27       	eor	r25, r25
    56b4:	78 d7       	rcall	.+3824   	; 0x65a6 <__mulsi3>
    56b6:	6d 87       	std	Y+13, r22	; 0x0d
    56b8:	7e 87       	std	Y+14, r23	; 0x0e
    56ba:	8f 87       	std	Y+15, r24	; 0x0f
    56bc:	98 8b       	std	Y+16, r25	; 0x10

	minSignalNeeded_p1 = 0;
	if (totalCorrSignalRate_mcps > 0) {
    56be:	29 81       	ldd	r18, Y+1	; 0x01
    56c0:	3a 81       	ldd	r19, Y+2	; 0x02
    56c2:	4b 81       	ldd	r20, Y+3	; 0x03
    56c4:	5c 81       	ldd	r21, Y+4	; 0x04
    56c6:	21 15       	cp	r18, r1
    56c8:	31 05       	cpc	r19, r1
    56ca:	41 05       	cpc	r20, r1
    56cc:	51 05       	cpc	r21, r1
    56ce:	b1 f1       	breq	.+108    	; 0x573c <VL53L0X_calc_dmax+0xfc>
		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
    56d0:	49 84       	ldd	r4, Y+9	; 0x09
    56d2:	5a 84       	ldd	r5, Y+10	; 0x0a
    56d4:	6b 84       	ldd	r6, Y+11	; 0x0b
    56d6:	7c 84       	ldd	r7, Y+12	; 0x0c
    56d8:	03 2e       	mov	r0, r19
    56da:	3a e0       	ldi	r19, 0x0A	; 10
    56dc:	44 0c       	add	r4, r4
    56de:	55 1c       	adc	r5, r5
    56e0:	66 1c       	adc	r6, r6
    56e2:	77 1c       	adc	r7, r7
    56e4:	3a 95       	dec	r19
    56e6:	d1 f7       	brne	.-12     	; 0x56dc <VL53L0X_calc_dmax+0x9c>
    56e8:	30 2d       	mov	r19, r0
    56ea:	da 01       	movw	r26, r20
    56ec:	c9 01       	movw	r24, r18
    56ee:	b6 95       	lsr	r27
    56f0:	a7 95       	ror	r26
    56f2:	97 95       	ror	r25
    56f4:	87 95       	ror	r24
    56f6:	bc 01       	movw	r22, r24
    56f8:	cd 01       	movw	r24, r26
    56fa:	64 0d       	add	r22, r4
    56fc:	75 1d       	adc	r23, r5
    56fe:	86 1d       	adc	r24, r6
			(totalCorrSignalRate_mcps/2);

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
    5700:	97 1d       	adc	r25, r7
    5702:	60 d7       	rcall	.+3776   	; 0x65c4 <__udivmodsi4>

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
    5704:	da 01       	movw	r26, r20
    5706:	c9 01       	movw	r24, r18
    5708:	88 0f       	add	r24, r24
    570a:	99 1f       	adc	r25, r25
    570c:	aa 1f       	adc	r26, r26
    570e:	bb 1f       	adc	r27, r27
    5710:	bc 01       	movw	r22, r24
    5712:	cd 01       	movw	r24, r26
    5714:	62 0f       	add	r22, r18
    5716:	73 1f       	adc	r23, r19
    5718:	84 1f       	adc	r24, r20

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
    571a:	95 1f       	adc	r25, r21
    571c:	9b 01       	movw	r18, r22
    571e:	ac 01       	movw	r20, r24
    5720:	42 d7       	rcall	.+3716   	; 0x65a6 <__mulsi3>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	90 58       	subi	r25, 0x80	; 128
    5728:	af 4f       	sbci	r26, 0xFF	; 255
    572a:	bf 4f       	sbci	r27, 0xFF	; 255
    572c:	9d 01       	movw	r18, r26
    572e:	44 27       	eor	r20, r20
    5730:	55 27       	eor	r21, r21
    5732:	29 87       	std	Y+9, r18	; 0x09
    5734:	3a 87       	std	Y+10, r19	; 0x0a
    5736:	4b 87       	std	Y+11, r20	; 0x0b
    5738:	5c 87       	std	Y+12, r21	; 0x0c
    573a:	04 c0       	rjmp	.+8      	; 0x5744 <VL53L0X_calc_dmax+0x104>

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
	SignalAt0mm *= dmaxCalRange_mm;

	minSignalNeeded_p1 = 0;
    573c:	19 86       	std	Y+9, r1	; 0x09
    573e:	1a 86       	std	Y+10, r1	; 0x0a
    5740:	1b 86       	std	Y+11, r1	; 0x0b
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
    5742:	1c 86       	std	Y+12, r1	; 0x0c
    5744:	a7 01       	movw	r20, r14
    5746:	96 01       	movw	r18, r12
    5748:	c5 01       	movw	r24, r10
    574a:	b4 01       	movw	r22, r8
    574c:	2c d7       	rcall	.+3672   	; 0x65a6 <__mulsi3>
    574e:	dc 01       	movw	r26, r24
    5750:	cb 01       	movw	r24, r22
    5752:	90 58       	subi	r25, 0x80	; 128
    5754:	af 4f       	sbci	r26, 0xFF	; 255
    5756:	bf 4f       	sbci	r27, 0xFF	; 255
    5758:	bd 01       	movw	r22, r26

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
    575a:	88 27       	eor	r24, r24
    575c:	99 27       	eor	r25, r25
    575e:	9b 01       	movw	r18, r22
    5760:	ac 01       	movw	r20, r24
    5762:	21 d7       	rcall	.+3650   	; 0x65a6 <__mulsi3>
    5764:	69 8b       	std	Y+17, r22	; 0x11
    5766:	7a 8b       	std	Y+18, r23	; 0x12
    5768:	8b 8b       	std	Y+19, r24	; 0x13
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
    576a:	9c 8b       	std	Y+20, r25	; 0x14
    576c:	8f a1       	ldd	r24, Y+39	; 0x27
    576e:	98 a5       	ldd	r25, Y+40	; 0x28
    5770:	a9 a5       	ldd	r26, Y+41	; 0x29
    5772:	ba a5       	ldd	r27, Y+42	; 0x2a
    5774:	90 58       	subi	r25, 0x80	; 128
    5776:	af 4f       	sbci	r26, 0xFF	; 255
    5778:	bf 4f       	sbci	r27, 0xFF	; 255
    577a:	cd 01       	movw	r24, r26
    577c:	aa 27       	eor	r26, r26
    577e:	bb 27       	eor	r27, r27
    5780:	bc 01       	movw	r22, r24
    5782:	cd 01       	movw	r24, r26
    5784:	6d 5f       	subi	r22, 0xFD	; 253
    5786:	7f 4f       	sbci	r23, 0xFF	; 255
    5788:	8f 4f       	sbci	r24, 0xFF	; 255
    578a:	9f 4f       	sbci	r25, 0xFF	; 255
    578c:	2b ea       	ldi	r18, 0xAB	; 171
    578e:	3a ea       	ldi	r19, 0xAA	; 170
    5790:	4a ea       	ldi	r20, 0xAA	; 170
    5792:	5a ea       	ldi	r21, 0xAA	; 170
    5794:	77 d7       	rcall	.+3822   	; 0x6684 <__umulsidi3>
    5796:	00 e2       	ldi	r16, 0x20	; 32
    5798:	9e d7       	rcall	.+3900   	; 0x66d6 <__lshrdi3>
    579a:	82 2e       	mov	r8, r18
    579c:	93 2e       	mov	r9, r19
    579e:	a4 2e       	mov	r10, r20
    57a0:	b5 2e       	mov	r11, r21
    57a2:	b5 01       	movw	r22, r10
    57a4:	a4 01       	movw	r20, r8
    57a6:	76 95       	lsr	r23
    57a8:	67 95       	ror	r22
    57aa:	57 95       	ror	r21
    57ac:	47 95       	ror	r20
    57ae:	76 95       	lsr	r23
    57b0:	67 95       	ror	r22
    57b2:	57 95       	ror	r21
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
    57b4:	47 95       	ror	r20
    57b6:	db 01       	movw	r26, r22
    57b8:	ca 01       	movw	r24, r20
    57ba:	88 0f       	add	r24, r24
    57bc:	99 1f       	adc	r25, r25
    57be:	aa 1f       	adc	r26, r26
    57c0:	bb 1f       	adc	r27, r27
    57c2:	88 0f       	add	r24, r24
    57c4:	99 1f       	adc	r25, r25
    57c6:	aa 1f       	adc	r26, r26
    57c8:	bb 1f       	adc	r27, r27
    57ca:	88 0f       	add	r24, r24
    57cc:	99 1f       	adc	r25, r25
    57ce:	aa 1f       	adc	r26, r26
    57d0:	bb 1f       	adc	r27, r27
    57d2:	84 1b       	sub	r24, r20
    57d4:	95 0b       	sbc	r25, r21
    57d6:	a6 0b       	sbc	r26, r22
    57d8:	b7 0b       	sbc	r27, r23
    57da:	00 97       	sbiw	r24, 0x00	; 0
    57dc:	a1 40       	sbci	r26, 0x01	; 1
    57de:	b1 05       	cpc	r27, r1
    57e0:	08 f0       	brcs	.+2      	; 0x57e4 <VL53L0X_calc_dmax+0x1a4>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
    57e2:	3e c0       	rjmp	.+124    	; 0x5860 <VL53L0X_calc_dmax+0x220>
    57e4:	6f a1       	ldd	r22, Y+39	; 0x27
    57e6:	78 a5       	ldd	r23, Y+40	; 0x28
    57e8:	89 a5       	ldd	r24, Y+41	; 0x29
    57ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    57ec:	6d 5f       	subi	r22, 0xFD	; 253
    57ee:	7f 4f       	sbci	r23, 0xFF	; 255
    57f0:	8f 4f       	sbci	r24, 0xFF	; 255
    57f2:	9f 4f       	sbci	r25, 0xFF	; 255
    57f4:	2b ea       	ldi	r18, 0xAB	; 171
    57f6:	3a ea       	ldi	r19, 0xAA	; 170
    57f8:	4a ea       	ldi	r20, 0xAA	; 170
    57fa:	5a ea       	ldi	r21, 0xAA	; 170
    57fc:	43 d7       	rcall	.+3718   	; 0x6684 <__umulsidi3>
    57fe:	6b d7       	rcall	.+3798   	; 0x66d6 <__lshrdi3>
    5800:	29 83       	std	Y+1, r18	; 0x01
    5802:	3a 83       	std	Y+2, r19	; 0x02
    5804:	4b 83       	std	Y+3, r20	; 0x03
    5806:	5c 83       	std	Y+4, r21	; 0x04
    5808:	6d 83       	std	Y+5, r22	; 0x05
    580a:	7e 83       	std	Y+6, r23	; 0x06
    580c:	8f 83       	std	Y+7, r24	; 0x07
    580e:	98 87       	std	Y+8, r25	; 0x08
    5810:	49 80       	ldd	r4, Y+1	; 0x01
    5812:	5a 80       	ldd	r5, Y+2	; 0x02
    5814:	6b 80       	ldd	r6, Y+3	; 0x03
    5816:	7c 80       	ldd	r7, Y+4	; 0x04
    5818:	76 94       	lsr	r7
    581a:	67 94       	ror	r6
    581c:	57 94       	ror	r5
    581e:	47 94       	ror	r4
    5820:	76 94       	lsr	r7
    5822:	67 94       	ror	r6
    5824:	57 94       	ror	r5
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
    5826:	47 94       	ror	r4
    5828:	d3 01       	movw	r26, r6
    582a:	c2 01       	movw	r24, r4
    582c:	88 0f       	add	r24, r24
    582e:	99 1f       	adc	r25, r25
    5830:	aa 1f       	adc	r26, r26
    5832:	bb 1f       	adc	r27, r27
    5834:	88 0f       	add	r24, r24
    5836:	99 1f       	adc	r25, r25
    5838:	aa 1f       	adc	r26, r26
    583a:	bb 1f       	adc	r27, r27
    583c:	88 0f       	add	r24, r24
    583e:	99 1f       	adc	r25, r25
    5840:	aa 1f       	adc	r26, r26
    5842:	bb 1f       	adc	r27, r27
    5844:	84 19       	sub	r24, r4
    5846:	95 09       	sbc	r25, r5
    5848:	a6 09       	sbc	r26, r6
    584a:	b7 09       	sbc	r27, r7
    584c:	90 58       	subi	r25, 0x80	; 128
    584e:	af 4f       	sbci	r26, 0xFF	; 255
    5850:	bf 4f       	sbci	r27, 0xFF	; 255
    5852:	bd 01       	movw	r22, r26

		minSignalNeeded_p3 *= minSignalNeeded_p3;
    5854:	88 27       	eor	r24, r24
    5856:	99 27       	eor	r25, r25
    5858:	9b 01       	movw	r18, r22
    585a:	ac 01       	movw	r20, r24
    585c:	a4 d6       	rcall	.+3400   	; 0x65a6 <__mulsi3>
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;

	if (sigmaEstP2Tmp > 0xffff) {
		minSignalNeeded_p3 = 0xfff00000;
    585e:	04 c0       	rjmp	.+8      	; 0x5868 <VL53L0X_calc_dmax+0x228>
    5860:	60 e0       	ldi	r22, 0x00	; 0
    5862:	70 e0       	ldi	r23, 0x00	; 0
    5864:	80 ef       	ldi	r24, 0xF0	; 240

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
    5866:	9f ef       	ldi	r25, 0xFF	; 255
    5868:	4b a4       	ldd	r4, Y+43	; 0x2b
    586a:	5c a4       	ldd	r5, Y+44	; 0x2c
    586c:	6d a4       	ldd	r6, Y+45	; 0x2d
    586e:	7e a4       	ldd	r7, Y+46	; 0x2e
    5870:	76 94       	lsr	r7
    5872:	67 94       	ror	r6
    5874:	57 94       	ror	r5
    5876:	47 94       	ror	r4
    5878:	c9 88       	ldd	r12, Y+17	; 0x11
    587a:	da 88       	ldd	r13, Y+18	; 0x12
    587c:	eb 88       	ldd	r14, Y+19	; 0x13
    587e:	fc 88       	ldd	r15, Y+20	; 0x14
    5880:	c4 0c       	add	r12, r4
    5882:	d5 1c       	adc	r13, r5
    5884:	e6 1c       	adc	r14, r6
    5886:	f7 1c       	adc	r15, r7
    5888:	6c 0d       	add	r22, r12
    588a:	7d 1d       	adc	r23, r13
	minSignalNeeded /= peakVcselDuration_us;
    588c:	8e 1d       	adc	r24, r14
    588e:	9f 1d       	adc	r25, r15
    5890:	2b a5       	ldd	r18, Y+43	; 0x2b
    5892:	3c a5       	ldd	r19, Y+44	; 0x2c
    5894:	4d a5       	ldd	r20, Y+45	; 0x2d
    5896:	5e a5       	ldd	r21, Y+46	; 0x2e

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
    5898:	95 d6       	rcall	.+3370   	; 0x65c4 <__udivmodsi4>
    589a:	da 01       	movw	r26, r20
    589c:	c9 01       	movw	r24, r18
    589e:	07 2e       	mov	r0, r23
    58a0:	7e e0       	ldi	r23, 0x0E	; 14
    58a2:	88 0f       	add	r24, r24
    58a4:	99 1f       	adc	r25, r25
    58a6:	aa 1f       	adc	r26, r26
    58a8:	bb 1f       	adc	r27, r27
    58aa:	7a 95       	dec	r23

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
    58ac:	d1 f7       	brne	.-12     	; 0x58a2 <VL53L0X_calc_dmax+0x262>
    58ae:	70 2d       	mov	r23, r0
    58b0:	bc 01       	movw	r22, r24
    58b2:	cd 01       	movw	r24, r26
    58b4:	61 58       	subi	r22, 0x81	; 129
	minSignalNeeded /= minSignalNeeded_p4;
    58b6:	7f 4f       	sbci	r23, 0xFF	; 255
    58b8:	8f 4f       	sbci	r24, 0xFF	; 255
    58ba:	9f 4f       	sbci	r25, 0xFF	; 255
    58bc:	2e ef       	ldi	r18, 0xFE	; 254
    58be:	30 e0       	ldi	r19, 0x00	; 0
    58c0:	40 e0       	ldi	r20, 0x00	; 0
    58c2:	50 e0       	ldi	r21, 0x00	; 0
    58c4:	7f d6       	rcall	.+3326   	; 0x65c4 <__udivmodsi4>
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    58c6:	ca 01       	movw	r24, r20
    58c8:	b9 01       	movw	r22, r18
    58ca:	29 85       	ldd	r18, Y+9	; 0x09
    58cc:	3a 85       	ldd	r19, Y+10	; 0x0a
    58ce:	4b 85       	ldd	r20, Y+11	; 0x0b
    58d0:	5c 85       	ldd	r21, Y+12	; 0x0c
    58d2:	69 d6       	rcall	.+3282   	; 0x65a6 <__mulsi3>
    58d4:	6c 50       	subi	r22, 0x0C	; 12
    58d6:	7e 4f       	sbci	r23, 0xFE	; 254
    58d8:	8f 4f       	sbci	r24, 0xFF	; 255
    58da:	9f 4f       	sbci	r25, 0xFF	; 255
    58dc:	0f 2e       	mov	r0, r31
    58de:	f8 ee       	ldi	r31, 0xE8	; 232
    58e0:	8f 2e       	mov	r8, r31
    58e2:	f3 e0       	ldi	r31, 0x03	; 3
    58e4:	9f 2e       	mov	r9, r31
    58e6:	a1 2c       	mov	r10, r1
    58e8:	b1 2c       	mov	r11, r1
    58ea:	f0 2d       	mov	r31, r0
    58ec:	a5 01       	movw	r20, r10
    58ee:	94 01       	movw	r18, r8
	minSignalNeeded <<= 4;

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
    58f0:	69 d6       	rcall	.+3282   	; 0x65c4 <__udivmodsi4>
    58f2:	69 01       	movw	r12, r18
    58f4:	7a 01       	movw	r14, r20
    58f6:	cc 0c       	add	r12, r12
    58f8:	dd 1c       	adc	r13, r13
    58fa:	ee 1c       	adc	r14, r14
    58fc:	ff 1c       	adc	r15, r15
    58fe:	cc 0c       	add	r12, r12
    5900:	dd 1c       	adc	r13, r13
    5902:	ee 1c       	adc	r14, r14
    5904:	ff 1c       	adc	r15, r15
    5906:	cc 0c       	add	r12, r12
    5908:	dd 1c       	adc	r13, r13
    590a:	ee 1c       	adc	r14, r14
    590c:	ff 1c       	adc	r15, r15
    590e:	cc 0c       	add	r12, r12
    5910:	dd 1c       	adc	r13, r13
    5912:	ee 1c       	adc	r14, r14
    5914:	ff 1c       	adc	r15, r15
    5916:	44 ef       	ldi	r20, 0xF4	; 244
    5918:	c4 0e       	add	r12, r20
    591a:	41 e0       	ldi	r20, 0x01	; 1
    591c:	d4 1e       	adc	r13, r20
    591e:	e1 1c       	adc	r14, r1
    5920:	f1 1c       	adc	r15, r1
    5922:	c7 01       	movw	r24, r14
    5924:	b6 01       	movw	r22, r12
    5926:	a5 01       	movw	r20, r10
    5928:	94 01       	movw	r18, r8
    592a:	4c d6       	rcall	.+3224   	; 0x65c4 <__udivmodsi4>
    592c:	49 01       	movw	r8, r18
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
    592e:	5a 01       	movw	r10, r20
    5930:	8d 85       	ldd	r24, Y+13	; 0x0d
    5932:	9e 85       	ldd	r25, Y+14	; 0x0e
    5934:	af 85       	ldd	r26, Y+15	; 0x0f
    5936:	b8 89       	ldd	r27, Y+16	; 0x10
    5938:	80 96       	adiw	r24, 0x20	; 32
    593a:	a1 1d       	adc	r26, r1
    593c:	b1 1d       	adc	r27, r1
    593e:	bc 01       	movw	r22, r24
    5940:	cd 01       	movw	r24, r26
    5942:	68 94       	set
    5944:	15 f8       	bld	r1, 5
    5946:	96 95       	lsr	r25
    5948:	87 95       	ror	r24
    594a:	77 95       	ror	r23
    594c:	67 95       	ror	r22
    594e:	16 94       	lsr	r1
    5950:	d1 f7       	brne	.-12     	; 0x5946 <VL53L0X_calc_dmax+0x306>
    5952:	0e 94 de 20 	call	0x41bc	; 0x41bc <VL53L0X_isqrt>

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
    5956:	2b 01       	movw	r4, r22
    5958:	3c 01       	movw	r6, r24
    595a:	81 14       	cp	r8, r1
    595c:	91 04       	cpc	r9, r1
    595e:	a1 04       	cpc	r10, r1
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
    5960:	b1 04       	cpc	r11, r1
    5962:	a9 f0       	breq	.+42     	; 0x598e <VL53L0X_calc_dmax+0x34e>
    5964:	c7 01       	movw	r24, r14
    5966:	b6 01       	movw	r22, r12
    5968:	20 ed       	ldi	r18, 0xD0	; 208
    596a:	37 e0       	ldi	r19, 0x07	; 7
    596c:	40 e0       	ldi	r20, 0x00	; 0
    596e:	50 e0       	ldi	r21, 0x00	; 0
    5970:	29 d6       	rcall	.+3154   	; 0x65c4 <__udivmodsi4>
    5972:	6d 85       	ldd	r22, Y+13	; 0x0d
    5974:	7e 85       	ldd	r23, Y+14	; 0x0e
    5976:	8f 85       	ldd	r24, Y+15	; 0x0f
    5978:	98 89       	ldd	r25, Y+16	; 0x10
    597a:	62 0f       	add	r22, r18
    597c:	73 1f       	adc	r23, r19
    597e:	84 1f       	adc	r24, r20
    5980:	95 1f       	adc	r25, r21
    5982:	a5 01       	movw	r20, r10
    5984:	94 01       	movw	r18, r8
    5986:	1e d6       	rcall	.+3132   	; 0x65c4 <__udivmodsi4>
    5988:	ca 01       	movw	r24, r20
    598a:	b9 01       	movw	r22, r18
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
    598c:	03 c0       	rjmp	.+6      	; 0x5994 <VL53L0X_calc_dmax+0x354>
    598e:	60 e0       	ldi	r22, 0x00	; 0
    5990:	70 e0       	ldi	r23, 0x00	; 0

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
    5992:	cb 01       	movw	r24, r22
    5994:	0e 94 de 20 	call	0x41bc	; 0x41bc <VL53L0X_isqrt>

	*pdmax_mm = dmaxDark;
	if (dmaxDark > dmaxAmbient)
    5998:	64 15       	cp	r22, r4
    599a:	75 05       	cpc	r23, r5
    599c:	86 05       	cpc	r24, r6
    599e:	97 05       	cpc	r25, r7
	else
		dmaxAmbient = 0;

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);

	*pdmax_mm = dmaxDark;
    59a0:	40 f0       	brcs	.+16     	; 0x59b2 <VL53L0X_calc_dmax+0x372>
    59a2:	af a5       	ldd	r26, Y+47	; 0x2f
    59a4:	b8 a9       	ldd	r27, Y+48	; 0x30
    59a6:	4d 92       	st	X+, r4
    59a8:	5d 92       	st	X+, r5
    59aa:	6d 92       	st	X+, r6
    59ac:	7c 92       	st	X, r7
    59ae:	13 97       	sbiw	r26, 0x03	; 3
	if (dmaxDark > dmaxAmbient)
		*pdmax_mm = dmaxAmbient;
    59b0:	06 c0       	rjmp	.+12     	; 0x59be <VL53L0X_calc_dmax+0x37e>
    59b2:	ef a5       	ldd	r30, Y+47	; 0x2f
    59b4:	f8 a9       	ldd	r31, Y+48	; 0x30
    59b6:	60 83       	st	Z, r22
    59b8:	71 83       	std	Z+1, r23	; 0x01
    59ba:	82 83       	std	Z+2, r24	; 0x02

	return Status;
}
    59bc:	93 83       	std	Z+3, r25	; 0x03
    59be:	80 e0       	ldi	r24, 0x00	; 0
    59c0:	64 96       	adiw	r28, 0x14	; 20
    59c2:	0f b6       	in	r0, 0x3f	; 63
    59c4:	f8 94       	cli
    59c6:	de bf       	out	0x3e, r29	; 62
    59c8:	0f be       	out	0x3f, r0	; 63
    59ca:	cd bf       	out	0x3d, r28	; 61
    59cc:	df 91       	pop	r29
    59ce:	cf 91       	pop	r28
    59d0:	1f 91       	pop	r17
    59d2:	0f 91       	pop	r16
    59d4:	ff 90       	pop	r15
    59d6:	ef 90       	pop	r14
    59d8:	df 90       	pop	r13
    59da:	cf 90       	pop	r12
    59dc:	bf 90       	pop	r11
    59de:	af 90       	pop	r10
    59e0:	9f 90       	pop	r9
    59e2:	8f 90       	pop	r8
    59e4:	7f 90       	pop	r7
    59e6:	6f 90       	pop	r6
    59e8:	5f 90       	pop	r5
    59ea:	4f 90       	pop	r4
    59ec:	08 95       	ret

000059ee <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	f1616 *pSigmaEstimate,
	u32 *pDmax_mm)
{
    59ee:	2f 92       	push	r2
    59f0:	3f 92       	push	r3
    59f2:	4f 92       	push	r4
    59f4:	5f 92       	push	r5
    59f6:	6f 92       	push	r6
    59f8:	7f 92       	push	r7
    59fa:	8f 92       	push	r8
    59fc:	9f 92       	push	r9
    59fe:	af 92       	push	r10
    5a00:	bf 92       	push	r11
    5a02:	cf 92       	push	r12
    5a04:	df 92       	push	r13
    5a06:	ef 92       	push	r14
    5a08:	ff 92       	push	r15
    5a0a:	0f 93       	push	r16
    5a0c:	1f 93       	push	r17
    5a0e:	cf 93       	push	r28
    5a10:	df 93       	push	r29
    5a12:	cd b7       	in	r28, 0x3d	; 61
    5a14:	de b7       	in	r29, 0x3e	; 62
    5a16:	e5 97       	sbiw	r28, 0x35	; 53
    5a18:	0f b6       	in	r0, 0x3f	; 63
    5a1a:	f8 94       	cli
    5a1c:	de bf       	out	0x3e, r29	; 62
    5a1e:	0f be       	out	0x3f, r0	; 63
    5a20:	cd bf       	out	0x3d, r28	; 61
    5a22:	1c 01       	movw	r2, r24
    5a24:	7a 87       	std	Y+10, r23	; 0x0a
    5a26:	69 87       	std	Y+9, r22	; 0x09
    5a28:	5c 8f       	std	Y+28, r21	; 0x1c
    5a2a:	4b 8f       	std	Y+27, r20	; 0x1b
    5a2c:	3a 8f       	std	Y+26, r19	; 0x1a
    5a2e:	29 8f       	std	Y+25, r18	; 0x19
	 * @{
	 *
	 * Estimates the range sigma
	 */

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
    5a30:	fc 01       	movw	r30, r24
    5a32:	85 8d       	ldd	r24, Z+29	; 0x1d
    5a34:	96 8d       	ldd	r25, Z+30	; 0x1e
    5a36:	a7 8d       	ldd	r26, Z+31	; 0x1f
    5a38:	b0 a1       	ldd	r27, Z+32	; 0x20
    5a3a:	89 83       	std	Y+1, r24	; 0x01
    5a3c:	9a 83       	std	Y+2, r25	; 0x02
    5a3e:	ab 83       	std	Y+3, r26	; 0x03
    5a40:	bc 83       	std	Y+4, r27	; 0x04
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
    5a42:	db 01       	movw	r26, r22
    5a44:	50 96       	adiw	r26, 0x10	; 16
    5a46:	2d 91       	ld	r18, X+
    5a48:	3d 91       	ld	r19, X+
    5a4a:	4d 91       	ld	r20, X+
    5a4c:	5c 91       	ld	r21, X
    5a4e:	53 97       	sbiw	r26, 0x13	; 19
    5a50:	2d 87       	std	Y+13, r18	; 0x0d
    5a52:	3e 87       	std	Y+14, r19	; 0x0e
    5a54:	4f 87       	std	Y+15, r20	; 0x0f
    5a56:	58 8b       	std	Y+16, r21	; 0x10

	correctedSignalRate_mcps =
    5a58:	1c 96       	adiw	r26, 0x0c	; 12
    5a5a:	2d 91       	ld	r18, X+
    5a5c:	3d 91       	ld	r19, X+
    5a5e:	4d 91       	ld	r20, X+
    5a60:	5c 91       	ld	r21, X
    5a62:	1f 97       	sbiw	r26, 0x0f	; 15
    5a64:	29 a3       	std	Y+33, r18	; 0x21
    5a66:	3a a3       	std	Y+34, r19	; 0x22
    5a68:	4b a3       	std	Y+35, r20	; 0x23
    5a6a:	5c a3       	std	Y+36, r21	; 0x24
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
    5a6c:	ae 01       	movw	r20, r28
    5a6e:	4b 5f       	subi	r20, 0xFB	; 251
    5a70:	5f 4f       	sbci	r21, 0xFF	; 255
    5a72:	c1 01       	movw	r24, r2
    5a74:	aa dd       	rcall	.-1196   	; 0x55ca <VL53L0X_get_total_signal_rate>
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
    5a76:	ae 01       	movw	r20, r28
    5a78:	4f 5f       	subi	r20, 0xFF	; 255
    5a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a7c:	69 85       	ldd	r22, Y+9	; 0x09
    5a7e:	7a 85       	ldd	r23, Y+10	; 0x0a
    5a80:	c1 01       	movw	r24, r2
    5a82:	5a dd       	rcall	.-1356   	; 0x5538 <VL53L0X_get_total_xtalk_rate>
    5a84:	18 2f       	mov	r17, r24
	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
		xTalkCompRate_kcps = cMaxXTalk_kcps;

	if (Status == VL53L0X_ERROR_NONE) {
    5a86:	81 11       	cpse	r24, r1
    5a88:	b8 c2       	rjmp	.+1392   	; 0x5ffa <VL53L0X_calc_sigma_estimate+0x60c>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5a8a:	f1 01       	movw	r30, r2
    5a8c:	e1 53       	subi	r30, 0x31	; 49
    5a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a90:	20 81       	ld	r18, Z
    5a92:	31 81       	ldd	r19, Z+1	; 0x01
    5a94:	42 81       	ldd	r20, Z+2	; 0x02
    5a96:	53 81       	ldd	r21, Z+3	; 0x03
    5a98:	2d a3       	std	Y+37, r18	; 0x25
    5a9a:	3e a3       	std	Y+38, r19	; 0x26
    5a9c:	4f a3       	std	Y+39, r20	; 0x27
    5a9e:	58 a7       	std	Y+40, r21	; 0x28
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5aa0:	34 96       	adiw	r30, 0x04	; 4
    5aa2:	00 81       	ld	r16, Z
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    5aa4:	20 2f       	mov	r18, r16
    5aa6:	4d a1       	ldd	r20, Y+37	; 0x25
    5aa8:	5e a1       	ldd	r21, Y+38	; 0x26
    5aaa:	6f a1       	ldd	r22, Y+39	; 0x27
    5aac:	78 a5       	ldd	r23, Y+40	; 0x28
    5aae:	c1 01       	movw	r24, r2
    5ab0:	1b d8       	rcall	.-4042   	; 0x4ae8 <VL53L0X_calc_timeout_mclks>
    5ab2:	2b 01       	movw	r4, r22
    5ab4:	3c 01       	movw	r6, r24
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5ab6:	f1 01       	movw	r30, r2
    5ab8:	ec 52       	subi	r30, 0x2C	; 44
    5aba:	ff 4f       	sbci	r31, 0xFF	; 255
    5abc:	80 81       	ld	r24, Z
    5abe:	91 81       	ldd	r25, Z+1	; 0x01
    5ac0:	a2 81       	ldd	r26, Z+2	; 0x02
    5ac2:	b3 81       	ldd	r27, Z+3	; 0x03
    5ac4:	89 a7       	std	Y+41, r24	; 0x29
    5ac6:	9a a7       	std	Y+42, r25	; 0x2a
    5ac8:	ab a7       	std	Y+43, r26	; 0x2b
    5aca:	bc a7       	std	Y+44, r27	; 0x2c
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
    5acc:	34 96       	adiw	r30, 0x04	; 4
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
    5ace:	20 81       	ld	r18, Z
    5ad0:	ac 01       	movw	r20, r24
    5ad2:	bd 01       	movw	r22, r26
    5ad4:	c1 01       	movw	r24, r2
    5ad6:	08 d8       	rcall	.-4080   	; 0x4ae8 <VL53L0X_calc_timeout_mclks>
    5ad8:	4b 01       	movw	r8, r22
    5ada:	5c 01       	movw	r10, r24
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
		if (finalRangeVcselPCLKS == 8)
    5adc:	08 30       	cpi	r16, 0x08	; 8
    5ade:	49 f4       	brne	.+18     	; 0x5af2 <VL53L0X_calc_sigma_estimate+0x104>
			vcselWidth = 2;
    5ae0:	22 e0       	ldi	r18, 0x02	; 2
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	40 e0       	ldi	r20, 0x00	; 0
    5ae6:	50 e0       	ldi	r21, 0x00	; 0
    5ae8:	2d 8b       	std	Y+21, r18	; 0x15
    5aea:	3e 8b       	std	Y+22, r19	; 0x16
    5aec:	4f 8b       	std	Y+23, r20	; 0x17
    5aee:	58 8f       	std	Y+24, r21	; 0x18
    5af0:	08 c0       	rjmp	.+16     	; 0x5b02 <VL53L0X_calc_sigma_estimate+0x114>
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
    5af2:	83 e0       	ldi	r24, 0x03	; 3
    5af4:	90 e0       	ldi	r25, 0x00	; 0
    5af6:	a0 e0       	ldi	r26, 0x00	; 0
    5af8:	b0 e0       	ldi	r27, 0x00	; 0
    5afa:	8d 8b       	std	Y+21, r24	; 0x15
    5afc:	9e 8b       	std	Y+22, r25	; 0x16
    5afe:	af 8b       	std	Y+23, r26	; 0x17
    5b00:	b8 8f       	std	Y+24, r27	; 0x18


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
    5b02:	cd 80       	ldd	r12, Y+5	; 0x05
    5b04:	de 80       	ldd	r13, Y+6	; 0x06
    5b06:	ef 80       	ldd	r14, Y+7	; 0x07
    5b08:	f8 84       	ldd	r15, Y+8	; 0x08
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
    5b0a:	a8 ee       	ldi	r26, 0xE8	; 232
    5b0c:	b3 e0       	ldi	r27, 0x03	; 3
    5b0e:	a7 01       	movw	r20, r14
    5b10:	96 01       	movw	r18, r12
    5b12:	ae d5       	rcall	.+2908   	; 0x6670 <__muluhisi3>
    5b14:	dc 01       	movw	r26, r24
    5b16:	cb 01       	movw	r24, r22
    5b18:	90 58       	subi	r25, 0x80	; 128
    5b1a:	af 4f       	sbci	r26, 0xFF	; 255
    5b1c:	bf 4f       	sbci	r27, 0xFF	; 255
    5b1e:	9d 01       	movw	r18, r26
    5b20:	44 27       	eor	r20, r20
    5b22:	55 27       	eor	r21, r21
    5b24:	29 8b       	std	Y+17, r18	; 0x11
    5b26:	3a 8b       	std	Y+18, r19	; 0x12
    5b28:	4b 8b       	std	Y+19, r20	; 0x13
    5b2a:	5c 8b       	std	Y+20, r21	; 0x14

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
    5b2c:	89 81       	ldd	r24, Y+1	; 0x01
    5b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5b30:	ab 81       	ldd	r26, Y+3	; 0x03
    5b32:	bc 81       	ldd	r27, Y+4	; 0x04
    5b34:	8e a7       	std	Y+46, r24	; 0x2e
    5b36:	9f a7       	std	Y+47, r25	; 0x2f
    5b38:	a8 ab       	std	Y+48, r26	; 0x30
    5b3a:	b9 ab       	std	Y+49, r27	; 0x31
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
    5b3c:	90 e8       	ldi	r25, 0x80	; 128
    5b3e:	c9 0e       	add	r12, r25
    5b40:	d1 1c       	adc	r13, r1
    5b42:	e1 1c       	adc	r14, r1
    5b44:	f1 1c       	adc	r15, r1
    5b46:	cd 2c       	mov	r12, r13
    5b48:	de 2c       	mov	r13, r14
    5b4a:	ef 2c       	mov	r14, r15
    5b4c:	ff 24       	eor	r15, r15

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
    5b4e:	5e 2d       	mov	r21, r14
    5b50:	4d 2d       	mov	r20, r13
    5b52:	3c 2d       	mov	r19, r12
    5b54:	22 27       	eor	r18, r18
    5b56:	2d 8f       	std	Y+29, r18	; 0x1d
    5b58:	3e 8f       	std	Y+30, r19	; 0x1e
    5b5a:	4f 8f       	std	Y+31, r20	; 0x1f
    5b5c:	58 a3       	std	Y+32, r21	; 0x20
    5b5e:	2d 83       	std	Y+5, r18	; 0x05
    5b60:	3e 83       	std	Y+6, r19	; 0x06
    5b62:	4f 83       	std	Y+7, r20	; 0x07
    5b64:	58 87       	std	Y+8, r21	; 0x08

	if (Status != VL53L0X_ERROR_NONE) {
		return Status;
	}

	if (peakSignalRate_kcps == 0) {
    5b66:	89 89       	ldd	r24, Y+17	; 0x11
    5b68:	9a 89       	ldd	r25, Y+18	; 0x12
    5b6a:	ab 89       	ldd	r26, Y+19	; 0x13
    5b6c:	bc 89       	ldd	r27, Y+20	; 0x14
    5b6e:	89 2b       	or	r24, r25
    5b70:	8a 2b       	or	r24, r26
    5b72:	8b 2b       	or	r24, r27
    5b74:	c9 f4       	brne	.+50     	; 0x5ba8 <VL53L0X_calc_sigma_estimate+0x1ba>
		*pSigmaEstimate = cSigmaEstMax;
    5b76:	8e ea       	ldi	r24, 0xAE	; 174
    5b78:	97 e8       	ldi	r25, 0x87	; 135
    5b7a:	af e8       	ldi	r26, 0x8F	; 143
    5b7c:	b2 e0       	ldi	r27, 0x02	; 2
    5b7e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5b80:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5b82:	80 83       	st	Z, r24
    5b84:	91 83       	std	Z+1, r25	; 0x01
    5b86:	a2 83       	std	Z+2, r26	; 0x02
    5b88:	b3 83       	std	Z+3, r27	; 0x03
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
    5b8a:	f1 01       	movw	r30, r2
    5b8c:	e6 5d       	subi	r30, 0xD6	; 214
    5b8e:	fe 4f       	sbci	r31, 0xFE	; 254
    5b90:	80 83       	st	Z, r24
    5b92:	91 83       	std	Z+1, r25	; 0x01
    5b94:	a2 83       	std	Z+2, r26	; 0x02
    5b96:	b3 83       	std	Z+3, r27	; 0x03
		*pDmax_mm = 0;
    5b98:	a9 8d       	ldd	r26, Y+25	; 0x19
    5b9a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5b9c:	1d 92       	st	X+, r1
    5b9e:	1d 92       	st	X+, r1
    5ba0:	1d 92       	st	X+, r1
    5ba2:	1c 92       	st	X, r1
    5ba4:	13 97       	sbiw	r26, 0x03	; 3
    5ba6:	29 c2       	rjmp	.+1106   	; 0x5ffa <VL53L0X_calc_sigma_estimate+0x60c>
			vcselWidth = 2;


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    5ba8:	84 0c       	add	r8, r4
    5baa:	95 1c       	adc	r9, r5
    5bac:	a6 1c       	adc	r10, r6
    5bae:	b7 1c       	adc	r11, r7
    5bb0:	a5 01       	movw	r20, r10
    5bb2:	94 01       	movw	r18, r8
    5bb4:	01 2e       	mov	r0, r17
    5bb6:	1b e0       	ldi	r17, 0x0B	; 11
    5bb8:	22 0f       	add	r18, r18
    5bba:	33 1f       	adc	r19, r19
    5bbc:	44 1f       	adc	r20, r20
    5bbe:	55 1f       	adc	r21, r21
    5bc0:	1a 95       	dec	r17
    5bc2:	d1 f7       	brne	.-12     	; 0x5bb8 <VL53L0X_calc_sigma_estimate+0x1ca>
    5bc4:	10 2d       	mov	r17, r0
    5bc6:	6d 89       	ldd	r22, Y+21	; 0x15
    5bc8:	7e 89       	ldd	r23, Y+22	; 0x16
    5bca:	8f 89       	ldd	r24, Y+23	; 0x17
    5bcc:	98 8d       	ldd	r25, Y+24	; 0x18
    5bce:	eb d4       	rcall	.+2518   	; 0x65a6 <__mulsi3>
    5bd0:	6c 50       	subi	r22, 0x0C	; 12
    5bd2:	7e 4f       	sbci	r23, 0xFE	; 254
    5bd4:	8f 4f       	sbci	r24, 0xFF	; 255
    5bd6:	9f 4f       	sbci	r25, 0xFF	; 255
    5bd8:	0f 2e       	mov	r0, r31
    5bda:	f8 ee       	ldi	r31, 0xE8	; 232
    5bdc:	8f 2e       	mov	r8, r31
    5bde:	f3 e0       	ldi	r31, 0x03	; 3
    5be0:	9f 2e       	mov	r9, r31
    5be2:	a1 2c       	mov	r10, r1
    5be4:	b1 2c       	mov	r11, r1
    5be6:	f0 2d       	mov	r31, r0
    5be8:	a5 01       	movw	r20, r10
    5bea:	94 01       	movw	r18, r8
		peakVcselDuration_us *= cPllPeriod_ps;
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
    5bec:	eb d4       	rcall	.+2518   	; 0x65c4 <__udivmodsi4>
    5bee:	a7 e7       	ldi	r26, 0x77	; 119
    5bf0:	b6 e0       	ldi	r27, 0x06	; 6
    5bf2:	3e d5       	rcall	.+2684   	; 0x6670 <__muluhisi3>
    5bf4:	6c 50       	subi	r22, 0x0C	; 12
    5bf6:	7e 4f       	sbci	r23, 0xFE	; 254
    5bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    5bfc:	a5 01       	movw	r20, r10
    5bfe:	94 01       	movw	r18, r8
    5c00:	e1 d4       	rcall	.+2498   	; 0x65c4 <__udivmodsi4>
    5c02:	2d 8b       	std	Y+21, r18	; 0x15
    5c04:	3d a7       	std	Y+45, r19	; 0x2d
    5c06:	04 2f       	mov	r16, r20
		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
    5c08:	15 2f       	mov	r17, r21
    5c0a:	c7 01       	movw	r24, r14
    5c0c:	b6 01       	movw	r22, r12
    5c0e:	cb d4       	rcall	.+2454   	; 0x65a6 <__mulsi3>
    5c10:	dc 01       	movw	r26, r24
    5c12:	cb 01       	movw	r24, r22
    5c14:	80 58       	subi	r24, 0x80	; 128
    5c16:	9f 4f       	sbci	r25, 0xFF	; 255
    5c18:	af 4f       	sbci	r26, 0xFF	; 255
    5c1a:	bf 4f       	sbci	r27, 0xFF	; 255
    5c1c:	49 2e       	mov	r4, r25
    5c1e:	5a 2e       	mov	r5, r26
    5c20:	6b 2e       	mov	r6, r27
    5c22:	77 24       	eor	r7, r7
	if (peakSignalRate_kcps == 0) {
		*pSigmaEstimate = cSigmaEstMax;
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
		*pDmax_mm = 0;
	} else {
		if (vcselTotalEventsRtn < 1)
    5c24:	41 14       	cp	r4, r1
    5c26:	51 04       	cpc	r5, r1
    5c28:	61 04       	cpc	r6, r1
    5c2a:	71 04       	cpc	r7, r1
    5c2c:	21 f4       	brne	.+8      	; 0x5c36 <VL53L0X_calc_sigma_estimate+0x248>
			vcselTotalEventsRtn = 1;
    5c2e:	41 2c       	mov	r4, r1
    5c30:	51 2c       	mov	r5, r1
    5c32:	32 01       	movw	r6, r4

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
    5c34:	43 94       	inc	r4
    5c36:	a8 ee       	ldi	r26, 0xE8	; 232
    5c38:	b3 e0       	ldi	r27, 0x03	; 3
    5c3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    5c3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    5c3e:	4f 85       	ldd	r20, Y+15	; 0x0f
    5c40:	58 89       	ldd	r21, Y+16	; 0x10
    5c42:	16 d5       	rcall	.+2604   	; 0x6670 <__muluhisi3>
    5c44:	66 27       	eor	r22, r22
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
    5c46:	77 27       	eor	r23, r23
    5c48:	29 89       	ldd	r18, Y+17	; 0x11
    5c4a:	3a 89       	ldd	r19, Y+18	; 0x12
    5c4c:	4b 89       	ldd	r20, Y+19	; 0x13
    5c4e:	5c 89       	ldd	r21, Y+20	; 0x14
    5c50:	b9 d4       	rcall	.+2418   	; 0x65c4 <__udivmodsi4>
    5c52:	27 36       	cpi	r18, 0x67	; 103
    5c54:	b6 e6       	ldi	r27, 0x66	; 102
    5c56:	3b 07       	cpc	r19, r27
    5c58:	4b 07       	cpc	r20, r27
    5c5a:	51 05       	cpc	r21, r1
    5c5c:	20 f0       	brcs	.+8      	; 0x5c66 <VL53L0X_calc_sigma_estimate+0x278>
    5c5e:	26 e6       	ldi	r18, 0x66	; 102
    5c60:	36 e6       	ldi	r19, 0x66	; 102
    5c62:	46 e6       	ldi	r20, 0x66	; 102
    5c64:	50 e0       	ldi	r21, 0x00	; 0
    5c66:	a8 e5       	ldi	r26, 0x58	; 88
    5c68:	b2 e0       	ldi	r27, 0x02	; 2
    5c6a:	02 d5       	rcall	.+2564   	; 0x6670 <__muluhisi3>
    5c6c:	6d 87       	std	Y+13, r22	; 0x0d
    5c6e:	7e 87       	std	Y+14, r23	; 0x0e
    5c70:	8f 87       	std	Y+15, r24	; 0x0f
    5c72:	98 8b       	std	Y+16, r25	; 0x10

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
    5c74:	d3 01       	movw	r26, r6
    5c76:	c2 01       	movw	r24, r4
    5c78:	88 0f       	add	r24, r24
    5c7a:	99 1f       	adc	r25, r25
    5c7c:	aa 1f       	adc	r26, r26
    5c7e:	bb 1f       	adc	r27, r27
    5c80:	84 0d       	add	r24, r4
    5c82:	95 1d       	adc	r25, r5
    5c84:	a6 1d       	adc	r26, r6
    5c86:	b7 1d       	adc	r27, r7
    5c88:	bc 01       	movw	r22, r24
    5c8a:	cd 01       	movw	r24, r26
    5c8c:	66 0f       	add	r22, r22
    5c8e:	77 1f       	adc	r23, r23
    5c90:	88 1f       	adc	r24, r24
    5c92:	99 1f       	adc	r25, r25
    5c94:	66 0f       	add	r22, r22
    5c96:	77 1f       	adc	r23, r23
    5c98:	88 1f       	adc	r24, r24
    5c9a:	99 1f       	adc	r25, r25
    5c9c:	0e 94 de 20 	call	0x41bc	; 0x41bc <VL53L0X_isqrt>
    5ca0:	9b 01       	movw	r18, r22
    5ca2:	ac 01       	movw	r20, r24
    5ca4:	22 0f       	add	r18, r18
    5ca6:	33 1f       	adc	r19, r19
    5ca8:	44 1f       	adc	r20, r20
    5caa:	55 1f       	adc	r21, r21
    5cac:	2a ab       	std	Y+50, r18	; 0x32
    5cae:	3b ab       	std	Y+51, r19	; 0x33
    5cb0:	4c ab       	std	Y+52, r20	; 0x34
    5cb2:	5d ab       	std	Y+53, r21	; 0x35

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
    5cb4:	e9 85       	ldd	r30, Y+9	; 0x09
    5cb6:	fa 85       	ldd	r31, Y+10	; 0x0a
    5cb8:	a0 85       	ldd	r26, Z+8	; 0x08
    5cba:	b1 85       	ldd	r27, Z+9	; 0x09
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;

		if(pRangingMeasurementData->RangeStatus != 0){
    5cbc:	80 8d       	ldd	r24, Z+24	; 0x18
    5cbe:	81 11       	cpse	r24, r1
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
    5cc0:	8b c0       	rjmp	.+278    	; 0x5dd8 <VL53L0X_calc_sigma_estimate+0x3ea>
    5cc2:	29 89       	ldd	r18, Y+17	; 0x11
    5cc4:	3a 89       	ldd	r19, Y+18	; 0x12
    5cc6:	4b 89       	ldd	r20, Y+19	; 0x13
    5cc8:	5c 89       	ldd	r21, Y+20	; 0x14

		if(pRangingMeasurementData->RangeStatus != 0){
			pwMult = 1ul << 16;
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
    5cca:	59 01       	movw	r10, r18
    5ccc:	99 24       	eor	r9, r9
    5cce:	88 24       	eor	r8, r8
    5cd0:	2a e9       	ldi	r18, 0x9A	; 154
    5cd2:	39 e9       	ldi	r19, 0x99	; 153
    5cd4:	46 e0       	ldi	r20, 0x06	; 6
    5cd6:	50 e0       	ldi	r21, 0x00	; 0
    5cd8:	cb d4       	rcall	.+2454   	; 0x6670 <__muluhisi3>
    5cda:	2c e5       	ldi	r18, 0x5C	; 92
    5cdc:	32 e1       	ldi	r19, 0x12	; 18
    5cde:	40 e0       	ldi	r20, 0x00	; 0
    5ce0:	50 e0       	ldi	r21, 0x00	; 0
    5ce2:	70 d4       	rcall	.+2272   	; 0x65c4 <__udivmodsi4>
    5ce4:	29 87       	std	Y+9, r18	; 0x09
    5ce6:	3a 87       	std	Y+10, r19	; 0x0a
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
    5ce8:	4b 87       	std	Y+11, r20	; 0x0b
    5cea:	5c 87       	std	Y+12, r21	; 0x0c
    5cec:	a8 ee       	ldi	r26, 0xE8	; 232
    5cee:	b3 e0       	ldi	r27, 0x03	; 3
    5cf0:	2e a5       	ldd	r18, Y+46	; 0x2e
    5cf2:	3f a5       	ldd	r19, Y+47	; 0x2f
    5cf4:	48 a9       	ldd	r20, Y+48	; 0x30
    5cf6:	59 a9       	ldd	r21, Y+49	; 0x31
    5cf8:	bb d4       	rcall	.+2422   	; 0x6670 <__muluhisi3>
    5cfa:	61 30       	cpi	r22, 0x01	; 1
    5cfc:	71 05       	cpc	r23, r1
    5cfe:	32 e3       	ldi	r19, 0x32	; 50
    5d00:	83 07       	cpc	r24, r19
    5d02:	91 05       	cpc	r25, r1
    5d04:	20 f0       	brcs	.+8      	; 0x5d0e <VL53L0X_calc_sigma_estimate+0x320>
    5d06:	60 e0       	ldi	r22, 0x00	; 0
    5d08:	70 e0       	ldi	r23, 0x00	; 0
    5d0a:	82 e3       	ldi	r24, 0x32	; 50
    5d0c:	90 e0       	ldi	r25, 0x00	; 0
    5d0e:	dc 01       	movw	r26, r24
    5d10:	cb 01       	movw	r24, r22
    5d12:	88 0f       	add	r24, r24
    5d14:	99 1f       	adc	r25, r25
    5d16:	aa 1f       	adc	r26, r26
    5d18:	bb 1f       	adc	r27, r27
    5d1a:	a5 01       	movw	r20, r10
    5d1c:	94 01       	movw	r18, r8
    5d1e:	28 1b       	sub	r18, r24
    5d20:	39 0b       	sbc	r19, r25
    5d22:	4a 0b       	sbc	r20, r26
    5d24:	5b 0b       	sbc	r21, r27
    5d26:	ca 01       	movw	r24, r20
    5d28:	b9 01       	movw	r22, r18
    5d2a:	6c 50       	subi	r22, 0x0C	; 12
    5d2c:	7e 4f       	sbci	r23, 0xFE	; 254
    5d2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5d30:	9f 4f       	sbci	r25, 0xFF	; 255
    5d32:	28 ee       	ldi	r18, 0xE8	; 232
    5d34:	33 e0       	ldi	r19, 0x03	; 3
    5d36:	40 e0       	ldi	r20, 0x00	; 0
		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
    5d38:	50 e0       	ldi	r21, 0x00	; 0
    5d3a:	44 d4       	rcall	.+2184   	; 0x65c4 <__udivmodsi4>
    5d3c:	cc 24       	eor	r12, r12
    5d3e:	d2 2e       	mov	r13, r18
    5d40:	e3 2e       	mov	r14, r19
    5d42:	f4 2e       	mov	r15, r20
    5d44:	c5 01       	movw	r24, r10
    5d46:	b4 01       	movw	r22, r8
    5d48:	6c 50       	subi	r22, 0x0C	; 12
    5d4a:	7e 4f       	sbci	r23, 0xFE	; 254
    5d4c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d50:	28 ee       	ldi	r18, 0xE8	; 232
    5d52:	33 e0       	ldi	r19, 0x03	; 3
    5d54:	40 e0       	ldi	r20, 0x00	; 0
    5d56:	50 e0       	ldi	r21, 0x00	; 0
    5d58:	35 d4       	rcall	.+2154   	; 0x65c4 <__udivmodsi4>
    5d5a:	c7 01       	movw	r24, r14
    5d5c:	b6 01       	movw	r22, r12
    5d5e:	32 d4       	rcall	.+2148   	; 0x65c4 <__udivmodsi4>
    5d60:	c9 01       	movw	r24, r18
    5d62:	99 23       	and	r25, r25
    5d64:	24 f4       	brge	.+8      	; 0x5d6e <VL53L0X_calc_sigma_estimate+0x380>
    5d66:	88 27       	eor	r24, r24
    5d68:	99 27       	eor	r25, r25
    5d6a:	82 1b       	sub	r24, r18
    5d6c:	93 0b       	sbc	r25, r19
    5d6e:	09 2e       	mov	r0, r25
    5d70:	00 0c       	add	r0, r0
    5d72:	aa 0b       	sbc	r26, r26
			 * exceeded.
			 */
			pwMult *= ((1ul << 16) - xTalkCorrection);

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
    5d74:	bb 0b       	sbc	r27, r27
    5d76:	ba 2f       	mov	r27, r26
    5d78:	a9 2f       	mov	r26, r25
    5d7a:	98 2f       	mov	r25, r24
    5d7c:	88 27       	eor	r24, r24
    5d7e:	40 e0       	ldi	r20, 0x00	; 0
    5d80:	50 e0       	ldi	r21, 0x00	; 0
    5d82:	61 e0       	ldi	r22, 0x01	; 1
    5d84:	70 e0       	ldi	r23, 0x00	; 0
    5d86:	9a 01       	movw	r18, r20
    5d88:	ab 01       	movw	r20, r22
    5d8a:	28 1b       	sub	r18, r24
    5d8c:	39 0b       	sbc	r19, r25
    5d8e:	4a 0b       	sbc	r20, r26
    5d90:	5b 0b       	sbc	r21, r27
    5d92:	69 85       	ldd	r22, Y+9	; 0x09
    5d94:	7a 85       	ldd	r23, Y+10	; 0x0a
    5d96:	8b 85       	ldd	r24, Y+11	; 0x0b
    5d98:	9c 85       	ldd	r25, Y+12	; 0x0c
    5d9a:	05 d4       	rcall	.+2058   	; 0x65a6 <__mulsi3>
    5d9c:	dc 01       	movw	r26, r24
    5d9e:	cb 01       	movw	r24, r22
    5da0:	90 58       	subi	r25, 0x80	; 128
    5da2:	af 4f       	sbci	r26, 0xFF	; 255
    5da4:	bf 4f       	sbci	r27, 0xFF	; 255
    5da6:	cd 01       	movw	r24, r26

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1ul << 16);
    5da8:	aa 27       	eor	r26, r26
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
    5daa:	bb 27       	eor	r27, r27
    5dac:	11 96       	adiw	r26, 0x01	; 1
    5dae:	bc 01       	movw	r22, r24
    5db0:	cd 01       	movw	r24, r26
    5db2:	96 95       	lsr	r25
    5db4:	87 95       	ror	r24
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
    5db6:	77 95       	ror	r23
    5db8:	67 95       	ror	r22
    5dba:	9b 01       	movw	r18, r22
    5dbc:	ac 01       	movw	r20, r24

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
    5dbe:	f3 d3       	rcall	.+2022   	; 0x65a6 <__mulsi3>
    5dc0:	6b 01       	movw	r12, r22
    5dc2:	7c 01       	movw	r14, r24
    5dc4:	0b 2e       	mov	r0, r27
    5dc6:	be e0       	ldi	r27, 0x0E	; 14
    5dc8:	f6 94       	lsr	r15
    5dca:	e7 94       	ror	r14
    5dcc:	d7 94       	ror	r13
    5dce:	c7 94       	ror	r12
    5dd0:	ba 95       	dec	r27
    5dd2:	d1 f7       	brne	.-12     	; 0x5dc8 <VL53L0X_calc_sigma_estimate+0x3da>

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;

		if(pRangingMeasurementData->RangeStatus != 0){
			pwMult = 1ul << 16;
    5dd4:	b0 2d       	mov	r27, r0
    5dd6:	04 c0       	rjmp	.+8      	; 0x5de0 <VL53L0X_calc_sigma_estimate+0x3f2>
    5dd8:	c1 2c       	mov	r12, r1
    5dda:	d1 2c       	mov	r13, r1

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
    5ddc:	76 01       	movw	r14, r12
    5dde:	e3 94       	inc	r14
    5de0:	a0 e2       	ldi	r26, 0x20	; 32
    5de2:	b3 e0       	ldi	r27, 0x03	; 3
    5de4:	a7 01       	movw	r20, r14
    5de6:	96 01       	movw	r18, r12
    5de8:	43 d4       	rcall	.+2182   	; 0x6670 <__muluhisi3>
    5dea:	dc 01       	movw	r26, r24
    5dec:	cb 01       	movw	r24, r22
    5dee:	90 58       	subi	r25, 0x80	; 128
    5df0:	af 4f       	sbci	r26, 0xFF	; 255
    5df2:	bf 4f       	sbci	r27, 0xFF	; 255
    5df4:	bd 01       	movw	r22, r26
		sqr1 *= sqr1;

		sqr2 = sigmaEstimateP2;

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
    5df6:	88 27       	eor	r24, r24
    5df8:	99 27       	eor	r25, r25
    5dfa:	8d 84       	ldd	r8, Y+13	; 0x0d
    5dfc:	9e 84       	ldd	r9, Y+14	; 0x0e
    5dfe:	af 84       	ldd	r10, Y+15	; 0x0f
    5e00:	b8 88       	ldd	r11, Y+16	; 0x10
    5e02:	30 e8       	ldi	r19, 0x80	; 128
    5e04:	93 0e       	add	r9, r19
    5e06:	a1 1c       	adc	r10, r1
    5e08:	b1 1c       	adc	r11, r1

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
    5e0a:	45 01       	movw	r8, r10
    5e0c:	aa 24       	eor	r10, r10
    5e0e:	bb 24       	eor	r11, r11
    5e10:	9b 01       	movw	r18, r22
    5e12:	ac 01       	movw	r20, r24
    5e14:	c8 d3       	rcall	.+1936   	; 0x65a6 <__mulsi3>
    5e16:	69 87       	std	Y+9, r22	; 0x09
    5e18:	7a 87       	std	Y+10, r23	; 0x0a
    5e1a:	8b 87       	std	Y+11, r24	; 0x0b
    5e1c:	9c 87       	std	Y+12, r25	; 0x0c
    5e1e:	a5 01       	movw	r20, r10
    5e20:	94 01       	movw	r18, r8
    5e22:	c5 01       	movw	r24, r10
    5e24:	b4 01       	movw	r22, r8
    5e26:	bf d3       	rcall	.+1918   	; 0x65a6 <__mulsi3>
    5e28:	29 85       	ldd	r18, Y+9	; 0x09
    5e2a:	3a 85       	ldd	r19, Y+10	; 0x0a
    5e2c:	4b 85       	ldd	r20, Y+11	; 0x0b
    5e2e:	5c 85       	ldd	r21, Y+12	; 0x0c
    5e30:	62 0f       	add	r22, r18
    5e32:	73 1f       	adc	r23, r19
    5e34:	84 1f       	adc	r24, r20
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
    5e36:	95 1f       	adc	r25, r21
    5e38:	0e 94 de 20 	call	0x41bc	; 0x41bc <VL53L0X_isqrt>
    5e3c:	db 01       	movw	r26, r22
    5e3e:	99 27       	eor	r25, r25
    5e40:	88 27       	eor	r24, r24
    5e42:	bc 01       	movw	r22, r24
    5e44:	cd 01       	movw	r24, r26
    5e46:	6e 5c       	subi	r22, 0xCE	; 206
    5e48:	7f 4f       	sbci	r23, 0xFF	; 255
    5e4a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e4c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e4e:	24 e6       	ldi	r18, 0x64	; 100
    5e50:	30 e0       	ldi	r19, 0x00	; 0
    5e52:	40 e0       	ldi	r20, 0x00	; 0
    5e54:	50 e0       	ldi	r21, 0x00	; 0
    5e56:	b6 d3       	rcall	.+1900   	; 0x65c4 <__udivmodsi4>
    5e58:	ca 01       	movw	r24, r20
    5e5a:	b9 01       	movw	r22, r18
    5e5c:	2a a9       	ldd	r18, Y+50	; 0x32
    5e5e:	3b a9       	ldd	r19, Y+51	; 0x33
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
    5e60:	4c a9       	ldd	r20, Y+52	; 0x34
    5e62:	5d a9       	ldd	r21, Y+53	; 0x35
    5e64:	af d3       	rcall	.+1886   	; 0x65c4 <__udivmodsi4>
    5e66:	a5 eb       	ldi	r26, 0xB5	; 181

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
    5e68:	bb e0       	ldi	r27, 0x0B	; 11
    5e6a:	02 d4       	rcall	.+2052   	; 0x6670 <__muluhisi3>
    5e6c:	68 57       	subi	r22, 0x78	; 120
    5e6e:	7c 4e       	sbci	r23, 0xEC	; 236
    5e70:	8f 4f       	sbci	r24, 0xFF	; 255
    5e72:	9f 4f       	sbci	r25, 0xFF	; 255
    5e74:	20 e1       	ldi	r18, 0x10	; 16
    5e76:	37 e2       	ldi	r19, 0x27	; 39
    5e78:	40 e0       	ldi	r20, 0x00	; 0
    5e7a:	50 e0       	ldi	r21, 0x00	; 0
    5e7c:	a3 d3       	rcall	.+1862   	; 0x65c4 <__udivmodsi4>
    5e7e:	49 01       	movw	r8, r18
    5e80:	5a 01       	movw	r10, r20
    5e82:	31 e0       	ldi	r19, 0x01	; 1
    5e84:	83 16       	cp	r8, r19
    5e86:	30 ef       	ldi	r19, 0xF0	; 240
    5e88:	93 06       	cpc	r9, r19
    5e8a:	a1 04       	cpc	r10, r1
    5e8c:	b1 04       	cpc	r11, r1
    5e8e:	38 f0       	brcs	.+14     	; 0x5e9e <VL53L0X_calc_sigma_estimate+0x4b0>
    5e90:	0f 2e       	mov	r0, r31
    5e92:	81 2c       	mov	r8, r1
    5e94:	f0 ef       	ldi	r31, 0xF0	; 240
    5e96:	9f 2e       	mov	r9, r31
    5e98:	a1 2c       	mov	r10, r1
    5e9a:	b1 2c       	mov	r11, r1
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
    5e9c:	f0 2d       	mov	r31, r0
    5e9e:	8d a1       	ldd	r24, Y+37	; 0x25
    5ea0:	9e a1       	ldd	r25, Y+38	; 0x26
    5ea2:	af a1       	ldd	r26, Y+39	; 0x27
    5ea4:	b8 a5       	ldd	r27, Y+40	; 0x28
    5ea6:	29 a5       	ldd	r18, Y+41	; 0x29
    5ea8:	3a a5       	ldd	r19, Y+42	; 0x2a
    5eaa:	4b a5       	ldd	r20, Y+43	; 0x2b
    5eac:	5c a5       	ldd	r21, Y+44	; 0x2c
    5eae:	82 0f       	add	r24, r18
    5eb0:	93 1f       	adc	r25, r19
    5eb2:	a4 1f       	adc	r26, r20
    5eb4:	b5 1f       	adc	r27, r21
    5eb6:	9c 01       	movw	r18, r24
    5eb8:	ad 01       	movw	r20, r26
    5eba:	2c 50       	subi	r18, 0x0C	; 12
    5ebc:	3e 4f       	sbci	r19, 0xFE	; 254
    5ebe:	4f 4f       	sbci	r20, 0xFF	; 255
    5ec0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec2:	29 87       	std	Y+9, r18	; 0x09

		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
    5ec4:	3a 87       	std	Y+10, r19	; 0x0a
    5ec6:	4b 87       	std	Y+11, r20	; 0x0b
    5ec8:	5c 87       	std	Y+12, r21	; 0x0c
    5eca:	ca 01       	movw	r24, r20
    5ecc:	b9 01       	movw	r22, r18
    5ece:	20 ed       	ldi	r18, 0xD0	; 208
    5ed0:	37 e0       	ldi	r19, 0x07	; 7
    5ed2:	40 e0       	ldi	r20, 0x00	; 0
    5ed4:	50 e0       	ldi	r21, 0x00	; 0
    5ed6:	76 d3       	rcall	.+1772   	; 0x65c4 <__udivmodsi4>
    5ed8:	da 01       	movw	r26, r20
    5eda:	c9 01       	movw	r24, r18
    5edc:	59 96       	adiw	r26, 0x19	; 25
    5ede:	89 8b       	std	Y+17, r24	; 0x11
    5ee0:	9a 8b       	std	Y+18, r25	; 0x12
    5ee2:	ab 8b       	std	Y+19, r26	; 0x13
    5ee4:	bc 8b       	std	Y+20, r27	; 0x14
    5ee6:	69 85       	ldd	r22, Y+9	; 0x09
    5ee8:	7a 85       	ldd	r23, Y+10	; 0x0a
    5eea:	8b 85       	ldd	r24, Y+11	; 0x0b
    5eec:	9c 85       	ldd	r25, Y+12	; 0x0c
    5eee:	28 ee       	ldi	r18, 0xE8	; 232
    5ef0:	33 e0       	ldi	r19, 0x03	; 3
    5ef2:	40 e0       	ldi	r20, 0x00	; 0
    5ef4:	50 e0       	ldi	r21, 0x00	; 0
    5ef6:	66 d3       	rcall	.+1740   	; 0x65c4 <__udivmodsi4>
    5ef8:	69 89       	ldd	r22, Y+17	; 0x11
    5efa:	7a 89       	ldd	r23, Y+18	; 0x12
    5efc:	8b 89       	ldd	r24, Y+19	; 0x13
    5efe:	9c 89       	ldd	r25, Y+20	; 0x14
    5f00:	61 d3       	rcall	.+1730   	; 0x65c4 <__udivmodsi4>
    5f02:	ca 01       	movw	r24, r20
				finalRangeIntegrationTimeMilliSecs/2)/
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
		sigmaEstRef = (sigmaEstRef + 500)/1000;
    5f04:	b9 01       	movw	r22, r18
    5f06:	0e 94 de 20 	call	0x41bc	; 0x41bc <VL53L0X_isqrt>
    5f0a:	b8 2f       	mov	r27, r24
    5f0c:	a7 2f       	mov	r26, r23
    5f0e:	96 2f       	mov	r25, r22
    5f10:	88 27       	eor	r24, r24
    5f12:	bc 01       	movw	r22, r24
    5f14:	cd 01       	movw	r24, r26
    5f16:	6c 50       	subi	r22, 0x0C	; 12
    5f18:	7e 4f       	sbci	r23, 0xFE	; 254
    5f1a:	8f 4f       	sbci	r24, 0xFF	; 255
    5f1c:	9f 4f       	sbci	r25, 0xFF	; 255
    5f1e:	28 ee       	ldi	r18, 0xE8	; 232
    5f20:	33 e0       	ldi	r19, 0x03	; 3
    5f22:	40 e0       	ldi	r20, 0x00	; 0
    5f24:	50 e0       	ldi	r21, 0x00	; 0
    5f26:	4e d3       	rcall	.+1692   	; 0x65c4 <__udivmodsi4>
		sqr1 = sigmaEstRtn * sigmaEstRtn;
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
    5f28:	29 87       	std	Y+9, r18	; 0x09
    5f2a:	3a 87       	std	Y+10, r19	; 0x0a
    5f2c:	4b 87       	std	Y+11, r20	; 0x0b
    5f2e:	5c 87       	std	Y+12, r21	; 0x0c
    5f30:	a5 01       	movw	r20, r10
    5f32:	94 01       	movw	r18, r8
    5f34:	c5 01       	movw	r24, r10
    5f36:	b4 01       	movw	r22, r8
    5f38:	36 d3       	rcall	.+1644   	; 0x65a6 <__mulsi3>
    5f3a:	4b 01       	movw	r8, r22
    5f3c:	5c 01       	movw	r10, r24
    5f3e:	29 85       	ldd	r18, Y+9	; 0x09
    5f40:	3a 85       	ldd	r19, Y+10	; 0x0a
    5f42:	4b 85       	ldd	r20, Y+11	; 0x0b
    5f44:	5c 85       	ldd	r21, Y+12	; 0x0c
    5f46:	ca 01       	movw	r24, r20
    5f48:	b9 01       	movw	r22, r18
    5f4a:	2d d3       	rcall	.+1626   	; 0x65a6 <__mulsi3>
    5f4c:	68 0d       	add	r22, r8
    5f4e:	79 1d       	adc	r23, r9
    5f50:	8a 1d       	adc	r24, r10
    5f52:	9b 1d       	adc	r25, r11
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
    5f54:	0e 94 de 20 	call	0x41bc	; 0x41bc <VL53L0X_isqrt>
    5f58:	45 28       	or	r4, r5
    5f5a:	46 28       	or	r4, r6
    5f5c:	47 28       	or	r4, r7
    5f5e:	91 f0       	breq	.+36     	; 0x5f84 <VL53L0X_calc_sigma_estimate+0x596>
    5f60:	a8 ee       	ldi	r26, 0xE8	; 232
    5f62:	b3 e0       	ldi	r27, 0x03	; 3
    5f64:	9b 01       	movw	r18, r22
    5f66:	ac 01       	movw	r20, r24
    5f68:	83 d3       	rcall	.+1798   	; 0x6670 <__muluhisi3>
    5f6a:	6f 3a       	cpi	r22, 0xAF	; 175
    5f6c:	a7 e8       	ldi	r26, 0x87	; 135
    5f6e:	7a 07       	cpc	r23, r26
    5f70:	af e8       	ldi	r26, 0x8F	; 143
    5f72:	8a 07       	cpc	r24, r26
    5f74:	a2 e0       	ldi	r26, 0x02	; 2
    5f76:	9a 07       	cpc	r25, r26
    5f78:	48 f0       	brcs	.+18     	; 0x5f8c <VL53L0X_calc_sigma_estimate+0x59e>
    5f7a:	6e ea       	ldi	r22, 0xAE	; 174
    5f7c:	77 e8       	ldi	r23, 0x87	; 135
    5f7e:	8f e8       	ldi	r24, 0x8F	; 143
    5f80:	92 e0       	ldi	r25, 0x02	; 2
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
    5f82:	04 c0       	rjmp	.+8      	; 0x5f8c <VL53L0X_calc_sigma_estimate+0x59e>
    5f84:	6e ea       	ldi	r22, 0xAE	; 174
    5f86:	77 e8       	ldi	r23, 0x87	; 135
    5f88:	8f e8       	ldi	r24, 0x8F	; 143
		}

		*pSigmaEstimate = (u32)(sigmaEstimate);
    5f8a:	92 e0       	ldi	r25, 0x02	; 2
    5f8c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    5f8e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    5f90:	60 83       	st	Z, r22
    5f92:	71 83       	std	Z+1, r23	; 0x01
    5f94:	82 83       	std	Z+2, r24	; 0x02
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
    5f96:	93 83       	std	Z+3, r25	; 0x03
    5f98:	f1 01       	movw	r30, r2
    5f9a:	e6 5d       	subi	r30, 0xD6	; 214
    5f9c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f9e:	60 83       	st	Z, r22
    5fa0:	71 83       	std	Z+1, r23	; 0x01
    5fa2:	82 83       	std	Z+2, r24	; 0x02
		Status = VL53L0X_calc_dmax(
    5fa4:	93 83       	std	Z+3, r25	; 0x03
    5fa6:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5fa8:	ff 93       	push	r31
    5faa:	29 8d       	ldd	r18, Y+25	; 0x19
    5fac:	2f 93       	push	r18
    5fae:	1f 93       	push	r17
    5fb0:	0f 93       	push	r16
    5fb2:	3d a5       	ldd	r19, Y+45	; 0x2d
    5fb4:	3f 93       	push	r19
    5fb6:	4d 89       	ldd	r20, Y+21	; 0x15
    5fb8:	4f 93       	push	r20
    5fba:	58 89       	ldd	r21, Y+16	; 0x10
    5fbc:	5f 93       	push	r21
    5fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    5fc0:	8f 93       	push	r24
    5fc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5fc4:	9f 93       	push	r25
    5fc6:	ad 85       	ldd	r26, Y+13	; 0x0d
    5fc8:	af 93       	push	r26
    5fca:	0f 2e       	mov	r0, r31
    5fcc:	f0 e2       	ldi	r31, 0x20	; 32
    5fce:	8f 2e       	mov	r8, r31
    5fd0:	f3 e0       	ldi	r31, 0x03	; 3
    5fd2:	9f 2e       	mov	r9, r31
    5fd4:	a1 2c       	mov	r10, r1
    5fd6:	b1 2c       	mov	r11, r1
    5fd8:	f0 2d       	mov	r31, r0
    5fda:	09 a1       	ldd	r16, Y+33	; 0x21
    5fdc:	1a a1       	ldd	r17, Y+34	; 0x22
    5fde:	2b a1       	ldd	r18, Y+35	; 0x23
    5fe0:	3c a1       	ldd	r19, Y+36	; 0x24
    5fe2:	4d 8d       	ldd	r20, Y+29	; 0x1d
    5fe4:	5e 8d       	ldd	r21, Y+30	; 0x1e
    5fe6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5fe8:	78 a1       	ldd	r23, Y+32	; 0x20
    5fea:	c1 01       	movw	r24, r2
    5fec:	29 db       	rcall	.-2478   	; 0x5640 <VL53L0X_calc_dmax>
    5fee:	18 2f       	mov	r17, r24
    5ff0:	0f b6       	in	r0, 0x3f	; 63
    5ff2:	f8 94       	cli
    5ff4:	de bf       	out	0x3e, r29	; 62
    5ff6:	0f be       	out	0x3f, r0	; 63
			peakVcselDuration_us,
			pDmax_mm);
	}

	return Status;
}
    5ff8:	cd bf       	out	0x3d, r28	; 61
    5ffa:	81 2f       	mov	r24, r17
    5ffc:	e5 96       	adiw	r28, 0x35	; 53
    5ffe:	0f b6       	in	r0, 0x3f	; 63
    6000:	f8 94       	cli
    6002:	de bf       	out	0x3e, r29	; 62
    6004:	0f be       	out	0x3f, r0	; 63
    6006:	cd bf       	out	0x3d, r28	; 61
    6008:	df 91       	pop	r29
    600a:	cf 91       	pop	r28
    600c:	1f 91       	pop	r17
    600e:	0f 91       	pop	r16
    6010:	ff 90       	pop	r15
    6012:	ef 90       	pop	r14
    6014:	df 90       	pop	r13
    6016:	cf 90       	pop	r12
    6018:	bf 90       	pop	r11
    601a:	af 90       	pop	r10
    601c:	9f 90       	pop	r9
    601e:	8f 90       	pop	r8
    6020:	7f 90       	pop	r7
    6022:	6f 90       	pop	r6
    6024:	5f 90       	pop	r5
    6026:	4f 90       	pop	r4
    6028:	3f 90       	pop	r3
    602a:	2f 90       	pop	r2
    602c:	08 95       	ret

0000602e <VL53L0X_get_pal_range_status>:
		u8 DeviceRangeStatus,
		f1616 SignalRate,
		u16 EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		u8 *pPalRangeStatus)
{
    602e:	2f 92       	push	r2
    6030:	3f 92       	push	r3
    6032:	4f 92       	push	r4
    6034:	5f 92       	push	r5
    6036:	6f 92       	push	r6
    6038:	7f 92       	push	r7
    603a:	8f 92       	push	r8
    603c:	9f 92       	push	r9
    603e:	af 92       	push	r10
    6040:	bf 92       	push	r11
    6042:	cf 92       	push	r12
    6044:	df 92       	push	r13
    6046:	ef 92       	push	r14
    6048:	ff 92       	push	r15
    604a:	0f 93       	push	r16
    604c:	1f 93       	push	r17
    604e:	cf 93       	push	r28
    6050:	df 93       	push	r29
    6052:	cd b7       	in	r28, 0x3d	; 61
    6054:	de b7       	in	r29, 0x3e	; 62
    6056:	a0 97       	sbiw	r28, 0x20	; 32
    6058:	0f b6       	in	r0, 0x3f	; 63
    605a:	f8 94       	cli
    605c:	de bf       	out	0x3e, r29	; 62
    605e:	0f be       	out	0x3f, r0	; 63
    6060:	cd bf       	out	0x3d, r28	; 61
    6062:	5c 01       	movw	r10, r24
    6064:	2d 8f       	std	Y+29, r18	; 0x1d
    6066:	3e 8f       	std	Y+30, r19	; 0x1e
    6068:	4f 8f       	std	Y+31, r20	; 0x1f
    606a:	58 a3       	std	Y+32, r21	; 0x20
    606c:	48 01       	movw	r8, r16
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
	u8 SigmaLimitCheckEnable = 0;
    606e:	19 82       	std	Y+1, r1	; 0x01
	u8 SignalRateFinalRangeLimitCheckEnable = 0;
    6070:	1a 82       	std	Y+2, r1	; 0x02
	u8 SignalRefClipLimitCheckEnable = 0;
    6072:	1b 82       	std	Y+3, r1	; 0x03
	u8 RangeIgnoreThresholdLimitCheckEnable = 0;
    6074:	1c 82       	std	Y+4, r1	; 0x04
	f1616 SigmaLimitValue;
	f1616 SignalRefClipValue;
	f1616 RangeIgnoreThresholdValue;
	f1616 SignalRatePerSpad;
	u8 DeviceRangeStatusInternal = 0;
	u16 tmpWord = 0;
    6076:	1e 8a       	std	Y+22, r1	; 0x16
    6078:	1d 8a       	std	Y+21, r1	; 0x15
	u8 Temp8;
	u32 Dmax_mm = 0;
    607a:	1f 8a       	std	Y+23, r1	; 0x17
    607c:	18 8e       	std	Y+24, r1	; 0x18
    607e:	19 8e       	std	Y+25, r1	; 0x19
    6080:	1a 8e       	std	Y+26, r1	; 0x1a
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
    6082:	68 77       	andi	r22, 0x78	; 120
    6084:	06 2f       	mov	r16, r22
    6086:	10 e0       	ldi	r17, 0x00	; 0
    6088:	15 95       	asr	r17
    608a:	07 95       	ror	r16
    608c:	15 95       	asr	r17
    608e:	07 95       	ror	r16
    6090:	15 95       	asr	r17
    6092:	07 95       	ror	r16
    6094:	30 2e       	mov	r3, r16

	if (DeviceRangeStatusInternal == 0 ||
    6096:	00 23       	and	r16, r16
    6098:	61 f0       	breq	.+24     	; 0x60b2 <VL53L0X_get_pal_range_status+0x84>
    609a:	80 2f       	mov	r24, r16
    609c:	8d 7f       	andi	r24, 0xFD	; 253
    609e:	85 30       	cpi	r24, 0x05	; 5
    60a0:	59 f0       	breq	.+22     	; 0x60b8 <VL53L0X_get_pal_range_status+0x8a>
		DeviceRangeStatusInternal == 12 ||
		DeviceRangeStatusInternal == 13 ||
		DeviceRangeStatusInternal == 14 ||
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
    60a2:	21 e0       	ldi	r18, 0x01	; 1
    60a4:	2c 8f       	std	Y+28, r18	; 0x1c
    60a6:	84 ef       	ldi	r24, 0xF4	; 244
    60a8:	80 0f       	add	r24, r16
    60aa:	84 30       	cpi	r24, 0x04	; 4
    60ac:	38 f0       	brcs	.+14     	; 0x60bc <VL53L0X_get_pal_range_status+0x8e>
    60ae:	1c 8e       	std	Y+28, r1	; 0x1c
    60b0:	05 c0       	rjmp	.+10     	; 0x60bc <VL53L0X_get_pal_range_status+0x8e>
    60b2:	31 e0       	ldi	r19, 0x01	; 1
    60b4:	3c 8f       	std	Y+28, r19	; 0x1c
    60b6:	02 c0       	rjmp	.+4      	; 0x60bc <VL53L0X_get_pal_range_status+0x8e>
    60b8:	41 e0       	ldi	r20, 0x01	; 1
    60ba:	4c 8f       	std	Y+28, r20	; 0x1c
	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    60bc:	ae 01       	movw	r20, r28
    60be:	4f 5f       	subi	r20, 0xFF	; 255
    60c0:	5f 4f       	sbci	r21, 0xFF	; 255
    60c2:	60 e0       	ldi	r22, 0x00	; 0
    60c4:	70 e0       	ldi	r23, 0x00	; 0
    60c6:	c5 01       	movw	r24, r10
    60c8:	0e 94 4d 10 	call	0x209a	; 0x209a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
    60cc:	99 81       	ldd	r25, Y+1	; 0x01
    60ce:	99 23       	and	r25, r25
    60d0:	81 f1       	breq	.+96     	; 0x6132 <VL53L0X_get_pal_range_status+0x104>
    60d2:	81 11       	cpse	r24, r1
    60d4:	3c c0       	rjmp	.+120    	; 0x614e <VL53L0X_get_pal_range_status+0x120>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
    60d6:	9e 01       	movw	r18, r28
    60d8:	29 5e       	subi	r18, 0xE9	; 233
    60da:	3f 4f       	sbci	r19, 0xFF	; 255
    60dc:	ae 01       	movw	r20, r28
    60de:	4b 5f       	subi	r20, 0xFB	; 251
    60e0:	5f 4f       	sbci	r21, 0xFF	; 255
    60e2:	b7 01       	movw	r22, r14
    60e4:	c5 01       	movw	r24, r10
    60e6:	83 dc       	rcall	.-1786   	; 0x59ee <VL53L0X_calc_sigma_estimate>
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
    60e8:	81 11       	cpse	r24, r1
    60ea:	33 c0       	rjmp	.+102    	; 0x6152 <VL53L0X_get_pal_range_status+0x124>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
    60ec:	8f 89       	ldd	r24, Y+23	; 0x17
    60ee:	98 8d       	ldd	r25, Y+24	; 0x18
    60f0:	f7 01       	movw	r30, r14
    60f2:	93 87       	std	Z+11, r25	; 0x0b
    60f4:	82 87       	std	Z+10, r24	; 0x0a

		if (Status == VL53L0X_ERROR_NONE) {
			Status = VL53L0X_GetLimitCheckValue(Dev,
    60f6:	ae 01       	movw	r20, r28
    60f8:	47 5f       	subi	r20, 0xF7	; 247
    60fa:	5f 4f       	sbci	r21, 0xFF	; 255
    60fc:	60 e0       	ldi	r22, 0x00	; 0
    60fe:	70 e0       	ldi	r23, 0x00	; 0
    6100:	c5 01       	movw	r24, r10
    6102:	0e 94 d6 10 	call	0x21ac	; 0x21ac <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
    6106:	49 85       	ldd	r20, Y+9	; 0x09
    6108:	5a 85       	ldd	r21, Y+10	; 0x0a
    610a:	6b 85       	ldd	r22, Y+11	; 0x0b
    610c:	7c 85       	ldd	r23, Y+12	; 0x0c
    610e:	41 15       	cp	r20, r1
    6110:	51 05       	cpc	r21, r1
    6112:	61 05       	cpc	r22, r1
    6114:	71 05       	cpc	r23, r1
    6116:	79 f0       	breq	.+30     	; 0x6136 <VL53L0X_get_pal_range_status+0x108>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
    6118:	22 24       	eor	r2, r2
    611a:	23 94       	inc	r2
    611c:	4d 80       	ldd	r4, Y+5	; 0x05
    611e:	5e 80       	ldd	r5, Y+6	; 0x06
    6120:	6f 80       	ldd	r6, Y+7	; 0x07
    6122:	78 84       	ldd	r7, Y+8	; 0x08
    6124:	44 15       	cp	r20, r4
    6126:	55 05       	cpc	r21, r5
    6128:	66 05       	cpc	r22, r6
    612a:	77 05       	cpc	r23, r7
    612c:	28 f0       	brcs	.+10     	; 0x6138 <VL53L0X_get_pal_range_status+0x10a>
    612e:	21 2c       	mov	r2, r1
    6130:	03 c0       	rjmp	.+6      	; 0x6138 <VL53L0X_get_pal_range_status+0x10a>
    6132:	21 2c       	mov	r2, r1
    6134:	01 c0       	rjmp	.+2      	; 0x6138 <VL53L0X_get_pal_range_status+0x10a>
    6136:	21 2c       	mov	r2, r1

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
    6138:	81 11       	cpse	r24, r1
    613a:	0c c0       	rjmp	.+24     	; 0x6154 <VL53L0X_get_pal_range_status+0x126>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    613c:	ae 01       	movw	r20, r28
    613e:	4d 5f       	subi	r20, 0xFD	; 253
    6140:	5f 4f       	sbci	r21, 0xFF	; 255
    6142:	62 e0       	ldi	r22, 0x02	; 2
    6144:	70 e0       	ldi	r23, 0x00	; 0
    6146:	c5 01       	movw	r24, r10
    6148:	0e 94 4d 10 	call	0x209a	; 0x209a <VL53L0X_GetLimitCheckEnable>
    614c:	03 c0       	rjmp	.+6      	; 0x6154 <VL53L0X_get_pal_range_status+0x126>
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
    614e:	21 2c       	mov	r2, r1
    6150:	01 c0       	rjmp	.+2      	; 0x6154 <VL53L0X_get_pal_range_status+0x126>
    6152:	21 2c       	mov	r2, r1
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
    6154:	9b 81       	ldd	r25, Y+3	; 0x03
    6156:	99 23       	and	r25, r25
    6158:	09 f4       	brne	.+2      	; 0x615c <VL53L0X_get_pal_range_status+0x12e>
    615a:	3e c0       	rjmp	.+124    	; 0x61d8 <VL53L0X_get_pal_range_status+0x1aa>
    615c:	81 11       	cpse	r24, r1
    615e:	fc c0       	rjmp	.+504    	; 0x6358 <VL53L0X_get_pal_range_status+0x32a>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
    6160:	ae 01       	movw	r20, r28
    6162:	43 5f       	subi	r20, 0xF3	; 243
    6164:	5f 4f       	sbci	r21, 0xFF	; 255
    6166:	62 e0       	ldi	r22, 0x02	; 2
    6168:	70 e0       	ldi	r23, 0x00	; 0
    616a:	c5 01       	movw	r24, r10
    616c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
    6170:	81 11       	cpse	r24, r1
    6172:	12 c0       	rjmp	.+36     	; 0x6198 <VL53L0X_get_pal_range_status+0x16a>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
    6174:	41 e0       	ldi	r20, 0x01	; 1
    6176:	6f ef       	ldi	r22, 0xFF	; 255
    6178:	c5 01       	movw	r24, r10
    617a:	3f d1       	rcall	.+638    	; 0x63fa <VL53L0X_WrByte>

		if (Status == VL53L0X_ERROR_NONE)
    617c:	81 11       	cpse	r24, r1
    617e:	0c c0       	rjmp	.+24     	; 0x6198 <VL53L0X_get_pal_range_status+0x16a>
			Status = VL53L0X_RdWord(Dev,
    6180:	ae 01       	movw	r20, r28
    6182:	4b 5e       	subi	r20, 0xEB	; 235
    6184:	5f 4f       	sbci	r21, 0xFF	; 255
    6186:	66 eb       	ldi	r22, 0xB6	; 182
    6188:	c5 01       	movw	r24, r10
    618a:	b1 d1       	rcall	.+866    	; 0x64ee <VL53L0X_RdWord>
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
    618c:	81 11       	cpse	r24, r1
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
    618e:	04 c0       	rjmp	.+8      	; 0x6198 <VL53L0X_get_pal_range_status+0x16a>
    6190:	40 e0       	ldi	r20, 0x00	; 0
    6192:	6f ef       	ldi	r22, 0xFF	; 255
    6194:	c5 01       	movw	r24, r10

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
    6196:	31 d1       	rcall	.+610    	; 0x63fa <VL53L0X_WrByte>
    6198:	9d 89       	ldd	r25, Y+21	; 0x15
    619a:	40 e0       	ldi	r20, 0x00	; 0
    619c:	50 e0       	ldi	r21, 0x00	; 0
    619e:	59 2f       	mov	r21, r25
    61a0:	55 0f       	add	r21, r21
    61a2:	60 e0       	ldi	r22, 0x00	; 0
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
    61a4:	70 e0       	ldi	r23, 0x00	; 0
    61a6:	f5 01       	movw	r30, r10
    61a8:	ee 5c       	subi	r30, 0xCE	; 206
    61aa:	fe 4f       	sbci	r31, 0xFE	; 254
    61ac:	40 83       	st	Z, r20
    61ae:	51 83       	std	Z+1, r21	; 0x01
    61b0:	62 83       	std	Z+2, r22	; 0x02

		if ((SignalRefClipValue > 0) &&
    61b2:	73 83       	std	Z+3, r23	; 0x03
    61b4:	4d 84       	ldd	r4, Y+13	; 0x0d
    61b6:	5e 84       	ldd	r5, Y+14	; 0x0e
    61b8:	6f 84       	ldd	r6, Y+15	; 0x0f
    61ba:	78 88       	ldd	r7, Y+16	; 0x10
    61bc:	41 14       	cp	r4, r1
    61be:	51 04       	cpc	r5, r1
    61c0:	61 04       	cpc	r6, r1
    61c2:	71 04       	cpc	r7, r1
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
    61c4:	59 f0       	breq	.+22     	; 0x61dc <VL53L0X_get_pal_range_status+0x1ae>
    61c6:	f1 e0       	ldi	r31, 0x01	; 1
    61c8:	fb 8f       	std	Y+27, r31	; 0x1b
    61ca:	44 16       	cp	r4, r20
    61cc:	55 06       	cpc	r5, r21
    61ce:	66 06       	cpc	r6, r22
    61d0:	77 06       	cpc	r7, r23
    61d2:	28 f0       	brcs	.+10     	; 0x61de <VL53L0X_get_pal_range_status+0x1b0>
    61d4:	1b 8e       	std	Y+27, r1	; 0x1b
    61d6:	03 c0       	rjmp	.+6      	; 0x61de <VL53L0X_get_pal_range_status+0x1b0>
    61d8:	1b 8e       	std	Y+27, r1	; 0x1b
    61da:	01 c0       	rjmp	.+2      	; 0x61de <VL53L0X_get_pal_range_status+0x1b0>
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
    61dc:	1b 8e       	std	Y+27, r1	; 0x1b
    61de:	81 11       	cpse	r24, r1
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
    61e0:	bc c0       	rjmp	.+376    	; 0x635a <VL53L0X_get_pal_range_status+0x32c>
    61e2:	ae 01       	movw	r20, r28
    61e4:	4c 5f       	subi	r20, 0xFC	; 252
    61e6:	5f 4f       	sbci	r21, 0xFF	; 255
    61e8:	63 e0       	ldi	r22, 0x03	; 3
    61ea:	70 e0       	ldi	r23, 0x00	; 0
    61ec:	c5 01       	movw	r24, r10
    61ee:	0e 94 4d 10 	call	0x209a	; 0x209a <VL53L0X_GetLimitCheckEnable>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    61f2:	9c 81       	ldd	r25, Y+4	; 0x04
    61f4:	99 23       	and	r25, r25
    61f6:	89 f1       	breq	.+98     	; 0x625a <VL53L0X_get_pal_range_status+0x22c>
    61f8:	81 11       	cpse	r24, r1
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
    61fa:	6b c0       	rjmp	.+214    	; 0x62d2 <VL53L0X_get_pal_range_status+0x2a4>
    61fc:	81 14       	cp	r8, r1
    61fe:	91 04       	cpc	r9, r1
			SignalRatePerSpad = 0;
		} else {
			SignalRatePerSpad = (f1616)((256 * SignalRate)
    6200:	79 f0       	breq	.+30     	; 0x6220 <VL53L0X_get_pal_range_status+0x1f2>
    6202:	2d 8d       	ldd	r18, Y+29	; 0x1d
    6204:	3e 8d       	ldd	r19, Y+30	; 0x1e
    6206:	4f 8d       	ldd	r20, Y+31	; 0x1f
    6208:	58 a1       	ldd	r21, Y+32	; 0x20
    620a:	94 2f       	mov	r25, r20
    620c:	83 2f       	mov	r24, r19
    620e:	72 2f       	mov	r23, r18
    6210:	66 27       	eor	r22, r22
    6212:	94 01       	movw	r18, r8
    6214:	40 e0       	ldi	r20, 0x00	; 0
    6216:	50 e0       	ldi	r21, 0x00	; 0
    6218:	d5 d1       	rcall	.+938    	; 0x65c4 <__udivmodsi4>
    621a:	29 01       	movw	r4, r18
    621c:	3a 01       	movw	r6, r20
	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
			SignalRatePerSpad = 0;
    621e:	03 c0       	rjmp	.+6      	; 0x6226 <VL53L0X_get_pal_range_status+0x1f8>
    6220:	41 2c       	mov	r4, r1
    6222:	51 2c       	mov	r5, r1
		} else {
			SignalRatePerSpad = (f1616)((256 * SignalRate)
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
    6224:	32 01       	movw	r6, r4
    6226:	ae 01       	movw	r20, r28
    6228:	4f 5e       	subi	r20, 0xEF	; 239
    622a:	5f 4f       	sbci	r21, 0xFF	; 255
    622c:	63 e0       	ldi	r22, 0x03	; 3
    622e:	70 e0       	ldi	r23, 0x00	; 0
    6230:	c5 01       	movw	r24, r10
    6232:	0e 94 d6 10 	call	0x21ac	; 0x21ac <VL53L0X_GetLimitCheckValue>
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
    6236:	49 89       	ldd	r20, Y+17	; 0x11
    6238:	5a 89       	ldd	r21, Y+18	; 0x12
    623a:	6b 89       	ldd	r22, Y+19	; 0x13
    623c:	7c 89       	ldd	r23, Y+20	; 0x14
    623e:	41 15       	cp	r20, r1
    6240:	51 05       	cpc	r21, r1
    6242:	61 05       	cpc	r22, r1
    6244:	71 05       	cpc	r23, r1
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
    6246:	59 f0       	breq	.+22     	; 0x625e <VL53L0X_get_pal_range_status+0x230>
    6248:	99 24       	eor	r9, r9
    624a:	93 94       	inc	r9
    624c:	44 16       	cp	r4, r20
    624e:	55 06       	cpc	r5, r21
    6250:	66 06       	cpc	r6, r22
    6252:	77 06       	cpc	r7, r23
    6254:	28 f0       	brcs	.+10     	; 0x6260 <VL53L0X_get_pal_range_status+0x232>
    6256:	91 2c       	mov	r9, r1
    6258:	03 c0       	rjmp	.+6      	; 0x6260 <VL53L0X_get_pal_range_status+0x232>
    625a:	91 2c       	mov	r9, r1
    625c:	01 c0       	rjmp	.+2      	; 0x6260 <VL53L0X_get_pal_range_status+0x232>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
    625e:	91 2c       	mov	r9, r1
    6260:	81 11       	cpse	r24, r1
		if (NoneFlag == 1) {
    6262:	3a c0       	rjmp	.+116    	; 0x62d8 <VL53L0X_get_pal_range_status+0x2aa>
    6264:	3c 8d       	ldd	r19, Y+28	; 0x1c
    6266:	31 30       	cpi	r19, 0x01	; 1
			*pPalRangeStatus = 255;	 /* NONE */
    6268:	21 f4       	brne	.+8      	; 0x6272 <VL53L0X_get_pal_range_status+0x244>
    626a:	8f ef       	ldi	r24, 0xFF	; 255
    626c:	f6 01       	movw	r30, r12
    626e:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 1 ||
    6270:	3a c0       	rjmp	.+116    	; 0x62e6 <VL53L0X_get_pal_range_status+0x2b8>
    6272:	8f ef       	ldi	r24, 0xFF	; 255
    6274:	80 0f       	add	r24, r16
    6276:	83 30       	cpi	r24, 0x03	; 3
					DeviceRangeStatusInternal == 2 ||
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
    6278:	20 f4       	brcc	.+8      	; 0x6282 <VL53L0X_get_pal_range_status+0x254>
    627a:	85 e0       	ldi	r24, 0x05	; 5
    627c:	f6 01       	movw	r30, r12
    627e:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 6 ||
    6280:	32 c0       	rjmp	.+100    	; 0x62e6 <VL53L0X_get_pal_range_status+0x2b8>
    6282:	f6 e0       	ldi	r31, 0x06	; 6
    6284:	3f 16       	cp	r3, r31
    6286:	19 f0       	breq	.+6      	; 0x628e <VL53L0X_get_pal_range_status+0x260>
    6288:	29 e0       	ldi	r18, 0x09	; 9
    628a:	32 12       	cpse	r3, r18
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
    628c:	04 c0       	rjmp	.+8      	; 0x6296 <VL53L0X_get_pal_range_status+0x268>
    628e:	84 e0       	ldi	r24, 0x04	; 4
    6290:	f6 01       	movw	r30, r12
    6292:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 8 ||
    6294:	28 c0       	rjmp	.+80     	; 0x62e6 <VL53L0X_get_pal_range_status+0x2b8>
    6296:	0d 7f       	andi	r16, 0xFD	; 253
    6298:	08 30       	cpi	r16, 0x08	; 8
					DeviceRangeStatusInternal == 10 ||
    629a:	19 f0       	breq	.+6      	; 0x62a2 <VL53L0X_get_pal_range_status+0x274>
    629c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    629e:	f1 30       	cpi	r31, 0x01	; 1
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
    62a0:	21 f4       	brne	.+8      	; 0x62aa <VL53L0X_get_pal_range_status+0x27c>
    62a2:	83 e0       	ldi	r24, 0x03	; 3
    62a4:	f6 01       	movw	r30, r12
    62a6:	80 83       	st	Z, r24
		} else if (DeviceRangeStatusInternal == 4 ||
    62a8:	1e c0       	rjmp	.+60     	; 0x62e6 <VL53L0X_get_pal_range_status+0x2b8>
    62aa:	f4 e0       	ldi	r31, 0x04	; 4
    62ac:	3f 16       	cp	r3, r31
    62ae:	19 f0       	breq	.+6      	; 0x62b6 <VL53L0X_get_pal_range_status+0x288>
    62b0:	21 e0       	ldi	r18, 0x01	; 1
    62b2:	92 12       	cpse	r9, r18
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
    62b4:	04 c0       	rjmp	.+8      	; 0x62be <VL53L0X_get_pal_range_status+0x290>
    62b6:	82 e0       	ldi	r24, 0x02	; 2
    62b8:	f6 01       	movw	r30, r12
    62ba:	80 83       	st	Z, r24
		} else if (SigmaLimitflag == 1) {
    62bc:	14 c0       	rjmp	.+40     	; 0x62e6 <VL53L0X_get_pal_range_status+0x2b8>
    62be:	f1 e0       	ldi	r31, 0x01	; 1
    62c0:	2f 12       	cpse	r2, r31
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
    62c2:	04 c0       	rjmp	.+8      	; 0x62cc <VL53L0X_get_pal_range_status+0x29e>
    62c4:	81 e0       	ldi	r24, 0x01	; 1
    62c6:	f6 01       	movw	r30, r12
    62c8:	80 83       	st	Z, r24
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
    62ca:	0d c0       	rjmp	.+26     	; 0x62e6 <VL53L0X_get_pal_range_status+0x2b8>
    62cc:	f6 01       	movw	r30, r12
    62ce:	10 82       	st	Z, r1
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
    62d0:	07 c0       	rjmp	.+14     	; 0x62e0 <VL53L0X_get_pal_range_status+0x2b2>
    62d2:	91 2c       	mov	r9, r1
    62d4:	01 c0       	rjmp	.+2      	; 0x62d8 <VL53L0X_get_pal_range_status+0x2aa>
			*pPalRangeStatus = 0; /* Range Valid */
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
    62d6:	91 2c       	mov	r9, r1
    62d8:	f6 01       	movw	r30, r12
    62da:	80 81       	ld	r24, Z
    62dc:	81 11       	cpse	r24, r1
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
    62de:	03 c0       	rjmp	.+6      	; 0x62e6 <VL53L0X_get_pal_range_status+0x2b8>
    62e0:	f7 01       	movw	r30, r14
    62e2:	13 86       	std	Z+11, r1	; 0x0b

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
    62e4:	12 86       	std	Z+10, r1	; 0x0a
    62e6:	ae 01       	movw	r20, r28
    62e8:	4e 5f       	subi	r20, 0xFE	; 254
    62ea:	5f 4f       	sbci	r21, 0xFF	; 255
    62ec:	61 e0       	ldi	r22, 0x01	; 1
    62ee:	70 e0       	ldi	r23, 0x00	; 0
    62f0:	c5 01       	movw	r24, r10
    62f2:	0e 94 4d 10 	call	0x209a	; 0x209a <VL53L0X_GetLimitCheckEnable>
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
    62f6:	81 11       	cpse	r24, r1
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
    62f8:	35 c0       	rjmp	.+106    	; 0x6364 <VL53L0X_get_pal_range_status+0x336>
    62fa:	99 81       	ldd	r25, Y+1	; 0x01
    62fc:	99 23       	and	r25, r25
			Temp8 = 1;
    62fe:	29 f0       	breq	.+10     	; 0x630a <VL53L0X_get_pal_range_status+0x2dc>
    6300:	91 e0       	ldi	r25, 0x01	; 1
    6302:	29 16       	cp	r2, r25
    6304:	19 f0       	breq	.+6      	; 0x630c <VL53L0X_get_pal_range_status+0x2de>
    6306:	90 e0       	ldi	r25, 0x00	; 0
    6308:	01 c0       	rjmp	.+2      	; 0x630c <VL53L0X_get_pal_range_status+0x2de>
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    630a:	91 e0       	ldi	r25, 0x01	; 1
    630c:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
    630e:	93 a7       	std	Z+43, r25	; 0x2b
    6310:	f4 e0       	ldi	r31, 0x04	; 4
    6312:	3f 16       	cp	r3, r31
				(SignalRateFinalRangeLimitCheckEnable == 0))
			Temp8 = 1;
    6314:	31 f0       	breq	.+12     	; 0x6322 <VL53L0X_get_pal_range_status+0x2f4>
    6316:	91 e0       	ldi	r25, 0x01	; 1
    6318:	2a 81       	ldd	r18, Y+2	; 0x02
    631a:	22 23       	and	r18, r18
    631c:	19 f0       	breq	.+6      	; 0x6324 <VL53L0X_get_pal_range_status+0x2f6>
    631e:	90 e0       	ldi	r25, 0x00	; 0
    6320:	01 c0       	rjmp	.+2      	; 0x6324 <VL53L0X_get_pal_range_status+0x2f6>
		else
			Temp8 = 0;
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    6322:	91 e0       	ldi	r25, 0x01	; 1
    6324:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
    6326:	94 a7       	std	Z+44, r25	; 0x2c
    6328:	9b 81       	ldd	r25, Y+3	; 0x03
    632a:	99 23       	and	r25, r25
					(SignalRefClipflag == 1))
			Temp8 = 1;
    632c:	31 f0       	breq	.+12     	; 0x633a <VL53L0X_get_pal_range_status+0x30c>
    632e:	91 e0       	ldi	r25, 0x01	; 1
    6330:	fb 8d       	ldd	r31, Y+27	; 0x1b
    6332:	f1 30       	cpi	r31, 0x01	; 1
    6334:	19 f0       	breq	.+6      	; 0x633c <VL53L0X_get_pal_range_status+0x30e>
    6336:	90 e0       	ldi	r25, 0x00	; 0
    6338:	01 c0       	rjmp	.+2      	; 0x633c <VL53L0X_get_pal_range_status+0x30e>
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    633a:	91 e0       	ldi	r25, 0x01	; 1
    633c:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
    633e:	95 a7       	std	Z+45, r25	; 0x2d
    6340:	9c 81       	ldd	r25, Y+4	; 0x04
    6342:	99 23       	and	r25, r25
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
    6344:	29 f0       	breq	.+10     	; 0x6350 <VL53L0X_get_pal_range_status+0x322>
    6346:	91 e0       	ldi	r25, 0x01	; 1
    6348:	99 16       	cp	r9, r25
    634a:	19 f0       	breq	.+6      	; 0x6352 <VL53L0X_get_pal_range_status+0x324>
    634c:	90 e0       	ldi	r25, 0x00	; 0
    634e:	01 c0       	rjmp	.+2      	; 0x6352 <VL53L0X_get_pal_range_status+0x324>
		else
			Temp8 = 0;

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
    6350:	91 e0       	ldi	r25, 0x01	; 1
    6352:	f5 01       	movw	r30, r10
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	return Status;
    6354:	96 a7       	std	Z+46, r25	; 0x2e
		u8 *pPalRangeStatus)
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
    6356:	06 c0       	rjmp	.+12     	; 0x6364 <VL53L0X_get_pal_range_status+0x336>
	if (Status == VL53L0X_ERROR_NONE)
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
    6358:	1b 8e       	std	Y+27, r1	; 0x1b
    635a:	9c 81       	ldd	r25, Y+4	; 0x04
    635c:	91 11       	cpse	r25, r1
{
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
	u8 NoneFlag;
	u8 SigmaLimitflag = 0;
	u8 SignalRefClipflag = 0;
	u8 RangeIgnoreThresholdflag = 0;
    635e:	bb cf       	rjmp	.-138    	; 0x62d6 <VL53L0X_get_pal_range_status+0x2a8>
    6360:	91 2c       	mov	r9, r1
				Temp8);
	}

	return Status;

}
    6362:	7e cf       	rjmp	.-260    	; 0x6260 <VL53L0X_get_pal_range_status+0x232>
    6364:	a0 96       	adiw	r28, 0x20	; 32
    6366:	0f b6       	in	r0, 0x3f	; 63
    6368:	f8 94       	cli
    636a:	de bf       	out	0x3e, r29	; 62
    636c:	0f be       	out	0x3f, r0	; 63
    636e:	cd bf       	out	0x3d, r28	; 61
    6370:	df 91       	pop	r29
    6372:	cf 91       	pop	r28
    6374:	1f 91       	pop	r17
    6376:	0f 91       	pop	r16
    6378:	ff 90       	pop	r15
    637a:	ef 90       	pop	r14
    637c:	df 90       	pop	r13
    637e:	cf 90       	pop	r12
    6380:	bf 90       	pop	r11
    6382:	af 90       	pop	r10
    6384:	9f 90       	pop	r9
    6386:	8f 90       	pop	r8
    6388:	7f 90       	pop	r7
    638a:	6f 90       	pop	r6
    638c:	5f 90       	pop	r5
    638e:	4f 90       	pop	r4
    6390:	3f 90       	pop	r3
    6392:	2f 90       	pop	r2
    6394:	08 95       	ret

00006396 <VL53L0X_WriteMulti>:

	if (status_int != 0)
		Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    6396:	0f 93       	push	r16
    6398:	1f 93       	push	r17
    639a:	cf 93       	push	r28
    639c:	00 34       	cpi	r16, 0x40	; 64
    639e:	11 05       	cpc	r17, r1
    63a0:	21 05       	cpc	r18, r1
    63a2:	31 05       	cpc	r19, r1
    63a4:	10 f0       	brcs	.+4      	; 0x63aa <VL53L0X_WriteMulti+0x14>
    63a6:	cc ef       	ldi	r28, 0xFC	; 252
    63a8:	01 c0       	rjmp	.+2      	; 0x63ac <VL53L0X_WriteMulti+0x16>
    63aa:	c0 e0       	ldi	r28, 0x00	; 0
    63ac:	fc 01       	movw	r30, r24
    63ae:	ef 5b       	subi	r30, 0xBF	; 191
    63b0:	fe 4f       	sbci	r31, 0xFE	; 254
    63b2:	20 2f       	mov	r18, r16
    63b4:	80 81       	ld	r24, Z
    63b6:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>
    63ba:	81 11       	cpse	r24, r1
    63bc:	cc ee       	ldi	r28, 0xEC	; 236
    63be:	8c 2f       	mov	r24, r28
    63c0:	cf 91       	pop	r28
    63c2:	1f 91       	pop	r17
    63c4:	0f 91       	pop	r16
    63c6:	08 95       	ret

000063c8 <VL53L0X_ReadMulti>:
    63c8:	0f 93       	push	r16
    63ca:	1f 93       	push	r17
    63cc:	cf 93       	push	r28
    63ce:	00 34       	cpi	r16, 0x40	; 64
    63d0:	11 05       	cpc	r17, r1
    63d2:	21 05       	cpc	r18, r1
    63d4:	31 05       	cpc	r19, r1
    63d6:	10 f0       	brcs	.+4      	; 0x63dc <VL53L0X_ReadMulti+0x14>
    63d8:	cc ef       	ldi	r28, 0xFC	; 252
    63da:	01 c0       	rjmp	.+2      	; 0x63de <VL53L0X_ReadMulti+0x16>
    63dc:	c0 e0       	ldi	r28, 0x00	; 0
    63de:	fc 01       	movw	r30, r24
    63e0:	ef 5b       	subi	r30, 0xBF	; 191
    63e2:	fe 4f       	sbci	r31, 0xFE	; 254
    63e4:	20 2f       	mov	r18, r16
    63e6:	80 81       	ld	r24, Z
    63e8:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>
    63ec:	81 11       	cpse	r24, r1
    63ee:	cc ee       	ldi	r28, 0xEC	; 236
    63f0:	8c 2f       	mov	r24, r28
    63f2:	cf 91       	pop	r28
    63f4:	1f 91       	pop	r17
    63f6:	0f 91       	pop	r16
    63f8:	08 95       	ret

000063fa <VL53L0X_WrByte>:
    63fa:	cf 93       	push	r28
    63fc:	df 93       	push	r29
    63fe:	1f 92       	push	r1
    6400:	cd b7       	in	r28, 0x3d	; 61
    6402:	de b7       	in	r29, 0x3e	; 62
    6404:	49 83       	std	Y+1, r20	; 0x01
    6406:	8f 5b       	subi	r24, 0xBF	; 191
    6408:	9e 4f       	sbci	r25, 0xFE	; 254
    640a:	21 e0       	ldi	r18, 0x01	; 1
    640c:	ae 01       	movw	r20, r28
    640e:	4f 5f       	subi	r20, 0xFF	; 255
    6410:	5f 4f       	sbci	r21, 0xFF	; 255
    6412:	fc 01       	movw	r30, r24
    6414:	80 81       	ld	r24, Z
    6416:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>
    641a:	88 23       	and	r24, r24
    641c:	11 f0       	breq	.+4      	; 0x6422 <VL53L0X_WrByte+0x28>
    641e:	8c ee       	ldi	r24, 0xEC	; 236
    6420:	01 c0       	rjmp	.+2      	; 0x6424 <VL53L0X_WrByte+0x2a>
    6422:	80 e0       	ldi	r24, 0x00	; 0
    6424:	0f 90       	pop	r0
    6426:	df 91       	pop	r29
    6428:	cf 91       	pop	r28
    642a:	08 95       	ret

0000642c <VL53L0X_WrWord>:
    642c:	cf 93       	push	r28
    642e:	df 93       	push	r29
    6430:	00 d0       	rcall	.+0      	; 0x6432 <VL53L0X_WrWord+0x6>
    6432:	cd b7       	in	r28, 0x3d	; 61
    6434:	de b7       	in	r29, 0x3e	; 62
    6436:	59 83       	std	Y+1, r21	; 0x01
    6438:	4a 83       	std	Y+2, r20	; 0x02
    643a:	8f 5b       	subi	r24, 0xBF	; 191
    643c:	9e 4f       	sbci	r25, 0xFE	; 254
    643e:	22 e0       	ldi	r18, 0x02	; 2
    6440:	ae 01       	movw	r20, r28
    6442:	4f 5f       	subi	r20, 0xFF	; 255
    6444:	5f 4f       	sbci	r21, 0xFF	; 255
    6446:	fc 01       	movw	r30, r24
    6448:	80 81       	ld	r24, Z
    644a:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>
    644e:	88 23       	and	r24, r24
    6450:	11 f0       	breq	.+4      	; 0x6456 <VL53L0X_WrWord+0x2a>
    6452:	8c ee       	ldi	r24, 0xEC	; 236
    6454:	01 c0       	rjmp	.+2      	; 0x6458 <VL53L0X_WrWord+0x2c>
    6456:	80 e0       	ldi	r24, 0x00	; 0
    6458:	0f 90       	pop	r0
    645a:	0f 90       	pop	r0
    645c:	df 91       	pop	r29
    645e:	cf 91       	pop	r28
    6460:	08 95       	ret

00006462 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, u8 index, u8 AndData, u8 OrData){
    6462:	df 92       	push	r13
    6464:	ef 92       	push	r14
    6466:	ff 92       	push	r15
    6468:	0f 93       	push	r16
    646a:	1f 93       	push	r17
    646c:	cf 93       	push	r28
    646e:	df 93       	push	r29
    6470:	1f 92       	push	r1
    6472:	cd b7       	in	r28, 0x3d	; 61
    6474:	de b7       	in	r29, 0x3e	; 62
    6476:	8c 01       	movw	r16, r24
    6478:	f6 2e       	mov	r15, r22
    647a:	d4 2e       	mov	r13, r20
    647c:	e2 2e       	mov	r14, r18
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;
    u8 data;

	status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, &data, 1);
    647e:	fc 01       	movw	r30, r24
    6480:	ef 5b       	subi	r30, 0xBF	; 191
    6482:	fe 4f       	sbci	r31, 0xFE	; 254
    6484:	21 e0       	ldi	r18, 0x01	; 1
    6486:	ae 01       	movw	r20, r28
    6488:	4f 5f       	subi	r20, 0xFF	; 255
    648a:	5f 4f       	sbci	r21, 0xFF	; 255
    648c:	80 81       	ld	r24, Z
    648e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

    if (status_int != 0)
    6492:	88 23       	and	r24, r24
    6494:	21 f0       	breq	.+8      	; 0x649e <VL53L0X_UpdateByte+0x3c>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    6496:	8c ee       	ldi	r24, 0xEC	; 236
    6498:	14 c0       	rjmp	.+40     	; 0x64c2 <VL53L0X_UpdateByte+0x60>
    649a:	80 e0       	ldi	r24, 0x00	; 0
    649c:	12 c0       	rjmp	.+36     	; 0x64c2 <VL53L0X_UpdateByte+0x60>

    if (Status == VL53L0X_ERROR_NONE) {
        data = (data & AndData) | OrData;
    649e:	49 81       	ldd	r20, Y+1	; 0x01
    64a0:	4d 21       	and	r20, r13
    64a2:	e4 2a       	or	r14, r20
    64a4:	e9 82       	std	Y+1, r14	; 0x01
        status_int = vl53l0x_writeRegister(Dev->I2cDevAddr, index, &data, 1);
    64a6:	f8 01       	movw	r30, r16
    64a8:	ef 5b       	subi	r30, 0xBF	; 191
    64aa:	fe 4f       	sbci	r31, 0xFE	; 254
    64ac:	21 e0       	ldi	r18, 0x01	; 1
    64ae:	ae 01       	movw	r20, r28
    64b0:	4f 5f       	subi	r20, 0xFF	; 255
    64b2:	5f 4f       	sbci	r21, 0xFF	; 255
    64b4:	6f 2d       	mov	r22, r15
    64b6:	80 81       	ld	r24, Z
    64b8:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <vl53l0x_writeRegister>

        if (status_int != 0)
    64bc:	88 23       	and	r24, r24
    64be:	69 f3       	breq	.-38     	; 0x649a <VL53L0X_UpdateByte+0x38>
            Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    64c0:	8c ee       	ldi	r24, 0xEC	; 236
    }

    return Status;
}
    64c2:	0f 90       	pop	r0
    64c4:	df 91       	pop	r29
    64c6:	cf 91       	pop	r28
    64c8:	1f 91       	pop	r17
    64ca:	0f 91       	pop	r16
    64cc:	ff 90       	pop	r15
    64ce:	ef 90       	pop	r14
    64d0:	df 90       	pop	r13
    64d2:	08 95       	ret

000064d4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, u8 index, u8 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;

	status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, data, 1);
    64d4:	8f 5b       	subi	r24, 0xBF	; 191
    64d6:	9e 4f       	sbci	r25, 0xFE	; 254
    64d8:	21 e0       	ldi	r18, 0x01	; 1
    64da:	fc 01       	movw	r30, r24
    64dc:	80 81       	ld	r24, Z
    64de:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

    if (status_int != 0)
    64e2:	88 23       	and	r24, r24
    64e4:	11 f0       	breq	.+4      	; 0x64ea <VL53L0X_RdByte+0x16>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    64e6:	8c ee       	ldi	r24, 0xEC	; 236
    64e8:	08 95       	ret

    return Status;
}

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, u8 index, u8 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    64ea:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    64ec:	08 95       	ret

000064ee <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, u8 index, u16 *data){
    64ee:	0f 93       	push	r16
    64f0:	1f 93       	push	r17
    64f2:	cf 93       	push	r28
    64f4:	df 93       	push	r29
    64f6:	00 d0       	rcall	.+0      	; 0x64f8 <VL53L0X_RdWord+0xa>
    64f8:	cd b7       	in	r28, 0x3d	; 61
    64fa:	de b7       	in	r29, 0x3e	; 62
    64fc:	8a 01       	movw	r16, r20
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;
    u8 au8_data[2];
	
    status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, au8_data, 2);
    64fe:	8f 5b       	subi	r24, 0xBF	; 191
    6500:	9e 4f       	sbci	r25, 0xFE	; 254
    6502:	22 e0       	ldi	r18, 0x02	; 2
    6504:	ae 01       	movw	r20, r28
    6506:	4f 5f       	subi	r20, 0xFF	; 255
    6508:	5f 4f       	sbci	r21, 0xFF	; 255
    650a:	fc 01       	movw	r30, r24
    650c:	80 81       	ld	r24, Z
    650e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

	*data = ((u16)au8_data[0]) << 8;
	*data |= au8_data[1];
    6512:	29 81       	ldd	r18, Y+1	; 0x01
    6514:	30 e0       	ldi	r19, 0x00	; 0
    6516:	32 2f       	mov	r19, r18
    6518:	22 27       	eor	r18, r18
    651a:	9a 81       	ldd	r25, Y+2	; 0x02
    651c:	29 2b       	or	r18, r25
    651e:	f8 01       	movw	r30, r16
    6520:	31 83       	std	Z+1, r19	; 0x01
    6522:	20 83       	st	Z, r18

    if (status_int != 0)
    6524:	88 23       	and	r24, r24
    6526:	11 f0       	breq	.+4      	; 0x652c <VL53L0X_RdWord+0x3e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    6528:	8c ee       	ldi	r24, 0xEC	; 236
    652a:	01 c0       	rjmp	.+2      	; 0x652e <VL53L0X_RdWord+0x40>

    return Status;
}

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, u8 index, u16 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    652c:	80 e0       	ldi	r24, 0x00	; 0

    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    652e:	0f 90       	pop	r0
    6530:	0f 90       	pop	r0
    6532:	df 91       	pop	r29
    6534:	cf 91       	pop	r28
    6536:	1f 91       	pop	r17
    6538:	0f 91       	pop	r16
    653a:	08 95       	ret

0000653c <VL53L0X_RdDWord>:

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, u8 index, u32 *data){
    653c:	0f 93       	push	r16
    653e:	1f 93       	push	r17
    6540:	cf 93       	push	r28
    6542:	df 93       	push	r29
    6544:	00 d0       	rcall	.+0      	; 0x6546 <VL53L0X_RdDWord+0xa>
    6546:	00 d0       	rcall	.+0      	; 0x6548 <VL53L0X_RdDWord+0xc>
    6548:	cd b7       	in	r28, 0x3d	; 61
    654a:	de b7       	in	r29, 0x3e	; 62
    654c:	8a 01       	movw	r16, r20
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    s32 status_int;
    u8 au8_data[4];
    
    status_int = vl53l0x_readRegister(Dev->I2cDevAddr, index, au8_data, 4);
    654e:	8f 5b       	subi	r24, 0xBF	; 191
    6550:	9e 4f       	sbci	r25, 0xFE	; 254
    6552:	24 e0       	ldi	r18, 0x04	; 4
    6554:	ae 01       	movw	r20, r28
    6556:	4f 5f       	subi	r20, 0xFF	; 255
    6558:	5f 4f       	sbci	r21, 0xFF	; 255
    655a:	fc 01       	movw	r30, r24
    655c:	80 81       	ld	r24, Z
    655e:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <vl53l0x_readRegister>

    *data = ((u32)au8_data[0]) << 24;
    *data |= ((u32)au8_data[1]) << 16;
    *data |= ((u32)au8_data[2]) << 8;
    *data |= au8_data[3];
    6562:	99 81       	ldd	r25, Y+1	; 0x01
    6564:	4a 81       	ldd	r20, Y+2	; 0x02
    6566:	50 e0       	ldi	r21, 0x00	; 0
    6568:	60 e0       	ldi	r22, 0x00	; 0
    656a:	70 e0       	ldi	r23, 0x00	; 0
    656c:	ba 01       	movw	r22, r20
    656e:	55 27       	eor	r21, r21
    6570:	44 27       	eor	r20, r20
    6572:	79 2b       	or	r23, r25
    6574:	9c 81       	ldd	r25, Y+4	; 0x04
    6576:	49 2b       	or	r20, r25
    6578:	9b 81       	ldd	r25, Y+3	; 0x03
    657a:	59 2b       	or	r21, r25
    657c:	f8 01       	movw	r30, r16
    657e:	40 83       	st	Z, r20
    6580:	51 83       	std	Z+1, r21	; 0x01
    6582:	62 83       	std	Z+2, r22	; 0x02
    6584:	73 83       	std	Z+3, r23	; 0x03
	
    if (status_int != 0)
    6586:	88 23       	and	r24, r24
    6588:	11 f0       	breq	.+4      	; 0x658e <VL53L0X_RdDWord+0x52>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
    658a:	8c ee       	ldi	r24, 0xEC	; 236
    658c:	01 c0       	rjmp	.+2      	; 0x6590 <VL53L0X_RdDWord+0x54>

    return Status;
}

VL53L0X_Error  VL53L0X_RdDWord(VL53L0X_DEV Dev, u8 index, u32 *data){
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
    658e:	80 e0       	ldi	r24, 0x00	; 0
	
    if (status_int != 0)
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;

    return Status;
}
    6590:	0f 90       	pop	r0
    6592:	0f 90       	pop	r0
    6594:	0f 90       	pop	r0
    6596:	0f 90       	pop	r0
    6598:	df 91       	pop	r29
    659a:	cf 91       	pop	r28
    659c:	1f 91       	pop	r17
    659e:	0f 91       	pop	r16
    65a0:	08 95       	ret

000065a2 <VL53L0X_PollingDelay>:
#define VL53L0X_POLLINGDELAY_LOOPNB  250
VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev){
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
	
    return status;
}
    65a2:	80 e0       	ldi	r24, 0x00	; 0
    65a4:	08 95       	ret

000065a6 <__mulsi3>:
    65a6:	db 01       	movw	r26, r22
    65a8:	8f 93       	push	r24
    65aa:	9f 93       	push	r25
    65ac:	61 d0       	rcall	.+194    	; 0x6670 <__muluhisi3>
    65ae:	bf 91       	pop	r27
    65b0:	af 91       	pop	r26
    65b2:	a2 9f       	mul	r26, r18
    65b4:	80 0d       	add	r24, r0
    65b6:	91 1d       	adc	r25, r1
    65b8:	a3 9f       	mul	r26, r19
    65ba:	90 0d       	add	r25, r0
    65bc:	b2 9f       	mul	r27, r18
    65be:	90 0d       	add	r25, r0
    65c0:	11 24       	eor	r1, r1
    65c2:	08 95       	ret

000065c4 <__udivmodsi4>:
    65c4:	a1 e2       	ldi	r26, 0x21	; 33
    65c6:	1a 2e       	mov	r1, r26
    65c8:	aa 1b       	sub	r26, r26
    65ca:	bb 1b       	sub	r27, r27
    65cc:	fd 01       	movw	r30, r26
    65ce:	0d c0       	rjmp	.+26     	; 0x65ea <__udivmodsi4_ep>

000065d0 <__udivmodsi4_loop>:
    65d0:	aa 1f       	adc	r26, r26
    65d2:	bb 1f       	adc	r27, r27
    65d4:	ee 1f       	adc	r30, r30
    65d6:	ff 1f       	adc	r31, r31
    65d8:	a2 17       	cp	r26, r18
    65da:	b3 07       	cpc	r27, r19
    65dc:	e4 07       	cpc	r30, r20
    65de:	f5 07       	cpc	r31, r21
    65e0:	20 f0       	brcs	.+8      	; 0x65ea <__udivmodsi4_ep>
    65e2:	a2 1b       	sub	r26, r18
    65e4:	b3 0b       	sbc	r27, r19
    65e6:	e4 0b       	sbc	r30, r20
    65e8:	f5 0b       	sbc	r31, r21

000065ea <__udivmodsi4_ep>:
    65ea:	66 1f       	adc	r22, r22
    65ec:	77 1f       	adc	r23, r23
    65ee:	88 1f       	adc	r24, r24
    65f0:	99 1f       	adc	r25, r25
    65f2:	1a 94       	dec	r1
    65f4:	69 f7       	brne	.-38     	; 0x65d0 <__udivmodsi4_loop>
    65f6:	60 95       	com	r22
    65f8:	70 95       	com	r23
    65fa:	80 95       	com	r24
    65fc:	90 95       	com	r25
    65fe:	9b 01       	movw	r18, r22
    6600:	ac 01       	movw	r20, r24
    6602:	bd 01       	movw	r22, r26
    6604:	cf 01       	movw	r24, r30
    6606:	08 95       	ret

00006608 <__divmodsi4>:
    6608:	05 2e       	mov	r0, r21
    660a:	97 fb       	bst	r25, 7
    660c:	16 f4       	brtc	.+4      	; 0x6612 <__divmodsi4+0xa>
    660e:	00 94       	com	r0
    6610:	0f d0       	rcall	.+30     	; 0x6630 <__negsi2>
    6612:	57 fd       	sbrc	r21, 7
    6614:	05 d0       	rcall	.+10     	; 0x6620 <__divmodsi4_neg2>
    6616:	d6 df       	rcall	.-84     	; 0x65c4 <__udivmodsi4>
    6618:	07 fc       	sbrc	r0, 7
    661a:	02 d0       	rcall	.+4      	; 0x6620 <__divmodsi4_neg2>
    661c:	46 f4       	brtc	.+16     	; 0x662e <__divmodsi4_exit>
    661e:	08 c0       	rjmp	.+16     	; 0x6630 <__negsi2>

00006620 <__divmodsi4_neg2>:
    6620:	50 95       	com	r21
    6622:	40 95       	com	r20
    6624:	30 95       	com	r19
    6626:	21 95       	neg	r18
    6628:	3f 4f       	sbci	r19, 0xFF	; 255
    662a:	4f 4f       	sbci	r20, 0xFF	; 255
    662c:	5f 4f       	sbci	r21, 0xFF	; 255

0000662e <__divmodsi4_exit>:
    662e:	08 95       	ret

00006630 <__negsi2>:
    6630:	90 95       	com	r25
    6632:	80 95       	com	r24
    6634:	70 95       	com	r23
    6636:	61 95       	neg	r22
    6638:	7f 4f       	sbci	r23, 0xFF	; 255
    663a:	8f 4f       	sbci	r24, 0xFF	; 255
    663c:	9f 4f       	sbci	r25, 0xFF	; 255
    663e:	08 95       	ret

00006640 <__tablejump2__>:
    6640:	ee 0f       	add	r30, r30
    6642:	ff 1f       	adc	r31, r31
    6644:	00 24       	eor	r0, r0
    6646:	00 1c       	adc	r0, r0
    6648:	0b be       	out	0x3b, r0	; 59
    664a:	07 90       	elpm	r0, Z+
    664c:	f6 91       	elpm	r31, Z
    664e:	e0 2d       	mov	r30, r0
    6650:	09 94       	ijmp

00006652 <__umulhisi3>:
    6652:	a2 9f       	mul	r26, r18
    6654:	b0 01       	movw	r22, r0
    6656:	b3 9f       	mul	r27, r19
    6658:	c0 01       	movw	r24, r0
    665a:	a3 9f       	mul	r26, r19
    665c:	70 0d       	add	r23, r0
    665e:	81 1d       	adc	r24, r1
    6660:	11 24       	eor	r1, r1
    6662:	91 1d       	adc	r25, r1
    6664:	b2 9f       	mul	r27, r18
    6666:	70 0d       	add	r23, r0
    6668:	81 1d       	adc	r24, r1
    666a:	11 24       	eor	r1, r1
    666c:	91 1d       	adc	r25, r1
    666e:	08 95       	ret

00006670 <__muluhisi3>:
    6670:	f0 df       	rcall	.-32     	; 0x6652 <__umulhisi3>
    6672:	a5 9f       	mul	r26, r21
    6674:	90 0d       	add	r25, r0
    6676:	b4 9f       	mul	r27, r20
    6678:	90 0d       	add	r25, r0
    667a:	a4 9f       	mul	r26, r20
    667c:	80 0d       	add	r24, r0
    667e:	91 1d       	adc	r25, r1
    6680:	11 24       	eor	r1, r1
    6682:	08 95       	ret

00006684 <__umulsidi3>:
    6684:	e8 94       	clt

00006686 <__umulsidi3_helper>:
    6686:	df 93       	push	r29
    6688:	cf 93       	push	r28
    668a:	fc 01       	movw	r30, r24
    668c:	db 01       	movw	r26, r22
    668e:	e1 df       	rcall	.-62     	; 0x6652 <__umulhisi3>
    6690:	7f 93       	push	r23
    6692:	6f 93       	push	r22
    6694:	e9 01       	movw	r28, r18
    6696:	9a 01       	movw	r18, r20
    6698:	ac 01       	movw	r20, r24
    669a:	bf 93       	push	r27
    669c:	af 93       	push	r26
    669e:	3f 93       	push	r19
    66a0:	2f 93       	push	r18
    66a2:	df 01       	movw	r26, r30
    66a4:	d6 df       	rcall	.-84     	; 0x6652 <__umulhisi3>
    66a6:	26 f4       	brtc	.+8      	; 0x66b0 <__umulsidi3_helper+0x2a>
    66a8:	6c 1b       	sub	r22, r28
    66aa:	7d 0b       	sbc	r23, r29
    66ac:	82 0b       	sbc	r24, r18
    66ae:	93 0b       	sbc	r25, r19
    66b0:	9e 01       	movw	r18, r28
    66b2:	eb 01       	movw	r28, r22
    66b4:	fc 01       	movw	r30, r24
    66b6:	2b d0       	rcall	.+86     	; 0x670e <__muldi3_6>
    66b8:	af 91       	pop	r26
    66ba:	bf 91       	pop	r27
    66bc:	2f 91       	pop	r18
    66be:	3f 91       	pop	r19
    66c0:	26 d0       	rcall	.+76     	; 0x670e <__muldi3_6>
    66c2:	be 01       	movw	r22, r28
    66c4:	cf 01       	movw	r24, r30
    66c6:	f9 01       	movw	r30, r18
    66c8:	2f 91       	pop	r18
    66ca:	3f 91       	pop	r19
    66cc:	cf 91       	pop	r28
    66ce:	df 91       	pop	r29
    66d0:	08 95       	ret

000066d2 <__ashrdi3>:
    66d2:	97 fb       	bst	r25, 7
    66d4:	10 f8       	bld	r1, 0

000066d6 <__lshrdi3>:
    66d6:	16 94       	lsr	r1
    66d8:	00 08       	sbc	r0, r0
    66da:	0f 93       	push	r16
    66dc:	08 30       	cpi	r16, 0x08	; 8
    66de:	98 f0       	brcs	.+38     	; 0x6706 <__lshrdi3+0x30>
    66e0:	08 50       	subi	r16, 0x08	; 8
    66e2:	23 2f       	mov	r18, r19
    66e4:	34 2f       	mov	r19, r20
    66e6:	45 2f       	mov	r20, r21
    66e8:	56 2f       	mov	r21, r22
    66ea:	67 2f       	mov	r22, r23
    66ec:	78 2f       	mov	r23, r24
    66ee:	89 2f       	mov	r24, r25
    66f0:	90 2d       	mov	r25, r0
    66f2:	f4 cf       	rjmp	.-24     	; 0x66dc <__lshrdi3+0x6>
    66f4:	05 94       	asr	r0
    66f6:	97 95       	ror	r25
    66f8:	87 95       	ror	r24
    66fa:	77 95       	ror	r23
    66fc:	67 95       	ror	r22
    66fe:	57 95       	ror	r21
    6700:	47 95       	ror	r20
    6702:	37 95       	ror	r19
    6704:	27 95       	ror	r18
    6706:	0a 95       	dec	r16
    6708:	aa f7       	brpl	.-22     	; 0x66f4 <__lshrdi3+0x1e>
    670a:	0f 91       	pop	r16
    670c:	08 95       	ret

0000670e <__muldi3_6>:
    670e:	a1 df       	rcall	.-190    	; 0x6652 <__umulhisi3>
    6710:	46 0f       	add	r20, r22
    6712:	57 1f       	adc	r21, r23
    6714:	c8 1f       	adc	r28, r24
    6716:	d9 1f       	adc	r29, r25
    6718:	08 f4       	brcc	.+2      	; 0x671c <__muldi3_6+0xe>
    671a:	31 96       	adiw	r30, 0x01	; 1
    671c:	08 95       	ret

0000671e <_exit>:
    671e:	f8 94       	cli

00006720 <__stop_program>:
    6720:	ff cf       	rjmp	.-2      	; 0x6720 <__stop_program>
